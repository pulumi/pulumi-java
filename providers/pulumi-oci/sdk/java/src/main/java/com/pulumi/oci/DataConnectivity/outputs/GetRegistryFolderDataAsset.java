// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryFolderDataAssetDefaultConnection;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryFolderDataAssetMetadata;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryFolderDataAssetNativeTypeSystem;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryFolderDataAssetRegistryMetadata;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRegistryFolderDataAsset {
    /**
     * @return Additional properties for the data asset.
     * 
     */
    private final Map<String,Object> assetProperties;
    /**
     * @return The default connection key.
     * 
     */
    private final List<GetRegistryFolderDataAssetDefaultConnection> defaultConnections;
    /**
     * @return User-defined description for the folder.
     * 
     */
    private final String description;
    /**
     * @return The external key for the object.
     * 
     */
    private final String externalKey;
    /**
     * @return Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    private final String identifier;
    /**
     * @return Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     * 
     */
    private final String key;
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    private final List<GetRegistryFolderDataAssetMetadata> metadatas;
    /**
     * @return The type of the folder.
     * 
     */
    private final String modelType;
    /**
     * @return The model version of an object.
     * 
     */
    private final String modelVersion;
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private final String name;
    /**
     * @return The type system maps from and to a type.
     * 
     */
    private final List<GetRegistryFolderDataAssetNativeTypeSystem> nativeTypeSystems;
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private final Integer objectStatus;
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    private final Integer objectVersion;
    /**
     * @return All the properties for the data asset in a key-value map format.
     * 
     */
    private final Map<String,Object> properties;
    /**
     * @return Information about the object and its parent.
     * 
     */
    private final List<GetRegistryFolderDataAssetRegistryMetadata> registryMetadatas;
    /**
     * @return Specific DataAsset Type
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetRegistryFolderDataAsset(
        @CustomType.Parameter("assetProperties") Map<String,Object> assetProperties,
        @CustomType.Parameter("defaultConnections") List<GetRegistryFolderDataAssetDefaultConnection> defaultConnections,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("externalKey") String externalKey,
        @CustomType.Parameter("identifier") String identifier,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("metadatas") List<GetRegistryFolderDataAssetMetadata> metadatas,
        @CustomType.Parameter("modelType") String modelType,
        @CustomType.Parameter("modelVersion") String modelVersion,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nativeTypeSystems") List<GetRegistryFolderDataAssetNativeTypeSystem> nativeTypeSystems,
        @CustomType.Parameter("objectStatus") Integer objectStatus,
        @CustomType.Parameter("objectVersion") Integer objectVersion,
        @CustomType.Parameter("properties") Map<String,Object> properties,
        @CustomType.Parameter("registryMetadatas") List<GetRegistryFolderDataAssetRegistryMetadata> registryMetadatas,
        @CustomType.Parameter("type") String type) {
        this.assetProperties = assetProperties;
        this.defaultConnections = defaultConnections;
        this.description = description;
        this.externalKey = externalKey;
        this.identifier = identifier;
        this.key = key;
        this.metadatas = metadatas;
        this.modelType = modelType;
        this.modelVersion = modelVersion;
        this.name = name;
        this.nativeTypeSystems = nativeTypeSystems;
        this.objectStatus = objectStatus;
        this.objectVersion = objectVersion;
        this.properties = properties;
        this.registryMetadatas = registryMetadatas;
        this.type = type;
    }

    /**
     * @return Additional properties for the data asset.
     * 
     */
    public Map<String,Object> assetProperties() {
        return this.assetProperties;
    }
    /**
     * @return The default connection key.
     * 
     */
    public List<GetRegistryFolderDataAssetDefaultConnection> defaultConnections() {
        return this.defaultConnections;
    }
    /**
     * @return User-defined description for the folder.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The external key for the object.
     * 
     */
    public String externalKey() {
        return this.externalKey;
    }
    /**
     * @return Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    public List<GetRegistryFolderDataAssetMetadata> metadatas() {
        return this.metadatas;
    }
    /**
     * @return The type of the folder.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The model version of an object.
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type system maps from and to a type.
     * 
     */
    public List<GetRegistryFolderDataAssetNativeTypeSystem> nativeTypeSystems() {
        return this.nativeTypeSystems;
    }
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Integer objectStatus() {
        return this.objectStatus;
    }
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    public Integer objectVersion() {
        return this.objectVersion;
    }
    /**
     * @return All the properties for the data asset in a key-value map format.
     * 
     */
    public Map<String,Object> properties() {
        return this.properties;
    }
    /**
     * @return Information about the object and its parent.
     * 
     */
    public List<GetRegistryFolderDataAssetRegistryMetadata> registryMetadatas() {
        return this.registryMetadatas;
    }
    /**
     * @return Specific DataAsset Type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryFolderDataAsset defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,Object> assetProperties;
        private List<GetRegistryFolderDataAssetDefaultConnection> defaultConnections;
        private String description;
        private String externalKey;
        private String identifier;
        private String key;
        private List<GetRegistryFolderDataAssetMetadata> metadatas;
        private String modelType;
        private String modelVersion;
        private String name;
        private List<GetRegistryFolderDataAssetNativeTypeSystem> nativeTypeSystems;
        private Integer objectStatus;
        private Integer objectVersion;
        private Map<String,Object> properties;
        private List<GetRegistryFolderDataAssetRegistryMetadata> registryMetadatas;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRegistryFolderDataAsset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assetProperties = defaults.assetProperties;
    	      this.defaultConnections = defaults.defaultConnections;
    	      this.description = defaults.description;
    	      this.externalKey = defaults.externalKey;
    	      this.identifier = defaults.identifier;
    	      this.key = defaults.key;
    	      this.metadatas = defaults.metadatas;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.nativeTypeSystems = defaults.nativeTypeSystems;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.properties = defaults.properties;
    	      this.registryMetadatas = defaults.registryMetadatas;
    	      this.type = defaults.type;
        }

        public Builder assetProperties(Map<String,Object> assetProperties) {
            this.assetProperties = Objects.requireNonNull(assetProperties);
            return this;
        }
        public Builder defaultConnections(List<GetRegistryFolderDataAssetDefaultConnection> defaultConnections) {
            this.defaultConnections = Objects.requireNonNull(defaultConnections);
            return this;
        }
        public Builder defaultConnections(GetRegistryFolderDataAssetDefaultConnection... defaultConnections) {
            return defaultConnections(List.of(defaultConnections));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder externalKey(String externalKey) {
            this.externalKey = Objects.requireNonNull(externalKey);
            return this;
        }
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder metadatas(List<GetRegistryFolderDataAssetMetadata> metadatas) {
            this.metadatas = Objects.requireNonNull(metadatas);
            return this;
        }
        public Builder metadatas(GetRegistryFolderDataAssetMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        public Builder modelType(String modelType) {
            this.modelType = Objects.requireNonNull(modelType);
            return this;
        }
        public Builder modelVersion(String modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nativeTypeSystems(List<GetRegistryFolderDataAssetNativeTypeSystem> nativeTypeSystems) {
            this.nativeTypeSystems = Objects.requireNonNull(nativeTypeSystems);
            return this;
        }
        public Builder nativeTypeSystems(GetRegistryFolderDataAssetNativeTypeSystem... nativeTypeSystems) {
            return nativeTypeSystems(List.of(nativeTypeSystems));
        }
        public Builder objectStatus(Integer objectStatus) {
            this.objectStatus = Objects.requireNonNull(objectStatus);
            return this;
        }
        public Builder objectVersion(Integer objectVersion) {
            this.objectVersion = Objects.requireNonNull(objectVersion);
            return this;
        }
        public Builder properties(Map<String,Object> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        public Builder registryMetadatas(List<GetRegistryFolderDataAssetRegistryMetadata> registryMetadatas) {
            this.registryMetadatas = Objects.requireNonNull(registryMetadatas);
            return this;
        }
        public Builder registryMetadatas(GetRegistryFolderDataAssetRegistryMetadata... registryMetadatas) {
            return registryMetadatas(List.of(registryMetadatas));
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetRegistryFolderDataAsset build() {
            return new GetRegistryFolderDataAsset(assetProperties, defaultConnections, description, externalKey, identifier, key, metadatas, modelType, modelVersion, name, nativeTypeSystems, objectStatus, objectVersion, properties, registryMetadatas, type);
        }
    }
}
