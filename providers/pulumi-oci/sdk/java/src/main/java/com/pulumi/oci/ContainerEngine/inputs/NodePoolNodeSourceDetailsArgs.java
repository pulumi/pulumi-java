// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNodeSourceDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodeSourceDetailsArgs Empty = new NodePoolNodeSourceDetailsArgs();

    /**
     * (Updatable) The size of the boot volume in GBs. Minimum value is 50 GB. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/Block/Concepts/bootvolumes.htm) for max custom boot volume sizing and OS-specific requirements.
     * 
     */
    @Import(name="bootVolumeSizeInGbs")
    private @Nullable Output<String> bootVolumeSizeInGbs;

    /**
     * @return (Updatable) The size of the boot volume in GBs. Minimum value is 50 GB. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/Block/Concepts/bootvolumes.htm) for max custom boot volume sizing and OS-specific requirements.
     * 
     */
    public Optional<Output<String>> bootVolumeSizeInGbs() {
        return Optional.ofNullable(this.bootVolumeSizeInGbs);
    }

    /**
     * (Updatable) The OCID of the image used to boot the node.
     * 
     */
    @Import(name="imageId", required=true)
    private Output<String> imageId;

    /**
     * @return (Updatable) The OCID of the image used to boot the node.
     * 
     */
    public Output<String> imageId() {
        return this.imageId;
    }

    /**
     * (Updatable) The source type for the node. Use `IMAGE` when specifying an OCID of an image.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return (Updatable) The source type for the node. Use `IMAGE` when specifying an OCID of an image.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    private NodePoolNodeSourceDetailsArgs() {}

    private NodePoolNodeSourceDetailsArgs(NodePoolNodeSourceDetailsArgs $) {
        this.bootVolumeSizeInGbs = $.bootVolumeSizeInGbs;
        this.imageId = $.imageId;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodeSourceDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodeSourceDetailsArgs $;

        public Builder() {
            $ = new NodePoolNodeSourceDetailsArgs();
        }

        public Builder(NodePoolNodeSourceDetailsArgs defaults) {
            $ = new NodePoolNodeSourceDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootVolumeSizeInGbs (Updatable) The size of the boot volume in GBs. Minimum value is 50 GB. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/Block/Concepts/bootvolumes.htm) for max custom boot volume sizing and OS-specific requirements.
         * 
         * @return builder
         * 
         */
        public Builder bootVolumeSizeInGbs(@Nullable Output<String> bootVolumeSizeInGbs) {
            $.bootVolumeSizeInGbs = bootVolumeSizeInGbs;
            return this;
        }

        /**
         * @param bootVolumeSizeInGbs (Updatable) The size of the boot volume in GBs. Minimum value is 50 GB. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/Block/Concepts/bootvolumes.htm) for max custom boot volume sizing and OS-specific requirements.
         * 
         * @return builder
         * 
         */
        public Builder bootVolumeSizeInGbs(String bootVolumeSizeInGbs) {
            return bootVolumeSizeInGbs(Output.of(bootVolumeSizeInGbs));
        }

        /**
         * @param imageId (Updatable) The OCID of the image used to boot the node.
         * 
         * @return builder
         * 
         */
        public Builder imageId(Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId (Updatable) The OCID of the image used to boot the node.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param sourceType (Updatable) The source type for the node. Use `IMAGE` when specifying an OCID of an image.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType (Updatable) The source type for the node. Use `IMAGE` when specifying an OCID of an image.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public NodePoolNodeSourceDetailsArgs build() {
            $.imageId = Objects.requireNonNull($.imageId, "expected parameter 'imageId' to be non-null");
            $.sourceType = Objects.requireNonNull($.sourceType, "expected parameter 'sourceType' to be non-null");
            return $;
        }
    }

}
