// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.LogAnalytics.inputs.LogAnalyticsImportCustomContentChangeListArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogAnalyticsImportCustomContentState extends com.pulumi.resources.ResourceArgs {

    public static final LogAnalyticsImportCustomContentState Empty = new LogAnalyticsImportCustomContentState();

    /**
     * LogAnalyticsImportCustomChangeList
     * 
     */
    @Import(name="changeLists")
    private @Nullable Output<List<LogAnalyticsImportCustomContentChangeListArgs>> changeLists;

    /**
     * @return LogAnalyticsImportCustomChangeList
     * 
     */
    public Optional<Output<List<LogAnalyticsImportCustomContentChangeListArgs>>> changeLists() {
        return Optional.ofNullable(this.changeLists);
    }

    /**
     * The content name.
     * 
     */
    @Import(name="contentName")
    private @Nullable Output<String> contentName;

    /**
     * @return The content name.
     * 
     */
    public Optional<Output<String>> contentName() {
        return Optional.ofNullable(this.contentName);
    }

    /**
     * A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
     * 
     */
    @Import(name="expect")
    private @Nullable Output<String> expect;

    /**
     * @return A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
     * 
     */
    public Optional<Output<String>> expect() {
        return Optional.ofNullable(this.expect);
    }

    /**
     * The field names.
     * 
     */
    @Import(name="fieldNames")
    private @Nullable Output<List<String>> fieldNames;

    /**
     * @return The field names.
     * 
     */
    public Optional<Output<List<String>>> fieldNames() {
        return Optional.ofNullable(this.fieldNames);
    }

    /**
     * Path to the file to upload which contains the custom content.
     * 
     */
    @Import(name="importCustomContentFile")
    private @Nullable Output<String> importCustomContentFile;

    /**
     * @return Path to the file to upload which contains the custom content.
     * 
     */
    public Optional<Output<String>> importCustomContentFile() {
        return Optional.ofNullable(this.importCustomContentFile);
    }

    /**
     * A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
     * 
     */
    @Import(name="isOverwrite")
    private @Nullable Output<Boolean> isOverwrite;

    /**
     * @return A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
     * 
     */
    public Optional<Output<Boolean>> isOverwrite() {
        return Optional.ofNullable(this.isOverwrite);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The parser names.
     * 
     */
    @Import(name="parserNames")
    private @Nullable Output<List<String>> parserNames;

    /**
     * @return The parser names.
     * 
     */
    public Optional<Output<List<String>>> parserNames() {
        return Optional.ofNullable(this.parserNames);
    }

    /**
     * The source names.
     * 
     */
    @Import(name="sourceNames")
    private @Nullable Output<List<String>> sourceNames;

    /**
     * @return The source names.
     * 
     */
    public Optional<Output<List<String>>> sourceNames() {
        return Optional.ofNullable(this.sourceNames);
    }

    private LogAnalyticsImportCustomContentState() {}

    private LogAnalyticsImportCustomContentState(LogAnalyticsImportCustomContentState $) {
        this.changeLists = $.changeLists;
        this.contentName = $.contentName;
        this.expect = $.expect;
        this.fieldNames = $.fieldNames;
        this.importCustomContentFile = $.importCustomContentFile;
        this.isOverwrite = $.isOverwrite;
        this.namespace = $.namespace;
        this.parserNames = $.parserNames;
        this.sourceNames = $.sourceNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogAnalyticsImportCustomContentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogAnalyticsImportCustomContentState $;

        public Builder() {
            $ = new LogAnalyticsImportCustomContentState();
        }

        public Builder(LogAnalyticsImportCustomContentState defaults) {
            $ = new LogAnalyticsImportCustomContentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param changeLists LogAnalyticsImportCustomChangeList
         * 
         * @return builder
         * 
         */
        public Builder changeLists(@Nullable Output<List<LogAnalyticsImportCustomContentChangeListArgs>> changeLists) {
            $.changeLists = changeLists;
            return this;
        }

        /**
         * @param changeLists LogAnalyticsImportCustomChangeList
         * 
         * @return builder
         * 
         */
        public Builder changeLists(List<LogAnalyticsImportCustomContentChangeListArgs> changeLists) {
            return changeLists(Output.of(changeLists));
        }

        /**
         * @param changeLists LogAnalyticsImportCustomChangeList
         * 
         * @return builder
         * 
         */
        public Builder changeLists(LogAnalyticsImportCustomContentChangeListArgs... changeLists) {
            return changeLists(List.of(changeLists));
        }

        /**
         * @param contentName The content name.
         * 
         * @return builder
         * 
         */
        public Builder contentName(@Nullable Output<String> contentName) {
            $.contentName = contentName;
            return this;
        }

        /**
         * @param contentName The content name.
         * 
         * @return builder
         * 
         */
        public Builder contentName(String contentName) {
            return contentName(Output.of(contentName));
        }

        /**
         * @param expect A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
         * 
         * @return builder
         * 
         */
        public Builder expect(@Nullable Output<String> expect) {
            $.expect = expect;
            return this;
        }

        /**
         * @param expect A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
         * 
         * @return builder
         * 
         */
        public Builder expect(String expect) {
            return expect(Output.of(expect));
        }

        /**
         * @param fieldNames The field names.
         * 
         * @return builder
         * 
         */
        public Builder fieldNames(@Nullable Output<List<String>> fieldNames) {
            $.fieldNames = fieldNames;
            return this;
        }

        /**
         * @param fieldNames The field names.
         * 
         * @return builder
         * 
         */
        public Builder fieldNames(List<String> fieldNames) {
            return fieldNames(Output.of(fieldNames));
        }

        /**
         * @param fieldNames The field names.
         * 
         * @return builder
         * 
         */
        public Builder fieldNames(String... fieldNames) {
            return fieldNames(List.of(fieldNames));
        }

        /**
         * @param importCustomContentFile Path to the file to upload which contains the custom content.
         * 
         * @return builder
         * 
         */
        public Builder importCustomContentFile(@Nullable Output<String> importCustomContentFile) {
            $.importCustomContentFile = importCustomContentFile;
            return this;
        }

        /**
         * @param importCustomContentFile Path to the file to upload which contains the custom content.
         * 
         * @return builder
         * 
         */
        public Builder importCustomContentFile(String importCustomContentFile) {
            return importCustomContentFile(Output.of(importCustomContentFile));
        }

        /**
         * @param isOverwrite A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
         * 
         * @return builder
         * 
         */
        public Builder isOverwrite(@Nullable Output<Boolean> isOverwrite) {
            $.isOverwrite = isOverwrite;
            return this;
        }

        /**
         * @param isOverwrite A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
         * 
         * @return builder
         * 
         */
        public Builder isOverwrite(Boolean isOverwrite) {
            return isOverwrite(Output.of(isOverwrite));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param parserNames The parser names.
         * 
         * @return builder
         * 
         */
        public Builder parserNames(@Nullable Output<List<String>> parserNames) {
            $.parserNames = parserNames;
            return this;
        }

        /**
         * @param parserNames The parser names.
         * 
         * @return builder
         * 
         */
        public Builder parserNames(List<String> parserNames) {
            return parserNames(Output.of(parserNames));
        }

        /**
         * @param parserNames The parser names.
         * 
         * @return builder
         * 
         */
        public Builder parserNames(String... parserNames) {
            return parserNames(List.of(parserNames));
        }

        /**
         * @param sourceNames The source names.
         * 
         * @return builder
         * 
         */
        public Builder sourceNames(@Nullable Output<List<String>> sourceNames) {
            $.sourceNames = sourceNames;
            return this;
        }

        /**
         * @param sourceNames The source names.
         * 
         * @return builder
         * 
         */
        public Builder sourceNames(List<String> sourceNames) {
            return sourceNames(Output.of(sourceNames));
        }

        /**
         * @param sourceNames The source names.
         * 
         * @return builder
         * 
         */
        public Builder sourceNames(String... sourceNames) {
            return sourceNames(List.of(sourceNames));
        }

        public LogAnalyticsImportCustomContentState build() {
            return $;
        }
    }

}
