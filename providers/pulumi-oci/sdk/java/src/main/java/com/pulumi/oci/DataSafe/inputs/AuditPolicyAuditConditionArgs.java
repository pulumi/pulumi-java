// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.AuditPolicyAuditConditionEnableConditionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuditPolicyAuditConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuditPolicyAuditConditionArgs Empty = new AuditPolicyAuditConditionArgs();

    /**
     * Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
     * 
     */
    @Import(name="auditPolicyName")
    private @Nullable Output<String> auditPolicyName;

    /**
     * @return Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
     * 
     */
    public Optional<Output<String>> auditPolicyName() {
        return Optional.ofNullable(this.auditPolicyName);
    }

    /**
     * Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
     * 
     */
    @Import(name="enableConditions")
    private @Nullable Output<List<AuditPolicyAuditConditionEnableConditionArgs>> enableConditions;

    /**
     * @return Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
     * 
     */
    public Optional<Output<List<AuditPolicyAuditConditionEnableConditionArgs>>> enableConditions() {
        return Optional.ofNullable(this.enableConditions);
    }

    /**
     * Indicates whether the Data Safe user activity on the target database will be audited by the policy.
     * 
     */
    @Import(name="isDataSafeServiceAccountAudited")
    private @Nullable Output<Boolean> isDataSafeServiceAccountAudited;

    /**
     * @return Indicates whether the Data Safe user activity on the target database will be audited by the policy.
     * 
     */
    public Optional<Output<Boolean>> isDataSafeServiceAccountAudited() {
        return Optional.ofNullable(this.isDataSafeServiceAccountAudited);
    }

    /**
     * Indicates whether the privileged user list is managed by Data Safe.
     * 
     */
    @Import(name="isPrivUsersManagedByDataSafe")
    private @Nullable Output<Boolean> isPrivUsersManagedByDataSafe;

    /**
     * @return Indicates whether the privileged user list is managed by Data Safe.
     * 
     */
    public Optional<Output<Boolean>> isPrivUsersManagedByDataSafe() {
        return Optional.ofNullable(this.isPrivUsersManagedByDataSafe);
    }

    private AuditPolicyAuditConditionArgs() {}

    private AuditPolicyAuditConditionArgs(AuditPolicyAuditConditionArgs $) {
        this.auditPolicyName = $.auditPolicyName;
        this.enableConditions = $.enableConditions;
        this.isDataSafeServiceAccountAudited = $.isDataSafeServiceAccountAudited;
        this.isPrivUsersManagedByDataSafe = $.isPrivUsersManagedByDataSafe;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuditPolicyAuditConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuditPolicyAuditConditionArgs $;

        public Builder() {
            $ = new AuditPolicyAuditConditionArgs();
        }

        public Builder(AuditPolicyAuditConditionArgs defaults) {
            $ = new AuditPolicyAuditConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auditPolicyName Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
         * 
         * @return builder
         * 
         */
        public Builder auditPolicyName(@Nullable Output<String> auditPolicyName) {
            $.auditPolicyName = auditPolicyName;
            return this;
        }

        /**
         * @param auditPolicyName Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
         * 
         * @return builder
         * 
         */
        public Builder auditPolicyName(String auditPolicyName) {
            return auditPolicyName(Output.of(auditPolicyName));
        }

        /**
         * @param enableConditions Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
         * 
         * @return builder
         * 
         */
        public Builder enableConditions(@Nullable Output<List<AuditPolicyAuditConditionEnableConditionArgs>> enableConditions) {
            $.enableConditions = enableConditions;
            return this;
        }

        /**
         * @param enableConditions Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
         * 
         * @return builder
         * 
         */
        public Builder enableConditions(List<AuditPolicyAuditConditionEnableConditionArgs> enableConditions) {
            return enableConditions(Output.of(enableConditions));
        }

        /**
         * @param enableConditions Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
         * 
         * @return builder
         * 
         */
        public Builder enableConditions(AuditPolicyAuditConditionEnableConditionArgs... enableConditions) {
            return enableConditions(List.of(enableConditions));
        }

        /**
         * @param isDataSafeServiceAccountAudited Indicates whether the Data Safe user activity on the target database will be audited by the policy.
         * 
         * @return builder
         * 
         */
        public Builder isDataSafeServiceAccountAudited(@Nullable Output<Boolean> isDataSafeServiceAccountAudited) {
            $.isDataSafeServiceAccountAudited = isDataSafeServiceAccountAudited;
            return this;
        }

        /**
         * @param isDataSafeServiceAccountAudited Indicates whether the Data Safe user activity on the target database will be audited by the policy.
         * 
         * @return builder
         * 
         */
        public Builder isDataSafeServiceAccountAudited(Boolean isDataSafeServiceAccountAudited) {
            return isDataSafeServiceAccountAudited(Output.of(isDataSafeServiceAccountAudited));
        }

        /**
         * @param isPrivUsersManagedByDataSafe Indicates whether the privileged user list is managed by Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder isPrivUsersManagedByDataSafe(@Nullable Output<Boolean> isPrivUsersManagedByDataSafe) {
            $.isPrivUsersManagedByDataSafe = isPrivUsersManagedByDataSafe;
            return this;
        }

        /**
         * @param isPrivUsersManagedByDataSafe Indicates whether the privileged user list is managed by Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder isPrivUsersManagedByDataSafe(Boolean isPrivUsersManagedByDataSafe) {
            return isPrivUsersManagedByDataSafe(Output.of(isPrivUsersManagedByDataSafe));
        }

        public AuditPolicyAuditConditionArgs build() {
            return $;
        }
    }

}
