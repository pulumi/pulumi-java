// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Artifacts.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Artifacts.outputs.GetGenericArtifactsFilter;
import com.pulumi.oci.Artifacts.outputs.GetGenericArtifactsGenericArtifactCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGenericArtifactsResult {
    /**
     * @return A user-defined path to describe the location of an artifact. Slashes do not create a directory structure, but you can use slashes to organize the repository. An artifact path does not include an artifact version.  Example: `project01/my-web-app/artifact-abc`
     * 
     */
    private final @Nullable String artifactPath;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository&#39;s compartment.
     * 
     */
    private final String compartmentId;
    /**
     * @return The artifact name with the format of `&lt;artifact-path&gt;:&lt;artifact-version&gt;`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
     * 
     */
    private final @Nullable String displayName;
    private final @Nullable List<GetGenericArtifactsFilter> filters;
    /**
     * @return The list of generic_artifact_collection.
     * 
     */
    private final List<GetGenericArtifactsGenericArtifactCollection> genericArtifactCollections;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: `ocid1.genericartifact.oc1..exampleuniqueID`
     * 
     */
    private final @Nullable String id;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository.
     * 
     */
    private final String repositoryId;
    /**
     * @return The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
     * 
     */
    private final @Nullable String sha256;
    /**
     * @return The current state of the artifact.
     * 
     */
    private final @Nullable String state;
    /**
     * @return A user-defined string to describe the artifact version.  Example: `1.1.0` or `1.2-beta-2`
     * 
     */
    private final @Nullable String version;

    @CustomType.Constructor
    private GetGenericArtifactsResult(
        @CustomType.Parameter("artifactPath") @Nullable String artifactPath,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("displayName") @Nullable String displayName,
        @CustomType.Parameter("filters") @Nullable List<GetGenericArtifactsFilter> filters,
        @CustomType.Parameter("genericArtifactCollections") List<GetGenericArtifactsGenericArtifactCollection> genericArtifactCollections,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("repositoryId") String repositoryId,
        @CustomType.Parameter("sha256") @Nullable String sha256,
        @CustomType.Parameter("state") @Nullable String state,
        @CustomType.Parameter("version") @Nullable String version) {
        this.artifactPath = artifactPath;
        this.compartmentId = compartmentId;
        this.displayName = displayName;
        this.filters = filters;
        this.genericArtifactCollections = genericArtifactCollections;
        this.id = id;
        this.repositoryId = repositoryId;
        this.sha256 = sha256;
        this.state = state;
        this.version = version;
    }

    /**
     * @return A user-defined path to describe the location of an artifact. Slashes do not create a directory structure, but you can use slashes to organize the repository. An artifact path does not include an artifact version.  Example: `project01/my-web-app/artifact-abc`
     * 
     */
    public Optional<String> artifactPath() {
        return Optional.ofNullable(this.artifactPath);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository&#39;s compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The artifact name with the format of `&lt;artifact-path&gt;:&lt;artifact-version&gt;`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetGenericArtifactsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The list of generic_artifact_collection.
     * 
     */
    public List<GetGenericArtifactsGenericArtifactCollection> genericArtifactCollections() {
        return this.genericArtifactCollections;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: `ocid1.genericartifact.oc1..exampleuniqueID`
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
     * 
     */
    public Optional<String> sha256() {
        return Optional.ofNullable(this.sha256);
    }
    /**
     * @return The current state of the artifact.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return A user-defined string to describe the artifact version.  Example: `1.1.0` or `1.2-beta-2`
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGenericArtifactsResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String artifactPath;
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetGenericArtifactsFilter> filters;
        private List<GetGenericArtifactsGenericArtifactCollection> genericArtifactCollections;
        private @Nullable String id;
        private String repositoryId;
        private @Nullable String sha256;
        private @Nullable String state;
        private @Nullable String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetGenericArtifactsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactPath = defaults.artifactPath;
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.genericArtifactCollections = defaults.genericArtifactCollections;
    	      this.id = defaults.id;
    	      this.repositoryId = defaults.repositoryId;
    	      this.sha256 = defaults.sha256;
    	      this.state = defaults.state;
    	      this.version = defaults.version;
        }

        public Builder artifactPath(@Nullable String artifactPath) {
            this.artifactPath = artifactPath;
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder filters(@Nullable List<GetGenericArtifactsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetGenericArtifactsFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder genericArtifactCollections(List<GetGenericArtifactsGenericArtifactCollection> genericArtifactCollections) {
            this.genericArtifactCollections = Objects.requireNonNull(genericArtifactCollections);
            return this;
        }
        public Builder genericArtifactCollections(GetGenericArtifactsGenericArtifactCollection... genericArtifactCollections) {
            return genericArtifactCollections(List.of(genericArtifactCollections));
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder repositoryId(String repositoryId) {
            this.repositoryId = Objects.requireNonNull(repositoryId);
            return this;
        }
        public Builder sha256(@Nullable String sha256) {
            this.sha256 = sha256;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }        public GetGenericArtifactsResult build() {
            return new GetGenericArtifactsResult(artifactPath, compartmentId, displayName, filters, genericArtifactCollections, id, repositoryId, sha256, state, version);
        }
    }
}
