// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.AuthenticationPolicyNetworkPolicyArgs;
import com.pulumi.oci.Identity.inputs.AuthenticationPolicyPasswordPolicyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthenticationPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final AuthenticationPolicyState Empty = new AuthenticationPolicyState();

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Network policy, Consists of a list of Network Source ids.
     * 
     */
    @Import(name="networkPolicy")
    private @Nullable Output<AuthenticationPolicyNetworkPolicyArgs> networkPolicy;

    /**
     * @return (Updatable) Network policy, Consists of a list of Network Source ids.
     * 
     */
    public Optional<Output<AuthenticationPolicyNetworkPolicyArgs>> networkPolicy() {
        return Optional.ofNullable(this.networkPolicy);
    }

    /**
     * (Updatable) Password policy, currently set for the given compartment.
     * 
     */
    @Import(name="passwordPolicy")
    private @Nullable Output<AuthenticationPolicyPasswordPolicyArgs> passwordPolicy;

    /**
     * @return (Updatable) Password policy, currently set for the given compartment.
     * 
     */
    public Optional<Output<AuthenticationPolicyPasswordPolicyArgs>> passwordPolicy() {
        return Optional.ofNullable(this.passwordPolicy);
    }

    private AuthenticationPolicyState() {}

    private AuthenticationPolicyState(AuthenticationPolicyState $) {
        this.compartmentId = $.compartmentId;
        this.networkPolicy = $.networkPolicy;
        this.passwordPolicy = $.passwordPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthenticationPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthenticationPolicyState $;

        public Builder() {
            $ = new AuthenticationPolicyState();
        }

        public Builder(AuthenticationPolicyState defaults) {
            $ = new AuthenticationPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param networkPolicy (Updatable) Network policy, Consists of a list of Network Source ids.
         * 
         * @return builder
         * 
         */
        public Builder networkPolicy(@Nullable Output<AuthenticationPolicyNetworkPolicyArgs> networkPolicy) {
            $.networkPolicy = networkPolicy;
            return this;
        }

        /**
         * @param networkPolicy (Updatable) Network policy, Consists of a list of Network Source ids.
         * 
         * @return builder
         * 
         */
        public Builder networkPolicy(AuthenticationPolicyNetworkPolicyArgs networkPolicy) {
            return networkPolicy(Output.of(networkPolicy));
        }

        /**
         * @param passwordPolicy (Updatable) Password policy, currently set for the given compartment.
         * 
         * @return builder
         * 
         */
        public Builder passwordPolicy(@Nullable Output<AuthenticationPolicyPasswordPolicyArgs> passwordPolicy) {
            $.passwordPolicy = passwordPolicy;
            return this;
        }

        /**
         * @param passwordPolicy (Updatable) Password policy, currently set for the given compartment.
         * 
         * @return builder
         * 
         */
        public Builder passwordPolicy(AuthenticationPolicyPasswordPolicyArgs passwordPolicy) {
            return passwordPolicy(Output.of(passwordPolicy));
        }

        public AuthenticationPolicyState build() {
            return $;
        }
    }

}
