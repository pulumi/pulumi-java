// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetViewArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetViewArgs Empty = new GetViewArgs();

    /**
     * Value must be `PRIVATE` when listing views for private zones.
     * 
     */
    @Import(name="scope", required=true)
    private String scope;

    /**
     * @return Value must be `PRIVATE` when listing views for private zones.
     * 
     */
    public String scope() {
        return this.scope;
    }

    /**
     * The OCID of the target view.
     * 
     */
    @Import(name="viewId", required=true)
    private String viewId;

    /**
     * @return The OCID of the target view.
     * 
     */
    public String viewId() {
        return this.viewId;
    }

    private GetViewArgs() {}

    private GetViewArgs(GetViewArgs $) {
        this.scope = $.scope;
        this.viewId = $.viewId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetViewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetViewArgs $;

        public Builder() {
            $ = new GetViewArgs();
        }

        public Builder(GetViewArgs defaults) {
            $ = new GetViewArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param scope Value must be `PRIVATE` when listing views for private zones.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param viewId The OCID of the target view.
         * 
         * @return builder
         * 
         */
        public Builder viewId(String viewId) {
            $.viewId = viewId;
            return this;
        }

        public GetViewArgs build() {
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            $.viewId = Objects.requireNonNull($.viewId, "expected parameter 'viewId' to be non-null");
            return $;
        }
    }

}
