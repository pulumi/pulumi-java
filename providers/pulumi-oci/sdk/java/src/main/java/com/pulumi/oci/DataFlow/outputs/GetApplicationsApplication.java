// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataFlow.outputs.GetApplicationsApplicationParameter;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetApplicationsApplication {
    /**
     * @return An Oracle Cloud Infrastructure URI of an archive.zip file containing custom dependencies that may be used to support the execution a Python, Java, or Scala application. See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
     * 
     */
    private final String archiveUri;
    /**
     * @return The arguments passed to the running application as command line arguments.  An argument is either a plain text or a placeholder. Placeholders are replaced using values from the parameters map.  Each placeholder specified must be represented in the parameters map else the request (POST or PUT) will fail with a HTTP 400 status code.  Placeholders are specified as `Service Api Spec`, where `name` is the name of the parameter. Example:  `[ &#34;--input&#34;, &#34;${input_file}&#34;, &#34;--name&#34;, &#34;John Doe&#34; ]` If &#34;input_file&#34; has a value of &#34;mydata.xml&#34;, then the value above will be translated to `--input mydata.xml --name &#34;John Doe&#34;`
     * 
     */
    private final List<String> arguments;
    /**
     * @return The class for the application.
     * 
     */
    private final String className;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private final String compartmentId;
    /**
     * @return The Spark configuration passed to the running process. See https://spark.apache.org/docs/latest/configuration.html#available-properties. Example: { &#34;spark.app.name&#34; : &#34;My App Name&#34;, &#34;spark.shuffle.io.maxRetries&#34; : &#34;4&#34; } Note: Not all Spark properties are permitted to be set.  Attempting to set a property that is not allowed to be overwritten will cause a 400 status to be returned.
     * 
     */
    private final Map<String,Object> configuration;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return A user-friendly description.
     * 
     */
    private final String description;
    /**
     * @return The query parameter for the Spark application name.
     * 
     */
    private final String displayName;
    /**
     * @return The VM shape for the driver. Sets the driver cores and memory.
     * 
     */
    private final String driverShape;
    /**
     * @return The input used for spark-submit command. For more details see https://spark.apache.org/docs/latest/submitting-applications.html#launching-applications-with-spark-submit. Supported options include ``--class``, ``--file``, ``--jars``, ``--conf``, ``--py-files``, and main application file with arguments. Example: ``--jars oci://path/to/a.jar,oci://path/to/b.jar --files oci://path/to/a.json,oci://path/to/b.csv --py-files oci://path/to/a.py,oci://path/to/b.py --conf spark.sql.crossJoin.enabled=true --class org.apache.spark.examples.SparkPi oci://path/to/main.jar 10`` Note: If execute is specified together with applicationId, className, configuration, fileUri, language, arguments, parameters during application create/update, or run create/submit, Data Flow service will use derived information from execute input only.
     * 
     */
    private final String execute;
    /**
     * @return The VM shape for the executors. Sets the executor cores and memory.
     * 
     */
    private final String executorShape;
    /**
     * @return An Oracle Cloud Infrastructure URI of the file containing the application to execute. See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
     * 
     */
    private final String fileUri;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The application ID.
     * 
     */
    private final String id;
    /**
     * @return The Spark language.
     * 
     */
    private final String language;
    /**
     * @return An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded. See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
     * 
     */
    private final String logsBucketUri;
    /**
     * @return The OCID of Oracle Cloud Infrastructure Hive Metastore.
     * 
     */
    private final String metastoreId;
    /**
     * @return The number of executor VMs requested.
     * 
     */
    private final Integer numExecutors;
    /**
     * @return The OCID of the user who created the resource.
     * 
     */
    private final String ownerPrincipalId;
    /**
     * @return The username of the user who created the resource.  If the username of the owner does not exist, `null` will be returned and the caller should refer to the ownerPrincipalId value instead.
     * 
     */
    private final String ownerUserName;
    /**
     * @return An array of name/value pairs used to fill placeholders found in properties like `Application.arguments`.  The name must be a string of one or more word characters (a-z, A-Z, 0-9, _).  The value can be a string of 0 or more characters of any kind. Example:  [ { name: &#34;iterations&#34;, value: &#34;10&#34;}, { name: &#34;input_file&#34;, value: &#34;mydata.xml&#34; }, { name: &#34;variable_x&#34;, value: &#34;${x}&#34;} ]
     * 
     */
    private final List<GetApplicationsApplicationParameter> parameters;
    /**
     * @return The OCID of a private endpoint.
     * 
     */
    private final String privateEndpointId;
    /**
     * @return The Spark version utilized to run the application.
     * 
     */
    private final String sparkVersion;
    /**
     * @return The current state of this application.
     * 
     */
    private final String state;
    /**
     * @return The date and time a application was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    private final String timeCreated;
    /**
     * @return The date and time a application was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    private final String timeUpdated;
    /**
     * @return The Spark application processing type.
     * 
     */
    private final String type;
    /**
     * @return An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs. See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
     * 
     */
    private final String warehouseBucketUri;

    @CustomType.Constructor
    private GetApplicationsApplication(
        @CustomType.Parameter("archiveUri") String archiveUri,
        @CustomType.Parameter("arguments") List<String> arguments,
        @CustomType.Parameter("className") String className,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("configuration") Map<String,Object> configuration,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("driverShape") String driverShape,
        @CustomType.Parameter("execute") String execute,
        @CustomType.Parameter("executorShape") String executorShape,
        @CustomType.Parameter("fileUri") String fileUri,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("language") String language,
        @CustomType.Parameter("logsBucketUri") String logsBucketUri,
        @CustomType.Parameter("metastoreId") String metastoreId,
        @CustomType.Parameter("numExecutors") Integer numExecutors,
        @CustomType.Parameter("ownerPrincipalId") String ownerPrincipalId,
        @CustomType.Parameter("ownerUserName") String ownerUserName,
        @CustomType.Parameter("parameters") List<GetApplicationsApplicationParameter> parameters,
        @CustomType.Parameter("privateEndpointId") String privateEndpointId,
        @CustomType.Parameter("sparkVersion") String sparkVersion,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("warehouseBucketUri") String warehouseBucketUri) {
        this.archiveUri = archiveUri;
        this.arguments = arguments;
        this.className = className;
        this.compartmentId = compartmentId;
        this.configuration = configuration;
        this.definedTags = definedTags;
        this.description = description;
        this.displayName = displayName;
        this.driverShape = driverShape;
        this.execute = execute;
        this.executorShape = executorShape;
        this.fileUri = fileUri;
        this.freeformTags = freeformTags;
        this.id = id;
        this.language = language;
        this.logsBucketUri = logsBucketUri;
        this.metastoreId = metastoreId;
        this.numExecutors = numExecutors;
        this.ownerPrincipalId = ownerPrincipalId;
        this.ownerUserName = ownerUserName;
        this.parameters = parameters;
        this.privateEndpointId = privateEndpointId;
        this.sparkVersion = sparkVersion;
        this.state = state;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
        this.type = type;
        this.warehouseBucketUri = warehouseBucketUri;
    }

    /**
     * @return An Oracle Cloud Infrastructure URI of an archive.zip file containing custom dependencies that may be used to support the execution a Python, Java, or Scala application. See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
     * 
     */
    public String archiveUri() {
        return this.archiveUri;
    }
    /**
     * @return The arguments passed to the running application as command line arguments.  An argument is either a plain text or a placeholder. Placeholders are replaced using values from the parameters map.  Each placeholder specified must be represented in the parameters map else the request (POST or PUT) will fail with a HTTP 400 status code.  Placeholders are specified as `Service Api Spec`, where `name` is the name of the parameter. Example:  `[ &#34;--input&#34;, &#34;${input_file}&#34;, &#34;--name&#34;, &#34;John Doe&#34; ]` If &#34;input_file&#34; has a value of &#34;mydata.xml&#34;, then the value above will be translated to `--input mydata.xml --name &#34;John Doe&#34;`
     * 
     */
    public List<String> arguments() {
        return this.arguments;
    }
    /**
     * @return The class for the application.
     * 
     */
    public String className() {
        return this.className;
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The Spark configuration passed to the running process. See https://spark.apache.org/docs/latest/configuration.html#available-properties. Example: { &#34;spark.app.name&#34; : &#34;My App Name&#34;, &#34;spark.shuffle.io.maxRetries&#34; : &#34;4&#34; } Note: Not all Spark properties are permitted to be set.  Attempting to set a property that is not allowed to be overwritten will cause a 400 status to be returned.
     * 
     */
    public Map<String,Object> configuration() {
        return this.configuration;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The query parameter for the Spark application name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The VM shape for the driver. Sets the driver cores and memory.
     * 
     */
    public String driverShape() {
        return this.driverShape;
    }
    /**
     * @return The input used for spark-submit command. For more details see https://spark.apache.org/docs/latest/submitting-applications.html#launching-applications-with-spark-submit. Supported options include ``--class``, ``--file``, ``--jars``, ``--conf``, ``--py-files``, and main application file with arguments. Example: ``--jars oci://path/to/a.jar,oci://path/to/b.jar --files oci://path/to/a.json,oci://path/to/b.csv --py-files oci://path/to/a.py,oci://path/to/b.py --conf spark.sql.crossJoin.enabled=true --class org.apache.spark.examples.SparkPi oci://path/to/main.jar 10`` Note: If execute is specified together with applicationId, className, configuration, fileUri, language, arguments, parameters during application create/update, or run create/submit, Data Flow service will use derived information from execute input only.
     * 
     */
    public String execute() {
        return this.execute;
    }
    /**
     * @return The VM shape for the executors. Sets the executor cores and memory.
     * 
     */
    public String executorShape() {
        return this.executorShape;
    }
    /**
     * @return An Oracle Cloud Infrastructure URI of the file containing the application to execute. See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
     * 
     */
    public String fileUri() {
        return this.fileUri;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The application ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Spark language.
     * 
     */
    public String language() {
        return this.language;
    }
    /**
     * @return An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded. See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
     * 
     */
    public String logsBucketUri() {
        return this.logsBucketUri;
    }
    /**
     * @return The OCID of Oracle Cloud Infrastructure Hive Metastore.
     * 
     */
    public String metastoreId() {
        return this.metastoreId;
    }
    /**
     * @return The number of executor VMs requested.
     * 
     */
    public Integer numExecutors() {
        return this.numExecutors;
    }
    /**
     * @return The OCID of the user who created the resource.
     * 
     */
    public String ownerPrincipalId() {
        return this.ownerPrincipalId;
    }
    /**
     * @return The username of the user who created the resource.  If the username of the owner does not exist, `null` will be returned and the caller should refer to the ownerPrincipalId value instead.
     * 
     */
    public String ownerUserName() {
        return this.ownerUserName;
    }
    /**
     * @return An array of name/value pairs used to fill placeholders found in properties like `Application.arguments`.  The name must be a string of one or more word characters (a-z, A-Z, 0-9, _).  The value can be a string of 0 or more characters of any kind. Example:  [ { name: &#34;iterations&#34;, value: &#34;10&#34;}, { name: &#34;input_file&#34;, value: &#34;mydata.xml&#34; }, { name: &#34;variable_x&#34;, value: &#34;${x}&#34;} ]
     * 
     */
    public List<GetApplicationsApplicationParameter> parameters() {
        return this.parameters;
    }
    /**
     * @return The OCID of a private endpoint.
     * 
     */
    public String privateEndpointId() {
        return this.privateEndpointId;
    }
    /**
     * @return The Spark version utilized to run the application.
     * 
     */
    public String sparkVersion() {
        return this.sparkVersion;
    }
    /**
     * @return The current state of this application.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time a application was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time a application was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The Spark application processing type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs. See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
     * 
     */
    public String warehouseBucketUri() {
        return this.warehouseBucketUri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationsApplication defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String archiveUri;
        private List<String> arguments;
        private String className;
        private String compartmentId;
        private Map<String,Object> configuration;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private String driverShape;
        private String execute;
        private String executorShape;
        private String fileUri;
        private Map<String,Object> freeformTags;
        private String id;
        private String language;
        private String logsBucketUri;
        private String metastoreId;
        private Integer numExecutors;
        private String ownerPrincipalId;
        private String ownerUserName;
        private List<GetApplicationsApplicationParameter> parameters;
        private String privateEndpointId;
        private String sparkVersion;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        private String warehouseBucketUri;

        public Builder() {
    	      // Empty
        }

        public Builder(GetApplicationsApplication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveUri = defaults.archiveUri;
    	      this.arguments = defaults.arguments;
    	      this.className = defaults.className;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configuration = defaults.configuration;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.driverShape = defaults.driverShape;
    	      this.execute = defaults.execute;
    	      this.executorShape = defaults.executorShape;
    	      this.fileUri = defaults.fileUri;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.language = defaults.language;
    	      this.logsBucketUri = defaults.logsBucketUri;
    	      this.metastoreId = defaults.metastoreId;
    	      this.numExecutors = defaults.numExecutors;
    	      this.ownerPrincipalId = defaults.ownerPrincipalId;
    	      this.ownerUserName = defaults.ownerUserName;
    	      this.parameters = defaults.parameters;
    	      this.privateEndpointId = defaults.privateEndpointId;
    	      this.sparkVersion = defaults.sparkVersion;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.warehouseBucketUri = defaults.warehouseBucketUri;
        }

        public Builder archiveUri(String archiveUri) {
            this.archiveUri = Objects.requireNonNull(archiveUri);
            return this;
        }
        public Builder arguments(List<String> arguments) {
            this.arguments = Objects.requireNonNull(arguments);
            return this;
        }
        public Builder arguments(String... arguments) {
            return arguments(List.of(arguments));
        }
        public Builder className(String className) {
            this.className = Objects.requireNonNull(className);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder configuration(Map<String,Object> configuration) {
            this.configuration = Objects.requireNonNull(configuration);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder driverShape(String driverShape) {
            this.driverShape = Objects.requireNonNull(driverShape);
            return this;
        }
        public Builder execute(String execute) {
            this.execute = Objects.requireNonNull(execute);
            return this;
        }
        public Builder executorShape(String executorShape) {
            this.executorShape = Objects.requireNonNull(executorShape);
            return this;
        }
        public Builder fileUri(String fileUri) {
            this.fileUri = Objects.requireNonNull(fileUri);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder language(String language) {
            this.language = Objects.requireNonNull(language);
            return this;
        }
        public Builder logsBucketUri(String logsBucketUri) {
            this.logsBucketUri = Objects.requireNonNull(logsBucketUri);
            return this;
        }
        public Builder metastoreId(String metastoreId) {
            this.metastoreId = Objects.requireNonNull(metastoreId);
            return this;
        }
        public Builder numExecutors(Integer numExecutors) {
            this.numExecutors = Objects.requireNonNull(numExecutors);
            return this;
        }
        public Builder ownerPrincipalId(String ownerPrincipalId) {
            this.ownerPrincipalId = Objects.requireNonNull(ownerPrincipalId);
            return this;
        }
        public Builder ownerUserName(String ownerUserName) {
            this.ownerUserName = Objects.requireNonNull(ownerUserName);
            return this;
        }
        public Builder parameters(List<GetApplicationsApplicationParameter> parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        public Builder parameters(GetApplicationsApplicationParameter... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder privateEndpointId(String privateEndpointId) {
            this.privateEndpointId = Objects.requireNonNull(privateEndpointId);
            return this;
        }
        public Builder sparkVersion(String sparkVersion) {
            this.sparkVersion = Objects.requireNonNull(sparkVersion);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder warehouseBucketUri(String warehouseBucketUri) {
            this.warehouseBucketUri = Objects.requireNonNull(warehouseBucketUri);
            return this;
        }        public GetApplicationsApplication build() {
            return new GetApplicationsApplication(archiveUri, arguments, className, compartmentId, configuration, definedTags, description, displayName, driverShape, execute, executorShape, fileUri, freeformTags, id, language, logsBucketUri, metastoreId, numExecutors, ownerPrincipalId, ownerUserName, parameters, privateEndpointId, sparkVersion, state, timeCreated, timeUpdated, type, warehouseBucketUri);
        }
    }
}
