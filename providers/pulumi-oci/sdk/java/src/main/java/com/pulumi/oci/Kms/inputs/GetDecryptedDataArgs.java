// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDecryptedDataArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDecryptedDataArgs Empty = new GetDecryptedDataArgs();

    /**
     * Information that can be used to provide an encryption context for the  encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
     * 
     */
    @Import(name="associatedData")
    private @Nullable Output<Map<String,Object>> associatedData;

    /**
     * @return Information that can be used to provide an encryption context for the  encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
     * 
     */
    public Optional<Output<Map<String,Object>>> associatedData() {
        return Optional.ofNullable(this.associatedData);
    }

    /**
     * The encrypted data to decrypt.
     * 
     */
    @Import(name="ciphertext", required=true)
    private Output<String> ciphertext;

    /**
     * @return The encrypted data to decrypt.
     * 
     */
    public Output<String> ciphertext() {
        return this.ciphertext;
    }

    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    @Import(name="cryptoEndpoint", required=true)
    private Output<String> cryptoEndpoint;

    /**
     * @return The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    public Output<String> cryptoEndpoint() {
        return this.cryptoEndpoint;
    }

    /**
     * The OCID of the key used to encrypt the ciphertext.
     * 
     */
    @Import(name="keyId", required=true)
    private Output<String> keyId;

    /**
     * @return The OCID of the key used to encrypt the ciphertext.
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }

    private GetDecryptedDataArgs() {}

    private GetDecryptedDataArgs(GetDecryptedDataArgs $) {
        this.associatedData = $.associatedData;
        this.ciphertext = $.ciphertext;
        this.cryptoEndpoint = $.cryptoEndpoint;
        this.keyId = $.keyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDecryptedDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDecryptedDataArgs $;

        public Builder() {
            $ = new GetDecryptedDataArgs();
        }

        public Builder(GetDecryptedDataArgs defaults) {
            $ = new GetDecryptedDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedData Information that can be used to provide an encryption context for the  encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
         * 
         * @return builder
         * 
         */
        public Builder associatedData(@Nullable Output<Map<String,Object>> associatedData) {
            $.associatedData = associatedData;
            return this;
        }

        /**
         * @param associatedData Information that can be used to provide an encryption context for the  encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
         * 
         * @return builder
         * 
         */
        public Builder associatedData(Map<String,Object> associatedData) {
            return associatedData(Output.of(associatedData));
        }

        /**
         * @param ciphertext The encrypted data to decrypt.
         * 
         * @return builder
         * 
         */
        public Builder ciphertext(Output<String> ciphertext) {
            $.ciphertext = ciphertext;
            return this;
        }

        /**
         * @param ciphertext The encrypted data to decrypt.
         * 
         * @return builder
         * 
         */
        public Builder ciphertext(String ciphertext) {
            return ciphertext(Output.of(ciphertext));
        }

        /**
         * @param cryptoEndpoint The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cryptoEndpoint(Output<String> cryptoEndpoint) {
            $.cryptoEndpoint = cryptoEndpoint;
            return this;
        }

        /**
         * @param cryptoEndpoint The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cryptoEndpoint(String cryptoEndpoint) {
            return cryptoEndpoint(Output.of(cryptoEndpoint));
        }

        /**
         * @param keyId The OCID of the key used to encrypt the ciphertext.
         * 
         * @return builder
         * 
         */
        public Builder keyId(Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The OCID of the key used to encrypt the ciphertext.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        public GetDecryptedDataArgs build() {
            $.ciphertext = Objects.requireNonNull($.ciphertext, "expected parameter 'ciphertext' to be non-null");
            $.cryptoEndpoint = Objects.requireNonNull($.cryptoEndpoint, "expected parameter 'cryptoEndpoint' to be non-null");
            $.keyId = Objects.requireNonNull($.keyId, "expected parameter 'keyId' to be non-null");
            return $;
        }
    }

}
