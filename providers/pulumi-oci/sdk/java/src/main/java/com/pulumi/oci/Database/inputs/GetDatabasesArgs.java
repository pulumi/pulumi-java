// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.GetDatabasesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatabasesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabasesArgs Empty = new GetDatabasesArgs();

    /**
     * The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A Database Home [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). *Note: Either `db_home_id` or `system_id` is required to make the LIST API call.
     * 
     */
    @Import(name="dbHomeId")
    private @Nullable Output<String> dbHomeId;

    /**
     * @return A Database Home [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). *Note: Either `db_home_id` or `system_id` is required to make the LIST API call.
     * 
     */
    public Optional<Output<String>> dbHomeId() {
        return Optional.ofNullable(this.dbHomeId);
    }

    /**
     * A filter to return only resources that match the entire database name given. The match is not case sensitive.
     * 
     */
    @Import(name="dbName")
    private @Nullable Output<String> dbName;

    /**
     * @return A filter to return only resources that match the entire database name given. The match is not case sensitive.
     * 
     */
    public Optional<Output<String>> dbName() {
        return Optional.ofNullable(this.dbName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDatabasesFilterArgs>> filters;

    public Optional<Output<List<GetDatabasesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata DB system that you want to filter the database results by. Applies only to Exadata DB systems.
     * 
     */
    @Import(name="systemId")
    private @Nullable Output<String> systemId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata DB system that you want to filter the database results by. Applies only to Exadata DB systems.
     * 
     */
    public Optional<Output<String>> systemId() {
        return Optional.ofNullable(this.systemId);
    }

    private GetDatabasesArgs() {}

    private GetDatabasesArgs(GetDatabasesArgs $) {
        this.compartmentId = $.compartmentId;
        this.dbHomeId = $.dbHomeId;
        this.dbName = $.dbName;
        this.filters = $.filters;
        this.state = $.state;
        this.systemId = $.systemId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabasesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabasesArgs $;

        public Builder() {
            $ = new GetDatabasesArgs();
        }

        public Builder(GetDatabasesArgs defaults) {
            $ = new GetDatabasesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param dbHomeId A Database Home [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). *Note: Either `db_home_id` or `system_id` is required to make the LIST API call.
         * 
         * @return builder
         * 
         */
        public Builder dbHomeId(@Nullable Output<String> dbHomeId) {
            $.dbHomeId = dbHomeId;
            return this;
        }

        /**
         * @param dbHomeId A Database Home [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). *Note: Either `db_home_id` or `system_id` is required to make the LIST API call.
         * 
         * @return builder
         * 
         */
        public Builder dbHomeId(String dbHomeId) {
            return dbHomeId(Output.of(dbHomeId));
        }

        /**
         * @param dbName A filter to return only resources that match the entire database name given. The match is not case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder dbName(@Nullable Output<String> dbName) {
            $.dbName = dbName;
            return this;
        }

        /**
         * @param dbName A filter to return only resources that match the entire database name given. The match is not case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder dbName(String dbName) {
            return dbName(Output.of(dbName));
        }

        public Builder filters(@Nullable Output<List<GetDatabasesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDatabasesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDatabasesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state A filter to return only resources that match the given lifecycle state exactly.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources that match the given lifecycle state exactly.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param systemId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata DB system that you want to filter the database results by. Applies only to Exadata DB systems.
         * 
         * @return builder
         * 
         */
        public Builder systemId(@Nullable Output<String> systemId) {
            $.systemId = systemId;
            return this;
        }

        /**
         * @param systemId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata DB system that you want to filter the database results by. Applies only to Exadata DB systems.
         * 
         * @return builder
         * 
         */
        public Builder systemId(String systemId) {
            return systemId(Output.of(systemId));
        }

        public GetDatabasesArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
