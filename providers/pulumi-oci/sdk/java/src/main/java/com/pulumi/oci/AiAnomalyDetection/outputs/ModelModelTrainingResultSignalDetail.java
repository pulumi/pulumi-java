// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiAnomalyDetection.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelModelTrainingResultSignalDetail {
    /**
     * @return detailed information for a signal.
     * 
     */
    private final @Nullable String details;
    /**
     * @return Accuracy metric for a signal.
     * 
     */
    private final @Nullable Double fap;
    /**
     * @return A boolean value to indicate if a signal is quantized or not.
     * 
     */
    private final @Nullable Boolean isQuantized;
    /**
     * @return Max value within a signal.
     * 
     */
    private final @Nullable Double max;
    /**
     * @return Min value within a signal.
     * 
     */
    private final @Nullable Double min;
    /**
     * @return The ratio of missing values in a signal filled/imputed by the IDP algorithm.
     * 
     */
    private final @Nullable Double mviRatio;
    /**
     * @return The name of a signal.
     * 
     */
    private final @Nullable String signalName;
    /**
     * @return Status of the signal:
     * * ACCEPTED - the signal is used for training the model
     * * DROPPED - the signal does not meet requirement, and is dropped before training the model.
     * * OTHER - placeholder for other status
     * 
     */
    private final @Nullable String status;
    /**
     * @return Standard deviation of values within a signal.
     * 
     */
    private final @Nullable Double std;

    @CustomType.Constructor
    private ModelModelTrainingResultSignalDetail(
        @CustomType.Parameter("details") @Nullable String details,
        @CustomType.Parameter("fap") @Nullable Double fap,
        @CustomType.Parameter("isQuantized") @Nullable Boolean isQuantized,
        @CustomType.Parameter("max") @Nullable Double max,
        @CustomType.Parameter("min") @Nullable Double min,
        @CustomType.Parameter("mviRatio") @Nullable Double mviRatio,
        @CustomType.Parameter("signalName") @Nullable String signalName,
        @CustomType.Parameter("status") @Nullable String status,
        @CustomType.Parameter("std") @Nullable Double std) {
        this.details = details;
        this.fap = fap;
        this.isQuantized = isQuantized;
        this.max = max;
        this.min = min;
        this.mviRatio = mviRatio;
        this.signalName = signalName;
        this.status = status;
        this.std = std;
    }

    /**
     * @return detailed information for a signal.
     * 
     */
    public Optional<String> details() {
        return Optional.ofNullable(this.details);
    }
    /**
     * @return Accuracy metric for a signal.
     * 
     */
    public Optional<Double> fap() {
        return Optional.ofNullable(this.fap);
    }
    /**
     * @return A boolean value to indicate if a signal is quantized or not.
     * 
     */
    public Optional<Boolean> isQuantized() {
        return Optional.ofNullable(this.isQuantized);
    }
    /**
     * @return Max value within a signal.
     * 
     */
    public Optional<Double> max() {
        return Optional.ofNullable(this.max);
    }
    /**
     * @return Min value within a signal.
     * 
     */
    public Optional<Double> min() {
        return Optional.ofNullable(this.min);
    }
    /**
     * @return The ratio of missing values in a signal filled/imputed by the IDP algorithm.
     * 
     */
    public Optional<Double> mviRatio() {
        return Optional.ofNullable(this.mviRatio);
    }
    /**
     * @return The name of a signal.
     * 
     */
    public Optional<String> signalName() {
        return Optional.ofNullable(this.signalName);
    }
    /**
     * @return Status of the signal:
     * * ACCEPTED - the signal is used for training the model
     * * DROPPED - the signal does not meet requirement, and is dropped before training the model.
     * * OTHER - placeholder for other status
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Standard deviation of values within a signal.
     * 
     */
    public Optional<Double> std() {
        return Optional.ofNullable(this.std);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelModelTrainingResultSignalDetail defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String details;
        private @Nullable Double fap;
        private @Nullable Boolean isQuantized;
        private @Nullable Double max;
        private @Nullable Double min;
        private @Nullable Double mviRatio;
        private @Nullable String signalName;
        private @Nullable String status;
        private @Nullable Double std;

        public Builder() {
    	      // Empty
        }

        public Builder(ModelModelTrainingResultSignalDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.details = defaults.details;
    	      this.fap = defaults.fap;
    	      this.isQuantized = defaults.isQuantized;
    	      this.max = defaults.max;
    	      this.min = defaults.min;
    	      this.mviRatio = defaults.mviRatio;
    	      this.signalName = defaults.signalName;
    	      this.status = defaults.status;
    	      this.std = defaults.std;
        }

        public Builder details(@Nullable String details) {
            this.details = details;
            return this;
        }
        public Builder fap(@Nullable Double fap) {
            this.fap = fap;
            return this;
        }
        public Builder isQuantized(@Nullable Boolean isQuantized) {
            this.isQuantized = isQuantized;
            return this;
        }
        public Builder max(@Nullable Double max) {
            this.max = max;
            return this;
        }
        public Builder min(@Nullable Double min) {
            this.min = min;
            return this;
        }
        public Builder mviRatio(@Nullable Double mviRatio) {
            this.mviRatio = mviRatio;
            return this;
        }
        public Builder signalName(@Nullable String signalName) {
            this.signalName = signalName;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        public Builder std(@Nullable Double std) {
            this.std = std;
            return this;
        }        public ModelModelTrainingResultSignalDetail build() {
            return new ModelModelTrainingResultSignalDetail(details, fap, isQuantized, max, min, mviRatio, signalName, status, std);
        }
    }
}
