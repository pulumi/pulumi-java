// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Analytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Analytics.outputs.GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAnalyticsInstancePrivateAccessChannelResult {
    private final String analyticsInstanceId;
    /**
     * @return Display Name of the Private Access Channel.
     * 
     */
    private final String displayName;
    /**
     * @return The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
     * 
     */
    private final List<String> egressSourceIpAddresses;
    private final String id;
    /**
     * @return IP Address of the Private Access channel.
     * 
     */
    private final String ipAddress;
    /**
     * @return Private Access Channel unique identifier key.
     * 
     */
    private final String key;
    private final String privateAccessChannelKey;
    /**
     * @return List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
     * 
     */
    private final List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone> privateSourceDnsZones;
    /**
     * @return OCID of the customer subnet connected to private access channel.
     * 
     */
    private final String subnetId;
    /**
     * @return OCID of the customer VCN peered with private access channel.
     * 
     */
    private final String vcnId;

    @CustomType.Constructor
    private GetAnalyticsInstancePrivateAccessChannelResult(
        @CustomType.Parameter("analyticsInstanceId") String analyticsInstanceId,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("egressSourceIpAddresses") List<String> egressSourceIpAddresses,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ipAddress") String ipAddress,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("privateAccessChannelKey") String privateAccessChannelKey,
        @CustomType.Parameter("privateSourceDnsZones") List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone> privateSourceDnsZones,
        @CustomType.Parameter("subnetId") String subnetId,
        @CustomType.Parameter("vcnId") String vcnId) {
        this.analyticsInstanceId = analyticsInstanceId;
        this.displayName = displayName;
        this.egressSourceIpAddresses = egressSourceIpAddresses;
        this.id = id;
        this.ipAddress = ipAddress;
        this.key = key;
        this.privateAccessChannelKey = privateAccessChannelKey;
        this.privateSourceDnsZones = privateSourceDnsZones;
        this.subnetId = subnetId;
        this.vcnId = vcnId;
    }

    public String analyticsInstanceId() {
        return this.analyticsInstanceId;
    }
    /**
     * @return Display Name of the Private Access Channel.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
     * 
     */
    public List<String> egressSourceIpAddresses() {
        return this.egressSourceIpAddresses;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return IP Address of the Private Access channel.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return Private Access Channel unique identifier key.
     * 
     */
    public String key() {
        return this.key;
    }
    public String privateAccessChannelKey() {
        return this.privateAccessChannelKey;
    }
    /**
     * @return List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
     * 
     */
    public List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone> privateSourceDnsZones() {
        return this.privateSourceDnsZones;
    }
    /**
     * @return OCID of the customer subnet connected to private access channel.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return OCID of the customer VCN peered with private access channel.
     * 
     */
    public String vcnId() {
        return this.vcnId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAnalyticsInstancePrivateAccessChannelResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String analyticsInstanceId;
        private String displayName;
        private List<String> egressSourceIpAddresses;
        private String id;
        private String ipAddress;
        private String key;
        private String privateAccessChannelKey;
        private List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone> privateSourceDnsZones;
        private String subnetId;
        private String vcnId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAnalyticsInstancePrivateAccessChannelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analyticsInstanceId = defaults.analyticsInstanceId;
    	      this.displayName = defaults.displayName;
    	      this.egressSourceIpAddresses = defaults.egressSourceIpAddresses;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.key = defaults.key;
    	      this.privateAccessChannelKey = defaults.privateAccessChannelKey;
    	      this.privateSourceDnsZones = defaults.privateSourceDnsZones;
    	      this.subnetId = defaults.subnetId;
    	      this.vcnId = defaults.vcnId;
        }

        public Builder analyticsInstanceId(String analyticsInstanceId) {
            this.analyticsInstanceId = Objects.requireNonNull(analyticsInstanceId);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder egressSourceIpAddresses(List<String> egressSourceIpAddresses) {
            this.egressSourceIpAddresses = Objects.requireNonNull(egressSourceIpAddresses);
            return this;
        }
        public Builder egressSourceIpAddresses(String... egressSourceIpAddresses) {
            return egressSourceIpAddresses(List.of(egressSourceIpAddresses));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder privateAccessChannelKey(String privateAccessChannelKey) {
            this.privateAccessChannelKey = Objects.requireNonNull(privateAccessChannelKey);
            return this;
        }
        public Builder privateSourceDnsZones(List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone> privateSourceDnsZones) {
            this.privateSourceDnsZones = Objects.requireNonNull(privateSourceDnsZones);
            return this;
        }
        public Builder privateSourceDnsZones(GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone... privateSourceDnsZones) {
            return privateSourceDnsZones(List.of(privateSourceDnsZones));
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder vcnId(String vcnId) {
            this.vcnId = Objects.requireNonNull(vcnId);
            return this;
        }        public GetAnalyticsInstancePrivateAccessChannelResult build() {
            return new GetAnalyticsInstancePrivateAccessChannelResult(analyticsInstanceId, displayName, egressSourceIpAddresses, id, ipAddress, key, privateAccessChannelKey, privateSourceDnsZones, subnetId, vcnId);
        }
    }
}
