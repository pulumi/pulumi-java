// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Analytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Analytics.inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalyticsInstancePrivateAccessChannelState extends com.pulumi.resources.ResourceArgs {

    public static final AnalyticsInstancePrivateAccessChannelState Empty = new AnalyticsInstancePrivateAccessChannelState();

    /**
     * The OCID of the AnalyticsInstance.
     * 
     */
    @Import(name="analyticsInstanceId")
    private @Nullable Output<String> analyticsInstanceId;

    /**
     * @return The OCID of the AnalyticsInstance.
     * 
     */
    public Optional<Output<String>> analyticsInstanceId() {
        return Optional.ofNullable(this.analyticsInstanceId);
    }

    /**
     * (Updatable) Display Name of the Private Access Channel.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) Display Name of the Private Access Channel.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
     * 
     */
    @Import(name="egressSourceIpAddresses")
    private @Nullable Output<List<String>> egressSourceIpAddresses;

    /**
     * @return The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
     * 
     */
    public Optional<Output<List<String>>> egressSourceIpAddresses() {
        return Optional.ofNullable(this.egressSourceIpAddresses);
    }

    /**
     * IP Address of the Private Access channel.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IP Address of the Private Access channel.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Private Access Channel unique identifier key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Private Access Channel unique identifier key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
     * 
     */
    @Import(name="privateSourceDnsZones")
    private @Nullable Output<List<AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs>> privateSourceDnsZones;

    /**
     * @return (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
     * 
     */
    public Optional<Output<List<AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs>>> privateSourceDnsZones() {
        return Optional.ofNullable(this.privateSourceDnsZones);
    }

    /**
     * (Updatable) OCID of the customer subnet connected to private access channel.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return (Updatable) OCID of the customer subnet connected to private access channel.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * (Updatable) OCID of the customer VCN peered with private access channel.
     * 
     */
    @Import(name="vcnId")
    private @Nullable Output<String> vcnId;

    /**
     * @return (Updatable) OCID of the customer VCN peered with private access channel.
     * 
     */
    public Optional<Output<String>> vcnId() {
        return Optional.ofNullable(this.vcnId);
    }

    private AnalyticsInstancePrivateAccessChannelState() {}

    private AnalyticsInstancePrivateAccessChannelState(AnalyticsInstancePrivateAccessChannelState $) {
        this.analyticsInstanceId = $.analyticsInstanceId;
        this.displayName = $.displayName;
        this.egressSourceIpAddresses = $.egressSourceIpAddresses;
        this.ipAddress = $.ipAddress;
        this.key = $.key;
        this.privateSourceDnsZones = $.privateSourceDnsZones;
        this.subnetId = $.subnetId;
        this.vcnId = $.vcnId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalyticsInstancePrivateAccessChannelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalyticsInstancePrivateAccessChannelState $;

        public Builder() {
            $ = new AnalyticsInstancePrivateAccessChannelState();
        }

        public Builder(AnalyticsInstancePrivateAccessChannelState defaults) {
            $ = new AnalyticsInstancePrivateAccessChannelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param analyticsInstanceId The OCID of the AnalyticsInstance.
         * 
         * @return builder
         * 
         */
        public Builder analyticsInstanceId(@Nullable Output<String> analyticsInstanceId) {
            $.analyticsInstanceId = analyticsInstanceId;
            return this;
        }

        /**
         * @param analyticsInstanceId The OCID of the AnalyticsInstance.
         * 
         * @return builder
         * 
         */
        public Builder analyticsInstanceId(String analyticsInstanceId) {
            return analyticsInstanceId(Output.of(analyticsInstanceId));
        }

        /**
         * @param displayName (Updatable) Display Name of the Private Access Channel.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Display Name of the Private Access Channel.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param egressSourceIpAddresses The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
         * 
         * @return builder
         * 
         */
        public Builder egressSourceIpAddresses(@Nullable Output<List<String>> egressSourceIpAddresses) {
            $.egressSourceIpAddresses = egressSourceIpAddresses;
            return this;
        }

        /**
         * @param egressSourceIpAddresses The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
         * 
         * @return builder
         * 
         */
        public Builder egressSourceIpAddresses(List<String> egressSourceIpAddresses) {
            return egressSourceIpAddresses(Output.of(egressSourceIpAddresses));
        }

        /**
         * @param egressSourceIpAddresses The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
         * 
         * @return builder
         * 
         */
        public Builder egressSourceIpAddresses(String... egressSourceIpAddresses) {
            return egressSourceIpAddresses(List.of(egressSourceIpAddresses));
        }

        /**
         * @param ipAddress IP Address of the Private Access channel.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IP Address of the Private Access channel.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param key Private Access Channel unique identifier key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Private Access Channel unique identifier key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param privateSourceDnsZones (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
         * 
         * @return builder
         * 
         */
        public Builder privateSourceDnsZones(@Nullable Output<List<AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs>> privateSourceDnsZones) {
            $.privateSourceDnsZones = privateSourceDnsZones;
            return this;
        }

        /**
         * @param privateSourceDnsZones (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
         * 
         * @return builder
         * 
         */
        public Builder privateSourceDnsZones(List<AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs> privateSourceDnsZones) {
            return privateSourceDnsZones(Output.of(privateSourceDnsZones));
        }

        /**
         * @param privateSourceDnsZones (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
         * 
         * @return builder
         * 
         */
        public Builder privateSourceDnsZones(AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs... privateSourceDnsZones) {
            return privateSourceDnsZones(List.of(privateSourceDnsZones));
        }

        /**
         * @param subnetId (Updatable) OCID of the customer subnet connected to private access channel.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId (Updatable) OCID of the customer subnet connected to private access channel.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param vcnId (Updatable) OCID of the customer VCN peered with private access channel.
         * 
         * @return builder
         * 
         */
        public Builder vcnId(@Nullable Output<String> vcnId) {
            $.vcnId = vcnId;
            return this;
        }

        /**
         * @param vcnId (Updatable) OCID of the customer VCN peered with private access channel.
         * 
         * @return builder
         * 
         */
        public Builder vcnId(String vcnId) {
            return vcnId(Output.of(vcnId));
        }

        public AnalyticsInstancePrivateAccessChannelState build() {
            return $;
        }
    }

}
