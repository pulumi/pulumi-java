// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.OsManagement.SoftwareSourceArgs;
import com.pulumi.oci.OsManagement.inputs.SoftwareSourceState;
import com.pulumi.oci.OsManagement.outputs.SoftwareSourceAssociatedManagedInstance;
import com.pulumi.oci.Utilities;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * This resource provides the Software Source resource in Oracle Cloud Infrastructure OS Management service.
 * 
 * Creates a new custom Software Source on the management system.
 * This will not contain any packages after it is first created,
 * and they must be added later.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * SoftwareSources can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:OsManagement/softwareSource:SoftwareSource test_software_source &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:OsManagement/softwareSource:SoftwareSource")
public class SoftwareSource extends com.pulumi.resources.CustomResource {
    /**
     * The architecture type supported by the Software Source
     * 
     */
    @Export(name="archType", type=String.class, parameters={})
    private Output<String> archType;

    /**
     * @return The architecture type supported by the Software Source
     * 
     */
    public Output<String> archType() {
        return this.archType;
    }
    /**
     * list of the Managed Instances associated with this Software Sources
     * 
     */
    @Export(name="associatedManagedInstances", type=List.class, parameters={SoftwareSourceAssociatedManagedInstance.class})
    private Output<List<SoftwareSourceAssociatedManagedInstance>> associatedManagedInstances;

    /**
     * @return list of the Managed Instances associated with this Software Sources
     * 
     */
    public Output<List<SoftwareSourceAssociatedManagedInstance>> associatedManagedInstances() {
        return this.associatedManagedInstances;
    }
    /**
     * (Updatable) The yum repository checksum type used by this software source
     * 
     */
    @Export(name="checksumType", type=String.class, parameters={})
    private Output<String> checksumType;

    /**
     * @return (Updatable) The yum repository checksum type used by this software source
     * 
     */
    public Output<String> checksumType() {
        return this.checksumType;
    }
    /**
     * (Updatable) OCID for the Compartment
     * 
     */
    @Export(name="compartmentId", type=String.class, parameters={})
    private Output<String> compartmentId;

    /**
     * @return (Updatable) OCID for the Compartment
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="definedTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,Object>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) Information specified by the user about the software source
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return (Updatable) Information specified by the user about the software source
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * (Updatable) User friendly name for the software source
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return (Updatable) User friendly name for the software source
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="freeformTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,Object>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * Fingerprint of the GPG key for this software source
     * 
     */
    @Export(name="gpgKeyFingerprint", type=String.class, parameters={})
    private Output<String> gpgKeyFingerprint;

    /**
     * @return Fingerprint of the GPG key for this software source
     * 
     */
    public Output<String> gpgKeyFingerprint() {
        return this.gpgKeyFingerprint;
    }
    /**
     * ID of the GPG key for this software source
     * 
     */
    @Export(name="gpgKeyId", type=String.class, parameters={})
    private Output<String> gpgKeyId;

    /**
     * @return ID of the GPG key for this software source
     * 
     */
    public Output<String> gpgKeyId() {
        return this.gpgKeyId;
    }
    /**
     * URL of the GPG key for this software source
     * 
     */
    @Export(name="gpgKeyUrl", type=String.class, parameters={})
    private Output<String> gpgKeyUrl;

    /**
     * @return URL of the GPG key for this software source
     * 
     */
    public Output<String> gpgKeyUrl() {
        return this.gpgKeyUrl;
    }
    /**
     * (Updatable) Email address of the person maintaining this software source
     * 
     */
    @Export(name="maintainerEmail", type=String.class, parameters={})
    private Output<String> maintainerEmail;

    /**
     * @return (Updatable) Email address of the person maintaining this software source
     * 
     */
    public Output<String> maintainerEmail() {
        return this.maintainerEmail;
    }
    /**
     * (Updatable) Name of the person maintaining this software source
     * 
     */
    @Export(name="maintainerName", type=String.class, parameters={})
    private Output<String> maintainerName;

    /**
     * @return (Updatable) Name of the person maintaining this software source
     * 
     */
    public Output<String> maintainerName() {
        return this.maintainerName;
    }
    /**
     * (Updatable) Phone number of the person maintaining this software source
     * 
     */
    @Export(name="maintainerPhone", type=String.class, parameters={})
    private Output<String> maintainerPhone;

    /**
     * @return (Updatable) Phone number of the person maintaining this software source
     * 
     */
    public Output<String> maintainerPhone() {
        return this.maintainerPhone;
    }
    /**
     * Number of packages
     * 
     */
    @Export(name="packages", type=Integer.class, parameters={})
    private Output<Integer> packages;

    /**
     * @return Number of packages
     * 
     */
    public Output<Integer> packages() {
        return this.packages;
    }
    /**
     * OCID for the parent software source, if there is one
     * 
     */
    @Export(name="parentId", type=String.class, parameters={})
    private Output<String> parentId;

    /**
     * @return OCID for the parent software source, if there is one
     * 
     */
    public Output<String> parentId() {
        return this.parentId;
    }
    /**
     * Display name the parent software source, if there is one
     * 
     */
    @Export(name="parentName", type=String.class, parameters={})
    private Output<String> parentName;

    /**
     * @return Display name the parent software source, if there is one
     * 
     */
    public Output<String> parentName() {
        return this.parentName;
    }
    /**
     * Type of the Software Source
     * 
     */
    @Export(name="repoType", type=String.class, parameters={})
    private Output<String> repoType;

    /**
     * @return Type of the Software Source
     * 
     */
    public Output<String> repoType() {
        return this.repoType;
    }
    /**
     * The current state of the Software Source.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The current state of the Software Source.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * status of the software source.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return status of the software source.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * URL for the repostiory
     * 
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return URL for the repostiory
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SoftwareSource(String name) {
        this(name, SoftwareSourceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SoftwareSource(String name, SoftwareSourceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SoftwareSource(String name, SoftwareSourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:OsManagement/softwareSource:SoftwareSource", name, args == null ? SoftwareSourceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SoftwareSource(String name, Output<String> id, @Nullable SoftwareSourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:OsManagement/softwareSource:SoftwareSource", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SoftwareSource get(String name, Output<String> id, @Nullable SoftwareSourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SoftwareSource(name, id, state, options);
    }
}
