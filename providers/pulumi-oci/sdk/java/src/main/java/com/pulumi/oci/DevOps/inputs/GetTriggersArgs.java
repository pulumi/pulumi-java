// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.GetTriggersFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetTriggersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTriggersArgs Empty = new GetTriggersArgs();

    /**
     * The OCID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private Output</* @Nullable */ String> compartmentId;

    /**
     * @return The OCID of the compartment in which to list resources.
     * 
     */
    public Output</* @Nullable */ String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Output</* @Nullable */ String> displayName() {
        return this.displayName;
    }

    /**
     * The filters for the trigger.
     * 
     */
    @Import(name="filters")
    private Output</* @Nullable */ List<GetTriggersFilter>> filters;

    /**
     * @return The filters for the trigger.
     * 
     */
    public Output</* @Nullable */ List<GetTriggersFilter>> filters() {
        return this.filters;
    }

    /**
     * Unique trigger identifier.
     * 
     */
    @Import(name="id")
    private Output</* @Nullable */ String> id;

    /**
     * @return Unique trigger identifier.
     * 
     */
    public Output</* @Nullable */ String> id() {
        return this.id;
    }

    /**
     * unique project identifier
     * 
     */
    @Import(name="projectId")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return unique project identifier
     * 
     */
    public Output</* @Nullable */ String> projectId() {
        return this.projectId;
    }

    /**
     * A filter to return only triggers that matches the given lifecycle state.
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return A filter to return only triggers that matches the given lifecycle state.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    private GetTriggersArgs() {}

    private GetTriggersArgs(GetTriggersArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.id = $.id;
        this.projectId = $.projectId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTriggersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTriggersArgs $;

        public Builder() {
            $ = new GetTriggersArgs();
        }

        public Builder(GetTriggersArgs defaults) {
            $ = new GetTriggersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output</* @Nullable */ String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output</* @Nullable */ String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param filters The filters for the trigger.
         * 
         * @return builder
         * 
         */
        public Builder filters(Output</* @Nullable */ List<GetTriggersFilter>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters The filters for the trigger.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable List<GetTriggersFilter> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters The filters for the trigger.
         * 
         * @return builder
         * 
         */
        public Builder filters(GetTriggersFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id Unique trigger identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(Output</* @Nullable */ String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique trigger identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            return id(Output.of(id));
        }

        /**
         * @param projectId unique project identifier
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output</* @Nullable */ String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId unique project identifier
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param state A filter to return only triggers that matches the given lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only triggers that matches the given lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        public GetTriggersArgs build() {
            return $;
        }
    }

}
