// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OperatorAccessControl;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OperatorControlAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final OperatorControlAssignmentArgs Empty = new OperatorControlAssignmentArgs();

    /**
     * (Updatable) Comment about the assignment of the operator control to this target resource.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return (Updatable) Comment about the assignment of the operator control to this target resource.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * (Updatable) The OCID of the compartment that contains the operator control assignment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment that contains the operator control assignment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The boolean if true would autoApprove during maintenance.
     * 
     */
    @Import(name="isAutoApproveDuringMaintenance")
    private @Nullable Output<Boolean> isAutoApproveDuringMaintenance;

    /**
     * @return (Updatable) The boolean if true would autoApprove during maintenance.
     * 
     */
    public Optional<Output<Boolean>> isAutoApproveDuringMaintenance() {
        return Optional.ofNullable(this.isAutoApproveDuringMaintenance);
    }

    /**
     * (Updatable) If set, then the target resource is always governed by the operator control.
     * 
     */
    @Import(name="isEnforcedAlways", required=true)
    private Output<Boolean> isEnforcedAlways;

    /**
     * @return (Updatable) If set, then the target resource is always governed by the operator control.
     * 
     */
    public Output<Boolean> isEnforcedAlways() {
        return this.isEnforcedAlways;
    }

    /**
     * (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
     * 
     */
    @Import(name="isLogForwarded")
    private @Nullable Output<Boolean> isLogForwarded;

    /**
     * @return (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
     * 
     */
    public Optional<Output<Boolean>> isLogForwarded() {
        return Optional.ofNullable(this.isLogForwarded);
    }

    /**
     * The OCID of the operator control that is being assigned to a target resource.
     * 
     */
    @Import(name="operatorControlId", required=true)
    private Output<String> operatorControlId;

    /**
     * @return The OCID of the operator control that is being assigned to a target resource.
     * 
     */
    public Output<String> operatorControlId() {
        return this.operatorControlId;
    }

    /**
     * (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
     * 
     */
    @Import(name="remoteSyslogServerAddress")
    private @Nullable Output<String> remoteSyslogServerAddress;

    /**
     * @return (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
     * 
     */
    public Optional<Output<String>> remoteSyslogServerAddress() {
        return Optional.ofNullable(this.remoteSyslogServerAddress);
    }

    /**
     * (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
     * 
     */
    @Import(name="remoteSyslogServerCaCert")
    private @Nullable Output<String> remoteSyslogServerCaCert;

    /**
     * @return (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
     * 
     */
    public Optional<Output<String>> remoteSyslogServerCaCert() {
        return Optional.ofNullable(this.remoteSyslogServerCaCert);
    }

    /**
     * (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
     * 
     */
    @Import(name="remoteSyslogServerPort")
    private @Nullable Output<Integer> remoteSyslogServerPort;

    /**
     * @return (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
     * 
     */
    public Optional<Output<Integer>> remoteSyslogServerPort() {
        return Optional.ofNullable(this.remoteSyslogServerPort);
    }

    /**
     * The OCID of the compartment that contains the target resource.
     * 
     */
    @Import(name="resourceCompartmentId", required=true)
    private Output<String> resourceCompartmentId;

    /**
     * @return The OCID of the compartment that contains the target resource.
     * 
     */
    public Output<String> resourceCompartmentId() {
        return this.resourceCompartmentId;
    }

    /**
     * The OCID of the target resource being brought under the governance of the operator control.
     * 
     */
    @Import(name="resourceId", required=true)
    private Output<String> resourceId;

    /**
     * @return The OCID of the target resource being brought under the governance of the operator control.
     * 
     */
    public Output<String> resourceId() {
        return this.resourceId;
    }

    /**
     * Name of the target resource.
     * 
     */
    @Import(name="resourceName", required=true)
    private Output<String> resourceName;

    /**
     * @return Name of the target resource.
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }

    /**
     * Type of the target resource.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return Type of the target resource.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    /**
     * (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    @Import(name="timeAssignmentFrom")
    private @Nullable Output<String> timeAssignmentFrom;

    /**
     * @return (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public Optional<Output<String>> timeAssignmentFrom() {
        return Optional.ofNullable(this.timeAssignmentFrom);
    }

    /**
     * (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    @Import(name="timeAssignmentTo")
    private @Nullable Output<String> timeAssignmentTo;

    /**
     * @return (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public Optional<Output<String>> timeAssignmentTo() {
        return Optional.ofNullable(this.timeAssignmentTo);
    }

    private OperatorControlAssignmentArgs() {}

    private OperatorControlAssignmentArgs(OperatorControlAssignmentArgs $) {
        this.comment = $.comment;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.freeformTags = $.freeformTags;
        this.isAutoApproveDuringMaintenance = $.isAutoApproveDuringMaintenance;
        this.isEnforcedAlways = $.isEnforcedAlways;
        this.isLogForwarded = $.isLogForwarded;
        this.operatorControlId = $.operatorControlId;
        this.remoteSyslogServerAddress = $.remoteSyslogServerAddress;
        this.remoteSyslogServerCaCert = $.remoteSyslogServerCaCert;
        this.remoteSyslogServerPort = $.remoteSyslogServerPort;
        this.resourceCompartmentId = $.resourceCompartmentId;
        this.resourceId = $.resourceId;
        this.resourceName = $.resourceName;
        this.resourceType = $.resourceType;
        this.timeAssignmentFrom = $.timeAssignmentFrom;
        this.timeAssignmentTo = $.timeAssignmentTo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OperatorControlAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OperatorControlAssignmentArgs $;

        public Builder() {
            $ = new OperatorControlAssignmentArgs();
        }

        public Builder(OperatorControlAssignmentArgs defaults) {
            $ = new OperatorControlAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment (Updatable) Comment about the assignment of the operator control to this target resource.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment (Updatable) Comment about the assignment of the operator control to this target resource.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment that contains the operator control assignment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment that contains the operator control assignment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isAutoApproveDuringMaintenance (Updatable) The boolean if true would autoApprove during maintenance.
         * 
         * @return builder
         * 
         */
        public Builder isAutoApproveDuringMaintenance(@Nullable Output<Boolean> isAutoApproveDuringMaintenance) {
            $.isAutoApproveDuringMaintenance = isAutoApproveDuringMaintenance;
            return this;
        }

        /**
         * @param isAutoApproveDuringMaintenance (Updatable) The boolean if true would autoApprove during maintenance.
         * 
         * @return builder
         * 
         */
        public Builder isAutoApproveDuringMaintenance(Boolean isAutoApproveDuringMaintenance) {
            return isAutoApproveDuringMaintenance(Output.of(isAutoApproveDuringMaintenance));
        }

        /**
         * @param isEnforcedAlways (Updatable) If set, then the target resource is always governed by the operator control.
         * 
         * @return builder
         * 
         */
        public Builder isEnforcedAlways(Output<Boolean> isEnforcedAlways) {
            $.isEnforcedAlways = isEnforcedAlways;
            return this;
        }

        /**
         * @param isEnforcedAlways (Updatable) If set, then the target resource is always governed by the operator control.
         * 
         * @return builder
         * 
         */
        public Builder isEnforcedAlways(Boolean isEnforcedAlways) {
            return isEnforcedAlways(Output.of(isEnforcedAlways));
        }

        /**
         * @param isLogForwarded (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
         * 
         * @return builder
         * 
         */
        public Builder isLogForwarded(@Nullable Output<Boolean> isLogForwarded) {
            $.isLogForwarded = isLogForwarded;
            return this;
        }

        /**
         * @param isLogForwarded (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
         * 
         * @return builder
         * 
         */
        public Builder isLogForwarded(Boolean isLogForwarded) {
            return isLogForwarded(Output.of(isLogForwarded));
        }

        /**
         * @param operatorControlId The OCID of the operator control that is being assigned to a target resource.
         * 
         * @return builder
         * 
         */
        public Builder operatorControlId(Output<String> operatorControlId) {
            $.operatorControlId = operatorControlId;
            return this;
        }

        /**
         * @param operatorControlId The OCID of the operator control that is being assigned to a target resource.
         * 
         * @return builder
         * 
         */
        public Builder operatorControlId(String operatorControlId) {
            return operatorControlId(Output.of(operatorControlId));
        }

        /**
         * @param remoteSyslogServerAddress (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerAddress(@Nullable Output<String> remoteSyslogServerAddress) {
            $.remoteSyslogServerAddress = remoteSyslogServerAddress;
            return this;
        }

        /**
         * @param remoteSyslogServerAddress (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerAddress(String remoteSyslogServerAddress) {
            return remoteSyslogServerAddress(Output.of(remoteSyslogServerAddress));
        }

        /**
         * @param remoteSyslogServerCaCert (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerCaCert(@Nullable Output<String> remoteSyslogServerCaCert) {
            $.remoteSyslogServerCaCert = remoteSyslogServerCaCert;
            return this;
        }

        /**
         * @param remoteSyslogServerCaCert (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerCaCert(String remoteSyslogServerCaCert) {
            return remoteSyslogServerCaCert(Output.of(remoteSyslogServerCaCert));
        }

        /**
         * @param remoteSyslogServerPort (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerPort(@Nullable Output<Integer> remoteSyslogServerPort) {
            $.remoteSyslogServerPort = remoteSyslogServerPort;
            return this;
        }

        /**
         * @param remoteSyslogServerPort (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
         * 
         * @return builder
         * 
         */
        public Builder remoteSyslogServerPort(Integer remoteSyslogServerPort) {
            return remoteSyslogServerPort(Output.of(remoteSyslogServerPort));
        }

        /**
         * @param resourceCompartmentId The OCID of the compartment that contains the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceCompartmentId(Output<String> resourceCompartmentId) {
            $.resourceCompartmentId = resourceCompartmentId;
            return this;
        }

        /**
         * @param resourceCompartmentId The OCID of the compartment that contains the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceCompartmentId(String resourceCompartmentId) {
            return resourceCompartmentId(Output.of(resourceCompartmentId));
        }

        /**
         * @param resourceId The OCID of the target resource being brought under the governance of the operator control.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The OCID of the target resource being brought under the governance of the operator control.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceName Name of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName Name of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourceType Type of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Type of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param timeAssignmentFrom (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeAssignmentFrom(@Nullable Output<String> timeAssignmentFrom) {
            $.timeAssignmentFrom = timeAssignmentFrom;
            return this;
        }

        /**
         * @param timeAssignmentFrom (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeAssignmentFrom(String timeAssignmentFrom) {
            return timeAssignmentFrom(Output.of(timeAssignmentFrom));
        }

        /**
         * @param timeAssignmentTo (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeAssignmentTo(@Nullable Output<String> timeAssignmentTo) {
            $.timeAssignmentTo = timeAssignmentTo;
            return this;
        }

        /**
         * @param timeAssignmentTo (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: &#39;2020-05-22T21:10:29.600Z&#39;
         * 
         * @return builder
         * 
         */
        public Builder timeAssignmentTo(String timeAssignmentTo) {
            return timeAssignmentTo(Output.of(timeAssignmentTo));
        }

        public OperatorControlAssignmentArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.isEnforcedAlways = Objects.requireNonNull($.isEnforcedAlways, "expected parameter 'isEnforcedAlways' to be non-null");
            $.operatorControlId = Objects.requireNonNull($.operatorControlId, "expected parameter 'operatorControlId' to be non-null");
            $.resourceCompartmentId = Objects.requireNonNull($.resourceCompartmentId, "expected parameter 'resourceCompartmentId' to be non-null");
            $.resourceId = Objects.requireNonNull($.resourceId, "expected parameter 'resourceId' to be non-null");
            $.resourceName = Objects.requireNonNull($.resourceName, "expected parameter 'resourceName' to be non-null");
            $.resourceType = Objects.requireNonNull($.resourceType, "expected parameter 'resourceType' to be non-null");
            return $;
        }
    }

}
