// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OsManagement.outputs.GetManagedInstanceGroupsManagedInstanceGroupManagedInstance;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetManagedInstanceGroupsManagedInstanceGroup {
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private final String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Information specified by the user about the managed instance group
     * 
     */
    private final String description;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    private final String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return unique identifier that is immutable on creation
     * 
     */
    private final String id;
    private final Integer managedInstanceCount;
    /**
     * @return list of Managed Instances in the group
     * 
     */
    private final List<GetManagedInstanceGroupsManagedInstanceGroupManagedInstance> managedInstances;
    /**
     * @return The OS family for which to list resources.
     * 
     */
    private final String osFamily;
    /**
     * @return The current lifecycle state for the object.
     * 
     */
    private final String state;

    @CustomType.Constructor
    private GetManagedInstanceGroupsManagedInstanceGroup(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("managedInstanceCount") Integer managedInstanceCount,
        @CustomType.Parameter("managedInstances") List<GetManagedInstanceGroupsManagedInstanceGroupManagedInstance> managedInstances,
        @CustomType.Parameter("osFamily") String osFamily,
        @CustomType.Parameter("state") String state) {
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.description = description;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.id = id;
        this.managedInstanceCount = managedInstanceCount;
        this.managedInstances = managedInstances;
        this.osFamily = osFamily;
        this.state = state;
    }

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Information specified by the user about the managed instance group
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return unique identifier that is immutable on creation
     * 
     */
    public String id() {
        return this.id;
    }
    public Integer managedInstanceCount() {
        return this.managedInstanceCount;
    }
    /**
     * @return list of Managed Instances in the group
     * 
     */
    public List<GetManagedInstanceGroupsManagedInstanceGroupManagedInstance> managedInstances() {
        return this.managedInstances;
    }
    /**
     * @return The OS family for which to list resources.
     * 
     */
    public String osFamily() {
        return this.osFamily;
    }
    /**
     * @return The current lifecycle state for the object.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedInstanceGroupsManagedInstanceGroup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private Integer managedInstanceCount;
        private List<GetManagedInstanceGroupsManagedInstanceGroupManagedInstance> managedInstances;
        private String osFamily;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedInstanceGroupsManagedInstanceGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.managedInstanceCount = defaults.managedInstanceCount;
    	      this.managedInstances = defaults.managedInstances;
    	      this.osFamily = defaults.osFamily;
    	      this.state = defaults.state;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder managedInstanceCount(Integer managedInstanceCount) {
            this.managedInstanceCount = Objects.requireNonNull(managedInstanceCount);
            return this;
        }
        public Builder managedInstances(List<GetManagedInstanceGroupsManagedInstanceGroupManagedInstance> managedInstances) {
            this.managedInstances = Objects.requireNonNull(managedInstances);
            return this;
        }
        public Builder managedInstances(GetManagedInstanceGroupsManagedInstanceGroupManagedInstance... managedInstances) {
            return managedInstances(List.of(managedInstances));
        }
        public Builder osFamily(String osFamily) {
            this.osFamily = Objects.requireNonNull(osFamily);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }        public GetManagedInstanceGroupsManagedInstanceGroup build() {
            return new GetManagedInstanceGroupsManagedInstanceGroup(compartmentId, definedTags, description, displayName, freeformTags, id, managedInstanceCount, managedInstances, osFamily, state);
        }
    }
}
