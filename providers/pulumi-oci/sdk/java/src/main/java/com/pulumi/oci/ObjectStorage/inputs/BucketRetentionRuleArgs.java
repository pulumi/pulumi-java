// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ObjectStorage.inputs.BucketRetentionRuleDurationArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketRetentionRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketRetentionRuleArgs Empty = new BucketRetentionRuleArgs();

    /**
     * A user-specified name for the retention rule. Names can be helpful in identifying retention rules. The name should be unique. This attribute is a forcenew attribute
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return A user-specified name for the retention rule. Names can be helpful in identifying retention rules. The name should be unique. This attribute is a forcenew attribute
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable)
     * 
     */
    @Import(name="duration")
    private @Nullable Output<BucketRetentionRuleDurationArgs> duration;

    /**
     * @return (Updatable)
     * 
     */
    public Optional<Output<BucketRetentionRuleDurationArgs>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Unique identifier for the retention rule.
     * 
     */
    @Import(name="retentionRuleId")
    private @Nullable Output<String> retentionRuleId;

    /**
     * @return Unique identifier for the retention rule.
     * 
     */
    public Optional<Output<String>> retentionRuleId() {
        return Optional.ofNullable(this.retentionRuleId);
    }

    /**
     * The date and time the bucket was created, as described in [RFC 2616](https://tools.ietf.org/html/rfc2616#section-14.29).
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the bucket was created, as described in [RFC 2616](https://tools.ietf.org/html/rfc2616#section-14.29).
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time that the retention rule was modified as per [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeModified")
    private @Nullable Output<String> timeModified;

    /**
     * @return The date and time that the retention rule was modified as per [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<Output<String>> timeModified() {
        return Optional.ofNullable(this.timeModified);
    }

    /**
     * (Updatable) The date and time as per [RFC 3339](https://tools.ietf.org/html/rfc3339) after which this rule is locked and can only be deleted by deleting the bucket. Once a rule is locked, only increases in the duration are allowed and no other properties can be changed. This property cannot be updated for rules that are in a locked state. Specifying it when a duration is not specified is considered an error.
     * 
     */
    @Import(name="timeRuleLocked")
    private @Nullable Output<String> timeRuleLocked;

    /**
     * @return (Updatable) The date and time as per [RFC 3339](https://tools.ietf.org/html/rfc3339) after which this rule is locked and can only be deleted by deleting the bucket. Once a rule is locked, only increases in the duration are allowed and no other properties can be changed. This property cannot be updated for rules that are in a locked state. Specifying it when a duration is not specified is considered an error.
     * 
     */
    public Optional<Output<String>> timeRuleLocked() {
        return Optional.ofNullable(this.timeRuleLocked);
    }

    private BucketRetentionRuleArgs() {}

    private BucketRetentionRuleArgs(BucketRetentionRuleArgs $) {
        this.displayName = $.displayName;
        this.duration = $.duration;
        this.retentionRuleId = $.retentionRuleId;
        this.timeCreated = $.timeCreated;
        this.timeModified = $.timeModified;
        this.timeRuleLocked = $.timeRuleLocked;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketRetentionRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketRetentionRuleArgs $;

        public Builder() {
            $ = new BucketRetentionRuleArgs();
        }

        public Builder(BucketRetentionRuleArgs defaults) {
            $ = new BucketRetentionRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName A user-specified name for the retention rule. Names can be helpful in identifying retention rules. The name should be unique. This attribute is a forcenew attribute
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A user-specified name for the retention rule. Names can be helpful in identifying retention rules. The name should be unique. This attribute is a forcenew attribute
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param duration (Updatable)
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<BucketRetentionRuleDurationArgs> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration (Updatable)
         * 
         * @return builder
         * 
         */
        public Builder duration(BucketRetentionRuleDurationArgs duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param retentionRuleId Unique identifier for the retention rule.
         * 
         * @return builder
         * 
         */
        public Builder retentionRuleId(@Nullable Output<String> retentionRuleId) {
            $.retentionRuleId = retentionRuleId;
            return this;
        }

        /**
         * @param retentionRuleId Unique identifier for the retention rule.
         * 
         * @return builder
         * 
         */
        public Builder retentionRuleId(String retentionRuleId) {
            return retentionRuleId(Output.of(retentionRuleId));
        }

        /**
         * @param timeCreated The date and time the bucket was created, as described in [RFC 2616](https://tools.ietf.org/html/rfc2616#section-14.29).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the bucket was created, as described in [RFC 2616](https://tools.ietf.org/html/rfc2616#section-14.29).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeModified The date and time that the retention rule was modified as per [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeModified(@Nullable Output<String> timeModified) {
            $.timeModified = timeModified;
            return this;
        }

        /**
         * @param timeModified The date and time that the retention rule was modified as per [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeModified(String timeModified) {
            return timeModified(Output.of(timeModified));
        }

        /**
         * @param timeRuleLocked (Updatable) The date and time as per [RFC 3339](https://tools.ietf.org/html/rfc3339) after which this rule is locked and can only be deleted by deleting the bucket. Once a rule is locked, only increases in the duration are allowed and no other properties can be changed. This property cannot be updated for rules that are in a locked state. Specifying it when a duration is not specified is considered an error.
         * 
         * @return builder
         * 
         */
        public Builder timeRuleLocked(@Nullable Output<String> timeRuleLocked) {
            $.timeRuleLocked = timeRuleLocked;
            return this;
        }

        /**
         * @param timeRuleLocked (Updatable) The date and time as per [RFC 3339](https://tools.ietf.org/html/rfc3339) after which this rule is locked and can only be deleted by deleting the bucket. Once a rule is locked, only increases in the duration are allowed and no other properties can be changed. This property cannot be updated for rules that are in a locked state. Specifying it when a duration is not specified is considered an error.
         * 
         * @return builder
         * 
         */
        public Builder timeRuleLocked(String timeRuleLocked) {
            return timeRuleLocked(Output.of(timeRuleLocked));
        }

        public BucketRetentionRuleArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
