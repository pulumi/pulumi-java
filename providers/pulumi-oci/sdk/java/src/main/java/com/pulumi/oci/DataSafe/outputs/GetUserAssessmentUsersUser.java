// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserAssessmentUsersUser {
    /**
     * @return A filter to return only items that match the specified account status.
     * 
     */
    private final String accountStatus;
    /**
     * @return The admin roles granted to the user.
     * 
     */
    private final List<String> adminRoles;
    /**
     * @return A filter to return only items that match the specified authentication type.
     * 
     */
    private final String authenticationType;
    /**
     * @return The unique user key. This is a system-generated identifier. Use ListUsers to get the user key for a user.
     * 
     */
    private final String key;
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    private final String targetId;
    /**
     * @return The date and time when the user last logged in, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private final String timeLastLogin;
    /**
     * @return The date and time when the user password was last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private final String timePasswordChanged;
    /**
     * @return The date and time when the user was created in the database, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private final String timeUserCreated;
    /**
     * @return A filter to return only items that match the specified user category.
     * 
     */
    private final String userCategory;
    /**
     * @return A filter to return only items that match the specified user name.
     * 
     */
    private final String userName;
    /**
     * @return The user profile name.
     * 
     */
    private final String userProfile;
    /**
     * @return The user type, which can be a combination of the following:
     * 
     */
    private final List<String> userTypes;

    @CustomType.Constructor
    private GetUserAssessmentUsersUser(
        @CustomType.Parameter("accountStatus") String accountStatus,
        @CustomType.Parameter("adminRoles") List<String> adminRoles,
        @CustomType.Parameter("authenticationType") String authenticationType,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("targetId") String targetId,
        @CustomType.Parameter("timeLastLogin") String timeLastLogin,
        @CustomType.Parameter("timePasswordChanged") String timePasswordChanged,
        @CustomType.Parameter("timeUserCreated") String timeUserCreated,
        @CustomType.Parameter("userCategory") String userCategory,
        @CustomType.Parameter("userName") String userName,
        @CustomType.Parameter("userProfile") String userProfile,
        @CustomType.Parameter("userTypes") List<String> userTypes) {
        this.accountStatus = accountStatus;
        this.adminRoles = adminRoles;
        this.authenticationType = authenticationType;
        this.key = key;
        this.targetId = targetId;
        this.timeLastLogin = timeLastLogin;
        this.timePasswordChanged = timePasswordChanged;
        this.timeUserCreated = timeUserCreated;
        this.userCategory = userCategory;
        this.userName = userName;
        this.userProfile = userProfile;
        this.userTypes = userTypes;
    }

    /**
     * @return A filter to return only items that match the specified account status.
     * 
     */
    public String accountStatus() {
        return this.accountStatus;
    }
    /**
     * @return The admin roles granted to the user.
     * 
     */
    public List<String> adminRoles() {
        return this.adminRoles;
    }
    /**
     * @return A filter to return only items that match the specified authentication type.
     * 
     */
    public String authenticationType() {
        return this.authenticationType;
    }
    /**
     * @return The unique user key. This is a system-generated identifier. Use ListUsers to get the user key for a user.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The date and time when the user last logged in, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeLastLogin() {
        return this.timeLastLogin;
    }
    /**
     * @return The date and time when the user password was last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timePasswordChanged() {
        return this.timePasswordChanged;
    }
    /**
     * @return The date and time when the user was created in the database, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeUserCreated() {
        return this.timeUserCreated;
    }
    /**
     * @return A filter to return only items that match the specified user category.
     * 
     */
    public String userCategory() {
        return this.userCategory;
    }
    /**
     * @return A filter to return only items that match the specified user name.
     * 
     */
    public String userName() {
        return this.userName;
    }
    /**
     * @return The user profile name.
     * 
     */
    public String userProfile() {
        return this.userProfile;
    }
    /**
     * @return The user type, which can be a combination of the following:
     * 
     */
    public List<String> userTypes() {
        return this.userTypes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserAssessmentUsersUser defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accountStatus;
        private List<String> adminRoles;
        private String authenticationType;
        private String key;
        private String targetId;
        private String timeLastLogin;
        private String timePasswordChanged;
        private String timeUserCreated;
        private String userCategory;
        private String userName;
        private String userProfile;
        private List<String> userTypes;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserAssessmentUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountStatus = defaults.accountStatus;
    	      this.adminRoles = defaults.adminRoles;
    	      this.authenticationType = defaults.authenticationType;
    	      this.key = defaults.key;
    	      this.targetId = defaults.targetId;
    	      this.timeLastLogin = defaults.timeLastLogin;
    	      this.timePasswordChanged = defaults.timePasswordChanged;
    	      this.timeUserCreated = defaults.timeUserCreated;
    	      this.userCategory = defaults.userCategory;
    	      this.userName = defaults.userName;
    	      this.userProfile = defaults.userProfile;
    	      this.userTypes = defaults.userTypes;
        }

        public Builder accountStatus(String accountStatus) {
            this.accountStatus = Objects.requireNonNull(accountStatus);
            return this;
        }
        public Builder adminRoles(List<String> adminRoles) {
            this.adminRoles = Objects.requireNonNull(adminRoles);
            return this;
        }
        public Builder adminRoles(String... adminRoles) {
            return adminRoles(List.of(adminRoles));
        }
        public Builder authenticationType(String authenticationType) {
            this.authenticationType = Objects.requireNonNull(authenticationType);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder targetId(String targetId) {
            this.targetId = Objects.requireNonNull(targetId);
            return this;
        }
        public Builder timeLastLogin(String timeLastLogin) {
            this.timeLastLogin = Objects.requireNonNull(timeLastLogin);
            return this;
        }
        public Builder timePasswordChanged(String timePasswordChanged) {
            this.timePasswordChanged = Objects.requireNonNull(timePasswordChanged);
            return this;
        }
        public Builder timeUserCreated(String timeUserCreated) {
            this.timeUserCreated = Objects.requireNonNull(timeUserCreated);
            return this;
        }
        public Builder userCategory(String userCategory) {
            this.userCategory = Objects.requireNonNull(userCategory);
            return this;
        }
        public Builder userName(String userName) {
            this.userName = Objects.requireNonNull(userName);
            return this;
        }
        public Builder userProfile(String userProfile) {
            this.userProfile = Objects.requireNonNull(userProfile);
            return this;
        }
        public Builder userTypes(List<String> userTypes) {
            this.userTypes = Objects.requireNonNull(userTypes);
            return this;
        }
        public Builder userTypes(String... userTypes) {
            return userTypes(List.of(userTypes));
        }        public GetUserAssessmentUsersUser build() {
            return new GetUserAssessmentUsersUser(accountStatus, adminRoles, authenticationType, key, targetId, timeLastLogin, timePasswordChanged, timeUserCreated, userCategory, userName, userProfile, userTypes);
        }
    }
}
