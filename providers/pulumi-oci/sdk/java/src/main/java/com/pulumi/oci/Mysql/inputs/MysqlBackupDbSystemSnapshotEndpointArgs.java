// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlBackupDbSystemSnapshotEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final MysqlBackupDbSystemSnapshotEndpointArgs Empty = new MysqlBackupDbSystemSnapshotEndpointArgs();

    /**
     * The network address of the DB System.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The network address of the DB System.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The access modes from the client that this endpoint supports.
     * 
     */
    @Import(name="modes")
    private @Nullable Output<List<String>> modes;

    /**
     * @return The access modes from the client that this endpoint supports.
     * 
     */
    public Optional<Output<List<String>>> modes() {
        return Optional.ofNullable(this.modes);
    }

    /**
     * The port for primary endpoint of the DB System to listen on.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    @Import(name="portX")
    private @Nullable Output<Integer> portX;

    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    public Optional<Output<Integer>> portX() {
        return Optional.ofNullable(this.portX);
    }

    /**
     * The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Additional information about the current endpoint status.
     * 
     */
    @Import(name="statusDetails")
    private @Nullable Output<String> statusDetails;

    /**
     * @return Additional information about the current endpoint status.
     * 
     */
    public Optional<Output<String>> statusDetails() {
        return Optional.ofNullable(this.statusDetails);
    }

    private MysqlBackupDbSystemSnapshotEndpointArgs() {}

    private MysqlBackupDbSystemSnapshotEndpointArgs(MysqlBackupDbSystemSnapshotEndpointArgs $) {
        this.hostname = $.hostname;
        this.ipAddress = $.ipAddress;
        this.modes = $.modes;
        this.port = $.port;
        this.portX = $.portX;
        this.status = $.status;
        this.statusDetails = $.statusDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlBackupDbSystemSnapshotEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlBackupDbSystemSnapshotEndpointArgs $;

        public Builder() {
            $ = new MysqlBackupDbSystemSnapshotEndpointArgs();
        }

        public Builder(MysqlBackupDbSystemSnapshotEndpointArgs defaults) {
            $ = new MysqlBackupDbSystemSnapshotEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostname The network address of the DB System.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The network address of the DB System.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param ipAddress The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param modes The access modes from the client that this endpoint supports.
         * 
         * @return builder
         * 
         */
        public Builder modes(@Nullable Output<List<String>> modes) {
            $.modes = modes;
            return this;
        }

        /**
         * @param modes The access modes from the client that this endpoint supports.
         * 
         * @return builder
         * 
         */
        public Builder modes(List<String> modes) {
            return modes(Output.of(modes));
        }

        /**
         * @param modes The access modes from the client that this endpoint supports.
         * 
         * @return builder
         * 
         */
        public Builder modes(String... modes) {
            return modes(List.of(modes));
        }

        /**
         * @param port The port for primary endpoint of the DB System to listen on.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port for primary endpoint of the DB System to listen on.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param portX The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
         * 
         * @return builder
         * 
         */
        public Builder portX(@Nullable Output<Integer> portX) {
            $.portX = portX;
            return this;
        }

        /**
         * @param portX The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
         * 
         * @return builder
         * 
         */
        public Builder portX(Integer portX) {
            return portX(Output.of(portX));
        }

        /**
         * @param status The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The state of the endpoints, as far as it can seen from the DB System. There may be some inconsistency with the actual state of the MySQL service.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param statusDetails Additional information about the current endpoint status.
         * 
         * @return builder
         * 
         */
        public Builder statusDetails(@Nullable Output<String> statusDetails) {
            $.statusDetails = statusDetails;
            return this;
        }

        /**
         * @param statusDetails Additional information about the current endpoint status.
         * 
         * @return builder
         * 
         */
        public Builder statusDetails(String statusDetails) {
            return statusDetails(Output.of(statusDetails));
        }

        public MysqlBackupDbSystemSnapshotEndpointArgs build() {
            return $;
        }
    }

}
