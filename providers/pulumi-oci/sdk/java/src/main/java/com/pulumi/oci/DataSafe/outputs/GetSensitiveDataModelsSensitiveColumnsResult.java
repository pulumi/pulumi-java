// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveDataModelsSensitiveColumnsFilter;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSensitiveDataModelsSensitiveColumnsResult {
    private final @Nullable String columnGroup;
    /**
     * @return The name of the sensitive column.
     * 
     */
    private final @Nullable List<String> columnNames;
    /**
     * @return The data type of the sensitive column.
     * 
     */
    private final @Nullable List<String> dataTypes;
    private final @Nullable List<GetSensitiveDataModelsSensitiveColumnsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    private final @Nullable List<String> objectTypes;
    /**
     * @return The database object that contains the sensitive column.
     * 
     */
    private final @Nullable List<String> objects;
    private final @Nullable List<String> parentColumnKeys;
    /**
     * @return The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    private final @Nullable List<String> relationTypes;
    /**
     * @return The database schema that contains the sensitive column.
     * 
     */
    private final @Nullable List<String> schemaNames;
    /**
     * @return The list of sensitive_column_collection.
     * 
     */
    private final List<GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollection> sensitiveColumnCollections;
    private final @Nullable String sensitiveColumnLifecycleState;
    /**
     * @return The OCID of the sensitive data model that contains the sensitive column.
     * 
     */
    private final String sensitiveDataModelId;
    /**
     * @return The OCID of the sensitive type associated with the sensitive column.
     * 
     */
    private final @Nullable List<String> sensitiveTypeIds;
    /**
     * @return The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive again.
     * 
     */
    private final @Nullable List<String> statuses;
    private final @Nullable String timeCreatedGreaterThanOrEqualTo;
    private final @Nullable String timeCreatedLessThan;
    private final @Nullable String timeUpdatedGreaterThanOrEqualTo;
    private final @Nullable String timeUpdatedLessThan;

    @CustomType.Constructor
    private GetSensitiveDataModelsSensitiveColumnsResult(
        @CustomType.Parameter("columnGroup") @Nullable String columnGroup,
        @CustomType.Parameter("columnNames") @Nullable List<String> columnNames,
        @CustomType.Parameter("dataTypes") @Nullable List<String> dataTypes,
        @CustomType.Parameter("filters") @Nullable List<GetSensitiveDataModelsSensitiveColumnsFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("objectTypes") @Nullable List<String> objectTypes,
        @CustomType.Parameter("objects") @Nullable List<String> objects,
        @CustomType.Parameter("parentColumnKeys") @Nullable List<String> parentColumnKeys,
        @CustomType.Parameter("relationTypes") @Nullable List<String> relationTypes,
        @CustomType.Parameter("schemaNames") @Nullable List<String> schemaNames,
        @CustomType.Parameter("sensitiveColumnCollections") List<GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollection> sensitiveColumnCollections,
        @CustomType.Parameter("sensitiveColumnLifecycleState") @Nullable String sensitiveColumnLifecycleState,
        @CustomType.Parameter("sensitiveDataModelId") String sensitiveDataModelId,
        @CustomType.Parameter("sensitiveTypeIds") @Nullable List<String> sensitiveTypeIds,
        @CustomType.Parameter("statuses") @Nullable List<String> statuses,
        @CustomType.Parameter("timeCreatedGreaterThanOrEqualTo") @Nullable String timeCreatedGreaterThanOrEqualTo,
        @CustomType.Parameter("timeCreatedLessThan") @Nullable String timeCreatedLessThan,
        @CustomType.Parameter("timeUpdatedGreaterThanOrEqualTo") @Nullable String timeUpdatedGreaterThanOrEqualTo,
        @CustomType.Parameter("timeUpdatedLessThan") @Nullable String timeUpdatedLessThan) {
        this.columnGroup = columnGroup;
        this.columnNames = columnNames;
        this.dataTypes = dataTypes;
        this.filters = filters;
        this.id = id;
        this.objectTypes = objectTypes;
        this.objects = objects;
        this.parentColumnKeys = parentColumnKeys;
        this.relationTypes = relationTypes;
        this.schemaNames = schemaNames;
        this.sensitiveColumnCollections = sensitiveColumnCollections;
        this.sensitiveColumnLifecycleState = sensitiveColumnLifecycleState;
        this.sensitiveDataModelId = sensitiveDataModelId;
        this.sensitiveTypeIds = sensitiveTypeIds;
        this.statuses = statuses;
        this.timeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
        this.timeCreatedLessThan = timeCreatedLessThan;
        this.timeUpdatedGreaterThanOrEqualTo = timeUpdatedGreaterThanOrEqualTo;
        this.timeUpdatedLessThan = timeUpdatedLessThan;
    }

    public Optional<String> columnGroup() {
        return Optional.ofNullable(this.columnGroup);
    }
    /**
     * @return The name of the sensitive column.
     * 
     */
    public List<String> columnNames() {
        return this.columnNames == null ? List.of() : this.columnNames;
    }
    /**
     * @return The data type of the sensitive column.
     * 
     */
    public List<String> dataTypes() {
        return this.dataTypes == null ? List.of() : this.dataTypes;
    }
    public List<GetSensitiveDataModelsSensitiveColumnsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    public List<String> objectTypes() {
        return this.objectTypes == null ? List.of() : this.objectTypes;
    }
    /**
     * @return The database object that contains the sensitive column.
     * 
     */
    public List<String> objects() {
        return this.objects == null ? List.of() : this.objects;
    }
    public List<String> parentColumnKeys() {
        return this.parentColumnKeys == null ? List.of() : this.parentColumnKeys;
    }
    /**
     * @return The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    public List<String> relationTypes() {
        return this.relationTypes == null ? List.of() : this.relationTypes;
    }
    /**
     * @return The database schema that contains the sensitive column.
     * 
     */
    public List<String> schemaNames() {
        return this.schemaNames == null ? List.of() : this.schemaNames;
    }
    /**
     * @return The list of sensitive_column_collection.
     * 
     */
    public List<GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollection> sensitiveColumnCollections() {
        return this.sensitiveColumnCollections;
    }
    public Optional<String> sensitiveColumnLifecycleState() {
        return Optional.ofNullable(this.sensitiveColumnLifecycleState);
    }
    /**
     * @return The OCID of the sensitive data model that contains the sensitive column.
     * 
     */
    public String sensitiveDataModelId() {
        return this.sensitiveDataModelId;
    }
    /**
     * @return The OCID of the sensitive type associated with the sensitive column.
     * 
     */
    public List<String> sensitiveTypeIds() {
        return this.sensitiveTypeIds == null ? List.of() : this.sensitiveTypeIds;
    }
    /**
     * @return The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive again.
     * 
     */
    public List<String> statuses() {
        return this.statuses == null ? List.of() : this.statuses;
    }
    public Optional<String> timeCreatedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeCreatedGreaterThanOrEqualTo);
    }
    public Optional<String> timeCreatedLessThan() {
        return Optional.ofNullable(this.timeCreatedLessThan);
    }
    public Optional<String> timeUpdatedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeUpdatedGreaterThanOrEqualTo);
    }
    public Optional<String> timeUpdatedLessThan() {
        return Optional.ofNullable(this.timeUpdatedLessThan);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensitiveDataModelsSensitiveColumnsResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String columnGroup;
        private @Nullable List<String> columnNames;
        private @Nullable List<String> dataTypes;
        private @Nullable List<GetSensitiveDataModelsSensitiveColumnsFilter> filters;
        private String id;
        private @Nullable List<String> objectTypes;
        private @Nullable List<String> objects;
        private @Nullable List<String> parentColumnKeys;
        private @Nullable List<String> relationTypes;
        private @Nullable List<String> schemaNames;
        private List<GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollection> sensitiveColumnCollections;
        private @Nullable String sensitiveColumnLifecycleState;
        private String sensitiveDataModelId;
        private @Nullable List<String> sensitiveTypeIds;
        private @Nullable List<String> statuses;
        private @Nullable String timeCreatedGreaterThanOrEqualTo;
        private @Nullable String timeCreatedLessThan;
        private @Nullable String timeUpdatedGreaterThanOrEqualTo;
        private @Nullable String timeUpdatedLessThan;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSensitiveDataModelsSensitiveColumnsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnGroup = defaults.columnGroup;
    	      this.columnNames = defaults.columnNames;
    	      this.dataTypes = defaults.dataTypes;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.objectTypes = defaults.objectTypes;
    	      this.objects = defaults.objects;
    	      this.parentColumnKeys = defaults.parentColumnKeys;
    	      this.relationTypes = defaults.relationTypes;
    	      this.schemaNames = defaults.schemaNames;
    	      this.sensitiveColumnCollections = defaults.sensitiveColumnCollections;
    	      this.sensitiveColumnLifecycleState = defaults.sensitiveColumnLifecycleState;
    	      this.sensitiveDataModelId = defaults.sensitiveDataModelId;
    	      this.sensitiveTypeIds = defaults.sensitiveTypeIds;
    	      this.statuses = defaults.statuses;
    	      this.timeCreatedGreaterThanOrEqualTo = defaults.timeCreatedGreaterThanOrEqualTo;
    	      this.timeCreatedLessThan = defaults.timeCreatedLessThan;
    	      this.timeUpdatedGreaterThanOrEqualTo = defaults.timeUpdatedGreaterThanOrEqualTo;
    	      this.timeUpdatedLessThan = defaults.timeUpdatedLessThan;
        }

        public Builder columnGroup(@Nullable String columnGroup) {
            this.columnGroup = columnGroup;
            return this;
        }
        public Builder columnNames(@Nullable List<String> columnNames) {
            this.columnNames = columnNames;
            return this;
        }
        public Builder columnNames(String... columnNames) {
            return columnNames(List.of(columnNames));
        }
        public Builder dataTypes(@Nullable List<String> dataTypes) {
            this.dataTypes = dataTypes;
            return this;
        }
        public Builder dataTypes(String... dataTypes) {
            return dataTypes(List.of(dataTypes));
        }
        public Builder filters(@Nullable List<GetSensitiveDataModelsSensitiveColumnsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetSensitiveDataModelsSensitiveColumnsFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder objectTypes(@Nullable List<String> objectTypes) {
            this.objectTypes = objectTypes;
            return this;
        }
        public Builder objectTypes(String... objectTypes) {
            return objectTypes(List.of(objectTypes));
        }
        public Builder objects(@Nullable List<String> objects) {
            this.objects = objects;
            return this;
        }
        public Builder objects(String... objects) {
            return objects(List.of(objects));
        }
        public Builder parentColumnKeys(@Nullable List<String> parentColumnKeys) {
            this.parentColumnKeys = parentColumnKeys;
            return this;
        }
        public Builder parentColumnKeys(String... parentColumnKeys) {
            return parentColumnKeys(List.of(parentColumnKeys));
        }
        public Builder relationTypes(@Nullable List<String> relationTypes) {
            this.relationTypes = relationTypes;
            return this;
        }
        public Builder relationTypes(String... relationTypes) {
            return relationTypes(List.of(relationTypes));
        }
        public Builder schemaNames(@Nullable List<String> schemaNames) {
            this.schemaNames = schemaNames;
            return this;
        }
        public Builder schemaNames(String... schemaNames) {
            return schemaNames(List.of(schemaNames));
        }
        public Builder sensitiveColumnCollections(List<GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollection> sensitiveColumnCollections) {
            this.sensitiveColumnCollections = Objects.requireNonNull(sensitiveColumnCollections);
            return this;
        }
        public Builder sensitiveColumnCollections(GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollection... sensitiveColumnCollections) {
            return sensitiveColumnCollections(List.of(sensitiveColumnCollections));
        }
        public Builder sensitiveColumnLifecycleState(@Nullable String sensitiveColumnLifecycleState) {
            this.sensitiveColumnLifecycleState = sensitiveColumnLifecycleState;
            return this;
        }
        public Builder sensitiveDataModelId(String sensitiveDataModelId) {
            this.sensitiveDataModelId = Objects.requireNonNull(sensitiveDataModelId);
            return this;
        }
        public Builder sensitiveTypeIds(@Nullable List<String> sensitiveTypeIds) {
            this.sensitiveTypeIds = sensitiveTypeIds;
            return this;
        }
        public Builder sensitiveTypeIds(String... sensitiveTypeIds) {
            return sensitiveTypeIds(List.of(sensitiveTypeIds));
        }
        public Builder statuses(@Nullable List<String> statuses) {
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }
        public Builder timeCreatedGreaterThanOrEqualTo(@Nullable String timeCreatedGreaterThanOrEqualTo) {
            this.timeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            return this;
        }
        public Builder timeCreatedLessThan(@Nullable String timeCreatedLessThan) {
            this.timeCreatedLessThan = timeCreatedLessThan;
            return this;
        }
        public Builder timeUpdatedGreaterThanOrEqualTo(@Nullable String timeUpdatedGreaterThanOrEqualTo) {
            this.timeUpdatedGreaterThanOrEqualTo = timeUpdatedGreaterThanOrEqualTo;
            return this;
        }
        public Builder timeUpdatedLessThan(@Nullable String timeUpdatedLessThan) {
            this.timeUpdatedLessThan = timeUpdatedLessThan;
            return this;
        }        public GetSensitiveDataModelsSensitiveColumnsResult build() {
            return new GetSensitiveDataModelsSensitiveColumnsResult(columnGroup, columnNames, dataTypes, filters, id, objectTypes, objects, parentColumnKeys, relationTypes, schemaNames, sensitiveColumnCollections, sensitiveColumnLifecycleState, sensitiveDataModelId, sensitiveTypeIds, statuses, timeCreatedGreaterThanOrEqualTo, timeCreatedLessThan, timeUpdatedGreaterThanOrEqualTo, timeUpdatedLessThan);
        }
    }
}
