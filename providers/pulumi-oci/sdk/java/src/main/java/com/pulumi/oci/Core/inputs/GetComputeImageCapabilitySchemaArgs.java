// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetComputeImageCapabilitySchemaArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetComputeImageCapabilitySchemaArgs Empty = new GetComputeImageCapabilitySchemaArgs();

    /**
     * The id of the compute image capability schema or the image ocid
     * 
     */
    @Import(name="computeImageCapabilitySchemaId", required=true)
    private Output<String> computeImageCapabilitySchemaId;

    /**
     * @return The id of the compute image capability schema or the image ocid
     * 
     */
    public Output<String> computeImageCapabilitySchemaId() {
        return this.computeImageCapabilitySchemaId;
    }

    /**
     * Merge the image capability schema with the global image capability schema
     * 
     */
    @Import(name="isMergeEnabled")
    private @Nullable Output<String> isMergeEnabled;

    /**
     * @return Merge the image capability schema with the global image capability schema
     * 
     */
    public Optional<Output<String>> isMergeEnabled() {
        return Optional.ofNullable(this.isMergeEnabled);
    }

    private GetComputeImageCapabilitySchemaArgs() {}

    private GetComputeImageCapabilitySchemaArgs(GetComputeImageCapabilitySchemaArgs $) {
        this.computeImageCapabilitySchemaId = $.computeImageCapabilitySchemaId;
        this.isMergeEnabled = $.isMergeEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetComputeImageCapabilitySchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetComputeImageCapabilitySchemaArgs $;

        public Builder() {
            $ = new GetComputeImageCapabilitySchemaArgs();
        }

        public Builder(GetComputeImageCapabilitySchemaArgs defaults) {
            $ = new GetComputeImageCapabilitySchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeImageCapabilitySchemaId The id of the compute image capability schema or the image ocid
         * 
         * @return builder
         * 
         */
        public Builder computeImageCapabilitySchemaId(Output<String> computeImageCapabilitySchemaId) {
            $.computeImageCapabilitySchemaId = computeImageCapabilitySchemaId;
            return this;
        }

        /**
         * @param computeImageCapabilitySchemaId The id of the compute image capability schema or the image ocid
         * 
         * @return builder
         * 
         */
        public Builder computeImageCapabilitySchemaId(String computeImageCapabilitySchemaId) {
            return computeImageCapabilitySchemaId(Output.of(computeImageCapabilitySchemaId));
        }

        /**
         * @param isMergeEnabled Merge the image capability schema with the global image capability schema
         * 
         * @return builder
         * 
         */
        public Builder isMergeEnabled(@Nullable Output<String> isMergeEnabled) {
            $.isMergeEnabled = isMergeEnabled;
            return this;
        }

        /**
         * @param isMergeEnabled Merge the image capability schema with the global image capability schema
         * 
         * @return builder
         * 
         */
        public Builder isMergeEnabled(String isMergeEnabled) {
            return isMergeEnabled(Output.of(isMergeEnabled));
        }

        public GetComputeImageCapabilitySchemaArgs build() {
            $.computeImageCapabilitySchemaId = Objects.requireNonNull($.computeImageCapabilitySchemaId, "expected parameter 'computeImageCapabilitySchemaId' to be non-null");
            return $;
        }
    }

}
