// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceState extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceState Empty = new NamespaceState();

    /**
     * The OCID of the root compartment i.e. OCID of the tenancy.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the root compartment i.e. OCID of the tenancy.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
     * 
     */
    @Import(name="isOnboarded")
    private @Nullable Output<Boolean> isOnboarded;

    /**
     * @return Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
     * 
     */
    public Optional<Output<Boolean>> isOnboarded() {
        return Optional.ofNullable(this.isOnboarded);
    }

    /**
     * The Log Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The Log Analytics namespace used for the request.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    private NamespaceState() {}

    private NamespaceState(NamespaceState $) {
        this.compartmentId = $.compartmentId;
        this.isOnboarded = $.isOnboarded;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceState $;

        public Builder() {
            $ = new NamespaceState();
        }

        public Builder(NamespaceState defaults) {
            $ = new NamespaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the root compartment i.e. OCID of the tenancy.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the root compartment i.e. OCID of the tenancy.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param isOnboarded Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
         * 
         * @return builder
         * 
         */
        public Builder isOnboarded(@Nullable Output<Boolean> isOnboarded) {
            $.isOnboarded = isOnboarded;
            return this;
        }

        /**
         * @param isOnboarded Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
         * 
         * @return builder
         * 
         */
        public Builder isOnboarded(Boolean isOnboarded) {
            return isOnboarded(Output.of(isOnboarded));
        }

        /**
         * @param namespace The Log Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Log Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public NamespaceState build() {
            return $;
        }
    }

}
