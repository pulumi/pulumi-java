// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackupDestinationMountTypeDetail {
    /**
     * @return The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     */
    private final String localMountPointPath;
    private final String mountType;
    /**
     * @return Specifies the directory on which to mount the file system
     * 
     */
    private final String nfsServerExport;
    /**
     * @return Host names or IP addresses for NFS Auto mount.
     * 
     */
    private final List<String> nfsServers;

    @CustomType.Constructor
    private GetBackupDestinationMountTypeDetail(
        @CustomType.Parameter("localMountPointPath") String localMountPointPath,
        @CustomType.Parameter("mountType") String mountType,
        @CustomType.Parameter("nfsServerExport") String nfsServerExport,
        @CustomType.Parameter("nfsServers") List<String> nfsServers) {
        this.localMountPointPath = localMountPointPath;
        this.mountType = mountType;
        this.nfsServerExport = nfsServerExport;
        this.nfsServers = nfsServers;
    }

    /**
     * @return The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     */
    public String localMountPointPath() {
        return this.localMountPointPath;
    }
    public String mountType() {
        return this.mountType;
    }
    /**
     * @return Specifies the directory on which to mount the file system
     * 
     */
    public String nfsServerExport() {
        return this.nfsServerExport;
    }
    /**
     * @return Host names or IP addresses for NFS Auto mount.
     * 
     */
    public List<String> nfsServers() {
        return this.nfsServers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupDestinationMountTypeDetail defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String localMountPointPath;
        private String mountType;
        private String nfsServerExport;
        private List<String> nfsServers;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackupDestinationMountTypeDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.localMountPointPath = defaults.localMountPointPath;
    	      this.mountType = defaults.mountType;
    	      this.nfsServerExport = defaults.nfsServerExport;
    	      this.nfsServers = defaults.nfsServers;
        }

        public Builder localMountPointPath(String localMountPointPath) {
            this.localMountPointPath = Objects.requireNonNull(localMountPointPath);
            return this;
        }
        public Builder mountType(String mountType) {
            this.mountType = Objects.requireNonNull(mountType);
            return this;
        }
        public Builder nfsServerExport(String nfsServerExport) {
            this.nfsServerExport = Objects.requireNonNull(nfsServerExport);
            return this;
        }
        public Builder nfsServers(List<String> nfsServers) {
            this.nfsServers = Objects.requireNonNull(nfsServers);
            return this;
        }
        public Builder nfsServers(String... nfsServers) {
            return nfsServers(List.of(nfsServers));
        }        public GetBackupDestinationMountTypeDetail build() {
            return new GetBackupDestinationMountTypeDetail(localMountPointPath, mountType, nfsServerExport, nfsServers);
        }
    }
}
