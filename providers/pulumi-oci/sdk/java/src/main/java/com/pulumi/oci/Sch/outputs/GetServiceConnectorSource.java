// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Sch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Sch.outputs.GetServiceConnectorSourceCursor;
import com.pulumi.oci.Sch.outputs.GetServiceConnectorSourceLogSource;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceConnectorSource {
    /**
     * @return The type of [cursor](https://docs.cloud.oracle.com/iaas/Content/Streaming/Tasks/using_a_single_consumer.htm#usingcursors), which determines the starting point from which the stream will be consumed.
     * 
     */
    private final List<GetServiceConnectorSourceCursor> cursors;
    /**
     * @return The type descriminator.
     * 
     */
    private final String kind;
    /**
     * @return The logs for this Logging source.
     * 
     */
    private final List<GetServiceConnectorSourceLogSource> logSources;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream.
     * 
     */
    private final String streamId;

    @CustomType.Constructor
    private GetServiceConnectorSource(
        @CustomType.Parameter("cursors") List<GetServiceConnectorSourceCursor> cursors,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("logSources") List<GetServiceConnectorSourceLogSource> logSources,
        @CustomType.Parameter("streamId") String streamId) {
        this.cursors = cursors;
        this.kind = kind;
        this.logSources = logSources;
        this.streamId = streamId;
    }

    /**
     * @return The type of [cursor](https://docs.cloud.oracle.com/iaas/Content/Streaming/Tasks/using_a_single_consumer.htm#usingcursors), which determines the starting point from which the stream will be consumed.
     * 
     */
    public List<GetServiceConnectorSourceCursor> cursors() {
        return this.cursors;
    }
    /**
     * @return The type descriminator.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The logs for this Logging source.
     * 
     */
    public List<GetServiceConnectorSourceLogSource> logSources() {
        return this.logSources;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream.
     * 
     */
    public String streamId() {
        return this.streamId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceConnectorSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetServiceConnectorSourceCursor> cursors;
        private String kind;
        private List<GetServiceConnectorSourceLogSource> logSources;
        private String streamId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServiceConnectorSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cursors = defaults.cursors;
    	      this.kind = defaults.kind;
    	      this.logSources = defaults.logSources;
    	      this.streamId = defaults.streamId;
        }

        public Builder cursors(List<GetServiceConnectorSourceCursor> cursors) {
            this.cursors = Objects.requireNonNull(cursors);
            return this;
        }
        public Builder cursors(GetServiceConnectorSourceCursor... cursors) {
            return cursors(List.of(cursors));
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder logSources(List<GetServiceConnectorSourceLogSource> logSources) {
            this.logSources = Objects.requireNonNull(logSources);
            return this;
        }
        public Builder logSources(GetServiceConnectorSourceLogSource... logSources) {
            return logSources(List.of(logSources));
        }
        public Builder streamId(String streamId) {
            this.streamId = Objects.requireNonNull(streamId);
            return this;
        }        public GetServiceConnectorSource build() {
            return new GetServiceConnectorSource(cursors, kind, logSources, streamId);
        }
    }
}
