// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelTargetArgs Empty = new ChannelTargetArgs();

    /**
     * (Updatable) The username for the replication applier of the target MySQL DB System.
     * 
     */
    @Import(name="applierUsername")
    private @Nullable Output<String> applierUsername;

    /**
     * @return (Updatable) The username for the replication applier of the target MySQL DB System.
     * 
     */
    public Optional<Output<String>> applierUsername() {
        return Optional.ofNullable(this.applierUsername);
    }

    /**
     * (Updatable) The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
     * 
     */
    @Import(name="channelName")
    private @Nullable Output<String> channelName;

    /**
     * @return (Updatable) The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
     * 
     */
    public Optional<Output<String>> channelName() {
        return Optional.ofNullable(this.channelName);
    }

    /**
     * The OCID of the target DB System.
     * 
     */
    @Import(name="dbSystemId", required=true)
    private Output<String> dbSystemId;

    /**
     * @return The OCID of the target DB System.
     * 
     */
    public Output<String> dbSystemId() {
        return this.dbSystemId;
    }

    /**
     * (Updatable) The specific target identifier.
     * 
     */
    @Import(name="targetType", required=true)
    private Output<String> targetType;

    /**
     * @return (Updatable) The specific target identifier.
     * 
     */
    public Output<String> targetType() {
        return this.targetType;
    }

    private ChannelTargetArgs() {}

    private ChannelTargetArgs(ChannelTargetArgs $) {
        this.applierUsername = $.applierUsername;
        this.channelName = $.channelName;
        this.dbSystemId = $.dbSystemId;
        this.targetType = $.targetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelTargetArgs $;

        public Builder() {
            $ = new ChannelTargetArgs();
        }

        public Builder(ChannelTargetArgs defaults) {
            $ = new ChannelTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applierUsername (Updatable) The username for the replication applier of the target MySQL DB System.
         * 
         * @return builder
         * 
         */
        public Builder applierUsername(@Nullable Output<String> applierUsername) {
            $.applierUsername = applierUsername;
            return this;
        }

        /**
         * @param applierUsername (Updatable) The username for the replication applier of the target MySQL DB System.
         * 
         * @return builder
         * 
         */
        public Builder applierUsername(String applierUsername) {
            return applierUsername(Output.of(applierUsername));
        }

        /**
         * @param channelName (Updatable) The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
         * 
         * @return builder
         * 
         */
        public Builder channelName(@Nullable Output<String> channelName) {
            $.channelName = channelName;
            return this;
        }

        /**
         * @param channelName (Updatable) The case-insensitive name that identifies the replication channel. Channel names must follow the rules defined for [MySQL identifiers](https://dev.mysql.com/doc/refman/8.0/en/identifiers.html). The names of non-Deleted Channels must be unique for each DB System.
         * 
         * @return builder
         * 
         */
        public Builder channelName(String channelName) {
            return channelName(Output.of(channelName));
        }

        /**
         * @param dbSystemId The OCID of the target DB System.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(Output<String> dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param dbSystemId The OCID of the target DB System.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            return dbSystemId(Output.of(dbSystemId));
        }

        /**
         * @param targetType (Updatable) The specific target identifier.
         * 
         * @return builder
         * 
         */
        public Builder targetType(Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType (Updatable) The specific target identifier.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public ChannelTargetArgs build() {
            $.dbSystemId = Objects.requireNonNull($.dbSystemId, "expected parameter 'dbSystemId' to be non-null");
            $.targetType = Objects.requireNonNull($.targetType, "expected parameter 'targetType' to be non-null");
            return $;
        }
    }

}
