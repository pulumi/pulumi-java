// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogAnalyticsImportCustomContentArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogAnalyticsImportCustomContentArgs Empty = new LogAnalyticsImportCustomContentArgs();

    /**
     * A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
     * 
     */
    @Import(name="expect")
    private @Nullable Output<String> expect;

    /**
     * @return A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
     * 
     */
    public Optional<Output<String>> expect() {
        return Optional.ofNullable(this.expect);
    }

    /**
     * Path to the file to upload which contains the custom content.
     * 
     */
    @Import(name="importCustomContentFile", required=true)
    private Output<String> importCustomContentFile;

    /**
     * @return Path to the file to upload which contains the custom content.
     * 
     */
    public Output<String> importCustomContentFile() {
        return this.importCustomContentFile;
    }

    /**
     * A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
     * 
     */
    @Import(name="isOverwrite")
    private @Nullable Output<Boolean> isOverwrite;

    /**
     * @return A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
     * 
     */
    public Optional<Output<Boolean>> isOverwrite() {
        return Optional.ofNullable(this.isOverwrite);
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    private LogAnalyticsImportCustomContentArgs() {}

    private LogAnalyticsImportCustomContentArgs(LogAnalyticsImportCustomContentArgs $) {
        this.expect = $.expect;
        this.importCustomContentFile = $.importCustomContentFile;
        this.isOverwrite = $.isOverwrite;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogAnalyticsImportCustomContentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogAnalyticsImportCustomContentArgs $;

        public Builder() {
            $ = new LogAnalyticsImportCustomContentArgs();
        }

        public Builder(LogAnalyticsImportCustomContentArgs defaults) {
            $ = new LogAnalyticsImportCustomContentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expect A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
         * 
         * @return builder
         * 
         */
        public Builder expect(@Nullable Output<String> expect) {
            $.expect = expect;
            return this;
        }

        /**
         * @param expect A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is &#34;100-Continue&#34; (case-insensitive).
         * 
         * @return builder
         * 
         */
        public Builder expect(String expect) {
            return expect(Output.of(expect));
        }

        /**
         * @param importCustomContentFile Path to the file to upload which contains the custom content.
         * 
         * @return builder
         * 
         */
        public Builder importCustomContentFile(Output<String> importCustomContentFile) {
            $.importCustomContentFile = importCustomContentFile;
            return this;
        }

        /**
         * @param importCustomContentFile Path to the file to upload which contains the custom content.
         * 
         * @return builder
         * 
         */
        public Builder importCustomContentFile(String importCustomContentFile) {
            return importCustomContentFile(Output.of(importCustomContentFile));
        }

        /**
         * @param isOverwrite A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
         * 
         * @return builder
         * 
         */
        public Builder isOverwrite(@Nullable Output<Boolean> isOverwrite) {
            $.isOverwrite = isOverwrite;
            return this;
        }

        /**
         * @param isOverwrite A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
         * 
         * @return builder
         * 
         */
        public Builder isOverwrite(Boolean isOverwrite) {
            return isOverwrite(Output.of(isOverwrite));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public LogAnalyticsImportCustomContentArgs build() {
            $.importCustomContentFile = Objects.requireNonNull($.importCustomContentFile, "expected parameter 'importCustomContentFile' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            return $;
        }
    }

}
