// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeployArtifactDeployArtifactSource {
    /**
     * @return (Updatable) base64 Encoded String
     * 
     */
    private final @Nullable String base64encodedContent;
    /**
     * @return (Updatable) Specifies the artifact path in the repository.
     * 
     */
    private final @Nullable String deployArtifactPath;
    /**
     * @return (Updatable) Specifies types of artifact sources.
     * 
     */
    private final String deployArtifactSourceType;
    /**
     * @return (Updatable) Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
     * 
     */
    private final @Nullable String deployArtifactVersion;
    /**
     * @return (Updatable) Specifies image digest for the version of the image.
     * 
     */
    private final @Nullable String imageDigest;
    /**
     * @return (Updatable) Specifies OCIR Image Path - optionally include tag.
     * 
     */
    private final @Nullable String imageUri;
    /**
     * @return (Updatable) The OCID of a repository
     * 
     */
    private final @Nullable String repositoryId;

    @CustomType.Constructor
    private DeployArtifactDeployArtifactSource(
        @CustomType.Parameter("base64encodedContent") @Nullable String base64encodedContent,
        @CustomType.Parameter("deployArtifactPath") @Nullable String deployArtifactPath,
        @CustomType.Parameter("deployArtifactSourceType") String deployArtifactSourceType,
        @CustomType.Parameter("deployArtifactVersion") @Nullable String deployArtifactVersion,
        @CustomType.Parameter("imageDigest") @Nullable String imageDigest,
        @CustomType.Parameter("imageUri") @Nullable String imageUri,
        @CustomType.Parameter("repositoryId") @Nullable String repositoryId) {
        this.base64encodedContent = base64encodedContent;
        this.deployArtifactPath = deployArtifactPath;
        this.deployArtifactSourceType = deployArtifactSourceType;
        this.deployArtifactVersion = deployArtifactVersion;
        this.imageDigest = imageDigest;
        this.imageUri = imageUri;
        this.repositoryId = repositoryId;
    }

    /**
     * @return (Updatable) base64 Encoded String
     * 
     */
    public Optional<String> base64encodedContent() {
        return Optional.ofNullable(this.base64encodedContent);
    }
    /**
     * @return (Updatable) Specifies the artifact path in the repository.
     * 
     */
    public Optional<String> deployArtifactPath() {
        return Optional.ofNullable(this.deployArtifactPath);
    }
    /**
     * @return (Updatable) Specifies types of artifact sources.
     * 
     */
    public String deployArtifactSourceType() {
        return this.deployArtifactSourceType;
    }
    /**
     * @return (Updatable) Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
     * 
     */
    public Optional<String> deployArtifactVersion() {
        return Optional.ofNullable(this.deployArtifactVersion);
    }
    /**
     * @return (Updatable) Specifies image digest for the version of the image.
     * 
     */
    public Optional<String> imageDigest() {
        return Optional.ofNullable(this.imageDigest);
    }
    /**
     * @return (Updatable) Specifies OCIR Image Path - optionally include tag.
     * 
     */
    public Optional<String> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }
    /**
     * @return (Updatable) The OCID of a repository
     * 
     */
    public Optional<String> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeployArtifactDeployArtifactSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String base64encodedContent;
        private @Nullable String deployArtifactPath;
        private String deployArtifactSourceType;
        private @Nullable String deployArtifactVersion;
        private @Nullable String imageDigest;
        private @Nullable String imageUri;
        private @Nullable String repositoryId;

        public Builder() {
    	      // Empty
        }

        public Builder(DeployArtifactDeployArtifactSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.base64encodedContent = defaults.base64encodedContent;
    	      this.deployArtifactPath = defaults.deployArtifactPath;
    	      this.deployArtifactSourceType = defaults.deployArtifactSourceType;
    	      this.deployArtifactVersion = defaults.deployArtifactVersion;
    	      this.imageDigest = defaults.imageDigest;
    	      this.imageUri = defaults.imageUri;
    	      this.repositoryId = defaults.repositoryId;
        }

        public Builder base64encodedContent(@Nullable String base64encodedContent) {
            this.base64encodedContent = base64encodedContent;
            return this;
        }
        public Builder deployArtifactPath(@Nullable String deployArtifactPath) {
            this.deployArtifactPath = deployArtifactPath;
            return this;
        }
        public Builder deployArtifactSourceType(String deployArtifactSourceType) {
            this.deployArtifactSourceType = Objects.requireNonNull(deployArtifactSourceType);
            return this;
        }
        public Builder deployArtifactVersion(@Nullable String deployArtifactVersion) {
            this.deployArtifactVersion = deployArtifactVersion;
            return this;
        }
        public Builder imageDigest(@Nullable String imageDigest) {
            this.imageDigest = imageDigest;
            return this;
        }
        public Builder imageUri(@Nullable String imageUri) {
            this.imageUri = imageUri;
            return this;
        }
        public Builder repositoryId(@Nullable String repositoryId) {
            this.repositoryId = repositoryId;
            return this;
        }        public DeployArtifactDeployArtifactSource build() {
            return new DeployArtifactDeployArtifactSource(base64encodedContent, deployArtifactPath, deployArtifactSourceType, deployArtifactVersion, imageDigest, imageUri, repositoryId);
        }
    }
}
