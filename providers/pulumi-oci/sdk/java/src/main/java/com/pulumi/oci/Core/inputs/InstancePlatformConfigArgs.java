// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstancePlatformConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstancePlatformConfigArgs Empty = new InstancePlatformConfigArgs();

    /**
     * Whether the Measured Boot feature is enabled on the instance.
     * 
     */
    @Import(name="isMeasuredBootEnabled")
    private @Nullable Output<Boolean> isMeasuredBootEnabled;

    /**
     * @return Whether the Measured Boot feature is enabled on the instance.
     * 
     */
    public Optional<Output<Boolean>> isMeasuredBootEnabled() {
        return Optional.ofNullable(this.isMeasuredBootEnabled);
    }

    /**
     * Whether Secure Boot is enabled on the instance.
     * 
     */
    @Import(name="isSecureBootEnabled")
    private @Nullable Output<Boolean> isSecureBootEnabled;

    /**
     * @return Whether Secure Boot is enabled on the instance.
     * 
     */
    public Optional<Output<Boolean>> isSecureBootEnabled() {
        return Optional.ofNullable(this.isSecureBootEnabled);
    }

    /**
     * Whether the Trusted Platform Module (TPM) is enabled on the instance.
     * 
     */
    @Import(name="isTrustedPlatformModuleEnabled")
    private @Nullable Output<Boolean> isTrustedPlatformModuleEnabled;

    /**
     * @return Whether the Trusted Platform Module (TPM) is enabled on the instance.
     * 
     */
    public Optional<Output<Boolean>> isTrustedPlatformModuleEnabled() {
        return Optional.ofNullable(this.isTrustedPlatformModuleEnabled);
    }

    /**
     * The number of NUMA nodes per socket (NPS).
     * 
     */
    @Import(name="numaNodesPerSocket")
    private @Nullable Output<String> numaNodesPerSocket;

    /**
     * @return The number of NUMA nodes per socket (NPS).
     * 
     */
    public Optional<Output<String>> numaNodesPerSocket() {
        return Optional.ofNullable(this.numaNodesPerSocket);
    }

    /**
     * The type of action to run when the instance is interrupted for eviction.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private InstancePlatformConfigArgs() {}

    private InstancePlatformConfigArgs(InstancePlatformConfigArgs $) {
        this.isMeasuredBootEnabled = $.isMeasuredBootEnabled;
        this.isSecureBootEnabled = $.isSecureBootEnabled;
        this.isTrustedPlatformModuleEnabled = $.isTrustedPlatformModuleEnabled;
        this.numaNodesPerSocket = $.numaNodesPerSocket;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstancePlatformConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstancePlatformConfigArgs $;

        public Builder() {
            $ = new InstancePlatformConfigArgs();
        }

        public Builder(InstancePlatformConfigArgs defaults) {
            $ = new InstancePlatformConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isMeasuredBootEnabled Whether the Measured Boot feature is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isMeasuredBootEnabled(@Nullable Output<Boolean> isMeasuredBootEnabled) {
            $.isMeasuredBootEnabled = isMeasuredBootEnabled;
            return this;
        }

        /**
         * @param isMeasuredBootEnabled Whether the Measured Boot feature is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isMeasuredBootEnabled(Boolean isMeasuredBootEnabled) {
            return isMeasuredBootEnabled(Output.of(isMeasuredBootEnabled));
        }

        /**
         * @param isSecureBootEnabled Whether Secure Boot is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isSecureBootEnabled(@Nullable Output<Boolean> isSecureBootEnabled) {
            $.isSecureBootEnabled = isSecureBootEnabled;
            return this;
        }

        /**
         * @param isSecureBootEnabled Whether Secure Boot is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isSecureBootEnabled(Boolean isSecureBootEnabled) {
            return isSecureBootEnabled(Output.of(isSecureBootEnabled));
        }

        /**
         * @param isTrustedPlatformModuleEnabled Whether the Trusted Platform Module (TPM) is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isTrustedPlatformModuleEnabled(@Nullable Output<Boolean> isTrustedPlatformModuleEnabled) {
            $.isTrustedPlatformModuleEnabled = isTrustedPlatformModuleEnabled;
            return this;
        }

        /**
         * @param isTrustedPlatformModuleEnabled Whether the Trusted Platform Module (TPM) is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isTrustedPlatformModuleEnabled(Boolean isTrustedPlatformModuleEnabled) {
            return isTrustedPlatformModuleEnabled(Output.of(isTrustedPlatformModuleEnabled));
        }

        /**
         * @param numaNodesPerSocket The number of NUMA nodes per socket (NPS).
         * 
         * @return builder
         * 
         */
        public Builder numaNodesPerSocket(@Nullable Output<String> numaNodesPerSocket) {
            $.numaNodesPerSocket = numaNodesPerSocket;
            return this;
        }

        /**
         * @param numaNodesPerSocket The number of NUMA nodes per socket (NPS).
         * 
         * @return builder
         * 
         */
        public Builder numaNodesPerSocket(String numaNodesPerSocket) {
            return numaNodesPerSocket(Output.of(numaNodesPerSocket));
        }

        /**
         * @param type The type of action to run when the instance is interrupted for eviction.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of action to run when the instance is interrupted for eviction.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public InstancePlatformConfigArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
