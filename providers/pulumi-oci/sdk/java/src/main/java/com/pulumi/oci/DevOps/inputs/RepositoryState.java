// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.RepositoryMirrorRepositoryConfigArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryState Empty = new RepositoryState();

    /**
     * The count of the branches present in the repository.
     * 
     */
    @Import(name="branchCount")
    private @Nullable Output<Integer> branchCount;

    /**
     * @return The count of the branches present in the repository.
     * 
     */
    public Optional<Output<Integer>> branchCount() {
        return Optional.ofNullable(this.branchCount);
    }

    /**
     * The count of the commits present in the repository.
     * 
     */
    @Import(name="commitCount")
    private @Nullable Output<Integer> commitCount;

    /**
     * @return The count of the commits present in the repository.
     * 
     */
    public Optional<Output<Integer>> commitCount() {
        return Optional.ofNullable(this.commitCount);
    }

    /**
     * The OCID of the repository&#39;s compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the repository&#39;s compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) The default branch of the repository.
     * 
     */
    @Import(name="defaultBranch")
    private @Nullable Output<String> defaultBranch;

    /**
     * @return (Updatable) The default branch of the repository.
     * 
     */
    public Optional<Output<String>> defaultBranch() {
        return Optional.ofNullable(this.defaultBranch);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Details of the repository. Avoid entering confidential information.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Details of the repository. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * HTTP URL that you use to git clone, pull and push.
     * 
     */
    @Import(name="httpUrl")
    private @Nullable Output<String> httpUrl;

    /**
     * @return HTTP URL that you use to git clone, pull and push.
     * 
     */
    public Optional<Output<String>> httpUrl() {
        return Optional.ofNullable(this.httpUrl);
    }

    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    @Import(name="lifecyleDetails")
    private @Nullable Output<String> lifecyleDetails;

    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public Optional<Output<String>> lifecyleDetails() {
        return Optional.ofNullable(this.lifecyleDetails);
    }

    /**
     * (Updatable) Configuration information for mirroring the repository.
     * 
     */
    @Import(name="mirrorRepositoryConfig")
    private @Nullable Output<RepositoryMirrorRepositoryConfigArgs> mirrorRepositoryConfig;

    /**
     * @return (Updatable) Configuration information for mirroring the repository.
     * 
     */
    public Optional<Output<RepositoryMirrorRepositoryConfigArgs>> mirrorRepositoryConfig() {
        return Optional.ofNullable(this.mirrorRepositoryConfig);
    }

    /**
     * (Updatable) Unique name of a repository.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) Unique name of a repository.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Tenancy unique namespace.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Tenancy unique namespace.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The OCID of the DevOps project containing the repository.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The OCID of the DevOps project containing the repository.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Unique project name in a namespace.
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return Unique project name in a namespace.
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * (Updatable) Type of repository.
     * 
     */
    @Import(name="repositoryType")
    private @Nullable Output<String> repositoryType;

    /**
     * @return (Updatable) Type of repository.
     * 
     */
    public Optional<Output<String>> repositoryType() {
        return Optional.ofNullable(this.repositoryType);
    }

    /**
     * The size of the repository in bytes.
     * 
     */
    @Import(name="sizeInBytes")
    private @Nullable Output<String> sizeInBytes;

    /**
     * @return The size of the repository in bytes.
     * 
     */
    public Optional<Output<String>> sizeInBytes() {
        return Optional.ofNullable(this.sizeInBytes);
    }

    /**
     * SSH URL that you use to git clone, pull and push.
     * 
     */
    @Import(name="sshUrl")
    private @Nullable Output<String> sshUrl;

    /**
     * @return SSH URL that you use to git clone, pull and push.
     * 
     */
    public Optional<Output<String>> sshUrl() {
        return Optional.ofNullable(this.sshUrl);
    }

    /**
     * The current state of the repository.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the repository.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,Object>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
     * 
     */
    @Import(name="triggerBuildEvents")
    private @Nullable Output<List<String>> triggerBuildEvents;

    /**
     * @return Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
     * 
     */
    public Optional<Output<List<String>>> triggerBuildEvents() {
        return Optional.ofNullable(this.triggerBuildEvents);
    }

    private RepositoryState() {}

    private RepositoryState(RepositoryState $) {
        this.branchCount = $.branchCount;
        this.commitCount = $.commitCount;
        this.compartmentId = $.compartmentId;
        this.defaultBranch = $.defaultBranch;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.freeformTags = $.freeformTags;
        this.httpUrl = $.httpUrl;
        this.lifecyleDetails = $.lifecyleDetails;
        this.mirrorRepositoryConfig = $.mirrorRepositoryConfig;
        this.name = $.name;
        this.namespace = $.namespace;
        this.projectId = $.projectId;
        this.projectName = $.projectName;
        this.repositoryType = $.repositoryType;
        this.sizeInBytes = $.sizeInBytes;
        this.sshUrl = $.sshUrl;
        this.state = $.state;
        this.systemTags = $.systemTags;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
        this.triggerBuildEvents = $.triggerBuildEvents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryState $;

        public Builder() {
            $ = new RepositoryState();
        }

        public Builder(RepositoryState defaults) {
            $ = new RepositoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchCount The count of the branches present in the repository.
         * 
         * @return builder
         * 
         */
        public Builder branchCount(@Nullable Output<Integer> branchCount) {
            $.branchCount = branchCount;
            return this;
        }

        /**
         * @param branchCount The count of the branches present in the repository.
         * 
         * @return builder
         * 
         */
        public Builder branchCount(Integer branchCount) {
            return branchCount(Output.of(branchCount));
        }

        /**
         * @param commitCount The count of the commits present in the repository.
         * 
         * @return builder
         * 
         */
        public Builder commitCount(@Nullable Output<Integer> commitCount) {
            $.commitCount = commitCount;
            return this;
        }

        /**
         * @param commitCount The count of the commits present in the repository.
         * 
         * @return builder
         * 
         */
        public Builder commitCount(Integer commitCount) {
            return commitCount(Output.of(commitCount));
        }

        /**
         * @param compartmentId The OCID of the repository&#39;s compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the repository&#39;s compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param defaultBranch (Updatable) The default branch of the repository.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(@Nullable Output<String> defaultBranch) {
            $.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * @param defaultBranch (Updatable) The default branch of the repository.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(String defaultBranch) {
            return defaultBranch(Output.of(defaultBranch));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) Details of the repository. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Details of the repository. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param httpUrl HTTP URL that you use to git clone, pull and push.
         * 
         * @return builder
         * 
         */
        public Builder httpUrl(@Nullable Output<String> httpUrl) {
            $.httpUrl = httpUrl;
            return this;
        }

        /**
         * @param httpUrl HTTP URL that you use to git clone, pull and push.
         * 
         * @return builder
         * 
         */
        public Builder httpUrl(String httpUrl) {
            return httpUrl(Output.of(httpUrl));
        }

        /**
         * @param lifecyleDetails A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
         * 
         * @return builder
         * 
         */
        public Builder lifecyleDetails(@Nullable Output<String> lifecyleDetails) {
            $.lifecyleDetails = lifecyleDetails;
            return this;
        }

        /**
         * @param lifecyleDetails A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
         * 
         * @return builder
         * 
         */
        public Builder lifecyleDetails(String lifecyleDetails) {
            return lifecyleDetails(Output.of(lifecyleDetails));
        }

        /**
         * @param mirrorRepositoryConfig (Updatable) Configuration information for mirroring the repository.
         * 
         * @return builder
         * 
         */
        public Builder mirrorRepositoryConfig(@Nullable Output<RepositoryMirrorRepositoryConfigArgs> mirrorRepositoryConfig) {
            $.mirrorRepositoryConfig = mirrorRepositoryConfig;
            return this;
        }

        /**
         * @param mirrorRepositoryConfig (Updatable) Configuration information for mirroring the repository.
         * 
         * @return builder
         * 
         */
        public Builder mirrorRepositoryConfig(RepositoryMirrorRepositoryConfigArgs mirrorRepositoryConfig) {
            return mirrorRepositoryConfig(Output.of(mirrorRepositoryConfig));
        }

        /**
         * @param name (Updatable) Unique name of a repository.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Unique name of a repository.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Tenancy unique namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Tenancy unique namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param projectId The OCID of the DevOps project containing the repository.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The OCID of the DevOps project containing the repository.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param projectName Unique project name in a namespace.
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName Unique project name in a namespace.
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param repositoryType (Updatable) Type of repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryType(@Nullable Output<String> repositoryType) {
            $.repositoryType = repositoryType;
            return this;
        }

        /**
         * @param repositoryType (Updatable) Type of repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryType(String repositoryType) {
            return repositoryType(Output.of(repositoryType));
        }

        /**
         * @param sizeInBytes The size of the repository in bytes.
         * 
         * @return builder
         * 
         */
        public Builder sizeInBytes(@Nullable Output<String> sizeInBytes) {
            $.sizeInBytes = sizeInBytes;
            return this;
        }

        /**
         * @param sizeInBytes The size of the repository in bytes.
         * 
         * @return builder
         * 
         */
        public Builder sizeInBytes(String sizeInBytes) {
            return sizeInBytes(Output.of(sizeInBytes));
        }

        /**
         * @param sshUrl SSH URL that you use to git clone, pull and push.
         * 
         * @return builder
         * 
         */
        public Builder sshUrl(@Nullable Output<String> sshUrl) {
            $.sshUrl = sshUrl;
            return this;
        }

        /**
         * @param sshUrl SSH URL that you use to git clone, pull and push.
         * 
         * @return builder
         * 
         */
        public Builder sshUrl(String sshUrl) {
            return sshUrl(Output.of(sshUrl));
        }

        /**
         * @param state The current state of the repository.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the repository.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,Object>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,Object> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param timeCreated The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param triggerBuildEvents Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
         * 
         * @return builder
         * 
         */
        public Builder triggerBuildEvents(@Nullable Output<List<String>> triggerBuildEvents) {
            $.triggerBuildEvents = triggerBuildEvents;
            return this;
        }

        /**
         * @param triggerBuildEvents Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
         * 
         * @return builder
         * 
         */
        public Builder triggerBuildEvents(List<String> triggerBuildEvents) {
            return triggerBuildEvents(Output.of(triggerBuildEvents));
        }

        /**
         * @param triggerBuildEvents Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
         * 
         * @return builder
         * 
         */
        public Builder triggerBuildEvents(String... triggerBuildEvents) {
            return triggerBuildEvents(List.of(triggerBuildEvents));
        }

        public RepositoryState build() {
            return $;
        }
    }

}
