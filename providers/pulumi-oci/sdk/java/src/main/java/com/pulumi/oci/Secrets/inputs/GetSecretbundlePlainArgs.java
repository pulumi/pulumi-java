// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Secrets.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecretbundlePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecretbundlePlainArgs Empty = new GetSecretbundlePlainArgs();

    /**
     * The OCID of the secret.
     * 
     */
    @Import(name="secretId", required=true)
    private String secretId;

    /**
     * @return The OCID of the secret.
     * 
     */
    public String secretId() {
        return this.secretId;
    }

    /**
     * The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
     * 
     */
    @Import(name="secretVersionName")
    private @Nullable String secretVersionName;

    /**
     * @return The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
     * 
     */
    public Optional<String> secretVersionName() {
        return Optional.ofNullable(this.secretVersionName);
    }

    /**
     * The rotation state of the secret version.
     * 
     */
    @Import(name="stage")
    private @Nullable String stage;

    /**
     * @return The rotation state of the secret version.
     * 
     */
    public Optional<String> stage() {
        return Optional.ofNullable(this.stage);
    }

    /**
     * The version number of the secret.
     * 
     */
    @Import(name="versionNumber")
    private @Nullable String versionNumber;

    /**
     * @return The version number of the secret.
     * 
     */
    public Optional<String> versionNumber() {
        return Optional.ofNullable(this.versionNumber);
    }

    private GetSecretbundlePlainArgs() {}

    private GetSecretbundlePlainArgs(GetSecretbundlePlainArgs $) {
        this.secretId = $.secretId;
        this.secretVersionName = $.secretVersionName;
        this.stage = $.stage;
        this.versionNumber = $.versionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecretbundlePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecretbundlePlainArgs $;

        public Builder() {
            $ = new GetSecretbundlePlainArgs();
        }

        public Builder(GetSecretbundlePlainArgs defaults) {
            $ = new GetSecretbundlePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param secretId The OCID of the secret.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretVersionName The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
         * 
         * @return builder
         * 
         */
        public Builder secretVersionName(@Nullable String secretVersionName) {
            $.secretVersionName = secretVersionName;
            return this;
        }

        /**
         * @param stage The rotation state of the secret version.
         * 
         * @return builder
         * 
         */
        public Builder stage(@Nullable String stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param versionNumber The version number of the secret.
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(@Nullable String versionNumber) {
            $.versionNumber = versionNumber;
            return this;
        }

        public GetSecretbundlePlainArgs build() {
            $.secretId = Objects.requireNonNull($.secretId, "expected parameter 'secretId' to be non-null");
            return $;
        }
    }

}
