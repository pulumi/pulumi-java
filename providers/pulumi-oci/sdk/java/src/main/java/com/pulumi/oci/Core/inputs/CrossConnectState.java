// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Core.inputs.CrossConnectMacsecPropertiesArgs;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CrossConnectState extends com.pulumi.resources.ResourceArgs {

    public static final CrossConnectState Empty = new CrossConnectState();

    /**
     * (Updatable) The OCID of the compartment to contain the cross-connect.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment to contain the cross-connect.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The OCID of the cross-connect group to put this cross-connect in.
     * 
     */
    @Import(name="crossConnectGroupId")
    private @Nullable Output<String> crossConnectGroupId;

    /**
     * @return The OCID of the cross-connect group to put this cross-connect in.
     * 
     */
    public Optional<Output<String>> crossConnectGroupId() {
        return Optional.ofNullable(this.crossConnectGroupId);
    }

    /**
     * (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
     * 
     */
    @Import(name="customerReferenceName")
    private @Nullable Output<String> customerReferenceName;

    /**
     * @return (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
     * 
     */
    public Optional<Output<String>> customerReferenceName() {
        return Optional.ofNullable(this.customerReferenceName);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of that existing cross-connect or cross-connect group.
     * 
     */
    @Import(name="farCrossConnectOrCrossConnectGroupId")
    private @Nullable Output<String> farCrossConnectOrCrossConnectGroupId;

    /**
     * @return If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of that existing cross-connect or cross-connect group.
     * 
     */
    public Optional<Output<String>> farCrossConnectOrCrossConnectGroupId() {
        return Optional.ofNullable(this.farCrossConnectOrCrossConnectGroupId);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you&#39;ve confirmed the cross-connect&#39;s light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you&#39;ve confirmed the cross-connect&#39;s light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see [ListCrossConnectLocations](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations).  Example: `CyrusOne, Chandler, AZ`
     * 
     */
    @Import(name="locationName")
    private @Nullable Output<String> locationName;

    /**
     * @return The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see [ListCrossConnectLocations](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations).  Example: `CyrusOne, Chandler, AZ`
     * 
     */
    public Optional<Output<String>> locationName() {
        return Optional.ofNullable(this.locationName);
    }

    /**
     * Properties used for MACsec (if capable).
     * 
     */
    @Import(name="macsecProperties")
    private @Nullable Output<CrossConnectMacsecPropertiesArgs> macsecProperties;

    /**
     * @return Properties used for MACsec (if capable).
     * 
     */
    public Optional<Output<CrossConnectMacsecPropertiesArgs>> macsecProperties() {
        return Optional.ofNullable(this.macsecProperties);
    }

    /**
     * If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
     * 
     */
    @Import(name="nearCrossConnectOrCrossConnectGroupId")
    private @Nullable Output<String> nearCrossConnectOrCrossConnectGroupId;

    /**
     * @return If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
     * 
     */
    public Optional<Output<String>> nearCrossConnectOrCrossConnectGroupId() {
        return Optional.ofNullable(this.nearCrossConnectOrCrossConnectGroupId);
    }

    /**
     * The FastConnect device that terminates the logical connection. This device might be different than the device that terminates the physical connection.
     * 
     */
    @Import(name="ociLogicalDeviceName")
    private @Nullable Output<String> ociLogicalDeviceName;

    /**
     * @return The FastConnect device that terminates the logical connection. This device might be different than the device that terminates the physical connection.
     * 
     */
    public Optional<Output<String>> ociLogicalDeviceName() {
        return Optional.ofNullable(this.ociLogicalDeviceName);
    }

    /**
     * The FastConnect device that terminates the physical connection.
     * 
     */
    @Import(name="ociPhysicalDeviceName")
    private @Nullable Output<String> ociPhysicalDeviceName;

    /**
     * @return The FastConnect device that terminates the physical connection.
     * 
     */
    public Optional<Output<String>> ociPhysicalDeviceName() {
        return Optional.ofNullable(this.ociPhysicalDeviceName);
    }

    /**
     * A string identifying the meet-me room port for this cross-connect.
     * 
     */
    @Import(name="portName")
    private @Nullable Output<String> portName;

    /**
     * @return A string identifying the meet-me room port for this cross-connect.
     * 
     */
    public Optional<Output<String>> portName() {
        return Optional.ofNullable(this.portName);
    }

    /**
     * The port speed for this cross-connect. To get a list of the available port speeds, see [ListCrossConnectPortSpeedShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes).  Example: `10 Gbps`
     * 
     */
    @Import(name="portSpeedShapeName")
    private @Nullable Output<String> portSpeedShapeName;

    /**
     * @return The port speed for this cross-connect. To get a list of the available port speeds, see [ListCrossConnectPortSpeedShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes).  Example: `10 Gbps`
     * 
     */
    public Optional<Output<String>> portSpeedShapeName() {
        return Optional.ofNullable(this.portSpeedShapeName);
    }

    /**
     * The cross-connect&#39;s current state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The cross-connect&#39;s current state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the cross-connect was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the cross-connect was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    private CrossConnectState() {}

    private CrossConnectState(CrossConnectState $) {
        this.compartmentId = $.compartmentId;
        this.crossConnectGroupId = $.crossConnectGroupId;
        this.customerReferenceName = $.customerReferenceName;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.farCrossConnectOrCrossConnectGroupId = $.farCrossConnectOrCrossConnectGroupId;
        this.freeformTags = $.freeformTags;
        this.isActive = $.isActive;
        this.locationName = $.locationName;
        this.macsecProperties = $.macsecProperties;
        this.nearCrossConnectOrCrossConnectGroupId = $.nearCrossConnectOrCrossConnectGroupId;
        this.ociLogicalDeviceName = $.ociLogicalDeviceName;
        this.ociPhysicalDeviceName = $.ociPhysicalDeviceName;
        this.portName = $.portName;
        this.portSpeedShapeName = $.portSpeedShapeName;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CrossConnectState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CrossConnectState $;

        public Builder() {
            $ = new CrossConnectState();
        }

        public Builder(CrossConnectState defaults) {
            $ = new CrossConnectState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment to contain the cross-connect.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment to contain the cross-connect.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param crossConnectGroupId The OCID of the cross-connect group to put this cross-connect in.
         * 
         * @return builder
         * 
         */
        public Builder crossConnectGroupId(@Nullable Output<String> crossConnectGroupId) {
            $.crossConnectGroupId = crossConnectGroupId;
            return this;
        }

        /**
         * @param crossConnectGroupId The OCID of the cross-connect group to put this cross-connect in.
         * 
         * @return builder
         * 
         */
        public Builder crossConnectGroupId(String crossConnectGroupId) {
            return crossConnectGroupId(Output.of(crossConnectGroupId));
        }

        /**
         * @param customerReferenceName (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
         * 
         * @return builder
         * 
         */
        public Builder customerReferenceName(@Nullable Output<String> customerReferenceName) {
            $.customerReferenceName = customerReferenceName;
            return this;
        }

        /**
         * @param customerReferenceName (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
         * 
         * @return builder
         * 
         */
        public Builder customerReferenceName(String customerReferenceName) {
            return customerReferenceName(Output.of(customerReferenceName));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param farCrossConnectOrCrossConnectGroupId If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of that existing cross-connect or cross-connect group.
         * 
         * @return builder
         * 
         */
        public Builder farCrossConnectOrCrossConnectGroupId(@Nullable Output<String> farCrossConnectOrCrossConnectGroupId) {
            $.farCrossConnectOrCrossConnectGroupId = farCrossConnectOrCrossConnectGroupId;
            return this;
        }

        /**
         * @param farCrossConnectOrCrossConnectGroupId If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of that existing cross-connect or cross-connect group.
         * 
         * @return builder
         * 
         */
        public Builder farCrossConnectOrCrossConnectGroupId(String farCrossConnectOrCrossConnectGroupId) {
            return farCrossConnectOrCrossConnectGroupId(Output.of(farCrossConnectOrCrossConnectGroupId));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isActive (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you&#39;ve confirmed the cross-connect&#39;s light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you&#39;ve confirmed the cross-connect&#39;s light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param locationName The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see [ListCrossConnectLocations](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations).  Example: `CyrusOne, Chandler, AZ`
         * 
         * @return builder
         * 
         */
        public Builder locationName(@Nullable Output<String> locationName) {
            $.locationName = locationName;
            return this;
        }

        /**
         * @param locationName The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see [ListCrossConnectLocations](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations).  Example: `CyrusOne, Chandler, AZ`
         * 
         * @return builder
         * 
         */
        public Builder locationName(String locationName) {
            return locationName(Output.of(locationName));
        }

        /**
         * @param macsecProperties Properties used for MACsec (if capable).
         * 
         * @return builder
         * 
         */
        public Builder macsecProperties(@Nullable Output<CrossConnectMacsecPropertiesArgs> macsecProperties) {
            $.macsecProperties = macsecProperties;
            return this;
        }

        /**
         * @param macsecProperties Properties used for MACsec (if capable).
         * 
         * @return builder
         * 
         */
        public Builder macsecProperties(CrossConnectMacsecPropertiesArgs macsecProperties) {
            return macsecProperties(Output.of(macsecProperties));
        }

        /**
         * @param nearCrossConnectOrCrossConnectGroupId If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
         * 
         * @return builder
         * 
         */
        public Builder nearCrossConnectOrCrossConnectGroupId(@Nullable Output<String> nearCrossConnectOrCrossConnectGroupId) {
            $.nearCrossConnectOrCrossConnectGroupId = nearCrossConnectOrCrossConnectGroupId;
            return this;
        }

        /**
         * @param nearCrossConnectOrCrossConnectGroupId If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
         * 
         * @return builder
         * 
         */
        public Builder nearCrossConnectOrCrossConnectGroupId(String nearCrossConnectOrCrossConnectGroupId) {
            return nearCrossConnectOrCrossConnectGroupId(Output.of(nearCrossConnectOrCrossConnectGroupId));
        }

        /**
         * @param ociLogicalDeviceName The FastConnect device that terminates the logical connection. This device might be different than the device that terminates the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder ociLogicalDeviceName(@Nullable Output<String> ociLogicalDeviceName) {
            $.ociLogicalDeviceName = ociLogicalDeviceName;
            return this;
        }

        /**
         * @param ociLogicalDeviceName The FastConnect device that terminates the logical connection. This device might be different than the device that terminates the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder ociLogicalDeviceName(String ociLogicalDeviceName) {
            return ociLogicalDeviceName(Output.of(ociLogicalDeviceName));
        }

        /**
         * @param ociPhysicalDeviceName The FastConnect device that terminates the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder ociPhysicalDeviceName(@Nullable Output<String> ociPhysicalDeviceName) {
            $.ociPhysicalDeviceName = ociPhysicalDeviceName;
            return this;
        }

        /**
         * @param ociPhysicalDeviceName The FastConnect device that terminates the physical connection.
         * 
         * @return builder
         * 
         */
        public Builder ociPhysicalDeviceName(String ociPhysicalDeviceName) {
            return ociPhysicalDeviceName(Output.of(ociPhysicalDeviceName));
        }

        /**
         * @param portName A string identifying the meet-me room port for this cross-connect.
         * 
         * @return builder
         * 
         */
        public Builder portName(@Nullable Output<String> portName) {
            $.portName = portName;
            return this;
        }

        /**
         * @param portName A string identifying the meet-me room port for this cross-connect.
         * 
         * @return builder
         * 
         */
        public Builder portName(String portName) {
            return portName(Output.of(portName));
        }

        /**
         * @param portSpeedShapeName The port speed for this cross-connect. To get a list of the available port speeds, see [ListCrossConnectPortSpeedShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes).  Example: `10 Gbps`
         * 
         * @return builder
         * 
         */
        public Builder portSpeedShapeName(@Nullable Output<String> portSpeedShapeName) {
            $.portSpeedShapeName = portSpeedShapeName;
            return this;
        }

        /**
         * @param portSpeedShapeName The port speed for this cross-connect. To get a list of the available port speeds, see [ListCrossConnectPortSpeedShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes).  Example: `10 Gbps`
         * 
         * @return builder
         * 
         */
        public Builder portSpeedShapeName(String portSpeedShapeName) {
            return portSpeedShapeName(Output.of(portSpeedShapeName));
        }

        /**
         * @param state The cross-connect&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The cross-connect&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the cross-connect was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the cross-connect was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        public CrossConnectState build() {
            return $;
        }
    }

}
