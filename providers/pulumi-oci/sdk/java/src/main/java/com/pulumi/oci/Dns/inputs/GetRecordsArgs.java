// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Dns.inputs.GetRecordsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRecordsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRecordsArgs Empty = new GetRecordsArgs();

    /**
     * The OCID of the compartment the resource belongs to.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The OCID of the compartment the resource belongs to.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Search by domain. Will match any record whose domain (case-insensitive) equals the provided value.
     * 
     */
    @Import(name="domain")
    private @Nullable String domain;

    /**
     * @return Search by domain. Will match any record whose domain (case-insensitive) equals the provided value.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Search by domain. Will match any record whose domain (case-insensitive) contains the provided value.
     * 
     */
    @Import(name="domainContains")
    private @Nullable String domainContains;

    /**
     * @return Search by domain. Will match any record whose domain (case-insensitive) contains the provided value.
     * 
     */
    public Optional<String> domainContains() {
        return Optional.ofNullable(this.domainContains);
    }

    @Import(name="filters")
    private @Nullable List<GetRecordsFilter> filters;

    public Optional<List<GetRecordsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
     * 
     */
    @Import(name="rtype")
    private @Nullable String rtype;

    /**
     * @return Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
     * 
     */
    public Optional<String> rtype() {
        return Optional.ofNullable(this.rtype);
    }

    /**
     * The field by which to sort records. Allowed values are: domain|rtype|ttl
     * 
     */
    @Import(name="sortBy")
    private @Nullable String sortBy;

    /**
     * @return The field by which to sort records. Allowed values are: domain|rtype|ttl
     * 
     */
    public Optional<String> sortBy() {
        return Optional.ofNullable(this.sortBy);
    }

    /**
     * The order to sort the resources. Allowed values are: ASC|DESC
     * 
     */
    @Import(name="sortOrder")
    private @Nullable String sortOrder;

    /**
     * @return The order to sort the resources. Allowed values are: ASC|DESC
     * 
     */
    public Optional<String> sortOrder() {
        return Optional.ofNullable(this.sortOrder);
    }

    /**
     * The name or OCID of the target zone.
     * 
     * @deprecated
     * The &#39;oci_dns_records&#39; resource has been deprecated. Please use &#39;oci_dns_rrset&#39; instead.
     * 
     */
    @Deprecated /* The 'oci_dns_records' resource has been deprecated. Please use 'oci_dns_rrset' instead. */
    @Import(name="zoneNameOrId", required=true)
    private String zoneNameOrId;

    /**
     * @return The name or OCID of the target zone.
     * 
     * @deprecated
     * The &#39;oci_dns_records&#39; resource has been deprecated. Please use &#39;oci_dns_rrset&#39; instead.
     * 
     */
    @Deprecated /* The 'oci_dns_records' resource has been deprecated. Please use 'oci_dns_rrset' instead. */
    public String zoneNameOrId() {
        return this.zoneNameOrId;
    }

    /**
     * The version of the zone for which data is requested.
     * 
     */
    @Import(name="zoneVersion")
    private @Nullable String zoneVersion;

    /**
     * @return The version of the zone for which data is requested.
     * 
     */
    public Optional<String> zoneVersion() {
        return Optional.ofNullable(this.zoneVersion);
    }

    private GetRecordsArgs() {}

    private GetRecordsArgs(GetRecordsArgs $) {
        this.compartmentId = $.compartmentId;
        this.domain = $.domain;
        this.domainContains = $.domainContains;
        this.filters = $.filters;
        this.rtype = $.rtype;
        this.sortBy = $.sortBy;
        this.sortOrder = $.sortOrder;
        this.zoneNameOrId = $.zoneNameOrId;
        this.zoneVersion = $.zoneVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRecordsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRecordsArgs $;

        public Builder() {
            $ = new GetRecordsArgs();
        }

        public Builder(GetRecordsArgs defaults) {
            $ = new GetRecordsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment the resource belongs to.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param domain Search by domain. Will match any record whose domain (case-insensitive) equals the provided value.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable String domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domainContains Search by domain. Will match any record whose domain (case-insensitive) contains the provided value.
         * 
         * @return builder
         * 
         */
        public Builder domainContains(@Nullable String domainContains) {
            $.domainContains = domainContains;
            return this;
        }

        public Builder filters(@Nullable List<GetRecordsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetRecordsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param rtype Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
         * 
         * @return builder
         * 
         */
        public Builder rtype(@Nullable String rtype) {
            $.rtype = rtype;
            return this;
        }

        /**
         * @param sortBy The field by which to sort records. Allowed values are: domain|rtype|ttl
         * 
         * @return builder
         * 
         */
        public Builder sortBy(@Nullable String sortBy) {
            $.sortBy = sortBy;
            return this;
        }

        /**
         * @param sortOrder The order to sort the resources. Allowed values are: ASC|DESC
         * 
         * @return builder
         * 
         */
        public Builder sortOrder(@Nullable String sortOrder) {
            $.sortOrder = sortOrder;
            return this;
        }

        /**
         * @param zoneNameOrId The name or OCID of the target zone.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;oci_dns_records&#39; resource has been deprecated. Please use &#39;oci_dns_rrset&#39; instead.
         * 
         */
        @Deprecated /* The 'oci_dns_records' resource has been deprecated. Please use 'oci_dns_rrset' instead. */
        public Builder zoneNameOrId(String zoneNameOrId) {
            $.zoneNameOrId = zoneNameOrId;
            return this;
        }

        /**
         * @param zoneVersion The version of the zone for which data is requested.
         * 
         * @return builder
         * 
         */
        public Builder zoneVersion(@Nullable String zoneVersion) {
            $.zoneVersion = zoneVersion;
            return this;
        }

        public GetRecordsArgs build() {
            $.zoneNameOrId = Objects.requireNonNull($.zoneNameOrId, "expected parameter 'zoneNameOrId' to be non-null");
            return $;
        }
    }

}
