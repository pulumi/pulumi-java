// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GoldenGate.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.GoldenGate.inputs.GetDeploymentBackupsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetDeploymentBackupsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeploymentBackupsArgs Empty = new GetDeploymentBackupsArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The ID of the deployment in which to list resources.
     * 
     */
    @Import(name="deploymentId")
    private Output</* @Nullable */ String> deploymentId;

    /**
     * @return The ID of the deployment in which to list resources.
     * 
     */
    public Output</* @Nullable */ String> deploymentId() {
        return this.deploymentId;
    }

    /**
     * A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    @Import(name="displayName")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return A filter to return only the resources that match the entire &#39;displayName&#39; given.
     * 
     */
    public Output</* @Nullable */ String> displayName() {
        return this.displayName;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetDeploymentBackupsFilter>> filters;

    public Output</* @Nullable */ List<GetDeploymentBackupsFilter>> filters() {
        return this.filters;
    }

    /**
     * A filter to return only the resources that match the &#39;lifecycleState&#39; given.
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return A filter to return only the resources that match the &#39;lifecycleState&#39; given.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    private GetDeploymentBackupsArgs() {}

    private GetDeploymentBackupsArgs(GetDeploymentBackupsArgs $) {
        this.compartmentId = $.compartmentId;
        this.deploymentId = $.deploymentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeploymentBackupsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeploymentBackupsArgs $;

        public Builder() {
            $ = new GetDeploymentBackupsArgs();
        }

        public Builder(GetDeploymentBackupsArgs defaults) {
            $ = new GetDeploymentBackupsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param deploymentId The ID of the deployment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(Output</* @Nullable */ String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param deploymentId The ID of the deployment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(@Nullable String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output</* @Nullable */ String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only the resources that match the entire &#39;displayName&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(Output</* @Nullable */ List<GetDeploymentBackupsFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetDeploymentBackupsFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDeploymentBackupsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state A filter to return only the resources that match the &#39;lifecycleState&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only the resources that match the &#39;lifecycleState&#39; given.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        public GetDeploymentBackupsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
