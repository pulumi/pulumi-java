// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Kms.inputs.GeneratedKeyKeyShapeArgs;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GeneratedKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GeneratedKeyArgs Empty = new GeneratedKeyArgs();

    /**
     * Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     * 
     */
    @Import(name="associatedData")
    private @Nullable Output<Map<String,Object>> associatedData;

    /**
     * @return Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     * 
     */
    public Optional<Output<Map<String,Object>>> associatedData() {
        return Optional.ofNullable(this.associatedData);
    }

    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    @Import(name="cryptoEndpoint", required=true)
    private Output<String> cryptoEndpoint;

    /**
     * @return The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    public Output<String> cryptoEndpoint() {
        return this.cryptoEndpoint;
    }

    /**
     * If true, the generated key is also returned unencrypted.
     * 
     */
    @Import(name="includePlaintextKey", required=true)
    private Output<Boolean> includePlaintextKey;

    /**
     * @return If true, the generated key is also returned unencrypted.
     * 
     */
    public Output<Boolean> includePlaintextKey() {
        return this.includePlaintextKey;
    }

    /**
     * The OCID of the master encryption key to encrypt the generated data encryption key with.
     * 
     */
    @Import(name="keyId", required=true)
    private Output<String> keyId;

    /**
     * @return The OCID of the master encryption key to encrypt the generated data encryption key with.
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }

    /**
     * The cryptographic properties of a key.
     * 
     */
    @Import(name="keyShape", required=true)
    private Output<GeneratedKeyKeyShapeArgs> keyShape;

    /**
     * @return The cryptographic properties of a key.
     * 
     */
    public Output<GeneratedKeyKeyShapeArgs> keyShape() {
        return this.keyShape;
    }

    /**
     * Information that provides context for audit logging. You can provide this additional data by formatting it as key-value pairs to include in audit logs when audit logging is enabled.
     * 
     */
    @Import(name="loggingContext")
    private @Nullable Output<Map<String,Object>> loggingContext;

    /**
     * @return Information that provides context for audit logging. You can provide this additional data by formatting it as key-value pairs to include in audit logs when audit logging is enabled.
     * 
     */
    public Optional<Output<Map<String,Object>>> loggingContext() {
        return Optional.ofNullable(this.loggingContext);
    }

    private GeneratedKeyArgs() {}

    private GeneratedKeyArgs(GeneratedKeyArgs $) {
        this.associatedData = $.associatedData;
        this.cryptoEndpoint = $.cryptoEndpoint;
        this.includePlaintextKey = $.includePlaintextKey;
        this.keyId = $.keyId;
        this.keyShape = $.keyShape;
        this.loggingContext = $.loggingContext;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GeneratedKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GeneratedKeyArgs $;

        public Builder() {
            $ = new GeneratedKeyArgs();
        }

        public Builder(GeneratedKeyArgs defaults) {
            $ = new GeneratedKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedData Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
         * 
         * @return builder
         * 
         */
        public Builder associatedData(@Nullable Output<Map<String,Object>> associatedData) {
            $.associatedData = associatedData;
            return this;
        }

        /**
         * @param associatedData Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
         * 
         * @return builder
         * 
         */
        public Builder associatedData(Map<String,Object> associatedData) {
            return associatedData(Output.of(associatedData));
        }

        /**
         * @param cryptoEndpoint The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cryptoEndpoint(Output<String> cryptoEndpoint) {
            $.cryptoEndpoint = cryptoEndpoint;
            return this;
        }

        /**
         * @param cryptoEndpoint The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cryptoEndpoint(String cryptoEndpoint) {
            return cryptoEndpoint(Output.of(cryptoEndpoint));
        }

        /**
         * @param includePlaintextKey If true, the generated key is also returned unencrypted.
         * 
         * @return builder
         * 
         */
        public Builder includePlaintextKey(Output<Boolean> includePlaintextKey) {
            $.includePlaintextKey = includePlaintextKey;
            return this;
        }

        /**
         * @param includePlaintextKey If true, the generated key is also returned unencrypted.
         * 
         * @return builder
         * 
         */
        public Builder includePlaintextKey(Boolean includePlaintextKey) {
            return includePlaintextKey(Output.of(includePlaintextKey));
        }

        /**
         * @param keyId The OCID of the master encryption key to encrypt the generated data encryption key with.
         * 
         * @return builder
         * 
         */
        public Builder keyId(Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The OCID of the master encryption key to encrypt the generated data encryption key with.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param keyShape The cryptographic properties of a key.
         * 
         * @return builder
         * 
         */
        public Builder keyShape(Output<GeneratedKeyKeyShapeArgs> keyShape) {
            $.keyShape = keyShape;
            return this;
        }

        /**
         * @param keyShape The cryptographic properties of a key.
         * 
         * @return builder
         * 
         */
        public Builder keyShape(GeneratedKeyKeyShapeArgs keyShape) {
            return keyShape(Output.of(keyShape));
        }

        /**
         * @param loggingContext Information that provides context for audit logging. You can provide this additional data by formatting it as key-value pairs to include in audit logs when audit logging is enabled.
         * 
         * @return builder
         * 
         */
        public Builder loggingContext(@Nullable Output<Map<String,Object>> loggingContext) {
            $.loggingContext = loggingContext;
            return this;
        }

        /**
         * @param loggingContext Information that provides context for audit logging. You can provide this additional data by formatting it as key-value pairs to include in audit logs when audit logging is enabled.
         * 
         * @return builder
         * 
         */
        public Builder loggingContext(Map<String,Object> loggingContext) {
            return loggingContext(Output.of(loggingContext));
        }

        public GeneratedKeyArgs build() {
            $.cryptoEndpoint = Objects.requireNonNull($.cryptoEndpoint, "expected parameter 'cryptoEndpoint' to be non-null");
            $.includePlaintextKey = Objects.requireNonNull($.includePlaintextKey, "expected parameter 'includePlaintextKey' to be non-null");
            $.keyId = Objects.requireNonNull($.keyId, "expected parameter 'keyId' to be non-null");
            $.keyShape = Objects.requireNonNull($.keyShape, "expected parameter 'keyShape' to be non-null");
            return $;
        }
    }

}
