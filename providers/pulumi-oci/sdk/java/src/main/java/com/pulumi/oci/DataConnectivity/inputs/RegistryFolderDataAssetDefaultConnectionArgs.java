// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataConnectivity.inputs.RegistryFolderDataAssetDefaultConnectionConnectionPropertyArgs;
import com.pulumi.oci.DataConnectivity.inputs.RegistryFolderDataAssetDefaultConnectionMetadataArgs;
import com.pulumi.oci.DataConnectivity.inputs.RegistryFolderDataAssetDefaultConnectionPrimarySchemaArgs;
import com.pulumi.oci.DataConnectivity.inputs.RegistryFolderDataAssetDefaultConnectionRegistryMetadataArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryFolderDataAssetDefaultConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryFolderDataAssetDefaultConnectionArgs Empty = new RegistryFolderDataAssetDefaultConnectionArgs();

    /**
     * (Updatable) The properties for the connection.
     * 
     */
    @Import(name="connectionProperties")
    private @Nullable Output<List<RegistryFolderDataAssetDefaultConnectionConnectionPropertyArgs>> connectionProperties;

    /**
     * @return (Updatable) The properties for the connection.
     * 
     */
    public Optional<Output<List<RegistryFolderDataAssetDefaultConnectionConnectionPropertyArgs>>> connectionProperties() {
        return Optional.ofNullable(this.connectionProperties);
    }

    /**
     * (Updatable) User-defined description for the folder.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) User-defined description for the folder.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * (Updatable) The default property for the connection.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return (Updatable) The default property for the connection.
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<RegistryFolderDataAssetDefaultConnectionMetadataArgs> metadata;

    /**
     * @return (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    public Optional<Output<RegistryFolderDataAssetDefaultConnectionMetadataArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * (Updatable) The type of the folder.
     * 
     */
    @Import(name="modelType")
    private @Nullable Output<String> modelType;

    /**
     * @return (Updatable) The type of the folder.
     * 
     */
    public Optional<Output<String>> modelType() {
        return Optional.ofNullable(this.modelType);
    }

    /**
     * (Updatable) The model version of an object.
     * 
     */
    @Import(name="modelVersion")
    private @Nullable Output<String> modelVersion;

    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    public Optional<Output<String>> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }

    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    @Import(name="objectStatus")
    private @Nullable Output<Integer> objectStatus;

    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Optional<Output<Integer>> objectStatus() {
        return Optional.ofNullable(this.objectStatus);
    }

    /**
     * (Updatable) The version of the object that is used to track changes in the object instance.
     * 
     */
    @Import(name="objectVersion")
    private @Nullable Output<Integer> objectVersion;

    /**
     * @return (Updatable) The version of the object that is used to track changes in the object instance.
     * 
     */
    public Optional<Output<Integer>> objectVersion() {
        return Optional.ofNullable(this.objectVersion);
    }

    /**
     * (Updatable) The schema object.
     * 
     */
    @Import(name="primarySchema")
    private @Nullable Output<RegistryFolderDataAssetDefaultConnectionPrimarySchemaArgs> primarySchema;

    /**
     * @return (Updatable) The schema object.
     * 
     */
    public Optional<Output<RegistryFolderDataAssetDefaultConnectionPrimarySchemaArgs>> primarySchema() {
        return Optional.ofNullable(this.primarySchema);
    }

    /**
     * (Updatable) All the properties for the data asset in a key-value map format.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,Object>> properties;

    /**
     * @return (Updatable) All the properties for the data asset in a key-value map format.
     * 
     */
    public Optional<Output<Map<String,Object>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * (Updatable) Information about the object and its parent.
     * 
     */
    @Import(name="registryMetadata")
    private @Nullable Output<RegistryFolderDataAssetDefaultConnectionRegistryMetadataArgs> registryMetadata;

    /**
     * @return (Updatable) Information about the object and its parent.
     * 
     */
    public Optional<Output<RegistryFolderDataAssetDefaultConnectionRegistryMetadataArgs>> registryMetadata() {
        return Optional.ofNullable(this.registryMetadata);
    }

    /**
     * (Updatable) Specific DataAsset Type
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Updatable) Specific DataAsset Type
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RegistryFolderDataAssetDefaultConnectionArgs() {}

    private RegistryFolderDataAssetDefaultConnectionArgs(RegistryFolderDataAssetDefaultConnectionArgs $) {
        this.connectionProperties = $.connectionProperties;
        this.description = $.description;
        this.identifier = $.identifier;
        this.isDefault = $.isDefault;
        this.key = $.key;
        this.metadata = $.metadata;
        this.modelType = $.modelType;
        this.modelVersion = $.modelVersion;
        this.name = $.name;
        this.objectStatus = $.objectStatus;
        this.objectVersion = $.objectVersion;
        this.primarySchema = $.primarySchema;
        this.properties = $.properties;
        this.registryMetadata = $.registryMetadata;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryFolderDataAssetDefaultConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryFolderDataAssetDefaultConnectionArgs $;

        public Builder() {
            $ = new RegistryFolderDataAssetDefaultConnectionArgs();
        }

        public Builder(RegistryFolderDataAssetDefaultConnectionArgs defaults) {
            $ = new RegistryFolderDataAssetDefaultConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionProperties (Updatable) The properties for the connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionProperties(@Nullable Output<List<RegistryFolderDataAssetDefaultConnectionConnectionPropertyArgs>> connectionProperties) {
            $.connectionProperties = connectionProperties;
            return this;
        }

        /**
         * @param connectionProperties (Updatable) The properties for the connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionProperties(List<RegistryFolderDataAssetDefaultConnectionConnectionPropertyArgs> connectionProperties) {
            return connectionProperties(Output.of(connectionProperties));
        }

        /**
         * @param connectionProperties (Updatable) The properties for the connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionProperties(RegistryFolderDataAssetDefaultConnectionConnectionPropertyArgs... connectionProperties) {
            return connectionProperties(List.of(connectionProperties));
        }

        /**
         * @param description (Updatable) User-defined description for the folder.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) User-defined description for the folder.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param identifier (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param isDefault (Updatable) The default property for the connection.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault (Updatable) The default property for the connection.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param key (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param metadata (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<RegistryFolderDataAssetDefaultConnectionMetadataArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
         * 
         * @return builder
         * 
         */
        public Builder metadata(RegistryFolderDataAssetDefaultConnectionMetadataArgs metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param modelType (Updatable) The type of the folder.
         * 
         * @return builder
         * 
         */
        public Builder modelType(@Nullable Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType (Updatable) The type of the folder.
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        /**
         * @param modelVersion (Updatable) The model version of an object.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(@Nullable Output<String> modelVersion) {
            $.modelVersion = modelVersion;
            return this;
        }

        /**
         * @param modelVersion (Updatable) The model version of an object.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(String modelVersion) {
            return modelVersion(Output.of(modelVersion));
        }

        /**
         * @param name (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param objectStatus (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
         * 
         * @return builder
         * 
         */
        public Builder objectStatus(@Nullable Output<Integer> objectStatus) {
            $.objectStatus = objectStatus;
            return this;
        }

        /**
         * @param objectStatus (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
         * 
         * @return builder
         * 
         */
        public Builder objectStatus(Integer objectStatus) {
            return objectStatus(Output.of(objectStatus));
        }

        /**
         * @param objectVersion (Updatable) The version of the object that is used to track changes in the object instance.
         * 
         * @return builder
         * 
         */
        public Builder objectVersion(@Nullable Output<Integer> objectVersion) {
            $.objectVersion = objectVersion;
            return this;
        }

        /**
         * @param objectVersion (Updatable) The version of the object that is used to track changes in the object instance.
         * 
         * @return builder
         * 
         */
        public Builder objectVersion(Integer objectVersion) {
            return objectVersion(Output.of(objectVersion));
        }

        /**
         * @param primarySchema (Updatable) The schema object.
         * 
         * @return builder
         * 
         */
        public Builder primarySchema(@Nullable Output<RegistryFolderDataAssetDefaultConnectionPrimarySchemaArgs> primarySchema) {
            $.primarySchema = primarySchema;
            return this;
        }

        /**
         * @param primarySchema (Updatable) The schema object.
         * 
         * @return builder
         * 
         */
        public Builder primarySchema(RegistryFolderDataAssetDefaultConnectionPrimarySchemaArgs primarySchema) {
            return primarySchema(Output.of(primarySchema));
        }

        /**
         * @param properties (Updatable) All the properties for the data asset in a key-value map format.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,Object>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties (Updatable) All the properties for the data asset in a key-value map format.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,Object> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param registryMetadata (Updatable) Information about the object and its parent.
         * 
         * @return builder
         * 
         */
        public Builder registryMetadata(@Nullable Output<RegistryFolderDataAssetDefaultConnectionRegistryMetadataArgs> registryMetadata) {
            $.registryMetadata = registryMetadata;
            return this;
        }

        /**
         * @param registryMetadata (Updatable) Information about the object and its parent.
         * 
         * @return builder
         * 
         */
        public Builder registryMetadata(RegistryFolderDataAssetDefaultConnectionRegistryMetadataArgs registryMetadata) {
            return registryMetadata(Output.of(registryMetadata));
        }

        /**
         * @param type (Updatable) Specific DataAsset Type
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Specific DataAsset Type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RegistryFolderDataAssetDefaultConnectionArgs build() {
            $.identifier = Objects.requireNonNull($.identifier, "expected parameter 'identifier' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
