// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ApmSynthetics.inputs.GetMonitorsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMonitorsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMonitorsArgs Empty = new GetMonitorsArgs();

    /**
     * The APM domain ID the request is intended for.
     * 
     */
    @Import(name="apmDomainId", required=true)
    private String apmDomainId;

    /**
     * @return The APM domain ID the request is intended for.
     * 
     */
    public String apmDomainId() {
        return this.apmDomainId;
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetMonitorsFilter> filters;

    public Optional<List<GetMonitorsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST and REST.
     * 
     */
    @Import(name="monitorType")
    private @Nullable String monitorType;

    /**
     * @return A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST and REST.
     * 
     */
    public Optional<String> monitorType() {
        return Optional.ofNullable(this.monitorType);
    }

    /**
     * A filter to return only monitors using scriptId.
     * 
     */
    @Import(name="scriptId")
    private @Nullable String scriptId;

    /**
     * @return A filter to return only monitors using scriptId.
     * 
     */
    public Optional<String> scriptId() {
        return Optional.ofNullable(this.scriptId);
    }

    /**
     * A filter to return only monitors that match the status given.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return A filter to return only monitors that match the status given.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetMonitorsArgs() {}

    private GetMonitorsArgs(GetMonitorsArgs $) {
        this.apmDomainId = $.apmDomainId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.monitorType = $.monitorType;
        this.scriptId = $.scriptId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMonitorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMonitorsArgs $;

        public Builder() {
            $ = new GetMonitorsArgs();
        }

        public Builder(GetMonitorsArgs defaults) {
            $ = new GetMonitorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apmDomainId The APM domain ID the request is intended for.
         * 
         * @return builder
         * 
         */
        public Builder apmDomainId(String apmDomainId) {
            $.apmDomainId = apmDomainId;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetMonitorsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetMonitorsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param monitorType A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST and REST.
         * 
         * @return builder
         * 
         */
        public Builder monitorType(@Nullable String monitorType) {
            $.monitorType = monitorType;
            return this;
        }

        /**
         * @param scriptId A filter to return only monitors using scriptId.
         * 
         * @return builder
         * 
         */
        public Builder scriptId(@Nullable String scriptId) {
            $.scriptId = scriptId;
            return this;
        }

        /**
         * @param status A filter to return only monitors that match the status given.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetMonitorsArgs build() {
            $.apmDomainId = Objects.requireNonNull($.apmDomainId, "expected parameter 'apmDomainId' to be non-null");
            return $;
        }
    }

}
