// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.GetTagNamespacesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetTagNamespacesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTagNamespacesArgs Empty = new GetTagNamespacesArgs();

    /**
     * The OCID of the compartment (remember that the tenancy is simply the root compartment).
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment (remember that the tenancy is simply the root compartment).
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetTagNamespacesFilter>> filters;

    public Output</* @Nullable */ List<GetTagNamespacesFilter>> filters() {
        return this.filters;
    }

    /**
     * An optional boolean parameter indicating whether to retrieve all tag namespaces in subcompartments. If this parameter is not specified, only the tag namespaces defined in the specified compartment are retrieved.
     * 
     */
    @Import(name="includeSubcompartments")
    private Output</* @Nullable */ Boolean> includeSubcompartments;

    /**
     * @return An optional boolean parameter indicating whether to retrieve all tag namespaces in subcompartments. If this parameter is not specified, only the tag namespaces defined in the specified compartment are retrieved.
     * 
     */
    public Output</* @Nullable */ Boolean> includeSubcompartments() {
        return this.includeSubcompartments;
    }

    /**
     * A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    private GetTagNamespacesArgs() {}

    private GetTagNamespacesArgs(GetTagNamespacesArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.includeSubcompartments = $.includeSubcompartments;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTagNamespacesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTagNamespacesArgs $;

        public Builder() {
            $ = new GetTagNamespacesArgs();
        }

        public Builder(GetTagNamespacesArgs defaults) {
            $ = new GetTagNamespacesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment (remember that the tenancy is simply the root compartment).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment (remember that the tenancy is simply the root compartment).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(Output</* @Nullable */ List<GetTagNamespacesFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetTagNamespacesFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetTagNamespacesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param includeSubcompartments An optional boolean parameter indicating whether to retrieve all tag namespaces in subcompartments. If this parameter is not specified, only the tag namespaces defined in the specified compartment are retrieved.
         * 
         * @return builder
         * 
         */
        public Builder includeSubcompartments(Output</* @Nullable */ Boolean> includeSubcompartments) {
            $.includeSubcompartments = includeSubcompartments;
            return this;
        }

        /**
         * @param includeSubcompartments An optional boolean parameter indicating whether to retrieve all tag namespaces in subcompartments. If this parameter is not specified, only the tag namespaces defined in the specified compartment are retrieved.
         * 
         * @return builder
         * 
         */
        public Builder includeSubcompartments(@Nullable Boolean includeSubcompartments) {
            return includeSubcompartments(Output.of(includeSubcompartments));
        }

        /**
         * @param state A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        public GetTagNamespacesArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
