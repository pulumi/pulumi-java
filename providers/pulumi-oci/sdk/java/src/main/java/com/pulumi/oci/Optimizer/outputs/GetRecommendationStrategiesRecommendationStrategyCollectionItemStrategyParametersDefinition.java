// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition {
    /**
     * @return A default value used for the strategy parameter.
     * 
     */
    private final List<Object> defaultValues;
    /**
     * @return Text describing the strategy parameter.
     * 
     */
    private final String description;
    /**
     * @return Whether this parameter is required.
     * 
     */
    private final Boolean isRequired;
    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    private final String name;
    /**
     * @return The list of possible values used for these strategy parameters.
     * 
     */
    private final List<Object> possibleValues;
    /**
     * @return The type of strategy parameter.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition(
        @CustomType.Parameter("defaultValues") List<Object> defaultValues,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("isRequired") Boolean isRequired,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("possibleValues") List<Object> possibleValues,
        @CustomType.Parameter("type") String type) {
        this.defaultValues = defaultValues;
        this.description = description;
        this.isRequired = isRequired;
        this.name = name;
        this.possibleValues = possibleValues;
        this.type = type;
    }

    /**
     * @return A default value used for the strategy parameter.
     * 
     */
    public List<Object> defaultValues() {
        return this.defaultValues;
    }
    /**
     * @return Text describing the strategy parameter.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether this parameter is required.
     * 
     */
    public Boolean isRequired() {
        return this.isRequired;
    }
    /**
     * @return Optional. A filter that returns results that match the name specified.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of possible values used for these strategy parameters.
     * 
     */
    public List<Object> possibleValues() {
        return this.possibleValues;
    }
    /**
     * @return The type of strategy parameter.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<Object> defaultValues;
        private String description;
        private Boolean isRequired;
        private String name;
        private List<Object> possibleValues;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultValues = defaults.defaultValues;
    	      this.description = defaults.description;
    	      this.isRequired = defaults.isRequired;
    	      this.name = defaults.name;
    	      this.possibleValues = defaults.possibleValues;
    	      this.type = defaults.type;
        }

        public Builder defaultValues(List<Object> defaultValues) {
            this.defaultValues = Objects.requireNonNull(defaultValues);
            return this;
        }
        public Builder defaultValues(Object... defaultValues) {
            return defaultValues(List.of(defaultValues));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder isRequired(Boolean isRequired) {
            this.isRequired = Objects.requireNonNull(isRequired);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder possibleValues(List<Object> possibleValues) {
            this.possibleValues = Objects.requireNonNull(possibleValues);
            return this;
        }
        public Builder possibleValues(Object... possibleValues) {
            return possibleValues(List.of(possibleValues));
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition build() {
            return new GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition(defaultValues, description, isRequired, name, possibleValues, type);
        }
    }
}
