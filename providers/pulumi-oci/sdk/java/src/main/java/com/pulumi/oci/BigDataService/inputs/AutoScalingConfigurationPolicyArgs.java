// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.BigDataService.inputs.AutoScalingConfigurationPolicyRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AutoScalingConfigurationPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoScalingConfigurationPolicyArgs Empty = new AutoScalingConfigurationPolicyArgs();

    /**
     * (Updatable) Types of autoscale policies. Options are SCHEDULE-BASED or THRESHOLD-BASED. (Only THRESHOLD-BASED is supported in this release.)
     * 
     */
    @Import(name="policyType", required=true)
    private Output<String> policyType;

    /**
     * @return (Updatable) Types of autoscale policies. Options are SCHEDULE-BASED or THRESHOLD-BASED. (Only THRESHOLD-BASED is supported in this release.)
     * 
     */
    public Output<String> policyType() {
        return this.policyType;
    }

    /**
     * (Updatable) The list of rules for autoscaling. If an action has multiple rules, the last rule in the array will be applied.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<AutoScalingConfigurationPolicyRuleArgs>> rules;

    /**
     * @return (Updatable) The list of rules for autoscaling. If an action has multiple rules, the last rule in the array will be applied.
     * 
     */
    public Output<List<AutoScalingConfigurationPolicyRuleArgs>> rules() {
        return this.rules;
    }

    private AutoScalingConfigurationPolicyArgs() {}

    private AutoScalingConfigurationPolicyArgs(AutoScalingConfigurationPolicyArgs $) {
        this.policyType = $.policyType;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoScalingConfigurationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoScalingConfigurationPolicyArgs $;

        public Builder() {
            $ = new AutoScalingConfigurationPolicyArgs();
        }

        public Builder(AutoScalingConfigurationPolicyArgs defaults) {
            $ = new AutoScalingConfigurationPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policyType (Updatable) Types of autoscale policies. Options are SCHEDULE-BASED or THRESHOLD-BASED. (Only THRESHOLD-BASED is supported in this release.)
         * 
         * @return builder
         * 
         */
        public Builder policyType(Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType (Updatable) Types of autoscale policies. Options are SCHEDULE-BASED or THRESHOLD-BASED. (Only THRESHOLD-BASED is supported in this release.)
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        /**
         * @param rules (Updatable) The list of rules for autoscaling. If an action has multiple rules, the last rule in the array will be applied.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<AutoScalingConfigurationPolicyRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules (Updatable) The list of rules for autoscaling. If an action has multiple rules, the last rule in the array will be applied.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<AutoScalingConfigurationPolicyRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules (Updatable) The list of rules for autoscaling. If an action has multiple rules, the last rule in the array will be applied.
         * 
         * @return builder
         * 
         */
        public Builder rules(AutoScalingConfigurationPolicyRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public AutoScalingConfigurationPolicyArgs build() {
            $.policyType = Objects.requireNonNull($.policyType, "expected parameter 'policyType' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
