// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetUsersUserCapability;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetUsersUser {
    /**
     * @return Properties indicating how the user is allowed to authenticate.
     * 
     */
    private final List<GetUsersUserCapability> capabilities;
    /**
     * @return The OCID of the compartment (remember that the tenancy is simply the root compartment).
     * 
     */
    private final String compartmentId;
    /**
     * @return DB username of the DB credential. Has to be unique across the tenancy.
     * 
     */
    private final String dbUserName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return The description you assign to the user. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    private final String description;
    /**
     * @return The email address you assign to the user. The email address must be unique across all users in the tenancy.
     * 
     */
    private final String email;
    /**
     * @return Whether the email address has been validated.
     * 
     */
    private final Boolean emailVerified;
    /**
     * @return The id of a user in the identity provider.
     * 
     */
    private final String externalIdentifier;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The OCID of the user.
     * 
     */
    private final String id;
    /**
     * @return The id of the identity provider.
     * 
     */
    private final String identityProviderId;
    /**
     * @return Returned only if the user&#39;s `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
     * * bit 0: SUSPENDED (reserved for future use)
     * * bit 1: DISABLED (reserved for future use)
     * * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
     * 
     */
    private final String inactiveState;
    /**
     * @return The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    private final String lastSuccessfulLoginTime;
    /**
     * @return A filter to only return resources that match the given name exactly.
     * 
     */
    private final String name;
    /**
     * @return The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    private final String previousSuccessfulLoginTime;
    /**
     * @return A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
     * 
     */
    private final String state;
    /**
     * @return Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private final String timeCreated;

    @CustomType.Constructor
    private GetUsersUser(
        @CustomType.Parameter("capabilities") List<GetUsersUserCapability> capabilities,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("dbUserName") String dbUserName,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("email") String email,
        @CustomType.Parameter("emailVerified") Boolean emailVerified,
        @CustomType.Parameter("externalIdentifier") String externalIdentifier,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identityProviderId") String identityProviderId,
        @CustomType.Parameter("inactiveState") String inactiveState,
        @CustomType.Parameter("lastSuccessfulLoginTime") String lastSuccessfulLoginTime,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("previousSuccessfulLoginTime") String previousSuccessfulLoginTime,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated) {
        this.capabilities = capabilities;
        this.compartmentId = compartmentId;
        this.dbUserName = dbUserName;
        this.definedTags = definedTags;
        this.description = description;
        this.email = email;
        this.emailVerified = emailVerified;
        this.externalIdentifier = externalIdentifier;
        this.freeformTags = freeformTags;
        this.id = id;
        this.identityProviderId = identityProviderId;
        this.inactiveState = inactiveState;
        this.lastSuccessfulLoginTime = lastSuccessfulLoginTime;
        this.name = name;
        this.previousSuccessfulLoginTime = previousSuccessfulLoginTime;
        this.state = state;
        this.timeCreated = timeCreated;
    }

    /**
     * @return Properties indicating how the user is allowed to authenticate.
     * 
     */
    public List<GetUsersUserCapability> capabilities() {
        return this.capabilities;
    }
    /**
     * @return The OCID of the compartment (remember that the tenancy is simply the root compartment).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return DB username of the DB credential. Has to be unique across the tenancy.
     * 
     */
    public String dbUserName() {
        return this.dbUserName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The description you assign to the user. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The email address you assign to the user. The email address must be unique across all users in the tenancy.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Whether the email address has been validated.
     * 
     */
    public Boolean emailVerified() {
        return this.emailVerified;
    }
    /**
     * @return The id of a user in the identity provider.
     * 
     */
    public String externalIdentifier() {
        return this.externalIdentifier;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the user.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The id of the identity provider.
     * 
     */
    public String identityProviderId() {
        return this.identityProviderId;
    }
    /**
     * @return Returned only if the user&#39;s `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
     * * bit 0: SUSPENDED (reserved for future use)
     * * bit 1: DISABLED (reserved for future use)
     * * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
     * 
     */
    public String inactiveState() {
        return this.inactiveState;
    }
    /**
     * @return The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    public String lastSuccessfulLoginTime() {
        return this.lastSuccessfulLoginTime;
    }
    /**
     * @return A filter to only return resources that match the given name exactly.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    public String previousSuccessfulLoginTime() {
        return this.previousSuccessfulLoginTime;
    }
    /**
     * @return A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersUser defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetUsersUserCapability> capabilities;
        private String compartmentId;
        private String dbUserName;
        private Map<String,Object> definedTags;
        private String description;
        private String email;
        private Boolean emailVerified;
        private String externalIdentifier;
        private Map<String,Object> freeformTags;
        private String id;
        private String identityProviderId;
        private String inactiveState;
        private String lastSuccessfulLoginTime;
        private String name;
        private String previousSuccessfulLoginTime;
        private String state;
        private String timeCreated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capabilities = defaults.capabilities;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbUserName = defaults.dbUserName;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.email = defaults.email;
    	      this.emailVerified = defaults.emailVerified;
    	      this.externalIdentifier = defaults.externalIdentifier;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.identityProviderId = defaults.identityProviderId;
    	      this.inactiveState = defaults.inactiveState;
    	      this.lastSuccessfulLoginTime = defaults.lastSuccessfulLoginTime;
    	      this.name = defaults.name;
    	      this.previousSuccessfulLoginTime = defaults.previousSuccessfulLoginTime;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
        }

        public Builder capabilities(List<GetUsersUserCapability> capabilities) {
            this.capabilities = Objects.requireNonNull(capabilities);
            return this;
        }
        public Builder capabilities(GetUsersUserCapability... capabilities) {
            return capabilities(List.of(capabilities));
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder dbUserName(String dbUserName) {
            this.dbUserName = Objects.requireNonNull(dbUserName);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        public Builder emailVerified(Boolean emailVerified) {
            this.emailVerified = Objects.requireNonNull(emailVerified);
            return this;
        }
        public Builder externalIdentifier(String externalIdentifier) {
            this.externalIdentifier = Objects.requireNonNull(externalIdentifier);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identityProviderId(String identityProviderId) {
            this.identityProviderId = Objects.requireNonNull(identityProviderId);
            return this;
        }
        public Builder inactiveState(String inactiveState) {
            this.inactiveState = Objects.requireNonNull(inactiveState);
            return this;
        }
        public Builder lastSuccessfulLoginTime(String lastSuccessfulLoginTime) {
            this.lastSuccessfulLoginTime = Objects.requireNonNull(lastSuccessfulLoginTime);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder previousSuccessfulLoginTime(String previousSuccessfulLoginTime) {
            this.previousSuccessfulLoginTime = Objects.requireNonNull(previousSuccessfulLoginTime);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }        public GetUsersUser build() {
            return new GetUsersUser(capabilities, compartmentId, dbUserName, definedTags, description, email, emailVerified, externalIdentifier, freeformTags, id, identityProviderId, inactiveState, lastSuccessfulLoginTime, name, previousSuccessfulLoginTime, state, timeCreated);
        }
    }
}
