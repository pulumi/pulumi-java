// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Blockchain.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Blockchain.inputs.PeerOcpuAllocationParamArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PeerState extends com.pulumi.resources.ResourceArgs {

    public static final PeerState Empty = new PeerState();

    /**
     * Availability Domain to place new peer
     * 
     */
    @Import(name="ad")
    private @Nullable Output<String> ad;

    /**
     * @return Availability Domain to place new peer
     * 
     */
    public Optional<Output<String>> ad() {
        return Optional.ofNullable(this.ad);
    }

    /**
     * peer alias
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return peer alias
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * Unique service identifier.
     * 
     */
    @Import(name="blockchainPlatformId")
    private @Nullable Output<String> blockchainPlatformId;

    /**
     * @return Unique service identifier.
     * 
     */
    public Optional<Output<String>> blockchainPlatformId() {
        return Optional.ofNullable(this.blockchainPlatformId);
    }

    /**
     * Host on which the Peer exists
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Host on which the Peer exists
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * (Updatable) OCPU allocation parameter
     * 
     */
    @Import(name="ocpuAllocationParam")
    private @Nullable Output<PeerOcpuAllocationParamArgs> ocpuAllocationParam;

    /**
     * @return (Updatable) OCPU allocation parameter
     * 
     */
    public Optional<Output<PeerOcpuAllocationParamArgs>> ocpuAllocationParam() {
        return Optional.ofNullable(this.ocpuAllocationParam);
    }

    /**
     * peer identifier
     * 
     */
    @Import(name="peerKey")
    private @Nullable Output<String> peerKey;

    /**
     * @return peer identifier
     * 
     */
    public Optional<Output<String>> peerKey() {
        return Optional.ofNullable(this.peerKey);
    }

    /**
     * Peer role
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return Peer role
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The current state of the peer.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the peer.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private PeerState() {}

    private PeerState(PeerState $) {
        this.ad = $.ad;
        this.alias = $.alias;
        this.blockchainPlatformId = $.blockchainPlatformId;
        this.host = $.host;
        this.ocpuAllocationParam = $.ocpuAllocationParam;
        this.peerKey = $.peerKey;
        this.role = $.role;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PeerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PeerState $;

        public Builder() {
            $ = new PeerState();
        }

        public Builder(PeerState defaults) {
            $ = new PeerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param ad Availability Domain to place new peer
         * 
         * @return builder
         * 
         */
        public Builder ad(@Nullable Output<String> ad) {
            $.ad = ad;
            return this;
        }

        /**
         * @param ad Availability Domain to place new peer
         * 
         * @return builder
         * 
         */
        public Builder ad(String ad) {
            return ad(Output.of(ad));
        }

        /**
         * @param alias peer alias
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias peer alias
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param blockchainPlatformId Unique service identifier.
         * 
         * @return builder
         * 
         */
        public Builder blockchainPlatformId(@Nullable Output<String> blockchainPlatformId) {
            $.blockchainPlatformId = blockchainPlatformId;
            return this;
        }

        /**
         * @param blockchainPlatformId Unique service identifier.
         * 
         * @return builder
         * 
         */
        public Builder blockchainPlatformId(String blockchainPlatformId) {
            return blockchainPlatformId(Output.of(blockchainPlatformId));
        }

        /**
         * @param host Host on which the Peer exists
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Host on which the Peer exists
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param ocpuAllocationParam (Updatable) OCPU allocation parameter
         * 
         * @return builder
         * 
         */
        public Builder ocpuAllocationParam(@Nullable Output<PeerOcpuAllocationParamArgs> ocpuAllocationParam) {
            $.ocpuAllocationParam = ocpuAllocationParam;
            return this;
        }

        /**
         * @param ocpuAllocationParam (Updatable) OCPU allocation parameter
         * 
         * @return builder
         * 
         */
        public Builder ocpuAllocationParam(PeerOcpuAllocationParamArgs ocpuAllocationParam) {
            return ocpuAllocationParam(Output.of(ocpuAllocationParam));
        }

        /**
         * @param peerKey peer identifier
         * 
         * @return builder
         * 
         */
        public Builder peerKey(@Nullable Output<String> peerKey) {
            $.peerKey = peerKey;
            return this;
        }

        /**
         * @param peerKey peer identifier
         * 
         * @return builder
         * 
         */
        public Builder peerKey(String peerKey) {
            return peerKey(Output.of(peerKey));
        }

        /**
         * @param role Peer role
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Peer role
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param state The current state of the peer.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the peer.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public PeerState build() {
            return $;
        }
    }

}
