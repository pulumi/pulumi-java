// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsManagement.inputs.SoftwareSourceAssociatedManagedInstanceArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SoftwareSourceState extends com.pulumi.resources.ResourceArgs {

    public static final SoftwareSourceState Empty = new SoftwareSourceState();

    /**
     * The architecture type supported by the Software Source
     * 
     */
    @Import(name="archType")
    private @Nullable Output<String> archType;

    /**
     * @return The architecture type supported by the Software Source
     * 
     */
    public Optional<Output<String>> archType() {
        return Optional.ofNullable(this.archType);
    }

    /**
     * list of the Managed Instances associated with this Software Sources
     * 
     */
    @Import(name="associatedManagedInstances")
    private @Nullable Output<List<SoftwareSourceAssociatedManagedInstanceArgs>> associatedManagedInstances;

    /**
     * @return list of the Managed Instances associated with this Software Sources
     * 
     */
    public Optional<Output<List<SoftwareSourceAssociatedManagedInstanceArgs>>> associatedManagedInstances() {
        return Optional.ofNullable(this.associatedManagedInstances);
    }

    /**
     * (Updatable) The yum repository checksum type used by this software source
     * 
     */
    @Import(name="checksumType")
    private @Nullable Output<String> checksumType;

    /**
     * @return (Updatable) The yum repository checksum type used by this software source
     * 
     */
    public Optional<Output<String>> checksumType() {
        return Optional.ofNullable(this.checksumType);
    }

    /**
     * (Updatable) OCID for the Compartment
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) OCID for the Compartment
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Information specified by the user about the software source
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Information specified by the user about the software source
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) User friendly name for the software source
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) User friendly name for the software source
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Fingerprint of the GPG key for this software source
     * 
     */
    @Import(name="gpgKeyFingerprint")
    private @Nullable Output<String> gpgKeyFingerprint;

    /**
     * @return Fingerprint of the GPG key for this software source
     * 
     */
    public Optional<Output<String>> gpgKeyFingerprint() {
        return Optional.ofNullable(this.gpgKeyFingerprint);
    }

    /**
     * ID of the GPG key for this software source
     * 
     */
    @Import(name="gpgKeyId")
    private @Nullable Output<String> gpgKeyId;

    /**
     * @return ID of the GPG key for this software source
     * 
     */
    public Optional<Output<String>> gpgKeyId() {
        return Optional.ofNullable(this.gpgKeyId);
    }

    /**
     * URL of the GPG key for this software source
     * 
     */
    @Import(name="gpgKeyUrl")
    private @Nullable Output<String> gpgKeyUrl;

    /**
     * @return URL of the GPG key for this software source
     * 
     */
    public Optional<Output<String>> gpgKeyUrl() {
        return Optional.ofNullable(this.gpgKeyUrl);
    }

    /**
     * (Updatable) Email address of the person maintaining this software source
     * 
     */
    @Import(name="maintainerEmail")
    private @Nullable Output<String> maintainerEmail;

    /**
     * @return (Updatable) Email address of the person maintaining this software source
     * 
     */
    public Optional<Output<String>> maintainerEmail() {
        return Optional.ofNullable(this.maintainerEmail);
    }

    /**
     * (Updatable) Name of the person maintaining this software source
     * 
     */
    @Import(name="maintainerName")
    private @Nullable Output<String> maintainerName;

    /**
     * @return (Updatable) Name of the person maintaining this software source
     * 
     */
    public Optional<Output<String>> maintainerName() {
        return Optional.ofNullable(this.maintainerName);
    }

    /**
     * (Updatable) Phone number of the person maintaining this software source
     * 
     */
    @Import(name="maintainerPhone")
    private @Nullable Output<String> maintainerPhone;

    /**
     * @return (Updatable) Phone number of the person maintaining this software source
     * 
     */
    public Optional<Output<String>> maintainerPhone() {
        return Optional.ofNullable(this.maintainerPhone);
    }

    /**
     * Number of packages
     * 
     */
    @Import(name="packages")
    private @Nullable Output<Integer> packages;

    /**
     * @return Number of packages
     * 
     */
    public Optional<Output<Integer>> packages() {
        return Optional.ofNullable(this.packages);
    }

    /**
     * OCID for the parent software source, if there is one
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return OCID for the parent software source, if there is one
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * Display name the parent software source, if there is one
     * 
     */
    @Import(name="parentName")
    private @Nullable Output<String> parentName;

    /**
     * @return Display name the parent software source, if there is one
     * 
     */
    public Optional<Output<String>> parentName() {
        return Optional.ofNullable(this.parentName);
    }

    /**
     * Type of the Software Source
     * 
     */
    @Import(name="repoType")
    private @Nullable Output<String> repoType;

    /**
     * @return Type of the Software Source
     * 
     */
    public Optional<Output<String>> repoType() {
        return Optional.ofNullable(this.repoType);
    }

    /**
     * The current state of the Software Source.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the Software Source.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * status of the software source.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return status of the software source.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * URL for the repostiory
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return URL for the repostiory
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private SoftwareSourceState() {}

    private SoftwareSourceState(SoftwareSourceState $) {
        this.archType = $.archType;
        this.associatedManagedInstances = $.associatedManagedInstances;
        this.checksumType = $.checksumType;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.gpgKeyFingerprint = $.gpgKeyFingerprint;
        this.gpgKeyId = $.gpgKeyId;
        this.gpgKeyUrl = $.gpgKeyUrl;
        this.maintainerEmail = $.maintainerEmail;
        this.maintainerName = $.maintainerName;
        this.maintainerPhone = $.maintainerPhone;
        this.packages = $.packages;
        this.parentId = $.parentId;
        this.parentName = $.parentName;
        this.repoType = $.repoType;
        this.state = $.state;
        this.status = $.status;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoftwareSourceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoftwareSourceState $;

        public Builder() {
            $ = new SoftwareSourceState();
        }

        public Builder(SoftwareSourceState defaults) {
            $ = new SoftwareSourceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param archType The architecture type supported by the Software Source
         * 
         * @return builder
         * 
         */
        public Builder archType(@Nullable Output<String> archType) {
            $.archType = archType;
            return this;
        }

        /**
         * @param archType The architecture type supported by the Software Source
         * 
         * @return builder
         * 
         */
        public Builder archType(String archType) {
            return archType(Output.of(archType));
        }

        /**
         * @param associatedManagedInstances list of the Managed Instances associated with this Software Sources
         * 
         * @return builder
         * 
         */
        public Builder associatedManagedInstances(@Nullable Output<List<SoftwareSourceAssociatedManagedInstanceArgs>> associatedManagedInstances) {
            $.associatedManagedInstances = associatedManagedInstances;
            return this;
        }

        /**
         * @param associatedManagedInstances list of the Managed Instances associated with this Software Sources
         * 
         * @return builder
         * 
         */
        public Builder associatedManagedInstances(List<SoftwareSourceAssociatedManagedInstanceArgs> associatedManagedInstances) {
            return associatedManagedInstances(Output.of(associatedManagedInstances));
        }

        /**
         * @param associatedManagedInstances list of the Managed Instances associated with this Software Sources
         * 
         * @return builder
         * 
         */
        public Builder associatedManagedInstances(SoftwareSourceAssociatedManagedInstanceArgs... associatedManagedInstances) {
            return associatedManagedInstances(List.of(associatedManagedInstances));
        }

        /**
         * @param checksumType (Updatable) The yum repository checksum type used by this software source
         * 
         * @return builder
         * 
         */
        public Builder checksumType(@Nullable Output<String> checksumType) {
            $.checksumType = checksumType;
            return this;
        }

        /**
         * @param checksumType (Updatable) The yum repository checksum type used by this software source
         * 
         * @return builder
         * 
         */
        public Builder checksumType(String checksumType) {
            return checksumType(Output.of(checksumType));
        }

        /**
         * @param compartmentId (Updatable) OCID for the Compartment
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) OCID for the Compartment
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) Information specified by the user about the software source
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Information specified by the user about the software source
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) User friendly name for the software source
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) User friendly name for the software source
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param gpgKeyFingerprint Fingerprint of the GPG key for this software source
         * 
         * @return builder
         * 
         */
        public Builder gpgKeyFingerprint(@Nullable Output<String> gpgKeyFingerprint) {
            $.gpgKeyFingerprint = gpgKeyFingerprint;
            return this;
        }

        /**
         * @param gpgKeyFingerprint Fingerprint of the GPG key for this software source
         * 
         * @return builder
         * 
         */
        public Builder gpgKeyFingerprint(String gpgKeyFingerprint) {
            return gpgKeyFingerprint(Output.of(gpgKeyFingerprint));
        }

        /**
         * @param gpgKeyId ID of the GPG key for this software source
         * 
         * @return builder
         * 
         */
        public Builder gpgKeyId(@Nullable Output<String> gpgKeyId) {
            $.gpgKeyId = gpgKeyId;
            return this;
        }

        /**
         * @param gpgKeyId ID of the GPG key for this software source
         * 
         * @return builder
         * 
         */
        public Builder gpgKeyId(String gpgKeyId) {
            return gpgKeyId(Output.of(gpgKeyId));
        }

        /**
         * @param gpgKeyUrl URL of the GPG key for this software source
         * 
         * @return builder
         * 
         */
        public Builder gpgKeyUrl(@Nullable Output<String> gpgKeyUrl) {
            $.gpgKeyUrl = gpgKeyUrl;
            return this;
        }

        /**
         * @param gpgKeyUrl URL of the GPG key for this software source
         * 
         * @return builder
         * 
         */
        public Builder gpgKeyUrl(String gpgKeyUrl) {
            return gpgKeyUrl(Output.of(gpgKeyUrl));
        }

        /**
         * @param maintainerEmail (Updatable) Email address of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerEmail(@Nullable Output<String> maintainerEmail) {
            $.maintainerEmail = maintainerEmail;
            return this;
        }

        /**
         * @param maintainerEmail (Updatable) Email address of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerEmail(String maintainerEmail) {
            return maintainerEmail(Output.of(maintainerEmail));
        }

        /**
         * @param maintainerName (Updatable) Name of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerName(@Nullable Output<String> maintainerName) {
            $.maintainerName = maintainerName;
            return this;
        }

        /**
         * @param maintainerName (Updatable) Name of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerName(String maintainerName) {
            return maintainerName(Output.of(maintainerName));
        }

        /**
         * @param maintainerPhone (Updatable) Phone number of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerPhone(@Nullable Output<String> maintainerPhone) {
            $.maintainerPhone = maintainerPhone;
            return this;
        }

        /**
         * @param maintainerPhone (Updatable) Phone number of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerPhone(String maintainerPhone) {
            return maintainerPhone(Output.of(maintainerPhone));
        }

        /**
         * @param packages Number of packages
         * 
         * @return builder
         * 
         */
        public Builder packages(@Nullable Output<Integer> packages) {
            $.packages = packages;
            return this;
        }

        /**
         * @param packages Number of packages
         * 
         * @return builder
         * 
         */
        public Builder packages(Integer packages) {
            return packages(Output.of(packages));
        }

        /**
         * @param parentId OCID for the parent software source, if there is one
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId OCID for the parent software source, if there is one
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param parentName Display name the parent software source, if there is one
         * 
         * @return builder
         * 
         */
        public Builder parentName(@Nullable Output<String> parentName) {
            $.parentName = parentName;
            return this;
        }

        /**
         * @param parentName Display name the parent software source, if there is one
         * 
         * @return builder
         * 
         */
        public Builder parentName(String parentName) {
            return parentName(Output.of(parentName));
        }

        /**
         * @param repoType Type of the Software Source
         * 
         * @return builder
         * 
         */
        public Builder repoType(@Nullable Output<String> repoType) {
            $.repoType = repoType;
            return this;
        }

        /**
         * @param repoType Type of the Software Source
         * 
         * @return builder
         * 
         */
        public Builder repoType(String repoType) {
            return repoType(Output.of(repoType));
        }

        /**
         * @param state The current state of the Software Source.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the Software Source.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param status status of the software source.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status status of the software source.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param url URL for the repostiory
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL for the repostiory
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public SoftwareSourceState build() {
            return $;
        }
    }

}
