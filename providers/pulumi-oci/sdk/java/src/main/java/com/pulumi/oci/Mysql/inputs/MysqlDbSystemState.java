// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemAnalyticsClusterArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemBackupPolicyArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemChannelArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemCurrentPlacementArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemDeletionPolicyArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemEndpointArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemHeatWaveClusterArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemMaintenanceArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemSourceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlDbSystemState extends com.pulumi.resources.ResourceArgs {

    public static final MysqlDbSystemState Empty = new MysqlDbSystemState();

    /**
     * The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
     * 
     */
    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    /**
     * @return The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
     * 
     */
    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * The username for the administrative user.
     * 
     */
    @Import(name="adminUsername")
    private @Nullable Output<String> adminUsername;

    /**
     * @return The username for the administrative user.
     * 
     */
    public Optional<Output<String>> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    /**
     * DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
     * 
     */
    @Import(name="analyticsClusters")
    private @Nullable Output<List<MysqlDbSystemAnalyticsClusterArgs>> analyticsClusters;

    /**
     * @return DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
     * 
     */
    public Optional<Output<List<MysqlDbSystemAnalyticsClusterArgs>>> analyticsClusters() {
        return Optional.ofNullable(this.analyticsClusters);
    }

    /**
     * The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    @Import(name="availabilityDomain")
    private @Nullable Output<String> availabilityDomain;

    /**
     * @return The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    public Optional<Output<String>> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }

    /**
     * (Updatable) Backup policy as optionally used for DB System Creation.
     * 
     */
    @Import(name="backupPolicy")
    private @Nullable Output<MysqlDbSystemBackupPolicyArgs> backupPolicy;

    /**
     * @return (Updatable) Backup policy as optionally used for DB System Creation.
     * 
     */
    public Optional<Output<MysqlDbSystemBackupPolicyArgs>> backupPolicy() {
        return Optional.ofNullable(this.backupPolicy);
    }

    /**
     * A list with a summary of all the Channels attached to the DB System.
     * 
     */
    @Import(name="channels")
    private @Nullable Output<List<MysqlDbSystemChannelArgs>> channels;

    /**
     * @return A list with a summary of all the Channels attached to the DB System.
     * 
     */
    public Optional<Output<List<MysqlDbSystemChannelArgs>>> channels() {
        return Optional.ofNullable(this.channels);
    }

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The OCID of the Configuration to be used for this DB System.
     * 
     */
    @Import(name="configurationId")
    private @Nullable Output<String> configurationId;

    /**
     * @return The OCID of the Configuration to be used for this DB System.
     * 
     */
    public Optional<Output<String>> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }

    /**
     * (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    @Import(name="crashRecovery")
    private @Nullable Output<String> crashRecovery;

    /**
     * @return (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    public Optional<Output<String>> crashRecovery() {
        return Optional.ofNullable(this.crashRecovery);
    }

    /**
     * The availability domain and fault domain a DB System is placed in.
     * 
     */
    @Import(name="currentPlacements")
    private @Nullable Output<List<MysqlDbSystemCurrentPlacementArgs>> currentPlacements;

    /**
     * @return The availability domain and fault domain a DB System is placed in.
     * 
     */
    public Optional<Output<List<MysqlDbSystemCurrentPlacementArgs>>> currentPlacements() {
        return Optional.ofNullable(this.currentPlacements);
    }

    /**
     * Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
     * 
     */
    @Import(name="dataStorageSizeInGb")
    private @Nullable Output<Integer> dataStorageSizeInGb;

    /**
     * @return Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
     * 
     */
    public Optional<Output<Integer>> dataStorageSizeInGb() {
        return Optional.ofNullable(this.dataStorageSizeInGb);
    }

    /**
     * (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
     * 
     */
    @Import(name="deletionPolicies")
    private @Nullable Output<List<MysqlDbSystemDeletionPolicyArgs>> deletionPolicies;

    /**
     * @return (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
     * 
     */
    public Optional<Output<List<MysqlDbSystemDeletionPolicyArgs>>> deletionPolicies() {
        return Optional.ofNullable(this.deletionPolicies);
    }

    /**
     * (Updatable) User-provided data about the DB System.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) User-provided data about the DB System.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The user-friendly name for the DB System. It does not have to be unique.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The user-friendly name for the DB System. It does not have to be unique.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The network endpoints available for this DB System.
     * 
     */
    @Import(name="endpoints")
    private @Nullable Output<List<MysqlDbSystemEndpointArgs>> endpoints;

    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    public Optional<Output<List<MysqlDbSystemEndpointArgs>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    @Import(name="faultDomain")
    private @Nullable Output<String> faultDomain;

    /**
     * @return The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    public Optional<Output<String>> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }

    /**
     * (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * A summary of a HeatWave cluster.
     * 
     */
    @Import(name="heatWaveClusters")
    private @Nullable Output<List<MysqlDbSystemHeatWaveClusterArgs>> heatWaveClusters;

    /**
     * @return A summary of a HeatWave cluster.
     * 
     */
    public Optional<Output<List<MysqlDbSystemHeatWaveClusterArgs>>> heatWaveClusters() {
        return Optional.ofNullable(this.heatWaveClusters);
    }

    /**
     * The hostname for the primary endpoint of the DB System. Used for DNS.
     * 
     */
    @Import(name="hostnameLabel")
    private @Nullable Output<String> hostnameLabel;

    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS.
     * 
     */
    public Optional<Output<String>> hostnameLabel() {
        return Optional.ofNullable(this.hostnameLabel);
    }

    /**
     * The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * DEPRECATED -- please use `isHeatWaveClusterAttached` instead. If the DB System has an Analytics Cluster attached.
     * 
     */
    @Import(name="isAnalyticsClusterAttached")
    private @Nullable Output<Boolean> isAnalyticsClusterAttached;

    /**
     * @return DEPRECATED -- please use `isHeatWaveClusterAttached` instead. If the DB System has an Analytics Cluster attached.
     * 
     */
    public Optional<Output<Boolean>> isAnalyticsClusterAttached() {
        return Optional.ofNullable(this.isAnalyticsClusterAttached);
    }

    /**
     * If the DB System has a HeatWave Cluster attached.
     * 
     */
    @Import(name="isHeatWaveClusterAttached")
    private @Nullable Output<Boolean> isHeatWaveClusterAttached;

    /**
     * @return If the DB System has a HeatWave Cluster attached.
     * 
     */
    public Optional<Output<Boolean>> isHeatWaveClusterAttached() {
        return Optional.ofNullable(this.isHeatWaveClusterAttached);
    }

    /**
     * (Updatable) Specifies if the DB System is highly available.
     * 
     */
    @Import(name="isHighlyAvailable")
    private @Nullable Output<Boolean> isHighlyAvailable;

    /**
     * @return (Updatable) Specifies if the DB System is highly available.
     * 
     */
    public Optional<Output<Boolean>> isHighlyAvailable() {
        return Optional.ofNullable(this.isHighlyAvailable);
    }

    /**
     * Additional information about the current lifecycleState.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * (Updatable) The Maintenance Policy for the DB System. `maintenance` and `backup_policy` cannot be updated in the same request.
     * 
     */
    @Import(name="maintenance")
    private @Nullable Output<MysqlDbSystemMaintenanceArgs> maintenance;

    /**
     * @return (Updatable) The Maintenance Policy for the DB System. `maintenance` and `backup_policy` cannot be updated in the same request.
     * 
     */
    public Optional<Output<MysqlDbSystemMaintenanceArgs>> maintenance() {
        return Optional.ofNullable(this.maintenance);
    }

    /**
     * Name of the MySQL Version in use for the DB System.
     * 
     * @deprecated
     * The &#39;mysql_version&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_version' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Import(name="mysqlVersion")
    private @Nullable Output<String> mysqlVersion;

    /**
     * @return Name of the MySQL Version in use for the DB System.
     * 
     * @deprecated
     * The &#39;mysql_version&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_version' field has been deprecated and may be removed in a future version. Do not use this field. */
    public Optional<Output<String>> mysqlVersion() {
        return Optional.ofNullable(this.mysqlVersion);
    }

    /**
     * The port for primary endpoint of the DB System to listen on.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
     * 
     */
    @Import(name="portX")
    private @Nullable Output<Integer> portX;

    /**
     * @return The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
     * 
     */
    public Optional<Output<Integer>> portX() {
        return Optional.ofNullable(this.portX);
    }

    /**
     * The name of the shape. The shape determines the resources allocated
     * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
     * 
     */
    @Import(name="shapeName")
    private @Nullable Output<String> shapeName;

    /**
     * @return The name of the shape. The shape determines the resources allocated
     * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
     * 
     */
    public Optional<Output<String>> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }

    /**
     * It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
     * 
     */
    @Import(name="shutdownType")
    private @Nullable Output<String> shutdownType;

    /**
     * @return It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
     * 
     */
    public Optional<Output<String>> shutdownType() {
        return Optional.ofNullable(this.shutdownType);
    }

    /**
     * Parameters detailing how to provision the initial data of the system.
     * 
     */
    @Import(name="source")
    private @Nullable Output<MysqlDbSystemSourceArgs> source;

    /**
     * @return Parameters detailing how to provision the initial data of the system.
     * 
     */
    public Optional<Output<MysqlDbSystemSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The OCID of the subnet the DB System is associated with.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The date and time the DB System was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the DB System was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the DB System was last updated.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the DB System was last updated.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private MysqlDbSystemState() {}

    private MysqlDbSystemState(MysqlDbSystemState $) {
        this.adminPassword = $.adminPassword;
        this.adminUsername = $.adminUsername;
        this.analyticsClusters = $.analyticsClusters;
        this.availabilityDomain = $.availabilityDomain;
        this.backupPolicy = $.backupPolicy;
        this.channels = $.channels;
        this.compartmentId = $.compartmentId;
        this.configurationId = $.configurationId;
        this.crashRecovery = $.crashRecovery;
        this.currentPlacements = $.currentPlacements;
        this.dataStorageSizeInGb = $.dataStorageSizeInGb;
        this.definedTags = $.definedTags;
        this.deletionPolicies = $.deletionPolicies;
        this.description = $.description;
        this.displayName = $.displayName;
        this.endpoints = $.endpoints;
        this.faultDomain = $.faultDomain;
        this.freeformTags = $.freeformTags;
        this.heatWaveClusters = $.heatWaveClusters;
        this.hostnameLabel = $.hostnameLabel;
        this.ipAddress = $.ipAddress;
        this.isAnalyticsClusterAttached = $.isAnalyticsClusterAttached;
        this.isHeatWaveClusterAttached = $.isHeatWaveClusterAttached;
        this.isHighlyAvailable = $.isHighlyAvailable;
        this.lifecycleDetails = $.lifecycleDetails;
        this.maintenance = $.maintenance;
        this.mysqlVersion = $.mysqlVersion;
        this.port = $.port;
        this.portX = $.portX;
        this.shapeName = $.shapeName;
        this.shutdownType = $.shutdownType;
        this.source = $.source;
        this.state = $.state;
        this.subnetId = $.subnetId;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlDbSystemState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlDbSystemState $;

        public Builder() {
            $ = new MysqlDbSystemState();
        }

        public Builder(MysqlDbSystemState defaults) {
            $ = new MysqlDbSystemState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPassword The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param adminUsername The username for the administrative user.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(@Nullable Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        /**
         * @param adminUsername The username for the administrative user.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        /**
         * @param analyticsClusters DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
         * 
         * @return builder
         * 
         */
        public Builder analyticsClusters(@Nullable Output<List<MysqlDbSystemAnalyticsClusterArgs>> analyticsClusters) {
            $.analyticsClusters = analyticsClusters;
            return this;
        }

        /**
         * @param analyticsClusters DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
         * 
         * @return builder
         * 
         */
        public Builder analyticsClusters(List<MysqlDbSystemAnalyticsClusterArgs> analyticsClusters) {
            return analyticsClusters(Output.of(analyticsClusters));
        }

        /**
         * @param analyticsClusters DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
         * 
         * @return builder
         * 
         */
        public Builder analyticsClusters(MysqlDbSystemAnalyticsClusterArgs... analyticsClusters) {
            return analyticsClusters(List.of(analyticsClusters));
        }

        /**
         * @param availabilityDomain The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(@Nullable Output<String> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(String availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param backupPolicy (Updatable) Backup policy as optionally used for DB System Creation.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicy(@Nullable Output<MysqlDbSystemBackupPolicyArgs> backupPolicy) {
            $.backupPolicy = backupPolicy;
            return this;
        }

        /**
         * @param backupPolicy (Updatable) Backup policy as optionally used for DB System Creation.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicy(MysqlDbSystemBackupPolicyArgs backupPolicy) {
            return backupPolicy(Output.of(backupPolicy));
        }

        /**
         * @param channels A list with a summary of all the Channels attached to the DB System.
         * 
         * @return builder
         * 
         */
        public Builder channels(@Nullable Output<List<MysqlDbSystemChannelArgs>> channels) {
            $.channels = channels;
            return this;
        }

        /**
         * @param channels A list with a summary of all the Channels attached to the DB System.
         * 
         * @return builder
         * 
         */
        public Builder channels(List<MysqlDbSystemChannelArgs> channels) {
            return channels(Output.of(channels));
        }

        /**
         * @param channels A list with a summary of all the Channels attached to the DB System.
         * 
         * @return builder
         * 
         */
        public Builder channels(MysqlDbSystemChannelArgs... channels) {
            return channels(List.of(channels));
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configurationId The OCID of the Configuration to be used for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable Output<String> configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param configurationId The OCID of the Configuration to be used for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(String configurationId) {
            return configurationId(Output.of(configurationId));
        }

        /**
         * @param crashRecovery (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
         * 
         * @return builder
         * 
         */
        public Builder crashRecovery(@Nullable Output<String> crashRecovery) {
            $.crashRecovery = crashRecovery;
            return this;
        }

        /**
         * @param crashRecovery (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
         * 
         * @return builder
         * 
         */
        public Builder crashRecovery(String crashRecovery) {
            return crashRecovery(Output.of(crashRecovery));
        }

        /**
         * @param currentPlacements The availability domain and fault domain a DB System is placed in.
         * 
         * @return builder
         * 
         */
        public Builder currentPlacements(@Nullable Output<List<MysqlDbSystemCurrentPlacementArgs>> currentPlacements) {
            $.currentPlacements = currentPlacements;
            return this;
        }

        /**
         * @param currentPlacements The availability domain and fault domain a DB System is placed in.
         * 
         * @return builder
         * 
         */
        public Builder currentPlacements(List<MysqlDbSystemCurrentPlacementArgs> currentPlacements) {
            return currentPlacements(Output.of(currentPlacements));
        }

        /**
         * @param currentPlacements The availability domain and fault domain a DB System is placed in.
         * 
         * @return builder
         * 
         */
        public Builder currentPlacements(MysqlDbSystemCurrentPlacementArgs... currentPlacements) {
            return currentPlacements(List.of(currentPlacements));
        }

        /**
         * @param dataStorageSizeInGb Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGb(@Nullable Output<Integer> dataStorageSizeInGb) {
            $.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }

        /**
         * @param dataStorageSizeInGb Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeInGb(Integer dataStorageSizeInGb) {
            return dataStorageSizeInGb(Output.of(dataStorageSizeInGb));
        }

        /**
         * @param definedTags (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param deletionPolicies (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicies(@Nullable Output<List<MysqlDbSystemDeletionPolicyArgs>> deletionPolicies) {
            $.deletionPolicies = deletionPolicies;
            return this;
        }

        /**
         * @param deletionPolicies (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicies(List<MysqlDbSystemDeletionPolicyArgs> deletionPolicies) {
            return deletionPolicies(Output.of(deletionPolicies));
        }

        /**
         * @param deletionPolicies (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicies(MysqlDbSystemDeletionPolicyArgs... deletionPolicies) {
            return deletionPolicies(List.of(deletionPolicies));
        }

        /**
         * @param description (Updatable) User-provided data about the DB System.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) User-provided data about the DB System.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) The user-friendly name for the DB System. It does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The user-friendly name for the DB System. It does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param endpoints The network endpoints available for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(@Nullable Output<List<MysqlDbSystemEndpointArgs>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        /**
         * @param endpoints The network endpoints available for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(List<MysqlDbSystemEndpointArgs> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        /**
         * @param endpoints The network endpoints available for this DB System.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(MysqlDbSystemEndpointArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }

        /**
         * @param faultDomain The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(@Nullable Output<String> faultDomain) {
            $.faultDomain = faultDomain;
            return this;
        }

        /**
         * @param faultDomain The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(String faultDomain) {
            return faultDomain(Output.of(faultDomain));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param heatWaveClusters A summary of a HeatWave cluster.
         * 
         * @return builder
         * 
         */
        public Builder heatWaveClusters(@Nullable Output<List<MysqlDbSystemHeatWaveClusterArgs>> heatWaveClusters) {
            $.heatWaveClusters = heatWaveClusters;
            return this;
        }

        /**
         * @param heatWaveClusters A summary of a HeatWave cluster.
         * 
         * @return builder
         * 
         */
        public Builder heatWaveClusters(List<MysqlDbSystemHeatWaveClusterArgs> heatWaveClusters) {
            return heatWaveClusters(Output.of(heatWaveClusters));
        }

        /**
         * @param heatWaveClusters A summary of a HeatWave cluster.
         * 
         * @return builder
         * 
         */
        public Builder heatWaveClusters(MysqlDbSystemHeatWaveClusterArgs... heatWaveClusters) {
            return heatWaveClusters(List.of(heatWaveClusters));
        }

        /**
         * @param hostnameLabel The hostname for the primary endpoint of the DB System. Used for DNS.
         * 
         * @return builder
         * 
         */
        public Builder hostnameLabel(@Nullable Output<String> hostnameLabel) {
            $.hostnameLabel = hostnameLabel;
            return this;
        }

        /**
         * @param hostnameLabel The hostname for the primary endpoint of the DB System. Used for DNS.
         * 
         * @return builder
         * 
         */
        public Builder hostnameLabel(String hostnameLabel) {
            return hostnameLabel(Output.of(hostnameLabel));
        }

        /**
         * @param ipAddress The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param isAnalyticsClusterAttached DEPRECATED -- please use `isHeatWaveClusterAttached` instead. If the DB System has an Analytics Cluster attached.
         * 
         * @return builder
         * 
         */
        public Builder isAnalyticsClusterAttached(@Nullable Output<Boolean> isAnalyticsClusterAttached) {
            $.isAnalyticsClusterAttached = isAnalyticsClusterAttached;
            return this;
        }

        /**
         * @param isAnalyticsClusterAttached DEPRECATED -- please use `isHeatWaveClusterAttached` instead. If the DB System has an Analytics Cluster attached.
         * 
         * @return builder
         * 
         */
        public Builder isAnalyticsClusterAttached(Boolean isAnalyticsClusterAttached) {
            return isAnalyticsClusterAttached(Output.of(isAnalyticsClusterAttached));
        }

        /**
         * @param isHeatWaveClusterAttached If the DB System has a HeatWave Cluster attached.
         * 
         * @return builder
         * 
         */
        public Builder isHeatWaveClusterAttached(@Nullable Output<Boolean> isHeatWaveClusterAttached) {
            $.isHeatWaveClusterAttached = isHeatWaveClusterAttached;
            return this;
        }

        /**
         * @param isHeatWaveClusterAttached If the DB System has a HeatWave Cluster attached.
         * 
         * @return builder
         * 
         */
        public Builder isHeatWaveClusterAttached(Boolean isHeatWaveClusterAttached) {
            return isHeatWaveClusterAttached(Output.of(isHeatWaveClusterAttached));
        }

        /**
         * @param isHighlyAvailable (Updatable) Specifies if the DB System is highly available.
         * 
         * @return builder
         * 
         */
        public Builder isHighlyAvailable(@Nullable Output<Boolean> isHighlyAvailable) {
            $.isHighlyAvailable = isHighlyAvailable;
            return this;
        }

        /**
         * @param isHighlyAvailable (Updatable) Specifies if the DB System is highly available.
         * 
         * @return builder
         * 
         */
        public Builder isHighlyAvailable(Boolean isHighlyAvailable) {
            return isHighlyAvailable(Output.of(isHighlyAvailable));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param maintenance (Updatable) The Maintenance Policy for the DB System. `maintenance` and `backup_policy` cannot be updated in the same request.
         * 
         * @return builder
         * 
         */
        public Builder maintenance(@Nullable Output<MysqlDbSystemMaintenanceArgs> maintenance) {
            $.maintenance = maintenance;
            return this;
        }

        /**
         * @param maintenance (Updatable) The Maintenance Policy for the DB System. `maintenance` and `backup_policy` cannot be updated in the same request.
         * 
         * @return builder
         * 
         */
        public Builder maintenance(MysqlDbSystemMaintenanceArgs maintenance) {
            return maintenance(Output.of(maintenance));
        }

        /**
         * @param mysqlVersion Name of the MySQL Version in use for the DB System.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysql_version&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysql_version' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlVersion(@Nullable Output<String> mysqlVersion) {
            $.mysqlVersion = mysqlVersion;
            return this;
        }

        /**
         * @param mysqlVersion Name of the MySQL Version in use for the DB System.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;mysql_version&#39; field has been deprecated and may be removed in a future version. Do not use this field.
         * 
         */
        @Deprecated /* The 'mysql_version' field has been deprecated and may be removed in a future version. Do not use this field. */
        public Builder mysqlVersion(String mysqlVersion) {
            return mysqlVersion(Output.of(mysqlVersion));
        }

        /**
         * @param port The port for primary endpoint of the DB System to listen on.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port for primary endpoint of the DB System to listen on.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param portX The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
         * 
         * @return builder
         * 
         */
        public Builder portX(@Nullable Output<Integer> portX) {
            $.portX = portX;
            return this;
        }

        /**
         * @param portX The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
         * 
         * @return builder
         * 
         */
        public Builder portX(Integer portX) {
            return portX(Output.of(portX));
        }

        /**
         * @param shapeName The name of the shape. The shape determines the resources allocated
         * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(@Nullable Output<String> shapeName) {
            $.shapeName = shapeName;
            return this;
        }

        /**
         * @param shapeName The name of the shape. The shape determines the resources allocated
         * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(String shapeName) {
            return shapeName(Output.of(shapeName));
        }

        /**
         * @param shutdownType It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
         * 
         * @return builder
         * 
         */
        public Builder shutdownType(@Nullable Output<String> shutdownType) {
            $.shutdownType = shutdownType;
            return this;
        }

        /**
         * @param shutdownType It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
         * 
         * @return builder
         * 
         */
        public Builder shutdownType(String shutdownType) {
            return shutdownType(Output.of(shutdownType));
        }

        /**
         * @param source Parameters detailing how to provision the initial data of the system.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<MysqlDbSystemSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Parameters detailing how to provision the initial data of the system.
         * 
         * @return builder
         * 
         */
        public Builder source(MysqlDbSystemSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param state (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subnetId The OCID of the subnet the DB System is associated with.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of the subnet the DB System is associated with.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param timeCreated The date and time the DB System was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the DB System was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time the DB System was last updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the DB System was last updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public MysqlDbSystemState build() {
            return $;
        }
    }

}
