// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.LoadBalancer.outputs.GetRuleSetItemCondition;
import com.pulumi.oci.LoadBalancer.outputs.GetRuleSetItemRedirectUri;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRuleSetItem {
    /**
     * @return The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
     * 
     */
    private final String action;
    /**
     * @return The list of HTTP methods allowed for this listener.
     * 
     */
    private final List<String> allowedMethods;
    /**
     * @return Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
     * 
     */
    private final Boolean areInvalidCharactersAllowed;
    private final List<GetRuleSetItemCondition> conditions;
    /**
     * @return A brief description of the access control rule. Avoid entering confidential information.
     * 
     */
    private final String description;
    /**
     * @return A header name that conforms to RFC 7230.  Example: `example_header_name`
     * 
     */
    private final String header;
    /**
     * @return The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
     * 
     */
    private final Integer httpLargeHeaderSizeInKb;
    /**
     * @return A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    private final String prefix;
    /**
     * @return An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
     * 
     */
    private final List<GetRuleSetItemRedirectUri> redirectUris;
    /**
     * @return The HTTP status code to return when the incoming request is redirected.
     * 
     */
    private final Integer responseCode;
    /**
     * @return The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
     * 
     */
    private final Integer statusCode;
    /**
     * @return A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    private final String suffix;
    /**
     * @return A header value that conforms to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    private final String value;

    @CustomType.Constructor
    private GetRuleSetItem(
        @CustomType.Parameter("action") String action,
        @CustomType.Parameter("allowedMethods") List<String> allowedMethods,
        @CustomType.Parameter("areInvalidCharactersAllowed") Boolean areInvalidCharactersAllowed,
        @CustomType.Parameter("conditions") List<GetRuleSetItemCondition> conditions,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("header") String header,
        @CustomType.Parameter("httpLargeHeaderSizeInKb") Integer httpLargeHeaderSizeInKb,
        @CustomType.Parameter("prefix") String prefix,
        @CustomType.Parameter("redirectUris") List<GetRuleSetItemRedirectUri> redirectUris,
        @CustomType.Parameter("responseCode") Integer responseCode,
        @CustomType.Parameter("statusCode") Integer statusCode,
        @CustomType.Parameter("suffix") String suffix,
        @CustomType.Parameter("value") String value) {
        this.action = action;
        this.allowedMethods = allowedMethods;
        this.areInvalidCharactersAllowed = areInvalidCharactersAllowed;
        this.conditions = conditions;
        this.description = description;
        this.header = header;
        this.httpLargeHeaderSizeInKb = httpLargeHeaderSizeInKb;
        this.prefix = prefix;
        this.redirectUris = redirectUris;
        this.responseCode = responseCode;
        this.statusCode = statusCode;
        this.suffix = suffix;
        this.value = value;
    }

    /**
     * @return The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return The list of HTTP methods allowed for this listener.
     * 
     */
    public List<String> allowedMethods() {
        return this.allowedMethods;
    }
    /**
     * @return Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If &#34;true&#34;, invalid characters are allowed in the HTTP header. If &#34;false&#34;, invalid characters are not allowed in the HTTP header
     * 
     */
    public Boolean areInvalidCharactersAllowed() {
        return this.areInvalidCharactersAllowed;
    }
    public List<GetRuleSetItemCondition> conditions() {
        return this.conditions;
    }
    /**
     * @return A brief description of the access control rule. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A header name that conforms to RFC 7230.  Example: `example_header_name`
     * 
     */
    public String header() {
        return this.header;
    }
    /**
     * @return The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
     * 
     */
    public Integer httpLargeHeaderSizeInKb() {
        return this.httpLargeHeaderSizeInKb;
    }
    /**
     * @return A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    public String prefix() {
        return this.prefix;
    }
    /**
     * @return An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
     * 
     */
    public List<GetRuleSetItemRedirectUri> redirectUris() {
        return this.redirectUris;
    }
    /**
     * @return The HTTP status code to return when the incoming request is redirected.
     * 
     */
    public Integer responseCode() {
        return this.responseCode;
    }
    /**
     * @return The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
     * 
     */
    public Integer statusCode() {
        return this.statusCode;
    }
    /**
     * @return A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    public String suffix() {
        return this.suffix;
    }
    /**
     * @return A header value that conforms to RFC 7230. With the following exceptions:
     * *  value cannot contain `$`
     * *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRuleSetItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String action;
        private List<String> allowedMethods;
        private Boolean areInvalidCharactersAllowed;
        private List<GetRuleSetItemCondition> conditions;
        private String description;
        private String header;
        private Integer httpLargeHeaderSizeInKb;
        private String prefix;
        private List<GetRuleSetItemRedirectUri> redirectUris;
        private Integer responseCode;
        private Integer statusCode;
        private String suffix;
        private String value;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRuleSetItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.allowedMethods = defaults.allowedMethods;
    	      this.areInvalidCharactersAllowed = defaults.areInvalidCharactersAllowed;
    	      this.conditions = defaults.conditions;
    	      this.description = defaults.description;
    	      this.header = defaults.header;
    	      this.httpLargeHeaderSizeInKb = defaults.httpLargeHeaderSizeInKb;
    	      this.prefix = defaults.prefix;
    	      this.redirectUris = defaults.redirectUris;
    	      this.responseCode = defaults.responseCode;
    	      this.statusCode = defaults.statusCode;
    	      this.suffix = defaults.suffix;
    	      this.value = defaults.value;
        }

        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder allowedMethods(List<String> allowedMethods) {
            this.allowedMethods = Objects.requireNonNull(allowedMethods);
            return this;
        }
        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }
        public Builder areInvalidCharactersAllowed(Boolean areInvalidCharactersAllowed) {
            this.areInvalidCharactersAllowed = Objects.requireNonNull(areInvalidCharactersAllowed);
            return this;
        }
        public Builder conditions(List<GetRuleSetItemCondition> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        public Builder conditions(GetRuleSetItemCondition... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder header(String header) {
            this.header = Objects.requireNonNull(header);
            return this;
        }
        public Builder httpLargeHeaderSizeInKb(Integer httpLargeHeaderSizeInKb) {
            this.httpLargeHeaderSizeInKb = Objects.requireNonNull(httpLargeHeaderSizeInKb);
            return this;
        }
        public Builder prefix(String prefix) {
            this.prefix = Objects.requireNonNull(prefix);
            return this;
        }
        public Builder redirectUris(List<GetRuleSetItemRedirectUri> redirectUris) {
            this.redirectUris = Objects.requireNonNull(redirectUris);
            return this;
        }
        public Builder redirectUris(GetRuleSetItemRedirectUri... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        public Builder responseCode(Integer responseCode) {
            this.responseCode = Objects.requireNonNull(responseCode);
            return this;
        }
        public Builder statusCode(Integer statusCode) {
            this.statusCode = Objects.requireNonNull(statusCode);
            return this;
        }
        public Builder suffix(String suffix) {
            this.suffix = Objects.requireNonNull(suffix);
            return this;
        }
        public Builder value(String value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }        public GetRuleSetItem build() {
            return new GetRuleSetItem(action, allowedMethods, areInvalidCharactersAllowed, conditions, description, header, httpLargeHeaderSizeInKb, prefix, redirectUris, responseCode, statusCode, suffix, value);
        }
    }
}
