// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementAgentInstallKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementAgentInstallKeyArgs Empty = new ManagementAgentInstallKeyArgs();

    /**
     * Total number of install for this keys
     * 
     */
    @Import(name="allowedKeyInstallCount")
    private @Nullable Output<Integer> allowedKeyInstallCount;

    /**
     * @return Total number of install for this keys
     * 
     */
    public Optional<Output<Integer>> allowedKeyInstallCount() {
        return Optional.ofNullable(this.allowedKeyInstallCount);
    }

    /**
     * Compartment Identifier
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return Compartment Identifier
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Management Agent install Key Name
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) Management Agent install Key Name
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * If set to true, the install key has no expiration date or usage limit. Defaults to false
     * 
     */
    @Import(name="isUnlimited")
    private @Nullable Output<Boolean> isUnlimited;

    /**
     * @return If set to true, the install key has no expiration date or usage limit. Defaults to false
     * 
     */
    public Optional<Output<Boolean>> isUnlimited() {
        return Optional.ofNullable(this.isUnlimited);
    }

    /**
     * date after which key would expire after creation
     * 
     */
    @Import(name="timeExpires")
    private @Nullable Output<String> timeExpires;

    /**
     * @return date after which key would expire after creation
     * 
     */
    public Optional<Output<String>> timeExpires() {
        return Optional.ofNullable(this.timeExpires);
    }

    private ManagementAgentInstallKeyArgs() {}

    private ManagementAgentInstallKeyArgs(ManagementAgentInstallKeyArgs $) {
        this.allowedKeyInstallCount = $.allowedKeyInstallCount;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.isUnlimited = $.isUnlimited;
        this.timeExpires = $.timeExpires;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementAgentInstallKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementAgentInstallKeyArgs $;

        public Builder() {
            $ = new ManagementAgentInstallKeyArgs();
        }

        public Builder(ManagementAgentInstallKeyArgs defaults) {
            $ = new ManagementAgentInstallKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedKeyInstallCount Total number of install for this keys
         * 
         * @return builder
         * 
         */
        public Builder allowedKeyInstallCount(@Nullable Output<Integer> allowedKeyInstallCount) {
            $.allowedKeyInstallCount = allowedKeyInstallCount;
            return this;
        }

        /**
         * @param allowedKeyInstallCount Total number of install for this keys
         * 
         * @return builder
         * 
         */
        public Builder allowedKeyInstallCount(Integer allowedKeyInstallCount) {
            return allowedKeyInstallCount(Output.of(allowedKeyInstallCount));
        }

        /**
         * @param compartmentId Compartment Identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId Compartment Identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName (Updatable) Management Agent install Key Name
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Management Agent install Key Name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param isUnlimited If set to true, the install key has no expiration date or usage limit. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder isUnlimited(@Nullable Output<Boolean> isUnlimited) {
            $.isUnlimited = isUnlimited;
            return this;
        }

        /**
         * @param isUnlimited If set to true, the install key has no expiration date or usage limit. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder isUnlimited(Boolean isUnlimited) {
            return isUnlimited(Output.of(isUnlimited));
        }

        /**
         * @param timeExpires date after which key would expire after creation
         * 
         * @return builder
         * 
         */
        public Builder timeExpires(@Nullable Output<String> timeExpires) {
            $.timeExpires = timeExpires;
            return this;
        }

        /**
         * @param timeExpires date after which key would expire after creation
         * 
         * @return builder
         * 
         */
        public Builder timeExpires(String timeExpires) {
            return timeExpires(Output.of(timeExpires));
        }

        public ManagementAgentInstallKeyArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
