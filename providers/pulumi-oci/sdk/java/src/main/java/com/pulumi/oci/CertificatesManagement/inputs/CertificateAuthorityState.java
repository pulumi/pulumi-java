// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateAuthorityCertificateAuthorityConfigArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateAuthorityCertificateAuthorityRuleArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateAuthorityCertificateRevocationListDetailsArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateAuthorityCurrentVersionArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateAuthoritySubjectArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateAuthorityState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityState Empty = new CertificateAuthorityState();

    /**
     * (Updatable) The configuration details for creating a certificate authority (CA).
     * 
     */
    @Import(name="certificateAuthorityConfig")
    private @Nullable Output<CertificateAuthorityCertificateAuthorityConfigArgs> certificateAuthorityConfig;

    /**
     * @return (Updatable) The configuration details for creating a certificate authority (CA).
     * 
     */
    public Optional<Output<CertificateAuthorityCertificateAuthorityConfigArgs>> certificateAuthorityConfig() {
        return Optional.ofNullable(this.certificateAuthorityConfig);
    }

    /**
     * (Updatable) A list of rules that control how the CA is used and managed.
     * 
     */
    @Import(name="certificateAuthorityRules")
    private @Nullable Output<List<CertificateAuthorityCertificateAuthorityRuleArgs>> certificateAuthorityRules;

    /**
     * @return (Updatable) A list of rules that control how the CA is used and managed.
     * 
     */
    public Optional<Output<List<CertificateAuthorityCertificateAuthorityRuleArgs>>> certificateAuthorityRules() {
        return Optional.ofNullable(this.certificateAuthorityRules);
    }

    /**
     * (Updatable) The details of the certificate revocation list (CRL).
     * 
     */
    @Import(name="certificateRevocationListDetails")
    private @Nullable Output<CertificateAuthorityCertificateRevocationListDetailsArgs> certificateRevocationListDetails;

    /**
     * @return (Updatable) The details of the certificate revocation list (CRL).
     * 
     */
    public Optional<Output<CertificateAuthorityCertificateRevocationListDetailsArgs>> certificateRevocationListDetails() {
        return Optional.ofNullable(this.certificateRevocationListDetails);
    }

    /**
     * (Updatable) The compartment in which you want to create the CA.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The compartment in which you want to create the CA.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) The origin of the CA.
     * 
     */
    @Import(name="configType")
    private @Nullable Output<String> configType;

    /**
     * @return (Updatable) The origin of the CA.
     * 
     */
    public Optional<Output<String>> configType() {
        return Optional.ofNullable(this.configType);
    }

    /**
     * The metadata details of the certificate authority (CA) version. This summary object does not contain the CA contents.
     * 
     */
    @Import(name="currentVersions")
    private @Nullable Output<List<CertificateAuthorityCurrentVersionArgs>> currentVersions;

    /**
     * @return The metadata details of the certificate authority (CA) version. This summary object does not contain the CA contents.
     * 
     */
    public Optional<Output<List<CertificateAuthorityCurrentVersionArgs>>> currentVersions() {
        return Optional.ofNullable(this.currentVersions);
    }

    /**
     * (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A brief description of the CA.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A brief description of the CA.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The OCID of the private CA.
     * 
     */
    @Import(name="issuerCertificateAuthorityId")
    private @Nullable Output<String> issuerCertificateAuthorityId;

    /**
     * @return The OCID of the private CA.
     * 
     */
    public Optional<Output<String>> issuerCertificateAuthorityId() {
        return Optional.ofNullable(this.issuerCertificateAuthorityId);
    }

    /**
     * The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * Additional information about the current CA lifecycle state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current CA lifecycle state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The algorithm used to sign public key certificates that the CA issues.
     * 
     */
    @Import(name="signingAlgorithm")
    private @Nullable Output<String> signingAlgorithm;

    /**
     * @return The algorithm used to sign public key certificates that the CA issues.
     * 
     */
    public Optional<Output<String>> signingAlgorithm() {
        return Optional.ofNullable(this.signingAlgorithm);
    }

    /**
     * The current lifecycle state of the certificate authority.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifecycle state of the certificate authority.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    @Import(name="subjects")
    private @Nullable Output<List<CertificateAuthoritySubjectArgs>> subjects;

    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    public Optional<Output<List<CertificateAuthoritySubjectArgs>>> subjects() {
        return Optional.ofNullable(this.subjects);
    }

    /**
     * A property indicating when the CA was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return A property indicating when the CA was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * An optional property indicating when to delete the CA version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    @Import(name="timeOfDeletion")
    private @Nullable Output<String> timeOfDeletion;

    /**
     * @return An optional property indicating when to delete the CA version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeOfDeletion() {
        return Optional.ofNullable(this.timeOfDeletion);
    }

    private CertificateAuthorityState() {}

    private CertificateAuthorityState(CertificateAuthorityState $) {
        this.certificateAuthorityConfig = $.certificateAuthorityConfig;
        this.certificateAuthorityRules = $.certificateAuthorityRules;
        this.certificateRevocationListDetails = $.certificateRevocationListDetails;
        this.compartmentId = $.compartmentId;
        this.configType = $.configType;
        this.currentVersions = $.currentVersions;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.freeformTags = $.freeformTags;
        this.issuerCertificateAuthorityId = $.issuerCertificateAuthorityId;
        this.kmsKeyId = $.kmsKeyId;
        this.lifecycleDetails = $.lifecycleDetails;
        this.name = $.name;
        this.signingAlgorithm = $.signingAlgorithm;
        this.state = $.state;
        this.subjects = $.subjects;
        this.timeCreated = $.timeCreated;
        this.timeOfDeletion = $.timeOfDeletion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateAuthorityState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateAuthorityState $;

        public Builder() {
            $ = new CertificateAuthorityState();
        }

        public Builder(CertificateAuthorityState defaults) {
            $ = new CertificateAuthorityState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthorityConfig (Updatable) The configuration details for creating a certificate authority (CA).
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityConfig(@Nullable Output<CertificateAuthorityCertificateAuthorityConfigArgs> certificateAuthorityConfig) {
            $.certificateAuthorityConfig = certificateAuthorityConfig;
            return this;
        }

        /**
         * @param certificateAuthorityConfig (Updatable) The configuration details for creating a certificate authority (CA).
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityConfig(CertificateAuthorityCertificateAuthorityConfigArgs certificateAuthorityConfig) {
            return certificateAuthorityConfig(Output.of(certificateAuthorityConfig));
        }

        /**
         * @param certificateAuthorityRules (Updatable) A list of rules that control how the CA is used and managed.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityRules(@Nullable Output<List<CertificateAuthorityCertificateAuthorityRuleArgs>> certificateAuthorityRules) {
            $.certificateAuthorityRules = certificateAuthorityRules;
            return this;
        }

        /**
         * @param certificateAuthorityRules (Updatable) A list of rules that control how the CA is used and managed.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityRules(List<CertificateAuthorityCertificateAuthorityRuleArgs> certificateAuthorityRules) {
            return certificateAuthorityRules(Output.of(certificateAuthorityRules));
        }

        /**
         * @param certificateAuthorityRules (Updatable) A list of rules that control how the CA is used and managed.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityRules(CertificateAuthorityCertificateAuthorityRuleArgs... certificateAuthorityRules) {
            return certificateAuthorityRules(List.of(certificateAuthorityRules));
        }

        /**
         * @param certificateRevocationListDetails (Updatable) The details of the certificate revocation list (CRL).
         * 
         * @return builder
         * 
         */
        public Builder certificateRevocationListDetails(@Nullable Output<CertificateAuthorityCertificateRevocationListDetailsArgs> certificateRevocationListDetails) {
            $.certificateRevocationListDetails = certificateRevocationListDetails;
            return this;
        }

        /**
         * @param certificateRevocationListDetails (Updatable) The details of the certificate revocation list (CRL).
         * 
         * @return builder
         * 
         */
        public Builder certificateRevocationListDetails(CertificateAuthorityCertificateRevocationListDetailsArgs certificateRevocationListDetails) {
            return certificateRevocationListDetails(Output.of(certificateRevocationListDetails));
        }

        /**
         * @param compartmentId (Updatable) The compartment in which you want to create the CA.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The compartment in which you want to create the CA.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configType (Updatable) The origin of the CA.
         * 
         * @return builder
         * 
         */
        public Builder configType(@Nullable Output<String> configType) {
            $.configType = configType;
            return this;
        }

        /**
         * @param configType (Updatable) The origin of the CA.
         * 
         * @return builder
         * 
         */
        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        /**
         * @param currentVersions The metadata details of the certificate authority (CA) version. This summary object does not contain the CA contents.
         * 
         * @return builder
         * 
         */
        public Builder currentVersions(@Nullable Output<List<CertificateAuthorityCurrentVersionArgs>> currentVersions) {
            $.currentVersions = currentVersions;
            return this;
        }

        /**
         * @param currentVersions The metadata details of the certificate authority (CA) version. This summary object does not contain the CA contents.
         * 
         * @return builder
         * 
         */
        public Builder currentVersions(List<CertificateAuthorityCurrentVersionArgs> currentVersions) {
            return currentVersions(Output.of(currentVersions));
        }

        /**
         * @param currentVersions The metadata details of the certificate authority (CA) version. This summary object does not contain the CA contents.
         * 
         * @return builder
         * 
         */
        public Builder currentVersions(CertificateAuthorityCurrentVersionArgs... currentVersions) {
            return currentVersions(List.of(currentVersions));
        }

        /**
         * @param definedTags (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A brief description of the CA.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A brief description of the CA.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param issuerCertificateAuthorityId The OCID of the private CA.
         * 
         * @return builder
         * 
         */
        public Builder issuerCertificateAuthorityId(@Nullable Output<String> issuerCertificateAuthorityId) {
            $.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            return this;
        }

        /**
         * @param issuerCertificateAuthorityId The OCID of the private CA.
         * 
         * @return builder
         * 
         */
        public Builder issuerCertificateAuthorityId(String issuerCertificateAuthorityId) {
            return issuerCertificateAuthorityId(Output.of(issuerCertificateAuthorityId));
        }

        /**
         * @param kmsKeyId The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param lifecycleDetails Additional information about the current CA lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current CA lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param name A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param signingAlgorithm The algorithm used to sign public key certificates that the CA issues.
         * 
         * @return builder
         * 
         */
        public Builder signingAlgorithm(@Nullable Output<String> signingAlgorithm) {
            $.signingAlgorithm = signingAlgorithm;
            return this;
        }

        /**
         * @param signingAlgorithm The algorithm used to sign public key certificates that the CA issues.
         * 
         * @return builder
         * 
         */
        public Builder signingAlgorithm(String signingAlgorithm) {
            return signingAlgorithm(Output.of(signingAlgorithm));
        }

        /**
         * @param state The current lifecycle state of the certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifecycle state of the certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subjects The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjects(@Nullable Output<List<CertificateAuthoritySubjectArgs>> subjects) {
            $.subjects = subjects;
            return this;
        }

        /**
         * @param subjects The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjects(List<CertificateAuthoritySubjectArgs> subjects) {
            return subjects(Output.of(subjects));
        }

        /**
         * @param subjects The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjects(CertificateAuthoritySubjectArgs... subjects) {
            return subjects(List.of(subjects));
        }

        /**
         * @param timeCreated A property indicating when the CA was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated A property indicating when the CA was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeOfDeletion An optional property indicating when to delete the CA version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeOfDeletion(@Nullable Output<String> timeOfDeletion) {
            $.timeOfDeletion = timeOfDeletion;
            return this;
        }

        /**
         * @param timeOfDeletion An optional property indicating when to delete the CA version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeOfDeletion(String timeOfDeletion) {
            return timeOfDeletion(Output.of(timeOfDeletion));
        }

        public CertificateAuthorityState build() {
            return $;
        }
    }

}
