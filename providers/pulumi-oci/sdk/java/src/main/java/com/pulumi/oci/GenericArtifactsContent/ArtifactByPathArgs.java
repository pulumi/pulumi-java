// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.GenericArtifactsContent;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ArtifactByPathArgs extends com.pulumi.resources.ResourceArgs {

    public static final ArtifactByPathArgs Empty = new ArtifactByPathArgs();

    /**
     * A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
     * 
     */
    @Import(name="artifactPath", required=true)
    private Output<String> artifactPath;

    /**
     * @return A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
     * 
     */
    public Output<String> artifactPath() {
        return this.artifactPath;
    }

    /**
     * Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    /**
     * A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private ArtifactByPathArgs() {}

    private ArtifactByPathArgs(ArtifactByPathArgs $) {
        this.artifactPath = $.artifactPath;
        this.content = $.content;
        this.repositoryId = $.repositoryId;
        this.source = $.source;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ArtifactByPathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ArtifactByPathArgs $;

        public Builder() {
            $ = new ArtifactByPathArgs();
        }

        public Builder(ArtifactByPathArgs defaults) {
            $ = new ArtifactByPathArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifactPath A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
         * 
         * @return builder
         * 
         */
        public Builder artifactPath(Output<String> artifactPath) {
            $.artifactPath = artifactPath;
            return this;
        }

        /**
         * @param artifactPath A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
         * 
         * @return builder
         * 
         */
        public Builder artifactPath(String artifactPath) {
            return artifactPath(Output.of(artifactPath));
        }

        /**
         * @param content Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param repositoryId The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        /**
         * @param source A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param version A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ArtifactByPathArgs build() {
            $.artifactPath = Objects.requireNonNull($.artifactPath, "expected parameter 'artifactPath' to be non-null");
            $.repositoryId = Objects.requireNonNull($.repositoryId, "expected parameter 'repositoryId' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
