// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRouteRequestPoliciesCorsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRouteRequestPoliciesCorsArgs Empty = new DeploymentSpecificationRouteRequestPoliciesCorsArgs();

    /**
     * (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. &#39;*&#39; will allow all headers.
     * 
     */
    @Import(name="allowedHeaders")
    private @Nullable Output<List<String>> allowedHeaders;

    /**
     * @return (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. &#39;*&#39; will allow all headers.
     * 
     */
    public Optional<Output<List<String>>> allowedHeaders() {
        return Optional.ofNullable(this.allowedHeaders);
    }

    /**
     * (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. &#39;*&#39; will allow all methods.
     * 
     */
    @Import(name="allowedMethods")
    private @Nullable Output<List<String>> allowedMethods;

    /**
     * @return (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. &#39;*&#39; will allow all methods.
     * 
     */
    public Optional<Output<List<String>>> allowedMethods() {
        return Optional.ofNullable(this.allowedMethods);
    }

    /**
     * (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. &#39;*&#39; will match any origins, and &#39;null&#39; will match queries from &#39;file:&#39; origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
     * 
     */
    @Import(name="allowedOrigins", required=true)
    private Output<List<String>> allowedOrigins;

    /**
     * @return (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. &#39;*&#39; will match any origins, and &#39;null&#39; will match queries from &#39;file:&#39; origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
     * 
     */
    public Output<List<String>> allowedOrigins() {
        return this.allowedOrigins;
    }

    /**
     * (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. &#39;*&#39; will expose all headers.
     * 
     */
    @Import(name="exposedHeaders")
    private @Nullable Output<List<String>> exposedHeaders;

    /**
     * @return (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. &#39;*&#39; will expose all headers.
     * 
     */
    public Optional<Output<List<String>>> exposedHeaders() {
        return Optional.ofNullable(this.exposedHeaders);
    }

    /**
     * (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
     * 
     */
    @Import(name="isAllowCredentialsEnabled")
    private @Nullable Output<Boolean> isAllowCredentialsEnabled;

    /**
     * @return (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
     * 
     */
    public Optional<Output<Boolean>> isAllowCredentialsEnabled() {
        return Optional.ofNullable(this.isAllowCredentialsEnabled);
    }

    /**
     * (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
     * 
     */
    @Import(name="maxAgeInSeconds")
    private @Nullable Output<Integer> maxAgeInSeconds;

    /**
     * @return (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
     * 
     */
    public Optional<Output<Integer>> maxAgeInSeconds() {
        return Optional.ofNullable(this.maxAgeInSeconds);
    }

    private DeploymentSpecificationRouteRequestPoliciesCorsArgs() {}

    private DeploymentSpecificationRouteRequestPoliciesCorsArgs(DeploymentSpecificationRouteRequestPoliciesCorsArgs $) {
        this.allowedHeaders = $.allowedHeaders;
        this.allowedMethods = $.allowedMethods;
        this.allowedOrigins = $.allowedOrigins;
        this.exposedHeaders = $.exposedHeaders;
        this.isAllowCredentialsEnabled = $.isAllowCredentialsEnabled;
        this.maxAgeInSeconds = $.maxAgeInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRouteRequestPoliciesCorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRouteRequestPoliciesCorsArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRouteRequestPoliciesCorsArgs();
        }

        public Builder(DeploymentSpecificationRouteRequestPoliciesCorsArgs defaults) {
            $ = new DeploymentSpecificationRouteRequestPoliciesCorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedHeaders (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. &#39;*&#39; will allow all headers.
         * 
         * @return builder
         * 
         */
        public Builder allowedHeaders(@Nullable Output<List<String>> allowedHeaders) {
            $.allowedHeaders = allowedHeaders;
            return this;
        }

        /**
         * @param allowedHeaders (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. &#39;*&#39; will allow all headers.
         * 
         * @return builder
         * 
         */
        public Builder allowedHeaders(List<String> allowedHeaders) {
            return allowedHeaders(Output.of(allowedHeaders));
        }

        /**
         * @param allowedHeaders (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. &#39;*&#39; will allow all headers.
         * 
         * @return builder
         * 
         */
        public Builder allowedHeaders(String... allowedHeaders) {
            return allowedHeaders(List.of(allowedHeaders));
        }

        /**
         * @param allowedMethods (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. &#39;*&#39; will allow all methods.
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(@Nullable Output<List<String>> allowedMethods) {
            $.allowedMethods = allowedMethods;
            return this;
        }

        /**
         * @param allowedMethods (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. &#39;*&#39; will allow all methods.
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(List<String> allowedMethods) {
            return allowedMethods(Output.of(allowedMethods));
        }

        /**
         * @param allowedMethods (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. &#39;*&#39; will allow all methods.
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }

        /**
         * @param allowedOrigins (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. &#39;*&#39; will match any origins, and &#39;null&#39; will match queries from &#39;file:&#39; origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(Output<List<String>> allowedOrigins) {
            $.allowedOrigins = allowedOrigins;
            return this;
        }

        /**
         * @param allowedOrigins (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. &#39;*&#39; will match any origins, and &#39;null&#39; will match queries from &#39;file:&#39; origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(List<String> allowedOrigins) {
            return allowedOrigins(Output.of(allowedOrigins));
        }

        /**
         * @param allowedOrigins (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. &#39;*&#39; will match any origins, and &#39;null&#39; will match queries from &#39;file:&#39; origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }

        /**
         * @param exposedHeaders (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. &#39;*&#39; will expose all headers.
         * 
         * @return builder
         * 
         */
        public Builder exposedHeaders(@Nullable Output<List<String>> exposedHeaders) {
            $.exposedHeaders = exposedHeaders;
            return this;
        }

        /**
         * @param exposedHeaders (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. &#39;*&#39; will expose all headers.
         * 
         * @return builder
         * 
         */
        public Builder exposedHeaders(List<String> exposedHeaders) {
            return exposedHeaders(Output.of(exposedHeaders));
        }

        /**
         * @param exposedHeaders (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. &#39;*&#39; will expose all headers.
         * 
         * @return builder
         * 
         */
        public Builder exposedHeaders(String... exposedHeaders) {
            return exposedHeaders(List.of(exposedHeaders));
        }

        /**
         * @param isAllowCredentialsEnabled (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
         * 
         * @return builder
         * 
         */
        public Builder isAllowCredentialsEnabled(@Nullable Output<Boolean> isAllowCredentialsEnabled) {
            $.isAllowCredentialsEnabled = isAllowCredentialsEnabled;
            return this;
        }

        /**
         * @param isAllowCredentialsEnabled (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
         * 
         * @return builder
         * 
         */
        public Builder isAllowCredentialsEnabled(Boolean isAllowCredentialsEnabled) {
            return isAllowCredentialsEnabled(Output.of(isAllowCredentialsEnabled));
        }

        /**
         * @param maxAgeInSeconds (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
         * 
         * @return builder
         * 
         */
        public Builder maxAgeInSeconds(@Nullable Output<Integer> maxAgeInSeconds) {
            $.maxAgeInSeconds = maxAgeInSeconds;
            return this;
        }

        /**
         * @param maxAgeInSeconds (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
         * 
         * @return builder
         * 
         */
        public Builder maxAgeInSeconds(Integer maxAgeInSeconds) {
            return maxAgeInSeconds(Output.of(maxAgeInSeconds));
        }

        public DeploymentSpecificationRouteRequestPoliciesCorsArgs build() {
            $.allowedOrigins = Objects.requireNonNull($.allowedOrigins, "expected parameter 'allowedOrigins' to be non-null");
            return $;
        }
    }

}
