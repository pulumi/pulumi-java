// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.AutonomousContainerDatabaseMaintenanceWindowDetailsDaysOfWeek;
import com.pulumi.oci.Database.outputs.AutonomousContainerDatabaseMaintenanceWindowDetailsMonth;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AutonomousContainerDatabaseMaintenanceWindowDetails {
    /**
     * @return (Updatable) Determines the amount of time the system will wait before the start of each database server patching operation. Custom action timeout is in minutes and valid value is between 15 to 120 (inclusive).
     * 
     */
    private final @Nullable Integer customActionTimeoutInMins;
    /**
     * @return (Updatable) Days during the week when maintenance should be performed.
     * 
     */
    private final @Nullable List<AutonomousContainerDatabaseMaintenanceWindowDetailsDaysOfWeek> daysOfWeeks;
    /**
     * @return (Updatable) The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
     * * 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC
     * 
     */
    private final @Nullable List<Integer> hoursOfDays;
    /**
     * @return (Updatable) If true, enables the configuration of a custom action timeout (waiting period) between database server patching operations.
     * 
     */
    private final @Nullable Boolean isCustomActionTimeoutEnabled;
    /**
     * @return (Updatable) Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4.
     * 
     */
    private final @Nullable Integer leadTimeInWeeks;
    /**
     * @return (Updatable) Months during the year when maintenance should be performed.
     * 
     */
    private final @Nullable List<AutonomousContainerDatabaseMaintenanceWindowDetailsMonth> months;
    /**
     * @return (Updatable) Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
     * 
     */
    private final @Nullable String patchingMode;
    /**
     * @return (Updatable) The maintenance window scheduling preference.
     * 
     */
    private final String preference;
    /**
     * @return (Updatable) Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed.
     * 
     */
    private final @Nullable List<Integer> weeksOfMonths;

    @CustomType.Constructor
    private AutonomousContainerDatabaseMaintenanceWindowDetails(
        @CustomType.Parameter("customActionTimeoutInMins") @Nullable Integer customActionTimeoutInMins,
        @CustomType.Parameter("daysOfWeeks") @Nullable List<AutonomousContainerDatabaseMaintenanceWindowDetailsDaysOfWeek> daysOfWeeks,
        @CustomType.Parameter("hoursOfDays") @Nullable List<Integer> hoursOfDays,
        @CustomType.Parameter("isCustomActionTimeoutEnabled") @Nullable Boolean isCustomActionTimeoutEnabled,
        @CustomType.Parameter("leadTimeInWeeks") @Nullable Integer leadTimeInWeeks,
        @CustomType.Parameter("months") @Nullable List<AutonomousContainerDatabaseMaintenanceWindowDetailsMonth> months,
        @CustomType.Parameter("patchingMode") @Nullable String patchingMode,
        @CustomType.Parameter("preference") String preference,
        @CustomType.Parameter("weeksOfMonths") @Nullable List<Integer> weeksOfMonths) {
        this.customActionTimeoutInMins = customActionTimeoutInMins;
        this.daysOfWeeks = daysOfWeeks;
        this.hoursOfDays = hoursOfDays;
        this.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
        this.leadTimeInWeeks = leadTimeInWeeks;
        this.months = months;
        this.patchingMode = patchingMode;
        this.preference = preference;
        this.weeksOfMonths = weeksOfMonths;
    }

    /**
     * @return (Updatable) Determines the amount of time the system will wait before the start of each database server patching operation. Custom action timeout is in minutes and valid value is between 15 to 120 (inclusive).
     * 
     */
    public Optional<Integer> customActionTimeoutInMins() {
        return Optional.ofNullable(this.customActionTimeoutInMins);
    }
    /**
     * @return (Updatable) Days during the week when maintenance should be performed.
     * 
     */
    public List<AutonomousContainerDatabaseMaintenanceWindowDetailsDaysOfWeek> daysOfWeeks() {
        return this.daysOfWeeks == null ? List.of() : this.daysOfWeeks;
    }
    /**
     * @return (Updatable) The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
     * * 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC
     * 
     */
    public List<Integer> hoursOfDays() {
        return this.hoursOfDays == null ? List.of() : this.hoursOfDays;
    }
    /**
     * @return (Updatable) If true, enables the configuration of a custom action timeout (waiting period) between database server patching operations.
     * 
     */
    public Optional<Boolean> isCustomActionTimeoutEnabled() {
        return Optional.ofNullable(this.isCustomActionTimeoutEnabled);
    }
    /**
     * @return (Updatable) Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4.
     * 
     */
    public Optional<Integer> leadTimeInWeeks() {
        return Optional.ofNullable(this.leadTimeInWeeks);
    }
    /**
     * @return (Updatable) Months during the year when maintenance should be performed.
     * 
     */
    public List<AutonomousContainerDatabaseMaintenanceWindowDetailsMonth> months() {
        return this.months == null ? List.of() : this.months;
    }
    /**
     * @return (Updatable) Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
     * 
     */
    public Optional<String> patchingMode() {
        return Optional.ofNullable(this.patchingMode);
    }
    /**
     * @return (Updatable) The maintenance window scheduling preference.
     * 
     */
    public String preference() {
        return this.preference;
    }
    /**
     * @return (Updatable) Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed.
     * 
     */
    public List<Integer> weeksOfMonths() {
        return this.weeksOfMonths == null ? List.of() : this.weeksOfMonths;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutonomousContainerDatabaseMaintenanceWindowDetails defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer customActionTimeoutInMins;
        private @Nullable List<AutonomousContainerDatabaseMaintenanceWindowDetailsDaysOfWeek> daysOfWeeks;
        private @Nullable List<Integer> hoursOfDays;
        private @Nullable Boolean isCustomActionTimeoutEnabled;
        private @Nullable Integer leadTimeInWeeks;
        private @Nullable List<AutonomousContainerDatabaseMaintenanceWindowDetailsMonth> months;
        private @Nullable String patchingMode;
        private String preference;
        private @Nullable List<Integer> weeksOfMonths;

        public Builder() {
    	      // Empty
        }

        public Builder(AutonomousContainerDatabaseMaintenanceWindowDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customActionTimeoutInMins = defaults.customActionTimeoutInMins;
    	      this.daysOfWeeks = defaults.daysOfWeeks;
    	      this.hoursOfDays = defaults.hoursOfDays;
    	      this.isCustomActionTimeoutEnabled = defaults.isCustomActionTimeoutEnabled;
    	      this.leadTimeInWeeks = defaults.leadTimeInWeeks;
    	      this.months = defaults.months;
    	      this.patchingMode = defaults.patchingMode;
    	      this.preference = defaults.preference;
    	      this.weeksOfMonths = defaults.weeksOfMonths;
        }

        public Builder customActionTimeoutInMins(@Nullable Integer customActionTimeoutInMins) {
            this.customActionTimeoutInMins = customActionTimeoutInMins;
            return this;
        }
        public Builder daysOfWeeks(@Nullable List<AutonomousContainerDatabaseMaintenanceWindowDetailsDaysOfWeek> daysOfWeeks) {
            this.daysOfWeeks = daysOfWeeks;
            return this;
        }
        public Builder daysOfWeeks(AutonomousContainerDatabaseMaintenanceWindowDetailsDaysOfWeek... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }
        public Builder hoursOfDays(@Nullable List<Integer> hoursOfDays) {
            this.hoursOfDays = hoursOfDays;
            return this;
        }
        public Builder hoursOfDays(Integer... hoursOfDays) {
            return hoursOfDays(List.of(hoursOfDays));
        }
        public Builder isCustomActionTimeoutEnabled(@Nullable Boolean isCustomActionTimeoutEnabled) {
            this.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            return this;
        }
        public Builder leadTimeInWeeks(@Nullable Integer leadTimeInWeeks) {
            this.leadTimeInWeeks = leadTimeInWeeks;
            return this;
        }
        public Builder months(@Nullable List<AutonomousContainerDatabaseMaintenanceWindowDetailsMonth> months) {
            this.months = months;
            return this;
        }
        public Builder months(AutonomousContainerDatabaseMaintenanceWindowDetailsMonth... months) {
            return months(List.of(months));
        }
        public Builder patchingMode(@Nullable String patchingMode) {
            this.patchingMode = patchingMode;
            return this;
        }
        public Builder preference(String preference) {
            this.preference = Objects.requireNonNull(preference);
            return this;
        }
        public Builder weeksOfMonths(@Nullable List<Integer> weeksOfMonths) {
            this.weeksOfMonths = weeksOfMonths;
            return this;
        }
        public Builder weeksOfMonths(Integer... weeksOfMonths) {
            return weeksOfMonths(List.of(weeksOfMonths));
        }        public AutonomousContainerDatabaseMaintenanceWindowDetails build() {
            return new AutonomousContainerDatabaseMaintenanceWindowDetails(customActionTimeoutInMins, daysOfWeeks, hoursOfDays, isCustomActionTimeoutEnabled, leadTimeInWeeks, months, patchingMode, preference, weeksOfMonths);
        }
    }
}
