// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Nosql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Nosql.IndexArgs;
import com.pulumi.oci.Nosql.inputs.IndexState;
import com.pulumi.oci.Nosql.outputs.IndexKey;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * This resource provides the Index resource in Oracle Cloud Infrastructure NoSQL Database service.
 * 
 * Create a new index on the table identified by tableNameOrId.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Indexes can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:Nosql/index:Index test_index &#34;tables/{tableNameOrId}/indexes/{indexName}&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Nosql/index:Index")
public class Index extends com.pulumi.resources.CustomResource {
    /**
     * The OCID of the table&#39;s compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table&#39;s compartmentId.
     * 
     */
    @Export(name="compartmentId", type=String.class, parameters={})
    private Output<String> compartmentId;

    /**
     * @return The OCID of the table&#39;s compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table&#39;s compartmentId.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
     * 
     */
    @Export(name="isIfNotExists", type=Boolean.class, parameters={})
    private Output<Boolean> isIfNotExists;

    /**
     * @return If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
     * 
     */
    public Output<Boolean> isIfNotExists() {
        return this.isIfNotExists;
    }
    /**
     * A set of keys for a secondary index.
     * 
     */
    @Export(name="keys", type=List.class, parameters={IndexKey.class})
    private Output<List<IndexKey>> keys;

    /**
     * @return A set of keys for a secondary index.
     * 
     */
    public Output<List<IndexKey>> keys() {
        return this.keys;
    }
    /**
     * A message describing the current state in more detail.
     * 
     */
    @Export(name="lifecycleDetails", type=String.class, parameters={})
    private Output<String> lifecycleDetails;

    /**
     * @return A message describing the current state in more detail.
     * 
     */
    public Output<String> lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * Index name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Index name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The state of an index.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The state of an index.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * the OCID of the table to which this index belongs.
     * 
     */
    @Export(name="tableId", type=String.class, parameters={})
    private Output<String> tableId;

    /**
     * @return the OCID of the table to which this index belongs.
     * 
     */
    public Output<String> tableId() {
        return this.tableId;
    }
    /**
     * The name of the table to which this index belongs.
     * 
     */
    @Export(name="tableName", type=String.class, parameters={})
    private Output<String> tableName;

    /**
     * @return The name of the table to which this index belongs.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }
    /**
     * A table name within the compartment, or a table OCID.
     * 
     */
    @Export(name="tableNameOrId", type=String.class, parameters={})
    private Output<String> tableNameOrId;

    /**
     * @return A table name within the compartment, or a table OCID.
     * 
     */
    public Output<String> tableNameOrId() {
        return this.tableNameOrId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Index(String name) {
        this(name, IndexArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Index(String name, IndexArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Index(String name, IndexArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Nosql/index:Index", name, args == null ? IndexArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Index(String name, Output<String> id, @Nullable IndexState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Nosql/index:Index", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Index get(String name, Output<String> id, @Nullable IndexState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Index(name, id, state, options);
    }
}
