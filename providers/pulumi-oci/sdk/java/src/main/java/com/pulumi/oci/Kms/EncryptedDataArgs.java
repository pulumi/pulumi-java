// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EncryptedDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final EncryptedDataArgs Empty = new EncryptedDataArgs();

    /**
     * Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     * 
     */
    @Import(name="associatedData")
    private @Nullable Output<Map<String,Object>> associatedData;

    /**
     * @return Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     * 
     */
    public Optional<Output<Map<String,Object>>> associatedData() {
        return Optional.ofNullable(this.associatedData);
    }

    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    @Import(name="cryptoEndpoint", required=true)
    private Output<String> cryptoEndpoint;

    /**
     * @return The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    public Output<String> cryptoEndpoint() {
        return this.cryptoEndpoint;
    }

    /**
     * The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
     * 
     */
    @Import(name="encryptionAlgorithm")
    private @Nullable Output<String> encryptionAlgorithm;

    /**
     * @return The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
     * 
     */
    public Optional<Output<String>> encryptionAlgorithm() {
        return Optional.ofNullable(this.encryptionAlgorithm);
    }

    /**
     * The OCID of the key to encrypt with.
     * 
     */
    @Import(name="keyId", required=true)
    private Output<String> keyId;

    /**
     * @return The OCID of the key to encrypt with.
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }

    /**
     * The OCID of the key version used to encrypt the ciphertext.
     * 
     */
    @Import(name="keyVersionId")
    private @Nullable Output<String> keyVersionId;

    /**
     * @return The OCID of the key version used to encrypt the ciphertext.
     * 
     */
    public Optional<Output<String>> keyVersionId() {
        return Optional.ofNullable(this.keyVersionId);
    }

    /**
     * Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
     * 
     */
    @Import(name="loggingContext")
    private @Nullable Output<Map<String,Object>> loggingContext;

    /**
     * @return Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
     * 
     */
    public Optional<Output<Map<String,Object>>> loggingContext() {
        return Optional.ofNullable(this.loggingContext);
    }

    /**
     * The plaintext data to encrypt.
     * 
     */
    @Import(name="plaintext", required=true)
    private Output<String> plaintext;

    /**
     * @return The plaintext data to encrypt.
     * 
     */
    public Output<String> plaintext() {
        return this.plaintext;
    }

    private EncryptedDataArgs() {}

    private EncryptedDataArgs(EncryptedDataArgs $) {
        this.associatedData = $.associatedData;
        this.cryptoEndpoint = $.cryptoEndpoint;
        this.encryptionAlgorithm = $.encryptionAlgorithm;
        this.keyId = $.keyId;
        this.keyVersionId = $.keyVersionId;
        this.loggingContext = $.loggingContext;
        this.plaintext = $.plaintext;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncryptedDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncryptedDataArgs $;

        public Builder() {
            $ = new EncryptedDataArgs();
        }

        public Builder(EncryptedDataArgs defaults) {
            $ = new EncryptedDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedData Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
         * 
         * @return builder
         * 
         */
        public Builder associatedData(@Nullable Output<Map<String,Object>> associatedData) {
            $.associatedData = associatedData;
            return this;
        }

        /**
         * @param associatedData Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
         * 
         * @return builder
         * 
         */
        public Builder associatedData(Map<String,Object> associatedData) {
            return associatedData(Output.of(associatedData));
        }

        /**
         * @param cryptoEndpoint The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cryptoEndpoint(Output<String> cryptoEndpoint) {
            $.cryptoEndpoint = cryptoEndpoint;
            return this;
        }

        /**
         * @param cryptoEndpoint The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cryptoEndpoint(String cryptoEndpoint) {
            return cryptoEndpoint(Output.of(cryptoEndpoint));
        }

        /**
         * @param encryptionAlgorithm The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(@Nullable Output<String> encryptionAlgorithm) {
            $.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }

        /**
         * @param encryptionAlgorithm The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(String encryptionAlgorithm) {
            return encryptionAlgorithm(Output.of(encryptionAlgorithm));
        }

        /**
         * @param keyId The OCID of the key to encrypt with.
         * 
         * @return builder
         * 
         */
        public Builder keyId(Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The OCID of the key to encrypt with.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param keyVersionId The OCID of the key version used to encrypt the ciphertext.
         * 
         * @return builder
         * 
         */
        public Builder keyVersionId(@Nullable Output<String> keyVersionId) {
            $.keyVersionId = keyVersionId;
            return this;
        }

        /**
         * @param keyVersionId The OCID of the key version used to encrypt the ciphertext.
         * 
         * @return builder
         * 
         */
        public Builder keyVersionId(String keyVersionId) {
            return keyVersionId(Output.of(keyVersionId));
        }

        /**
         * @param loggingContext Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
         * 
         * @return builder
         * 
         */
        public Builder loggingContext(@Nullable Output<Map<String,Object>> loggingContext) {
            $.loggingContext = loggingContext;
            return this;
        }

        /**
         * @param loggingContext Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
         * 
         * @return builder
         * 
         */
        public Builder loggingContext(Map<String,Object> loggingContext) {
            return loggingContext(Output.of(loggingContext));
        }

        /**
         * @param plaintext The plaintext data to encrypt.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(Output<String> plaintext) {
            $.plaintext = plaintext;
            return this;
        }

        /**
         * @param plaintext The plaintext data to encrypt.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(String plaintext) {
            return plaintext(Output.of(plaintext));
        }

        public EncryptedDataArgs build() {
            $.cryptoEndpoint = Objects.requireNonNull($.cryptoEndpoint, "expected parameter 'cryptoEndpoint' to be non-null");
            $.keyId = Objects.requireNonNull($.keyId, "expected parameter 'keyId' to be non-null");
            $.plaintext = Objects.requireNonNull($.plaintext, "expected parameter 'plaintext' to be non-null");
            return $;
        }
    }

}
