// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExportExportOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExportExportOptionArgs Empty = new ExportExportOptionArgs();

    /**
     * (Updatable) Type of access to grant clients using the file system through this export. If unspecified defaults to `READ_ONLY`.
     * 
     */
    @Import(name="access")
    private @Nullable Output<String> access;

    /**
     * @return (Updatable) Type of access to grant clients using the file system through this export. If unspecified defaults to `READ_ONLY`.
     * 
     */
    public Optional<Output<String>> access() {
        return Optional.ofNullable(this.access);
    }

    /**
     * (Updatable) GID value to remap to when squashing a client GID (see identitySquash for more details.) If unspecified defaults to `65534`.
     * 
     */
    @Import(name="anonymousGid")
    private @Nullable Output<String> anonymousGid;

    /**
     * @return (Updatable) GID value to remap to when squashing a client GID (see identitySquash for more details.) If unspecified defaults to `65534`.
     * 
     */
    public Optional<Output<String>> anonymousGid() {
        return Optional.ofNullable(this.anonymousGid);
    }

    /**
     * (Updatable) UID value to remap to when squashing a client UID (see identitySquash for more details.) If unspecified, defaults to `65534`.
     * 
     */
    @Import(name="anonymousUid")
    private @Nullable Output<String> anonymousUid;

    /**
     * @return (Updatable) UID value to remap to when squashing a client UID (see identitySquash for more details.) If unspecified, defaults to `65534`.
     * 
     */
    public Optional<Output<String>> anonymousUid() {
        return Optional.ofNullable(this.anonymousUid);
    }

    /**
     * (Updatable) Used when clients accessing the file system through this export have their UID and GID remapped to &#39;anonymousUid&#39; and &#39;anonymousGid&#39;. If `ALL`, all users and groups are remapped; if `ROOT`, only the root user and group (UID/GID 0) are remapped; if `NONE`, no remapping is done. If unspecified, defaults to `ROOT`.
     * 
     */
    @Import(name="identitySquash")
    private @Nullable Output<String> identitySquash;

    /**
     * @return (Updatable) Used when clients accessing the file system through this export have their UID and GID remapped to &#39;anonymousUid&#39; and &#39;anonymousGid&#39;. If `ALL`, all users and groups are remapped; if `ROOT`, only the root user and group (UID/GID 0) are remapped; if `NONE`, no remapping is done. If unspecified, defaults to `ROOT`.
     * 
     */
    public Optional<Output<String>> identitySquash() {
        return Optional.ofNullable(this.identitySquash);
    }

    /**
     * (Updatable) If `true`, clients accessing the file system through this export must connect from a privileged source port. If unspecified, defaults to `true`.
     * 
     */
    @Import(name="requirePrivilegedSourcePort")
    private @Nullable Output<Boolean> requirePrivilegedSourcePort;

    /**
     * @return (Updatable) If `true`, clients accessing the file system through this export must connect from a privileged source port. If unspecified, defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> requirePrivilegedSourcePort() {
        return Optional.ofNullable(this.requirePrivilegedSourcePort);
    }

    /**
     * (Updatable) Clients these options should apply to. Must be a either single IPv4 address or single IPv4 CIDR block.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return (Updatable) Clients these options should apply to. Must be a either single IPv4 address or single IPv4 CIDR block.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    private ExportExportOptionArgs() {}

    private ExportExportOptionArgs(ExportExportOptionArgs $) {
        this.access = $.access;
        this.anonymousGid = $.anonymousGid;
        this.anonymousUid = $.anonymousUid;
        this.identitySquash = $.identitySquash;
        this.requirePrivilegedSourcePort = $.requirePrivilegedSourcePort;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExportExportOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExportExportOptionArgs $;

        public Builder() {
            $ = new ExportExportOptionArgs();
        }

        public Builder(ExportExportOptionArgs defaults) {
            $ = new ExportExportOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param access (Updatable) Type of access to grant clients using the file system through this export. If unspecified defaults to `READ_ONLY`.
         * 
         * @return builder
         * 
         */
        public Builder access(@Nullable Output<String> access) {
            $.access = access;
            return this;
        }

        /**
         * @param access (Updatable) Type of access to grant clients using the file system through this export. If unspecified defaults to `READ_ONLY`.
         * 
         * @return builder
         * 
         */
        public Builder access(String access) {
            return access(Output.of(access));
        }

        /**
         * @param anonymousGid (Updatable) GID value to remap to when squashing a client GID (see identitySquash for more details.) If unspecified defaults to `65534`.
         * 
         * @return builder
         * 
         */
        public Builder anonymousGid(@Nullable Output<String> anonymousGid) {
            $.anonymousGid = anonymousGid;
            return this;
        }

        /**
         * @param anonymousGid (Updatable) GID value to remap to when squashing a client GID (see identitySquash for more details.) If unspecified defaults to `65534`.
         * 
         * @return builder
         * 
         */
        public Builder anonymousGid(String anonymousGid) {
            return anonymousGid(Output.of(anonymousGid));
        }

        /**
         * @param anonymousUid (Updatable) UID value to remap to when squashing a client UID (see identitySquash for more details.) If unspecified, defaults to `65534`.
         * 
         * @return builder
         * 
         */
        public Builder anonymousUid(@Nullable Output<String> anonymousUid) {
            $.anonymousUid = anonymousUid;
            return this;
        }

        /**
         * @param anonymousUid (Updatable) UID value to remap to when squashing a client UID (see identitySquash for more details.) If unspecified, defaults to `65534`.
         * 
         * @return builder
         * 
         */
        public Builder anonymousUid(String anonymousUid) {
            return anonymousUid(Output.of(anonymousUid));
        }

        /**
         * @param identitySquash (Updatable) Used when clients accessing the file system through this export have their UID and GID remapped to &#39;anonymousUid&#39; and &#39;anonymousGid&#39;. If `ALL`, all users and groups are remapped; if `ROOT`, only the root user and group (UID/GID 0) are remapped; if `NONE`, no remapping is done. If unspecified, defaults to `ROOT`.
         * 
         * @return builder
         * 
         */
        public Builder identitySquash(@Nullable Output<String> identitySquash) {
            $.identitySquash = identitySquash;
            return this;
        }

        /**
         * @param identitySquash (Updatable) Used when clients accessing the file system through this export have their UID and GID remapped to &#39;anonymousUid&#39; and &#39;anonymousGid&#39;. If `ALL`, all users and groups are remapped; if `ROOT`, only the root user and group (UID/GID 0) are remapped; if `NONE`, no remapping is done. If unspecified, defaults to `ROOT`.
         * 
         * @return builder
         * 
         */
        public Builder identitySquash(String identitySquash) {
            return identitySquash(Output.of(identitySquash));
        }

        /**
         * @param requirePrivilegedSourcePort (Updatable) If `true`, clients accessing the file system through this export must connect from a privileged source port. If unspecified, defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder requirePrivilegedSourcePort(@Nullable Output<Boolean> requirePrivilegedSourcePort) {
            $.requirePrivilegedSourcePort = requirePrivilegedSourcePort;
            return this;
        }

        /**
         * @param requirePrivilegedSourcePort (Updatable) If `true`, clients accessing the file system through this export must connect from a privileged source port. If unspecified, defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder requirePrivilegedSourcePort(Boolean requirePrivilegedSourcePort) {
            return requirePrivilegedSourcePort(Output.of(requirePrivilegedSourcePort));
        }

        /**
         * @param source (Updatable) Clients these options should apply to. Must be a either single IPv4 address or single IPv4 CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source (Updatable) Clients these options should apply to. Must be a either single IPv4 address or single IPv4 CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public ExportExportOptionArgs build() {
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
