// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Artifacts.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Artifacts.outputs.GetContainerRepositoryReadme;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetContainerRepositoryResult {
    /**
     * @return Total storage size in GBs that will be charged.
     * 
     */
    private final String billableSizeInGbs;
    /**
     * @return The OCID of the compartment in which the container repository exists.
     * 
     */
    private final String compartmentId;
    /**
     * @return The id of the user or principal that created the resource.
     * 
     */
    private final String createdBy;
    /**
     * @return The container repository name.
     * 
     */
    private final String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
     * 
     */
    private final String id;
    /**
     * @return Total number of images.
     * 
     */
    private final Integer imageCount;
    /**
     * @return Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
     * 
     */
    private final Boolean isImmutable;
    /**
     * @return Whether the repository is public. A public repository allows unauthenticated access.
     * 
     */
    private final Boolean isPublic;
    /**
     * @return Total number of layers.
     * 
     */
    private final Integer layerCount;
    /**
     * @return Total storage in bytes consumed by layers.
     * 
     */
    private final String layersSizeInBytes;
    /**
     * @return Container repository readme.
     * 
     */
    private final List<GetContainerRepositoryReadme> readmes;
    private final String repositoryId;
    /**
     * @return The current state of the container repository.
     * 
     */
    private final String state;
    /**
     * @return An RFC 3339 timestamp indicating when the repository was created.
     * 
     */
    private final String timeCreated;
    /**
     * @return An RFC 3339 timestamp indicating when an image was last pushed to the repository.
     * 
     */
    private final String timeLastPushed;

    @CustomType.Constructor
    private GetContainerRepositoryResult(
        @CustomType.Parameter("billableSizeInGbs") String billableSizeInGbs,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("createdBy") String createdBy,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("imageCount") Integer imageCount,
        @CustomType.Parameter("isImmutable") Boolean isImmutable,
        @CustomType.Parameter("isPublic") Boolean isPublic,
        @CustomType.Parameter("layerCount") Integer layerCount,
        @CustomType.Parameter("layersSizeInBytes") String layersSizeInBytes,
        @CustomType.Parameter("readmes") List<GetContainerRepositoryReadme> readmes,
        @CustomType.Parameter("repositoryId") String repositoryId,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeLastPushed") String timeLastPushed) {
        this.billableSizeInGbs = billableSizeInGbs;
        this.compartmentId = compartmentId;
        this.createdBy = createdBy;
        this.displayName = displayName;
        this.id = id;
        this.imageCount = imageCount;
        this.isImmutable = isImmutable;
        this.isPublic = isPublic;
        this.layerCount = layerCount;
        this.layersSizeInBytes = layersSizeInBytes;
        this.readmes = readmes;
        this.repositoryId = repositoryId;
        this.state = state;
        this.timeCreated = timeCreated;
        this.timeLastPushed = timeLastPushed;
    }

    /**
     * @return Total storage size in GBs that will be charged.
     * 
     */
    public String billableSizeInGbs() {
        return this.billableSizeInGbs;
    }
    /**
     * @return The OCID of the compartment in which the container repository exists.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The id of the user or principal that created the resource.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return The container repository name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Total number of images.
     * 
     */
    public Integer imageCount() {
        return this.imageCount;
    }
    /**
     * @return Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
     * 
     */
    public Boolean isImmutable() {
        return this.isImmutable;
    }
    /**
     * @return Whether the repository is public. A public repository allows unauthenticated access.
     * 
     */
    public Boolean isPublic() {
        return this.isPublic;
    }
    /**
     * @return Total number of layers.
     * 
     */
    public Integer layerCount() {
        return this.layerCount;
    }
    /**
     * @return Total storage in bytes consumed by layers.
     * 
     */
    public String layersSizeInBytes() {
        return this.layersSizeInBytes;
    }
    /**
     * @return Container repository readme.
     * 
     */
    public List<GetContainerRepositoryReadme> readmes() {
        return this.readmes;
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return The current state of the container repository.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return An RFC 3339 timestamp indicating when the repository was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An RFC 3339 timestamp indicating when an image was last pushed to the repository.
     * 
     */
    public String timeLastPushed() {
        return this.timeLastPushed;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerRepositoryResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String billableSizeInGbs;
        private String compartmentId;
        private String createdBy;
        private String displayName;
        private String id;
        private Integer imageCount;
        private Boolean isImmutable;
        private Boolean isPublic;
        private Integer layerCount;
        private String layersSizeInBytes;
        private List<GetContainerRepositoryReadme> readmes;
        private String repositoryId;
        private String state;
        private String timeCreated;
        private String timeLastPushed;

        public Builder() {
    	      // Empty
        }

        public Builder(GetContainerRepositoryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billableSizeInGbs = defaults.billableSizeInGbs;
    	      this.compartmentId = defaults.compartmentId;
    	      this.createdBy = defaults.createdBy;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.imageCount = defaults.imageCount;
    	      this.isImmutable = defaults.isImmutable;
    	      this.isPublic = defaults.isPublic;
    	      this.layerCount = defaults.layerCount;
    	      this.layersSizeInBytes = defaults.layersSizeInBytes;
    	      this.readmes = defaults.readmes;
    	      this.repositoryId = defaults.repositoryId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastPushed = defaults.timeLastPushed;
        }

        public Builder billableSizeInGbs(String billableSizeInGbs) {
            this.billableSizeInGbs = Objects.requireNonNull(billableSizeInGbs);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder createdBy(String createdBy) {
            this.createdBy = Objects.requireNonNull(createdBy);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imageCount(Integer imageCount) {
            this.imageCount = Objects.requireNonNull(imageCount);
            return this;
        }
        public Builder isImmutable(Boolean isImmutable) {
            this.isImmutable = Objects.requireNonNull(isImmutable);
            return this;
        }
        public Builder isPublic(Boolean isPublic) {
            this.isPublic = Objects.requireNonNull(isPublic);
            return this;
        }
        public Builder layerCount(Integer layerCount) {
            this.layerCount = Objects.requireNonNull(layerCount);
            return this;
        }
        public Builder layersSizeInBytes(String layersSizeInBytes) {
            this.layersSizeInBytes = Objects.requireNonNull(layersSizeInBytes);
            return this;
        }
        public Builder readmes(List<GetContainerRepositoryReadme> readmes) {
            this.readmes = Objects.requireNonNull(readmes);
            return this;
        }
        public Builder readmes(GetContainerRepositoryReadme... readmes) {
            return readmes(List.of(readmes));
        }
        public Builder repositoryId(String repositoryId) {
            this.repositoryId = Objects.requireNonNull(repositoryId);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeLastPushed(String timeLastPushed) {
            this.timeLastPushed = Objects.requireNonNull(timeLastPushed);
            return this;
        }        public GetContainerRepositoryResult build() {
            return new GetContainerRepositoryResult(billableSizeInGbs, compartmentId, createdBy, displayName, id, imageCount, isImmutable, isPublic, layerCount, layersSizeInBytes, readmes, repositoryId, state, timeCreated, timeLastPushed);
        }
    }
}
