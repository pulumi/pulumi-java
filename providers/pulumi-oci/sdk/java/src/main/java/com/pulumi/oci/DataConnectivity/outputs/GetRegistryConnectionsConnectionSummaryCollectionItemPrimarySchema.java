// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadata;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRef;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchema {
    /**
     * @return The default connection key.
     * 
     */
    private final String defaultConnection;
    /**
     * @return The description of the aggregator.
     * 
     */
    private final String description;
    /**
     * @return The external key for the object.
     * 
     */
    private final String externalKey;
    /**
     * @return The identifier of the aggregator.
     * 
     */
    private final String identifier;
    /**
     * @return Specifies whether the schema has containers.
     * 
     */
    private final Boolean isHasContainers;
    /**
     * @return The identifying key for the object.
     * 
     */
    private final String key;
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    private final GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadata metadata;
    /**
     * @return The object&#39;s type.
     * 
     */
    private final String modelType;
    /**
     * @return The object&#39;s model version.
     * 
     */
    private final String modelVersion;
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    private final String name;
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private final Integer objectStatus;
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    private final Integer objectVersion;
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    private final GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRef parentRef;
    /**
     * @return A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
     * 
     */
    private final String resourceName;

    @CustomType.Constructor
    private GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchema(
        @CustomType.Parameter("defaultConnection") String defaultConnection,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("externalKey") String externalKey,
        @CustomType.Parameter("identifier") String identifier,
        @CustomType.Parameter("isHasContainers") Boolean isHasContainers,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("metadata") GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadata metadata,
        @CustomType.Parameter("modelType") String modelType,
        @CustomType.Parameter("modelVersion") String modelVersion,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("objectStatus") Integer objectStatus,
        @CustomType.Parameter("objectVersion") Integer objectVersion,
        @CustomType.Parameter("parentRef") GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRef parentRef,
        @CustomType.Parameter("resourceName") String resourceName) {
        this.defaultConnection = defaultConnection;
        this.description = description;
        this.externalKey = externalKey;
        this.identifier = identifier;
        this.isHasContainers = isHasContainers;
        this.key = key;
        this.metadata = metadata;
        this.modelType = modelType;
        this.modelVersion = modelVersion;
        this.name = name;
        this.objectStatus = objectStatus;
        this.objectVersion = objectVersion;
        this.parentRef = parentRef;
        this.resourceName = resourceName;
    }

    /**
     * @return The default connection key.
     * 
     */
    public String defaultConnection() {
        return this.defaultConnection;
    }
    /**
     * @return The description of the aggregator.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The external key for the object.
     * 
     */
    public String externalKey() {
        return this.externalKey;
    }
    /**
     * @return The identifier of the aggregator.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Specifies whether the schema has containers.
     * 
     */
    public Boolean isHasContainers() {
        return this.isHasContainers;
    }
    /**
     * @return The identifying key for the object.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    public GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadata metadata() {
        return this.metadata;
    }
    /**
     * @return The object&#39;s type.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The object&#39;s model version.
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Integer objectStatus() {
        return this.objectStatus;
    }
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    public Integer objectVersion() {
        return this.objectVersion;
    }
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    public GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRef parentRef() {
        return this.parentRef;
    }
    /**
     * @return A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchema defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String defaultConnection;
        private String description;
        private String externalKey;
        private String identifier;
        private Boolean isHasContainers;
        private String key;
        private GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadata metadata;
        private String modelType;
        private String modelVersion;
        private String name;
        private Integer objectStatus;
        private Integer objectVersion;
        private GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRef parentRef;
        private String resourceName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchema defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultConnection = defaults.defaultConnection;
    	      this.description = defaults.description;
    	      this.externalKey = defaults.externalKey;
    	      this.identifier = defaults.identifier;
    	      this.isHasContainers = defaults.isHasContainers;
    	      this.key = defaults.key;
    	      this.metadata = defaults.metadata;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.parentRef = defaults.parentRef;
    	      this.resourceName = defaults.resourceName;
        }

        public Builder defaultConnection(String defaultConnection) {
            this.defaultConnection = Objects.requireNonNull(defaultConnection);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder externalKey(String externalKey) {
            this.externalKey = Objects.requireNonNull(externalKey);
            return this;
        }
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        public Builder isHasContainers(Boolean isHasContainers) {
            this.isHasContainers = Objects.requireNonNull(isHasContainers);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder metadata(GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadata metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        public Builder modelType(String modelType) {
            this.modelType = Objects.requireNonNull(modelType);
            return this;
        }
        public Builder modelVersion(String modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder objectStatus(Integer objectStatus) {
            this.objectStatus = Objects.requireNonNull(objectStatus);
            return this;
        }
        public Builder objectVersion(Integer objectVersion) {
            this.objectVersion = Objects.requireNonNull(objectVersion);
            return this;
        }
        public Builder parentRef(GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRef parentRef) {
            this.parentRef = Objects.requireNonNull(parentRef);
            return this;
        }
        public Builder resourceName(String resourceName) {
            this.resourceName = Objects.requireNonNull(resourceName);
            return this;
        }        public GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchema build() {
            return new GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchema(defaultConnection, description, externalKey, identifier, isHasContainers, key, metadata, modelType, modelVersion, name, objectStatus, objectVersion, parentRef, resourceName);
        }
    }
}
