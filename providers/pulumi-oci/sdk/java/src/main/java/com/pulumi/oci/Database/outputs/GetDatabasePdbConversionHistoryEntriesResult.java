// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetDatabasePdbConversionHistoryEntriesFilter;
import com.pulumi.oci.Database.outputs.GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabasePdbConversionHistoryEntriesResult {
    private final String databaseId;
    private final @Nullable List<GetDatabasePdbConversionHistoryEntriesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final @Nullable String pdbConversionAction;
    /**
     * @return The list of pdb_conversion_history_entries.
     * 
     */
    private final List<GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry> pdbConversionHistoryEntries;
    /**
     * @return Status of an operation performed during the conversion of a non-container database to a pluggable database.
     * 
     */
    private final @Nullable String state;

    @CustomType.Constructor
    private GetDatabasePdbConversionHistoryEntriesResult(
        @CustomType.Parameter("databaseId") String databaseId,
        @CustomType.Parameter("filters") @Nullable List<GetDatabasePdbConversionHistoryEntriesFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("pdbConversionAction") @Nullable String pdbConversionAction,
        @CustomType.Parameter("pdbConversionHistoryEntries") List<GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry> pdbConversionHistoryEntries,
        @CustomType.Parameter("state") @Nullable String state) {
        this.databaseId = databaseId;
        this.filters = filters;
        this.id = id;
        this.pdbConversionAction = pdbConversionAction;
        this.pdbConversionHistoryEntries = pdbConversionHistoryEntries;
        this.state = state;
    }

    public String databaseId() {
        return this.databaseId;
    }
    public List<GetDatabasePdbConversionHistoryEntriesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> pdbConversionAction() {
        return Optional.ofNullable(this.pdbConversionAction);
    }
    /**
     * @return The list of pdb_conversion_history_entries.
     * 
     */
    public List<GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry> pdbConversionHistoryEntries() {
        return this.pdbConversionHistoryEntries;
    }
    /**
     * @return Status of an operation performed during the conversion of a non-container database to a pluggable database.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasePdbConversionHistoryEntriesResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String databaseId;
        private @Nullable List<GetDatabasePdbConversionHistoryEntriesFilter> filters;
        private String id;
        private @Nullable String pdbConversionAction;
        private List<GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry> pdbConversionHistoryEntries;
        private @Nullable String state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabasePdbConversionHistoryEntriesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseId = defaults.databaseId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.pdbConversionAction = defaults.pdbConversionAction;
    	      this.pdbConversionHistoryEntries = defaults.pdbConversionHistoryEntries;
    	      this.state = defaults.state;
        }

        public Builder databaseId(String databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        public Builder filters(@Nullable List<GetDatabasePdbConversionHistoryEntriesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetDatabasePdbConversionHistoryEntriesFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder pdbConversionAction(@Nullable String pdbConversionAction) {
            this.pdbConversionAction = pdbConversionAction;
            return this;
        }
        public Builder pdbConversionHistoryEntries(List<GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry> pdbConversionHistoryEntries) {
            this.pdbConversionHistoryEntries = Objects.requireNonNull(pdbConversionHistoryEntries);
            return this;
        }
        public Builder pdbConversionHistoryEntries(GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry... pdbConversionHistoryEntries) {
            return pdbConversionHistoryEntries(List.of(pdbConversionHistoryEntries));
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }        public GetDatabasePdbConversionHistoryEntriesResult build() {
            return new GetDatabasePdbConversionHistoryEntriesResult(databaseId, filters, id, pdbConversionAction, pdbConversionHistoryEntries, state);
        }
    }
}
