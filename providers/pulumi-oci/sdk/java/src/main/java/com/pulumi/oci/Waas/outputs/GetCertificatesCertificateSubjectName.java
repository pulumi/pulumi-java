// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCertificatesCertificateSubjectName {
    /**
     * @return The fully qualified domain name used for DNS lookups of the server.
     * 
     */
    private final String commonName;
    /**
     * @return ISO 3166-1 alpha-2 code of the country where the organization is located. For a list of codes, see [ISO&#39;s website](https://www.iso.org/obp/ui/#search/code/).
     * 
     */
    private final String country;
    /**
     * @return The email address of the server&#39;s administrator.
     * 
     */
    private final String emailAddress;
    /**
     * @return The city in which the organization is located.
     * 
     */
    private final String locality;
    /**
     * @return The organization name.
     * 
     */
    private final String organization;
    /**
     * @return The field to differentiate between divisions within an organization.
     * 
     */
    private final String organizationalUnit;
    /**
     * @return The province where the organization is located.
     * 
     */
    private final String stateProvince;

    @CustomType.Constructor
    private GetCertificatesCertificateSubjectName(
        @CustomType.Parameter("commonName") String commonName,
        @CustomType.Parameter("country") String country,
        @CustomType.Parameter("emailAddress") String emailAddress,
        @CustomType.Parameter("locality") String locality,
        @CustomType.Parameter("organization") String organization,
        @CustomType.Parameter("organizationalUnit") String organizationalUnit,
        @CustomType.Parameter("stateProvince") String stateProvince) {
        this.commonName = commonName;
        this.country = country;
        this.emailAddress = emailAddress;
        this.locality = locality;
        this.organization = organization;
        this.organizationalUnit = organizationalUnit;
        this.stateProvince = stateProvince;
    }

    /**
     * @return The fully qualified domain name used for DNS lookups of the server.
     * 
     */
    public String commonName() {
        return this.commonName;
    }
    /**
     * @return ISO 3166-1 alpha-2 code of the country where the organization is located. For a list of codes, see [ISO&#39;s website](https://www.iso.org/obp/ui/#search/code/).
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return The email address of the server&#39;s administrator.
     * 
     */
    public String emailAddress() {
        return this.emailAddress;
    }
    /**
     * @return The city in which the organization is located.
     * 
     */
    public String locality() {
        return this.locality;
    }
    /**
     * @return The organization name.
     * 
     */
    public String organization() {
        return this.organization;
    }
    /**
     * @return The field to differentiate between divisions within an organization.
     * 
     */
    public String organizationalUnit() {
        return this.organizationalUnit;
    }
    /**
     * @return The province where the organization is located.
     * 
     */
    public String stateProvince() {
        return this.stateProvince;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificatesCertificateSubjectName defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String commonName;
        private String country;
        private String emailAddress;
        private String locality;
        private String organization;
        private String organizationalUnit;
        private String stateProvince;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCertificatesCertificateSubjectName defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commonName = defaults.commonName;
    	      this.country = defaults.country;
    	      this.emailAddress = defaults.emailAddress;
    	      this.locality = defaults.locality;
    	      this.organization = defaults.organization;
    	      this.organizationalUnit = defaults.organizationalUnit;
    	      this.stateProvince = defaults.stateProvince;
        }

        public Builder commonName(String commonName) {
            this.commonName = Objects.requireNonNull(commonName);
            return this;
        }
        public Builder country(String country) {
            this.country = Objects.requireNonNull(country);
            return this;
        }
        public Builder emailAddress(String emailAddress) {
            this.emailAddress = Objects.requireNonNull(emailAddress);
            return this;
        }
        public Builder locality(String locality) {
            this.locality = Objects.requireNonNull(locality);
            return this;
        }
        public Builder organization(String organization) {
            this.organization = Objects.requireNonNull(organization);
            return this;
        }
        public Builder organizationalUnit(String organizationalUnit) {
            this.organizationalUnit = Objects.requireNonNull(organizationalUnit);
            return this;
        }
        public Builder stateProvince(String stateProvince) {
            this.stateProvince = Objects.requireNonNull(stateProvince);
            return this;
        }        public GetCertificatesCertificateSubjectName build() {
            return new GetCertificatesCertificateSubjectName(commonName, country, emailAddress, locality, organization, organizationalUnit, stateProvince);
        }
    }
}
