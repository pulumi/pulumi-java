// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetAuditProfilesAuditProfileCollection;
import com.pulumi.oci.DataSafe.outputs.GetAuditProfilesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuditProfilesResult {
    private final @Nullable String accessLevel;
    private final @Nullable String auditCollectedVolumeGreaterThanOrEqualTo;
    /**
     * @return The list of audit_profile_collection.
     * 
     */
    private final List<GetAuditProfilesAuditProfileCollection> auditProfileCollections;
    /**
     * @return The OCID of the  parent audit.
     * 
     */
    private final @Nullable String auditProfileId;
    /**
     * @return The OCID of the compartment that contains the audit.
     * 
     */
    private final String compartmentId;
    private final @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The display name of the audit profile.
     * 
     */
    private final @Nullable String displayName;
    private final @Nullable List<GetAuditProfilesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Indicates whether audit retention settings like online and offline months is set at the target level overriding the global audit retention settings.
     * 
     */
    private final @Nullable Boolean isOverrideGlobalRetentionSetting;
    /**
     * @return Indicates if you want to continue collecting audit records beyond the free limit of one million audit records per month per target database, potentially incurring additional charges. The default value is inherited from the global settings.  You can change at the global level or at the target level.
     * 
     */
    private final @Nullable Boolean isPaidUsageEnabled;
    /**
     * @return The current state of the audit profile.
     * 
     */
    private final @Nullable String state;
    /**
     * @return The OCID of the Data Safe target for which the audit profile is created.
     * 
     */
    private final @Nullable String targetId;

    @CustomType.Constructor
    private GetAuditProfilesResult(
        @CustomType.Parameter("accessLevel") @Nullable String accessLevel,
        @CustomType.Parameter("auditCollectedVolumeGreaterThanOrEqualTo") @Nullable String auditCollectedVolumeGreaterThanOrEqualTo,
        @CustomType.Parameter("auditProfileCollections") List<GetAuditProfilesAuditProfileCollection> auditProfileCollections,
        @CustomType.Parameter("auditProfileId") @Nullable String auditProfileId,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("compartmentIdInSubtree") @Nullable Boolean compartmentIdInSubtree,
        @CustomType.Parameter("displayName") @Nullable String displayName,
        @CustomType.Parameter("filters") @Nullable List<GetAuditProfilesFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isOverrideGlobalRetentionSetting") @Nullable Boolean isOverrideGlobalRetentionSetting,
        @CustomType.Parameter("isPaidUsageEnabled") @Nullable Boolean isPaidUsageEnabled,
        @CustomType.Parameter("state") @Nullable String state,
        @CustomType.Parameter("targetId") @Nullable String targetId) {
        this.accessLevel = accessLevel;
        this.auditCollectedVolumeGreaterThanOrEqualTo = auditCollectedVolumeGreaterThanOrEqualTo;
        this.auditProfileCollections = auditProfileCollections;
        this.auditProfileId = auditProfileId;
        this.compartmentId = compartmentId;
        this.compartmentIdInSubtree = compartmentIdInSubtree;
        this.displayName = displayName;
        this.filters = filters;
        this.id = id;
        this.isOverrideGlobalRetentionSetting = isOverrideGlobalRetentionSetting;
        this.isPaidUsageEnabled = isPaidUsageEnabled;
        this.state = state;
        this.targetId = targetId;
    }

    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    public Optional<String> auditCollectedVolumeGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.auditCollectedVolumeGreaterThanOrEqualTo);
    }
    /**
     * @return The list of audit_profile_collection.
     * 
     */
    public List<GetAuditProfilesAuditProfileCollection> auditProfileCollections() {
        return this.auditProfileCollections;
    }
    /**
     * @return The OCID of the  parent audit.
     * 
     */
    public Optional<String> auditProfileId() {
        return Optional.ofNullable(this.auditProfileId);
    }
    /**
     * @return The OCID of the compartment that contains the audit.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The display name of the audit profile.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetAuditProfilesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether audit retention settings like online and offline months is set at the target level overriding the global audit retention settings.
     * 
     */
    public Optional<Boolean> isOverrideGlobalRetentionSetting() {
        return Optional.ofNullable(this.isOverrideGlobalRetentionSetting);
    }
    /**
     * @return Indicates if you want to continue collecting audit records beyond the free limit of one million audit records per month per target database, potentially incurring additional charges. The default value is inherited from the global settings.  You can change at the global level or at the target level.
     * 
     */
    public Optional<Boolean> isPaidUsageEnabled() {
        return Optional.ofNullable(this.isPaidUsageEnabled);
    }
    /**
     * @return The current state of the audit profile.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The OCID of the Data Safe target for which the audit profile is created.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuditProfilesResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accessLevel;
        private @Nullable String auditCollectedVolumeGreaterThanOrEqualTo;
        private List<GetAuditProfilesAuditProfileCollection> auditProfileCollections;
        private @Nullable String auditProfileId;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String displayName;
        private @Nullable List<GetAuditProfilesFilter> filters;
        private String id;
        private @Nullable Boolean isOverrideGlobalRetentionSetting;
        private @Nullable Boolean isPaidUsageEnabled;
        private @Nullable String state;
        private @Nullable String targetId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAuditProfilesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.auditCollectedVolumeGreaterThanOrEqualTo = defaults.auditCollectedVolumeGreaterThanOrEqualTo;
    	      this.auditProfileCollections = defaults.auditProfileCollections;
    	      this.auditProfileId = defaults.auditProfileId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isOverrideGlobalRetentionSetting = defaults.isOverrideGlobalRetentionSetting;
    	      this.isPaidUsageEnabled = defaults.isPaidUsageEnabled;
    	      this.state = defaults.state;
    	      this.targetId = defaults.targetId;
        }

        public Builder accessLevel(@Nullable String accessLevel) {
            this.accessLevel = accessLevel;
            return this;
        }
        public Builder auditCollectedVolumeGreaterThanOrEqualTo(@Nullable String auditCollectedVolumeGreaterThanOrEqualTo) {
            this.auditCollectedVolumeGreaterThanOrEqualTo = auditCollectedVolumeGreaterThanOrEqualTo;
            return this;
        }
        public Builder auditProfileCollections(List<GetAuditProfilesAuditProfileCollection> auditProfileCollections) {
            this.auditProfileCollections = Objects.requireNonNull(auditProfileCollections);
            return this;
        }
        public Builder auditProfileCollections(GetAuditProfilesAuditProfileCollection... auditProfileCollections) {
            return auditProfileCollections(List.of(auditProfileCollections));
        }
        public Builder auditProfileId(@Nullable String auditProfileId) {
            this.auditProfileId = auditProfileId;
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder filters(@Nullable List<GetAuditProfilesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetAuditProfilesFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isOverrideGlobalRetentionSetting(@Nullable Boolean isOverrideGlobalRetentionSetting) {
            this.isOverrideGlobalRetentionSetting = isOverrideGlobalRetentionSetting;
            return this;
        }
        public Builder isPaidUsageEnabled(@Nullable Boolean isPaidUsageEnabled) {
            this.isPaidUsageEnabled = isPaidUsageEnabled;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public Builder targetId(@Nullable String targetId) {
            this.targetId = targetId;
            return this;
        }        public GetAuditProfilesResult build() {
            return new GetAuditProfilesResult(accessLevel, auditCollectedVolumeGreaterThanOrEqualTo, auditProfileCollections, auditProfileId, compartmentId, compartmentIdInSubtree, displayName, filters, id, isOverrideGlobalRetentionSetting, isPaidUsageEnabled, state, targetId);
        }
    }
}
