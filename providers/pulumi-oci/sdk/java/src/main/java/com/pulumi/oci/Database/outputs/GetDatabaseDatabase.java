// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetDatabaseDatabaseDbBackupConfig;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseDatabase {
    private final String adminPassword;
    private final String backupId;
    private final String backupTdePassword;
    /**
     * @return The character set for the database.
     * 
     */
    private final String characterSet;
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    private final String databaseSoftwareImageId;
    /**
     * @return Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    private final List<GetDatabaseDatabaseDbBackupConfig> dbBackupConfigs;
    /**
     * @return The database name.
     * 
     */
    private final String dbName;
    /**
     * @return A system-generated name for the database to ensure uniqueness within an Oracle Data Guard group (a primary database and its standby databases). The unique name cannot be changed.
     * 
     */
    private final String dbUniqueName;
    /**
     * @return The database workload type.
     * 
     */
    private final String dbWorkload;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private final String kmsKeyId;
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    private final String kmsKeyVersionId;
    /**
     * @return The national character set for the database.
     * 
     */
    private final String ncharacterSet;
    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    private final String pdbName;
    /**
     * @return Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    private final String sidPrefix;
    private final String tdeWalletPassword;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    private final String vaultId;

    @CustomType.Constructor
    private GetDatabaseDatabase(
        @CustomType.Parameter("adminPassword") String adminPassword,
        @CustomType.Parameter("backupId") String backupId,
        @CustomType.Parameter("backupTdePassword") String backupTdePassword,
        @CustomType.Parameter("characterSet") String characterSet,
        @CustomType.Parameter("databaseSoftwareImageId") String databaseSoftwareImageId,
        @CustomType.Parameter("dbBackupConfigs") List<GetDatabaseDatabaseDbBackupConfig> dbBackupConfigs,
        @CustomType.Parameter("dbName") String dbName,
        @CustomType.Parameter("dbUniqueName") String dbUniqueName,
        @CustomType.Parameter("dbWorkload") String dbWorkload,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("kmsKeyId") String kmsKeyId,
        @CustomType.Parameter("kmsKeyVersionId") String kmsKeyVersionId,
        @CustomType.Parameter("ncharacterSet") String ncharacterSet,
        @CustomType.Parameter("pdbName") String pdbName,
        @CustomType.Parameter("sidPrefix") String sidPrefix,
        @CustomType.Parameter("tdeWalletPassword") String tdeWalletPassword,
        @CustomType.Parameter("vaultId") String vaultId) {
        this.adminPassword = adminPassword;
        this.backupId = backupId;
        this.backupTdePassword = backupTdePassword;
        this.characterSet = characterSet;
        this.databaseSoftwareImageId = databaseSoftwareImageId;
        this.dbBackupConfigs = dbBackupConfigs;
        this.dbName = dbName;
        this.dbUniqueName = dbUniqueName;
        this.dbWorkload = dbWorkload;
        this.definedTags = definedTags;
        this.freeformTags = freeformTags;
        this.kmsKeyId = kmsKeyId;
        this.kmsKeyVersionId = kmsKeyVersionId;
        this.ncharacterSet = ncharacterSet;
        this.pdbName = pdbName;
        this.sidPrefix = sidPrefix;
        this.tdeWalletPassword = tdeWalletPassword;
        this.vaultId = vaultId;
    }

    public String adminPassword() {
        return this.adminPassword;
    }
    public String backupId() {
        return this.backupId;
    }
    public String backupTdePassword() {
        return this.backupTdePassword;
    }
    /**
     * @return The character set for the database.
     * 
     */
    public String characterSet() {
        return this.characterSet;
    }
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public String databaseSoftwareImageId() {
        return this.databaseSoftwareImageId;
    }
    /**
     * @return Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    public List<GetDatabaseDatabaseDbBackupConfig> dbBackupConfigs() {
        return this.dbBackupConfigs;
    }
    /**
     * @return The database name.
     * 
     */
    public String dbName() {
        return this.dbName;
    }
    /**
     * @return A system-generated name for the database to ensure uniqueness within an Oracle Data Guard group (a primary database and its standby databases). The unique name cannot be changed.
     * 
     */
    public String dbUniqueName() {
        return this.dbUniqueName;
    }
    /**
     * @return The database workload type.
     * 
     */
    public String dbWorkload() {
        return this.dbWorkload;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    public String kmsKeyVersionId() {
        return this.kmsKeyVersionId;
    }
    /**
     * @return The national character set for the database.
     * 
     */
    public String ncharacterSet() {
        return this.ncharacterSet;
    }
    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    public String pdbName() {
        return this.pdbName;
    }
    /**
     * @return Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    public String sidPrefix() {
        return this.sidPrefix;
    }
    public String tdeWalletPassword() {
        return this.tdeWalletPassword;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseDatabase defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String adminPassword;
        private String backupId;
        private String backupTdePassword;
        private String characterSet;
        private String databaseSoftwareImageId;
        private List<GetDatabaseDatabaseDbBackupConfig> dbBackupConfigs;
        private String dbName;
        private String dbUniqueName;
        private String dbWorkload;
        private Map<String,Object> definedTags;
        private Map<String,Object> freeformTags;
        private String kmsKeyId;
        private String kmsKeyVersionId;
        private String ncharacterSet;
        private String pdbName;
        private String sidPrefix;
        private String tdeWalletPassword;
        private String vaultId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.backupId = defaults.backupId;
    	      this.backupTdePassword = defaults.backupTdePassword;
    	      this.characterSet = defaults.characterSet;
    	      this.databaseSoftwareImageId = defaults.databaseSoftwareImageId;
    	      this.dbBackupConfigs = defaults.dbBackupConfigs;
    	      this.dbName = defaults.dbName;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.dbWorkload = defaults.dbWorkload;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.pdbName = defaults.pdbName;
    	      this.sidPrefix = defaults.sidPrefix;
    	      this.tdeWalletPassword = defaults.tdeWalletPassword;
    	      this.vaultId = defaults.vaultId;
        }

        public Builder adminPassword(String adminPassword) {
            this.adminPassword = Objects.requireNonNull(adminPassword);
            return this;
        }
        public Builder backupId(String backupId) {
            this.backupId = Objects.requireNonNull(backupId);
            return this;
        }
        public Builder backupTdePassword(String backupTdePassword) {
            this.backupTdePassword = Objects.requireNonNull(backupTdePassword);
            return this;
        }
        public Builder characterSet(String characterSet) {
            this.characterSet = Objects.requireNonNull(characterSet);
            return this;
        }
        public Builder databaseSoftwareImageId(String databaseSoftwareImageId) {
            this.databaseSoftwareImageId = Objects.requireNonNull(databaseSoftwareImageId);
            return this;
        }
        public Builder dbBackupConfigs(List<GetDatabaseDatabaseDbBackupConfig> dbBackupConfigs) {
            this.dbBackupConfigs = Objects.requireNonNull(dbBackupConfigs);
            return this;
        }
        public Builder dbBackupConfigs(GetDatabaseDatabaseDbBackupConfig... dbBackupConfigs) {
            return dbBackupConfigs(List.of(dbBackupConfigs));
        }
        public Builder dbName(String dbName) {
            this.dbName = Objects.requireNonNull(dbName);
            return this;
        }
        public Builder dbUniqueName(String dbUniqueName) {
            this.dbUniqueName = Objects.requireNonNull(dbUniqueName);
            return this;
        }
        public Builder dbWorkload(String dbWorkload) {
            this.dbWorkload = Objects.requireNonNull(dbWorkload);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        public Builder kmsKeyVersionId(String kmsKeyVersionId) {
            this.kmsKeyVersionId = Objects.requireNonNull(kmsKeyVersionId);
            return this;
        }
        public Builder ncharacterSet(String ncharacterSet) {
            this.ncharacterSet = Objects.requireNonNull(ncharacterSet);
            return this;
        }
        public Builder pdbName(String pdbName) {
            this.pdbName = Objects.requireNonNull(pdbName);
            return this;
        }
        public Builder sidPrefix(String sidPrefix) {
            this.sidPrefix = Objects.requireNonNull(sidPrefix);
            return this;
        }
        public Builder tdeWalletPassword(String tdeWalletPassword) {
            this.tdeWalletPassword = Objects.requireNonNull(tdeWalletPassword);
            return this;
        }
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }        public GetDatabaseDatabase build() {
            return new GetDatabaseDatabase(adminPassword, backupId, backupTdePassword, characterSet, databaseSoftwareImageId, dbBackupConfigs, dbName, dbUniqueName, dbWorkload, definedTags, freeformTags, kmsKeyId, kmsKeyVersionId, ncharacterSet, pdbName, sidPrefix, tdeWalletPassword, vaultId);
        }
    }
}
