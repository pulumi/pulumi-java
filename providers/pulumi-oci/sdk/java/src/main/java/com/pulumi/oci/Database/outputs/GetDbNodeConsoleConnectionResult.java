// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbNodeConsoleConnectionResult {
    /**
     * @return The OCID of the compartment to contain the console connection.
     * 
     */
    private final String compartmentId;
    /**
     * @return The SSH connection string for the console connection.
     * 
     */
    private final String connectionString;
    /**
     * @return The OCID of the database node.
     * 
     */
    private final String dbNodeId;
    /**
     * @return The SSH public key fingerprint for the console connection.
     * 
     */
    private final String fingerprint;
    /**
     * @return The OCID of the console connection.
     * 
     */
    private final String id;
    private final String publicKey;
    /**
     * @return The current state of the console connection.
     * 
     */
    private final String state;

    @CustomType.Constructor
    private GetDbNodeConsoleConnectionResult(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("connectionString") String connectionString,
        @CustomType.Parameter("dbNodeId") String dbNodeId,
        @CustomType.Parameter("fingerprint") String fingerprint,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("publicKey") String publicKey,
        @CustomType.Parameter("state") String state) {
        this.compartmentId = compartmentId;
        this.connectionString = connectionString;
        this.dbNodeId = dbNodeId;
        this.fingerprint = fingerprint;
        this.id = id;
        this.publicKey = publicKey;
        this.state = state;
    }

    /**
     * @return The OCID of the compartment to contain the console connection.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The SSH connection string for the console connection.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return The OCID of the database node.
     * 
     */
    public String dbNodeId() {
        return this.dbNodeId;
    }
    /**
     * @return The SSH public key fingerprint for the console connection.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The OCID of the console connection.
     * 
     */
    public String id() {
        return this.id;
    }
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return The current state of the console connection.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbNodeConsoleConnectionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private String connectionString;
        private String dbNodeId;
        private String fingerprint;
        private String id;
        private String publicKey;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDbNodeConsoleConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionString = defaults.connectionString;
    	      this.dbNodeId = defaults.dbNodeId;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.publicKey = defaults.publicKey;
    	      this.state = defaults.state;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        public Builder dbNodeId(String dbNodeId) {
            this.dbNodeId = Objects.requireNonNull(dbNodeId);
            return this;
        }
        public Builder fingerprint(String fingerprint) {
            this.fingerprint = Objects.requireNonNull(fingerprint);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder publicKey(String publicKey) {
            this.publicKey = Objects.requireNonNull(publicKey);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }        public GetDbNodeConsoleConnectionResult build() {
            return new GetDbNodeConsoleConnectionResult(compartmentId, connectionString, dbNodeId, fingerprint, id, publicKey, state);
        }
    }
}
