// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim {
    /**
     * @return (Updatable) Whether the claim is required to be present in the JWT or not. If set to &#34;false&#34;, the claim values will be matched only if the claim is present in the JWT.
     * 
     */
    private final @Nullable Boolean isRequired;
    /**
     * @return (Updatable) Name of the claim.
     * 
     */
    private final @Nullable String key;
    /**
     * @return (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
     * 
     */
    private final @Nullable List<String> values;

    @CustomType.Constructor
    private DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim(
        @CustomType.Parameter("isRequired") @Nullable Boolean isRequired,
        @CustomType.Parameter("key") @Nullable String key,
        @CustomType.Parameter("values") @Nullable List<String> values) {
        this.isRequired = isRequired;
        this.key = key;
        this.values = values;
    }

    /**
     * @return (Updatable) Whether the claim is required to be present in the JWT or not. If set to &#34;false&#34;, the claim values will be matched only if the claim is present in the JWT.
     * 
     */
    public Optional<Boolean> isRequired() {
        return Optional.ofNullable(this.isRequired);
    }
    /**
     * @return (Updatable) Name of the claim.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
     * 
     */
    public List<String> values() {
        return this.values == null ? List.of() : this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean isRequired;
        private @Nullable String key;
        private @Nullable List<String> values;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isRequired = defaults.isRequired;
    	      this.key = defaults.key;
    	      this.values = defaults.values;
        }

        public Builder isRequired(@Nullable Boolean isRequired) {
            this.isRequired = isRequired;
            return this;
        }
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        public Builder values(@Nullable List<String> values) {
            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }        public DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim build() {
            return new DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim(isRequired, key, values);
        }
    }
}
