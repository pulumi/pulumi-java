// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmTraces.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApmTraces.outputs.GetTraceSpanLog;
import com.pulumi.oci.ApmTraces.outputs.GetTraceSpanTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTraceSpan {
    /**
     * @return Total span duration in milliseconds.
     * 
     */
    private final String durationInMs;
    /**
     * @return Indicates if the span has an error.
     * 
     */
    private final Boolean isError;
    /**
     * @return Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
     * 
     */
    private final String key;
    /**
     * @return Kind associated with the span.
     * 
     */
    private final String kind;
    /**
     * @return List of logs associated with the span.
     * 
     */
    private final List<GetTraceSpanLog> logs;
    /**
     * @return Span name associated with the trace.  This is usually the method or URI of the request.
     * 
     */
    private final String operationName;
    /**
     * @return Unique parent identifier for the span if one exists. For root spans this will be null.
     * 
     */
    private final String parentSpanKey;
    /**
     * @return Service name associated with the span.
     * 
     */
    private final String serviceName;
    /**
     * @return List of tags associated with the span.
     * 
     */
    private final List<GetTraceSpanTag> tags;
    /**
     * @return Span end time.  Timestamp when the span was completed.
     * 
     */
    private final String timeEnded;
    /**
     * @return Span start time.  Timestamp when the span was started.
     * 
     */
    private final String timeStarted;
    /**
     * @return Unique Application Performance Monitoring trace identifier (traceId).
     * 
     */
    private final String traceKey;

    @CustomType.Constructor
    private GetTraceSpan(
        @CustomType.Parameter("durationInMs") String durationInMs,
        @CustomType.Parameter("isError") Boolean isError,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("logs") List<GetTraceSpanLog> logs,
        @CustomType.Parameter("operationName") String operationName,
        @CustomType.Parameter("parentSpanKey") String parentSpanKey,
        @CustomType.Parameter("serviceName") String serviceName,
        @CustomType.Parameter("tags") List<GetTraceSpanTag> tags,
        @CustomType.Parameter("timeEnded") String timeEnded,
        @CustomType.Parameter("timeStarted") String timeStarted,
        @CustomType.Parameter("traceKey") String traceKey) {
        this.durationInMs = durationInMs;
        this.isError = isError;
        this.key = key;
        this.kind = kind;
        this.logs = logs;
        this.operationName = operationName;
        this.parentSpanKey = parentSpanKey;
        this.serviceName = serviceName;
        this.tags = tags;
        this.timeEnded = timeEnded;
        this.timeStarted = timeStarted;
        this.traceKey = traceKey;
    }

    /**
     * @return Total span duration in milliseconds.
     * 
     */
    public String durationInMs() {
        return this.durationInMs;
    }
    /**
     * @return Indicates if the span has an error.
     * 
     */
    public Boolean isError() {
        return this.isError;
    }
    /**
     * @return Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Kind associated with the span.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return List of logs associated with the span.
     * 
     */
    public List<GetTraceSpanLog> logs() {
        return this.logs;
    }
    /**
     * @return Span name associated with the trace.  This is usually the method or URI of the request.
     * 
     */
    public String operationName() {
        return this.operationName;
    }
    /**
     * @return Unique parent identifier for the span if one exists. For root spans this will be null.
     * 
     */
    public String parentSpanKey() {
        return this.parentSpanKey;
    }
    /**
     * @return Service name associated with the span.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return List of tags associated with the span.
     * 
     */
    public List<GetTraceSpanTag> tags() {
        return this.tags;
    }
    /**
     * @return Span end time.  Timestamp when the span was completed.
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return Span start time.  Timestamp when the span was started.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }
    /**
     * @return Unique Application Performance Monitoring trace identifier (traceId).
     * 
     */
    public String traceKey() {
        return this.traceKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTraceSpan defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String durationInMs;
        private Boolean isError;
        private String key;
        private String kind;
        private List<GetTraceSpanLog> logs;
        private String operationName;
        private String parentSpanKey;
        private String serviceName;
        private List<GetTraceSpanTag> tags;
        private String timeEnded;
        private String timeStarted;
        private String traceKey;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTraceSpan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.durationInMs = defaults.durationInMs;
    	      this.isError = defaults.isError;
    	      this.key = defaults.key;
    	      this.kind = defaults.kind;
    	      this.logs = defaults.logs;
    	      this.operationName = defaults.operationName;
    	      this.parentSpanKey = defaults.parentSpanKey;
    	      this.serviceName = defaults.serviceName;
    	      this.tags = defaults.tags;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
    	      this.traceKey = defaults.traceKey;
        }

        public Builder durationInMs(String durationInMs) {
            this.durationInMs = Objects.requireNonNull(durationInMs);
            return this;
        }
        public Builder isError(Boolean isError) {
            this.isError = Objects.requireNonNull(isError);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder logs(List<GetTraceSpanLog> logs) {
            this.logs = Objects.requireNonNull(logs);
            return this;
        }
        public Builder logs(GetTraceSpanLog... logs) {
            return logs(List.of(logs));
        }
        public Builder operationName(String operationName) {
            this.operationName = Objects.requireNonNull(operationName);
            return this;
        }
        public Builder parentSpanKey(String parentSpanKey) {
            this.parentSpanKey = Objects.requireNonNull(parentSpanKey);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder tags(List<GetTraceSpanTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetTraceSpanTag... tags) {
            return tags(List.of(tags));
        }
        public Builder timeEnded(String timeEnded) {
            this.timeEnded = Objects.requireNonNull(timeEnded);
            return this;
        }
        public Builder timeStarted(String timeStarted) {
            this.timeStarted = Objects.requireNonNull(timeStarted);
            return this;
        }
        public Builder traceKey(String traceKey) {
            this.traceKey = Objects.requireNonNull(traceKey);
            return this;
        }        public GetTraceSpan build() {
            return new GetTraceSpan(durationInMs, isError, key, kind, logs, operationName, parentSpanKey, serviceName, tags, timeEnded, timeStarted, traceKey);
        }
    }
}
