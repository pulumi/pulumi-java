// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDecryptedDataPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDecryptedDataPlainArgs Empty = new GetDecryptedDataPlainArgs();

    /**
     * Information that can be used to provide an encryption context for the  encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
     * 
     */
    @Import(name="associatedData")
    private @Nullable Map<String,Object> associatedData;

    /**
     * @return Information that can be used to provide an encryption context for the  encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
     * 
     */
    public Optional<Map<String,Object>> associatedData() {
        return Optional.ofNullable(this.associatedData);
    }

    /**
     * The encrypted data to decrypt.
     * 
     */
    @Import(name="ciphertext", required=true)
    private String ciphertext;

    /**
     * @return The encrypted data to decrypt.
     * 
     */
    public String ciphertext() {
        return this.ciphertext;
    }

    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    @Import(name="cryptoEndpoint", required=true)
    private String cryptoEndpoint;

    /**
     * @return The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    public String cryptoEndpoint() {
        return this.cryptoEndpoint;
    }

    /**
     * The OCID of the key used to encrypt the ciphertext.
     * 
     */
    @Import(name="keyId", required=true)
    private String keyId;

    /**
     * @return The OCID of the key used to encrypt the ciphertext.
     * 
     */
    public String keyId() {
        return this.keyId;
    }

    private GetDecryptedDataPlainArgs() {}

    private GetDecryptedDataPlainArgs(GetDecryptedDataPlainArgs $) {
        this.associatedData = $.associatedData;
        this.ciphertext = $.ciphertext;
        this.cryptoEndpoint = $.cryptoEndpoint;
        this.keyId = $.keyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDecryptedDataPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDecryptedDataPlainArgs $;

        public Builder() {
            $ = new GetDecryptedDataPlainArgs();
        }

        public Builder(GetDecryptedDataPlainArgs defaults) {
            $ = new GetDecryptedDataPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedData Information that can be used to provide an encryption context for the  encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
         * 
         * @return builder
         * 
         */
        public Builder associatedData(@Nullable Map<String,Object> associatedData) {
            $.associatedData = associatedData;
            return this;
        }

        /**
         * @param ciphertext The encrypted data to decrypt.
         * 
         * @return builder
         * 
         */
        public Builder ciphertext(String ciphertext) {
            $.ciphertext = ciphertext;
            return this;
        }

        /**
         * @param cryptoEndpoint The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cryptoEndpoint(String cryptoEndpoint) {
            $.cryptoEndpoint = cryptoEndpoint;
            return this;
        }

        /**
         * @param keyId The OCID of the key used to encrypt the ciphertext.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            $.keyId = keyId;
            return this;
        }

        public GetDecryptedDataPlainArgs build() {
            $.ciphertext = Objects.requireNonNull($.ciphertext, "expected parameter 'ciphertext' to be non-null");
            $.cryptoEndpoint = Objects.requireNonNull($.cryptoEndpoint, "expected parameter 'cryptoEndpoint' to be non-null");
            $.keyId = Objects.requireNonNull($.keyId, "expected parameter 'keyId' to be non-null");
            return $;
        }
    }

}
