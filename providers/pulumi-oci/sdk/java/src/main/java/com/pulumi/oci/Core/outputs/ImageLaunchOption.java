// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ImageLaunchOption {
    /**
     * @return Emulation type for the boot volume.
     * 
     */
    private final @Nullable String bootVolumeType;
    /**
     * @return Firmware used to boot VM. Select the option that matches your operating system.
     * 
     */
    private final @Nullable String firmware;
    /**
     * @return Whether to enable consistent volume naming feature. Defaults to false.
     * 
     */
    private final @Nullable Boolean isConsistentVolumeNamingEnabled;
    /**
     * @return Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/LaunchInstanceDetails).
     * 
     */
    private final @Nullable Boolean isPvEncryptionInTransitEnabled;
    /**
     * @return Emulation type for the physical network interface card (NIC).
     * 
     */
    private final @Nullable String networkType;
    /**
     * @return Emulation type for volume.
     * 
     */
    private final @Nullable String remoteDataVolumeType;

    @CustomType.Constructor
    private ImageLaunchOption(
        @CustomType.Parameter("bootVolumeType") @Nullable String bootVolumeType,
        @CustomType.Parameter("firmware") @Nullable String firmware,
        @CustomType.Parameter("isConsistentVolumeNamingEnabled") @Nullable Boolean isConsistentVolumeNamingEnabled,
        @CustomType.Parameter("isPvEncryptionInTransitEnabled") @Nullable Boolean isPvEncryptionInTransitEnabled,
        @CustomType.Parameter("networkType") @Nullable String networkType,
        @CustomType.Parameter("remoteDataVolumeType") @Nullable String remoteDataVolumeType) {
        this.bootVolumeType = bootVolumeType;
        this.firmware = firmware;
        this.isConsistentVolumeNamingEnabled = isConsistentVolumeNamingEnabled;
        this.isPvEncryptionInTransitEnabled = isPvEncryptionInTransitEnabled;
        this.networkType = networkType;
        this.remoteDataVolumeType = remoteDataVolumeType;
    }

    /**
     * @return Emulation type for the boot volume.
     * 
     */
    public Optional<String> bootVolumeType() {
        return Optional.ofNullable(this.bootVolumeType);
    }
    /**
     * @return Firmware used to boot VM. Select the option that matches your operating system.
     * 
     */
    public Optional<String> firmware() {
        return Optional.ofNullable(this.firmware);
    }
    /**
     * @return Whether to enable consistent volume naming feature. Defaults to false.
     * 
     */
    public Optional<Boolean> isConsistentVolumeNamingEnabled() {
        return Optional.ofNullable(this.isConsistentVolumeNamingEnabled);
    }
    /**
     * @return Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/LaunchInstanceDetails).
     * 
     */
    public Optional<Boolean> isPvEncryptionInTransitEnabled() {
        return Optional.ofNullable(this.isPvEncryptionInTransitEnabled);
    }
    /**
     * @return Emulation type for the physical network interface card (NIC).
     * 
     */
    public Optional<String> networkType() {
        return Optional.ofNullable(this.networkType);
    }
    /**
     * @return Emulation type for volume.
     * 
     */
    public Optional<String> remoteDataVolumeType() {
        return Optional.ofNullable(this.remoteDataVolumeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageLaunchOption defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String bootVolumeType;
        private @Nullable String firmware;
        private @Nullable Boolean isConsistentVolumeNamingEnabled;
        private @Nullable Boolean isPvEncryptionInTransitEnabled;
        private @Nullable String networkType;
        private @Nullable String remoteDataVolumeType;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageLaunchOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootVolumeType = defaults.bootVolumeType;
    	      this.firmware = defaults.firmware;
    	      this.isConsistentVolumeNamingEnabled = defaults.isConsistentVolumeNamingEnabled;
    	      this.isPvEncryptionInTransitEnabled = defaults.isPvEncryptionInTransitEnabled;
    	      this.networkType = defaults.networkType;
    	      this.remoteDataVolumeType = defaults.remoteDataVolumeType;
        }

        public Builder bootVolumeType(@Nullable String bootVolumeType) {
            this.bootVolumeType = bootVolumeType;
            return this;
        }
        public Builder firmware(@Nullable String firmware) {
            this.firmware = firmware;
            return this;
        }
        public Builder isConsistentVolumeNamingEnabled(@Nullable Boolean isConsistentVolumeNamingEnabled) {
            this.isConsistentVolumeNamingEnabled = isConsistentVolumeNamingEnabled;
            return this;
        }
        public Builder isPvEncryptionInTransitEnabled(@Nullable Boolean isPvEncryptionInTransitEnabled) {
            this.isPvEncryptionInTransitEnabled = isPvEncryptionInTransitEnabled;
            return this;
        }
        public Builder networkType(@Nullable String networkType) {
            this.networkType = networkType;
            return this;
        }
        public Builder remoteDataVolumeType(@Nullable String remoteDataVolumeType) {
            this.remoteDataVolumeType = remoteDataVolumeType;
            return this;
        }        public ImageLaunchOption build() {
            return new ImageLaunchOption(bootVolumeType, firmware, isConsistentVolumeNamingEnabled, isPvEncryptionInTransitEnabled, networkType, remoteDataVolumeType);
        }
    }
}
