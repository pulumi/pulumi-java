// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseUserRolesFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseUserRolesRoleCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseUserRolesResult {
    private final @Nullable List<GetManagedDatabaseUserRolesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String managedDatabaseId;
    /**
     * @return The name of the role granted to the user.
     * 
     */
    private final @Nullable String name;
    /**
     * @return The list of role_collection.
     * 
     */
    private final List<GetManagedDatabaseUserRolesRoleCollection> roleCollections;
    private final String userName;

    @CustomType.Constructor
    private GetManagedDatabaseUserRolesResult(
        @CustomType.Parameter("filters") @Nullable List<GetManagedDatabaseUserRolesFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("managedDatabaseId") String managedDatabaseId,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("roleCollections") List<GetManagedDatabaseUserRolesRoleCollection> roleCollections,
        @CustomType.Parameter("userName") String userName) {
        this.filters = filters;
        this.id = id;
        this.managedDatabaseId = managedDatabaseId;
        this.name = name;
        this.roleCollections = roleCollections;
        this.userName = userName;
    }

    public List<GetManagedDatabaseUserRolesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The name of the role granted to the user.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The list of role_collection.
     * 
     */
    public List<GetManagedDatabaseUserRolesRoleCollection> roleCollections() {
        return this.roleCollections;
    }
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseUserRolesResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<GetManagedDatabaseUserRolesFilter> filters;
        private String id;
        private String managedDatabaseId;
        private @Nullable String name;
        private List<GetManagedDatabaseUserRolesRoleCollection> roleCollections;
        private String userName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedDatabaseUserRolesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.name = defaults.name;
    	      this.roleCollections = defaults.roleCollections;
    	      this.userName = defaults.userName;
        }

        public Builder filters(@Nullable List<GetManagedDatabaseUserRolesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedDatabaseUserRolesFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder managedDatabaseId(String managedDatabaseId) {
            this.managedDatabaseId = Objects.requireNonNull(managedDatabaseId);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder roleCollections(List<GetManagedDatabaseUserRolesRoleCollection> roleCollections) {
            this.roleCollections = Objects.requireNonNull(roleCollections);
            return this;
        }
        public Builder roleCollections(GetManagedDatabaseUserRolesRoleCollection... roleCollections) {
            return roleCollections(List.of(roleCollections));
        }
        public Builder userName(String userName) {
            this.userName = Objects.requireNonNull(userName);
            return this;
        }        public GetManagedDatabaseUserRolesResult build() {
            return new GetManagedDatabaseUserRolesResult(filters, id, managedDatabaseId, name, roleCollections, userName);
        }
    }
}
