// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Core.inputs.NetworkSecurityGroupSecurityRuleIcmpOptionsArgs;
import com.pulumi.oci.Core.inputs.NetworkSecurityGroupSecurityRuleTcpOptionsArgs;
import com.pulumi.oci.Core.inputs.NetworkSecurityGroupSecurityRuleUdpOptionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkSecurityGroupSecurityRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkSecurityGroupSecurityRuleArgs Empty = new NetworkSecurityGroupSecurityRuleArgs();

    /**
     * An optional description of your choice for the rule. Avoid entering confidential information.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of your choice for the rule. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     * 
     */
    @Import(name="destination")
    private @Nullable Output<String> destination;

    /**
     * @return Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     * 
     */
    public Optional<Output<String>> destination() {
        return Optional.ofNullable(this.destination);
    }

    /**
     * Type of destination for the rule. Required if `direction` = `EGRESS`.
     * 
     */
    @Import(name="destinationType")
    private @Nullable Output<String> destinationType;

    /**
     * @return Type of destination for the rule. Required if `direction` = `EGRESS`.
     * 
     */
    public Optional<Output<String>> destinationType() {
        return Optional.ofNullable(this.destinationType);
    }

    /**
     * Direction of the security rule. Set to `EGRESS` for rules to allow outbound IP packets, or `INGRESS` for rules to allow inbound IP packets.
     * 
     */
    @Import(name="direction", required=true)
    private Output<String> direction;

    /**
     * @return Direction of the security rule. Set to `EGRESS` for rules to allow outbound IP packets, or `INGRESS` for rules to allow inbound IP packets.
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }

    /**
     * Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    @Import(name="icmpOptions")
    private @Nullable Output<NetworkSecurityGroupSecurityRuleIcmpOptionsArgs> icmpOptions;

    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    public Optional<Output<NetworkSecurityGroupSecurityRuleIcmpOptionsArgs>> icmpOptions() {
        return Optional.ofNullable(this.icmpOptions);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network security group.
     * 
     */
    @Import(name="networkSecurityGroupId", required=true)
    private Output<String> networkSecurityGroupId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network security group.
     * 
     */
    public Output<String> networkSecurityGroupId() {
        return this.networkSecurityGroupId;
    }

    /**
     * The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Type of source for the rule. Required if `direction` = `INGRESS`.
     * * `CIDR_BLOCK`: If the rule&#39;s `source` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule&#39;s `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
     * * `NETWORK_SECURITY_GROUP`: If the rule&#39;s `source` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<String> sourceType;

    /**
     * @return Type of source for the rule. Required if `direction` = `INGRESS`.
     * * `CIDR_BLOCK`: If the rule&#39;s `source` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule&#39;s `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
     * * `NETWORK_SECURITY_GROUP`: If the rule&#39;s `source` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
     * 
     */
    public Optional<Output<String>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    @Import(name="stateless")
    private @Nullable Output<Boolean> stateless;

    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    public Optional<Output<Boolean>> stateless() {
        return Optional.ofNullable(this.stateless);
    }

    /**
     * Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    @Import(name="tcpOptions")
    private @Nullable Output<NetworkSecurityGroupSecurityRuleTcpOptionsArgs> tcpOptions;

    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public Optional<Output<NetworkSecurityGroupSecurityRuleTcpOptionsArgs>> tcpOptions() {
        return Optional.ofNullable(this.tcpOptions);
    }

    /**
     * Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    @Import(name="udpOptions")
    private @Nullable Output<NetworkSecurityGroupSecurityRuleUdpOptionsArgs> udpOptions;

    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public Optional<Output<NetworkSecurityGroupSecurityRuleUdpOptionsArgs>> udpOptions() {
        return Optional.ofNullable(this.udpOptions);
    }

    private NetworkSecurityGroupSecurityRuleArgs() {}

    private NetworkSecurityGroupSecurityRuleArgs(NetworkSecurityGroupSecurityRuleArgs $) {
        this.description = $.description;
        this.destination = $.destination;
        this.destinationType = $.destinationType;
        this.direction = $.direction;
        this.icmpOptions = $.icmpOptions;
        this.networkSecurityGroupId = $.networkSecurityGroupId;
        this.protocol = $.protocol;
        this.source = $.source;
        this.sourceType = $.sourceType;
        this.stateless = $.stateless;
        this.tcpOptions = $.tcpOptions;
        this.udpOptions = $.udpOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkSecurityGroupSecurityRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkSecurityGroupSecurityRuleArgs $;

        public Builder() {
            $ = new NetworkSecurityGroupSecurityRuleArgs();
        }

        public Builder(NetworkSecurityGroupSecurityRuleArgs defaults) {
            $ = new NetworkSecurityGroupSecurityRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description An optional description of your choice for the rule. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of your choice for the rule. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destination Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
         * 
         * @return builder
         * 
         */
        public Builder destination(@Nullable Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param destinationType Type of destination for the rule. Required if `direction` = `EGRESS`.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(@Nullable Output<String> destinationType) {
            $.destinationType = destinationType;
            return this;
        }

        /**
         * @param destinationType Type of destination for the rule. Required if `direction` = `EGRESS`.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(String destinationType) {
            return destinationType(Output.of(destinationType));
        }

        /**
         * @param direction Direction of the security rule. Set to `EGRESS` for rules to allow outbound IP packets, or `INGRESS` for rules to allow inbound IP packets.
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction of the security rule. Set to `EGRESS` for rules to allow outbound IP packets, or `INGRESS` for rules to allow inbound IP packets.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param icmpOptions Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
         * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
         * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
         * 
         * @return builder
         * 
         */
        public Builder icmpOptions(@Nullable Output<NetworkSecurityGroupSecurityRuleIcmpOptionsArgs> icmpOptions) {
            $.icmpOptions = icmpOptions;
            return this;
        }

        /**
         * @param icmpOptions Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
         * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
         * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
         * 
         * @return builder
         * 
         */
        public Builder icmpOptions(NetworkSecurityGroupSecurityRuleIcmpOptionsArgs icmpOptions) {
            return icmpOptions(Output.of(icmpOptions));
        }

        /**
         * @param networkSecurityGroupId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network security group.
         * 
         * @return builder
         * 
         */
        public Builder networkSecurityGroupId(Output<String> networkSecurityGroupId) {
            $.networkSecurityGroupId = networkSecurityGroupId;
            return this;
        }

        /**
         * @param networkSecurityGroupId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network security group.
         * 
         * @return builder
         * 
         */
        public Builder networkSecurityGroupId(String networkSecurityGroupId) {
            return networkSecurityGroupId(Output.of(networkSecurityGroupId));
        }

        /**
         * @param protocol The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param source Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceType Type of source for the rule. Required if `direction` = `INGRESS`.
         * * `CIDR_BLOCK`: If the rule&#39;s `source` is an IP address range in CIDR notation.
         * * `SERVICE_CIDR_BLOCK`: If the rule&#39;s `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
         * * `NETWORK_SECURITY_GROUP`: If the rule&#39;s `source` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
         * 
         * @return builder
         * 
         */
        public Builder sourceType(@Nullable Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType Type of source for the rule. Required if `direction` = `INGRESS`.
         * * `CIDR_BLOCK`: If the rule&#39;s `source` is an IP address range in CIDR notation.
         * * `SERVICE_CIDR_BLOCK`: If the rule&#39;s `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
         * * `NETWORK_SECURITY_GROUP`: If the rule&#39;s `source` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param stateless A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
         * 
         * @return builder
         * 
         */
        public Builder stateless(@Nullable Output<Boolean> stateless) {
            $.stateless = stateless;
            return this;
        }

        /**
         * @param stateless A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
         * 
         * @return builder
         * 
         */
        public Builder stateless(Boolean stateless) {
            return stateless(Output.of(stateless));
        }

        /**
         * @param tcpOptions Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
         * 
         * @return builder
         * 
         */
        public Builder tcpOptions(@Nullable Output<NetworkSecurityGroupSecurityRuleTcpOptionsArgs> tcpOptions) {
            $.tcpOptions = tcpOptions;
            return this;
        }

        /**
         * @param tcpOptions Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
         * 
         * @return builder
         * 
         */
        public Builder tcpOptions(NetworkSecurityGroupSecurityRuleTcpOptionsArgs tcpOptions) {
            return tcpOptions(Output.of(tcpOptions));
        }

        /**
         * @param udpOptions Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
         * 
         * @return builder
         * 
         */
        public Builder udpOptions(@Nullable Output<NetworkSecurityGroupSecurityRuleUdpOptionsArgs> udpOptions) {
            $.udpOptions = udpOptions;
            return this;
        }

        /**
         * @param udpOptions Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
         * 
         * @return builder
         * 
         */
        public Builder udpOptions(NetworkSecurityGroupSecurityRuleUdpOptionsArgs udpOptions) {
            return udpOptions(Output.of(udpOptions));
        }

        public NetworkSecurityGroupSecurityRuleArgs build() {
            $.direction = Objects.requireNonNull($.direction, "expected parameter 'direction' to be non-null");
            $.networkSecurityGroupId = Objects.requireNonNull($.networkSecurityGroupId, "expected parameter 'networkSecurityGroupId' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            return $;
        }
    }

}
