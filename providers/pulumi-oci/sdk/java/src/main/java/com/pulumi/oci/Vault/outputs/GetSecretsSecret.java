// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Vault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Vault.outputs.GetSecretsSecretSecretContent;
import com.pulumi.oci.Vault.outputs.GetSecretsSecretSecretRule;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSecretsSecret {
    /**
     * @return The OCID of the compartment.
     * 
     */
    private final String compartmentId;
    /**
     * @return The version number of the secret version that&#39;s currently in use.
     * 
     */
    private final String currentVersionNumber;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return A brief description of the secret. Avoid entering confidential information.
     * 
     */
    private final String description;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The OCID of the secret.
     * 
     */
    private final String id;
    /**
     * @return The OCID of the master encryption key that is used to encrypt the secret.
     * 
     */
    private final String keyId;
    /**
     * @return Additional information about the current lifecycle state of the secret.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return Additional metadata that you can use to provide context about how to use the secret or during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
     * 
     */
    private final Map<String,Object> metadata;
    private final List<GetSecretsSecretSecretContent> secretContents;
    /**
     * @return The user-friendly name of the secret. Avoid entering confidential information.
     * 
     */
    private final String secretName;
    /**
     * @return A list of rules that control how the secret is used and managed.
     * 
     */
    private final List<GetSecretsSecretSecretRule> secretRules;
    /**
     * @return A filter that returns only resources that match the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    private final String state;
    /**
     * @return A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private final String timeCreated;
    /**
     * @return An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private final String timeOfCurrentVersionExpiry;
    /**
     * @return An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private final String timeOfDeletion;
    /**
     * @return The OCID of the vault.
     * 
     */
    private final String vaultId;

    @CustomType.Constructor
    private GetSecretsSecret(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("currentVersionNumber") String currentVersionNumber,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("keyId") String keyId,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("metadata") Map<String,Object> metadata,
        @CustomType.Parameter("secretContents") List<GetSecretsSecretSecretContent> secretContents,
        @CustomType.Parameter("secretName") String secretName,
        @CustomType.Parameter("secretRules") List<GetSecretsSecretSecretRule> secretRules,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeOfCurrentVersionExpiry") String timeOfCurrentVersionExpiry,
        @CustomType.Parameter("timeOfDeletion") String timeOfDeletion,
        @CustomType.Parameter("vaultId") String vaultId) {
        this.compartmentId = compartmentId;
        this.currentVersionNumber = currentVersionNumber;
        this.definedTags = definedTags;
        this.description = description;
        this.freeformTags = freeformTags;
        this.id = id;
        this.keyId = keyId;
        this.lifecycleDetails = lifecycleDetails;
        this.metadata = metadata;
        this.secretContents = secretContents;
        this.secretName = secretName;
        this.secretRules = secretRules;
        this.state = state;
        this.timeCreated = timeCreated;
        this.timeOfCurrentVersionExpiry = timeOfCurrentVersionExpiry;
        this.timeOfDeletion = timeOfDeletion;
        this.vaultId = vaultId;
    }

    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The version number of the secret version that&#39;s currently in use.
     * 
     */
    public String currentVersionNumber() {
        return this.currentVersionNumber;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A brief description of the secret. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the secret.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the master encryption key that is used to encrypt the secret.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return Additional information about the current lifecycle state of the secret.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Additional metadata that you can use to provide context about how to use the secret or during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    public List<GetSecretsSecretSecretContent> secretContents() {
        return this.secretContents;
    }
    /**
     * @return The user-friendly name of the secret. Avoid entering confidential information.
     * 
     */
    public String secretName() {
        return this.secretName;
    }
    /**
     * @return A list of rules that control how the secret is used and managed.
     * 
     */
    public List<GetSecretsSecretSecretRule> secretRules() {
        return this.secretRules;
    }
    /**
     * @return A filter that returns only resources that match the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfCurrentVersionExpiry() {
        return this.timeOfCurrentVersionExpiry;
    }
    /**
     * @return An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    /**
     * @return The OCID of the vault.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretsSecret defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private String currentVersionNumber;
        private Map<String,Object> definedTags;
        private String description;
        private Map<String,Object> freeformTags;
        private String id;
        private String keyId;
        private String lifecycleDetails;
        private Map<String,Object> metadata;
        private List<GetSecretsSecretSecretContent> secretContents;
        private String secretName;
        private List<GetSecretsSecretSecretRule> secretRules;
        private String state;
        private String timeCreated;
        private String timeOfCurrentVersionExpiry;
        private String timeOfDeletion;
        private String vaultId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSecretsSecret defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.currentVersionNumber = defaults.currentVersionNumber;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.keyId = defaults.keyId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.metadata = defaults.metadata;
    	      this.secretContents = defaults.secretContents;
    	      this.secretName = defaults.secretName;
    	      this.secretRules = defaults.secretRules;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfCurrentVersionExpiry = defaults.timeOfCurrentVersionExpiry;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.vaultId = defaults.vaultId;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder currentVersionNumber(String currentVersionNumber) {
            this.currentVersionNumber = Objects.requireNonNull(currentVersionNumber);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder keyId(String keyId) {
            this.keyId = Objects.requireNonNull(keyId);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder metadata(Map<String,Object> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        public Builder secretContents(List<GetSecretsSecretSecretContent> secretContents) {
            this.secretContents = Objects.requireNonNull(secretContents);
            return this;
        }
        public Builder secretContents(GetSecretsSecretSecretContent... secretContents) {
            return secretContents(List.of(secretContents));
        }
        public Builder secretName(String secretName) {
            this.secretName = Objects.requireNonNull(secretName);
            return this;
        }
        public Builder secretRules(List<GetSecretsSecretSecretRule> secretRules) {
            this.secretRules = Objects.requireNonNull(secretRules);
            return this;
        }
        public Builder secretRules(GetSecretsSecretSecretRule... secretRules) {
            return secretRules(List.of(secretRules));
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeOfCurrentVersionExpiry(String timeOfCurrentVersionExpiry) {
            this.timeOfCurrentVersionExpiry = Objects.requireNonNull(timeOfCurrentVersionExpiry);
            return this;
        }
        public Builder timeOfDeletion(String timeOfDeletion) {
            this.timeOfDeletion = Objects.requireNonNull(timeOfDeletion);
            return this;
        }
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }        public GetSecretsSecret build() {
            return new GetSecretsSecret(compartmentId, currentVersionNumber, definedTags, description, freeformTags, id, keyId, lifecycleDetails, metadata, secretContents, secretName, secretRules, state, timeCreated, timeOfCurrentVersionExpiry, timeOfDeletion, vaultId);
        }
    }
}
