// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageLaunchOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageLaunchOptionArgs Empty = new ImageLaunchOptionArgs();

    /**
     * Emulation type for the boot volume.
     * 
     */
    @Import(name="bootVolumeType")
    private @Nullable Output<String> bootVolumeType;

    /**
     * @return Emulation type for the boot volume.
     * 
     */
    public Optional<Output<String>> bootVolumeType() {
        return Optional.ofNullable(this.bootVolumeType);
    }

    /**
     * Firmware used to boot VM. Select the option that matches your operating system.
     * 
     */
    @Import(name="firmware")
    private @Nullable Output<String> firmware;

    /**
     * @return Firmware used to boot VM. Select the option that matches your operating system.
     * 
     */
    public Optional<Output<String>> firmware() {
        return Optional.ofNullable(this.firmware);
    }

    /**
     * Whether to enable consistent volume naming feature. Defaults to false.
     * 
     */
    @Import(name="isConsistentVolumeNamingEnabled")
    private @Nullable Output<Boolean> isConsistentVolumeNamingEnabled;

    /**
     * @return Whether to enable consistent volume naming feature. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> isConsistentVolumeNamingEnabled() {
        return Optional.ofNullable(this.isConsistentVolumeNamingEnabled);
    }

    /**
     * Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/LaunchInstanceDetails).
     * 
     */
    @Import(name="isPvEncryptionInTransitEnabled")
    private @Nullable Output<Boolean> isPvEncryptionInTransitEnabled;

    /**
     * @return Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/LaunchInstanceDetails).
     * 
     */
    public Optional<Output<Boolean>> isPvEncryptionInTransitEnabled() {
        return Optional.ofNullable(this.isPvEncryptionInTransitEnabled);
    }

    /**
     * Emulation type for the physical network interface card (NIC).
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return Emulation type for the physical network interface card (NIC).
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * Emulation type for volume.
     * 
     */
    @Import(name="remoteDataVolumeType")
    private @Nullable Output<String> remoteDataVolumeType;

    /**
     * @return Emulation type for volume.
     * 
     */
    public Optional<Output<String>> remoteDataVolumeType() {
        return Optional.ofNullable(this.remoteDataVolumeType);
    }

    private ImageLaunchOptionArgs() {}

    private ImageLaunchOptionArgs(ImageLaunchOptionArgs $) {
        this.bootVolumeType = $.bootVolumeType;
        this.firmware = $.firmware;
        this.isConsistentVolumeNamingEnabled = $.isConsistentVolumeNamingEnabled;
        this.isPvEncryptionInTransitEnabled = $.isPvEncryptionInTransitEnabled;
        this.networkType = $.networkType;
        this.remoteDataVolumeType = $.remoteDataVolumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageLaunchOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageLaunchOptionArgs $;

        public Builder() {
            $ = new ImageLaunchOptionArgs();
        }

        public Builder(ImageLaunchOptionArgs defaults) {
            $ = new ImageLaunchOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootVolumeType Emulation type for the boot volume.
         * 
         * @return builder
         * 
         */
        public Builder bootVolumeType(@Nullable Output<String> bootVolumeType) {
            $.bootVolumeType = bootVolumeType;
            return this;
        }

        /**
         * @param bootVolumeType Emulation type for the boot volume.
         * 
         * @return builder
         * 
         */
        public Builder bootVolumeType(String bootVolumeType) {
            return bootVolumeType(Output.of(bootVolumeType));
        }

        /**
         * @param firmware Firmware used to boot VM. Select the option that matches your operating system.
         * 
         * @return builder
         * 
         */
        public Builder firmware(@Nullable Output<String> firmware) {
            $.firmware = firmware;
            return this;
        }

        /**
         * @param firmware Firmware used to boot VM. Select the option that matches your operating system.
         * 
         * @return builder
         * 
         */
        public Builder firmware(String firmware) {
            return firmware(Output.of(firmware));
        }

        /**
         * @param isConsistentVolumeNamingEnabled Whether to enable consistent volume naming feature. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder isConsistentVolumeNamingEnabled(@Nullable Output<Boolean> isConsistentVolumeNamingEnabled) {
            $.isConsistentVolumeNamingEnabled = isConsistentVolumeNamingEnabled;
            return this;
        }

        /**
         * @param isConsistentVolumeNamingEnabled Whether to enable consistent volume naming feature. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder isConsistentVolumeNamingEnabled(Boolean isConsistentVolumeNamingEnabled) {
            return isConsistentVolumeNamingEnabled(Output.of(isConsistentVolumeNamingEnabled));
        }

        /**
         * @param isPvEncryptionInTransitEnabled Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/LaunchInstanceDetails).
         * 
         * @return builder
         * 
         */
        public Builder isPvEncryptionInTransitEnabled(@Nullable Output<Boolean> isPvEncryptionInTransitEnabled) {
            $.isPvEncryptionInTransitEnabled = isPvEncryptionInTransitEnabled;
            return this;
        }

        /**
         * @param isPvEncryptionInTransitEnabled Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/LaunchInstanceDetails).
         * 
         * @return builder
         * 
         */
        public Builder isPvEncryptionInTransitEnabled(Boolean isPvEncryptionInTransitEnabled) {
            return isPvEncryptionInTransitEnabled(Output.of(isPvEncryptionInTransitEnabled));
        }

        /**
         * @param networkType Emulation type for the physical network interface card (NIC).
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType Emulation type for the physical network interface card (NIC).
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param remoteDataVolumeType Emulation type for volume.
         * 
         * @return builder
         * 
         */
        public Builder remoteDataVolumeType(@Nullable Output<String> remoteDataVolumeType) {
            $.remoteDataVolumeType = remoteDataVolumeType;
            return this;
        }

        /**
         * @param remoteDataVolumeType Emulation type for volume.
         * 
         * @return builder
         * 
         */
        public Builder remoteDataVolumeType(String remoteDataVolumeType) {
            return remoteDataVolumeType(Output.of(remoteDataVolumeType));
        }

        public ImageLaunchOptionArgs build() {
            return $;
        }
    }

}
