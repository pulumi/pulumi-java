// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementBgpSessionInfoArgs;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementEncryptionDomainConfigArgs;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementPhaseOneDetailArgs;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementPhaseTwoDetailArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpsecConnectionTunnelManagementState extends com.pulumi.resources.ResourceArgs {

    public static final IpsecConnectionTunnelManagementState Empty = new IpsecConnectionTunnelManagementState();

    /**
     * Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
     * 
     */
    @Import(name="bgpSessionInfos")
    private @Nullable Output<List<IpsecConnectionTunnelManagementBgpSessionInfoArgs>> bgpSessionInfos;

    /**
     * @return Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
     * 
     */
    public Optional<Output<List<IpsecConnectionTunnelManagementBgpSessionInfoArgs>>> bgpSessionInfos() {
        return Optional.ofNullable(this.bgpSessionInfos);
    }

    /**
     * The OCID of the compartment containing the tunnel.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment containing the tunnel.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The IP address of Cpe headend.  Example: `129.146.17.50`
     * 
     */
    @Import(name="cpeIp")
    private @Nullable Output<String> cpeIp;

    /**
     * @return The IP address of Cpe headend.  Example: `129.146.17.50`
     * 
     */
    public Optional<Output<String>> cpeIp() {
        return Optional.ofNullable(this.cpeIp);
    }

    /**
     * A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="dpdMode")
    private @Nullable Output<String> dpdMode;

    public Optional<Output<String>> dpdMode() {
        return Optional.ofNullable(this.dpdMode);
    }

    @Import(name="dpdTimeoutInSec")
    private @Nullable Output<Integer> dpdTimeoutInSec;

    public Optional<Output<Integer>> dpdTimeoutInSec() {
        return Optional.ofNullable(this.dpdTimeoutInSec);
    }

    /**
     * Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
     * 
     */
    @Import(name="encryptionDomainConfig")
    private @Nullable Output<IpsecConnectionTunnelManagementEncryptionDomainConfigArgs> encryptionDomainConfig;

    /**
     * @return Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
     * 
     */
    public Optional<Output<IpsecConnectionTunnelManagementEncryptionDomainConfigArgs>> encryptionDomainConfig() {
        return Optional.ofNullable(this.encryptionDomainConfig);
    }

    /**
     * Internet Key Exchange protocol version.
     * 
     */
    @Import(name="ikeVersion")
    private @Nullable Output<String> ikeVersion;

    /**
     * @return Internet Key Exchange protocol version.
     * 
     */
    public Optional<Output<String>> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }

    /**
     * The OCID of the IPSec connection.
     * 
     */
    @Import(name="ipsecId")
    private @Nullable Output<String> ipsecId;

    /**
     * @return The OCID of the IPSec connection.
     * 
     */
    public Optional<Output<String>> ipsecId() {
        return Optional.ofNullable(this.ipsecId);
    }

    @Import(name="natTranslationEnabled")
    private @Nullable Output<String> natTranslationEnabled;

    public Optional<Output<String>> natTranslationEnabled() {
        return Optional.ofNullable(this.natTranslationEnabled);
    }

    @Import(name="oracleCanInitiate")
    private @Nullable Output<String> oracleCanInitiate;

    public Optional<Output<String>> oracleCanInitiate() {
        return Optional.ofNullable(this.oracleCanInitiate);
    }

    @Import(name="phaseOneDetails")
    private @Nullable Output<List<IpsecConnectionTunnelManagementPhaseOneDetailArgs>> phaseOneDetails;

    public Optional<Output<List<IpsecConnectionTunnelManagementPhaseOneDetailArgs>>> phaseOneDetails() {
        return Optional.ofNullable(this.phaseOneDetails);
    }

    @Import(name="phaseTwoDetails")
    private @Nullable Output<List<IpsecConnectionTunnelManagementPhaseTwoDetailArgs>> phaseTwoDetails;

    public Optional<Output<List<IpsecConnectionTunnelManagementPhaseTwoDetailArgs>>> phaseTwoDetails() {
        return Optional.ofNullable(this.phaseTwoDetails);
    }

    /**
     * The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
     * 
     */
    @Import(name="routing")
    private @Nullable Output<String> routing;

    /**
     * @return The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
     * 
     */
    public Optional<Output<String>> routing() {
        return Optional.ofNullable(this.routing);
    }

    /**
     * The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
     * 
     */
    @Import(name="sharedSecret")
    private @Nullable Output<String> sharedSecret;

    /**
     * @return The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
     * 
     */
    public Optional<Output<String>> sharedSecret() {
        return Optional.ofNullable(this.sharedSecret);
    }

    /**
     * The IPSec connection&#39;s tunnel&#39;s lifecycle state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The IPSec connection&#39;s tunnel&#39;s lifecycle state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The tunnel&#39;s current state.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The tunnel&#39;s current state.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeStatusUpdated")
    private @Nullable Output<String> timeStatusUpdated;

    /**
     * @return When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeStatusUpdated() {
        return Optional.ofNullable(this.timeStatusUpdated);
    }

    /**
     * The OCID of the IPSec connection&#39;s tunnel.
     * 
     */
    @Import(name="tunnelId")
    private @Nullable Output<String> tunnelId;

    /**
     * @return The OCID of the IPSec connection&#39;s tunnel.
     * 
     */
    public Optional<Output<String>> tunnelId() {
        return Optional.ofNullable(this.tunnelId);
    }

    /**
     * The IP address of Oracle&#39;s VPN headend.  Example: `129.146.17.50`
     * 
     */
    @Import(name="vpnIp")
    private @Nullable Output<String> vpnIp;

    /**
     * @return The IP address of Oracle&#39;s VPN headend.  Example: `129.146.17.50`
     * 
     */
    public Optional<Output<String>> vpnIp() {
        return Optional.ofNullable(this.vpnIp);
    }

    private IpsecConnectionTunnelManagementState() {}

    private IpsecConnectionTunnelManagementState(IpsecConnectionTunnelManagementState $) {
        this.bgpSessionInfos = $.bgpSessionInfos;
        this.compartmentId = $.compartmentId;
        this.cpeIp = $.cpeIp;
        this.displayName = $.displayName;
        this.dpdMode = $.dpdMode;
        this.dpdTimeoutInSec = $.dpdTimeoutInSec;
        this.encryptionDomainConfig = $.encryptionDomainConfig;
        this.ikeVersion = $.ikeVersion;
        this.ipsecId = $.ipsecId;
        this.natTranslationEnabled = $.natTranslationEnabled;
        this.oracleCanInitiate = $.oracleCanInitiate;
        this.phaseOneDetails = $.phaseOneDetails;
        this.phaseTwoDetails = $.phaseTwoDetails;
        this.routing = $.routing;
        this.sharedSecret = $.sharedSecret;
        this.state = $.state;
        this.status = $.status;
        this.timeCreated = $.timeCreated;
        this.timeStatusUpdated = $.timeStatusUpdated;
        this.tunnelId = $.tunnelId;
        this.vpnIp = $.vpnIp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpsecConnectionTunnelManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpsecConnectionTunnelManagementState $;

        public Builder() {
            $ = new IpsecConnectionTunnelManagementState();
        }

        public Builder(IpsecConnectionTunnelManagementState defaults) {
            $ = new IpsecConnectionTunnelManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bgpSessionInfos Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
         * 
         * @return builder
         * 
         */
        public Builder bgpSessionInfos(@Nullable Output<List<IpsecConnectionTunnelManagementBgpSessionInfoArgs>> bgpSessionInfos) {
            $.bgpSessionInfos = bgpSessionInfos;
            return this;
        }

        /**
         * @param bgpSessionInfos Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
         * 
         * @return builder
         * 
         */
        public Builder bgpSessionInfos(List<IpsecConnectionTunnelManagementBgpSessionInfoArgs> bgpSessionInfos) {
            return bgpSessionInfos(Output.of(bgpSessionInfos));
        }

        /**
         * @param bgpSessionInfos Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
         * 
         * @return builder
         * 
         */
        public Builder bgpSessionInfos(IpsecConnectionTunnelManagementBgpSessionInfoArgs... bgpSessionInfos) {
            return bgpSessionInfos(List.of(bgpSessionInfos));
        }

        /**
         * @param compartmentId The OCID of the compartment containing the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment containing the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param cpeIp The IP address of Cpe headend.  Example: `129.146.17.50`
         * 
         * @return builder
         * 
         */
        public Builder cpeIp(@Nullable Output<String> cpeIp) {
            $.cpeIp = cpeIp;
            return this;
        }

        /**
         * @param cpeIp The IP address of Cpe headend.  Example: `129.146.17.50`
         * 
         * @return builder
         * 
         */
        public Builder cpeIp(String cpeIp) {
            return cpeIp(Output.of(cpeIp));
        }

        /**
         * @param displayName A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder dpdMode(@Nullable Output<String> dpdMode) {
            $.dpdMode = dpdMode;
            return this;
        }

        public Builder dpdMode(String dpdMode) {
            return dpdMode(Output.of(dpdMode));
        }

        public Builder dpdTimeoutInSec(@Nullable Output<Integer> dpdTimeoutInSec) {
            $.dpdTimeoutInSec = dpdTimeoutInSec;
            return this;
        }

        public Builder dpdTimeoutInSec(Integer dpdTimeoutInSec) {
            return dpdTimeoutInSec(Output.of(dpdTimeoutInSec));
        }

        /**
         * @param encryptionDomainConfig Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
         * 
         * @return builder
         * 
         */
        public Builder encryptionDomainConfig(@Nullable Output<IpsecConnectionTunnelManagementEncryptionDomainConfigArgs> encryptionDomainConfig) {
            $.encryptionDomainConfig = encryptionDomainConfig;
            return this;
        }

        /**
         * @param encryptionDomainConfig Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
         * 
         * @return builder
         * 
         */
        public Builder encryptionDomainConfig(IpsecConnectionTunnelManagementEncryptionDomainConfigArgs encryptionDomainConfig) {
            return encryptionDomainConfig(Output.of(encryptionDomainConfig));
        }

        /**
         * @param ikeVersion Internet Key Exchange protocol version.
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(@Nullable Output<String> ikeVersion) {
            $.ikeVersion = ikeVersion;
            return this;
        }

        /**
         * @param ikeVersion Internet Key Exchange protocol version.
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(String ikeVersion) {
            return ikeVersion(Output.of(ikeVersion));
        }

        /**
         * @param ipsecId The OCID of the IPSec connection.
         * 
         * @return builder
         * 
         */
        public Builder ipsecId(@Nullable Output<String> ipsecId) {
            $.ipsecId = ipsecId;
            return this;
        }

        /**
         * @param ipsecId The OCID of the IPSec connection.
         * 
         * @return builder
         * 
         */
        public Builder ipsecId(String ipsecId) {
            return ipsecId(Output.of(ipsecId));
        }

        public Builder natTranslationEnabled(@Nullable Output<String> natTranslationEnabled) {
            $.natTranslationEnabled = natTranslationEnabled;
            return this;
        }

        public Builder natTranslationEnabled(String natTranslationEnabled) {
            return natTranslationEnabled(Output.of(natTranslationEnabled));
        }

        public Builder oracleCanInitiate(@Nullable Output<String> oracleCanInitiate) {
            $.oracleCanInitiate = oracleCanInitiate;
            return this;
        }

        public Builder oracleCanInitiate(String oracleCanInitiate) {
            return oracleCanInitiate(Output.of(oracleCanInitiate));
        }

        public Builder phaseOneDetails(@Nullable Output<List<IpsecConnectionTunnelManagementPhaseOneDetailArgs>> phaseOneDetails) {
            $.phaseOneDetails = phaseOneDetails;
            return this;
        }

        public Builder phaseOneDetails(List<IpsecConnectionTunnelManagementPhaseOneDetailArgs> phaseOneDetails) {
            return phaseOneDetails(Output.of(phaseOneDetails));
        }

        public Builder phaseOneDetails(IpsecConnectionTunnelManagementPhaseOneDetailArgs... phaseOneDetails) {
            return phaseOneDetails(List.of(phaseOneDetails));
        }

        public Builder phaseTwoDetails(@Nullable Output<List<IpsecConnectionTunnelManagementPhaseTwoDetailArgs>> phaseTwoDetails) {
            $.phaseTwoDetails = phaseTwoDetails;
            return this;
        }

        public Builder phaseTwoDetails(List<IpsecConnectionTunnelManagementPhaseTwoDetailArgs> phaseTwoDetails) {
            return phaseTwoDetails(Output.of(phaseTwoDetails));
        }

        public Builder phaseTwoDetails(IpsecConnectionTunnelManagementPhaseTwoDetailArgs... phaseTwoDetails) {
            return phaseTwoDetails(List.of(phaseTwoDetails));
        }

        /**
         * @param routing The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
         * 
         * @return builder
         * 
         */
        public Builder routing(@Nullable Output<String> routing) {
            $.routing = routing;
            return this;
        }

        /**
         * @param routing The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
         * 
         * @return builder
         * 
         */
        public Builder routing(String routing) {
            return routing(Output.of(routing));
        }

        /**
         * @param sharedSecret The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
         * 
         * @return builder
         * 
         */
        public Builder sharedSecret(@Nullable Output<String> sharedSecret) {
            $.sharedSecret = sharedSecret;
            return this;
        }

        /**
         * @param sharedSecret The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
         * 
         * @return builder
         * 
         */
        public Builder sharedSecret(String sharedSecret) {
            return sharedSecret(Output.of(sharedSecret));
        }

        /**
         * @param state The IPSec connection&#39;s tunnel&#39;s lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The IPSec connection&#39;s tunnel&#39;s lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param status The tunnel&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The tunnel&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param timeCreated The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeStatusUpdated When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeStatusUpdated(@Nullable Output<String> timeStatusUpdated) {
            $.timeStatusUpdated = timeStatusUpdated;
            return this;
        }

        /**
         * @param timeStatusUpdated When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeStatusUpdated(String timeStatusUpdated) {
            return timeStatusUpdated(Output.of(timeStatusUpdated));
        }

        /**
         * @param tunnelId The OCID of the IPSec connection&#39;s tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(@Nullable Output<String> tunnelId) {
            $.tunnelId = tunnelId;
            return this;
        }

        /**
         * @param tunnelId The OCID of the IPSec connection&#39;s tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(String tunnelId) {
            return tunnelId(Output.of(tunnelId));
        }

        /**
         * @param vpnIp The IP address of Oracle&#39;s VPN headend.  Example: `129.146.17.50`
         * 
         * @return builder
         * 
         */
        public Builder vpnIp(@Nullable Output<String> vpnIp) {
            $.vpnIp = vpnIp;
            return this;
        }

        /**
         * @param vpnIp The IP address of Oracle&#39;s VPN headend.  Example: `129.146.17.50`
         * 
         * @return builder
         * 
         */
        public Builder vpnIp(String vpnIp) {
            return vpnIp(Output.of(vpnIp));
        }

        public IpsecConnectionTunnelManagementState build() {
            return $;
        }
    }

}
