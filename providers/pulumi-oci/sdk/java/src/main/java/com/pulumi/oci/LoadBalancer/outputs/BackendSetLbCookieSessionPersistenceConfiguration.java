// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackendSetLbCookieSessionPersistenceConfiguration {
    /**
     * @return (Updatable) The name of the cookie used to detect a session initiated by the backend server. Use &#39;*&#39; to specify that any cookie set by the backend causes the session to persist.  Example: `example_cookie`
     * 
     */
    private final @Nullable String cookieName;
    /**
     * @return (Updatable) Whether the load balancer is prevented from directing traffic from a persistent session client to a different backend server if the original server is unavailable. Defaults to false.  Example: `false`
     * 
     */
    private final @Nullable Boolean disableFallback;
    /**
     * @return (Updatable) The domain in which the cookie is valid. The `Set-cookie` header inserted by the load balancer contains a domain attribute with the specified value.
     * 
     */
    private final @Nullable String domain;
    /**
     * @return (Updatable) Whether the `Set-cookie` header should contain the `HttpOnly` attribute. If `true`, the `Set-cookie` header inserted by the load balancer contains the `HttpOnly` attribute, which limits the scope of the cookie to HTTP requests. This attribute directs the client or browser to omit the cookie when providing access to cookies through non-HTTP APIs. For example, it restricts the cookie from JavaScript channels.  Example: `true`
     * 
     */
    private final @Nullable Boolean isHttpOnly;
    /**
     * @return (Updatable) Whether the `Set-cookie` header should contain the `Secure` attribute. If `true`, the `Set-cookie` header inserted by the load balancer contains the `Secure` attribute, which directs the client or browser to send the cookie only using a secure protocol.
     * 
     */
    private final @Nullable Boolean isSecure;
    /**
     * @return (Updatable) The amount of time the cookie remains valid. The `Set-cookie` header inserted by the load balancer contains a `Max-Age` attribute with the specified value.
     * 
     */
    private final @Nullable Integer maxAgeInSeconds;
    /**
     * @return (Updatable) The path in which the cookie is valid. The `Set-cookie header` inserted by the load balancer contains a `Path` attribute with the specified value.
     * 
     */
    private final @Nullable String path;

    @CustomType.Constructor
    private BackendSetLbCookieSessionPersistenceConfiguration(
        @CustomType.Parameter("cookieName") @Nullable String cookieName,
        @CustomType.Parameter("disableFallback") @Nullable Boolean disableFallback,
        @CustomType.Parameter("domain") @Nullable String domain,
        @CustomType.Parameter("isHttpOnly") @Nullable Boolean isHttpOnly,
        @CustomType.Parameter("isSecure") @Nullable Boolean isSecure,
        @CustomType.Parameter("maxAgeInSeconds") @Nullable Integer maxAgeInSeconds,
        @CustomType.Parameter("path") @Nullable String path) {
        this.cookieName = cookieName;
        this.disableFallback = disableFallback;
        this.domain = domain;
        this.isHttpOnly = isHttpOnly;
        this.isSecure = isSecure;
        this.maxAgeInSeconds = maxAgeInSeconds;
        this.path = path;
    }

    /**
     * @return (Updatable) The name of the cookie used to detect a session initiated by the backend server. Use &#39;*&#39; to specify that any cookie set by the backend causes the session to persist.  Example: `example_cookie`
     * 
     */
    public Optional<String> cookieName() {
        return Optional.ofNullable(this.cookieName);
    }
    /**
     * @return (Updatable) Whether the load balancer is prevented from directing traffic from a persistent session client to a different backend server if the original server is unavailable. Defaults to false.  Example: `false`
     * 
     */
    public Optional<Boolean> disableFallback() {
        return Optional.ofNullable(this.disableFallback);
    }
    /**
     * @return (Updatable) The domain in which the cookie is valid. The `Set-cookie` header inserted by the load balancer contains a domain attribute with the specified value.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return (Updatable) Whether the `Set-cookie` header should contain the `HttpOnly` attribute. If `true`, the `Set-cookie` header inserted by the load balancer contains the `HttpOnly` attribute, which limits the scope of the cookie to HTTP requests. This attribute directs the client or browser to omit the cookie when providing access to cookies through non-HTTP APIs. For example, it restricts the cookie from JavaScript channels.  Example: `true`
     * 
     */
    public Optional<Boolean> isHttpOnly() {
        return Optional.ofNullable(this.isHttpOnly);
    }
    /**
     * @return (Updatable) Whether the `Set-cookie` header should contain the `Secure` attribute. If `true`, the `Set-cookie` header inserted by the load balancer contains the `Secure` attribute, which directs the client or browser to send the cookie only using a secure protocol.
     * 
     */
    public Optional<Boolean> isSecure() {
        return Optional.ofNullable(this.isSecure);
    }
    /**
     * @return (Updatable) The amount of time the cookie remains valid. The `Set-cookie` header inserted by the load balancer contains a `Max-Age` attribute with the specified value.
     * 
     */
    public Optional<Integer> maxAgeInSeconds() {
        return Optional.ofNullable(this.maxAgeInSeconds);
    }
    /**
     * @return (Updatable) The path in which the cookie is valid. The `Set-cookie header` inserted by the load balancer contains a `Path` attribute with the specified value.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendSetLbCookieSessionPersistenceConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String cookieName;
        private @Nullable Boolean disableFallback;
        private @Nullable String domain;
        private @Nullable Boolean isHttpOnly;
        private @Nullable Boolean isSecure;
        private @Nullable Integer maxAgeInSeconds;
        private @Nullable String path;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendSetLbCookieSessionPersistenceConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cookieName = defaults.cookieName;
    	      this.disableFallback = defaults.disableFallback;
    	      this.domain = defaults.domain;
    	      this.isHttpOnly = defaults.isHttpOnly;
    	      this.isSecure = defaults.isSecure;
    	      this.maxAgeInSeconds = defaults.maxAgeInSeconds;
    	      this.path = defaults.path;
        }

        public Builder cookieName(@Nullable String cookieName) {
            this.cookieName = cookieName;
            return this;
        }
        public Builder disableFallback(@Nullable Boolean disableFallback) {
            this.disableFallback = disableFallback;
            return this;
        }
        public Builder domain(@Nullable String domain) {
            this.domain = domain;
            return this;
        }
        public Builder isHttpOnly(@Nullable Boolean isHttpOnly) {
            this.isHttpOnly = isHttpOnly;
            return this;
        }
        public Builder isSecure(@Nullable Boolean isSecure) {
            this.isSecure = isSecure;
            return this;
        }
        public Builder maxAgeInSeconds(@Nullable Integer maxAgeInSeconds) {
            this.maxAgeInSeconds = maxAgeInSeconds;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }        public BackendSetLbCookieSessionPersistenceConfiguration build() {
            return new BackendSetLbCookieSessionPersistenceConfiguration(cookieName, disableFallback, domain, isHttpOnly, isSecure, maxAgeInSeconds, path);
        }
    }
}
