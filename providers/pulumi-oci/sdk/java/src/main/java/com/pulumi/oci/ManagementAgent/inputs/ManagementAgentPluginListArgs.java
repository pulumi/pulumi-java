// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementAgentPluginListArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementAgentPluginListArgs Empty = new ManagementAgentPluginListArgs();

    /**
     * flag indicating whether the plugin is in enabled mode or disabled mode.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return flag indicating whether the plugin is in enabled mode or disabled mode.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * Management Agent Plugin Identifier, can be renamed
     * 
     */
    @Import(name="pluginDisplayName")
    private @Nullable Output<String> pluginDisplayName;

    /**
     * @return Management Agent Plugin Identifier, can be renamed
     * 
     */
    public Optional<Output<String>> pluginDisplayName() {
        return Optional.ofNullable(this.pluginDisplayName);
    }

    /**
     * Plugin Id
     * 
     */
    @Import(name="pluginId")
    private @Nullable Output<String> pluginId;

    /**
     * @return Plugin Id
     * 
     */
    public Optional<Output<String>> pluginId() {
        return Optional.ofNullable(this.pluginId);
    }

    /**
     * Management Agent Plugin Name
     * 
     */
    @Import(name="pluginName")
    private @Nullable Output<String> pluginName;

    /**
     * @return Management Agent Plugin Name
     * 
     */
    public Optional<Output<String>> pluginName() {
        return Optional.ofNullable(this.pluginName);
    }

    /**
     * Plugin Version
     * 
     */
    @Import(name="pluginVersion")
    private @Nullable Output<String> pluginVersion;

    /**
     * @return Plugin Version
     * 
     */
    public Optional<Output<String>> pluginVersion() {
        return Optional.ofNullable(this.pluginVersion);
    }

    private ManagementAgentPluginListArgs() {}

    private ManagementAgentPluginListArgs(ManagementAgentPluginListArgs $) {
        this.isEnabled = $.isEnabled;
        this.pluginDisplayName = $.pluginDisplayName;
        this.pluginId = $.pluginId;
        this.pluginName = $.pluginName;
        this.pluginVersion = $.pluginVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementAgentPluginListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementAgentPluginListArgs $;

        public Builder() {
            $ = new ManagementAgentPluginListArgs();
        }

        public Builder(ManagementAgentPluginListArgs defaults) {
            $ = new ManagementAgentPluginListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isEnabled flag indicating whether the plugin is in enabled mode or disabled mode.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled flag indicating whether the plugin is in enabled mode or disabled mode.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param pluginDisplayName Management Agent Plugin Identifier, can be renamed
         * 
         * @return builder
         * 
         */
        public Builder pluginDisplayName(@Nullable Output<String> pluginDisplayName) {
            $.pluginDisplayName = pluginDisplayName;
            return this;
        }

        /**
         * @param pluginDisplayName Management Agent Plugin Identifier, can be renamed
         * 
         * @return builder
         * 
         */
        public Builder pluginDisplayName(String pluginDisplayName) {
            return pluginDisplayName(Output.of(pluginDisplayName));
        }

        /**
         * @param pluginId Plugin Id
         * 
         * @return builder
         * 
         */
        public Builder pluginId(@Nullable Output<String> pluginId) {
            $.pluginId = pluginId;
            return this;
        }

        /**
         * @param pluginId Plugin Id
         * 
         * @return builder
         * 
         */
        public Builder pluginId(String pluginId) {
            return pluginId(Output.of(pluginId));
        }

        /**
         * @param pluginName Management Agent Plugin Name
         * 
         * @return builder
         * 
         */
        public Builder pluginName(@Nullable Output<String> pluginName) {
            $.pluginName = pluginName;
            return this;
        }

        /**
         * @param pluginName Management Agent Plugin Name
         * 
         * @return builder
         * 
         */
        public Builder pluginName(String pluginName) {
            return pluginName(Output.of(pluginName));
        }

        /**
         * @param pluginVersion Plugin Version
         * 
         * @return builder
         * 
         */
        public Builder pluginVersion(@Nullable Output<String> pluginVersion) {
            $.pluginVersion = pluginVersion;
            return this;
        }

        /**
         * @param pluginVersion Plugin Version
         * 
         * @return builder
         * 
         */
        public Builder pluginVersion(String pluginVersion) {
            return pluginVersion(Output.of(pluginVersion));
        }

        public ManagementAgentPluginListArgs build() {
            return $;
        }
    }

}
