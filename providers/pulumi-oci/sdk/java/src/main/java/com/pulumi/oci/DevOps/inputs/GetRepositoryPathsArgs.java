// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.GetRepositoryPathsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryPathsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryPathsArgs Empty = new GetRepositoryPathsArgs();

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetRepositoryPathsFilter> filters;

    public Optional<List<GetRepositoryPathsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository.
     * 
     */
    @Import(name="folderPath")
    private @Nullable String folderPath;

    /**
     * @return The fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository.
     * 
     */
    public Optional<String> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }

    /**
     * Flag to determine if files must be retrived recursively. Flag is False by default.
     * 
     */
    @Import(name="pathsInSubtree")
    private @Nullable Boolean pathsInSubtree;

    /**
     * @return Flag to determine if files must be retrived recursively. Flag is False by default.
     * 
     */
    public Optional<Boolean> pathsInSubtree() {
        return Optional.ofNullable(this.pathsInSubtree);
    }

    /**
     * The name of branch/tag or commit hash it points to. If names conflict, order of preference is commit &gt; branch &gt; tag. You can disambiguate with &#34;heads/foobar&#34; and &#34;tags/foobar&#34;. If left blank repository&#39;s default branch will be used.
     * 
     */
    @Import(name="ref")
    private @Nullable String ref;

    /**
     * @return The name of branch/tag or commit hash it points to. If names conflict, order of preference is commit &gt; branch &gt; tag. You can disambiguate with &#34;heads/foobar&#34; and &#34;tags/foobar&#34;. If left blank repository&#39;s default branch will be used.
     * 
     */
    public Optional<String> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId", required=true)
    private String repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    private GetRepositoryPathsArgs() {}

    private GetRepositoryPathsArgs(GetRepositoryPathsArgs $) {
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.folderPath = $.folderPath;
        this.pathsInSubtree = $.pathsInSubtree;
        this.ref = $.ref;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryPathsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryPathsArgs $;

        public Builder() {
            $ = new GetRepositoryPathsArgs();
        }

        public Builder(GetRepositoryPathsArgs defaults) {
            $ = new GetRepositoryPathsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetRepositoryPathsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetRepositoryPathsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param folderPath The fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository.
         * 
         * @return builder
         * 
         */
        public Builder folderPath(@Nullable String folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        /**
         * @param pathsInSubtree Flag to determine if files must be retrived recursively. Flag is False by default.
         * 
         * @return builder
         * 
         */
        public Builder pathsInSubtree(@Nullable Boolean pathsInSubtree) {
            $.pathsInSubtree = pathsInSubtree;
            return this;
        }

        /**
         * @param ref The name of branch/tag or commit hash it points to. If names conflict, order of preference is commit &gt; branch &gt; tag. You can disambiguate with &#34;heads/foobar&#34; and &#34;tags/foobar&#34;. If left blank repository&#39;s default branch will be used.
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable String ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        public GetRepositoryPathsArgs build() {
            $.repositoryId = Objects.requireNonNull($.repositoryId, "expected parameter 'repositoryId' to be non-null");
            return $;
        }
    }

}
