// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetTargetDatabasesFilter;
import com.pulumi.oci.DataSafe.outputs.GetTargetDatabasesTargetDatabase;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTargetDatabasesResult {
    private final @Nullable String accessLevel;
    private final @Nullable String associatedResourceId;
    /**
     * @return The OCID of the compartment which contains the Data Safe target database.
     * 
     */
    private final String compartmentId;
    private final @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The database type.
     * 
     */
    private final @Nullable String databaseType;
    /**
     * @return The display name of the target database in Data Safe.
     * 
     */
    private final @Nullable String displayName;
    private final @Nullable List<GetTargetDatabasesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The infrastructure type the database is running on.
     * 
     */
    private final @Nullable String infrastructureType;
    /**
     * @return The current state of the target database in Data Safe.
     * 
     */
    private final @Nullable String state;
    private final @Nullable String targetDatabaseId;
    /**
     * @return The list of target_databases.
     * 
     */
    private final List<GetTargetDatabasesTargetDatabase> targetDatabases;

    @CustomType.Constructor
    private GetTargetDatabasesResult(
        @CustomType.Parameter("accessLevel") @Nullable String accessLevel,
        @CustomType.Parameter("associatedResourceId") @Nullable String associatedResourceId,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("compartmentIdInSubtree") @Nullable Boolean compartmentIdInSubtree,
        @CustomType.Parameter("databaseType") @Nullable String databaseType,
        @CustomType.Parameter("displayName") @Nullable String displayName,
        @CustomType.Parameter("filters") @Nullable List<GetTargetDatabasesFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("infrastructureType") @Nullable String infrastructureType,
        @CustomType.Parameter("state") @Nullable String state,
        @CustomType.Parameter("targetDatabaseId") @Nullable String targetDatabaseId,
        @CustomType.Parameter("targetDatabases") List<GetTargetDatabasesTargetDatabase> targetDatabases) {
        this.accessLevel = accessLevel;
        this.associatedResourceId = associatedResourceId;
        this.compartmentId = compartmentId;
        this.compartmentIdInSubtree = compartmentIdInSubtree;
        this.databaseType = databaseType;
        this.displayName = displayName;
        this.filters = filters;
        this.id = id;
        this.infrastructureType = infrastructureType;
        this.state = state;
        this.targetDatabaseId = targetDatabaseId;
        this.targetDatabases = targetDatabases;
    }

    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    public Optional<String> associatedResourceId() {
        return Optional.ofNullable(this.associatedResourceId);
    }
    /**
     * @return The OCID of the compartment which contains the Data Safe target database.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The database type.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }
    /**
     * @return The display name of the target database in Data Safe.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetTargetDatabasesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The infrastructure type the database is running on.
     * 
     */
    public Optional<String> infrastructureType() {
        return Optional.ofNullable(this.infrastructureType);
    }
    /**
     * @return The current state of the target database in Data Safe.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> targetDatabaseId() {
        return Optional.ofNullable(this.targetDatabaseId);
    }
    /**
     * @return The list of target_databases.
     * 
     */
    public List<GetTargetDatabasesTargetDatabase> targetDatabases() {
        return this.targetDatabases;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetDatabasesResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accessLevel;
        private @Nullable String associatedResourceId;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String databaseType;
        private @Nullable String displayName;
        private @Nullable List<GetTargetDatabasesFilter> filters;
        private String id;
        private @Nullable String infrastructureType;
        private @Nullable String state;
        private @Nullable String targetDatabaseId;
        private List<GetTargetDatabasesTargetDatabase> targetDatabases;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTargetDatabasesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.associatedResourceId = defaults.associatedResourceId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.databaseType = defaults.databaseType;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.infrastructureType = defaults.infrastructureType;
    	      this.state = defaults.state;
    	      this.targetDatabaseId = defaults.targetDatabaseId;
    	      this.targetDatabases = defaults.targetDatabases;
        }

        public Builder accessLevel(@Nullable String accessLevel) {
            this.accessLevel = accessLevel;
            return this;
        }
        public Builder associatedResourceId(@Nullable String associatedResourceId) {
            this.associatedResourceId = associatedResourceId;
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        public Builder databaseType(@Nullable String databaseType) {
            this.databaseType = databaseType;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder filters(@Nullable List<GetTargetDatabasesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetTargetDatabasesFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder infrastructureType(@Nullable String infrastructureType) {
            this.infrastructureType = infrastructureType;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public Builder targetDatabaseId(@Nullable String targetDatabaseId) {
            this.targetDatabaseId = targetDatabaseId;
            return this;
        }
        public Builder targetDatabases(List<GetTargetDatabasesTargetDatabase> targetDatabases) {
            this.targetDatabases = Objects.requireNonNull(targetDatabases);
            return this;
        }
        public Builder targetDatabases(GetTargetDatabasesTargetDatabase... targetDatabases) {
            return targetDatabases(List.of(targetDatabases));
        }        public GetTargetDatabasesResult build() {
            return new GetTargetDatabasesResult(accessLevel, associatedResourceId, compartmentId, compartmentIdInSubtree, databaseType, displayName, filters, id, infrastructureType, state, targetDatabaseId, targetDatabases);
        }
    }
}
