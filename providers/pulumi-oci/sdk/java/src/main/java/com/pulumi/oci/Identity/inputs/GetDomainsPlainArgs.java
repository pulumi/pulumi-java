// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.GetDomainsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainsPlainArgs Empty = new GetDomainsPlainArgs();

    /**
     * The OCID of the compartment (remember that the tenancy is simply the root compartment).
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment (remember that the tenancy is simply the root compartment).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * The mutable display name of the domain
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return The mutable display name of the domain
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetDomainsFilter> filters;

    public Optional<List<GetDomainsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The region specific domain URL
     * 
     */
    @Import(name="homeRegionUrl")
    private @Nullable String homeRegionUrl;

    /**
     * @return The region specific domain URL
     * 
     */
    public Optional<String> homeRegionUrl() {
        return Optional.ofNullable(this.homeRegionUrl);
    }

    /**
     * Indicate if the domain is visible at login screen or not
     * 
     */
    @Import(name="isHiddenOnLogin")
    private @Nullable Boolean isHiddenOnLogin;

    /**
     * @return Indicate if the domain is visible at login screen or not
     * 
     */
    public Optional<Boolean> isHiddenOnLogin() {
        return Optional.ofNullable(this.isHiddenOnLogin);
    }

    /**
     * The domain license type
     * 
     */
    @Import(name="licenseType")
    private @Nullable String licenseType;

    /**
     * @return The domain license type
     * 
     */
    public Optional<String> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * A filter to only return resources that match the given name exactly.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return A filter to only return resources that match the given name exactly.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The domain type
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The domain type
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The region agnostic domain URL
     * 
     */
    @Import(name="url")
    private @Nullable String url;

    /**
     * @return The region agnostic domain URL
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    private GetDomainsPlainArgs() {}

    private GetDomainsPlainArgs(GetDomainsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.homeRegionUrl = $.homeRegionUrl;
        this.isHiddenOnLogin = $.isHiddenOnLogin;
        this.licenseType = $.licenseType;
        this.name = $.name;
        this.state = $.state;
        this.type = $.type;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainsPlainArgs $;

        public Builder() {
            $ = new GetDomainsPlainArgs();
        }

        public Builder(GetDomainsPlainArgs defaults) {
            $ = new GetDomainsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment (remember that the tenancy is simply the root compartment).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName The mutable display name of the domain
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetDomainsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDomainsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param homeRegionUrl The region specific domain URL
         * 
         * @return builder
         * 
         */
        public Builder homeRegionUrl(@Nullable String homeRegionUrl) {
            $.homeRegionUrl = homeRegionUrl;
            return this;
        }

        /**
         * @param isHiddenOnLogin Indicate if the domain is visible at login screen or not
         * 
         * @return builder
         * 
         */
        public Builder isHiddenOnLogin(@Nullable Boolean isHiddenOnLogin) {
            $.isHiddenOnLogin = isHiddenOnLogin;
            return this;
        }

        /**
         * @param licenseType The domain license type
         * 
         * @return builder
         * 
         */
        public Builder licenseType(@Nullable String licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param name A filter to only return resources that match the given name exactly.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param state A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param type The domain type
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        /**
         * @param url The region agnostic domain URL
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable String url) {
            $.url = url;
            return this;
        }

        public GetDomainsPlainArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
