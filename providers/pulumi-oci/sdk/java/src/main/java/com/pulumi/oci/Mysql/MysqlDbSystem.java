// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Mysql.MysqlDbSystemArgs;
import com.pulumi.oci.Mysql.inputs.MysqlDbSystemState;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemAnalyticsCluster;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemBackupPolicy;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemChannel;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemCurrentPlacement;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemDeletionPolicy;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemEndpoint;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemHeatWaveCluster;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemMaintenance;
import com.pulumi.oci.Mysql.outputs.MysqlDbSystemSource;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the Mysql Db System resource in Oracle Cloud Infrastructure MySQL Database service.
 * 
 * Creates and launches a DB System.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * MysqlDbSystems can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:Mysql/mysqlDbSystem:MysqlDbSystem test_mysql_db_system &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Mysql/mysqlDbSystem:MysqlDbSystem")
public class MysqlDbSystem extends com.pulumi.resources.CustomResource {
    /**
     * The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
     * 
     */
    @Export(name="adminPassword", type=String.class, parameters={})
    private Output<String> adminPassword;

    /**
     * @return The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
     * 
     */
    public Output<String> adminPassword() {
        return this.adminPassword;
    }
    /**
     * The username for the administrative user.
     * 
     */
    @Export(name="adminUsername", type=String.class, parameters={})
    private Output<String> adminUsername;

    /**
     * @return The username for the administrative user.
     * 
     */
    public Output<String> adminUsername() {
        return this.adminUsername;
    }
    /**
     * DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
     * 
     */
    @Export(name="analyticsClusters", type=List.class, parameters={MysqlDbSystemAnalyticsCluster.class})
    private Output<List<MysqlDbSystemAnalyticsCluster>> analyticsClusters;

    /**
     * @return DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
     * 
     */
    public Output<List<MysqlDbSystemAnalyticsCluster>> analyticsClusters() {
        return this.analyticsClusters;
    }
    /**
     * The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    @Export(name="availabilityDomain", type=String.class, parameters={})
    private Output<String> availabilityDomain;

    /**
     * @return The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    public Output<String> availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * (Updatable) Backup policy as optionally used for DB System Creation.
     * 
     */
    @Export(name="backupPolicy", type=MysqlDbSystemBackupPolicy.class, parameters={})
    private Output<MysqlDbSystemBackupPolicy> backupPolicy;

    /**
     * @return (Updatable) Backup policy as optionally used for DB System Creation.
     * 
     */
    public Output<MysqlDbSystemBackupPolicy> backupPolicy() {
        return this.backupPolicy;
    }
    /**
     * A list with a summary of all the Channels attached to the DB System.
     * 
     */
    @Export(name="channels", type=List.class, parameters={MysqlDbSystemChannel.class})
    private Output<List<MysqlDbSystemChannel>> channels;

    /**
     * @return A list with a summary of all the Channels attached to the DB System.
     * 
     */
    public Output<List<MysqlDbSystemChannel>> channels() {
        return this.channels;
    }
    /**
     * The OCID of the compartment.
     * 
     */
    @Export(name="compartmentId", type=String.class, parameters={})
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * The OCID of the Configuration to be used for this DB System.
     * 
     */
    @Export(name="configurationId", type=String.class, parameters={})
    private Output<String> configurationId;

    /**
     * @return The OCID of the Configuration to be used for this DB System.
     * 
     */
    public Output<String> configurationId() {
        return this.configurationId;
    }
    /**
     * (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    @Export(name="crashRecovery", type=String.class, parameters={})
    private Output<String> crashRecovery;

    /**
     * @return (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    public Output<String> crashRecovery() {
        return this.crashRecovery;
    }
    /**
     * The availability domain and fault domain a DB System is placed in.
     * 
     */
    @Export(name="currentPlacements", type=List.class, parameters={MysqlDbSystemCurrentPlacement.class})
    private Output<List<MysqlDbSystemCurrentPlacement>> currentPlacements;

    /**
     * @return The availability domain and fault domain a DB System is placed in.
     * 
     */
    public Output<List<MysqlDbSystemCurrentPlacement>> currentPlacements() {
        return this.currentPlacements;
    }
    /**
     * Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
     * 
     */
    @Export(name="dataStorageSizeInGb", type=Integer.class, parameters={})
    private Output<Integer> dataStorageSizeInGb;

    /**
     * @return Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
     * 
     */
    public Output<Integer> dataStorageSizeInGb() {
        return this.dataStorageSizeInGb;
    }
    /**
     * (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="definedTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,Object>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
     * 
     */
    @Export(name="deletionPolicies", type=List.class, parameters={MysqlDbSystemDeletionPolicy.class})
    private Output<List<MysqlDbSystemDeletionPolicy>> deletionPolicies;

    /**
     * @return (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
     * 
     */
    public Output<List<MysqlDbSystemDeletionPolicy>> deletionPolicies() {
        return this.deletionPolicies;
    }
    /**
     * (Updatable) User-provided data about the DB System.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return (Updatable) User-provided data about the DB System.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * (Updatable) The user-friendly name for the DB System. It does not have to be unique.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return (Updatable) The user-friendly name for the DB System. It does not have to be unique.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The network endpoints available for this DB System.
     * 
     */
    @Export(name="endpoints", type=List.class, parameters={MysqlDbSystemEndpoint.class})
    private Output<List<MysqlDbSystemEndpoint>> endpoints;

    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    public Output<List<MysqlDbSystemEndpoint>> endpoints() {
        return this.endpoints;
    }
    /**
     * The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    @Export(name="faultDomain", type=String.class, parameters={})
    private Output<String> faultDomain;

    /**
     * @return The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    public Output<String> faultDomain() {
        return this.faultDomain;
    }
    /**
     * (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="freeformTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,Object>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * A summary of a HeatWave cluster.
     * 
     */
    @Export(name="heatWaveClusters", type=List.class, parameters={MysqlDbSystemHeatWaveCluster.class})
    private Output<List<MysqlDbSystemHeatWaveCluster>> heatWaveClusters;

    /**
     * @return A summary of a HeatWave cluster.
     * 
     */
    public Output<List<MysqlDbSystemHeatWaveCluster>> heatWaveClusters() {
        return this.heatWaveClusters;
    }
    /**
     * The hostname for the primary endpoint of the DB System. Used for DNS.
     * 
     */
    @Export(name="hostnameLabel", type=String.class, parameters={})
    private Output<String> hostnameLabel;

    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS.
     * 
     */
    public Output<String> hostnameLabel() {
        return this.hostnameLabel;
    }
    /**
     * The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    @Export(name="ipAddress", type=String.class, parameters={})
    private Output<String> ipAddress;

    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. If you don&#39;t specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public Output<String> ipAddress() {
        return this.ipAddress;
    }
    /**
     * DEPRECATED -- please use `isHeatWaveClusterAttached` instead. If the DB System has an Analytics Cluster attached.
     * 
     */
    @Export(name="isAnalyticsClusterAttached", type=Boolean.class, parameters={})
    private Output<Boolean> isAnalyticsClusterAttached;

    /**
     * @return DEPRECATED -- please use `isHeatWaveClusterAttached` instead. If the DB System has an Analytics Cluster attached.
     * 
     */
    public Output<Boolean> isAnalyticsClusterAttached() {
        return this.isAnalyticsClusterAttached;
    }
    /**
     * If the DB System has a HeatWave Cluster attached.
     * 
     */
    @Export(name="isHeatWaveClusterAttached", type=Boolean.class, parameters={})
    private Output<Boolean> isHeatWaveClusterAttached;

    /**
     * @return If the DB System has a HeatWave Cluster attached.
     * 
     */
    public Output<Boolean> isHeatWaveClusterAttached() {
        return this.isHeatWaveClusterAttached;
    }
    /**
     * (Updatable) Specifies if the DB System is highly available.
     * 
     */
    @Export(name="isHighlyAvailable", type=Boolean.class, parameters={})
    private Output<Boolean> isHighlyAvailable;

    /**
     * @return (Updatable) Specifies if the DB System is highly available.
     * 
     */
    public Output<Boolean> isHighlyAvailable() {
        return this.isHighlyAvailable;
    }
    /**
     * Additional information about the current lifecycleState.
     * 
     */
    @Export(name="lifecycleDetails", type=String.class, parameters={})
    private Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public Output<String> lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * (Updatable) The Maintenance Policy for the DB System. `maintenance` and `backup_policy` cannot be updated in the same request.
     * 
     */
    @Export(name="maintenance", type=MysqlDbSystemMaintenance.class, parameters={})
    private Output<MysqlDbSystemMaintenance> maintenance;

    /**
     * @return (Updatable) The Maintenance Policy for the DB System. `maintenance` and `backup_policy` cannot be updated in the same request.
     * 
     */
    public Output<MysqlDbSystemMaintenance> maintenance() {
        return this.maintenance;
    }
    /**
     * Name of the MySQL Version in use for the DB System.
     * 
     * @deprecated
     * The &#39;mysql_version&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_version' field has been deprecated and may be removed in a future version. Do not use this field. */
    @Export(name="mysqlVersion", type=String.class, parameters={})
    private Output<String> mysqlVersion;

    /**
     * @return Name of the MySQL Version in use for the DB System.
     * 
     */
    public Output<String> mysqlVersion() {
        return this.mysqlVersion;
    }
    /**
     * The port for primary endpoint of the DB System to listen on.
     * 
     */
    @Export(name="port", type=Integer.class, parameters={})
    private Output<Integer> port;

    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
     * 
     */
    @Export(name="portX", type=Integer.class, parameters={})
    private Output<Integer> portX;

    /**
     * @return The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
     * 
     */
    public Output<Integer> portX() {
        return this.portX;
    }
    /**
     * The name of the shape. The shape determines the resources allocated
     * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
     * 
     */
    @Export(name="shapeName", type=String.class, parameters={})
    private Output<String> shapeName;

    /**
     * @return The name of the shape. The shape determines the resources allocated
     * * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
     * 
     */
    public Output<String> shapeName() {
        return this.shapeName;
    }
    /**
     * It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
     * 
     */
    @Export(name="shutdownType", type=String.class, parameters={})
    private Output</* @Nullable */ String> shutdownType;

    /**
     * @return It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
     * 
     */
    public Output<Optional<String>> shutdownType() {
        return Codegen.optional(this.shutdownType);
    }
    /**
     * Parameters detailing how to provision the initial data of the system.
     * 
     */
    @Export(name="source", type=MysqlDbSystemSource.class, parameters={})
    private Output<MysqlDbSystemSource> source;

    /**
     * @return Parameters detailing how to provision the initial data of the system.
     * 
     */
    public Output<MysqlDbSystemSource> source() {
        return this.source;
    }
    /**
     * (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The OCID of the subnet the DB System is associated with.
     * 
     */
    @Export(name="subnetId", type=String.class, parameters={})
    private Output<String> subnetId;

    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }
    /**
     * The date and time the DB System was created.
     * 
     */
    @Export(name="timeCreated", type=String.class, parameters={})
    private Output<String> timeCreated;

    /**
     * @return The date and time the DB System was created.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * The time the DB System was last updated.
     * 
     */
    @Export(name="timeUpdated", type=String.class, parameters={})
    private Output<String> timeUpdated;

    /**
     * @return The time the DB System was last updated.
     * 
     */
    public Output<String> timeUpdated() {
        return this.timeUpdated;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MysqlDbSystem(String name) {
        this(name, MysqlDbSystemArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MysqlDbSystem(String name, MysqlDbSystemArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MysqlDbSystem(String name, MysqlDbSystemArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Mysql/mysqlDbSystem:MysqlDbSystem", name, args == null ? MysqlDbSystemArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MysqlDbSystem(String name, Output<String> id, @Nullable MysqlDbSystemState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Mysql/mysqlDbSystem:MysqlDbSystem", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MysqlDbSystem get(String name, Output<String> id, @Nullable MysqlDbSystemState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MysqlDbSystem(name, id, state, options);
    }
}
