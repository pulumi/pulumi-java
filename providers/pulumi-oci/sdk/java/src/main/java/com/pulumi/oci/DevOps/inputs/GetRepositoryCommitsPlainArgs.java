// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.GetRepositoryCommitsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryCommitsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryCommitsPlainArgs Empty = new GetRepositoryCommitsPlainArgs();

    /**
     * A filter to return any commits that are pushed by the requested author.
     * 
     */
    @Import(name="authorName")
    private @Nullable String authorName;

    /**
     * @return A filter to return any commits that are pushed by the requested author.
     * 
     */
    public Optional<String> authorName() {
        return Optional.ofNullable(this.authorName);
    }

    /**
     * A filter to return any commits that contains the given message.
     * 
     */
    @Import(name="commitMessage")
    private @Nullable String commitMessage;

    /**
     * @return A filter to return any commits that contains the given message.
     * 
     */
    public Optional<String> commitMessage() {
        return Optional.ofNullable(this.commitMessage);
    }

    /**
     * A filter to exclude commits that match the given reference name.
     * 
     */
    @Import(name="excludeRefName")
    private @Nullable String excludeRefName;

    /**
     * @return A filter to exclude commits that match the given reference name.
     * 
     */
    public Optional<String> excludeRefName() {
        return Optional.ofNullable(this.excludeRefName);
    }

    /**
     * A filter to return only commits that affect any of the specified paths.
     * 
     */
    @Import(name="filePath")
    private @Nullable String filePath;

    /**
     * @return A filter to return only commits that affect any of the specified paths.
     * 
     */
    public Optional<String> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    @Import(name="filters")
    private @Nullable List<GetRepositoryCommitsFilter> filters;

    public Optional<List<GetRepositoryCommitsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources that match the given reference name.
     * 
     */
    @Import(name="refName")
    private @Nullable String refName;

    /**
     * @return A filter to return only resources that match the given reference name.
     * 
     */
    public Optional<String> refName() {
        return Optional.ofNullable(this.refName);
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId", required=true)
    private String repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    /**
     * A filter to return commits only created after the specified timestamp value.
     * 
     */
    @Import(name="timestampGreaterThanOrEqualTo")
    private @Nullable String timestampGreaterThanOrEqualTo;

    /**
     * @return A filter to return commits only created after the specified timestamp value.
     * 
     */
    public Optional<String> timestampGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timestampGreaterThanOrEqualTo);
    }

    /**
     * A filter to return commits only created before the specified timestamp value.
     * 
     */
    @Import(name="timestampLessThanOrEqualTo")
    private @Nullable String timestampLessThanOrEqualTo;

    /**
     * @return A filter to return commits only created before the specified timestamp value.
     * 
     */
    public Optional<String> timestampLessThanOrEqualTo() {
        return Optional.ofNullable(this.timestampLessThanOrEqualTo);
    }

    private GetRepositoryCommitsPlainArgs() {}

    private GetRepositoryCommitsPlainArgs(GetRepositoryCommitsPlainArgs $) {
        this.authorName = $.authorName;
        this.commitMessage = $.commitMessage;
        this.excludeRefName = $.excludeRefName;
        this.filePath = $.filePath;
        this.filters = $.filters;
        this.refName = $.refName;
        this.repositoryId = $.repositoryId;
        this.timestampGreaterThanOrEqualTo = $.timestampGreaterThanOrEqualTo;
        this.timestampLessThanOrEqualTo = $.timestampLessThanOrEqualTo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryCommitsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryCommitsPlainArgs $;

        public Builder() {
            $ = new GetRepositoryCommitsPlainArgs();
        }

        public Builder(GetRepositoryCommitsPlainArgs defaults) {
            $ = new GetRepositoryCommitsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorName A filter to return any commits that are pushed by the requested author.
         * 
         * @return builder
         * 
         */
        public Builder authorName(@Nullable String authorName) {
            $.authorName = authorName;
            return this;
        }

        /**
         * @param commitMessage A filter to return any commits that contains the given message.
         * 
         * @return builder
         * 
         */
        public Builder commitMessage(@Nullable String commitMessage) {
            $.commitMessage = commitMessage;
            return this;
        }

        /**
         * @param excludeRefName A filter to exclude commits that match the given reference name.
         * 
         * @return builder
         * 
         */
        public Builder excludeRefName(@Nullable String excludeRefName) {
            $.excludeRefName = excludeRefName;
            return this;
        }

        /**
         * @param filePath A filter to return only commits that affect any of the specified paths.
         * 
         * @return builder
         * 
         */
        public Builder filePath(@Nullable String filePath) {
            $.filePath = filePath;
            return this;
        }

        public Builder filters(@Nullable List<GetRepositoryCommitsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetRepositoryCommitsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param refName A filter to return only resources that match the given reference name.
         * 
         * @return builder
         * 
         */
        public Builder refName(@Nullable String refName) {
            $.refName = refName;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param timestampGreaterThanOrEqualTo A filter to return commits only created after the specified timestamp value.
         * 
         * @return builder
         * 
         */
        public Builder timestampGreaterThanOrEqualTo(@Nullable String timestampGreaterThanOrEqualTo) {
            $.timestampGreaterThanOrEqualTo = timestampGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timestampLessThanOrEqualTo A filter to return commits only created before the specified timestamp value.
         * 
         * @return builder
         * 
         */
        public Builder timestampLessThanOrEqualTo(@Nullable String timestampLessThanOrEqualTo) {
            $.timestampLessThanOrEqualTo = timestampLessThanOrEqualTo;
            return this;
        }

        public GetRepositoryCommitsPlainArgs build() {
            $.repositoryId = Objects.requireNonNull($.repositoryId, "expected parameter 'repositoryId' to be non-null");
            return $;
        }
    }

}
