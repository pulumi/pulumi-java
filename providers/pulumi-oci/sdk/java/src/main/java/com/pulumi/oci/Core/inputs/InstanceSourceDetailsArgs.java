// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceSourceDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceSourceDetailsArgs Empty = new InstanceSourceDetailsArgs();

    /**
     * (Updatable) The size of the boot volume in GBs. Minimum value is 50 GB and maximum value is 32,768 GB (32 TB).
     * 
     */
    @Import(name="bootVolumeSizeInGbs")
    private @Nullable Output<String> bootVolumeSizeInGbs;

    /**
     * @return (Updatable) The size of the boot volume in GBs. Minimum value is 50 GB and maximum value is 32,768 GB (32 TB).
     * 
     */
    public Optional<Output<String>> bootVolumeSizeInGbs() {
        return Optional.ofNullable(this.bootVolumeSizeInGbs);
    }

    /**
     * The OCID of the Key Management key to assign as the master encryption key for the boot volume.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The OCID of the Key Management key to assign as the master encryption key for the boot volume.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The OCID of an image or a boot volume to use, depending on the value of `source_type`.
     * 
     */
    @Import(name="sourceId", required=true)
    private Output<String> sourceId;

    /**
     * @return The OCID of an image or a boot volume to use, depending on the value of `source_type`.
     * 
     */
    public Output<String> sourceId() {
        return this.sourceId;
    }

    /**
     * The source type for the instance. Use `image` when specifying the image OCID. Use `bootVolume` when specifying the boot volume OCID.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return The source type for the instance. Use `image` when specifying the image OCID. Use `bootVolume` when specifying the boot volume OCID.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    private InstanceSourceDetailsArgs() {}

    private InstanceSourceDetailsArgs(InstanceSourceDetailsArgs $) {
        this.bootVolumeSizeInGbs = $.bootVolumeSizeInGbs;
        this.kmsKeyId = $.kmsKeyId;
        this.sourceId = $.sourceId;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceSourceDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceSourceDetailsArgs $;

        public Builder() {
            $ = new InstanceSourceDetailsArgs();
        }

        public Builder(InstanceSourceDetailsArgs defaults) {
            $ = new InstanceSourceDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootVolumeSizeInGbs (Updatable) The size of the boot volume in GBs. Minimum value is 50 GB and maximum value is 32,768 GB (32 TB).
         * 
         * @return builder
         * 
         */
        public Builder bootVolumeSizeInGbs(@Nullable Output<String> bootVolumeSizeInGbs) {
            $.bootVolumeSizeInGbs = bootVolumeSizeInGbs;
            return this;
        }

        /**
         * @param bootVolumeSizeInGbs (Updatable) The size of the boot volume in GBs. Minimum value is 50 GB and maximum value is 32,768 GB (32 TB).
         * 
         * @return builder
         * 
         */
        public Builder bootVolumeSizeInGbs(String bootVolumeSizeInGbs) {
            return bootVolumeSizeInGbs(Output.of(bootVolumeSizeInGbs));
        }

        /**
         * @param kmsKeyId The OCID of the Key Management key to assign as the master encryption key for the boot volume.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The OCID of the Key Management key to assign as the master encryption key for the boot volume.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param sourceId The OCID of an image or a boot volume to use, depending on the value of `source_type`.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param sourceId The OCID of an image or a boot volume to use, depending on the value of `source_type`.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        /**
         * @param sourceType The source type for the instance. Use `image` when specifying the image OCID. Use `bootVolume` when specifying the boot volume OCID.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The source type for the instance. Use `image` when specifying the image OCID. Use `bootVolume` when specifying the boot volume OCID.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public InstanceSourceDetailsArgs build() {
            $.sourceId = Objects.requireNonNull($.sourceId, "expected parameter 'sourceId' to be non-null");
            $.sourceType = Objects.requireNonNull($.sourceType, "expected parameter 'sourceType' to be non-null");
            return $;
        }
    }

}
