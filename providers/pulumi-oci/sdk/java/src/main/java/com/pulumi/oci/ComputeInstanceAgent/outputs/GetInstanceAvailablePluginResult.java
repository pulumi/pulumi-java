// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ComputeInstanceAgent.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ComputeInstanceAgent.outputs.GetInstanceAvailablePluginAvailablePlugin;
import com.pulumi.oci.ComputeInstanceAgent.outputs.GetInstanceAvailablePluginFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceAvailablePluginResult {
    /**
     * @return The list of available_plugins.
     * 
     */
    private final List<GetInstanceAvailablePluginAvailablePlugin> availablePlugins;
    private final String compartmentId;
    private final @Nullable List<GetInstanceAvailablePluginFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The plugin name
     * 
     */
    private final @Nullable String name;
    private final String osName;
    private final String osVersion;

    @CustomType.Constructor
    private GetInstanceAvailablePluginResult(
        @CustomType.Parameter("availablePlugins") List<GetInstanceAvailablePluginAvailablePlugin> availablePlugins,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("filters") @Nullable List<GetInstanceAvailablePluginFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("osName") String osName,
        @CustomType.Parameter("osVersion") String osVersion) {
        this.availablePlugins = availablePlugins;
        this.compartmentId = compartmentId;
        this.filters = filters;
        this.id = id;
        this.name = name;
        this.osName = osName;
        this.osVersion = osVersion;
    }

    /**
     * @return The list of available_plugins.
     * 
     */
    public List<GetInstanceAvailablePluginAvailablePlugin> availablePlugins() {
        return this.availablePlugins;
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetInstanceAvailablePluginFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The plugin name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public String osName() {
        return this.osName;
    }
    public String osVersion() {
        return this.osVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceAvailablePluginResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetInstanceAvailablePluginAvailablePlugin> availablePlugins;
        private String compartmentId;
        private @Nullable List<GetInstanceAvailablePluginFilter> filters;
        private String id;
        private @Nullable String name;
        private String osName;
        private String osVersion;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceAvailablePluginResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availablePlugins = defaults.availablePlugins;
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.osName = defaults.osName;
    	      this.osVersion = defaults.osVersion;
        }

        public Builder availablePlugins(List<GetInstanceAvailablePluginAvailablePlugin> availablePlugins) {
            this.availablePlugins = Objects.requireNonNull(availablePlugins);
            return this;
        }
        public Builder availablePlugins(GetInstanceAvailablePluginAvailablePlugin... availablePlugins) {
            return availablePlugins(List.of(availablePlugins));
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder filters(@Nullable List<GetInstanceAvailablePluginFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetInstanceAvailablePluginFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder osName(String osName) {
            this.osName = Objects.requireNonNull(osName);
            return this;
        }
        public Builder osVersion(String osVersion) {
            this.osVersion = Objects.requireNonNull(osVersion);
            return this;
        }        public GetInstanceAvailablePluginResult build() {
            return new GetInstanceAvailablePluginResult(availablePlugins, compartmentId, filters, id, name, osName, osVersion);
        }
    }
}
