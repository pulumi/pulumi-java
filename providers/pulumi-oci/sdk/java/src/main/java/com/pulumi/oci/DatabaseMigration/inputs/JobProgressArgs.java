// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DatabaseMigration.inputs.JobProgressPhaseArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobProgressArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobProgressArgs Empty = new JobProgressArgs();

    /**
     * Current phase of the job.
     * 
     */
    @Import(name="currentPhase")
    private @Nullable Output<String> currentPhase;

    /**
     * @return Current phase of the job.
     * 
     */
    public Optional<Output<String>> currentPhase() {
        return Optional.ofNullable(this.currentPhase);
    }

    /**
     * Current status of the job.
     * 
     */
    @Import(name="currentStatus")
    private @Nullable Output<String> currentStatus;

    /**
     * @return Current status of the job.
     * 
     */
    public Optional<Output<String>> currentStatus() {
        return Optional.ofNullable(this.currentStatus);
    }

    /**
     * List of phase status for the job.
     * 
     */
    @Import(name="phases")
    private @Nullable Output<List<JobProgressPhaseArgs>> phases;

    /**
     * @return List of phase status for the job.
     * 
     */
    public Optional<Output<List<JobProgressPhaseArgs>>> phases() {
        return Optional.ofNullable(this.phases);
    }

    private JobProgressArgs() {}

    private JobProgressArgs(JobProgressArgs $) {
        this.currentPhase = $.currentPhase;
        this.currentStatus = $.currentStatus;
        this.phases = $.phases;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobProgressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobProgressArgs $;

        public Builder() {
            $ = new JobProgressArgs();
        }

        public Builder(JobProgressArgs defaults) {
            $ = new JobProgressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentPhase Current phase of the job.
         * 
         * @return builder
         * 
         */
        public Builder currentPhase(@Nullable Output<String> currentPhase) {
            $.currentPhase = currentPhase;
            return this;
        }

        /**
         * @param currentPhase Current phase of the job.
         * 
         * @return builder
         * 
         */
        public Builder currentPhase(String currentPhase) {
            return currentPhase(Output.of(currentPhase));
        }

        /**
         * @param currentStatus Current status of the job.
         * 
         * @return builder
         * 
         */
        public Builder currentStatus(@Nullable Output<String> currentStatus) {
            $.currentStatus = currentStatus;
            return this;
        }

        /**
         * @param currentStatus Current status of the job.
         * 
         * @return builder
         * 
         */
        public Builder currentStatus(String currentStatus) {
            return currentStatus(Output.of(currentStatus));
        }

        /**
         * @param phases List of phase status for the job.
         * 
         * @return builder
         * 
         */
        public Builder phases(@Nullable Output<List<JobProgressPhaseArgs>> phases) {
            $.phases = phases;
            return this;
        }

        /**
         * @param phases List of phase status for the job.
         * 
         * @return builder
         * 
         */
        public Builder phases(List<JobProgressPhaseArgs> phases) {
            return phases(Output.of(phases));
        }

        /**
         * @param phases List of phase status for the job.
         * 
         * @return builder
         * 
         */
        public Builder phases(JobProgressPhaseArgs... phases) {
            return phases(List.of(phases));
        }

        public JobProgressArgs build() {
            return $;
        }
    }

}
