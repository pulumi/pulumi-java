// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticAdvisory;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticEvaluate;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticHighRisk;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticLowRisk;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticMediumRisk;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticPass;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityAssessmentStatistic {
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private final @Nullable List<SecurityAssessmentStatisticAdvisory> advisories;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private final @Nullable List<SecurityAssessmentStatisticEvaluate> evaluates;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private final @Nullable List<SecurityAssessmentStatisticHighRisk> highRisks;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private final @Nullable List<SecurityAssessmentStatisticLowRisk> lowRisks;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private final @Nullable List<SecurityAssessmentStatisticMediumRisk> mediumRisks;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private final @Nullable List<SecurityAssessmentStatisticPass> passes;
    /**
     * @return The total number of targets in this security assessment.
     * 
     */
    private final @Nullable Integer targetsCount;

    @CustomType.Constructor
    private SecurityAssessmentStatistic(
        @CustomType.Parameter("advisories") @Nullable List<SecurityAssessmentStatisticAdvisory> advisories,
        @CustomType.Parameter("evaluates") @Nullable List<SecurityAssessmentStatisticEvaluate> evaluates,
        @CustomType.Parameter("highRisks") @Nullable List<SecurityAssessmentStatisticHighRisk> highRisks,
        @CustomType.Parameter("lowRisks") @Nullable List<SecurityAssessmentStatisticLowRisk> lowRisks,
        @CustomType.Parameter("mediumRisks") @Nullable List<SecurityAssessmentStatisticMediumRisk> mediumRisks,
        @CustomType.Parameter("passes") @Nullable List<SecurityAssessmentStatisticPass> passes,
        @CustomType.Parameter("targetsCount") @Nullable Integer targetsCount) {
        this.advisories = advisories;
        this.evaluates = evaluates;
        this.highRisks = highRisks;
        this.lowRisks = lowRisks;
        this.mediumRisks = mediumRisks;
        this.passes = passes;
        this.targetsCount = targetsCount;
    }

    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticAdvisory> advisories() {
        return this.advisories == null ? List.of() : this.advisories;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticEvaluate> evaluates() {
        return this.evaluates == null ? List.of() : this.evaluates;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticHighRisk> highRisks() {
        return this.highRisks == null ? List.of() : this.highRisks;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticLowRisk> lowRisks() {
        return this.lowRisks == null ? List.of() : this.lowRisks;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticMediumRisk> mediumRisks() {
        return this.mediumRisks == null ? List.of() : this.mediumRisks;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticPass> passes() {
        return this.passes == null ? List.of() : this.passes;
    }
    /**
     * @return The total number of targets in this security assessment.
     * 
     */
    public Optional<Integer> targetsCount() {
        return Optional.ofNullable(this.targetsCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityAssessmentStatistic defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<SecurityAssessmentStatisticAdvisory> advisories;
        private @Nullable List<SecurityAssessmentStatisticEvaluate> evaluates;
        private @Nullable List<SecurityAssessmentStatisticHighRisk> highRisks;
        private @Nullable List<SecurityAssessmentStatisticLowRisk> lowRisks;
        private @Nullable List<SecurityAssessmentStatisticMediumRisk> mediumRisks;
        private @Nullable List<SecurityAssessmentStatisticPass> passes;
        private @Nullable Integer targetsCount;

        public Builder() {
    	      // Empty
        }

        public Builder(SecurityAssessmentStatistic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advisories = defaults.advisories;
    	      this.evaluates = defaults.evaluates;
    	      this.highRisks = defaults.highRisks;
    	      this.lowRisks = defaults.lowRisks;
    	      this.mediumRisks = defaults.mediumRisks;
    	      this.passes = defaults.passes;
    	      this.targetsCount = defaults.targetsCount;
        }

        public Builder advisories(@Nullable List<SecurityAssessmentStatisticAdvisory> advisories) {
            this.advisories = advisories;
            return this;
        }
        public Builder advisories(SecurityAssessmentStatisticAdvisory... advisories) {
            return advisories(List.of(advisories));
        }
        public Builder evaluates(@Nullable List<SecurityAssessmentStatisticEvaluate> evaluates) {
            this.evaluates = evaluates;
            return this;
        }
        public Builder evaluates(SecurityAssessmentStatisticEvaluate... evaluates) {
            return evaluates(List.of(evaluates));
        }
        public Builder highRisks(@Nullable List<SecurityAssessmentStatisticHighRisk> highRisks) {
            this.highRisks = highRisks;
            return this;
        }
        public Builder highRisks(SecurityAssessmentStatisticHighRisk... highRisks) {
            return highRisks(List.of(highRisks));
        }
        public Builder lowRisks(@Nullable List<SecurityAssessmentStatisticLowRisk> lowRisks) {
            this.lowRisks = lowRisks;
            return this;
        }
        public Builder lowRisks(SecurityAssessmentStatisticLowRisk... lowRisks) {
            return lowRisks(List.of(lowRisks));
        }
        public Builder mediumRisks(@Nullable List<SecurityAssessmentStatisticMediumRisk> mediumRisks) {
            this.mediumRisks = mediumRisks;
            return this;
        }
        public Builder mediumRisks(SecurityAssessmentStatisticMediumRisk... mediumRisks) {
            return mediumRisks(List.of(mediumRisks));
        }
        public Builder passes(@Nullable List<SecurityAssessmentStatisticPass> passes) {
            this.passes = passes;
            return this;
        }
        public Builder passes(SecurityAssessmentStatisticPass... passes) {
            return passes(List.of(passes));
        }
        public Builder targetsCount(@Nullable Integer targetsCount) {
            this.targetsCount = targetsCount;
            return this;
        }        public SecurityAssessmentStatistic build() {
            return new SecurityAssessmentStatistic(advisories, evaluates, highRisks, lowRisks, mediumRisks, passes, targetsCount);
        }
    }
}
