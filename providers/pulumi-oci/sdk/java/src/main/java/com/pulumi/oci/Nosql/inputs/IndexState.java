// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Nosql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Nosql.inputs.IndexKeyArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IndexState extends com.pulumi.resources.ResourceArgs {

    public static final IndexState Empty = new IndexState();

    /**
     * The OCID of the table&#39;s compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table&#39;s compartmentId.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the table&#39;s compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table&#39;s compartmentId.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
     * 
     */
    @Import(name="isIfNotExists")
    private @Nullable Output<Boolean> isIfNotExists;

    /**
     * @return If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
     * 
     */
    public Optional<Output<Boolean>> isIfNotExists() {
        return Optional.ofNullable(this.isIfNotExists);
    }

    /**
     * A set of keys for a secondary index.
     * 
     */
    @Import(name="keys")
    private @Nullable Output<List<IndexKeyArgs>> keys;

    /**
     * @return A set of keys for a secondary index.
     * 
     */
    public Optional<Output<List<IndexKeyArgs>>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * A message describing the current state in more detail.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return A message describing the current state in more detail.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * Index name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Index name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The state of an index.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of an index.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * the OCID of the table to which this index belongs.
     * 
     */
    @Import(name="tableId")
    private @Nullable Output<String> tableId;

    /**
     * @return the OCID of the table to which this index belongs.
     * 
     */
    public Optional<Output<String>> tableId() {
        return Optional.ofNullable(this.tableId);
    }

    /**
     * The name of the table to which this index belongs.
     * 
     */
    @Import(name="tableName")
    private @Nullable Output<String> tableName;

    /**
     * @return The name of the table to which this index belongs.
     * 
     */
    public Optional<Output<String>> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    /**
     * A table name within the compartment, or a table OCID.
     * 
     */
    @Import(name="tableNameOrId")
    private @Nullable Output<String> tableNameOrId;

    /**
     * @return A table name within the compartment, or a table OCID.
     * 
     */
    public Optional<Output<String>> tableNameOrId() {
        return Optional.ofNullable(this.tableNameOrId);
    }

    private IndexState() {}

    private IndexState(IndexState $) {
        this.compartmentId = $.compartmentId;
        this.isIfNotExists = $.isIfNotExists;
        this.keys = $.keys;
        this.lifecycleDetails = $.lifecycleDetails;
        this.name = $.name;
        this.state = $.state;
        this.tableId = $.tableId;
        this.tableName = $.tableName;
        this.tableNameOrId = $.tableNameOrId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndexState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndexState $;

        public Builder() {
            $ = new IndexState();
        }

        public Builder(IndexState defaults) {
            $ = new IndexState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the table&#39;s compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table&#39;s compartmentId.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the table&#39;s compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table&#39;s compartmentId.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param isIfNotExists If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
         * 
         * @return builder
         * 
         */
        public Builder isIfNotExists(@Nullable Output<Boolean> isIfNotExists) {
            $.isIfNotExists = isIfNotExists;
            return this;
        }

        /**
         * @param isIfNotExists If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
         * 
         * @return builder
         * 
         */
        public Builder isIfNotExists(Boolean isIfNotExists) {
            return isIfNotExists(Output.of(isIfNotExists));
        }

        /**
         * @param keys A set of keys for a secondary index.
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable Output<List<IndexKeyArgs>> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys A set of keys for a secondary index.
         * 
         * @return builder
         * 
         */
        public Builder keys(List<IndexKeyArgs> keys) {
            return keys(Output.of(keys));
        }

        /**
         * @param keys A set of keys for a secondary index.
         * 
         * @return builder
         * 
         */
        public Builder keys(IndexKeyArgs... keys) {
            return keys(List.of(keys));
        }

        /**
         * @param lifecycleDetails A message describing the current state in more detail.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails A message describing the current state in more detail.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param name Index name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Index name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param state The state of an index.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of an index.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tableId the OCID of the table to which this index belongs.
         * 
         * @return builder
         * 
         */
        public Builder tableId(@Nullable Output<String> tableId) {
            $.tableId = tableId;
            return this;
        }

        /**
         * @param tableId the OCID of the table to which this index belongs.
         * 
         * @return builder
         * 
         */
        public Builder tableId(String tableId) {
            return tableId(Output.of(tableId));
        }

        /**
         * @param tableName The name of the table to which this index belongs.
         * 
         * @return builder
         * 
         */
        public Builder tableName(@Nullable Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The name of the table to which this index belongs.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        /**
         * @param tableNameOrId A table name within the compartment, or a table OCID.
         * 
         * @return builder
         * 
         */
        public Builder tableNameOrId(@Nullable Output<String> tableNameOrId) {
            $.tableNameOrId = tableNameOrId;
            return this;
        }

        /**
         * @param tableNameOrId A table name within the compartment, or a table OCID.
         * 
         * @return builder
         * 
         */
        public Builder tableNameOrId(String tableNameOrId) {
            return tableNameOrId(Output.of(tableNameOrId));
        }

        public IndexState build() {
            return $;
        }
    }

}
