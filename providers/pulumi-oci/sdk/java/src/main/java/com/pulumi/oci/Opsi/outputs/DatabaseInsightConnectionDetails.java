// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Opsi.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Opsi.outputs.DatabaseInsightConnectionDetailsHost;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseInsightConnectionDetails {
    /**
     * @return Name of the listener host that will be used to create the connect string to the database.
     * 
     */
    private final @Nullable String hostName;
    /**
     * @return List of hosts and port for private endpoint accessed database resource.
     * 
     */
    private final @Nullable List<DatabaseInsightConnectionDetailsHost> hosts;
    /**
     * @return Listener port number used for connection requests.
     * 
     */
    private final @Nullable Integer port;
    /**
     * @return Protocol used for connection requests for private endpoint accssed database resource.
     * 
     */
    private final @Nullable String protocol;
    /**
     * @return Database service name used for connection requests.
     * 
     */
    private final @Nullable String serviceName;

    @CustomType.Constructor
    private DatabaseInsightConnectionDetails(
        @CustomType.Parameter("hostName") @Nullable String hostName,
        @CustomType.Parameter("hosts") @Nullable List<DatabaseInsightConnectionDetailsHost> hosts,
        @CustomType.Parameter("port") @Nullable Integer port,
        @CustomType.Parameter("protocol") @Nullable String protocol,
        @CustomType.Parameter("serviceName") @Nullable String serviceName) {
        this.hostName = hostName;
        this.hosts = hosts;
        this.port = port;
        this.protocol = protocol;
        this.serviceName = serviceName;
    }

    /**
     * @return Name of the listener host that will be used to create the connect string to the database.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return List of hosts and port for private endpoint accessed database resource.
     * 
     */
    public List<DatabaseInsightConnectionDetailsHost> hosts() {
        return this.hosts == null ? List.of() : this.hosts;
    }
    /**
     * @return Listener port number used for connection requests.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Protocol used for connection requests for private endpoint accssed database resource.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return Database service name used for connection requests.
     * 
     */
    public Optional<String> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInsightConnectionDetails defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String hostName;
        private @Nullable List<DatabaseInsightConnectionDetailsHost> hosts;
        private @Nullable Integer port;
        private @Nullable String protocol;
        private @Nullable String serviceName;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseInsightConnectionDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostName = defaults.hostName;
    	      this.hosts = defaults.hosts;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.serviceName = defaults.serviceName;
        }

        public Builder hostName(@Nullable String hostName) {
            this.hostName = hostName;
            return this;
        }
        public Builder hosts(@Nullable List<DatabaseInsightConnectionDetailsHost> hosts) {
            this.hosts = hosts;
            return this;
        }
        public Builder hosts(DatabaseInsightConnectionDetailsHost... hosts) {
            return hosts(List.of(hosts));
        }
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        public Builder serviceName(@Nullable String serviceName) {
            this.serviceName = serviceName;
            return this;
        }        public DatabaseInsightConnectionDetails build() {
            return new DatabaseInsightConnectionDetails(hostName, hosts, port, protocol, serviceName);
        }
    }
}
