// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.BuildRunBuildRunSourceTriggerInfoArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildRunBuildRunSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildRunBuildRunSourceArgs Empty = new BuildRunBuildRunSourceArgs();

    /**
     * The DevOps code repository identifier that invoked the build run.
     * 
     */
    @Import(name="repositoryId")
    private @Nullable Output<String> repositoryId;

    /**
     * @return The DevOps code repository identifier that invoked the build run.
     * 
     */
    public Optional<Output<String>> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    /**
     * The source from which the build run is triggered.
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<String> sourceType;

    /**
     * @return The source from which the build run is triggered.
     * 
     */
    public Optional<Output<String>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * The trigger that invoked the build run.
     * 
     */
    @Import(name="triggerId")
    private @Nullable Output<String> triggerId;

    /**
     * @return The trigger that invoked the build run.
     * 
     */
    public Optional<Output<String>> triggerId() {
        return Optional.ofNullable(this.triggerId);
    }

    /**
     * Trigger details that need to be used for the BuildRun
     * 
     */
    @Import(name="triggerInfos")
    private @Nullable Output<List<BuildRunBuildRunSourceTriggerInfoArgs>> triggerInfos;

    /**
     * @return Trigger details that need to be used for the BuildRun
     * 
     */
    public Optional<Output<List<BuildRunBuildRunSourceTriggerInfoArgs>>> triggerInfos() {
        return Optional.ofNullable(this.triggerInfos);
    }

    private BuildRunBuildRunSourceArgs() {}

    private BuildRunBuildRunSourceArgs(BuildRunBuildRunSourceArgs $) {
        this.repositoryId = $.repositoryId;
        this.sourceType = $.sourceType;
        this.triggerId = $.triggerId;
        this.triggerInfos = $.triggerInfos;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildRunBuildRunSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildRunBuildRunSourceArgs $;

        public Builder() {
            $ = new BuildRunBuildRunSourceArgs();
        }

        public Builder(BuildRunBuildRunSourceArgs defaults) {
            $ = new BuildRunBuildRunSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param repositoryId The DevOps code repository identifier that invoked the build run.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(@Nullable Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The DevOps code repository identifier that invoked the build run.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        /**
         * @param sourceType The source from which the build run is triggered.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(@Nullable Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The source from which the build run is triggered.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param triggerId The trigger that invoked the build run.
         * 
         * @return builder
         * 
         */
        public Builder triggerId(@Nullable Output<String> triggerId) {
            $.triggerId = triggerId;
            return this;
        }

        /**
         * @param triggerId The trigger that invoked the build run.
         * 
         * @return builder
         * 
         */
        public Builder triggerId(String triggerId) {
            return triggerId(Output.of(triggerId));
        }

        /**
         * @param triggerInfos Trigger details that need to be used for the BuildRun
         * 
         * @return builder
         * 
         */
        public Builder triggerInfos(@Nullable Output<List<BuildRunBuildRunSourceTriggerInfoArgs>> triggerInfos) {
            $.triggerInfos = triggerInfos;
            return this;
        }

        /**
         * @param triggerInfos Trigger details that need to be used for the BuildRun
         * 
         * @return builder
         * 
         */
        public Builder triggerInfos(List<BuildRunBuildRunSourceTriggerInfoArgs> triggerInfos) {
            return triggerInfos(Output.of(triggerInfos));
        }

        /**
         * @param triggerInfos Trigger details that need to be used for the BuildRun
         * 
         * @return builder
         * 
         */
        public Builder triggerInfos(BuildRunBuildRunSourceTriggerInfoArgs... triggerInfos) {
            return triggerInfos(List.of(triggerInfos));
        }

        public BuildRunBuildRunSourceArgs build() {
            return $;
        }
    }

}
