// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Bastion.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Bastion.inputs.GetSessionsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSessionsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSessionsPlainArgs Empty = new GetSessionsPlainArgs();

    /**
     * The unique identifier (OCID) of the bastion in which to list sessions.
     * 
     */
    @Import(name="bastionId", required=true)
    private String bastionId;

    /**
     * @return The unique identifier (OCID) of the bastion in which to list sessions.
     * 
     */
    public String bastionId() {
        return this.bastionId;
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetSessionsFilter> filters;

    public Optional<List<GetSessionsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The unique identifier (OCID) of the session in which to list resources.
     * 
     */
    @Import(name="sessionId")
    private @Nullable String sessionId;

    /**
     * @return The unique identifier (OCID) of the session in which to list resources.
     * 
     */
    public Optional<String> sessionId() {
        return Optional.ofNullable(this.sessionId);
    }

    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="sessionLifecycleState")
    private @Nullable String sessionLifecycleState;

    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<String> sessionLifecycleState() {
        return Optional.ofNullable(this.sessionLifecycleState);
    }

    private GetSessionsPlainArgs() {}

    private GetSessionsPlainArgs(GetSessionsPlainArgs $) {
        this.bastionId = $.bastionId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.sessionId = $.sessionId;
        this.sessionLifecycleState = $.sessionLifecycleState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSessionsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSessionsPlainArgs $;

        public Builder() {
            $ = new GetSessionsPlainArgs();
        }

        public Builder(GetSessionsPlainArgs defaults) {
            $ = new GetSessionsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bastionId The unique identifier (OCID) of the bastion in which to list sessions.
         * 
         * @return builder
         * 
         */
        public Builder bastionId(String bastionId) {
            $.bastionId = bastionId;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetSessionsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSessionsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param sessionId The unique identifier (OCID) of the session in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder sessionId(@Nullable String sessionId) {
            $.sessionId = sessionId;
            return this;
        }

        /**
         * @param sessionLifecycleState A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder sessionLifecycleState(@Nullable String sessionLifecycleState) {
            $.sessionLifecycleState = sessionLifecycleState;
            return this;
        }

        public GetSessionsPlainArgs build() {
            $.bastionId = Objects.requireNonNull($.bastionId, "expected parameter 'bastionId' to be non-null");
            return $;
        }
    }

}
