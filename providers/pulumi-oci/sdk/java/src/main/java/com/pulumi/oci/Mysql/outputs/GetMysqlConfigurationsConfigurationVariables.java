// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMysqlConfigurationsConfigurationVariables {
    /**
     * @return (&#34;autocommit&#34;)
     * 
     */
    private final Boolean autocommit;
    /**
     * @return Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    private final Integer binlogExpireLogsSeconds;
    /**
     * @return Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    private final String binlogRowMetadata;
    /**
     * @return When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    private final String binlogRowValueOptions;
    /**
     * @return Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    private final Boolean binlogTransactionCompression;
    /**
     * @return (&#34;completion_type&#34;)
     * 
     */
    private final String completionType;
    /**
     * @return (&#34;connect_timeout&#34;)
     * 
     */
    private final Integer connectTimeout;
    /**
     * @return (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    private final Integer cteMaxRecursionDepth;
    /**
     * @return (&#34;default_authentication_plugin&#34;)
     * 
     */
    private final String defaultAuthenticationPlugin;
    /**
     * @return (&#34;foreign_key_checks&#34;)
     * 
     */
    private final Boolean foreignKeyChecks;
    /**
     * @return (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer generatedRandomPasswordLength;
    /**
     * @return * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    private final String groupReplicationConsistency;
    /**
     * @return (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    private final Integer informationSchemaStatsExpiry;
    /**
     * @return (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    private final Integer innodbBufferPoolInstances;
    /**
     * @return (&#34;innodb_buffer_pool_size&#34;)
     * 
     */
    private final String innodbBufferPoolSize;
    /**
     * @return (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    private final Boolean innodbFtEnableStopword;
    /**
     * @return (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    private final Integer innodbFtMaxTokenSize;
    /**
     * @return (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    private final Integer innodbFtMinTokenSize;
    /**
     * @return (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    private final Integer innodbFtNumWordOptimize;
    /**
     * @return (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    private final Integer innodbFtResultCacheLimit;
    /**
     * @return (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    private final String innodbFtServerStopwordTable;
    /**
     * @return (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    private final Integer innodbLockWaitTimeout;
    /**
     * @return (&#34;innodb_max_purge_lag&#34;)
     * 
     */
    private final Integer innodbMaxPurgeLag;
    /**
     * @return (&#34;innodb_max_purge_lag_delay&#34;)
     * 
     */
    private final Integer innodbMaxPurgeLagDelay;
    /**
     * @return (&#34;local_infile&#34;)
     * 
     */
    private final Boolean localInfile;
    /**
     * @return (&#34;mandatory_roles&#34;)
     * 
     */
    private final String mandatoryRoles;
    /**
     * @return (&#34;max_connections&#34;)
     * 
     */
    private final Integer maxConnections;
    /**
     * @return (&#34;max_execution_time&#34;)
     * 
     */
    private final Integer maxExecutionTime;
    /**
     * @return (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    private final Integer maxPreparedStmtCount;
    /**
     * @return (&#34;mysql_firewall_mode&#34;)
     * 
     */
    private final Boolean mysqlFirewallMode;
    /**
     * @return DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     */
    private final Integer mysqlZstdDefaultCompressionLevel;
    /**
     * @return (&#34;mysqlx_connect_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer mysqlxConnectTimeout;
    /**
     * @return Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    private final Integer mysqlxDeflateDefaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    private final Integer mysqlxDeflateMaxClientCompressionLevel;
    /**
     * @return (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer mysqlxDocumentIdUniquePrefix;
    /**
     * @return (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Boolean mysqlxEnableHelloNotice;
    /**
     * @return (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer mysqlxIdleWorkerThreadTimeout;
    /**
     * @return (&#34;mysqlx_interactive_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer mysqlxInteractiveTimeout;
    /**
     * @return Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    private final Integer mysqlxLz4defaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    private final Integer mysqlxLz4maxClientCompressionLevel;
    /**
     * @return (&#34;mysqlx_max_allowed_packet&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer mysqlxMaxAllowedPacket;
    /**
     * @return (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer mysqlxMinWorkerThreads;
    /**
     * @return (&#34;mysqlx_read_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer mysqlxReadTimeout;
    /**
     * @return (&#34;mysqlx_wait_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer mysqlxWaitTimeout;
    /**
     * @return (&#34;mysqlx_write_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer mysqlxWriteTimeout;
    /**
     * @return Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    private final Integer mysqlxZstdDefaultCompressionLevel;
    /**
     * @return Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    private final Integer mysqlxZstdMaxClientCompressionLevel;
    /**
     * @return (&#34;parser_max_mem_size&#34;)
     * 
     */
    private final Integer parserMaxMemSize;
    /**
     * @return (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer queryAllocBlockSize;
    /**
     * @return (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    private final Integer queryPreallocSize;
    /**
     * @return (&#34;sql_mode&#34;)
     * 
     */
    private final String sqlMode;
    /**
     * @return (&#34;sql_require_primary_key&#34;)
     * 
     */
    private final Boolean sqlRequirePrimaryKey;
    /**
     * @return (&#34;sql_warnings&#34;)
     * 
     */
    private final Boolean sqlWarnings;
    /**
     * @return (&#34;transaction_isolation&#34;)
     * 
     */
    private final String transactionIsolation;

    @CustomType.Constructor
    private GetMysqlConfigurationsConfigurationVariables(
        @CustomType.Parameter("autocommit") Boolean autocommit,
        @CustomType.Parameter("binlogExpireLogsSeconds") Integer binlogExpireLogsSeconds,
        @CustomType.Parameter("binlogRowMetadata") String binlogRowMetadata,
        @CustomType.Parameter("binlogRowValueOptions") String binlogRowValueOptions,
        @CustomType.Parameter("binlogTransactionCompression") Boolean binlogTransactionCompression,
        @CustomType.Parameter("completionType") String completionType,
        @CustomType.Parameter("connectTimeout") Integer connectTimeout,
        @CustomType.Parameter("cteMaxRecursionDepth") Integer cteMaxRecursionDepth,
        @CustomType.Parameter("defaultAuthenticationPlugin") String defaultAuthenticationPlugin,
        @CustomType.Parameter("foreignKeyChecks") Boolean foreignKeyChecks,
        @CustomType.Parameter("generatedRandomPasswordLength") Integer generatedRandomPasswordLength,
        @CustomType.Parameter("groupReplicationConsistency") String groupReplicationConsistency,
        @CustomType.Parameter("informationSchemaStatsExpiry") Integer informationSchemaStatsExpiry,
        @CustomType.Parameter("innodbBufferPoolInstances") Integer innodbBufferPoolInstances,
        @CustomType.Parameter("innodbBufferPoolSize") String innodbBufferPoolSize,
        @CustomType.Parameter("innodbFtEnableStopword") Boolean innodbFtEnableStopword,
        @CustomType.Parameter("innodbFtMaxTokenSize") Integer innodbFtMaxTokenSize,
        @CustomType.Parameter("innodbFtMinTokenSize") Integer innodbFtMinTokenSize,
        @CustomType.Parameter("innodbFtNumWordOptimize") Integer innodbFtNumWordOptimize,
        @CustomType.Parameter("innodbFtResultCacheLimit") Integer innodbFtResultCacheLimit,
        @CustomType.Parameter("innodbFtServerStopwordTable") String innodbFtServerStopwordTable,
        @CustomType.Parameter("innodbLockWaitTimeout") Integer innodbLockWaitTimeout,
        @CustomType.Parameter("innodbMaxPurgeLag") Integer innodbMaxPurgeLag,
        @CustomType.Parameter("innodbMaxPurgeLagDelay") Integer innodbMaxPurgeLagDelay,
        @CustomType.Parameter("localInfile") Boolean localInfile,
        @CustomType.Parameter("mandatoryRoles") String mandatoryRoles,
        @CustomType.Parameter("maxConnections") Integer maxConnections,
        @CustomType.Parameter("maxExecutionTime") Integer maxExecutionTime,
        @CustomType.Parameter("maxPreparedStmtCount") Integer maxPreparedStmtCount,
        @CustomType.Parameter("mysqlFirewallMode") Boolean mysqlFirewallMode,
        @CustomType.Parameter("mysqlZstdDefaultCompressionLevel") Integer mysqlZstdDefaultCompressionLevel,
        @CustomType.Parameter("mysqlxConnectTimeout") Integer mysqlxConnectTimeout,
        @CustomType.Parameter("mysqlxDeflateDefaultCompressionLevel") Integer mysqlxDeflateDefaultCompressionLevel,
        @CustomType.Parameter("mysqlxDeflateMaxClientCompressionLevel") Integer mysqlxDeflateMaxClientCompressionLevel,
        @CustomType.Parameter("mysqlxDocumentIdUniquePrefix") Integer mysqlxDocumentIdUniquePrefix,
        @CustomType.Parameter("mysqlxEnableHelloNotice") Boolean mysqlxEnableHelloNotice,
        @CustomType.Parameter("mysqlxIdleWorkerThreadTimeout") Integer mysqlxIdleWorkerThreadTimeout,
        @CustomType.Parameter("mysqlxInteractiveTimeout") Integer mysqlxInteractiveTimeout,
        @CustomType.Parameter("mysqlxLz4defaultCompressionLevel") Integer mysqlxLz4defaultCompressionLevel,
        @CustomType.Parameter("mysqlxLz4maxClientCompressionLevel") Integer mysqlxLz4maxClientCompressionLevel,
        @CustomType.Parameter("mysqlxMaxAllowedPacket") Integer mysqlxMaxAllowedPacket,
        @CustomType.Parameter("mysqlxMinWorkerThreads") Integer mysqlxMinWorkerThreads,
        @CustomType.Parameter("mysqlxReadTimeout") Integer mysqlxReadTimeout,
        @CustomType.Parameter("mysqlxWaitTimeout") Integer mysqlxWaitTimeout,
        @CustomType.Parameter("mysqlxWriteTimeout") Integer mysqlxWriteTimeout,
        @CustomType.Parameter("mysqlxZstdDefaultCompressionLevel") Integer mysqlxZstdDefaultCompressionLevel,
        @CustomType.Parameter("mysqlxZstdMaxClientCompressionLevel") Integer mysqlxZstdMaxClientCompressionLevel,
        @CustomType.Parameter("parserMaxMemSize") Integer parserMaxMemSize,
        @CustomType.Parameter("queryAllocBlockSize") Integer queryAllocBlockSize,
        @CustomType.Parameter("queryPreallocSize") Integer queryPreallocSize,
        @CustomType.Parameter("sqlMode") String sqlMode,
        @CustomType.Parameter("sqlRequirePrimaryKey") Boolean sqlRequirePrimaryKey,
        @CustomType.Parameter("sqlWarnings") Boolean sqlWarnings,
        @CustomType.Parameter("transactionIsolation") String transactionIsolation) {
        this.autocommit = autocommit;
        this.binlogExpireLogsSeconds = binlogExpireLogsSeconds;
        this.binlogRowMetadata = binlogRowMetadata;
        this.binlogRowValueOptions = binlogRowValueOptions;
        this.binlogTransactionCompression = binlogTransactionCompression;
        this.completionType = completionType;
        this.connectTimeout = connectTimeout;
        this.cteMaxRecursionDepth = cteMaxRecursionDepth;
        this.defaultAuthenticationPlugin = defaultAuthenticationPlugin;
        this.foreignKeyChecks = foreignKeyChecks;
        this.generatedRandomPasswordLength = generatedRandomPasswordLength;
        this.groupReplicationConsistency = groupReplicationConsistency;
        this.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
        this.innodbBufferPoolInstances = innodbBufferPoolInstances;
        this.innodbBufferPoolSize = innodbBufferPoolSize;
        this.innodbFtEnableStopword = innodbFtEnableStopword;
        this.innodbFtMaxTokenSize = innodbFtMaxTokenSize;
        this.innodbFtMinTokenSize = innodbFtMinTokenSize;
        this.innodbFtNumWordOptimize = innodbFtNumWordOptimize;
        this.innodbFtResultCacheLimit = innodbFtResultCacheLimit;
        this.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
        this.innodbLockWaitTimeout = innodbLockWaitTimeout;
        this.innodbMaxPurgeLag = innodbMaxPurgeLag;
        this.innodbMaxPurgeLagDelay = innodbMaxPurgeLagDelay;
        this.localInfile = localInfile;
        this.mandatoryRoles = mandatoryRoles;
        this.maxConnections = maxConnections;
        this.maxExecutionTime = maxExecutionTime;
        this.maxPreparedStmtCount = maxPreparedStmtCount;
        this.mysqlFirewallMode = mysqlFirewallMode;
        this.mysqlZstdDefaultCompressionLevel = mysqlZstdDefaultCompressionLevel;
        this.mysqlxConnectTimeout = mysqlxConnectTimeout;
        this.mysqlxDeflateDefaultCompressionLevel = mysqlxDeflateDefaultCompressionLevel;
        this.mysqlxDeflateMaxClientCompressionLevel = mysqlxDeflateMaxClientCompressionLevel;
        this.mysqlxDocumentIdUniquePrefix = mysqlxDocumentIdUniquePrefix;
        this.mysqlxEnableHelloNotice = mysqlxEnableHelloNotice;
        this.mysqlxIdleWorkerThreadTimeout = mysqlxIdleWorkerThreadTimeout;
        this.mysqlxInteractiveTimeout = mysqlxInteractiveTimeout;
        this.mysqlxLz4defaultCompressionLevel = mysqlxLz4defaultCompressionLevel;
        this.mysqlxLz4maxClientCompressionLevel = mysqlxLz4maxClientCompressionLevel;
        this.mysqlxMaxAllowedPacket = mysqlxMaxAllowedPacket;
        this.mysqlxMinWorkerThreads = mysqlxMinWorkerThreads;
        this.mysqlxReadTimeout = mysqlxReadTimeout;
        this.mysqlxWaitTimeout = mysqlxWaitTimeout;
        this.mysqlxWriteTimeout = mysqlxWriteTimeout;
        this.mysqlxZstdDefaultCompressionLevel = mysqlxZstdDefaultCompressionLevel;
        this.mysqlxZstdMaxClientCompressionLevel = mysqlxZstdMaxClientCompressionLevel;
        this.parserMaxMemSize = parserMaxMemSize;
        this.queryAllocBlockSize = queryAllocBlockSize;
        this.queryPreallocSize = queryPreallocSize;
        this.sqlMode = sqlMode;
        this.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
        this.sqlWarnings = sqlWarnings;
        this.transactionIsolation = transactionIsolation;
    }

    /**
     * @return (&#34;autocommit&#34;)
     * 
     */
    public Boolean autocommit() {
        return this.autocommit;
    }
    /**
     * @return Sets the binary log expiration period in seconds. binlogExpireLogsSeconds corresponds to the MySQL binary logging system variable [binlog_expire_logs_seconds](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).
     * 
     */
    public Integer binlogExpireLogsSeconds() {
        return this.binlogExpireLogsSeconds;
    }
    /**
     * @return Configures the amount of table metadata added to the binary log when using row-based logging. binlogRowMetadata corresponds to the MySQL binary logging system variable [binlog_row_metadata](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_metadata).
     * 
     */
    public String binlogRowMetadata() {
        return this.binlogRowMetadata;
    }
    /**
     * @return When set to PARTIAL_JSON, this enables use of a space-efficient binary log format for updates that modify only a small portion of a JSON document. binlogRowValueOptions corresponds to the MySQL binary logging system variable [binlog_row_value_options](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_value_options).
     * 
     */
    public String binlogRowValueOptions() {
        return this.binlogRowValueOptions;
    }
    /**
     * @return Enables compression for transactions that are written to binary log files on this server. binlogTransactionCompression corresponds to the MySQL binary logging system variable [binlog_transaction_compression](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_compression).
     * 
     */
    public Boolean binlogTransactionCompression() {
        return this.binlogTransactionCompression;
    }
    /**
     * @return (&#34;completion_type&#34;)
     * 
     */
    public String completionType() {
        return this.completionType;
    }
    /**
     * @return (&#34;connect_timeout&#34;)
     * 
     */
    public Integer connectTimeout() {
        return this.connectTimeout;
    }
    /**
     * @return (&#34;cte_max_recursion_depth&#34;)
     * 
     */
    public Integer cteMaxRecursionDepth() {
        return this.cteMaxRecursionDepth;
    }
    /**
     * @return (&#34;default_authentication_plugin&#34;)
     * 
     */
    public String defaultAuthenticationPlugin() {
        return this.defaultAuthenticationPlugin;
    }
    /**
     * @return (&#34;foreign_key_checks&#34;)
     * 
     */
    public Boolean foreignKeyChecks() {
        return this.foreignKeyChecks;
    }
    /**
     * @return (&#34;generated_random_password_length&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer generatedRandomPasswordLength() {
        return this.generatedRandomPasswordLength;
    }
    /**
     * @return * EVENTUAL: Both RO and RW transactions do not wait for preceding transactions to be applied before executing. A RW transaction does not wait for other members to apply a transaction. This means that a transaction could be externalized on one member before the others. This also means that in the event of a primary failover, the new primary can accept new RO and RW transactions before the previous primary transactions are all applied. RO transactions could result in outdated values, RW transactions could result in a rollback due to conflicts.
     * * BEFORE_ON_PRIMARY_FAILOVER: New RO or RW transactions with a newly elected primary that is applying backlog from the old primary are held (not applied) until any backlog has been applied. This ensures that when a primary failover happens, intentionally or not, clients always see the latest value on the primary. This guarantees consistency, but means that clients must be able to handle the delay in the event that a backlog is being applied. Usually this delay should be minimal, but does depend on the size of the backlog.
     * * BEFORE: A RW transaction waits for all preceding transactions to complete before being applied. A RO transaction waits for all preceding transactions to complete before being executed. This ensures that this transaction reads the latest value by only affecting the latency of the transaction. This reduces the overhead of synchronization on every RW transaction, by ensuring synchronization is used only on RO transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * AFTER: A RW transaction waits until its changes have been applied to all of the other members. This value has no effect on RO transactions. This mode ensures that when a transaction is committed on the local member, any subsequent transaction reads the written value or a more recent value on any group member. Use this mode with a group that is used for predominantly RO operations to ensure that applied RW transactions are applied everywhere once they commit. This could be used by your application to ensure that subsequent reads fetch the latest data which includes the latest writes. This reduces the overhead of synchronization on every RO transaction, by ensuring synchronization is used only on RW transactions. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * * BEFORE_AND_AFTER: A RW transaction waits for 1) all preceding transactions to complete before being applied and 2) until its changes have been applied on other members. A RO transaction waits for all preceding transactions to complete before execution takes place. This consistency level also includes the consistency guarantees provided by BEFORE_ON_PRIMARY_FAILOVER.
     * 
     */
    public String groupReplicationConsistency() {
        return this.groupReplicationConsistency;
    }
    /**
     * @return (&#34;information_schema_stats_expiry&#34;)
     * 
     */
    public Integer informationSchemaStatsExpiry() {
        return this.informationSchemaStatsExpiry;
    }
    /**
     * @return (&#34;innodb_buffer_pool_instances&#34;)
     * 
     */
    public Integer innodbBufferPoolInstances() {
        return this.innodbBufferPoolInstances;
    }
    /**
     * @return (&#34;innodb_buffer_pool_size&#34;)
     * 
     */
    public String innodbBufferPoolSize() {
        return this.innodbBufferPoolSize;
    }
    /**
     * @return (&#34;innodb_ft_enable_stopword&#34;)
     * 
     */
    public Boolean innodbFtEnableStopword() {
        return this.innodbFtEnableStopword;
    }
    /**
     * @return (&#34;innodb_ft_max_token_size&#34;)
     * 
     */
    public Integer innodbFtMaxTokenSize() {
        return this.innodbFtMaxTokenSize;
    }
    /**
     * @return (&#34;innodb_ft_min_token_size&#34;)
     * 
     */
    public Integer innodbFtMinTokenSize() {
        return this.innodbFtMinTokenSize;
    }
    /**
     * @return (&#34;innodb_ft_num_word_optimize&#34;)
     * 
     */
    public Integer innodbFtNumWordOptimize() {
        return this.innodbFtNumWordOptimize;
    }
    /**
     * @return (&#34;innodb_ft_result_cache_limit&#34;)
     * 
     */
    public Integer innodbFtResultCacheLimit() {
        return this.innodbFtResultCacheLimit;
    }
    /**
     * @return (&#34;innodb_ft_server_stopword_table&#34;)
     * 
     */
    public String innodbFtServerStopwordTable() {
        return this.innodbFtServerStopwordTable;
    }
    /**
     * @return (&#34;innodb_lock_wait_timeout&#34;)
     * 
     */
    public Integer innodbLockWaitTimeout() {
        return this.innodbLockWaitTimeout;
    }
    /**
     * @return (&#34;innodb_max_purge_lag&#34;)
     * 
     */
    public Integer innodbMaxPurgeLag() {
        return this.innodbMaxPurgeLag;
    }
    /**
     * @return (&#34;innodb_max_purge_lag_delay&#34;)
     * 
     */
    public Integer innodbMaxPurgeLagDelay() {
        return this.innodbMaxPurgeLagDelay;
    }
    /**
     * @return (&#34;local_infile&#34;)
     * 
     */
    public Boolean localInfile() {
        return this.localInfile;
    }
    /**
     * @return (&#34;mandatory_roles&#34;)
     * 
     */
    public String mandatoryRoles() {
        return this.mandatoryRoles;
    }
    /**
     * @return (&#34;max_connections&#34;)
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }
    /**
     * @return (&#34;max_execution_time&#34;)
     * 
     */
    public Integer maxExecutionTime() {
        return this.maxExecutionTime;
    }
    /**
     * @return (&#34;max_prepared_stmt_count&#34;)
     * 
     */
    public Integer maxPreparedStmtCount() {
        return this.maxPreparedStmtCount;
    }
    /**
     * @return (&#34;mysql_firewall_mode&#34;)
     * 
     */
    public Boolean mysqlFirewallMode() {
        return this.mysqlFirewallMode;
    }
    /**
     * @return DEPRECATED -- typo of mysqlx_zstd_default_compression_level. variable will be ignored.
     * 
     */
    public Integer mysqlZstdDefaultCompressionLevel() {
        return this.mysqlZstdDefaultCompressionLevel;
    }
    /**
     * @return (&#34;mysqlx_connect_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer mysqlxConnectTimeout() {
        return this.mysqlxConnectTimeout;
    }
    /**
     * @return Set the default compression level for the deflate algorithm. (&#34;mysqlx_deflate_default_compression_level&#34;)
     * 
     */
    public Integer mysqlxDeflateDefaultCompressionLevel() {
        return this.mysqlxDeflateDefaultCompressionLevel;
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the deflate algorithm. (&#34;mysqlx_deflate_max_client_compression_level&#34;)
     * 
     */
    public Integer mysqlxDeflateMaxClientCompressionLevel() {
        return this.mysqlxDeflateMaxClientCompressionLevel;
    }
    /**
     * @return (&#34;mysqlx_document_id_unique_prefix&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer mysqlxDocumentIdUniquePrefix() {
        return this.mysqlxDocumentIdUniquePrefix;
    }
    /**
     * @return (&#34;mysqlx_enable_hello_notice&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Boolean mysqlxEnableHelloNotice() {
        return this.mysqlxEnableHelloNotice;
    }
    /**
     * @return (&#34;mysqlx_idle_worker_thread_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer mysqlxIdleWorkerThreadTimeout() {
        return this.mysqlxIdleWorkerThreadTimeout;
    }
    /**
     * @return (&#34;mysqlx_interactive_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer mysqlxInteractiveTimeout() {
        return this.mysqlxInteractiveTimeout;
    }
    /**
     * @return Set the default compression level for the lz4 algorithm. (&#34;mysqlx_lz4_default_compression_level&#34;)
     * 
     */
    public Integer mysqlxLz4defaultCompressionLevel() {
        return this.mysqlxLz4defaultCompressionLevel;
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the lz4 algorithm. (&#34;mysqlx_lz4_max_client_compression_level&#34;)
     * 
     */
    public Integer mysqlxLz4maxClientCompressionLevel() {
        return this.mysqlxLz4maxClientCompressionLevel;
    }
    /**
     * @return (&#34;mysqlx_max_allowed_packet&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer mysqlxMaxAllowedPacket() {
        return this.mysqlxMaxAllowedPacket;
    }
    /**
     * @return (&#34;mysqlx_min_worker_threads&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer mysqlxMinWorkerThreads() {
        return this.mysqlxMinWorkerThreads;
    }
    /**
     * @return (&#34;mysqlx_read_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer mysqlxReadTimeout() {
        return this.mysqlxReadTimeout;
    }
    /**
     * @return (&#34;mysqlx_wait_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer mysqlxWaitTimeout() {
        return this.mysqlxWaitTimeout;
    }
    /**
     * @return (&#34;mysqlx_write_timeout&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer mysqlxWriteTimeout() {
        return this.mysqlxWriteTimeout;
    }
    /**
     * @return Set the default compression level for the zstd algorithm. (&#34;mysqlx_zstd_default_compression_level&#34;)
     * 
     */
    public Integer mysqlxZstdDefaultCompressionLevel() {
        return this.mysqlxZstdDefaultCompressionLevel;
    }
    /**
     * @return Limit the upper bound of accepted compression levels for the zstd algorithm. (&#34;mysqlx_zstd_max_client_compression_level&#34;)
     * 
     */
    public Integer mysqlxZstdMaxClientCompressionLevel() {
        return this.mysqlxZstdMaxClientCompressionLevel;
    }
    /**
     * @return (&#34;parser_max_mem_size&#34;)
     * 
     */
    public Integer parserMaxMemSize() {
        return this.parserMaxMemSize;
    }
    /**
     * @return (&#34;query_alloc_block_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer queryAllocBlockSize() {
        return this.queryAllocBlockSize;
    }
    /**
     * @return (&#34;query_prealloc_size&#34;) DEPRECATED -- variable should not be settable and will be ignored
     * 
     */
    public Integer queryPreallocSize() {
        return this.queryPreallocSize;
    }
    /**
     * @return (&#34;sql_mode&#34;)
     * 
     */
    public String sqlMode() {
        return this.sqlMode;
    }
    /**
     * @return (&#34;sql_require_primary_key&#34;)
     * 
     */
    public Boolean sqlRequirePrimaryKey() {
        return this.sqlRequirePrimaryKey;
    }
    /**
     * @return (&#34;sql_warnings&#34;)
     * 
     */
    public Boolean sqlWarnings() {
        return this.sqlWarnings;
    }
    /**
     * @return (&#34;transaction_isolation&#34;)
     * 
     */
    public String transactionIsolation() {
        return this.transactionIsolation;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlConfigurationsConfigurationVariables defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean autocommit;
        private Integer binlogExpireLogsSeconds;
        private String binlogRowMetadata;
        private String binlogRowValueOptions;
        private Boolean binlogTransactionCompression;
        private String completionType;
        private Integer connectTimeout;
        private Integer cteMaxRecursionDepth;
        private String defaultAuthenticationPlugin;
        private Boolean foreignKeyChecks;
        private Integer generatedRandomPasswordLength;
        private String groupReplicationConsistency;
        private Integer informationSchemaStatsExpiry;
        private Integer innodbBufferPoolInstances;
        private String innodbBufferPoolSize;
        private Boolean innodbFtEnableStopword;
        private Integer innodbFtMaxTokenSize;
        private Integer innodbFtMinTokenSize;
        private Integer innodbFtNumWordOptimize;
        private Integer innodbFtResultCacheLimit;
        private String innodbFtServerStopwordTable;
        private Integer innodbLockWaitTimeout;
        private Integer innodbMaxPurgeLag;
        private Integer innodbMaxPurgeLagDelay;
        private Boolean localInfile;
        private String mandatoryRoles;
        private Integer maxConnections;
        private Integer maxExecutionTime;
        private Integer maxPreparedStmtCount;
        private Boolean mysqlFirewallMode;
        private Integer mysqlZstdDefaultCompressionLevel;
        private Integer mysqlxConnectTimeout;
        private Integer mysqlxDeflateDefaultCompressionLevel;
        private Integer mysqlxDeflateMaxClientCompressionLevel;
        private Integer mysqlxDocumentIdUniquePrefix;
        private Boolean mysqlxEnableHelloNotice;
        private Integer mysqlxIdleWorkerThreadTimeout;
        private Integer mysqlxInteractiveTimeout;
        private Integer mysqlxLz4defaultCompressionLevel;
        private Integer mysqlxLz4maxClientCompressionLevel;
        private Integer mysqlxMaxAllowedPacket;
        private Integer mysqlxMinWorkerThreads;
        private Integer mysqlxReadTimeout;
        private Integer mysqlxWaitTimeout;
        private Integer mysqlxWriteTimeout;
        private Integer mysqlxZstdDefaultCompressionLevel;
        private Integer mysqlxZstdMaxClientCompressionLevel;
        private Integer parserMaxMemSize;
        private Integer queryAllocBlockSize;
        private Integer queryPreallocSize;
        private String sqlMode;
        private Boolean sqlRequirePrimaryKey;
        private Boolean sqlWarnings;
        private String transactionIsolation;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMysqlConfigurationsConfigurationVariables defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autocommit = defaults.autocommit;
    	      this.binlogExpireLogsSeconds = defaults.binlogExpireLogsSeconds;
    	      this.binlogRowMetadata = defaults.binlogRowMetadata;
    	      this.binlogRowValueOptions = defaults.binlogRowValueOptions;
    	      this.binlogTransactionCompression = defaults.binlogTransactionCompression;
    	      this.completionType = defaults.completionType;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.cteMaxRecursionDepth = defaults.cteMaxRecursionDepth;
    	      this.defaultAuthenticationPlugin = defaults.defaultAuthenticationPlugin;
    	      this.foreignKeyChecks = defaults.foreignKeyChecks;
    	      this.generatedRandomPasswordLength = defaults.generatedRandomPasswordLength;
    	      this.groupReplicationConsistency = defaults.groupReplicationConsistency;
    	      this.informationSchemaStatsExpiry = defaults.informationSchemaStatsExpiry;
    	      this.innodbBufferPoolInstances = defaults.innodbBufferPoolInstances;
    	      this.innodbBufferPoolSize = defaults.innodbBufferPoolSize;
    	      this.innodbFtEnableStopword = defaults.innodbFtEnableStopword;
    	      this.innodbFtMaxTokenSize = defaults.innodbFtMaxTokenSize;
    	      this.innodbFtMinTokenSize = defaults.innodbFtMinTokenSize;
    	      this.innodbFtNumWordOptimize = defaults.innodbFtNumWordOptimize;
    	      this.innodbFtResultCacheLimit = defaults.innodbFtResultCacheLimit;
    	      this.innodbFtServerStopwordTable = defaults.innodbFtServerStopwordTable;
    	      this.innodbLockWaitTimeout = defaults.innodbLockWaitTimeout;
    	      this.innodbMaxPurgeLag = defaults.innodbMaxPurgeLag;
    	      this.innodbMaxPurgeLagDelay = defaults.innodbMaxPurgeLagDelay;
    	      this.localInfile = defaults.localInfile;
    	      this.mandatoryRoles = defaults.mandatoryRoles;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxExecutionTime = defaults.maxExecutionTime;
    	      this.maxPreparedStmtCount = defaults.maxPreparedStmtCount;
    	      this.mysqlFirewallMode = defaults.mysqlFirewallMode;
    	      this.mysqlZstdDefaultCompressionLevel = defaults.mysqlZstdDefaultCompressionLevel;
    	      this.mysqlxConnectTimeout = defaults.mysqlxConnectTimeout;
    	      this.mysqlxDeflateDefaultCompressionLevel = defaults.mysqlxDeflateDefaultCompressionLevel;
    	      this.mysqlxDeflateMaxClientCompressionLevel = defaults.mysqlxDeflateMaxClientCompressionLevel;
    	      this.mysqlxDocumentIdUniquePrefix = defaults.mysqlxDocumentIdUniquePrefix;
    	      this.mysqlxEnableHelloNotice = defaults.mysqlxEnableHelloNotice;
    	      this.mysqlxIdleWorkerThreadTimeout = defaults.mysqlxIdleWorkerThreadTimeout;
    	      this.mysqlxInteractiveTimeout = defaults.mysqlxInteractiveTimeout;
    	      this.mysqlxLz4defaultCompressionLevel = defaults.mysqlxLz4defaultCompressionLevel;
    	      this.mysqlxLz4maxClientCompressionLevel = defaults.mysqlxLz4maxClientCompressionLevel;
    	      this.mysqlxMaxAllowedPacket = defaults.mysqlxMaxAllowedPacket;
    	      this.mysqlxMinWorkerThreads = defaults.mysqlxMinWorkerThreads;
    	      this.mysqlxReadTimeout = defaults.mysqlxReadTimeout;
    	      this.mysqlxWaitTimeout = defaults.mysqlxWaitTimeout;
    	      this.mysqlxWriteTimeout = defaults.mysqlxWriteTimeout;
    	      this.mysqlxZstdDefaultCompressionLevel = defaults.mysqlxZstdDefaultCompressionLevel;
    	      this.mysqlxZstdMaxClientCompressionLevel = defaults.mysqlxZstdMaxClientCompressionLevel;
    	      this.parserMaxMemSize = defaults.parserMaxMemSize;
    	      this.queryAllocBlockSize = defaults.queryAllocBlockSize;
    	      this.queryPreallocSize = defaults.queryPreallocSize;
    	      this.sqlMode = defaults.sqlMode;
    	      this.sqlRequirePrimaryKey = defaults.sqlRequirePrimaryKey;
    	      this.sqlWarnings = defaults.sqlWarnings;
    	      this.transactionIsolation = defaults.transactionIsolation;
        }

        public Builder autocommit(Boolean autocommit) {
            this.autocommit = Objects.requireNonNull(autocommit);
            return this;
        }
        public Builder binlogExpireLogsSeconds(Integer binlogExpireLogsSeconds) {
            this.binlogExpireLogsSeconds = Objects.requireNonNull(binlogExpireLogsSeconds);
            return this;
        }
        public Builder binlogRowMetadata(String binlogRowMetadata) {
            this.binlogRowMetadata = Objects.requireNonNull(binlogRowMetadata);
            return this;
        }
        public Builder binlogRowValueOptions(String binlogRowValueOptions) {
            this.binlogRowValueOptions = Objects.requireNonNull(binlogRowValueOptions);
            return this;
        }
        public Builder binlogTransactionCompression(Boolean binlogTransactionCompression) {
            this.binlogTransactionCompression = Objects.requireNonNull(binlogTransactionCompression);
            return this;
        }
        public Builder completionType(String completionType) {
            this.completionType = Objects.requireNonNull(completionType);
            return this;
        }
        public Builder connectTimeout(Integer connectTimeout) {
            this.connectTimeout = Objects.requireNonNull(connectTimeout);
            return this;
        }
        public Builder cteMaxRecursionDepth(Integer cteMaxRecursionDepth) {
            this.cteMaxRecursionDepth = Objects.requireNonNull(cteMaxRecursionDepth);
            return this;
        }
        public Builder defaultAuthenticationPlugin(String defaultAuthenticationPlugin) {
            this.defaultAuthenticationPlugin = Objects.requireNonNull(defaultAuthenticationPlugin);
            return this;
        }
        public Builder foreignKeyChecks(Boolean foreignKeyChecks) {
            this.foreignKeyChecks = Objects.requireNonNull(foreignKeyChecks);
            return this;
        }
        public Builder generatedRandomPasswordLength(Integer generatedRandomPasswordLength) {
            this.generatedRandomPasswordLength = Objects.requireNonNull(generatedRandomPasswordLength);
            return this;
        }
        public Builder groupReplicationConsistency(String groupReplicationConsistency) {
            this.groupReplicationConsistency = Objects.requireNonNull(groupReplicationConsistency);
            return this;
        }
        public Builder informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
            this.informationSchemaStatsExpiry = Objects.requireNonNull(informationSchemaStatsExpiry);
            return this;
        }
        public Builder innodbBufferPoolInstances(Integer innodbBufferPoolInstances) {
            this.innodbBufferPoolInstances = Objects.requireNonNull(innodbBufferPoolInstances);
            return this;
        }
        public Builder innodbBufferPoolSize(String innodbBufferPoolSize) {
            this.innodbBufferPoolSize = Objects.requireNonNull(innodbBufferPoolSize);
            return this;
        }
        public Builder innodbFtEnableStopword(Boolean innodbFtEnableStopword) {
            this.innodbFtEnableStopword = Objects.requireNonNull(innodbFtEnableStopword);
            return this;
        }
        public Builder innodbFtMaxTokenSize(Integer innodbFtMaxTokenSize) {
            this.innodbFtMaxTokenSize = Objects.requireNonNull(innodbFtMaxTokenSize);
            return this;
        }
        public Builder innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
            this.innodbFtMinTokenSize = Objects.requireNonNull(innodbFtMinTokenSize);
            return this;
        }
        public Builder innodbFtNumWordOptimize(Integer innodbFtNumWordOptimize) {
            this.innodbFtNumWordOptimize = Objects.requireNonNull(innodbFtNumWordOptimize);
            return this;
        }
        public Builder innodbFtResultCacheLimit(Integer innodbFtResultCacheLimit) {
            this.innodbFtResultCacheLimit = Objects.requireNonNull(innodbFtResultCacheLimit);
            return this;
        }
        public Builder innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
            this.innodbFtServerStopwordTable = Objects.requireNonNull(innodbFtServerStopwordTable);
            return this;
        }
        public Builder innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
            this.innodbLockWaitTimeout = Objects.requireNonNull(innodbLockWaitTimeout);
            return this;
        }
        public Builder innodbMaxPurgeLag(Integer innodbMaxPurgeLag) {
            this.innodbMaxPurgeLag = Objects.requireNonNull(innodbMaxPurgeLag);
            return this;
        }
        public Builder innodbMaxPurgeLagDelay(Integer innodbMaxPurgeLagDelay) {
            this.innodbMaxPurgeLagDelay = Objects.requireNonNull(innodbMaxPurgeLagDelay);
            return this;
        }
        public Builder localInfile(Boolean localInfile) {
            this.localInfile = Objects.requireNonNull(localInfile);
            return this;
        }
        public Builder mandatoryRoles(String mandatoryRoles) {
            this.mandatoryRoles = Objects.requireNonNull(mandatoryRoles);
            return this;
        }
        public Builder maxConnections(Integer maxConnections) {
            this.maxConnections = Objects.requireNonNull(maxConnections);
            return this;
        }
        public Builder maxExecutionTime(Integer maxExecutionTime) {
            this.maxExecutionTime = Objects.requireNonNull(maxExecutionTime);
            return this;
        }
        public Builder maxPreparedStmtCount(Integer maxPreparedStmtCount) {
            this.maxPreparedStmtCount = Objects.requireNonNull(maxPreparedStmtCount);
            return this;
        }
        public Builder mysqlFirewallMode(Boolean mysqlFirewallMode) {
            this.mysqlFirewallMode = Objects.requireNonNull(mysqlFirewallMode);
            return this;
        }
        public Builder mysqlZstdDefaultCompressionLevel(Integer mysqlZstdDefaultCompressionLevel) {
            this.mysqlZstdDefaultCompressionLevel = Objects.requireNonNull(mysqlZstdDefaultCompressionLevel);
            return this;
        }
        public Builder mysqlxConnectTimeout(Integer mysqlxConnectTimeout) {
            this.mysqlxConnectTimeout = Objects.requireNonNull(mysqlxConnectTimeout);
            return this;
        }
        public Builder mysqlxDeflateDefaultCompressionLevel(Integer mysqlxDeflateDefaultCompressionLevel) {
            this.mysqlxDeflateDefaultCompressionLevel = Objects.requireNonNull(mysqlxDeflateDefaultCompressionLevel);
            return this;
        }
        public Builder mysqlxDeflateMaxClientCompressionLevel(Integer mysqlxDeflateMaxClientCompressionLevel) {
            this.mysqlxDeflateMaxClientCompressionLevel = Objects.requireNonNull(mysqlxDeflateMaxClientCompressionLevel);
            return this;
        }
        public Builder mysqlxDocumentIdUniquePrefix(Integer mysqlxDocumentIdUniquePrefix) {
            this.mysqlxDocumentIdUniquePrefix = Objects.requireNonNull(mysqlxDocumentIdUniquePrefix);
            return this;
        }
        public Builder mysqlxEnableHelloNotice(Boolean mysqlxEnableHelloNotice) {
            this.mysqlxEnableHelloNotice = Objects.requireNonNull(mysqlxEnableHelloNotice);
            return this;
        }
        public Builder mysqlxIdleWorkerThreadTimeout(Integer mysqlxIdleWorkerThreadTimeout) {
            this.mysqlxIdleWorkerThreadTimeout = Objects.requireNonNull(mysqlxIdleWorkerThreadTimeout);
            return this;
        }
        public Builder mysqlxInteractiveTimeout(Integer mysqlxInteractiveTimeout) {
            this.mysqlxInteractiveTimeout = Objects.requireNonNull(mysqlxInteractiveTimeout);
            return this;
        }
        public Builder mysqlxLz4defaultCompressionLevel(Integer mysqlxLz4defaultCompressionLevel) {
            this.mysqlxLz4defaultCompressionLevel = Objects.requireNonNull(mysqlxLz4defaultCompressionLevel);
            return this;
        }
        public Builder mysqlxLz4maxClientCompressionLevel(Integer mysqlxLz4maxClientCompressionLevel) {
            this.mysqlxLz4maxClientCompressionLevel = Objects.requireNonNull(mysqlxLz4maxClientCompressionLevel);
            return this;
        }
        public Builder mysqlxMaxAllowedPacket(Integer mysqlxMaxAllowedPacket) {
            this.mysqlxMaxAllowedPacket = Objects.requireNonNull(mysqlxMaxAllowedPacket);
            return this;
        }
        public Builder mysqlxMinWorkerThreads(Integer mysqlxMinWorkerThreads) {
            this.mysqlxMinWorkerThreads = Objects.requireNonNull(mysqlxMinWorkerThreads);
            return this;
        }
        public Builder mysqlxReadTimeout(Integer mysqlxReadTimeout) {
            this.mysqlxReadTimeout = Objects.requireNonNull(mysqlxReadTimeout);
            return this;
        }
        public Builder mysqlxWaitTimeout(Integer mysqlxWaitTimeout) {
            this.mysqlxWaitTimeout = Objects.requireNonNull(mysqlxWaitTimeout);
            return this;
        }
        public Builder mysqlxWriteTimeout(Integer mysqlxWriteTimeout) {
            this.mysqlxWriteTimeout = Objects.requireNonNull(mysqlxWriteTimeout);
            return this;
        }
        public Builder mysqlxZstdDefaultCompressionLevel(Integer mysqlxZstdDefaultCompressionLevel) {
            this.mysqlxZstdDefaultCompressionLevel = Objects.requireNonNull(mysqlxZstdDefaultCompressionLevel);
            return this;
        }
        public Builder mysqlxZstdMaxClientCompressionLevel(Integer mysqlxZstdMaxClientCompressionLevel) {
            this.mysqlxZstdMaxClientCompressionLevel = Objects.requireNonNull(mysqlxZstdMaxClientCompressionLevel);
            return this;
        }
        public Builder parserMaxMemSize(Integer parserMaxMemSize) {
            this.parserMaxMemSize = Objects.requireNonNull(parserMaxMemSize);
            return this;
        }
        public Builder queryAllocBlockSize(Integer queryAllocBlockSize) {
            this.queryAllocBlockSize = Objects.requireNonNull(queryAllocBlockSize);
            return this;
        }
        public Builder queryPreallocSize(Integer queryPreallocSize) {
            this.queryPreallocSize = Objects.requireNonNull(queryPreallocSize);
            return this;
        }
        public Builder sqlMode(String sqlMode) {
            this.sqlMode = Objects.requireNonNull(sqlMode);
            return this;
        }
        public Builder sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
            this.sqlRequirePrimaryKey = Objects.requireNonNull(sqlRequirePrimaryKey);
            return this;
        }
        public Builder sqlWarnings(Boolean sqlWarnings) {
            this.sqlWarnings = Objects.requireNonNull(sqlWarnings);
            return this;
        }
        public Builder transactionIsolation(String transactionIsolation) {
            this.transactionIsolation = Objects.requireNonNull(transactionIsolation);
            return this;
        }        public GetMysqlConfigurationsConfigurationVariables build() {
            return new GetMysqlConfigurationsConfigurationVariables(autocommit, binlogExpireLogsSeconds, binlogRowMetadata, binlogRowValueOptions, binlogTransactionCompression, completionType, connectTimeout, cteMaxRecursionDepth, defaultAuthenticationPlugin, foreignKeyChecks, generatedRandomPasswordLength, groupReplicationConsistency, informationSchemaStatsExpiry, innodbBufferPoolInstances, innodbBufferPoolSize, innodbFtEnableStopword, innodbFtMaxTokenSize, innodbFtMinTokenSize, innodbFtNumWordOptimize, innodbFtResultCacheLimit, innodbFtServerStopwordTable, innodbLockWaitTimeout, innodbMaxPurgeLag, innodbMaxPurgeLagDelay, localInfile, mandatoryRoles, maxConnections, maxExecutionTime, maxPreparedStmtCount, mysqlFirewallMode, mysqlZstdDefaultCompressionLevel, mysqlxConnectTimeout, mysqlxDeflateDefaultCompressionLevel, mysqlxDeflateMaxClientCompressionLevel, mysqlxDocumentIdUniquePrefix, mysqlxEnableHelloNotice, mysqlxIdleWorkerThreadTimeout, mysqlxInteractiveTimeout, mysqlxLz4defaultCompressionLevel, mysqlxLz4maxClientCompressionLevel, mysqlxMaxAllowedPacket, mysqlxMinWorkerThreads, mysqlxReadTimeout, mysqlxWaitTimeout, mysqlxWriteTimeout, mysqlxZstdDefaultCompressionLevel, mysqlxZstdMaxClientCompressionLevel, parserMaxMemSize, queryAllocBlockSize, queryPreallocSize, sqlMode, sqlRequirePrimaryKey, sqlWarnings, transactionIsolation);
        }
    }
}
