// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReportDefinitionSummaryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReportDefinitionSummaryArgs Empty = new ReportDefinitionSummaryArgs();

    /**
     * (Updatable) Name of the key or count of object.
     * 
     */
    @Import(name="countOf")
    private @Nullable Output<String> countOf;

    /**
     * @return (Updatable) Name of the key or count of object.
     * 
     */
    public Optional<Output<String>> countOf() {
        return Optional.ofNullable(this.countOf);
    }

    /**
     * (Updatable) Specifies the order in which the summary must be displayed.
     * 
     */
    @Import(name="displayOrder", required=true)
    private Output<Integer> displayOrder;

    /**
     * @return (Updatable) Specifies the order in which the summary must be displayed.
     * 
     */
    public Output<Integer> displayOrder() {
        return this.displayOrder;
    }

    /**
     * (Updatable) A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
     * 
     */
    @Import(name="groupByFieldName")
    private @Nullable Output<String> groupByFieldName;

    /**
     * @return (Updatable) A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
     * 
     */
    public Optional<Output<String>> groupByFieldName() {
        return Optional.ofNullable(this.groupByFieldName);
    }

    /**
     * (Updatable) Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    @Import(name="isHidden")
    private @Nullable Output<Boolean> isHidden;

    /**
     * @return (Updatable) Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    public Optional<Output<Boolean>> isHidden() {
        return Optional.ofNullable(this.isHidden);
    }

    /**
     * (Updatable) Name of the report summary.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return (Updatable) Name of the report summary.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Updatable) Additional scim filters used to get the specific summary.
     * 
     */
    @Import(name="scimFilter")
    private @Nullable Output<String> scimFilter;

    /**
     * @return (Updatable) Additional scim filters used to get the specific summary.
     * 
     */
    public Optional<Output<String>> scimFilter() {
        return Optional.ofNullable(this.scimFilter);
    }

    private ReportDefinitionSummaryArgs() {}

    private ReportDefinitionSummaryArgs(ReportDefinitionSummaryArgs $) {
        this.countOf = $.countOf;
        this.displayOrder = $.displayOrder;
        this.groupByFieldName = $.groupByFieldName;
        this.isHidden = $.isHidden;
        this.name = $.name;
        this.scimFilter = $.scimFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportDefinitionSummaryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportDefinitionSummaryArgs $;

        public Builder() {
            $ = new ReportDefinitionSummaryArgs();
        }

        public Builder(ReportDefinitionSummaryArgs defaults) {
            $ = new ReportDefinitionSummaryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param countOf (Updatable) Name of the key or count of object.
         * 
         * @return builder
         * 
         */
        public Builder countOf(@Nullable Output<String> countOf) {
            $.countOf = countOf;
            return this;
        }

        /**
         * @param countOf (Updatable) Name of the key or count of object.
         * 
         * @return builder
         * 
         */
        public Builder countOf(String countOf) {
            return countOf(Output.of(countOf));
        }

        /**
         * @param displayOrder (Updatable) Specifies the order in which the summary must be displayed.
         * 
         * @return builder
         * 
         */
        public Builder displayOrder(Output<Integer> displayOrder) {
            $.displayOrder = displayOrder;
            return this;
        }

        /**
         * @param displayOrder (Updatable) Specifies the order in which the summary must be displayed.
         * 
         * @return builder
         * 
         */
        public Builder displayOrder(Integer displayOrder) {
            return displayOrder(Output.of(displayOrder));
        }

        /**
         * @param groupByFieldName (Updatable) A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
         * 
         * @return builder
         * 
         */
        public Builder groupByFieldName(@Nullable Output<String> groupByFieldName) {
            $.groupByFieldName = groupByFieldName;
            return this;
        }

        /**
         * @param groupByFieldName (Updatable) A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
         * 
         * @return builder
         * 
         */
        public Builder groupByFieldName(String groupByFieldName) {
            return groupByFieldName(Output.of(groupByFieldName));
        }

        /**
         * @param isHidden (Updatable) Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder isHidden(@Nullable Output<Boolean> isHidden) {
            $.isHidden = isHidden;
            return this;
        }

        /**
         * @param isHidden (Updatable) Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder isHidden(Boolean isHidden) {
            return isHidden(Output.of(isHidden));
        }

        /**
         * @param name (Updatable) Name of the report summary.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Name of the report summary.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scimFilter (Updatable) Additional scim filters used to get the specific summary.
         * 
         * @return builder
         * 
         */
        public Builder scimFilter(@Nullable Output<String> scimFilter) {
            $.scimFilter = scimFilter;
            return this;
        }

        /**
         * @param scimFilter (Updatable) Additional scim filters used to get the specific summary.
         * 
         * @return builder
         * 
         */
        public Builder scimFilter(String scimFilter) {
            return scimFilter(Output.of(scimFilter));
        }

        public ReportDefinitionSummaryArgs build() {
            $.displayOrder = Objects.requireNonNull($.displayOrder, "expected parameter 'displayOrder' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
