// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.GetDiscoveryJobsResultsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetDiscoveryJobsResultsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDiscoveryJobsResultsArgs Empty = new GetDiscoveryJobsResultsArgs();

    /**
     * A filter to return only a specific column based on column name.
     * 
     */
    @Import(name="columnNames")
    private Output</* @Nullable */ List<String>> columnNames;

    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    public Output</* @Nullable */ List<String>> columnNames() {
        return this.columnNames;
    }

    /**
     * The OCID of the discovery job.
     * 
     */
    @Import(name="discoveryJobId", required=true)
    private Output<String> discoveryJobId;

    /**
     * @return The OCID of the discovery job.
     * 
     */
    public Output<String> discoveryJobId() {
        return this.discoveryJobId;
    }

    /**
     * A filter to return only the resources that match the specified discovery type.
     * 
     */
    @Import(name="discoveryType")
    private Output</* @Nullable */ String> discoveryType;

    /**
     * @return A filter to return only the resources that match the specified discovery type.
     * 
     */
    public Output</* @Nullable */ String> discoveryType() {
        return this.discoveryType;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetDiscoveryJobsResultsFilter>> filters;

    public Output</* @Nullable */ List<GetDiscoveryJobsResultsFilter>> filters() {
        return this.filters;
    }

    /**
     * A filter to return the discovery result resources based on the value of their isResultApplied attribute.
     * 
     */
    @Import(name="isResultApplied")
    private Output</* @Nullable */ Boolean> isResultApplied;

    /**
     * @return A filter to return the discovery result resources based on the value of their isResultApplied attribute.
     * 
     */
    public Output</* @Nullable */ Boolean> isResultApplied() {
        return this.isResultApplied;
    }

    /**
     * A filter to return only items related to a specific object name.
     * 
     */
    @Import(name="objects")
    private Output</* @Nullable */ List<String>> objects;

    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    public Output</* @Nullable */ List<String>> objects() {
        return this.objects;
    }

    /**
     * A filter to return only the resources that match the specified planned action.
     * 
     */
    @Import(name="plannedAction")
    private Output</* @Nullable */ String> plannedAction;

    /**
     * @return A filter to return only the resources that match the specified planned action.
     * 
     */
    public Output</* @Nullable */ String> plannedAction() {
        return this.plannedAction;
    }

    /**
     * A filter to return only items related to specific schema name.
     * 
     */
    @Import(name="schemaNames")
    private Output</* @Nullable */ List<String>> schemaNames;

    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public Output</* @Nullable */ List<String>> schemaNames() {
        return this.schemaNames;
    }

    private GetDiscoveryJobsResultsArgs() {}

    private GetDiscoveryJobsResultsArgs(GetDiscoveryJobsResultsArgs $) {
        this.columnNames = $.columnNames;
        this.discoveryJobId = $.discoveryJobId;
        this.discoveryType = $.discoveryType;
        this.filters = $.filters;
        this.isResultApplied = $.isResultApplied;
        this.objects = $.objects;
        this.plannedAction = $.plannedAction;
        this.schemaNames = $.schemaNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDiscoveryJobsResultsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDiscoveryJobsResultsArgs $;

        public Builder() {
            $ = new GetDiscoveryJobsResultsArgs();
        }

        public Builder(GetDiscoveryJobsResultsArgs defaults) {
            $ = new GetDiscoveryJobsResultsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnNames A filter to return only a specific column based on column name.
         * 
         * @return builder
         * 
         */
        public Builder columnNames(Output</* @Nullable */ List<String>> columnNames) {
            $.columnNames = columnNames;
            return this;
        }

        /**
         * @param columnNames A filter to return only a specific column based on column name.
         * 
         * @return builder
         * 
         */
        public Builder columnNames(@Nullable List<String> columnNames) {
            return columnNames(Output.of(columnNames));
        }

        /**
         * @param columnNames A filter to return only a specific column based on column name.
         * 
         * @return builder
         * 
         */
        public Builder columnNames(String... columnNames) {
            return columnNames(List.of(columnNames));
        }

        /**
         * @param discoveryJobId The OCID of the discovery job.
         * 
         * @return builder
         * 
         */
        public Builder discoveryJobId(Output<String> discoveryJobId) {
            $.discoveryJobId = discoveryJobId;
            return this;
        }

        /**
         * @param discoveryJobId The OCID of the discovery job.
         * 
         * @return builder
         * 
         */
        public Builder discoveryJobId(String discoveryJobId) {
            return discoveryJobId(Output.of(discoveryJobId));
        }

        /**
         * @param discoveryType A filter to return only the resources that match the specified discovery type.
         * 
         * @return builder
         * 
         */
        public Builder discoveryType(Output</* @Nullable */ String> discoveryType) {
            $.discoveryType = discoveryType;
            return this;
        }

        /**
         * @param discoveryType A filter to return only the resources that match the specified discovery type.
         * 
         * @return builder
         * 
         */
        public Builder discoveryType(@Nullable String discoveryType) {
            return discoveryType(Output.of(discoveryType));
        }

        public Builder filters(Output</* @Nullable */ List<GetDiscoveryJobsResultsFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetDiscoveryJobsResultsFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDiscoveryJobsResultsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isResultApplied A filter to return the discovery result resources based on the value of their isResultApplied attribute.
         * 
         * @return builder
         * 
         */
        public Builder isResultApplied(Output</* @Nullable */ Boolean> isResultApplied) {
            $.isResultApplied = isResultApplied;
            return this;
        }

        /**
         * @param isResultApplied A filter to return the discovery result resources based on the value of their isResultApplied attribute.
         * 
         * @return builder
         * 
         */
        public Builder isResultApplied(@Nullable Boolean isResultApplied) {
            return isResultApplied(Output.of(isResultApplied));
        }

        /**
         * @param objects A filter to return only items related to a specific object name.
         * 
         * @return builder
         * 
         */
        public Builder objects(Output</* @Nullable */ List<String>> objects) {
            $.objects = objects;
            return this;
        }

        /**
         * @param objects A filter to return only items related to a specific object name.
         * 
         * @return builder
         * 
         */
        public Builder objects(@Nullable List<String> objects) {
            return objects(Output.of(objects));
        }

        /**
         * @param objects A filter to return only items related to a specific object name.
         * 
         * @return builder
         * 
         */
        public Builder objects(String... objects) {
            return objects(List.of(objects));
        }

        /**
         * @param plannedAction A filter to return only the resources that match the specified planned action.
         * 
         * @return builder
         * 
         */
        public Builder plannedAction(Output</* @Nullable */ String> plannedAction) {
            $.plannedAction = plannedAction;
            return this;
        }

        /**
         * @param plannedAction A filter to return only the resources that match the specified planned action.
         * 
         * @return builder
         * 
         */
        public Builder plannedAction(@Nullable String plannedAction) {
            return plannedAction(Output.of(plannedAction));
        }

        /**
         * @param schemaNames A filter to return only items related to specific schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaNames(Output</* @Nullable */ List<String>> schemaNames) {
            $.schemaNames = schemaNames;
            return this;
        }

        /**
         * @param schemaNames A filter to return only items related to specific schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaNames(@Nullable List<String> schemaNames) {
            return schemaNames(Output.of(schemaNames));
        }

        /**
         * @param schemaNames A filter to return only items related to specific schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaNames(String... schemaNames) {
            return schemaNames(List.of(schemaNames));
        }

        public GetDiscoveryJobsResultsArgs build() {
            $.discoveryJobId = Objects.requireNonNull($.discoveryJobId, "expected parameter 'discoveryJobId' to be non-null");
            return $;
        }
    }

}
