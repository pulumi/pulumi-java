// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.DbSystemDbHomeDatabaseConnectionStringArgs;
import com.pulumi.oci.Database.inputs.DbSystemDbHomeDatabaseDbBackupConfigArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbSystemDbHomeDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbSystemDbHomeDatabaseArgs Empty = new DbSystemDbHomeDatabaseArgs();

    /**
     * A strong password for SYS, SYSTEM, PDB Admin and TDE Wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    @Import(name="adminPassword", required=true)
    private Output<String> adminPassword;

    /**
     * @return A strong password for SYS, SYSTEM, PDB Admin and TDE Wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public Output<String> adminPassword() {
        return this.adminPassword;
    }

    /**
     * The backup [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="backupId")
    private @Nullable Output<String> backupId;

    /**
     * @return The backup [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> backupId() {
        return Optional.ofNullable(this.backupId);
    }

    /**
     * The password to open the TDE wallet.
     * 
     */
    @Import(name="backupTdePassword")
    private @Nullable Output<String> backupTdePassword;

    /**
     * @return The password to open the TDE wallet.
     * 
     */
    public Optional<Output<String>> backupTdePassword() {
        return Optional.ofNullable(this.backupTdePassword);
    }

    /**
     * The character set for the database.  The default is AL32UTF8. Allowed values are:
     * 
     */
    @Import(name="characterSet")
    private @Nullable Output<String> characterSet;

    /**
     * @return The character set for the database.  The default is AL32UTF8. Allowed values are:
     * 
     */
    public Optional<Output<String>> characterSet() {
        return Optional.ofNullable(this.characterSet);
    }

    @Import(name="connectionStrings")
    private @Nullable Output<List<DbSystemDbHomeDatabaseConnectionStringArgs>> connectionStrings;

    public Optional<Output<List<DbSystemDbHomeDatabaseConnectionStringArgs>>> connectionStrings() {
        return Optional.ofNullable(this.connectionStrings);
    }

    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="databaseId")
    private @Nullable Output<String> databaseId;

    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }

    /**
     * The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the image to be used to restore a database.
     * 
     */
    @Import(name="databaseSoftwareImageId")
    private @Nullable Output<String> databaseSoftwareImageId;

    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the image to be used to restore a database.
     * 
     */
    public Optional<Output<String>> databaseSoftwareImageId() {
        return Optional.ofNullable(this.databaseSoftwareImageId);
    }

    /**
     * (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    @Import(name="dbBackupConfig")
    private @Nullable Output<DbSystemDbHomeDatabaseDbBackupConfigArgs> dbBackupConfig;

    /**
     * @return (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    public Optional<Output<DbSystemDbHomeDatabaseDbBackupConfigArgs>> dbBackupConfig() {
        return Optional.ofNullable(this.dbBackupConfig);
    }

    /**
     * The database domain. In a distributed database system, DB_DOMAIN specifies the logical location of the database within the network structure.
     * 
     */
    @Import(name="dbDomain")
    private @Nullable Output<String> dbDomain;

    /**
     * @return The database domain. In a distributed database system, DB_DOMAIN specifies the logical location of the database within the network structure.
     * 
     */
    public Optional<Output<String>> dbDomain() {
        return Optional.ofNullable(this.dbDomain);
    }

    /**
     * The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
     * 
     */
    @Import(name="dbName")
    private @Nullable Output<String> dbName;

    /**
     * @return The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
     * 
     */
    public Optional<Output<String>> dbName() {
        return Optional.ofNullable(this.dbName);
    }

    @Import(name="dbUniqueName")
    private @Nullable Output<String> dbUniqueName;

    public Optional<Output<String>> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }

    /**
     * The database workload type.
     * 
     */
    @Import(name="dbWorkload")
    private @Nullable Output<String> dbWorkload;

    /**
     * @return The database workload type.
     * 
     */
    public Optional<Output<String>> dbWorkload() {
        return Optional.ofNullable(this.dbWorkload);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup destination.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup destination.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    @Import(name="kmsKeyVersionId")
    private @Nullable Output<String> kmsKeyVersionId;

    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    public Optional<Output<String>> kmsKeyVersionId() {
        return Optional.ofNullable(this.kmsKeyVersionId);
    }

    /**
     * Additional information about the current lifecycle state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
     * 
     */
    @Import(name="ncharacterSet")
    private @Nullable Output<String> ncharacterSet;

    /**
     * @return The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
     * 
     */
    public Optional<Output<String>> ncharacterSet() {
        return Optional.ofNullable(this.ncharacterSet);
    }

    /**
     * The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    @Import(name="pdbName")
    private @Nullable Output<String> pdbName;

    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    public Optional<Output<String>> pdbName() {
        return Optional.ofNullable(this.pdbName);
    }

    /**
     * The current state of the DB system.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the DB system.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The optional password to open the TDE wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numeric, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    @Import(name="tdeWalletPassword")
    private @Nullable Output<String> tdeWalletPassword;

    /**
     * @return The optional password to open the TDE wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numeric, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public Optional<Output<String>> tdeWalletPassword() {
        return Optional.ofNullable(this.tdeWalletPassword);
    }

    /**
     * The date and time the DB system was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the DB system was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The point in time of the original database from which the new database is created. If not specifed, the latest backup is used to create the database.
     * 
     */
    @Import(name="timeStampForPointInTimeRecovery")
    private @Nullable Output<String> timeStampForPointInTimeRecovery;

    /**
     * @return The point in time of the original database from which the new database is created. If not specifed, the latest backup is used to create the database.
     * 
     */
    public Optional<Output<String>> timeStampForPointInTimeRecovery() {
        return Optional.ofNullable(this.timeStampForPointInTimeRecovery);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    private DbSystemDbHomeDatabaseArgs() {}

    private DbSystemDbHomeDatabaseArgs(DbSystemDbHomeDatabaseArgs $) {
        this.adminPassword = $.adminPassword;
        this.backupId = $.backupId;
        this.backupTdePassword = $.backupTdePassword;
        this.characterSet = $.characterSet;
        this.connectionStrings = $.connectionStrings;
        this.databaseId = $.databaseId;
        this.databaseSoftwareImageId = $.databaseSoftwareImageId;
        this.dbBackupConfig = $.dbBackupConfig;
        this.dbDomain = $.dbDomain;
        this.dbName = $.dbName;
        this.dbUniqueName = $.dbUniqueName;
        this.dbWorkload = $.dbWorkload;
        this.definedTags = $.definedTags;
        this.freeformTags = $.freeformTags;
        this.id = $.id;
        this.kmsKeyId = $.kmsKeyId;
        this.kmsKeyVersionId = $.kmsKeyVersionId;
        this.lifecycleDetails = $.lifecycleDetails;
        this.ncharacterSet = $.ncharacterSet;
        this.pdbName = $.pdbName;
        this.state = $.state;
        this.tdeWalletPassword = $.tdeWalletPassword;
        this.timeCreated = $.timeCreated;
        this.timeStampForPointInTimeRecovery = $.timeStampForPointInTimeRecovery;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbSystemDbHomeDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbSystemDbHomeDatabaseArgs $;

        public Builder() {
            $ = new DbSystemDbHomeDatabaseArgs();
        }

        public Builder(DbSystemDbHomeDatabaseArgs defaults) {
            $ = new DbSystemDbHomeDatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPassword A strong password for SYS, SYSTEM, PDB Admin and TDE Wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword A strong password for SYS, SYSTEM, PDB Admin and TDE Wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param backupId The backup [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder backupId(@Nullable Output<String> backupId) {
            $.backupId = backupId;
            return this;
        }

        /**
         * @param backupId The backup [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder backupId(String backupId) {
            return backupId(Output.of(backupId));
        }

        /**
         * @param backupTdePassword The password to open the TDE wallet.
         * 
         * @return builder
         * 
         */
        public Builder backupTdePassword(@Nullable Output<String> backupTdePassword) {
            $.backupTdePassword = backupTdePassword;
            return this;
        }

        /**
         * @param backupTdePassword The password to open the TDE wallet.
         * 
         * @return builder
         * 
         */
        public Builder backupTdePassword(String backupTdePassword) {
            return backupTdePassword(Output.of(backupTdePassword));
        }

        /**
         * @param characterSet The character set for the database.  The default is AL32UTF8. Allowed values are:
         * 
         * @return builder
         * 
         */
        public Builder characterSet(@Nullable Output<String> characterSet) {
            $.characterSet = characterSet;
            return this;
        }

        /**
         * @param characterSet The character set for the database.  The default is AL32UTF8. Allowed values are:
         * 
         * @return builder
         * 
         */
        public Builder characterSet(String characterSet) {
            return characterSet(Output.of(characterSet));
        }

        public Builder connectionStrings(@Nullable Output<List<DbSystemDbHomeDatabaseConnectionStringArgs>> connectionStrings) {
            $.connectionStrings = connectionStrings;
            return this;
        }

        public Builder connectionStrings(List<DbSystemDbHomeDatabaseConnectionStringArgs> connectionStrings) {
            return connectionStrings(Output.of(connectionStrings));
        }

        public Builder connectionStrings(DbSystemDbHomeDatabaseConnectionStringArgs... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }

        /**
         * @param databaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder databaseId(@Nullable Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param databaseSoftwareImageId The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the image to be used to restore a database.
         * 
         * @return builder
         * 
         */
        public Builder databaseSoftwareImageId(@Nullable Output<String> databaseSoftwareImageId) {
            $.databaseSoftwareImageId = databaseSoftwareImageId;
            return this;
        }

        /**
         * @param databaseSoftwareImageId The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the image to be used to restore a database.
         * 
         * @return builder
         * 
         */
        public Builder databaseSoftwareImageId(String databaseSoftwareImageId) {
            return databaseSoftwareImageId(Output.of(databaseSoftwareImageId));
        }

        /**
         * @param dbBackupConfig (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbBackupConfig(@Nullable Output<DbSystemDbHomeDatabaseDbBackupConfigArgs> dbBackupConfig) {
            $.dbBackupConfig = dbBackupConfig;
            return this;
        }

        /**
         * @param dbBackupConfig (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbBackupConfig(DbSystemDbHomeDatabaseDbBackupConfigArgs dbBackupConfig) {
            return dbBackupConfig(Output.of(dbBackupConfig));
        }

        /**
         * @param dbDomain The database domain. In a distributed database system, DB_DOMAIN specifies the logical location of the database within the network structure.
         * 
         * @return builder
         * 
         */
        public Builder dbDomain(@Nullable Output<String> dbDomain) {
            $.dbDomain = dbDomain;
            return this;
        }

        /**
         * @param dbDomain The database domain. In a distributed database system, DB_DOMAIN specifies the logical location of the database within the network structure.
         * 
         * @return builder
         * 
         */
        public Builder dbDomain(String dbDomain) {
            return dbDomain(Output.of(dbDomain));
        }

        /**
         * @param dbName The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
         * 
         * @return builder
         * 
         */
        public Builder dbName(@Nullable Output<String> dbName) {
            $.dbName = dbName;
            return this;
        }

        /**
         * @param dbName The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
         * 
         * @return builder
         * 
         */
        public Builder dbName(String dbName) {
            return dbName(Output.of(dbName));
        }

        public Builder dbUniqueName(@Nullable Output<String> dbUniqueName) {
            $.dbUniqueName = dbUniqueName;
            return this;
        }

        public Builder dbUniqueName(String dbUniqueName) {
            return dbUniqueName(Output.of(dbUniqueName));
        }

        /**
         * @param dbWorkload The database workload type.
         * 
         * @return builder
         * 
         */
        public Builder dbWorkload(@Nullable Output<String> dbWorkload) {
            $.dbWorkload = dbWorkload;
            return this;
        }

        /**
         * @param dbWorkload The database workload type.
         * 
         * @return builder
         * 
         */
        public Builder dbWorkload(String dbWorkload) {
            return dbWorkload(Output.of(dbWorkload));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup destination.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param kmsKeyId The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param kmsKeyVersionId The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyVersionId(@Nullable Output<String> kmsKeyVersionId) {
            $.kmsKeyVersionId = kmsKeyVersionId;
            return this;
        }

        /**
         * @param kmsKeyVersionId The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyVersionId(String kmsKeyVersionId) {
            return kmsKeyVersionId(Output.of(kmsKeyVersionId));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param ncharacterSet The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
         * 
         * @return builder
         * 
         */
        public Builder ncharacterSet(@Nullable Output<String> ncharacterSet) {
            $.ncharacterSet = ncharacterSet;
            return this;
        }

        /**
         * @param ncharacterSet The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
         * 
         * @return builder
         * 
         */
        public Builder ncharacterSet(String ncharacterSet) {
            return ncharacterSet(Output.of(ncharacterSet));
        }

        /**
         * @param pdbName The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(@Nullable Output<String> pdbName) {
            $.pdbName = pdbName;
            return this;
        }

        /**
         * @param pdbName The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(String pdbName) {
            return pdbName(Output.of(pdbName));
        }

        /**
         * @param state The current state of the DB system.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the DB system.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tdeWalletPassword The optional password to open the TDE wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numeric, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder tdeWalletPassword(@Nullable Output<String> tdeWalletPassword) {
            $.tdeWalletPassword = tdeWalletPassword;
            return this;
        }

        /**
         * @param tdeWalletPassword The optional password to open the TDE wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numeric, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder tdeWalletPassword(String tdeWalletPassword) {
            return tdeWalletPassword(Output.of(tdeWalletPassword));
        }

        /**
         * @param timeCreated The date and time the DB system was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the DB system was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeStampForPointInTimeRecovery The point in time of the original database from which the new database is created. If not specifed, the latest backup is used to create the database.
         * 
         * @return builder
         * 
         */
        public Builder timeStampForPointInTimeRecovery(@Nullable Output<String> timeStampForPointInTimeRecovery) {
            $.timeStampForPointInTimeRecovery = timeStampForPointInTimeRecovery;
            return this;
        }

        /**
         * @param timeStampForPointInTimeRecovery The point in time of the original database from which the new database is created. If not specifed, the latest backup is used to create the database.
         * 
         * @return builder
         * 
         */
        public Builder timeStampForPointInTimeRecovery(String timeStampForPointInTimeRecovery) {
            return timeStampForPointInTimeRecovery(Output.of(timeStampForPointInTimeRecovery));
        }

        /**
         * @param vaultId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public DbSystemDbHomeDatabaseArgs build() {
            $.adminPassword = Objects.requireNonNull($.adminPassword, "expected parameter 'adminPassword' to be non-null");
            return $;
        }
    }

}
