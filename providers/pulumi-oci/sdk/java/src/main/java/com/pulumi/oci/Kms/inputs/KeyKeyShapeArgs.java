// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyKeyShapeArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyKeyShapeArgs Empty = new KeyKeyShapeArgs();

    /**
     * The algorithm used by a key&#39;s key versions to encrypt or decrypt.
     * 
     */
    @Import(name="algorithm", required=true)
    private Output<String> algorithm;

    /**
     * @return The algorithm used by a key&#39;s key versions to encrypt or decrypt.
     * 
     */
    public Output<String> algorithm() {
        return this.algorithm;
    }

    /**
     * Supported curve IDs for ECDSA keys.
     * 
     */
    @Import(name="curveId")
    private @Nullable Output<String> curveId;

    /**
     * @return Supported curve IDs for ECDSA keys.
     * 
     */
    public Optional<Output<String>> curveId() {
        return Optional.ofNullable(this.curveId);
    }

    /**
     * The length of the key in bytes, expressed as an integer. Supported values include the following:
     * * AES: 16, 24, or 32
     * * RSA: 256, 384, or 512
     * * ECDSA: 32, 48, or 66
     * 
     */
    @Import(name="length", required=true)
    private Output<Integer> length;

    /**
     * @return The length of the key in bytes, expressed as an integer. Supported values include the following:
     * * AES: 16, 24, or 32
     * * RSA: 256, 384, or 512
     * * ECDSA: 32, 48, or 66
     * 
     */
    public Output<Integer> length() {
        return this.length;
    }

    private KeyKeyShapeArgs() {}

    private KeyKeyShapeArgs(KeyKeyShapeArgs $) {
        this.algorithm = $.algorithm;
        this.curveId = $.curveId;
        this.length = $.length;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyKeyShapeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyKeyShapeArgs $;

        public Builder() {
            $ = new KeyKeyShapeArgs();
        }

        public Builder(KeyKeyShapeArgs defaults) {
            $ = new KeyKeyShapeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm The algorithm used by a key&#39;s key versions to encrypt or decrypt.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm The algorithm used by a key&#39;s key versions to encrypt or decrypt.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param curveId Supported curve IDs for ECDSA keys.
         * 
         * @return builder
         * 
         */
        public Builder curveId(@Nullable Output<String> curveId) {
            $.curveId = curveId;
            return this;
        }

        /**
         * @param curveId Supported curve IDs for ECDSA keys.
         * 
         * @return builder
         * 
         */
        public Builder curveId(String curveId) {
            return curveId(Output.of(curveId));
        }

        /**
         * @param length The length of the key in bytes, expressed as an integer. Supported values include the following:
         * * AES: 16, 24, or 32
         * * RSA: 256, 384, or 512
         * * ECDSA: 32, 48, or 66
         * 
         * @return builder
         * 
         */
        public Builder length(Output<Integer> length) {
            $.length = length;
            return this;
        }

        /**
         * @param length The length of the key in bytes, expressed as an integer. Supported values include the following:
         * * AES: 16, 24, or 32
         * * RSA: 256, 384, or 512
         * * ECDSA: 32, 48, or 66
         * 
         * @return builder
         * 
         */
        public Builder length(Integer length) {
            return length(Output.of(length));
        }

        public KeyKeyShapeArgs build() {
            $.algorithm = Objects.requireNonNull($.algorithm, "expected parameter 'algorithm' to be non-null");
            $.length = Objects.requireNonNull($.length, "expected parameter 'length' to be non-null");
            return $;
        }
    }

}
