// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.GetOnpremConnectorsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOnpremConnectorsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOnpremConnectorsArgs Empty = new GetOnpremConnectorsArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * A filter to return only resources that match the specified display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetOnpremConnectorsFilterArgs>> filters;

    public Optional<Output<List<GetOnpremConnectorsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only the on-premises connector that matches the specified id.
     * 
     */
    @Import(name="onPremConnectorId")
    private @Nullable Output<String> onPremConnectorId;

    /**
     * @return A filter to return only the on-premises connector that matches the specified id.
     * 
     */
    public Optional<Output<String>> onPremConnectorId() {
        return Optional.ofNullable(this.onPremConnectorId);
    }

    /**
     * A filter to return only on-premises connector resources that match the specified lifecycle state.
     * 
     */
    @Import(name="onPremConnectorLifecycleState")
    private @Nullable Output<String> onPremConnectorLifecycleState;

    /**
     * @return A filter to return only on-premises connector resources that match the specified lifecycle state.
     * 
     */
    public Optional<Output<String>> onPremConnectorLifecycleState() {
        return Optional.ofNullable(this.onPremConnectorLifecycleState);
    }

    private GetOnpremConnectorsArgs() {}

    private GetOnpremConnectorsArgs(GetOnpremConnectorsArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.onPremConnectorId = $.onPremConnectorId;
        this.onPremConnectorLifecycleState = $.onPremConnectorLifecycleState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOnpremConnectorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOnpremConnectorsArgs $;

        public Builder() {
            $ = new GetOnpremConnectorsArgs();
        }

        public Builder(GetOnpremConnectorsArgs defaults) {
            $ = new GetOnpremConnectorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        /**
         * @param displayName A filter to return only resources that match the specified display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the specified display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetOnpremConnectorsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetOnpremConnectorsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetOnpremConnectorsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param onPremConnectorId A filter to return only the on-premises connector that matches the specified id.
         * 
         * @return builder
         * 
         */
        public Builder onPremConnectorId(@Nullable Output<String> onPremConnectorId) {
            $.onPremConnectorId = onPremConnectorId;
            return this;
        }

        /**
         * @param onPremConnectorId A filter to return only the on-premises connector that matches the specified id.
         * 
         * @return builder
         * 
         */
        public Builder onPremConnectorId(String onPremConnectorId) {
            return onPremConnectorId(Output.of(onPremConnectorId));
        }

        /**
         * @param onPremConnectorLifecycleState A filter to return only on-premises connector resources that match the specified lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder onPremConnectorLifecycleState(@Nullable Output<String> onPremConnectorLifecycleState) {
            $.onPremConnectorLifecycleState = onPremConnectorLifecycleState;
            return this;
        }

        /**
         * @param onPremConnectorLifecycleState A filter to return only on-premises connector resources that match the specified lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder onPremConnectorLifecycleState(String onPremConnectorLifecycleState) {
            return onPremConnectorLifecycleState(Output.of(onPremConnectorLifecycleState));
        }

        public GetOnpremConnectorsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
