// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Dns.inputs.RrsetItemArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RrsetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RrsetArgs Empty = new RrsetArgs();

    /**
     * (Updatable) The OCID of the compartment the resource belongs to.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment the resource belongs to.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The fully qualified domain name where the record can be located.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The fully qualified domain name where the record can be located.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * (Updatable)
     * **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
     * 
     */
    @Import(name="items")
    private @Nullable Output<List<RrsetItemArgs>> items;

    /**
     * @return (Updatable)
     * **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
     * 
     */
    public Optional<Output<List<RrsetItemArgs>>> items() {
        return Optional.ofNullable(this.items);
    }

    /**
     * The type of the target RRSet within the target zone.
     * 
     */
    @Import(name="rtype", required=true)
    private Output<String> rtype;

    /**
     * @return The type of the target RRSet within the target zone.
     * 
     */
    public Output<String> rtype() {
        return this.rtype;
    }

    /**
     * Specifies to operate only on resources that have a matching DNS scope.
     * This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Specifies to operate only on resources that have a matching DNS scope.
     * This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The OCID of the view the resource is associated with.
     * 
     */
    @Import(name="viewId")
    private @Nullable Output<String> viewId;

    /**
     * @return The OCID of the view the resource is associated with.
     * 
     */
    public Optional<Output<String>> viewId() {
        return Optional.ofNullable(this.viewId);
    }

    /**
     * The name or OCID of the target zone.
     * 
     */
    @Import(name="zoneNameOrId", required=true)
    private Output<String> zoneNameOrId;

    /**
     * @return The name or OCID of the target zone.
     * 
     */
    public Output<String> zoneNameOrId() {
        return this.zoneNameOrId;
    }

    private RrsetArgs() {}

    private RrsetArgs(RrsetArgs $) {
        this.compartmentId = $.compartmentId;
        this.domain = $.domain;
        this.items = $.items;
        this.rtype = $.rtype;
        this.scope = $.scope;
        this.viewId = $.viewId;
        this.zoneNameOrId = $.zoneNameOrId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RrsetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RrsetArgs $;

        public Builder() {
            $ = new RrsetArgs();
        }

        public Builder(RrsetArgs defaults) {
            $ = new RrsetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment the resource belongs to.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment the resource belongs to.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param domain The fully qualified domain name where the record can be located.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The fully qualified domain name where the record can be located.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param items (Updatable)
         * **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
         * 
         * @return builder
         * 
         */
        public Builder items(@Nullable Output<List<RrsetItemArgs>> items) {
            $.items = items;
            return this;
        }

        /**
         * @param items (Updatable)
         * **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
         * 
         * @return builder
         * 
         */
        public Builder items(List<RrsetItemArgs> items) {
            return items(Output.of(items));
        }

        /**
         * @param items (Updatable)
         * **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
         * 
         * @return builder
         * 
         */
        public Builder items(RrsetItemArgs... items) {
            return items(List.of(items));
        }

        /**
         * @param rtype The type of the target RRSet within the target zone.
         * 
         * @return builder
         * 
         */
        public Builder rtype(Output<String> rtype) {
            $.rtype = rtype;
            return this;
        }

        /**
         * @param rtype The type of the target RRSet within the target zone.
         * 
         * @return builder
         * 
         */
        public Builder rtype(String rtype) {
            return rtype(Output.of(rtype));
        }

        /**
         * @param scope Specifies to operate only on resources that have a matching DNS scope.
         * This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Specifies to operate only on resources that have a matching DNS scope.
         * This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param viewId The OCID of the view the resource is associated with.
         * 
         * @return builder
         * 
         */
        public Builder viewId(@Nullable Output<String> viewId) {
            $.viewId = viewId;
            return this;
        }

        /**
         * @param viewId The OCID of the view the resource is associated with.
         * 
         * @return builder
         * 
         */
        public Builder viewId(String viewId) {
            return viewId(Output.of(viewId));
        }

        /**
         * @param zoneNameOrId The name or OCID of the target zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneNameOrId(Output<String> zoneNameOrId) {
            $.zoneNameOrId = zoneNameOrId;
            return this;
        }

        /**
         * @param zoneNameOrId The name or OCID of the target zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneNameOrId(String zoneNameOrId) {
            return zoneNameOrId(Output.of(zoneNameOrId));
        }

        public RrsetArgs build() {
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.rtype = Objects.requireNonNull($.rtype, "expected parameter 'rtype' to be non-null");
            $.zoneNameOrId = Objects.requireNonNull($.zoneNameOrId, "expected parameter 'zoneNameOrId' to be non-null");
            return $;
        }
    }

}
