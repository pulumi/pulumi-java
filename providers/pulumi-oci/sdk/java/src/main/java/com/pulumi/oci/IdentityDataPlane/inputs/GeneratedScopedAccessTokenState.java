// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.IdentityDataPlane.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GeneratedScopedAccessTokenState extends com.pulumi.resources.ResourceArgs {

    public static final GeneratedScopedAccessTokenState Empty = new GeneratedScopedAccessTokenState();

    /**
     * A temporary public key, owned by the service. The service also owns the corresponding private key. This public key will by put inside the security token by the auth service after successful validation of the certificate.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return A temporary public key, owned by the service. The service also owns the corresponding private key. This public key will by put inside the security token by the auth service after successful validation of the certificate.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * Scope definition for the scoped access token
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Scope definition for the scoped access token
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The security token, signed by auth service
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The security token, signed by auth service
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    private GeneratedScopedAccessTokenState() {}

    private GeneratedScopedAccessTokenState(GeneratedScopedAccessTokenState $) {
        this.publicKey = $.publicKey;
        this.scope = $.scope;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GeneratedScopedAccessTokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GeneratedScopedAccessTokenState $;

        public Builder() {
            $ = new GeneratedScopedAccessTokenState();
        }

        public Builder(GeneratedScopedAccessTokenState defaults) {
            $ = new GeneratedScopedAccessTokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param publicKey A temporary public key, owned by the service. The service also owns the corresponding private key. This public key will by put inside the security token by the auth service after successful validation of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey A temporary public key, owned by the service. The service also owns the corresponding private key. This public key will by put inside the security token by the auth service after successful validation of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param scope Scope definition for the scoped access token
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope definition for the scoped access token
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param token The security token, signed by auth service
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The security token, signed by auth service
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public GeneratedScopedAccessTokenState build() {
            return $;
        }
    }

}
