// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.HealthChecks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.HealthChecks.outputs.GetHttpProbeResultsHttpProbeResultConnection;
import com.pulumi.oci.HealthChecks.outputs.GetHttpProbeResultsHttpProbeResultDn;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetHttpProbeResultsHttpProbeResult {
    /**
     * @return The time immediately after the vantage point finishes establishing the connection to the server to retrieve the resource.
     * 
     */
    private final Double connectEnd;
    /**
     * @return The time immediately before the vantage point starts establishing the connection to the server to retrieve the resource.
     * 
     */
    private final Double connectStart;
    /**
     * @return TCP connection results.  All durations are in milliseconds.
     * 
     */
    private final List<GetHttpProbeResultsHttpProbeResultConnection> connections;
    /**
     * @return The DNS resolution results.
     * 
     */
    private final List<GetHttpProbeResultsHttpProbeResultDn> dns;
    /**
     * @return The time immediately before the vantage point finishes the domain name lookup for the resource.
     * 
     */
    private final Double domainLookupEnd;
    /**
     * @return The time immediately before the vantage point starts the domain name lookup for the resource.
     * 
     */
    private final Double domainLookupStart;
    /**
     * @return The total duration from start of request until response is fully consumed or the connection is closed.
     * 
     */
    private final Double duration;
    /**
     * @return The size, in octets, of the payload body prior to removing any applied content-codings.
     * 
     */
    private final Integer encodedBodySize;
    /**
     * @return The category of error if an error occurs executing the probe. The `errorMessage` field provides a message with the error details.
     * * NONE - No error
     * * DNS - DNS errors
     * * TRANSPORT - Transport-related errors, for example a &#34;TLS certificate expired&#34; error.
     * * NETWORK - Network-related errors, for example a &#34;network unreachable&#34; error.
     * * SYSTEM - Internal system errors.
     * 
     */
    private final String errorCategory;
    /**
     * @return The error information indicating why a probe execution failed.
     * 
     */
    private final String errorMessage;
    /**
     * @return The time immediately before the vantage point starts to fetch the resource.
     * 
     */
    private final Double fetchStart;
    /**
     * @return True if the probe result is determined to be healthy based on probe type-specific criteria.  For HTTP probes, a probe result is considered healthy if the HTTP response code is greater than or equal to 200 and less than 300.
     * 
     */
    private final Boolean isHealthy;
    /**
     * @return True if the probe did not complete before the configured `timeoutInSeconds` value.
     * 
     */
    private final Boolean isTimedOut;
    /**
     * @return A value identifying this specific probe result. The key is only unique within the results of its probe configuration. The key may be reused after 90 days.
     * 
     */
    private final String key;
    /**
     * @return The OCID of a monitor or on-demand probe.
     * 
     */
    private final String probeConfigurationId;
    /**
     * @return The supported protocols available for HTTP probes.
     * 
     */
    private final String protocol;
    /**
     * @return The time immediately before the vantage point starts requesting the resource from the server.
     * 
     */
    private final Double requestStart;
    /**
     * @return The time immediately after the vantage point receives the last byte of the response or immediately before the transport connection is closed, whichever comes first.
     * 
     */
    private final Double responseEnd;
    /**
     * @return The time immediately after the vantage point&#39;s HTTP parser receives the first byte of the response.
     * 
     */
    private final Double responseStart;
    /**
     * @return The time immediately before the vantage point starts the handshake process to secure the current connection.
     * 
     */
    private final Double secureConnectionStart;
    /**
     * @return The date and time the probe was executed, expressed in milliseconds since the POSIX epoch. This field is defined by the PerformanceResourceTiming interface of the W3C Resource Timing specification. For more information, see [Resource Timing](https://w3c.github.io/resource-timing/#sec-resource-timing).
     * 
     */
    private final Double startTime;
    /**
     * @return The HTTP response status code.
     * 
     */
    private final Integer statusCode;
    /**
     * @return Filters results that match the `target`.
     * 
     */
    private final String target;
    /**
     * @return The name of the vantage point that executed the probe.
     * 
     */
    private final String vantagePointName;

    @CustomType.Constructor
    private GetHttpProbeResultsHttpProbeResult(
        @CustomType.Parameter("connectEnd") Double connectEnd,
        @CustomType.Parameter("connectStart") Double connectStart,
        @CustomType.Parameter("connections") List<GetHttpProbeResultsHttpProbeResultConnection> connections,
        @CustomType.Parameter("dns") List<GetHttpProbeResultsHttpProbeResultDn> dns,
        @CustomType.Parameter("domainLookupEnd") Double domainLookupEnd,
        @CustomType.Parameter("domainLookupStart") Double domainLookupStart,
        @CustomType.Parameter("duration") Double duration,
        @CustomType.Parameter("encodedBodySize") Integer encodedBodySize,
        @CustomType.Parameter("errorCategory") String errorCategory,
        @CustomType.Parameter("errorMessage") String errorMessage,
        @CustomType.Parameter("fetchStart") Double fetchStart,
        @CustomType.Parameter("isHealthy") Boolean isHealthy,
        @CustomType.Parameter("isTimedOut") Boolean isTimedOut,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("probeConfigurationId") String probeConfigurationId,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("requestStart") Double requestStart,
        @CustomType.Parameter("responseEnd") Double responseEnd,
        @CustomType.Parameter("responseStart") Double responseStart,
        @CustomType.Parameter("secureConnectionStart") Double secureConnectionStart,
        @CustomType.Parameter("startTime") Double startTime,
        @CustomType.Parameter("statusCode") Integer statusCode,
        @CustomType.Parameter("target") String target,
        @CustomType.Parameter("vantagePointName") String vantagePointName) {
        this.connectEnd = connectEnd;
        this.connectStart = connectStart;
        this.connections = connections;
        this.dns = dns;
        this.domainLookupEnd = domainLookupEnd;
        this.domainLookupStart = domainLookupStart;
        this.duration = duration;
        this.encodedBodySize = encodedBodySize;
        this.errorCategory = errorCategory;
        this.errorMessage = errorMessage;
        this.fetchStart = fetchStart;
        this.isHealthy = isHealthy;
        this.isTimedOut = isTimedOut;
        this.key = key;
        this.probeConfigurationId = probeConfigurationId;
        this.protocol = protocol;
        this.requestStart = requestStart;
        this.responseEnd = responseEnd;
        this.responseStart = responseStart;
        this.secureConnectionStart = secureConnectionStart;
        this.startTime = startTime;
        this.statusCode = statusCode;
        this.target = target;
        this.vantagePointName = vantagePointName;
    }

    /**
     * @return The time immediately after the vantage point finishes establishing the connection to the server to retrieve the resource.
     * 
     */
    public Double connectEnd() {
        return this.connectEnd;
    }
    /**
     * @return The time immediately before the vantage point starts establishing the connection to the server to retrieve the resource.
     * 
     */
    public Double connectStart() {
        return this.connectStart;
    }
    /**
     * @return TCP connection results.  All durations are in milliseconds.
     * 
     */
    public List<GetHttpProbeResultsHttpProbeResultConnection> connections() {
        return this.connections;
    }
    /**
     * @return The DNS resolution results.
     * 
     */
    public List<GetHttpProbeResultsHttpProbeResultDn> dns() {
        return this.dns;
    }
    /**
     * @return The time immediately before the vantage point finishes the domain name lookup for the resource.
     * 
     */
    public Double domainLookupEnd() {
        return this.domainLookupEnd;
    }
    /**
     * @return The time immediately before the vantage point starts the domain name lookup for the resource.
     * 
     */
    public Double domainLookupStart() {
        return this.domainLookupStart;
    }
    /**
     * @return The total duration from start of request until response is fully consumed or the connection is closed.
     * 
     */
    public Double duration() {
        return this.duration;
    }
    /**
     * @return The size, in octets, of the payload body prior to removing any applied content-codings.
     * 
     */
    public Integer encodedBodySize() {
        return this.encodedBodySize;
    }
    /**
     * @return The category of error if an error occurs executing the probe. The `errorMessage` field provides a message with the error details.
     * * NONE - No error
     * * DNS - DNS errors
     * * TRANSPORT - Transport-related errors, for example a &#34;TLS certificate expired&#34; error.
     * * NETWORK - Network-related errors, for example a &#34;network unreachable&#34; error.
     * * SYSTEM - Internal system errors.
     * 
     */
    public String errorCategory() {
        return this.errorCategory;
    }
    /**
     * @return The error information indicating why a probe execution failed.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return The time immediately before the vantage point starts to fetch the resource.
     * 
     */
    public Double fetchStart() {
        return this.fetchStart;
    }
    /**
     * @return True if the probe result is determined to be healthy based on probe type-specific criteria.  For HTTP probes, a probe result is considered healthy if the HTTP response code is greater than or equal to 200 and less than 300.
     * 
     */
    public Boolean isHealthy() {
        return this.isHealthy;
    }
    /**
     * @return True if the probe did not complete before the configured `timeoutInSeconds` value.
     * 
     */
    public Boolean isTimedOut() {
        return this.isTimedOut;
    }
    /**
     * @return A value identifying this specific probe result. The key is only unique within the results of its probe configuration. The key may be reused after 90 days.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The OCID of a monitor or on-demand probe.
     * 
     */
    public String probeConfigurationId() {
        return this.probeConfigurationId;
    }
    /**
     * @return The supported protocols available for HTTP probes.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The time immediately before the vantage point starts requesting the resource from the server.
     * 
     */
    public Double requestStart() {
        return this.requestStart;
    }
    /**
     * @return The time immediately after the vantage point receives the last byte of the response or immediately before the transport connection is closed, whichever comes first.
     * 
     */
    public Double responseEnd() {
        return this.responseEnd;
    }
    /**
     * @return The time immediately after the vantage point&#39;s HTTP parser receives the first byte of the response.
     * 
     */
    public Double responseStart() {
        return this.responseStart;
    }
    /**
     * @return The time immediately before the vantage point starts the handshake process to secure the current connection.
     * 
     */
    public Double secureConnectionStart() {
        return this.secureConnectionStart;
    }
    /**
     * @return The date and time the probe was executed, expressed in milliseconds since the POSIX epoch. This field is defined by the PerformanceResourceTiming interface of the W3C Resource Timing specification. For more information, see [Resource Timing](https://w3c.github.io/resource-timing/#sec-resource-timing).
     * 
     */
    public Double startTime() {
        return this.startTime;
    }
    /**
     * @return The HTTP response status code.
     * 
     */
    public Integer statusCode() {
        return this.statusCode;
    }
    /**
     * @return Filters results that match the `target`.
     * 
     */
    public String target() {
        return this.target;
    }
    /**
     * @return The name of the vantage point that executed the probe.
     * 
     */
    public String vantagePointName() {
        return this.vantagePointName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHttpProbeResultsHttpProbeResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double connectEnd;
        private Double connectStart;
        private List<GetHttpProbeResultsHttpProbeResultConnection> connections;
        private List<GetHttpProbeResultsHttpProbeResultDn> dns;
        private Double domainLookupEnd;
        private Double domainLookupStart;
        private Double duration;
        private Integer encodedBodySize;
        private String errorCategory;
        private String errorMessage;
        private Double fetchStart;
        private Boolean isHealthy;
        private Boolean isTimedOut;
        private String key;
        private String probeConfigurationId;
        private String protocol;
        private Double requestStart;
        private Double responseEnd;
        private Double responseStart;
        private Double secureConnectionStart;
        private Double startTime;
        private Integer statusCode;
        private String target;
        private String vantagePointName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetHttpProbeResultsHttpProbeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectEnd = defaults.connectEnd;
    	      this.connectStart = defaults.connectStart;
    	      this.connections = defaults.connections;
    	      this.dns = defaults.dns;
    	      this.domainLookupEnd = defaults.domainLookupEnd;
    	      this.domainLookupStart = defaults.domainLookupStart;
    	      this.duration = defaults.duration;
    	      this.encodedBodySize = defaults.encodedBodySize;
    	      this.errorCategory = defaults.errorCategory;
    	      this.errorMessage = defaults.errorMessage;
    	      this.fetchStart = defaults.fetchStart;
    	      this.isHealthy = defaults.isHealthy;
    	      this.isTimedOut = defaults.isTimedOut;
    	      this.key = defaults.key;
    	      this.probeConfigurationId = defaults.probeConfigurationId;
    	      this.protocol = defaults.protocol;
    	      this.requestStart = defaults.requestStart;
    	      this.responseEnd = defaults.responseEnd;
    	      this.responseStart = defaults.responseStart;
    	      this.secureConnectionStart = defaults.secureConnectionStart;
    	      this.startTime = defaults.startTime;
    	      this.statusCode = defaults.statusCode;
    	      this.target = defaults.target;
    	      this.vantagePointName = defaults.vantagePointName;
        }

        public Builder connectEnd(Double connectEnd) {
            this.connectEnd = Objects.requireNonNull(connectEnd);
            return this;
        }
        public Builder connectStart(Double connectStart) {
            this.connectStart = Objects.requireNonNull(connectStart);
            return this;
        }
        public Builder connections(List<GetHttpProbeResultsHttpProbeResultConnection> connections) {
            this.connections = Objects.requireNonNull(connections);
            return this;
        }
        public Builder connections(GetHttpProbeResultsHttpProbeResultConnection... connections) {
            return connections(List.of(connections));
        }
        public Builder dns(List<GetHttpProbeResultsHttpProbeResultDn> dns) {
            this.dns = Objects.requireNonNull(dns);
            return this;
        }
        public Builder dns(GetHttpProbeResultsHttpProbeResultDn... dns) {
            return dns(List.of(dns));
        }
        public Builder domainLookupEnd(Double domainLookupEnd) {
            this.domainLookupEnd = Objects.requireNonNull(domainLookupEnd);
            return this;
        }
        public Builder domainLookupStart(Double domainLookupStart) {
            this.domainLookupStart = Objects.requireNonNull(domainLookupStart);
            return this;
        }
        public Builder duration(Double duration) {
            this.duration = Objects.requireNonNull(duration);
            return this;
        }
        public Builder encodedBodySize(Integer encodedBodySize) {
            this.encodedBodySize = Objects.requireNonNull(encodedBodySize);
            return this;
        }
        public Builder errorCategory(String errorCategory) {
            this.errorCategory = Objects.requireNonNull(errorCategory);
            return this;
        }
        public Builder errorMessage(String errorMessage) {
            this.errorMessage = Objects.requireNonNull(errorMessage);
            return this;
        }
        public Builder fetchStart(Double fetchStart) {
            this.fetchStart = Objects.requireNonNull(fetchStart);
            return this;
        }
        public Builder isHealthy(Boolean isHealthy) {
            this.isHealthy = Objects.requireNonNull(isHealthy);
            return this;
        }
        public Builder isTimedOut(Boolean isTimedOut) {
            this.isTimedOut = Objects.requireNonNull(isTimedOut);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder probeConfigurationId(String probeConfigurationId) {
            this.probeConfigurationId = Objects.requireNonNull(probeConfigurationId);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder requestStart(Double requestStart) {
            this.requestStart = Objects.requireNonNull(requestStart);
            return this;
        }
        public Builder responseEnd(Double responseEnd) {
            this.responseEnd = Objects.requireNonNull(responseEnd);
            return this;
        }
        public Builder responseStart(Double responseStart) {
            this.responseStart = Objects.requireNonNull(responseStart);
            return this;
        }
        public Builder secureConnectionStart(Double secureConnectionStart) {
            this.secureConnectionStart = Objects.requireNonNull(secureConnectionStart);
            return this;
        }
        public Builder startTime(Double startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        public Builder statusCode(Integer statusCode) {
            this.statusCode = Objects.requireNonNull(statusCode);
            return this;
        }
        public Builder target(String target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        public Builder vantagePointName(String vantagePointName) {
            this.vantagePointName = Objects.requireNonNull(vantagePointName);
            return this;
        }        public GetHttpProbeResultsHttpProbeResult build() {
            return new GetHttpProbeResultsHttpProbeResult(connectEnd, connectStart, connections, dns, domainLookupEnd, domainLookupStart, duration, encodedBodySize, errorCategory, errorMessage, fetchStart, isHealthy, isTimedOut, key, probeConfigurationId, protocol, requestStart, responseEnd, responseStart, secureConnectionStart, startTime, statusCode, target, vantagePointName);
        }
    }
}
