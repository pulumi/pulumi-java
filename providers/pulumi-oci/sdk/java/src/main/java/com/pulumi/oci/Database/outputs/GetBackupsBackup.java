// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBackupsBackup {
    /**
     * @return The name of the availability domain where the database backup is stored.
     * 
     */
    private final String availabilityDomain;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private final String compartmentId;
    /**
     * @return The Oracle Database edition of the DB system from which the database backup was taken.
     * 
     */
    private final String databaseEdition;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    private final String databaseId;
    /**
     * @return The size of the database in gigabytes at the time the backup was taken.
     * 
     */
    private final Double databaseSizeInGbs;
    /**
     * @return The user-friendly name for the backup. The name does not have to be unique.
     * 
     */
    private final String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup.
     * 
     */
    private final String id;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private final String kmsKeyId;
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    private final String kmsKeyVersionId;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return Shape of the backup&#39;s source database.
     * 
     */
    private final String shape;
    /**
     * @return The current state of the backup.
     * 
     */
    private final String state;
    /**
     * @return The date and time the backup was completed.
     * 
     */
    private final String timeEnded;
    /**
     * @return The date and time the backup started.
     * 
     */
    private final String timeStarted;
    /**
     * @return The type of backup.
     * 
     */
    private final String type;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    private final String vaultId;
    /**
     * @return Version of the backup&#39;s source database
     * 
     */
    private final String version;

    @CustomType.Constructor
    private GetBackupsBackup(
        @CustomType.Parameter("availabilityDomain") String availabilityDomain,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("databaseEdition") String databaseEdition,
        @CustomType.Parameter("databaseId") String databaseId,
        @CustomType.Parameter("databaseSizeInGbs") Double databaseSizeInGbs,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("kmsKeyId") String kmsKeyId,
        @CustomType.Parameter("kmsKeyVersionId") String kmsKeyVersionId,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("shape") String shape,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeEnded") String timeEnded,
        @CustomType.Parameter("timeStarted") String timeStarted,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("vaultId") String vaultId,
        @CustomType.Parameter("version") String version) {
        this.availabilityDomain = availabilityDomain;
        this.compartmentId = compartmentId;
        this.databaseEdition = databaseEdition;
        this.databaseId = databaseId;
        this.databaseSizeInGbs = databaseSizeInGbs;
        this.displayName = displayName;
        this.id = id;
        this.kmsKeyId = kmsKeyId;
        this.kmsKeyVersionId = kmsKeyVersionId;
        this.lifecycleDetails = lifecycleDetails;
        this.shape = shape;
        this.state = state;
        this.timeEnded = timeEnded;
        this.timeStarted = timeStarted;
        this.type = type;
        this.vaultId = vaultId;
        this.version = version;
    }

    /**
     * @return The name of the availability domain where the database backup is stored.
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The Oracle Database edition of the DB system from which the database backup was taken.
     * 
     */
    public String databaseEdition() {
        return this.databaseEdition;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The size of the database in gigabytes at the time the backup was taken.
     * 
     */
    public Double databaseSizeInGbs() {
        return this.databaseSizeInGbs;
    }
    /**
     * @return The user-friendly name for the backup. The name does not have to be unique.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    public String kmsKeyVersionId() {
        return this.kmsKeyVersionId;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Shape of the backup&#39;s source database.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The current state of the backup.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the backup was completed.
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return The date and time the backup started.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }
    /**
     * @return The type of backup.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }
    /**
     * @return Version of the backup&#39;s source database
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupsBackup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String availabilityDomain;
        private String compartmentId;
        private String databaseEdition;
        private String databaseId;
        private Double databaseSizeInGbs;
        private String displayName;
        private String id;
        private String kmsKeyId;
        private String kmsKeyVersionId;
        private String lifecycleDetails;
        private String shape;
        private String state;
        private String timeEnded;
        private String timeStarted;
        private String type;
        private String vaultId;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackupsBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseEdition = defaults.databaseEdition;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseSizeInGbs = defaults.databaseSizeInGbs;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.shape = defaults.shape;
    	      this.state = defaults.state;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
    	      this.type = defaults.type;
    	      this.vaultId = defaults.vaultId;
    	      this.version = defaults.version;
        }

        public Builder availabilityDomain(String availabilityDomain) {
            this.availabilityDomain = Objects.requireNonNull(availabilityDomain);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder databaseEdition(String databaseEdition) {
            this.databaseEdition = Objects.requireNonNull(databaseEdition);
            return this;
        }
        public Builder databaseId(String databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        public Builder databaseSizeInGbs(Double databaseSizeInGbs) {
            this.databaseSizeInGbs = Objects.requireNonNull(databaseSizeInGbs);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        public Builder kmsKeyVersionId(String kmsKeyVersionId) {
            this.kmsKeyVersionId = Objects.requireNonNull(kmsKeyVersionId);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder shape(String shape) {
            this.shape = Objects.requireNonNull(shape);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeEnded(String timeEnded) {
            this.timeEnded = Objects.requireNonNull(timeEnded);
            return this;
        }
        public Builder timeStarted(String timeStarted) {
            this.timeStarted = Objects.requireNonNull(timeStarted);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public GetBackupsBackup build() {
            return new GetBackupsBackup(availabilityDomain, compartmentId, databaseEdition, databaseId, databaseSizeInGbs, displayName, id, kmsKeyId, kmsKeyVersionId, lifecycleDetails, shape, state, timeEnded, timeStarted, type, vaultId, version);
        }
    }
}
