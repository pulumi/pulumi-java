// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.FileStorage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExportSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExportSetArgs Empty = new ExportSetArgs();

    /**
     * (Updatable) A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.  Example: `My export set`
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.  Example: `My export set`
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Controls the maximum `tbytes`, `fbytes`, and `abytes`, values reported by `NFS FSSTAT` calls through any associated mount targets. This is an advanced feature. For most applications, use the default value. The `tbytes` value reported by `FSSTAT` will be `maxFsStatBytes`. The value of `fbytes` and `abytes` will be `maxFsStatBytes` minus the metered size of the file system. If the metered size is larger than `maxFsStatBytes`, then `fbytes` and `abytes` will both be &#39;0&#39;.
     * 
     */
    @Import(name="maxFsStatBytes")
    private @Nullable Output<String> maxFsStatBytes;

    /**
     * @return (Updatable) Controls the maximum `tbytes`, `fbytes`, and `abytes`, values reported by `NFS FSSTAT` calls through any associated mount targets. This is an advanced feature. For most applications, use the default value. The `tbytes` value reported by `FSSTAT` will be `maxFsStatBytes`. The value of `fbytes` and `abytes` will be `maxFsStatBytes` minus the metered size of the file system. If the metered size is larger than `maxFsStatBytes`, then `fbytes` and `abytes` will both be &#39;0&#39;.
     * 
     */
    public Optional<Output<String>> maxFsStatBytes() {
        return Optional.ofNullable(this.maxFsStatBytes);
    }

    /**
     * (Updatable) Controls the maximum `tfiles`, `ffiles`, and `afiles` values reported by `NFS FSSTAT` calls through any associated mount targets. This is an advanced feature. For most applications, use the default value. The `tfiles` value reported by `FSSTAT` will be `maxFsStatFiles`. The value of `ffiles` and `afiles` will be `maxFsStatFiles` minus the metered size of the file system. If the metered size is larger than `maxFsStatFiles`, then `ffiles` and `afiles` will both be &#39;0&#39;.
     * 
     */
    @Import(name="maxFsStatFiles")
    private @Nullable Output<String> maxFsStatFiles;

    /**
     * @return (Updatable) Controls the maximum `tfiles`, `ffiles`, and `afiles` values reported by `NFS FSSTAT` calls through any associated mount targets. This is an advanced feature. For most applications, use the default value. The `tfiles` value reported by `FSSTAT` will be `maxFsStatFiles`. The value of `ffiles` and `afiles` will be `maxFsStatFiles` minus the metered size of the file system. If the metered size is larger than `maxFsStatFiles`, then `ffiles` and `afiles` will both be &#39;0&#39;.
     * 
     */
    public Optional<Output<String>> maxFsStatFiles() {
        return Optional.ofNullable(this.maxFsStatFiles);
    }

    /**
     * (Updatable) The OCID of the mount target that the export set is associated with
     * 
     */
    @Import(name="mountTargetId", required=true)
    private Output<String> mountTargetId;

    /**
     * @return (Updatable) The OCID of the mount target that the export set is associated with
     * 
     */
    public Output<String> mountTargetId() {
        return this.mountTargetId;
    }

    private ExportSetArgs() {}

    private ExportSetArgs(ExportSetArgs $) {
        this.displayName = $.displayName;
        this.maxFsStatBytes = $.maxFsStatBytes;
        this.maxFsStatFiles = $.maxFsStatFiles;
        this.mountTargetId = $.mountTargetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExportSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExportSetArgs $;

        public Builder() {
            $ = new ExportSetArgs();
        }

        public Builder(ExportSetArgs defaults) {
            $ = new ExportSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName (Updatable) A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.  Example: `My export set`
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.  Example: `My export set`
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param maxFsStatBytes (Updatable) Controls the maximum `tbytes`, `fbytes`, and `abytes`, values reported by `NFS FSSTAT` calls through any associated mount targets. This is an advanced feature. For most applications, use the default value. The `tbytes` value reported by `FSSTAT` will be `maxFsStatBytes`. The value of `fbytes` and `abytes` will be `maxFsStatBytes` minus the metered size of the file system. If the metered size is larger than `maxFsStatBytes`, then `fbytes` and `abytes` will both be &#39;0&#39;.
         * 
         * @return builder
         * 
         */
        public Builder maxFsStatBytes(@Nullable Output<String> maxFsStatBytes) {
            $.maxFsStatBytes = maxFsStatBytes;
            return this;
        }

        /**
         * @param maxFsStatBytes (Updatable) Controls the maximum `tbytes`, `fbytes`, and `abytes`, values reported by `NFS FSSTAT` calls through any associated mount targets. This is an advanced feature. For most applications, use the default value. The `tbytes` value reported by `FSSTAT` will be `maxFsStatBytes`. The value of `fbytes` and `abytes` will be `maxFsStatBytes` minus the metered size of the file system. If the metered size is larger than `maxFsStatBytes`, then `fbytes` and `abytes` will both be &#39;0&#39;.
         * 
         * @return builder
         * 
         */
        public Builder maxFsStatBytes(String maxFsStatBytes) {
            return maxFsStatBytes(Output.of(maxFsStatBytes));
        }

        /**
         * @param maxFsStatFiles (Updatable) Controls the maximum `tfiles`, `ffiles`, and `afiles` values reported by `NFS FSSTAT` calls through any associated mount targets. This is an advanced feature. For most applications, use the default value. The `tfiles` value reported by `FSSTAT` will be `maxFsStatFiles`. The value of `ffiles` and `afiles` will be `maxFsStatFiles` minus the metered size of the file system. If the metered size is larger than `maxFsStatFiles`, then `ffiles` and `afiles` will both be &#39;0&#39;.
         * 
         * @return builder
         * 
         */
        public Builder maxFsStatFiles(@Nullable Output<String> maxFsStatFiles) {
            $.maxFsStatFiles = maxFsStatFiles;
            return this;
        }

        /**
         * @param maxFsStatFiles (Updatable) Controls the maximum `tfiles`, `ffiles`, and `afiles` values reported by `NFS FSSTAT` calls through any associated mount targets. This is an advanced feature. For most applications, use the default value. The `tfiles` value reported by `FSSTAT` will be `maxFsStatFiles`. The value of `ffiles` and `afiles` will be `maxFsStatFiles` minus the metered size of the file system. If the metered size is larger than `maxFsStatFiles`, then `ffiles` and `afiles` will both be &#39;0&#39;.
         * 
         * @return builder
         * 
         */
        public Builder maxFsStatFiles(String maxFsStatFiles) {
            return maxFsStatFiles(Output.of(maxFsStatFiles));
        }

        /**
         * @param mountTargetId (Updatable) The OCID of the mount target that the export set is associated with
         * 
         * @return builder
         * 
         */
        public Builder mountTargetId(Output<String> mountTargetId) {
            $.mountTargetId = mountTargetId;
            return this;
        }

        /**
         * @param mountTargetId (Updatable) The OCID of the mount target that the export set is associated with
         * 
         * @return builder
         * 
         */
        public Builder mountTargetId(String mountTargetId) {
            return mountTargetId(Output.of(mountTargetId));
        }

        public ExportSetArgs build() {
            $.mountTargetId = Objects.requireNonNull($.mountTargetId, "expected parameter 'mountTargetId' to be non-null");
            return $;
        }
    }

}
