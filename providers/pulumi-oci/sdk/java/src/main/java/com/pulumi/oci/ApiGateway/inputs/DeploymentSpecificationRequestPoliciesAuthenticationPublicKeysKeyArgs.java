// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs Empty = new DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs();

    /**
     * (Updatable) The algorithm intended for use with this key.
     * 
     */
    @Import(name="alg")
    private @Nullable Output<String> alg;

    /**
     * @return (Updatable) The algorithm intended for use with this key.
     * 
     */
    public Optional<Output<String>> alg() {
        return Optional.ofNullable(this.alg);
    }

    /**
     * (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
     * 
     */
    @Import(name="e")
    private @Nullable Output<String> e;

    /**
     * @return (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
     * 
     */
    public Optional<Output<String>> e() {
        return Optional.ofNullable(this.e);
    }

    /**
     * (Updatable) The format of the public key.
     * 
     */
    @Import(name="format", required=true)
    private Output<String> format;

    /**
     * @return (Updatable) The format of the public key.
     * 
     */
    public Output<String> format() {
        return this.format;
    }

    /**
     * (Updatable) Name of the claim.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return (Updatable) Name of the claim.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * (Updatable) The operations for which this key is to be used.
     * 
     */
    @Import(name="keyOps")
    private @Nullable Output<List<String>> keyOps;

    /**
     * @return (Updatable) The operations for which this key is to be used.
     * 
     */
    public Optional<Output<List<String>>> keyOps() {
        return Optional.ofNullable(this.keyOps);
    }

    /**
     * (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching &#34;kid&#34;.
     * 
     */
    @Import(name="kid")
    private @Nullable Output<String> kid;

    /**
     * @return (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching &#34;kid&#34;.
     * 
     */
    public Optional<Output<String>> kid() {
        return Optional.ofNullable(this.kid);
    }

    /**
     * (Updatable) The key type.
     * 
     */
    @Import(name="kty")
    private @Nullable Output<String> kty;

    /**
     * @return (Updatable) The key type.
     * 
     */
    public Optional<Output<String>> kty() {
        return Optional.ofNullable(this.kty);
    }

    /**
     * (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
     * 
     */
    @Import(name="n")
    private @Nullable Output<String> n;

    /**
     * @return (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
     * 
     */
    public Optional<Output<String>> n() {
        return Optional.ofNullable(this.n);
    }

    /**
     * (Updatable) The intended use of the public key.
     * 
     */
    @Import(name="use")
    private @Nullable Output<String> use;

    /**
     * @return (Updatable) The intended use of the public key.
     * 
     */
    public Optional<Output<String>> use() {
        return Optional.ofNullable(this.use);
    }

    private DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs() {}

    private DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs(DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs $) {
        this.alg = $.alg;
        this.e = $.e;
        this.format = $.format;
        this.key = $.key;
        this.keyOps = $.keyOps;
        this.kid = $.kid;
        this.kty = $.kty;
        this.n = $.n;
        this.use = $.use;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs();
        }

        public Builder(DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs defaults) {
            $ = new DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alg (Updatable) The algorithm intended for use with this key.
         * 
         * @return builder
         * 
         */
        public Builder alg(@Nullable Output<String> alg) {
            $.alg = alg;
            return this;
        }

        /**
         * @param alg (Updatable) The algorithm intended for use with this key.
         * 
         * @return builder
         * 
         */
        public Builder alg(String alg) {
            return alg(Output.of(alg));
        }

        /**
         * @param e (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
         * 
         * @return builder
         * 
         */
        public Builder e(@Nullable Output<String> e) {
            $.e = e;
            return this;
        }

        /**
         * @param e (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
         * 
         * @return builder
         * 
         */
        public Builder e(String e) {
            return e(Output.of(e));
        }

        /**
         * @param format (Updatable) The format of the public key.
         * 
         * @return builder
         * 
         */
        public Builder format(Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format (Updatable) The format of the public key.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param key (Updatable) Name of the claim.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Updatable) Name of the claim.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param keyOps (Updatable) The operations for which this key is to be used.
         * 
         * @return builder
         * 
         */
        public Builder keyOps(@Nullable Output<List<String>> keyOps) {
            $.keyOps = keyOps;
            return this;
        }

        /**
         * @param keyOps (Updatable) The operations for which this key is to be used.
         * 
         * @return builder
         * 
         */
        public Builder keyOps(List<String> keyOps) {
            return keyOps(Output.of(keyOps));
        }

        /**
         * @param keyOps (Updatable) The operations for which this key is to be used.
         * 
         * @return builder
         * 
         */
        public Builder keyOps(String... keyOps) {
            return keyOps(List.of(keyOps));
        }

        /**
         * @param kid (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching &#34;kid&#34;.
         * 
         * @return builder
         * 
         */
        public Builder kid(@Nullable Output<String> kid) {
            $.kid = kid;
            return this;
        }

        /**
         * @param kid (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching &#34;kid&#34;.
         * 
         * @return builder
         * 
         */
        public Builder kid(String kid) {
            return kid(Output.of(kid));
        }

        /**
         * @param kty (Updatable) The key type.
         * 
         * @return builder
         * 
         */
        public Builder kty(@Nullable Output<String> kty) {
            $.kty = kty;
            return this;
        }

        /**
         * @param kty (Updatable) The key type.
         * 
         * @return builder
         * 
         */
        public Builder kty(String kty) {
            return kty(Output.of(kty));
        }

        /**
         * @param n (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
         * 
         * @return builder
         * 
         */
        public Builder n(@Nullable Output<String> n) {
            $.n = n;
            return this;
        }

        /**
         * @param n (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
         * 
         * @return builder
         * 
         */
        public Builder n(String n) {
            return n(Output.of(n));
        }

        /**
         * @param use (Updatable) The intended use of the public key.
         * 
         * @return builder
         * 
         */
        public Builder use(@Nullable Output<String> use) {
            $.use = use;
            return this;
        }

        /**
         * @param use (Updatable) The intended use of the public key.
         * 
         * @return builder
         * 
         */
        public Builder use(String use) {
            return use(Output.of(use));
        }

        public DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs build() {
            $.format = Objects.requireNonNull($.format, "expected parameter 'format' to be non-null");
            return $;
        }
    }

}
