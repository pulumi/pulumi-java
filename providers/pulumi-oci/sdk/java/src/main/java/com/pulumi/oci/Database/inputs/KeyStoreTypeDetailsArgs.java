// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class KeyStoreTypeDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyStoreTypeDetailsArgs Empty = new KeyStoreTypeDetailsArgs();

    /**
     * (Updatable) The administrator username to connect to Oracle Key Vault
     * 
     */
    @Import(name="adminUsername", required=true)
    private Output<String> adminUsername;

    /**
     * @return (Updatable) The administrator username to connect to Oracle Key Vault
     * 
     */
    public Output<String> adminUsername() {
        return this.adminUsername;
    }

    /**
     * (Updatable) The list of Oracle Key Vault connection IP addresses.
     * 
     */
    @Import(name="connectionIps", required=true)
    private Output<List<String>> connectionIps;

    /**
     * @return (Updatable) The list of Oracle Key Vault connection IP addresses.
     * 
     */
    public Output<List<String>> connectionIps() {
        return this.connectionIps;
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    @Import(name="secretId", required=true)
    private Output<String> secretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public Output<String> secretId() {
        return this.secretId;
    }

    /**
     * (Updatable) The type of key store.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) The type of key store.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    @Import(name="vaultId", required=true)
    private Output<String> vaultId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public Output<String> vaultId() {
        return this.vaultId;
    }

    private KeyStoreTypeDetailsArgs() {}

    private KeyStoreTypeDetailsArgs(KeyStoreTypeDetailsArgs $) {
        this.adminUsername = $.adminUsername;
        this.connectionIps = $.connectionIps;
        this.secretId = $.secretId;
        this.type = $.type;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyStoreTypeDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyStoreTypeDetailsArgs $;

        public Builder() {
            $ = new KeyStoreTypeDetailsArgs();
        }

        public Builder(KeyStoreTypeDetailsArgs defaults) {
            $ = new KeyStoreTypeDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminUsername (Updatable) The administrator username to connect to Oracle Key Vault
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        /**
         * @param adminUsername (Updatable) The administrator username to connect to Oracle Key Vault
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        /**
         * @param connectionIps (Updatable) The list of Oracle Key Vault connection IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder connectionIps(Output<List<String>> connectionIps) {
            $.connectionIps = connectionIps;
            return this;
        }

        /**
         * @param connectionIps (Updatable) The list of Oracle Key Vault connection IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder connectionIps(List<String> connectionIps) {
            return connectionIps(Output.of(connectionIps));
        }

        /**
         * @param connectionIps (Updatable) The list of Oracle Key Vault connection IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder connectionIps(String... connectionIps) {
            return connectionIps(List.of(connectionIps));
        }

        /**
         * @param secretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder secretId(Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param type (Updatable) The type of key store.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) The type of key store.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vaultId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder vaultId(Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public KeyStoreTypeDetailsArgs build() {
            $.adminUsername = Objects.requireNonNull($.adminUsername, "expected parameter 'adminUsername' to be non-null");
            $.connectionIps = Objects.requireNonNull($.connectionIps, "expected parameter 'connectionIps' to be non-null");
            $.secretId = Objects.requireNonNull($.secretId, "expected parameter 'secretId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.vaultId = Objects.requireNonNull($.vaultId, "expected parameter 'vaultId' to be non-null");
            return $;
        }
    }

}
