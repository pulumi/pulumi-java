// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluggableDatabasesLocalCloneArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluggableDatabasesLocalCloneArgs Empty = new PluggableDatabasesLocalCloneArgs();

    /**
     * The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    @Import(name="clonedPdbName", required=true)
    private Output<String> clonedPdbName;

    /**
     * @return The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    public Output<String> clonedPdbName() {
        return this.clonedPdbName;
    }

    /**
     * A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    @Import(name="pdbAdminPassword")
    private @Nullable Output<String> pdbAdminPassword;

    /**
     * @return A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public Optional<Output<String>> pdbAdminPassword() {
        return Optional.ofNullable(this.pdbAdminPassword);
    }

    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="pluggableDatabaseId", required=true)
    private Output<String> pluggableDatabaseId;

    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Output<String> pluggableDatabaseId() {
        return this.pluggableDatabaseId;
    }

    /**
     * The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     * 
     */
    @Import(name="shouldPdbAdminAccountBeLocked")
    private @Nullable Output<Boolean> shouldPdbAdminAccountBeLocked;

    /**
     * @return The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     * 
     */
    public Optional<Output<Boolean>> shouldPdbAdminAccountBeLocked() {
        return Optional.ofNullable(this.shouldPdbAdminAccountBeLocked);
    }

    /**
     * The existing TDE wallet password of the target CDB.
     * 
     */
    @Import(name="targetTdeWalletPassword")
    private @Nullable Output<String> targetTdeWalletPassword;

    /**
     * @return The existing TDE wallet password of the target CDB.
     * 
     */
    public Optional<Output<String>> targetTdeWalletPassword() {
        return Optional.ofNullable(this.targetTdeWalletPassword);
    }

    private PluggableDatabasesLocalCloneArgs() {}

    private PluggableDatabasesLocalCloneArgs(PluggableDatabasesLocalCloneArgs $) {
        this.clonedPdbName = $.clonedPdbName;
        this.pdbAdminPassword = $.pdbAdminPassword;
        this.pluggableDatabaseId = $.pluggableDatabaseId;
        this.shouldPdbAdminAccountBeLocked = $.shouldPdbAdminAccountBeLocked;
        this.targetTdeWalletPassword = $.targetTdeWalletPassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluggableDatabasesLocalCloneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluggableDatabasesLocalCloneArgs $;

        public Builder() {
            $ = new PluggableDatabasesLocalCloneArgs();
        }

        public Builder(PluggableDatabasesLocalCloneArgs defaults) {
            $ = new PluggableDatabasesLocalCloneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clonedPdbName The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
         * 
         * @return builder
         * 
         */
        public Builder clonedPdbName(Output<String> clonedPdbName) {
            $.clonedPdbName = clonedPdbName;
            return this;
        }

        /**
         * @param clonedPdbName The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
         * 
         * @return builder
         * 
         */
        public Builder clonedPdbName(String clonedPdbName) {
            return clonedPdbName(Output.of(clonedPdbName));
        }

        /**
         * @param pdbAdminPassword A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder pdbAdminPassword(@Nullable Output<String> pdbAdminPassword) {
            $.pdbAdminPassword = pdbAdminPassword;
            return this;
        }

        /**
         * @param pdbAdminPassword A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder pdbAdminPassword(String pdbAdminPassword) {
            return pdbAdminPassword(Output.of(pdbAdminPassword));
        }

        /**
         * @param pluggableDatabaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseId(Output<String> pluggableDatabaseId) {
            $.pluggableDatabaseId = pluggableDatabaseId;
            return this;
        }

        /**
         * @param pluggableDatabaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseId(String pluggableDatabaseId) {
            return pluggableDatabaseId(Output.of(pluggableDatabaseId));
        }

        /**
         * @param shouldPdbAdminAccountBeLocked The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
         * 
         * @return builder
         * 
         */
        public Builder shouldPdbAdminAccountBeLocked(@Nullable Output<Boolean> shouldPdbAdminAccountBeLocked) {
            $.shouldPdbAdminAccountBeLocked = shouldPdbAdminAccountBeLocked;
            return this;
        }

        /**
         * @param shouldPdbAdminAccountBeLocked The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
         * 
         * @return builder
         * 
         */
        public Builder shouldPdbAdminAccountBeLocked(Boolean shouldPdbAdminAccountBeLocked) {
            return shouldPdbAdminAccountBeLocked(Output.of(shouldPdbAdminAccountBeLocked));
        }

        /**
         * @param targetTdeWalletPassword The existing TDE wallet password of the target CDB.
         * 
         * @return builder
         * 
         */
        public Builder targetTdeWalletPassword(@Nullable Output<String> targetTdeWalletPassword) {
            $.targetTdeWalletPassword = targetTdeWalletPassword;
            return this;
        }

        /**
         * @param targetTdeWalletPassword The existing TDE wallet password of the target CDB.
         * 
         * @return builder
         * 
         */
        public Builder targetTdeWalletPassword(String targetTdeWalletPassword) {
            return targetTdeWalletPassword(Output.of(targetTdeWalletPassword));
        }

        public PluggableDatabasesLocalCloneArgs build() {
            $.clonedPdbName = Objects.requireNonNull($.clonedPdbName, "expected parameter 'clonedPdbName' to be non-null");
            $.pluggableDatabaseId = Objects.requireNonNull($.pluggableDatabaseId, "expected parameter 'pluggableDatabaseId' to be non-null");
            return $;
        }
    }

}
