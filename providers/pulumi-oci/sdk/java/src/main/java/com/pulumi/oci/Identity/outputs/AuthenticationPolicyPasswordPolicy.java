// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthenticationPolicyPasswordPolicy {
    /**
     * @return (Updatable) At least one lower case character required.
     * 
     */
    private final @Nullable Boolean isLowercaseCharactersRequired;
    /**
     * @return (Updatable) At least one numeric character required.
     * 
     */
    private final @Nullable Boolean isNumericCharactersRequired;
    /**
     * @return (Updatable) At least one special character required.
     * 
     */
    private final @Nullable Boolean isSpecialCharactersRequired;
    /**
     * @return (Updatable) At least one uppercase character required.
     * 
     */
    private final @Nullable Boolean isUppercaseCharactersRequired;
    /**
     * @return (Updatable) User name is allowed to be part of the password.
     * 
     */
    private final @Nullable Boolean isUsernameContainmentAllowed;
    /**
     * @return (Updatable) Minimum password length required.
     * 
     */
    private final @Nullable Integer minimumPasswordLength;

    @CustomType.Constructor
    private AuthenticationPolicyPasswordPolicy(
        @CustomType.Parameter("isLowercaseCharactersRequired") @Nullable Boolean isLowercaseCharactersRequired,
        @CustomType.Parameter("isNumericCharactersRequired") @Nullable Boolean isNumericCharactersRequired,
        @CustomType.Parameter("isSpecialCharactersRequired") @Nullable Boolean isSpecialCharactersRequired,
        @CustomType.Parameter("isUppercaseCharactersRequired") @Nullable Boolean isUppercaseCharactersRequired,
        @CustomType.Parameter("isUsernameContainmentAllowed") @Nullable Boolean isUsernameContainmentAllowed,
        @CustomType.Parameter("minimumPasswordLength") @Nullable Integer minimumPasswordLength) {
        this.isLowercaseCharactersRequired = isLowercaseCharactersRequired;
        this.isNumericCharactersRequired = isNumericCharactersRequired;
        this.isSpecialCharactersRequired = isSpecialCharactersRequired;
        this.isUppercaseCharactersRequired = isUppercaseCharactersRequired;
        this.isUsernameContainmentAllowed = isUsernameContainmentAllowed;
        this.minimumPasswordLength = minimumPasswordLength;
    }

    /**
     * @return (Updatable) At least one lower case character required.
     * 
     */
    public Optional<Boolean> isLowercaseCharactersRequired() {
        return Optional.ofNullable(this.isLowercaseCharactersRequired);
    }
    /**
     * @return (Updatable) At least one numeric character required.
     * 
     */
    public Optional<Boolean> isNumericCharactersRequired() {
        return Optional.ofNullable(this.isNumericCharactersRequired);
    }
    /**
     * @return (Updatable) At least one special character required.
     * 
     */
    public Optional<Boolean> isSpecialCharactersRequired() {
        return Optional.ofNullable(this.isSpecialCharactersRequired);
    }
    /**
     * @return (Updatable) At least one uppercase character required.
     * 
     */
    public Optional<Boolean> isUppercaseCharactersRequired() {
        return Optional.ofNullable(this.isUppercaseCharactersRequired);
    }
    /**
     * @return (Updatable) User name is allowed to be part of the password.
     * 
     */
    public Optional<Boolean> isUsernameContainmentAllowed() {
        return Optional.ofNullable(this.isUsernameContainmentAllowed);
    }
    /**
     * @return (Updatable) Minimum password length required.
     * 
     */
    public Optional<Integer> minimumPasswordLength() {
        return Optional.ofNullable(this.minimumPasswordLength);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthenticationPolicyPasswordPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean isLowercaseCharactersRequired;
        private @Nullable Boolean isNumericCharactersRequired;
        private @Nullable Boolean isSpecialCharactersRequired;
        private @Nullable Boolean isUppercaseCharactersRequired;
        private @Nullable Boolean isUsernameContainmentAllowed;
        private @Nullable Integer minimumPasswordLength;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthenticationPolicyPasswordPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isLowercaseCharactersRequired = defaults.isLowercaseCharactersRequired;
    	      this.isNumericCharactersRequired = defaults.isNumericCharactersRequired;
    	      this.isSpecialCharactersRequired = defaults.isSpecialCharactersRequired;
    	      this.isUppercaseCharactersRequired = defaults.isUppercaseCharactersRequired;
    	      this.isUsernameContainmentAllowed = defaults.isUsernameContainmentAllowed;
    	      this.minimumPasswordLength = defaults.minimumPasswordLength;
        }

        public Builder isLowercaseCharactersRequired(@Nullable Boolean isLowercaseCharactersRequired) {
            this.isLowercaseCharactersRequired = isLowercaseCharactersRequired;
            return this;
        }
        public Builder isNumericCharactersRequired(@Nullable Boolean isNumericCharactersRequired) {
            this.isNumericCharactersRequired = isNumericCharactersRequired;
            return this;
        }
        public Builder isSpecialCharactersRequired(@Nullable Boolean isSpecialCharactersRequired) {
            this.isSpecialCharactersRequired = isSpecialCharactersRequired;
            return this;
        }
        public Builder isUppercaseCharactersRequired(@Nullable Boolean isUppercaseCharactersRequired) {
            this.isUppercaseCharactersRequired = isUppercaseCharactersRequired;
            return this;
        }
        public Builder isUsernameContainmentAllowed(@Nullable Boolean isUsernameContainmentAllowed) {
            this.isUsernameContainmentAllowed = isUsernameContainmentAllowed;
            return this;
        }
        public Builder minimumPasswordLength(@Nullable Integer minimumPasswordLength) {
            this.minimumPasswordLength = minimumPasswordLength;
            return this;
        }        public AuthenticationPolicyPasswordPolicy build() {
            return new AuthenticationPolicyPasswordPolicy(isLowercaseCharactersRequired, isNumericCharactersRequired, isSpecialCharactersRequired, isUppercaseCharactersRequired, isUsernameContainmentAllowed, minimumPasswordLength);
        }
    }
}
