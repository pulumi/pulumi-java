// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Database.DatabaseUpgradeArgs;
import com.pulumi.oci.Database.inputs.DatabaseUpgradeState;
import com.pulumi.oci.Database.outputs.DatabaseUpgradeConnectionString;
import com.pulumi.oci.Database.outputs.DatabaseUpgradeDatabaseUpgradeSourceDetails;
import com.pulumi.oci.Database.outputs.DatabaseUpgradeDbBackupConfig;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * This resource provides the Database Upgrade resource in Oracle Cloud Infrastructure Database service.
 * 
 * Upgrades the specified Oracle Database instance.
 * 
 * Database upgrade requires source to be `DB_VERSION` or `DB_SOFTWARE_IMAGE`.
 * 	`db_home.0.db_version` is updated to target DB version specified in the upgrade request.
 * 	To avoid a force new create of the db_home on the next apply, add the following to the resource
 * 	```	lifecycle {
 * 	   	ignore_changes = [
 * 	   		db_home.0.db_version,
 * 	   	]
 * 	}
 * 	```
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Import is not supported for this resource.
 * 
 */
@ResourceType(type="oci:Database/databaseUpgrade:DatabaseUpgrade")
public class DatabaseUpgrade extends com.pulumi.resources.CustomResource {
    /**
     * The database upgrade action.
     * 
     */
    @Export(name="action", type=String.class, parameters={})
    private Output<String> action;

    /**
     * @return The database upgrade action.
     * 
     */
    public Output<String> action() {
        return this.action;
    }
    /**
     * The character set for the database.
     * 
     */
    @Export(name="characterSet", type=String.class, parameters={})
    private Output<String> characterSet;

    /**
     * @return The character set for the database.
     * 
     */
    public Output<String> characterSet() {
        return this.characterSet;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Export(name="compartmentId", type=String.class, parameters={})
    private Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * The Connection strings used to connect to the Oracle Database.
     * 
     */
    @Export(name="connectionStrings", type=List.class, parameters={DatabaseUpgradeConnectionString.class})
    private Output<List<DatabaseUpgradeConnectionString>> connectionStrings;

    /**
     * @return The Connection strings used to connect to the Oracle Database.
     * 
     */
    public Output<List<DatabaseUpgradeConnectionString>> connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Export(name="databaseId", type=String.class, parameters={})
    private Output<String> databaseId;

    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Output<String> databaseId() {
        return this.databaseId;
    }
    /**
     * The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the image to be used to upgrade a database.
     * 
     */
    @Export(name="databaseSoftwareImageId", type=String.class, parameters={})
    private Output<String> databaseSoftwareImageId;

    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the image to be used to upgrade a database.
     * 
     */
    public Output<String> databaseSoftwareImageId() {
        return this.databaseSoftwareImageId;
    }
    /**
     * Details for the database upgrade source.
     * 
     */
    @Export(name="databaseUpgradeSourceDetails", type=DatabaseUpgradeDatabaseUpgradeSourceDetails.class, parameters={})
    private Output<DatabaseUpgradeDatabaseUpgradeSourceDetails> databaseUpgradeSourceDetails;

    /**
     * @return Details for the database upgrade source.
     * 
     */
    public Output<DatabaseUpgradeDatabaseUpgradeSourceDetails> databaseUpgradeSourceDetails() {
        return this.databaseUpgradeSourceDetails;
    }
    /**
     * Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    @Export(name="dbBackupConfigs", type=List.class, parameters={DatabaseUpgradeDbBackupConfig.class})
    private Output<List<DatabaseUpgradeDbBackupConfig>> dbBackupConfigs;

    /**
     * @return Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    public Output<List<DatabaseUpgradeDbBackupConfig>> dbBackupConfigs() {
        return this.dbBackupConfigs;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    @Export(name="dbHomeId", type=String.class, parameters={})
    private Output<String> dbHomeId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    public Output<String> dbHomeId() {
        return this.dbHomeId;
    }
    /**
     * The database name.
     * 
     */
    @Export(name="dbName", type=String.class, parameters={})
    private Output<String> dbName;

    /**
     * @return The database name.
     * 
     */
    public Output<String> dbName() {
        return this.dbName;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    @Export(name="dbSystemId", type=String.class, parameters={})
    private Output<String> dbSystemId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public Output<String> dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * A system-generated name for the database to ensure uniqueness within an Oracle Data Guard group (a primary database and its standby databases). The unique name cannot be changed.
     * 
     */
    @Export(name="dbUniqueName", type=String.class, parameters={})
    private Output<String> dbUniqueName;

    /**
     * @return A system-generated name for the database to ensure uniqueness within an Oracle Data Guard group (a primary database and its standby databases). The unique name cannot be changed.
     * 
     */
    public Output<String> dbUniqueName() {
        return this.dbUniqueName;
    }
    /**
     * The database workload type.
     * 
     */
    @Export(name="dbWorkload", type=String.class, parameters={})
    private Output<String> dbWorkload;

    /**
     * @return The database workload type.
     * 
     */
    public Output<String> dbWorkload() {
        return this.dbWorkload;
    }
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Export(name="definedTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> definedTags;

    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Output<Map<String,Object>> definedTags() {
        return this.definedTags;
    }
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Export(name="freeformTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> freeformTags;

    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Output<Map<String,Object>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * True if the database is a container database.
     * 
     */
    @Export(name="isCdb", type=Boolean.class, parameters={})
    private Output<Boolean> isCdb;

    /**
     * @return True if the database is a container database.
     * 
     */
    public Output<Boolean> isCdb() {
        return this.isCdb;
    }
    /**
     * The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    @Export(name="kmsKeyId", type=String.class, parameters={})
    private Output<String> kmsKeyId;

    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public Output<String> kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    @Export(name="kmsKeyVersionId", type=String.class, parameters={})
    private Output<String> kmsKeyVersionId;

    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    public Output<String> kmsKeyVersionId() {
        return this.kmsKeyVersionId;
    }
    /**
     * The date and time when the latest database backup was created.
     * 
     */
    @Export(name="lastBackupTimestamp", type=String.class, parameters={})
    private Output<String> lastBackupTimestamp;

    /**
     * @return The date and time when the latest database backup was created.
     * 
     */
    public Output<String> lastBackupTimestamp() {
        return this.lastBackupTimestamp;
    }
    /**
     * Additional information about the current lifecycle state.
     * 
     */
    @Export(name="lifecycleDetails", type=String.class, parameters={})
    private Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Output<String> lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * The national character set for the database.
     * 
     */
    @Export(name="ncharacterSet", type=String.class, parameters={})
    private Output<String> ncharacterSet;

    /**
     * @return The national character set for the database.
     * 
     */
    public Output<String> ncharacterSet() {
        return this.ncharacterSet;
    }
    /**
     * The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    @Export(name="pdbName", type=String.class, parameters={})
    private Output<String> pdbName;

    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    public Output<String> pdbName() {
        return this.pdbName;
    }
    /**
     * Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    @Export(name="sidPrefix", type=String.class, parameters={})
    private Output<String> sidPrefix;

    /**
     * @return Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    public Output<String> sidPrefix() {
        return this.sidPrefix;
    }
    /**
     * Point in time recovery timeStamp of the source database at which cloned database system is cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    @Export(name="sourceDatabasePointInTimeRecoveryTimestamp", type=String.class, parameters={})
    private Output<String> sourceDatabasePointInTimeRecoveryTimestamp;

    /**
     * @return Point in time recovery timeStamp of the source database at which cloned database system is cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public Output<String> sourceDatabasePointInTimeRecoveryTimestamp() {
        return this.sourceDatabasePointInTimeRecoveryTimestamp;
    }
    /**
     * The current state of the database.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The current state of the database.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The date and time the database was created.
     * 
     */
    @Export(name="timeCreated", type=String.class, parameters={})
    private Output<String> timeCreated;

    /**
     * @return The date and time the database was created.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    @Export(name="vaultId", type=String.class, parameters={})
    private Output<String> vaultId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public Output<String> vaultId() {
        return this.vaultId;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    @Export(name="vmClusterId", type=String.class, parameters={})
    private Output<String> vmClusterId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    public Output<String> vmClusterId() {
        return this.vmClusterId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabaseUpgrade(String name) {
        this(name, DatabaseUpgradeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabaseUpgrade(String name, DatabaseUpgradeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabaseUpgrade(String name, DatabaseUpgradeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Database/databaseUpgrade:DatabaseUpgrade", name, args == null ? DatabaseUpgradeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DatabaseUpgrade(String name, Output<String> id, @Nullable DatabaseUpgradeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Database/databaseUpgrade:DatabaseUpgrade", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabaseUpgrade get(String name, Output<String> id, @Nullable DatabaseUpgradeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabaseUpgrade(name, id, state, options);
    }
}
