// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApmSynthetics.outputs.GetScriptsScriptCollectionItemMonitorStatusCountMap;
import com.pulumi.oci.ApmSynthetics.outputs.GetScriptsScriptCollectionItemParameter;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetScriptsScriptCollectionItem {
    /**
     * @return The APM domain ID the request is intended for.
     * 
     */
    private final String apmDomainId;
    /**
     * @return The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;OV&gt;param value&lt;/OV&gt;&lt;OS&gt;isParamValueSecret(true/false)&lt;/OS&gt;&lt;/ORAP&gt;`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;/ORAP&gt;` With parameter name and value : `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;OV&gt;param value&lt;/OV&gt;&lt;/ORAP&gt;` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format.
     * 
     */
    private final String content;
    /**
     * @return File name of the uploaded script content.
     * 
     */
    private final String contentFileName;
    /**
     * @return Size of the script content.
     * 
     */
    private final Integer contentSizeInBytes;
    /**
     * @return A filter to return only resources that match the content type given.
     * 
     */
    private final String contentType;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private final String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     * 
     */
    private final String id;
    /**
     * @return Details of the monitor count per state. Example: `{ &#34;total&#34; : 5, &#34;enabled&#34; : 3 , &#34;disabled&#34; : 2, &#34;invalid&#34; : 0 }`
     * 
     */
    private final List<GetScriptsScriptCollectionItemMonitorStatusCountMap> monitorStatusCountMaps;
    /**
     * @return List of script parameters. Example: `[{&#34;scriptParameter&#34;: {&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;, &#34;isSecret&#34;: false}, &#34;isOverwritten&#34;: false}]`
     * 
     */
    private final List<GetScriptsScriptCollectionItemParameter> parameters;
    /**
     * @return The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    private final String timeCreated;
    /**
     * @return The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    private final String timeUpdated;
    /**
     * @return The time when the script was uploaded.
     * 
     */
    private final String timeUploaded;

    @CustomType.Constructor
    private GetScriptsScriptCollectionItem(
        @CustomType.Parameter("apmDomainId") String apmDomainId,
        @CustomType.Parameter("content") String content,
        @CustomType.Parameter("contentFileName") String contentFileName,
        @CustomType.Parameter("contentSizeInBytes") Integer contentSizeInBytes,
        @CustomType.Parameter("contentType") String contentType,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("monitorStatusCountMaps") List<GetScriptsScriptCollectionItemMonitorStatusCountMap> monitorStatusCountMaps,
        @CustomType.Parameter("parameters") List<GetScriptsScriptCollectionItemParameter> parameters,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated,
        @CustomType.Parameter("timeUploaded") String timeUploaded) {
        this.apmDomainId = apmDomainId;
        this.content = content;
        this.contentFileName = contentFileName;
        this.contentSizeInBytes = contentSizeInBytes;
        this.contentType = contentType;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.id = id;
        this.monitorStatusCountMaps = monitorStatusCountMaps;
        this.parameters = parameters;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
        this.timeUploaded = timeUploaded;
    }

    /**
     * @return The APM domain ID the request is intended for.
     * 
     */
    public String apmDomainId() {
        return this.apmDomainId;
    }
    /**
     * @return The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;OV&gt;param value&lt;/OV&gt;&lt;OS&gt;isParamValueSecret(true/false)&lt;/OS&gt;&lt;/ORAP&gt;`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;/ORAP&gt;` With parameter name and value : `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;OV&gt;param value&lt;/OV&gt;&lt;/ORAP&gt;` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return File name of the uploaded script content.
     * 
     */
    public String contentFileName() {
        return this.contentFileName;
    }
    /**
     * @return Size of the script content.
     * 
     */
    public Integer contentSizeInBytes() {
        return this.contentSizeInBytes;
    }
    /**
     * @return A filter to return only resources that match the content type given.
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Details of the monitor count per state. Example: `{ &#34;total&#34; : 5, &#34;enabled&#34; : 3 , &#34;disabled&#34; : 2, &#34;invalid&#34; : 0 }`
     * 
     */
    public List<GetScriptsScriptCollectionItemMonitorStatusCountMap> monitorStatusCountMaps() {
        return this.monitorStatusCountMaps;
    }
    /**
     * @return List of script parameters. Example: `[{&#34;scriptParameter&#34;: {&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;, &#34;isSecret&#34;: false}, &#34;isOverwritten&#34;: false}]`
     * 
     */
    public List<GetScriptsScriptCollectionItemParameter> parameters() {
        return this.parameters;
    }
    /**
     * @return The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The time when the script was uploaded.
     * 
     */
    public String timeUploaded() {
        return this.timeUploaded;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScriptsScriptCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String apmDomainId;
        private String content;
        private String contentFileName;
        private Integer contentSizeInBytes;
        private String contentType;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private List<GetScriptsScriptCollectionItemMonitorStatusCountMap> monitorStatusCountMaps;
        private List<GetScriptsScriptCollectionItemParameter> parameters;
        private String timeCreated;
        private String timeUpdated;
        private String timeUploaded;

        public Builder() {
    	      // Empty
        }

        public Builder(GetScriptsScriptCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apmDomainId = defaults.apmDomainId;
    	      this.content = defaults.content;
    	      this.contentFileName = defaults.contentFileName;
    	      this.contentSizeInBytes = defaults.contentSizeInBytes;
    	      this.contentType = defaults.contentType;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.monitorStatusCountMaps = defaults.monitorStatusCountMaps;
    	      this.parameters = defaults.parameters;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timeUploaded = defaults.timeUploaded;
        }

        public Builder apmDomainId(String apmDomainId) {
            this.apmDomainId = Objects.requireNonNull(apmDomainId);
            return this;
        }
        public Builder content(String content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }
        public Builder contentFileName(String contentFileName) {
            this.contentFileName = Objects.requireNonNull(contentFileName);
            return this;
        }
        public Builder contentSizeInBytes(Integer contentSizeInBytes) {
            this.contentSizeInBytes = Objects.requireNonNull(contentSizeInBytes);
            return this;
        }
        public Builder contentType(String contentType) {
            this.contentType = Objects.requireNonNull(contentType);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder monitorStatusCountMaps(List<GetScriptsScriptCollectionItemMonitorStatusCountMap> monitorStatusCountMaps) {
            this.monitorStatusCountMaps = Objects.requireNonNull(monitorStatusCountMaps);
            return this;
        }
        public Builder monitorStatusCountMaps(GetScriptsScriptCollectionItemMonitorStatusCountMap... monitorStatusCountMaps) {
            return monitorStatusCountMaps(List.of(monitorStatusCountMaps));
        }
        public Builder parameters(List<GetScriptsScriptCollectionItemParameter> parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        public Builder parameters(GetScriptsScriptCollectionItemParameter... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public Builder timeUploaded(String timeUploaded) {
            this.timeUploaded = Objects.requireNonNull(timeUploaded);
            return this;
        }        public GetScriptsScriptCollectionItem build() {
            return new GetScriptsScriptCollectionItem(apmDomainId, content, contentFileName, contentSizeInBytes, contentType, definedTags, displayName, freeformTags, id, monitorStatusCountMaps, parameters, timeCreated, timeUpdated, timeUploaded);
        }
    }
}
