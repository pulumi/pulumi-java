// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaintenanceRunArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceRunArgs Empty = new MaintenanceRunArgs();

    /**
     * (Updatable) The current custom action timeout between the current database servers during waiting state in addition to custom action timeout, from 0 (zero) to 30 minutes.
     * 
     */
    @Import(name="currentCustomActionTimeoutInMins")
    private @Nullable Output<Integer> currentCustomActionTimeoutInMins;

    /**
     * @return (Updatable) The current custom action timeout between the current database servers during waiting state in addition to custom action timeout, from 0 (zero) to 30 minutes.
     * 
     */
    public Optional<Output<Integer>> currentCustomActionTimeoutInMins() {
        return Optional.ofNullable(this.currentCustomActionTimeoutInMins);
    }

    /**
     * (Updatable) Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes from 15 to 120.
     * 
     */
    @Import(name="customActionTimeoutInMins")
    private @Nullable Output<Integer> customActionTimeoutInMins;

    /**
     * @return (Updatable) Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes from 15 to 120.
     * 
     */
    public Optional<Output<Integer>> customActionTimeoutInMins() {
        return Optional.ofNullable(this.customActionTimeoutInMins);
    }

    /**
     * (Updatable) If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
     * 
     */
    @Import(name="isCustomActionTimeoutEnabled")
    private @Nullable Output<Boolean> isCustomActionTimeoutEnabled;

    /**
     * @return (Updatable) If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
     * 
     */
    public Optional<Output<Boolean>> isCustomActionTimeoutEnabled() {
        return Optional.ofNullable(this.isCustomActionTimeoutEnabled);
    }

    /**
     * (Updatable) If `FALSE`, skips the maintenance run.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return (Updatable) If `FALSE`, skips the maintenance run.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * (Updatable) If set to `TRUE`, starts patching immediately.
     * 
     */
    @Import(name="isPatchNowEnabled")
    private @Nullable Output<Boolean> isPatchNowEnabled;

    /**
     * @return (Updatable) If set to `TRUE`, starts patching immediately.
     * 
     */
    public Optional<Output<Boolean>> isPatchNowEnabled() {
        return Optional.ofNullable(this.isPatchNowEnabled);
    }

    /**
     * (Updatable) If true, then the patching is resumed and the next component will be patched immediately.
     * 
     */
    @Import(name="isResumePatching")
    private @Nullable Output<Boolean> isResumePatching;

    /**
     * @return (Updatable) If true, then the patching is resumed and the next component will be patched immediately.
     * 
     */
    public Optional<Output<Boolean>> isResumePatching() {
        return Optional.ofNullable(this.isResumePatching);
    }

    /**
     * The maintenance run OCID.
     * 
     */
    @Import(name="maintenanceRunId", required=true)
    private Output<String> maintenanceRunId;

    /**
     * @return The maintenance run OCID.
     * 
     */
    public Output<String> maintenanceRunId() {
        return this.maintenanceRunId;
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
     * 
     */
    @Import(name="patchId")
    private @Nullable Output<String> patchId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
     * 
     */
    public Optional<Output<String>> patchId() {
        return Optional.ofNullable(this.patchId);
    }

    /**
     * (Updatable) Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
     * 
     */
    @Import(name="patchingMode")
    private @Nullable Output<String> patchingMode;

    /**
     * @return (Updatable) Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
     * 
     */
    public Optional<Output<String>> patchingMode() {
        return Optional.ofNullable(this.patchingMode);
    }

    /**
     * (Updatable) The scheduled date and time of the maintenance run to update.
     * 
     */
    @Import(name="timeScheduled")
    private @Nullable Output<String> timeScheduled;

    /**
     * @return (Updatable) The scheduled date and time of the maintenance run to update.
     * 
     */
    public Optional<Output<String>> timeScheduled() {
        return Optional.ofNullable(this.timeScheduled);
    }

    private MaintenanceRunArgs() {}

    private MaintenanceRunArgs(MaintenanceRunArgs $) {
        this.currentCustomActionTimeoutInMins = $.currentCustomActionTimeoutInMins;
        this.customActionTimeoutInMins = $.customActionTimeoutInMins;
        this.isCustomActionTimeoutEnabled = $.isCustomActionTimeoutEnabled;
        this.isEnabled = $.isEnabled;
        this.isPatchNowEnabled = $.isPatchNowEnabled;
        this.isResumePatching = $.isResumePatching;
        this.maintenanceRunId = $.maintenanceRunId;
        this.patchId = $.patchId;
        this.patchingMode = $.patchingMode;
        this.timeScheduled = $.timeScheduled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceRunArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceRunArgs $;

        public Builder() {
            $ = new MaintenanceRunArgs();
        }

        public Builder(MaintenanceRunArgs defaults) {
            $ = new MaintenanceRunArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentCustomActionTimeoutInMins (Updatable) The current custom action timeout between the current database servers during waiting state in addition to custom action timeout, from 0 (zero) to 30 minutes.
         * 
         * @return builder
         * 
         */
        public Builder currentCustomActionTimeoutInMins(@Nullable Output<Integer> currentCustomActionTimeoutInMins) {
            $.currentCustomActionTimeoutInMins = currentCustomActionTimeoutInMins;
            return this;
        }

        /**
         * @param currentCustomActionTimeoutInMins (Updatable) The current custom action timeout between the current database servers during waiting state in addition to custom action timeout, from 0 (zero) to 30 minutes.
         * 
         * @return builder
         * 
         */
        public Builder currentCustomActionTimeoutInMins(Integer currentCustomActionTimeoutInMins) {
            return currentCustomActionTimeoutInMins(Output.of(currentCustomActionTimeoutInMins));
        }

        /**
         * @param customActionTimeoutInMins (Updatable) Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes from 15 to 120.
         * 
         * @return builder
         * 
         */
        public Builder customActionTimeoutInMins(@Nullable Output<Integer> customActionTimeoutInMins) {
            $.customActionTimeoutInMins = customActionTimeoutInMins;
            return this;
        }

        /**
         * @param customActionTimeoutInMins (Updatable) Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes from 15 to 120.
         * 
         * @return builder
         * 
         */
        public Builder customActionTimeoutInMins(Integer customActionTimeoutInMins) {
            return customActionTimeoutInMins(Output.of(customActionTimeoutInMins));
        }

        /**
         * @param isCustomActionTimeoutEnabled (Updatable) If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
         * 
         * @return builder
         * 
         */
        public Builder isCustomActionTimeoutEnabled(@Nullable Output<Boolean> isCustomActionTimeoutEnabled) {
            $.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            return this;
        }

        /**
         * @param isCustomActionTimeoutEnabled (Updatable) If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
         * 
         * @return builder
         * 
         */
        public Builder isCustomActionTimeoutEnabled(Boolean isCustomActionTimeoutEnabled) {
            return isCustomActionTimeoutEnabled(Output.of(isCustomActionTimeoutEnabled));
        }

        /**
         * @param isEnabled (Updatable) If `FALSE`, skips the maintenance run.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) If `FALSE`, skips the maintenance run.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param isPatchNowEnabled (Updatable) If set to `TRUE`, starts patching immediately.
         * 
         * @return builder
         * 
         */
        public Builder isPatchNowEnabled(@Nullable Output<Boolean> isPatchNowEnabled) {
            $.isPatchNowEnabled = isPatchNowEnabled;
            return this;
        }

        /**
         * @param isPatchNowEnabled (Updatable) If set to `TRUE`, starts patching immediately.
         * 
         * @return builder
         * 
         */
        public Builder isPatchNowEnabled(Boolean isPatchNowEnabled) {
            return isPatchNowEnabled(Output.of(isPatchNowEnabled));
        }

        /**
         * @param isResumePatching (Updatable) If true, then the patching is resumed and the next component will be patched immediately.
         * 
         * @return builder
         * 
         */
        public Builder isResumePatching(@Nullable Output<Boolean> isResumePatching) {
            $.isResumePatching = isResumePatching;
            return this;
        }

        /**
         * @param isResumePatching (Updatable) If true, then the patching is resumed and the next component will be patched immediately.
         * 
         * @return builder
         * 
         */
        public Builder isResumePatching(Boolean isResumePatching) {
            return isResumePatching(Output.of(isResumePatching));
        }

        /**
         * @param maintenanceRunId The maintenance run OCID.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceRunId(Output<String> maintenanceRunId) {
            $.maintenanceRunId = maintenanceRunId;
            return this;
        }

        /**
         * @param maintenanceRunId The maintenance run OCID.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceRunId(String maintenanceRunId) {
            return maintenanceRunId(Output.of(maintenanceRunId));
        }

        /**
         * @param patchId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
         * 
         * @return builder
         * 
         */
        public Builder patchId(@Nullable Output<String> patchId) {
            $.patchId = patchId;
            return this;
        }

        /**
         * @param patchId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
         * 
         * @return builder
         * 
         */
        public Builder patchId(String patchId) {
            return patchId(Output.of(patchId));
        }

        /**
         * @param patchingMode (Updatable) Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
         * 
         * @return builder
         * 
         */
        public Builder patchingMode(@Nullable Output<String> patchingMode) {
            $.patchingMode = patchingMode;
            return this;
        }

        /**
         * @param patchingMode (Updatable) Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
         * 
         * @return builder
         * 
         */
        public Builder patchingMode(String patchingMode) {
            return patchingMode(Output.of(patchingMode));
        }

        /**
         * @param timeScheduled (Updatable) The scheduled date and time of the maintenance run to update.
         * 
         * @return builder
         * 
         */
        public Builder timeScheduled(@Nullable Output<String> timeScheduled) {
            $.timeScheduled = timeScheduled;
            return this;
        }

        /**
         * @param timeScheduled (Updatable) The scheduled date and time of the maintenance run to update.
         * 
         * @return builder
         * 
         */
        public Builder timeScheduled(String timeScheduled) {
            return timeScheduled(Output.of(timeScheduled));
        }

        public MaintenanceRunArgs build() {
            $.maintenanceRunId = Objects.requireNonNull($.maintenanceRunId, "expected parameter 'maintenanceRunId' to be non-null");
            return $;
        }
    }

}
