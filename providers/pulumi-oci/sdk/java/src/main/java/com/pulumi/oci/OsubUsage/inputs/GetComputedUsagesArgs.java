// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsubUsage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OsubUsage.inputs.GetComputedUsagesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetComputedUsagesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetComputedUsagesArgs Empty = new GetComputedUsagesArgs();

    /**
     * The OCID of the root compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the root compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Product part number for Computed Usage .
     * 
     */
    @Import(name="computedProduct")
    private @Nullable Output<String> computedProduct;

    /**
     * @return Product part number for Computed Usage .
     * 
     */
    public Optional<Output<String>> computedProduct() {
        return Optional.ofNullable(this.computedProduct);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetComputedUsagesFilterArgs>> filters;

    public Optional<Output<List<GetComputedUsagesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Product part number for subscribed service line, called parent product.
     * 
     */
    @Import(name="parentProduct")
    private @Nullable Output<String> parentProduct;

    /**
     * @return Product part number for subscribed service line, called parent product.
     * 
     */
    public Optional<Output<String>> parentProduct() {
        return Optional.ofNullable(this.parentProduct);
    }

    /**
     * Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM.
     * 
     */
    @Import(name="subscriptionId", required=true)
    private Output<String> subscriptionId;

    /**
     * @return Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM.
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Initial date to filter Computed Usage data in SPM. In the case of non aggregated data the time period between of fromDate and toDate , expressed in RFC 3339 timestamp format.
     * 
     */
    @Import(name="timeFrom", required=true)
    private Output<String> timeFrom;

    /**
     * @return Initial date to filter Computed Usage data in SPM. In the case of non aggregated data the time period between of fromDate and toDate , expressed in RFC 3339 timestamp format.
     * 
     */
    public Output<String> timeFrom() {
        return this.timeFrom;
    }

    /**
     * Final date to filter Computed Usage data in SPM, expressed in RFC 3339 timestamp format.
     * 
     */
    @Import(name="timeTo", required=true)
    private Output<String> timeTo;

    /**
     * @return Final date to filter Computed Usage data in SPM, expressed in RFC 3339 timestamp format.
     * 
     */
    public Output<String> timeTo() {
        return this.timeTo;
    }

    /**
     * The Oracle Cloud Infrastructure home region name in case home region is not us-ashburn-1 (IAD), e.g. ap-mumbai-1, us-phoenix-1 etc.
     * 
     */
    @Import(name="xOneOriginRegion")
    private @Nullable Output<String> xOneOriginRegion;

    /**
     * @return The Oracle Cloud Infrastructure home region name in case home region is not us-ashburn-1 (IAD), e.g. ap-mumbai-1, us-phoenix-1 etc.
     * 
     */
    public Optional<Output<String>> xOneOriginRegion() {
        return Optional.ofNullable(this.xOneOriginRegion);
    }

    private GetComputedUsagesArgs() {}

    private GetComputedUsagesArgs(GetComputedUsagesArgs $) {
        this.compartmentId = $.compartmentId;
        this.computedProduct = $.computedProduct;
        this.filters = $.filters;
        this.parentProduct = $.parentProduct;
        this.subscriptionId = $.subscriptionId;
        this.timeFrom = $.timeFrom;
        this.timeTo = $.timeTo;
        this.xOneOriginRegion = $.xOneOriginRegion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetComputedUsagesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetComputedUsagesArgs $;

        public Builder() {
            $ = new GetComputedUsagesArgs();
        }

        public Builder(GetComputedUsagesArgs defaults) {
            $ = new GetComputedUsagesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the root compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the root compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param computedProduct Product part number for Computed Usage .
         * 
         * @return builder
         * 
         */
        public Builder computedProduct(@Nullable Output<String> computedProduct) {
            $.computedProduct = computedProduct;
            return this;
        }

        /**
         * @param computedProduct Product part number for Computed Usage .
         * 
         * @return builder
         * 
         */
        public Builder computedProduct(String computedProduct) {
            return computedProduct(Output.of(computedProduct));
        }

        public Builder filters(@Nullable Output<List<GetComputedUsagesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetComputedUsagesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetComputedUsagesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param parentProduct Product part number for subscribed service line, called parent product.
         * 
         * @return builder
         * 
         */
        public Builder parentProduct(@Nullable Output<String> parentProduct) {
            $.parentProduct = parentProduct;
            return this;
        }

        /**
         * @param parentProduct Product part number for subscribed service line, called parent product.
         * 
         * @return builder
         * 
         */
        public Builder parentProduct(String parentProduct) {
            return parentProduct(Output.of(parentProduct));
        }

        /**
         * @param subscriptionId Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param timeFrom Initial date to filter Computed Usage data in SPM. In the case of non aggregated data the time period between of fromDate and toDate , expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timeFrom(Output<String> timeFrom) {
            $.timeFrom = timeFrom;
            return this;
        }

        /**
         * @param timeFrom Initial date to filter Computed Usage data in SPM. In the case of non aggregated data the time period between of fromDate and toDate , expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timeFrom(String timeFrom) {
            return timeFrom(Output.of(timeFrom));
        }

        /**
         * @param timeTo Final date to filter Computed Usage data in SPM, expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timeTo(Output<String> timeTo) {
            $.timeTo = timeTo;
            return this;
        }

        /**
         * @param timeTo Final date to filter Computed Usage data in SPM, expressed in RFC 3339 timestamp format.
         * 
         * @return builder
         * 
         */
        public Builder timeTo(String timeTo) {
            return timeTo(Output.of(timeTo));
        }

        /**
         * @param xOneOriginRegion The Oracle Cloud Infrastructure home region name in case home region is not us-ashburn-1 (IAD), e.g. ap-mumbai-1, us-phoenix-1 etc.
         * 
         * @return builder
         * 
         */
        public Builder xOneOriginRegion(@Nullable Output<String> xOneOriginRegion) {
            $.xOneOriginRegion = xOneOriginRegion;
            return this;
        }

        /**
         * @param xOneOriginRegion The Oracle Cloud Infrastructure home region name in case home region is not us-ashburn-1 (IAD), e.g. ap-mumbai-1, us-phoenix-1 etc.
         * 
         * @return builder
         * 
         */
        public Builder xOneOriginRegion(String xOneOriginRegion) {
            return xOneOriginRegion(Output.of(xOneOriginRegion));
        }

        public GetComputedUsagesArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.subscriptionId = Objects.requireNonNull($.subscriptionId, "expected parameter 'subscriptionId' to be non-null");
            $.timeFrom = Objects.requireNonNull($.timeFrom, "expected parameter 'timeFrom' to be non-null");
            $.timeTo = Objects.requireNonNull($.timeTo, "expected parameter 'timeTo' to be non-null");
            return $;
        }
    }

}
