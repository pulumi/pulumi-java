// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Mysql.outputs.GetMysqlBackupDbSystemSnapshot;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMysqlBackupResult {
    private final String backupId;
    /**
     * @return The size of the backup in base-2 (IEC) gibibytes. (GiB).
     * 
     */
    private final Integer backupSizeInGbs;
    /**
     * @return The type of backup.
     * 
     */
    private final String backupType;
    /**
     * @return The OCID of the compartment the DB System belongs in.
     * 
     */
    private final String compartmentId;
    /**
     * @return Indicates how the backup was created: manually, automatic, or by an Operator.
     * 
     */
    private final String creationType;
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    private final Integer dataStorageSizeInGb;
    /**
     * @return The OCID of the DB System the backup is associated with.
     * 
     */
    private final String dbSystemId;
    /**
     * @return Snapshot of the DbSystem details at the time of the backup
     * 
     */
    private final List<GetMysqlBackupDbSystemSnapshot> dbSystemSnapshots;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return A user-supplied description for the backup.
     * 
     */
    private final String description;
    /**
     * @return A user-supplied display name for the backup.
     * 
     */
    private final String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return OCID of the backup itself
     * 
     */
    private final String id;
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    private final String mysqlVersion;
    /**
     * @return Number of days to retain this backup.
     * 
     */
    private final Integer retentionInDays;
    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    private final String shapeName;
    /**
     * @return The state of the backup.
     * 
     */
    private final String state;
    /**
     * @return The time the backup record was created.
     * 
     */
    private final String timeCreated;
    /**
     * @return The time at which the backup was updated.
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetMysqlBackupResult(
        @CustomType.Parameter("backupId") String backupId,
        @CustomType.Parameter("backupSizeInGbs") Integer backupSizeInGbs,
        @CustomType.Parameter("backupType") String backupType,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("creationType") String creationType,
        @CustomType.Parameter("dataStorageSizeInGb") Integer dataStorageSizeInGb,
        @CustomType.Parameter("dbSystemId") String dbSystemId,
        @CustomType.Parameter("dbSystemSnapshots") List<GetMysqlBackupDbSystemSnapshot> dbSystemSnapshots,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("mysqlVersion") String mysqlVersion,
        @CustomType.Parameter("retentionInDays") Integer retentionInDays,
        @CustomType.Parameter("shapeName") String shapeName,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.backupId = backupId;
        this.backupSizeInGbs = backupSizeInGbs;
        this.backupType = backupType;
        this.compartmentId = compartmentId;
        this.creationType = creationType;
        this.dataStorageSizeInGb = dataStorageSizeInGb;
        this.dbSystemId = dbSystemId;
        this.dbSystemSnapshots = dbSystemSnapshots;
        this.definedTags = definedTags;
        this.description = description;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.id = id;
        this.lifecycleDetails = lifecycleDetails;
        this.mysqlVersion = mysqlVersion;
        this.retentionInDays = retentionInDays;
        this.shapeName = shapeName;
        this.state = state;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    public String backupId() {
        return this.backupId;
    }
    /**
     * @return The size of the backup in base-2 (IEC) gibibytes. (GiB).
     * 
     */
    public Integer backupSizeInGbs() {
        return this.backupSizeInGbs;
    }
    /**
     * @return The type of backup.
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    /**
     * @return The OCID of the compartment the DB System belongs in.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Indicates how the backup was created: manually, automatic, or by an Operator.
     * 
     */
    public String creationType() {
        return this.creationType;
    }
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    public Integer dataStorageSizeInGb() {
        return this.dataStorageSizeInGb;
    }
    /**
     * @return The OCID of the DB System the backup is associated with.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return Snapshot of the DbSystem details at the time of the backup
     * 
     */
    public List<GetMysqlBackupDbSystemSnapshot> dbSystemSnapshots() {
        return this.dbSystemSnapshots;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-supplied description for the backup.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-supplied display name for the backup.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return OCID of the backup itself
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The MySQL server version of the DB System used for backup.
     * 
     */
    public String mysqlVersion() {
        return this.mysqlVersion;
    }
    /**
     * @return Number of days to retain this backup.
     * 
     */
    public Integer retentionInDays() {
        return this.retentionInDays;
    }
    /**
     * @return The shape of the DB System instance used for backup.
     * 
     */
    public String shapeName() {
        return this.shapeName;
    }
    /**
     * @return The state of the backup.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time the backup record was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time at which the backup was updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlBackupResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String backupId;
        private Integer backupSizeInGbs;
        private String backupType;
        private String compartmentId;
        private String creationType;
        private Integer dataStorageSizeInGb;
        private String dbSystemId;
        private List<GetMysqlBackupDbSystemSnapshot> dbSystemSnapshots;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String mysqlVersion;
        private Integer retentionInDays;
        private String shapeName;
        private String state;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMysqlBackupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupId = defaults.backupId;
    	      this.backupSizeInGbs = defaults.backupSizeInGbs;
    	      this.backupType = defaults.backupType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.creationType = defaults.creationType;
    	      this.dataStorageSizeInGb = defaults.dataStorageSizeInGb;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbSystemSnapshots = defaults.dbSystemSnapshots;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.retentionInDays = defaults.retentionInDays;
    	      this.shapeName = defaults.shapeName;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder backupId(String backupId) {
            this.backupId = Objects.requireNonNull(backupId);
            return this;
        }
        public Builder backupSizeInGbs(Integer backupSizeInGbs) {
            this.backupSizeInGbs = Objects.requireNonNull(backupSizeInGbs);
            return this;
        }
        public Builder backupType(String backupType) {
            this.backupType = Objects.requireNonNull(backupType);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder creationType(String creationType) {
            this.creationType = Objects.requireNonNull(creationType);
            return this;
        }
        public Builder dataStorageSizeInGb(Integer dataStorageSizeInGb) {
            this.dataStorageSizeInGb = Objects.requireNonNull(dataStorageSizeInGb);
            return this;
        }
        public Builder dbSystemId(String dbSystemId) {
            this.dbSystemId = Objects.requireNonNull(dbSystemId);
            return this;
        }
        public Builder dbSystemSnapshots(List<GetMysqlBackupDbSystemSnapshot> dbSystemSnapshots) {
            this.dbSystemSnapshots = Objects.requireNonNull(dbSystemSnapshots);
            return this;
        }
        public Builder dbSystemSnapshots(GetMysqlBackupDbSystemSnapshot... dbSystemSnapshots) {
            return dbSystemSnapshots(List.of(dbSystemSnapshots));
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder mysqlVersion(String mysqlVersion) {
            this.mysqlVersion = Objects.requireNonNull(mysqlVersion);
            return this;
        }
        public Builder retentionInDays(Integer retentionInDays) {
            this.retentionInDays = Objects.requireNonNull(retentionInDays);
            return this;
        }
        public Builder shapeName(String shapeName) {
            this.shapeName = Objects.requireNonNull(shapeName);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetMysqlBackupResult build() {
            return new GetMysqlBackupResult(backupId, backupSizeInGbs, backupType, compartmentId, creationType, dataStorageSizeInGb, dbSystemId, dbSystemSnapshots, definedTags, description, displayName, freeformTags, id, lifecycleDetails, mysqlVersion, retentionInDays, shapeName, state, timeCreated, timeUpdated);
        }
    }
}
