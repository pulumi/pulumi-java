// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEncryptedDataArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEncryptedDataArgs Empty = new GetEncryptedDataArgs();

    /**
     * Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
     * 
     */
    @Import(name="associatedData")
    private @Nullable Map<String,Object> associatedData;

    /**
     * @return Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
     * 
     */
    public Optional<Map<String,Object>> associatedData() {
        return Optional.ofNullable(this.associatedData);
    }

    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    @Import(name="cryptoEndpoint", required=true)
    private String cryptoEndpoint;

    /**
     * @return The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    public String cryptoEndpoint() {
        return this.cryptoEndpoint;
    }

    /**
     * The OCID of the key to encrypt with.
     * 
     */
    @Import(name="keyId", required=true)
    private String keyId;

    /**
     * @return The OCID of the key to encrypt with.
     * 
     */
    public String keyId() {
        return this.keyId;
    }

    /**
     * The plaintext data to encrypt.
     * 
     */
    @Import(name="plaintext", required=true)
    private String plaintext;

    /**
     * @return The plaintext data to encrypt.
     * 
     */
    public String plaintext() {
        return this.plaintext;
    }

    private GetEncryptedDataArgs() {}

    private GetEncryptedDataArgs(GetEncryptedDataArgs $) {
        this.associatedData = $.associatedData;
        this.cryptoEndpoint = $.cryptoEndpoint;
        this.keyId = $.keyId;
        this.plaintext = $.plaintext;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEncryptedDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEncryptedDataArgs $;

        public Builder() {
            $ = new GetEncryptedDataArgs();
        }

        public Builder(GetEncryptedDataArgs defaults) {
            $ = new GetEncryptedDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedData Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
         * 
         * @return builder
         * 
         */
        public Builder associatedData(@Nullable Map<String,Object> associatedData) {
            $.associatedData = associatedData;
            return this;
        }

        /**
         * @param cryptoEndpoint The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cryptoEndpoint(String cryptoEndpoint) {
            $.cryptoEndpoint = cryptoEndpoint;
            return this;
        }

        /**
         * @param keyId The OCID of the key to encrypt with.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param plaintext The plaintext data to encrypt.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(String plaintext) {
            $.plaintext = plaintext;
            return this;
        }

        public GetEncryptedDataArgs build() {
            $.cryptoEndpoint = Objects.requireNonNull($.cryptoEndpoint, "expected parameter 'cryptoEndpoint' to be non-null");
            $.keyId = Objects.requireNonNull($.keyId, "expected parameter 'keyId' to be non-null");
            $.plaintext = Objects.requireNonNull($.plaintext, "expected parameter 'plaintext' to be non-null");
            return $;
        }
    }

}
