// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyWafConfigCaptchaArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyWafConfigCaptchaArgs Empty = new PolicyWafConfigCaptchaArgs();

    /**
     * (Updatable) The text to show when incorrect CAPTCHA text is entered. If unspecified, defaults to `The CAPTCHA was incorrect. Try again.`
     * 
     */
    @Import(name="failureMessage", required=true)
    private Output<String> failureMessage;

    /**
     * @return (Updatable) The text to show when incorrect CAPTCHA text is entered. If unspecified, defaults to `The CAPTCHA was incorrect. Try again.`
     * 
     */
    public Output<String> failureMessage() {
        return this.failureMessage;
    }

    /**
     * (Updatable) The text to show in the footer when showing a CAPTCHA challenge. If unspecified, defaults to &#39;Enter the letters and numbers as they are shown in the image above.&#39;
     * 
     */
    @Import(name="footerText")
    private @Nullable Output<String> footerText;

    /**
     * @return (Updatable) The text to show in the footer when showing a CAPTCHA challenge. If unspecified, defaults to &#39;Enter the letters and numbers as they are shown in the image above.&#39;
     * 
     */
    public Optional<Output<String>> footerText() {
        return Optional.ofNullable(this.footerText);
    }

    /**
     * (Updatable) The text to show in the header when showing a CAPTCHA challenge. If unspecified, defaults to &#39;We have detected an increased number of attempts to access this website. To help us keep this site secure, please let us know that you are not a robot by entering the text from the image below.&#39;
     * 
     */
    @Import(name="headerText")
    private @Nullable Output<String> headerText;

    /**
     * @return (Updatable) The text to show in the header when showing a CAPTCHA challenge. If unspecified, defaults to &#39;We have detected an increased number of attempts to access this website. To help us keep this site secure, please let us know that you are not a robot by entering the text from the image below.&#39;
     * 
     */
    public Optional<Output<String>> headerText() {
        return Optional.ofNullable(this.headerText);
    }

    /**
     * (Updatable) The amount of time before the CAPTCHA expires, in seconds. If unspecified, defaults to `300`.
     * 
     */
    @Import(name="sessionExpirationInSeconds", required=true)
    private Output<Integer> sessionExpirationInSeconds;

    /**
     * @return (Updatable) The amount of time before the CAPTCHA expires, in seconds. If unspecified, defaults to `300`.
     * 
     */
    public Output<Integer> sessionExpirationInSeconds() {
        return this.sessionExpirationInSeconds;
    }

    /**
     * (Updatable) The text to show on the label of the CAPTCHA challenge submit button. If unspecified, defaults to `Yes, I am human`.
     * 
     */
    @Import(name="submitLabel", required=true)
    private Output<String> submitLabel;

    /**
     * @return (Updatable) The text to show on the label of the CAPTCHA challenge submit button. If unspecified, defaults to `Yes, I am human`.
     * 
     */
    public Output<String> submitLabel() {
        return this.submitLabel;
    }

    /**
     * (Updatable) The title used when displaying a CAPTCHA challenge. If unspecified, defaults to `Are you human?`
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return (Updatable) The title used when displaying a CAPTCHA challenge. If unspecified, defaults to `Are you human?`
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * (Updatable) The unique URL path at which to show the CAPTCHA challenge.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return (Updatable) The unique URL path at which to show the CAPTCHA challenge.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private PolicyWafConfigCaptchaArgs() {}

    private PolicyWafConfigCaptchaArgs(PolicyWafConfigCaptchaArgs $) {
        this.failureMessage = $.failureMessage;
        this.footerText = $.footerText;
        this.headerText = $.headerText;
        this.sessionExpirationInSeconds = $.sessionExpirationInSeconds;
        this.submitLabel = $.submitLabel;
        this.title = $.title;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyWafConfigCaptchaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyWafConfigCaptchaArgs $;

        public Builder() {
            $ = new PolicyWafConfigCaptchaArgs();
        }

        public Builder(PolicyWafConfigCaptchaArgs defaults) {
            $ = new PolicyWafConfigCaptchaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param failureMessage (Updatable) The text to show when incorrect CAPTCHA text is entered. If unspecified, defaults to `The CAPTCHA was incorrect. Try again.`
         * 
         * @return builder
         * 
         */
        public Builder failureMessage(Output<String> failureMessage) {
            $.failureMessage = failureMessage;
            return this;
        }

        /**
         * @param failureMessage (Updatable) The text to show when incorrect CAPTCHA text is entered. If unspecified, defaults to `The CAPTCHA was incorrect. Try again.`
         * 
         * @return builder
         * 
         */
        public Builder failureMessage(String failureMessage) {
            return failureMessage(Output.of(failureMessage));
        }

        /**
         * @param footerText (Updatable) The text to show in the footer when showing a CAPTCHA challenge. If unspecified, defaults to &#39;Enter the letters and numbers as they are shown in the image above.&#39;
         * 
         * @return builder
         * 
         */
        public Builder footerText(@Nullable Output<String> footerText) {
            $.footerText = footerText;
            return this;
        }

        /**
         * @param footerText (Updatable) The text to show in the footer when showing a CAPTCHA challenge. If unspecified, defaults to &#39;Enter the letters and numbers as they are shown in the image above.&#39;
         * 
         * @return builder
         * 
         */
        public Builder footerText(String footerText) {
            return footerText(Output.of(footerText));
        }

        /**
         * @param headerText (Updatable) The text to show in the header when showing a CAPTCHA challenge. If unspecified, defaults to &#39;We have detected an increased number of attempts to access this website. To help us keep this site secure, please let us know that you are not a robot by entering the text from the image below.&#39;
         * 
         * @return builder
         * 
         */
        public Builder headerText(@Nullable Output<String> headerText) {
            $.headerText = headerText;
            return this;
        }

        /**
         * @param headerText (Updatable) The text to show in the header when showing a CAPTCHA challenge. If unspecified, defaults to &#39;We have detected an increased number of attempts to access this website. To help us keep this site secure, please let us know that you are not a robot by entering the text from the image below.&#39;
         * 
         * @return builder
         * 
         */
        public Builder headerText(String headerText) {
            return headerText(Output.of(headerText));
        }

        /**
         * @param sessionExpirationInSeconds (Updatable) The amount of time before the CAPTCHA expires, in seconds. If unspecified, defaults to `300`.
         * 
         * @return builder
         * 
         */
        public Builder sessionExpirationInSeconds(Output<Integer> sessionExpirationInSeconds) {
            $.sessionExpirationInSeconds = sessionExpirationInSeconds;
            return this;
        }

        /**
         * @param sessionExpirationInSeconds (Updatable) The amount of time before the CAPTCHA expires, in seconds. If unspecified, defaults to `300`.
         * 
         * @return builder
         * 
         */
        public Builder sessionExpirationInSeconds(Integer sessionExpirationInSeconds) {
            return sessionExpirationInSeconds(Output.of(sessionExpirationInSeconds));
        }

        /**
         * @param submitLabel (Updatable) The text to show on the label of the CAPTCHA challenge submit button. If unspecified, defaults to `Yes, I am human`.
         * 
         * @return builder
         * 
         */
        public Builder submitLabel(Output<String> submitLabel) {
            $.submitLabel = submitLabel;
            return this;
        }

        /**
         * @param submitLabel (Updatable) The text to show on the label of the CAPTCHA challenge submit button. If unspecified, defaults to `Yes, I am human`.
         * 
         * @return builder
         * 
         */
        public Builder submitLabel(String submitLabel) {
            return submitLabel(Output.of(submitLabel));
        }

        /**
         * @param title (Updatable) The title used when displaying a CAPTCHA challenge. If unspecified, defaults to `Are you human?`
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title (Updatable) The title used when displaying a CAPTCHA challenge. If unspecified, defaults to `Are you human?`
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param url (Updatable) The unique URL path at which to show the CAPTCHA challenge.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url (Updatable) The unique URL path at which to show the CAPTCHA challenge.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public PolicyWafConfigCaptchaArgs build() {
            $.failureMessage = Objects.requireNonNull($.failureMessage, "expected parameter 'failureMessage' to be non-null");
            $.sessionExpirationInSeconds = Objects.requireNonNull($.sessionExpirationInSeconds, "expected parameter 'sessionExpirationInSeconds' to be non-null");
            $.submitLabel = Objects.requireNonNull($.submitLabel, "expected parameter 'submitLabel' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
