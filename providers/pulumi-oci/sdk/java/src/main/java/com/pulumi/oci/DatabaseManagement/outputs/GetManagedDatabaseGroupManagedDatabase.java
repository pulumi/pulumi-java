// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseGroupManagedDatabase {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
     * 
     */
    private final String compartmentId;
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    private final String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private final String databaseType;
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    private final String deploymentType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    private final String id;
    /**
     * @return The name of the Managed Database Group.
     * 
     */
    private final String name;
    /**
     * @return The date and time the Managed Database was added to the group.
     * 
     */
    private final String timeAdded;
    /**
     * @return The workload type of the Autonomous Database.
     * 
     */
    private final String workloadType;

    @CustomType.Constructor
    private GetManagedDatabaseGroupManagedDatabase(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("databaseSubType") String databaseSubType,
        @CustomType.Parameter("databaseType") String databaseType,
        @CustomType.Parameter("deploymentType") String deploymentType,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("timeAdded") String timeAdded,
        @CustomType.Parameter("workloadType") String workloadType) {
        this.compartmentId = compartmentId;
        this.databaseSubType = databaseSubType;
        this.databaseType = databaseType;
        this.deploymentType = deploymentType;
        this.id = id;
        this.name = name;
        this.timeAdded = timeAdded;
        this.workloadType = workloadType;
    }

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    public String databaseSubType() {
        return this.databaseSubType;
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    public String deploymentType() {
        return this.deploymentType;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the Managed Database Group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The date and time the Managed Database was added to the group.
     * 
     */
    public String timeAdded() {
        return this.timeAdded;
    }
    /**
     * @return The workload type of the Autonomous Database.
     * 
     */
    public String workloadType() {
        return this.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseGroupManagedDatabase defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private String databaseSubType;
        private String databaseType;
        private String deploymentType;
        private String id;
        private String name;
        private String timeAdded;
        private String workloadType;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedDatabaseGroupManagedDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.deploymentType = defaults.deploymentType;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.timeAdded = defaults.timeAdded;
    	      this.workloadType = defaults.workloadType;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder databaseSubType(String databaseSubType) {
            this.databaseSubType = Objects.requireNonNull(databaseSubType);
            return this;
        }
        public Builder databaseType(String databaseType) {
            this.databaseType = Objects.requireNonNull(databaseType);
            return this;
        }
        public Builder deploymentType(String deploymentType) {
            this.deploymentType = Objects.requireNonNull(deploymentType);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder timeAdded(String timeAdded) {
            this.timeAdded = Objects.requireNonNull(timeAdded);
            return this;
        }
        public Builder workloadType(String workloadType) {
            this.workloadType = Objects.requireNonNull(workloadType);
            return this;
        }        public GetManagedDatabaseGroupManagedDatabase build() {
            return new GetManagedDatabaseGroupManagedDatabase(compartmentId, databaseSubType, databaseType, deploymentType, id, name, timeAdded, workloadType);
        }
    }
}
