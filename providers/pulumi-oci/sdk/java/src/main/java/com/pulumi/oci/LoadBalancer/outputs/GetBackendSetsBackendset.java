// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendSetsBackendsetBackend;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendSetsBackendsetHealthChecker;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendSetsBackendsetSessionPersistenceConfiguration;
import com.pulumi.oci.LoadBalancer.outputs.GetBackendSetsBackendsetSslConfiguration;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendSetsBackendset {
    private final List<GetBackendSetsBackendsetBackend> backends;
    /**
     * @return The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
     * 
     */
    private final List<GetBackendSetsBackendsetHealthChecker> healthCheckers;
    private final String id;
    /**
     * @return The configuration details for implementing load balancer cookie session persistence (LB cookie stickiness).
     * 
     */
    private final List<GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfigurations;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer associated with the backend sets to retrieve.
     * 
     */
    private final String loadBalancerId;
    /**
     * @return A friendly name for the backend set. It must be unique and it cannot be changed.
     * 
     */
    private final String name;
    /**
     * @return The load balancer policy for the backend set. To get a list of available policies, use the [ListPolicies](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies) operation.  Example: `LEAST_CONNECTIONS`
     * 
     */
    private final String policy;
    /**
     * @return The configuration details for implementing session persistence based on a user-specified cookie name (application cookie stickiness).
     * 
     */
    private final List<GetBackendSetsBackendsetSessionPersistenceConfiguration> sessionPersistenceConfigurations;
    /**
     * @return A listener&#39;s SSL handling configuration.
     * 
     */
    private final List<GetBackendSetsBackendsetSslConfiguration> sslConfigurations;
    private final String state;

    @CustomType.Constructor
    private GetBackendSetsBackendset(
        @CustomType.Parameter("backends") List<GetBackendSetsBackendsetBackend> backends,
        @CustomType.Parameter("healthCheckers") List<GetBackendSetsBackendsetHealthChecker> healthCheckers,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lbCookieSessionPersistenceConfigurations") List<GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfigurations,
        @CustomType.Parameter("loadBalancerId") String loadBalancerId,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("policy") String policy,
        @CustomType.Parameter("sessionPersistenceConfigurations") List<GetBackendSetsBackendsetSessionPersistenceConfiguration> sessionPersistenceConfigurations,
        @CustomType.Parameter("sslConfigurations") List<GetBackendSetsBackendsetSslConfiguration> sslConfigurations,
        @CustomType.Parameter("state") String state) {
        this.backends = backends;
        this.healthCheckers = healthCheckers;
        this.id = id;
        this.lbCookieSessionPersistenceConfigurations = lbCookieSessionPersistenceConfigurations;
        this.loadBalancerId = loadBalancerId;
        this.name = name;
        this.policy = policy;
        this.sessionPersistenceConfigurations = sessionPersistenceConfigurations;
        this.sslConfigurations = sslConfigurations;
        this.state = state;
    }

    public List<GetBackendSetsBackendsetBackend> backends() {
        return this.backends;
    }
    /**
     * @return The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
     * 
     */
    public List<GetBackendSetsBackendsetHealthChecker> healthCheckers() {
        return this.healthCheckers;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The configuration details for implementing load balancer cookie session persistence (LB cookie stickiness).
     * 
     */
    public List<GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfigurations() {
        return this.lbCookieSessionPersistenceConfigurations;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer associated with the backend sets to retrieve.
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return A friendly name for the backend set. It must be unique and it cannot be changed.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The load balancer policy for the backend set. To get a list of available policies, use the [ListPolicies](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies) operation.  Example: `LEAST_CONNECTIONS`
     * 
     */
    public String policy() {
        return this.policy;
    }
    /**
     * @return The configuration details for implementing session persistence based on a user-specified cookie name (application cookie stickiness).
     * 
     */
    public List<GetBackendSetsBackendsetSessionPersistenceConfiguration> sessionPersistenceConfigurations() {
        return this.sessionPersistenceConfigurations;
    }
    /**
     * @return A listener&#39;s SSL handling configuration.
     * 
     */
    public List<GetBackendSetsBackendsetSslConfiguration> sslConfigurations() {
        return this.sslConfigurations;
    }
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendSetsBackendset defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetBackendSetsBackendsetBackend> backends;
        private List<GetBackendSetsBackendsetHealthChecker> healthCheckers;
        private String id;
        private List<GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfigurations;
        private String loadBalancerId;
        private String name;
        private String policy;
        private List<GetBackendSetsBackendsetSessionPersistenceConfiguration> sessionPersistenceConfigurations;
        private List<GetBackendSetsBackendsetSslConfiguration> sslConfigurations;
        private String state;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackendSetsBackendset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backends = defaults.backends;
    	      this.healthCheckers = defaults.healthCheckers;
    	      this.id = defaults.id;
    	      this.lbCookieSessionPersistenceConfigurations = defaults.lbCookieSessionPersistenceConfigurations;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.sessionPersistenceConfigurations = defaults.sessionPersistenceConfigurations;
    	      this.sslConfigurations = defaults.sslConfigurations;
    	      this.state = defaults.state;
        }

        public Builder backends(List<GetBackendSetsBackendsetBackend> backends) {
            this.backends = Objects.requireNonNull(backends);
            return this;
        }
        public Builder backends(GetBackendSetsBackendsetBackend... backends) {
            return backends(List.of(backends));
        }
        public Builder healthCheckers(List<GetBackendSetsBackendsetHealthChecker> healthCheckers) {
            this.healthCheckers = Objects.requireNonNull(healthCheckers);
            return this;
        }
        public Builder healthCheckers(GetBackendSetsBackendsetHealthChecker... healthCheckers) {
            return healthCheckers(List.of(healthCheckers));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lbCookieSessionPersistenceConfigurations(List<GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration> lbCookieSessionPersistenceConfigurations) {
            this.lbCookieSessionPersistenceConfigurations = Objects.requireNonNull(lbCookieSessionPersistenceConfigurations);
            return this;
        }
        public Builder lbCookieSessionPersistenceConfigurations(GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration... lbCookieSessionPersistenceConfigurations) {
            return lbCookieSessionPersistenceConfigurations(List.of(lbCookieSessionPersistenceConfigurations));
        }
        public Builder loadBalancerId(String loadBalancerId) {
            this.loadBalancerId = Objects.requireNonNull(loadBalancerId);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder policy(String policy) {
            this.policy = Objects.requireNonNull(policy);
            return this;
        }
        public Builder sessionPersistenceConfigurations(List<GetBackendSetsBackendsetSessionPersistenceConfiguration> sessionPersistenceConfigurations) {
            this.sessionPersistenceConfigurations = Objects.requireNonNull(sessionPersistenceConfigurations);
            return this;
        }
        public Builder sessionPersistenceConfigurations(GetBackendSetsBackendsetSessionPersistenceConfiguration... sessionPersistenceConfigurations) {
            return sessionPersistenceConfigurations(List.of(sessionPersistenceConfigurations));
        }
        public Builder sslConfigurations(List<GetBackendSetsBackendsetSslConfiguration> sslConfigurations) {
            this.sslConfigurations = Objects.requireNonNull(sslConfigurations);
            return this;
        }
        public Builder sslConfigurations(GetBackendSetsBackendsetSslConfiguration... sslConfigurations) {
            return sslConfigurations(List.of(sslConfigurations));
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }        public GetBackendSetsBackendset build() {
            return new GetBackendSetsBackendset(backends, healthCheckers, id, lbCookieSessionPersistenceConfigurations, loadBalancerId, name, policy, sessionPersistenceConfigurations, sslConfigurations, state);
        }
    }
}
