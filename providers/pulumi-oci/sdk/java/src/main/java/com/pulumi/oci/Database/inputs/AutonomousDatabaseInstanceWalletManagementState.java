// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutonomousDatabaseInstanceWalletManagementState extends com.pulumi.resources.ResourceArgs {

    public static final AutonomousDatabaseInstanceWalletManagementState Empty = new AutonomousDatabaseInstanceWalletManagementState();

    /**
     * (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="autonomousDatabaseId")
    private @Nullable Output<String> autonomousDatabaseId;

    /**
     * @return (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> autonomousDatabaseId() {
        return Optional.ofNullable(this.autonomousDatabaseId);
    }

    /**
     * (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
     * 
     */
    @Import(name="shouldRotate")
    private @Nullable Output<Boolean> shouldRotate;

    /**
     * @return (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
     * 
     */
    public Optional<Output<Boolean>> shouldRotate() {
        return Optional.ofNullable(this.shouldRotate);
    }

    /**
     * The current lifecycle state of the Autonomous Database wallet.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifecycle state of the Autonomous Database wallet.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the wallet was last rotated.
     * 
     */
    @Import(name="timeRotated")
    private @Nullable Output<String> timeRotated;

    /**
     * @return The date and time the wallet was last rotated.
     * 
     */
    public Optional<Output<String>> timeRotated() {
        return Optional.ofNullable(this.timeRotated);
    }

    private AutonomousDatabaseInstanceWalletManagementState() {}

    private AutonomousDatabaseInstanceWalletManagementState(AutonomousDatabaseInstanceWalletManagementState $) {
        this.autonomousDatabaseId = $.autonomousDatabaseId;
        this.shouldRotate = $.shouldRotate;
        this.state = $.state;
        this.timeRotated = $.timeRotated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutonomousDatabaseInstanceWalletManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutonomousDatabaseInstanceWalletManagementState $;

        public Builder() {
            $ = new AutonomousDatabaseInstanceWalletManagementState();
        }

        public Builder(AutonomousDatabaseInstanceWalletManagementState defaults) {
            $ = new AutonomousDatabaseInstanceWalletManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autonomousDatabaseId (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder autonomousDatabaseId(@Nullable Output<String> autonomousDatabaseId) {
            $.autonomousDatabaseId = autonomousDatabaseId;
            return this;
        }

        /**
         * @param autonomousDatabaseId (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder autonomousDatabaseId(String autonomousDatabaseId) {
            return autonomousDatabaseId(Output.of(autonomousDatabaseId));
        }

        /**
         * @param shouldRotate (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder shouldRotate(@Nullable Output<Boolean> shouldRotate) {
            $.shouldRotate = shouldRotate;
            return this;
        }

        /**
         * @param shouldRotate (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder shouldRotate(Boolean shouldRotate) {
            return shouldRotate(Output.of(shouldRotate));
        }

        /**
         * @param state The current lifecycle state of the Autonomous Database wallet.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifecycle state of the Autonomous Database wallet.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeRotated The date and time the wallet was last rotated.
         * 
         * @return builder
         * 
         */
        public Builder timeRotated(@Nullable Output<String> timeRotated) {
            $.timeRotated = timeRotated;
            return this;
        }

        /**
         * @param timeRotated The date and time the wallet was last rotated.
         * 
         * @return builder
         * 
         */
        public Builder timeRotated(String timeRotated) {
            return timeRotated(Output.of(timeRotated));
        }

        public AutonomousDatabaseInstanceWalletManagementState build() {
            return $;
        }
    }

}
