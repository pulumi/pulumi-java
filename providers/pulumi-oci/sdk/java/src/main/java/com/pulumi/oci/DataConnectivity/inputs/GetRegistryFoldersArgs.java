// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataConnectivity.inputs.GetRegistryFoldersFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetRegistryFoldersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRegistryFoldersArgs Empty = new GetRegistryFoldersArgs();

    /**
     * If value is FAVORITES_ONLY, then only objects marked as favorite by the requesting user will be included in result. If value is NON_FAVORITES_ONLY, then objects marked as favorites by the requesting user will be skipped. If value is ALL or if not specified, all objects, irrespective of favorites or not will be returned. Default is ALL.
     * 
     */
    @Import(name="favoritesQueryParam")
    private Output</* @Nullable */ String> favoritesQueryParam;

    /**
     * @return If value is FAVORITES_ONLY, then only objects marked as favorite by the requesting user will be included in result. If value is NON_FAVORITES_ONLY, then objects marked as favorites by the requesting user will be skipped. If value is ALL or if not specified, all objects, irrespective of favorites or not will be returned. Default is ALL.
     * 
     */
    public Output</* @Nullable */ String> favoritesQueryParam() {
        return this.favoritesQueryParam;
    }

    /**
     * Specifies the fields to get for an object.
     * 
     */
    @Import(name="fields")
    private Output</* @Nullable */ List<String>> fields;

    /**
     * @return Specifies the fields to get for an object.
     * 
     */
    public Output</* @Nullable */ List<String>> fields() {
        return this.fields;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetRegistryFoldersFilter>> filters;

    public Output</* @Nullable */ List<GetRegistryFoldersFilter>> filters() {
        return this.filters;
    }

    /**
     * Used to filter by the name of the object.
     * 
     */
    @Import(name="name")
    private Output</* @Nullable */ String> name;

    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public Output</* @Nullable */ String> name() {
        return this.name;
    }

    /**
     * The registry Ocid.
     * 
     */
    @Import(name="registryId", required=true)
    private Output<String> registryId;

    /**
     * @return The registry Ocid.
     * 
     */
    public Output<String> registryId() {
        return this.registryId;
    }

    /**
     * Type of the object to filter the results with.
     * 
     */
    @Import(name="type")
    private Output</* @Nullable */ String> type;

    /**
     * @return Type of the object to filter the results with.
     * 
     */
    public Output</* @Nullable */ String> type() {
        return this.type;
    }

    private GetRegistryFoldersArgs() {}

    private GetRegistryFoldersArgs(GetRegistryFoldersArgs $) {
        this.favoritesQueryParam = $.favoritesQueryParam;
        this.fields = $.fields;
        this.filters = $.filters;
        this.name = $.name;
        this.registryId = $.registryId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegistryFoldersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegistryFoldersArgs $;

        public Builder() {
            $ = new GetRegistryFoldersArgs();
        }

        public Builder(GetRegistryFoldersArgs defaults) {
            $ = new GetRegistryFoldersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param favoritesQueryParam If value is FAVORITES_ONLY, then only objects marked as favorite by the requesting user will be included in result. If value is NON_FAVORITES_ONLY, then objects marked as favorites by the requesting user will be skipped. If value is ALL or if not specified, all objects, irrespective of favorites or not will be returned. Default is ALL.
         * 
         * @return builder
         * 
         */
        public Builder favoritesQueryParam(Output</* @Nullable */ String> favoritesQueryParam) {
            $.favoritesQueryParam = favoritesQueryParam;
            return this;
        }

        /**
         * @param favoritesQueryParam If value is FAVORITES_ONLY, then only objects marked as favorite by the requesting user will be included in result. If value is NON_FAVORITES_ONLY, then objects marked as favorites by the requesting user will be skipped. If value is ALL or if not specified, all objects, irrespective of favorites or not will be returned. Default is ALL.
         * 
         * @return builder
         * 
         */
        public Builder favoritesQueryParam(@Nullable String favoritesQueryParam) {
            return favoritesQueryParam(Output.of(favoritesQueryParam));
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(Output</* @Nullable */ List<String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable List<String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(Output</* @Nullable */ List<GetRegistryFoldersFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetRegistryFoldersFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetRegistryFoldersFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name Used to filter by the name of the object.
         * 
         * @return builder
         * 
         */
        public Builder name(Output</* @Nullable */ String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Used to filter by the name of the object.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            return name(Output.of(name));
        }

        /**
         * @param registryId The registry Ocid.
         * 
         * @return builder
         * 
         */
        public Builder registryId(Output<String> registryId) {
            $.registryId = registryId;
            return this;
        }

        /**
         * @param registryId The registry Ocid.
         * 
         * @return builder
         * 
         */
        public Builder registryId(String registryId) {
            return registryId(Output.of(registryId));
        }

        /**
         * @param type Type of the object to filter the results with.
         * 
         * @return builder
         * 
         */
        public Builder type(Output</* @Nullable */ String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the object to filter the results with.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            return type(Output.of(type));
        }

        public GetRegistryFoldersArgs build() {
            $.registryId = Objects.requireNonNull($.registryId, "expected parameter 'registryId' to be non-null");
            return $;
        }
    }

}
