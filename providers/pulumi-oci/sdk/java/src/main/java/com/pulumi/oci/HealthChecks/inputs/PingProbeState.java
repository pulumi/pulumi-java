// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.HealthChecks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PingProbeState extends com.pulumi.resources.ResourceArgs {

    public static final PingProbeState Empty = new PingProbeState();

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The region where updates must be made and where results must be fetched from.
     * 
     */
    @Import(name="homeRegion")
    private @Nullable Output<String> homeRegion;

    /**
     * @return The region where updates must be made and where results must be fetched from.
     * 
     */
    public Optional<Output<String>> homeRegion() {
        return Optional.ofNullable(this.homeRegion);
    }

    /**
     * The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The protocols for ping probes.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocols for ping probes.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * A URL for fetching the probe results.
     * 
     */
    @Import(name="resultsUrl")
    private @Nullable Output<String> resultsUrl;

    /**
     * @return A URL for fetching the probe results.
     * 
     */
    public Optional<Output<String>> resultsUrl() {
        return Optional.ofNullable(this.resultsUrl);
    }

    /**
     * A list of targets (hostnames or IP addresses) of the probe.
     * 
     */
    @Import(name="targets")
    private @Nullable Output<List<String>> targets;

    /**
     * @return A list of targets (hostnames or IP addresses) of the probe.
     * 
     */
    public Optional<Output<List<String>>> targets() {
        return Optional.ofNullable(this.targets);
    }

    /**
     * The RFC 3339-formatted creation date and time of the probe.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The RFC 3339-formatted creation date and time of the probe.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Integer> timeoutInSeconds;

    /**
     * @return The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
     * 
     */
    public Optional<Output<Integer>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * A list of names of vantage points from which to execute the probe.
     * 
     */
    @Import(name="vantagePointNames")
    private @Nullable Output<List<String>> vantagePointNames;

    /**
     * @return A list of names of vantage points from which to execute the probe.
     * 
     */
    public Optional<Output<List<String>>> vantagePointNames() {
        return Optional.ofNullable(this.vantagePointNames);
    }

    private PingProbeState() {}

    private PingProbeState(PingProbeState $) {
        this.compartmentId = $.compartmentId;
        this.homeRegion = $.homeRegion;
        this.port = $.port;
        this.protocol = $.protocol;
        this.resultsUrl = $.resultsUrl;
        this.targets = $.targets;
        this.timeCreated = $.timeCreated;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.vantagePointNames = $.vantagePointNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PingProbeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PingProbeState $;

        public Builder() {
            $ = new PingProbeState();
        }

        public Builder(PingProbeState defaults) {
            $ = new PingProbeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param homeRegion The region where updates must be made and where results must be fetched from.
         * 
         * @return builder
         * 
         */
        public Builder homeRegion(@Nullable Output<String> homeRegion) {
            $.homeRegion = homeRegion;
            return this;
        }

        /**
         * @param homeRegion The region where updates must be made and where results must be fetched from.
         * 
         * @return builder
         * 
         */
        public Builder homeRegion(String homeRegion) {
            return homeRegion(Output.of(homeRegion));
        }

        /**
         * @param port The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol The protocols for ping probes.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocols for ping probes.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param resultsUrl A URL for fetching the probe results.
         * 
         * @return builder
         * 
         */
        public Builder resultsUrl(@Nullable Output<String> resultsUrl) {
            $.resultsUrl = resultsUrl;
            return this;
        }

        /**
         * @param resultsUrl A URL for fetching the probe results.
         * 
         * @return builder
         * 
         */
        public Builder resultsUrl(String resultsUrl) {
            return resultsUrl(Output.of(resultsUrl));
        }

        /**
         * @param targets A list of targets (hostnames or IP addresses) of the probe.
         * 
         * @return builder
         * 
         */
        public Builder targets(@Nullable Output<List<String>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets A list of targets (hostnames or IP addresses) of the probe.
         * 
         * @return builder
         * 
         */
        public Builder targets(List<String> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets A list of targets (hostnames or IP addresses) of the probe.
         * 
         * @return builder
         * 
         */
        public Builder targets(String... targets) {
            return targets(List.of(targets));
        }

        /**
         * @param timeCreated The RFC 3339-formatted creation date and time of the probe.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The RFC 3339-formatted creation date and time of the probe.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeoutInSeconds The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(@Nullable Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        /**
         * @param vantagePointNames A list of names of vantage points from which to execute the probe.
         * 
         * @return builder
         * 
         */
        public Builder vantagePointNames(@Nullable Output<List<String>> vantagePointNames) {
            $.vantagePointNames = vantagePointNames;
            return this;
        }

        /**
         * @param vantagePointNames A list of names of vantage points from which to execute the probe.
         * 
         * @return builder
         * 
         */
        public Builder vantagePointNames(List<String> vantagePointNames) {
            return vantagePointNames(Output.of(vantagePointNames));
        }

        /**
         * @param vantagePointNames A list of names of vantage points from which to execute the probe.
         * 
         * @return builder
         * 
         */
        public Builder vantagePointNames(String... vantagePointNames) {
            return vantagePointNames(List.of(vantagePointNames));
        }

        public PingProbeState build() {
            return $;
        }
    }

}
