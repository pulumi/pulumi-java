// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OspGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.OspGateway.outputs.GetInvoicesInvoiceCollectionItemBillToAddress;
import com.pulumi.oci.OspGateway.outputs.GetInvoicesInvoiceCollectionItemCurrency;
import com.pulumi.oci.OspGateway.outputs.GetInvoicesInvoiceCollectionItemLastPaymentDetail;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInvoicesInvoiceCollectionItem {
    /**
     * @return Address details model
     * 
     */
    private final List<GetInvoicesInvoiceCollectionItemBillToAddress> billToAddresses;
    /**
     * @return Currency details model
     * 
     */
    private final List<GetInvoicesInvoiceCollectionItemCurrency> currencies;
    /**
     * @return Transaction identifier
     * 
     */
    private final String internalInvoiceId;
    /**
     * @return Total amount of invoice
     * 
     */
    private final Double invoiceAmount;
    /**
     * @return Invoice amount adjust
     * 
     */
    private final Double invoiceAmountAdjusted;
    /**
     * @return Invoice amount applied
     * 
     */
    private final Double invoiceAmountApplied;
    /**
     * @return Invoice amount credit
     * 
     */
    private final Double invoiceAmountCredited;
    /**
     * @return Balance of invoice
     * 
     */
    private final Double invoiceAmountDue;
    private final Double invoiceAmountInDispute;
    /**
     * @return The invoice query param (not unique).
     * 
     */
    private final String invoiceId;
    /**
     * @return Invoice external reference
     * 
     */
    private final String invoiceNumber;
    /**
     * @return Invoice PO number
     * 
     */
    private final String invoicePoNumber;
    /**
     * @return Invoice reference number
     * 
     */
    private final String invoiceRefNumber;
    /**
     * @return Invoice status
     * 
     */
    private final String invoiceStatus;
    /**
     * @return Type of invoice
     * 
     */
    private final String invoiceType;
    /**
     * @return Is credit card payment eligible
     * 
     */
    private final Boolean isCreditCardPayable;
    /**
     * @return Is pdf download access allowed
     * 
     */
    private final Boolean isDisplayDownloadPdf;
    private final Boolean isDisplayViewPdf;
    private final Boolean isPaid;
    /**
     * @return Whether invoice can be payed
     * 
     */
    private final Boolean isPayable;
    private final Boolean isPaymentFailed;
    /**
     * @return Is emailing pdf allowed
     * 
     */
    private final Boolean isPdfEmailAvailable;
    /**
     * @return Payment related details
     * 
     */
    private final List<GetInvoicesInvoiceCollectionItemLastPaymentDetail> lastPaymentDetails;
    private final String partyName;
    /**
     * @return Payment terms
     * 
     */
    private final String paymentTerms;
    /**
     * @return Preferred Email on the invoice
     * 
     */
    private final String preferredEmail;
    /**
     * @return List of subscription identifiers
     * 
     */
    private final List<String> subscriptionIds;
    /**
     * @return Tax of invoice amount
     * 
     */
    private final Double tax;
    /**
     * @return Date of invoice
     * 
     */
    private final String timeInvoice;
    /**
     * @return Due date of invoice
     * 
     */
    private final String timeInvoiceDue;

    @CustomType.Constructor
    private GetInvoicesInvoiceCollectionItem(
        @CustomType.Parameter("billToAddresses") List<GetInvoicesInvoiceCollectionItemBillToAddress> billToAddresses,
        @CustomType.Parameter("currencies") List<GetInvoicesInvoiceCollectionItemCurrency> currencies,
        @CustomType.Parameter("internalInvoiceId") String internalInvoiceId,
        @CustomType.Parameter("invoiceAmount") Double invoiceAmount,
        @CustomType.Parameter("invoiceAmountAdjusted") Double invoiceAmountAdjusted,
        @CustomType.Parameter("invoiceAmountApplied") Double invoiceAmountApplied,
        @CustomType.Parameter("invoiceAmountCredited") Double invoiceAmountCredited,
        @CustomType.Parameter("invoiceAmountDue") Double invoiceAmountDue,
        @CustomType.Parameter("invoiceAmountInDispute") Double invoiceAmountInDispute,
        @CustomType.Parameter("invoiceId") String invoiceId,
        @CustomType.Parameter("invoiceNumber") String invoiceNumber,
        @CustomType.Parameter("invoicePoNumber") String invoicePoNumber,
        @CustomType.Parameter("invoiceRefNumber") String invoiceRefNumber,
        @CustomType.Parameter("invoiceStatus") String invoiceStatus,
        @CustomType.Parameter("invoiceType") String invoiceType,
        @CustomType.Parameter("isCreditCardPayable") Boolean isCreditCardPayable,
        @CustomType.Parameter("isDisplayDownloadPdf") Boolean isDisplayDownloadPdf,
        @CustomType.Parameter("isDisplayViewPdf") Boolean isDisplayViewPdf,
        @CustomType.Parameter("isPaid") Boolean isPaid,
        @CustomType.Parameter("isPayable") Boolean isPayable,
        @CustomType.Parameter("isPaymentFailed") Boolean isPaymentFailed,
        @CustomType.Parameter("isPdfEmailAvailable") Boolean isPdfEmailAvailable,
        @CustomType.Parameter("lastPaymentDetails") List<GetInvoicesInvoiceCollectionItemLastPaymentDetail> lastPaymentDetails,
        @CustomType.Parameter("partyName") String partyName,
        @CustomType.Parameter("paymentTerms") String paymentTerms,
        @CustomType.Parameter("preferredEmail") String preferredEmail,
        @CustomType.Parameter("subscriptionIds") List<String> subscriptionIds,
        @CustomType.Parameter("tax") Double tax,
        @CustomType.Parameter("timeInvoice") String timeInvoice,
        @CustomType.Parameter("timeInvoiceDue") String timeInvoiceDue) {
        this.billToAddresses = billToAddresses;
        this.currencies = currencies;
        this.internalInvoiceId = internalInvoiceId;
        this.invoiceAmount = invoiceAmount;
        this.invoiceAmountAdjusted = invoiceAmountAdjusted;
        this.invoiceAmountApplied = invoiceAmountApplied;
        this.invoiceAmountCredited = invoiceAmountCredited;
        this.invoiceAmountDue = invoiceAmountDue;
        this.invoiceAmountInDispute = invoiceAmountInDispute;
        this.invoiceId = invoiceId;
        this.invoiceNumber = invoiceNumber;
        this.invoicePoNumber = invoicePoNumber;
        this.invoiceRefNumber = invoiceRefNumber;
        this.invoiceStatus = invoiceStatus;
        this.invoiceType = invoiceType;
        this.isCreditCardPayable = isCreditCardPayable;
        this.isDisplayDownloadPdf = isDisplayDownloadPdf;
        this.isDisplayViewPdf = isDisplayViewPdf;
        this.isPaid = isPaid;
        this.isPayable = isPayable;
        this.isPaymentFailed = isPaymentFailed;
        this.isPdfEmailAvailable = isPdfEmailAvailable;
        this.lastPaymentDetails = lastPaymentDetails;
        this.partyName = partyName;
        this.paymentTerms = paymentTerms;
        this.preferredEmail = preferredEmail;
        this.subscriptionIds = subscriptionIds;
        this.tax = tax;
        this.timeInvoice = timeInvoice;
        this.timeInvoiceDue = timeInvoiceDue;
    }

    /**
     * @return Address details model
     * 
     */
    public List<GetInvoicesInvoiceCollectionItemBillToAddress> billToAddresses() {
        return this.billToAddresses;
    }
    /**
     * @return Currency details model
     * 
     */
    public List<GetInvoicesInvoiceCollectionItemCurrency> currencies() {
        return this.currencies;
    }
    /**
     * @return Transaction identifier
     * 
     */
    public String internalInvoiceId() {
        return this.internalInvoiceId;
    }
    /**
     * @return Total amount of invoice
     * 
     */
    public Double invoiceAmount() {
        return this.invoiceAmount;
    }
    /**
     * @return Invoice amount adjust
     * 
     */
    public Double invoiceAmountAdjusted() {
        return this.invoiceAmountAdjusted;
    }
    /**
     * @return Invoice amount applied
     * 
     */
    public Double invoiceAmountApplied() {
        return this.invoiceAmountApplied;
    }
    /**
     * @return Invoice amount credit
     * 
     */
    public Double invoiceAmountCredited() {
        return this.invoiceAmountCredited;
    }
    /**
     * @return Balance of invoice
     * 
     */
    public Double invoiceAmountDue() {
        return this.invoiceAmountDue;
    }
    public Double invoiceAmountInDispute() {
        return this.invoiceAmountInDispute;
    }
    /**
     * @return The invoice query param (not unique).
     * 
     */
    public String invoiceId() {
        return this.invoiceId;
    }
    /**
     * @return Invoice external reference
     * 
     */
    public String invoiceNumber() {
        return this.invoiceNumber;
    }
    /**
     * @return Invoice PO number
     * 
     */
    public String invoicePoNumber() {
        return this.invoicePoNumber;
    }
    /**
     * @return Invoice reference number
     * 
     */
    public String invoiceRefNumber() {
        return this.invoiceRefNumber;
    }
    /**
     * @return Invoice status
     * 
     */
    public String invoiceStatus() {
        return this.invoiceStatus;
    }
    /**
     * @return Type of invoice
     * 
     */
    public String invoiceType() {
        return this.invoiceType;
    }
    /**
     * @return Is credit card payment eligible
     * 
     */
    public Boolean isCreditCardPayable() {
        return this.isCreditCardPayable;
    }
    /**
     * @return Is pdf download access allowed
     * 
     */
    public Boolean isDisplayDownloadPdf() {
        return this.isDisplayDownloadPdf;
    }
    public Boolean isDisplayViewPdf() {
        return this.isDisplayViewPdf;
    }
    public Boolean isPaid() {
        return this.isPaid;
    }
    /**
     * @return Whether invoice can be payed
     * 
     */
    public Boolean isPayable() {
        return this.isPayable;
    }
    public Boolean isPaymentFailed() {
        return this.isPaymentFailed;
    }
    /**
     * @return Is emailing pdf allowed
     * 
     */
    public Boolean isPdfEmailAvailable() {
        return this.isPdfEmailAvailable;
    }
    /**
     * @return Payment related details
     * 
     */
    public List<GetInvoicesInvoiceCollectionItemLastPaymentDetail> lastPaymentDetails() {
        return this.lastPaymentDetails;
    }
    public String partyName() {
        return this.partyName;
    }
    /**
     * @return Payment terms
     * 
     */
    public String paymentTerms() {
        return this.paymentTerms;
    }
    /**
     * @return Preferred Email on the invoice
     * 
     */
    public String preferredEmail() {
        return this.preferredEmail;
    }
    /**
     * @return List of subscription identifiers
     * 
     */
    public List<String> subscriptionIds() {
        return this.subscriptionIds;
    }
    /**
     * @return Tax of invoice amount
     * 
     */
    public Double tax() {
        return this.tax;
    }
    /**
     * @return Date of invoice
     * 
     */
    public String timeInvoice() {
        return this.timeInvoice;
    }
    /**
     * @return Due date of invoice
     * 
     */
    public String timeInvoiceDue() {
        return this.timeInvoiceDue;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvoicesInvoiceCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetInvoicesInvoiceCollectionItemBillToAddress> billToAddresses;
        private List<GetInvoicesInvoiceCollectionItemCurrency> currencies;
        private String internalInvoiceId;
        private Double invoiceAmount;
        private Double invoiceAmountAdjusted;
        private Double invoiceAmountApplied;
        private Double invoiceAmountCredited;
        private Double invoiceAmountDue;
        private Double invoiceAmountInDispute;
        private String invoiceId;
        private String invoiceNumber;
        private String invoicePoNumber;
        private String invoiceRefNumber;
        private String invoiceStatus;
        private String invoiceType;
        private Boolean isCreditCardPayable;
        private Boolean isDisplayDownloadPdf;
        private Boolean isDisplayViewPdf;
        private Boolean isPaid;
        private Boolean isPayable;
        private Boolean isPaymentFailed;
        private Boolean isPdfEmailAvailable;
        private List<GetInvoicesInvoiceCollectionItemLastPaymentDetail> lastPaymentDetails;
        private String partyName;
        private String paymentTerms;
        private String preferredEmail;
        private List<String> subscriptionIds;
        private Double tax;
        private String timeInvoice;
        private String timeInvoiceDue;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInvoicesInvoiceCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billToAddresses = defaults.billToAddresses;
    	      this.currencies = defaults.currencies;
    	      this.internalInvoiceId = defaults.internalInvoiceId;
    	      this.invoiceAmount = defaults.invoiceAmount;
    	      this.invoiceAmountAdjusted = defaults.invoiceAmountAdjusted;
    	      this.invoiceAmountApplied = defaults.invoiceAmountApplied;
    	      this.invoiceAmountCredited = defaults.invoiceAmountCredited;
    	      this.invoiceAmountDue = defaults.invoiceAmountDue;
    	      this.invoiceAmountInDispute = defaults.invoiceAmountInDispute;
    	      this.invoiceId = defaults.invoiceId;
    	      this.invoiceNumber = defaults.invoiceNumber;
    	      this.invoicePoNumber = defaults.invoicePoNumber;
    	      this.invoiceRefNumber = defaults.invoiceRefNumber;
    	      this.invoiceStatus = defaults.invoiceStatus;
    	      this.invoiceType = defaults.invoiceType;
    	      this.isCreditCardPayable = defaults.isCreditCardPayable;
    	      this.isDisplayDownloadPdf = defaults.isDisplayDownloadPdf;
    	      this.isDisplayViewPdf = defaults.isDisplayViewPdf;
    	      this.isPaid = defaults.isPaid;
    	      this.isPayable = defaults.isPayable;
    	      this.isPaymentFailed = defaults.isPaymentFailed;
    	      this.isPdfEmailAvailable = defaults.isPdfEmailAvailable;
    	      this.lastPaymentDetails = defaults.lastPaymentDetails;
    	      this.partyName = defaults.partyName;
    	      this.paymentTerms = defaults.paymentTerms;
    	      this.preferredEmail = defaults.preferredEmail;
    	      this.subscriptionIds = defaults.subscriptionIds;
    	      this.tax = defaults.tax;
    	      this.timeInvoice = defaults.timeInvoice;
    	      this.timeInvoiceDue = defaults.timeInvoiceDue;
        }

        public Builder billToAddresses(List<GetInvoicesInvoiceCollectionItemBillToAddress> billToAddresses) {
            this.billToAddresses = Objects.requireNonNull(billToAddresses);
            return this;
        }
        public Builder billToAddresses(GetInvoicesInvoiceCollectionItemBillToAddress... billToAddresses) {
            return billToAddresses(List.of(billToAddresses));
        }
        public Builder currencies(List<GetInvoicesInvoiceCollectionItemCurrency> currencies) {
            this.currencies = Objects.requireNonNull(currencies);
            return this;
        }
        public Builder currencies(GetInvoicesInvoiceCollectionItemCurrency... currencies) {
            return currencies(List.of(currencies));
        }
        public Builder internalInvoiceId(String internalInvoiceId) {
            this.internalInvoiceId = Objects.requireNonNull(internalInvoiceId);
            return this;
        }
        public Builder invoiceAmount(Double invoiceAmount) {
            this.invoiceAmount = Objects.requireNonNull(invoiceAmount);
            return this;
        }
        public Builder invoiceAmountAdjusted(Double invoiceAmountAdjusted) {
            this.invoiceAmountAdjusted = Objects.requireNonNull(invoiceAmountAdjusted);
            return this;
        }
        public Builder invoiceAmountApplied(Double invoiceAmountApplied) {
            this.invoiceAmountApplied = Objects.requireNonNull(invoiceAmountApplied);
            return this;
        }
        public Builder invoiceAmountCredited(Double invoiceAmountCredited) {
            this.invoiceAmountCredited = Objects.requireNonNull(invoiceAmountCredited);
            return this;
        }
        public Builder invoiceAmountDue(Double invoiceAmountDue) {
            this.invoiceAmountDue = Objects.requireNonNull(invoiceAmountDue);
            return this;
        }
        public Builder invoiceAmountInDispute(Double invoiceAmountInDispute) {
            this.invoiceAmountInDispute = Objects.requireNonNull(invoiceAmountInDispute);
            return this;
        }
        public Builder invoiceId(String invoiceId) {
            this.invoiceId = Objects.requireNonNull(invoiceId);
            return this;
        }
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = Objects.requireNonNull(invoiceNumber);
            return this;
        }
        public Builder invoicePoNumber(String invoicePoNumber) {
            this.invoicePoNumber = Objects.requireNonNull(invoicePoNumber);
            return this;
        }
        public Builder invoiceRefNumber(String invoiceRefNumber) {
            this.invoiceRefNumber = Objects.requireNonNull(invoiceRefNumber);
            return this;
        }
        public Builder invoiceStatus(String invoiceStatus) {
            this.invoiceStatus = Objects.requireNonNull(invoiceStatus);
            return this;
        }
        public Builder invoiceType(String invoiceType) {
            this.invoiceType = Objects.requireNonNull(invoiceType);
            return this;
        }
        public Builder isCreditCardPayable(Boolean isCreditCardPayable) {
            this.isCreditCardPayable = Objects.requireNonNull(isCreditCardPayable);
            return this;
        }
        public Builder isDisplayDownloadPdf(Boolean isDisplayDownloadPdf) {
            this.isDisplayDownloadPdf = Objects.requireNonNull(isDisplayDownloadPdf);
            return this;
        }
        public Builder isDisplayViewPdf(Boolean isDisplayViewPdf) {
            this.isDisplayViewPdf = Objects.requireNonNull(isDisplayViewPdf);
            return this;
        }
        public Builder isPaid(Boolean isPaid) {
            this.isPaid = Objects.requireNonNull(isPaid);
            return this;
        }
        public Builder isPayable(Boolean isPayable) {
            this.isPayable = Objects.requireNonNull(isPayable);
            return this;
        }
        public Builder isPaymentFailed(Boolean isPaymentFailed) {
            this.isPaymentFailed = Objects.requireNonNull(isPaymentFailed);
            return this;
        }
        public Builder isPdfEmailAvailable(Boolean isPdfEmailAvailable) {
            this.isPdfEmailAvailable = Objects.requireNonNull(isPdfEmailAvailable);
            return this;
        }
        public Builder lastPaymentDetails(List<GetInvoicesInvoiceCollectionItemLastPaymentDetail> lastPaymentDetails) {
            this.lastPaymentDetails = Objects.requireNonNull(lastPaymentDetails);
            return this;
        }
        public Builder lastPaymentDetails(GetInvoicesInvoiceCollectionItemLastPaymentDetail... lastPaymentDetails) {
            return lastPaymentDetails(List.of(lastPaymentDetails));
        }
        public Builder partyName(String partyName) {
            this.partyName = Objects.requireNonNull(partyName);
            return this;
        }
        public Builder paymentTerms(String paymentTerms) {
            this.paymentTerms = Objects.requireNonNull(paymentTerms);
            return this;
        }
        public Builder preferredEmail(String preferredEmail) {
            this.preferredEmail = Objects.requireNonNull(preferredEmail);
            return this;
        }
        public Builder subscriptionIds(List<String> subscriptionIds) {
            this.subscriptionIds = Objects.requireNonNull(subscriptionIds);
            return this;
        }
        public Builder subscriptionIds(String... subscriptionIds) {
            return subscriptionIds(List.of(subscriptionIds));
        }
        public Builder tax(Double tax) {
            this.tax = Objects.requireNonNull(tax);
            return this;
        }
        public Builder timeInvoice(String timeInvoice) {
            this.timeInvoice = Objects.requireNonNull(timeInvoice);
            return this;
        }
        public Builder timeInvoiceDue(String timeInvoiceDue) {
            this.timeInvoiceDue = Objects.requireNonNull(timeInvoiceDue);
            return this;
        }        public GetInvoicesInvoiceCollectionItem build() {
            return new GetInvoicesInvoiceCollectionItem(billToAddresses, currencies, internalInvoiceId, invoiceAmount, invoiceAmountAdjusted, invoiceAmountApplied, invoiceAmountCredited, invoiceAmountDue, invoiceAmountInDispute, invoiceId, invoiceNumber, invoicePoNumber, invoiceRefNumber, invoiceStatus, invoiceType, isCreditCardPayable, isDisplayDownloadPdf, isDisplayViewPdf, isPaid, isPayable, isPaymentFailed, isPdfEmailAvailable, lastPaymentDetails, partyName, paymentTerms, preferredEmail, subscriptionIds, tax, timeInvoice, timeInvoiceDue);
        }
    }
}
