// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmConfig.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigRule {
    /**
     * @return (Updatable) A user-friendly name that provides a short description this rule.
     * 
     */
    private final @Nullable String displayName;
    /**
     * @return (Updatable) The string that defines the Span Filter expression.
     * 
     */
    private final @Nullable String filterText;
    /**
     * @return (Updatable) If true, the rule will compute the actual Apdex score for spans that have been marked as errors. If false, the rule will always set the Apdex for error spans to frustrating, regardless of the configured thresholds. Default is false.
     * 
     */
    private final @Nullable Boolean isApplyToErrorSpans;
    /**
     * @return (Updatable) Specifies if the Apdex rule will be computed for spans matching the rule. Can be used to make sure certain spans don&#39;t get an Apdex score. The default is &#34;true&#34;.
     * 
     */
    private final @Nullable Boolean isEnabled;
    /**
     * @return (Updatable) The priority controls the order in which multiple rules in a rule set are applied. Lower values indicate higher priorities. Rules with higher priority are applied first, and once a match is found, the rest of the rules are ignored. Rules within the same rule set cannot have the same priority.
     * 
     */
    private final @Nullable Integer priority;
    /**
     * @return (Updatable) The maximum response time in milliseconds that will be considered satisfactory for the end user.
     * 
     */
    private final @Nullable Integer satisfiedResponseTime;
    /**
     * @return (Updatable) The maximum response time in milliseconds that will be considered tolerable for the end user. Response times beyond this threshold will be considered frustrating. This value cannot be lower than &#34;satisfiedResponseTime&#34;.
     * 
     */
    private final @Nullable Integer toleratingResponseTime;

    @CustomType.Constructor
    private ConfigRule(
        @CustomType.Parameter("displayName") @Nullable String displayName,
        @CustomType.Parameter("filterText") @Nullable String filterText,
        @CustomType.Parameter("isApplyToErrorSpans") @Nullable Boolean isApplyToErrorSpans,
        @CustomType.Parameter("isEnabled") @Nullable Boolean isEnabled,
        @CustomType.Parameter("priority") @Nullable Integer priority,
        @CustomType.Parameter("satisfiedResponseTime") @Nullable Integer satisfiedResponseTime,
        @CustomType.Parameter("toleratingResponseTime") @Nullable Integer toleratingResponseTime) {
        this.displayName = displayName;
        this.filterText = filterText;
        this.isApplyToErrorSpans = isApplyToErrorSpans;
        this.isEnabled = isEnabled;
        this.priority = priority;
        this.satisfiedResponseTime = satisfiedResponseTime;
        this.toleratingResponseTime = toleratingResponseTime;
    }

    /**
     * @return (Updatable) A user-friendly name that provides a short description this rule.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return (Updatable) The string that defines the Span Filter expression.
     * 
     */
    public Optional<String> filterText() {
        return Optional.ofNullable(this.filterText);
    }
    /**
     * @return (Updatable) If true, the rule will compute the actual Apdex score for spans that have been marked as errors. If false, the rule will always set the Apdex for error spans to frustrating, regardless of the configured thresholds. Default is false.
     * 
     */
    public Optional<Boolean> isApplyToErrorSpans() {
        return Optional.ofNullable(this.isApplyToErrorSpans);
    }
    /**
     * @return (Updatable) Specifies if the Apdex rule will be computed for spans matching the rule. Can be used to make sure certain spans don&#39;t get an Apdex score. The default is &#34;true&#34;.
     * 
     */
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    /**
     * @return (Updatable) The priority controls the order in which multiple rules in a rule set are applied. Lower values indicate higher priorities. Rules with higher priority are applied first, and once a match is found, the rest of the rules are ignored. Rules within the same rule set cannot have the same priority.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return (Updatable) The maximum response time in milliseconds that will be considered satisfactory for the end user.
     * 
     */
    public Optional<Integer> satisfiedResponseTime() {
        return Optional.ofNullable(this.satisfiedResponseTime);
    }
    /**
     * @return (Updatable) The maximum response time in milliseconds that will be considered tolerable for the end user. Response times beyond this threshold will be considered frustrating. This value cannot be lower than &#34;satisfiedResponseTime&#34;.
     * 
     */
    public Optional<Integer> toleratingResponseTime() {
        return Optional.ofNullable(this.toleratingResponseTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String displayName;
        private @Nullable String filterText;
        private @Nullable Boolean isApplyToErrorSpans;
        private @Nullable Boolean isEnabled;
        private @Nullable Integer priority;
        private @Nullable Integer satisfiedResponseTime;
        private @Nullable Integer toleratingResponseTime;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.filterText = defaults.filterText;
    	      this.isApplyToErrorSpans = defaults.isApplyToErrorSpans;
    	      this.isEnabled = defaults.isEnabled;
    	      this.priority = defaults.priority;
    	      this.satisfiedResponseTime = defaults.satisfiedResponseTime;
    	      this.toleratingResponseTime = defaults.toleratingResponseTime;
        }

        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder filterText(@Nullable String filterText) {
            this.filterText = filterText;
            return this;
        }
        public Builder isApplyToErrorSpans(@Nullable Boolean isApplyToErrorSpans) {
            this.isApplyToErrorSpans = isApplyToErrorSpans;
            return this;
        }
        public Builder isEnabled(@Nullable Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }
        public Builder satisfiedResponseTime(@Nullable Integer satisfiedResponseTime) {
            this.satisfiedResponseTime = satisfiedResponseTime;
            return this;
        }
        public Builder toleratingResponseTime(@Nullable Integer toleratingResponseTime) {
            this.toleratingResponseTime = toleratingResponseTime;
            return this;
        }        public ConfigRule build() {
            return new ConfigRule(displayName, filterText, isApplyToErrorSpans, isEnabled, priority, satisfiedResponseTime, toleratingResponseTime);
        }
    }
}
