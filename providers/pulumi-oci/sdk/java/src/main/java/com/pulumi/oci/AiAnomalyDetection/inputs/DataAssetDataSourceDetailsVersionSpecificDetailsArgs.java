// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiAnomalyDetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataAssetDataSourceDetailsVersionSpecificDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataAssetDataSourceDetailsVersionSpecificDetailsArgs Empty = new DataAssetDataSourceDetailsVersionSpecificDetailsArgs();

    /**
     * Bucket Name for influx connection
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return Bucket Name for influx connection
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * DB Name for influx connection
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return DB Name for influx connection
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * Data source type where actually data asset is being stored
     * 
     */
    @Import(name="influxVersion", required=true)
    private Output<String> influxVersion;

    /**
     * @return Data source type where actually data asset is being stored
     * 
     */
    public Output<String> influxVersion() {
        return this.influxVersion;
    }

    /**
     * Org name for the influx db
     * 
     */
    @Import(name="organizationName")
    private @Nullable Output<String> organizationName;

    /**
     * @return Org name for the influx db
     * 
     */
    public Optional<Output<String>> organizationName() {
        return Optional.ofNullable(this.organizationName);
    }

    /**
     * retention policy is how long the bucket would last
     * 
     */
    @Import(name="retentionPolicyName")
    private @Nullable Output<String> retentionPolicyName;

    /**
     * @return retention policy is how long the bucket would last
     * 
     */
    public Optional<Output<String>> retentionPolicyName() {
        return Optional.ofNullable(this.retentionPolicyName);
    }

    private DataAssetDataSourceDetailsVersionSpecificDetailsArgs() {}

    private DataAssetDataSourceDetailsVersionSpecificDetailsArgs(DataAssetDataSourceDetailsVersionSpecificDetailsArgs $) {
        this.bucket = $.bucket;
        this.databaseName = $.databaseName;
        this.influxVersion = $.influxVersion;
        this.organizationName = $.organizationName;
        this.retentionPolicyName = $.retentionPolicyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataAssetDataSourceDetailsVersionSpecificDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataAssetDataSourceDetailsVersionSpecificDetailsArgs $;

        public Builder() {
            $ = new DataAssetDataSourceDetailsVersionSpecificDetailsArgs();
        }

        public Builder(DataAssetDataSourceDetailsVersionSpecificDetailsArgs defaults) {
            $ = new DataAssetDataSourceDetailsVersionSpecificDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket Bucket Name for influx connection
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Bucket Name for influx connection
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param databaseName DB Name for influx connection
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName DB Name for influx connection
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param influxVersion Data source type where actually data asset is being stored
         * 
         * @return builder
         * 
         */
        public Builder influxVersion(Output<String> influxVersion) {
            $.influxVersion = influxVersion;
            return this;
        }

        /**
         * @param influxVersion Data source type where actually data asset is being stored
         * 
         * @return builder
         * 
         */
        public Builder influxVersion(String influxVersion) {
            return influxVersion(Output.of(influxVersion));
        }

        /**
         * @param organizationName Org name for the influx db
         * 
         * @return builder
         * 
         */
        public Builder organizationName(@Nullable Output<String> organizationName) {
            $.organizationName = organizationName;
            return this;
        }

        /**
         * @param organizationName Org name for the influx db
         * 
         * @return builder
         * 
         */
        public Builder organizationName(String organizationName) {
            return organizationName(Output.of(organizationName));
        }

        /**
         * @param retentionPolicyName retention policy is how long the bucket would last
         * 
         * @return builder
         * 
         */
        public Builder retentionPolicyName(@Nullable Output<String> retentionPolicyName) {
            $.retentionPolicyName = retentionPolicyName;
            return this;
        }

        /**
         * @param retentionPolicyName retention policy is how long the bucket would last
         * 
         * @return builder
         * 
         */
        public Builder retentionPolicyName(String retentionPolicyName) {
            return retentionPolicyName(Output.of(retentionPolicyName));
        }

        public DataAssetDataSourceDetailsVersionSpecificDetailsArgs build() {
            $.influxVersion = Objects.requireNonNull($.influxVersion, "expected parameter 'influxVersion' to be non-null");
            return $;
        }
    }

}
