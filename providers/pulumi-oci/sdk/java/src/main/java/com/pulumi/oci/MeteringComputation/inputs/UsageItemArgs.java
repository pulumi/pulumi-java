// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.MeteringComputation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.MeteringComputation.inputs.UsageItemTagArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UsageItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final UsageItemArgs Empty = new UsageItemArgs();

    /**
     * The availability domain of the usage.
     * 
     */
    @Import(name="ad")
    private @Nullable Output<String> ad;

    /**
     * @return The availability domain of the usage.
     * 
     */
    public Optional<Output<String>> ad() {
        return Optional.ofNullable(this.ad);
    }

    /**
     * The compartment OCID.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The compartment OCID.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The compartment name.
     * 
     */
    @Import(name="compartmentName")
    private @Nullable Output<String> compartmentName;

    /**
     * @return The compartment name.
     * 
     */
    public Optional<Output<String>> compartmentName() {
        return Optional.ofNullable(this.compartmentName);
    }

    /**
     * The compartment path, starting from root.
     * 
     */
    @Import(name="compartmentPath")
    private @Nullable Output<String> compartmentPath;

    /**
     * @return The compartment path, starting from root.
     * 
     */
    public Optional<Output<String>> compartmentPath() {
        return Optional.ofNullable(this.compartmentPath);
    }

    /**
     * The computed cost.
     * 
     */
    @Import(name="computedAmount")
    private @Nullable Output<Double> computedAmount;

    /**
     * @return The computed cost.
     * 
     */
    public Optional<Output<Double>> computedAmount() {
        return Optional.ofNullable(this.computedAmount);
    }

    /**
     * The usage number.
     * 
     */
    @Import(name="computedQuantity")
    private @Nullable Output<Double> computedQuantity;

    /**
     * @return The usage number.
     * 
     */
    public Optional<Output<Double>> computedQuantity() {
        return Optional.ofNullable(this.computedQuantity);
    }

    /**
     * The price currency.
     * 
     */
    @Import(name="currency")
    private @Nullable Output<String> currency;

    /**
     * @return The price currency.
     * 
     */
    public Optional<Output<String>> currency() {
        return Optional.ofNullable(this.currency);
    }

    /**
     * The discretionary discount applied to the SKU.
     * 
     */
    @Import(name="discount")
    private @Nullable Output<Double> discount;

    /**
     * @return The discretionary discount applied to the SKU.
     * 
     */
    public Optional<Output<Double>> discount() {
        return Optional.ofNullable(this.discount);
    }

    /**
     * The forecasted data.
     * 
     */
    @Import(name="isForecast")
    private @Nullable Output<Boolean> isForecast;

    /**
     * @return The forecasted data.
     * 
     */
    public Optional<Output<Boolean>> isForecast() {
        return Optional.ofNullable(this.isForecast);
    }

    /**
     * The SKU list rate (not discount).
     * 
     */
    @Import(name="listRate")
    private @Nullable Output<Double> listRate;

    /**
     * @return The SKU list rate (not discount).
     * 
     */
    public Optional<Output<Double>> listRate() {
        return Optional.ofNullable(this.listRate);
    }

    /**
     * The overage usage.
     * 
     */
    @Import(name="overage")
    private @Nullable Output<String> overage;

    /**
     * @return The overage usage.
     * 
     */
    public Optional<Output<String>> overage() {
        return Optional.ofNullable(this.overage);
    }

    /**
     * The SPM OverageFlag.
     * 
     */
    @Import(name="overagesFlag")
    private @Nullable Output<String> overagesFlag;

    /**
     * @return The SPM OverageFlag.
     * 
     */
    public Optional<Output<String>> overagesFlag() {
        return Optional.ofNullable(this.overagesFlag);
    }

    /**
     * Platform for the cost.
     * 
     */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return Platform for the cost.
     * 
     */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * The region of the usage.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region of the usage.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The resource OCID that is incurring the cost.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The resource OCID that is incurring the cost.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The resource name that is incurring the cost.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return The resource name that is incurring the cost.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * The service name that is incurring the cost.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return The service name that is incurring the cost.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * The resource shape.
     * 
     */
    @Import(name="shape")
    private @Nullable Output<String> shape;

    /**
     * @return The resource shape.
     * 
     */
    public Optional<Output<String>> shape() {
        return Optional.ofNullable(this.shape);
    }

    /**
     * The SKU friendly name.
     * 
     */
    @Import(name="skuName")
    private @Nullable Output<String> skuName;

    /**
     * @return The SKU friendly name.
     * 
     */
    public Optional<Output<String>> skuName() {
        return Optional.ofNullable(this.skuName);
    }

    /**
     * The SKU part number.
     * 
     */
    @Import(name="skuPartNumber")
    private @Nullable Output<String> skuPartNumber;

    /**
     * @return The SKU part number.
     * 
     */
    public Optional<Output<String>> skuPartNumber() {
        return Optional.ofNullable(this.skuPartNumber);
    }

    /**
     * The subscription ID.
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return The subscription ID.
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * For grouping, a tag definition. For filtering, a definition and key.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<UsageItemTagArgs>> tags;

    /**
     * @return For grouping, a tag definition. For filtering, a definition and key.
     * 
     */
    public Optional<Output<List<UsageItemTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Tenant ID.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Tenant ID.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * The tenancy name.
     * 
     */
    @Import(name="tenantName")
    private @Nullable Output<String> tenantName;

    /**
     * @return The tenancy name.
     * 
     */
    public Optional<Output<String>> tenantName() {
        return Optional.ofNullable(this.tenantName);
    }

    /**
     * The usage end time.
     * 
     */
    @Import(name="timeUsageEnded")
    private @Nullable Output<String> timeUsageEnded;

    /**
     * @return The usage end time.
     * 
     */
    public Optional<Output<String>> timeUsageEnded() {
        return Optional.ofNullable(this.timeUsageEnded);
    }

    /**
     * The usage start time.
     * 
     */
    @Import(name="timeUsageStarted")
    private @Nullable Output<String> timeUsageStarted;

    /**
     * @return The usage start time.
     * 
     */
    public Optional<Output<String>> timeUsageStarted() {
        return Optional.ofNullable(this.timeUsageStarted);
    }

    /**
     * The usage unit.
     * 
     */
    @Import(name="unit")
    private @Nullable Output<String> unit;

    /**
     * @return The usage unit.
     * 
     */
    public Optional<Output<String>> unit() {
        return Optional.ofNullable(this.unit);
    }

    /**
     * The price per unit.
     * 
     */
    @Import(name="unitPrice")
    private @Nullable Output<Double> unitPrice;

    /**
     * @return The price per unit.
     * 
     */
    public Optional<Output<Double>> unitPrice() {
        return Optional.ofNullable(this.unitPrice);
    }

    /**
     * The resource size being metered.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Double> weight;

    /**
     * @return The resource size being metered.
     * 
     */
    public Optional<Output<Double>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private UsageItemArgs() {}

    private UsageItemArgs(UsageItemArgs $) {
        this.ad = $.ad;
        this.compartmentId = $.compartmentId;
        this.compartmentName = $.compartmentName;
        this.compartmentPath = $.compartmentPath;
        this.computedAmount = $.computedAmount;
        this.computedQuantity = $.computedQuantity;
        this.currency = $.currency;
        this.discount = $.discount;
        this.isForecast = $.isForecast;
        this.listRate = $.listRate;
        this.overage = $.overage;
        this.overagesFlag = $.overagesFlag;
        this.platform = $.platform;
        this.region = $.region;
        this.resourceId = $.resourceId;
        this.resourceName = $.resourceName;
        this.service = $.service;
        this.shape = $.shape;
        this.skuName = $.skuName;
        this.skuPartNumber = $.skuPartNumber;
        this.subscriptionId = $.subscriptionId;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
        this.tenantName = $.tenantName;
        this.timeUsageEnded = $.timeUsageEnded;
        this.timeUsageStarted = $.timeUsageStarted;
        this.unit = $.unit;
        this.unitPrice = $.unitPrice;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsageItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsageItemArgs $;

        public Builder() {
            $ = new UsageItemArgs();
        }

        public Builder(UsageItemArgs defaults) {
            $ = new UsageItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ad The availability domain of the usage.
         * 
         * @return builder
         * 
         */
        public Builder ad(@Nullable Output<String> ad) {
            $.ad = ad;
            return this;
        }

        /**
         * @param ad The availability domain of the usage.
         * 
         * @return builder
         * 
         */
        public Builder ad(String ad) {
            return ad(Output.of(ad));
        }

        /**
         * @param compartmentId The compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentName The compartment name.
         * 
         * @return builder
         * 
         */
        public Builder compartmentName(@Nullable Output<String> compartmentName) {
            $.compartmentName = compartmentName;
            return this;
        }

        /**
         * @param compartmentName The compartment name.
         * 
         * @return builder
         * 
         */
        public Builder compartmentName(String compartmentName) {
            return compartmentName(Output.of(compartmentName));
        }

        /**
         * @param compartmentPath The compartment path, starting from root.
         * 
         * @return builder
         * 
         */
        public Builder compartmentPath(@Nullable Output<String> compartmentPath) {
            $.compartmentPath = compartmentPath;
            return this;
        }

        /**
         * @param compartmentPath The compartment path, starting from root.
         * 
         * @return builder
         * 
         */
        public Builder compartmentPath(String compartmentPath) {
            return compartmentPath(Output.of(compartmentPath));
        }

        /**
         * @param computedAmount The computed cost.
         * 
         * @return builder
         * 
         */
        public Builder computedAmount(@Nullable Output<Double> computedAmount) {
            $.computedAmount = computedAmount;
            return this;
        }

        /**
         * @param computedAmount The computed cost.
         * 
         * @return builder
         * 
         */
        public Builder computedAmount(Double computedAmount) {
            return computedAmount(Output.of(computedAmount));
        }

        /**
         * @param computedQuantity The usage number.
         * 
         * @return builder
         * 
         */
        public Builder computedQuantity(@Nullable Output<Double> computedQuantity) {
            $.computedQuantity = computedQuantity;
            return this;
        }

        /**
         * @param computedQuantity The usage number.
         * 
         * @return builder
         * 
         */
        public Builder computedQuantity(Double computedQuantity) {
            return computedQuantity(Output.of(computedQuantity));
        }

        /**
         * @param currency The price currency.
         * 
         * @return builder
         * 
         */
        public Builder currency(@Nullable Output<String> currency) {
            $.currency = currency;
            return this;
        }

        /**
         * @param currency The price currency.
         * 
         * @return builder
         * 
         */
        public Builder currency(String currency) {
            return currency(Output.of(currency));
        }

        /**
         * @param discount The discretionary discount applied to the SKU.
         * 
         * @return builder
         * 
         */
        public Builder discount(@Nullable Output<Double> discount) {
            $.discount = discount;
            return this;
        }

        /**
         * @param discount The discretionary discount applied to the SKU.
         * 
         * @return builder
         * 
         */
        public Builder discount(Double discount) {
            return discount(Output.of(discount));
        }

        /**
         * @param isForecast The forecasted data.
         * 
         * @return builder
         * 
         */
        public Builder isForecast(@Nullable Output<Boolean> isForecast) {
            $.isForecast = isForecast;
            return this;
        }

        /**
         * @param isForecast The forecasted data.
         * 
         * @return builder
         * 
         */
        public Builder isForecast(Boolean isForecast) {
            return isForecast(Output.of(isForecast));
        }

        /**
         * @param listRate The SKU list rate (not discount).
         * 
         * @return builder
         * 
         */
        public Builder listRate(@Nullable Output<Double> listRate) {
            $.listRate = listRate;
            return this;
        }

        /**
         * @param listRate The SKU list rate (not discount).
         * 
         * @return builder
         * 
         */
        public Builder listRate(Double listRate) {
            return listRate(Output.of(listRate));
        }

        /**
         * @param overage The overage usage.
         * 
         * @return builder
         * 
         */
        public Builder overage(@Nullable Output<String> overage) {
            $.overage = overage;
            return this;
        }

        /**
         * @param overage The overage usage.
         * 
         * @return builder
         * 
         */
        public Builder overage(String overage) {
            return overage(Output.of(overage));
        }

        /**
         * @param overagesFlag The SPM OverageFlag.
         * 
         * @return builder
         * 
         */
        public Builder overagesFlag(@Nullable Output<String> overagesFlag) {
            $.overagesFlag = overagesFlag;
            return this;
        }

        /**
         * @param overagesFlag The SPM OverageFlag.
         * 
         * @return builder
         * 
         */
        public Builder overagesFlag(String overagesFlag) {
            return overagesFlag(Output.of(overagesFlag));
        }

        /**
         * @param platform Platform for the cost.
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform Platform for the cost.
         * 
         * @return builder
         * 
         */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param region The region of the usage.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region of the usage.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param resourceId The resource OCID that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The resource OCID that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceName The resource name that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The resource name that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param service The service name that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The service name that is incurring the cost.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param shape The resource shape.
         * 
         * @return builder
         * 
         */
        public Builder shape(@Nullable Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape The resource shape.
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param skuName The SKU friendly name.
         * 
         * @return builder
         * 
         */
        public Builder skuName(@Nullable Output<String> skuName) {
            $.skuName = skuName;
            return this;
        }

        /**
         * @param skuName The SKU friendly name.
         * 
         * @return builder
         * 
         */
        public Builder skuName(String skuName) {
            return skuName(Output.of(skuName));
        }

        /**
         * @param skuPartNumber The SKU part number.
         * 
         * @return builder
         * 
         */
        public Builder skuPartNumber(@Nullable Output<String> skuPartNumber) {
            $.skuPartNumber = skuPartNumber;
            return this;
        }

        /**
         * @param skuPartNumber The SKU part number.
         * 
         * @return builder
         * 
         */
        public Builder skuPartNumber(String skuPartNumber) {
            return skuPartNumber(Output.of(skuPartNumber));
        }

        /**
         * @param subscriptionId The subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param tags For grouping, a tag definition. For filtering, a definition and key.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<UsageItemTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags For grouping, a tag definition. For filtering, a definition and key.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<UsageItemTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags For grouping, a tag definition. For filtering, a definition and key.
         * 
         * @return builder
         * 
         */
        public Builder tags(UsageItemTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenantId Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param tenantName The tenancy name.
         * 
         * @return builder
         * 
         */
        public Builder tenantName(@Nullable Output<String> tenantName) {
            $.tenantName = tenantName;
            return this;
        }

        /**
         * @param tenantName The tenancy name.
         * 
         * @return builder
         * 
         */
        public Builder tenantName(String tenantName) {
            return tenantName(Output.of(tenantName));
        }

        /**
         * @param timeUsageEnded The usage end time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageEnded(@Nullable Output<String> timeUsageEnded) {
            $.timeUsageEnded = timeUsageEnded;
            return this;
        }

        /**
         * @param timeUsageEnded The usage end time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageEnded(String timeUsageEnded) {
            return timeUsageEnded(Output.of(timeUsageEnded));
        }

        /**
         * @param timeUsageStarted The usage start time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageStarted(@Nullable Output<String> timeUsageStarted) {
            $.timeUsageStarted = timeUsageStarted;
            return this;
        }

        /**
         * @param timeUsageStarted The usage start time.
         * 
         * @return builder
         * 
         */
        public Builder timeUsageStarted(String timeUsageStarted) {
            return timeUsageStarted(Output.of(timeUsageStarted));
        }

        /**
         * @param unit The usage unit.
         * 
         * @return builder
         * 
         */
        public Builder unit(@Nullable Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit The usage unit.
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        /**
         * @param unitPrice The price per unit.
         * 
         * @return builder
         * 
         */
        public Builder unitPrice(@Nullable Output<Double> unitPrice) {
            $.unitPrice = unitPrice;
            return this;
        }

        /**
         * @param unitPrice The price per unit.
         * 
         * @return builder
         * 
         */
        public Builder unitPrice(Double unitPrice) {
            return unitPrice(Output.of(unitPrice));
        }

        /**
         * @param weight The resource size being metered.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Double> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The resource size being metered.
         * 
         * @return builder
         * 
         */
        public Builder weight(Double weight) {
            return weight(Output.of(weight));
        }

        public UsageItemArgs build() {
            return $;
        }
    }

}
