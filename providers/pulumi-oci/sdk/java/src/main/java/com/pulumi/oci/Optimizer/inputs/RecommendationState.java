// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Optimizer.inputs.RecommendationResourceCountArgs;
import com.pulumi.oci.Optimizer.inputs.RecommendationSupportedLevelArgs;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecommendationState extends com.pulumi.resources.ResourceArgs {

    public static final RecommendationState Empty = new RecommendationState();

    /**
     * The unique OCID associated with the category.
     * 
     */
    @Import(name="categoryId")
    private @Nullable Output<String> categoryId;

    /**
     * @return The unique OCID associated with the category.
     * 
     */
    public Optional<Output<String>> categoryId() {
        return Optional.ofNullable(this.categoryId);
    }

    /**
     * The OCID of the tenancy. The tenancy is the root compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the tenancy. The tenancy is the root compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Text describing the recommendation.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Text describing the recommendation.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The estimated cost savings, in dollars, for the recommendation.
     * 
     */
    @Import(name="estimatedCostSaving")
    private @Nullable Output<Double> estimatedCostSaving;

    /**
     * @return The estimated cost savings, in dollars, for the recommendation.
     * 
     */
    public Optional<Output<Double>> estimatedCostSaving() {
        return Optional.ofNullable(this.estimatedCostSaving);
    }

    /**
     * Additional metadata key/value pairs for the recommendation.
     * 
     */
    @Import(name="extendedMetadata")
    private @Nullable Output<Map<String,Object>> extendedMetadata;

    /**
     * @return Additional metadata key/value pairs for the recommendation.
     * 
     */
    public Optional<Output<Map<String,Object>>> extendedMetadata() {
        return Optional.ofNullable(this.extendedMetadata);
    }

    /**
     * The level of importance assigned to the recommendation.
     * 
     */
    @Import(name="importance")
    private @Nullable Output<String> importance;

    /**
     * @return The level of importance assigned to the recommendation.
     * 
     */
    public Optional<Output<String>> importance() {
        return Optional.ofNullable(this.importance);
    }

    /**
     * The name of the profile level.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the profile level.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The unique OCID associated with the recommendation.
     * 
     */
    @Import(name="recommendationId")
    private @Nullable Output<String> recommendationId;

    /**
     * @return The unique OCID associated with the recommendation.
     * 
     */
    public Optional<Output<String>> recommendationId() {
        return Optional.ofNullable(this.recommendationId);
    }

    /**
     * An array of `ResourceCount` objects grouped by the status of the resource actions.
     * 
     */
    @Import(name="resourceCounts")
    private @Nullable Output<List<RecommendationResourceCountArgs>> resourceCounts;

    /**
     * @return An array of `ResourceCount` objects grouped by the status of the resource actions.
     * 
     */
    public Optional<Output<List<RecommendationResourceCountArgs>>> resourceCounts() {
        return Optional.ofNullable(this.resourceCounts);
    }

    /**
     * The recommendation&#39;s current state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The recommendation&#39;s current state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Updatable) The status of the recommendation.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (Updatable) The status of the recommendation.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
     * 
     */
    @Import(name="supportedLevels")
    private @Nullable Output<List<RecommendationSupportedLevelArgs>> supportedLevels;

    /**
     * @return Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
     * 
     */
    public Optional<Output<List<RecommendationSupportedLevelArgs>>> supportedLevels() {
        return Optional.ofNullable(this.supportedLevels);
    }

    /**
     * The date and time the recommendation details were created, in the format defined by RFC3339.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the recommendation details were created, in the format defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time that the recommendation entered its current status. The format is defined by RFC3339.
     * 
     */
    @Import(name="timeStatusBegin")
    private @Nullable Output<String> timeStatusBegin;

    /**
     * @return The date and time that the recommendation entered its current status. The format is defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeStatusBegin() {
        return Optional.ofNullable(this.timeStatusBegin);
    }

    /**
     * (Updatable) The date and time the current status will change. The format is defined by RFC3339.
     * 
     */
    @Import(name="timeStatusEnd")
    private @Nullable Output<String> timeStatusEnd;

    /**
     * @return (Updatable) The date and time the current status will change. The format is defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeStatusEnd() {
        return Optional.ofNullable(this.timeStatusEnd);
    }

    /**
     * The date and time the recommendation details were last updated, in the format defined by RFC3339.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time the recommendation details were last updated, in the format defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private RecommendationState() {}

    private RecommendationState(RecommendationState $) {
        this.categoryId = $.categoryId;
        this.compartmentId = $.compartmentId;
        this.description = $.description;
        this.estimatedCostSaving = $.estimatedCostSaving;
        this.extendedMetadata = $.extendedMetadata;
        this.importance = $.importance;
        this.name = $.name;
        this.recommendationId = $.recommendationId;
        this.resourceCounts = $.resourceCounts;
        this.state = $.state;
        this.status = $.status;
        this.supportedLevels = $.supportedLevels;
        this.timeCreated = $.timeCreated;
        this.timeStatusBegin = $.timeStatusBegin;
        this.timeStatusEnd = $.timeStatusEnd;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecommendationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecommendationState $;

        public Builder() {
            $ = new RecommendationState();
        }

        public Builder(RecommendationState defaults) {
            $ = new RecommendationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoryId The unique OCID associated with the category.
         * 
         * @return builder
         * 
         */
        public Builder categoryId(@Nullable Output<String> categoryId) {
            $.categoryId = categoryId;
            return this;
        }

        /**
         * @param categoryId The unique OCID associated with the category.
         * 
         * @return builder
         * 
         */
        public Builder categoryId(String categoryId) {
            return categoryId(Output.of(categoryId));
        }

        /**
         * @param compartmentId The OCID of the tenancy. The tenancy is the root compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the tenancy. The tenancy is the root compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param description Text describing the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Text describing the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param estimatedCostSaving The estimated cost savings, in dollars, for the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder estimatedCostSaving(@Nullable Output<Double> estimatedCostSaving) {
            $.estimatedCostSaving = estimatedCostSaving;
            return this;
        }

        /**
         * @param estimatedCostSaving The estimated cost savings, in dollars, for the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder estimatedCostSaving(Double estimatedCostSaving) {
            return estimatedCostSaving(Output.of(estimatedCostSaving));
        }

        /**
         * @param extendedMetadata Additional metadata key/value pairs for the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder extendedMetadata(@Nullable Output<Map<String,Object>> extendedMetadata) {
            $.extendedMetadata = extendedMetadata;
            return this;
        }

        /**
         * @param extendedMetadata Additional metadata key/value pairs for the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder extendedMetadata(Map<String,Object> extendedMetadata) {
            return extendedMetadata(Output.of(extendedMetadata));
        }

        /**
         * @param importance The level of importance assigned to the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder importance(@Nullable Output<String> importance) {
            $.importance = importance;
            return this;
        }

        /**
         * @param importance The level of importance assigned to the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder importance(String importance) {
            return importance(Output.of(importance));
        }

        /**
         * @param name The name of the profile level.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the profile level.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recommendationId The unique OCID associated with the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder recommendationId(@Nullable Output<String> recommendationId) {
            $.recommendationId = recommendationId;
            return this;
        }

        /**
         * @param recommendationId The unique OCID associated with the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder recommendationId(String recommendationId) {
            return recommendationId(Output.of(recommendationId));
        }

        /**
         * @param resourceCounts An array of `ResourceCount` objects grouped by the status of the resource actions.
         * 
         * @return builder
         * 
         */
        public Builder resourceCounts(@Nullable Output<List<RecommendationResourceCountArgs>> resourceCounts) {
            $.resourceCounts = resourceCounts;
            return this;
        }

        /**
         * @param resourceCounts An array of `ResourceCount` objects grouped by the status of the resource actions.
         * 
         * @return builder
         * 
         */
        public Builder resourceCounts(List<RecommendationResourceCountArgs> resourceCounts) {
            return resourceCounts(Output.of(resourceCounts));
        }

        /**
         * @param resourceCounts An array of `ResourceCount` objects grouped by the status of the resource actions.
         * 
         * @return builder
         * 
         */
        public Builder resourceCounts(RecommendationResourceCountArgs... resourceCounts) {
            return resourceCounts(List.of(resourceCounts));
        }

        /**
         * @param state The recommendation&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The recommendation&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param status (Updatable) The status of the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (Updatable) The status of the recommendation.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param supportedLevels Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
         * 
         * @return builder
         * 
         */
        public Builder supportedLevels(@Nullable Output<List<RecommendationSupportedLevelArgs>> supportedLevels) {
            $.supportedLevels = supportedLevels;
            return this;
        }

        /**
         * @param supportedLevels Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
         * 
         * @return builder
         * 
         */
        public Builder supportedLevels(List<RecommendationSupportedLevelArgs> supportedLevels) {
            return supportedLevels(Output.of(supportedLevels));
        }

        /**
         * @param supportedLevels Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
         * 
         * @return builder
         * 
         */
        public Builder supportedLevels(RecommendationSupportedLevelArgs... supportedLevels) {
            return supportedLevels(List.of(supportedLevels));
        }

        /**
         * @param timeCreated The date and time the recommendation details were created, in the format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the recommendation details were created, in the format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeStatusBegin The date and time that the recommendation entered its current status. The format is defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeStatusBegin(@Nullable Output<String> timeStatusBegin) {
            $.timeStatusBegin = timeStatusBegin;
            return this;
        }

        /**
         * @param timeStatusBegin The date and time that the recommendation entered its current status. The format is defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeStatusBegin(String timeStatusBegin) {
            return timeStatusBegin(Output.of(timeStatusBegin));
        }

        /**
         * @param timeStatusEnd (Updatable) The date and time the current status will change. The format is defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeStatusEnd(@Nullable Output<String> timeStatusEnd) {
            $.timeStatusEnd = timeStatusEnd;
            return this;
        }

        /**
         * @param timeStatusEnd (Updatable) The date and time the current status will change. The format is defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeStatusEnd(String timeStatusEnd) {
            return timeStatusEnd(Output.of(timeStatusEnd));
        }

        /**
         * @param timeUpdated The date and time the recommendation details were last updated, in the format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time the recommendation details were last updated, in the format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public RecommendationState build() {
            return $;
        }
    }

}
