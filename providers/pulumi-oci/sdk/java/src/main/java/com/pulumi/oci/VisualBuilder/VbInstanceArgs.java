// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VisualBuilder;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.VisualBuilder.inputs.VbInstanceAlternateCustomEndpointArgs;
import com.pulumi.oci.VisualBuilder.inputs.VbInstanceCustomEndpointArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VbInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VbInstanceArgs Empty = new VbInstanceArgs();

    /**
     * (Updatable) A list of alternate custom endpoints to be used for the vb instance URL (contact Oracle for alternateCustomEndpoints availability for a specific instance).
     * 
     */
    @Import(name="alternateCustomEndpoints")
    private @Nullable Output<List<VbInstanceAlternateCustomEndpointArgs>> alternateCustomEndpoints;

    /**
     * @return (Updatable) A list of alternate custom endpoints to be used for the vb instance URL (contact Oracle for alternateCustomEndpoints availability for a specific instance).
     * 
     */
    public Optional<Output<List<VbInstanceAlternateCustomEndpointArgs>>> alternateCustomEndpoints() {
        return Optional.ofNullable(this.alternateCustomEndpoints);
    }

    /**
     * (Updatable) Compartment Identifier.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment Identifier.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Optional parameter specifying which entitlement to use for billing purposes. Only required if the account possesses more than one entitlement.
     * 
     */
    @Import(name="consumptionModel")
    private @Nullable Output<String> consumptionModel;

    /**
     * @return Optional parameter specifying which entitlement to use for billing purposes. Only required if the account possesses more than one entitlement.
     * 
     */
    public Optional<Output<String>> consumptionModel() {
        return Optional.ofNullable(this.consumptionModel);
    }

    /**
     * (Updatable) Details for a custom endpoint for the vb instance (update).
     * 
     */
    @Import(name="customEndpoint")
    private @Nullable Output<VbInstanceCustomEndpointArgs> customEndpoint;

    /**
     * @return (Updatable) Details for a custom endpoint for the vb instance (update).
     * 
     */
    public Optional<Output<VbInstanceCustomEndpointArgs>> customEndpoint() {
        return Optional.ofNullable(this.customEndpoint);
    }

    /**
     * (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Vb Instance Identifier.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) Vb Instance Identifier.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Encrypted IDCS Open ID token. This is required for pre-UCPIS cloud accounts, but not UCPIS, hence not a required parameter
     * 
     */
    @Import(name="idcsOpenId")
    private @Nullable Output<String> idcsOpenId;

    /**
     * @return (Updatable) Encrypted IDCS Open ID token. This is required for pre-UCPIS cloud accounts, but not UCPIS, hence not a required parameter
     * 
     */
    public Optional<Output<String>> idcsOpenId() {
        return Optional.ofNullable(this.idcsOpenId);
    }

    /**
     * (Updatable) Visual Builder is enabled or not.
     * 
     */
    @Import(name="isVisualBuilderEnabled")
    private @Nullable Output<Boolean> isVisualBuilderEnabled;

    /**
     * @return (Updatable) Visual Builder is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> isVisualBuilderEnabled() {
        return Optional.ofNullable(this.isVisualBuilderEnabled);
    }

    /**
     * (Updatable) The number of Nodes
     * 
     */
    @Import(name="nodeCount", required=true)
    private Output<Integer> nodeCount;

    /**
     * @return (Updatable) The number of Nodes
     * 
     */
    public Output<Integer> nodeCount() {
        return this.nodeCount;
    }

    private VbInstanceArgs() {}

    private VbInstanceArgs(VbInstanceArgs $) {
        this.alternateCustomEndpoints = $.alternateCustomEndpoints;
        this.compartmentId = $.compartmentId;
        this.consumptionModel = $.consumptionModel;
        this.customEndpoint = $.customEndpoint;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.idcsOpenId = $.idcsOpenId;
        this.isVisualBuilderEnabled = $.isVisualBuilderEnabled;
        this.nodeCount = $.nodeCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VbInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VbInstanceArgs $;

        public Builder() {
            $ = new VbInstanceArgs();
        }

        public Builder(VbInstanceArgs defaults) {
            $ = new VbInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternateCustomEndpoints (Updatable) A list of alternate custom endpoints to be used for the vb instance URL (contact Oracle for alternateCustomEndpoints availability for a specific instance).
         * 
         * @return builder
         * 
         */
        public Builder alternateCustomEndpoints(@Nullable Output<List<VbInstanceAlternateCustomEndpointArgs>> alternateCustomEndpoints) {
            $.alternateCustomEndpoints = alternateCustomEndpoints;
            return this;
        }

        /**
         * @param alternateCustomEndpoints (Updatable) A list of alternate custom endpoints to be used for the vb instance URL (contact Oracle for alternateCustomEndpoints availability for a specific instance).
         * 
         * @return builder
         * 
         */
        public Builder alternateCustomEndpoints(List<VbInstanceAlternateCustomEndpointArgs> alternateCustomEndpoints) {
            return alternateCustomEndpoints(Output.of(alternateCustomEndpoints));
        }

        /**
         * @param alternateCustomEndpoints (Updatable) A list of alternate custom endpoints to be used for the vb instance URL (contact Oracle for alternateCustomEndpoints availability for a specific instance).
         * 
         * @return builder
         * 
         */
        public Builder alternateCustomEndpoints(VbInstanceAlternateCustomEndpointArgs... alternateCustomEndpoints) {
            return alternateCustomEndpoints(List.of(alternateCustomEndpoints));
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment Identifier.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param consumptionModel Optional parameter specifying which entitlement to use for billing purposes. Only required if the account possesses more than one entitlement.
         * 
         * @return builder
         * 
         */
        public Builder consumptionModel(@Nullable Output<String> consumptionModel) {
            $.consumptionModel = consumptionModel;
            return this;
        }

        /**
         * @param consumptionModel Optional parameter specifying which entitlement to use for billing purposes. Only required if the account possesses more than one entitlement.
         * 
         * @return builder
         * 
         */
        public Builder consumptionModel(String consumptionModel) {
            return consumptionModel(Output.of(consumptionModel));
        }

        /**
         * @param customEndpoint (Updatable) Details for a custom endpoint for the vb instance (update).
         * 
         * @return builder
         * 
         */
        public Builder customEndpoint(@Nullable Output<VbInstanceCustomEndpointArgs> customEndpoint) {
            $.customEndpoint = customEndpoint;
            return this;
        }

        /**
         * @param customEndpoint (Updatable) Details for a custom endpoint for the vb instance (update).
         * 
         * @return builder
         * 
         */
        public Builder customEndpoint(VbInstanceCustomEndpointArgs customEndpoint) {
            return customEndpoint(Output.of(customEndpoint));
        }

        /**
         * @param definedTags (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) Vb Instance Identifier.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Vb Instance Identifier.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param idcsOpenId (Updatable) Encrypted IDCS Open ID token. This is required for pre-UCPIS cloud accounts, but not UCPIS, hence not a required parameter
         * 
         * @return builder
         * 
         */
        public Builder idcsOpenId(@Nullable Output<String> idcsOpenId) {
            $.idcsOpenId = idcsOpenId;
            return this;
        }

        /**
         * @param idcsOpenId (Updatable) Encrypted IDCS Open ID token. This is required for pre-UCPIS cloud accounts, but not UCPIS, hence not a required parameter
         * 
         * @return builder
         * 
         */
        public Builder idcsOpenId(String idcsOpenId) {
            return idcsOpenId(Output.of(idcsOpenId));
        }

        /**
         * @param isVisualBuilderEnabled (Updatable) Visual Builder is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder isVisualBuilderEnabled(@Nullable Output<Boolean> isVisualBuilderEnabled) {
            $.isVisualBuilderEnabled = isVisualBuilderEnabled;
            return this;
        }

        /**
         * @param isVisualBuilderEnabled (Updatable) Visual Builder is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder isVisualBuilderEnabled(Boolean isVisualBuilderEnabled) {
            return isVisualBuilderEnabled(Output.of(isVisualBuilderEnabled));
        }

        /**
         * @param nodeCount (Updatable) The number of Nodes
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount (Updatable) The number of Nodes
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        public VbInstanceArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.nodeCount = Objects.requireNonNull($.nodeCount, "expected parameter 'nodeCount' to be non-null");
            return $;
        }
    }

}
