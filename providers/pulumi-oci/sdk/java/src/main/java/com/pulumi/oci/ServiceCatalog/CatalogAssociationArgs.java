// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceCatalog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CatalogAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogAssociationArgs Empty = new CatalogAssociationArgs();

    /**
     * Identifier of the entity being associated with service catalog.
     * 
     */
    @Import(name="entityId", required=true)
    private Output<String> entityId;

    /**
     * @return Identifier of the entity being associated with service catalog.
     * 
     */
    public Output<String> entityId() {
        return this.entityId;
    }

    /**
     * The type of the entity that is associated with the service catalog.
     * 
     */
    @Import(name="entityType")
    private @Nullable Output<String> entityType;

    /**
     * @return The type of the entity that is associated with the service catalog.
     * 
     */
    public Optional<Output<String>> entityType() {
        return Optional.ofNullable(this.entityType);
    }

    /**
     * Identifier of the service catalog.
     * 
     */
    @Import(name="serviceCatalogId", required=true)
    private Output<String> serviceCatalogId;

    /**
     * @return Identifier of the service catalog.
     * 
     */
    public Output<String> serviceCatalogId() {
        return this.serviceCatalogId;
    }

    private CatalogAssociationArgs() {}

    private CatalogAssociationArgs(CatalogAssociationArgs $) {
        this.entityId = $.entityId;
        this.entityType = $.entityType;
        this.serviceCatalogId = $.serviceCatalogId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogAssociationArgs $;

        public Builder() {
            $ = new CatalogAssociationArgs();
        }

        public Builder(CatalogAssociationArgs defaults) {
            $ = new CatalogAssociationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param entityId Identifier of the entity being associated with service catalog.
         * 
         * @return builder
         * 
         */
        public Builder entityId(Output<String> entityId) {
            $.entityId = entityId;
            return this;
        }

        /**
         * @param entityId Identifier of the entity being associated with service catalog.
         * 
         * @return builder
         * 
         */
        public Builder entityId(String entityId) {
            return entityId(Output.of(entityId));
        }

        /**
         * @param entityType The type of the entity that is associated with the service catalog.
         * 
         * @return builder
         * 
         */
        public Builder entityType(@Nullable Output<String> entityType) {
            $.entityType = entityType;
            return this;
        }

        /**
         * @param entityType The type of the entity that is associated with the service catalog.
         * 
         * @return builder
         * 
         */
        public Builder entityType(String entityType) {
            return entityType(Output.of(entityType));
        }

        /**
         * @param serviceCatalogId Identifier of the service catalog.
         * 
         * @return builder
         * 
         */
        public Builder serviceCatalogId(Output<String> serviceCatalogId) {
            $.serviceCatalogId = serviceCatalogId;
            return this;
        }

        /**
         * @param serviceCatalogId Identifier of the service catalog.
         * 
         * @return builder
         * 
         */
        public Builder serviceCatalogId(String serviceCatalogId) {
            return serviceCatalogId(Output.of(serviceCatalogId));
        }

        public CatalogAssociationArgs build() {
            $.entityId = Objects.requireNonNull($.entityId, "expected parameter 'entityId' to be non-null");
            $.serviceCatalogId = Objects.requireNonNull($.serviceCatalogId, "expected parameter 'serviceCatalogId' to be non-null");
            return $;
        }
    }

}
