// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNodeErrorArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodeErrorArgs Empty = new NodePoolNodeErrorArgs();

    /**
     * A short error code that defines the upstream error, meant for programmatic parsing. See [API Errors](https://docs.cloud.oracle.com/iaas/Content/API/References/apierrors.htm).
     * 
     */
    @Import(name="code")
    private @Nullable Output<String> code;

    /**
     * @return A short error code that defines the upstream error, meant for programmatic parsing. See [API Errors](https://docs.cloud.oracle.com/iaas/Content/API/References/apierrors.htm).
     * 
     */
    public Optional<Output<String>> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * A human-readable error string of the upstream error.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return A human-readable error string of the upstream error.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * The status of the HTTP response encountered in the upstream error.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the HTTP response encountered in the upstream error.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private NodePoolNodeErrorArgs() {}

    private NodePoolNodeErrorArgs(NodePoolNodeErrorArgs $) {
        this.code = $.code;
        this.message = $.message;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodeErrorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodeErrorArgs $;

        public Builder() {
            $ = new NodePoolNodeErrorArgs();
        }

        public Builder(NodePoolNodeErrorArgs defaults) {
            $ = new NodePoolNodeErrorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param code A short error code that defines the upstream error, meant for programmatic parsing. See [API Errors](https://docs.cloud.oracle.com/iaas/Content/API/References/apierrors.htm).
         * 
         * @return builder
         * 
         */
        public Builder code(@Nullable Output<String> code) {
            $.code = code;
            return this;
        }

        /**
         * @param code A short error code that defines the upstream error, meant for programmatic parsing. See [API Errors](https://docs.cloud.oracle.com/iaas/Content/API/References/apierrors.htm).
         * 
         * @return builder
         * 
         */
        public Builder code(String code) {
            return code(Output.of(code));
        }

        /**
         * @param message A human-readable error string of the upstream error.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message A human-readable error string of the upstream error.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param status The status of the HTTP response encountered in the upstream error.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the HTTP response encountered in the upstream error.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public NodePoolNodeErrorArgs build() {
            return $;
        }
    }

}
