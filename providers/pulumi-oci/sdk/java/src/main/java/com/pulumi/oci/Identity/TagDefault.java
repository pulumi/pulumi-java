// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Identity.TagDefaultArgs;
import com.pulumi.oci.Identity.inputs.TagDefaultState;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * This resource provides the Tag Default resource in Oracle Cloud Infrastructure Identity service.
 * 
 * Creates a new tag default in the specified compartment for the specified tag definition.
 * 
 * If you specify that a value is required, a value is set during resource creation (either by
 * the user creating the resource or another tag defualt). If no value is set, resource creation
 * is blocked.
 * 
 * * If the `isRequired` flag is set to &#34;true&#34;, the value is set during resource creation.
 * * If the `isRequired` flag is set to &#34;false&#34;, the value you enter is set during resource creation.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * TagDefaults can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:Identity/tagDefault:TagDefault test_tag_default &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Identity/tagDefault:TagDefault")
public class TagDefault extends com.pulumi.resources.CustomResource {
    /**
     * The OCID of the compartment. The tag default will be applied to all new resources created in this compartment.
     * 
     */
    @Export(name="compartmentId", type=String.class, parameters={})
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment. The tag default will be applied to all new resources created in this compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * (Updatable) If you specify that a value is required, a value is set during resource creation (either by the user creating the resource or another tag defualt). If no value is set, resource creation is blocked.
     * * If the `isRequired` flag is set to &#34;true&#34;, the value is set during resource creation.
     * * If the `isRequired` flag is set to &#34;false&#34;, the value you enter is set during resource creation.
     * 
     */
    @Export(name="isRequired", type=Boolean.class, parameters={})
    private Output<Boolean> isRequired;

    /**
     * @return (Updatable) If you specify that a value is required, a value is set during resource creation (either by the user creating the resource or another tag defualt). If no value is set, resource creation is blocked.
     * * If the `isRequired` flag is set to &#34;true&#34;, the value is set during resource creation.
     * * If the `isRequired` flag is set to &#34;false&#34;, the value you enter is set during resource creation.
     * 
     */
    public Output<Boolean> isRequired() {
        return this.isRequired;
    }
    /**
     * The tag default&#39;s current state. After creating a `TagDefault`, make sure its `lifecycleState` is ACTIVE before using it.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The tag default&#39;s current state. After creating a `TagDefault`, make sure its `lifecycleState` is ACTIVE before using it.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The OCID of the tag definition. The tag default will always assign a default value for this tag definition.
     * 
     */
    @Export(name="tagDefinitionId", type=String.class, parameters={})
    private Output<String> tagDefinitionId;

    /**
     * @return The OCID of the tag definition. The tag default will always assign a default value for this tag definition.
     * 
     */
    public Output<String> tagDefinitionId() {
        return this.tagDefinitionId;
    }
    /**
     * The name used in the tag definition. This field is informational in the context of the tag default.
     * 
     */
    @Export(name="tagDefinitionName", type=String.class, parameters={})
    private Output<String> tagDefinitionName;

    /**
     * @return The name used in the tag definition. This field is informational in the context of the tag default.
     * 
     */
    public Output<String> tagDefinitionName() {
        return this.tagDefinitionName;
    }
    /**
     * The OCID of the tag namespace that contains the tag definition.
     * 
     */
    @Export(name="tagNamespaceId", type=String.class, parameters={})
    private Output<String> tagNamespaceId;

    /**
     * @return The OCID of the tag namespace that contains the tag definition.
     * 
     */
    public Output<String> tagNamespaceId() {
        return this.tagNamespaceId;
    }
    /**
     * Date and time the `TagDefault` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Export(name="timeCreated", type=String.class, parameters={})
    private Output<String> timeCreated;

    /**
     * @return Date and time the `TagDefault` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * (Updatable) The default value for the tag definition. This will be applied to all new resources created in the compartment.
     * 
     */
    @Export(name="value", type=String.class, parameters={})
    private Output<String> value;

    /**
     * @return (Updatable) The default value for the tag definition. This will be applied to all new resources created in the compartment.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TagDefault(String name) {
        this(name, TagDefaultArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TagDefault(String name, TagDefaultArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TagDefault(String name, TagDefaultArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Identity/tagDefault:TagDefault", name, args == null ? TagDefaultArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private TagDefault(String name, Output<String> id, @Nullable TagDefaultState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Identity/tagDefault:TagDefault", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TagDefault get(String name, Output<String> id, @Nullable TagDefaultState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TagDefault(name, id, state, options);
    }
}
