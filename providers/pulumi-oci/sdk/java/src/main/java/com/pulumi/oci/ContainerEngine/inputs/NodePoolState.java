// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ContainerEngine.inputs.NodePoolInitialNodeLabelArgs;
import com.pulumi.oci.ContainerEngine.inputs.NodePoolNodeArgs;
import com.pulumi.oci.ContainerEngine.inputs.NodePoolNodeConfigDetailsArgs;
import com.pulumi.oci.ContainerEngine.inputs.NodePoolNodeShapeConfigArgs;
import com.pulumi.oci.ContainerEngine.inputs.NodePoolNodeSourceArgs;
import com.pulumi.oci.ContainerEngine.inputs.NodePoolNodeSourceDetailsArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolState extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolState Empty = new NodePoolState();

    /**
     * The OCID of the cluster to which this node pool is attached.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The OCID of the cluster to which this node pool is attached.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The OCID of the compartment in which the node pool exists.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment in which the node pool exists.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
     * 
     */
    @Import(name="initialNodeLabels")
    private @Nullable Output<List<NodePoolInitialNodeLabelArgs>> initialNodeLabels;

    /**
     * @return (Updatable) A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
     * 
     */
    public Optional<Output<List<NodePoolInitialNodeLabelArgs>>> initialNodeLabels() {
        return Optional.ofNullable(this.initialNodeLabels);
    }

    /**
     * (Updatable) The version of Kubernetes to install on the nodes in the node pool.
     * 
     */
    @Import(name="kubernetesVersion")
    private @Nullable Output<String> kubernetesVersion;

    /**
     * @return (Updatable) The version of Kubernetes to install on the nodes in the node pool.
     * 
     */
    public Optional<Output<String>> kubernetesVersion() {
        return Optional.ofNullable(this.kubernetesVersion);
    }

    /**
     * (Updatable) The name of the node pool. Avoid entering confidential information.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) The name of the node pool. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The configuration of nodes in the node pool. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
     * 
     */
    @Import(name="nodeConfigDetails")
    private @Nullable Output<NodePoolNodeConfigDetailsArgs> nodeConfigDetails;

    /**
     * @return (Updatable) The configuration of nodes in the node pool. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
     * 
     */
    public Optional<Output<NodePoolNodeConfigDetailsArgs>> nodeConfigDetails() {
        return Optional.ofNullable(this.nodeConfigDetails);
    }

    /**
     * Deprecated. see `nodeSource`. The OCID of the image running on the nodes in the node pool.
     * 
     * @deprecated
     * The &#39;node_image_id&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
     * 
     */
    @Deprecated /* The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
    @Import(name="nodeImageId")
    private @Nullable Output<String> nodeImageId;

    /**
     * @return Deprecated. see `nodeSource`. The OCID of the image running on the nodes in the node pool.
     * 
     * @deprecated
     * The &#39;node_image_id&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
     * 
     */
    @Deprecated /* The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
    public Optional<Output<String>> nodeImageId() {
        return Optional.ofNullable(this.nodeImageId);
    }

    /**
     * Deprecated. Use `nodeSourceDetails` instead. If you specify values for both, this value is ignored. The name of the image running on the nodes in the node pool. Cannot be used when `node_image_id` is specified.
     * 
     * @deprecated
     * The &#39;node_image_name&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
     * 
     */
    @Deprecated /* The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
    @Import(name="nodeImageName")
    private @Nullable Output<String> nodeImageName;

    /**
     * @return Deprecated. Use `nodeSourceDetails` instead. If you specify values for both, this value is ignored. The name of the image running on the nodes in the node pool. Cannot be used when `node_image_id` is specified.
     * 
     * @deprecated
     * The &#39;node_image_name&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
     * 
     */
    @Deprecated /* The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
    public Optional<Output<String>> nodeImageName() {
        return Optional.ofNullable(this.nodeImageName);
    }

    /**
     * (Updatable) A list of key/value pairs to add to each underlying Oracle Cloud Infrastructure instance in the node pool on launch.
     * 
     */
    @Import(name="nodeMetadata")
    private @Nullable Output<Map<String,Object>> nodeMetadata;

    /**
     * @return (Updatable) A list of key/value pairs to add to each underlying Oracle Cloud Infrastructure instance in the node pool on launch.
     * 
     */
    public Optional<Output<Map<String,Object>>> nodeMetadata() {
        return Optional.ofNullable(this.nodeMetadata);
    }

    /**
     * (Updatable) The name of the node shape of the nodes in the node pool.
     * 
     */
    @Import(name="nodeShape")
    private @Nullable Output<String> nodeShape;

    /**
     * @return (Updatable) The name of the node shape of the nodes in the node pool.
     * 
     */
    public Optional<Output<String>> nodeShape() {
        return Optional.ofNullable(this.nodeShape);
    }

    /**
     * (Updatable) Specify the configuration of the shape to launch nodes in the node pool.
     * 
     */
    @Import(name="nodeShapeConfig")
    private @Nullable Output<NodePoolNodeShapeConfigArgs> nodeShapeConfig;

    /**
     * @return (Updatable) Specify the configuration of the shape to launch nodes in the node pool.
     * 
     */
    public Optional<Output<NodePoolNodeShapeConfigArgs>> nodeShapeConfig() {
        return Optional.ofNullable(this.nodeShapeConfig);
    }

    /**
     * (Updatable) Specify the source to use to launch nodes in the node pool. Currently, image is the only supported source.
     * 
     */
    @Import(name="nodeSourceDetails")
    private @Nullable Output<NodePoolNodeSourceDetailsArgs> nodeSourceDetails;

    /**
     * @return (Updatable) Specify the source to use to launch nodes in the node pool. Currently, image is the only supported source.
     * 
     */
    public Optional<Output<NodePoolNodeSourceDetailsArgs>> nodeSourceDetails() {
        return Optional.ofNullable(this.nodeSourceDetails);
    }

    /**
     * Deprecated. see `nodeSourceDetails`. Source running on the nodes in the node pool.
     * 
     */
    @Import(name="nodeSources")
    private @Nullable Output<List<NodePoolNodeSourceArgs>> nodeSources;

    /**
     * @return Deprecated. see `nodeSourceDetails`. Source running on the nodes in the node pool.
     * 
     */
    public Optional<Output<List<NodePoolNodeSourceArgs>>> nodeSources() {
        return Optional.ofNullable(this.nodeSources);
    }

    /**
     * The nodes in the node pool.
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<NodePoolNodeArgs>> nodes;

    /**
     * @return The nodes in the node pool.
     * 
     */
    public Optional<Output<List<NodePoolNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * (Updatable) Optional, default to 1. The number of nodes to create in each subnet specified in subnetIds property. When used, subnetIds is required. This property is deprecated, use nodeConfigDetails instead.
     * 
     */
    @Import(name="quantityPerSubnet")
    private @Nullable Output<Integer> quantityPerSubnet;

    /**
     * @return (Updatable) Optional, default to 1. The number of nodes to create in each subnet specified in subnetIds property. When used, subnetIds is required. This property is deprecated, use nodeConfigDetails instead.
     * 
     */
    public Optional<Output<Integer>> quantityPerSubnet() {
        return Optional.ofNullable(this.quantityPerSubnet);
    }

    /**
     * (Updatable) The SSH public key on each node in the node pool on launch.
     * 
     */
    @Import(name="sshPublicKey")
    private @Nullable Output<String> sshPublicKey;

    /**
     * @return (Updatable) The SSH public key on each node in the node pool on launch.
     * 
     */
    public Optional<Output<String>> sshPublicKey() {
        return Optional.ofNullable(this.sshPublicKey);
    }

    /**
     * (Updatable) The OCIDs of the subnets in which to place nodes for this node pool. When used, quantityPerSubnet can be provided. This property is deprecated, use nodeConfigDetails. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
     * 
     */
    @Import(name="subnetIds")
    private @Nullable Output<List<String>> subnetIds;

    /**
     * @return (Updatable) The OCIDs of the subnets in which to place nodes for this node pool. When used, quantityPerSubnet can be provided. This property is deprecated, use nodeConfigDetails. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
     * 
     */
    public Optional<Output<List<String>>> subnetIds() {
        return Optional.ofNullable(this.subnetIds);
    }

    private NodePoolState() {}

    private NodePoolState(NodePoolState $) {
        this.clusterId = $.clusterId;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.freeformTags = $.freeformTags;
        this.initialNodeLabels = $.initialNodeLabels;
        this.kubernetesVersion = $.kubernetesVersion;
        this.name = $.name;
        this.nodeConfigDetails = $.nodeConfigDetails;
        this.nodeImageId = $.nodeImageId;
        this.nodeImageName = $.nodeImageName;
        this.nodeMetadata = $.nodeMetadata;
        this.nodeShape = $.nodeShape;
        this.nodeShapeConfig = $.nodeShapeConfig;
        this.nodeSourceDetails = $.nodeSourceDetails;
        this.nodeSources = $.nodeSources;
        this.nodes = $.nodes;
        this.quantityPerSubnet = $.quantityPerSubnet;
        this.sshPublicKey = $.sshPublicKey;
        this.subnetIds = $.subnetIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolState $;

        public Builder() {
            $ = new NodePoolState();
        }

        public Builder(NodePoolState defaults) {
            $ = new NodePoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The OCID of the cluster to which this node pool is attached.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The OCID of the cluster to which this node pool is attached.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param compartmentId The OCID of the compartment in which the node pool exists.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment in which the node pool exists.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param initialNodeLabels (Updatable) A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder initialNodeLabels(@Nullable Output<List<NodePoolInitialNodeLabelArgs>> initialNodeLabels) {
            $.initialNodeLabels = initialNodeLabels;
            return this;
        }

        /**
         * @param initialNodeLabels (Updatable) A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder initialNodeLabels(List<NodePoolInitialNodeLabelArgs> initialNodeLabels) {
            return initialNodeLabels(Output.of(initialNodeLabels));
        }

        /**
         * @param initialNodeLabels (Updatable) A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder initialNodeLabels(NodePoolInitialNodeLabelArgs... initialNodeLabels) {
            return initialNodeLabels(List.of(initialNodeLabels));
        }

        /**
         * @param kubernetesVersion (Updatable) The version of Kubernetes to install on the nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder kubernetesVersion(@Nullable Output<String> kubernetesVersion) {
            $.kubernetesVersion = kubernetesVersion;
            return this;
        }

        /**
         * @param kubernetesVersion (Updatable) The version of Kubernetes to install on the nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder kubernetesVersion(String kubernetesVersion) {
            return kubernetesVersion(Output.of(kubernetesVersion));
        }

        /**
         * @param name (Updatable) The name of the node pool. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) The name of the node pool. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeConfigDetails (Updatable) The configuration of nodes in the node pool. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfigDetails(@Nullable Output<NodePoolNodeConfigDetailsArgs> nodeConfigDetails) {
            $.nodeConfigDetails = nodeConfigDetails;
            return this;
        }

        /**
         * @param nodeConfigDetails (Updatable) The configuration of nodes in the node pool. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfigDetails(NodePoolNodeConfigDetailsArgs nodeConfigDetails) {
            return nodeConfigDetails(Output.of(nodeConfigDetails));
        }

        /**
         * @param nodeImageId Deprecated. see `nodeSource`. The OCID of the image running on the nodes in the node pool.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;node_image_id&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
         * 
         */
        @Deprecated /* The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
        public Builder nodeImageId(@Nullable Output<String> nodeImageId) {
            $.nodeImageId = nodeImageId;
            return this;
        }

        /**
         * @param nodeImageId Deprecated. see `nodeSource`. The OCID of the image running on the nodes in the node pool.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;node_image_id&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
         * 
         */
        @Deprecated /* The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
        public Builder nodeImageId(String nodeImageId) {
            return nodeImageId(Output.of(nodeImageId));
        }

        /**
         * @param nodeImageName Deprecated. Use `nodeSourceDetails` instead. If you specify values for both, this value is ignored. The name of the image running on the nodes in the node pool. Cannot be used when `node_image_id` is specified.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;node_image_name&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
         * 
         */
        @Deprecated /* The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
        public Builder nodeImageName(@Nullable Output<String> nodeImageName) {
            $.nodeImageName = nodeImageName;
            return this;
        }

        /**
         * @param nodeImageName Deprecated. Use `nodeSourceDetails` instead. If you specify values for both, this value is ignored. The name of the image running on the nodes in the node pool. Cannot be used when `node_image_id` is specified.
         * 
         * @return builder
         * 
         * @deprecated
         * The &#39;node_image_name&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
         * 
         */
        @Deprecated /* The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
        public Builder nodeImageName(String nodeImageName) {
            return nodeImageName(Output.of(nodeImageName));
        }

        /**
         * @param nodeMetadata (Updatable) A list of key/value pairs to add to each underlying Oracle Cloud Infrastructure instance in the node pool on launch.
         * 
         * @return builder
         * 
         */
        public Builder nodeMetadata(@Nullable Output<Map<String,Object>> nodeMetadata) {
            $.nodeMetadata = nodeMetadata;
            return this;
        }

        /**
         * @param nodeMetadata (Updatable) A list of key/value pairs to add to each underlying Oracle Cloud Infrastructure instance in the node pool on launch.
         * 
         * @return builder
         * 
         */
        public Builder nodeMetadata(Map<String,Object> nodeMetadata) {
            return nodeMetadata(Output.of(nodeMetadata));
        }

        /**
         * @param nodeShape (Updatable) The name of the node shape of the nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeShape(@Nullable Output<String> nodeShape) {
            $.nodeShape = nodeShape;
            return this;
        }

        /**
         * @param nodeShape (Updatable) The name of the node shape of the nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeShape(String nodeShape) {
            return nodeShape(Output.of(nodeShape));
        }

        /**
         * @param nodeShapeConfig (Updatable) Specify the configuration of the shape to launch nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeShapeConfig(@Nullable Output<NodePoolNodeShapeConfigArgs> nodeShapeConfig) {
            $.nodeShapeConfig = nodeShapeConfig;
            return this;
        }

        /**
         * @param nodeShapeConfig (Updatable) Specify the configuration of the shape to launch nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeShapeConfig(NodePoolNodeShapeConfigArgs nodeShapeConfig) {
            return nodeShapeConfig(Output.of(nodeShapeConfig));
        }

        /**
         * @param nodeSourceDetails (Updatable) Specify the source to use to launch nodes in the node pool. Currently, image is the only supported source.
         * 
         * @return builder
         * 
         */
        public Builder nodeSourceDetails(@Nullable Output<NodePoolNodeSourceDetailsArgs> nodeSourceDetails) {
            $.nodeSourceDetails = nodeSourceDetails;
            return this;
        }

        /**
         * @param nodeSourceDetails (Updatable) Specify the source to use to launch nodes in the node pool. Currently, image is the only supported source.
         * 
         * @return builder
         * 
         */
        public Builder nodeSourceDetails(NodePoolNodeSourceDetailsArgs nodeSourceDetails) {
            return nodeSourceDetails(Output.of(nodeSourceDetails));
        }

        /**
         * @param nodeSources Deprecated. see `nodeSourceDetails`. Source running on the nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeSources(@Nullable Output<List<NodePoolNodeSourceArgs>> nodeSources) {
            $.nodeSources = nodeSources;
            return this;
        }

        /**
         * @param nodeSources Deprecated. see `nodeSourceDetails`. Source running on the nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeSources(List<NodePoolNodeSourceArgs> nodeSources) {
            return nodeSources(Output.of(nodeSources));
        }

        /**
         * @param nodeSources Deprecated. see `nodeSourceDetails`. Source running on the nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeSources(NodePoolNodeSourceArgs... nodeSources) {
            return nodeSources(List.of(nodeSources));
        }

        /**
         * @param nodes The nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<NodePoolNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes The nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<NodePoolNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes The nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(NodePoolNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param quantityPerSubnet (Updatable) Optional, default to 1. The number of nodes to create in each subnet specified in subnetIds property. When used, subnetIds is required. This property is deprecated, use nodeConfigDetails instead.
         * 
         * @return builder
         * 
         */
        public Builder quantityPerSubnet(@Nullable Output<Integer> quantityPerSubnet) {
            $.quantityPerSubnet = quantityPerSubnet;
            return this;
        }

        /**
         * @param quantityPerSubnet (Updatable) Optional, default to 1. The number of nodes to create in each subnet specified in subnetIds property. When used, subnetIds is required. This property is deprecated, use nodeConfigDetails instead.
         * 
         * @return builder
         * 
         */
        public Builder quantityPerSubnet(Integer quantityPerSubnet) {
            return quantityPerSubnet(Output.of(quantityPerSubnet));
        }

        /**
         * @param sshPublicKey (Updatable) The SSH public key on each node in the node pool on launch.
         * 
         * @return builder
         * 
         */
        public Builder sshPublicKey(@Nullable Output<String> sshPublicKey) {
            $.sshPublicKey = sshPublicKey;
            return this;
        }

        /**
         * @param sshPublicKey (Updatable) The SSH public key on each node in the node pool on launch.
         * 
         * @return builder
         * 
         */
        public Builder sshPublicKey(String sshPublicKey) {
            return sshPublicKey(Output.of(sshPublicKey));
        }

        /**
         * @param subnetIds (Updatable) The OCIDs of the subnets in which to place nodes for this node pool. When used, quantityPerSubnet can be provided. This property is deprecated, use nodeConfigDetails. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(@Nullable Output<List<String>> subnetIds) {
            $.subnetIds = subnetIds;
            return this;
        }

        /**
         * @param subnetIds (Updatable) The OCIDs of the subnets in which to place nodes for this node pool. When used, quantityPerSubnet can be provided. This property is deprecated, use nodeConfigDetails. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(List<String> subnetIds) {
            return subnetIds(Output.of(subnetIds));
        }

        /**
         * @param subnetIds (Updatable) The OCIDs of the subnets in which to place nodes for this node pool. When used, quantityPerSubnet can be provided. This property is deprecated, use nodeConfigDetails. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }

        public NodePoolState build() {
            return $;
        }
    }

}
