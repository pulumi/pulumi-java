// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Marketplace.inputs.PublicationPackageDetailsEulaArgs;
import com.pulumi.oci.Marketplace.inputs.PublicationPackageDetailsOperatingSystemArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PublicationPackageDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PublicationPackageDetailsArgs Empty = new PublicationPackageDetailsArgs();

    /**
     * The end user license agreeement (EULA) that consumers of this listing must accept.
     * 
     */
    @Import(name="eulas", required=true)
    private Output<List<PublicationPackageDetailsEulaArgs>> eulas;

    /**
     * @return The end user license agreeement (EULA) that consumers of this listing must accept.
     * 
     */
    public Output<List<PublicationPackageDetailsEulaArgs>> eulas() {
        return this.eulas;
    }

    /**
     * The unique identifier for the base image of the publication.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The unique identifier for the base image of the publication.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The operating system used by the listing.
     * 
     */
    @Import(name="operatingSystem", required=true)
    private Output<PublicationPackageDetailsOperatingSystemArgs> operatingSystem;

    /**
     * @return The operating system used by the listing.
     * 
     */
    public Output<PublicationPackageDetailsOperatingSystemArgs> operatingSystem() {
        return this.operatingSystem;
    }

    /**
     * The package&#39;s type.
     * 
     */
    @Import(name="packageType", required=true)
    private Output<String> packageType;

    /**
     * @return The package&#39;s type.
     * 
     */
    public Output<String> packageType() {
        return this.packageType;
    }

    /**
     * The package version.
     * 
     */
    @Import(name="packageVersion", required=true)
    private Output<String> packageVersion;

    /**
     * @return The package version.
     * 
     */
    public Output<String> packageVersion() {
        return this.packageVersion;
    }

    private PublicationPackageDetailsArgs() {}

    private PublicationPackageDetailsArgs(PublicationPackageDetailsArgs $) {
        this.eulas = $.eulas;
        this.imageId = $.imageId;
        this.operatingSystem = $.operatingSystem;
        this.packageType = $.packageType;
        this.packageVersion = $.packageVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PublicationPackageDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PublicationPackageDetailsArgs $;

        public Builder() {
            $ = new PublicationPackageDetailsArgs();
        }

        public Builder(PublicationPackageDetailsArgs defaults) {
            $ = new PublicationPackageDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eulas The end user license agreeement (EULA) that consumers of this listing must accept.
         * 
         * @return builder
         * 
         */
        public Builder eulas(Output<List<PublicationPackageDetailsEulaArgs>> eulas) {
            $.eulas = eulas;
            return this;
        }

        /**
         * @param eulas The end user license agreeement (EULA) that consumers of this listing must accept.
         * 
         * @return builder
         * 
         */
        public Builder eulas(List<PublicationPackageDetailsEulaArgs> eulas) {
            return eulas(Output.of(eulas));
        }

        /**
         * @param eulas The end user license agreeement (EULA) that consumers of this listing must accept.
         * 
         * @return builder
         * 
         */
        public Builder eulas(PublicationPackageDetailsEulaArgs... eulas) {
            return eulas(List.of(eulas));
        }

        /**
         * @param imageId The unique identifier for the base image of the publication.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The unique identifier for the base image of the publication.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param operatingSystem The operating system used by the listing.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(Output<PublicationPackageDetailsOperatingSystemArgs> operatingSystem) {
            $.operatingSystem = operatingSystem;
            return this;
        }

        /**
         * @param operatingSystem The operating system used by the listing.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(PublicationPackageDetailsOperatingSystemArgs operatingSystem) {
            return operatingSystem(Output.of(operatingSystem));
        }

        /**
         * @param packageType The package&#39;s type.
         * 
         * @return builder
         * 
         */
        public Builder packageType(Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param packageType The package&#39;s type.
         * 
         * @return builder
         * 
         */
        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        /**
         * @param packageVersion The package version.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(Output<String> packageVersion) {
            $.packageVersion = packageVersion;
            return this;
        }

        /**
         * @param packageVersion The package version.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(String packageVersion) {
            return packageVersion(Output.of(packageVersion));
        }

        public PublicationPackageDetailsArgs build() {
            $.eulas = Objects.requireNonNull($.eulas, "expected parameter 'eulas' to be non-null");
            $.operatingSystem = Objects.requireNonNull($.operatingSystem, "expected parameter 'operatingSystem' to be non-null");
            $.packageType = Objects.requireNonNull($.packageType, "expected parameter 'packageType' to be non-null");
            $.packageVersion = Objects.requireNonNull($.packageVersion, "expected parameter 'packageVersion' to be non-null");
            return $;
        }
    }

}
