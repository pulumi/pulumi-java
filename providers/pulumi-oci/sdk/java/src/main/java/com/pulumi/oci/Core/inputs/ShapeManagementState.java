// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShapeManagementState extends com.pulumi.resources.ResourceArgs {

    public static final ShapeManagementState Empty = new ShapeManagementState();

    /**
     * The OCID of the compartment containing the image.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment containing the image.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The OCID of the Image to which the shape should be added.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The OCID of the Image to which the shape should be added.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The compatible shape that is to be added to the compatible shapes list for the image.
     * 
     */
    @Import(name="shapeName")
    private @Nullable Output<String> shapeName;

    /**
     * @return The compatible shape that is to be added to the compatible shapes list for the image.
     * 
     */
    public Optional<Output<String>> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }

    private ShapeManagementState() {}

    private ShapeManagementState(ShapeManagementState $) {
        this.compartmentId = $.compartmentId;
        this.imageId = $.imageId;
        this.shapeName = $.shapeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShapeManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShapeManagementState $;

        public Builder() {
            $ = new ShapeManagementState();
        }

        public Builder(ShapeManagementState defaults) {
            $ = new ShapeManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment containing the image.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment containing the image.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param imageId The OCID of the Image to which the shape should be added.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The OCID of the Image to which the shape should be added.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param shapeName The compatible shape that is to be added to the compatible shapes list for the image.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(@Nullable Output<String> shapeName) {
            $.shapeName = shapeName;
            return this;
        }

        /**
         * @param shapeName The compatible shape that is to be added to the compatible shapes list for the image.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(String shapeName) {
            return shapeName(Output.of(shapeName));
        }

        public ShapeManagementState build() {
            return $;
        }
    }

}
