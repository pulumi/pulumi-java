// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.RegistryDataAssetNativeTypeSystemParentRef;
import com.pulumi.oci.DataConnectivity.outputs.RegistryDataAssetNativeTypeSystemType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryDataAssetNativeTypeSystem {
    /**
     * @return (Updatable) A user defined description for the object.
     * 
     */
    private final @Nullable String description;
    /**
     * @return (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    private final @Nullable String identifier;
    /**
     * @return (Updatable) The identifying key for the object.
     * 
     */
    private final @Nullable String key;
    /**
     * @return (Updatable) The property which disciminates the subtypes.
     * 
     */
    private final @Nullable String modelType;
    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    private final @Nullable String modelVersion;
    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private final @Nullable String name;
    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private final @Nullable Integer objectStatus;
    /**
     * @return (Updatable) The version of the object that is used to track changes in the object instance.
     * 
     */
    private final @Nullable Integer objectVersion;
    /**
     * @return (Updatable) A reference to the object&#39;s parent.
     * 
     */
    private final @Nullable RegistryDataAssetNativeTypeSystemParentRef parentRef;
    /**
     * @return (Updatable) The type system to map from.
     * 
     */
    private final @Nullable Map<String,Object> typeMappingFrom;
    /**
     * @return (Updatable) The type system to map to.
     * 
     */
    private final @Nullable Map<String,Object> typeMappingTo;
    /**
     * @return (Updatable) An array of types.
     * 
     */
    private final @Nullable List<RegistryDataAssetNativeTypeSystemType> types;

    @CustomType.Constructor
    private RegistryDataAssetNativeTypeSystem(
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("identifier") @Nullable String identifier,
        @CustomType.Parameter("key") @Nullable String key,
        @CustomType.Parameter("modelType") @Nullable String modelType,
        @CustomType.Parameter("modelVersion") @Nullable String modelVersion,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("objectStatus") @Nullable Integer objectStatus,
        @CustomType.Parameter("objectVersion") @Nullable Integer objectVersion,
        @CustomType.Parameter("parentRef") @Nullable RegistryDataAssetNativeTypeSystemParentRef parentRef,
        @CustomType.Parameter("typeMappingFrom") @Nullable Map<String,Object> typeMappingFrom,
        @CustomType.Parameter("typeMappingTo") @Nullable Map<String,Object> typeMappingTo,
        @CustomType.Parameter("types") @Nullable List<RegistryDataAssetNativeTypeSystemType> types) {
        this.description = description;
        this.identifier = identifier;
        this.key = key;
        this.modelType = modelType;
        this.modelVersion = modelVersion;
        this.name = name;
        this.objectStatus = objectStatus;
        this.objectVersion = objectVersion;
        this.parentRef = parentRef;
        this.typeMappingFrom = typeMappingFrom;
        this.typeMappingTo = typeMappingTo;
        this.types = types;
    }

    /**
     * @return (Updatable) A user defined description for the object.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    public Optional<String> identifier() {
        return Optional.ofNullable(this.identifier);
    }
    /**
     * @return (Updatable) The identifying key for the object.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return (Updatable) The property which disciminates the subtypes.
     * 
     */
    public Optional<String> modelType() {
        return Optional.ofNullable(this.modelType);
    }
    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    public Optional<String> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }
    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Optional<Integer> objectStatus() {
        return Optional.ofNullable(this.objectStatus);
    }
    /**
     * @return (Updatable) The version of the object that is used to track changes in the object instance.
     * 
     */
    public Optional<Integer> objectVersion() {
        return Optional.ofNullable(this.objectVersion);
    }
    /**
     * @return (Updatable) A reference to the object&#39;s parent.
     * 
     */
    public Optional<RegistryDataAssetNativeTypeSystemParentRef> parentRef() {
        return Optional.ofNullable(this.parentRef);
    }
    /**
     * @return (Updatable) The type system to map from.
     * 
     */
    public Map<String,Object> typeMappingFrom() {
        return this.typeMappingFrom == null ? Map.of() : this.typeMappingFrom;
    }
    /**
     * @return (Updatable) The type system to map to.
     * 
     */
    public Map<String,Object> typeMappingTo() {
        return this.typeMappingTo == null ? Map.of() : this.typeMappingTo;
    }
    /**
     * @return (Updatable) An array of types.
     * 
     */
    public List<RegistryDataAssetNativeTypeSystemType> types() {
        return this.types == null ? List.of() : this.types;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryDataAssetNativeTypeSystem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private @Nullable String identifier;
        private @Nullable String key;
        private @Nullable String modelType;
        private @Nullable String modelVersion;
        private @Nullable String name;
        private @Nullable Integer objectStatus;
        private @Nullable Integer objectVersion;
        private @Nullable RegistryDataAssetNativeTypeSystemParentRef parentRef;
        private @Nullable Map<String,Object> typeMappingFrom;
        private @Nullable Map<String,Object> typeMappingTo;
        private @Nullable List<RegistryDataAssetNativeTypeSystemType> types;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistryDataAssetNativeTypeSystem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.identifier = defaults.identifier;
    	      this.key = defaults.key;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.parentRef = defaults.parentRef;
    	      this.typeMappingFrom = defaults.typeMappingFrom;
    	      this.typeMappingTo = defaults.typeMappingTo;
    	      this.types = defaults.types;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder identifier(@Nullable String identifier) {
            this.identifier = identifier;
            return this;
        }
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        public Builder modelType(@Nullable String modelType) {
            this.modelType = modelType;
            return this;
        }
        public Builder modelVersion(@Nullable String modelVersion) {
            this.modelVersion = modelVersion;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder objectStatus(@Nullable Integer objectStatus) {
            this.objectStatus = objectStatus;
            return this;
        }
        public Builder objectVersion(@Nullable Integer objectVersion) {
            this.objectVersion = objectVersion;
            return this;
        }
        public Builder parentRef(@Nullable RegistryDataAssetNativeTypeSystemParentRef parentRef) {
            this.parentRef = parentRef;
            return this;
        }
        public Builder typeMappingFrom(@Nullable Map<String,Object> typeMappingFrom) {
            this.typeMappingFrom = typeMappingFrom;
            return this;
        }
        public Builder typeMappingTo(@Nullable Map<String,Object> typeMappingTo) {
            this.typeMappingTo = typeMappingTo;
            return this;
        }
        public Builder types(@Nullable List<RegistryDataAssetNativeTypeSystemType> types) {
            this.types = types;
            return this;
        }
        public Builder types(RegistryDataAssetNativeTypeSystemType... types) {
            return types(List.of(types));
        }        public RegistryDataAssetNativeTypeSystem build() {
            return new RegistryDataAssetNativeTypeSystem(description, identifier, key, modelType, modelVersion, name, objectStatus, objectVersion, parentRef, typeMappingFrom, typeMappingTo, types);
        }
    }
}
