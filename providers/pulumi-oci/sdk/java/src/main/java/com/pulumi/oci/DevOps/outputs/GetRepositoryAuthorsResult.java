// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.GetRepositoryAuthorsFilter;
import com.pulumi.oci.DevOps.outputs.GetRepositoryAuthorsRepositoryAuthorCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoryAuthorsResult {
    private final @Nullable List<GetRepositoryAuthorsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final @Nullable String refName;
    /**
     * @return The list of repository_author_collection.
     * 
     */
    private final List<GetRepositoryAuthorsRepositoryAuthorCollection> repositoryAuthorCollections;
    private final String repositoryId;

    @CustomType.Constructor
    private GetRepositoryAuthorsResult(
        @CustomType.Parameter("filters") @Nullable List<GetRepositoryAuthorsFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("refName") @Nullable String refName,
        @CustomType.Parameter("repositoryAuthorCollections") List<GetRepositoryAuthorsRepositoryAuthorCollection> repositoryAuthorCollections,
        @CustomType.Parameter("repositoryId") String repositoryId) {
        this.filters = filters;
        this.id = id;
        this.refName = refName;
        this.repositoryAuthorCollections = repositoryAuthorCollections;
        this.repositoryId = repositoryId;
    }

    public List<GetRepositoryAuthorsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> refName() {
        return Optional.ofNullable(this.refName);
    }
    /**
     * @return The list of repository_author_collection.
     * 
     */
    public List<GetRepositoryAuthorsRepositoryAuthorCollection> repositoryAuthorCollections() {
        return this.repositoryAuthorCollections;
    }
    public String repositoryId() {
        return this.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryAuthorsResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<GetRepositoryAuthorsFilter> filters;
        private String id;
        private @Nullable String refName;
        private List<GetRepositoryAuthorsRepositoryAuthorCollection> repositoryAuthorCollections;
        private String repositoryId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRepositoryAuthorsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.refName = defaults.refName;
    	      this.repositoryAuthorCollections = defaults.repositoryAuthorCollections;
    	      this.repositoryId = defaults.repositoryId;
        }

        public Builder filters(@Nullable List<GetRepositoryAuthorsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetRepositoryAuthorsFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder refName(@Nullable String refName) {
            this.refName = refName;
            return this;
        }
        public Builder repositoryAuthorCollections(List<GetRepositoryAuthorsRepositoryAuthorCollection> repositoryAuthorCollections) {
            this.repositoryAuthorCollections = Objects.requireNonNull(repositoryAuthorCollections);
            return this;
        }
        public Builder repositoryAuthorCollections(GetRepositoryAuthorsRepositoryAuthorCollection... repositoryAuthorCollections) {
            return repositoryAuthorCollections(List.of(repositoryAuthorCollections));
        }
        public Builder repositoryId(String repositoryId) {
            this.repositoryId = Objects.requireNonNull(repositoryId);
            return this;
        }        public GetRepositoryAuthorsResult build() {
            return new GetRepositoryAuthorsResult(filters, id, refName, repositoryAuthorCollections, repositoryId);
        }
    }
}
