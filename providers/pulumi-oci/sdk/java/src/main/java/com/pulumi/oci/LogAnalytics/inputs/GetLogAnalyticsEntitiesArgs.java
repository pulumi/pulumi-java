// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.LogAnalytics.inputs.GetLogAnalyticsEntitiesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetLogAnalyticsEntitiesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogAnalyticsEntitiesArgs Empty = new GetLogAnalyticsEntitiesArgs();

    /**
     * A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
     * 
     */
    @Import(name="cloudResourceId")
    private Output</* @Nullable */ String> cloudResourceId;

    /**
     * @return A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
     * 
     */
    public Output</* @Nullable */ String> cloudResourceId() {
        return this.cloudResourceId;
    }

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
     * 
     */
    @Import(name="entityTypeNames")
    private Output</* @Nullable */ List<String>> entityTypeNames;

    /**
     * @return A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
     * 
     */
    public Output</* @Nullable */ List<String>> entityTypeNames() {
        return this.entityTypeNames;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetLogAnalyticsEntitiesFilter>> filters;

    public Output</* @Nullable */ List<GetLogAnalyticsEntitiesFilter>> filters() {
        return this.filters;
    }

    /**
     * A filter to return only log analytics entities whose hostname matches the entire hostname given.
     * 
     */
    @Import(name="hostname")
    private Output</* @Nullable */ String> hostname;

    /**
     * @return A filter to return only log analytics entities whose hostname matches the entire hostname given.
     * 
     */
    public Output</* @Nullable */ String> hostname() {
        return this.hostname;
    }

    /**
     * A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
     * 
     */
    @Import(name="hostnameContains")
    private Output</* @Nullable */ String> hostnameContains;

    /**
     * @return A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
     * 
     */
    public Output</* @Nullable */ String> hostnameContains() {
        return this.hostnameContains;
    }

    /**
     * A filter to return only those log analytics entities whose managementAgentId is null or is not null.
     * 
     */
    @Import(name="isManagementAgentIdNull")
    private Output</* @Nullable */ String> isManagementAgentIdNull;

    /**
     * @return A filter to return only those log analytics entities whose managementAgentId is null or is not null.
     * 
     */
    public Output</* @Nullable */ String> isManagementAgentIdNull() {
        return this.isManagementAgentIdNull;
    }

    /**
     * A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
     * 
     */
    @Import(name="lifecycleDetailsContains")
    private Output</* @Nullable */ String> lifecycleDetailsContains;

    /**
     * @return A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
     * 
     */
    public Output</* @Nullable */ String> lifecycleDetailsContains() {
        return this.lifecycleDetailsContains;
    }

    /**
     * A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
     * 
     */
    @Import(name="name")
    private Output</* @Nullable */ String> name;

    /**
     * @return A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
     * 
     */
    public Output</* @Nullable */ String> name() {
        return this.name;
    }

    /**
     * A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
     * 
     */
    @Import(name="nameContains")
    private Output</* @Nullable */ String> nameContains;

    /**
     * @return A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
     * 
     */
    public Output</* @Nullable */ String> nameContains() {
        return this.nameContains;
    }

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * A filter to return only log analytics entities whose sourceId matches the sourceId given.
     * 
     */
    @Import(name="sourceId")
    private Output</* @Nullable */ String> sourceId;

    /**
     * @return A filter to return only log analytics entities whose sourceId matches the sourceId given.
     * 
     */
    public Output</* @Nullable */ String> sourceId() {
        return this.sourceId;
    }

    /**
     * A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    private GetLogAnalyticsEntitiesArgs() {}

    private GetLogAnalyticsEntitiesArgs(GetLogAnalyticsEntitiesArgs $) {
        this.cloudResourceId = $.cloudResourceId;
        this.compartmentId = $.compartmentId;
        this.entityTypeNames = $.entityTypeNames;
        this.filters = $.filters;
        this.hostname = $.hostname;
        this.hostnameContains = $.hostnameContains;
        this.isManagementAgentIdNull = $.isManagementAgentIdNull;
        this.lifecycleDetailsContains = $.lifecycleDetailsContains;
        this.name = $.name;
        this.nameContains = $.nameContains;
        this.namespace = $.namespace;
        this.sourceId = $.sourceId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogAnalyticsEntitiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogAnalyticsEntitiesArgs $;

        public Builder() {
            $ = new GetLogAnalyticsEntitiesArgs();
        }

        public Builder(GetLogAnalyticsEntitiesArgs defaults) {
            $ = new GetLogAnalyticsEntitiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudResourceId A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
         * 
         * @return builder
         * 
         */
        public Builder cloudResourceId(Output</* @Nullable */ String> cloudResourceId) {
            $.cloudResourceId = cloudResourceId;
            return this;
        }

        /**
         * @param cloudResourceId A filter to return only log analytics entities whose cloudResourceId matches the cloudResourceId given.
         * 
         * @return builder
         * 
         */
        public Builder cloudResourceId(@Nullable String cloudResourceId) {
            return cloudResourceId(Output.of(cloudResourceId));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param entityTypeNames A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder entityTypeNames(Output</* @Nullable */ List<String>> entityTypeNames) {
            $.entityTypeNames = entityTypeNames;
            return this;
        }

        /**
         * @param entityTypeNames A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder entityTypeNames(@Nullable List<String> entityTypeNames) {
            return entityTypeNames(Output.of(entityTypeNames));
        }

        /**
         * @param entityTypeNames A filter to return only log analytics entities whose entityTypeName matches the entire log analytics entity type name of one of the entityTypeNames given in the list. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder entityTypeNames(String... entityTypeNames) {
            return entityTypeNames(List.of(entityTypeNames));
        }

        public Builder filters(Output</* @Nullable */ List<GetLogAnalyticsEntitiesFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetLogAnalyticsEntitiesFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetLogAnalyticsEntitiesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param hostname A filter to return only log analytics entities whose hostname matches the entire hostname given.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output</* @Nullable */ String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname A filter to return only log analytics entities whose hostname matches the entire hostname given.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param hostnameContains A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder hostnameContains(Output</* @Nullable */ String> hostnameContains) {
            $.hostnameContains = hostnameContains;
            return this;
        }

        /**
         * @param hostnameContains A filter to return only log analytics entities whose hostname contains the substring given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder hostnameContains(@Nullable String hostnameContains) {
            return hostnameContains(Output.of(hostnameContains));
        }

        /**
         * @param isManagementAgentIdNull A filter to return only those log analytics entities whose managementAgentId is null or is not null.
         * 
         * @return builder
         * 
         */
        public Builder isManagementAgentIdNull(Output</* @Nullable */ String> isManagementAgentIdNull) {
            $.isManagementAgentIdNull = isManagementAgentIdNull;
            return this;
        }

        /**
         * @param isManagementAgentIdNull A filter to return only those log analytics entities whose managementAgentId is null or is not null.
         * 
         * @return builder
         * 
         */
        public Builder isManagementAgentIdNull(@Nullable String isManagementAgentIdNull) {
            return isManagementAgentIdNull(Output.of(isManagementAgentIdNull));
        }

        /**
         * @param lifecycleDetailsContains A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetailsContains(Output</* @Nullable */ String> lifecycleDetailsContains) {
            $.lifecycleDetailsContains = lifecycleDetailsContains;
            return this;
        }

        /**
         * @param lifecycleDetailsContains A filter to return only log analytics entities whose lifecycleDetails contains the specified string.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetailsContains(@Nullable String lifecycleDetailsContains) {
            return lifecycleDetailsContains(Output.of(lifecycleDetailsContains));
        }

        /**
         * @param name A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder name(Output</* @Nullable */ String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A filter to return only log analytics entities whose name matches the entire name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameContains A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(Output</* @Nullable */ String> nameContains) {
            $.nameContains = nameContains;
            return this;
        }

        /**
         * @param nameContains A filter to return only log analytics entities whose name contains the name given. The match is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(@Nullable String nameContains) {
            return nameContains(Output.of(nameContains));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param sourceId A filter to return only log analytics entities whose sourceId matches the sourceId given.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(Output</* @Nullable */ String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param sourceId A filter to return only log analytics entities whose sourceId matches the sourceId given.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(@Nullable String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        /**
         * @param state A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        public GetLogAnalyticsEntitiesArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            return $;
        }
    }

}
