// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MigrationIncludeObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationIncludeObjectArgs Empty = new MigrationIncludeObjectArgs();

    /**
     * (Updatable) Name of the object (regular expression is allowed)
     * 
     */
    @Import(name="object", required=true)
    private Output<String> object;

    /**
     * @return (Updatable) Name of the object (regular expression is allowed)
     * 
     */
    public Output<String> object() {
        return this.object;
    }

    /**
     * (Updatable) Owner of the object (regular expression is allowed)
     * 
     */
    @Import(name="owner", required=true)
    private Output<String> owner;

    /**
     * @return (Updatable) Owner of the object (regular expression is allowed)
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }

    /**
     * (Updatable) Migration type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Updatable) Migration type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private MigrationIncludeObjectArgs() {}

    private MigrationIncludeObjectArgs(MigrationIncludeObjectArgs $) {
        this.object = $.object;
        this.owner = $.owner;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationIncludeObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationIncludeObjectArgs $;

        public Builder() {
            $ = new MigrationIncludeObjectArgs();
        }

        public Builder(MigrationIncludeObjectArgs defaults) {
            $ = new MigrationIncludeObjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param object (Updatable) Name of the object (regular expression is allowed)
         * 
         * @return builder
         * 
         */
        public Builder object(Output<String> object) {
            $.object = object;
            return this;
        }

        /**
         * @param object (Updatable) Name of the object (regular expression is allowed)
         * 
         * @return builder
         * 
         */
        public Builder object(String object) {
            return object(Output.of(object));
        }

        /**
         * @param owner (Updatable) Owner of the object (regular expression is allowed)
         * 
         * @return builder
         * 
         */
        public Builder owner(Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner (Updatable) Owner of the object (regular expression is allowed)
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param type (Updatable) Migration type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Migration type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MigrationIncludeObjectArgs build() {
            $.object = Objects.requireNonNull($.object, "expected parameter 'object' to be non-null");
            $.owner = Objects.requireNonNull($.owner, "expected parameter 'owner' to be non-null");
            return $;
        }
    }

}
