// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Mysql.outputs.GetMysqlVersionVersionVersion;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMysqlVersionVersion {
    /**
     * @return A descriptive summary of a group of versions.
     * 
     */
    private final String versionFamily;
    /**
     * @return The list of supported MySQL Versions.
     * 
     */
    private final List<GetMysqlVersionVersionVersion> versions;

    @CustomType.Constructor
    private GetMysqlVersionVersion(
        @CustomType.Parameter("versionFamily") String versionFamily,
        @CustomType.Parameter("versions") List<GetMysqlVersionVersionVersion> versions) {
        this.versionFamily = versionFamily;
        this.versions = versions;
    }

    /**
     * @return A descriptive summary of a group of versions.
     * 
     */
    public String versionFamily() {
        return this.versionFamily;
    }
    /**
     * @return The list of supported MySQL Versions.
     * 
     */
    public List<GetMysqlVersionVersionVersion> versions() {
        return this.versions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlVersionVersion defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String versionFamily;
        private List<GetMysqlVersionVersionVersion> versions;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMysqlVersionVersion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.versionFamily = defaults.versionFamily;
    	      this.versions = defaults.versions;
        }

        public Builder versionFamily(String versionFamily) {
            this.versionFamily = Objects.requireNonNull(versionFamily);
            return this;
        }
        public Builder versions(List<GetMysqlVersionVersionVersion> versions) {
            this.versions = Objects.requireNonNull(versions);
            return this;
        }
        public Builder versions(GetMysqlVersionVersionVersion... versions) {
            return versions(List.of(versions));
        }        public GetMysqlVersionVersion build() {
            return new GetMysqlVersionVersion(versionFamily, versions);
        }
    }
}
