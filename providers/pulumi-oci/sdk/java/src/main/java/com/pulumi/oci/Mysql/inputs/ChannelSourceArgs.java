// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.ChannelSourceSslCaCertificateArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChannelSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChannelSourceArgs Empty = new ChannelSourceArgs();

    /**
     * (Updatable) The network address of the MySQL instance.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return (Updatable) The network address of the MySQL instance.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * (Updatable) The password for the replication user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return (Updatable) The password for the replication user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * (Updatable) The port the source MySQL instance listens on.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return (Updatable) The port the source MySQL instance listens on.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * (Updatable) The specific source identifier.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return (Updatable) The specific source identifier.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    /**
     * (Updatable) The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
     * 
     */
    @Import(name="sslCaCertificate")
    private @Nullable Output<ChannelSourceSslCaCertificateArgs> sslCaCertificate;

    /**
     * @return (Updatable) The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
     * 
     */
    public Optional<Output<ChannelSourceSslCaCertificateArgs>> sslCaCertificate() {
        return Optional.ofNullable(this.sslCaCertificate);
    }

    /**
     * (Updatable) The SSL mode of the Channel.
     * 
     */
    @Import(name="sslMode", required=true)
    private Output<String> sslMode;

    /**
     * @return (Updatable) The SSL mode of the Channel.
     * 
     */
    public Output<String> sslMode() {
        return this.sslMode;
    }

    /**
     * (Updatable) The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return (Updatable) The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ChannelSourceArgs() {}

    private ChannelSourceArgs(ChannelSourceArgs $) {
        this.hostname = $.hostname;
        this.password = $.password;
        this.port = $.port;
        this.sourceType = $.sourceType;
        this.sslCaCertificate = $.sslCaCertificate;
        this.sslMode = $.sslMode;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelSourceArgs $;

        public Builder() {
            $ = new ChannelSourceArgs();
        }

        public Builder(ChannelSourceArgs defaults) {
            $ = new ChannelSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostname (Updatable) The network address of the MySQL instance.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname (Updatable) The network address of the MySQL instance.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param password (Updatable) The password for the replication user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password (Updatable) The password for the replication user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port (Updatable) The port the source MySQL instance listens on.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) The port the source MySQL instance listens on.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param sourceType (Updatable) The specific source identifier.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType (Updatable) The specific source identifier.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param sslCaCertificate (Updatable) The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
         * 
         * @return builder
         * 
         */
        public Builder sslCaCertificate(@Nullable Output<ChannelSourceSslCaCertificateArgs> sslCaCertificate) {
            $.sslCaCertificate = sslCaCertificate;
            return this;
        }

        /**
         * @param sslCaCertificate (Updatable) The CA certificate of the server used for VERIFY_IDENTITY and VERIFY_CA ssl modes.
         * 
         * @return builder
         * 
         */
        public Builder sslCaCertificate(ChannelSourceSslCaCertificateArgs sslCaCertificate) {
            return sslCaCertificate(Output.of(sslCaCertificate));
        }

        /**
         * @param sslMode (Updatable) The SSL mode of the Channel.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(Output<String> sslMode) {
            $.sslMode = sslMode;
            return this;
        }

        /**
         * @param sslMode (Updatable) The SSL mode of the Channel.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(String sslMode) {
            return sslMode(Output.of(sslMode));
        }

        /**
         * @param username (Updatable) The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username (Updatable) The name of the replication user on the source MySQL instance. The username has a maximum length of 96 characters. For more information, please see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html)
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ChannelSourceArgs build() {
            $.hostname = Objects.requireNonNull($.hostname, "expected parameter 'hostname' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.sourceType = Objects.requireNonNull($.sourceType, "expected parameter 'sourceType' to be non-null");
            $.sslMode = Objects.requireNonNull($.sslMode, "expected parameter 'sslMode' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
