// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagementAgentInstallKeyResult {
    /**
     * @return Total number of install for this keys
     * 
     */
    private final Integer allowedKeyInstallCount;
    /**
     * @return Compartment Identifier
     * 
     */
    private final String compartmentId;
    /**
     * @return Principal id of user who created the Agent Install key
     * 
     */
    private final String createdByPrincipalId;
    /**
     * @return Total number of install for this keys
     * 
     */
    private final Integer currentKeyInstallCount;
    /**
     * @return Management Agent Install Key Name
     * 
     */
    private final String displayName;
    /**
     * @return Agent install Key identifier
     * 
     */
    private final String id;
    /**
     * @return If set to true, the install key has no expiration date or usage limit. Properties allowedKeyInstallCount and timeExpires are ignored if set to true. Defaults to false.
     * 
     */
    private final Boolean isUnlimited;
    /**
     * @return Management Agent Install Key
     * 
     */
    private final String key;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private final String lifecycleDetails;
    private final String managementAgentInstallKeyId;
    /**
     * @return Status of Key
     * 
     */
    private final String state;
    /**
     * @return The time when Management Agent install Key was created. An RFC3339 formatted date time string
     * 
     */
    private final String timeCreated;
    /**
     * @return date after which key would expire after creation
     * 
     */
    private final String timeExpires;
    /**
     * @return The time when Management Agent install Key was updated. An RFC3339 formatted date time string
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetManagementAgentInstallKeyResult(
        @CustomType.Parameter("allowedKeyInstallCount") Integer allowedKeyInstallCount,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("createdByPrincipalId") String createdByPrincipalId,
        @CustomType.Parameter("currentKeyInstallCount") Integer currentKeyInstallCount,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isUnlimited") Boolean isUnlimited,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("managementAgentInstallKeyId") String managementAgentInstallKeyId,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeExpires") String timeExpires,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.allowedKeyInstallCount = allowedKeyInstallCount;
        this.compartmentId = compartmentId;
        this.createdByPrincipalId = createdByPrincipalId;
        this.currentKeyInstallCount = currentKeyInstallCount;
        this.displayName = displayName;
        this.id = id;
        this.isUnlimited = isUnlimited;
        this.key = key;
        this.lifecycleDetails = lifecycleDetails;
        this.managementAgentInstallKeyId = managementAgentInstallKeyId;
        this.state = state;
        this.timeCreated = timeCreated;
        this.timeExpires = timeExpires;
        this.timeUpdated = timeUpdated;
    }

    /**
     * @return Total number of install for this keys
     * 
     */
    public Integer allowedKeyInstallCount() {
        return this.allowedKeyInstallCount;
    }
    /**
     * @return Compartment Identifier
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Principal id of user who created the Agent Install key
     * 
     */
    public String createdByPrincipalId() {
        return this.createdByPrincipalId;
    }
    /**
     * @return Total number of install for this keys
     * 
     */
    public Integer currentKeyInstallCount() {
        return this.currentKeyInstallCount;
    }
    /**
     * @return Management Agent Install Key Name
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Agent install Key identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If set to true, the install key has no expiration date or usage limit. Properties allowedKeyInstallCount and timeExpires are ignored if set to true. Defaults to false.
     * 
     */
    public Boolean isUnlimited() {
        return this.isUnlimited;
    }
    /**
     * @return Management Agent Install Key
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String managementAgentInstallKeyId() {
        return this.managementAgentInstallKeyId;
    }
    /**
     * @return Status of Key
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time when Management Agent install Key was created. An RFC3339 formatted date time string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return date after which key would expire after creation
     * 
     */
    public String timeExpires() {
        return this.timeExpires;
    }
    /**
     * @return The time when Management Agent install Key was updated. An RFC3339 formatted date time string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementAgentInstallKeyResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer allowedKeyInstallCount;
        private String compartmentId;
        private String createdByPrincipalId;
        private Integer currentKeyInstallCount;
        private String displayName;
        private String id;
        private Boolean isUnlimited;
        private String key;
        private String lifecycleDetails;
        private String managementAgentInstallKeyId;
        private String state;
        private String timeCreated;
        private String timeExpires;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagementAgentInstallKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedKeyInstallCount = defaults.allowedKeyInstallCount;
    	      this.compartmentId = defaults.compartmentId;
    	      this.createdByPrincipalId = defaults.createdByPrincipalId;
    	      this.currentKeyInstallCount = defaults.currentKeyInstallCount;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.isUnlimited = defaults.isUnlimited;
    	      this.key = defaults.key;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.managementAgentInstallKeyId = defaults.managementAgentInstallKeyId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExpires = defaults.timeExpires;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder allowedKeyInstallCount(Integer allowedKeyInstallCount) {
            this.allowedKeyInstallCount = Objects.requireNonNull(allowedKeyInstallCount);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder createdByPrincipalId(String createdByPrincipalId) {
            this.createdByPrincipalId = Objects.requireNonNull(createdByPrincipalId);
            return this;
        }
        public Builder currentKeyInstallCount(Integer currentKeyInstallCount) {
            this.currentKeyInstallCount = Objects.requireNonNull(currentKeyInstallCount);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isUnlimited(Boolean isUnlimited) {
            this.isUnlimited = Objects.requireNonNull(isUnlimited);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder managementAgentInstallKeyId(String managementAgentInstallKeyId) {
            this.managementAgentInstallKeyId = Objects.requireNonNull(managementAgentInstallKeyId);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeExpires(String timeExpires) {
            this.timeExpires = Objects.requireNonNull(timeExpires);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetManagementAgentInstallKeyResult build() {
            return new GetManagementAgentInstallKeyResult(allowedKeyInstallCount, compartmentId, createdByPrincipalId, currentKeyInstallCount, displayName, id, isUnlimited, key, lifecycleDetails, managementAgentInstallKeyId, state, timeCreated, timeExpires, timeUpdated);
        }
    }
}
