// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PublicationIconArgs extends com.pulumi.resources.ResourceArgs {

    public static final PublicationIconArgs Empty = new PublicationIconArgs();

    /**
     * The content URL of the upload data.
     * 
     */
    @Import(name="contentUrl")
    private @Nullable Output<String> contentUrl;

    /**
     * @return The content URL of the upload data.
     * 
     */
    public Optional<Output<String>> contentUrl() {
        return Optional.ofNullable(this.contentUrl);
    }

    /**
     * The file extension of the upload data.
     * 
     */
    @Import(name="fileExtension")
    private @Nullable Output<String> fileExtension;

    /**
     * @return The file extension of the upload data.
     * 
     */
    public Optional<Output<String>> fileExtension() {
        return Optional.ofNullable(this.fileExtension);
    }

    /**
     * The MIME type of the upload data.
     * 
     */
    @Import(name="mimeType")
    private @Nullable Output<String> mimeType;

    /**
     * @return The MIME type of the upload data.
     * 
     */
    public Optional<Output<String>> mimeType() {
        return Optional.ofNullable(this.mimeType);
    }

    /**
     * (Updatable) The name of the contact.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) The name of the contact.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private PublicationIconArgs() {}

    private PublicationIconArgs(PublicationIconArgs $) {
        this.contentUrl = $.contentUrl;
        this.fileExtension = $.fileExtension;
        this.mimeType = $.mimeType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PublicationIconArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PublicationIconArgs $;

        public Builder() {
            $ = new PublicationIconArgs();
        }

        public Builder(PublicationIconArgs defaults) {
            $ = new PublicationIconArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentUrl The content URL of the upload data.
         * 
         * @return builder
         * 
         */
        public Builder contentUrl(@Nullable Output<String> contentUrl) {
            $.contentUrl = contentUrl;
            return this;
        }

        /**
         * @param contentUrl The content URL of the upload data.
         * 
         * @return builder
         * 
         */
        public Builder contentUrl(String contentUrl) {
            return contentUrl(Output.of(contentUrl));
        }

        /**
         * @param fileExtension The file extension of the upload data.
         * 
         * @return builder
         * 
         */
        public Builder fileExtension(@Nullable Output<String> fileExtension) {
            $.fileExtension = fileExtension;
            return this;
        }

        /**
         * @param fileExtension The file extension of the upload data.
         * 
         * @return builder
         * 
         */
        public Builder fileExtension(String fileExtension) {
            return fileExtension(Output.of(fileExtension));
        }

        /**
         * @param mimeType The MIME type of the upload data.
         * 
         * @return builder
         * 
         */
        public Builder mimeType(@Nullable Output<String> mimeType) {
            $.mimeType = mimeType;
            return this;
        }

        /**
         * @param mimeType The MIME type of the upload data.
         * 
         * @return builder
         * 
         */
        public Builder mimeType(String mimeType) {
            return mimeType(Output.of(mimeType));
        }

        /**
         * @param name (Updatable) The name of the contact.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) The name of the contact.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public PublicationIconArgs build() {
            return $;
        }
    }

}
