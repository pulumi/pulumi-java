// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetTargetDatabasesSchemasFilter;
import com.pulumi.oci.DataSafe.outputs.GetTargetDatabasesSchemasSchema;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTargetDatabasesSchemasResult {
    private final @Nullable List<GetTargetDatabasesSchemasFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Indicates if the schema is oracle supplied.
     * 
     */
    private final @Nullable Boolean isOracleMaintained;
    private final @Nullable String schemaNameContains;
    /**
     * @return Name of the schema.
     * 
     */
    private final @Nullable List<String> schemaNames;
    /**
     * @return The list of schemas.
     * 
     */
    private final List<GetTargetDatabasesSchemasSchema> schemas;
    private final String targetDatabaseId;

    @CustomType.Constructor
    private GetTargetDatabasesSchemasResult(
        @CustomType.Parameter("filters") @Nullable List<GetTargetDatabasesSchemasFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isOracleMaintained") @Nullable Boolean isOracleMaintained,
        @CustomType.Parameter("schemaNameContains") @Nullable String schemaNameContains,
        @CustomType.Parameter("schemaNames") @Nullable List<String> schemaNames,
        @CustomType.Parameter("schemas") List<GetTargetDatabasesSchemasSchema> schemas,
        @CustomType.Parameter("targetDatabaseId") String targetDatabaseId) {
        this.filters = filters;
        this.id = id;
        this.isOracleMaintained = isOracleMaintained;
        this.schemaNameContains = schemaNameContains;
        this.schemaNames = schemaNames;
        this.schemas = schemas;
        this.targetDatabaseId = targetDatabaseId;
    }

    public List<GetTargetDatabasesSchemasFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if the schema is oracle supplied.
     * 
     */
    public Optional<Boolean> isOracleMaintained() {
        return Optional.ofNullable(this.isOracleMaintained);
    }
    public Optional<String> schemaNameContains() {
        return Optional.ofNullable(this.schemaNameContains);
    }
    /**
     * @return Name of the schema.
     * 
     */
    public List<String> schemaNames() {
        return this.schemaNames == null ? List.of() : this.schemaNames;
    }
    /**
     * @return The list of schemas.
     * 
     */
    public List<GetTargetDatabasesSchemasSchema> schemas() {
        return this.schemas;
    }
    public String targetDatabaseId() {
        return this.targetDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetDatabasesSchemasResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<GetTargetDatabasesSchemasFilter> filters;
        private String id;
        private @Nullable Boolean isOracleMaintained;
        private @Nullable String schemaNameContains;
        private @Nullable List<String> schemaNames;
        private List<GetTargetDatabasesSchemasSchema> schemas;
        private String targetDatabaseId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTargetDatabasesSchemasResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isOracleMaintained = defaults.isOracleMaintained;
    	      this.schemaNameContains = defaults.schemaNameContains;
    	      this.schemaNames = defaults.schemaNames;
    	      this.schemas = defaults.schemas;
    	      this.targetDatabaseId = defaults.targetDatabaseId;
        }

        public Builder filters(@Nullable List<GetTargetDatabasesSchemasFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetTargetDatabasesSchemasFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isOracleMaintained(@Nullable Boolean isOracleMaintained) {
            this.isOracleMaintained = isOracleMaintained;
            return this;
        }
        public Builder schemaNameContains(@Nullable String schemaNameContains) {
            this.schemaNameContains = schemaNameContains;
            return this;
        }
        public Builder schemaNames(@Nullable List<String> schemaNames) {
            this.schemaNames = schemaNames;
            return this;
        }
        public Builder schemaNames(String... schemaNames) {
            return schemaNames(List.of(schemaNames));
        }
        public Builder schemas(List<GetTargetDatabasesSchemasSchema> schemas) {
            this.schemas = Objects.requireNonNull(schemas);
            return this;
        }
        public Builder schemas(GetTargetDatabasesSchemasSchema... schemas) {
            return schemas(List.of(schemas));
        }
        public Builder targetDatabaseId(String targetDatabaseId) {
            this.targetDatabaseId = Objects.requireNonNull(targetDatabaseId);
            return this;
        }        public GetTargetDatabasesSchemasResult build() {
            return new GetTargetDatabasesSchemasResult(filters, id, isOracleMaintained, schemaNameContains, schemaNames, schemas, targetDatabaseId);
        }
    }
}
