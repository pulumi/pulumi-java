// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OperatorAccessControl.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetControlArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetControlArgs Empty = new GetControlArgs();

    /**
     * unique OperatorControl identifier
     * 
     */
    @Import(name="operatorControlId", required=true)
    private Output<String> operatorControlId;

    /**
     * @return unique OperatorControl identifier
     * 
     */
    public Output<String> operatorControlId() {
        return this.operatorControlId;
    }

    private GetControlArgs() {}

    private GetControlArgs(GetControlArgs $) {
        this.operatorControlId = $.operatorControlId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetControlArgs $;

        public Builder() {
            $ = new GetControlArgs();
        }

        public Builder(GetControlArgs defaults) {
            $ = new GetControlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operatorControlId unique OperatorControl identifier
         * 
         * @return builder
         * 
         */
        public Builder operatorControlId(Output<String> operatorControlId) {
            $.operatorControlId = operatorControlId;
            return this;
        }

        /**
         * @param operatorControlId unique OperatorControl identifier
         * 
         * @return builder
         * 
         */
        public Builder operatorControlId(String operatorControlId) {
            return operatorControlId(Output.of(operatorControlId));
        }

        public GetControlArgs build() {
            $.operatorControlId = Objects.requireNonNull($.operatorControlId, "expected parameter 'operatorControlId' to be non-null");
            return $;
        }
    }

}
