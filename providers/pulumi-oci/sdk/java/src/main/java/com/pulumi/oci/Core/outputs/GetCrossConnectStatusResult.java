// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCrossConnectStatusResult {
    /**
     * @return The OCID of the cross-connect.
     * 
     */
    private final String crossConnectId;
    /**
     * @return Encryption status of the CrossConnect
     * 
     */
    private final String encryptionStatus;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Whether Oracle&#39;s side of the interface is up or down.
     * 
     */
    private final String interfaceState;
    /**
     * @return The light level of the cross-connect (in dBm).  Example: `14.0`
     * 
     */
    private final Double lightLevelIndBm;
    /**
     * @return Status indicator corresponding to the light level.
     * * **NO_LIGHT:** No measurable light
     * * **LOW_WARN:** There&#39;s measurable light but it&#39;s too low
     * * **HIGH_WARN:** Light level is too high
     * * **BAD:** There&#39;s measurable light but the signal-to-noise ratio is bad
     * * **GOOD:** Good light level
     * 
     */
    private final String lightLevelIndicator;

    @CustomType.Constructor
    private GetCrossConnectStatusResult(
        @CustomType.Parameter("crossConnectId") String crossConnectId,
        @CustomType.Parameter("encryptionStatus") String encryptionStatus,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("interfaceState") String interfaceState,
        @CustomType.Parameter("lightLevelIndBm") Double lightLevelIndBm,
        @CustomType.Parameter("lightLevelIndicator") String lightLevelIndicator) {
        this.crossConnectId = crossConnectId;
        this.encryptionStatus = encryptionStatus;
        this.id = id;
        this.interfaceState = interfaceState;
        this.lightLevelIndBm = lightLevelIndBm;
        this.lightLevelIndicator = lightLevelIndicator;
    }

    /**
     * @return The OCID of the cross-connect.
     * 
     */
    public String crossConnectId() {
        return this.crossConnectId;
    }
    /**
     * @return Encryption status of the CrossConnect
     * 
     */
    public String encryptionStatus() {
        return this.encryptionStatus;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether Oracle&#39;s side of the interface is up or down.
     * 
     */
    public String interfaceState() {
        return this.interfaceState;
    }
    /**
     * @return The light level of the cross-connect (in dBm).  Example: `14.0`
     * 
     */
    public Double lightLevelIndBm() {
        return this.lightLevelIndBm;
    }
    /**
     * @return Status indicator corresponding to the light level.
     * * **NO_LIGHT:** No measurable light
     * * **LOW_WARN:** There&#39;s measurable light but it&#39;s too low
     * * **HIGH_WARN:** Light level is too high
     * * **BAD:** There&#39;s measurable light but the signal-to-noise ratio is bad
     * * **GOOD:** Good light level
     * 
     */
    public String lightLevelIndicator() {
        return this.lightLevelIndicator;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCrossConnectStatusResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String crossConnectId;
        private String encryptionStatus;
        private String id;
        private String interfaceState;
        private Double lightLevelIndBm;
        private String lightLevelIndicator;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCrossConnectStatusResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crossConnectId = defaults.crossConnectId;
    	      this.encryptionStatus = defaults.encryptionStatus;
    	      this.id = defaults.id;
    	      this.interfaceState = defaults.interfaceState;
    	      this.lightLevelIndBm = defaults.lightLevelIndBm;
    	      this.lightLevelIndicator = defaults.lightLevelIndicator;
        }

        public Builder crossConnectId(String crossConnectId) {
            this.crossConnectId = Objects.requireNonNull(crossConnectId);
            return this;
        }
        public Builder encryptionStatus(String encryptionStatus) {
            this.encryptionStatus = Objects.requireNonNull(encryptionStatus);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder interfaceState(String interfaceState) {
            this.interfaceState = Objects.requireNonNull(interfaceState);
            return this;
        }
        public Builder lightLevelIndBm(Double lightLevelIndBm) {
            this.lightLevelIndBm = Objects.requireNonNull(lightLevelIndBm);
            return this;
        }
        public Builder lightLevelIndicator(String lightLevelIndicator) {
            this.lightLevelIndicator = Objects.requireNonNull(lightLevelIndicator);
            return this;
        }        public GetCrossConnectStatusResult build() {
            return new GetCrossConnectStatusResult(crossConnectId, encryptionStatus, id, interfaceState, lightLevelIndBm, lightLevelIndicator);
        }
    }
}
