// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionConnectDescriptorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionConnectDescriptorArgs Empty = new ConnectionConnectDescriptorArgs();

    /**
     * (Updatable) Connect String. Required if no host, port nor databaseServiceName were specified. If a Private Endpoint was specified in the Connection, the host entry should be a valid IP address. Supported formats: Easy connect: &lt;host&gt;:&lt;port&gt;/&lt;db_service_name&gt; Long format: (description= (address=(port=&lt;port&gt;)(host=&lt;host&gt;))(connect_data=(service_name=&lt;db_service_name&gt;)))
     * 
     */
    @Import(name="connectString")
    private @Nullable Output<String> connectString;

    /**
     * @return (Updatable) Connect String. Required if no host, port nor databaseServiceName were specified. If a Private Endpoint was specified in the Connection, the host entry should be a valid IP address. Supported formats: Easy connect: &lt;host&gt;:&lt;port&gt;/&lt;db_service_name&gt; Long format: (description= (address=(port=&lt;port&gt;)(host=&lt;host&gt;))(connect_data=(service_name=&lt;db_service_name&gt;)))
     * 
     */
    public Optional<Output<String>> connectString() {
        return Optional.ofNullable(this.connectString);
    }

    /**
     * (Updatable) Database service name. Required if no connectString was specified.
     * 
     */
    @Import(name="databaseServiceName")
    private @Nullable Output<String> databaseServiceName;

    /**
     * @return (Updatable) Database service name. Required if no connectString was specified.
     * 
     */
    public Optional<Output<String>> databaseServiceName() {
        return Optional.ofNullable(this.databaseServiceName);
    }

    /**
     * (Updatable) Name of the host the SSH key is valid for.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return (Updatable) Name of the host the SSH key is valid for.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * (Updatable) Port of the connect descriptor. Required if no connectString was specified.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return (Updatable) Port of the connect descriptor. Required if no connectString was specified.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    private ConnectionConnectDescriptorArgs() {}

    private ConnectionConnectDescriptorArgs(ConnectionConnectDescriptorArgs $) {
        this.connectString = $.connectString;
        this.databaseServiceName = $.databaseServiceName;
        this.host = $.host;
        this.port = $.port;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionConnectDescriptorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionConnectDescriptorArgs $;

        public Builder() {
            $ = new ConnectionConnectDescriptorArgs();
        }

        public Builder(ConnectionConnectDescriptorArgs defaults) {
            $ = new ConnectionConnectDescriptorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectString (Updatable) Connect String. Required if no host, port nor databaseServiceName were specified. If a Private Endpoint was specified in the Connection, the host entry should be a valid IP address. Supported formats: Easy connect: &lt;host&gt;:&lt;port&gt;/&lt;db_service_name&gt; Long format: (description= (address=(port=&lt;port&gt;)(host=&lt;host&gt;))(connect_data=(service_name=&lt;db_service_name&gt;)))
         * 
         * @return builder
         * 
         */
        public Builder connectString(@Nullable Output<String> connectString) {
            $.connectString = connectString;
            return this;
        }

        /**
         * @param connectString (Updatable) Connect String. Required if no host, port nor databaseServiceName were specified. If a Private Endpoint was specified in the Connection, the host entry should be a valid IP address. Supported formats: Easy connect: &lt;host&gt;:&lt;port&gt;/&lt;db_service_name&gt; Long format: (description= (address=(port=&lt;port&gt;)(host=&lt;host&gt;))(connect_data=(service_name=&lt;db_service_name&gt;)))
         * 
         * @return builder
         * 
         */
        public Builder connectString(String connectString) {
            return connectString(Output.of(connectString));
        }

        /**
         * @param databaseServiceName (Updatable) Database service name. Required if no connectString was specified.
         * 
         * @return builder
         * 
         */
        public Builder databaseServiceName(@Nullable Output<String> databaseServiceName) {
            $.databaseServiceName = databaseServiceName;
            return this;
        }

        /**
         * @param databaseServiceName (Updatable) Database service name. Required if no connectString was specified.
         * 
         * @return builder
         * 
         */
        public Builder databaseServiceName(String databaseServiceName) {
            return databaseServiceName(Output.of(databaseServiceName));
        }

        /**
         * @param host (Updatable) Name of the host the SSH key is valid for.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host (Updatable) Name of the host the SSH key is valid for.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param port (Updatable) Port of the connect descriptor. Required if no connectString was specified.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) Port of the connect descriptor. Required if no connectString was specified.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public ConnectionConnectDescriptorArgs build() {
            return $;
        }
    }

}
