// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutonomousDatabaseWalletArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutonomousDatabaseWalletArgs Empty = new AutonomousDatabaseWalletArgs();

    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="autonomousDatabaseId", required=true)
    private Output<String> autonomousDatabaseId;

    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Output<String> autonomousDatabaseId() {
        return this.autonomousDatabaseId;
    }

    @Import(name="base64EncodeContent")
    private @Nullable Output<Boolean> base64EncodeContent;

    public Optional<Output<Boolean>> base64EncodeContent() {
        return Optional.ofNullable(this.base64EncodeContent);
    }

    /**
     * The type of wallet to generate.
     * 
     */
    @Import(name="generateType")
    private @Nullable Output<String> generateType;

    /**
     * @return The type of wallet to generate.
     * 
     */
    public Optional<Output<String>> generateType() {
        return Optional.ofNullable(this.generateType);
    }

    /**
     * The password to encrypt the keys inside the wallet. The password must be at least 8 characters long and must include at least 1 letter and either 1 numeric character or 1 special character.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return The password to encrypt the keys inside the wallet. The password must be at least 8 characters long and must include at least 1 letter and either 1 numeric character or 1 special character.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    private AutonomousDatabaseWalletArgs() {}

    private AutonomousDatabaseWalletArgs(AutonomousDatabaseWalletArgs $) {
        this.autonomousDatabaseId = $.autonomousDatabaseId;
        this.base64EncodeContent = $.base64EncodeContent;
        this.generateType = $.generateType;
        this.password = $.password;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutonomousDatabaseWalletArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutonomousDatabaseWalletArgs $;

        public Builder() {
            $ = new AutonomousDatabaseWalletArgs();
        }

        public Builder(AutonomousDatabaseWalletArgs defaults) {
            $ = new AutonomousDatabaseWalletArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autonomousDatabaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder autonomousDatabaseId(Output<String> autonomousDatabaseId) {
            $.autonomousDatabaseId = autonomousDatabaseId;
            return this;
        }

        /**
         * @param autonomousDatabaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder autonomousDatabaseId(String autonomousDatabaseId) {
            return autonomousDatabaseId(Output.of(autonomousDatabaseId));
        }

        public Builder base64EncodeContent(@Nullable Output<Boolean> base64EncodeContent) {
            $.base64EncodeContent = base64EncodeContent;
            return this;
        }

        public Builder base64EncodeContent(Boolean base64EncodeContent) {
            return base64EncodeContent(Output.of(base64EncodeContent));
        }

        /**
         * @param generateType The type of wallet to generate.
         * 
         * @return builder
         * 
         */
        public Builder generateType(@Nullable Output<String> generateType) {
            $.generateType = generateType;
            return this;
        }

        /**
         * @param generateType The type of wallet to generate.
         * 
         * @return builder
         * 
         */
        public Builder generateType(String generateType) {
            return generateType(Output.of(generateType));
        }

        /**
         * @param password The password to encrypt the keys inside the wallet. The password must be at least 8 characters long and must include at least 1 letter and either 1 numeric character or 1 special character.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password to encrypt the keys inside the wallet. The password must be at least 8 characters long and must include at least 1 letter and either 1 numeric character or 1 special character.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        public AutonomousDatabaseWalletArgs build() {
            $.autonomousDatabaseId = Objects.requireNonNull($.autonomousDatabaseId, "expected parameter 'autonomousDatabaseId' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            return $;
        }
    }

}
