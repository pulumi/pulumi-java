// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration {
    /**
     * @return The name of the cookie used to detect a session initiated by the backend server. Use &#39;*&#39; to specify that any cookie set by the backend causes the session to persist.  Example: `example_cookie`
     * 
     */
    private final String cookieName;
    /**
     * @return Whether the load balancer is prevented from directing traffic from a persistent session client to a different backend server if the original server is unavailable. Defaults to false.  Example: `false`
     * 
     */
    private final Boolean disableFallback;
    /**
     * @return The domain in which the cookie is valid. The `Set-cookie` header inserted by the load balancer contains a domain attribute with the specified value.
     * 
     */
    private final String domain;
    /**
     * @return Whether the `Set-cookie` header should contain the `HttpOnly` attribute. If `true`, the `Set-cookie` header inserted by the load balancer contains the `HttpOnly` attribute, which limits the scope of the cookie to HTTP requests. This attribute directs the client or browser to omit the cookie when providing access to cookies through non-HTTP APIs. For example, it restricts the cookie from JavaScript channels.  Example: `true`
     * 
     */
    private final Boolean isHttpOnly;
    /**
     * @return Whether the `Set-cookie` header should contain the `Secure` attribute. If `true`, the `Set-cookie` header inserted by the load balancer contains the `Secure` attribute, which directs the client or browser to send the cookie only using a secure protocol.
     * 
     */
    private final Boolean isSecure;
    /**
     * @return The amount of time the cookie remains valid. The `Set-cookie` header inserted by the load balancer contains a `Max-Age` attribute with the specified value.
     * 
     */
    private final Integer maxAgeInSeconds;
    /**
     * @return The path in which the cookie is valid. The `Set-cookie header` inserted by the load balancer contains a `Path` attribute with the specified value.
     * 
     */
    private final String path;

    @CustomType.Constructor
    private GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration(
        @CustomType.Parameter("cookieName") String cookieName,
        @CustomType.Parameter("disableFallback") Boolean disableFallback,
        @CustomType.Parameter("domain") String domain,
        @CustomType.Parameter("isHttpOnly") Boolean isHttpOnly,
        @CustomType.Parameter("isSecure") Boolean isSecure,
        @CustomType.Parameter("maxAgeInSeconds") Integer maxAgeInSeconds,
        @CustomType.Parameter("path") String path) {
        this.cookieName = cookieName;
        this.disableFallback = disableFallback;
        this.domain = domain;
        this.isHttpOnly = isHttpOnly;
        this.isSecure = isSecure;
        this.maxAgeInSeconds = maxAgeInSeconds;
        this.path = path;
    }

    /**
     * @return The name of the cookie used to detect a session initiated by the backend server. Use &#39;*&#39; to specify that any cookie set by the backend causes the session to persist.  Example: `example_cookie`
     * 
     */
    public String cookieName() {
        return this.cookieName;
    }
    /**
     * @return Whether the load balancer is prevented from directing traffic from a persistent session client to a different backend server if the original server is unavailable. Defaults to false.  Example: `false`
     * 
     */
    public Boolean disableFallback() {
        return this.disableFallback;
    }
    /**
     * @return The domain in which the cookie is valid. The `Set-cookie` header inserted by the load balancer contains a domain attribute with the specified value.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Whether the `Set-cookie` header should contain the `HttpOnly` attribute. If `true`, the `Set-cookie` header inserted by the load balancer contains the `HttpOnly` attribute, which limits the scope of the cookie to HTTP requests. This attribute directs the client or browser to omit the cookie when providing access to cookies through non-HTTP APIs. For example, it restricts the cookie from JavaScript channels.  Example: `true`
     * 
     */
    public Boolean isHttpOnly() {
        return this.isHttpOnly;
    }
    /**
     * @return Whether the `Set-cookie` header should contain the `Secure` attribute. If `true`, the `Set-cookie` header inserted by the load balancer contains the `Secure` attribute, which directs the client or browser to send the cookie only using a secure protocol.
     * 
     */
    public Boolean isSecure() {
        return this.isSecure;
    }
    /**
     * @return The amount of time the cookie remains valid. The `Set-cookie` header inserted by the load balancer contains a `Max-Age` attribute with the specified value.
     * 
     */
    public Integer maxAgeInSeconds() {
        return this.maxAgeInSeconds;
    }
    /**
     * @return The path in which the cookie is valid. The `Set-cookie header` inserted by the load balancer contains a `Path` attribute with the specified value.
     * 
     */
    public String path() {
        return this.path;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String cookieName;
        private Boolean disableFallback;
        private String domain;
        private Boolean isHttpOnly;
        private Boolean isSecure;
        private Integer maxAgeInSeconds;
        private String path;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cookieName = defaults.cookieName;
    	      this.disableFallback = defaults.disableFallback;
    	      this.domain = defaults.domain;
    	      this.isHttpOnly = defaults.isHttpOnly;
    	      this.isSecure = defaults.isSecure;
    	      this.maxAgeInSeconds = defaults.maxAgeInSeconds;
    	      this.path = defaults.path;
        }

        public Builder cookieName(String cookieName) {
            this.cookieName = Objects.requireNonNull(cookieName);
            return this;
        }
        public Builder disableFallback(Boolean disableFallback) {
            this.disableFallback = Objects.requireNonNull(disableFallback);
            return this;
        }
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        public Builder isHttpOnly(Boolean isHttpOnly) {
            this.isHttpOnly = Objects.requireNonNull(isHttpOnly);
            return this;
        }
        public Builder isSecure(Boolean isSecure) {
            this.isSecure = Objects.requireNonNull(isSecure);
            return this;
        }
        public Builder maxAgeInSeconds(Integer maxAgeInSeconds) {
            this.maxAgeInSeconds = Objects.requireNonNull(maxAgeInSeconds);
            return this;
        }
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }        public GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration build() {
            return new GetBackendSetsBackendsetLbCookieSessionPersistenceConfiguration(cookieName, disableFallback, domain, isHttpOnly, isSecure, maxAgeInSeconds, path);
        }
    }
}
