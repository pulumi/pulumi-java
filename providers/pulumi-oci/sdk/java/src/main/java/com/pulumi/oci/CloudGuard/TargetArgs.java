// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CloudGuard.inputs.TargetTargetDetectorRecipeArgs;
import com.pulumi.oci.CloudGuard.inputs.TargetTargetResponderRecipeArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetArgs Empty = new TargetArgs();

    /**
     * (Updatable) compartment associated with condition
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) compartment associated with condition
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * The target description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The target description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) DetectorTemplate Identifier
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) DetectorTemplate Identifier
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The current state of the DetectorRule.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Updatable) The current state of the DetectorRule.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Updatable) List of detector recipes to associate with target
     * 
     */
    @Import(name="targetDetectorRecipes")
    private @Nullable Output<List<TargetTargetDetectorRecipeArgs>> targetDetectorRecipes;

    /**
     * @return (Updatable) List of detector recipes to associate with target
     * 
     */
    public Optional<Output<List<TargetTargetDetectorRecipeArgs>>> targetDetectorRecipes() {
        return Optional.ofNullable(this.targetDetectorRecipes);
    }

    /**
     * Resource ID which the target uses to monitor
     * 
     */
    @Import(name="targetResourceId", required=true)
    private Output<String> targetResourceId;

    /**
     * @return Resource ID which the target uses to monitor
     * 
     */
    public Output<String> targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * possible type of targets(compartment/HCMCloud/ERPCloud)
     * 
     */
    @Import(name="targetResourceType", required=true)
    private Output<String> targetResourceType;

    /**
     * @return possible type of targets(compartment/HCMCloud/ERPCloud)
     * 
     */
    public Output<String> targetResourceType() {
        return this.targetResourceType;
    }

    /**
     * (Updatable) List of responder recipes to associate with target
     * 
     */
    @Import(name="targetResponderRecipes")
    private @Nullable Output<List<TargetTargetResponderRecipeArgs>> targetResponderRecipes;

    /**
     * @return (Updatable) List of responder recipes to associate with target
     * 
     */
    public Optional<Output<List<TargetTargetResponderRecipeArgs>>> targetResponderRecipes() {
        return Optional.ofNullable(this.targetResponderRecipes);
    }

    private TargetArgs() {}

    private TargetArgs(TargetArgs $) {
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.state = $.state;
        this.targetDetectorRecipes = $.targetDetectorRecipes;
        this.targetResourceId = $.targetResourceId;
        this.targetResourceType = $.targetResourceType;
        this.targetResponderRecipes = $.targetResponderRecipes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetArgs $;

        public Builder() {
            $ = new TargetArgs();
        }

        public Builder(TargetArgs defaults) {
            $ = new TargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) compartment associated with condition
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) compartment associated with condition
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description The target description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The target description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) DetectorTemplate Identifier
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) DetectorTemplate Identifier
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param state (Updatable) The current state of the DetectorRule.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Updatable) The current state of the DetectorRule.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param targetDetectorRecipes (Updatable) List of detector recipes to associate with target
         * 
         * @return builder
         * 
         */
        public Builder targetDetectorRecipes(@Nullable Output<List<TargetTargetDetectorRecipeArgs>> targetDetectorRecipes) {
            $.targetDetectorRecipes = targetDetectorRecipes;
            return this;
        }

        /**
         * @param targetDetectorRecipes (Updatable) List of detector recipes to associate with target
         * 
         * @return builder
         * 
         */
        public Builder targetDetectorRecipes(List<TargetTargetDetectorRecipeArgs> targetDetectorRecipes) {
            return targetDetectorRecipes(Output.of(targetDetectorRecipes));
        }

        /**
         * @param targetDetectorRecipes (Updatable) List of detector recipes to associate with target
         * 
         * @return builder
         * 
         */
        public Builder targetDetectorRecipes(TargetTargetDetectorRecipeArgs... targetDetectorRecipes) {
            return targetDetectorRecipes(List.of(targetDetectorRecipes));
        }

        /**
         * @param targetResourceId Resource ID which the target uses to monitor
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(Output<String> targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        /**
         * @param targetResourceId Resource ID which the target uses to monitor
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(String targetResourceId) {
            return targetResourceId(Output.of(targetResourceId));
        }

        /**
         * @param targetResourceType possible type of targets(compartment/HCMCloud/ERPCloud)
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(Output<String> targetResourceType) {
            $.targetResourceType = targetResourceType;
            return this;
        }

        /**
         * @param targetResourceType possible type of targets(compartment/HCMCloud/ERPCloud)
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(String targetResourceType) {
            return targetResourceType(Output.of(targetResourceType));
        }

        /**
         * @param targetResponderRecipes (Updatable) List of responder recipes to associate with target
         * 
         * @return builder
         * 
         */
        public Builder targetResponderRecipes(@Nullable Output<List<TargetTargetResponderRecipeArgs>> targetResponderRecipes) {
            $.targetResponderRecipes = targetResponderRecipes;
            return this;
        }

        /**
         * @param targetResponderRecipes (Updatable) List of responder recipes to associate with target
         * 
         * @return builder
         * 
         */
        public Builder targetResponderRecipes(List<TargetTargetResponderRecipeArgs> targetResponderRecipes) {
            return targetResponderRecipes(Output.of(targetResponderRecipes));
        }

        /**
         * @param targetResponderRecipes (Updatable) List of responder recipes to associate with target
         * 
         * @return builder
         * 
         */
        public Builder targetResponderRecipes(TargetTargetResponderRecipeArgs... targetResponderRecipes) {
            return targetResponderRecipes(List.of(targetResponderRecipes));
        }

        public TargetArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.targetResourceId = Objects.requireNonNull($.targetResourceId, "expected parameter 'targetResourceId' to be non-null");
            $.targetResourceType = Objects.requireNonNull($.targetResourceType, "expected parameter 'targetResourceType' to be non-null");
            return $;
        }
    }

}
