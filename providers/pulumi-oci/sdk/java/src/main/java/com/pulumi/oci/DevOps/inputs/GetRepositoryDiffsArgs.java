// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.GetRepositoryDiffsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetRepositoryDiffsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryDiffsArgs Empty = new GetRepositoryDiffsArgs();

    /**
     * The commit or reference name to compare changes against.
     * 
     */
    @Import(name="baseVersion", required=true)
    private Output<String> baseVersion;

    /**
     * @return The commit or reference name to compare changes against.
     * 
     */
    public Output<String> baseVersion() {
        return this.baseVersion;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetRepositoryDiffsFilter>> filters;

    public Output</* @Nullable */ List<GetRepositoryDiffsFilter>> filters() {
        return this.filters;
    }

    /**
     * Boolean value to indicate whether to use merge base or most recent revision.
     * 
     */
    @Import(name="isComparisonFromMergeBase")
    private Output</* @Nullable */ Boolean> isComparisonFromMergeBase;

    /**
     * @return Boolean value to indicate whether to use merge base or most recent revision.
     * 
     */
    public Output</* @Nullable */ Boolean> isComparisonFromMergeBase() {
        return this.isComparisonFromMergeBase;
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    /**
     * The commit or reference name where changes are coming from.
     * 
     */
    @Import(name="targetVersion", required=true)
    private Output<String> targetVersion;

    /**
     * @return The commit or reference name where changes are coming from.
     * 
     */
    public Output<String> targetVersion() {
        return this.targetVersion;
    }

    private GetRepositoryDiffsArgs() {}

    private GetRepositoryDiffsArgs(GetRepositoryDiffsArgs $) {
        this.baseVersion = $.baseVersion;
        this.filters = $.filters;
        this.isComparisonFromMergeBase = $.isComparisonFromMergeBase;
        this.repositoryId = $.repositoryId;
        this.targetVersion = $.targetVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryDiffsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryDiffsArgs $;

        public Builder() {
            $ = new GetRepositoryDiffsArgs();
        }

        public Builder(GetRepositoryDiffsArgs defaults) {
            $ = new GetRepositoryDiffsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseVersion The commit or reference name to compare changes against.
         * 
         * @return builder
         * 
         */
        public Builder baseVersion(Output<String> baseVersion) {
            $.baseVersion = baseVersion;
            return this;
        }

        /**
         * @param baseVersion The commit or reference name to compare changes against.
         * 
         * @return builder
         * 
         */
        public Builder baseVersion(String baseVersion) {
            return baseVersion(Output.of(baseVersion));
        }

        public Builder filters(Output</* @Nullable */ List<GetRepositoryDiffsFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetRepositoryDiffsFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetRepositoryDiffsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isComparisonFromMergeBase Boolean value to indicate whether to use merge base or most recent revision.
         * 
         * @return builder
         * 
         */
        public Builder isComparisonFromMergeBase(Output</* @Nullable */ Boolean> isComparisonFromMergeBase) {
            $.isComparisonFromMergeBase = isComparisonFromMergeBase;
            return this;
        }

        /**
         * @param isComparisonFromMergeBase Boolean value to indicate whether to use merge base or most recent revision.
         * 
         * @return builder
         * 
         */
        public Builder isComparisonFromMergeBase(@Nullable Boolean isComparisonFromMergeBase) {
            return isComparisonFromMergeBase(Output.of(isComparisonFromMergeBase));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        /**
         * @param targetVersion The commit or reference name where changes are coming from.
         * 
         * @return builder
         * 
         */
        public Builder targetVersion(Output<String> targetVersion) {
            $.targetVersion = targetVersion;
            return this;
        }

        /**
         * @param targetVersion The commit or reference name where changes are coming from.
         * 
         * @return builder
         * 
         */
        public Builder targetVersion(String targetVersion) {
            return targetVersion(Output.of(targetVersion));
        }

        public GetRepositoryDiffsArgs build() {
            $.baseVersion = Objects.requireNonNull($.baseVersion, "expected parameter 'baseVersion' to be non-null");
            $.repositoryId = Objects.requireNonNull($.repositoryId, "expected parameter 'repositoryId' to be non-null");
            $.targetVersion = Objects.requireNonNull($.targetVersion, "expected parameter 'targetVersion' to be non-null");
            return $;
        }
    }

}
