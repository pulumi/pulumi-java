// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("oci");
/**
 * (Optional) The type of auth to use. Options are &#39;ApiKey&#39;, &#39;SecurityToken&#39; and &#39;InstancePrincipal&#39; and
 * &#39;ResourcePrincipal&#39;. By default, &#39;ApiKey&#39; will be used.
 * 
 */
    public Optional<String> auth() {
        return Codegen.stringProp("auth").config(config).get();
    }
/**
 * (Optional) The profile name to be used from config file, if not set it will be DEFAULT.
 * 
 */
    public Optional<String> configFileProfile() {
        return Codegen.stringProp("configFileProfile").config(config).get();
    }
/**
 * (Optional) Disable automatic retries for retriable errors. Automatic retries were introduced to solve some eventual
 * consistency problems but it also introduced performance issues on destroy operations.
 * 
 */
    public Optional<Boolean> disableAutoRetries() {
        return Codegen.booleanProp("disableAutoRetries").config(config).get();
    }
/**
 * (Optional) The fingerprint for the user&#39;s RSA key. This can be found in user settings in the Oracle Cloud Infrastructure
 * console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
 * 
 */
    public Optional<String> fingerprint() {
        return Codegen.stringProp("fingerprint").config(config).get();
    }
/**
 * (Optional) List of defined tags keys that Terraform should ignore when planning creates and updates to the associated
 * remote object
 * 
 */
    public Optional<List<String>> ignoreDefinedTags() {
        return Codegen.objectProp("ignoreDefinedTags", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * (Optional) A PEM formatted RSA private key for the user. A private_key or a private_key_path must be provided if auth is
 * set to &#39;ApiKey&#39;, ignored otherwise.
 * 
 */
    public Optional<String> privateKey() {
        return Codegen.stringProp("privateKey").config(config).get();
    }
/**
 * (Optional) The password used to secure the private key.
 * 
 */
    public Optional<String> privateKeyPassword() {
        return Codegen.stringProp("privateKeyPassword").config(config).get();
    }
/**
 * (Optional) The path to the user&#39;s PEM formatted private key. A private_key or a private_key_path must be provided if
 * auth is set to &#39;ApiKey&#39;, ignored otherwise.
 * 
 */
    public Optional<String> privateKeyPath() {
        return Codegen.stringProp("privateKeyPath").config(config).get();
    }
/**
 * (Required) The region for API connections (e.g. us-ashburn-1).
 * 
 */
    public Optional<String> region() {
        return Codegen.stringProp("region").config(config).get();
    }
/**
 * (Optional) The minimum duration (in seconds) to retry a resource operation in response to an error. The actual retry
 * duration may be longer due to jittering of retry operations. This value is ignored if the `disable_auto_retries` field
 * is set to true.
 * 
 */
    public Optional<Integer> retryDurationSeconds() {
        return Codegen.integerProp("retryDurationSeconds").config(config).get();
    }
/**
 * (Optional) The tenancy OCID for a user. The tenancy OCID can be found at the bottom of user settings in the Oracle Cloud
 * Infrastructure console. Required if auth is set to &#39;ApiKey&#39;, ignored otherwise.
 * 
 */
    public Optional<String> tenancyOcid() {
        return Codegen.stringProp("tenancyOcid").config(config).get();
    }
/**
 * (Optional) The user OCID. This can be found in user settings in the Oracle Cloud Infrastructure console. Required if
 * auth is set to &#39;ApiKey&#39;, ignored otherwise.
 * 
 */
    public Optional<String> userOcid() {
        return Codegen.stringProp("userOcid").config(config).get();
    }
}
