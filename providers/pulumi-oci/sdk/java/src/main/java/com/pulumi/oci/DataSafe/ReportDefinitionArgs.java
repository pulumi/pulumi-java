// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.ReportDefinitionColumnFilterArgs;
import com.pulumi.oci.DataSafe.inputs.ReportDefinitionColumnInfoArgs;
import com.pulumi.oci.DataSafe.inputs.ReportDefinitionColumnSortingArgs;
import com.pulumi.oci.DataSafe.inputs.ReportDefinitionSummaryArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReportDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReportDefinitionArgs Empty = new ReportDefinitionArgs();

    /**
     * (Updatable) An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
     * 
     */
    @Import(name="columnFilters", required=true)
    private Output<List<ReportDefinitionColumnFilterArgs>> columnFilters;

    /**
     * @return (Updatable) An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
     * 
     */
    public Output<List<ReportDefinitionColumnFilterArgs>> columnFilters() {
        return this.columnFilters;
    }

    /**
     * (Updatable) An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
     * 
     */
    @Import(name="columnInfos", required=true)
    private Output<List<ReportDefinitionColumnInfoArgs>> columnInfos;

    /**
     * @return (Updatable) An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
     * 
     */
    public Output<List<ReportDefinitionColumnInfoArgs>> columnInfos() {
        return this.columnInfos;
    }

    /**
     * (Updatable) An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
     * 
     */
    @Import(name="columnSortings", required=true)
    private Output<List<ReportDefinitionColumnSortingArgs>> columnSortings;

    /**
     * @return (Updatable) An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
     * 
     */
    public Output<List<ReportDefinitionColumnSortingArgs>> columnSortings() {
        return this.columnSortings;
    }

    /**
     * (Updatable) The OCID of the compartment containing the report definition.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment containing the report definition.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A description of the report definition.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A description of the report definition.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Specifies the name of the report definition.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) Specifies the name of the report definition.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The OCID of the parent report definition.
     * 
     */
    @Import(name="parentId", required=true)
    private Output<String> parentId;

    /**
     * @return The OCID of the parent report definition.
     * 
     */
    public Output<String> parentId() {
        return this.parentId;
    }

    /**
     * (Updatable) An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
     * 
     */
    @Import(name="summaries", required=true)
    private Output<List<ReportDefinitionSummaryArgs>> summaries;

    /**
     * @return (Updatable) An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
     * 
     */
    public Output<List<ReportDefinitionSummaryArgs>> summaries() {
        return this.summaries;
    }

    private ReportDefinitionArgs() {}

    private ReportDefinitionArgs(ReportDefinitionArgs $) {
        this.columnFilters = $.columnFilters;
        this.columnInfos = $.columnInfos;
        this.columnSortings = $.columnSortings;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.parentId = $.parentId;
        this.summaries = $.summaries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportDefinitionArgs $;

        public Builder() {
            $ = new ReportDefinitionArgs();
        }

        public Builder(ReportDefinitionArgs defaults) {
            $ = new ReportDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnFilters (Updatable) An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
         * 
         * @return builder
         * 
         */
        public Builder columnFilters(Output<List<ReportDefinitionColumnFilterArgs>> columnFilters) {
            $.columnFilters = columnFilters;
            return this;
        }

        /**
         * @param columnFilters (Updatable) An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
         * 
         * @return builder
         * 
         */
        public Builder columnFilters(List<ReportDefinitionColumnFilterArgs> columnFilters) {
            return columnFilters(Output.of(columnFilters));
        }

        /**
         * @param columnFilters (Updatable) An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
         * 
         * @return builder
         * 
         */
        public Builder columnFilters(ReportDefinitionColumnFilterArgs... columnFilters) {
            return columnFilters(List.of(columnFilters));
        }

        /**
         * @param columnInfos (Updatable) An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
         * 
         * @return builder
         * 
         */
        public Builder columnInfos(Output<List<ReportDefinitionColumnInfoArgs>> columnInfos) {
            $.columnInfos = columnInfos;
            return this;
        }

        /**
         * @param columnInfos (Updatable) An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
         * 
         * @return builder
         * 
         */
        public Builder columnInfos(List<ReportDefinitionColumnInfoArgs> columnInfos) {
            return columnInfos(Output.of(columnInfos));
        }

        /**
         * @param columnInfos (Updatable) An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
         * 
         * @return builder
         * 
         */
        public Builder columnInfos(ReportDefinitionColumnInfoArgs... columnInfos) {
            return columnInfos(List.of(columnInfos));
        }

        /**
         * @param columnSortings (Updatable) An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
         * 
         * @return builder
         * 
         */
        public Builder columnSortings(Output<List<ReportDefinitionColumnSortingArgs>> columnSortings) {
            $.columnSortings = columnSortings;
            return this;
        }

        /**
         * @param columnSortings (Updatable) An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
         * 
         * @return builder
         * 
         */
        public Builder columnSortings(List<ReportDefinitionColumnSortingArgs> columnSortings) {
            return columnSortings(Output.of(columnSortings));
        }

        /**
         * @param columnSortings (Updatable) An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
         * 
         * @return builder
         * 
         */
        public Builder columnSortings(ReportDefinitionColumnSortingArgs... columnSortings) {
            return columnSortings(List.of(columnSortings));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment containing the report definition.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment containing the report definition.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A description of the report definition.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A description of the report definition.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) Specifies the name of the report definition.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Specifies the name of the report definition.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param parentId The OCID of the parent report definition.
         * 
         * @return builder
         * 
         */
        public Builder parentId(Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The OCID of the parent report definition.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param summaries (Updatable) An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
         * 
         * @return builder
         * 
         */
        public Builder summaries(Output<List<ReportDefinitionSummaryArgs>> summaries) {
            $.summaries = summaries;
            return this;
        }

        /**
         * @param summaries (Updatable) An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
         * 
         * @return builder
         * 
         */
        public Builder summaries(List<ReportDefinitionSummaryArgs> summaries) {
            return summaries(Output.of(summaries));
        }

        /**
         * @param summaries (Updatable) An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
         * 
         * @return builder
         * 
         */
        public Builder summaries(ReportDefinitionSummaryArgs... summaries) {
            return summaries(List.of(summaries));
        }

        public ReportDefinitionArgs build() {
            $.columnFilters = Objects.requireNonNull($.columnFilters, "expected parameter 'columnFilters' to be non-null");
            $.columnInfos = Objects.requireNonNull($.columnInfos, "expected parameter 'columnInfos' to be non-null");
            $.columnSortings = Objects.requireNonNull($.columnSortings, "expected parameter 'columnSortings' to be non-null");
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.parentId = Objects.requireNonNull($.parentId, "expected parameter 'parentId' to be non-null");
            $.summaries = Objects.requireNonNull($.summaries, "expected parameter 'summaries' to be non-null");
            return $;
        }
    }

}
