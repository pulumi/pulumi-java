// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Sch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorTaskArgs Empty = new ConnectorTaskArgs();

    /**
     * (Updatable) Size limit (kilobytes) for batch sent to invoke the function.
     * 
     */
    @Import(name="batchSizeInKbs")
    private @Nullable Output<Integer> batchSizeInKbs;

    /**
     * @return (Updatable) Size limit (kilobytes) for batch sent to invoke the function.
     * 
     */
    public Optional<Output<Integer>> batchSizeInKbs() {
        return Optional.ofNullable(this.batchSizeInKbs);
    }

    /**
     * (Updatable) Time limit (seconds) for batch sent to invoke the function.
     * 
     */
    @Import(name="batchTimeInSec")
    private @Nullable Output<Integer> batchTimeInSec;

    /**
     * @return (Updatable) Time limit (seconds) for batch sent to invoke the function.
     * 
     */
    public Optional<Output<Integer>> batchTimeInSec() {
        return Optional.ofNullable(this.batchTimeInSec);
    }

    /**
     * (Updatable) A filter or mask to limit the source used in the flow defined by the service connector.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<String> condition;

    /**
     * @return (Updatable) A filter or mask to limit the source used in the flow defined by the service connector.
     * 
     */
    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function to be used as a task.
     * 
     */
    @Import(name="functionId")
    private @Nullable Output<String> functionId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function to be used as a task.
     * 
     */
    public Optional<Output<String>> functionId() {
        return Optional.ofNullable(this.functionId);
    }

    /**
     * (Updatable) The type descriminator.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    /**
     * @return (Updatable) The type descriminator.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }

    private ConnectorTaskArgs() {}

    private ConnectorTaskArgs(ConnectorTaskArgs $) {
        this.batchSizeInKbs = $.batchSizeInKbs;
        this.batchTimeInSec = $.batchTimeInSec;
        this.condition = $.condition;
        this.functionId = $.functionId;
        this.kind = $.kind;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorTaskArgs $;

        public Builder() {
            $ = new ConnectorTaskArgs();
        }

        public Builder(ConnectorTaskArgs defaults) {
            $ = new ConnectorTaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param batchSizeInKbs (Updatable) Size limit (kilobytes) for batch sent to invoke the function.
         * 
         * @return builder
         * 
         */
        public Builder batchSizeInKbs(@Nullable Output<Integer> batchSizeInKbs) {
            $.batchSizeInKbs = batchSizeInKbs;
            return this;
        }

        /**
         * @param batchSizeInKbs (Updatable) Size limit (kilobytes) for batch sent to invoke the function.
         * 
         * @return builder
         * 
         */
        public Builder batchSizeInKbs(Integer batchSizeInKbs) {
            return batchSizeInKbs(Output.of(batchSizeInKbs));
        }

        /**
         * @param batchTimeInSec (Updatable) Time limit (seconds) for batch sent to invoke the function.
         * 
         * @return builder
         * 
         */
        public Builder batchTimeInSec(@Nullable Output<Integer> batchTimeInSec) {
            $.batchTimeInSec = batchTimeInSec;
            return this;
        }

        /**
         * @param batchTimeInSec (Updatable) Time limit (seconds) for batch sent to invoke the function.
         * 
         * @return builder
         * 
         */
        public Builder batchTimeInSec(Integer batchTimeInSec) {
            return batchTimeInSec(Output.of(batchTimeInSec));
        }

        /**
         * @param condition (Updatable) A filter or mask to limit the source used in the flow defined by the service connector.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition (Updatable) A filter or mask to limit the source used in the flow defined by the service connector.
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param functionId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function to be used as a task.
         * 
         * @return builder
         * 
         */
        public Builder functionId(@Nullable Output<String> functionId) {
            $.functionId = functionId;
            return this;
        }

        /**
         * @param functionId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function to be used as a task.
         * 
         * @return builder
         * 
         */
        public Builder functionId(String functionId) {
            return functionId(Output.of(functionId));
        }

        /**
         * @param kind (Updatable) The type descriminator.
         * 
         * @return builder
         * 
         */
        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind (Updatable) The type descriminator.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public ConnectorTaskArgs build() {
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            return $;
        }
    }

}
