// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiAnomalyDetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelModelTrainingResultSignalDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelModelTrainingResultSignalDetailArgs Empty = new ModelModelTrainingResultSignalDetailArgs();

    /**
     * detailed information for a signal.
     * 
     */
    @Import(name="details")
    private @Nullable Output<String> details;

    /**
     * @return detailed information for a signal.
     * 
     */
    public Optional<Output<String>> details() {
        return Optional.ofNullable(this.details);
    }

    /**
     * Accuracy metric for a signal.
     * 
     */
    @Import(name="fap")
    private @Nullable Output<Double> fap;

    /**
     * @return Accuracy metric for a signal.
     * 
     */
    public Optional<Output<Double>> fap() {
        return Optional.ofNullable(this.fap);
    }

    /**
     * A boolean value to indicate if a signal is quantized or not.
     * 
     */
    @Import(name="isQuantized")
    private @Nullable Output<Boolean> isQuantized;

    /**
     * @return A boolean value to indicate if a signal is quantized or not.
     * 
     */
    public Optional<Output<Boolean>> isQuantized() {
        return Optional.ofNullable(this.isQuantized);
    }

    /**
     * Max value within a signal.
     * 
     */
    @Import(name="max")
    private @Nullable Output<Double> max;

    /**
     * @return Max value within a signal.
     * 
     */
    public Optional<Output<Double>> max() {
        return Optional.ofNullable(this.max);
    }

    /**
     * Min value within a signal.
     * 
     */
    @Import(name="min")
    private @Nullable Output<Double> min;

    /**
     * @return Min value within a signal.
     * 
     */
    public Optional<Output<Double>> min() {
        return Optional.ofNullable(this.min);
    }

    /**
     * The ratio of missing values in a signal filled/imputed by the IDP algorithm.
     * 
     */
    @Import(name="mviRatio")
    private @Nullable Output<Double> mviRatio;

    /**
     * @return The ratio of missing values in a signal filled/imputed by the IDP algorithm.
     * 
     */
    public Optional<Output<Double>> mviRatio() {
        return Optional.ofNullable(this.mviRatio);
    }

    /**
     * The name of a signal.
     * 
     */
    @Import(name="signalName")
    private @Nullable Output<String> signalName;

    /**
     * @return The name of a signal.
     * 
     */
    public Optional<Output<String>> signalName() {
        return Optional.ofNullable(this.signalName);
    }

    /**
     * Status of the signal:
     * * ACCEPTED - the signal is used for training the model
     * * DROPPED - the signal does not meet requirement, and is dropped before training the model.
     * * OTHER - placeholder for other status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the signal:
     * * ACCEPTED - the signal is used for training the model
     * * DROPPED - the signal does not meet requirement, and is dropped before training the model.
     * * OTHER - placeholder for other status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Standard deviation of values within a signal.
     * 
     */
    @Import(name="std")
    private @Nullable Output<Double> std;

    /**
     * @return Standard deviation of values within a signal.
     * 
     */
    public Optional<Output<Double>> std() {
        return Optional.ofNullable(this.std);
    }

    private ModelModelTrainingResultSignalDetailArgs() {}

    private ModelModelTrainingResultSignalDetailArgs(ModelModelTrainingResultSignalDetailArgs $) {
        this.details = $.details;
        this.fap = $.fap;
        this.isQuantized = $.isQuantized;
        this.max = $.max;
        this.min = $.min;
        this.mviRatio = $.mviRatio;
        this.signalName = $.signalName;
        this.status = $.status;
        this.std = $.std;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelModelTrainingResultSignalDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelModelTrainingResultSignalDetailArgs $;

        public Builder() {
            $ = new ModelModelTrainingResultSignalDetailArgs();
        }

        public Builder(ModelModelTrainingResultSignalDetailArgs defaults) {
            $ = new ModelModelTrainingResultSignalDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param details detailed information for a signal.
         * 
         * @return builder
         * 
         */
        public Builder details(@Nullable Output<String> details) {
            $.details = details;
            return this;
        }

        /**
         * @param details detailed information for a signal.
         * 
         * @return builder
         * 
         */
        public Builder details(String details) {
            return details(Output.of(details));
        }

        /**
         * @param fap Accuracy metric for a signal.
         * 
         * @return builder
         * 
         */
        public Builder fap(@Nullable Output<Double> fap) {
            $.fap = fap;
            return this;
        }

        /**
         * @param fap Accuracy metric for a signal.
         * 
         * @return builder
         * 
         */
        public Builder fap(Double fap) {
            return fap(Output.of(fap));
        }

        /**
         * @param isQuantized A boolean value to indicate if a signal is quantized or not.
         * 
         * @return builder
         * 
         */
        public Builder isQuantized(@Nullable Output<Boolean> isQuantized) {
            $.isQuantized = isQuantized;
            return this;
        }

        /**
         * @param isQuantized A boolean value to indicate if a signal is quantized or not.
         * 
         * @return builder
         * 
         */
        public Builder isQuantized(Boolean isQuantized) {
            return isQuantized(Output.of(isQuantized));
        }

        /**
         * @param max Max value within a signal.
         * 
         * @return builder
         * 
         */
        public Builder max(@Nullable Output<Double> max) {
            $.max = max;
            return this;
        }

        /**
         * @param max Max value within a signal.
         * 
         * @return builder
         * 
         */
        public Builder max(Double max) {
            return max(Output.of(max));
        }

        /**
         * @param min Min value within a signal.
         * 
         * @return builder
         * 
         */
        public Builder min(@Nullable Output<Double> min) {
            $.min = min;
            return this;
        }

        /**
         * @param min Min value within a signal.
         * 
         * @return builder
         * 
         */
        public Builder min(Double min) {
            return min(Output.of(min));
        }

        /**
         * @param mviRatio The ratio of missing values in a signal filled/imputed by the IDP algorithm.
         * 
         * @return builder
         * 
         */
        public Builder mviRatio(@Nullable Output<Double> mviRatio) {
            $.mviRatio = mviRatio;
            return this;
        }

        /**
         * @param mviRatio The ratio of missing values in a signal filled/imputed by the IDP algorithm.
         * 
         * @return builder
         * 
         */
        public Builder mviRatio(Double mviRatio) {
            return mviRatio(Output.of(mviRatio));
        }

        /**
         * @param signalName The name of a signal.
         * 
         * @return builder
         * 
         */
        public Builder signalName(@Nullable Output<String> signalName) {
            $.signalName = signalName;
            return this;
        }

        /**
         * @param signalName The name of a signal.
         * 
         * @return builder
         * 
         */
        public Builder signalName(String signalName) {
            return signalName(Output.of(signalName));
        }

        /**
         * @param status Status of the signal:
         * * ACCEPTED - the signal is used for training the model
         * * DROPPED - the signal does not meet requirement, and is dropped before training the model.
         * * OTHER - placeholder for other status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the signal:
         * * ACCEPTED - the signal is used for training the model
         * * DROPPED - the signal does not meet requirement, and is dropped before training the model.
         * * OTHER - placeholder for other status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param std Standard deviation of values within a signal.
         * 
         * @return builder
         * 
         */
        public Builder std(@Nullable Output<Double> std) {
            $.std = std;
            return this;
        }

        /**
         * @param std Standard deviation of values within a signal.
         * 
         * @return builder
         * 
         */
        public Builder std(Double std) {
            return std(Output.of(std));
        }

        public ModelModelTrainingResultSignalDetailArgs build() {
            return $;
        }
    }

}
