// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs Empty = new DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs();

    /**
     * (Updatable) A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
     * 
     */
    @Import(name="cacheKeyAdditions")
    private @Nullable Output<List<String>> cacheKeyAdditions;

    /**
     * @return (Updatable) A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
     * 
     */
    public Optional<Output<List<String>>> cacheKeyAdditions() {
        return Optional.ofNullable(this.cacheKeyAdditions);
    }

    /**
     * (Updatable) Whether this policy is currently enabled.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return (Updatable) Whether this policy is currently enabled.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * (Updatable) Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
     * 
     */
    @Import(name="isPrivateCachingEnabled")
    private @Nullable Output<Boolean> isPrivateCachingEnabled;

    /**
     * @return (Updatable) Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
     * 
     */
    public Optional<Output<Boolean>> isPrivateCachingEnabled() {
        return Optional.ofNullable(this.isPrivateCachingEnabled);
    }

    /**
     * (Updatable) Type of the Response Cache Store Policy.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Type of the Response Cache Store Policy.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs() {}

    private DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs(DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs $) {
        this.cacheKeyAdditions = $.cacheKeyAdditions;
        this.isEnabled = $.isEnabled;
        this.isPrivateCachingEnabled = $.isPrivateCachingEnabled;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs();
        }

        public Builder(DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs defaults) {
            $ = new DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheKeyAdditions (Updatable) A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
         * 
         * @return builder
         * 
         */
        public Builder cacheKeyAdditions(@Nullable Output<List<String>> cacheKeyAdditions) {
            $.cacheKeyAdditions = cacheKeyAdditions;
            return this;
        }

        /**
         * @param cacheKeyAdditions (Updatable) A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
         * 
         * @return builder
         * 
         */
        public Builder cacheKeyAdditions(List<String> cacheKeyAdditions) {
            return cacheKeyAdditions(Output.of(cacheKeyAdditions));
        }

        /**
         * @param cacheKeyAdditions (Updatable) A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
         * 
         * @return builder
         * 
         */
        public Builder cacheKeyAdditions(String... cacheKeyAdditions) {
            return cacheKeyAdditions(List.of(cacheKeyAdditions));
        }

        /**
         * @param isEnabled (Updatable) Whether this policy is currently enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) Whether this policy is currently enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param isPrivateCachingEnabled (Updatable) Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
         * 
         * @return builder
         * 
         */
        public Builder isPrivateCachingEnabled(@Nullable Output<Boolean> isPrivateCachingEnabled) {
            $.isPrivateCachingEnabled = isPrivateCachingEnabled;
            return this;
        }

        /**
         * @param isPrivateCachingEnabled (Updatable) Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
         * 
         * @return builder
         * 
         */
        public Builder isPrivateCachingEnabled(Boolean isPrivateCachingEnabled) {
            return isPrivateCachingEnabled(Output.of(isPrivateCachingEnabled));
        }

        /**
         * @param type (Updatable) Type of the Response Cache Store Policy.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Type of the Response Cache Store Policy.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
