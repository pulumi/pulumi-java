// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.GetTargetDatabasesSchemasFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTargetDatabasesSchemasArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTargetDatabasesSchemasArgs Empty = new GetTargetDatabasesSchemasArgs();

    @Import(name="filters")
    private @Nullable List<GetTargetDatabasesSchemasFilter> filters;

    public Optional<List<GetTargetDatabasesSchemasFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only items related to specific type of schema.
     * 
     */
    @Import(name="isOracleMaintained")
    private @Nullable Boolean isOracleMaintained;

    /**
     * @return A filter to return only items related to specific type of schema.
     * 
     */
    public Optional<Boolean> isOracleMaintained() {
        return Optional.ofNullable(this.isOracleMaintained);
    }

    /**
     * A filter to return only items if schema name contains a specific string.
     * 
     */
    @Import(name="schemaNameContains")
    private @Nullable String schemaNameContains;

    /**
     * @return A filter to return only items if schema name contains a specific string.
     * 
     */
    public Optional<String> schemaNameContains() {
        return Optional.ofNullable(this.schemaNameContains);
    }

    /**
     * A filter to return only items related to specific schema name.
     * 
     */
    @Import(name="schemaNames")
    private @Nullable List<String> schemaNames;

    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public Optional<List<String>> schemaNames() {
        return Optional.ofNullable(this.schemaNames);
    }

    /**
     * The OCID of the Data Safe target database.
     * 
     */
    @Import(name="targetDatabaseId", required=true)
    private String targetDatabaseId;

    /**
     * @return The OCID of the Data Safe target database.
     * 
     */
    public String targetDatabaseId() {
        return this.targetDatabaseId;
    }

    private GetTargetDatabasesSchemasArgs() {}

    private GetTargetDatabasesSchemasArgs(GetTargetDatabasesSchemasArgs $) {
        this.filters = $.filters;
        this.isOracleMaintained = $.isOracleMaintained;
        this.schemaNameContains = $.schemaNameContains;
        this.schemaNames = $.schemaNames;
        this.targetDatabaseId = $.targetDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTargetDatabasesSchemasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTargetDatabasesSchemasArgs $;

        public Builder() {
            $ = new GetTargetDatabasesSchemasArgs();
        }

        public Builder(GetTargetDatabasesSchemasArgs defaults) {
            $ = new GetTargetDatabasesSchemasArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetTargetDatabasesSchemasFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetTargetDatabasesSchemasFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isOracleMaintained A filter to return only items related to specific type of schema.
         * 
         * @return builder
         * 
         */
        public Builder isOracleMaintained(@Nullable Boolean isOracleMaintained) {
            $.isOracleMaintained = isOracleMaintained;
            return this;
        }

        /**
         * @param schemaNameContains A filter to return only items if schema name contains a specific string.
         * 
         * @return builder
         * 
         */
        public Builder schemaNameContains(@Nullable String schemaNameContains) {
            $.schemaNameContains = schemaNameContains;
            return this;
        }

        /**
         * @param schemaNames A filter to return only items related to specific schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaNames(@Nullable List<String> schemaNames) {
            $.schemaNames = schemaNames;
            return this;
        }

        /**
         * @param schemaNames A filter to return only items related to specific schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaNames(String... schemaNames) {
            return schemaNames(List.of(schemaNames));
        }

        /**
         * @param targetDatabaseId The OCID of the Data Safe target database.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseId(String targetDatabaseId) {
            $.targetDatabaseId = targetDatabaseId;
            return this;
        }

        public GetTargetDatabasesSchemasArgs build() {
            $.targetDatabaseId = Objects.requireNonNull($.targetDatabaseId, "expected parameter 'targetDatabaseId' to be non-null");
            return $;
        }
    }

}
