// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemAnalyticsCluster;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemBackupPolicy;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemChannel;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemCurrentPlacement;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemDeletionPolicy;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemEndpoint;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemHeatWaveCluster;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemMaintenance;
import com.pulumi.oci.Mysql.outputs.GetMysqlDbSystemsDbSystemSource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMysqlDbSystemsDbSystem {
    private final String adminPassword;
    private final String adminUsername;
    /**
     * @return DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
     * 
     */
    private final List<GetMysqlDbSystemsDbSystemAnalyticsCluster> analyticsClusters;
    /**
     * @return The availability domain in which the DB System is placed.
     * 
     */
    private final String availabilityDomain;
    /**
     * @return The Backup policy for the DB System.
     * 
     */
    private final List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies;
    /**
     * @return A list with a summary of all the Channels attached to the DB System.
     * 
     */
    private final List<GetMysqlDbSystemsDbSystemChannel> channels;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private final String compartmentId;
    /**
     * @return The requested Configuration instance.
     * 
     */
    private final String configurationId;
    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    private final String crashRecovery;
    /**
     * @return The availability domain and fault domain a DB System is placed in.
     * 
     */
    private final List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements;
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    private final Integer dataStorageSizeInGb;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    private final List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies;
    /**
     * @return User-provided data about the DB System.
     * 
     */
    private final String description;
    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    private final String displayName;
    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    private final List<GetMysqlDbSystemsDbSystemEndpoint> endpoints;
    /**
     * @return The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    private final String faultDomain;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return A summary of a HeatWave cluster.
     * 
     */
    private final List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters;
    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    private final String hostnameLabel;
    /**
     * @return The OCID of the DB System.
     * 
     */
    private final String id;
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    private final String ipAddress;
    /**
     * @return DEPRECATED -- please use HeatWave API instead. If true, return only DB Systems with an Analytics Cluster attached, if false return only DB Systems with no Analytics Cluster attached. If not present, return all DB Systems.
     * 
     */
    private final Boolean isAnalyticsClusterAttached;
    /**
     * @return If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
     * 
     */
    private final Boolean isHeatWaveClusterAttached;
    /**
     * @return If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
     * 
     */
    private final Boolean isHighlyAvailable;
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return The Maintenance Policy for the DB System.
     * 
     */
    private final List<GetMysqlDbSystemsDbSystemMaintenance> maintenances;
    /**
     * @return Name of the MySQL Version in use for the DB System.
     * 
     * @deprecated
     * The &#39;mysql_version&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_version' field has been deprecated and may be removed in a future version. Do not use this field. */
    private final String mysqlVersion;
    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    private final Integer port;
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    private final Integer portX;
    /**
     * @return The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
     * 
     */
    private final String shapeName;
    private final String shutdownType;
    /**
     * @return Parameters detailing how to provision the initial data of the DB System.
     * 
     */
    private final List<GetMysqlDbSystemsDbSystemSource> sources;
    /**
     * @return DbSystem Lifecycle State
     * 
     */
    private final String state;
    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    private final String subnetId;
    /**
     * @return The date and time the DB System was created.
     * 
     */
    private final String timeCreated;
    /**
     * @return The time the DB System was last updated.
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetMysqlDbSystemsDbSystem(
        @CustomType.Parameter("adminPassword") String adminPassword,
        @CustomType.Parameter("adminUsername") String adminUsername,
        @CustomType.Parameter("analyticsClusters") List<GetMysqlDbSystemsDbSystemAnalyticsCluster> analyticsClusters,
        @CustomType.Parameter("availabilityDomain") String availabilityDomain,
        @CustomType.Parameter("backupPolicies") List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies,
        @CustomType.Parameter("channels") List<GetMysqlDbSystemsDbSystemChannel> channels,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("configurationId") String configurationId,
        @CustomType.Parameter("crashRecovery") String crashRecovery,
        @CustomType.Parameter("currentPlacements") List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements,
        @CustomType.Parameter("dataStorageSizeInGb") Integer dataStorageSizeInGb,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("deletionPolicies") List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("endpoints") List<GetMysqlDbSystemsDbSystemEndpoint> endpoints,
        @CustomType.Parameter("faultDomain") String faultDomain,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("heatWaveClusters") List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters,
        @CustomType.Parameter("hostnameLabel") String hostnameLabel,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ipAddress") String ipAddress,
        @CustomType.Parameter("isAnalyticsClusterAttached") Boolean isAnalyticsClusterAttached,
        @CustomType.Parameter("isHeatWaveClusterAttached") Boolean isHeatWaveClusterAttached,
        @CustomType.Parameter("isHighlyAvailable") Boolean isHighlyAvailable,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("maintenances") List<GetMysqlDbSystemsDbSystemMaintenance> maintenances,
        @CustomType.Parameter("mysqlVersion") String mysqlVersion,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("portX") Integer portX,
        @CustomType.Parameter("shapeName") String shapeName,
        @CustomType.Parameter("shutdownType") String shutdownType,
        @CustomType.Parameter("sources") List<GetMysqlDbSystemsDbSystemSource> sources,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("subnetId") String subnetId,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.adminPassword = adminPassword;
        this.adminUsername = adminUsername;
        this.analyticsClusters = analyticsClusters;
        this.availabilityDomain = availabilityDomain;
        this.backupPolicies = backupPolicies;
        this.channels = channels;
        this.compartmentId = compartmentId;
        this.configurationId = configurationId;
        this.crashRecovery = crashRecovery;
        this.currentPlacements = currentPlacements;
        this.dataStorageSizeInGb = dataStorageSizeInGb;
        this.definedTags = definedTags;
        this.deletionPolicies = deletionPolicies;
        this.description = description;
        this.displayName = displayName;
        this.endpoints = endpoints;
        this.faultDomain = faultDomain;
        this.freeformTags = freeformTags;
        this.heatWaveClusters = heatWaveClusters;
        this.hostnameLabel = hostnameLabel;
        this.id = id;
        this.ipAddress = ipAddress;
        this.isAnalyticsClusterAttached = isAnalyticsClusterAttached;
        this.isHeatWaveClusterAttached = isHeatWaveClusterAttached;
        this.isHighlyAvailable = isHighlyAvailable;
        this.lifecycleDetails = lifecycleDetails;
        this.maintenances = maintenances;
        this.mysqlVersion = mysqlVersion;
        this.port = port;
        this.portX = portX;
        this.shapeName = shapeName;
        this.shutdownType = shutdownType;
        this.sources = sources;
        this.state = state;
        this.subnetId = subnetId;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    public String adminPassword() {
        return this.adminPassword;
    }
    public String adminUsername() {
        return this.adminUsername;
    }
    /**
     * @return DEPRECATED -- please use HeatWave API instead. A summary of an Analytics Cluster.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemAnalyticsCluster> analyticsClusters() {
        return this.analyticsClusters;
    }
    /**
     * @return The availability domain in which the DB System is placed.
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The Backup policy for the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies() {
        return this.backupPolicies;
    }
    /**
     * @return A list with a summary of all the Channels attached to the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemChannel> channels() {
        return this.channels;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The requested Configuration instance.
     * 
     */
    public String configurationId() {
        return this.configurationId;
    }
    /**
     * @return Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
     * 
     */
    public String crashRecovery() {
        return this.crashRecovery;
    }
    /**
     * @return The availability domain and fault domain a DB System is placed in.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements() {
        return this.currentPlacements;
    }
    /**
     * @return Initial size of the data volume in GiBs that will be created and attached.
     * 
     */
    public Integer dataStorageSizeInGb() {
        return this.dataStorageSizeInGb;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The Deletion policy for the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies() {
        return this.deletionPolicies;
    }
    /**
     * @return User-provided data about the DB System.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The network endpoints available for this DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemEndpoint> endpoints() {
        return this.endpoints;
    }
    /**
     * @return The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
     * 
     */
    public String faultDomain() {
        return this.faultDomain;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return A summary of a HeatWave cluster.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters() {
        return this.heatWaveClusters;
    }
    /**
     * @return The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, &#34;dbsystem-1&#34; in FQDN &#34;dbsystem-1.subnet123.vcn1.oraclevcn.com&#34;). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
     * 
     */
    public String hostnameLabel() {
        return this.hostnameLabel;
    }
    /**
     * @return The OCID of the DB System.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet&#39;s CIDR. This will be a &#34;dotted-quad&#34; style IPv4 address.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return DEPRECATED -- please use HeatWave API instead. If true, return only DB Systems with an Analytics Cluster attached, if false return only DB Systems with no Analytics Cluster attached. If not present, return all DB Systems.
     * 
     */
    public Boolean isAnalyticsClusterAttached() {
        return this.isAnalyticsClusterAttached;
    }
    /**
     * @return If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
     * 
     */
    public Boolean isHeatWaveClusterAttached() {
        return this.isHeatWaveClusterAttached;
    }
    /**
     * @return If the policy is to enable high availability of the instance, by maintaining secondary/failover capacity as necessary.
     * 
     */
    public Boolean isHighlyAvailable() {
        return this.isHighlyAvailable;
    }
    /**
     * @return Additional information about the current lifecycleState.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The Maintenance Policy for the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemMaintenance> maintenances() {
        return this.maintenances;
    }
    /**
     * @return Name of the MySQL Version in use for the DB System.
     * 
     * @deprecated
     * The &#39;mysql_version&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'mysql_version' field has been deprecated and may be removed in a future version. Do not use this field. */
    public String mysqlVersion() {
        return this.mysqlVersion;
    }
    /**
     * @return The port for primary endpoint of the DB System to listen on.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
     * 
     */
    public Integer portX() {
        return this.portX;
    }
    /**
     * @return The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
     * 
     */
    public String shapeName() {
        return this.shapeName;
    }
    public String shutdownType() {
        return this.shutdownType;
    }
    /**
     * @return Parameters detailing how to provision the initial data of the DB System.
     * 
     */
    public List<GetMysqlDbSystemsDbSystemSource> sources() {
        return this.sources;
    }
    /**
     * @return DbSystem Lifecycle State
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of the subnet the DB System is associated with.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The date and time the DB System was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the DB System was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlDbSystemsDbSystem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String adminPassword;
        private String adminUsername;
        private List<GetMysqlDbSystemsDbSystemAnalyticsCluster> analyticsClusters;
        private String availabilityDomain;
        private List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies;
        private List<GetMysqlDbSystemsDbSystemChannel> channels;
        private String compartmentId;
        private String configurationId;
        private String crashRecovery;
        private List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements;
        private Integer dataStorageSizeInGb;
        private Map<String,Object> definedTags;
        private List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies;
        private String description;
        private String displayName;
        private List<GetMysqlDbSystemsDbSystemEndpoint> endpoints;
        private String faultDomain;
        private Map<String,Object> freeformTags;
        private List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters;
        private String hostnameLabel;
        private String id;
        private String ipAddress;
        private Boolean isAnalyticsClusterAttached;
        private Boolean isHeatWaveClusterAttached;
        private Boolean isHighlyAvailable;
        private String lifecycleDetails;
        private List<GetMysqlDbSystemsDbSystemMaintenance> maintenances;
        private String mysqlVersion;
        private Integer port;
        private Integer portX;
        private String shapeName;
        private String shutdownType;
        private List<GetMysqlDbSystemsDbSystemSource> sources;
        private String state;
        private String subnetId;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMysqlDbSystemsDbSystem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.adminUsername = defaults.adminUsername;
    	      this.analyticsClusters = defaults.analyticsClusters;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.backupPolicies = defaults.backupPolicies;
    	      this.channels = defaults.channels;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configurationId = defaults.configurationId;
    	      this.crashRecovery = defaults.crashRecovery;
    	      this.currentPlacements = defaults.currentPlacements;
    	      this.dataStorageSizeInGb = defaults.dataStorageSizeInGb;
    	      this.definedTags = defaults.definedTags;
    	      this.deletionPolicies = defaults.deletionPolicies;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.endpoints = defaults.endpoints;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.heatWaveClusters = defaults.heatWaveClusters;
    	      this.hostnameLabel = defaults.hostnameLabel;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isAnalyticsClusterAttached = defaults.isAnalyticsClusterAttached;
    	      this.isHeatWaveClusterAttached = defaults.isHeatWaveClusterAttached;
    	      this.isHighlyAvailable = defaults.isHighlyAvailable;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maintenances = defaults.maintenances;
    	      this.mysqlVersion = defaults.mysqlVersion;
    	      this.port = defaults.port;
    	      this.portX = defaults.portX;
    	      this.shapeName = defaults.shapeName;
    	      this.shutdownType = defaults.shutdownType;
    	      this.sources = defaults.sources;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder adminPassword(String adminPassword) {
            this.adminPassword = Objects.requireNonNull(adminPassword);
            return this;
        }
        public Builder adminUsername(String adminUsername) {
            this.adminUsername = Objects.requireNonNull(adminUsername);
            return this;
        }
        public Builder analyticsClusters(List<GetMysqlDbSystemsDbSystemAnalyticsCluster> analyticsClusters) {
            this.analyticsClusters = Objects.requireNonNull(analyticsClusters);
            return this;
        }
        public Builder analyticsClusters(GetMysqlDbSystemsDbSystemAnalyticsCluster... analyticsClusters) {
            return analyticsClusters(List.of(analyticsClusters));
        }
        public Builder availabilityDomain(String availabilityDomain) {
            this.availabilityDomain = Objects.requireNonNull(availabilityDomain);
            return this;
        }
        public Builder backupPolicies(List<GetMysqlDbSystemsDbSystemBackupPolicy> backupPolicies) {
            this.backupPolicies = Objects.requireNonNull(backupPolicies);
            return this;
        }
        public Builder backupPolicies(GetMysqlDbSystemsDbSystemBackupPolicy... backupPolicies) {
            return backupPolicies(List.of(backupPolicies));
        }
        public Builder channels(List<GetMysqlDbSystemsDbSystemChannel> channels) {
            this.channels = Objects.requireNonNull(channels);
            return this;
        }
        public Builder channels(GetMysqlDbSystemsDbSystemChannel... channels) {
            return channels(List.of(channels));
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder configurationId(String configurationId) {
            this.configurationId = Objects.requireNonNull(configurationId);
            return this;
        }
        public Builder crashRecovery(String crashRecovery) {
            this.crashRecovery = Objects.requireNonNull(crashRecovery);
            return this;
        }
        public Builder currentPlacements(List<GetMysqlDbSystemsDbSystemCurrentPlacement> currentPlacements) {
            this.currentPlacements = Objects.requireNonNull(currentPlacements);
            return this;
        }
        public Builder currentPlacements(GetMysqlDbSystemsDbSystemCurrentPlacement... currentPlacements) {
            return currentPlacements(List.of(currentPlacements));
        }
        public Builder dataStorageSizeInGb(Integer dataStorageSizeInGb) {
            this.dataStorageSizeInGb = Objects.requireNonNull(dataStorageSizeInGb);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder deletionPolicies(List<GetMysqlDbSystemsDbSystemDeletionPolicy> deletionPolicies) {
            this.deletionPolicies = Objects.requireNonNull(deletionPolicies);
            return this;
        }
        public Builder deletionPolicies(GetMysqlDbSystemsDbSystemDeletionPolicy... deletionPolicies) {
            return deletionPolicies(List.of(deletionPolicies));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder endpoints(List<GetMysqlDbSystemsDbSystemEndpoint> endpoints) {
            this.endpoints = Objects.requireNonNull(endpoints);
            return this;
        }
        public Builder endpoints(GetMysqlDbSystemsDbSystemEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        public Builder faultDomain(String faultDomain) {
            this.faultDomain = Objects.requireNonNull(faultDomain);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder heatWaveClusters(List<GetMysqlDbSystemsDbSystemHeatWaveCluster> heatWaveClusters) {
            this.heatWaveClusters = Objects.requireNonNull(heatWaveClusters);
            return this;
        }
        public Builder heatWaveClusters(GetMysqlDbSystemsDbSystemHeatWaveCluster... heatWaveClusters) {
            return heatWaveClusters(List.of(heatWaveClusters));
        }
        public Builder hostnameLabel(String hostnameLabel) {
            this.hostnameLabel = Objects.requireNonNull(hostnameLabel);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        public Builder isAnalyticsClusterAttached(Boolean isAnalyticsClusterAttached) {
            this.isAnalyticsClusterAttached = Objects.requireNonNull(isAnalyticsClusterAttached);
            return this;
        }
        public Builder isHeatWaveClusterAttached(Boolean isHeatWaveClusterAttached) {
            this.isHeatWaveClusterAttached = Objects.requireNonNull(isHeatWaveClusterAttached);
            return this;
        }
        public Builder isHighlyAvailable(Boolean isHighlyAvailable) {
            this.isHighlyAvailable = Objects.requireNonNull(isHighlyAvailable);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder maintenances(List<GetMysqlDbSystemsDbSystemMaintenance> maintenances) {
            this.maintenances = Objects.requireNonNull(maintenances);
            return this;
        }
        public Builder maintenances(GetMysqlDbSystemsDbSystemMaintenance... maintenances) {
            return maintenances(List.of(maintenances));
        }
        public Builder mysqlVersion(String mysqlVersion) {
            this.mysqlVersion = Objects.requireNonNull(mysqlVersion);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder portX(Integer portX) {
            this.portX = Objects.requireNonNull(portX);
            return this;
        }
        public Builder shapeName(String shapeName) {
            this.shapeName = Objects.requireNonNull(shapeName);
            return this;
        }
        public Builder shutdownType(String shutdownType) {
            this.shutdownType = Objects.requireNonNull(shutdownType);
            return this;
        }
        public Builder sources(List<GetMysqlDbSystemsDbSystemSource> sources) {
            this.sources = Objects.requireNonNull(sources);
            return this;
        }
        public Builder sources(GetMysqlDbSystemsDbSystemSource... sources) {
            return sources(List.of(sources));
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetMysqlDbSystemsDbSystem build() {
            return new GetMysqlDbSystemsDbSystem(adminPassword, adminUsername, analyticsClusters, availabilityDomain, backupPolicies, channels, compartmentId, configurationId, crashRecovery, currentPlacements, dataStorageSizeInGb, definedTags, deletionPolicies, description, displayName, endpoints, faultDomain, freeformTags, heatWaveClusters, hostnameLabel, id, ipAddress, isAnalyticsClusterAttached, isHeatWaveClusterAttached, isHighlyAvailable, lifecycleDetails, maintenances, mysqlVersion, port, portX, shapeName, shutdownType, sources, state, subnetId, timeCreated, timeUpdated);
        }
    }
}
