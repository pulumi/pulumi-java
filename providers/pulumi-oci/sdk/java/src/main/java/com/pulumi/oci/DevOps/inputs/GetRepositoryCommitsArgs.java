// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.GetRepositoryCommitsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryCommitsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryCommitsArgs Empty = new GetRepositoryCommitsArgs();

    /**
     * A filter to return any commits that are pushed by the requested author.
     * 
     */
    @Import(name="authorName")
    private @Nullable Output<String> authorName;

    /**
     * @return A filter to return any commits that are pushed by the requested author.
     * 
     */
    public Optional<Output<String>> authorName() {
        return Optional.ofNullable(this.authorName);
    }

    /**
     * A filter to return any commits that contains the given message.
     * 
     */
    @Import(name="commitMessage")
    private @Nullable Output<String> commitMessage;

    /**
     * @return A filter to return any commits that contains the given message.
     * 
     */
    public Optional<Output<String>> commitMessage() {
        return Optional.ofNullable(this.commitMessage);
    }

    /**
     * A filter to exclude commits that match the given reference name.
     * 
     */
    @Import(name="excludeRefName")
    private @Nullable Output<String> excludeRefName;

    /**
     * @return A filter to exclude commits that match the given reference name.
     * 
     */
    public Optional<Output<String>> excludeRefName() {
        return Optional.ofNullable(this.excludeRefName);
    }

    /**
     * A filter to return only commits that affect any of the specified paths.
     * 
     */
    @Import(name="filePath")
    private @Nullable Output<String> filePath;

    /**
     * @return A filter to return only commits that affect any of the specified paths.
     * 
     */
    public Optional<Output<String>> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetRepositoryCommitsFilterArgs>> filters;

    public Optional<Output<List<GetRepositoryCommitsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources that match the given reference name.
     * 
     */
    @Import(name="refName")
    private @Nullable Output<String> refName;

    /**
     * @return A filter to return only resources that match the given reference name.
     * 
     */
    public Optional<Output<String>> refName() {
        return Optional.ofNullable(this.refName);
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    /**
     * A filter to return commits only created after the specified timestamp value.
     * 
     */
    @Import(name="timestampGreaterThanOrEqualTo")
    private @Nullable Output<String> timestampGreaterThanOrEqualTo;

    /**
     * @return A filter to return commits only created after the specified timestamp value.
     * 
     */
    public Optional<Output<String>> timestampGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timestampGreaterThanOrEqualTo);
    }

    /**
     * A filter to return commits only created before the specified timestamp value.
     * 
     */
    @Import(name="timestampLessThanOrEqualTo")
    private @Nullable Output<String> timestampLessThanOrEqualTo;

    /**
     * @return A filter to return commits only created before the specified timestamp value.
     * 
     */
    public Optional<Output<String>> timestampLessThanOrEqualTo() {
        return Optional.ofNullable(this.timestampLessThanOrEqualTo);
    }

    private GetRepositoryCommitsArgs() {}

    private GetRepositoryCommitsArgs(GetRepositoryCommitsArgs $) {
        this.authorName = $.authorName;
        this.commitMessage = $.commitMessage;
        this.excludeRefName = $.excludeRefName;
        this.filePath = $.filePath;
        this.filters = $.filters;
        this.refName = $.refName;
        this.repositoryId = $.repositoryId;
        this.timestampGreaterThanOrEqualTo = $.timestampGreaterThanOrEqualTo;
        this.timestampLessThanOrEqualTo = $.timestampLessThanOrEqualTo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryCommitsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryCommitsArgs $;

        public Builder() {
            $ = new GetRepositoryCommitsArgs();
        }

        public Builder(GetRepositoryCommitsArgs defaults) {
            $ = new GetRepositoryCommitsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorName A filter to return any commits that are pushed by the requested author.
         * 
         * @return builder
         * 
         */
        public Builder authorName(@Nullable Output<String> authorName) {
            $.authorName = authorName;
            return this;
        }

        /**
         * @param authorName A filter to return any commits that are pushed by the requested author.
         * 
         * @return builder
         * 
         */
        public Builder authorName(String authorName) {
            return authorName(Output.of(authorName));
        }

        /**
         * @param commitMessage A filter to return any commits that contains the given message.
         * 
         * @return builder
         * 
         */
        public Builder commitMessage(@Nullable Output<String> commitMessage) {
            $.commitMessage = commitMessage;
            return this;
        }

        /**
         * @param commitMessage A filter to return any commits that contains the given message.
         * 
         * @return builder
         * 
         */
        public Builder commitMessage(String commitMessage) {
            return commitMessage(Output.of(commitMessage));
        }

        /**
         * @param excludeRefName A filter to exclude commits that match the given reference name.
         * 
         * @return builder
         * 
         */
        public Builder excludeRefName(@Nullable Output<String> excludeRefName) {
            $.excludeRefName = excludeRefName;
            return this;
        }

        /**
         * @param excludeRefName A filter to exclude commits that match the given reference name.
         * 
         * @return builder
         * 
         */
        public Builder excludeRefName(String excludeRefName) {
            return excludeRefName(Output.of(excludeRefName));
        }

        /**
         * @param filePath A filter to return only commits that affect any of the specified paths.
         * 
         * @return builder
         * 
         */
        public Builder filePath(@Nullable Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath A filter to return only commits that affect any of the specified paths.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        public Builder filters(@Nullable Output<List<GetRepositoryCommitsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetRepositoryCommitsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetRepositoryCommitsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param refName A filter to return only resources that match the given reference name.
         * 
         * @return builder
         * 
         */
        public Builder refName(@Nullable Output<String> refName) {
            $.refName = refName;
            return this;
        }

        /**
         * @param refName A filter to return only resources that match the given reference name.
         * 
         * @return builder
         * 
         */
        public Builder refName(String refName) {
            return refName(Output.of(refName));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        /**
         * @param timestampGreaterThanOrEqualTo A filter to return commits only created after the specified timestamp value.
         * 
         * @return builder
         * 
         */
        public Builder timestampGreaterThanOrEqualTo(@Nullable Output<String> timestampGreaterThanOrEqualTo) {
            $.timestampGreaterThanOrEqualTo = timestampGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timestampGreaterThanOrEqualTo A filter to return commits only created after the specified timestamp value.
         * 
         * @return builder
         * 
         */
        public Builder timestampGreaterThanOrEqualTo(String timestampGreaterThanOrEqualTo) {
            return timestampGreaterThanOrEqualTo(Output.of(timestampGreaterThanOrEqualTo));
        }

        /**
         * @param timestampLessThanOrEqualTo A filter to return commits only created before the specified timestamp value.
         * 
         * @return builder
         * 
         */
        public Builder timestampLessThanOrEqualTo(@Nullable Output<String> timestampLessThanOrEqualTo) {
            $.timestampLessThanOrEqualTo = timestampLessThanOrEqualTo;
            return this;
        }

        /**
         * @param timestampLessThanOrEqualTo A filter to return commits only created before the specified timestamp value.
         * 
         * @return builder
         * 
         */
        public Builder timestampLessThanOrEqualTo(String timestampLessThanOrEqualTo) {
            return timestampLessThanOrEqualTo(Output.of(timestampLessThanOrEqualTo));
        }

        public GetRepositoryCommitsArgs build() {
            $.repositoryId = Objects.requireNonNull($.repositoryId, "expected parameter 'repositoryId' to be non-null");
            return $;
        }
    }

}
