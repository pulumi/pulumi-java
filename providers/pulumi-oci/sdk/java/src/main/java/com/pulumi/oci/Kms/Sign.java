// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Kms.SignArgs;
import com.pulumi.oci.Kms.inputs.SignState;
import com.pulumi.oci.Utilities;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * This resource provides the Sign resource in Oracle Cloud Infrastructure Kms service.
 * 
 * Creates a digital signature for a message or message digest by using the private key of a public-private key pair,
 * also known as an asymmetric key. To verify the generated signature, you can use the [Verify](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/VerifiedData/Verify)
 * operation. Or, if you want to validate the signature outside of the service, you can do so by using the public key of the same asymmetric key.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Sign can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:Kms/sign:Sign test_sign &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Kms/sign:Sign")
public class Sign extends com.pulumi.resources.CustomResource {
    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39;, &#39;GenerateDataEncryptionKey&#39;, &#39;Sign&#39; and &#39;Verify&#39; operations. see Vault Crypto endpoint.
     * 
     */
    @Export(name="cryptoEndpoint", type=String.class, parameters={})
    private Output<String> cryptoEndpoint;

    /**
     * @return The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39;, &#39;GenerateDataEncryptionKey&#39;, &#39;Sign&#39; and &#39;Verify&#39; operations. see Vault Crypto endpoint.
     * 
     */
    public Output<String> cryptoEndpoint() {
        return this.cryptoEndpoint;
    }
    /**
     * The OCID of the key used to sign the message.
     * 
     */
    @Export(name="keyId", type=String.class, parameters={})
    private Output<String> keyId;

    /**
     * @return The OCID of the key used to sign the message.
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }
    /**
     * The OCID of the key version used to sign the message.
     * 
     */
    @Export(name="keyVersionId", type=String.class, parameters={})
    private Output<String> keyVersionId;

    /**
     * @return The OCID of the key version used to sign the message.
     * 
     */
    public Output<String> keyVersionId() {
        return this.keyVersionId;
    }
    /**
     * The base64-encoded binary data object denoting the message or message digest to sign. You can have a message up to 4096 bytes in size. To sign a larger message, provide the message digest.
     * 
     */
    @Export(name="message", type=String.class, parameters={})
    private Output<String> message;

    /**
     * @return The base64-encoded binary data object denoting the message or message digest to sign. You can have a message up to 4096 bytes in size. To sign a larger message, provide the message digest.
     * 
     */
    public Output<String> message() {
        return this.message;
    }
    /**
     * Denotes whether the value of the message parameter is a raw message or a message digest.  The default value, `RAW`, indicates a message. To indicate a message digest, use `DIGEST`.
     * 
     */
    @Export(name="messageType", type=String.class, parameters={})
    private Output<String> messageType;

    /**
     * @return Denotes whether the value of the message parameter is a raw message or a message digest.  The default value, `RAW`, indicates a message. To indicate a message digest, use `DIGEST`.
     * 
     */
    public Output<String> messageType() {
        return this.messageType;
    }
    /**
     * The base64-encoded binary data object denoting the cryptographic signature generated for the message or message digest.
     * 
     */
    @Export(name="signature", type=String.class, parameters={})
    private Output<String> signature;

    /**
     * @return The base64-encoded binary data object denoting the cryptographic signature generated for the message or message digest.
     * 
     */
    public Output<String> signature() {
        return this.signature;
    }
    /**
     * The algorithm to use to sign the message or message digest. For RSA keys, supported signature schemes include PKCS #1 and RSASSA-PSS, along with  different hashing algorithms.  For ECDSA keys, ECDSA is the supported signature scheme with different hashing algorithms. When you pass a message digest for signing, ensure that you specify the same hashing algorithm  as used when creating the message digest.
     * 
     */
    @Export(name="signingAlgorithm", type=String.class, parameters={})
    private Output<String> signingAlgorithm;

    /**
     * @return The algorithm to use to sign the message or message digest. For RSA keys, supported signature schemes include PKCS #1 and RSASSA-PSS, along with  different hashing algorithms.  For ECDSA keys, ECDSA is the supported signature scheme with different hashing algorithms. When you pass a message digest for signing, ensure that you specify the same hashing algorithm  as used when creating the message digest.
     * 
     */
    public Output<String> signingAlgorithm() {
        return this.signingAlgorithm;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Sign(String name) {
        this(name, SignArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Sign(String name, SignArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Sign(String name, SignArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Kms/sign:Sign", name, args == null ? SignArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Sign(String name, Output<String> id, @Nullable SignState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Kms/sign:Sign", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Sign get(String name, Output<String> id, @Nullable SignState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Sign(name, id, state, options);
    }
}
