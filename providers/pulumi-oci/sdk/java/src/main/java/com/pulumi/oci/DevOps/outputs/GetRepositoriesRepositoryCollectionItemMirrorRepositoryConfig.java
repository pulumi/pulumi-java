// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerSchedule;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfig {
    /**
     * @return Upstream git repository connection identifer.
     * 
     */
    private final String connectorId;
    /**
     * @return URL of external repository you want to mirror.
     * 
     */
    private final String repositoryUrl;
    /**
     * @return Specifies a trigger schedule. Timing information for when to initiate automated syncs.
     * 
     */
    private final List<GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerSchedule> triggerSchedules;

    @CustomType.Constructor
    private GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfig(
        @CustomType.Parameter("connectorId") String connectorId,
        @CustomType.Parameter("repositoryUrl") String repositoryUrl,
        @CustomType.Parameter("triggerSchedules") List<GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerSchedule> triggerSchedules) {
        this.connectorId = connectorId;
        this.repositoryUrl = repositoryUrl;
        this.triggerSchedules = triggerSchedules;
    }

    /**
     * @return Upstream git repository connection identifer.
     * 
     */
    public String connectorId() {
        return this.connectorId;
    }
    /**
     * @return URL of external repository you want to mirror.
     * 
     */
    public String repositoryUrl() {
        return this.repositoryUrl;
    }
    /**
     * @return Specifies a trigger schedule. Timing information for when to initiate automated syncs.
     * 
     */
    public List<GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerSchedule> triggerSchedules() {
        return this.triggerSchedules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String connectorId;
        private String repositoryUrl;
        private List<GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerSchedule> triggerSchedules;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorId = defaults.connectorId;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.triggerSchedules = defaults.triggerSchedules;
        }

        public Builder connectorId(String connectorId) {
            this.connectorId = Objects.requireNonNull(connectorId);
            return this;
        }
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = Objects.requireNonNull(repositoryUrl);
            return this;
        }
        public Builder triggerSchedules(List<GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerSchedule> triggerSchedules) {
            this.triggerSchedules = Objects.requireNonNull(triggerSchedules);
            return this;
        }
        public Builder triggerSchedules(GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerSchedule... triggerSchedules) {
            return triggerSchedules(List.of(triggerSchedules));
        }        public GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfig build() {
            return new GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfig(connectorId, repositoryUrl, triggerSchedules);
        }
    }
}
