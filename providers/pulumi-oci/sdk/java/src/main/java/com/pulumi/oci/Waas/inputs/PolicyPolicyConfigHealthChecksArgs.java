// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyPolicyConfigHealthChecksArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyPolicyConfigHealthChecksArgs Empty = new PolicyPolicyConfigHealthChecksArgs();

    /**
     * (Updatable) The HTTP response codes that signify a healthy state.
     * * **2XX:** Success response code group.
     * * **3XX:** Redirection response code group.
     * * **4XX:** Client errors response code group.
     * * **5XX:** Server errors response code group.
     * 
     */
    @Import(name="expectedResponseCodeGroups")
    private @Nullable Output<List<String>> expectedResponseCodeGroups;

    /**
     * @return (Updatable) The HTTP response codes that signify a healthy state.
     * * **2XX:** Success response code group.
     * * **3XX:** Redirection response code group.
     * * **4XX:** Client errors response code group.
     * * **5XX:** Server errors response code group.
     * 
     */
    public Optional<Output<List<String>>> expectedResponseCodeGroups() {
        return Optional.ofNullable(this.expectedResponseCodeGroups);
    }

    /**
     * (Updatable) Health check will search for the given text in a case-sensitive manner within the response body and will fail if the text is not found.
     * 
     */
    @Import(name="expectedResponseText")
    private @Nullable Output<String> expectedResponseText;

    /**
     * @return (Updatable) Health check will search for the given text in a case-sensitive manner within the response body and will fail if the text is not found.
     * 
     */
    public Optional<Output<String>> expectedResponseText() {
        return Optional.ofNullable(this.expectedResponseText);
    }

    /**
     * (Updatable) HTTP header fields to include in health check requests, expressed as `&#34;name&#34;: &#34;value&#34;` properties. Because HTTP header field names are case-insensitive, any use of names that are case-insensitive equal to other names will be rejected. If Host is not specified, requests will include a Host header field with value matching the policy&#39;s protected domain. If User-Agent is not specified, requests will include a User-Agent header field with value &#34;waf health checks&#34;.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<Map<String,Object>> headers;

    /**
     * @return (Updatable) HTTP header fields to include in health check requests, expressed as `&#34;name&#34;: &#34;value&#34;` properties. Because HTTP header field names are case-insensitive, any use of names that are case-insensitive equal to other names will be rejected. If Host is not specified, requests will include a Host header field with value matching the policy&#39;s protected domain. If User-Agent is not specified, requests will include a User-Agent header field with value &#34;waf health checks&#34;.
     * 
     */
    public Optional<Output<Map<String,Object>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * (Updatable) Number of successful health checks after which the server is marked up.
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    /**
     * @return (Updatable) Number of successful health checks after which the server is marked up.
     * 
     */
    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * (Updatable) Time between health checks of an individual origin server, in seconds.
     * 
     */
    @Import(name="intervalInSeconds")
    private @Nullable Output<Integer> intervalInSeconds;

    /**
     * @return (Updatable) Time between health checks of an individual origin server, in seconds.
     * 
     */
    public Optional<Output<Integer>> intervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }

    /**
     * (Updatable) Enables or disables the JavaScript challenge Web Application Firewall feature.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return (Updatable) Enables or disables the JavaScript challenge Web Application Firewall feature.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * (Updatable) Enables or disables additional check for predefined text in addition to response code.
     * 
     */
    @Import(name="isResponseTextCheckEnabled")
    private @Nullable Output<Boolean> isResponseTextCheckEnabled;

    /**
     * @return (Updatable) Enables or disables additional check for predefined text in addition to response code.
     * 
     */
    public Optional<Output<Boolean>> isResponseTextCheckEnabled() {
        return Optional.ofNullable(this.isResponseTextCheckEnabled);
    }

    /**
     * (Updatable) Load balancing methods are algorithms used to efficiently distribute traffic among origin servers.
     * * **[IP_HASH](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/IPHashLoadBalancingMethod):** All the incoming requests from the same client IP address should go to the same content origination server. IP_HASH load balancing method uses origin weights when choosing which origin should the hash be assigned to initially.
     * * **[ROUND_ROBIN](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/RoundRobinLoadBalancingMethod):** Forwards requests sequentially to the available origin servers. The first request - to the first origin server, the second request - to the next origin server, and so on. After it sends a request to the last origin server, it starts again with the first origin server. When using weights on origins, Weighted Round Robin assigns more requests to origins with a greater weight. Over a period of time, origins will receive a number of requests in proportion to their weight.
     * * **[STICKY_COOKIE](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/StickyCookieLoadBalancingMethod):** Adds a session cookie to the first response from the origin server and identifies the server that sent the response. The client&#39;s next request contains the cookie value, and nginx routes the request to the origin server that responded to the first request. STICKY_COOKIE load balancing method falls back to Round Robin for the first request.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return (Updatable) Load balancing methods are algorithms used to efficiently distribute traffic among origin servers.
     * * **[IP_HASH](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/IPHashLoadBalancingMethod):** All the incoming requests from the same client IP address should go to the same content origination server. IP_HASH load balancing method uses origin weights when choosing which origin should the hash be assigned to initially.
     * * **[ROUND_ROBIN](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/RoundRobinLoadBalancingMethod):** Forwards requests sequentially to the available origin servers. The first request - to the first origin server, the second request - to the next origin server, and so on. After it sends a request to the last origin server, it starts again with the first origin server. When using weights on origins, Weighted Round Robin assigns more requests to origins with a greater weight. Over a period of time, origins will receive a number of requests in proportion to their weight.
     * * **[STICKY_COOKIE](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/StickyCookieLoadBalancingMethod):** Adds a session cookie to the first response from the origin server and identifies the server that sent the response. The client&#39;s next request contains the cookie value, and nginx routes the request to the origin server that responded to the first request. STICKY_COOKIE load balancing method falls back to Round Robin for the first request.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * (Updatable) Path to visit on your origins when performing the health check.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return (Updatable) Path to visit on your origins when performing the health check.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * (Updatable) Response timeout represents wait time until request is considered failed, in seconds.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Integer> timeoutInSeconds;

    /**
     * @return (Updatable) Response timeout represents wait time until request is considered failed, in seconds.
     * 
     */
    public Optional<Output<Integer>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * (Updatable) Number of failed health checks after which the server is marked down.
     * 
     */
    @Import(name="unhealthyThreshold")
    private @Nullable Output<Integer> unhealthyThreshold;

    /**
     * @return (Updatable) Number of failed health checks after which the server is marked down.
     * 
     */
    public Optional<Output<Integer>> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    private PolicyPolicyConfigHealthChecksArgs() {}

    private PolicyPolicyConfigHealthChecksArgs(PolicyPolicyConfigHealthChecksArgs $) {
        this.expectedResponseCodeGroups = $.expectedResponseCodeGroups;
        this.expectedResponseText = $.expectedResponseText;
        this.headers = $.headers;
        this.healthyThreshold = $.healthyThreshold;
        this.intervalInSeconds = $.intervalInSeconds;
        this.isEnabled = $.isEnabled;
        this.isResponseTextCheckEnabled = $.isResponseTextCheckEnabled;
        this.method = $.method;
        this.path = $.path;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyPolicyConfigHealthChecksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyPolicyConfigHealthChecksArgs $;

        public Builder() {
            $ = new PolicyPolicyConfigHealthChecksArgs();
        }

        public Builder(PolicyPolicyConfigHealthChecksArgs defaults) {
            $ = new PolicyPolicyConfigHealthChecksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expectedResponseCodeGroups (Updatable) The HTTP response codes that signify a healthy state.
         * * **2XX:** Success response code group.
         * * **3XX:** Redirection response code group.
         * * **4XX:** Client errors response code group.
         * * **5XX:** Server errors response code group.
         * 
         * @return builder
         * 
         */
        public Builder expectedResponseCodeGroups(@Nullable Output<List<String>> expectedResponseCodeGroups) {
            $.expectedResponseCodeGroups = expectedResponseCodeGroups;
            return this;
        }

        /**
         * @param expectedResponseCodeGroups (Updatable) The HTTP response codes that signify a healthy state.
         * * **2XX:** Success response code group.
         * * **3XX:** Redirection response code group.
         * * **4XX:** Client errors response code group.
         * * **5XX:** Server errors response code group.
         * 
         * @return builder
         * 
         */
        public Builder expectedResponseCodeGroups(List<String> expectedResponseCodeGroups) {
            return expectedResponseCodeGroups(Output.of(expectedResponseCodeGroups));
        }

        /**
         * @param expectedResponseCodeGroups (Updatable) The HTTP response codes that signify a healthy state.
         * * **2XX:** Success response code group.
         * * **3XX:** Redirection response code group.
         * * **4XX:** Client errors response code group.
         * * **5XX:** Server errors response code group.
         * 
         * @return builder
         * 
         */
        public Builder expectedResponseCodeGroups(String... expectedResponseCodeGroups) {
            return expectedResponseCodeGroups(List.of(expectedResponseCodeGroups));
        }

        /**
         * @param expectedResponseText (Updatable) Health check will search for the given text in a case-sensitive manner within the response body and will fail if the text is not found.
         * 
         * @return builder
         * 
         */
        public Builder expectedResponseText(@Nullable Output<String> expectedResponseText) {
            $.expectedResponseText = expectedResponseText;
            return this;
        }

        /**
         * @param expectedResponseText (Updatable) Health check will search for the given text in a case-sensitive manner within the response body and will fail if the text is not found.
         * 
         * @return builder
         * 
         */
        public Builder expectedResponseText(String expectedResponseText) {
            return expectedResponseText(Output.of(expectedResponseText));
        }

        /**
         * @param headers (Updatable) HTTP header fields to include in health check requests, expressed as `&#34;name&#34;: &#34;value&#34;` properties. Because HTTP header field names are case-insensitive, any use of names that are case-insensitive equal to other names will be rejected. If Host is not specified, requests will include a Host header field with value matching the policy&#39;s protected domain. If User-Agent is not specified, requests will include a User-Agent header field with value &#34;waf health checks&#34;.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<Map<String,Object>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers (Updatable) HTTP header fields to include in health check requests, expressed as `&#34;name&#34;: &#34;value&#34;` properties. Because HTTP header field names are case-insensitive, any use of names that are case-insensitive equal to other names will be rejected. If Host is not specified, requests will include a Host header field with value matching the policy&#39;s protected domain. If User-Agent is not specified, requests will include a User-Agent header field with value &#34;waf health checks&#34;.
         * 
         * @return builder
         * 
         */
        public Builder headers(Map<String,Object> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param healthyThreshold (Updatable) Number of successful health checks after which the server is marked up.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold (Updatable) Number of successful health checks after which the server is marked up.
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param intervalInSeconds (Updatable) Time between health checks of an individual origin server, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder intervalInSeconds(@Nullable Output<Integer> intervalInSeconds) {
            $.intervalInSeconds = intervalInSeconds;
            return this;
        }

        /**
         * @param intervalInSeconds (Updatable) Time between health checks of an individual origin server, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder intervalInSeconds(Integer intervalInSeconds) {
            return intervalInSeconds(Output.of(intervalInSeconds));
        }

        /**
         * @param isEnabled (Updatable) Enables or disables the JavaScript challenge Web Application Firewall feature.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) Enables or disables the JavaScript challenge Web Application Firewall feature.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param isResponseTextCheckEnabled (Updatable) Enables or disables additional check for predefined text in addition to response code.
         * 
         * @return builder
         * 
         */
        public Builder isResponseTextCheckEnabled(@Nullable Output<Boolean> isResponseTextCheckEnabled) {
            $.isResponseTextCheckEnabled = isResponseTextCheckEnabled;
            return this;
        }

        /**
         * @param isResponseTextCheckEnabled (Updatable) Enables or disables additional check for predefined text in addition to response code.
         * 
         * @return builder
         * 
         */
        public Builder isResponseTextCheckEnabled(Boolean isResponseTextCheckEnabled) {
            return isResponseTextCheckEnabled(Output.of(isResponseTextCheckEnabled));
        }

        /**
         * @param method (Updatable) Load balancing methods are algorithms used to efficiently distribute traffic among origin servers.
         * * **[IP_HASH](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/IPHashLoadBalancingMethod):** All the incoming requests from the same client IP address should go to the same content origination server. IP_HASH load balancing method uses origin weights when choosing which origin should the hash be assigned to initially.
         * * **[ROUND_ROBIN](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/RoundRobinLoadBalancingMethod):** Forwards requests sequentially to the available origin servers. The first request - to the first origin server, the second request - to the next origin server, and so on. After it sends a request to the last origin server, it starts again with the first origin server. When using weights on origins, Weighted Round Robin assigns more requests to origins with a greater weight. Over a period of time, origins will receive a number of requests in proportion to their weight.
         * * **[STICKY_COOKIE](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/StickyCookieLoadBalancingMethod):** Adds a session cookie to the first response from the origin server and identifies the server that sent the response. The client&#39;s next request contains the cookie value, and nginx routes the request to the origin server that responded to the first request. STICKY_COOKIE load balancing method falls back to Round Robin for the first request.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method (Updatable) Load balancing methods are algorithms used to efficiently distribute traffic among origin servers.
         * * **[IP_HASH](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/IPHashLoadBalancingMethod):** All the incoming requests from the same client IP address should go to the same content origination server. IP_HASH load balancing method uses origin weights when choosing which origin should the hash be assigned to initially.
         * * **[ROUND_ROBIN](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/RoundRobinLoadBalancingMethod):** Forwards requests sequentially to the available origin servers. The first request - to the first origin server, the second request - to the next origin server, and so on. After it sends a request to the last origin server, it starts again with the first origin server. When using weights on origins, Weighted Round Robin assigns more requests to origins with a greater weight. Over a period of time, origins will receive a number of requests in proportion to their weight.
         * * **[STICKY_COOKIE](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/StickyCookieLoadBalancingMethod):** Adds a session cookie to the first response from the origin server and identifies the server that sent the response. The client&#39;s next request contains the cookie value, and nginx routes the request to the origin server that responded to the first request. STICKY_COOKIE load balancing method falls back to Round Robin for the first request.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param path (Updatable) Path to visit on your origins when performing the health check.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path (Updatable) Path to visit on your origins when performing the health check.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param timeoutInSeconds (Updatable) Response timeout represents wait time until request is considered failed, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(@Nullable Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds (Updatable) Response timeout represents wait time until request is considered failed, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        /**
         * @param unhealthyThreshold (Updatable) Number of failed health checks after which the server is marked down.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        /**
         * @param unhealthyThreshold (Updatable) Number of failed health checks after which the server is marked down.
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        public PolicyPolicyConfigHealthChecksArgs build() {
            return $;
        }
    }

}
