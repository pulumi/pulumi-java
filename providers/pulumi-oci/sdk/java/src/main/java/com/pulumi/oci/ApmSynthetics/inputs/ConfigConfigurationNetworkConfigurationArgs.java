// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigConfigurationNetworkConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigConfigurationNetworkConfigurationArgs Empty = new ConfigConfigurationNetworkConfigurationArgs();

    /**
     * (Updatable) Number of hops.
     * 
     */
    @Import(name="numberOfHops")
    private @Nullable Output<Integer> numberOfHops;

    /**
     * @return (Updatable) Number of hops.
     * 
     */
    public Optional<Output<Integer>> numberOfHops() {
        return Optional.ofNullable(this.numberOfHops);
    }

    /**
     * (Updatable) Type of probe mode when TCP protocol is selected.
     * 
     */
    @Import(name="probeMode")
    private @Nullable Output<String> probeMode;

    /**
     * @return (Updatable) Type of probe mode when TCP protocol is selected.
     * 
     */
    public Optional<Output<String>> probeMode() {
        return Optional.ofNullable(this.probeMode);
    }

    /**
     * (Updatable) Number of probes per hop.
     * 
     */
    @Import(name="probePerHop")
    private @Nullable Output<Integer> probePerHop;

    /**
     * @return (Updatable) Number of probes per hop.
     * 
     */
    public Optional<Output<Integer>> probePerHop() {
        return Optional.ofNullable(this.probePerHop);
    }

    /**
     * (Updatable) Type of protocol.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return (Updatable) Type of protocol.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * (Updatable) Number of probe packets sent out simultaneously.
     * 
     */
    @Import(name="transmissionRate")
    private @Nullable Output<Integer> transmissionRate;

    /**
     * @return (Updatable) Number of probe packets sent out simultaneously.
     * 
     */
    public Optional<Output<Integer>> transmissionRate() {
        return Optional.ofNullable(this.transmissionRate);
    }

    private ConfigConfigurationNetworkConfigurationArgs() {}

    private ConfigConfigurationNetworkConfigurationArgs(ConfigConfigurationNetworkConfigurationArgs $) {
        this.numberOfHops = $.numberOfHops;
        this.probeMode = $.probeMode;
        this.probePerHop = $.probePerHop;
        this.protocol = $.protocol;
        this.transmissionRate = $.transmissionRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigConfigurationNetworkConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigConfigurationNetworkConfigurationArgs $;

        public Builder() {
            $ = new ConfigConfigurationNetworkConfigurationArgs();
        }

        public Builder(ConfigConfigurationNetworkConfigurationArgs defaults) {
            $ = new ConfigConfigurationNetworkConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param numberOfHops (Updatable) Number of hops.
         * 
         * @return builder
         * 
         */
        public Builder numberOfHops(@Nullable Output<Integer> numberOfHops) {
            $.numberOfHops = numberOfHops;
            return this;
        }

        /**
         * @param numberOfHops (Updatable) Number of hops.
         * 
         * @return builder
         * 
         */
        public Builder numberOfHops(Integer numberOfHops) {
            return numberOfHops(Output.of(numberOfHops));
        }

        /**
         * @param probeMode (Updatable) Type of probe mode when TCP protocol is selected.
         * 
         * @return builder
         * 
         */
        public Builder probeMode(@Nullable Output<String> probeMode) {
            $.probeMode = probeMode;
            return this;
        }

        /**
         * @param probeMode (Updatable) Type of probe mode when TCP protocol is selected.
         * 
         * @return builder
         * 
         */
        public Builder probeMode(String probeMode) {
            return probeMode(Output.of(probeMode));
        }

        /**
         * @param probePerHop (Updatable) Number of probes per hop.
         * 
         * @return builder
         * 
         */
        public Builder probePerHop(@Nullable Output<Integer> probePerHop) {
            $.probePerHop = probePerHop;
            return this;
        }

        /**
         * @param probePerHop (Updatable) Number of probes per hop.
         * 
         * @return builder
         * 
         */
        public Builder probePerHop(Integer probePerHop) {
            return probePerHop(Output.of(probePerHop));
        }

        /**
         * @param protocol (Updatable) Type of protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Updatable) Type of protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param transmissionRate (Updatable) Number of probe packets sent out simultaneously.
         * 
         * @return builder
         * 
         */
        public Builder transmissionRate(@Nullable Output<Integer> transmissionRate) {
            $.transmissionRate = transmissionRate;
            return this;
        }

        /**
         * @param transmissionRate (Updatable) Number of probe packets sent out simultaneously.
         * 
         * @return builder
         * 
         */
        public Builder transmissionRate(Integer transmissionRate) {
            return transmissionRate(Output.of(transmissionRate));
        }

        public ConfigConfigurationNetworkConfigurationArgs build() {
            return $;
        }
    }

}
