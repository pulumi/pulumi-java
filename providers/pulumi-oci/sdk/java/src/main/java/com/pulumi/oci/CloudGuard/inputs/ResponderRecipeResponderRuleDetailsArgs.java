// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CloudGuard.inputs.ResponderRecipeResponderRuleDetailsConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResponderRecipeResponderRuleDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResponderRecipeResponderRuleDetailsArgs Empty = new ResponderRecipeResponderRuleDetailsArgs();

    @Import(name="condition")
    private @Nullable Output<String> condition;

    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * ResponderRule configurations
     * 
     */
    @Import(name="configurations")
    private @Nullable Output<List<ResponderRecipeResponderRuleDetailsConfigurationArgs>> configurations;

    /**
     * @return ResponderRule configurations
     * 
     */
    public Optional<Output<List<ResponderRecipeResponderRuleDetailsConfigurationArgs>>> configurations() {
        return Optional.ofNullable(this.configurations);
    }

    /**
     * (Updatable) Identifies state for ResponderRule
     * 
     */
    @Import(name="isEnabled", required=true)
    private Output<Boolean> isEnabled;

    /**
     * @return (Updatable) Identifies state for ResponderRule
     * 
     */
    public Output<Boolean> isEnabled() {
        return this.isEnabled;
    }

    /**
     * Execution Mode for ResponderRule
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Execution Mode for ResponderRule
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    private ResponderRecipeResponderRuleDetailsArgs() {}

    private ResponderRecipeResponderRuleDetailsArgs(ResponderRecipeResponderRuleDetailsArgs $) {
        this.condition = $.condition;
        this.configurations = $.configurations;
        this.isEnabled = $.isEnabled;
        this.mode = $.mode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResponderRecipeResponderRuleDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResponderRecipeResponderRuleDetailsArgs $;

        public Builder() {
            $ = new ResponderRecipeResponderRuleDetailsArgs();
        }

        public Builder(ResponderRecipeResponderRuleDetailsArgs defaults) {
            $ = new ResponderRecipeResponderRuleDetailsArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param configurations ResponderRule configurations
         * 
         * @return builder
         * 
         */
        public Builder configurations(@Nullable Output<List<ResponderRecipeResponderRuleDetailsConfigurationArgs>> configurations) {
            $.configurations = configurations;
            return this;
        }

        /**
         * @param configurations ResponderRule configurations
         * 
         * @return builder
         * 
         */
        public Builder configurations(List<ResponderRecipeResponderRuleDetailsConfigurationArgs> configurations) {
            return configurations(Output.of(configurations));
        }

        /**
         * @param configurations ResponderRule configurations
         * 
         * @return builder
         * 
         */
        public Builder configurations(ResponderRecipeResponderRuleDetailsConfigurationArgs... configurations) {
            return configurations(List.of(configurations));
        }

        /**
         * @param isEnabled (Updatable) Identifies state for ResponderRule
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) Identifies state for ResponderRule
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param mode Execution Mode for ResponderRule
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Execution Mode for ResponderRule
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public ResponderRecipeResponderRuleDetailsArgs build() {
            $.isEnabled = Objects.requireNonNull($.isEnabled, "expected parameter 'isEnabled' to be non-null");
            return $;
        }
    }

}
