// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Budget.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBudgetsBudget {
    /**
     * @return The actual spend in currency for the current budget cycle
     * 
     */
    private final Double actualSpend;
    /**
     * @return Total number of alert rules in the budget
     * 
     */
    private final Integer alertRuleCount;
    /**
     * @return The amount of the budget expressed in the currency of the customer&#39;s rate card.
     * 
     */
    private final Integer amount;
    /**
     * @return The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
     * 
     */
    private final Integer budgetProcessingPeriodStartOffset;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private final String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return The description of the budget.
     * 
     */
    private final String description;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    private final String displayName;
    /**
     * @return The forecasted spend in currency by the end of the current budget cycle
     * 
     */
    private final Double forecastedSpend;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The OCID of the budget
     * 
     */
    private final String id;
    /**
     * @return The reset period for the budget.
     * 
     */
    private final String resetPeriod;
    /**
     * @return The current state of the resource to filter by.
     * 
     */
    private final String state;
    /**
     * @return This is DEPRECATED. For backwards compatability, the property will be populated when targetType is &#34;COMPARTMENT&#34; AND targets contains EXACT ONE target compartment ocid. For all other scenarios, this property will be left empty.
     * 
     * @deprecated
     * The &#39;target_compartment_id&#39; field has been deprecated. Please use &#39;target_type&#39; instead.
     * 
     */
    @Deprecated /* The 'target_compartment_id' field has been deprecated. Please use 'target_type' instead. */
    private final String targetCompartmentId;
    /**
     * @return The type of target to filter by.
     * * ALL - List all budgets
     * * COMPARTMENT - List all budgets with targetType == &#34;COMPARTMENT&#34;
     * * TAG - List all budgets with targetType == &#34;TAG&#34;
     * 
     */
    private final String targetType;
    /**
     * @return The list of targets on which the budget is applied. If targetType is &#34;COMPARTMENT&#34;, targets contains list of compartment OCIDs. If targetType is &#34;TAG&#34;, targets contains list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;.
     * 
     */
    private final List<String> targets;
    /**
     * @return Time that budget was created
     * 
     */
    private final String timeCreated;
    /**
     * @return The time that the budget spend was last computed
     * 
     */
    private final String timeSpendComputed;
    /**
     * @return Time that budget was updated
     * 
     */
    private final String timeUpdated;
    /**
     * @return Version of the budget. Starts from 1 and increments by 1.
     * 
     */
    private final Integer version;

    @CustomType.Constructor
    private GetBudgetsBudget(
        @CustomType.Parameter("actualSpend") Double actualSpend,
        @CustomType.Parameter("alertRuleCount") Integer alertRuleCount,
        @CustomType.Parameter("amount") Integer amount,
        @CustomType.Parameter("budgetProcessingPeriodStartOffset") Integer budgetProcessingPeriodStartOffset,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("forecastedSpend") Double forecastedSpend,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("resetPeriod") String resetPeriod,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("targetCompartmentId") String targetCompartmentId,
        @CustomType.Parameter("targetType") String targetType,
        @CustomType.Parameter("targets") List<String> targets,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeSpendComputed") String timeSpendComputed,
        @CustomType.Parameter("timeUpdated") String timeUpdated,
        @CustomType.Parameter("version") Integer version) {
        this.actualSpend = actualSpend;
        this.alertRuleCount = alertRuleCount;
        this.amount = amount;
        this.budgetProcessingPeriodStartOffset = budgetProcessingPeriodStartOffset;
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.description = description;
        this.displayName = displayName;
        this.forecastedSpend = forecastedSpend;
        this.freeformTags = freeformTags;
        this.id = id;
        this.resetPeriod = resetPeriod;
        this.state = state;
        this.targetCompartmentId = targetCompartmentId;
        this.targetType = targetType;
        this.targets = targets;
        this.timeCreated = timeCreated;
        this.timeSpendComputed = timeSpendComputed;
        this.timeUpdated = timeUpdated;
        this.version = version;
    }

    /**
     * @return The actual spend in currency for the current budget cycle
     * 
     */
    public Double actualSpend() {
        return this.actualSpend;
    }
    /**
     * @return Total number of alert rules in the budget
     * 
     */
    public Integer alertRuleCount() {
        return this.alertRuleCount;
    }
    /**
     * @return The amount of the budget expressed in the currency of the customer&#39;s rate card.
     * 
     */
    public Integer amount() {
        return this.amount;
    }
    /**
     * @return The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
     * 
     */
    public Integer budgetProcessingPeriodStartOffset() {
        return this.budgetProcessingPeriodStartOffset;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The description of the budget.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The forecasted spend in currency by the end of the current budget cycle
     * 
     */
    public Double forecastedSpend() {
        return this.forecastedSpend;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the budget
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The reset period for the budget.
     * 
     */
    public String resetPeriod() {
        return this.resetPeriod;
    }
    /**
     * @return The current state of the resource to filter by.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return This is DEPRECATED. For backwards compatability, the property will be populated when targetType is &#34;COMPARTMENT&#34; AND targets contains EXACT ONE target compartment ocid. For all other scenarios, this property will be left empty.
     * 
     * @deprecated
     * The &#39;target_compartment_id&#39; field has been deprecated. Please use &#39;target_type&#39; instead.
     * 
     */
    @Deprecated /* The 'target_compartment_id' field has been deprecated. Please use 'target_type' instead. */
    public String targetCompartmentId() {
        return this.targetCompartmentId;
    }
    /**
     * @return The type of target to filter by.
     * * ALL - List all budgets
     * * COMPARTMENT - List all budgets with targetType == &#34;COMPARTMENT&#34;
     * * TAG - List all budgets with targetType == &#34;TAG&#34;
     * 
     */
    public String targetType() {
        return this.targetType;
    }
    /**
     * @return The list of targets on which the budget is applied. If targetType is &#34;COMPARTMENT&#34;, targets contains list of compartment OCIDs. If targetType is &#34;TAG&#34;, targets contains list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;.
     * 
     */
    public List<String> targets() {
        return this.targets;
    }
    /**
     * @return Time that budget was created
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time that the budget spend was last computed
     * 
     */
    public String timeSpendComputed() {
        return this.timeSpendComputed;
    }
    /**
     * @return Time that budget was updated
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Version of the budget. Starts from 1 and increments by 1.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBudgetsBudget defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double actualSpend;
        private Integer alertRuleCount;
        private Integer amount;
        private Integer budgetProcessingPeriodStartOffset;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Double forecastedSpend;
        private Map<String,Object> freeformTags;
        private String id;
        private String resetPeriod;
        private String state;
        private String targetCompartmentId;
        private String targetType;
        private List<String> targets;
        private String timeCreated;
        private String timeSpendComputed;
        private String timeUpdated;
        private Integer version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBudgetsBudget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actualSpend = defaults.actualSpend;
    	      this.alertRuleCount = defaults.alertRuleCount;
    	      this.amount = defaults.amount;
    	      this.budgetProcessingPeriodStartOffset = defaults.budgetProcessingPeriodStartOffset;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.forecastedSpend = defaults.forecastedSpend;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.resetPeriod = defaults.resetPeriod;
    	      this.state = defaults.state;
    	      this.targetCompartmentId = defaults.targetCompartmentId;
    	      this.targetType = defaults.targetType;
    	      this.targets = defaults.targets;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeSpendComputed = defaults.timeSpendComputed;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        public Builder actualSpend(Double actualSpend) {
            this.actualSpend = Objects.requireNonNull(actualSpend);
            return this;
        }
        public Builder alertRuleCount(Integer alertRuleCount) {
            this.alertRuleCount = Objects.requireNonNull(alertRuleCount);
            return this;
        }
        public Builder amount(Integer amount) {
            this.amount = Objects.requireNonNull(amount);
            return this;
        }
        public Builder budgetProcessingPeriodStartOffset(Integer budgetProcessingPeriodStartOffset) {
            this.budgetProcessingPeriodStartOffset = Objects.requireNonNull(budgetProcessingPeriodStartOffset);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder forecastedSpend(Double forecastedSpend) {
            this.forecastedSpend = Objects.requireNonNull(forecastedSpend);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder resetPeriod(String resetPeriod) {
            this.resetPeriod = Objects.requireNonNull(resetPeriod);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder targetCompartmentId(String targetCompartmentId) {
            this.targetCompartmentId = Objects.requireNonNull(targetCompartmentId);
            return this;
        }
        public Builder targetType(String targetType) {
            this.targetType = Objects.requireNonNull(targetType);
            return this;
        }
        public Builder targets(List<String> targets) {
            this.targets = Objects.requireNonNull(targets);
            return this;
        }
        public Builder targets(String... targets) {
            return targets(List.of(targets));
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeSpendComputed(String timeSpendComputed) {
            this.timeSpendComputed = Objects.requireNonNull(timeSpendComputed);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public Builder version(Integer version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public GetBudgetsBudget build() {
            return new GetBudgetsBudget(actualSpend, alertRuleCount, amount, budgetProcessingPeriodStartOffset, compartmentId, definedTags, description, displayName, forecastedSpend, freeformTags, id, resetPeriod, state, targetCompartmentId, targetType, targets, timeCreated, timeSpendComputed, timeUpdated, version);
        }
    }
}
