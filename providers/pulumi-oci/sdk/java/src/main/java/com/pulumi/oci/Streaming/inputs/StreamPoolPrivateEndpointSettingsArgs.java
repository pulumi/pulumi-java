// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Streaming.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamPoolPrivateEndpointSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamPoolPrivateEndpointSettingsArgs Empty = new StreamPoolPrivateEndpointSettingsArgs();

    /**
     * The optional list of network security groups to be used with the private endpoint of the stream pool. That value cannot be changed.
     * 
     */
    @Import(name="nsgIds")
    private @Nullable Output<List<String>> nsgIds;

    /**
     * @return The optional list of network security groups to be used with the private endpoint of the stream pool. That value cannot be changed.
     * 
     */
    public Optional<Output<List<String>>> nsgIds() {
        return Optional.ofNullable(this.nsgIds);
    }

    /**
     * The optional private IP you want to be associated with your private stream pool. That parameter can only be specified when the subnetId parameter is set. It cannot be changed. The private IP needs to be part of the CIDR range of the specified subnetId or the creation will fail. If not specified a random IP inside the subnet will be chosen. After the stream pool is created, a custom FQDN, pointing to this private IP, is created. The FQDN is then used to access the service instead of the private IP.
     * 
     */
    @Import(name="privateEndpointIp")
    private @Nullable Output<String> privateEndpointIp;

    /**
     * @return The optional private IP you want to be associated with your private stream pool. That parameter can only be specified when the subnetId parameter is set. It cannot be changed. The private IP needs to be part of the CIDR range of the specified subnetId or the creation will fail. If not specified a random IP inside the subnet will be chosen. After the stream pool is created, a custom FQDN, pointing to this private IP, is created. The FQDN is then used to access the service instead of the private IP.
     * 
     */
    public Optional<Output<String>> privateEndpointIp() {
        return Optional.ofNullable(this.privateEndpointIp);
    }

    /**
     * If specified, the stream pool will be private and only accessible from inside that subnet. Producing-to and consuming-from a stream inside a private stream pool can also only be done from inside the subnet. That value cannot be changed.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return If specified, the stream pool will be private and only accessible from inside that subnet. Producing-to and consuming-from a stream inside a private stream pool can also only be done from inside the subnet. That value cannot be changed.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    private StreamPoolPrivateEndpointSettingsArgs() {}

    private StreamPoolPrivateEndpointSettingsArgs(StreamPoolPrivateEndpointSettingsArgs $) {
        this.nsgIds = $.nsgIds;
        this.privateEndpointIp = $.privateEndpointIp;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamPoolPrivateEndpointSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamPoolPrivateEndpointSettingsArgs $;

        public Builder() {
            $ = new StreamPoolPrivateEndpointSettingsArgs();
        }

        public Builder(StreamPoolPrivateEndpointSettingsArgs defaults) {
            $ = new StreamPoolPrivateEndpointSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nsgIds The optional list of network security groups to be used with the private endpoint of the stream pool. That value cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(@Nullable Output<List<String>> nsgIds) {
            $.nsgIds = nsgIds;
            return this;
        }

        /**
         * @param nsgIds The optional list of network security groups to be used with the private endpoint of the stream pool. That value cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(List<String> nsgIds) {
            return nsgIds(Output.of(nsgIds));
        }

        /**
         * @param nsgIds The optional list of network security groups to be used with the private endpoint of the stream pool. That value cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }

        /**
         * @param privateEndpointIp The optional private IP you want to be associated with your private stream pool. That parameter can only be specified when the subnetId parameter is set. It cannot be changed. The private IP needs to be part of the CIDR range of the specified subnetId or the creation will fail. If not specified a random IP inside the subnet will be chosen. After the stream pool is created, a custom FQDN, pointing to this private IP, is created. The FQDN is then used to access the service instead of the private IP.
         * 
         * @return builder
         * 
         */
        public Builder privateEndpointIp(@Nullable Output<String> privateEndpointIp) {
            $.privateEndpointIp = privateEndpointIp;
            return this;
        }

        /**
         * @param privateEndpointIp The optional private IP you want to be associated with your private stream pool. That parameter can only be specified when the subnetId parameter is set. It cannot be changed. The private IP needs to be part of the CIDR range of the specified subnetId or the creation will fail. If not specified a random IP inside the subnet will be chosen. After the stream pool is created, a custom FQDN, pointing to this private IP, is created. The FQDN is then used to access the service instead of the private IP.
         * 
         * @return builder
         * 
         */
        public Builder privateEndpointIp(String privateEndpointIp) {
            return privateEndpointIp(Output.of(privateEndpointIp));
        }

        /**
         * @param subnetId If specified, the stream pool will be private and only accessible from inside that subnet. Producing-to and consuming-from a stream inside a private stream pool can also only be done from inside the subnet. That value cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId If specified, the stream pool will be private and only accessible from inside that subnet. Producing-to and consuming-from a stream inside a private stream pool can also only be done from inside the subnet. That value cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public StreamPoolPrivateEndpointSettingsArgs build() {
            return $;
        }
    }

}
