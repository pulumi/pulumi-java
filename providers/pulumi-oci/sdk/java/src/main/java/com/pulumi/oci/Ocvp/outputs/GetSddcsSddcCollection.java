// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Ocvp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Ocvp.outputs.GetSddcsSddcCollectionHcxOnPremLicense;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSddcsSddcCollection {
    /**
     * @return The number of actual ESXi hosts in the SDDC on the cloud. This attribute will be different when esxi Host is added to an existing SDDC.
     * 
     */
    private final Integer actualEsxiHostsCount;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private final String compartmentId;
    /**
     * @return The name of the availability domain that the Compute instances are running in.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private final String computeAvailabilityDomain;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    private final String displayName;
    /**
     * @return The number of ESXi hosts in the SDDC.
     * 
     */
    private final Integer esxiHostsCount;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    private final String hcxAction;
    /**
     * @return The FQDN for HCX Manager.  Example: `hcx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    private final String hcxFqdn;
    /**
     * @return The SDDC includes an administrator username and initial password for HCX Manager. Make sure to change this initial HCX Manager password to a different value.
     * 
     */
    private final String hcxInitialPassword;
    /**
     * @return The activation keys to use on the on-premises HCX Enterprise appliances you site pair with HCX Manager in your VMware Solution. The number of keys provided depends on the HCX license type. HCX Advanced provides 3 activation keys. HCX Enterprise provides 10 activation keys.
     * 
     */
    private final String hcxOnPremKey;
    /**
     * @return The activation licenses to use on the on-premises HCX Enterprise appliance you site pair with HCX Manager in your VMware Solution.
     * 
     */
    private final List<GetSddcsSddcCollectionHcxOnPremLicense> hcxOnPremLicenses;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for HCX Manager. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    private final String hcxPrivateIpId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the HCX component of the VMware environment.
     * 
     */
    private final String hcxVlanId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC.
     * 
     */
    private final String id;
    /**
     * @return The billing option selected during SDDC creation. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
     * 
     */
    private final String initialSku;
    /**
     * @return A prefix used in the name of each ESXi host and Compute instance in the SDDC. If this isn&#39;t set, the SDDC&#39;s `displayName` is used as the prefix.
     * 
     */
    private final String instanceDisplayNamePrefix;
    /**
     * @return Indicates whether HCX is enabled for this SDDC.
     * 
     */
    private final Boolean isHcxEnabled;
    /**
     * @return Indicates whether HCX Enterprise is enabled for this SDDC.
     * 
     */
    private final Boolean isHcxEnterpriseEnabled;
    /**
     * @return Indicates whether SDDC is pending downgrade from HCX Enterprise to HCX Advanced.
     * 
     */
    private final Boolean isHcxPendingDowngrade;
    /**
     * @return Indicates whether shielded instance is enabled at the SDDC level.
     * 
     */
    private final Boolean isShieldedInstanceEnabled;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 1 component of the VMware environment.
     * 
     */
    private final String nsxEdgeUplink1vlanId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 2 component of the VMware environment.
     * 
     */
    private final String nsxEdgeUplink2vlanId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for the NSX Edge Uplink. Use this OCID as the route target for route table rules when setting up connectivity between the SDDC and other networks. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    private final String nsxEdgeUplinkIpId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge VTEP component of the VMware environment.
     * 
     */
    private final String nsxEdgeVtepVlanId;
    /**
     * @return The FQDN for NSX Manager.  Example: `nsx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    private final String nsxManagerFqdn;
    /**
     * @return The SDDC includes an administrator username and initial password for NSX Manager. Make sure to change this initial NSX Manager password to a different value.
     * 
     */
    private final String nsxManagerInitialPassword;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for NSX Manager. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    private final String nsxManagerPrivateIpId;
    /**
     * @return The SDDC includes an administrator username and initial password for NSX Manager. You can change this initial username to a different value in NSX Manager.
     * 
     */
    private final String nsxManagerUsername;
    /**
     * @return The VMware NSX overlay workload segment to host your application. Connect to workload portgroup in vCenter to access this overlay segment.
     * 
     */
    private final String nsxOverlaySegmentName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX VTEP component of the VMware environment.
     * 
     */
    private final String nsxVtepVlanId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management subnet used to provision the SDDC.
     * 
     */
    private final String provisioningSubnetId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the Provisioning component of the VMware environment.
     * 
     */
    private final String provisioningVlanId;
    private final Boolean refreshHcxLicenseStatus;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere Replication component of the VMware environment.
     * 
     */
    private final String replicationVlanId;
    private final List<String> reservingHcxOnPremiseLicenseKeys;
    /**
     * @return One or more public SSH keys to be included in the `~/.ssh/authorized_keys` file for the default user on each ESXi host. Use a newline character to separate multiple keys. The SSH keys must be in the format required for the `authorized_keys` file.
     * 
     */
    private final String sshAuthorizedKeys;
    /**
     * @return The lifecycle state of the resource.
     * 
     */
    private final String state;
    /**
     * @return The date and time the SDDC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private final String timeCreated;
    /**
     * @return The date and time current HCX Enterprise billing cycle ends, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private final String timeHcxBillingCycleEnd;
    /**
     * @return The date and time the SDDC&#39;s HCX on-premise license status was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private final String timeHcxLicenseStatusUpdated;
    /**
     * @return The date and time the SDDC was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private final String timeUpdated;
    /**
     * @return The FQDN for vCenter.  Example: `vcenter-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    private final String vcenterFqdn;
    /**
     * @return The SDDC includes an administrator username and initial password for vCenter. Make sure to change this initial vCenter password to a different value.
     * 
     */
    private final String vcenterInitialPassword;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for vCenter. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    private final String vcenterPrivateIpId;
    /**
     * @return The SDDC includes an administrator username and initial password for vCenter. You can change this initial username to a different value in vCenter.
     * 
     */
    private final String vcenterUsername;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vMotion component of the VMware environment.
     * 
     */
    private final String vmotionVlanId;
    /**
     * @return In general, this is a specific version of bundled VMware software supported by Oracle Cloud VMware Solution (see [ListSupportedVmwareSoftwareVersions](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedVmwareSoftwareVersionSummary/ListSupportedVmwareSoftwareVersions)).
     * 
     */
    private final String vmwareSoftwareVersion;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSAN component of the VMware environment.
     * 
     */
    private final String vsanVlanId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere component of the VMware environment.
     * 
     */
    private final String vsphereVlanId;
    /**
     * @return The CIDR block for the IP addresses that VMware VMs in the SDDC use to run application workloads.
     * 
     */
    private final String workloadNetworkCidr;

    @CustomType.Constructor
    private GetSddcsSddcCollection(
        @CustomType.Parameter("actualEsxiHostsCount") Integer actualEsxiHostsCount,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("computeAvailabilityDomain") String computeAvailabilityDomain,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("esxiHostsCount") Integer esxiHostsCount,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("hcxAction") String hcxAction,
        @CustomType.Parameter("hcxFqdn") String hcxFqdn,
        @CustomType.Parameter("hcxInitialPassword") String hcxInitialPassword,
        @CustomType.Parameter("hcxOnPremKey") String hcxOnPremKey,
        @CustomType.Parameter("hcxOnPremLicenses") List<GetSddcsSddcCollectionHcxOnPremLicense> hcxOnPremLicenses,
        @CustomType.Parameter("hcxPrivateIpId") String hcxPrivateIpId,
        @CustomType.Parameter("hcxVlanId") String hcxVlanId,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("initialSku") String initialSku,
        @CustomType.Parameter("instanceDisplayNamePrefix") String instanceDisplayNamePrefix,
        @CustomType.Parameter("isHcxEnabled") Boolean isHcxEnabled,
        @CustomType.Parameter("isHcxEnterpriseEnabled") Boolean isHcxEnterpriseEnabled,
        @CustomType.Parameter("isHcxPendingDowngrade") Boolean isHcxPendingDowngrade,
        @CustomType.Parameter("isShieldedInstanceEnabled") Boolean isShieldedInstanceEnabled,
        @CustomType.Parameter("nsxEdgeUplink1vlanId") String nsxEdgeUplink1vlanId,
        @CustomType.Parameter("nsxEdgeUplink2vlanId") String nsxEdgeUplink2vlanId,
        @CustomType.Parameter("nsxEdgeUplinkIpId") String nsxEdgeUplinkIpId,
        @CustomType.Parameter("nsxEdgeVtepVlanId") String nsxEdgeVtepVlanId,
        @CustomType.Parameter("nsxManagerFqdn") String nsxManagerFqdn,
        @CustomType.Parameter("nsxManagerInitialPassword") String nsxManagerInitialPassword,
        @CustomType.Parameter("nsxManagerPrivateIpId") String nsxManagerPrivateIpId,
        @CustomType.Parameter("nsxManagerUsername") String nsxManagerUsername,
        @CustomType.Parameter("nsxOverlaySegmentName") String nsxOverlaySegmentName,
        @CustomType.Parameter("nsxVtepVlanId") String nsxVtepVlanId,
        @CustomType.Parameter("provisioningSubnetId") String provisioningSubnetId,
        @CustomType.Parameter("provisioningVlanId") String provisioningVlanId,
        @CustomType.Parameter("refreshHcxLicenseStatus") Boolean refreshHcxLicenseStatus,
        @CustomType.Parameter("replicationVlanId") String replicationVlanId,
        @CustomType.Parameter("reservingHcxOnPremiseLicenseKeys") List<String> reservingHcxOnPremiseLicenseKeys,
        @CustomType.Parameter("sshAuthorizedKeys") String sshAuthorizedKeys,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeHcxBillingCycleEnd") String timeHcxBillingCycleEnd,
        @CustomType.Parameter("timeHcxLicenseStatusUpdated") String timeHcxLicenseStatusUpdated,
        @CustomType.Parameter("timeUpdated") String timeUpdated,
        @CustomType.Parameter("vcenterFqdn") String vcenterFqdn,
        @CustomType.Parameter("vcenterInitialPassword") String vcenterInitialPassword,
        @CustomType.Parameter("vcenterPrivateIpId") String vcenterPrivateIpId,
        @CustomType.Parameter("vcenterUsername") String vcenterUsername,
        @CustomType.Parameter("vmotionVlanId") String vmotionVlanId,
        @CustomType.Parameter("vmwareSoftwareVersion") String vmwareSoftwareVersion,
        @CustomType.Parameter("vsanVlanId") String vsanVlanId,
        @CustomType.Parameter("vsphereVlanId") String vsphereVlanId,
        @CustomType.Parameter("workloadNetworkCidr") String workloadNetworkCidr) {
        this.actualEsxiHostsCount = actualEsxiHostsCount;
        this.compartmentId = compartmentId;
        this.computeAvailabilityDomain = computeAvailabilityDomain;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.esxiHostsCount = esxiHostsCount;
        this.freeformTags = freeformTags;
        this.hcxAction = hcxAction;
        this.hcxFqdn = hcxFqdn;
        this.hcxInitialPassword = hcxInitialPassword;
        this.hcxOnPremKey = hcxOnPremKey;
        this.hcxOnPremLicenses = hcxOnPremLicenses;
        this.hcxPrivateIpId = hcxPrivateIpId;
        this.hcxVlanId = hcxVlanId;
        this.id = id;
        this.initialSku = initialSku;
        this.instanceDisplayNamePrefix = instanceDisplayNamePrefix;
        this.isHcxEnabled = isHcxEnabled;
        this.isHcxEnterpriseEnabled = isHcxEnterpriseEnabled;
        this.isHcxPendingDowngrade = isHcxPendingDowngrade;
        this.isShieldedInstanceEnabled = isShieldedInstanceEnabled;
        this.nsxEdgeUplink1vlanId = nsxEdgeUplink1vlanId;
        this.nsxEdgeUplink2vlanId = nsxEdgeUplink2vlanId;
        this.nsxEdgeUplinkIpId = nsxEdgeUplinkIpId;
        this.nsxEdgeVtepVlanId = nsxEdgeVtepVlanId;
        this.nsxManagerFqdn = nsxManagerFqdn;
        this.nsxManagerInitialPassword = nsxManagerInitialPassword;
        this.nsxManagerPrivateIpId = nsxManagerPrivateIpId;
        this.nsxManagerUsername = nsxManagerUsername;
        this.nsxOverlaySegmentName = nsxOverlaySegmentName;
        this.nsxVtepVlanId = nsxVtepVlanId;
        this.provisioningSubnetId = provisioningSubnetId;
        this.provisioningVlanId = provisioningVlanId;
        this.refreshHcxLicenseStatus = refreshHcxLicenseStatus;
        this.replicationVlanId = replicationVlanId;
        this.reservingHcxOnPremiseLicenseKeys = reservingHcxOnPremiseLicenseKeys;
        this.sshAuthorizedKeys = sshAuthorizedKeys;
        this.state = state;
        this.timeCreated = timeCreated;
        this.timeHcxBillingCycleEnd = timeHcxBillingCycleEnd;
        this.timeHcxLicenseStatusUpdated = timeHcxLicenseStatusUpdated;
        this.timeUpdated = timeUpdated;
        this.vcenterFqdn = vcenterFqdn;
        this.vcenterInitialPassword = vcenterInitialPassword;
        this.vcenterPrivateIpId = vcenterPrivateIpId;
        this.vcenterUsername = vcenterUsername;
        this.vmotionVlanId = vmotionVlanId;
        this.vmwareSoftwareVersion = vmwareSoftwareVersion;
        this.vsanVlanId = vsanVlanId;
        this.vsphereVlanId = vsphereVlanId;
        this.workloadNetworkCidr = workloadNetworkCidr;
    }

    /**
     * @return The number of actual ESXi hosts in the SDDC on the cloud. This attribute will be different when esxi Host is added to an existing SDDC.
     * 
     */
    public Integer actualEsxiHostsCount() {
        return this.actualEsxiHostsCount;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The name of the availability domain that the Compute instances are running in.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public String computeAvailabilityDomain() {
        return this.computeAvailabilityDomain;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The number of ESXi hosts in the SDDC.
     * 
     */
    public Integer esxiHostsCount() {
        return this.esxiHostsCount;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    public String hcxAction() {
        return this.hcxAction;
    }
    /**
     * @return The FQDN for HCX Manager.  Example: `hcx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    public String hcxFqdn() {
        return this.hcxFqdn;
    }
    /**
     * @return The SDDC includes an administrator username and initial password for HCX Manager. Make sure to change this initial HCX Manager password to a different value.
     * 
     */
    public String hcxInitialPassword() {
        return this.hcxInitialPassword;
    }
    /**
     * @return The activation keys to use on the on-premises HCX Enterprise appliances you site pair with HCX Manager in your VMware Solution. The number of keys provided depends on the HCX license type. HCX Advanced provides 3 activation keys. HCX Enterprise provides 10 activation keys.
     * 
     */
    public String hcxOnPremKey() {
        return this.hcxOnPremKey;
    }
    /**
     * @return The activation licenses to use on the on-premises HCX Enterprise appliance you site pair with HCX Manager in your VMware Solution.
     * 
     */
    public List<GetSddcsSddcCollectionHcxOnPremLicense> hcxOnPremLicenses() {
        return this.hcxOnPremLicenses;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for HCX Manager. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    public String hcxPrivateIpId() {
        return this.hcxPrivateIpId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the HCX component of the VMware environment.
     * 
     */
    public String hcxVlanId() {
        return this.hcxVlanId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The billing option selected during SDDC creation. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
     * 
     */
    public String initialSku() {
        return this.initialSku;
    }
    /**
     * @return A prefix used in the name of each ESXi host and Compute instance in the SDDC. If this isn&#39;t set, the SDDC&#39;s `displayName` is used as the prefix.
     * 
     */
    public String instanceDisplayNamePrefix() {
        return this.instanceDisplayNamePrefix;
    }
    /**
     * @return Indicates whether HCX is enabled for this SDDC.
     * 
     */
    public Boolean isHcxEnabled() {
        return this.isHcxEnabled;
    }
    /**
     * @return Indicates whether HCX Enterprise is enabled for this SDDC.
     * 
     */
    public Boolean isHcxEnterpriseEnabled() {
        return this.isHcxEnterpriseEnabled;
    }
    /**
     * @return Indicates whether SDDC is pending downgrade from HCX Enterprise to HCX Advanced.
     * 
     */
    public Boolean isHcxPendingDowngrade() {
        return this.isHcxPendingDowngrade;
    }
    /**
     * @return Indicates whether shielded instance is enabled at the SDDC level.
     * 
     */
    public Boolean isShieldedInstanceEnabled() {
        return this.isShieldedInstanceEnabled;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 1 component of the VMware environment.
     * 
     */
    public String nsxEdgeUplink1vlanId() {
        return this.nsxEdgeUplink1vlanId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 2 component of the VMware environment.
     * 
     */
    public String nsxEdgeUplink2vlanId() {
        return this.nsxEdgeUplink2vlanId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for the NSX Edge Uplink. Use this OCID as the route target for route table rules when setting up connectivity between the SDDC and other networks. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    public String nsxEdgeUplinkIpId() {
        return this.nsxEdgeUplinkIpId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge VTEP component of the VMware environment.
     * 
     */
    public String nsxEdgeVtepVlanId() {
        return this.nsxEdgeVtepVlanId;
    }
    /**
     * @return The FQDN for NSX Manager.  Example: `nsx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    public String nsxManagerFqdn() {
        return this.nsxManagerFqdn;
    }
    /**
     * @return The SDDC includes an administrator username and initial password for NSX Manager. Make sure to change this initial NSX Manager password to a different value.
     * 
     */
    public String nsxManagerInitialPassword() {
        return this.nsxManagerInitialPassword;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for NSX Manager. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    public String nsxManagerPrivateIpId() {
        return this.nsxManagerPrivateIpId;
    }
    /**
     * @return The SDDC includes an administrator username and initial password for NSX Manager. You can change this initial username to a different value in NSX Manager.
     * 
     */
    public String nsxManagerUsername() {
        return this.nsxManagerUsername;
    }
    /**
     * @return The VMware NSX overlay workload segment to host your application. Connect to workload portgroup in vCenter to access this overlay segment.
     * 
     */
    public String nsxOverlaySegmentName() {
        return this.nsxOverlaySegmentName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX VTEP component of the VMware environment.
     * 
     */
    public String nsxVtepVlanId() {
        return this.nsxVtepVlanId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management subnet used to provision the SDDC.
     * 
     */
    public String provisioningSubnetId() {
        return this.provisioningSubnetId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the Provisioning component of the VMware environment.
     * 
     */
    public String provisioningVlanId() {
        return this.provisioningVlanId;
    }
    public Boolean refreshHcxLicenseStatus() {
        return this.refreshHcxLicenseStatus;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere Replication component of the VMware environment.
     * 
     */
    public String replicationVlanId() {
        return this.replicationVlanId;
    }
    public List<String> reservingHcxOnPremiseLicenseKeys() {
        return this.reservingHcxOnPremiseLicenseKeys;
    }
    /**
     * @return One or more public SSH keys to be included in the `~/.ssh/authorized_keys` file for the default user on each ESXi host. Use a newline character to separate multiple keys. The SSH keys must be in the format required for the `authorized_keys` file.
     * 
     */
    public String sshAuthorizedKeys() {
        return this.sshAuthorizedKeys;
    }
    /**
     * @return The lifecycle state of the resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the SDDC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time current HCX Enterprise billing cycle ends, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeHcxBillingCycleEnd() {
        return this.timeHcxBillingCycleEnd;
    }
    /**
     * @return The date and time the SDDC&#39;s HCX on-premise license status was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeHcxLicenseStatusUpdated() {
        return this.timeHcxLicenseStatusUpdated;
    }
    /**
     * @return The date and time the SDDC was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The FQDN for vCenter.  Example: `vcenter-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
     * 
     */
    public String vcenterFqdn() {
        return this.vcenterFqdn;
    }
    /**
     * @return The SDDC includes an administrator username and initial password for vCenter. Make sure to change this initial vCenter password to a different value.
     * 
     */
    public String vcenterInitialPassword() {
        return this.vcenterInitialPassword;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for vCenter. For information about `PrivateIp` objects, see the Core Services API.
     * 
     */
    public String vcenterPrivateIpId() {
        return this.vcenterPrivateIpId;
    }
    /**
     * @return The SDDC includes an administrator username and initial password for vCenter. You can change this initial username to a different value in vCenter.
     * 
     */
    public String vcenterUsername() {
        return this.vcenterUsername;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vMotion component of the VMware environment.
     * 
     */
    public String vmotionVlanId() {
        return this.vmotionVlanId;
    }
    /**
     * @return In general, this is a specific version of bundled VMware software supported by Oracle Cloud VMware Solution (see [ListSupportedVmwareSoftwareVersions](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedVmwareSoftwareVersionSummary/ListSupportedVmwareSoftwareVersions)).
     * 
     */
    public String vmwareSoftwareVersion() {
        return this.vmwareSoftwareVersion;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSAN component of the VMware environment.
     * 
     */
    public String vsanVlanId() {
        return this.vsanVlanId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere component of the VMware environment.
     * 
     */
    public String vsphereVlanId() {
        return this.vsphereVlanId;
    }
    /**
     * @return The CIDR block for the IP addresses that VMware VMs in the SDDC use to run application workloads.
     * 
     */
    public String workloadNetworkCidr() {
        return this.workloadNetworkCidr;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSddcsSddcCollection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer actualEsxiHostsCount;
        private String compartmentId;
        private String computeAvailabilityDomain;
        private Map<String,Object> definedTags;
        private String displayName;
        private Integer esxiHostsCount;
        private Map<String,Object> freeformTags;
        private String hcxAction;
        private String hcxFqdn;
        private String hcxInitialPassword;
        private String hcxOnPremKey;
        private List<GetSddcsSddcCollectionHcxOnPremLicense> hcxOnPremLicenses;
        private String hcxPrivateIpId;
        private String hcxVlanId;
        private String id;
        private String initialSku;
        private String instanceDisplayNamePrefix;
        private Boolean isHcxEnabled;
        private Boolean isHcxEnterpriseEnabled;
        private Boolean isHcxPendingDowngrade;
        private Boolean isShieldedInstanceEnabled;
        private String nsxEdgeUplink1vlanId;
        private String nsxEdgeUplink2vlanId;
        private String nsxEdgeUplinkIpId;
        private String nsxEdgeVtepVlanId;
        private String nsxManagerFqdn;
        private String nsxManagerInitialPassword;
        private String nsxManagerPrivateIpId;
        private String nsxManagerUsername;
        private String nsxOverlaySegmentName;
        private String nsxVtepVlanId;
        private String provisioningSubnetId;
        private String provisioningVlanId;
        private Boolean refreshHcxLicenseStatus;
        private String replicationVlanId;
        private List<String> reservingHcxOnPremiseLicenseKeys;
        private String sshAuthorizedKeys;
        private String state;
        private String timeCreated;
        private String timeHcxBillingCycleEnd;
        private String timeHcxLicenseStatusUpdated;
        private String timeUpdated;
        private String vcenterFqdn;
        private String vcenterInitialPassword;
        private String vcenterPrivateIpId;
        private String vcenterUsername;
        private String vmotionVlanId;
        private String vmwareSoftwareVersion;
        private String vsanVlanId;
        private String vsphereVlanId;
        private String workloadNetworkCidr;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSddcsSddcCollection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actualEsxiHostsCount = defaults.actualEsxiHostsCount;
    	      this.compartmentId = defaults.compartmentId;
    	      this.computeAvailabilityDomain = defaults.computeAvailabilityDomain;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.esxiHostsCount = defaults.esxiHostsCount;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hcxAction = defaults.hcxAction;
    	      this.hcxFqdn = defaults.hcxFqdn;
    	      this.hcxInitialPassword = defaults.hcxInitialPassword;
    	      this.hcxOnPremKey = defaults.hcxOnPremKey;
    	      this.hcxOnPremLicenses = defaults.hcxOnPremLicenses;
    	      this.hcxPrivateIpId = defaults.hcxPrivateIpId;
    	      this.hcxVlanId = defaults.hcxVlanId;
    	      this.id = defaults.id;
    	      this.initialSku = defaults.initialSku;
    	      this.instanceDisplayNamePrefix = defaults.instanceDisplayNamePrefix;
    	      this.isHcxEnabled = defaults.isHcxEnabled;
    	      this.isHcxEnterpriseEnabled = defaults.isHcxEnterpriseEnabled;
    	      this.isHcxPendingDowngrade = defaults.isHcxPendingDowngrade;
    	      this.isShieldedInstanceEnabled = defaults.isShieldedInstanceEnabled;
    	      this.nsxEdgeUplink1vlanId = defaults.nsxEdgeUplink1vlanId;
    	      this.nsxEdgeUplink2vlanId = defaults.nsxEdgeUplink2vlanId;
    	      this.nsxEdgeUplinkIpId = defaults.nsxEdgeUplinkIpId;
    	      this.nsxEdgeVtepVlanId = defaults.nsxEdgeVtepVlanId;
    	      this.nsxManagerFqdn = defaults.nsxManagerFqdn;
    	      this.nsxManagerInitialPassword = defaults.nsxManagerInitialPassword;
    	      this.nsxManagerPrivateIpId = defaults.nsxManagerPrivateIpId;
    	      this.nsxManagerUsername = defaults.nsxManagerUsername;
    	      this.nsxOverlaySegmentName = defaults.nsxOverlaySegmentName;
    	      this.nsxVtepVlanId = defaults.nsxVtepVlanId;
    	      this.provisioningSubnetId = defaults.provisioningSubnetId;
    	      this.provisioningVlanId = defaults.provisioningVlanId;
    	      this.refreshHcxLicenseStatus = defaults.refreshHcxLicenseStatus;
    	      this.replicationVlanId = defaults.replicationVlanId;
    	      this.reservingHcxOnPremiseLicenseKeys = defaults.reservingHcxOnPremiseLicenseKeys;
    	      this.sshAuthorizedKeys = defaults.sshAuthorizedKeys;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeHcxBillingCycleEnd = defaults.timeHcxBillingCycleEnd;
    	      this.timeHcxLicenseStatusUpdated = defaults.timeHcxLicenseStatusUpdated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.vcenterFqdn = defaults.vcenterFqdn;
    	      this.vcenterInitialPassword = defaults.vcenterInitialPassword;
    	      this.vcenterPrivateIpId = defaults.vcenterPrivateIpId;
    	      this.vcenterUsername = defaults.vcenterUsername;
    	      this.vmotionVlanId = defaults.vmotionVlanId;
    	      this.vmwareSoftwareVersion = defaults.vmwareSoftwareVersion;
    	      this.vsanVlanId = defaults.vsanVlanId;
    	      this.vsphereVlanId = defaults.vsphereVlanId;
    	      this.workloadNetworkCidr = defaults.workloadNetworkCidr;
        }

        public Builder actualEsxiHostsCount(Integer actualEsxiHostsCount) {
            this.actualEsxiHostsCount = Objects.requireNonNull(actualEsxiHostsCount);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder computeAvailabilityDomain(String computeAvailabilityDomain) {
            this.computeAvailabilityDomain = Objects.requireNonNull(computeAvailabilityDomain);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder esxiHostsCount(Integer esxiHostsCount) {
            this.esxiHostsCount = Objects.requireNonNull(esxiHostsCount);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder hcxAction(String hcxAction) {
            this.hcxAction = Objects.requireNonNull(hcxAction);
            return this;
        }
        public Builder hcxFqdn(String hcxFqdn) {
            this.hcxFqdn = Objects.requireNonNull(hcxFqdn);
            return this;
        }
        public Builder hcxInitialPassword(String hcxInitialPassword) {
            this.hcxInitialPassword = Objects.requireNonNull(hcxInitialPassword);
            return this;
        }
        public Builder hcxOnPremKey(String hcxOnPremKey) {
            this.hcxOnPremKey = Objects.requireNonNull(hcxOnPremKey);
            return this;
        }
        public Builder hcxOnPremLicenses(List<GetSddcsSddcCollectionHcxOnPremLicense> hcxOnPremLicenses) {
            this.hcxOnPremLicenses = Objects.requireNonNull(hcxOnPremLicenses);
            return this;
        }
        public Builder hcxOnPremLicenses(GetSddcsSddcCollectionHcxOnPremLicense... hcxOnPremLicenses) {
            return hcxOnPremLicenses(List.of(hcxOnPremLicenses));
        }
        public Builder hcxPrivateIpId(String hcxPrivateIpId) {
            this.hcxPrivateIpId = Objects.requireNonNull(hcxPrivateIpId);
            return this;
        }
        public Builder hcxVlanId(String hcxVlanId) {
            this.hcxVlanId = Objects.requireNonNull(hcxVlanId);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder initialSku(String initialSku) {
            this.initialSku = Objects.requireNonNull(initialSku);
            return this;
        }
        public Builder instanceDisplayNamePrefix(String instanceDisplayNamePrefix) {
            this.instanceDisplayNamePrefix = Objects.requireNonNull(instanceDisplayNamePrefix);
            return this;
        }
        public Builder isHcxEnabled(Boolean isHcxEnabled) {
            this.isHcxEnabled = Objects.requireNonNull(isHcxEnabled);
            return this;
        }
        public Builder isHcxEnterpriseEnabled(Boolean isHcxEnterpriseEnabled) {
            this.isHcxEnterpriseEnabled = Objects.requireNonNull(isHcxEnterpriseEnabled);
            return this;
        }
        public Builder isHcxPendingDowngrade(Boolean isHcxPendingDowngrade) {
            this.isHcxPendingDowngrade = Objects.requireNonNull(isHcxPendingDowngrade);
            return this;
        }
        public Builder isShieldedInstanceEnabled(Boolean isShieldedInstanceEnabled) {
            this.isShieldedInstanceEnabled = Objects.requireNonNull(isShieldedInstanceEnabled);
            return this;
        }
        public Builder nsxEdgeUplink1vlanId(String nsxEdgeUplink1vlanId) {
            this.nsxEdgeUplink1vlanId = Objects.requireNonNull(nsxEdgeUplink1vlanId);
            return this;
        }
        public Builder nsxEdgeUplink2vlanId(String nsxEdgeUplink2vlanId) {
            this.nsxEdgeUplink2vlanId = Objects.requireNonNull(nsxEdgeUplink2vlanId);
            return this;
        }
        public Builder nsxEdgeUplinkIpId(String nsxEdgeUplinkIpId) {
            this.nsxEdgeUplinkIpId = Objects.requireNonNull(nsxEdgeUplinkIpId);
            return this;
        }
        public Builder nsxEdgeVtepVlanId(String nsxEdgeVtepVlanId) {
            this.nsxEdgeVtepVlanId = Objects.requireNonNull(nsxEdgeVtepVlanId);
            return this;
        }
        public Builder nsxManagerFqdn(String nsxManagerFqdn) {
            this.nsxManagerFqdn = Objects.requireNonNull(nsxManagerFqdn);
            return this;
        }
        public Builder nsxManagerInitialPassword(String nsxManagerInitialPassword) {
            this.nsxManagerInitialPassword = Objects.requireNonNull(nsxManagerInitialPassword);
            return this;
        }
        public Builder nsxManagerPrivateIpId(String nsxManagerPrivateIpId) {
            this.nsxManagerPrivateIpId = Objects.requireNonNull(nsxManagerPrivateIpId);
            return this;
        }
        public Builder nsxManagerUsername(String nsxManagerUsername) {
            this.nsxManagerUsername = Objects.requireNonNull(nsxManagerUsername);
            return this;
        }
        public Builder nsxOverlaySegmentName(String nsxOverlaySegmentName) {
            this.nsxOverlaySegmentName = Objects.requireNonNull(nsxOverlaySegmentName);
            return this;
        }
        public Builder nsxVtepVlanId(String nsxVtepVlanId) {
            this.nsxVtepVlanId = Objects.requireNonNull(nsxVtepVlanId);
            return this;
        }
        public Builder provisioningSubnetId(String provisioningSubnetId) {
            this.provisioningSubnetId = Objects.requireNonNull(provisioningSubnetId);
            return this;
        }
        public Builder provisioningVlanId(String provisioningVlanId) {
            this.provisioningVlanId = Objects.requireNonNull(provisioningVlanId);
            return this;
        }
        public Builder refreshHcxLicenseStatus(Boolean refreshHcxLicenseStatus) {
            this.refreshHcxLicenseStatus = Objects.requireNonNull(refreshHcxLicenseStatus);
            return this;
        }
        public Builder replicationVlanId(String replicationVlanId) {
            this.replicationVlanId = Objects.requireNonNull(replicationVlanId);
            return this;
        }
        public Builder reservingHcxOnPremiseLicenseKeys(List<String> reservingHcxOnPremiseLicenseKeys) {
            this.reservingHcxOnPremiseLicenseKeys = Objects.requireNonNull(reservingHcxOnPremiseLicenseKeys);
            return this;
        }
        public Builder reservingHcxOnPremiseLicenseKeys(String... reservingHcxOnPremiseLicenseKeys) {
            return reservingHcxOnPremiseLicenseKeys(List.of(reservingHcxOnPremiseLicenseKeys));
        }
        public Builder sshAuthorizedKeys(String sshAuthorizedKeys) {
            this.sshAuthorizedKeys = Objects.requireNonNull(sshAuthorizedKeys);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeHcxBillingCycleEnd(String timeHcxBillingCycleEnd) {
            this.timeHcxBillingCycleEnd = Objects.requireNonNull(timeHcxBillingCycleEnd);
            return this;
        }
        public Builder timeHcxLicenseStatusUpdated(String timeHcxLicenseStatusUpdated) {
            this.timeHcxLicenseStatusUpdated = Objects.requireNonNull(timeHcxLicenseStatusUpdated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public Builder vcenterFqdn(String vcenterFqdn) {
            this.vcenterFqdn = Objects.requireNonNull(vcenterFqdn);
            return this;
        }
        public Builder vcenterInitialPassword(String vcenterInitialPassword) {
            this.vcenterInitialPassword = Objects.requireNonNull(vcenterInitialPassword);
            return this;
        }
        public Builder vcenterPrivateIpId(String vcenterPrivateIpId) {
            this.vcenterPrivateIpId = Objects.requireNonNull(vcenterPrivateIpId);
            return this;
        }
        public Builder vcenterUsername(String vcenterUsername) {
            this.vcenterUsername = Objects.requireNonNull(vcenterUsername);
            return this;
        }
        public Builder vmotionVlanId(String vmotionVlanId) {
            this.vmotionVlanId = Objects.requireNonNull(vmotionVlanId);
            return this;
        }
        public Builder vmwareSoftwareVersion(String vmwareSoftwareVersion) {
            this.vmwareSoftwareVersion = Objects.requireNonNull(vmwareSoftwareVersion);
            return this;
        }
        public Builder vsanVlanId(String vsanVlanId) {
            this.vsanVlanId = Objects.requireNonNull(vsanVlanId);
            return this;
        }
        public Builder vsphereVlanId(String vsphereVlanId) {
            this.vsphereVlanId = Objects.requireNonNull(vsphereVlanId);
            return this;
        }
        public Builder workloadNetworkCidr(String workloadNetworkCidr) {
            this.workloadNetworkCidr = Objects.requireNonNull(workloadNetworkCidr);
            return this;
        }        public GetSddcsSddcCollection build() {
            return new GetSddcsSddcCollection(actualEsxiHostsCount, compartmentId, computeAvailabilityDomain, definedTags, displayName, esxiHostsCount, freeformTags, hcxAction, hcxFqdn, hcxInitialPassword, hcxOnPremKey, hcxOnPremLicenses, hcxPrivateIpId, hcxVlanId, id, initialSku, instanceDisplayNamePrefix, isHcxEnabled, isHcxEnterpriseEnabled, isHcxPendingDowngrade, isShieldedInstanceEnabled, nsxEdgeUplink1vlanId, nsxEdgeUplink2vlanId, nsxEdgeUplinkIpId, nsxEdgeVtepVlanId, nsxManagerFqdn, nsxManagerInitialPassword, nsxManagerPrivateIpId, nsxManagerUsername, nsxOverlaySegmentName, nsxVtepVlanId, provisioningSubnetId, provisioningVlanId, refreshHcxLicenseStatus, replicationVlanId, reservingHcxOnPremiseLicenseKeys, sshAuthorizedKeys, state, timeCreated, timeHcxBillingCycleEnd, timeHcxLicenseStatusUpdated, timeUpdated, vcenterFqdn, vcenterInitialPassword, vcenterPrivateIpId, vcenterUsername, vmotionVlanId, vmwareSoftwareVersion, vsanVlanId, vsphereVlanId, workloadNetworkCidr);
        }
    }
}
