// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Blockchain;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Blockchain.inputs.PeerOcpuAllocationParamArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PeerArgs extends com.pulumi.resources.ResourceArgs {

    public static final PeerArgs Empty = new PeerArgs();

    /**
     * Availability Domain to place new peer
     * 
     */
    @Import(name="ad", required=true)
    private Output<String> ad;

    /**
     * @return Availability Domain to place new peer
     * 
     */
    public Output<String> ad() {
        return this.ad;
    }

    /**
     * peer alias
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return peer alias
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * Unique service identifier.
     * 
     */
    @Import(name="blockchainPlatformId", required=true)
    private Output<String> blockchainPlatformId;

    /**
     * @return Unique service identifier.
     * 
     */
    public Output<String> blockchainPlatformId() {
        return this.blockchainPlatformId;
    }

    /**
     * (Updatable) OCPU allocation parameter
     * 
     */
    @Import(name="ocpuAllocationParam", required=true)
    private Output<PeerOcpuAllocationParamArgs> ocpuAllocationParam;

    /**
     * @return (Updatable) OCPU allocation parameter
     * 
     */
    public Output<PeerOcpuAllocationParamArgs> ocpuAllocationParam() {
        return this.ocpuAllocationParam;
    }

    /**
     * Peer role
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return Peer role
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    private PeerArgs() {}

    private PeerArgs(PeerArgs $) {
        this.ad = $.ad;
        this.alias = $.alias;
        this.blockchainPlatformId = $.blockchainPlatformId;
        this.ocpuAllocationParam = $.ocpuAllocationParam;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PeerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PeerArgs $;

        public Builder() {
            $ = new PeerArgs();
        }

        public Builder(PeerArgs defaults) {
            $ = new PeerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ad Availability Domain to place new peer
         * 
         * @return builder
         * 
         */
        public Builder ad(Output<String> ad) {
            $.ad = ad;
            return this;
        }

        /**
         * @param ad Availability Domain to place new peer
         * 
         * @return builder
         * 
         */
        public Builder ad(String ad) {
            return ad(Output.of(ad));
        }

        /**
         * @param alias peer alias
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias peer alias
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param blockchainPlatformId Unique service identifier.
         * 
         * @return builder
         * 
         */
        public Builder blockchainPlatformId(Output<String> blockchainPlatformId) {
            $.blockchainPlatformId = blockchainPlatformId;
            return this;
        }

        /**
         * @param blockchainPlatformId Unique service identifier.
         * 
         * @return builder
         * 
         */
        public Builder blockchainPlatformId(String blockchainPlatformId) {
            return blockchainPlatformId(Output.of(blockchainPlatformId));
        }

        /**
         * @param ocpuAllocationParam (Updatable) OCPU allocation parameter
         * 
         * @return builder
         * 
         */
        public Builder ocpuAllocationParam(Output<PeerOcpuAllocationParamArgs> ocpuAllocationParam) {
            $.ocpuAllocationParam = ocpuAllocationParam;
            return this;
        }

        /**
         * @param ocpuAllocationParam (Updatable) OCPU allocation parameter
         * 
         * @return builder
         * 
         */
        public Builder ocpuAllocationParam(PeerOcpuAllocationParamArgs ocpuAllocationParam) {
            return ocpuAllocationParam(Output.of(ocpuAllocationParam));
        }

        /**
         * @param role Peer role
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Peer role
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public PeerArgs build() {
            $.ad = Objects.requireNonNull($.ad, "expected parameter 'ad' to be non-null");
            $.blockchainPlatformId = Objects.requireNonNull($.blockchainPlatformId, "expected parameter 'blockchainPlatformId' to be non-null");
            $.ocpuAllocationParam = Objects.requireNonNull($.ocpuAllocationParam, "expected parameter 'ocpuAllocationParam' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            return $;
        }
    }

}
