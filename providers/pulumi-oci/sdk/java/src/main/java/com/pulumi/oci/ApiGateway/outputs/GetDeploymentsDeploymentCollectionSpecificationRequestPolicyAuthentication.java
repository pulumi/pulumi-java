// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKey;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaim;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication {
    /**
     * @return The list of intended recipients for the token.
     * 
     */
    private final List<String> audiences;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    private final String functionId;
    /**
     * @return Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
     * 
     */
    private final Boolean isAnonymousAccessAllowed;
    /**
     * @return A list of parties that could have issued the token.
     * 
     */
    private final List<String> issuers;
    /**
     * @return The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
     * 
     */
    private final Double maxClockSkewInSeconds;
    /**
     * @return A set of Public Keys that will be used to verify the JWT signature.
     * 
     */
    private final List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKey> publicKeys;
    /**
     * @return The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
     * 
     */
    private final String tokenAuthScheme;
    /**
     * @return The name of the header containing the authentication token.
     * 
     */
    private final String tokenHeader;
    /**
     * @return The name of the query parameter containing the authentication token.
     * 
     */
    private final String tokenQueryParam;
    /**
     * @return Type of the Response Cache Store Policy.
     * 
     */
    private final String type;
    /**
     * @return A list of claims which should be validated to consider the token valid.
     * 
     */
    private final List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaim> verifyClaims;

    @CustomType.Constructor
    private GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication(
        @CustomType.Parameter("audiences") List<String> audiences,
        @CustomType.Parameter("functionId") String functionId,
        @CustomType.Parameter("isAnonymousAccessAllowed") Boolean isAnonymousAccessAllowed,
        @CustomType.Parameter("issuers") List<String> issuers,
        @CustomType.Parameter("maxClockSkewInSeconds") Double maxClockSkewInSeconds,
        @CustomType.Parameter("publicKeys") List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKey> publicKeys,
        @CustomType.Parameter("tokenAuthScheme") String tokenAuthScheme,
        @CustomType.Parameter("tokenHeader") String tokenHeader,
        @CustomType.Parameter("tokenQueryParam") String tokenQueryParam,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("verifyClaims") List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaim> verifyClaims) {
        this.audiences = audiences;
        this.functionId = functionId;
        this.isAnonymousAccessAllowed = isAnonymousAccessAllowed;
        this.issuers = issuers;
        this.maxClockSkewInSeconds = maxClockSkewInSeconds;
        this.publicKeys = publicKeys;
        this.tokenAuthScheme = tokenAuthScheme;
        this.tokenHeader = tokenHeader;
        this.tokenQueryParam = tokenQueryParam;
        this.type = type;
        this.verifyClaims = verifyClaims;
    }

    /**
     * @return The list of intended recipients for the token.
     * 
     */
    public List<String> audiences() {
        return this.audiences;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    public String functionId() {
        return this.functionId;
    }
    /**
     * @return Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
     * 
     */
    public Boolean isAnonymousAccessAllowed() {
        return this.isAnonymousAccessAllowed;
    }
    /**
     * @return A list of parties that could have issued the token.
     * 
     */
    public List<String> issuers() {
        return this.issuers;
    }
    /**
     * @return The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
     * 
     */
    public Double maxClockSkewInSeconds() {
        return this.maxClockSkewInSeconds;
    }
    /**
     * @return A set of Public Keys that will be used to verify the JWT signature.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKey> publicKeys() {
        return this.publicKeys;
    }
    /**
     * @return The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
     * 
     */
    public String tokenAuthScheme() {
        return this.tokenAuthScheme;
    }
    /**
     * @return The name of the header containing the authentication token.
     * 
     */
    public String tokenHeader() {
        return this.tokenHeader;
    }
    /**
     * @return The name of the query parameter containing the authentication token.
     * 
     */
    public String tokenQueryParam() {
        return this.tokenQueryParam;
    }
    /**
     * @return Type of the Response Cache Store Policy.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A list of claims which should be validated to consider the token valid.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaim> verifyClaims() {
        return this.verifyClaims;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> audiences;
        private String functionId;
        private Boolean isAnonymousAccessAllowed;
        private List<String> issuers;
        private Double maxClockSkewInSeconds;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKey> publicKeys;
        private String tokenAuthScheme;
        private String tokenHeader;
        private String tokenQueryParam;
        private String type;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaim> verifyClaims;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.functionId = defaults.functionId;
    	      this.isAnonymousAccessAllowed = defaults.isAnonymousAccessAllowed;
    	      this.issuers = defaults.issuers;
    	      this.maxClockSkewInSeconds = defaults.maxClockSkewInSeconds;
    	      this.publicKeys = defaults.publicKeys;
    	      this.tokenAuthScheme = defaults.tokenAuthScheme;
    	      this.tokenHeader = defaults.tokenHeader;
    	      this.tokenQueryParam = defaults.tokenQueryParam;
    	      this.type = defaults.type;
    	      this.verifyClaims = defaults.verifyClaims;
        }

        public Builder audiences(List<String> audiences) {
            this.audiences = Objects.requireNonNull(audiences);
            return this;
        }
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }
        public Builder functionId(String functionId) {
            this.functionId = Objects.requireNonNull(functionId);
            return this;
        }
        public Builder isAnonymousAccessAllowed(Boolean isAnonymousAccessAllowed) {
            this.isAnonymousAccessAllowed = Objects.requireNonNull(isAnonymousAccessAllowed);
            return this;
        }
        public Builder issuers(List<String> issuers) {
            this.issuers = Objects.requireNonNull(issuers);
            return this;
        }
        public Builder issuers(String... issuers) {
            return issuers(List.of(issuers));
        }
        public Builder maxClockSkewInSeconds(Double maxClockSkewInSeconds) {
            this.maxClockSkewInSeconds = Objects.requireNonNull(maxClockSkewInSeconds);
            return this;
        }
        public Builder publicKeys(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKey> publicKeys) {
            this.publicKeys = Objects.requireNonNull(publicKeys);
            return this;
        }
        public Builder publicKeys(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKey... publicKeys) {
            return publicKeys(List.of(publicKeys));
        }
        public Builder tokenAuthScheme(String tokenAuthScheme) {
            this.tokenAuthScheme = Objects.requireNonNull(tokenAuthScheme);
            return this;
        }
        public Builder tokenHeader(String tokenHeader) {
            this.tokenHeader = Objects.requireNonNull(tokenHeader);
            return this;
        }
        public Builder tokenQueryParam(String tokenQueryParam) {
            this.tokenQueryParam = Objects.requireNonNull(tokenQueryParam);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder verifyClaims(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaim> verifyClaims) {
            this.verifyClaims = Objects.requireNonNull(verifyClaims);
            return this;
        }
        public Builder verifyClaims(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaim... verifyClaims) {
            return verifyClaims(List.of(verifyClaims));
        }        public GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication build() {
            return new GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication(audiences, functionId, isAnonymousAccessAllowed, issuers, maxClockSkewInSeconds, publicKeys, tokenAuthScheme, tokenHeader, tokenQueryParam, type, verifyClaims);
        }
    }
}
