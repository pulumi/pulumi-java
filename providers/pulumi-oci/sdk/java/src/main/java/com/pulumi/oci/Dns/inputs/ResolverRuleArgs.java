// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResolverRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResolverRuleArgs Empty = new ResolverRuleArgs();

    /**
     * (Updatable) The action determines the behavior of the rule. If a query matches a supplied condition, the action will apply. If there are no conditions on the rule, all queries are subject to the specified action.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return (Updatable) The action determines the behavior of the rule. If a query matches a supplied condition, the action will apply. If there are no conditions on the rule, all queries are subject to the specified action.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * (Updatable) A list of CIDR blocks. The query must come from a client within one of the blocks in order for the rule action to apply.
     * 
     */
    @Import(name="clientAddressConditions")
    private @Nullable Output<List<String>> clientAddressConditions;

    /**
     * @return (Updatable) A list of CIDR blocks. The query must come from a client within one of the blocks in order for the rule action to apply.
     * 
     */
    public Optional<Output<List<String>>> clientAddressConditions() {
        return Optional.ofNullable(this.clientAddressConditions);
    }

    /**
     * (Updatable) IP addresses to which queries should be forwarded. Currently limited to a single address.
     * 
     */
    @Import(name="destinationAddresses", required=true)
    private Output<List<String>> destinationAddresses;

    /**
     * @return (Updatable) IP addresses to which queries should be forwarded. Currently limited to a single address.
     * 
     */
    public Output<List<String>> destinationAddresses() {
        return this.destinationAddresses;
    }

    /**
     * (Updatable) A list of domain names. The query must be covered by one of the domains in order for the rule action to apply.
     * 
     */
    @Import(name="qnameCoverConditions")
    private @Nullable Output<List<String>> qnameCoverConditions;

    /**
     * @return (Updatable) A list of domain names. The query must be covered by one of the domains in order for the rule action to apply.
     * 
     */
    public Optional<Output<List<String>>> qnameCoverConditions() {
        return Optional.ofNullable(this.qnameCoverConditions);
    }

    /**
     * (Updatable) Name of an endpoint, that is a sub-resource of the resolver, to use as the forwarding interface. The endpoint must have isForwarding set to true.
     * 
     */
    @Import(name="sourceEndpointName", required=true)
    private Output<String> sourceEndpointName;

    /**
     * @return (Updatable) Name of an endpoint, that is a sub-resource of the resolver, to use as the forwarding interface. The endpoint must have isForwarding set to true.
     * 
     */
    public Output<String> sourceEndpointName() {
        return this.sourceEndpointName;
    }

    private ResolverRuleArgs() {}

    private ResolverRuleArgs(ResolverRuleArgs $) {
        this.action = $.action;
        this.clientAddressConditions = $.clientAddressConditions;
        this.destinationAddresses = $.destinationAddresses;
        this.qnameCoverConditions = $.qnameCoverConditions;
        this.sourceEndpointName = $.sourceEndpointName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResolverRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResolverRuleArgs $;

        public Builder() {
            $ = new ResolverRuleArgs();
        }

        public Builder(ResolverRuleArgs defaults) {
            $ = new ResolverRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action (Updatable) The action determines the behavior of the rule. If a query matches a supplied condition, the action will apply. If there are no conditions on the rule, all queries are subject to the specified action.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action (Updatable) The action determines the behavior of the rule. If a query matches a supplied condition, the action will apply. If there are no conditions on the rule, all queries are subject to the specified action.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param clientAddressConditions (Updatable) A list of CIDR blocks. The query must come from a client within one of the blocks in order for the rule action to apply.
         * 
         * @return builder
         * 
         */
        public Builder clientAddressConditions(@Nullable Output<List<String>> clientAddressConditions) {
            $.clientAddressConditions = clientAddressConditions;
            return this;
        }

        /**
         * @param clientAddressConditions (Updatable) A list of CIDR blocks. The query must come from a client within one of the blocks in order for the rule action to apply.
         * 
         * @return builder
         * 
         */
        public Builder clientAddressConditions(List<String> clientAddressConditions) {
            return clientAddressConditions(Output.of(clientAddressConditions));
        }

        /**
         * @param clientAddressConditions (Updatable) A list of CIDR blocks. The query must come from a client within one of the blocks in order for the rule action to apply.
         * 
         * @return builder
         * 
         */
        public Builder clientAddressConditions(String... clientAddressConditions) {
            return clientAddressConditions(List.of(clientAddressConditions));
        }

        /**
         * @param destinationAddresses (Updatable) IP addresses to which queries should be forwarded. Currently limited to a single address.
         * 
         * @return builder
         * 
         */
        public Builder destinationAddresses(Output<List<String>> destinationAddresses) {
            $.destinationAddresses = destinationAddresses;
            return this;
        }

        /**
         * @param destinationAddresses (Updatable) IP addresses to which queries should be forwarded. Currently limited to a single address.
         * 
         * @return builder
         * 
         */
        public Builder destinationAddresses(List<String> destinationAddresses) {
            return destinationAddresses(Output.of(destinationAddresses));
        }

        /**
         * @param destinationAddresses (Updatable) IP addresses to which queries should be forwarded. Currently limited to a single address.
         * 
         * @return builder
         * 
         */
        public Builder destinationAddresses(String... destinationAddresses) {
            return destinationAddresses(List.of(destinationAddresses));
        }

        /**
         * @param qnameCoverConditions (Updatable) A list of domain names. The query must be covered by one of the domains in order for the rule action to apply.
         * 
         * @return builder
         * 
         */
        public Builder qnameCoverConditions(@Nullable Output<List<String>> qnameCoverConditions) {
            $.qnameCoverConditions = qnameCoverConditions;
            return this;
        }

        /**
         * @param qnameCoverConditions (Updatable) A list of domain names. The query must be covered by one of the domains in order for the rule action to apply.
         * 
         * @return builder
         * 
         */
        public Builder qnameCoverConditions(List<String> qnameCoverConditions) {
            return qnameCoverConditions(Output.of(qnameCoverConditions));
        }

        /**
         * @param qnameCoverConditions (Updatable) A list of domain names. The query must be covered by one of the domains in order for the rule action to apply.
         * 
         * @return builder
         * 
         */
        public Builder qnameCoverConditions(String... qnameCoverConditions) {
            return qnameCoverConditions(List.of(qnameCoverConditions));
        }

        /**
         * @param sourceEndpointName (Updatable) Name of an endpoint, that is a sub-resource of the resolver, to use as the forwarding interface. The endpoint must have isForwarding set to true.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointName(Output<String> sourceEndpointName) {
            $.sourceEndpointName = sourceEndpointName;
            return this;
        }

        /**
         * @param sourceEndpointName (Updatable) Name of an endpoint, that is a sub-resource of the resolver, to use as the forwarding interface. The endpoint must have isForwarding set to true.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpointName(String sourceEndpointName) {
            return sourceEndpointName(Output.of(sourceEndpointName));
        }

        public ResolverRuleArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.destinationAddresses = Objects.requireNonNull($.destinationAddresses, "expected parameter 'destinationAddresses' to be non-null");
            $.sourceEndpointName = Objects.requireNonNull($.sourceEndpointName, "expected parameter 'sourceEndpointName' to be non-null");
            return $;
        }
    }

}
