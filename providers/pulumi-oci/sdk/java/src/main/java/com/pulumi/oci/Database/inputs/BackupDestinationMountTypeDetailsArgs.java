// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupDestinationMountTypeDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupDestinationMountTypeDetailsArgs Empty = new BackupDestinationMountTypeDetailsArgs();

    /**
     * The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     */
    @Import(name="localMountPointPath")
    private @Nullable Output<String> localMountPointPath;

    /**
     * @return The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     */
    public Optional<Output<String>> localMountPointPath() {
        return Optional.ofNullable(this.localMountPointPath);
    }

    /**
     * Mount type for backup destination.
     * 
     */
    @Import(name="mountType", required=true)
    private Output<String> mountType;

    /**
     * @return Mount type for backup destination.
     * 
     */
    public Output<String> mountType() {
        return this.mountType;
    }

    /**
     * Specifies the directory on which to mount the file system
     * 
     */
    @Import(name="nfsServerExport")
    private @Nullable Output<String> nfsServerExport;

    /**
     * @return Specifies the directory on which to mount the file system
     * 
     */
    public Optional<Output<String>> nfsServerExport() {
        return Optional.ofNullable(this.nfsServerExport);
    }

    /**
     * IP addresses for NFS Auto mount.
     * 
     */
    @Import(name="nfsServers")
    private @Nullable Output<List<String>> nfsServers;

    /**
     * @return IP addresses for NFS Auto mount.
     * 
     */
    public Optional<Output<List<String>>> nfsServers() {
        return Optional.ofNullable(this.nfsServers);
    }

    private BackupDestinationMountTypeDetailsArgs() {}

    private BackupDestinationMountTypeDetailsArgs(BackupDestinationMountTypeDetailsArgs $) {
        this.localMountPointPath = $.localMountPointPath;
        this.mountType = $.mountType;
        this.nfsServerExport = $.nfsServerExport;
        this.nfsServers = $.nfsServers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupDestinationMountTypeDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupDestinationMountTypeDetailsArgs $;

        public Builder() {
            $ = new BackupDestinationMountTypeDetailsArgs();
        }

        public Builder(BackupDestinationMountTypeDetailsArgs defaults) {
            $ = new BackupDestinationMountTypeDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param localMountPointPath The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
         * 
         * @return builder
         * 
         */
        public Builder localMountPointPath(@Nullable Output<String> localMountPointPath) {
            $.localMountPointPath = localMountPointPath;
            return this;
        }

        /**
         * @param localMountPointPath The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
         * 
         * @return builder
         * 
         */
        public Builder localMountPointPath(String localMountPointPath) {
            return localMountPointPath(Output.of(localMountPointPath));
        }

        /**
         * @param mountType Mount type for backup destination.
         * 
         * @return builder
         * 
         */
        public Builder mountType(Output<String> mountType) {
            $.mountType = mountType;
            return this;
        }

        /**
         * @param mountType Mount type for backup destination.
         * 
         * @return builder
         * 
         */
        public Builder mountType(String mountType) {
            return mountType(Output.of(mountType));
        }

        /**
         * @param nfsServerExport Specifies the directory on which to mount the file system
         * 
         * @return builder
         * 
         */
        public Builder nfsServerExport(@Nullable Output<String> nfsServerExport) {
            $.nfsServerExport = nfsServerExport;
            return this;
        }

        /**
         * @param nfsServerExport Specifies the directory on which to mount the file system
         * 
         * @return builder
         * 
         */
        public Builder nfsServerExport(String nfsServerExport) {
            return nfsServerExport(Output.of(nfsServerExport));
        }

        /**
         * @param nfsServers IP addresses for NFS Auto mount.
         * 
         * @return builder
         * 
         */
        public Builder nfsServers(@Nullable Output<List<String>> nfsServers) {
            $.nfsServers = nfsServers;
            return this;
        }

        /**
         * @param nfsServers IP addresses for NFS Auto mount.
         * 
         * @return builder
         * 
         */
        public Builder nfsServers(List<String> nfsServers) {
            return nfsServers(Output.of(nfsServers));
        }

        /**
         * @param nfsServers IP addresses for NFS Auto mount.
         * 
         * @return builder
         * 
         */
        public Builder nfsServers(String... nfsServers) {
            return nfsServers(List.of(nfsServers));
        }

        public BackupDestinationMountTypeDetailsArgs build() {
            $.mountType = Objects.requireNonNull($.mountType, "expected parameter 'mountType' to be non-null");
            return $;
        }
    }

}
