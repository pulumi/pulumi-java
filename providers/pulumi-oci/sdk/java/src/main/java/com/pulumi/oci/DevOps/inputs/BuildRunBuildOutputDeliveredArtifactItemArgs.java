// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildRunBuildOutputDeliveredArtifactItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildRunBuildOutputDeliveredArtifactItemArgs Empty = new BuildRunBuildOutputDeliveredArtifactItemArgs();

    /**
     * The OCID of the artifact registry repository used by the DeliverArtifactStage
     * 
     */
    @Import(name="artifactRepositoryId")
    private @Nullable Output<String> artifactRepositoryId;

    /**
     * @return The OCID of the artifact registry repository used by the DeliverArtifactStage
     * 
     */
    public Optional<Output<String>> artifactRepositoryId() {
        return Optional.ofNullable(this.artifactRepositoryId);
    }

    /**
     * Type of artifact delivered.
     * 
     */
    @Import(name="artifactType")
    private @Nullable Output<String> artifactType;

    /**
     * @return Type of artifact delivered.
     * 
     */
    public Optional<Output<String>> artifactType() {
        return Optional.ofNullable(this.artifactType);
    }

    /**
     * The hash of the container registry artifact pushed by the Deliver Artifacts stage.
     * 
     */
    @Import(name="deliveredArtifactHash")
    private @Nullable Output<String> deliveredArtifactHash;

    /**
     * @return The hash of the container registry artifact pushed by the Deliver Artifacts stage.
     * 
     */
    public Optional<Output<String>> deliveredArtifactHash() {
        return Optional.ofNullable(this.deliveredArtifactHash);
    }

    /**
     * The OCID of the artifact pushed by the Deliver Artifacts stage.
     * 
     */
    @Import(name="deliveredArtifactId")
    private @Nullable Output<String> deliveredArtifactId;

    /**
     * @return The OCID of the artifact pushed by the Deliver Artifacts stage.
     * 
     */
    public Optional<Output<String>> deliveredArtifactId() {
        return Optional.ofNullable(this.deliveredArtifactId);
    }

    /**
     * The OCID of the deployment artifact definition.
     * 
     */
    @Import(name="deployArtifactId")
    private @Nullable Output<String> deployArtifactId;

    /**
     * @return The OCID of the deployment artifact definition.
     * 
     */
    public Optional<Output<String>> deployArtifactId() {
        return Optional.ofNullable(this.deployArtifactId);
    }

    /**
     * The imageUri of the OCIR artifact pushed by the DeliverArtifactStage
     * 
     */
    @Import(name="imageUri")
    private @Nullable Output<String> imageUri;

    /**
     * @return The imageUri of the OCIR artifact pushed by the DeliverArtifactStage
     * 
     */
    public Optional<Output<String>> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }

    /**
     * Name of the output artifact defined in the build specification file.
     * 
     */
    @Import(name="outputArtifactName")
    private @Nullable Output<String> outputArtifactName;

    /**
     * @return Name of the output artifact defined in the build specification file.
     * 
     */
    public Optional<Output<String>> outputArtifactName() {
        return Optional.ofNullable(this.outputArtifactName);
    }

    /**
     * Path of the repository where artifact was pushed
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Path of the repository where artifact was pushed
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Version of the artifact pushed
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version of the artifact pushed
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private BuildRunBuildOutputDeliveredArtifactItemArgs() {}

    private BuildRunBuildOutputDeliveredArtifactItemArgs(BuildRunBuildOutputDeliveredArtifactItemArgs $) {
        this.artifactRepositoryId = $.artifactRepositoryId;
        this.artifactType = $.artifactType;
        this.deliveredArtifactHash = $.deliveredArtifactHash;
        this.deliveredArtifactId = $.deliveredArtifactId;
        this.deployArtifactId = $.deployArtifactId;
        this.imageUri = $.imageUri;
        this.outputArtifactName = $.outputArtifactName;
        this.path = $.path;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildRunBuildOutputDeliveredArtifactItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildRunBuildOutputDeliveredArtifactItemArgs $;

        public Builder() {
            $ = new BuildRunBuildOutputDeliveredArtifactItemArgs();
        }

        public Builder(BuildRunBuildOutputDeliveredArtifactItemArgs defaults) {
            $ = new BuildRunBuildOutputDeliveredArtifactItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifactRepositoryId The OCID of the artifact registry repository used by the DeliverArtifactStage
         * 
         * @return builder
         * 
         */
        public Builder artifactRepositoryId(@Nullable Output<String> artifactRepositoryId) {
            $.artifactRepositoryId = artifactRepositoryId;
            return this;
        }

        /**
         * @param artifactRepositoryId The OCID of the artifact registry repository used by the DeliverArtifactStage
         * 
         * @return builder
         * 
         */
        public Builder artifactRepositoryId(String artifactRepositoryId) {
            return artifactRepositoryId(Output.of(artifactRepositoryId));
        }

        /**
         * @param artifactType Type of artifact delivered.
         * 
         * @return builder
         * 
         */
        public Builder artifactType(@Nullable Output<String> artifactType) {
            $.artifactType = artifactType;
            return this;
        }

        /**
         * @param artifactType Type of artifact delivered.
         * 
         * @return builder
         * 
         */
        public Builder artifactType(String artifactType) {
            return artifactType(Output.of(artifactType));
        }

        /**
         * @param deliveredArtifactHash The hash of the container registry artifact pushed by the Deliver Artifacts stage.
         * 
         * @return builder
         * 
         */
        public Builder deliveredArtifactHash(@Nullable Output<String> deliveredArtifactHash) {
            $.deliveredArtifactHash = deliveredArtifactHash;
            return this;
        }

        /**
         * @param deliveredArtifactHash The hash of the container registry artifact pushed by the Deliver Artifacts stage.
         * 
         * @return builder
         * 
         */
        public Builder deliveredArtifactHash(String deliveredArtifactHash) {
            return deliveredArtifactHash(Output.of(deliveredArtifactHash));
        }

        /**
         * @param deliveredArtifactId The OCID of the artifact pushed by the Deliver Artifacts stage.
         * 
         * @return builder
         * 
         */
        public Builder deliveredArtifactId(@Nullable Output<String> deliveredArtifactId) {
            $.deliveredArtifactId = deliveredArtifactId;
            return this;
        }

        /**
         * @param deliveredArtifactId The OCID of the artifact pushed by the Deliver Artifacts stage.
         * 
         * @return builder
         * 
         */
        public Builder deliveredArtifactId(String deliveredArtifactId) {
            return deliveredArtifactId(Output.of(deliveredArtifactId));
        }

        /**
         * @param deployArtifactId The OCID of the deployment artifact definition.
         * 
         * @return builder
         * 
         */
        public Builder deployArtifactId(@Nullable Output<String> deployArtifactId) {
            $.deployArtifactId = deployArtifactId;
            return this;
        }

        /**
         * @param deployArtifactId The OCID of the deployment artifact definition.
         * 
         * @return builder
         * 
         */
        public Builder deployArtifactId(String deployArtifactId) {
            return deployArtifactId(Output.of(deployArtifactId));
        }

        /**
         * @param imageUri The imageUri of the OCIR artifact pushed by the DeliverArtifactStage
         * 
         * @return builder
         * 
         */
        public Builder imageUri(@Nullable Output<String> imageUri) {
            $.imageUri = imageUri;
            return this;
        }

        /**
         * @param imageUri The imageUri of the OCIR artifact pushed by the DeliverArtifactStage
         * 
         * @return builder
         * 
         */
        public Builder imageUri(String imageUri) {
            return imageUri(Output.of(imageUri));
        }

        /**
         * @param outputArtifactName Name of the output artifact defined in the build specification file.
         * 
         * @return builder
         * 
         */
        public Builder outputArtifactName(@Nullable Output<String> outputArtifactName) {
            $.outputArtifactName = outputArtifactName;
            return this;
        }

        /**
         * @param outputArtifactName Name of the output artifact defined in the build specification file.
         * 
         * @return builder
         * 
         */
        public Builder outputArtifactName(String outputArtifactName) {
            return outputArtifactName(Output.of(outputArtifactName));
        }

        /**
         * @param path Path of the repository where artifact was pushed
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path of the repository where artifact was pushed
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param version Version of the artifact pushed
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the artifact pushed
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public BuildRunBuildOutputDeliveredArtifactItemArgs build() {
            return $;
        }
    }

}
