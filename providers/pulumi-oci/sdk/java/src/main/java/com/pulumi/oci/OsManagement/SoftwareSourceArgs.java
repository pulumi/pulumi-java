// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OsManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SoftwareSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SoftwareSourceArgs Empty = new SoftwareSourceArgs();

    /**
     * The architecture type supported by the Software Source
     * 
     */
    @Import(name="archType", required=true)
    private Output<String> archType;

    /**
     * @return The architecture type supported by the Software Source
     * 
     */
    public Output<String> archType() {
        return this.archType;
    }

    /**
     * (Updatable) The yum repository checksum type used by this software source
     * 
     */
    @Import(name="checksumType")
    private @Nullable Output<String> checksumType;

    /**
     * @return (Updatable) The yum repository checksum type used by this software source
     * 
     */
    public Optional<Output<String>> checksumType() {
        return Optional.ofNullable(this.checksumType);
    }

    /**
     * (Updatable) OCID for the Compartment
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) OCID for the Compartment
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Information specified by the user about the software source
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Information specified by the user about the software source
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) User friendly name for the software source
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) User friendly name for the software source
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Email address of the person maintaining this software source
     * 
     */
    @Import(name="maintainerEmail")
    private @Nullable Output<String> maintainerEmail;

    /**
     * @return (Updatable) Email address of the person maintaining this software source
     * 
     */
    public Optional<Output<String>> maintainerEmail() {
        return Optional.ofNullable(this.maintainerEmail);
    }

    /**
     * (Updatable) Name of the person maintaining this software source
     * 
     */
    @Import(name="maintainerName")
    private @Nullable Output<String> maintainerName;

    /**
     * @return (Updatable) Name of the person maintaining this software source
     * 
     */
    public Optional<Output<String>> maintainerName() {
        return Optional.ofNullable(this.maintainerName);
    }

    /**
     * (Updatable) Phone number of the person maintaining this software source
     * 
     */
    @Import(name="maintainerPhone")
    private @Nullable Output<String> maintainerPhone;

    /**
     * @return (Updatable) Phone number of the person maintaining this software source
     * 
     */
    public Optional<Output<String>> maintainerPhone() {
        return Optional.ofNullable(this.maintainerPhone);
    }

    /**
     * OCID for the parent software source, if there is one
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return OCID for the parent software source, if there is one
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    private SoftwareSourceArgs() {}

    private SoftwareSourceArgs(SoftwareSourceArgs $) {
        this.archType = $.archType;
        this.checksumType = $.checksumType;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.maintainerEmail = $.maintainerEmail;
        this.maintainerName = $.maintainerName;
        this.maintainerPhone = $.maintainerPhone;
        this.parentId = $.parentId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoftwareSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoftwareSourceArgs $;

        public Builder() {
            $ = new SoftwareSourceArgs();
        }

        public Builder(SoftwareSourceArgs defaults) {
            $ = new SoftwareSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archType The architecture type supported by the Software Source
         * 
         * @return builder
         * 
         */
        public Builder archType(Output<String> archType) {
            $.archType = archType;
            return this;
        }

        /**
         * @param archType The architecture type supported by the Software Source
         * 
         * @return builder
         * 
         */
        public Builder archType(String archType) {
            return archType(Output.of(archType));
        }

        /**
         * @param checksumType (Updatable) The yum repository checksum type used by this software source
         * 
         * @return builder
         * 
         */
        public Builder checksumType(@Nullable Output<String> checksumType) {
            $.checksumType = checksumType;
            return this;
        }

        /**
         * @param checksumType (Updatable) The yum repository checksum type used by this software source
         * 
         * @return builder
         * 
         */
        public Builder checksumType(String checksumType) {
            return checksumType(Output.of(checksumType));
        }

        /**
         * @param compartmentId (Updatable) OCID for the Compartment
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) OCID for the Compartment
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) Information specified by the user about the software source
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Information specified by the user about the software source
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) User friendly name for the software source
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) User friendly name for the software source
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param maintainerEmail (Updatable) Email address of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerEmail(@Nullable Output<String> maintainerEmail) {
            $.maintainerEmail = maintainerEmail;
            return this;
        }

        /**
         * @param maintainerEmail (Updatable) Email address of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerEmail(String maintainerEmail) {
            return maintainerEmail(Output.of(maintainerEmail));
        }

        /**
         * @param maintainerName (Updatable) Name of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerName(@Nullable Output<String> maintainerName) {
            $.maintainerName = maintainerName;
            return this;
        }

        /**
         * @param maintainerName (Updatable) Name of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerName(String maintainerName) {
            return maintainerName(Output.of(maintainerName));
        }

        /**
         * @param maintainerPhone (Updatable) Phone number of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerPhone(@Nullable Output<String> maintainerPhone) {
            $.maintainerPhone = maintainerPhone;
            return this;
        }

        /**
         * @param maintainerPhone (Updatable) Phone number of the person maintaining this software source
         * 
         * @return builder
         * 
         */
        public Builder maintainerPhone(String maintainerPhone) {
            return maintainerPhone(Output.of(maintainerPhone));
        }

        /**
         * @param parentId OCID for the parent software source, if there is one
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId OCID for the parent software source, if there is one
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        public SoftwareSourceArgs build() {
            $.archType = Objects.requireNonNull($.archType, "expected parameter 'archType' to be non-null");
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
