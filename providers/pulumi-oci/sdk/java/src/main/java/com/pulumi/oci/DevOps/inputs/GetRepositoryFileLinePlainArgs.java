// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryFileLinePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryFileLinePlainArgs Empty = new GetRepositoryFileLinePlainArgs();

    /**
     * Path to a file within a repository.
     * 
     */
    @Import(name="filePath", required=true)
    private String filePath;

    /**
     * @return Path to a file within a repository.
     * 
     */
    public String filePath() {
        return this.filePath;
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId", required=true)
    private String repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    /**
     * Retrieve file lines from specific revision.
     * 
     */
    @Import(name="revision", required=true)
    private String revision;

    /**
     * @return Retrieve file lines from specific revision.
     * 
     */
    public String revision() {
        return this.revision;
    }

    /**
     * Line number from where to start returning file lines.
     * 
     */
    @Import(name="startLineNumber")
    private @Nullable Integer startLineNumber;

    /**
     * @return Line number from where to start returning file lines.
     * 
     */
    public Optional<Integer> startLineNumber() {
        return Optional.ofNullable(this.startLineNumber);
    }

    private GetRepositoryFileLinePlainArgs() {}

    private GetRepositoryFileLinePlainArgs(GetRepositoryFileLinePlainArgs $) {
        this.filePath = $.filePath;
        this.repositoryId = $.repositoryId;
        this.revision = $.revision;
        this.startLineNumber = $.startLineNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryFileLinePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryFileLinePlainArgs $;

        public Builder() {
            $ = new GetRepositoryFileLinePlainArgs();
        }

        public Builder(GetRepositoryFileLinePlainArgs defaults) {
            $ = new GetRepositoryFileLinePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filePath Path to a file within a repository.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param revision Retrieve file lines from specific revision.
         * 
         * @return builder
         * 
         */
        public Builder revision(String revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param startLineNumber Line number from where to start returning file lines.
         * 
         * @return builder
         * 
         */
        public Builder startLineNumber(@Nullable Integer startLineNumber) {
            $.startLineNumber = startLineNumber;
            return this;
        }

        public GetRepositoryFileLinePlainArgs build() {
            $.filePath = Objects.requireNonNull($.filePath, "expected parameter 'filePath' to be non-null");
            $.repositoryId = Objects.requireNonNull($.repositoryId, "expected parameter 'repositoryId' to be non-null");
            $.revision = Objects.requireNonNull($.revision, "expected parameter 'revision' to be non-null");
            return $;
        }
    }

}
