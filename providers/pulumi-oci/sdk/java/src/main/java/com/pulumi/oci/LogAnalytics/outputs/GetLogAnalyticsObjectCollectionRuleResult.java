// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.LogAnalytics.outputs.GetLogAnalyticsObjectCollectionRuleOverride;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLogAnalyticsObjectCollectionRuleResult {
    /**
     * @return An optional character encoding to aid in detecting the character encoding of the contents of the objects while processing. It is recommended to set this value as ISO_8589_1 when configuring content of the objects having more numeric characters, and very few alphabets. For e.g. this applies when configuring VCN Flow Logs.
     * 
     */
    private final String charEncoding;
    /**
     * @return The type of collection. Supported collection types: LIVE, HISTORIC, HISTORIC_LIVE
     * 
     */
    private final String collectionType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to which this rule belongs.
     * 
     */
    private final String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return A string that describes the details of the rule. It does not have to be unique, and can be changed. Avoid entering confidential information.
     * 
     */
    private final String description;
    /**
     * @return Logging Analytics entity OCID to associate the processed logs with.
     * 
     */
    private final String entityId;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of this rule.
     * 
     */
    private final String id;
    /**
     * @return A detailed status of the life cycle state.
     * 
     */
    private final String lifecycleDetails;
    private final String logAnalyticsObjectCollectionRuleId;
    /**
     * @return Logging Analytics Log group OCID to associate the processed logs with.
     * 
     */
    private final String logGroupId;
    /**
     * @return Name of the Logging Analytics Source to use for the processing.
     * 
     */
    private final String logSourceName;
    /**
     * @return A unique name to the rule. The name must be unique, within the tenancy, and cannot be changed.
     * 
     */
    private final String name;
    private final String namespace;
    /**
     * @return When the filters are provided, only the objects matching the filters are picked up for processing. The matchType supported is exact match and accommodates wildcard &#34;*&#34;. For more information on filters, see [Event Filters](https://docs.oracle.com/en-us/iaas/Content/Events/Concepts/filterevents.htm).
     * 
     */
    private final List<String> objectNameFilters;
    /**
     * @return Name of the Object Storage bucket.
     * 
     */
    private final String osBucketName;
    /**
     * @return Object Storage namespace.
     * 
     */
    private final String osNamespace;
    /**
     * @return Use this to override some property values which are defined at bucket level to the scope of object. Supported propeties for override are, logSourceName, charEncoding. Supported matchType for override are &#34;contains&#34;.
     * 
     */
    private final List<GetLogAnalyticsObjectCollectionRuleOverride> overrides;
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: BEGINNING or CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollSince value other than CURRENT_TIME will result in error.
     * 
     */
    private final String pollSince;
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollTill will result in error.
     * 
     */
    private final String pollTill;
    /**
     * @return The current state of the rule.
     * 
     */
    private final String state;
    /**
     * @return The time when this rule was created. An RFC3339 formatted datetime string.
     * 
     */
    private final String timeCreated;
    /**
     * @return The time when this rule was last updated. An RFC3339 formatted datetime string.
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetLogAnalyticsObjectCollectionRuleResult(
        @CustomType.Parameter("charEncoding") String charEncoding,
        @CustomType.Parameter("collectionType") String collectionType,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("entityId") String entityId,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("logAnalyticsObjectCollectionRuleId") String logAnalyticsObjectCollectionRuleId,
        @CustomType.Parameter("logGroupId") String logGroupId,
        @CustomType.Parameter("logSourceName") String logSourceName,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("namespace") String namespace,
        @CustomType.Parameter("objectNameFilters") List<String> objectNameFilters,
        @CustomType.Parameter("osBucketName") String osBucketName,
        @CustomType.Parameter("osNamespace") String osNamespace,
        @CustomType.Parameter("overrides") List<GetLogAnalyticsObjectCollectionRuleOverride> overrides,
        @CustomType.Parameter("pollSince") String pollSince,
        @CustomType.Parameter("pollTill") String pollTill,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.charEncoding = charEncoding;
        this.collectionType = collectionType;
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.description = description;
        this.entityId = entityId;
        this.freeformTags = freeformTags;
        this.id = id;
        this.lifecycleDetails = lifecycleDetails;
        this.logAnalyticsObjectCollectionRuleId = logAnalyticsObjectCollectionRuleId;
        this.logGroupId = logGroupId;
        this.logSourceName = logSourceName;
        this.name = name;
        this.namespace = namespace;
        this.objectNameFilters = objectNameFilters;
        this.osBucketName = osBucketName;
        this.osNamespace = osNamespace;
        this.overrides = overrides;
        this.pollSince = pollSince;
        this.pollTill = pollTill;
        this.state = state;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    /**
     * @return An optional character encoding to aid in detecting the character encoding of the contents of the objects while processing. It is recommended to set this value as ISO_8589_1 when configuring content of the objects having more numeric characters, and very few alphabets. For e.g. this applies when configuring VCN Flow Logs.
     * 
     */
    public String charEncoding() {
        return this.charEncoding;
    }
    /**
     * @return The type of collection. Supported collection types: LIVE, HISTORIC, HISTORIC_LIVE
     * 
     */
    public String collectionType() {
        return this.collectionType;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to which this rule belongs.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A string that describes the details of the rule. It does not have to be unique, and can be changed. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Logging Analytics entity OCID to associate the processed logs with.
     * 
     */
    public String entityId() {
        return this.entityId;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of this rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A detailed status of the life cycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String logAnalyticsObjectCollectionRuleId() {
        return this.logAnalyticsObjectCollectionRuleId;
    }
    /**
     * @return Logging Analytics Log group OCID to associate the processed logs with.
     * 
     */
    public String logGroupId() {
        return this.logGroupId;
    }
    /**
     * @return Name of the Logging Analytics Source to use for the processing.
     * 
     */
    public String logSourceName() {
        return this.logSourceName;
    }
    /**
     * @return A unique name to the rule. The name must be unique, within the tenancy, and cannot be changed.
     * 
     */
    public String name() {
        return this.name;
    }
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return When the filters are provided, only the objects matching the filters are picked up for processing. The matchType supported is exact match and accommodates wildcard &#34;*&#34;. For more information on filters, see [Event Filters](https://docs.oracle.com/en-us/iaas/Content/Events/Concepts/filterevents.htm).
     * 
     */
    public List<String> objectNameFilters() {
        return this.objectNameFilters;
    }
    /**
     * @return Name of the Object Storage bucket.
     * 
     */
    public String osBucketName() {
        return this.osBucketName;
    }
    /**
     * @return Object Storage namespace.
     * 
     */
    public String osNamespace() {
        return this.osNamespace;
    }
    /**
     * @return Use this to override some property values which are defined at bucket level to the scope of object. Supported propeties for override are, logSourceName, charEncoding. Supported matchType for override are &#34;contains&#34;.
     * 
     */
    public List<GetLogAnalyticsObjectCollectionRuleOverride> overrides() {
        return this.overrides;
    }
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: BEGINNING or CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollSince value other than CURRENT_TIME will result in error.
     * 
     */
    public String pollSince() {
        return this.pollSince;
    }
    /**
     * @return The oldest time of the file in the bucket to consider for collection. Accepted values are: CURRENT_TIME or RFC3339 formatted datetime string. When collectionType is LIVE, specifying pollTill will result in error.
     * 
     */
    public String pollTill() {
        return this.pollTill;
    }
    /**
     * @return The current state of the rule.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time when this rule was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when this rule was last updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLogAnalyticsObjectCollectionRuleResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String charEncoding;
        private String collectionType;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String entityId;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String logAnalyticsObjectCollectionRuleId;
        private String logGroupId;
        private String logSourceName;
        private String name;
        private String namespace;
        private List<String> objectNameFilters;
        private String osBucketName;
        private String osNamespace;
        private List<GetLogAnalyticsObjectCollectionRuleOverride> overrides;
        private String pollSince;
        private String pollTill;
        private String state;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetLogAnalyticsObjectCollectionRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.charEncoding = defaults.charEncoding;
    	      this.collectionType = defaults.collectionType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.entityId = defaults.entityId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.logAnalyticsObjectCollectionRuleId = defaults.logAnalyticsObjectCollectionRuleId;
    	      this.logGroupId = defaults.logGroupId;
    	      this.logSourceName = defaults.logSourceName;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.objectNameFilters = defaults.objectNameFilters;
    	      this.osBucketName = defaults.osBucketName;
    	      this.osNamespace = defaults.osNamespace;
    	      this.overrides = defaults.overrides;
    	      this.pollSince = defaults.pollSince;
    	      this.pollTill = defaults.pollTill;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder charEncoding(String charEncoding) {
            this.charEncoding = Objects.requireNonNull(charEncoding);
            return this;
        }
        public Builder collectionType(String collectionType) {
            this.collectionType = Objects.requireNonNull(collectionType);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder entityId(String entityId) {
            this.entityId = Objects.requireNonNull(entityId);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder logAnalyticsObjectCollectionRuleId(String logAnalyticsObjectCollectionRuleId) {
            this.logAnalyticsObjectCollectionRuleId = Objects.requireNonNull(logAnalyticsObjectCollectionRuleId);
            return this;
        }
        public Builder logGroupId(String logGroupId) {
            this.logGroupId = Objects.requireNonNull(logGroupId);
            return this;
        }
        public Builder logSourceName(String logSourceName) {
            this.logSourceName = Objects.requireNonNull(logSourceName);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        public Builder objectNameFilters(List<String> objectNameFilters) {
            this.objectNameFilters = Objects.requireNonNull(objectNameFilters);
            return this;
        }
        public Builder objectNameFilters(String... objectNameFilters) {
            return objectNameFilters(List.of(objectNameFilters));
        }
        public Builder osBucketName(String osBucketName) {
            this.osBucketName = Objects.requireNonNull(osBucketName);
            return this;
        }
        public Builder osNamespace(String osNamespace) {
            this.osNamespace = Objects.requireNonNull(osNamespace);
            return this;
        }
        public Builder overrides(List<GetLogAnalyticsObjectCollectionRuleOverride> overrides) {
            this.overrides = Objects.requireNonNull(overrides);
            return this;
        }
        public Builder overrides(GetLogAnalyticsObjectCollectionRuleOverride... overrides) {
            return overrides(List.of(overrides));
        }
        public Builder pollSince(String pollSince) {
            this.pollSince = Objects.requireNonNull(pollSince);
            return this;
        }
        public Builder pollTill(String pollTill) {
            this.pollTill = Objects.requireNonNull(pollTill);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetLogAnalyticsObjectCollectionRuleResult build() {
            return new GetLogAnalyticsObjectCollectionRuleResult(charEncoding, collectionType, compartmentId, definedTags, description, entityId, freeformTags, id, lifecycleDetails, logAnalyticsObjectCollectionRuleId, logGroupId, logSourceName, name, namespace, objectNameFilters, osBucketName, osNamespace, overrides, pollSince, pollTill, state, timeCreated, timeUpdated);
        }
    }
}
