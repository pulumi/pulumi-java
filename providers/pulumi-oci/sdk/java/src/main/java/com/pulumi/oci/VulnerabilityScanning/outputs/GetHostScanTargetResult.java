// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VulnerabilityScanning.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetHostScanTargetResult {
    /**
     * @return Compartment ID of the object (this).
     * 
     */
    private final String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Target description.
     * 
     */
    private final String description;
    /**
     * @return Target identifier, which can be renamed.
     * 
     */
    private final String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return ID of the host scan recipe this target applies.
     * 
     */
    private final String hostScanRecipeId;
    private final String hostScanTargetId;
    /**
     * @return Unique identifier of the config that is immutable on creation
     * 
     */
    private final String id;
    /**
     * @return List of compute instance IDs to target (optional). If empty, targets the entire targetCompartmentId.
     * 
     */
    private final List<String> instanceIds;
    /**
     * @return The current state of the config.
     * 
     */
    private final String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private final Map<String,Object> systemTags;
    /**
     * @return Compartment ID to target. If a list of hosts is provided, all hosts must be in this compartment.
     * 
     */
    private final String targetCompartmentId;
    /**
     * @return Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    private final String timeCreated;
    /**
     * @return Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetHostScanTargetResult(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("hostScanRecipeId") String hostScanRecipeId,
        @CustomType.Parameter("hostScanTargetId") String hostScanTargetId,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceIds") List<String> instanceIds,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("systemTags") Map<String,Object> systemTags,
        @CustomType.Parameter("targetCompartmentId") String targetCompartmentId,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.description = description;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.hostScanRecipeId = hostScanRecipeId;
        this.hostScanTargetId = hostScanTargetId;
        this.id = id;
        this.instanceIds = instanceIds;
        this.state = state;
        this.systemTags = systemTags;
        this.targetCompartmentId = targetCompartmentId;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    /**
     * @return Compartment ID of the object (this).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Target description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Target identifier, which can be renamed.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return ID of the host scan recipe this target applies.
     * 
     */
    public String hostScanRecipeId() {
        return this.hostScanRecipeId;
    }
    public String hostScanTargetId() {
        return this.hostScanTargetId;
    }
    /**
     * @return Unique identifier of the config that is immutable on creation
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of compute instance IDs to target (optional). If empty, targets the entire targetCompartmentId.
     * 
     */
    public List<String> instanceIds() {
        return this.instanceIds;
    }
    /**
     * @return The current state of the config.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Compartment ID to target. If a list of hosts is provided, all hosts must be in this compartment.
     * 
     */
    public String targetCompartmentId() {
        return this.targetCompartmentId;
    }
    /**
     * @return Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHostScanTargetResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String hostScanRecipeId;
        private String hostScanTargetId;
        private String id;
        private List<String> instanceIds;
        private String state;
        private Map<String,Object> systemTags;
        private String targetCompartmentId;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetHostScanTargetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hostScanRecipeId = defaults.hostScanRecipeId;
    	      this.hostScanTargetId = defaults.hostScanTargetId;
    	      this.id = defaults.id;
    	      this.instanceIds = defaults.instanceIds;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.targetCompartmentId = defaults.targetCompartmentId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder hostScanRecipeId(String hostScanRecipeId) {
            this.hostScanRecipeId = Objects.requireNonNull(hostScanRecipeId);
            return this;
        }
        public Builder hostScanTargetId(String hostScanTargetId) {
            this.hostScanTargetId = Objects.requireNonNull(hostScanTargetId);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instanceIds(List<String> instanceIds) {
            this.instanceIds = Objects.requireNonNull(instanceIds);
            return this;
        }
        public Builder instanceIds(String... instanceIds) {
            return instanceIds(List.of(instanceIds));
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        public Builder targetCompartmentId(String targetCompartmentId) {
            this.targetCompartmentId = Objects.requireNonNull(targetCompartmentId);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetHostScanTargetResult build() {
            return new GetHostScanTargetResult(compartmentId, definedTags, description, displayName, freeformTags, hostScanRecipeId, hostScanTargetId, id, instanceIds, state, systemTags, targetCompartmentId, timeCreated, timeUpdated);
        }
    }
}
