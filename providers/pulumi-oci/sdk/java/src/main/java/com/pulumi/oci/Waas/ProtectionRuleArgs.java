// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Waas.inputs.ProtectionRuleExclusionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProtectionRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProtectionRuleArgs Empty = new ProtectionRuleArgs();

    /**
     * (Updatable) The action to take when the traffic is detected as malicious. If unspecified, defaults to `OFF`.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return (Updatable) The action to take when the traffic is detected as malicious. If unspecified, defaults to `OFF`.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * An array of The target property of a request that would allow it to bypass the protection rule. For example, when `target` is `REQUEST_COOKIE_NAMES`, the list may include names of cookies to exclude from the protection rule. When the target is `ARGS`, the list may include strings of URL query parameters and values from form-urlencoded XML, JSON, AMP, or POST payloads to exclude from the protection rule. `Exclusions` properties must not contain whitespace, comma or |. **Note:** If protection rules have been enabled that utilize the `maxArgumentCount` or `maxTotalNameLengthOfArguments` properties, and the `target` property has been set to `ARGS`, it is important that the `exclusions` properties be defined to honor those protection rule settings in a consistent manner.
     * 
     */
    @Import(name="exclusions")
    private @Nullable Output<List<ProtectionRuleExclusionArgs>> exclusions;

    /**
     * @return An array of The target property of a request that would allow it to bypass the protection rule. For example, when `target` is `REQUEST_COOKIE_NAMES`, the list may include names of cookies to exclude from the protection rule. When the target is `ARGS`, the list may include strings of URL query parameters and values from form-urlencoded XML, JSON, AMP, or POST payloads to exclude from the protection rule. `Exclusions` properties must not contain whitespace, comma or |. **Note:** If protection rules have been enabled that utilize the `maxArgumentCount` or `maxTotalNameLengthOfArguments` properties, and the `target` property has been set to `ARGS`, it is important that the `exclusions` properties be defined to honor those protection rule settings in a consistent manner.
     * 
     */
    public Optional<Output<List<ProtectionRuleExclusionArgs>>> exclusions() {
        return Optional.ofNullable(this.exclusions);
    }

    /**
     * (Updatable) The unique key of the protection rule.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return (Updatable) The unique key of the protection rule.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WAAS policy.
     * 
     */
    @Import(name="waasPolicyId", required=true)
    private Output<String> waasPolicyId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WAAS policy.
     * 
     */
    public Output<String> waasPolicyId() {
        return this.waasPolicyId;
    }

    private ProtectionRuleArgs() {}

    private ProtectionRuleArgs(ProtectionRuleArgs $) {
        this.action = $.action;
        this.exclusions = $.exclusions;
        this.key = $.key;
        this.waasPolicyId = $.waasPolicyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProtectionRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProtectionRuleArgs $;

        public Builder() {
            $ = new ProtectionRuleArgs();
        }

        public Builder(ProtectionRuleArgs defaults) {
            $ = new ProtectionRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action (Updatable) The action to take when the traffic is detected as malicious. If unspecified, defaults to `OFF`.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action (Updatable) The action to take when the traffic is detected as malicious. If unspecified, defaults to `OFF`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param exclusions An array of The target property of a request that would allow it to bypass the protection rule. For example, when `target` is `REQUEST_COOKIE_NAMES`, the list may include names of cookies to exclude from the protection rule. When the target is `ARGS`, the list may include strings of URL query parameters and values from form-urlencoded XML, JSON, AMP, or POST payloads to exclude from the protection rule. `Exclusions` properties must not contain whitespace, comma or |. **Note:** If protection rules have been enabled that utilize the `maxArgumentCount` or `maxTotalNameLengthOfArguments` properties, and the `target` property has been set to `ARGS`, it is important that the `exclusions` properties be defined to honor those protection rule settings in a consistent manner.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(@Nullable Output<List<ProtectionRuleExclusionArgs>> exclusions) {
            $.exclusions = exclusions;
            return this;
        }

        /**
         * @param exclusions An array of The target property of a request that would allow it to bypass the protection rule. For example, when `target` is `REQUEST_COOKIE_NAMES`, the list may include names of cookies to exclude from the protection rule. When the target is `ARGS`, the list may include strings of URL query parameters and values from form-urlencoded XML, JSON, AMP, or POST payloads to exclude from the protection rule. `Exclusions` properties must not contain whitespace, comma or |. **Note:** If protection rules have been enabled that utilize the `maxArgumentCount` or `maxTotalNameLengthOfArguments` properties, and the `target` property has been set to `ARGS`, it is important that the `exclusions` properties be defined to honor those protection rule settings in a consistent manner.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(List<ProtectionRuleExclusionArgs> exclusions) {
            return exclusions(Output.of(exclusions));
        }

        /**
         * @param exclusions An array of The target property of a request that would allow it to bypass the protection rule. For example, when `target` is `REQUEST_COOKIE_NAMES`, the list may include names of cookies to exclude from the protection rule. When the target is `ARGS`, the list may include strings of URL query parameters and values from form-urlencoded XML, JSON, AMP, or POST payloads to exclude from the protection rule. `Exclusions` properties must not contain whitespace, comma or |. **Note:** If protection rules have been enabled that utilize the `maxArgumentCount` or `maxTotalNameLengthOfArguments` properties, and the `target` property has been set to `ARGS`, it is important that the `exclusions` properties be defined to honor those protection rule settings in a consistent manner.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(ProtectionRuleExclusionArgs... exclusions) {
            return exclusions(List.of(exclusions));
        }

        /**
         * @param key (Updatable) The unique key of the protection rule.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Updatable) The unique key of the protection rule.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param waasPolicyId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WAAS policy.
         * 
         * @return builder
         * 
         */
        public Builder waasPolicyId(Output<String> waasPolicyId) {
            $.waasPolicyId = waasPolicyId;
            return this;
        }

        /**
         * @param waasPolicyId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WAAS policy.
         * 
         * @return builder
         * 
         */
        public Builder waasPolicyId(String waasPolicyId) {
            return waasPolicyId(Output.of(waasPolicyId));
        }

        public ProtectionRuleArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.waasPolicyId = Objects.requireNonNull($.waasPolicyId, "expected parameter 'waasPolicyId' to be non-null");
            return $;
        }
    }

}
