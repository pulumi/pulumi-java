// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry {
    /**
     * @return The operations used to convert a non-container database to a pluggable database.
     * * Use `PRECHECK` to run a pre-check operation on non-container database prior to converting it into a pluggable database.
     * * Use `CONVERT` to convert a non-container database into a pluggable database.
     * * Use `SYNC` if the non-container database was manually converted into a pluggable database using the dbcli command-line utility. Databases may need to be converted manually if the CONVERT action fails when converting a non-container database using the API.
     * * Use `SYNC_ROLLBACK` if the conversion of a non-container database into a pluggable database was manually rolled back using the dbcli command line utility. Conversions may need to be manually rolled back if the CONVERT action fails when converting a non-container database using the API.
     * 
     */
    private final String action;
    /**
     * @return Additional container database parameter.
     * 
     */
    private final String additionalCdbParams;
    /**
     * @return The database name. The name must begin with an alphabetic character and can contain a maximum of 8 alphanumeric characters. Special characters are not permitted. The database name must be unique in the tenancy.
     * 
     */
    private final String cdbName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database conversion history.
     * 
     */
    private final String id;
    /**
     * @return Additional information about the current lifecycle state for the conversion operation.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    private final String sourceDatabaseId;
    /**
     * @return A filter to return only the pluggable database conversion history entries that match the specified lifecycle state. For example, you can use this filter to return only entries in the &#34;failed&#34; lifecycle state.
     * 
     */
    private final String state;
    /**
     * @return The target container database of the pluggable database created by the database conversion operation. Currently, the database conversion operation only supports creating the pluggable database in a new container database.
     * * Use `NEW_DATABASE` to specify that the pluggable database be created within a new container database in the same database home.
     * 
     */
    private final String target;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    private final String targetDatabaseId;
    /**
     * @return The date and time when the database conversion operation ended.
     * 
     */
    private final String timeEnded;
    /**
     * @return The date and time when the database conversion operation started.
     * 
     */
    private final String timeStarted;

    @CustomType.Constructor
    private GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry(
        @CustomType.Parameter("action") String action,
        @CustomType.Parameter("additionalCdbParams") String additionalCdbParams,
        @CustomType.Parameter("cdbName") String cdbName,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("sourceDatabaseId") String sourceDatabaseId,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("target") String target,
        @CustomType.Parameter("targetDatabaseId") String targetDatabaseId,
        @CustomType.Parameter("timeEnded") String timeEnded,
        @CustomType.Parameter("timeStarted") String timeStarted) {
        this.action = action;
        this.additionalCdbParams = additionalCdbParams;
        this.cdbName = cdbName;
        this.id = id;
        this.lifecycleDetails = lifecycleDetails;
        this.sourceDatabaseId = sourceDatabaseId;
        this.state = state;
        this.target = target;
        this.targetDatabaseId = targetDatabaseId;
        this.timeEnded = timeEnded;
        this.timeStarted = timeStarted;
    }

    /**
     * @return The operations used to convert a non-container database to a pluggable database.
     * * Use `PRECHECK` to run a pre-check operation on non-container database prior to converting it into a pluggable database.
     * * Use `CONVERT` to convert a non-container database into a pluggable database.
     * * Use `SYNC` if the non-container database was manually converted into a pluggable database using the dbcli command-line utility. Databases may need to be converted manually if the CONVERT action fails when converting a non-container database using the API.
     * * Use `SYNC_ROLLBACK` if the conversion of a non-container database into a pluggable database was manually rolled back using the dbcli command line utility. Conversions may need to be manually rolled back if the CONVERT action fails when converting a non-container database using the API.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Additional container database parameter.
     * 
     */
    public String additionalCdbParams() {
        return this.additionalCdbParams;
    }
    /**
     * @return The database name. The name must begin with an alphabetic character and can contain a maximum of 8 alphanumeric characters. Special characters are not permitted. The database name must be unique in the tenancy.
     * 
     */
    public String cdbName() {
        return this.cdbName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database conversion history.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Additional information about the current lifecycle state for the conversion operation.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    public String sourceDatabaseId() {
        return this.sourceDatabaseId;
    }
    /**
     * @return A filter to return only the pluggable database conversion history entries that match the specified lifecycle state. For example, you can use this filter to return only entries in the &#34;failed&#34; lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The target container database of the pluggable database created by the database conversion operation. Currently, the database conversion operation only supports creating the pluggable database in a new container database.
     * * Use `NEW_DATABASE` to specify that the pluggable database be created within a new container database in the same database home.
     * 
     */
    public String target() {
        return this.target;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    public String targetDatabaseId() {
        return this.targetDatabaseId;
    }
    /**
     * @return The date and time when the database conversion operation ended.
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return The date and time when the database conversion operation started.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String action;
        private String additionalCdbParams;
        private String cdbName;
        private String id;
        private String lifecycleDetails;
        private String sourceDatabaseId;
        private String state;
        private String target;
        private String targetDatabaseId;
        private String timeEnded;
        private String timeStarted;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.additionalCdbParams = defaults.additionalCdbParams;
    	      this.cdbName = defaults.cdbName;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.sourceDatabaseId = defaults.sourceDatabaseId;
    	      this.state = defaults.state;
    	      this.target = defaults.target;
    	      this.targetDatabaseId = defaults.targetDatabaseId;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
        }

        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder additionalCdbParams(String additionalCdbParams) {
            this.additionalCdbParams = Objects.requireNonNull(additionalCdbParams);
            return this;
        }
        public Builder cdbName(String cdbName) {
            this.cdbName = Objects.requireNonNull(cdbName);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder sourceDatabaseId(String sourceDatabaseId) {
            this.sourceDatabaseId = Objects.requireNonNull(sourceDatabaseId);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder target(String target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        public Builder targetDatabaseId(String targetDatabaseId) {
            this.targetDatabaseId = Objects.requireNonNull(targetDatabaseId);
            return this;
        }
        public Builder timeEnded(String timeEnded) {
            this.timeEnded = Objects.requireNonNull(timeEnded);
            return this;
        }
        public Builder timeStarted(String timeStarted) {
            this.timeStarted = Objects.requireNonNull(timeStarted);
            return this;
        }        public GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry build() {
            return new GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry(action, additionalCdbParams, cdbName, id, lifecycleDetails, sourceDatabaseId, state, target, targetDatabaseId, timeEnded, timeStarted);
        }
    }
}
