// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Streaming.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamPoolKafkaSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamPoolKafkaSettingsArgs Empty = new StreamPoolKafkaSettingsArgs();

    /**
     * (Updatable) Enable auto creation of topic on the server.
     * 
     */
    @Import(name="autoCreateTopicsEnable")
    private @Nullable Output<Boolean> autoCreateTopicsEnable;

    /**
     * @return (Updatable) Enable auto creation of topic on the server.
     * 
     */
    public Optional<Output<Boolean>> autoCreateTopicsEnable() {
        return Optional.ofNullable(this.autoCreateTopicsEnable);
    }

    /**
     * (Updatable) Bootstrap servers.
     * 
     */
    @Import(name="bootstrapServers")
    private @Nullable Output<String> bootstrapServers;

    /**
     * @return (Updatable) Bootstrap servers.
     * 
     */
    public Optional<Output<String>> bootstrapServers() {
        return Optional.ofNullable(this.bootstrapServers);
    }

    /**
     * (Updatable) The number of hours to keep a log file before deleting it (in hours).
     * 
     */
    @Import(name="logRetentionHours")
    private @Nullable Output<Integer> logRetentionHours;

    /**
     * @return (Updatable) The number of hours to keep a log file before deleting it (in hours).
     * 
     */
    public Optional<Output<Integer>> logRetentionHours() {
        return Optional.ofNullable(this.logRetentionHours);
    }

    /**
     * (Updatable) The default number of log partitions per topic.
     * 
     */
    @Import(name="numPartitions")
    private @Nullable Output<Integer> numPartitions;

    /**
     * @return (Updatable) The default number of log partitions per topic.
     * 
     */
    public Optional<Output<Integer>> numPartitions() {
        return Optional.ofNullable(this.numPartitions);
    }

    private StreamPoolKafkaSettingsArgs() {}

    private StreamPoolKafkaSettingsArgs(StreamPoolKafkaSettingsArgs $) {
        this.autoCreateTopicsEnable = $.autoCreateTopicsEnable;
        this.bootstrapServers = $.bootstrapServers;
        this.logRetentionHours = $.logRetentionHours;
        this.numPartitions = $.numPartitions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamPoolKafkaSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamPoolKafkaSettingsArgs $;

        public Builder() {
            $ = new StreamPoolKafkaSettingsArgs();
        }

        public Builder(StreamPoolKafkaSettingsArgs defaults) {
            $ = new StreamPoolKafkaSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoCreateTopicsEnable (Updatable) Enable auto creation of topic on the server.
         * 
         * @return builder
         * 
         */
        public Builder autoCreateTopicsEnable(@Nullable Output<Boolean> autoCreateTopicsEnable) {
            $.autoCreateTopicsEnable = autoCreateTopicsEnable;
            return this;
        }

        /**
         * @param autoCreateTopicsEnable (Updatable) Enable auto creation of topic on the server.
         * 
         * @return builder
         * 
         */
        public Builder autoCreateTopicsEnable(Boolean autoCreateTopicsEnable) {
            return autoCreateTopicsEnable(Output.of(autoCreateTopicsEnable));
        }

        /**
         * @param bootstrapServers (Updatable) Bootstrap servers.
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(@Nullable Output<String> bootstrapServers) {
            $.bootstrapServers = bootstrapServers;
            return this;
        }

        /**
         * @param bootstrapServers (Updatable) Bootstrap servers.
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(String bootstrapServers) {
            return bootstrapServers(Output.of(bootstrapServers));
        }

        /**
         * @param logRetentionHours (Updatable) The number of hours to keep a log file before deleting it (in hours).
         * 
         * @return builder
         * 
         */
        public Builder logRetentionHours(@Nullable Output<Integer> logRetentionHours) {
            $.logRetentionHours = logRetentionHours;
            return this;
        }

        /**
         * @param logRetentionHours (Updatable) The number of hours to keep a log file before deleting it (in hours).
         * 
         * @return builder
         * 
         */
        public Builder logRetentionHours(Integer logRetentionHours) {
            return logRetentionHours(Output.of(logRetentionHours));
        }

        /**
         * @param numPartitions (Updatable) The default number of log partitions per topic.
         * 
         * @return builder
         * 
         */
        public Builder numPartitions(@Nullable Output<Integer> numPartitions) {
            $.numPartitions = numPartitions;
            return this;
        }

        /**
         * @param numPartitions (Updatable) The default number of log partitions per topic.
         * 
         * @return builder
         * 
         */
        public Builder numPartitions(Integer numPartitions) {
            return numPartitions(Output.of(numPartitions));
        }

        public StreamPoolKafkaSettingsArgs build() {
            return $;
        }
    }

}
