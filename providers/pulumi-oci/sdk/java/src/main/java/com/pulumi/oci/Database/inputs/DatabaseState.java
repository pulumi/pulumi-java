// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.DatabaseConnectionStringArgs;
import com.pulumi.oci.Database.inputs.DatabaseDatabaseArgs;
import com.pulumi.oci.Database.inputs.DatabaseDatabaseManagementConfigArgs;
import com.pulumi.oci.Database.inputs.DatabaseDbBackupConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseState Empty = new DatabaseState();

    /**
     * The character set for the database.  The default is AL32UTF8. Allowed values are:
     * 
     */
    @Import(name="characterSet")
    private @Nullable Output<String> characterSet;

    /**
     * @return The character set for the database.  The default is AL32UTF8. Allowed values are:
     * 
     */
    public Optional<Output<String>> characterSet() {
        return Optional.ofNullable(this.characterSet);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The Connection strings used to connect to the Oracle Database.
     * 
     */
    @Import(name="connectionStrings")
    private @Nullable Output<List<DatabaseConnectionStringArgs>> connectionStrings;

    /**
     * @return The Connection strings used to connect to the Oracle Database.
     * 
     */
    public Optional<Output<List<DatabaseConnectionStringArgs>>> connectionStrings() {
        return Optional.ofNullable(this.connectionStrings);
    }

    /**
     * (Updatable) Details for creating a database.
     * 
     */
    @Import(name="database")
    private @Nullable Output<DatabaseDatabaseArgs> database;

    /**
     * @return (Updatable) Details for creating a database.
     * 
     */
    public Optional<Output<DatabaseDatabaseArgs>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * The configuration of the Database Management service.
     * 
     */
    @Import(name="databaseManagementConfigs")
    private @Nullable Output<List<DatabaseDatabaseManagementConfigArgs>> databaseManagementConfigs;

    /**
     * @return The configuration of the Database Management service.
     * 
     */
    public Optional<Output<List<DatabaseDatabaseManagementConfigArgs>>> databaseManagementConfigs() {
        return Optional.ofNullable(this.databaseManagementConfigs);
    }

    /**
     * The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    @Import(name="databaseSoftwareImageId")
    private @Nullable Output<String> databaseSoftwareImageId;

    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public Optional<Output<String>> databaseSoftwareImageId() {
        return Optional.ofNullable(this.databaseSoftwareImageId);
    }

    /**
     * (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    @Import(name="dbBackupConfigs")
    private @Nullable Output<List<DatabaseDbBackupConfigArgs>> dbBackupConfigs;

    /**
     * @return (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    public Optional<Output<List<DatabaseDbBackupConfigArgs>>> dbBackupConfigs() {
        return Optional.ofNullable(this.dbBackupConfigs);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    @Import(name="dbHomeId")
    private @Nullable Output<String> dbHomeId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    public Optional<Output<String>> dbHomeId() {
        return Optional.ofNullable(this.dbHomeId);
    }

    /**
     * The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
     * 
     */
    @Import(name="dbName")
    private @Nullable Output<String> dbName;

    /**
     * @return The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
     * 
     */
    public Optional<Output<String>> dbName() {
        return Optional.ofNullable(this.dbName);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    @Import(name="dbSystemId")
    private @Nullable Output<String> dbSystemId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public Optional<Output<String>> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }

    /**
     * The `DB_UNIQUE_NAME` of the Oracle Database being backed up.
     * 
     */
    @Import(name="dbUniqueName")
    private @Nullable Output<String> dbUniqueName;

    /**
     * @return The `DB_UNIQUE_NAME` of the Oracle Database being backed up.
     * 
     */
    public Optional<Output<String>> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }

    /**
     * A valid Oracle Database version. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
     * 
     */
    @Import(name="dbVersion")
    private @Nullable Output<String> dbVersion;

    /**
     * @return A valid Oracle Database version. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
     * 
     */
    public Optional<Output<String>> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }

    /**
     * The database workload type.
     * 
     */
    @Import(name="dbWorkload")
    private @Nullable Output<String> dbWorkload;

    /**
     * @return The database workload type.
     * 
     */
    public Optional<Output<String>> dbWorkload() {
        return Optional.ofNullable(this.dbWorkload);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * True if the database is a container database.
     * 
     */
    @Import(name="isCdb")
    private @Nullable Output<Boolean> isCdb;

    /**
     * @return True if the database is a container database.
     * 
     */
    public Optional<Output<Boolean>> isCdb() {
        return Optional.ofNullable(this.isCdb);
    }

    /**
     * The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The value to migrate to the kms version from none. Can only use once by setting value to true. You can not switch back to non-kms once you created or migrated.(https://www.oracle.com/security/cloud-security/key-management/faq/)
     * 
     */
    @Import(name="kmsKeyMigration")
    private @Nullable Output<Boolean> kmsKeyMigration;

    /**
     * @return The value to migrate to the kms version from none. Can only use once by setting value to true. You can not switch back to non-kms once you created or migrated.(https://www.oracle.com/security/cloud-security/key-management/faq/)
     * 
     */
    public Optional<Output<Boolean>> kmsKeyMigration() {
        return Optional.ofNullable(this.kmsKeyMigration);
    }

    /**
     * The value to rotate the key version of current kms_key. Just change this value will trigger the rotation.
     * 
     */
    @Import(name="kmsKeyRotation")
    private @Nullable Output<Integer> kmsKeyRotation;

    /**
     * @return The value to rotate the key version of current kms_key. Just change this value will trigger the rotation.
     * 
     */
    public Optional<Output<Integer>> kmsKeyRotation() {
        return Optional.ofNullable(this.kmsKeyRotation);
    }

    /**
     * The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    @Import(name="kmsKeyVersionId")
    private @Nullable Output<String> kmsKeyVersionId;

    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    public Optional<Output<String>> kmsKeyVersionId() {
        return Optional.ofNullable(this.kmsKeyVersionId);
    }

    /**
     * The date and time when the latest database backup was created.
     * 
     */
    @Import(name="lastBackupTimestamp")
    private @Nullable Output<String> lastBackupTimestamp;

    /**
     * @return The date and time when the latest database backup was created.
     * 
     */
    public Optional<Output<String>> lastBackupTimestamp() {
        return Optional.ofNullable(this.lastBackupTimestamp);
    }

    /**
     * Additional information about the current lifecycle state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
     * 
     */
    @Import(name="ncharacterSet")
    private @Nullable Output<String> ncharacterSet;

    /**
     * @return The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
     * 
     */
    public Optional<Output<String>> ncharacterSet() {
        return Optional.ofNullable(this.ncharacterSet);
    }

    /**
     * The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    @Import(name="pdbName")
    private @Nullable Output<String> pdbName;

    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    public Optional<Output<String>> pdbName() {
        return Optional.ofNullable(this.pdbName);
    }

    /**
     * Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    @Import(name="sidPrefix")
    private @Nullable Output<String> sidPrefix;

    /**
     * @return Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    public Optional<Output<String>> sidPrefix() {
        return Optional.ofNullable(this.sidPrefix);
    }

    /**
     * The source of the database: Use `NONE` for creating a new database. Use `DB_BACKUP` for creating a new database by restoring from a backup. The default is `NONE`.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The source of the database: Use `NONE` for creating a new database. Use `DB_BACKUP` for creating a new database by restoring from a backup. The default is `NONE`.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Point in time recovery timeStamp of the source database at which cloned database system is cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    @Import(name="sourceDatabasePointInTimeRecoveryTimestamp")
    private @Nullable Output<String> sourceDatabasePointInTimeRecoveryTimestamp;

    /**
     * @return Point in time recovery timeStamp of the source database at which cloned database system is cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public Optional<Output<String>> sourceDatabasePointInTimeRecoveryTimestamp() {
        return Optional.ofNullable(this.sourceDatabasePointInTimeRecoveryTimestamp);
    }

    /**
     * The current state of the database.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the database.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the database was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the database was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    @Import(name="vmClusterId")
    private @Nullable Output<String> vmClusterId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    public Optional<Output<String>> vmClusterId() {
        return Optional.ofNullable(this.vmClusterId);
    }

    private DatabaseState() {}

    private DatabaseState(DatabaseState $) {
        this.characterSet = $.characterSet;
        this.compartmentId = $.compartmentId;
        this.connectionStrings = $.connectionStrings;
        this.database = $.database;
        this.databaseManagementConfigs = $.databaseManagementConfigs;
        this.databaseSoftwareImageId = $.databaseSoftwareImageId;
        this.dbBackupConfigs = $.dbBackupConfigs;
        this.dbHomeId = $.dbHomeId;
        this.dbName = $.dbName;
        this.dbSystemId = $.dbSystemId;
        this.dbUniqueName = $.dbUniqueName;
        this.dbVersion = $.dbVersion;
        this.dbWorkload = $.dbWorkload;
        this.definedTags = $.definedTags;
        this.freeformTags = $.freeformTags;
        this.isCdb = $.isCdb;
        this.kmsKeyId = $.kmsKeyId;
        this.kmsKeyMigration = $.kmsKeyMigration;
        this.kmsKeyRotation = $.kmsKeyRotation;
        this.kmsKeyVersionId = $.kmsKeyVersionId;
        this.lastBackupTimestamp = $.lastBackupTimestamp;
        this.lifecycleDetails = $.lifecycleDetails;
        this.ncharacterSet = $.ncharacterSet;
        this.pdbName = $.pdbName;
        this.sidPrefix = $.sidPrefix;
        this.source = $.source;
        this.sourceDatabasePointInTimeRecoveryTimestamp = $.sourceDatabasePointInTimeRecoveryTimestamp;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.vaultId = $.vaultId;
        this.vmClusterId = $.vmClusterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseState $;

        public Builder() {
            $ = new DatabaseState();
        }

        public Builder(DatabaseState defaults) {
            $ = new DatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param characterSet The character set for the database.  The default is AL32UTF8. Allowed values are:
         * 
         * @return builder
         * 
         */
        public Builder characterSet(@Nullable Output<String> characterSet) {
            $.characterSet = characterSet;
            return this;
        }

        /**
         * @param characterSet The character set for the database.  The default is AL32UTF8. Allowed values are:
         * 
         * @return builder
         * 
         */
        public Builder characterSet(String characterSet) {
            return characterSet(Output.of(characterSet));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param connectionStrings The Connection strings used to connect to the Oracle Database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(@Nullable Output<List<DatabaseConnectionStringArgs>> connectionStrings) {
            $.connectionStrings = connectionStrings;
            return this;
        }

        /**
         * @param connectionStrings The Connection strings used to connect to the Oracle Database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(List<DatabaseConnectionStringArgs> connectionStrings) {
            return connectionStrings(Output.of(connectionStrings));
        }

        /**
         * @param connectionStrings The Connection strings used to connect to the Oracle Database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(DatabaseConnectionStringArgs... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }

        /**
         * @param database (Updatable) Details for creating a database.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<DatabaseDatabaseArgs> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database (Updatable) Details for creating a database.
         * 
         * @return builder
         * 
         */
        public Builder database(DatabaseDatabaseArgs database) {
            return database(Output.of(database));
        }

        /**
         * @param databaseManagementConfigs The configuration of the Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagementConfigs(@Nullable Output<List<DatabaseDatabaseManagementConfigArgs>> databaseManagementConfigs) {
            $.databaseManagementConfigs = databaseManagementConfigs;
            return this;
        }

        /**
         * @param databaseManagementConfigs The configuration of the Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagementConfigs(List<DatabaseDatabaseManagementConfigArgs> databaseManagementConfigs) {
            return databaseManagementConfigs(Output.of(databaseManagementConfigs));
        }

        /**
         * @param databaseManagementConfigs The configuration of the Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagementConfigs(DatabaseDatabaseManagementConfigArgs... databaseManagementConfigs) {
            return databaseManagementConfigs(List.of(databaseManagementConfigs));
        }

        /**
         * @param databaseSoftwareImageId The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
         * 
         * @return builder
         * 
         */
        public Builder databaseSoftwareImageId(@Nullable Output<String> databaseSoftwareImageId) {
            $.databaseSoftwareImageId = databaseSoftwareImageId;
            return this;
        }

        /**
         * @param databaseSoftwareImageId The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
         * 
         * @return builder
         * 
         */
        public Builder databaseSoftwareImageId(String databaseSoftwareImageId) {
            return databaseSoftwareImageId(Output.of(databaseSoftwareImageId));
        }

        /**
         * @param dbBackupConfigs (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbBackupConfigs(@Nullable Output<List<DatabaseDbBackupConfigArgs>> dbBackupConfigs) {
            $.dbBackupConfigs = dbBackupConfigs;
            return this;
        }

        /**
         * @param dbBackupConfigs (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbBackupConfigs(List<DatabaseDbBackupConfigArgs> dbBackupConfigs) {
            return dbBackupConfigs(Output.of(dbBackupConfigs));
        }

        /**
         * @param dbBackupConfigs (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbBackupConfigs(DatabaseDbBackupConfigArgs... dbBackupConfigs) {
            return dbBackupConfigs(List.of(dbBackupConfigs));
        }

        /**
         * @param dbHomeId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
         * 
         * @return builder
         * 
         */
        public Builder dbHomeId(@Nullable Output<String> dbHomeId) {
            $.dbHomeId = dbHomeId;
            return this;
        }

        /**
         * @param dbHomeId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
         * 
         * @return builder
         * 
         */
        public Builder dbHomeId(String dbHomeId) {
            return dbHomeId(Output.of(dbHomeId));
        }

        /**
         * @param dbName The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
         * 
         * @return builder
         * 
         */
        public Builder dbName(@Nullable Output<String> dbName) {
            $.dbName = dbName;
            return this;
        }

        /**
         * @param dbName The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
         * 
         * @return builder
         * 
         */
        public Builder dbName(String dbName) {
            return dbName(Output.of(dbName));
        }

        /**
         * @param dbSystemId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(@Nullable Output<String> dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param dbSystemId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            return dbSystemId(Output.of(dbSystemId));
        }

        /**
         * @param dbUniqueName The `DB_UNIQUE_NAME` of the Oracle Database being backed up.
         * 
         * @return builder
         * 
         */
        public Builder dbUniqueName(@Nullable Output<String> dbUniqueName) {
            $.dbUniqueName = dbUniqueName;
            return this;
        }

        /**
         * @param dbUniqueName The `DB_UNIQUE_NAME` of the Oracle Database being backed up.
         * 
         * @return builder
         * 
         */
        public Builder dbUniqueName(String dbUniqueName) {
            return dbUniqueName(Output.of(dbUniqueName));
        }

        /**
         * @param dbVersion A valid Oracle Database version. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(@Nullable Output<String> dbVersion) {
            $.dbVersion = dbVersion;
            return this;
        }

        /**
         * @param dbVersion A valid Oracle Database version. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(String dbVersion) {
            return dbVersion(Output.of(dbVersion));
        }

        /**
         * @param dbWorkload The database workload type.
         * 
         * @return builder
         * 
         */
        public Builder dbWorkload(@Nullable Output<String> dbWorkload) {
            $.dbWorkload = dbWorkload;
            return this;
        }

        /**
         * @param dbWorkload The database workload type.
         * 
         * @return builder
         * 
         */
        public Builder dbWorkload(String dbWorkload) {
            return dbWorkload(Output.of(dbWorkload));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isCdb True if the database is a container database.
         * 
         * @return builder
         * 
         */
        public Builder isCdb(@Nullable Output<Boolean> isCdb) {
            $.isCdb = isCdb;
            return this;
        }

        /**
         * @param isCdb True if the database is a container database.
         * 
         * @return builder
         * 
         */
        public Builder isCdb(Boolean isCdb) {
            return isCdb(Output.of(isCdb));
        }

        /**
         * @param kmsKeyId The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param kmsKeyMigration The value to migrate to the kms version from none. Can only use once by setting value to true. You can not switch back to non-kms once you created or migrated.(https://www.oracle.com/security/cloud-security/key-management/faq/)
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyMigration(@Nullable Output<Boolean> kmsKeyMigration) {
            $.kmsKeyMigration = kmsKeyMigration;
            return this;
        }

        /**
         * @param kmsKeyMigration The value to migrate to the kms version from none. Can only use once by setting value to true. You can not switch back to non-kms once you created or migrated.(https://www.oracle.com/security/cloud-security/key-management/faq/)
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyMigration(Boolean kmsKeyMigration) {
            return kmsKeyMigration(Output.of(kmsKeyMigration));
        }

        /**
         * @param kmsKeyRotation The value to rotate the key version of current kms_key. Just change this value will trigger the rotation.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyRotation(@Nullable Output<Integer> kmsKeyRotation) {
            $.kmsKeyRotation = kmsKeyRotation;
            return this;
        }

        /**
         * @param kmsKeyRotation The value to rotate the key version of current kms_key. Just change this value will trigger the rotation.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyRotation(Integer kmsKeyRotation) {
            return kmsKeyRotation(Output.of(kmsKeyRotation));
        }

        /**
         * @param kmsKeyVersionId The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyVersionId(@Nullable Output<String> kmsKeyVersionId) {
            $.kmsKeyVersionId = kmsKeyVersionId;
            return this;
        }

        /**
         * @param kmsKeyVersionId The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyVersionId(String kmsKeyVersionId) {
            return kmsKeyVersionId(Output.of(kmsKeyVersionId));
        }

        /**
         * @param lastBackupTimestamp The date and time when the latest database backup was created.
         * 
         * @return builder
         * 
         */
        public Builder lastBackupTimestamp(@Nullable Output<String> lastBackupTimestamp) {
            $.lastBackupTimestamp = lastBackupTimestamp;
            return this;
        }

        /**
         * @param lastBackupTimestamp The date and time when the latest database backup was created.
         * 
         * @return builder
         * 
         */
        public Builder lastBackupTimestamp(String lastBackupTimestamp) {
            return lastBackupTimestamp(Output.of(lastBackupTimestamp));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param ncharacterSet The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
         * 
         * @return builder
         * 
         */
        public Builder ncharacterSet(@Nullable Output<String> ncharacterSet) {
            $.ncharacterSet = ncharacterSet;
            return this;
        }

        /**
         * @param ncharacterSet The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
         * 
         * @return builder
         * 
         */
        public Builder ncharacterSet(String ncharacterSet) {
            return ncharacterSet(Output.of(ncharacterSet));
        }

        /**
         * @param pdbName The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(@Nullable Output<String> pdbName) {
            $.pdbName = pdbName;
            return this;
        }

        /**
         * @param pdbName The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(String pdbName) {
            return pdbName(Output.of(pdbName));
        }

        /**
         * @param sidPrefix Specifies a prefix for the `Oracle SID` of the database to be created.
         * 
         * @return builder
         * 
         */
        public Builder sidPrefix(@Nullable Output<String> sidPrefix) {
            $.sidPrefix = sidPrefix;
            return this;
        }

        /**
         * @param sidPrefix Specifies a prefix for the `Oracle SID` of the database to be created.
         * 
         * @return builder
         * 
         */
        public Builder sidPrefix(String sidPrefix) {
            return sidPrefix(Output.of(sidPrefix));
        }

        /**
         * @param source The source of the database: Use `NONE` for creating a new database. Use `DB_BACKUP` for creating a new database by restoring from a backup. The default is `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source of the database: Use `NONE` for creating a new database. Use `DB_BACKUP` for creating a new database by restoring from a backup. The default is `NONE`.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceDatabasePointInTimeRecoveryTimestamp Point in time recovery timeStamp of the source database at which cloned database system is cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabasePointInTimeRecoveryTimestamp(@Nullable Output<String> sourceDatabasePointInTimeRecoveryTimestamp) {
            $.sourceDatabasePointInTimeRecoveryTimestamp = sourceDatabasePointInTimeRecoveryTimestamp;
            return this;
        }

        /**
         * @param sourceDatabasePointInTimeRecoveryTimestamp Point in time recovery timeStamp of the source database at which cloned database system is cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabasePointInTimeRecoveryTimestamp(String sourceDatabasePointInTimeRecoveryTimestamp) {
            return sourceDatabasePointInTimeRecoveryTimestamp(Output.of(sourceDatabasePointInTimeRecoveryTimestamp));
        }

        /**
         * @param state The current state of the database.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the database.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the database was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the database was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param vaultId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        /**
         * @param vmClusterId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
         * 
         * @return builder
         * 
         */
        public Builder vmClusterId(@Nullable Output<String> vmClusterId) {
            $.vmClusterId = vmClusterId;
            return this;
        }

        /**
         * @param vmClusterId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
         * 
         * @return builder
         * 
         */
        public Builder vmClusterId(String vmClusterId) {
            return vmClusterId(Output.of(vmClusterId));
        }

        public DatabaseState build() {
            return $;
        }
    }

}
