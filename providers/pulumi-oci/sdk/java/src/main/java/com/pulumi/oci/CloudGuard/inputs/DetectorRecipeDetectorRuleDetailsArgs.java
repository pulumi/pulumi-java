// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CloudGuard.inputs.DetectorRecipeDetectorRuleDetailsConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DetectorRecipeDetectorRuleDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DetectorRecipeDetectorRuleDetailsArgs Empty = new DetectorRecipeDetectorRuleDetailsArgs();

    /**
     * (Updatable)
     * 
     */
    @Import(name="condition")
    private @Nullable Output<String> condition;

    /**
     * @return (Updatable)
     * 
     */
    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * (Updatable) Configuration details
     * 
     */
    @Import(name="configurations")
    private @Nullable Output<List<DetectorRecipeDetectorRuleDetailsConfigurationArgs>> configurations;

    /**
     * @return (Updatable) Configuration details
     * 
     */
    public Optional<Output<List<DetectorRecipeDetectorRuleDetailsConfigurationArgs>>> configurations() {
        return Optional.ofNullable(this.configurations);
    }

    /**
     * configuration allowed or not
     * 
     */
    @Import(name="isConfigurationAllowed")
    private @Nullable Output<Boolean> isConfigurationAllowed;

    /**
     * @return configuration allowed or not
     * 
     */
    public Optional<Output<Boolean>> isConfigurationAllowed() {
        return Optional.ofNullable(this.isConfigurationAllowed);
    }

    /**
     * (Updatable) Enables the control
     * 
     */
    @Import(name="isEnabled", required=true)
    private Output<Boolean> isEnabled;

    /**
     * @return (Updatable) Enables the control
     * 
     */
    public Output<Boolean> isEnabled() {
        return this.isEnabled;
    }

    /**
     * (Updatable) user defined labels for a detector rule
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return (Updatable) user defined labels for a detector rule
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * (Updatable) The Risk Level
     * 
     */
    @Import(name="riskLevel", required=true)
    private Output<String> riskLevel;

    /**
     * @return (Updatable) The Risk Level
     * 
     */
    public Output<String> riskLevel() {
        return this.riskLevel;
    }

    private DetectorRecipeDetectorRuleDetailsArgs() {}

    private DetectorRecipeDetectorRuleDetailsArgs(DetectorRecipeDetectorRuleDetailsArgs $) {
        this.condition = $.condition;
        this.configurations = $.configurations;
        this.isConfigurationAllowed = $.isConfigurationAllowed;
        this.isEnabled = $.isEnabled;
        this.labels = $.labels;
        this.riskLevel = $.riskLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorRecipeDetectorRuleDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorRecipeDetectorRuleDetailsArgs $;

        public Builder() {
            $ = new DetectorRecipeDetectorRuleDetailsArgs();
        }

        public Builder(DetectorRecipeDetectorRuleDetailsArgs defaults) {
            $ = new DetectorRecipeDetectorRuleDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition (Updatable)
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition (Updatable)
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param configurations (Updatable) Configuration details
         * 
         * @return builder
         * 
         */
        public Builder configurations(@Nullable Output<List<DetectorRecipeDetectorRuleDetailsConfigurationArgs>> configurations) {
            $.configurations = configurations;
            return this;
        }

        /**
         * @param configurations (Updatable) Configuration details
         * 
         * @return builder
         * 
         */
        public Builder configurations(List<DetectorRecipeDetectorRuleDetailsConfigurationArgs> configurations) {
            return configurations(Output.of(configurations));
        }

        /**
         * @param configurations (Updatable) Configuration details
         * 
         * @return builder
         * 
         */
        public Builder configurations(DetectorRecipeDetectorRuleDetailsConfigurationArgs... configurations) {
            return configurations(List.of(configurations));
        }

        /**
         * @param isConfigurationAllowed configuration allowed or not
         * 
         * @return builder
         * 
         */
        public Builder isConfigurationAllowed(@Nullable Output<Boolean> isConfigurationAllowed) {
            $.isConfigurationAllowed = isConfigurationAllowed;
            return this;
        }

        /**
         * @param isConfigurationAllowed configuration allowed or not
         * 
         * @return builder
         * 
         */
        public Builder isConfigurationAllowed(Boolean isConfigurationAllowed) {
            return isConfigurationAllowed(Output.of(isConfigurationAllowed));
        }

        /**
         * @param isEnabled (Updatable) Enables the control
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) Enables the control
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param labels (Updatable) user defined labels for a detector rule
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels (Updatable) user defined labels for a detector rule
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels (Updatable) user defined labels for a detector rule
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param riskLevel (Updatable) The Risk Level
         * 
         * @return builder
         * 
         */
        public Builder riskLevel(Output<String> riskLevel) {
            $.riskLevel = riskLevel;
            return this;
        }

        /**
         * @param riskLevel (Updatable) The Risk Level
         * 
         * @return builder
         * 
         */
        public Builder riskLevel(String riskLevel) {
            return riskLevel(Output.of(riskLevel));
        }

        public DetectorRecipeDetectorRuleDetailsArgs build() {
            $.isEnabled = Objects.requireNonNull($.isEnabled, "expected parameter 'isEnabled' to be non-null");
            $.riskLevel = Objects.requireNonNull($.riskLevel, "expected parameter 'riskLevel' to be non-null");
            return $;
        }
    }

}
