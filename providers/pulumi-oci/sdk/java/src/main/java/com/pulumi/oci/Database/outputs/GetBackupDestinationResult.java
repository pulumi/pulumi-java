// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetBackupDestinationAssociatedDatabase;
import com.pulumi.oci.Database.outputs.GetBackupDestinationMountTypeDetail;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBackupDestinationResult {
    /**
     * @return List of databases associated with the backup destination.
     * 
     */
    private final List<GetBackupDestinationAssociatedDatabase> associatedDatabases;
    private final String backupDestinationId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private final String compartmentId;
    /**
     * @return For a RECOVERY_APPLIANCE backup destination, the connection string for connecting to the Recovery Appliance.
     * 
     */
    private final String connectionString;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return The user-provided name of the backup destination.
     * 
     */
    private final String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup destination.
     * 
     */
    private final String id;
    /**
     * @return A descriptive text associated with the lifecycleState. Typically contains additional displayable text
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     * @deprecated
     * The &#39;local_mount_point_path&#39; field has been deprecated. Please use &#39;local_mount_point_path under mount_type_details&#39; instead.
     * 
     */
    @Deprecated /* The 'local_mount_point_path' field has been deprecated. Please use 'local_mount_point_path under mount_type_details' instead. */
    private final String localMountPointPath;
    private final List<GetBackupDestinationMountTypeDetail> mountTypeDetails;
    /**
     * @return NFS Mount type for backup destination.
     * 
     */
    private final String nfsMountType;
    /**
     * @return Specifies the directory on which to mount the file system
     * 
     */
    private final String nfsServerExport;
    /**
     * @return Host names or IP addresses for NFS Auto mount.
     * 
     */
    private final List<String> nfsServers;
    /**
     * @return The current lifecycle state of the backup destination.
     * 
     */
    private final String state;
    /**
     * @return The date and time the backup destination was created.
     * 
     */
    private final String timeCreated;
    /**
     * @return Type of the backup destination.
     * 
     */
    private final String type;
    /**
     * @return For a RECOVERY_APPLIANCE backup destination, the Virtual Private Catalog (VPC) users that are used to access the Recovery Appliance.
     * 
     */
    private final List<String> vpcUsers;

    @CustomType.Constructor
    private GetBackupDestinationResult(
        @CustomType.Parameter("associatedDatabases") List<GetBackupDestinationAssociatedDatabase> associatedDatabases,
        @CustomType.Parameter("backupDestinationId") String backupDestinationId,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("connectionString") String connectionString,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("localMountPointPath") String localMountPointPath,
        @CustomType.Parameter("mountTypeDetails") List<GetBackupDestinationMountTypeDetail> mountTypeDetails,
        @CustomType.Parameter("nfsMountType") String nfsMountType,
        @CustomType.Parameter("nfsServerExport") String nfsServerExport,
        @CustomType.Parameter("nfsServers") List<String> nfsServers,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("vpcUsers") List<String> vpcUsers) {
        this.associatedDatabases = associatedDatabases;
        this.backupDestinationId = backupDestinationId;
        this.compartmentId = compartmentId;
        this.connectionString = connectionString;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.id = id;
        this.lifecycleDetails = lifecycleDetails;
        this.localMountPointPath = localMountPointPath;
        this.mountTypeDetails = mountTypeDetails;
        this.nfsMountType = nfsMountType;
        this.nfsServerExport = nfsServerExport;
        this.nfsServers = nfsServers;
        this.state = state;
        this.timeCreated = timeCreated;
        this.type = type;
        this.vpcUsers = vpcUsers;
    }

    /**
     * @return List of databases associated with the backup destination.
     * 
     */
    public List<GetBackupDestinationAssociatedDatabase> associatedDatabases() {
        return this.associatedDatabases;
    }
    public String backupDestinationId() {
        return this.backupDestinationId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return For a RECOVERY_APPLIANCE backup destination, the connection string for connecting to the Recovery Appliance.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The user-provided name of the backup destination.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup destination.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A descriptive text associated with the lifecycleState. Typically contains additional displayable text
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     * @deprecated
     * The &#39;local_mount_point_path&#39; field has been deprecated. Please use &#39;local_mount_point_path under mount_type_details&#39; instead.
     * 
     */
    @Deprecated /* The 'local_mount_point_path' field has been deprecated. Please use 'local_mount_point_path under mount_type_details' instead. */
    public String localMountPointPath() {
        return this.localMountPointPath;
    }
    public List<GetBackupDestinationMountTypeDetail> mountTypeDetails() {
        return this.mountTypeDetails;
    }
    /**
     * @return NFS Mount type for backup destination.
     * 
     */
    public String nfsMountType() {
        return this.nfsMountType;
    }
    /**
     * @return Specifies the directory on which to mount the file system
     * 
     */
    public String nfsServerExport() {
        return this.nfsServerExport;
    }
    /**
     * @return Host names or IP addresses for NFS Auto mount.
     * 
     */
    public List<String> nfsServers() {
        return this.nfsServers;
    }
    /**
     * @return The current lifecycle state of the backup destination.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the backup destination was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Type of the backup destination.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return For a RECOVERY_APPLIANCE backup destination, the Virtual Private Catalog (VPC) users that are used to access the Recovery Appliance.
     * 
     */
    public List<String> vpcUsers() {
        return this.vpcUsers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupDestinationResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetBackupDestinationAssociatedDatabase> associatedDatabases;
        private String backupDestinationId;
        private String compartmentId;
        private String connectionString;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String localMountPointPath;
        private List<GetBackupDestinationMountTypeDetail> mountTypeDetails;
        private String nfsMountType;
        private String nfsServerExport;
        private List<String> nfsServers;
        private String state;
        private String timeCreated;
        private String type;
        private List<String> vpcUsers;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBackupDestinationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associatedDatabases = defaults.associatedDatabases;
    	      this.backupDestinationId = defaults.backupDestinationId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionString = defaults.connectionString;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.localMountPointPath = defaults.localMountPointPath;
    	      this.mountTypeDetails = defaults.mountTypeDetails;
    	      this.nfsMountType = defaults.nfsMountType;
    	      this.nfsServerExport = defaults.nfsServerExport;
    	      this.nfsServers = defaults.nfsServers;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.type = defaults.type;
    	      this.vpcUsers = defaults.vpcUsers;
        }

        public Builder associatedDatabases(List<GetBackupDestinationAssociatedDatabase> associatedDatabases) {
            this.associatedDatabases = Objects.requireNonNull(associatedDatabases);
            return this;
        }
        public Builder associatedDatabases(GetBackupDestinationAssociatedDatabase... associatedDatabases) {
            return associatedDatabases(List.of(associatedDatabases));
        }
        public Builder backupDestinationId(String backupDestinationId) {
            this.backupDestinationId = Objects.requireNonNull(backupDestinationId);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder localMountPointPath(String localMountPointPath) {
            this.localMountPointPath = Objects.requireNonNull(localMountPointPath);
            return this;
        }
        public Builder mountTypeDetails(List<GetBackupDestinationMountTypeDetail> mountTypeDetails) {
            this.mountTypeDetails = Objects.requireNonNull(mountTypeDetails);
            return this;
        }
        public Builder mountTypeDetails(GetBackupDestinationMountTypeDetail... mountTypeDetails) {
            return mountTypeDetails(List.of(mountTypeDetails));
        }
        public Builder nfsMountType(String nfsMountType) {
            this.nfsMountType = Objects.requireNonNull(nfsMountType);
            return this;
        }
        public Builder nfsServerExport(String nfsServerExport) {
            this.nfsServerExport = Objects.requireNonNull(nfsServerExport);
            return this;
        }
        public Builder nfsServers(List<String> nfsServers) {
            this.nfsServers = Objects.requireNonNull(nfsServers);
            return this;
        }
        public Builder nfsServers(String... nfsServers) {
            return nfsServers(List.of(nfsServers));
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder vpcUsers(List<String> vpcUsers) {
            this.vpcUsers = Objects.requireNonNull(vpcUsers);
            return this;
        }
        public Builder vpcUsers(String... vpcUsers) {
            return vpcUsers(List.of(vpcUsers));
        }        public GetBackupDestinationResult build() {
            return new GetBackupDestinationResult(associatedDatabases, backupDestinationId, compartmentId, connectionString, definedTags, displayName, freeformTags, id, lifecycleDetails, localMountPointPath, mountTypeDetails, nfsMountType, nfsServerExport, nfsServers, state, timeCreated, type, vpcUsers);
        }
    }
}
