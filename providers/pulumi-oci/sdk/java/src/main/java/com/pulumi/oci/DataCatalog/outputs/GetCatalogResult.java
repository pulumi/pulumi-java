// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCatalogResult {
    /**
     * @return The list of private reverse connection endpoints attached to the catalog
     * 
     */
    private final List<String> attachedCatalogPrivateEndpoints;
    private final String catalogId;
    /**
     * @return Compartment identifier.
     * 
     */
    private final String compartmentId;
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Data catalog identifier, which can be renamed.
     * 
     */
    private final String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    private final String id;
    /**
     * @return An message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in &#39;Failed&#39; state.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return The number of data objects added to the data catalog. Please see the data catalog documentation for further information on how this is calculated.
     * 
     */
    private final Integer numberOfObjects;
    /**
     * @return The REST front endpoint URL to the data catalog instance.
     * 
     */
    private final String serviceApiUrl;
    /**
     * @return The console front endpoint URL to the data catalog instance.
     * 
     */
    private final String serviceConsoleUrl;
    /**
     * @return The current state of the data catalog resource.
     * 
     */
    private final String state;
    /**
     * @return The time the data catalog was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    private final String timeCreated;
    /**
     * @return The time the data catalog was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetCatalogResult(
        @CustomType.Parameter("attachedCatalogPrivateEndpoints") List<String> attachedCatalogPrivateEndpoints,
        @CustomType.Parameter("catalogId") String catalogId,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("numberOfObjects") Integer numberOfObjects,
        @CustomType.Parameter("serviceApiUrl") String serviceApiUrl,
        @CustomType.Parameter("serviceConsoleUrl") String serviceConsoleUrl,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.attachedCatalogPrivateEndpoints = attachedCatalogPrivateEndpoints;
        this.catalogId = catalogId;
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.id = id;
        this.lifecycleDetails = lifecycleDetails;
        this.numberOfObjects = numberOfObjects;
        this.serviceApiUrl = serviceApiUrl;
        this.serviceConsoleUrl = serviceConsoleUrl;
        this.state = state;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    /**
     * @return The list of private reverse connection endpoints attached to the catalog
     * 
     */
    public List<String> attachedCatalogPrivateEndpoints() {
        return this.attachedCatalogPrivateEndpoints;
    }
    public String catalogId() {
        return this.catalogId;
    }
    /**
     * @return Compartment identifier.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Data catalog identifier, which can be renamed.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in &#39;Failed&#39; state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The number of data objects added to the data catalog. Please see the data catalog documentation for further information on how this is calculated.
     * 
     */
    public Integer numberOfObjects() {
        return this.numberOfObjects;
    }
    /**
     * @return The REST front endpoint URL to the data catalog instance.
     * 
     */
    public String serviceApiUrl() {
        return this.serviceApiUrl;
    }
    /**
     * @return The console front endpoint URL to the data catalog instance.
     * 
     */
    public String serviceConsoleUrl() {
        return this.serviceConsoleUrl;
    }
    /**
     * @return The current state of the data catalog resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time the data catalog was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the data catalog was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> attachedCatalogPrivateEndpoints;
        private String catalogId;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private Integer numberOfObjects;
        private String serviceApiUrl;
        private String serviceConsoleUrl;
        private String state;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCatalogResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedCatalogPrivateEndpoints = defaults.attachedCatalogPrivateEndpoints;
    	      this.catalogId = defaults.catalogId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.numberOfObjects = defaults.numberOfObjects;
    	      this.serviceApiUrl = defaults.serviceApiUrl;
    	      this.serviceConsoleUrl = defaults.serviceConsoleUrl;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder attachedCatalogPrivateEndpoints(List<String> attachedCatalogPrivateEndpoints) {
            this.attachedCatalogPrivateEndpoints = Objects.requireNonNull(attachedCatalogPrivateEndpoints);
            return this;
        }
        public Builder attachedCatalogPrivateEndpoints(String... attachedCatalogPrivateEndpoints) {
            return attachedCatalogPrivateEndpoints(List.of(attachedCatalogPrivateEndpoints));
        }
        public Builder catalogId(String catalogId) {
            this.catalogId = Objects.requireNonNull(catalogId);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder numberOfObjects(Integer numberOfObjects) {
            this.numberOfObjects = Objects.requireNonNull(numberOfObjects);
            return this;
        }
        public Builder serviceApiUrl(String serviceApiUrl) {
            this.serviceApiUrl = Objects.requireNonNull(serviceApiUrl);
            return this;
        }
        public Builder serviceConsoleUrl(String serviceConsoleUrl) {
            this.serviceConsoleUrl = Objects.requireNonNull(serviceConsoleUrl);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetCatalogResult build() {
            return new GetCatalogResult(attachedCatalogPrivateEndpoints, catalogId, compartmentId, definedTags, displayName, freeformTags, id, lifecycleDetails, numberOfObjects, serviceApiUrl, serviceConsoleUrl, state, timeCreated, timeUpdated);
        }
    }
}
