// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.HealthChecks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.HealthChecks.outputs.GetPingProbeResultsPingProbeResultConnection;
import com.pulumi.oci.HealthChecks.outputs.GetPingProbeResultsPingProbeResultDn;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPingProbeResultsPingProbeResult {
    /**
     * @return The network connection results.
     * 
     */
    private final List<GetPingProbeResultsPingProbeResultConnection> connections;
    /**
     * @return The DNS resolution results.
     * 
     */
    private final List<GetPingProbeResultsPingProbeResultDn> dns;
    /**
     * @return The time immediately before the vantage point finishes the domain name lookup for the resource.
     * 
     */
    private final Double domainLookupEnd;
    /**
     * @return The time immediately before the vantage point starts the domain name lookup for the resource.
     * 
     */
    private final Double domainLookupStart;
    /**
     * @return The category of error if an error occurs executing the probe. The `errorMessage` field provides a message with the error details.
     * * NONE - No error
     * * DNS - DNS errors
     * * TRANSPORT - Transport-related errors, for example a &#34;TLS certificate expired&#34; error.
     * * NETWORK - Network-related errors, for example a &#34;network unreachable&#34; error.
     * * SYSTEM - Internal system errors.
     * 
     */
    private final String errorCategory;
    /**
     * @return The error information indicating why a probe execution failed.
     * 
     */
    private final String errorMessage;
    /**
     * @return The ICMP code of the response message.  This field is not used when the protocol is set to TCP.  For more information on ICMP codes, see [Internet Control Message Protocol (ICMP) Parameters](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml).
     * 
     */
    private final Integer icmpCode;
    /**
     * @return True if the probe result is determined to be healthy based on probe type-specific criteria.  For HTTP probes, a probe result is considered healthy if the HTTP response code is greater than or equal to 200 and less than 300.
     * 
     */
    private final Boolean isHealthy;
    /**
     * @return True if the probe did not complete before the configured `timeoutInSeconds` value.
     * 
     */
    private final Boolean isTimedOut;
    /**
     * @return A value identifying this specific probe result. The key is only unique within the results of its probe configuration. The key may be reused after 90 days.
     * 
     */
    private final String key;
    /**
     * @return The latency of the probe execution, in milliseconds.
     * 
     */
    private final Double latencyInMs;
    /**
     * @return The OCID of a monitor or on-demand probe.
     * 
     */
    private final String probeConfigurationId;
    /**
     * @return The protocols for ping probes.
     * 
     */
    private final String protocol;
    /**
     * @return The date and time the probe was executed, expressed in milliseconds since the POSIX epoch. This field is defined by the PerformanceResourceTiming interface of the W3C Resource Timing specification. For more information, see [Resource Timing](https://w3c.github.io/resource-timing/#sec-resource-timing).
     * 
     */
    private final Double startTime;
    /**
     * @return Filters results that match the `target`.
     * 
     */
    private final String target;
    /**
     * @return The name of the vantage point that executed the probe.
     * 
     */
    private final String vantagePointName;

    @CustomType.Constructor
    private GetPingProbeResultsPingProbeResult(
        @CustomType.Parameter("connections") List<GetPingProbeResultsPingProbeResultConnection> connections,
        @CustomType.Parameter("dns") List<GetPingProbeResultsPingProbeResultDn> dns,
        @CustomType.Parameter("domainLookupEnd") Double domainLookupEnd,
        @CustomType.Parameter("domainLookupStart") Double domainLookupStart,
        @CustomType.Parameter("errorCategory") String errorCategory,
        @CustomType.Parameter("errorMessage") String errorMessage,
        @CustomType.Parameter("icmpCode") Integer icmpCode,
        @CustomType.Parameter("isHealthy") Boolean isHealthy,
        @CustomType.Parameter("isTimedOut") Boolean isTimedOut,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("latencyInMs") Double latencyInMs,
        @CustomType.Parameter("probeConfigurationId") String probeConfigurationId,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("startTime") Double startTime,
        @CustomType.Parameter("target") String target,
        @CustomType.Parameter("vantagePointName") String vantagePointName) {
        this.connections = connections;
        this.dns = dns;
        this.domainLookupEnd = domainLookupEnd;
        this.domainLookupStart = domainLookupStart;
        this.errorCategory = errorCategory;
        this.errorMessage = errorMessage;
        this.icmpCode = icmpCode;
        this.isHealthy = isHealthy;
        this.isTimedOut = isTimedOut;
        this.key = key;
        this.latencyInMs = latencyInMs;
        this.probeConfigurationId = probeConfigurationId;
        this.protocol = protocol;
        this.startTime = startTime;
        this.target = target;
        this.vantagePointName = vantagePointName;
    }

    /**
     * @return The network connection results.
     * 
     */
    public List<GetPingProbeResultsPingProbeResultConnection> connections() {
        return this.connections;
    }
    /**
     * @return The DNS resolution results.
     * 
     */
    public List<GetPingProbeResultsPingProbeResultDn> dns() {
        return this.dns;
    }
    /**
     * @return The time immediately before the vantage point finishes the domain name lookup for the resource.
     * 
     */
    public Double domainLookupEnd() {
        return this.domainLookupEnd;
    }
    /**
     * @return The time immediately before the vantage point starts the domain name lookup for the resource.
     * 
     */
    public Double domainLookupStart() {
        return this.domainLookupStart;
    }
    /**
     * @return The category of error if an error occurs executing the probe. The `errorMessage` field provides a message with the error details.
     * * NONE - No error
     * * DNS - DNS errors
     * * TRANSPORT - Transport-related errors, for example a &#34;TLS certificate expired&#34; error.
     * * NETWORK - Network-related errors, for example a &#34;network unreachable&#34; error.
     * * SYSTEM - Internal system errors.
     * 
     */
    public String errorCategory() {
        return this.errorCategory;
    }
    /**
     * @return The error information indicating why a probe execution failed.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return The ICMP code of the response message.  This field is not used when the protocol is set to TCP.  For more information on ICMP codes, see [Internet Control Message Protocol (ICMP) Parameters](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml).
     * 
     */
    public Integer icmpCode() {
        return this.icmpCode;
    }
    /**
     * @return True if the probe result is determined to be healthy based on probe type-specific criteria.  For HTTP probes, a probe result is considered healthy if the HTTP response code is greater than or equal to 200 and less than 300.
     * 
     */
    public Boolean isHealthy() {
        return this.isHealthy;
    }
    /**
     * @return True if the probe did not complete before the configured `timeoutInSeconds` value.
     * 
     */
    public Boolean isTimedOut() {
        return this.isTimedOut;
    }
    /**
     * @return A value identifying this specific probe result. The key is only unique within the results of its probe configuration. The key may be reused after 90 days.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The latency of the probe execution, in milliseconds.
     * 
     */
    public Double latencyInMs() {
        return this.latencyInMs;
    }
    /**
     * @return The OCID of a monitor or on-demand probe.
     * 
     */
    public String probeConfigurationId() {
        return this.probeConfigurationId;
    }
    /**
     * @return The protocols for ping probes.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The date and time the probe was executed, expressed in milliseconds since the POSIX epoch. This field is defined by the PerformanceResourceTiming interface of the W3C Resource Timing specification. For more information, see [Resource Timing](https://w3c.github.io/resource-timing/#sec-resource-timing).
     * 
     */
    public Double startTime() {
        return this.startTime;
    }
    /**
     * @return Filters results that match the `target`.
     * 
     */
    public String target() {
        return this.target;
    }
    /**
     * @return The name of the vantage point that executed the probe.
     * 
     */
    public String vantagePointName() {
        return this.vantagePointName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPingProbeResultsPingProbeResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetPingProbeResultsPingProbeResultConnection> connections;
        private List<GetPingProbeResultsPingProbeResultDn> dns;
        private Double domainLookupEnd;
        private Double domainLookupStart;
        private String errorCategory;
        private String errorMessage;
        private Integer icmpCode;
        private Boolean isHealthy;
        private Boolean isTimedOut;
        private String key;
        private Double latencyInMs;
        private String probeConfigurationId;
        private String protocol;
        private Double startTime;
        private String target;
        private String vantagePointName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPingProbeResultsPingProbeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connections = defaults.connections;
    	      this.dns = defaults.dns;
    	      this.domainLookupEnd = defaults.domainLookupEnd;
    	      this.domainLookupStart = defaults.domainLookupStart;
    	      this.errorCategory = defaults.errorCategory;
    	      this.errorMessage = defaults.errorMessage;
    	      this.icmpCode = defaults.icmpCode;
    	      this.isHealthy = defaults.isHealthy;
    	      this.isTimedOut = defaults.isTimedOut;
    	      this.key = defaults.key;
    	      this.latencyInMs = defaults.latencyInMs;
    	      this.probeConfigurationId = defaults.probeConfigurationId;
    	      this.protocol = defaults.protocol;
    	      this.startTime = defaults.startTime;
    	      this.target = defaults.target;
    	      this.vantagePointName = defaults.vantagePointName;
        }

        public Builder connections(List<GetPingProbeResultsPingProbeResultConnection> connections) {
            this.connections = Objects.requireNonNull(connections);
            return this;
        }
        public Builder connections(GetPingProbeResultsPingProbeResultConnection... connections) {
            return connections(List.of(connections));
        }
        public Builder dns(List<GetPingProbeResultsPingProbeResultDn> dns) {
            this.dns = Objects.requireNonNull(dns);
            return this;
        }
        public Builder dns(GetPingProbeResultsPingProbeResultDn... dns) {
            return dns(List.of(dns));
        }
        public Builder domainLookupEnd(Double domainLookupEnd) {
            this.domainLookupEnd = Objects.requireNonNull(domainLookupEnd);
            return this;
        }
        public Builder domainLookupStart(Double domainLookupStart) {
            this.domainLookupStart = Objects.requireNonNull(domainLookupStart);
            return this;
        }
        public Builder errorCategory(String errorCategory) {
            this.errorCategory = Objects.requireNonNull(errorCategory);
            return this;
        }
        public Builder errorMessage(String errorMessage) {
            this.errorMessage = Objects.requireNonNull(errorMessage);
            return this;
        }
        public Builder icmpCode(Integer icmpCode) {
            this.icmpCode = Objects.requireNonNull(icmpCode);
            return this;
        }
        public Builder isHealthy(Boolean isHealthy) {
            this.isHealthy = Objects.requireNonNull(isHealthy);
            return this;
        }
        public Builder isTimedOut(Boolean isTimedOut) {
            this.isTimedOut = Objects.requireNonNull(isTimedOut);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder latencyInMs(Double latencyInMs) {
            this.latencyInMs = Objects.requireNonNull(latencyInMs);
            return this;
        }
        public Builder probeConfigurationId(String probeConfigurationId) {
            this.probeConfigurationId = Objects.requireNonNull(probeConfigurationId);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder startTime(Double startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        public Builder target(String target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        public Builder vantagePointName(String vantagePointName) {
            this.vantagePointName = Objects.requireNonNull(vantagePointName);
            return this;
        }        public GetPingProbeResultsPingProbeResult build() {
            return new GetPingProbeResultsPingProbeResult(connections, dns, domainLookupEnd, domainLookupStart, errorCategory, errorMessage, icmpCode, isHealthy, isTimedOut, key, latencyInMs, probeConfigurationId, protocol, startTime, target, vantagePointName);
        }
    }
}
