// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetReportDefinitionSummary {
    /**
     * @return Name of the key or count of object.
     * 
     */
    private final String countOf;
    /**
     * @return Specifies the order in which the summary must be displayed.
     * 
     */
    private final Integer displayOrder;
    /**
     * @return A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
     * 
     */
    private final String groupByFieldName;
    /**
     * @return Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    private final Boolean isHidden;
    /**
     * @return Name of the report summary.
     * 
     */
    private final String name;
    /**
     * @return Additional scim filters used to get the specific summary.
     * 
     */
    private final String scimFilter;

    @CustomType.Constructor
    private GetReportDefinitionSummary(
        @CustomType.Parameter("countOf") String countOf,
        @CustomType.Parameter("displayOrder") Integer displayOrder,
        @CustomType.Parameter("groupByFieldName") String groupByFieldName,
        @CustomType.Parameter("isHidden") Boolean isHidden,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("scimFilter") String scimFilter) {
        this.countOf = countOf;
        this.displayOrder = displayOrder;
        this.groupByFieldName = groupByFieldName;
        this.isHidden = isHidden;
        this.name = name;
        this.scimFilter = scimFilter;
    }

    /**
     * @return Name of the key or count of object.
     * 
     */
    public String countOf() {
        return this.countOf;
    }
    /**
     * @return Specifies the order in which the summary must be displayed.
     * 
     */
    public Integer displayOrder() {
        return this.displayOrder;
    }
    /**
     * @return A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
     * 
     */
    public String groupByFieldName() {
        return this.groupByFieldName;
    }
    /**
     * @return Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    public Boolean isHidden() {
        return this.isHidden;
    }
    /**
     * @return Name of the report summary.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Additional scim filters used to get the specific summary.
     * 
     */
    public String scimFilter() {
        return this.scimFilter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReportDefinitionSummary defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String countOf;
        private Integer displayOrder;
        private String groupByFieldName;
        private Boolean isHidden;
        private String name;
        private String scimFilter;

        public Builder() {
    	      // Empty
        }

        public Builder(GetReportDefinitionSummary defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.countOf = defaults.countOf;
    	      this.displayOrder = defaults.displayOrder;
    	      this.groupByFieldName = defaults.groupByFieldName;
    	      this.isHidden = defaults.isHidden;
    	      this.name = defaults.name;
    	      this.scimFilter = defaults.scimFilter;
        }

        public Builder countOf(String countOf) {
            this.countOf = Objects.requireNonNull(countOf);
            return this;
        }
        public Builder displayOrder(Integer displayOrder) {
            this.displayOrder = Objects.requireNonNull(displayOrder);
            return this;
        }
        public Builder groupByFieldName(String groupByFieldName) {
            this.groupByFieldName = Objects.requireNonNull(groupByFieldName);
            return this;
        }
        public Builder isHidden(Boolean isHidden) {
            this.isHidden = Objects.requireNonNull(isHidden);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder scimFilter(String scimFilter) {
            this.scimFilter = Objects.requireNonNull(scimFilter);
            return this;
        }        public GetReportDefinitionSummary build() {
            return new GetReportDefinitionSummary(countOf, displayOrder, groupByFieldName, isHidden, name, scimFilter);
        }
    }
}
