// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAuditEventsAuditEventCollectionItem {
    /**
     * @return The action taken for this audit event.
     * 
     */
    private final String actionTaken;
    /**
     * @return Time of audit event occurrence in the target database.
     * 
     */
    private final String auditEventTime;
    /**
     * @return The location of the audit. Currently the value is audit table.
     * 
     */
    private final String auditLocation;
    /**
     * @return Comma-seperated list of audit policies that caused the current audit event.
     * 
     */
    private final String auditPolicies;
    /**
     * @return The OCID of the audit trail that generated this audit event.
     * 
     */
    private final String auditTrailId;
    /**
     * @return Type of auditing.
     * 
     */
    private final String auditType;
    /**
     * @return Name of the host machine from which the session was spawned.
     * 
     */
    private final String clientHostname;
    /**
     * @return The client identifier in each Oracle session.
     * 
     */
    private final String clientId;
    /**
     * @return IP address of the host from which the session was spawned.
     * 
     */
    private final String clientIp;
    /**
     * @return The application from which the audit event was generated. Examples SQL Plus or SQL Developer.
     * 
     */
    private final String clientProgram;
    /**
     * @return List of bind variables associated with the command text.
     * 
     */
    private final String commandParam;
    /**
     * @return The SQL associated with the audit event.
     * 
     */
    private final String commandText;
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private final String compartmentId;
    /**
     * @return The type of the target database that was audited. Allowed values are
     * * DATABASE_CLOUD_SERVICE - Represents Oracle Database Cloud Services.
     * * AUTONOMOUS_DATABASE - Represents Oracle Autonomous Databases.
     * * INSTALLED_DATABASE - Represents databases running on-premises or on compute instances.
     * 
     */
    private final String databaseType;
    /**
     * @return Name of the database user whose actions were audited.
     * 
     */
    private final String dbUserName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Oracle Error code generated by the action. Zero indicates the action was successful.
     * 
     */
    private final String errorCode;
    /**
     * @return Detailed message on why the Error occurred.
     * 
     */
    private final String errorMessage;
    /**
     * @return Name of the detail action executed by the user on the target database. i.e ALTER SEQUENCE, CREATE TRIGGER, CREATE INDEX.
     * 
     */
    private final String eventName;
    /**
     * @return List of all other attributes of the audit event seperated by a colon other than the one returned in audit record.
     * 
     */
    private final String extendedEventAttributes;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The OCID of the audit event.
     * 
     */
    private final String id;
    /**
     * @return Indicates whether an alert was raised for this audit event.
     * 
     */
    private final Boolean isAlerted;
    /**
     * @return Name of the object affected by the action.
     * 
     */
    private final String object;
    /**
     * @return Schema name of object affected but the action.
     * 
     */
    private final String objectOwner;
    /**
     * @return Type of object in the source database affected by the action. i.e PL/SQL, SYNONYM, PACKAGE BODY.
     * 
     */
    private final String objectType;
    /**
     * @return Name of the action executed by the user on the target database. i.e ALTER, CREATE, DROP.
     * 
     */
    private final String operation;
    /**
     * @return Indicates whether the operation was a success or a failure.
     * 
     */
    private final String operationStatus;
    /**
     * @return The operating system terminal of the user session.
     * 
     */
    private final String osTerminal;
    /**
     * @return Name of the operating system user for the database session.
     * 
     */
    private final String osUserName;
    /**
     * @return Class of the target that was audited.
     * 
     */
    private final String targetClass;
    /**
     * @return The OCID of the target database that was audited.
     * 
     */
    private final String targetId;
    /**
     * @return The name of the target database that was audited.
     * 
     */
    private final String targetName;
    /**
     * @return Timestamp when this audit event was collected from the target database by Data Safe.
     * 
     */
    private final String timeCollected;

    @CustomType.Constructor
    private GetAuditEventsAuditEventCollectionItem(
        @CustomType.Parameter("actionTaken") String actionTaken,
        @CustomType.Parameter("auditEventTime") String auditEventTime,
        @CustomType.Parameter("auditLocation") String auditLocation,
        @CustomType.Parameter("auditPolicies") String auditPolicies,
        @CustomType.Parameter("auditTrailId") String auditTrailId,
        @CustomType.Parameter("auditType") String auditType,
        @CustomType.Parameter("clientHostname") String clientHostname,
        @CustomType.Parameter("clientId") String clientId,
        @CustomType.Parameter("clientIp") String clientIp,
        @CustomType.Parameter("clientProgram") String clientProgram,
        @CustomType.Parameter("commandParam") String commandParam,
        @CustomType.Parameter("commandText") String commandText,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("databaseType") String databaseType,
        @CustomType.Parameter("dbUserName") String dbUserName,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("errorCode") String errorCode,
        @CustomType.Parameter("errorMessage") String errorMessage,
        @CustomType.Parameter("eventName") String eventName,
        @CustomType.Parameter("extendedEventAttributes") String extendedEventAttributes,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isAlerted") Boolean isAlerted,
        @CustomType.Parameter("object") String object,
        @CustomType.Parameter("objectOwner") String objectOwner,
        @CustomType.Parameter("objectType") String objectType,
        @CustomType.Parameter("operation") String operation,
        @CustomType.Parameter("operationStatus") String operationStatus,
        @CustomType.Parameter("osTerminal") String osTerminal,
        @CustomType.Parameter("osUserName") String osUserName,
        @CustomType.Parameter("targetClass") String targetClass,
        @CustomType.Parameter("targetId") String targetId,
        @CustomType.Parameter("targetName") String targetName,
        @CustomType.Parameter("timeCollected") String timeCollected) {
        this.actionTaken = actionTaken;
        this.auditEventTime = auditEventTime;
        this.auditLocation = auditLocation;
        this.auditPolicies = auditPolicies;
        this.auditTrailId = auditTrailId;
        this.auditType = auditType;
        this.clientHostname = clientHostname;
        this.clientId = clientId;
        this.clientIp = clientIp;
        this.clientProgram = clientProgram;
        this.commandParam = commandParam;
        this.commandText = commandText;
        this.compartmentId = compartmentId;
        this.databaseType = databaseType;
        this.dbUserName = dbUserName;
        this.definedTags = definedTags;
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
        this.eventName = eventName;
        this.extendedEventAttributes = extendedEventAttributes;
        this.freeformTags = freeformTags;
        this.id = id;
        this.isAlerted = isAlerted;
        this.object = object;
        this.objectOwner = objectOwner;
        this.objectType = objectType;
        this.operation = operation;
        this.operationStatus = operationStatus;
        this.osTerminal = osTerminal;
        this.osUserName = osUserName;
        this.targetClass = targetClass;
        this.targetId = targetId;
        this.targetName = targetName;
        this.timeCollected = timeCollected;
    }

    /**
     * @return The action taken for this audit event.
     * 
     */
    public String actionTaken() {
        return this.actionTaken;
    }
    /**
     * @return Time of audit event occurrence in the target database.
     * 
     */
    public String auditEventTime() {
        return this.auditEventTime;
    }
    /**
     * @return The location of the audit. Currently the value is audit table.
     * 
     */
    public String auditLocation() {
        return this.auditLocation;
    }
    /**
     * @return Comma-seperated list of audit policies that caused the current audit event.
     * 
     */
    public String auditPolicies() {
        return this.auditPolicies;
    }
    /**
     * @return The OCID of the audit trail that generated this audit event.
     * 
     */
    public String auditTrailId() {
        return this.auditTrailId;
    }
    /**
     * @return Type of auditing.
     * 
     */
    public String auditType() {
        return this.auditType;
    }
    /**
     * @return Name of the host machine from which the session was spawned.
     * 
     */
    public String clientHostname() {
        return this.clientHostname;
    }
    /**
     * @return The client identifier in each Oracle session.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return IP address of the host from which the session was spawned.
     * 
     */
    public String clientIp() {
        return this.clientIp;
    }
    /**
     * @return The application from which the audit event was generated. Examples SQL Plus or SQL Developer.
     * 
     */
    public String clientProgram() {
        return this.clientProgram;
    }
    /**
     * @return List of bind variables associated with the command text.
     * 
     */
    public String commandParam() {
        return this.commandParam;
    }
    /**
     * @return The SQL associated with the audit event.
     * 
     */
    public String commandText() {
        return this.commandText;
    }
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The type of the target database that was audited. Allowed values are
     * * DATABASE_CLOUD_SERVICE - Represents Oracle Database Cloud Services.
     * * AUTONOMOUS_DATABASE - Represents Oracle Autonomous Databases.
     * * INSTALLED_DATABASE - Represents databases running on-premises or on compute instances.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return Name of the database user whose actions were audited.
     * 
     */
    public String dbUserName() {
        return this.dbUserName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Oracle Error code generated by the action. Zero indicates the action was successful.
     * 
     */
    public String errorCode() {
        return this.errorCode;
    }
    /**
     * @return Detailed message on why the Error occurred.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return Name of the detail action executed by the user on the target database. i.e ALTER SEQUENCE, CREATE TRIGGER, CREATE INDEX.
     * 
     */
    public String eventName() {
        return this.eventName;
    }
    /**
     * @return List of all other attributes of the audit event seperated by a colon other than the one returned in audit record.
     * 
     */
    public String extendedEventAttributes() {
        return this.extendedEventAttributes;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the audit event.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether an alert was raised for this audit event.
     * 
     */
    public Boolean isAlerted() {
        return this.isAlerted;
    }
    /**
     * @return Name of the object affected by the action.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return Schema name of object affected but the action.
     * 
     */
    public String objectOwner() {
        return this.objectOwner;
    }
    /**
     * @return Type of object in the source database affected by the action. i.e PL/SQL, SYNONYM, PACKAGE BODY.
     * 
     */
    public String objectType() {
        return this.objectType;
    }
    /**
     * @return Name of the action executed by the user on the target database. i.e ALTER, CREATE, DROP.
     * 
     */
    public String operation() {
        return this.operation;
    }
    /**
     * @return Indicates whether the operation was a success or a failure.
     * 
     */
    public String operationStatus() {
        return this.operationStatus;
    }
    /**
     * @return The operating system terminal of the user session.
     * 
     */
    public String osTerminal() {
        return this.osTerminal;
    }
    /**
     * @return Name of the operating system user for the database session.
     * 
     */
    public String osUserName() {
        return this.osUserName;
    }
    /**
     * @return Class of the target that was audited.
     * 
     */
    public String targetClass() {
        return this.targetClass;
    }
    /**
     * @return The OCID of the target database that was audited.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The name of the target database that was audited.
     * 
     */
    public String targetName() {
        return this.targetName;
    }
    /**
     * @return Timestamp when this audit event was collected from the target database by Data Safe.
     * 
     */
    public String timeCollected() {
        return this.timeCollected;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuditEventsAuditEventCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String actionTaken;
        private String auditEventTime;
        private String auditLocation;
        private String auditPolicies;
        private String auditTrailId;
        private String auditType;
        private String clientHostname;
        private String clientId;
        private String clientIp;
        private String clientProgram;
        private String commandParam;
        private String commandText;
        private String compartmentId;
        private String databaseType;
        private String dbUserName;
        private Map<String,Object> definedTags;
        private String errorCode;
        private String errorMessage;
        private String eventName;
        private String extendedEventAttributes;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isAlerted;
        private String object;
        private String objectOwner;
        private String objectType;
        private String operation;
        private String operationStatus;
        private String osTerminal;
        private String osUserName;
        private String targetClass;
        private String targetId;
        private String targetName;
        private String timeCollected;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAuditEventsAuditEventCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionTaken = defaults.actionTaken;
    	      this.auditEventTime = defaults.auditEventTime;
    	      this.auditLocation = defaults.auditLocation;
    	      this.auditPolicies = defaults.auditPolicies;
    	      this.auditTrailId = defaults.auditTrailId;
    	      this.auditType = defaults.auditType;
    	      this.clientHostname = defaults.clientHostname;
    	      this.clientId = defaults.clientId;
    	      this.clientIp = defaults.clientIp;
    	      this.clientProgram = defaults.clientProgram;
    	      this.commandParam = defaults.commandParam;
    	      this.commandText = defaults.commandText;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseType = defaults.databaseType;
    	      this.dbUserName = defaults.dbUserName;
    	      this.definedTags = defaults.definedTags;
    	      this.errorCode = defaults.errorCode;
    	      this.errorMessage = defaults.errorMessage;
    	      this.eventName = defaults.eventName;
    	      this.extendedEventAttributes = defaults.extendedEventAttributes;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isAlerted = defaults.isAlerted;
    	      this.object = defaults.object;
    	      this.objectOwner = defaults.objectOwner;
    	      this.objectType = defaults.objectType;
    	      this.operation = defaults.operation;
    	      this.operationStatus = defaults.operationStatus;
    	      this.osTerminal = defaults.osTerminal;
    	      this.osUserName = defaults.osUserName;
    	      this.targetClass = defaults.targetClass;
    	      this.targetId = defaults.targetId;
    	      this.targetName = defaults.targetName;
    	      this.timeCollected = defaults.timeCollected;
        }

        public Builder actionTaken(String actionTaken) {
            this.actionTaken = Objects.requireNonNull(actionTaken);
            return this;
        }
        public Builder auditEventTime(String auditEventTime) {
            this.auditEventTime = Objects.requireNonNull(auditEventTime);
            return this;
        }
        public Builder auditLocation(String auditLocation) {
            this.auditLocation = Objects.requireNonNull(auditLocation);
            return this;
        }
        public Builder auditPolicies(String auditPolicies) {
            this.auditPolicies = Objects.requireNonNull(auditPolicies);
            return this;
        }
        public Builder auditTrailId(String auditTrailId) {
            this.auditTrailId = Objects.requireNonNull(auditTrailId);
            return this;
        }
        public Builder auditType(String auditType) {
            this.auditType = Objects.requireNonNull(auditType);
            return this;
        }
        public Builder clientHostname(String clientHostname) {
            this.clientHostname = Objects.requireNonNull(clientHostname);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientIp(String clientIp) {
            this.clientIp = Objects.requireNonNull(clientIp);
            return this;
        }
        public Builder clientProgram(String clientProgram) {
            this.clientProgram = Objects.requireNonNull(clientProgram);
            return this;
        }
        public Builder commandParam(String commandParam) {
            this.commandParam = Objects.requireNonNull(commandParam);
            return this;
        }
        public Builder commandText(String commandText) {
            this.commandText = Objects.requireNonNull(commandText);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder databaseType(String databaseType) {
            this.databaseType = Objects.requireNonNull(databaseType);
            return this;
        }
        public Builder dbUserName(String dbUserName) {
            this.dbUserName = Objects.requireNonNull(dbUserName);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder errorCode(String errorCode) {
            this.errorCode = Objects.requireNonNull(errorCode);
            return this;
        }
        public Builder errorMessage(String errorMessage) {
            this.errorMessage = Objects.requireNonNull(errorMessage);
            return this;
        }
        public Builder eventName(String eventName) {
            this.eventName = Objects.requireNonNull(eventName);
            return this;
        }
        public Builder extendedEventAttributes(String extendedEventAttributes) {
            this.extendedEventAttributes = Objects.requireNonNull(extendedEventAttributes);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isAlerted(Boolean isAlerted) {
            this.isAlerted = Objects.requireNonNull(isAlerted);
            return this;
        }
        public Builder object(String object) {
            this.object = Objects.requireNonNull(object);
            return this;
        }
        public Builder objectOwner(String objectOwner) {
            this.objectOwner = Objects.requireNonNull(objectOwner);
            return this;
        }
        public Builder objectType(String objectType) {
            this.objectType = Objects.requireNonNull(objectType);
            return this;
        }
        public Builder operation(String operation) {
            this.operation = Objects.requireNonNull(operation);
            return this;
        }
        public Builder operationStatus(String operationStatus) {
            this.operationStatus = Objects.requireNonNull(operationStatus);
            return this;
        }
        public Builder osTerminal(String osTerminal) {
            this.osTerminal = Objects.requireNonNull(osTerminal);
            return this;
        }
        public Builder osUserName(String osUserName) {
            this.osUserName = Objects.requireNonNull(osUserName);
            return this;
        }
        public Builder targetClass(String targetClass) {
            this.targetClass = Objects.requireNonNull(targetClass);
            return this;
        }
        public Builder targetId(String targetId) {
            this.targetId = Objects.requireNonNull(targetId);
            return this;
        }
        public Builder targetName(String targetName) {
            this.targetName = Objects.requireNonNull(targetName);
            return this;
        }
        public Builder timeCollected(String timeCollected) {
            this.timeCollected = Objects.requireNonNull(timeCollected);
            return this;
        }        public GetAuditEventsAuditEventCollectionItem build() {
            return new GetAuditEventsAuditEventCollectionItem(actionTaken, auditEventTime, auditLocation, auditPolicies, auditTrailId, auditType, clientHostname, clientId, clientIp, clientProgram, commandParam, commandText, compartmentId, databaseType, dbUserName, definedTags, errorCode, errorMessage, eventName, extendedEventAttributes, freeformTags, id, isAlerted, object, objectOwner, objectType, operation, operationStatus, osTerminal, osUserName, targetClass, targetId, targetName, timeCollected);
        }
    }
}
