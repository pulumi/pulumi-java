// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.ExternalNonContainerDatabaseDatabaseManagementConfigArgs;
import com.pulumi.oci.Database.inputs.ExternalNonContainerDatabaseOperationsInsightsConfigArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalNonContainerDatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final ExternalNonContainerDatabaseState Empty = new ExternalNonContainerDatabaseState();

    /**
     * The character set of the external database.
     * 
     */
    @Import(name="characterSet")
    private @Nullable Output<String> characterSet;

    /**
     * @return The character set of the external database.
     * 
     */
    public Optional<Output<String>> characterSet() {
        return Optional.ofNullable(this.characterSet);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The Oracle Database configuration
     * 
     */
    @Import(name="databaseConfiguration")
    private @Nullable Output<String> databaseConfiguration;

    /**
     * @return The Oracle Database configuration
     * 
     */
    public Optional<Output<String>> databaseConfiguration() {
        return Optional.ofNullable(this.databaseConfiguration);
    }

    /**
     * The Oracle Database edition.
     * 
     */
    @Import(name="databaseEdition")
    private @Nullable Output<String> databaseEdition;

    /**
     * @return The Oracle Database edition.
     * 
     */
    public Optional<Output<String>> databaseEdition() {
        return Optional.ofNullable(this.databaseEdition);
    }

    /**
     * The configuration of the Database Management service.
     * 
     */
    @Import(name="databaseManagementConfigs")
    private @Nullable Output<List<ExternalNonContainerDatabaseDatabaseManagementConfigArgs>> databaseManagementConfigs;

    /**
     * @return The configuration of the Database Management service.
     * 
     */
    public Optional<Output<List<ExternalNonContainerDatabaseDatabaseManagementConfigArgs>>> databaseManagementConfigs() {
        return Optional.ofNullable(this.databaseManagementConfigs);
    }

    /**
     * The Oracle Database version.
     * 
     */
    @Import(name="databaseVersion")
    private @Nullable Output<String> databaseVersion;

    /**
     * @return The Oracle Database version.
     * 
     */
    public Optional<Output<String>> databaseVersion() {
        return Optional.ofNullable(this.databaseVersion);
    }

    /**
     * The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
     * 
     */
    @Import(name="dbId")
    private @Nullable Output<String> dbId;

    /**
     * @return The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
     * 
     */
    public Optional<Output<String>> dbId() {
        return Optional.ofNullable(this.dbId);
    }

    /**
     * The database packs licensed for the external Oracle Database.
     * 
     */
    @Import(name="dbPacks")
    private @Nullable Output<String> dbPacks;

    /**
     * @return The database packs licensed for the external Oracle Database.
     * 
     */
    public Optional<Output<String>> dbPacks() {
        return Optional.ofNullable(this.dbPacks);
    }

    /**
     * The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    @Import(name="dbUniqueName")
    private @Nullable Output<String> dbUniqueName;

    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    public Optional<Output<String>> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The user-friendly name for the external database. The name does not have to be unique.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The user-friendly name for the external database. The name does not have to be unique.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Additional information about the current lifecycle state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The national character of the external database.
     * 
     */
    @Import(name="ncharacterSet")
    private @Nullable Output<String> ncharacterSet;

    /**
     * @return The national character of the external database.
     * 
     */
    public Optional<Output<String>> ncharacterSet() {
        return Optional.ofNullable(this.ncharacterSet);
    }

    /**
     * The configuration of Operations Insights for the external database
     * 
     */
    @Import(name="operationsInsightsConfigs")
    private @Nullable Output<List<ExternalNonContainerDatabaseOperationsInsightsConfigArgs>> operationsInsightsConfigs;

    /**
     * @return The configuration of Operations Insights for the external database
     * 
     */
    public Optional<Output<List<ExternalNonContainerDatabaseOperationsInsightsConfigArgs>>> operationsInsightsConfigs() {
        return Optional.ofNullable(this.operationsInsightsConfigs);
    }

    /**
     * The current state of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the database was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the database was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private ExternalNonContainerDatabaseState() {}

    private ExternalNonContainerDatabaseState(ExternalNonContainerDatabaseState $) {
        this.characterSet = $.characterSet;
        this.compartmentId = $.compartmentId;
        this.databaseConfiguration = $.databaseConfiguration;
        this.databaseEdition = $.databaseEdition;
        this.databaseManagementConfigs = $.databaseManagementConfigs;
        this.databaseVersion = $.databaseVersion;
        this.dbId = $.dbId;
        this.dbPacks = $.dbPacks;
        this.dbUniqueName = $.dbUniqueName;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.lifecycleDetails = $.lifecycleDetails;
        this.ncharacterSet = $.ncharacterSet;
        this.operationsInsightsConfigs = $.operationsInsightsConfigs;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalNonContainerDatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalNonContainerDatabaseState $;

        public Builder() {
            $ = new ExternalNonContainerDatabaseState();
        }

        public Builder(ExternalNonContainerDatabaseState defaults) {
            $ = new ExternalNonContainerDatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param characterSet The character set of the external database.
         * 
         * @return builder
         * 
         */
        public Builder characterSet(@Nullable Output<String> characterSet) {
            $.characterSet = characterSet;
            return this;
        }

        /**
         * @param characterSet The character set of the external database.
         * 
         * @return builder
         * 
         */
        public Builder characterSet(String characterSet) {
            return characterSet(Output.of(characterSet));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param databaseConfiguration The Oracle Database configuration
         * 
         * @return builder
         * 
         */
        public Builder databaseConfiguration(@Nullable Output<String> databaseConfiguration) {
            $.databaseConfiguration = databaseConfiguration;
            return this;
        }

        /**
         * @param databaseConfiguration The Oracle Database configuration
         * 
         * @return builder
         * 
         */
        public Builder databaseConfiguration(String databaseConfiguration) {
            return databaseConfiguration(Output.of(databaseConfiguration));
        }

        /**
         * @param databaseEdition The Oracle Database edition.
         * 
         * @return builder
         * 
         */
        public Builder databaseEdition(@Nullable Output<String> databaseEdition) {
            $.databaseEdition = databaseEdition;
            return this;
        }

        /**
         * @param databaseEdition The Oracle Database edition.
         * 
         * @return builder
         * 
         */
        public Builder databaseEdition(String databaseEdition) {
            return databaseEdition(Output.of(databaseEdition));
        }

        /**
         * @param databaseManagementConfigs The configuration of the Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagementConfigs(@Nullable Output<List<ExternalNonContainerDatabaseDatabaseManagementConfigArgs>> databaseManagementConfigs) {
            $.databaseManagementConfigs = databaseManagementConfigs;
            return this;
        }

        /**
         * @param databaseManagementConfigs The configuration of the Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagementConfigs(List<ExternalNonContainerDatabaseDatabaseManagementConfigArgs> databaseManagementConfigs) {
            return databaseManagementConfigs(Output.of(databaseManagementConfigs));
        }

        /**
         * @param databaseManagementConfigs The configuration of the Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagementConfigs(ExternalNonContainerDatabaseDatabaseManagementConfigArgs... databaseManagementConfigs) {
            return databaseManagementConfigs(List.of(databaseManagementConfigs));
        }

        /**
         * @param databaseVersion The Oracle Database version.
         * 
         * @return builder
         * 
         */
        public Builder databaseVersion(@Nullable Output<String> databaseVersion) {
            $.databaseVersion = databaseVersion;
            return this;
        }

        /**
         * @param databaseVersion The Oracle Database version.
         * 
         * @return builder
         * 
         */
        public Builder databaseVersion(String databaseVersion) {
            return databaseVersion(Output.of(databaseVersion));
        }

        /**
         * @param dbId The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
         * 
         * @return builder
         * 
         */
        public Builder dbId(@Nullable Output<String> dbId) {
            $.dbId = dbId;
            return this;
        }

        /**
         * @param dbId The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
         * 
         * @return builder
         * 
         */
        public Builder dbId(String dbId) {
            return dbId(Output.of(dbId));
        }

        /**
         * @param dbPacks The database packs licensed for the external Oracle Database.
         * 
         * @return builder
         * 
         */
        public Builder dbPacks(@Nullable Output<String> dbPacks) {
            $.dbPacks = dbPacks;
            return this;
        }

        /**
         * @param dbPacks The database packs licensed for the external Oracle Database.
         * 
         * @return builder
         * 
         */
        public Builder dbPacks(String dbPacks) {
            return dbPacks(Output.of(dbPacks));
        }

        /**
         * @param dbUniqueName The `DB_UNIQUE_NAME` of the external database.
         * 
         * @return builder
         * 
         */
        public Builder dbUniqueName(@Nullable Output<String> dbUniqueName) {
            $.dbUniqueName = dbUniqueName;
            return this;
        }

        /**
         * @param dbUniqueName The `DB_UNIQUE_NAME` of the external database.
         * 
         * @return builder
         * 
         */
        public Builder dbUniqueName(String dbUniqueName) {
            return dbUniqueName(Output.of(dbUniqueName));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) The user-friendly name for the external database. The name does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The user-friendly name for the external database. The name does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param ncharacterSet The national character of the external database.
         * 
         * @return builder
         * 
         */
        public Builder ncharacterSet(@Nullable Output<String> ncharacterSet) {
            $.ncharacterSet = ncharacterSet;
            return this;
        }

        /**
         * @param ncharacterSet The national character of the external database.
         * 
         * @return builder
         * 
         */
        public Builder ncharacterSet(String ncharacterSet) {
            return ncharacterSet(Output.of(ncharacterSet));
        }

        /**
         * @param operationsInsightsConfigs The configuration of Operations Insights for the external database
         * 
         * @return builder
         * 
         */
        public Builder operationsInsightsConfigs(@Nullable Output<List<ExternalNonContainerDatabaseOperationsInsightsConfigArgs>> operationsInsightsConfigs) {
            $.operationsInsightsConfigs = operationsInsightsConfigs;
            return this;
        }

        /**
         * @param operationsInsightsConfigs The configuration of Operations Insights for the external database
         * 
         * @return builder
         * 
         */
        public Builder operationsInsightsConfigs(List<ExternalNonContainerDatabaseOperationsInsightsConfigArgs> operationsInsightsConfigs) {
            return operationsInsightsConfigs(Output.of(operationsInsightsConfigs));
        }

        /**
         * @param operationsInsightsConfigs The configuration of Operations Insights for the external database
         * 
         * @return builder
         * 
         */
        public Builder operationsInsightsConfigs(ExternalNonContainerDatabaseOperationsInsightsConfigArgs... operationsInsightsConfigs) {
            return operationsInsightsConfigs(List.of(operationsInsightsConfigs));
        }

        /**
         * @param state The current state of the Oracle Cloud Infrastructure external database resource.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the Oracle Cloud Infrastructure external database resource.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the database was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the database was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeZone The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public ExternalNonContainerDatabaseState build() {
            return $;
        }
    }

}
