// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaskingPoliciesMaskingColumnMaskingFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaskingPoliciesMaskingColumnMaskingFormatArgs Empty = new MaskingPoliciesMaskingColumnMaskingFormatArgs();

    /**
     * (Updatable) A condition that must be true for applying the masking format. It can be any valid  SQL construct that can be used in a SQL predicate. It enables you to do  &lt;a href=&#34;https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html&#34;&gt;conditional masking&lt;/a&gt;  so that you can mask the column data values differently using different masking  formats and the associated conditions.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<String> condition;

    /**
     * @return (Updatable) A condition that must be true for applying the masking format. It can be any valid  SQL construct that can be used in a SQL predicate. It enables you to do  &lt;a href=&#34;https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html&#34;&gt;conditional masking&lt;/a&gt;  so that you can mask the column data values differently using different masking  formats and the associated conditions.
     * 
     */
    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * (Updatable) The description of the format entry.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The description of the format entry.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) An array of format entries. The combined output of all the format entries is  used for masking the column data values.
     * 
     */
    @Import(name="formatEntries", required=true)
    private Output<List<MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs>> formatEntries;

    /**
     * @return (Updatable) An array of format entries. The combined output of all the format entries is  used for masking the column data values.
     * 
     */
    public Output<List<MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs>> formatEntries() {
        return this.formatEntries;
    }

    private MaskingPoliciesMaskingColumnMaskingFormatArgs() {}

    private MaskingPoliciesMaskingColumnMaskingFormatArgs(MaskingPoliciesMaskingColumnMaskingFormatArgs $) {
        this.condition = $.condition;
        this.description = $.description;
        this.formatEntries = $.formatEntries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaskingPoliciesMaskingColumnMaskingFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaskingPoliciesMaskingColumnMaskingFormatArgs $;

        public Builder() {
            $ = new MaskingPoliciesMaskingColumnMaskingFormatArgs();
        }

        public Builder(MaskingPoliciesMaskingColumnMaskingFormatArgs defaults) {
            $ = new MaskingPoliciesMaskingColumnMaskingFormatArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition (Updatable) A condition that must be true for applying the masking format. It can be any valid  SQL construct that can be used in a SQL predicate. It enables you to do  &lt;a href=&#34;https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html&#34;&gt;conditional masking&lt;/a&gt;  so that you can mask the column data values differently using different masking  formats and the associated conditions.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition (Updatable) A condition that must be true for applying the masking format. It can be any valid  SQL construct that can be used in a SQL predicate. It enables you to do  &lt;a href=&#34;https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html&#34;&gt;conditional masking&lt;/a&gt;  so that you can mask the column data values differently using different masking  formats and the associated conditions.
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param description (Updatable) The description of the format entry.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The description of the format entry.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param formatEntries (Updatable) An array of format entries. The combined output of all the format entries is  used for masking the column data values.
         * 
         * @return builder
         * 
         */
        public Builder formatEntries(Output<List<MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs>> formatEntries) {
            $.formatEntries = formatEntries;
            return this;
        }

        /**
         * @param formatEntries (Updatable) An array of format entries. The combined output of all the format entries is  used for masking the column data values.
         * 
         * @return builder
         * 
         */
        public Builder formatEntries(List<MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs> formatEntries) {
            return formatEntries(Output.of(formatEntries));
        }

        /**
         * @param formatEntries (Updatable) An array of format entries. The combined output of all the format entries is  used for masking the column data values.
         * 
         * @return builder
         * 
         */
        public Builder formatEntries(MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs... formatEntries) {
            return formatEntries(List.of(formatEntries));
        }

        public MaskingPoliciesMaskingColumnMaskingFormatArgs build() {
            $.formatEntries = Objects.requireNonNull($.formatEntries, "expected parameter 'formatEntries' to be non-null");
            return $;
        }
    }

}
