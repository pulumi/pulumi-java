// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Analytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalyticsInstanceVanityUrlState extends com.pulumi.resources.ResourceArgs {

    public static final AnalyticsInstanceVanityUrlState Empty = new AnalyticsInstanceVanityUrlState();

    /**
     * The OCID of the AnalyticsInstance.
     * 
     */
    @Import(name="analyticsInstanceId")
    private @Nullable Output<String> analyticsInstanceId;

    /**
     * @return The OCID of the AnalyticsInstance.
     * 
     */
    public Optional<Output<String>> analyticsInstanceId() {
        return Optional.ofNullable(this.analyticsInstanceId);
    }

    /**
     * (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
     * 
     */
    @Import(name="caCertificate")
    private @Nullable Output<String> caCertificate;

    /**
     * @return (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
     * 
     */
    public Optional<Output<String>> caCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }

    /**
     * Optional description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of fully qualified hostnames supported by this vanity URL definition (max of 3).
     * 
     */
    @Import(name="hosts")
    private @Nullable Output<List<String>> hosts;

    /**
     * @return List of fully qualified hostnames supported by this vanity URL definition (max of 3).
     * 
     */
    public Optional<Output<List<String>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    /**
     * (Updatable) Passphrase for the PEM Private key (if any).
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return (Updatable) Passphrase for the PEM Private key (if any).
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * (Updatable) PEM Private key for HTTPS connections.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return (Updatable) PEM Private key for HTTPS connections.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * (Updatable) PEM certificate for HTTPS connections.
     * 
     */
    @Import(name="publicCertificate")
    private @Nullable Output<String> publicCertificate;

    /**
     * @return (Updatable) PEM certificate for HTTPS connections.
     * 
     */
    public Optional<Output<String>> publicCertificate() {
        return Optional.ofNullable(this.publicCertificate);
    }

    private AnalyticsInstanceVanityUrlState() {}

    private AnalyticsInstanceVanityUrlState(AnalyticsInstanceVanityUrlState $) {
        this.analyticsInstanceId = $.analyticsInstanceId;
        this.caCertificate = $.caCertificate;
        this.description = $.description;
        this.hosts = $.hosts;
        this.passphrase = $.passphrase;
        this.privateKey = $.privateKey;
        this.publicCertificate = $.publicCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalyticsInstanceVanityUrlState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalyticsInstanceVanityUrlState $;

        public Builder() {
            $ = new AnalyticsInstanceVanityUrlState();
        }

        public Builder(AnalyticsInstanceVanityUrlState defaults) {
            $ = new AnalyticsInstanceVanityUrlState(Objects.requireNonNull(defaults));
        }

        /**
         * @param analyticsInstanceId The OCID of the AnalyticsInstance.
         * 
         * @return builder
         * 
         */
        public Builder analyticsInstanceId(@Nullable Output<String> analyticsInstanceId) {
            $.analyticsInstanceId = analyticsInstanceId;
            return this;
        }

        /**
         * @param analyticsInstanceId The OCID of the AnalyticsInstance.
         * 
         * @return builder
         * 
         */
        public Builder analyticsInstanceId(String analyticsInstanceId) {
            return analyticsInstanceId(Output.of(analyticsInstanceId));
        }

        /**
         * @param caCertificate (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(@Nullable Output<String> caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        /**
         * @param caCertificate (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(String caCertificate) {
            return caCertificate(Output.of(caCertificate));
        }

        /**
         * @param description Optional description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param hosts List of fully qualified hostnames supported by this vanity URL definition (max of 3).
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable Output<List<String>> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts List of fully qualified hostnames supported by this vanity URL definition (max of 3).
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<String> hosts) {
            return hosts(Output.of(hosts));
        }

        /**
         * @param hosts List of fully qualified hostnames supported by this vanity URL definition (max of 3).
         * 
         * @return builder
         * 
         */
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param passphrase (Updatable) Passphrase for the PEM Private key (if any).
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase (Updatable) Passphrase for the PEM Private key (if any).
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param privateKey (Updatable) PEM Private key for HTTPS connections.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey (Updatable) PEM Private key for HTTPS connections.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param publicCertificate (Updatable) PEM certificate for HTTPS connections.
         * 
         * @return builder
         * 
         */
        public Builder publicCertificate(@Nullable Output<String> publicCertificate) {
            $.publicCertificate = publicCertificate;
            return this;
        }

        /**
         * @param publicCertificate (Updatable) PEM certificate for HTTPS connections.
         * 
         * @return builder
         * 
         */
        public Builder publicCertificate(String publicCertificate) {
            return publicCertificate(Output.of(publicCertificate));
        }

        public AnalyticsInstanceVanityUrlState build() {
            return $;
        }
    }

}
