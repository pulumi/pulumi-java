// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ObjectStorage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ObjectStorage.inputs.GetObjectsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetObjectsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetObjectsArgs Empty = new GetObjectsArgs();

    /**
     * The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * When this parameter is set, only objects whose names do not contain the delimiter character (after an optionally specified prefix) are returned in the objects key of the response body. Scanned objects whose names contain the delimiter have the part of their name up to the first occurrence of the delimiter (including the optional prefix) returned as a set of prefixes. Note that only &#39;/&#39; is a supported delimiter character at this time.
     * 
     */
    @Import(name="delimiter")
    private @Nullable Output<String> delimiter;

    /**
     * @return When this parameter is set, only objects whose names do not contain the delimiter character (after an optionally specified prefix) are returned in the objects key of the response body. Scanned objects whose names contain the delimiter have the part of their name up to the first occurrence of the delimiter (including the optional prefix) returned as a set of prefixes. Note that only &#39;/&#39; is a supported delimiter character at this time.
     * 
     */
    public Optional<Output<String>> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }

    /**
     * Object names returned by a list query must be strictly less than this parameter.
     * 
     */
    @Import(name="end")
    private @Nullable Output<String> end;

    /**
     * @return Object names returned by a list query must be strictly less than this parameter.
     * 
     */
    public Optional<Output<String>> end() {
        return Optional.ofNullable(this.end);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetObjectsFilterArgs>> filters;

    public Optional<Output<List<GetObjectsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The Object Storage namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Object Storage namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The string to use for matching against the start of object names in a list query.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return The string to use for matching against the start of object names in a list query.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Object names returned by a list query must be greater or equal to this parameter.
     * 
     */
    @Import(name="start")
    private @Nullable Output<String> start;

    /**
     * @return Object names returned by a list query must be greater or equal to this parameter.
     * 
     */
    public Optional<Output<String>> start() {
        return Optional.ofNullable(this.start);
    }

    /**
     * Object names returned by a list query must be greater than this parameter.
     * 
     */
    @Import(name="startAfter")
    private @Nullable Output<String> startAfter;

    /**
     * @return Object names returned by a list query must be greater than this parameter.
     * 
     */
    public Optional<Output<String>> startAfter() {
        return Optional.ofNullable(this.startAfter);
    }

    private GetObjectsArgs() {}

    private GetObjectsArgs(GetObjectsArgs $) {
        this.bucket = $.bucket;
        this.delimiter = $.delimiter;
        this.end = $.end;
        this.filters = $.filters;
        this.namespace = $.namespace;
        this.prefix = $.prefix;
        this.start = $.start;
        this.startAfter = $.startAfter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetObjectsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetObjectsArgs $;

        public Builder() {
            $ = new GetObjectsArgs();
        }

        public Builder(GetObjectsArgs defaults) {
            $ = new GetObjectsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param delimiter When this parameter is set, only objects whose names do not contain the delimiter character (after an optionally specified prefix) are returned in the objects key of the response body. Scanned objects whose names contain the delimiter have the part of their name up to the first occurrence of the delimiter (including the optional prefix) returned as a set of prefixes. Note that only &#39;/&#39; is a supported delimiter character at this time.
         * 
         * @return builder
         * 
         */
        public Builder delimiter(@Nullable Output<String> delimiter) {
            $.delimiter = delimiter;
            return this;
        }

        /**
         * @param delimiter When this parameter is set, only objects whose names do not contain the delimiter character (after an optionally specified prefix) are returned in the objects key of the response body. Scanned objects whose names contain the delimiter have the part of their name up to the first occurrence of the delimiter (including the optional prefix) returned as a set of prefixes. Note that only &#39;/&#39; is a supported delimiter character at this time.
         * 
         * @return builder
         * 
         */
        public Builder delimiter(String delimiter) {
            return delimiter(Output.of(delimiter));
        }

        /**
         * @param end Object names returned by a list query must be strictly less than this parameter.
         * 
         * @return builder
         * 
         */
        public Builder end(@Nullable Output<String> end) {
            $.end = end;
            return this;
        }

        /**
         * @param end Object names returned by a list query must be strictly less than this parameter.
         * 
         * @return builder
         * 
         */
        public Builder end(String end) {
            return end(Output.of(end));
        }

        public Builder filters(@Nullable Output<List<GetObjectsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetObjectsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetObjectsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param namespace The Object Storage namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Object Storage namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param prefix The string to use for matching against the start of object names in a list query.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix The string to use for matching against the start of object names in a list query.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param start Object names returned by a list query must be greater or equal to this parameter.
         * 
         * @return builder
         * 
         */
        public Builder start(@Nullable Output<String> start) {
            $.start = start;
            return this;
        }

        /**
         * @param start Object names returned by a list query must be greater or equal to this parameter.
         * 
         * @return builder
         * 
         */
        public Builder start(String start) {
            return start(Output.of(start));
        }

        /**
         * @param startAfter Object names returned by a list query must be greater than this parameter.
         * 
         * @return builder
         * 
         */
        public Builder startAfter(@Nullable Output<String> startAfter) {
            $.startAfter = startAfter;
            return this;
        }

        /**
         * @param startAfter Object names returned by a list query must be greater than this parameter.
         * 
         * @return builder
         * 
         */
        public Builder startAfter(String startAfter) {
            return startAfter(Output.of(startAfter));
        }

        public GetObjectsArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            return $;
        }
    }

}
