// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Ocvp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SddcHcxOnPremLicenseArgs extends com.pulumi.resources.ResourceArgs {

    public static final SddcHcxOnPremLicenseArgs Empty = new SddcHcxOnPremLicenseArgs();

    /**
     * HCX on-premise license key value.
     * 
     */
    @Import(name="activationKey")
    private @Nullable Output<String> activationKey;

    /**
     * @return HCX on-premise license key value.
     * 
     */
    public Optional<Output<String>> activationKey() {
        return Optional.ofNullable(this.activationKey);
    }

    /**
     * status of HCX on-premise license.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return status of HCX on-premise license.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Name of the system that consumed the HCX on-premise license
     * 
     */
    @Import(name="systemName")
    private @Nullable Output<String> systemName;

    /**
     * @return Name of the system that consumed the HCX on-premise license
     * 
     */
    public Optional<Output<String>> systemName() {
        return Optional.ofNullable(this.systemName);
    }

    private SddcHcxOnPremLicenseArgs() {}

    private SddcHcxOnPremLicenseArgs(SddcHcxOnPremLicenseArgs $) {
        this.activationKey = $.activationKey;
        this.status = $.status;
        this.systemName = $.systemName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SddcHcxOnPremLicenseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SddcHcxOnPremLicenseArgs $;

        public Builder() {
            $ = new SddcHcxOnPremLicenseArgs();
        }

        public Builder(SddcHcxOnPremLicenseArgs defaults) {
            $ = new SddcHcxOnPremLicenseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationKey HCX on-premise license key value.
         * 
         * @return builder
         * 
         */
        public Builder activationKey(@Nullable Output<String> activationKey) {
            $.activationKey = activationKey;
            return this;
        }

        /**
         * @param activationKey HCX on-premise license key value.
         * 
         * @return builder
         * 
         */
        public Builder activationKey(String activationKey) {
            return activationKey(Output.of(activationKey));
        }

        /**
         * @param status status of HCX on-premise license.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status status of HCX on-premise license.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param systemName Name of the system that consumed the HCX on-premise license
         * 
         * @return builder
         * 
         */
        public Builder systemName(@Nullable Output<String> systemName) {
            $.systemName = systemName;
            return this;
        }

        /**
         * @param systemName Name of the system that consumed the HCX on-premise license
         * 
         * @return builder
         * 
         */
        public Builder systemName(String systemName) {
            return systemName(Output.of(systemName));
        }

        public SddcHcxOnPremLicenseArgs build() {
            return $;
        }
    }

}
