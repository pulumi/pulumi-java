// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ReportDefinitionColumnSortingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReportDefinitionColumnSortingArgs Empty = new ReportDefinitionColumnSortingArgs();

    /**
     * (Updatable) Name of the column that must be sorted.
     * 
     */
    @Import(name="fieldName", required=true)
    private Output<String> fieldName;

    /**
     * @return (Updatable) Name of the column that must be sorted.
     * 
     */
    public Output<String> fieldName() {
        return this.fieldName;
    }

    /**
     * (Updatable) Indicates if the column must be sorted in ascending order. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    @Import(name="isAscending", required=true)
    private Output<Boolean> isAscending;

    /**
     * @return (Updatable) Indicates if the column must be sorted in ascending order. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    public Output<Boolean> isAscending() {
        return this.isAscending;
    }

    /**
     * (Updatable) Indicates the order at which column must be sorted.
     * 
     */
    @Import(name="sortingOrder", required=true)
    private Output<Integer> sortingOrder;

    /**
     * @return (Updatable) Indicates the order at which column must be sorted.
     * 
     */
    public Output<Integer> sortingOrder() {
        return this.sortingOrder;
    }

    private ReportDefinitionColumnSortingArgs() {}

    private ReportDefinitionColumnSortingArgs(ReportDefinitionColumnSortingArgs $) {
        this.fieldName = $.fieldName;
        this.isAscending = $.isAscending;
        this.sortingOrder = $.sortingOrder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportDefinitionColumnSortingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportDefinitionColumnSortingArgs $;

        public Builder() {
            $ = new ReportDefinitionColumnSortingArgs();
        }

        public Builder(ReportDefinitionColumnSortingArgs defaults) {
            $ = new ReportDefinitionColumnSortingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fieldName (Updatable) Name of the column that must be sorted.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(Output<String> fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        /**
         * @param fieldName (Updatable) Name of the column that must be sorted.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(String fieldName) {
            return fieldName(Output.of(fieldName));
        }

        /**
         * @param isAscending (Updatable) Indicates if the column must be sorted in ascending order. Values can either be &#39;true&#39; or &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder isAscending(Output<Boolean> isAscending) {
            $.isAscending = isAscending;
            return this;
        }

        /**
         * @param isAscending (Updatable) Indicates if the column must be sorted in ascending order. Values can either be &#39;true&#39; or &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder isAscending(Boolean isAscending) {
            return isAscending(Output.of(isAscending));
        }

        /**
         * @param sortingOrder (Updatable) Indicates the order at which column must be sorted.
         * 
         * @return builder
         * 
         */
        public Builder sortingOrder(Output<Integer> sortingOrder) {
            $.sortingOrder = sortingOrder;
            return this;
        }

        /**
         * @param sortingOrder (Updatable) Indicates the order at which column must be sorted.
         * 
         * @return builder
         * 
         */
        public Builder sortingOrder(Integer sortingOrder) {
            return sortingOrder(Output.of(sortingOrder));
        }

        public ReportDefinitionColumnSortingArgs build() {
            $.fieldName = Objects.requireNonNull($.fieldName, "expected parameter 'fieldName' to be non-null");
            $.isAscending = Objects.requireNonNull($.isAscending, "expected parameter 'isAscending' to be non-null");
            $.sortingOrder = Objects.requireNonNull($.sortingOrder, "expected parameter 'sortingOrder' to be non-null");
            return $;
        }
    }

}
