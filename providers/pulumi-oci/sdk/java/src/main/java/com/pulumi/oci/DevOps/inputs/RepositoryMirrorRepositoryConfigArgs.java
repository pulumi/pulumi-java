// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.RepositoryMirrorRepositoryConfigTriggerScheduleArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryMirrorRepositoryConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryMirrorRepositoryConfigArgs Empty = new RepositoryMirrorRepositoryConfigArgs();

    /**
     * (Updatable) Upstream git repository connection identifer.
     * 
     */
    @Import(name="connectorId")
    private @Nullable Output<String> connectorId;

    /**
     * @return (Updatable) Upstream git repository connection identifer.
     * 
     */
    public Optional<Output<String>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    /**
     * (Updatable) URL of external repository you want to mirror.
     * 
     */
    @Import(name="repositoryUrl")
    private @Nullable Output<String> repositoryUrl;

    /**
     * @return (Updatable) URL of external repository you want to mirror.
     * 
     */
    public Optional<Output<String>> repositoryUrl() {
        return Optional.ofNullable(this.repositoryUrl);
    }

    /**
     * (Updatable) Specifies a trigger schedule. Timing information for when to initiate automated syncs.
     * 
     */
    @Import(name="triggerSchedule")
    private @Nullable Output<RepositoryMirrorRepositoryConfigTriggerScheduleArgs> triggerSchedule;

    /**
     * @return (Updatable) Specifies a trigger schedule. Timing information for when to initiate automated syncs.
     * 
     */
    public Optional<Output<RepositoryMirrorRepositoryConfigTriggerScheduleArgs>> triggerSchedule() {
        return Optional.ofNullable(this.triggerSchedule);
    }

    private RepositoryMirrorRepositoryConfigArgs() {}

    private RepositoryMirrorRepositoryConfigArgs(RepositoryMirrorRepositoryConfigArgs $) {
        this.connectorId = $.connectorId;
        this.repositoryUrl = $.repositoryUrl;
        this.triggerSchedule = $.triggerSchedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryMirrorRepositoryConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryMirrorRepositoryConfigArgs $;

        public Builder() {
            $ = new RepositoryMirrorRepositoryConfigArgs();
        }

        public Builder(RepositoryMirrorRepositoryConfigArgs defaults) {
            $ = new RepositoryMirrorRepositoryConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorId (Updatable) Upstream git repository connection identifer.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(@Nullable Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId (Updatable) Upstream git repository connection identifer.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param repositoryUrl (Updatable) URL of external repository you want to mirror.
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(@Nullable Output<String> repositoryUrl) {
            $.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * @param repositoryUrl (Updatable) URL of external repository you want to mirror.
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(String repositoryUrl) {
            return repositoryUrl(Output.of(repositoryUrl));
        }

        /**
         * @param triggerSchedule (Updatable) Specifies a trigger schedule. Timing information for when to initiate automated syncs.
         * 
         * @return builder
         * 
         */
        public Builder triggerSchedule(@Nullable Output<RepositoryMirrorRepositoryConfigTriggerScheduleArgs> triggerSchedule) {
            $.triggerSchedule = triggerSchedule;
            return this;
        }

        /**
         * @param triggerSchedule (Updatable) Specifies a trigger schedule. Timing information for when to initiate automated syncs.
         * 
         * @return builder
         * 
         */
        public Builder triggerSchedule(RepositoryMirrorRepositoryConfigTriggerScheduleArgs triggerSchedule) {
            return triggerSchedule(Output.of(triggerSchedule));
        }

        public RepositoryMirrorRepositoryConfigArgs build() {
            return $;
        }
    }

}
