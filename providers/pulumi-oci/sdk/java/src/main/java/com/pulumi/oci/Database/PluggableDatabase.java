// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Database.PluggableDatabaseArgs;
import com.pulumi.oci.Database.inputs.PluggableDatabaseState;
import com.pulumi.oci.Database.outputs.PluggableDatabaseConnectionString;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * This resource provides the Pluggable Database resource in Oracle Cloud Infrastructure Database service.
 * 
 * Creates and starts a pluggable database in the specified container database.
 * Use the [StartPluggableDatabase](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/PluggableDatabase/StartPluggableDatabase) and [StopPluggableDatabase](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/PluggableDatabase/StopPluggableDatabase) APIs to start and stop the pluggable database.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * PluggableDatabases can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:Database/pluggableDatabase:PluggableDatabase test_pluggable_database &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Database/pluggableDatabase:PluggableDatabase")
public class PluggableDatabase extends com.pulumi.resources.CustomResource {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Export(name="compartmentId", type=String.class, parameters={})
    private Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    @Export(name="connectionStrings", type=List.class, parameters={PluggableDatabaseConnectionString.class})
    private Output<List<PluggableDatabaseConnectionString>> connectionStrings;

    /**
     * @return Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    public Output<List<PluggableDatabaseConnectionString>> connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     * 
     */
    @Export(name="containerDatabaseId", type=String.class, parameters={})
    private Output<String> containerDatabaseId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     * 
     */
    public Output<String> containerDatabaseId() {
        return this.containerDatabaseId;
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Export(name="definedTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Output<Map<String,Object>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Export(name="freeformTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Output<Map<String,Object>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    @Export(name="isRestricted", type=Boolean.class, parameters={})
    private Output<Boolean> isRestricted;

    /**
     * @return The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    public Output<Boolean> isRestricted() {
        return this.isRestricted;
    }
    /**
     * Detailed message for the lifecycle state.
     * 
     */
    @Export(name="lifecycleDetails", type=String.class, parameters={})
    private Output<String> lifecycleDetails;

    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    public Output<String> lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    @Export(name="openMode", type=String.class, parameters={})
    private Output<String> openMode;

    /**
     * @return The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    public Output<String> openMode() {
        return this.openMode;
    }
    /**
     * A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    @Export(name="pdbAdminPassword", type=String.class, parameters={})
    private Output<String> pdbAdminPassword;

    /**
     * @return A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public Output<String> pdbAdminPassword() {
        return this.pdbAdminPassword;
    }
    /**
     * The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    @Export(name="pdbName", type=String.class, parameters={})
    private Output<String> pdbName;

    /**
     * @return The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    public Output<String> pdbName() {
        return this.pdbName;
    }
    /**
     * The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     * 
     */
    @Export(name="shouldPdbAdminAccountBeLocked", type=Boolean.class, parameters={})
    private Output<Boolean> shouldPdbAdminAccountBeLocked;

    /**
     * @return The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     * 
     */
    public Output<Boolean> shouldPdbAdminAccountBeLocked() {
        return this.shouldPdbAdminAccountBeLocked;
    }
    /**
     * The current state of the pluggable database.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The current state of the pluggable database.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The existing TDE wallet password of the CDB.
     * 
     */
    @Export(name="tdeWalletPassword", type=String.class, parameters={})
    private Output<String> tdeWalletPassword;

    /**
     * @return The existing TDE wallet password of the CDB.
     * 
     */
    public Output<String> tdeWalletPassword() {
        return this.tdeWalletPassword;
    }
    /**
     * The date and time the pluggable database was created.
     * 
     */
    @Export(name="timeCreated", type=String.class, parameters={})
    private Output<String> timeCreated;

    /**
     * @return The date and time the pluggable database was created.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PluggableDatabase(String name) {
        this(name, PluggableDatabaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PluggableDatabase(String name, PluggableDatabaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PluggableDatabase(String name, PluggableDatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Database/pluggableDatabase:PluggableDatabase", name, args == null ? PluggableDatabaseArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PluggableDatabase(String name, Output<String> id, @Nullable PluggableDatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Database/pluggableDatabase:PluggableDatabase", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PluggableDatabase get(String name, Output<String> id, @Nullable PluggableDatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PluggableDatabase(name, id, state, options);
    }
}
