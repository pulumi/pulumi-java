// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OperatorAccessControl.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.OperatorAccessControl.inputs.GetControlAssignmentsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetControlAssignmentsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetControlAssignmentsArgs Empty = new GetControlAssignmentsArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetControlAssignmentsFilterArgs>> filters;

    public Optional<Output<List<GetControlAssignmentsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return OperatorControl that match the given operatorControlName.
     * 
     */
    @Import(name="operatorControlName")
    private @Nullable Output<String> operatorControlName;

    /**
     * @return A filter to return OperatorControl that match the given operatorControlName.
     * 
     */
    public Optional<Output<String>> operatorControlName() {
        return Optional.ofNullable(this.operatorControlName);
    }

    /**
     * A filter to return only resources that match the given ResourceName.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return A filter to return only resources that match the given ResourceName.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * A filter to return only lists of resources that match the entire given service type.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return A filter to return only lists of resources that match the entire given service type.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetControlAssignmentsArgs() {}

    private GetControlAssignmentsArgs(GetControlAssignmentsArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.operatorControlName = $.operatorControlName;
        this.resourceName = $.resourceName;
        this.resourceType = $.resourceType;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetControlAssignmentsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetControlAssignmentsArgs $;

        public Builder() {
            $ = new GetControlAssignmentsArgs();
        }

        public Builder(GetControlAssignmentsArgs defaults) {
            $ = new GetControlAssignmentsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(@Nullable Output<List<GetControlAssignmentsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetControlAssignmentsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetControlAssignmentsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param operatorControlName A filter to return OperatorControl that match the given operatorControlName.
         * 
         * @return builder
         * 
         */
        public Builder operatorControlName(@Nullable Output<String> operatorControlName) {
            $.operatorControlName = operatorControlName;
            return this;
        }

        /**
         * @param operatorControlName A filter to return OperatorControl that match the given operatorControlName.
         * 
         * @return builder
         * 
         */
        public Builder operatorControlName(String operatorControlName) {
            return operatorControlName(Output.of(operatorControlName));
        }

        /**
         * @param resourceName A filter to return only resources that match the given ResourceName.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName A filter to return only resources that match the given ResourceName.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourceType A filter to return only lists of resources that match the entire given service type.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType A filter to return only lists of resources that match the entire given service type.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param state A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetControlAssignmentsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
