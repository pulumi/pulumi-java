// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetKeyStoreTypeDetail {
    /**
     * @return The administrator username to connect to Oracle Key Vault
     * 
     */
    private final String adminUsername;
    /**
     * @return The list of Oracle Key Vault connection IP addresses.
     * 
     */
    private final List<String> connectionIps;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    private final String secretId;
    /**
     * @return The type of key store.
     * 
     */
    private final String type;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    private final String vaultId;

    @CustomType.Constructor
    private GetKeyStoreTypeDetail(
        @CustomType.Parameter("adminUsername") String adminUsername,
        @CustomType.Parameter("connectionIps") List<String> connectionIps,
        @CustomType.Parameter("secretId") String secretId,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("vaultId") String vaultId) {
        this.adminUsername = adminUsername;
        this.connectionIps = connectionIps;
        this.secretId = secretId;
        this.type = type;
        this.vaultId = vaultId;
    }

    /**
     * @return The administrator username to connect to Oracle Key Vault
     * 
     */
    public String adminUsername() {
        return this.adminUsername;
    }
    /**
     * @return The list of Oracle Key Vault connection IP addresses.
     * 
     */
    public List<String> connectionIps() {
        return this.connectionIps;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return The type of key store.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyStoreTypeDetail defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String adminUsername;
        private List<String> connectionIps;
        private String secretId;
        private String type;
        private String vaultId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKeyStoreTypeDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminUsername = defaults.adminUsername;
    	      this.connectionIps = defaults.connectionIps;
    	      this.secretId = defaults.secretId;
    	      this.type = defaults.type;
    	      this.vaultId = defaults.vaultId;
        }

        public Builder adminUsername(String adminUsername) {
            this.adminUsername = Objects.requireNonNull(adminUsername);
            return this;
        }
        public Builder connectionIps(List<String> connectionIps) {
            this.connectionIps = Objects.requireNonNull(connectionIps);
            return this;
        }
        public Builder connectionIps(String... connectionIps) {
            return connectionIps(List.of(connectionIps));
        }
        public Builder secretId(String secretId) {
            this.secretId = Objects.requireNonNull(secretId);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }        public GetKeyStoreTypeDetail build() {
            return new GetKeyStoreTypeDetail(adminUsername, connectionIps, secretId, type, vaultId);
        }
    }
}
