// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSubnetsSubnet {
    /**
     * @return The subnet&#39;s availability domain. This attribute will be null if this is a regional subnet instead of an AD-specific subnet. Oracle recommends creating regional subnets.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private final String availabilityDomain;
    /**
     * @return The subnet&#39;s CIDR block.  Example: `10.0.1.0/24`
     * 
     */
    private final String cidrBlock;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private final String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the set of DHCP options that the subnet uses.
     * 
     */
    private final String dhcpOptionsId;
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    private final String displayName;
    /**
     * @return A DNS label for the subnet, used in conjunction with the VNIC&#39;s hostname and VCN&#39;s DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Must be an alphanumeric string that begins with a letter and is unique within the VCN. The value cannot be changed.
     * 
     */
    private final String dnsLabel;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The subnet&#39;s Oracle ID ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)).
     * 
     */
    private final String id;
    /**
     * @return For an IPv6-enabled subnet, this is the IPv6 CIDR block for the subnet&#39;s IP address space. The subnet size is always /64. See [IPv6 Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/ipv6.htm).  Example: `2001:0db8:0123:1111::/64`
     * 
     */
    private final String ipv6cidrBlock;
    /**
     * @return The list of all IPv6 CIDR blocks (Oracle allocated IPv6 GUA, ULA or private IPv6 CIDR blocks, BYOIPv6 CIDR blocks) for the subnet.
     * 
     */
    private final List<String> ipv6cidrBlocks;
    /**
     * @return For an IPv6-enabled subnet, this is the IPv6 address of the virtual router.  Example: `2001:0db8:0123:1111:89ab:cdef:1234:5678`
     * 
     */
    private final String ipv6virtualRouterIp;
    /**
     * @return Whether to disallow ingress internet traffic to VNICs within this subnet. Defaults to false.
     * 
     */
    private final Boolean prohibitInternetIngress;
    /**
     * @return Whether VNICs within this subnet can have public IP addresses. Defaults to false, which means VNICs created in this subnet will automatically be assigned public IP addresses unless specified otherwise during instance launch or VNIC creation (with the `assignPublicIp` flag in [CreateVnicDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CreateVnicDetails/)). If `prohibitPublicIpOnVnic` is set to true, VNICs created in this subnet cannot have public IP addresses (that is, it&#39;s a private subnet).  Example: `true`
     * 
     */
    private final Boolean prohibitPublicIpOnVnic;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table that the subnet uses.
     * 
     */
    private final String routeTableId;
    /**
     * @return The OCIDs of the security list or lists that the subnet uses. Remember that security lists are associated *with the subnet*, but the rules are applied to the individual VNICs in the subnet.
     * 
     */
    private final List<String> securityListIds;
    /**
     * @return A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    private final String state;
    /**
     * @return The subnet&#39;s domain name, which consists of the subnet&#39;s DNS label, the VCN&#39;s DNS label, and the `oraclevcn.com` domain.
     * 
     */
    private final String subnetDomainName;
    /**
     * @return The date and time the subnet was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private final String timeCreated;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
     * 
     */
    private final String vcnId;
    /**
     * @return The IP address of the virtual router.  Example: `10.0.14.1`
     * 
     */
    private final String virtualRouterIp;
    /**
     * @return The MAC address of the virtual router.  Example: `00:00:00:00:00:01`
     * 
     */
    private final String virtualRouterMac;

    @CustomType.Constructor
    private GetSubnetsSubnet(
        @CustomType.Parameter("availabilityDomain") String availabilityDomain,
        @CustomType.Parameter("cidrBlock") String cidrBlock,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("dhcpOptionsId") String dhcpOptionsId,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("dnsLabel") String dnsLabel,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ipv6cidrBlock") String ipv6cidrBlock,
        @CustomType.Parameter("ipv6cidrBlocks") List<String> ipv6cidrBlocks,
        @CustomType.Parameter("ipv6virtualRouterIp") String ipv6virtualRouterIp,
        @CustomType.Parameter("prohibitInternetIngress") Boolean prohibitInternetIngress,
        @CustomType.Parameter("prohibitPublicIpOnVnic") Boolean prohibitPublicIpOnVnic,
        @CustomType.Parameter("routeTableId") String routeTableId,
        @CustomType.Parameter("securityListIds") List<String> securityListIds,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("subnetDomainName") String subnetDomainName,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("vcnId") String vcnId,
        @CustomType.Parameter("virtualRouterIp") String virtualRouterIp,
        @CustomType.Parameter("virtualRouterMac") String virtualRouterMac) {
        this.availabilityDomain = availabilityDomain;
        this.cidrBlock = cidrBlock;
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.dhcpOptionsId = dhcpOptionsId;
        this.displayName = displayName;
        this.dnsLabel = dnsLabel;
        this.freeformTags = freeformTags;
        this.id = id;
        this.ipv6cidrBlock = ipv6cidrBlock;
        this.ipv6cidrBlocks = ipv6cidrBlocks;
        this.ipv6virtualRouterIp = ipv6virtualRouterIp;
        this.prohibitInternetIngress = prohibitInternetIngress;
        this.prohibitPublicIpOnVnic = prohibitPublicIpOnVnic;
        this.routeTableId = routeTableId;
        this.securityListIds = securityListIds;
        this.state = state;
        this.subnetDomainName = subnetDomainName;
        this.timeCreated = timeCreated;
        this.vcnId = vcnId;
        this.virtualRouterIp = virtualRouterIp;
        this.virtualRouterMac = virtualRouterMac;
    }

    /**
     * @return The subnet&#39;s availability domain. This attribute will be null if this is a regional subnet instead of an AD-specific subnet. Oracle recommends creating regional subnets.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The subnet&#39;s CIDR block.  Example: `10.0.1.0/24`
     * 
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the set of DHCP options that the subnet uses.
     * 
     */
    public String dhcpOptionsId() {
        return this.dhcpOptionsId;
    }
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A DNS label for the subnet, used in conjunction with the VNIC&#39;s hostname and VCN&#39;s DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Must be an alphanumeric string that begins with a letter and is unique within the VCN. The value cannot be changed.
     * 
     */
    public String dnsLabel() {
        return this.dnsLabel;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The subnet&#39;s Oracle ID ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)).
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return For an IPv6-enabled subnet, this is the IPv6 CIDR block for the subnet&#39;s IP address space. The subnet size is always /64. See [IPv6 Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/ipv6.htm).  Example: `2001:0db8:0123:1111::/64`
     * 
     */
    public String ipv6cidrBlock() {
        return this.ipv6cidrBlock;
    }
    /**
     * @return The list of all IPv6 CIDR blocks (Oracle allocated IPv6 GUA, ULA or private IPv6 CIDR blocks, BYOIPv6 CIDR blocks) for the subnet.
     * 
     */
    public List<String> ipv6cidrBlocks() {
        return this.ipv6cidrBlocks;
    }
    /**
     * @return For an IPv6-enabled subnet, this is the IPv6 address of the virtual router.  Example: `2001:0db8:0123:1111:89ab:cdef:1234:5678`
     * 
     */
    public String ipv6virtualRouterIp() {
        return this.ipv6virtualRouterIp;
    }
    /**
     * @return Whether to disallow ingress internet traffic to VNICs within this subnet. Defaults to false.
     * 
     */
    public Boolean prohibitInternetIngress() {
        return this.prohibitInternetIngress;
    }
    /**
     * @return Whether VNICs within this subnet can have public IP addresses. Defaults to false, which means VNICs created in this subnet will automatically be assigned public IP addresses unless specified otherwise during instance launch or VNIC creation (with the `assignPublicIp` flag in [CreateVnicDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CreateVnicDetails/)). If `prohibitPublicIpOnVnic` is set to true, VNICs created in this subnet cannot have public IP addresses (that is, it&#39;s a private subnet).  Example: `true`
     * 
     */
    public Boolean prohibitPublicIpOnVnic() {
        return this.prohibitPublicIpOnVnic;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table that the subnet uses.
     * 
     */
    public String routeTableId() {
        return this.routeTableId;
    }
    /**
     * @return The OCIDs of the security list or lists that the subnet uses. Remember that security lists are associated *with the subnet*, but the rules are applied to the individual VNICs in the subnet.
     * 
     */
    public List<String> securityListIds() {
        return this.securityListIds;
    }
    /**
     * @return A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The subnet&#39;s domain name, which consists of the subnet&#39;s DNS label, the VCN&#39;s DNS label, and the `oraclevcn.com` domain.
     * 
     */
    public String subnetDomainName() {
        return this.subnetDomainName;
    }
    /**
     * @return The date and time the subnet was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
     * 
     */
    public String vcnId() {
        return this.vcnId;
    }
    /**
     * @return The IP address of the virtual router.  Example: `10.0.14.1`
     * 
     */
    public String virtualRouterIp() {
        return this.virtualRouterIp;
    }
    /**
     * @return The MAC address of the virtual router.  Example: `00:00:00:00:00:01`
     * 
     */
    public String virtualRouterMac() {
        return this.virtualRouterMac;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubnetsSubnet defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String availabilityDomain;
        private String cidrBlock;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String dhcpOptionsId;
        private String displayName;
        private String dnsLabel;
        private Map<String,Object> freeformTags;
        private String id;
        private String ipv6cidrBlock;
        private List<String> ipv6cidrBlocks;
        private String ipv6virtualRouterIp;
        private Boolean prohibitInternetIngress;
        private Boolean prohibitPublicIpOnVnic;
        private String routeTableId;
        private List<String> securityListIds;
        private String state;
        private String subnetDomainName;
        private String timeCreated;
        private String vcnId;
        private String virtualRouterIp;
        private String virtualRouterMac;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSubnetsSubnet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.dhcpOptionsId = defaults.dhcpOptionsId;
    	      this.displayName = defaults.displayName;
    	      this.dnsLabel = defaults.dnsLabel;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.ipv6cidrBlock = defaults.ipv6cidrBlock;
    	      this.ipv6cidrBlocks = defaults.ipv6cidrBlocks;
    	      this.ipv6virtualRouterIp = defaults.ipv6virtualRouterIp;
    	      this.prohibitInternetIngress = defaults.prohibitInternetIngress;
    	      this.prohibitPublicIpOnVnic = defaults.prohibitPublicIpOnVnic;
    	      this.routeTableId = defaults.routeTableId;
    	      this.securityListIds = defaults.securityListIds;
    	      this.state = defaults.state;
    	      this.subnetDomainName = defaults.subnetDomainName;
    	      this.timeCreated = defaults.timeCreated;
    	      this.vcnId = defaults.vcnId;
    	      this.virtualRouterIp = defaults.virtualRouterIp;
    	      this.virtualRouterMac = defaults.virtualRouterMac;
        }

        public Builder availabilityDomain(String availabilityDomain) {
            this.availabilityDomain = Objects.requireNonNull(availabilityDomain);
            return this;
        }
        public Builder cidrBlock(String cidrBlock) {
            this.cidrBlock = Objects.requireNonNull(cidrBlock);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder dhcpOptionsId(String dhcpOptionsId) {
            this.dhcpOptionsId = Objects.requireNonNull(dhcpOptionsId);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder dnsLabel(String dnsLabel) {
            this.dnsLabel = Objects.requireNonNull(dnsLabel);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ipv6cidrBlock(String ipv6cidrBlock) {
            this.ipv6cidrBlock = Objects.requireNonNull(ipv6cidrBlock);
            return this;
        }
        public Builder ipv6cidrBlocks(List<String> ipv6cidrBlocks) {
            this.ipv6cidrBlocks = Objects.requireNonNull(ipv6cidrBlocks);
            return this;
        }
        public Builder ipv6cidrBlocks(String... ipv6cidrBlocks) {
            return ipv6cidrBlocks(List.of(ipv6cidrBlocks));
        }
        public Builder ipv6virtualRouterIp(String ipv6virtualRouterIp) {
            this.ipv6virtualRouterIp = Objects.requireNonNull(ipv6virtualRouterIp);
            return this;
        }
        public Builder prohibitInternetIngress(Boolean prohibitInternetIngress) {
            this.prohibitInternetIngress = Objects.requireNonNull(prohibitInternetIngress);
            return this;
        }
        public Builder prohibitPublicIpOnVnic(Boolean prohibitPublicIpOnVnic) {
            this.prohibitPublicIpOnVnic = Objects.requireNonNull(prohibitPublicIpOnVnic);
            return this;
        }
        public Builder routeTableId(String routeTableId) {
            this.routeTableId = Objects.requireNonNull(routeTableId);
            return this;
        }
        public Builder securityListIds(List<String> securityListIds) {
            this.securityListIds = Objects.requireNonNull(securityListIds);
            return this;
        }
        public Builder securityListIds(String... securityListIds) {
            return securityListIds(List.of(securityListIds));
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder subnetDomainName(String subnetDomainName) {
            this.subnetDomainName = Objects.requireNonNull(subnetDomainName);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder vcnId(String vcnId) {
            this.vcnId = Objects.requireNonNull(vcnId);
            return this;
        }
        public Builder virtualRouterIp(String virtualRouterIp) {
            this.virtualRouterIp = Objects.requireNonNull(virtualRouterIp);
            return this;
        }
        public Builder virtualRouterMac(String virtualRouterMac) {
            this.virtualRouterMac = Objects.requireNonNull(virtualRouterMac);
            return this;
        }        public GetSubnetsSubnet build() {
            return new GetSubnetsSubnet(availabilityDomain, cidrBlock, compartmentId, definedTags, dhcpOptionsId, displayName, dnsLabel, freeformTags, id, ipv6cidrBlock, ipv6cidrBlocks, ipv6virtualRouterIp, prohibitInternetIngress, prohibitPublicIpOnVnic, routeTableId, securityListIds, state, subnetDomainName, timeCreated, vcnId, virtualRouterIp, virtualRouterMac);
        }
    }
}
