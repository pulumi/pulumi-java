// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Marketplace.inputs.GetListingsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetListingsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetListingsArgs Empty = new GetListingsArgs();

    /**
     * Name of the product category or categories. If you specify multiple categories, then Marketplace returns any listing with one or more matching categories.
     * 
     */
    @Import(name="categories")
    private Output</* @Nullable */ List<String>> categories;

    /**
     * @return Name of the product category or categories. If you specify multiple categories, then Marketplace returns any listing with one or more matching categories.
     * 
     */
    public Output</* @Nullable */ List<String>> categories() {
        return this.categories;
    }

    /**
     * The unique identifier for the compartment.
     * 
     */
    @Import(name="compartmentId")
    private Output</* @Nullable */ String> compartmentId;

    /**
     * @return The unique identifier for the compartment.
     * 
     */
    public Output</* @Nullable */ String> compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetListingsFilter>> filters;

    public Output</* @Nullable */ List<GetListingsFilter>> filters() {
        return this.filters;
    }

    /**
     * The image identifier of the listing.
     * 
     */
    @Import(name="imageId")
    private Output</* @Nullable */ String> imageId;

    /**
     * @return The image identifier of the listing.
     * 
     */
    public Output</* @Nullable */ String> imageId() {
        return this.imageId;
    }

    /**
     * Indicates whether to show only featured listings. If this is set to `false` or is omitted, then all listings will be returned.
     * 
     */
    @Import(name="isFeatured")
    private Output</* @Nullable */ Boolean> isFeatured;

    /**
     * @return Indicates whether to show only featured listings. If this is set to `false` or is omitted, then all listings will be returned.
     * 
     */
    public Output</* @Nullable */ Boolean> isFeatured() {
        return this.isFeatured;
    }

    /**
     * The unique identifier for the listing.
     * 
     */
    @Import(name="listingId")
    private Output</* @Nullable */ String> listingId;

    /**
     * @return The unique identifier for the listing.
     * 
     */
    public Output</* @Nullable */ String> listingId() {
        return this.listingId;
    }

    /**
     * The type of the listing.
     * 
     */
    @Import(name="listingTypes")
    private Output</* @Nullable */ List<String>> listingTypes;

    /**
     * @return The type of the listing.
     * 
     */
    public Output</* @Nullable */ List<String>> listingTypes() {
        return this.listingTypes;
    }

    /**
     * The name of the listing.
     * 
     */
    @Import(name="names")
    private Output</* @Nullable */ List<String>> names;

    /**
     * @return The name of the listing.
     * 
     */
    public Output</* @Nullable */ List<String>> names() {
        return this.names;
    }

    /**
     * The operating system of the listing.
     * 
     */
    @Import(name="operatingSystems")
    private Output</* @Nullable */ List<String>> operatingSystems;

    /**
     * @return The operating system of the listing.
     * 
     */
    public Output</* @Nullable */ List<String>> operatingSystems() {
        return this.operatingSystems;
    }

    /**
     * A filter to return only packages that match the given package type exactly.
     * 
     */
    @Import(name="packageType")
    private Output</* @Nullable */ String> packageType;

    /**
     * @return A filter to return only packages that match the given package type exactly.
     * 
     */
    public Output</* @Nullable */ String> packageType() {
        return this.packageType;
    }

    /**
     * Name of the pricing type. If multiple pricing types are provided, then any listing with one or more matching pricing models will be returned.
     * 
     */
    @Import(name="pricings")
    private Output</* @Nullable */ List<String>> pricings;

    /**
     * @return Name of the pricing type. If multiple pricing types are provided, then any listing with one or more matching pricing models will be returned.
     * 
     */
    public Output</* @Nullable */ List<String>> pricings() {
        return this.pricings;
    }

    /**
     * Limit results to just this publisher.
     * 
     */
    @Import(name="publisherId")
    private Output</* @Nullable */ String> publisherId;

    /**
     * @return Limit results to just this publisher.
     * 
     */
    public Output</* @Nullable */ String> publisherId() {
        return this.publisherId;
    }

    private GetListingsArgs() {}

    private GetListingsArgs(GetListingsArgs $) {
        this.categories = $.categories;
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.imageId = $.imageId;
        this.isFeatured = $.isFeatured;
        this.listingId = $.listingId;
        this.listingTypes = $.listingTypes;
        this.names = $.names;
        this.operatingSystems = $.operatingSystems;
        this.packageType = $.packageType;
        this.pricings = $.pricings;
        this.publisherId = $.publisherId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetListingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetListingsArgs $;

        public Builder() {
            $ = new GetListingsArgs();
        }

        public Builder(GetListingsArgs defaults) {
            $ = new GetListingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categories Name of the product category or categories. If you specify multiple categories, then Marketplace returns any listing with one or more matching categories.
         * 
         * @return builder
         * 
         */
        public Builder categories(Output</* @Nullable */ List<String>> categories) {
            $.categories = categories;
            return this;
        }

        /**
         * @param categories Name of the product category or categories. If you specify multiple categories, then Marketplace returns any listing with one or more matching categories.
         * 
         * @return builder
         * 
         */
        public Builder categories(@Nullable List<String> categories) {
            return categories(Output.of(categories));
        }

        /**
         * @param categories Name of the product category or categories. If you specify multiple categories, then Marketplace returns any listing with one or more matching categories.
         * 
         * @return builder
         * 
         */
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }

        /**
         * @param compartmentId The unique identifier for the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output</* @Nullable */ String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The unique identifier for the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        public Builder filters(Output</* @Nullable */ List<GetListingsFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetListingsFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetListingsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param imageId The image identifier of the listing.
         * 
         * @return builder
         * 
         */
        public Builder imageId(Output</* @Nullable */ String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The image identifier of the listing.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param isFeatured Indicates whether to show only featured listings. If this is set to `false` or is omitted, then all listings will be returned.
         * 
         * @return builder
         * 
         */
        public Builder isFeatured(Output</* @Nullable */ Boolean> isFeatured) {
            $.isFeatured = isFeatured;
            return this;
        }

        /**
         * @param isFeatured Indicates whether to show only featured listings. If this is set to `false` or is omitted, then all listings will be returned.
         * 
         * @return builder
         * 
         */
        public Builder isFeatured(@Nullable Boolean isFeatured) {
            return isFeatured(Output.of(isFeatured));
        }

        /**
         * @param listingId The unique identifier for the listing.
         * 
         * @return builder
         * 
         */
        public Builder listingId(Output</* @Nullable */ String> listingId) {
            $.listingId = listingId;
            return this;
        }

        /**
         * @param listingId The unique identifier for the listing.
         * 
         * @return builder
         * 
         */
        public Builder listingId(@Nullable String listingId) {
            return listingId(Output.of(listingId));
        }

        /**
         * @param listingTypes The type of the listing.
         * 
         * @return builder
         * 
         */
        public Builder listingTypes(Output</* @Nullable */ List<String>> listingTypes) {
            $.listingTypes = listingTypes;
            return this;
        }

        /**
         * @param listingTypes The type of the listing.
         * 
         * @return builder
         * 
         */
        public Builder listingTypes(@Nullable List<String> listingTypes) {
            return listingTypes(Output.of(listingTypes));
        }

        /**
         * @param listingTypes The type of the listing.
         * 
         * @return builder
         * 
         */
        public Builder listingTypes(String... listingTypes) {
            return listingTypes(List.of(listingTypes));
        }

        /**
         * @param names The name of the listing.
         * 
         * @return builder
         * 
         */
        public Builder names(Output</* @Nullable */ List<String>> names) {
            $.names = names;
            return this;
        }

        /**
         * @param names The name of the listing.
         * 
         * @return builder
         * 
         */
        public Builder names(@Nullable List<String> names) {
            return names(Output.of(names));
        }

        /**
         * @param names The name of the listing.
         * 
         * @return builder
         * 
         */
        public Builder names(String... names) {
            return names(List.of(names));
        }

        /**
         * @param operatingSystems The operating system of the listing.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystems(Output</* @Nullable */ List<String>> operatingSystems) {
            $.operatingSystems = operatingSystems;
            return this;
        }

        /**
         * @param operatingSystems The operating system of the listing.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystems(@Nullable List<String> operatingSystems) {
            return operatingSystems(Output.of(operatingSystems));
        }

        /**
         * @param operatingSystems The operating system of the listing.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystems(String... operatingSystems) {
            return operatingSystems(List.of(operatingSystems));
        }

        /**
         * @param packageType A filter to return only packages that match the given package type exactly.
         * 
         * @return builder
         * 
         */
        public Builder packageType(Output</* @Nullable */ String> packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param packageType A filter to return only packages that match the given package type exactly.
         * 
         * @return builder
         * 
         */
        public Builder packageType(@Nullable String packageType) {
            return packageType(Output.of(packageType));
        }

        /**
         * @param pricings Name of the pricing type. If multiple pricing types are provided, then any listing with one or more matching pricing models will be returned.
         * 
         * @return builder
         * 
         */
        public Builder pricings(Output</* @Nullable */ List<String>> pricings) {
            $.pricings = pricings;
            return this;
        }

        /**
         * @param pricings Name of the pricing type. If multiple pricing types are provided, then any listing with one or more matching pricing models will be returned.
         * 
         * @return builder
         * 
         */
        public Builder pricings(@Nullable List<String> pricings) {
            return pricings(Output.of(pricings));
        }

        /**
         * @param pricings Name of the pricing type. If multiple pricing types are provided, then any listing with one or more matching pricing models will be returned.
         * 
         * @return builder
         * 
         */
        public Builder pricings(String... pricings) {
            return pricings(List.of(pricings));
        }

        /**
         * @param publisherId Limit results to just this publisher.
         * 
         * @return builder
         * 
         */
        public Builder publisherId(Output</* @Nullable */ String> publisherId) {
            $.publisherId = publisherId;
            return this;
        }

        /**
         * @param publisherId Limit results to just this publisher.
         * 
         * @return builder
         * 
         */
        public Builder publisherId(@Nullable String publisherId) {
            return publisherId(Output.of(publisherId));
        }

        public GetListingsArgs build() {
            return $;
        }
    }

}
