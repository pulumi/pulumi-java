// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetDbCredentialsDbCredential;
import com.pulumi.oci.Identity.outputs.GetDbCredentialsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDbCredentialsResult {
    /**
     * @return The list of db_credentials.
     * 
     */
    private final List<GetDbCredentialsDbCredential> dbCredentials;
    private final @Nullable List<GetDbCredentialsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final @Nullable String name;
    /**
     * @return The credential&#39;s current state. After creating a DB credential, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
     * 
     */
    private final @Nullable String state;
    /**
     * @return The OCID of the user the DB credential belongs to.
     * 
     */
    private final String userId;

    @CustomType.Constructor
    private GetDbCredentialsResult(
        @CustomType.Parameter("dbCredentials") List<GetDbCredentialsDbCredential> dbCredentials,
        @CustomType.Parameter("filters") @Nullable List<GetDbCredentialsFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("state") @Nullable String state,
        @CustomType.Parameter("userId") String userId) {
        this.dbCredentials = dbCredentials;
        this.filters = filters;
        this.id = id;
        this.name = name;
        this.state = state;
        this.userId = userId;
    }

    /**
     * @return The list of db_credentials.
     * 
     */
    public List<GetDbCredentialsDbCredential> dbCredentials() {
        return this.dbCredentials;
    }
    public List<GetDbCredentialsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The credential&#39;s current state. After creating a DB credential, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The OCID of the user the DB credential belongs to.
     * 
     */
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbCredentialsResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetDbCredentialsDbCredential> dbCredentials;
        private @Nullable List<GetDbCredentialsFilter> filters;
        private String id;
        private @Nullable String name;
        private @Nullable String state;
        private String userId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDbCredentialsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbCredentials = defaults.dbCredentials;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.userId = defaults.userId;
        }

        public Builder dbCredentials(List<GetDbCredentialsDbCredential> dbCredentials) {
            this.dbCredentials = Objects.requireNonNull(dbCredentials);
            return this;
        }
        public Builder dbCredentials(GetDbCredentialsDbCredential... dbCredentials) {
            return dbCredentials(List.of(dbCredentials));
        }
        public Builder filters(@Nullable List<GetDbCredentialsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetDbCredentialsFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public Builder userId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }        public GetDbCredentialsResult build() {
            return new GetDbCredentialsResult(dbCredentials, filters, id, name, state, userId);
        }
    }
}
