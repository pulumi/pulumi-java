// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetExadataInfrastructureContact;
import com.pulumi.oci.Database.outputs.GetExadataInfrastructureMaintenanceWindow;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExadataInfrastructureResult {
    /**
     * @return The requested number of additional storage servers activated for the Exadata infrastructure.
     * 
     */
    private final Integer activatedStorageCount;
    private final String activationFile;
    /**
     * @return The requested number of additional storage servers for the Exadata infrastructure.
     * 
     */
    private final Integer additionalStorageCount;
    /**
     * @return The CIDR block for the Exadata administration network.
     * 
     */
    private final String adminNetworkCidr;
    /**
     * @return The IP address for the first control plane server.
     * 
     */
    private final String cloudControlPlaneServer1;
    /**
     * @return The IP address for the second control plane server.
     * 
     */
    private final String cloudControlPlaneServer2;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private final String compartmentId;
    /**
     * @return The number of compute servers for the Exadata infrastructure.
     * 
     */
    private final Integer computeCount;
    /**
     * @return The list of contacts for the Exadata infrastructure.
     * 
     */
    private final List<GetExadataInfrastructureContact> contacts;
    /**
     * @return The corporate network proxy for access to the control plane network.
     * 
     */
    private final String corporateProxy;
    /**
     * @return The number of enabled CPU cores.
     * 
     */
    private final Integer cpusEnabled;
    private final Boolean createAsync;
    /**
     * @return The CSI Number of the Exadata infrastructure.
     * 
     */
    private final String csiNumber;
    /**
     * @return Size, in terabytes, of the DATA disk group.
     * 
     */
    private final Double dataStorageSizeInTbs;
    /**
     * @return The local node storage allocated in GBs.
     * 
     */
    private final Integer dbNodeStorageSizeInGbs;
    /**
     * @return The software version of the database servers (dom0) in the Exadata infrastructure.
     * 
     */
    private final String dbServerVersion;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return The user-friendly name for the Exadata Cloud@Customer infrastructure. The name does not need to be unique.
     * 
     */
    private final String displayName;
    /**
     * @return The list of DNS server IP addresses. Maximum of 3 allowed.
     * 
     */
    private final List<String> dnsServers;
    private final String exadataInfrastructureId;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The gateway for the control plane network.
     * 
     */
    private final String gateway;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
     * 
     */
    private final String id;
    /**
     * @return The CIDR block for the Exadata InfiniBand interconnect.
     * 
     */
    private final String infiniBandNetworkCidr;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
     * 
     */
    private final String maintenanceSloStatus;
    /**
     * @return The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    private final List<GetExadataInfrastructureMaintenanceWindow> maintenanceWindows;
    /**
     * @return The total number of CPU cores available.
     * 
     */
    private final Integer maxCpuCount;
    /**
     * @return The total available DATA disk group size.
     * 
     */
    private final Double maxDataStorageInTbs;
    /**
     * @return The total local node storage available in GBs.
     * 
     */
    private final Integer maxDbNodeStorageInGbs;
    /**
     * @return The total memory available in GBs.
     * 
     */
    private final Integer maxMemoryInGbs;
    /**
     * @return The memory allocated in GBs.
     * 
     */
    private final Integer memorySizeInGbs;
    /**
     * @return The netmask for the control plane network.
     * 
     */
    private final String netmask;
    /**
     * @return The list of NTP server IP addresses. Maximum of 3 allowed.
     * 
     */
    private final List<String> ntpServers;
    /**
     * @return The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    private final String shape;
    /**
     * @return The current lifecycle state of the Exadata infrastructure.
     * 
     */
    private final String state;
    /**
     * @return The number of Exadata storage servers for the Exadata infrastructure.
     * 
     */
    private final Integer storageCount;
    /**
     * @return The software version of the storage servers (cells) in the Exadata infrastructure.
     * 
     */
    private final String storageServerVersion;
    /**
     * @return The date and time the Exadata infrastructure was created.
     * 
     */
    private final String timeCreated;
    /**
     * @return The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     * 
     */
    private final String timeZone;

    @CustomType.Constructor
    private GetExadataInfrastructureResult(
        @CustomType.Parameter("activatedStorageCount") Integer activatedStorageCount,
        @CustomType.Parameter("activationFile") String activationFile,
        @CustomType.Parameter("additionalStorageCount") Integer additionalStorageCount,
        @CustomType.Parameter("adminNetworkCidr") String adminNetworkCidr,
        @CustomType.Parameter("cloudControlPlaneServer1") String cloudControlPlaneServer1,
        @CustomType.Parameter("cloudControlPlaneServer2") String cloudControlPlaneServer2,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("computeCount") Integer computeCount,
        @CustomType.Parameter("contacts") List<GetExadataInfrastructureContact> contacts,
        @CustomType.Parameter("corporateProxy") String corporateProxy,
        @CustomType.Parameter("cpusEnabled") Integer cpusEnabled,
        @CustomType.Parameter("createAsync") Boolean createAsync,
        @CustomType.Parameter("csiNumber") String csiNumber,
        @CustomType.Parameter("dataStorageSizeInTbs") Double dataStorageSizeInTbs,
        @CustomType.Parameter("dbNodeStorageSizeInGbs") Integer dbNodeStorageSizeInGbs,
        @CustomType.Parameter("dbServerVersion") String dbServerVersion,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("dnsServers") List<String> dnsServers,
        @CustomType.Parameter("exadataInfrastructureId") String exadataInfrastructureId,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("gateway") String gateway,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("infiniBandNetworkCidr") String infiniBandNetworkCidr,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("maintenanceSloStatus") String maintenanceSloStatus,
        @CustomType.Parameter("maintenanceWindows") List<GetExadataInfrastructureMaintenanceWindow> maintenanceWindows,
        @CustomType.Parameter("maxCpuCount") Integer maxCpuCount,
        @CustomType.Parameter("maxDataStorageInTbs") Double maxDataStorageInTbs,
        @CustomType.Parameter("maxDbNodeStorageInGbs") Integer maxDbNodeStorageInGbs,
        @CustomType.Parameter("maxMemoryInGbs") Integer maxMemoryInGbs,
        @CustomType.Parameter("memorySizeInGbs") Integer memorySizeInGbs,
        @CustomType.Parameter("netmask") String netmask,
        @CustomType.Parameter("ntpServers") List<String> ntpServers,
        @CustomType.Parameter("shape") String shape,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("storageCount") Integer storageCount,
        @CustomType.Parameter("storageServerVersion") String storageServerVersion,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeZone") String timeZone) {
        this.activatedStorageCount = activatedStorageCount;
        this.activationFile = activationFile;
        this.additionalStorageCount = additionalStorageCount;
        this.adminNetworkCidr = adminNetworkCidr;
        this.cloudControlPlaneServer1 = cloudControlPlaneServer1;
        this.cloudControlPlaneServer2 = cloudControlPlaneServer2;
        this.compartmentId = compartmentId;
        this.computeCount = computeCount;
        this.contacts = contacts;
        this.corporateProxy = corporateProxy;
        this.cpusEnabled = cpusEnabled;
        this.createAsync = createAsync;
        this.csiNumber = csiNumber;
        this.dataStorageSizeInTbs = dataStorageSizeInTbs;
        this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
        this.dbServerVersion = dbServerVersion;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.dnsServers = dnsServers;
        this.exadataInfrastructureId = exadataInfrastructureId;
        this.freeformTags = freeformTags;
        this.gateway = gateway;
        this.id = id;
        this.infiniBandNetworkCidr = infiniBandNetworkCidr;
        this.lifecycleDetails = lifecycleDetails;
        this.maintenanceSloStatus = maintenanceSloStatus;
        this.maintenanceWindows = maintenanceWindows;
        this.maxCpuCount = maxCpuCount;
        this.maxDataStorageInTbs = maxDataStorageInTbs;
        this.maxDbNodeStorageInGbs = maxDbNodeStorageInGbs;
        this.maxMemoryInGbs = maxMemoryInGbs;
        this.memorySizeInGbs = memorySizeInGbs;
        this.netmask = netmask;
        this.ntpServers = ntpServers;
        this.shape = shape;
        this.state = state;
        this.storageCount = storageCount;
        this.storageServerVersion = storageServerVersion;
        this.timeCreated = timeCreated;
        this.timeZone = timeZone;
    }

    /**
     * @return The requested number of additional storage servers activated for the Exadata infrastructure.
     * 
     */
    public Integer activatedStorageCount() {
        return this.activatedStorageCount;
    }
    public String activationFile() {
        return this.activationFile;
    }
    /**
     * @return The requested number of additional storage servers for the Exadata infrastructure.
     * 
     */
    public Integer additionalStorageCount() {
        return this.additionalStorageCount;
    }
    /**
     * @return The CIDR block for the Exadata administration network.
     * 
     */
    public String adminNetworkCidr() {
        return this.adminNetworkCidr;
    }
    /**
     * @return The IP address for the first control plane server.
     * 
     */
    public String cloudControlPlaneServer1() {
        return this.cloudControlPlaneServer1;
    }
    /**
     * @return The IP address for the second control plane server.
     * 
     */
    public String cloudControlPlaneServer2() {
        return this.cloudControlPlaneServer2;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The number of compute servers for the Exadata infrastructure.
     * 
     */
    public Integer computeCount() {
        return this.computeCount;
    }
    /**
     * @return The list of contacts for the Exadata infrastructure.
     * 
     */
    public List<GetExadataInfrastructureContact> contacts() {
        return this.contacts;
    }
    /**
     * @return The corporate network proxy for access to the control plane network.
     * 
     */
    public String corporateProxy() {
        return this.corporateProxy;
    }
    /**
     * @return The number of enabled CPU cores.
     * 
     */
    public Integer cpusEnabled() {
        return this.cpusEnabled;
    }
    public Boolean createAsync() {
        return this.createAsync;
    }
    /**
     * @return The CSI Number of the Exadata infrastructure.
     * 
     */
    public String csiNumber() {
        return this.csiNumber;
    }
    /**
     * @return Size, in terabytes, of the DATA disk group.
     * 
     */
    public Double dataStorageSizeInTbs() {
        return this.dataStorageSizeInTbs;
    }
    /**
     * @return The local node storage allocated in GBs.
     * 
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }
    /**
     * @return The software version of the database servers (dom0) in the Exadata infrastructure.
     * 
     */
    public String dbServerVersion() {
        return this.dbServerVersion;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The user-friendly name for the Exadata Cloud@Customer infrastructure. The name does not need to be unique.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The list of DNS server IP addresses. Maximum of 3 allowed.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    public String exadataInfrastructureId() {
        return this.exadataInfrastructureId;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The gateway for the control plane network.
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The CIDR block for the Exadata InfiniBand interconnect.
     * 
     */
    public String infiniBandNetworkCidr() {
        return this.infiniBandNetworkCidr;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
     * 
     */
    public String maintenanceSloStatus() {
        return this.maintenanceSloStatus;
    }
    /**
     * @return The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    public List<GetExadataInfrastructureMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return The total number of CPU cores available.
     * 
     */
    public Integer maxCpuCount() {
        return this.maxCpuCount;
    }
    /**
     * @return The total available DATA disk group size.
     * 
     */
    public Double maxDataStorageInTbs() {
        return this.maxDataStorageInTbs;
    }
    /**
     * @return The total local node storage available in GBs.
     * 
     */
    public Integer maxDbNodeStorageInGbs() {
        return this.maxDbNodeStorageInGbs;
    }
    /**
     * @return The total memory available in GBs.
     * 
     */
    public Integer maxMemoryInGbs() {
        return this.maxMemoryInGbs;
    }
    /**
     * @return The memory allocated in GBs.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The netmask for the control plane network.
     * 
     */
    public String netmask() {
        return this.netmask;
    }
    /**
     * @return The list of NTP server IP addresses. Maximum of 3 allowed.
     * 
     */
    public List<String> ntpServers() {
        return this.ntpServers;
    }
    /**
     * @return The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The current lifecycle state of the Exadata infrastructure.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The number of Exadata storage servers for the Exadata infrastructure.
     * 
     */
    public Integer storageCount() {
        return this.storageCount;
    }
    /**
     * @return The software version of the storage servers (cells) in the Exadata infrastructure.
     * 
     */
    public String storageServerVersion() {
        return this.storageServerVersion;
    }
    /**
     * @return The date and time the Exadata infrastructure was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExadataInfrastructureResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer activatedStorageCount;
        private String activationFile;
        private Integer additionalStorageCount;
        private String adminNetworkCidr;
        private String cloudControlPlaneServer1;
        private String cloudControlPlaneServer2;
        private String compartmentId;
        private Integer computeCount;
        private List<GetExadataInfrastructureContact> contacts;
        private String corporateProxy;
        private Integer cpusEnabled;
        private Boolean createAsync;
        private String csiNumber;
        private Double dataStorageSizeInTbs;
        private Integer dbNodeStorageSizeInGbs;
        private String dbServerVersion;
        private Map<String,Object> definedTags;
        private String displayName;
        private List<String> dnsServers;
        private String exadataInfrastructureId;
        private Map<String,Object> freeformTags;
        private String gateway;
        private String id;
        private String infiniBandNetworkCidr;
        private String lifecycleDetails;
        private String maintenanceSloStatus;
        private List<GetExadataInfrastructureMaintenanceWindow> maintenanceWindows;
        private Integer maxCpuCount;
        private Double maxDataStorageInTbs;
        private Integer maxDbNodeStorageInGbs;
        private Integer maxMemoryInGbs;
        private Integer memorySizeInGbs;
        private String netmask;
        private List<String> ntpServers;
        private String shape;
        private String state;
        private Integer storageCount;
        private String storageServerVersion;
        private String timeCreated;
        private String timeZone;

        public Builder() {
    	      // Empty
        }

        public Builder(GetExadataInfrastructureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activatedStorageCount = defaults.activatedStorageCount;
    	      this.activationFile = defaults.activationFile;
    	      this.additionalStorageCount = defaults.additionalStorageCount;
    	      this.adminNetworkCidr = defaults.adminNetworkCidr;
    	      this.cloudControlPlaneServer1 = defaults.cloudControlPlaneServer1;
    	      this.cloudControlPlaneServer2 = defaults.cloudControlPlaneServer2;
    	      this.compartmentId = defaults.compartmentId;
    	      this.computeCount = defaults.computeCount;
    	      this.contacts = defaults.contacts;
    	      this.corporateProxy = defaults.corporateProxy;
    	      this.cpusEnabled = defaults.cpusEnabled;
    	      this.createAsync = defaults.createAsync;
    	      this.csiNumber = defaults.csiNumber;
    	      this.dataStorageSizeInTbs = defaults.dataStorageSizeInTbs;
    	      this.dbNodeStorageSizeInGbs = defaults.dbNodeStorageSizeInGbs;
    	      this.dbServerVersion = defaults.dbServerVersion;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.dnsServers = defaults.dnsServers;
    	      this.exadataInfrastructureId = defaults.exadataInfrastructureId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.gateway = defaults.gateway;
    	      this.id = defaults.id;
    	      this.infiniBandNetworkCidr = defaults.infiniBandNetworkCidr;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maintenanceSloStatus = defaults.maintenanceSloStatus;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.maxCpuCount = defaults.maxCpuCount;
    	      this.maxDataStorageInTbs = defaults.maxDataStorageInTbs;
    	      this.maxDbNodeStorageInGbs = defaults.maxDbNodeStorageInGbs;
    	      this.maxMemoryInGbs = defaults.maxMemoryInGbs;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.netmask = defaults.netmask;
    	      this.ntpServers = defaults.ntpServers;
    	      this.shape = defaults.shape;
    	      this.state = defaults.state;
    	      this.storageCount = defaults.storageCount;
    	      this.storageServerVersion = defaults.storageServerVersion;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeZone = defaults.timeZone;
        }

        public Builder activatedStorageCount(Integer activatedStorageCount) {
            this.activatedStorageCount = Objects.requireNonNull(activatedStorageCount);
            return this;
        }
        public Builder activationFile(String activationFile) {
            this.activationFile = Objects.requireNonNull(activationFile);
            return this;
        }
        public Builder additionalStorageCount(Integer additionalStorageCount) {
            this.additionalStorageCount = Objects.requireNonNull(additionalStorageCount);
            return this;
        }
        public Builder adminNetworkCidr(String adminNetworkCidr) {
            this.adminNetworkCidr = Objects.requireNonNull(adminNetworkCidr);
            return this;
        }
        public Builder cloudControlPlaneServer1(String cloudControlPlaneServer1) {
            this.cloudControlPlaneServer1 = Objects.requireNonNull(cloudControlPlaneServer1);
            return this;
        }
        public Builder cloudControlPlaneServer2(String cloudControlPlaneServer2) {
            this.cloudControlPlaneServer2 = Objects.requireNonNull(cloudControlPlaneServer2);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder computeCount(Integer computeCount) {
            this.computeCount = Objects.requireNonNull(computeCount);
            return this;
        }
        public Builder contacts(List<GetExadataInfrastructureContact> contacts) {
            this.contacts = Objects.requireNonNull(contacts);
            return this;
        }
        public Builder contacts(GetExadataInfrastructureContact... contacts) {
            return contacts(List.of(contacts));
        }
        public Builder corporateProxy(String corporateProxy) {
            this.corporateProxy = Objects.requireNonNull(corporateProxy);
            return this;
        }
        public Builder cpusEnabled(Integer cpusEnabled) {
            this.cpusEnabled = Objects.requireNonNull(cpusEnabled);
            return this;
        }
        public Builder createAsync(Boolean createAsync) {
            this.createAsync = Objects.requireNonNull(createAsync);
            return this;
        }
        public Builder csiNumber(String csiNumber) {
            this.csiNumber = Objects.requireNonNull(csiNumber);
            return this;
        }
        public Builder dataStorageSizeInTbs(Double dataStorageSizeInTbs) {
            this.dataStorageSizeInTbs = Objects.requireNonNull(dataStorageSizeInTbs);
            return this;
        }
        public Builder dbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
            this.dbNodeStorageSizeInGbs = Objects.requireNonNull(dbNodeStorageSizeInGbs);
            return this;
        }
        public Builder dbServerVersion(String dbServerVersion) {
            this.dbServerVersion = Objects.requireNonNull(dbServerVersion);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder dnsServers(List<String> dnsServers) {
            this.dnsServers = Objects.requireNonNull(dnsServers);
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        public Builder exadataInfrastructureId(String exadataInfrastructureId) {
            this.exadataInfrastructureId = Objects.requireNonNull(exadataInfrastructureId);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder gateway(String gateway) {
            this.gateway = Objects.requireNonNull(gateway);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder infiniBandNetworkCidr(String infiniBandNetworkCidr) {
            this.infiniBandNetworkCidr = Objects.requireNonNull(infiniBandNetworkCidr);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder maintenanceSloStatus(String maintenanceSloStatus) {
            this.maintenanceSloStatus = Objects.requireNonNull(maintenanceSloStatus);
            return this;
        }
        public Builder maintenanceWindows(List<GetExadataInfrastructureMaintenanceWindow> maintenanceWindows) {
            this.maintenanceWindows = Objects.requireNonNull(maintenanceWindows);
            return this;
        }
        public Builder maintenanceWindows(GetExadataInfrastructureMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        public Builder maxCpuCount(Integer maxCpuCount) {
            this.maxCpuCount = Objects.requireNonNull(maxCpuCount);
            return this;
        }
        public Builder maxDataStorageInTbs(Double maxDataStorageInTbs) {
            this.maxDataStorageInTbs = Objects.requireNonNull(maxDataStorageInTbs);
            return this;
        }
        public Builder maxDbNodeStorageInGbs(Integer maxDbNodeStorageInGbs) {
            this.maxDbNodeStorageInGbs = Objects.requireNonNull(maxDbNodeStorageInGbs);
            return this;
        }
        public Builder maxMemoryInGbs(Integer maxMemoryInGbs) {
            this.maxMemoryInGbs = Objects.requireNonNull(maxMemoryInGbs);
            return this;
        }
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            this.memorySizeInGbs = Objects.requireNonNull(memorySizeInGbs);
            return this;
        }
        public Builder netmask(String netmask) {
            this.netmask = Objects.requireNonNull(netmask);
            return this;
        }
        public Builder ntpServers(List<String> ntpServers) {
            this.ntpServers = Objects.requireNonNull(ntpServers);
            return this;
        }
        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }
        public Builder shape(String shape) {
            this.shape = Objects.requireNonNull(shape);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder storageCount(Integer storageCount) {
            this.storageCount = Objects.requireNonNull(storageCount);
            return this;
        }
        public Builder storageServerVersion(String storageServerVersion) {
            this.storageServerVersion = Objects.requireNonNull(storageServerVersion);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeZone(String timeZone) {
            this.timeZone = Objects.requireNonNull(timeZone);
            return this;
        }        public GetExadataInfrastructureResult build() {
            return new GetExadataInfrastructureResult(activatedStorageCount, activationFile, additionalStorageCount, adminNetworkCidr, cloudControlPlaneServer1, cloudControlPlaneServer2, compartmentId, computeCount, contacts, corporateProxy, cpusEnabled, createAsync, csiNumber, dataStorageSizeInTbs, dbNodeStorageSizeInGbs, dbServerVersion, definedTags, displayName, dnsServers, exadataInfrastructureId, freeformTags, gateway, id, infiniBandNetworkCidr, lifecycleDetails, maintenanceSloStatus, maintenanceWindows, maxCpuCount, maxDataStorageInTbs, maxDbNodeStorageInGbs, maxMemoryInGbs, memorySizeInGbs, netmask, ntpServers, shape, state, storageCount, storageServerVersion, timeCreated, timeZone);
        }
    }
}
