// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetRepositoryRefArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryRefArgs Empty = new GetRepositoryRefArgs();

    /**
     * A filter to return only resources that match the given reference name.
     * 
     */
    @Import(name="refName", required=true)
    private Output<String> refName;

    /**
     * @return A filter to return only resources that match the given reference name.
     * 
     */
    public Output<String> refName() {
        return this.refName;
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    private GetRepositoryRefArgs() {}

    private GetRepositoryRefArgs(GetRepositoryRefArgs $) {
        this.refName = $.refName;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryRefArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryRefArgs $;

        public Builder() {
            $ = new GetRepositoryRefArgs();
        }

        public Builder(GetRepositoryRefArgs defaults) {
            $ = new GetRepositoryRefArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param refName A filter to return only resources that match the given reference name.
         * 
         * @return builder
         * 
         */
        public Builder refName(Output<String> refName) {
            $.refName = refName;
            return this;
        }

        /**
         * @param refName A filter to return only resources that match the given reference name.
         * 
         * @return builder
         * 
         */
        public Builder refName(String refName) {
            return refName(Output.of(refName));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public GetRepositoryRefArgs build() {
            $.refName = Objects.requireNonNull($.refName, "expected parameter 'refName' to be non-null");
            $.repositoryId = Objects.requireNonNull($.repositoryId, "expected parameter 'repositoryId' to be non-null");
            return $;
        }
    }

}
