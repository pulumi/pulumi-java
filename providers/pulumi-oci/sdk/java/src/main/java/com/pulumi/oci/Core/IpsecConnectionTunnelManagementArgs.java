// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementBgpSessionInfoArgs;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementEncryptionDomainConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpsecConnectionTunnelManagementArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpsecConnectionTunnelManagementArgs Empty = new IpsecConnectionTunnelManagementArgs();

    /**
     * Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
     * 
     */
    @Import(name="bgpSessionInfos")
    private @Nullable Output<List<IpsecConnectionTunnelManagementBgpSessionInfoArgs>> bgpSessionInfos;

    /**
     * @return Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
     * 
     */
    public Optional<Output<List<IpsecConnectionTunnelManagementBgpSessionInfoArgs>>> bgpSessionInfos() {
        return Optional.ofNullable(this.bgpSessionInfos);
    }

    /**
     * A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
     * 
     */
    @Import(name="encryptionDomainConfig")
    private @Nullable Output<IpsecConnectionTunnelManagementEncryptionDomainConfigArgs> encryptionDomainConfig;

    /**
     * @return Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
     * 
     */
    public Optional<Output<IpsecConnectionTunnelManagementEncryptionDomainConfigArgs>> encryptionDomainConfig() {
        return Optional.ofNullable(this.encryptionDomainConfig);
    }

    /**
     * Internet Key Exchange protocol version.
     * 
     */
    @Import(name="ikeVersion")
    private @Nullable Output<String> ikeVersion;

    /**
     * @return Internet Key Exchange protocol version.
     * 
     */
    public Optional<Output<String>> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }

    /**
     * The OCID of the IPSec connection.
     * 
     */
    @Import(name="ipsecId", required=true)
    private Output<String> ipsecId;

    /**
     * @return The OCID of the IPSec connection.
     * 
     */
    public Output<String> ipsecId() {
        return this.ipsecId;
    }

    /**
     * The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
     * 
     */
    @Import(name="routing", required=true)
    private Output<String> routing;

    /**
     * @return The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
     * 
     */
    public Output<String> routing() {
        return this.routing;
    }

    /**
     * The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
     * 
     */
    @Import(name="sharedSecret")
    private @Nullable Output<String> sharedSecret;

    /**
     * @return The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
     * 
     */
    public Optional<Output<String>> sharedSecret() {
        return Optional.ofNullable(this.sharedSecret);
    }

    /**
     * The OCID of the IPSec connection&#39;s tunnel.
     * 
     */
    @Import(name="tunnelId", required=true)
    private Output<String> tunnelId;

    /**
     * @return The OCID of the IPSec connection&#39;s tunnel.
     * 
     */
    public Output<String> tunnelId() {
        return this.tunnelId;
    }

    private IpsecConnectionTunnelManagementArgs() {}

    private IpsecConnectionTunnelManagementArgs(IpsecConnectionTunnelManagementArgs $) {
        this.bgpSessionInfos = $.bgpSessionInfos;
        this.displayName = $.displayName;
        this.encryptionDomainConfig = $.encryptionDomainConfig;
        this.ikeVersion = $.ikeVersion;
        this.ipsecId = $.ipsecId;
        this.routing = $.routing;
        this.sharedSecret = $.sharedSecret;
        this.tunnelId = $.tunnelId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpsecConnectionTunnelManagementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpsecConnectionTunnelManagementArgs $;

        public Builder() {
            $ = new IpsecConnectionTunnelManagementArgs();
        }

        public Builder(IpsecConnectionTunnelManagementArgs defaults) {
            $ = new IpsecConnectionTunnelManagementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bgpSessionInfos Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
         * 
         * @return builder
         * 
         */
        public Builder bgpSessionInfos(@Nullable Output<List<IpsecConnectionTunnelManagementBgpSessionInfoArgs>> bgpSessionInfos) {
            $.bgpSessionInfos = bgpSessionInfos;
            return this;
        }

        /**
         * @param bgpSessionInfos Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
         * 
         * @return builder
         * 
         */
        public Builder bgpSessionInfos(List<IpsecConnectionTunnelManagementBgpSessionInfoArgs> bgpSessionInfos) {
            return bgpSessionInfos(Output.of(bgpSessionInfos));
        }

        /**
         * @param bgpSessionInfos Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
         * 
         * @return builder
         * 
         */
        public Builder bgpSessionInfos(IpsecConnectionTunnelManagementBgpSessionInfoArgs... bgpSessionInfos) {
            return bgpSessionInfos(List.of(bgpSessionInfos));
        }

        /**
         * @param displayName A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param encryptionDomainConfig Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
         * 
         * @return builder
         * 
         */
        public Builder encryptionDomainConfig(@Nullable Output<IpsecConnectionTunnelManagementEncryptionDomainConfigArgs> encryptionDomainConfig) {
            $.encryptionDomainConfig = encryptionDomainConfig;
            return this;
        }

        /**
         * @param encryptionDomainConfig Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
         * 
         * @return builder
         * 
         */
        public Builder encryptionDomainConfig(IpsecConnectionTunnelManagementEncryptionDomainConfigArgs encryptionDomainConfig) {
            return encryptionDomainConfig(Output.of(encryptionDomainConfig));
        }

        /**
         * @param ikeVersion Internet Key Exchange protocol version.
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(@Nullable Output<String> ikeVersion) {
            $.ikeVersion = ikeVersion;
            return this;
        }

        /**
         * @param ikeVersion Internet Key Exchange protocol version.
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(String ikeVersion) {
            return ikeVersion(Output.of(ikeVersion));
        }

        /**
         * @param ipsecId The OCID of the IPSec connection.
         * 
         * @return builder
         * 
         */
        public Builder ipsecId(Output<String> ipsecId) {
            $.ipsecId = ipsecId;
            return this;
        }

        /**
         * @param ipsecId The OCID of the IPSec connection.
         * 
         * @return builder
         * 
         */
        public Builder ipsecId(String ipsecId) {
            return ipsecId(Output.of(ipsecId));
        }

        /**
         * @param routing The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
         * 
         * @return builder
         * 
         */
        public Builder routing(Output<String> routing) {
            $.routing = routing;
            return this;
        }

        /**
         * @param routing The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
         * 
         * @return builder
         * 
         */
        public Builder routing(String routing) {
            return routing(Output.of(routing));
        }

        /**
         * @param sharedSecret The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
         * 
         * @return builder
         * 
         */
        public Builder sharedSecret(@Nullable Output<String> sharedSecret) {
            $.sharedSecret = sharedSecret;
            return this;
        }

        /**
         * @param sharedSecret The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
         * 
         * @return builder
         * 
         */
        public Builder sharedSecret(String sharedSecret) {
            return sharedSecret(Output.of(sharedSecret));
        }

        /**
         * @param tunnelId The OCID of the IPSec connection&#39;s tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(Output<String> tunnelId) {
            $.tunnelId = tunnelId;
            return this;
        }

        /**
         * @param tunnelId The OCID of the IPSec connection&#39;s tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(String tunnelId) {
            return tunnelId(Output.of(tunnelId));
        }

        public IpsecConnectionTunnelManagementArgs build() {
            $.ipsecId = Objects.requireNonNull($.ipsecId, "expected parameter 'ipsecId' to be non-null");
            $.routing = Objects.requireNonNull($.routing, "expected parameter 'routing' to be non-null");
            $.tunnelId = Objects.requireNonNull($.tunnelId, "expected parameter 'tunnelId' to be non-null");
            return $;
        }
    }

}
