// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Kms.inputs.GeneratedKeyKeyShapeArgs;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GeneratedKeyState extends com.pulumi.resources.ResourceArgs {

    public static final GeneratedKeyState Empty = new GeneratedKeyState();

    /**
     * Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     * 
     */
    @Import(name="associatedData")
    private @Nullable Output<Map<String,Object>> associatedData;

    /**
     * @return Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     * 
     */
    public Optional<Output<Map<String,Object>>> associatedData() {
        return Optional.ofNullable(this.associatedData);
    }

    /**
     * The encrypted data encryption key generated from a master encryption key.
     * 
     */
    @Import(name="ciphertext")
    private @Nullable Output<String> ciphertext;

    /**
     * @return The encrypted data encryption key generated from a master encryption key.
     * 
     */
    public Optional<Output<String>> ciphertext() {
        return Optional.ofNullable(this.ciphertext);
    }

    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    @Import(name="cryptoEndpoint")
    private @Nullable Output<String> cryptoEndpoint;

    /**
     * @return The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
     * 
     */
    public Optional<Output<String>> cryptoEndpoint() {
        return Optional.ofNullable(this.cryptoEndpoint);
    }

    /**
     * If true, the generated key is also returned unencrypted.
     * 
     */
    @Import(name="includePlaintextKey")
    private @Nullable Output<Boolean> includePlaintextKey;

    /**
     * @return If true, the generated key is also returned unencrypted.
     * 
     */
    public Optional<Output<Boolean>> includePlaintextKey() {
        return Optional.ofNullable(this.includePlaintextKey);
    }

    /**
     * The OCID of the master encryption key to encrypt the generated data encryption key with.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return The OCID of the master encryption key to encrypt the generated data encryption key with.
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * The cryptographic properties of a key.
     * 
     */
    @Import(name="keyShape")
    private @Nullable Output<GeneratedKeyKeyShapeArgs> keyShape;

    /**
     * @return The cryptographic properties of a key.
     * 
     */
    public Optional<Output<GeneratedKeyKeyShapeArgs>> keyShape() {
        return Optional.ofNullable(this.keyShape);
    }

    /**
     * Information that provides context for audit logging. You can provide this additional data by formatting it as key-value pairs to include in audit logs when audit logging is enabled.
     * 
     */
    @Import(name="loggingContext")
    private @Nullable Output<Map<String,Object>> loggingContext;

    /**
     * @return Information that provides context for audit logging. You can provide this additional data by formatting it as key-value pairs to include in audit logs when audit logging is enabled.
     * 
     */
    public Optional<Output<Map<String,Object>>> loggingContext() {
        return Optional.ofNullable(this.loggingContext);
    }

    /**
     * The plaintext data encryption key, a base64-encoded sequence of random bytes, which is included if the [GenerateDataEncryptionKey](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/GeneratedKey/GenerateDataEncryptionKey) request includes the `includePlaintextKey` parameter and sets its value to &#34;true&#34;.
     * 
     */
    @Import(name="plaintext")
    private @Nullable Output<String> plaintext;

    /**
     * @return The plaintext data encryption key, a base64-encoded sequence of random bytes, which is included if the [GenerateDataEncryptionKey](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/GeneratedKey/GenerateDataEncryptionKey) request includes the `includePlaintextKey` parameter and sets its value to &#34;true&#34;.
     * 
     */
    public Optional<Output<String>> plaintext() {
        return Optional.ofNullable(this.plaintext);
    }

    /**
     * The checksum of the plaintext data encryption key, which is included if the [GenerateDataEncryptionKey](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/GeneratedKey/GenerateDataEncryptionKey) request includes the `includePlaintextKey` parameter and sets its value to &#34;true&#34;.
     * 
     */
    @Import(name="plaintextChecksum")
    private @Nullable Output<String> plaintextChecksum;

    /**
     * @return The checksum of the plaintext data encryption key, which is included if the [GenerateDataEncryptionKey](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/GeneratedKey/GenerateDataEncryptionKey) request includes the `includePlaintextKey` parameter and sets its value to &#34;true&#34;.
     * 
     */
    public Optional<Output<String>> plaintextChecksum() {
        return Optional.ofNullable(this.plaintextChecksum);
    }

    private GeneratedKeyState() {}

    private GeneratedKeyState(GeneratedKeyState $) {
        this.associatedData = $.associatedData;
        this.ciphertext = $.ciphertext;
        this.cryptoEndpoint = $.cryptoEndpoint;
        this.includePlaintextKey = $.includePlaintextKey;
        this.keyId = $.keyId;
        this.keyShape = $.keyShape;
        this.loggingContext = $.loggingContext;
        this.plaintext = $.plaintext;
        this.plaintextChecksum = $.plaintextChecksum;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GeneratedKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GeneratedKeyState $;

        public Builder() {
            $ = new GeneratedKeyState();
        }

        public Builder(GeneratedKeyState defaults) {
            $ = new GeneratedKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedData Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
         * 
         * @return builder
         * 
         */
        public Builder associatedData(@Nullable Output<Map<String,Object>> associatedData) {
            $.associatedData = associatedData;
            return this;
        }

        /**
         * @param associatedData Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
         * 
         * @return builder
         * 
         */
        public Builder associatedData(Map<String,Object> associatedData) {
            return associatedData(Output.of(associatedData));
        }

        /**
         * @param ciphertext The encrypted data encryption key generated from a master encryption key.
         * 
         * @return builder
         * 
         */
        public Builder ciphertext(@Nullable Output<String> ciphertext) {
            $.ciphertext = ciphertext;
            return this;
        }

        /**
         * @param ciphertext The encrypted data encryption key generated from a master encryption key.
         * 
         * @return builder
         * 
         */
        public Builder ciphertext(String ciphertext) {
            return ciphertext(Output.of(ciphertext));
        }

        /**
         * @param cryptoEndpoint The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cryptoEndpoint(@Nullable Output<String> cryptoEndpoint) {
            $.cryptoEndpoint = cryptoEndpoint;
            return this;
        }

        /**
         * @param cryptoEndpoint The service endpoint to perform cryptographic operations against. Cryptographic operations include &#39;Encrypt,&#39; &#39;Decrypt,&#39; and &#39;GenerateDataEncryptionKey&#39; operations. see Vault Crypto endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cryptoEndpoint(String cryptoEndpoint) {
            return cryptoEndpoint(Output.of(cryptoEndpoint));
        }

        /**
         * @param includePlaintextKey If true, the generated key is also returned unencrypted.
         * 
         * @return builder
         * 
         */
        public Builder includePlaintextKey(@Nullable Output<Boolean> includePlaintextKey) {
            $.includePlaintextKey = includePlaintextKey;
            return this;
        }

        /**
         * @param includePlaintextKey If true, the generated key is also returned unencrypted.
         * 
         * @return builder
         * 
         */
        public Builder includePlaintextKey(Boolean includePlaintextKey) {
            return includePlaintextKey(Output.of(includePlaintextKey));
        }

        /**
         * @param keyId The OCID of the master encryption key to encrypt the generated data encryption key with.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The OCID of the master encryption key to encrypt the generated data encryption key with.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param keyShape The cryptographic properties of a key.
         * 
         * @return builder
         * 
         */
        public Builder keyShape(@Nullable Output<GeneratedKeyKeyShapeArgs> keyShape) {
            $.keyShape = keyShape;
            return this;
        }

        /**
         * @param keyShape The cryptographic properties of a key.
         * 
         * @return builder
         * 
         */
        public Builder keyShape(GeneratedKeyKeyShapeArgs keyShape) {
            return keyShape(Output.of(keyShape));
        }

        /**
         * @param loggingContext Information that provides context for audit logging. You can provide this additional data by formatting it as key-value pairs to include in audit logs when audit logging is enabled.
         * 
         * @return builder
         * 
         */
        public Builder loggingContext(@Nullable Output<Map<String,Object>> loggingContext) {
            $.loggingContext = loggingContext;
            return this;
        }

        /**
         * @param loggingContext Information that provides context for audit logging. You can provide this additional data by formatting it as key-value pairs to include in audit logs when audit logging is enabled.
         * 
         * @return builder
         * 
         */
        public Builder loggingContext(Map<String,Object> loggingContext) {
            return loggingContext(Output.of(loggingContext));
        }

        /**
         * @param plaintext The plaintext data encryption key, a base64-encoded sequence of random bytes, which is included if the [GenerateDataEncryptionKey](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/GeneratedKey/GenerateDataEncryptionKey) request includes the `includePlaintextKey` parameter and sets its value to &#34;true&#34;.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(@Nullable Output<String> plaintext) {
            $.plaintext = plaintext;
            return this;
        }

        /**
         * @param plaintext The plaintext data encryption key, a base64-encoded sequence of random bytes, which is included if the [GenerateDataEncryptionKey](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/GeneratedKey/GenerateDataEncryptionKey) request includes the `includePlaintextKey` parameter and sets its value to &#34;true&#34;.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(String plaintext) {
            return plaintext(Output.of(plaintext));
        }

        /**
         * @param plaintextChecksum The checksum of the plaintext data encryption key, which is included if the [GenerateDataEncryptionKey](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/GeneratedKey/GenerateDataEncryptionKey) request includes the `includePlaintextKey` parameter and sets its value to &#34;true&#34;.
         * 
         * @return builder
         * 
         */
        public Builder plaintextChecksum(@Nullable Output<String> plaintextChecksum) {
            $.plaintextChecksum = plaintextChecksum;
            return this;
        }

        /**
         * @param plaintextChecksum The checksum of the plaintext data encryption key, which is included if the [GenerateDataEncryptionKey](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/GeneratedKey/GenerateDataEncryptionKey) request includes the `includePlaintextKey` parameter and sets its value to &#34;true&#34;.
         * 
         * @return builder
         * 
         */
        public Builder plaintextChecksum(String plaintextChecksum) {
            return plaintextChecksum(Output.of(plaintextChecksum));
        }

        public GeneratedKeyState build() {
            return $;
        }
    }

}
