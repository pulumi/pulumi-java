// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class DeployStageBlueGreenStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeployStageBlueGreenStrategyArgs Empty = new DeployStageBlueGreenStrategyArgs();

    /**
     * Name of the Ingress resource.
     * 
     */
    @Import(name="ingressName", required=true)
    private Output<String> ingressName;

    /**
     * @return Name of the Ingress resource.
     * 
     */
    public Output<String> ingressName() {
        return this.ingressName;
    }

    /**
     * First Namespace for deployment.
     * 
     */
    @Import(name="namespaceA", required=true)
    private Output<String> namespaceA;

    /**
     * @return First Namespace for deployment.
     * 
     */
    public Output<String> namespaceA() {
        return this.namespaceA;
    }

    /**
     * Second Namespace for deployment.
     * 
     */
    @Import(name="namespaceB", required=true)
    private Output<String> namespaceB;

    /**
     * @return Second Namespace for deployment.
     * 
     */
    public Output<String> namespaceB() {
        return this.namespaceB;
    }

    /**
     * Canary strategy type
     * 
     */
    @Import(name="strategyType", required=true)
    private Output<String> strategyType;

    /**
     * @return Canary strategy type
     * 
     */
    public Output<String> strategyType() {
        return this.strategyType;
    }

    private DeployStageBlueGreenStrategyArgs() {}

    private DeployStageBlueGreenStrategyArgs(DeployStageBlueGreenStrategyArgs $) {
        this.ingressName = $.ingressName;
        this.namespaceA = $.namespaceA;
        this.namespaceB = $.namespaceB;
        this.strategyType = $.strategyType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeployStageBlueGreenStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeployStageBlueGreenStrategyArgs $;

        public Builder() {
            $ = new DeployStageBlueGreenStrategyArgs();
        }

        public Builder(DeployStageBlueGreenStrategyArgs defaults) {
            $ = new DeployStageBlueGreenStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ingressName Name of the Ingress resource.
         * 
         * @return builder
         * 
         */
        public Builder ingressName(Output<String> ingressName) {
            $.ingressName = ingressName;
            return this;
        }

        /**
         * @param ingressName Name of the Ingress resource.
         * 
         * @return builder
         * 
         */
        public Builder ingressName(String ingressName) {
            return ingressName(Output.of(ingressName));
        }

        /**
         * @param namespaceA First Namespace for deployment.
         * 
         * @return builder
         * 
         */
        public Builder namespaceA(Output<String> namespaceA) {
            $.namespaceA = namespaceA;
            return this;
        }

        /**
         * @param namespaceA First Namespace for deployment.
         * 
         * @return builder
         * 
         */
        public Builder namespaceA(String namespaceA) {
            return namespaceA(Output.of(namespaceA));
        }

        /**
         * @param namespaceB Second Namespace for deployment.
         * 
         * @return builder
         * 
         */
        public Builder namespaceB(Output<String> namespaceB) {
            $.namespaceB = namespaceB;
            return this;
        }

        /**
         * @param namespaceB Second Namespace for deployment.
         * 
         * @return builder
         * 
         */
        public Builder namespaceB(String namespaceB) {
            return namespaceB(Output.of(namespaceB));
        }

        /**
         * @param strategyType Canary strategy type
         * 
         * @return builder
         * 
         */
        public Builder strategyType(Output<String> strategyType) {
            $.strategyType = strategyType;
            return this;
        }

        /**
         * @param strategyType Canary strategy type
         * 
         * @return builder
         * 
         */
        public Builder strategyType(String strategyType) {
            return strategyType(Output.of(strategyType));
        }

        public DeployStageBlueGreenStrategyArgs build() {
            $.ingressName = Objects.requireNonNull($.ingressName, "expected parameter 'ingressName' to be non-null");
            $.namespaceA = Objects.requireNonNull($.namespaceA, "expected parameter 'namespaceA' to be non-null");
            $.namespaceB = Objects.requireNonNull($.namespaceB, "expected parameter 'namespaceB' to be non-null");
            $.strategyType = Objects.requireNonNull($.strategyType, "expected parameter 'strategyType' to be non-null");
            return $;
        }
    }

}
