// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class LogAnalyticsResourceCategoriesManagementArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogAnalyticsResourceCategoriesManagementArgs Empty = new LogAnalyticsResourceCategoriesManagementArgs();

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The list of categories to be assigned to the resource.
     * 
     */
    @Import(name="resourceCategories", required=true)
    private Output<List<String>> resourceCategories;

    /**
     * @return The list of categories to be assigned to the resource.
     * 
     */
    public Output<List<String>> resourceCategories() {
        return this.resourceCategories;
    }

    /**
     * The resource unique identifier for which catagories are managed.
     * 
     */
    @Import(name="resourceId", required=true)
    private Output<String> resourceId;

    /**
     * @return The resource unique identifier for which catagories are managed.
     * 
     */
    public Output<String> resourceId() {
        return this.resourceId;
    }

    /**
     * The resource type of the resource for which categories are managed.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return The resource type of the resource for which categories are managed.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    private LogAnalyticsResourceCategoriesManagementArgs() {}

    private LogAnalyticsResourceCategoriesManagementArgs(LogAnalyticsResourceCategoriesManagementArgs $) {
        this.namespace = $.namespace;
        this.resourceCategories = $.resourceCategories;
        this.resourceId = $.resourceId;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogAnalyticsResourceCategoriesManagementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogAnalyticsResourceCategoriesManagementArgs $;

        public Builder() {
            $ = new LogAnalyticsResourceCategoriesManagementArgs();
        }

        public Builder(LogAnalyticsResourceCategoriesManagementArgs defaults) {
            $ = new LogAnalyticsResourceCategoriesManagementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param resourceCategories The list of categories to be assigned to the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceCategories(Output<List<String>> resourceCategories) {
            $.resourceCategories = resourceCategories;
            return this;
        }

        /**
         * @param resourceCategories The list of categories to be assigned to the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceCategories(List<String> resourceCategories) {
            return resourceCategories(Output.of(resourceCategories));
        }

        /**
         * @param resourceCategories The list of categories to be assigned to the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceCategories(String... resourceCategories) {
            return resourceCategories(List.of(resourceCategories));
        }

        /**
         * @param resourceId The resource unique identifier for which catagories are managed.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The resource unique identifier for which catagories are managed.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceType The resource type of the resource for which categories are managed.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The resource type of the resource for which categories are managed.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public LogAnalyticsResourceCategoriesManagementArgs build() {
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            $.resourceCategories = Objects.requireNonNull($.resourceCategories, "expected parameter 'resourceCategories' to be non-null");
            $.resourceId = Objects.requireNonNull($.resourceId, "expected parameter 'resourceId' to be non-null");
            $.resourceType = Objects.requireNonNull($.resourceType, "expected parameter 'resourceType' to be non-null");
            return $;
        }
    }

}
