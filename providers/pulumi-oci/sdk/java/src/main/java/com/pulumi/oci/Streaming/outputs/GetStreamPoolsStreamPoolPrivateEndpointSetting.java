// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Streaming.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStreamPoolsStreamPoolPrivateEndpointSetting {
    /**
     * @return The optional list of network security groups that are associated with the private endpoint of the stream pool.
     * 
     */
    private final List<String> nsgIds;
    /**
     * @return The private IP associated with the stream pool in the associated subnetId. The stream pool&#39;s FQDN resolves to that IP and should be used - instead of the private IP - in order to not trigger any TLS issues.
     * 
     */
    private final String privateEndpointIp;
    /**
     * @return The subnet id from which the private stream pool can be accessed. Trying to access the streams from another network location will result in an error.
     * 
     */
    private final String subnetId;

    @CustomType.Constructor
    private GetStreamPoolsStreamPoolPrivateEndpointSetting(
        @CustomType.Parameter("nsgIds") List<String> nsgIds,
        @CustomType.Parameter("privateEndpointIp") String privateEndpointIp,
        @CustomType.Parameter("subnetId") String subnetId) {
        this.nsgIds = nsgIds;
        this.privateEndpointIp = privateEndpointIp;
        this.subnetId = subnetId;
    }

    /**
     * @return The optional list of network security groups that are associated with the private endpoint of the stream pool.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    /**
     * @return The private IP associated with the stream pool in the associated subnetId. The stream pool&#39;s FQDN resolves to that IP and should be used - instead of the private IP - in order to not trigger any TLS issues.
     * 
     */
    public String privateEndpointIp() {
        return this.privateEndpointIp;
    }
    /**
     * @return The subnet id from which the private stream pool can be accessed. Trying to access the streams from another network location will result in an error.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamPoolsStreamPoolPrivateEndpointSetting defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> nsgIds;
        private String privateEndpointIp;
        private String subnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetStreamPoolsStreamPoolPrivateEndpointSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nsgIds = defaults.nsgIds;
    	      this.privateEndpointIp = defaults.privateEndpointIp;
    	      this.subnetId = defaults.subnetId;
        }

        public Builder nsgIds(List<String> nsgIds) {
            this.nsgIds = Objects.requireNonNull(nsgIds);
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        public Builder privateEndpointIp(String privateEndpointIp) {
            this.privateEndpointIp = Objects.requireNonNull(privateEndpointIp);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }        public GetStreamPoolsStreamPoolPrivateEndpointSetting build() {
            return new GetStreamPoolsStreamPoolPrivateEndpointSetting(nsgIds, privateEndpointIp, subnetId);
        }
    }
}
