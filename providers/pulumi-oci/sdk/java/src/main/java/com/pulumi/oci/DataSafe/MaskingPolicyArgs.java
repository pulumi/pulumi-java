// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.MaskingPolicyColumnSourceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaskingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaskingPolicyArgs Empty = new MaskingPolicyArgs();

    /**
     * (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
     * 
     */
    @Import(name="addMaskingColumnsFromSdmTrigger")
    private @Nullable Output<Integer> addMaskingColumnsFromSdmTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
     * 
     */
    public Optional<Output<Integer>> addMaskingColumnsFromSdmTrigger() {
        return Optional.ofNullable(this.addMaskingColumnsFromSdmTrigger);
    }

    /**
     * (Updatable) The source of masking columns.
     * 
     */
    @Import(name="columnSources", required=true)
    private Output<List<MaskingPolicyColumnSourceArgs>> columnSources;

    /**
     * @return (Updatable) The source of masking columns.
     * 
     */
    public Output<List<MaskingPolicyColumnSourceArgs>> columnSources() {
        return this.columnSources;
    }

    /**
     * (Updatable) The OCID of the compartment where the masking policy should be created.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment where the masking policy should be created.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The description of the masking policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The description of the masking policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The display name of the masking policy. The name does not have to be unique, and it&#39;s changeable.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The display name of the masking policy. The name does not have to be unique, and it&#39;s changeable.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It&#39;s enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
     * 
     */
    @Import(name="isDropTempTablesEnabled")
    private @Nullable Output<Boolean> isDropTempTablesEnabled;

    /**
     * @return (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It&#39;s enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
     * 
     */
    public Optional<Output<Boolean>> isDropTempTablesEnabled() {
        return Optional.ofNullable(this.isDropTempTablesEnabled);
    }

    /**
     * (Updatable) Indicates if redo logging is enabled during a masking operation. It&#39;s disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
     * 
     */
    @Import(name="isRedoLoggingEnabled")
    private @Nullable Output<Boolean> isRedoLoggingEnabled;

    /**
     * @return (Updatable) Indicates if redo logging is enabled during a masking operation. It&#39;s disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
     * 
     */
    public Optional<Output<Boolean>> isRedoLoggingEnabled() {
        return Optional.ofNullable(this.isRedoLoggingEnabled);
    }

    /**
     * (Updatable) Indicates if statistics gathering is enabled. It&#39;s enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
     * 
     */
    @Import(name="isRefreshStatsEnabled")
    private @Nullable Output<Boolean> isRefreshStatsEnabled;

    /**
     * @return (Updatable) Indicates if statistics gathering is enabled. It&#39;s enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
     * 
     */
    public Optional<Output<Boolean>> isRefreshStatsEnabled() {
        return Optional.ofNullable(this.isRefreshStatsEnabled);
    }

    /**
     * (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are &#39;NONE&#39; (no parallelism), &#39;DEFAULT&#39; (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUsi and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
     * 
     */
    @Import(name="parallelDegree")
    private @Nullable Output<String> parallelDegree;

    /**
     * @return (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are &#39;NONE&#39; (no parallelism), &#39;DEFAULT&#39; (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUsi and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
     * 
     */
    public Optional<Output<String>> parallelDegree() {
        return Optional.ofNullable(this.parallelDegree);
    }

    /**
     * (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed after the core masking script generated using the masking policy. It&#39;s usually used to perform additional transformation or cleanup work after masking.
     * 
     */
    @Import(name="postMaskingScript")
    private @Nullable Output<String> postMaskingScript;

    /**
     * @return (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed after the core masking script generated using the masking policy. It&#39;s usually used to perform additional transformation or cleanup work after masking.
     * 
     */
    public Optional<Output<String>> postMaskingScript() {
        return Optional.ofNullable(this.postMaskingScript);
    }

    /**
     * (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed before  the core masking script generated using the masking policy. It&#39;s usually used to perform any preparation or prerequisite work before masking data.
     * 
     */
    @Import(name="preMaskingScript")
    private @Nullable Output<String> preMaskingScript;

    /**
     * @return (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed before  the core masking script generated using the masking policy. It&#39;s usually used to perform any preparation or prerequisite work before masking data.
     * 
     */
    public Optional<Output<String>> preMaskingScript() {
        return Optional.ofNullable(this.preMaskingScript);
    }

    /**
     * (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are &#39;SERIAL&#39; (recompile in serial),  &#39;PARALLEL&#39; (recompile in parallel), &#39;NONE&#39; (do not recompile). If it&#39;s set to PARALLEL, the value of parallelDegree attribute is used.
     * 
     */
    @Import(name="recompile")
    private @Nullable Output<String> recompile;

    /**
     * @return (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are &#39;SERIAL&#39; (recompile in serial),  &#39;PARALLEL&#39; (recompile in parallel), &#39;NONE&#39; (do not recompile). If it&#39;s set to PARALLEL, the value of parallelDegree attribute is used.
     * 
     */
    public Optional<Output<String>> recompile() {
        return Optional.ofNullable(this.recompile);
    }

    private MaskingPolicyArgs() {}

    private MaskingPolicyArgs(MaskingPolicyArgs $) {
        this.addMaskingColumnsFromSdmTrigger = $.addMaskingColumnsFromSdmTrigger;
        this.columnSources = $.columnSources;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.isDropTempTablesEnabled = $.isDropTempTablesEnabled;
        this.isRedoLoggingEnabled = $.isRedoLoggingEnabled;
        this.isRefreshStatsEnabled = $.isRefreshStatsEnabled;
        this.parallelDegree = $.parallelDegree;
        this.postMaskingScript = $.postMaskingScript;
        this.preMaskingScript = $.preMaskingScript;
        this.recompile = $.recompile;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaskingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaskingPolicyArgs $;

        public Builder() {
            $ = new MaskingPolicyArgs();
        }

        public Builder(MaskingPolicyArgs defaults) {
            $ = new MaskingPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addMaskingColumnsFromSdmTrigger (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
         * 
         * @return builder
         * 
         */
        public Builder addMaskingColumnsFromSdmTrigger(@Nullable Output<Integer> addMaskingColumnsFromSdmTrigger) {
            $.addMaskingColumnsFromSdmTrigger = addMaskingColumnsFromSdmTrigger;
            return this;
        }

        /**
         * @param addMaskingColumnsFromSdmTrigger (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
         * 
         * @return builder
         * 
         */
        public Builder addMaskingColumnsFromSdmTrigger(Integer addMaskingColumnsFromSdmTrigger) {
            return addMaskingColumnsFromSdmTrigger(Output.of(addMaskingColumnsFromSdmTrigger));
        }

        /**
         * @param columnSources (Updatable) The source of masking columns.
         * 
         * @return builder
         * 
         */
        public Builder columnSources(Output<List<MaskingPolicyColumnSourceArgs>> columnSources) {
            $.columnSources = columnSources;
            return this;
        }

        /**
         * @param columnSources (Updatable) The source of masking columns.
         * 
         * @return builder
         * 
         */
        public Builder columnSources(List<MaskingPolicyColumnSourceArgs> columnSources) {
            return columnSources(Output.of(columnSources));
        }

        /**
         * @param columnSources (Updatable) The source of masking columns.
         * 
         * @return builder
         * 
         */
        public Builder columnSources(MaskingPolicyColumnSourceArgs... columnSources) {
            return columnSources(List.of(columnSources));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where the masking policy should be created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where the masking policy should be created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) The description of the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The description of the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) The display name of the masking policy. The name does not have to be unique, and it&#39;s changeable.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The display name of the masking policy. The name does not have to be unique, and it&#39;s changeable.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isDropTempTablesEnabled (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It&#39;s enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
         * 
         * @return builder
         * 
         */
        public Builder isDropTempTablesEnabled(@Nullable Output<Boolean> isDropTempTablesEnabled) {
            $.isDropTempTablesEnabled = isDropTempTablesEnabled;
            return this;
        }

        /**
         * @param isDropTempTablesEnabled (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It&#39;s enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
         * 
         * @return builder
         * 
         */
        public Builder isDropTempTablesEnabled(Boolean isDropTempTablesEnabled) {
            return isDropTempTablesEnabled(Output.of(isDropTempTablesEnabled));
        }

        /**
         * @param isRedoLoggingEnabled (Updatable) Indicates if redo logging is enabled during a masking operation. It&#39;s disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
         * 
         * @return builder
         * 
         */
        public Builder isRedoLoggingEnabled(@Nullable Output<Boolean> isRedoLoggingEnabled) {
            $.isRedoLoggingEnabled = isRedoLoggingEnabled;
            return this;
        }

        /**
         * @param isRedoLoggingEnabled (Updatable) Indicates if redo logging is enabled during a masking operation. It&#39;s disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
         * 
         * @return builder
         * 
         */
        public Builder isRedoLoggingEnabled(Boolean isRedoLoggingEnabled) {
            return isRedoLoggingEnabled(Output.of(isRedoLoggingEnabled));
        }

        /**
         * @param isRefreshStatsEnabled (Updatable) Indicates if statistics gathering is enabled. It&#39;s enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
         * 
         * @return builder
         * 
         */
        public Builder isRefreshStatsEnabled(@Nullable Output<Boolean> isRefreshStatsEnabled) {
            $.isRefreshStatsEnabled = isRefreshStatsEnabled;
            return this;
        }

        /**
         * @param isRefreshStatsEnabled (Updatable) Indicates if statistics gathering is enabled. It&#39;s enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
         * 
         * @return builder
         * 
         */
        public Builder isRefreshStatsEnabled(Boolean isRefreshStatsEnabled) {
            return isRefreshStatsEnabled(Output.of(isRefreshStatsEnabled));
        }

        /**
         * @param parallelDegree (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are &#39;NONE&#39; (no parallelism), &#39;DEFAULT&#39; (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUsi and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
         * 
         * @return builder
         * 
         */
        public Builder parallelDegree(@Nullable Output<String> parallelDegree) {
            $.parallelDegree = parallelDegree;
            return this;
        }

        /**
         * @param parallelDegree (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are &#39;NONE&#39; (no parallelism), &#39;DEFAULT&#39; (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUsi and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
         * 
         * @return builder
         * 
         */
        public Builder parallelDegree(String parallelDegree) {
            return parallelDegree(Output.of(parallelDegree));
        }

        /**
         * @param postMaskingScript (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed after the core masking script generated using the masking policy. It&#39;s usually used to perform additional transformation or cleanup work after masking.
         * 
         * @return builder
         * 
         */
        public Builder postMaskingScript(@Nullable Output<String> postMaskingScript) {
            $.postMaskingScript = postMaskingScript;
            return this;
        }

        /**
         * @param postMaskingScript (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed after the core masking script generated using the masking policy. It&#39;s usually used to perform additional transformation or cleanup work after masking.
         * 
         * @return builder
         * 
         */
        public Builder postMaskingScript(String postMaskingScript) {
            return postMaskingScript(Output.of(postMaskingScript));
        }

        /**
         * @param preMaskingScript (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed before  the core masking script generated using the masking policy. It&#39;s usually used to perform any preparation or prerequisite work before masking data.
         * 
         * @return builder
         * 
         */
        public Builder preMaskingScript(@Nullable Output<String> preMaskingScript) {
            $.preMaskingScript = preMaskingScript;
            return this;
        }

        /**
         * @param preMaskingScript (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed before  the core masking script generated using the masking policy. It&#39;s usually used to perform any preparation or prerequisite work before masking data.
         * 
         * @return builder
         * 
         */
        public Builder preMaskingScript(String preMaskingScript) {
            return preMaskingScript(Output.of(preMaskingScript));
        }

        /**
         * @param recompile (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are &#39;SERIAL&#39; (recompile in serial),  &#39;PARALLEL&#39; (recompile in parallel), &#39;NONE&#39; (do not recompile). If it&#39;s set to PARALLEL, the value of parallelDegree attribute is used.
         * 
         * @return builder
         * 
         */
        public Builder recompile(@Nullable Output<String> recompile) {
            $.recompile = recompile;
            return this;
        }

        /**
         * @param recompile (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are &#39;SERIAL&#39; (recompile in serial),  &#39;PARALLEL&#39; (recompile in parallel), &#39;NONE&#39; (do not recompile). If it&#39;s set to PARALLEL, the value of parallelDegree attribute is used.
         * 
         * @return builder
         * 
         */
        public Builder recompile(String recompile) {
            return recompile(Output.of(recompile));
        }

        public MaskingPolicyArgs build() {
            $.columnSources = Objects.requireNonNull($.columnSources, "expected parameter 'columnSources' to be non-null");
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
