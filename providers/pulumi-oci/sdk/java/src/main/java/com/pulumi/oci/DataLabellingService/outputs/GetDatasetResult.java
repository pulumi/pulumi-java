// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataLabellingService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataLabellingService.outputs.GetDatasetDatasetFormatDetail;
import com.pulumi.oci.DataLabellingService.outputs.GetDatasetDatasetSourceDetail;
import com.pulumi.oci.DataLabellingService.outputs.GetDatasetInitialRecordGenerationConfiguration;
import com.pulumi.oci.DataLabellingService.outputs.GetDatasetLabelSet;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatasetResult {
    /**
     * @return The annotation format name required for labeling records.
     * 
     */
    private final String annotationFormat;
    /**
     * @return The OCID of the compartment of the resource.
     * 
     */
    private final String compartmentId;
    /**
     * @return Specifies how to process the data. Supported formats include DOCUMENT, IMAGE and TEXT.
     * 
     */
    private final List<GetDatasetDatasetFormatDetail> datasetFormatDetails;
    private final String datasetId;
    /**
     * @return This allows the customer to specify the source of the dataset.
     * 
     */
    private final List<GetDatasetDatasetSourceDetail> datasetSourceDetails;
    /**
     * @return The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return A user provided description of the dataset
     * 
     */
    private final String description;
    /**
     * @return A user-friendly display name for the resource.
     * 
     */
    private final String displayName;
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The OCID of the Dataset.
     * 
     */
    private final String id;
    /**
     * @return Initial Generate Records configuration, generates records from the Dataset&#39;s source.
     * 
     */
    private final List<GetDatasetInitialRecordGenerationConfiguration> initialRecordGenerationConfigurations;
    /**
     * @return An ordered collection of Labels that are unique by name.
     * 
     */
    private final List<GetDatasetLabelSet> labelSets;
    /**
     * @return The labeling instructions for human labelers in rich text format
     * 
     */
    private final String labelingInstructions;
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
     * 
     */
    private final String state;
    /**
     * @return The date and time the resource was created, in the timestamp format defined by RFC3339.
     * 
     */
    private final String timeCreated;
    /**
     * @return The date and time the resource was last updated, in the timestamp format defined by RFC3339.
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetDatasetResult(
        @CustomType.Parameter("annotationFormat") String annotationFormat,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("datasetFormatDetails") List<GetDatasetDatasetFormatDetail> datasetFormatDetails,
        @CustomType.Parameter("datasetId") String datasetId,
        @CustomType.Parameter("datasetSourceDetails") List<GetDatasetDatasetSourceDetail> datasetSourceDetails,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("initialRecordGenerationConfigurations") List<GetDatasetInitialRecordGenerationConfiguration> initialRecordGenerationConfigurations,
        @CustomType.Parameter("labelSets") List<GetDatasetLabelSet> labelSets,
        @CustomType.Parameter("labelingInstructions") String labelingInstructions,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.annotationFormat = annotationFormat;
        this.compartmentId = compartmentId;
        this.datasetFormatDetails = datasetFormatDetails;
        this.datasetId = datasetId;
        this.datasetSourceDetails = datasetSourceDetails;
        this.definedTags = definedTags;
        this.description = description;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.id = id;
        this.initialRecordGenerationConfigurations = initialRecordGenerationConfigurations;
        this.labelSets = labelSets;
        this.labelingInstructions = labelingInstructions;
        this.lifecycleDetails = lifecycleDetails;
        this.state = state;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    /**
     * @return The annotation format name required for labeling records.
     * 
     */
    public String annotationFormat() {
        return this.annotationFormat;
    }
    /**
     * @return The OCID of the compartment of the resource.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Specifies how to process the data. Supported formats include DOCUMENT, IMAGE and TEXT.
     * 
     */
    public List<GetDatasetDatasetFormatDetail> datasetFormatDetails() {
        return this.datasetFormatDetails;
    }
    public String datasetId() {
        return this.datasetId;
    }
    /**
     * @return This allows the customer to specify the source of the dataset.
     * 
     */
    public List<GetDatasetDatasetSourceDetail> datasetSourceDetails() {
        return this.datasetSourceDetails;
    }
    /**
     * @return The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user provided description of the dataset
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-friendly display name for the resource.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the Dataset.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Initial Generate Records configuration, generates records from the Dataset&#39;s source.
     * 
     */
    public List<GetDatasetInitialRecordGenerationConfiguration> initialRecordGenerationConfigurations() {
        return this.initialRecordGenerationConfigurations;
    }
    /**
     * @return An ordered collection of Labels that are unique by name.
     * 
     */
    public List<GetDatasetLabelSet> labelSets() {
        return this.labelSets;
    }
    /**
     * @return The labeling instructions for human labelers in rich text format
     * 
     */
    public String labelingInstructions() {
        return this.labelingInstructions;
    }
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the resource was created, in the timestamp format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the resource was last updated, in the timestamp format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatasetResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String annotationFormat;
        private String compartmentId;
        private List<GetDatasetDatasetFormatDetail> datasetFormatDetails;
        private String datasetId;
        private List<GetDatasetDatasetSourceDetail> datasetSourceDetails;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private List<GetDatasetInitialRecordGenerationConfiguration> initialRecordGenerationConfigurations;
        private List<GetDatasetLabelSet> labelSets;
        private String labelingInstructions;
        private String lifecycleDetails;
        private String state;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatasetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotationFormat = defaults.annotationFormat;
    	      this.compartmentId = defaults.compartmentId;
    	      this.datasetFormatDetails = defaults.datasetFormatDetails;
    	      this.datasetId = defaults.datasetId;
    	      this.datasetSourceDetails = defaults.datasetSourceDetails;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.initialRecordGenerationConfigurations = defaults.initialRecordGenerationConfigurations;
    	      this.labelSets = defaults.labelSets;
    	      this.labelingInstructions = defaults.labelingInstructions;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder annotationFormat(String annotationFormat) {
            this.annotationFormat = Objects.requireNonNull(annotationFormat);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder datasetFormatDetails(List<GetDatasetDatasetFormatDetail> datasetFormatDetails) {
            this.datasetFormatDetails = Objects.requireNonNull(datasetFormatDetails);
            return this;
        }
        public Builder datasetFormatDetails(GetDatasetDatasetFormatDetail... datasetFormatDetails) {
            return datasetFormatDetails(List.of(datasetFormatDetails));
        }
        public Builder datasetId(String datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }
        public Builder datasetSourceDetails(List<GetDatasetDatasetSourceDetail> datasetSourceDetails) {
            this.datasetSourceDetails = Objects.requireNonNull(datasetSourceDetails);
            return this;
        }
        public Builder datasetSourceDetails(GetDatasetDatasetSourceDetail... datasetSourceDetails) {
            return datasetSourceDetails(List.of(datasetSourceDetails));
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder initialRecordGenerationConfigurations(List<GetDatasetInitialRecordGenerationConfiguration> initialRecordGenerationConfigurations) {
            this.initialRecordGenerationConfigurations = Objects.requireNonNull(initialRecordGenerationConfigurations);
            return this;
        }
        public Builder initialRecordGenerationConfigurations(GetDatasetInitialRecordGenerationConfiguration... initialRecordGenerationConfigurations) {
            return initialRecordGenerationConfigurations(List.of(initialRecordGenerationConfigurations));
        }
        public Builder labelSets(List<GetDatasetLabelSet> labelSets) {
            this.labelSets = Objects.requireNonNull(labelSets);
            return this;
        }
        public Builder labelSets(GetDatasetLabelSet... labelSets) {
            return labelSets(List.of(labelSets));
        }
        public Builder labelingInstructions(String labelingInstructions) {
            this.labelingInstructions = Objects.requireNonNull(labelingInstructions);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetDatasetResult build() {
            return new GetDatasetResult(annotationFormat, compartmentId, datasetFormatDetails, datasetId, datasetSourceDetails, definedTags, description, displayName, freeformTags, id, initialRecordGenerationConfigurations, labelSets, labelingInstructions, lifecycleDetails, state, timeCreated, timeUpdated);
        }
    }
}
