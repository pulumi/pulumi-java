// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Marketplace.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Marketplace.inputs.GetListingPackagesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetListingPackagesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetListingPackagesPlainArgs Empty = new GetListingPackagesPlainArgs();

    /**
     * The unique identifier for the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The unique identifier for the compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    @Import(name="filters")
    private @Nullable List<GetListingPackagesFilter> filters;

    public Optional<List<GetListingPackagesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The unique identifier for the listing.
     * 
     */
    @Import(name="listingId", required=true)
    private String listingId;

    /**
     * @return The unique identifier for the listing.
     * 
     */
    public String listingId() {
        return this.listingId;
    }

    /**
     * A filter to return only packages that match the given package type exactly.
     * 
     */
    @Import(name="packageType")
    private @Nullable String packageType;

    /**
     * @return A filter to return only packages that match the given package type exactly.
     * 
     */
    public Optional<String> packageType() {
        return Optional.ofNullable(this.packageType);
    }

    /**
     * The version of the package. Package versions are unique within a listing.
     * 
     */
    @Import(name="packageVersion")
    private @Nullable String packageVersion;

    /**
     * @return The version of the package. Package versions are unique within a listing.
     * 
     */
    public Optional<String> packageVersion() {
        return Optional.ofNullable(this.packageVersion);
    }

    private GetListingPackagesPlainArgs() {}

    private GetListingPackagesPlainArgs(GetListingPackagesPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.listingId = $.listingId;
        this.packageType = $.packageType;
        this.packageVersion = $.packageVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetListingPackagesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetListingPackagesPlainArgs $;

        public Builder() {
            $ = new GetListingPackagesPlainArgs();
        }

        public Builder(GetListingPackagesPlainArgs defaults) {
            $ = new GetListingPackagesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The unique identifier for the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetListingPackagesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetListingPackagesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param listingId The unique identifier for the listing.
         * 
         * @return builder
         * 
         */
        public Builder listingId(String listingId) {
            $.listingId = listingId;
            return this;
        }

        /**
         * @param packageType A filter to return only packages that match the given package type exactly.
         * 
         * @return builder
         * 
         */
        public Builder packageType(@Nullable String packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param packageVersion The version of the package. Package versions are unique within a listing.
         * 
         * @return builder
         * 
         */
        public Builder packageVersion(@Nullable String packageVersion) {
            $.packageVersion = packageVersion;
            return this;
        }

        public GetListingPackagesPlainArgs build() {
            $.listingId = Objects.requireNonNull($.listingId, "expected parameter 'listingId' to be non-null");
            return $;
        }
    }

}
