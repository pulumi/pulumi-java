// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ManagementAgent.inputs.GetManagementAgentsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagementAgentsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagementAgentsArgs Empty = new GetManagementAgentsArgs();

    /**
     * Filter to return only Management Agents in the particular availability status.
     * 
     */
    @Import(name="availabilityStatus")
    private @Nullable Output<String> availabilityStatus;

    /**
     * @return Filter to return only Management Agents in the particular availability status.
     * 
     */
    public Optional<Output<String>> availabilityStatus() {
        return Optional.ofNullable(this.availabilityStatus);
    }

    /**
     * The OCID of the compartment to which a request will be scoped.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment to which a request will be scoped.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Filter to return only Management Agents having the particular display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Filter to return only Management Agents having the particular display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetManagementAgentsFilterArgs>> filters;

    public Optional<Output<List<GetManagementAgentsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Filter to return only Management Agents having the particular agent host id.
     * 
     */
    @Import(name="hostId")
    private @Nullable Output<String> hostId;

    /**
     * @return Filter to return only Management Agents having the particular agent host id.
     * 
     */
    public Optional<Output<String>> hostId() {
        return Optional.ofNullable(this.hostId);
    }

    /**
     * A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
     * 
     */
    @Import(name="installType")
    private @Nullable Output<String> installType;

    /**
     * @return A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
     * 
     */
    public Optional<Output<String>> installType() {
        return Optional.ofNullable(this.installType);
    }

    /**
     * true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
     * 
     */
    @Import(name="isCustomerDeployed")
    private @Nullable Output<Boolean> isCustomerDeployed;

    /**
     * @return true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
     * 
     */
    public Optional<Output<Boolean>> isCustomerDeployed() {
        return Optional.ofNullable(this.isCustomerDeployed);
    }

    /**
     * Filter to return only results having the particular platform type.
     * 
     */
    @Import(name="platformTypes")
    private @Nullable Output<List<String>> platformTypes;

    /**
     * @return Filter to return only results having the particular platform type.
     * 
     */
    public Optional<Output<List<String>>> platformTypes() {
        return Optional.ofNullable(this.platformTypes);
    }

    /**
     * Filter to return only Management Agents having the particular Plugin installed. A special pluginName of &#39;None&#39; can be provided and this will return only Management Agents having no plugin installed.
     * 
     */
    @Import(name="pluginNames")
    private @Nullable Output<List<String>> pluginNames;

    /**
     * @return Filter to return only Management Agents having the particular Plugin installed. A special pluginName of &#39;None&#39; can be provided and this will return only Management Agents having no plugin installed.
     * 
     */
    public Optional<Output<List<String>>> pluginNames() {
        return Optional.ofNullable(this.pluginNames);
    }

    /**
     * Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Filter to return only Management Agents in the particular lifecycle state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Filter to return only Management Agents having the particular agent version.
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<String>> versions;

    /**
     * @return Filter to return only Management Agents having the particular agent version.
     * 
     */
    public Optional<Output<List<String>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private GetManagementAgentsArgs() {}

    private GetManagementAgentsArgs(GetManagementAgentsArgs $) {
        this.availabilityStatus = $.availabilityStatus;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.hostId = $.hostId;
        this.installType = $.installType;
        this.isCustomerDeployed = $.isCustomerDeployed;
        this.platformTypes = $.platformTypes;
        this.pluginNames = $.pluginNames;
        this.state = $.state;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagementAgentsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagementAgentsArgs $;

        public Builder() {
            $ = new GetManagementAgentsArgs();
        }

        public Builder(GetManagementAgentsArgs defaults) {
            $ = new GetManagementAgentsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityStatus Filter to return only Management Agents in the particular availability status.
         * 
         * @return builder
         * 
         */
        public Builder availabilityStatus(@Nullable Output<String> availabilityStatus) {
            $.availabilityStatus = availabilityStatus;
            return this;
        }

        /**
         * @param availabilityStatus Filter to return only Management Agents in the particular availability status.
         * 
         * @return builder
         * 
         */
        public Builder availabilityStatus(String availabilityStatus) {
            return availabilityStatus(Output.of(availabilityStatus));
        }

        /**
         * @param compartmentId The OCID of the compartment to which a request will be scoped.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment to which a request will be scoped.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName Filter to return only Management Agents having the particular display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Filter to return only Management Agents having the particular display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetManagementAgentsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetManagementAgentsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagementAgentsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param hostId Filter to return only Management Agents having the particular agent host id.
         * 
         * @return builder
         * 
         */
        public Builder hostId(@Nullable Output<String> hostId) {
            $.hostId = hostId;
            return this;
        }

        /**
         * @param hostId Filter to return only Management Agents having the particular agent host id.
         * 
         * @return builder
         * 
         */
        public Builder hostId(String hostId) {
            return hostId(Output.of(hostId));
        }

        /**
         * @param installType A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
         * 
         * @return builder
         * 
         */
        public Builder installType(@Nullable Output<String> installType) {
            $.installType = installType;
            return this;
        }

        /**
         * @param installType A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
         * 
         * @return builder
         * 
         */
        public Builder installType(String installType) {
            return installType(Output.of(installType));
        }

        /**
         * @param isCustomerDeployed true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
         * 
         * @return builder
         * 
         */
        public Builder isCustomerDeployed(@Nullable Output<Boolean> isCustomerDeployed) {
            $.isCustomerDeployed = isCustomerDeployed;
            return this;
        }

        /**
         * @param isCustomerDeployed true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
         * 
         * @return builder
         * 
         */
        public Builder isCustomerDeployed(Boolean isCustomerDeployed) {
            return isCustomerDeployed(Output.of(isCustomerDeployed));
        }

        /**
         * @param platformTypes Filter to return only results having the particular platform type.
         * 
         * @return builder
         * 
         */
        public Builder platformTypes(@Nullable Output<List<String>> platformTypes) {
            $.platformTypes = platformTypes;
            return this;
        }

        /**
         * @param platformTypes Filter to return only results having the particular platform type.
         * 
         * @return builder
         * 
         */
        public Builder platformTypes(List<String> platformTypes) {
            return platformTypes(Output.of(platformTypes));
        }

        /**
         * @param platformTypes Filter to return only results having the particular platform type.
         * 
         * @return builder
         * 
         */
        public Builder platformTypes(String... platformTypes) {
            return platformTypes(List.of(platformTypes));
        }

        /**
         * @param pluginNames Filter to return only Management Agents having the particular Plugin installed. A special pluginName of &#39;None&#39; can be provided and this will return only Management Agents having no plugin installed.
         * 
         * @return builder
         * 
         */
        public Builder pluginNames(@Nullable Output<List<String>> pluginNames) {
            $.pluginNames = pluginNames;
            return this;
        }

        /**
         * @param pluginNames Filter to return only Management Agents having the particular Plugin installed. A special pluginName of &#39;None&#39; can be provided and this will return only Management Agents having no plugin installed.
         * 
         * @return builder
         * 
         */
        public Builder pluginNames(List<String> pluginNames) {
            return pluginNames(Output.of(pluginNames));
        }

        /**
         * @param pluginNames Filter to return only Management Agents having the particular Plugin installed. A special pluginName of &#39;None&#39; can be provided and this will return only Management Agents having no plugin installed.
         * 
         * @return builder
         * 
         */
        public Builder pluginNames(String... pluginNames) {
            return pluginNames(List.of(pluginNames));
        }

        /**
         * @param state Filter to return only Management Agents in the particular lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Filter to return only Management Agents in the particular lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param versions Filter to return only Management Agents having the particular agent version.
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable Output<List<String>> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions Filter to return only Management Agents having the particular agent version.
         * 
         * @return builder
         * 
         */
        public Builder versions(List<String> versions) {
            return versions(Output.of(versions));
        }

        /**
         * @param versions Filter to return only Management Agents having the particular agent version.
         * 
         * @return builder
         * 
         */
        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }

        public GetManagementAgentsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
