// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMysqlBackupsBackupDbSystemSnapshotDeletionPolicy {
    /**
     * @return Specifies if any automatic backups created for a DB System should be retained or deleted when the DB System is deleted.
     * 
     */
    private final String automaticBackupRetention;
    /**
     * @return Specifies whether or not a backup is taken when the DB System is deleted. REQUIRE_FINAL_BACKUP: a backup is taken if the DB System is deleted. SKIP_FINAL_BACKUP: a backup is not taken if the DB System is deleted.
     * 
     */
    private final String finalBackup;
    /**
     * @return Specifies whether the DB System can be deleted. Set to true to prevent deletion, false (default) to allow.
     * 
     */
    private final Boolean isDeleteProtected;

    @CustomType.Constructor
    private GetMysqlBackupsBackupDbSystemSnapshotDeletionPolicy(
        @CustomType.Parameter("automaticBackupRetention") String automaticBackupRetention,
        @CustomType.Parameter("finalBackup") String finalBackup,
        @CustomType.Parameter("isDeleteProtected") Boolean isDeleteProtected) {
        this.automaticBackupRetention = automaticBackupRetention;
        this.finalBackup = finalBackup;
        this.isDeleteProtected = isDeleteProtected;
    }

    /**
     * @return Specifies if any automatic backups created for a DB System should be retained or deleted when the DB System is deleted.
     * 
     */
    public String automaticBackupRetention() {
        return this.automaticBackupRetention;
    }
    /**
     * @return Specifies whether or not a backup is taken when the DB System is deleted. REQUIRE_FINAL_BACKUP: a backup is taken if the DB System is deleted. SKIP_FINAL_BACKUP: a backup is not taken if the DB System is deleted.
     * 
     */
    public String finalBackup() {
        return this.finalBackup;
    }
    /**
     * @return Specifies whether the DB System can be deleted. Set to true to prevent deletion, false (default) to allow.
     * 
     */
    public Boolean isDeleteProtected() {
        return this.isDeleteProtected;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlBackupsBackupDbSystemSnapshotDeletionPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String automaticBackupRetention;
        private String finalBackup;
        private Boolean isDeleteProtected;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMysqlBackupsBackupDbSystemSnapshotDeletionPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticBackupRetention = defaults.automaticBackupRetention;
    	      this.finalBackup = defaults.finalBackup;
    	      this.isDeleteProtected = defaults.isDeleteProtected;
        }

        public Builder automaticBackupRetention(String automaticBackupRetention) {
            this.automaticBackupRetention = Objects.requireNonNull(automaticBackupRetention);
            return this;
        }
        public Builder finalBackup(String finalBackup) {
            this.finalBackup = Objects.requireNonNull(finalBackup);
            return this;
        }
        public Builder isDeleteProtected(Boolean isDeleteProtected) {
            this.isDeleteProtected = Objects.requireNonNull(isDeleteProtected);
            return this;
        }        public GetMysqlBackupsBackupDbSystemSnapshotDeletionPolicy build() {
            return new GetMysqlBackupsBackupDbSystemSnapshotDeletionPolicy(automaticBackupRetention, finalBackup, isDeleteProtected);
        }
    }
}
