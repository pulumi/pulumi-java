// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.BigDataService.inputs.BdsInstanceNodeAttachedBlockVolumeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceNodeArgs Empty = new BdsInstanceNodeArgs();

    /**
     * The list of block volumes attached to a given node.
     * 
     */
    @Import(name="attachedBlockVolumes")
    private @Nullable Output<List<BdsInstanceNodeAttachedBlockVolumeArgs>> attachedBlockVolumes;

    /**
     * @return The list of block volumes attached to a given node.
     * 
     */
    public Optional<Output<List<BdsInstanceNodeAttachedBlockVolumeArgs>>> attachedBlockVolumes() {
        return Optional.ofNullable(this.attachedBlockVolumes);
    }

    /**
     * The name of the availability domain in which the node is running.
     * 
     */
    @Import(name="availabilityDomain")
    private @Nullable Output<String> availabilityDomain;

    /**
     * @return The name of the availability domain in which the node is running.
     * 
     */
    public Optional<Output<String>> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }

    /**
     * (Updatable) Name of the Big Data Service cluster.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) Name of the Big Data Service cluster.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The name of the fault domain in which the node is running.
     * 
     */
    @Import(name="faultDomain")
    private @Nullable Output<String> faultDomain;

    /**
     * @return The name of the fault domain in which the node is running.
     * 
     */
    public Optional<Output<String>> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }

    /**
     * The fully-qualified hostname (FQDN) of the node.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The fully-qualified hostname (FQDN) of the node.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The OCID of the image from which the node was created.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The OCID of the image from which the node was created.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * IP address of the node.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IP address of the node.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The Big Data Service cluster node type.
     * 
     */
    @Import(name="nodeType")
    private @Nullable Output<String> nodeType;

    /**
     * @return The Big Data Service cluster node type.
     * 
     */
    public Optional<Output<String>> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }

    /**
     * (Updatable) Shape of the node.
     * 
     */
    @Import(name="shape")
    private @Nullable Output<String> shape;

    /**
     * @return (Updatable) Shape of the node.
     * 
     */
    public Optional<Output<String>> shape() {
        return Optional.ofNullable(this.shape);
    }

    /**
     * The fingerprint of the SSH key used for node access.
     * 
     */
    @Import(name="sshFingerprint")
    private @Nullable Output<String> sshFingerprint;

    /**
     * @return The fingerprint of the SSH key used for node access.
     * 
     */
    public Optional<Output<String>> sshFingerprint() {
        return Optional.ofNullable(this.sshFingerprint);
    }

    /**
     * The state of the cluster.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the cluster.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The OCID of the subnet in which the node will be created.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The OCID of the subnet in which the node will be created.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The time the cluster was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the cluster was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    private BdsInstanceNodeArgs() {}

    private BdsInstanceNodeArgs(BdsInstanceNodeArgs $) {
        this.attachedBlockVolumes = $.attachedBlockVolumes;
        this.availabilityDomain = $.availabilityDomain;
        this.displayName = $.displayName;
        this.faultDomain = $.faultDomain;
        this.hostname = $.hostname;
        this.imageId = $.imageId;
        this.instanceId = $.instanceId;
        this.ipAddress = $.ipAddress;
        this.nodeType = $.nodeType;
        this.shape = $.shape;
        this.sshFingerprint = $.sshFingerprint;
        this.state = $.state;
        this.subnetId = $.subnetId;
        this.timeCreated = $.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceNodeArgs $;

        public Builder() {
            $ = new BdsInstanceNodeArgs();
        }

        public Builder(BdsInstanceNodeArgs defaults) {
            $ = new BdsInstanceNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachedBlockVolumes The list of block volumes attached to a given node.
         * 
         * @return builder
         * 
         */
        public Builder attachedBlockVolumes(@Nullable Output<List<BdsInstanceNodeAttachedBlockVolumeArgs>> attachedBlockVolumes) {
            $.attachedBlockVolumes = attachedBlockVolumes;
            return this;
        }

        /**
         * @param attachedBlockVolumes The list of block volumes attached to a given node.
         * 
         * @return builder
         * 
         */
        public Builder attachedBlockVolumes(List<BdsInstanceNodeAttachedBlockVolumeArgs> attachedBlockVolumes) {
            return attachedBlockVolumes(Output.of(attachedBlockVolumes));
        }

        /**
         * @param attachedBlockVolumes The list of block volumes attached to a given node.
         * 
         * @return builder
         * 
         */
        public Builder attachedBlockVolumes(BdsInstanceNodeAttachedBlockVolumeArgs... attachedBlockVolumes) {
            return attachedBlockVolumes(List.of(attachedBlockVolumes));
        }

        /**
         * @param availabilityDomain The name of the availability domain in which the node is running.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(@Nullable Output<String> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain The name of the availability domain in which the node is running.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(String availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param displayName (Updatable) Name of the Big Data Service cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Name of the Big Data Service cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param faultDomain The name of the fault domain in which the node is running.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(@Nullable Output<String> faultDomain) {
            $.faultDomain = faultDomain;
            return this;
        }

        /**
         * @param faultDomain The name of the fault domain in which the node is running.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(String faultDomain) {
            return faultDomain(Output.of(faultDomain));
        }

        /**
         * @param hostname The fully-qualified hostname (FQDN) of the node.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The fully-qualified hostname (FQDN) of the node.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param imageId The OCID of the image from which the node was created.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The OCID of the image from which the node was created.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param instanceId The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param ipAddress IP address of the node.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IP address of the node.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param nodeType The Big Data Service cluster node type.
         * 
         * @return builder
         * 
         */
        public Builder nodeType(@Nullable Output<String> nodeType) {
            $.nodeType = nodeType;
            return this;
        }

        /**
         * @param nodeType The Big Data Service cluster node type.
         * 
         * @return builder
         * 
         */
        public Builder nodeType(String nodeType) {
            return nodeType(Output.of(nodeType));
        }

        /**
         * @param shape (Updatable) Shape of the node.
         * 
         * @return builder
         * 
         */
        public Builder shape(@Nullable Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape (Updatable) Shape of the node.
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param sshFingerprint The fingerprint of the SSH key used for node access.
         * 
         * @return builder
         * 
         */
        public Builder sshFingerprint(@Nullable Output<String> sshFingerprint) {
            $.sshFingerprint = sshFingerprint;
            return this;
        }

        /**
         * @param sshFingerprint The fingerprint of the SSH key used for node access.
         * 
         * @return builder
         * 
         */
        public Builder sshFingerprint(String sshFingerprint) {
            return sshFingerprint(Output.of(sshFingerprint));
        }

        /**
         * @param state The state of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subnetId The OCID of the subnet in which the node will be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of the subnet in which the node will be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param timeCreated The time the cluster was created, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the cluster was created, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        public BdsInstanceNodeArgs build() {
            return $;
        }
    }

}
