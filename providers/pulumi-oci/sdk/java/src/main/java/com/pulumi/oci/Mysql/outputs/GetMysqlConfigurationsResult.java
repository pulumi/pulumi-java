// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Mysql.outputs.GetMysqlConfigurationsConfiguration;
import com.pulumi.oci.Mysql.outputs.GetMysqlConfigurationsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMysqlConfigurationsResult {
    /**
     * @return OCID of the Compartment the Configuration exists in.
     * 
     */
    private final String compartmentId;
    private final @Nullable String configurationId;
    /**
     * @return The list of configurations.
     * 
     */
    private final List<GetMysqlConfigurationsConfiguration> configurations;
    /**
     * @return The display name of the Configuration.
     * 
     */
    private final @Nullable String displayName;
    private final @Nullable List<GetMysqlConfigurationsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The name of the associated Shape.
     * 
     */
    private final @Nullable String shapeName;
    /**
     * @return The current state of the Configuration.
     * 
     */
    private final @Nullable String state;
    /**
     * @return The Configuration type, DEFAULT or CUSTOM.
     * 
     */
    private final @Nullable List<String> types;

    @CustomType.Constructor
    private GetMysqlConfigurationsResult(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("configurationId") @Nullable String configurationId,
        @CustomType.Parameter("configurations") List<GetMysqlConfigurationsConfiguration> configurations,
        @CustomType.Parameter("displayName") @Nullable String displayName,
        @CustomType.Parameter("filters") @Nullable List<GetMysqlConfigurationsFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("shapeName") @Nullable String shapeName,
        @CustomType.Parameter("state") @Nullable String state,
        @CustomType.Parameter("types") @Nullable List<String> types) {
        this.compartmentId = compartmentId;
        this.configurationId = configurationId;
        this.configurations = configurations;
        this.displayName = displayName;
        this.filters = filters;
        this.id = id;
        this.shapeName = shapeName;
        this.state = state;
        this.types = types;
    }

    /**
     * @return OCID of the Compartment the Configuration exists in.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<String> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }
    /**
     * @return The list of configurations.
     * 
     */
    public List<GetMysqlConfigurationsConfiguration> configurations() {
        return this.configurations;
    }
    /**
     * @return The display name of the Configuration.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetMysqlConfigurationsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the associated Shape.
     * 
     */
    public Optional<String> shapeName() {
        return Optional.ofNullable(this.shapeName);
    }
    /**
     * @return The current state of the Configuration.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The Configuration type, DEFAULT or CUSTOM.
     * 
     */
    public List<String> types() {
        return this.types == null ? List.of() : this.types;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMysqlConfigurationsResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private @Nullable String configurationId;
        private List<GetMysqlConfigurationsConfiguration> configurations;
        private @Nullable String displayName;
        private @Nullable List<GetMysqlConfigurationsFilter> filters;
        private String id;
        private @Nullable String shapeName;
        private @Nullable String state;
        private @Nullable List<String> types;

        public Builder() {
    	      // Empty
        }

        public Builder(GetMysqlConfigurationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.configurationId = defaults.configurationId;
    	      this.configurations = defaults.configurations;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.shapeName = defaults.shapeName;
    	      this.state = defaults.state;
    	      this.types = defaults.types;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder configurationId(@Nullable String configurationId) {
            this.configurationId = configurationId;
            return this;
        }
        public Builder configurations(List<GetMysqlConfigurationsConfiguration> configurations) {
            this.configurations = Objects.requireNonNull(configurations);
            return this;
        }
        public Builder configurations(GetMysqlConfigurationsConfiguration... configurations) {
            return configurations(List.of(configurations));
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder filters(@Nullable List<GetMysqlConfigurationsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetMysqlConfigurationsFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder shapeName(@Nullable String shapeName) {
            this.shapeName = shapeName;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public Builder types(@Nullable List<String> types) {
            this.types = types;
            return this;
        }
        public Builder types(String... types) {
            return types(List.of(types));
        }        public GetMysqlConfigurationsResult build() {
            return new GetMysqlConfigurationsResult(compartmentId, configurationId, configurations, displayName, filters, id, shapeName, state, types);
        }
    }
}
