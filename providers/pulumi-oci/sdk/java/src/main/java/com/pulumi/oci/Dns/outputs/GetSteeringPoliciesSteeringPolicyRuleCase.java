// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Dns.outputs.GetSteeringPoliciesSteeringPolicyRuleCaseAnswerData;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSteeringPoliciesSteeringPolicyRuleCase {
    /**
     * @return An array of `SteeringPolicyPriorityAnswerData` objects.
     * 
     */
    private final List<GetSteeringPoliciesSteeringPolicyRuleCaseAnswerData> answerDatas;
    /**
     * @return An expression that uses conditions at the time of a DNS query to indicate whether a case matches. Conditions may include the geographical location, IP subnet, or ASN the DNS query originated. **Example:** If you have an office that uses the subnet `192.0.2.0/24` you could use a `caseCondition` expression `query.client.subnet in (&#39;192.0.2.0/24&#39;)` to define a case that matches queries from that office.
     * 
     */
    private final String caseCondition;
    /**
     * @return The number of answers allowed to remain after the limit rule has been processed, keeping only the first of the remaining answers in the list. Example: If the `count` property is set to `2` and four answers remain before the limit rule is processed, only the first two answers in the list will remain after the limit rule has been processed.
     * 
     */
    private final Integer count;

    @CustomType.Constructor
    private GetSteeringPoliciesSteeringPolicyRuleCase(
        @CustomType.Parameter("answerDatas") List<GetSteeringPoliciesSteeringPolicyRuleCaseAnswerData> answerDatas,
        @CustomType.Parameter("caseCondition") String caseCondition,
        @CustomType.Parameter("count") Integer count) {
        this.answerDatas = answerDatas;
        this.caseCondition = caseCondition;
        this.count = count;
    }

    /**
     * @return An array of `SteeringPolicyPriorityAnswerData` objects.
     * 
     */
    public List<GetSteeringPoliciesSteeringPolicyRuleCaseAnswerData> answerDatas() {
        return this.answerDatas;
    }
    /**
     * @return An expression that uses conditions at the time of a DNS query to indicate whether a case matches. Conditions may include the geographical location, IP subnet, or ASN the DNS query originated. **Example:** If you have an office that uses the subnet `192.0.2.0/24` you could use a `caseCondition` expression `query.client.subnet in (&#39;192.0.2.0/24&#39;)` to define a case that matches queries from that office.
     * 
     */
    public String caseCondition() {
        return this.caseCondition;
    }
    /**
     * @return The number of answers allowed to remain after the limit rule has been processed, keeping only the first of the remaining answers in the list. Example: If the `count` property is set to `2` and four answers remain before the limit rule is processed, only the first two answers in the list will remain after the limit rule has been processed.
     * 
     */
    public Integer count() {
        return this.count;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSteeringPoliciesSteeringPolicyRuleCase defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetSteeringPoliciesSteeringPolicyRuleCaseAnswerData> answerDatas;
        private String caseCondition;
        private Integer count;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSteeringPoliciesSteeringPolicyRuleCase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.answerDatas = defaults.answerDatas;
    	      this.caseCondition = defaults.caseCondition;
    	      this.count = defaults.count;
        }

        public Builder answerDatas(List<GetSteeringPoliciesSteeringPolicyRuleCaseAnswerData> answerDatas) {
            this.answerDatas = Objects.requireNonNull(answerDatas);
            return this;
        }
        public Builder answerDatas(GetSteeringPoliciesSteeringPolicyRuleCaseAnswerData... answerDatas) {
            return answerDatas(List.of(answerDatas));
        }
        public Builder caseCondition(String caseCondition) {
            this.caseCondition = Objects.requireNonNull(caseCondition);
            return this;
        }
        public Builder count(Integer count) {
            this.count = Objects.requireNonNull(count);
            return this;
        }        public GetSteeringPoliciesSteeringPolicyRuleCase build() {
            return new GetSteeringPoliciesSteeringPolicyRuleCase(answerDatas, caseCondition, count);
        }
    }
}
