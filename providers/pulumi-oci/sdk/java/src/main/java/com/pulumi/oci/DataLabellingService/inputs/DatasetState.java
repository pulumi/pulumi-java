// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataLabellingService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataLabellingService.inputs.DatasetDatasetFormatDetailsArgs;
import com.pulumi.oci.DataLabellingService.inputs.DatasetDatasetSourceDetailsArgs;
import com.pulumi.oci.DataLabellingService.inputs.DatasetInitialRecordGenerationConfigurationArgs;
import com.pulumi.oci.DataLabellingService.inputs.DatasetLabelSetArgs;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetState extends com.pulumi.resources.ResourceArgs {

    public static final DatasetState Empty = new DatasetState();

    /**
     * The annotation format name required for labeling records.
     * 
     */
    @Import(name="annotationFormat")
    private @Nullable Output<String> annotationFormat;

    /**
     * @return The annotation format name required for labeling records.
     * 
     */
    public Optional<Output<String>> annotationFormat() {
        return Optional.ofNullable(this.annotationFormat);
    }

    /**
     * (Updatable) The OCID of the compartment of the resource.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment of the resource.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Specifies how to process the data. Supported formats include IMAGE and TEXT.
     * 
     */
    @Import(name="datasetFormatDetails")
    private @Nullable Output<DatasetDatasetFormatDetailsArgs> datasetFormatDetails;

    /**
     * @return Specifies how to process the data. Supported formats include IMAGE and TEXT.
     * 
     */
    public Optional<Output<DatasetDatasetFormatDetailsArgs>> datasetFormatDetails() {
        return Optional.ofNullable(this.datasetFormatDetails);
    }

    /**
     * This allows the customer to specify the source of the dataset.
     * 
     */
    @Import(name="datasetSourceDetails")
    private @Nullable Output<DatasetDatasetSourceDetailsArgs> datasetSourceDetails;

    /**
     * @return This allows the customer to specify the source of the dataset.
     * 
     */
    public Optional<Output<DatasetDatasetSourceDetailsArgs>> datasetSourceDetails() {
        return Optional.ofNullable(this.datasetSourceDetails);
    }

    /**
     * (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A user provided description of the dataset
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A user provided description of the dataset
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A user-friendly display name for the resource.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly display name for the resource.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Initial Generate Records configuration, generates records from the Dataset&#39;s source.
     * 
     */
    @Import(name="initialRecordGenerationConfiguration")
    private @Nullable Output<DatasetInitialRecordGenerationConfigurationArgs> initialRecordGenerationConfiguration;

    /**
     * @return Initial Generate Records configuration, generates records from the Dataset&#39;s source.
     * 
     */
    public Optional<Output<DatasetInitialRecordGenerationConfigurationArgs>> initialRecordGenerationConfiguration() {
        return Optional.ofNullable(this.initialRecordGenerationConfiguration);
    }

    /**
     * An ordered collection of Labels that are unique by name.
     * 
     */
    @Import(name="labelSet")
    private @Nullable Output<DatasetLabelSetArgs> labelSet;

    /**
     * @return An ordered collection of Labels that are unique by name.
     * 
     */
    public Optional<Output<DatasetLabelSetArgs>> labelSet() {
        return Optional.ofNullable(this.labelSet);
    }

    /**
     * The labeling instructions for human labelers in rich text format
     * 
     */
    @Import(name="labelingInstructions")
    private @Nullable Output<String> labelingInstructions;

    /**
     * @return The labeling instructions for human labelers in rich text format
     * 
     */
    public Optional<Output<String>> labelingInstructions() {
        return Optional.ofNullable(this.labelingInstructions);
    }

    /**
     * A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the resource was created, in the timestamp format defined by RFC3339.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the resource was created, in the timestamp format defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time the resource was last updated, in the timestamp format defined by RFC3339.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time the resource was last updated, in the timestamp format defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private DatasetState() {}

    private DatasetState(DatasetState $) {
        this.annotationFormat = $.annotationFormat;
        this.compartmentId = $.compartmentId;
        this.datasetFormatDetails = $.datasetFormatDetails;
        this.datasetSourceDetails = $.datasetSourceDetails;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.initialRecordGenerationConfiguration = $.initialRecordGenerationConfiguration;
        this.labelSet = $.labelSet;
        this.labelingInstructions = $.labelingInstructions;
        this.lifecycleDetails = $.lifecycleDetails;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetState $;

        public Builder() {
            $ = new DatasetState();
        }

        public Builder(DatasetState defaults) {
            $ = new DatasetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotationFormat The annotation format name required for labeling records.
         * 
         * @return builder
         * 
         */
        public Builder annotationFormat(@Nullable Output<String> annotationFormat) {
            $.annotationFormat = annotationFormat;
            return this;
        }

        /**
         * @param annotationFormat The annotation format name required for labeling records.
         * 
         * @return builder
         * 
         */
        public Builder annotationFormat(String annotationFormat) {
            return annotationFormat(Output.of(annotationFormat));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment of the resource.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment of the resource.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param datasetFormatDetails Specifies how to process the data. Supported formats include IMAGE and TEXT.
         * 
         * @return builder
         * 
         */
        public Builder datasetFormatDetails(@Nullable Output<DatasetDatasetFormatDetailsArgs> datasetFormatDetails) {
            $.datasetFormatDetails = datasetFormatDetails;
            return this;
        }

        /**
         * @param datasetFormatDetails Specifies how to process the data. Supported formats include IMAGE and TEXT.
         * 
         * @return builder
         * 
         */
        public Builder datasetFormatDetails(DatasetDatasetFormatDetailsArgs datasetFormatDetails) {
            return datasetFormatDetails(Output.of(datasetFormatDetails));
        }

        /**
         * @param datasetSourceDetails This allows the customer to specify the source of the dataset.
         * 
         * @return builder
         * 
         */
        public Builder datasetSourceDetails(@Nullable Output<DatasetDatasetSourceDetailsArgs> datasetSourceDetails) {
            $.datasetSourceDetails = datasetSourceDetails;
            return this;
        }

        /**
         * @param datasetSourceDetails This allows the customer to specify the source of the dataset.
         * 
         * @return builder
         * 
         */
        public Builder datasetSourceDetails(DatasetDatasetSourceDetailsArgs datasetSourceDetails) {
            return datasetSourceDetails(Output.of(datasetSourceDetails));
        }

        /**
         * @param definedTags (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A user provided description of the dataset
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A user provided description of the dataset
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A user-friendly display name for the resource.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly display name for the resource.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param initialRecordGenerationConfiguration Initial Generate Records configuration, generates records from the Dataset&#39;s source.
         * 
         * @return builder
         * 
         */
        public Builder initialRecordGenerationConfiguration(@Nullable Output<DatasetInitialRecordGenerationConfigurationArgs> initialRecordGenerationConfiguration) {
            $.initialRecordGenerationConfiguration = initialRecordGenerationConfiguration;
            return this;
        }

        /**
         * @param initialRecordGenerationConfiguration Initial Generate Records configuration, generates records from the Dataset&#39;s source.
         * 
         * @return builder
         * 
         */
        public Builder initialRecordGenerationConfiguration(DatasetInitialRecordGenerationConfigurationArgs initialRecordGenerationConfiguration) {
            return initialRecordGenerationConfiguration(Output.of(initialRecordGenerationConfiguration));
        }

        /**
         * @param labelSet An ordered collection of Labels that are unique by name.
         * 
         * @return builder
         * 
         */
        public Builder labelSet(@Nullable Output<DatasetLabelSetArgs> labelSet) {
            $.labelSet = labelSet;
            return this;
        }

        /**
         * @param labelSet An ordered collection of Labels that are unique by name.
         * 
         * @return builder
         * 
         */
        public Builder labelSet(DatasetLabelSetArgs labelSet) {
            return labelSet(Output.of(labelSet));
        }

        /**
         * @param labelingInstructions The labeling instructions for human labelers in rich text format
         * 
         * @return builder
         * 
         */
        public Builder labelingInstructions(@Nullable Output<String> labelingInstructions) {
            $.labelingInstructions = labelingInstructions;
            return this;
        }

        /**
         * @param labelingInstructions The labeling instructions for human labelers in rich text format
         * 
         * @return builder
         * 
         */
        public Builder labelingInstructions(String labelingInstructions) {
            return labelingInstructions(Output.of(labelingInstructions));
        }

        /**
         * @param lifecycleDetails A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param state The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the resource was created, in the timestamp format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the resource was created, in the timestamp format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The date and time the resource was last updated, in the timestamp format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time the resource was last updated, in the timestamp format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public DatasetState build() {
            return $;
        }
    }

}
