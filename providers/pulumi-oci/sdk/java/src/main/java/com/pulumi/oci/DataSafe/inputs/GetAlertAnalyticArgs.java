// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetAlertAnalyticArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAlertAnalyticArgs Empty = new GetAlertAnalyticArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private Output</* @Nullable */ String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Output</* @Nullable */ String> accessLevel() {
        return this.accessLevel;
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private Output</* @Nullable */ Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Output</* @Nullable */ Boolean> compartmentIdInSubtree() {
        return this.compartmentIdInSubtree;
    }

    /**
     * A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
     * 
     */
    @Import(name="groupBies")
    private Output</* @Nullable */ List<String>> groupBies;

    /**
     * @return A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
     * 
     */
    public Output</* @Nullable */ List<String>> groupBies() {
        return this.groupBies;
    }

    /**
     * Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
     * 
     */
    @Import(name="queryTimeZone")
    private Output</* @Nullable */ String> queryTimeZone;

    /**
     * @return Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
     * 
     */
    public Output</* @Nullable */ String> queryTimeZone() {
        return this.queryTimeZone;
    }

    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     * 
     */
    @Import(name="scimQuery")
    private Output</* @Nullable */ String> scimQuery;

    /**
     * @return The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     * 
     */
    public Output</* @Nullable */ String> scimQuery() {
        return this.scimQuery;
    }

    /**
     * Specifies a subset of summarized fields to be returned in the response.
     * 
     */
    @Import(name="summaryFields")
    private Output</* @Nullable */ List<String>> summaryFields;

    /**
     * @return Specifies a subset of summarized fields to be returned in the response.
     * 
     */
    public Output</* @Nullable */ List<String>> summaryFields() {
        return this.summaryFields;
    }

    /**
     * An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeEnded")
    private Output</* @Nullable */ String> timeEnded;

    /**
     * @return An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Output</* @Nullable */ String> timeEnded() {
        return this.timeEnded;
    }

    /**
     * An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeStarted")
    private Output</* @Nullable */ String> timeStarted;

    /**
     * @return An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Output</* @Nullable */ String> timeStarted() {
        return this.timeStarted;
    }

    private GetAlertAnalyticArgs() {}

    private GetAlertAnalyticArgs(GetAlertAnalyticArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.groupBies = $.groupBies;
        this.queryTimeZone = $.queryTimeZone;
        this.scimQuery = $.scimQuery;
        this.summaryFields = $.summaryFields;
        this.timeEnded = $.timeEnded;
        this.timeStarted = $.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAlertAnalyticArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAlertAnalyticArgs $;

        public Builder() {
            $ = new GetAlertAnalyticArgs();
        }

        public Builder(GetAlertAnalyticArgs defaults) {
            $ = new GetAlertAnalyticArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(Output</* @Nullable */ String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Output</* @Nullable */ Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        /**
         * @param groupBies A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(Output</* @Nullable */ List<String>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable List<String> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        /**
         * @param groupBies A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param queryTimeZone Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
         * 
         * @return builder
         * 
         */
        public Builder queryTimeZone(Output</* @Nullable */ String> queryTimeZone) {
            $.queryTimeZone = queryTimeZone;
            return this;
        }

        /**
         * @param queryTimeZone Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
         * 
         * @return builder
         * 
         */
        public Builder queryTimeZone(@Nullable String queryTimeZone) {
            return queryTimeZone(Output.of(queryTimeZone));
        }

        /**
         * @param scimQuery The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
         * 
         * @return builder
         * 
         */
        public Builder scimQuery(Output</* @Nullable */ String> scimQuery) {
            $.scimQuery = scimQuery;
            return this;
        }

        /**
         * @param scimQuery The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
         * 
         * @return builder
         * 
         */
        public Builder scimQuery(@Nullable String scimQuery) {
            return scimQuery(Output.of(scimQuery));
        }

        /**
         * @param summaryFields Specifies a subset of summarized fields to be returned in the response.
         * 
         * @return builder
         * 
         */
        public Builder summaryFields(Output</* @Nullable */ List<String>> summaryFields) {
            $.summaryFields = summaryFields;
            return this;
        }

        /**
         * @param summaryFields Specifies a subset of summarized fields to be returned in the response.
         * 
         * @return builder
         * 
         */
        public Builder summaryFields(@Nullable List<String> summaryFields) {
            return summaryFields(Output.of(summaryFields));
        }

        /**
         * @param summaryFields Specifies a subset of summarized fields to be returned in the response.
         * 
         * @return builder
         * 
         */
        public Builder summaryFields(String... summaryFields) {
            return summaryFields(List.of(summaryFields));
        }

        /**
         * @param timeEnded An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeEnded(Output</* @Nullable */ String> timeEnded) {
            $.timeEnded = timeEnded;
            return this;
        }

        /**
         * @param timeEnded An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeEnded(@Nullable String timeEnded) {
            return timeEnded(Output.of(timeEnded));
        }

        /**
         * @param timeStarted An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeStarted(Output</* @Nullable */ String> timeStarted) {
            $.timeStarted = timeStarted;
            return this;
        }

        /**
         * @param timeStarted An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeStarted(@Nullable String timeStarted) {
            return timeStarted(Output.of(timeStarted));
        }

        public GetAlertAnalyticArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
