// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.GetMysqlConfigurationsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetMysqlConfigurationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMysqlConfigurationsArgs Empty = new GetMysqlConfigurationsArgs();

    /**
     * The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The requested Configuration instance.
     * 
     */
    @Import(name="configurationId")
    private Output</* @Nullable */ String> configurationId;

    /**
     * @return The requested Configuration instance.
     * 
     */
    public Output</* @Nullable */ String> configurationId() {
        return this.configurationId;
    }

    /**
     * A filter to return only the resource matching the given display name exactly.
     * 
     */
    @Import(name="displayName")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    public Output</* @Nullable */ String> displayName() {
        return this.displayName;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetMysqlConfigurationsFilter>> filters;

    public Output</* @Nullable */ List<GetMysqlConfigurationsFilter>> filters() {
        return this.filters;
    }

    /**
     * The requested Shape name.
     * 
     */
    @Import(name="shapeName")
    private Output</* @Nullable */ String> shapeName;

    /**
     * @return The requested Shape name.
     * 
     */
    public Output</* @Nullable */ String> shapeName() {
        return this.shapeName;
    }

    /**
     * Configuration Lifecycle State
     * 
     */
    @Import(name="state")
    private Output</* @Nullable */ String> state;

    /**
     * @return Configuration Lifecycle State
     * 
     */
    public Output</* @Nullable */ String> state() {
        return this.state;
    }

    /**
     * The requested Configuration types.
     * 
     */
    @Import(name="types")
    private Output</* @Nullable */ List<String>> types;

    /**
     * @return The requested Configuration types.
     * 
     */
    public Output</* @Nullable */ List<String>> types() {
        return this.types;
    }

    private GetMysqlConfigurationsArgs() {}

    private GetMysqlConfigurationsArgs(GetMysqlConfigurationsArgs $) {
        this.compartmentId = $.compartmentId;
        this.configurationId = $.configurationId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.shapeName = $.shapeName;
        this.state = $.state;
        this.types = $.types;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMysqlConfigurationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMysqlConfigurationsArgs $;

        public Builder() {
            $ = new GetMysqlConfigurationsArgs();
        }

        public Builder(GetMysqlConfigurationsArgs defaults) {
            $ = new GetMysqlConfigurationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configurationId The requested Configuration instance.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(Output</* @Nullable */ String> configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param configurationId The requested Configuration instance.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable String configurationId) {
            return configurationId(Output.of(configurationId));
        }

        /**
         * @param displayName A filter to return only the resource matching the given display name exactly.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output</* @Nullable */ String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only the resource matching the given display name exactly.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(Output</* @Nullable */ List<GetMysqlConfigurationsFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetMysqlConfigurationsFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetMysqlConfigurationsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param shapeName The requested Shape name.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(Output</* @Nullable */ String> shapeName) {
            $.shapeName = shapeName;
            return this;
        }

        /**
         * @param shapeName The requested Shape name.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(@Nullable String shapeName) {
            return shapeName(Output.of(shapeName));
        }

        /**
         * @param state Configuration Lifecycle State
         * 
         * @return builder
         * 
         */
        public Builder state(Output</* @Nullable */ String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Configuration Lifecycle State
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            return state(Output.of(state));
        }

        /**
         * @param types The requested Configuration types.
         * 
         * @return builder
         * 
         */
        public Builder types(Output</* @Nullable */ List<String>> types) {
            $.types = types;
            return this;
        }

        /**
         * @param types The requested Configuration types.
         * 
         * @return builder
         * 
         */
        public Builder types(@Nullable List<String> types) {
            return types(Output.of(types));
        }

        /**
         * @param types The requested Configuration types.
         * 
         * @return builder
         * 
         */
        public Builder types(String... types) {
            return types(List.of(types));
        }

        public GetMysqlConfigurationsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
