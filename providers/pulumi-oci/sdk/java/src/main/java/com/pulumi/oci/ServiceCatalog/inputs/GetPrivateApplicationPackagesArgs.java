// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ServiceCatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ServiceCatalog.inputs.GetPrivateApplicationPackagesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPrivateApplicationPackagesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPrivateApplicationPackagesArgs Empty = new GetPrivateApplicationPackagesArgs();

    /**
     * Exact match name filter.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Exact match name filter.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetPrivateApplicationPackagesFilterArgs>> filters;

    public Optional<Output<List<GetPrivateApplicationPackagesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Name of the package type. If multiple package types are provided, then any resource with one or more matching package types will be returned.
     * 
     */
    @Import(name="packageTypes")
    private @Nullable Output<List<String>> packageTypes;

    /**
     * @return Name of the package type. If multiple package types are provided, then any resource with one or more matching package types will be returned.
     * 
     */
    public Optional<Output<List<String>>> packageTypes() {
        return Optional.ofNullable(this.packageTypes);
    }

    /**
     * The unique identifier for the private application.
     * 
     */
    @Import(name="privateApplicationId", required=true)
    private Output<String> privateApplicationId;

    /**
     * @return The unique identifier for the private application.
     * 
     */
    public Output<String> privateApplicationId() {
        return this.privateApplicationId;
    }

    /**
     * The unique identifier for the private application package.
     * 
     */
    @Import(name="privateApplicationPackageId")
    private @Nullable Output<String> privateApplicationPackageId;

    /**
     * @return The unique identifier for the private application package.
     * 
     */
    public Optional<Output<String>> privateApplicationPackageId() {
        return Optional.ofNullable(this.privateApplicationPackageId);
    }

    private GetPrivateApplicationPackagesArgs() {}

    private GetPrivateApplicationPackagesArgs(GetPrivateApplicationPackagesArgs $) {
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.packageTypes = $.packageTypes;
        this.privateApplicationId = $.privateApplicationId;
        this.privateApplicationPackageId = $.privateApplicationPackageId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPrivateApplicationPackagesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPrivateApplicationPackagesArgs $;

        public Builder() {
            $ = new GetPrivateApplicationPackagesArgs();
        }

        public Builder(GetPrivateApplicationPackagesArgs defaults) {
            $ = new GetPrivateApplicationPackagesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Exact match name filter.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Exact match name filter.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetPrivateApplicationPackagesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetPrivateApplicationPackagesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetPrivateApplicationPackagesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param packageTypes Name of the package type. If multiple package types are provided, then any resource with one or more matching package types will be returned.
         * 
         * @return builder
         * 
         */
        public Builder packageTypes(@Nullable Output<List<String>> packageTypes) {
            $.packageTypes = packageTypes;
            return this;
        }

        /**
         * @param packageTypes Name of the package type. If multiple package types are provided, then any resource with one or more matching package types will be returned.
         * 
         * @return builder
         * 
         */
        public Builder packageTypes(List<String> packageTypes) {
            return packageTypes(Output.of(packageTypes));
        }

        /**
         * @param packageTypes Name of the package type. If multiple package types are provided, then any resource with one or more matching package types will be returned.
         * 
         * @return builder
         * 
         */
        public Builder packageTypes(String... packageTypes) {
            return packageTypes(List.of(packageTypes));
        }

        /**
         * @param privateApplicationId The unique identifier for the private application.
         * 
         * @return builder
         * 
         */
        public Builder privateApplicationId(Output<String> privateApplicationId) {
            $.privateApplicationId = privateApplicationId;
            return this;
        }

        /**
         * @param privateApplicationId The unique identifier for the private application.
         * 
         * @return builder
         * 
         */
        public Builder privateApplicationId(String privateApplicationId) {
            return privateApplicationId(Output.of(privateApplicationId));
        }

        /**
         * @param privateApplicationPackageId The unique identifier for the private application package.
         * 
         * @return builder
         * 
         */
        public Builder privateApplicationPackageId(@Nullable Output<String> privateApplicationPackageId) {
            $.privateApplicationPackageId = privateApplicationPackageId;
            return this;
        }

        /**
         * @param privateApplicationPackageId The unique identifier for the private application package.
         * 
         * @return builder
         * 
         */
        public Builder privateApplicationPackageId(String privateApplicationPackageId) {
            return privateApplicationPackageId(Output.of(privateApplicationPackageId));
        }

        public GetPrivateApplicationPackagesArgs build() {
            $.privateApplicationId = Objects.requireNonNull($.privateApplicationId, "expected parameter 'privateApplicationId' to be non-null");
            return $;
        }
    }

}
