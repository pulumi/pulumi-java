// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Optimizer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileTargetTagsItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProfileTargetTagsItemArgs Empty = new ProfileTargetTagsItemArgs();

    /**
     * (Updatable) The name you use to refer to the tag, also known as the tag key.
     * 
     */
    @Import(name="tagDefinitionName", required=true)
    private Output<String> tagDefinitionName;

    /**
     * @return (Updatable) The name you use to refer to the tag, also known as the tag key.
     * 
     */
    public Output<String> tagDefinitionName() {
        return this.tagDefinitionName;
    }

    /**
     * (Updatable) The name of the tag namespace.
     * 
     */
    @Import(name="tagNamespaceName", required=true)
    private Output<String> tagNamespaceName;

    /**
     * @return (Updatable) The name of the tag namespace.
     * 
     */
    public Output<String> tagNamespaceName() {
        return this.tagNamespaceName;
    }

    /**
     * (Updatable) Specifies which tag value types in the `tagValues` field result in overrides of the recommendation criteria.
     * 
     */
    @Import(name="tagValueType", required=true)
    private Output<String> tagValueType;

    /**
     * @return (Updatable) Specifies which tag value types in the `tagValues` field result in overrides of the recommendation criteria.
     * 
     */
    public Output<String> tagValueType() {
        return this.tagValueType;
    }

    /**
     * (Updatable) The list of tag values. The tag value is the value that the user applying the tag adds to the tag key.
     * 
     */
    @Import(name="tagValues")
    private @Nullable Output<List<String>> tagValues;

    /**
     * @return (Updatable) The list of tag values. The tag value is the value that the user applying the tag adds to the tag key.
     * 
     */
    public Optional<Output<List<String>>> tagValues() {
        return Optional.ofNullable(this.tagValues);
    }

    private ProfileTargetTagsItemArgs() {}

    private ProfileTargetTagsItemArgs(ProfileTargetTagsItemArgs $) {
        this.tagDefinitionName = $.tagDefinitionName;
        this.tagNamespaceName = $.tagNamespaceName;
        this.tagValueType = $.tagValueType;
        this.tagValues = $.tagValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileTargetTagsItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileTargetTagsItemArgs $;

        public Builder() {
            $ = new ProfileTargetTagsItemArgs();
        }

        public Builder(ProfileTargetTagsItemArgs defaults) {
            $ = new ProfileTargetTagsItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param tagDefinitionName (Updatable) The name you use to refer to the tag, also known as the tag key.
         * 
         * @return builder
         * 
         */
        public Builder tagDefinitionName(Output<String> tagDefinitionName) {
            $.tagDefinitionName = tagDefinitionName;
            return this;
        }

        /**
         * @param tagDefinitionName (Updatable) The name you use to refer to the tag, also known as the tag key.
         * 
         * @return builder
         * 
         */
        public Builder tagDefinitionName(String tagDefinitionName) {
            return tagDefinitionName(Output.of(tagDefinitionName));
        }

        /**
         * @param tagNamespaceName (Updatable) The name of the tag namespace.
         * 
         * @return builder
         * 
         */
        public Builder tagNamespaceName(Output<String> tagNamespaceName) {
            $.tagNamespaceName = tagNamespaceName;
            return this;
        }

        /**
         * @param tagNamespaceName (Updatable) The name of the tag namespace.
         * 
         * @return builder
         * 
         */
        public Builder tagNamespaceName(String tagNamespaceName) {
            return tagNamespaceName(Output.of(tagNamespaceName));
        }

        /**
         * @param tagValueType (Updatable) Specifies which tag value types in the `tagValues` field result in overrides of the recommendation criteria.
         * 
         * @return builder
         * 
         */
        public Builder tagValueType(Output<String> tagValueType) {
            $.tagValueType = tagValueType;
            return this;
        }

        /**
         * @param tagValueType (Updatable) Specifies which tag value types in the `tagValues` field result in overrides of the recommendation criteria.
         * 
         * @return builder
         * 
         */
        public Builder tagValueType(String tagValueType) {
            return tagValueType(Output.of(tagValueType));
        }

        /**
         * @param tagValues (Updatable) The list of tag values. The tag value is the value that the user applying the tag adds to the tag key.
         * 
         * @return builder
         * 
         */
        public Builder tagValues(@Nullable Output<List<String>> tagValues) {
            $.tagValues = tagValues;
            return this;
        }

        /**
         * @param tagValues (Updatable) The list of tag values. The tag value is the value that the user applying the tag adds to the tag key.
         * 
         * @return builder
         * 
         */
        public Builder tagValues(List<String> tagValues) {
            return tagValues(Output.of(tagValues));
        }

        /**
         * @param tagValues (Updatable) The list of tag values. The tag value is the value that the user applying the tag adds to the tag key.
         * 
         * @return builder
         * 
         */
        public Builder tagValues(String... tagValues) {
            return tagValues(List.of(tagValues));
        }

        public ProfileTargetTagsItemArgs build() {
            $.tagDefinitionName = Objects.requireNonNull($.tagDefinitionName, "expected parameter 'tagDefinitionName' to be non-null");
            $.tagNamespaceName = Objects.requireNonNull($.tagNamespaceName, "expected parameter 'tagNamespaceName' to be non-null");
            $.tagValueType = Objects.requireNonNull($.tagValueType, "expected parameter 'tagValueType' to be non-null");
            return $;
        }
    }

}
