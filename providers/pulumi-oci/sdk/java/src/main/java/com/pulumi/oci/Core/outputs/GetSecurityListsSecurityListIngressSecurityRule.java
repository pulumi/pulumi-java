// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListIngressSecurityRuleIcmpOption;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListIngressSecurityRuleTcpOption;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListIngressSecurityRuleUdpOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecurityListsSecurityListIngressSecurityRule {
    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    private final String description;
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    private final List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions;
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    private final String protocol;
    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    private final String source;
    /**
     * @return Type of source for the rule. The default is `CIDR_BLOCK`.
     * * `CIDR_BLOCK`: If the rule&#39;s `source` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule&#39;s `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
     * 
     */
    private final String sourceType;
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if ingress traffic allows TCP destination port 80, there should be an egress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    private final Boolean stateless;
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    private final List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions;
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    private final List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions;

    @CustomType.Constructor
    private GetSecurityListsSecurityListIngressSecurityRule(
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("icmpOptions") List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("source") String source,
        @CustomType.Parameter("sourceType") String sourceType,
        @CustomType.Parameter("stateless") Boolean stateless,
        @CustomType.Parameter("tcpOptions") List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions,
        @CustomType.Parameter("udpOptions") List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions) {
        this.description = description;
        this.icmpOptions = icmpOptions;
        this.protocol = protocol;
        this.source = source;
        this.sourceType = sourceType;
        this.stateless = stateless;
        this.tcpOptions = tcpOptions;
        this.udpOptions = udpOptions;
    }

    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    public List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions() {
        return this.icmpOptions;
    }
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Type of source for the rule. The default is `CIDR_BLOCK`.
     * * `CIDR_BLOCK`: If the rule&#39;s `source` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule&#39;s `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if ingress traffic allows TCP destination port 80, there should be an egress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    public Boolean stateless() {
        return this.stateless;
    }
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    public List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions() {
        return this.tcpOptions;
    }
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    public List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions() {
        return this.udpOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityListsSecurityListIngressSecurityRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions;
        private String protocol;
        private String source;
        private String sourceType;
        private Boolean stateless;
        private List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions;
        private List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSecurityListsSecurityListIngressSecurityRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.icmpOptions = defaults.icmpOptions;
    	      this.protocol = defaults.protocol;
    	      this.source = defaults.source;
    	      this.sourceType = defaults.sourceType;
    	      this.stateless = defaults.stateless;
    	      this.tcpOptions = defaults.tcpOptions;
    	      this.udpOptions = defaults.udpOptions;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder icmpOptions(List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions) {
            this.icmpOptions = Objects.requireNonNull(icmpOptions);
            return this;
        }
        public Builder icmpOptions(GetSecurityListsSecurityListIngressSecurityRuleIcmpOption... icmpOptions) {
            return icmpOptions(List.of(icmpOptions));
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        public Builder sourceType(String sourceType) {
            this.sourceType = Objects.requireNonNull(sourceType);
            return this;
        }
        public Builder stateless(Boolean stateless) {
            this.stateless = Objects.requireNonNull(stateless);
            return this;
        }
        public Builder tcpOptions(List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions) {
            this.tcpOptions = Objects.requireNonNull(tcpOptions);
            return this;
        }
        public Builder tcpOptions(GetSecurityListsSecurityListIngressSecurityRuleTcpOption... tcpOptions) {
            return tcpOptions(List.of(tcpOptions));
        }
        public Builder udpOptions(List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions) {
            this.udpOptions = Objects.requireNonNull(udpOptions);
            return this;
        }
        public Builder udpOptions(GetSecurityListsSecurityListIngressSecurityRuleUdpOption... udpOptions) {
            return udpOptions(List.of(udpOptions));
        }        public GetSecurityListsSecurityListIngressSecurityRule build() {
            return new GetSecurityListsSecurityListIngressSecurityRule(description, icmpOptions, protocol, source, sourceType, stateless, tcpOptions, udpOptions);
        }
    }
}
