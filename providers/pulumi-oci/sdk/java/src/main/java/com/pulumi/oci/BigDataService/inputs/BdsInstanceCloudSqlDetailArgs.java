// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.BigDataService.inputs.BdsInstanceCloudSqlDetailKerberosDetailArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceCloudSqlDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceCloudSqlDetailArgs Empty = new BdsInstanceCloudSqlDetailArgs();

    /**
     * The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
     * 
     */
    @Import(name="blockVolumeSizeInGbs", required=true)
    private Output<String> blockVolumeSizeInGbs;

    /**
     * @return The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
     * 
     */
    public Output<String> blockVolumeSizeInGbs() {
        return this.blockVolumeSizeInGbs;
    }

    /**
     * IP address of the node.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IP address of the node.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Boolean flag specifying whether or not Kerberos principals are mapped to database users.
     * 
     */
    @Import(name="isKerberosMappedToDatabaseUsers")
    private @Nullable Output<Boolean> isKerberosMappedToDatabaseUsers;

    /**
     * @return Boolean flag specifying whether or not Kerberos principals are mapped to database users.
     * 
     */
    public Optional<Output<Boolean>> isKerberosMappedToDatabaseUsers() {
        return Optional.ofNullable(this.isKerberosMappedToDatabaseUsers);
    }

    /**
     * Details about the Kerberos principals.
     * 
     */
    @Import(name="kerberosDetails")
    private @Nullable Output<List<BdsInstanceCloudSqlDetailKerberosDetailArgs>> kerberosDetails;

    /**
     * @return Details about the Kerberos principals.
     * 
     */
    public Optional<Output<List<BdsInstanceCloudSqlDetailKerberosDetailArgs>>> kerberosDetails() {
        return Optional.ofNullable(this.kerberosDetails);
    }

    /**
     * (Updatable) Shape of the node.
     * 
     */
    @Import(name="shape", required=true)
    private Output<String> shape;

    /**
     * @return (Updatable) Shape of the node.
     * 
     */
    public Output<String> shape() {
        return this.shape;
    }

    private BdsInstanceCloudSqlDetailArgs() {}

    private BdsInstanceCloudSqlDetailArgs(BdsInstanceCloudSqlDetailArgs $) {
        this.blockVolumeSizeInGbs = $.blockVolumeSizeInGbs;
        this.ipAddress = $.ipAddress;
        this.isKerberosMappedToDatabaseUsers = $.isKerberosMappedToDatabaseUsers;
        this.kerberosDetails = $.kerberosDetails;
        this.shape = $.shape;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceCloudSqlDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceCloudSqlDetailArgs $;

        public Builder() {
            $ = new BdsInstanceCloudSqlDetailArgs();
        }

        public Builder(BdsInstanceCloudSqlDetailArgs defaults) {
            $ = new BdsInstanceCloudSqlDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockVolumeSizeInGbs The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeSizeInGbs(Output<String> blockVolumeSizeInGbs) {
            $.blockVolumeSizeInGbs = blockVolumeSizeInGbs;
            return this;
        }

        /**
         * @param blockVolumeSizeInGbs The size of block volume in GB to be attached to a given node. All the details needed for attaching the block volume are managed by service itself.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeSizeInGbs(String blockVolumeSizeInGbs) {
            return blockVolumeSizeInGbs(Output.of(blockVolumeSizeInGbs));
        }

        /**
         * @param ipAddress IP address of the node.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IP address of the node.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param isKerberosMappedToDatabaseUsers Boolean flag specifying whether or not Kerberos principals are mapped to database users.
         * 
         * @return builder
         * 
         */
        public Builder isKerberosMappedToDatabaseUsers(@Nullable Output<Boolean> isKerberosMappedToDatabaseUsers) {
            $.isKerberosMappedToDatabaseUsers = isKerberosMappedToDatabaseUsers;
            return this;
        }

        /**
         * @param isKerberosMappedToDatabaseUsers Boolean flag specifying whether or not Kerberos principals are mapped to database users.
         * 
         * @return builder
         * 
         */
        public Builder isKerberosMappedToDatabaseUsers(Boolean isKerberosMappedToDatabaseUsers) {
            return isKerberosMappedToDatabaseUsers(Output.of(isKerberosMappedToDatabaseUsers));
        }

        /**
         * @param kerberosDetails Details about the Kerberos principals.
         * 
         * @return builder
         * 
         */
        public Builder kerberosDetails(@Nullable Output<List<BdsInstanceCloudSqlDetailKerberosDetailArgs>> kerberosDetails) {
            $.kerberosDetails = kerberosDetails;
            return this;
        }

        /**
         * @param kerberosDetails Details about the Kerberos principals.
         * 
         * @return builder
         * 
         */
        public Builder kerberosDetails(List<BdsInstanceCloudSqlDetailKerberosDetailArgs> kerberosDetails) {
            return kerberosDetails(Output.of(kerberosDetails));
        }

        /**
         * @param kerberosDetails Details about the Kerberos principals.
         * 
         * @return builder
         * 
         */
        public Builder kerberosDetails(BdsInstanceCloudSqlDetailKerberosDetailArgs... kerberosDetails) {
            return kerberosDetails(List.of(kerberosDetails));
        }

        /**
         * @param shape (Updatable) Shape of the node.
         * 
         * @return builder
         * 
         */
        public Builder shape(Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape (Updatable) Shape of the node.
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        public BdsInstanceCloudSqlDetailArgs build() {
            $.blockVolumeSizeInGbs = Objects.requireNonNull($.blockVolumeSizeInGbs, "expected parameter 'blockVolumeSizeInGbs' to be non-null");
            $.shape = Objects.requireNonNull($.shape, "expected parameter 'shape' to be non-null");
            return $;
        }
    }

}
