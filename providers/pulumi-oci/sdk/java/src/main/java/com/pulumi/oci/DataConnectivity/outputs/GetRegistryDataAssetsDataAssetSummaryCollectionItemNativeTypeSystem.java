// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRef;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem {
    /**
     * @return A user defined description for the object.
     * 
     */
    private final String description;
    /**
     * @return Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    private final String identifier;
    /**
     * @return The identifying key for the object.
     * 
     */
    private final String key;
    /**
     * @return The property which disciminates the subtypes.
     * 
     */
    private final String modelType;
    /**
     * @return The model version of an object.
     * 
     */
    private final String modelVersion;
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    private final String name;
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private final Integer objectStatus;
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    private final Integer objectVersion;
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    private final GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRef parentRef;
    /**
     * @return The type system to map from.
     * 
     */
    private final Map<String,Object> typeMappingFrom;
    /**
     * @return The type system to map to.
     * 
     */
    private final Map<String,Object> typeMappingTo;
    /**
     * @return An array of types.
     * 
     */
    private final List<GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemType> types;

    @CustomType.Constructor
    private GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem(
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("identifier") String identifier,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("modelType") String modelType,
        @CustomType.Parameter("modelVersion") String modelVersion,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("objectStatus") Integer objectStatus,
        @CustomType.Parameter("objectVersion") Integer objectVersion,
        @CustomType.Parameter("parentRef") GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRef parentRef,
        @CustomType.Parameter("typeMappingFrom") Map<String,Object> typeMappingFrom,
        @CustomType.Parameter("typeMappingTo") Map<String,Object> typeMappingTo,
        @CustomType.Parameter("types") List<GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemType> types) {
        this.description = description;
        this.identifier = identifier;
        this.key = key;
        this.modelType = modelType;
        this.modelVersion = modelVersion;
        this.name = name;
        this.objectStatus = objectStatus;
        this.objectVersion = objectVersion;
        this.parentRef = parentRef;
        this.typeMappingFrom = typeMappingFrom;
        this.typeMappingTo = typeMappingTo;
        this.types = types;
    }

    /**
     * @return A user defined description for the object.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return The identifying key for the object.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The property which disciminates the subtypes.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The model version of an object.
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Integer objectStatus() {
        return this.objectStatus;
    }
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    public Integer objectVersion() {
        return this.objectVersion;
    }
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    public GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRef parentRef() {
        return this.parentRef;
    }
    /**
     * @return The type system to map from.
     * 
     */
    public Map<String,Object> typeMappingFrom() {
        return this.typeMappingFrom;
    }
    /**
     * @return The type system to map to.
     * 
     */
    public Map<String,Object> typeMappingTo() {
        return this.typeMappingTo;
    }
    /**
     * @return An array of types.
     * 
     */
    public List<GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemType> types() {
        return this.types;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private String identifier;
        private String key;
        private String modelType;
        private String modelVersion;
        private String name;
        private Integer objectStatus;
        private Integer objectVersion;
        private GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRef parentRef;
        private Map<String,Object> typeMappingFrom;
        private Map<String,Object> typeMappingTo;
        private List<GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemType> types;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.identifier = defaults.identifier;
    	      this.key = defaults.key;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.parentRef = defaults.parentRef;
    	      this.typeMappingFrom = defaults.typeMappingFrom;
    	      this.typeMappingTo = defaults.typeMappingTo;
    	      this.types = defaults.types;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder modelType(String modelType) {
            this.modelType = Objects.requireNonNull(modelType);
            return this;
        }
        public Builder modelVersion(String modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder objectStatus(Integer objectStatus) {
            this.objectStatus = Objects.requireNonNull(objectStatus);
            return this;
        }
        public Builder objectVersion(Integer objectVersion) {
            this.objectVersion = Objects.requireNonNull(objectVersion);
            return this;
        }
        public Builder parentRef(GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRef parentRef) {
            this.parentRef = Objects.requireNonNull(parentRef);
            return this;
        }
        public Builder typeMappingFrom(Map<String,Object> typeMappingFrom) {
            this.typeMappingFrom = Objects.requireNonNull(typeMappingFrom);
            return this;
        }
        public Builder typeMappingTo(Map<String,Object> typeMappingTo) {
            this.typeMappingTo = Objects.requireNonNull(typeMappingTo);
            return this;
        }
        public Builder types(List<GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemType> types) {
            this.types = Objects.requireNonNull(types);
            return this;
        }
        public Builder types(GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemType... types) {
            return types(List.of(types));
        }        public GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem build() {
            return new GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem(description, identifier, key, modelType, modelVersion, name, objectStatus, objectVersion, parentRef, typeMappingFrom, typeMappingTo, types);
        }
    }
}
