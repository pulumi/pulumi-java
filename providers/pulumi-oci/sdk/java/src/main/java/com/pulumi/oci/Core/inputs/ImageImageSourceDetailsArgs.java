// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageImageSourceDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageImageSourceDetailsArgs Empty = new ImageImageSourceDetailsArgs();

    /**
     * The Object Storage bucket for the image.
     * 
     */
    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    /**
     * @return The Object Storage bucket for the image.
     * 
     */
    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    /**
     * The Object Storage namespace for the image.
     * 
     */
    @Import(name="namespaceName")
    private @Nullable Output<String> namespaceName;

    /**
     * @return The Object Storage namespace for the image.
     * 
     */
    public Optional<Output<String>> namespaceName() {
        return Optional.ofNullable(this.namespaceName);
    }

    /**
     * The Object Storage name for the image.
     * 
     */
    @Import(name="objectName")
    private @Nullable Output<String> objectName;

    /**
     * @return The Object Storage name for the image.
     * 
     */
    public Optional<Output<String>> objectName() {
        return Optional.ofNullable(this.objectName);
    }

    /**
     * The image&#39;s operating system.  Example: `Oracle Linux`
     * 
     */
    @Import(name="operatingSystem")
    private @Nullable Output<String> operatingSystem;

    /**
     * @return The image&#39;s operating system.  Example: `Oracle Linux`
     * 
     */
    public Optional<Output<String>> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }

    /**
     * The image&#39;s operating system version.  Example: `7.2`
     * 
     */
    @Import(name="operatingSystemVersion")
    private @Nullable Output<String> operatingSystemVersion;

    /**
     * @return The image&#39;s operating system version.  Example: `7.2`
     * 
     */
    public Optional<Output<String>> operatingSystemVersion() {
        return Optional.ofNullable(this.operatingSystemVersion);
    }

    /**
     * The format of the image to be imported.  Only monolithic images are supported. This attribute is not used for exported Oracle images with the Oracle Cloud Infrastructure image format. Allowed values are:
     * * `QCOW2`
     * * `VMDK`
     * 
     */
    @Import(name="sourceImageType")
    private @Nullable Output<String> sourceImageType;

    /**
     * @return The format of the image to be imported.  Only monolithic images are supported. This attribute is not used for exported Oracle images with the Oracle Cloud Infrastructure image format. Allowed values are:
     * * `QCOW2`
     * * `VMDK`
     * 
     */
    public Optional<Output<String>> sourceImageType() {
        return Optional.ofNullable(this.sourceImageType);
    }

    /**
     * The source type for the image. Use `objectStorageTuple` when specifying the namespace, bucket name, and object name. Use `objectStorageUri` when specifying the Object Storage URL.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return The source type for the image. Use `objectStorageTuple` when specifying the namespace, bucket name, and object name. Use `objectStorageUri` when specifying the Object Storage URL.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    /**
     * The Object Storage URL for the image.
     * 
     */
    @Import(name="sourceUri")
    private @Nullable Output<String> sourceUri;

    /**
     * @return The Object Storage URL for the image.
     * 
     */
    public Optional<Output<String>> sourceUri() {
        return Optional.ofNullable(this.sourceUri);
    }

    private ImageImageSourceDetailsArgs() {}

    private ImageImageSourceDetailsArgs(ImageImageSourceDetailsArgs $) {
        this.bucketName = $.bucketName;
        this.namespaceName = $.namespaceName;
        this.objectName = $.objectName;
        this.operatingSystem = $.operatingSystem;
        this.operatingSystemVersion = $.operatingSystemVersion;
        this.sourceImageType = $.sourceImageType;
        this.sourceType = $.sourceType;
        this.sourceUri = $.sourceUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageImageSourceDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageImageSourceDetailsArgs $;

        public Builder() {
            $ = new ImageImageSourceDetailsArgs();
        }

        public Builder(ImageImageSourceDetailsArgs defaults) {
            $ = new ImageImageSourceDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName The Object Storage bucket for the image.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName The Object Storage bucket for the image.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param namespaceName The Object Storage namespace for the image.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(@Nullable Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName The Object Storage namespace for the image.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        /**
         * @param objectName The Object Storage name for the image.
         * 
         * @return builder
         * 
         */
        public Builder objectName(@Nullable Output<String> objectName) {
            $.objectName = objectName;
            return this;
        }

        /**
         * @param objectName The Object Storage name for the image.
         * 
         * @return builder
         * 
         */
        public Builder objectName(String objectName) {
            return objectName(Output.of(objectName));
        }

        /**
         * @param operatingSystem The image&#39;s operating system.  Example: `Oracle Linux`
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(@Nullable Output<String> operatingSystem) {
            $.operatingSystem = operatingSystem;
            return this;
        }

        /**
         * @param operatingSystem The image&#39;s operating system.  Example: `Oracle Linux`
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(String operatingSystem) {
            return operatingSystem(Output.of(operatingSystem));
        }

        /**
         * @param operatingSystemVersion The image&#39;s operating system version.  Example: `7.2`
         * 
         * @return builder
         * 
         */
        public Builder operatingSystemVersion(@Nullable Output<String> operatingSystemVersion) {
            $.operatingSystemVersion = operatingSystemVersion;
            return this;
        }

        /**
         * @param operatingSystemVersion The image&#39;s operating system version.  Example: `7.2`
         * 
         * @return builder
         * 
         */
        public Builder operatingSystemVersion(String operatingSystemVersion) {
            return operatingSystemVersion(Output.of(operatingSystemVersion));
        }

        /**
         * @param sourceImageType The format of the image to be imported.  Only monolithic images are supported. This attribute is not used for exported Oracle images with the Oracle Cloud Infrastructure image format. Allowed values are:
         * * `QCOW2`
         * * `VMDK`
         * 
         * @return builder
         * 
         */
        public Builder sourceImageType(@Nullable Output<String> sourceImageType) {
            $.sourceImageType = sourceImageType;
            return this;
        }

        /**
         * @param sourceImageType The format of the image to be imported.  Only monolithic images are supported. This attribute is not used for exported Oracle images with the Oracle Cloud Infrastructure image format. Allowed values are:
         * * `QCOW2`
         * * `VMDK`
         * 
         * @return builder
         * 
         */
        public Builder sourceImageType(String sourceImageType) {
            return sourceImageType(Output.of(sourceImageType));
        }

        /**
         * @param sourceType The source type for the image. Use `objectStorageTuple` when specifying the namespace, bucket name, and object name. Use `objectStorageUri` when specifying the Object Storage URL.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The source type for the image. Use `objectStorageTuple` when specifying the namespace, bucket name, and object name. Use `objectStorageUri` when specifying the Object Storage URL.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param sourceUri The Object Storage URL for the image.
         * 
         * @return builder
         * 
         */
        public Builder sourceUri(@Nullable Output<String> sourceUri) {
            $.sourceUri = sourceUri;
            return this;
        }

        /**
         * @param sourceUri The Object Storage URL for the image.
         * 
         * @return builder
         * 
         */
        public Builder sourceUri(String sourceUri) {
            return sourceUri(Output.of(sourceUri));
        }

        public ImageImageSourceDetailsArgs build() {
            $.sourceType = Objects.requireNonNull($.sourceType, "expected parameter 'sourceType' to be non-null");
            return $;
        }
    }

}
