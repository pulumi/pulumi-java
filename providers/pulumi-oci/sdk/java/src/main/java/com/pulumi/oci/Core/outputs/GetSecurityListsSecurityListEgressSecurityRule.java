// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListEgressSecurityRuleIcmpOption;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListEgressSecurityRuleTcpOption;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListEgressSecurityRuleUdpOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecurityListsSecurityListEgressSecurityRule {
    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    private final String description;
    /**
     * @return Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     * 
     */
    private final String destination;
    /**
     * @return Type of destination for the rule. The default is `CIDR_BLOCK`.
     * 
     */
    private final String destinationType;
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    private final List<GetSecurityListsSecurityListEgressSecurityRuleIcmpOption> icmpOptions;
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    private final String protocol;
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if ingress traffic allows TCP destination port 80, there should be an egress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    private final Boolean stateless;
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    private final List<GetSecurityListsSecurityListEgressSecurityRuleTcpOption> tcpOptions;
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    private final List<GetSecurityListsSecurityListEgressSecurityRuleUdpOption> udpOptions;

    @CustomType.Constructor
    private GetSecurityListsSecurityListEgressSecurityRule(
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("destination") String destination,
        @CustomType.Parameter("destinationType") String destinationType,
        @CustomType.Parameter("icmpOptions") List<GetSecurityListsSecurityListEgressSecurityRuleIcmpOption> icmpOptions,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("stateless") Boolean stateless,
        @CustomType.Parameter("tcpOptions") List<GetSecurityListsSecurityListEgressSecurityRuleTcpOption> tcpOptions,
        @CustomType.Parameter("udpOptions") List<GetSecurityListsSecurityListEgressSecurityRuleUdpOption> udpOptions) {
        this.description = description;
        this.destination = destination;
        this.destinationType = destinationType;
        this.icmpOptions = icmpOptions;
        this.protocol = protocol;
        this.stateless = stateless;
        this.tcpOptions = tcpOptions;
        this.udpOptions = udpOptions;
    }

    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     * 
     */
    public String destination() {
        return this.destination;
    }
    /**
     * @return Type of destination for the rule. The default is `CIDR_BLOCK`.
     * 
     */
    public String destinationType() {
        return this.destinationType;
    }
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    public List<GetSecurityListsSecurityListEgressSecurityRuleIcmpOption> icmpOptions() {
        return this.icmpOptions;
    }
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if ingress traffic allows TCP destination port 80, there should be an egress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    public Boolean stateless() {
        return this.stateless;
    }
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    public List<GetSecurityListsSecurityListEgressSecurityRuleTcpOption> tcpOptions() {
        return this.tcpOptions;
    }
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    public List<GetSecurityListsSecurityListEgressSecurityRuleUdpOption> udpOptions() {
        return this.udpOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityListsSecurityListEgressSecurityRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private String destination;
        private String destinationType;
        private List<GetSecurityListsSecurityListEgressSecurityRuleIcmpOption> icmpOptions;
        private String protocol;
        private Boolean stateless;
        private List<GetSecurityListsSecurityListEgressSecurityRuleTcpOption> tcpOptions;
        private List<GetSecurityListsSecurityListEgressSecurityRuleUdpOption> udpOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSecurityListsSecurityListEgressSecurityRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destination = defaults.destination;
    	      this.destinationType = defaults.destinationType;
    	      this.icmpOptions = defaults.icmpOptions;
    	      this.protocol = defaults.protocol;
    	      this.stateless = defaults.stateless;
    	      this.tcpOptions = defaults.tcpOptions;
    	      this.udpOptions = defaults.udpOptions;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder destination(String destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }
        public Builder destinationType(String destinationType) {
            this.destinationType = Objects.requireNonNull(destinationType);
            return this;
        }
        public Builder icmpOptions(List<GetSecurityListsSecurityListEgressSecurityRuleIcmpOption> icmpOptions) {
            this.icmpOptions = Objects.requireNonNull(icmpOptions);
            return this;
        }
        public Builder icmpOptions(GetSecurityListsSecurityListEgressSecurityRuleIcmpOption... icmpOptions) {
            return icmpOptions(List.of(icmpOptions));
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder stateless(Boolean stateless) {
            this.stateless = Objects.requireNonNull(stateless);
            return this;
        }
        public Builder tcpOptions(List<GetSecurityListsSecurityListEgressSecurityRuleTcpOption> tcpOptions) {
            this.tcpOptions = Objects.requireNonNull(tcpOptions);
            return this;
        }
        public Builder tcpOptions(GetSecurityListsSecurityListEgressSecurityRuleTcpOption... tcpOptions) {
            return tcpOptions(List.of(tcpOptions));
        }
        public Builder udpOptions(List<GetSecurityListsSecurityListEgressSecurityRuleUdpOption> udpOptions) {
            this.udpOptions = Objects.requireNonNull(udpOptions);
            return this;
        }
        public Builder udpOptions(GetSecurityListsSecurityListEgressSecurityRuleUdpOption... udpOptions) {
            return udpOptions(List.of(udpOptions));
        }        public GetSecurityListsSecurityListEgressSecurityRule build() {
            return new GetSecurityListsSecurityListEgressSecurityRule(description, destination, destinationType, icmpOptions, protocol, stateless, tcpOptions, udpOptions);
        }
    }
}
