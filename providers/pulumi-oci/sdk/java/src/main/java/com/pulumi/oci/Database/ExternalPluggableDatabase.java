// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Database.ExternalPluggableDatabaseArgs;
import com.pulumi.oci.Database.inputs.ExternalPluggableDatabaseState;
import com.pulumi.oci.Database.outputs.ExternalPluggableDatabaseDatabaseManagementConfig;
import com.pulumi.oci.Database.outputs.ExternalPluggableDatabaseOperationsInsightsConfig;
import com.pulumi.oci.Utilities;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * This resource provides the External Pluggable Database resource in Oracle Cloud Infrastructure Database service.
 * 
 * Registers a new [ExternalPluggableDatabase](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalPluggableDatabaseDetails)
 * resource.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * ExternalPluggableDatabases can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:Database/externalPluggableDatabase:ExternalPluggableDatabase test_external_pluggable_database &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Database/externalPluggableDatabase:ExternalPluggableDatabase")
public class ExternalPluggableDatabase extends com.pulumi.resources.CustomResource {
    /**
     * The character set of the external database.
     * 
     */
    @Export(name="characterSet", type=String.class, parameters={})
    private Output<String> characterSet;

    /**
     * @return The character set of the external database.
     * 
     */
    public Output<String> characterSet() {
        return this.characterSet;
    }
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Export(name="compartmentId", type=String.class, parameters={})
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * The Oracle Database configuration
     * 
     */
    @Export(name="databaseConfiguration", type=String.class, parameters={})
    private Output<String> databaseConfiguration;

    /**
     * @return The Oracle Database configuration
     * 
     */
    public Output<String> databaseConfiguration() {
        return this.databaseConfiguration;
    }
    /**
     * The Oracle Database edition.
     * 
     */
    @Export(name="databaseEdition", type=String.class, parameters={})
    private Output<String> databaseEdition;

    /**
     * @return The Oracle Database edition.
     * 
     */
    public Output<String> databaseEdition() {
        return this.databaseEdition;
    }
    /**
     * The configuration of the Database Management service.
     * 
     */
    @Export(name="databaseManagementConfigs", type=List.class, parameters={ExternalPluggableDatabaseDatabaseManagementConfig.class})
    private Output<List<ExternalPluggableDatabaseDatabaseManagementConfig>> databaseManagementConfigs;

    /**
     * @return The configuration of the Database Management service.
     * 
     */
    public Output<List<ExternalPluggableDatabaseDatabaseManagementConfig>> databaseManagementConfigs() {
        return this.databaseManagementConfigs;
    }
    /**
     * The Oracle Database version.
     * 
     */
    @Export(name="databaseVersion", type=String.class, parameters={})
    private Output<String> databaseVersion;

    /**
     * @return The Oracle Database version.
     * 
     */
    public Output<String> databaseVersion() {
        return this.databaseVersion;
    }
    /**
     * The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
     * 
     */
    @Export(name="dbId", type=String.class, parameters={})
    private Output<String> dbId;

    /**
     * @return The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
     * 
     */
    public Output<String> dbId() {
        return this.dbId;
    }
    /**
     * The database packs licensed for the external Oracle Database.
     * 
     */
    @Export(name="dbPacks", type=String.class, parameters={})
    private Output<String> dbPacks;

    /**
     * @return The database packs licensed for the external Oracle Database.
     * 
     */
    public Output<String> dbPacks() {
        return this.dbPacks;
    }
    /**
     * The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    @Export(name="dbUniqueName", type=String.class, parameters={})
    private Output<String> dbUniqueName;

    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    public Output<String> dbUniqueName() {
        return this.dbUniqueName;
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Export(name="definedTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Output<Map<String,Object>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) The user-friendly name for the external database. The name does not have to be unique.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return (Updatable) The user-friendly name for the external database. The name does not have to be unique.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalContainerDatabaseDetails) that contains the specified [external pluggable database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalPluggableDatabaseDetails) resource.
     * 
     */
    @Export(name="externalContainerDatabaseId", type=String.class, parameters={})
    private Output<String> externalContainerDatabaseId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalContainerDatabaseDetails) that contains the specified [external pluggable database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalPluggableDatabaseDetails) resource.
     * 
     */
    public Output<String> externalContainerDatabaseId() {
        return this.externalContainerDatabaseId;
    }
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Export(name="freeformTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Output<Map<String,Object>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * Additional information about the current lifecycle state.
     * 
     */
    @Export(name="lifecycleDetails", type=String.class, parameters={})
    private Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Output<String> lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * The national character of the external database.
     * 
     */
    @Export(name="ncharacterSet", type=String.class, parameters={})
    private Output<String> ncharacterSet;

    /**
     * @return The national character of the external database.
     * 
     */
    public Output<String> ncharacterSet() {
        return this.ncharacterSet;
    }
    /**
     * The configuration of Operations Insights for the external database
     * 
     */
    @Export(name="operationsInsightsConfigs", type=List.class, parameters={ExternalPluggableDatabaseOperationsInsightsConfig.class})
    private Output<List<ExternalPluggableDatabaseOperationsInsightsConfig>> operationsInsightsConfigs;

    /**
     * @return The configuration of Operations Insights for the external database
     * 
     */
    public Output<List<ExternalPluggableDatabaseOperationsInsightsConfig>> operationsInsightsConfigs() {
        return this.operationsInsightsConfigs;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the the non-container database that was converted to a pluggable database to create this resource.
     * 
     */
    @Export(name="sourceId", type=String.class, parameters={})
    private Output<String> sourceId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the the non-container database that was converted to a pluggable database to create this resource.
     * 
     */
    public Output<String> sourceId() {
        return this.sourceId;
    }
    /**
     * The current state of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The current state of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The date and time the database was created.
     * 
     */
    @Export(name="timeCreated", type=String.class, parameters={})
    private Output<String> timeCreated;

    /**
     * @return The date and time the database was created.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
     * 
     */
    @Export(name="timeZone", type=String.class, parameters={})
    private Output<String> timeZone;

    /**
     * @return The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
     * 
     */
    public Output<String> timeZone() {
        return this.timeZone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ExternalPluggableDatabase(String name) {
        this(name, ExternalPluggableDatabaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ExternalPluggableDatabase(String name, ExternalPluggableDatabaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ExternalPluggableDatabase(String name, ExternalPluggableDatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Database/externalPluggableDatabase:ExternalPluggableDatabase", name, args == null ? ExternalPluggableDatabaseArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ExternalPluggableDatabase(String name, Output<String> id, @Nullable ExternalPluggableDatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Database/externalPluggableDatabase:ExternalPluggableDatabase", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ExternalPluggableDatabase get(String name, Output<String> id, @Nullable ExternalPluggableDatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ExternalPluggableDatabase(name, id, state, options);
    }
}
