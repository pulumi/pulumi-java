// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetDatabaseConnectionString;
import com.pulumi.oci.Database.outputs.GetDatabaseDatabase;
import com.pulumi.oci.Database.outputs.GetDatabaseDatabaseManagementConfig;
import com.pulumi.oci.Database.outputs.GetDatabaseDbBackupConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseResult {
    /**
     * @return The character set for the database.
     * 
     */
    private final String characterSet;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private final String compartmentId;
    /**
     * @return The Connection strings used to connect to the Oracle Database.
     * 
     */
    private final List<GetDatabaseConnectionString> connectionStrings;
    private final String databaseId;
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    private final List<GetDatabaseDatabaseManagementConfig> databaseManagementConfigs;
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    private final String databaseSoftwareImageId;
    private final List<GetDatabaseDatabase> databases;
    /**
     * @return Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    private final List<GetDatabaseDbBackupConfig> dbBackupConfigs;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    private final String dbHomeId;
    /**
     * @return The database name.
     * 
     */
    private final String dbName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    private final String dbSystemId;
    /**
     * @return A system-generated name for the database to ensure uniqueness within an Oracle Data Guard group (a primary database and its standby databases). The unique name cannot be changed.
     * 
     */
    private final String dbUniqueName;
    private final String dbVersion;
    /**
     * @return The database workload type.
     * 
     */
    private final String dbWorkload;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    private final String id;
    /**
     * @return True if the database is a container database.
     * 
     */
    private final Boolean isCdb;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private final String kmsKeyId;
    private final Boolean kmsKeyMigration;
    private final Integer kmsKeyRotation;
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    private final String kmsKeyVersionId;
    /**
     * @return The date and time when the latest database backup was created.
     * 
     */
    private final String lastBackupTimestamp;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return The national character set for the database.
     * 
     */
    private final String ncharacterSet;
    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    private final String pdbName;
    /**
     * @return Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    private final String sidPrefix;
    private final String source;
    /**
     * @return Point in time recovery timeStamp of the source database at which cloned database system is cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    private final String sourceDatabasePointInTimeRecoveryTimestamp;
    /**
     * @return The current state of the database.
     * 
     */
    private final String state;
    /**
     * @return The date and time the database was created.
     * 
     */
    private final String timeCreated;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    private final String vaultId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    private final String vmClusterId;

    @CustomType.Constructor
    private GetDatabaseResult(
        @CustomType.Parameter("characterSet") String characterSet,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("connectionStrings") List<GetDatabaseConnectionString> connectionStrings,
        @CustomType.Parameter("databaseId") String databaseId,
        @CustomType.Parameter("databaseManagementConfigs") List<GetDatabaseDatabaseManagementConfig> databaseManagementConfigs,
        @CustomType.Parameter("databaseSoftwareImageId") String databaseSoftwareImageId,
        @CustomType.Parameter("databases") List<GetDatabaseDatabase> databases,
        @CustomType.Parameter("dbBackupConfigs") List<GetDatabaseDbBackupConfig> dbBackupConfigs,
        @CustomType.Parameter("dbHomeId") String dbHomeId,
        @CustomType.Parameter("dbName") String dbName,
        @CustomType.Parameter("dbSystemId") String dbSystemId,
        @CustomType.Parameter("dbUniqueName") String dbUniqueName,
        @CustomType.Parameter("dbVersion") String dbVersion,
        @CustomType.Parameter("dbWorkload") String dbWorkload,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isCdb") Boolean isCdb,
        @CustomType.Parameter("kmsKeyId") String kmsKeyId,
        @CustomType.Parameter("kmsKeyMigration") Boolean kmsKeyMigration,
        @CustomType.Parameter("kmsKeyRotation") Integer kmsKeyRotation,
        @CustomType.Parameter("kmsKeyVersionId") String kmsKeyVersionId,
        @CustomType.Parameter("lastBackupTimestamp") String lastBackupTimestamp,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("ncharacterSet") String ncharacterSet,
        @CustomType.Parameter("pdbName") String pdbName,
        @CustomType.Parameter("sidPrefix") String sidPrefix,
        @CustomType.Parameter("source") String source,
        @CustomType.Parameter("sourceDatabasePointInTimeRecoveryTimestamp") String sourceDatabasePointInTimeRecoveryTimestamp,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("vaultId") String vaultId,
        @CustomType.Parameter("vmClusterId") String vmClusterId) {
        this.characterSet = characterSet;
        this.compartmentId = compartmentId;
        this.connectionStrings = connectionStrings;
        this.databaseId = databaseId;
        this.databaseManagementConfigs = databaseManagementConfigs;
        this.databaseSoftwareImageId = databaseSoftwareImageId;
        this.databases = databases;
        this.dbBackupConfigs = dbBackupConfigs;
        this.dbHomeId = dbHomeId;
        this.dbName = dbName;
        this.dbSystemId = dbSystemId;
        this.dbUniqueName = dbUniqueName;
        this.dbVersion = dbVersion;
        this.dbWorkload = dbWorkload;
        this.definedTags = definedTags;
        this.freeformTags = freeformTags;
        this.id = id;
        this.isCdb = isCdb;
        this.kmsKeyId = kmsKeyId;
        this.kmsKeyMigration = kmsKeyMigration;
        this.kmsKeyRotation = kmsKeyRotation;
        this.kmsKeyVersionId = kmsKeyVersionId;
        this.lastBackupTimestamp = lastBackupTimestamp;
        this.lifecycleDetails = lifecycleDetails;
        this.ncharacterSet = ncharacterSet;
        this.pdbName = pdbName;
        this.sidPrefix = sidPrefix;
        this.source = source;
        this.sourceDatabasePointInTimeRecoveryTimestamp = sourceDatabasePointInTimeRecoveryTimestamp;
        this.state = state;
        this.timeCreated = timeCreated;
        this.vaultId = vaultId;
        this.vmClusterId = vmClusterId;
    }

    /**
     * @return The character set for the database.
     * 
     */
    public String characterSet() {
        return this.characterSet;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The Connection strings used to connect to the Oracle Database.
     * 
     */
    public List<GetDatabaseConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    public List<GetDatabaseDatabaseManagementConfig> databaseManagementConfigs() {
        return this.databaseManagementConfigs;
    }
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public String databaseSoftwareImageId() {
        return this.databaseSoftwareImageId;
    }
    public List<GetDatabaseDatabase> databases() {
        return this.databases;
    }
    /**
     * @return Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    public List<GetDatabaseDbBackupConfig> dbBackupConfigs() {
        return this.dbBackupConfigs;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    public String dbHomeId() {
        return this.dbHomeId;
    }
    /**
     * @return The database name.
     * 
     */
    public String dbName() {
        return this.dbName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return A system-generated name for the database to ensure uniqueness within an Oracle Data Guard group (a primary database and its standby databases). The unique name cannot be changed.
     * 
     */
    public String dbUniqueName() {
        return this.dbUniqueName;
    }
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return The database workload type.
     * 
     */
    public String dbWorkload() {
        return this.dbWorkload;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return True if the database is a container database.
     * 
     */
    public Boolean isCdb() {
        return this.isCdb;
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public Boolean kmsKeyMigration() {
        return this.kmsKeyMigration;
    }
    public Integer kmsKeyRotation() {
        return this.kmsKeyRotation;
    }
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    public String kmsKeyVersionId() {
        return this.kmsKeyVersionId;
    }
    /**
     * @return The date and time when the latest database backup was created.
     * 
     */
    public String lastBackupTimestamp() {
        return this.lastBackupTimestamp;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The national character set for the database.
     * 
     */
    public String ncharacterSet() {
        return this.ncharacterSet;
    }
    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    public String pdbName() {
        return this.pdbName;
    }
    /**
     * @return Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    public String sidPrefix() {
        return this.sidPrefix;
    }
    public String source() {
        return this.source;
    }
    /**
     * @return Point in time recovery timeStamp of the source database at which cloned database system is cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public String sourceDatabasePointInTimeRecoveryTimestamp() {
        return this.sourceDatabasePointInTimeRecoveryTimestamp;
    }
    /**
     * @return The current state of the database.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the database was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    public String vmClusterId() {
        return this.vmClusterId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String characterSet;
        private String compartmentId;
        private List<GetDatabaseConnectionString> connectionStrings;
        private String databaseId;
        private List<GetDatabaseDatabaseManagementConfig> databaseManagementConfigs;
        private String databaseSoftwareImageId;
        private List<GetDatabaseDatabase> databases;
        private List<GetDatabaseDbBackupConfig> dbBackupConfigs;
        private String dbHomeId;
        private String dbName;
        private String dbSystemId;
        private String dbUniqueName;
        private String dbVersion;
        private String dbWorkload;
        private Map<String,Object> definedTags;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isCdb;
        private String kmsKeyId;
        private Boolean kmsKeyMigration;
        private Integer kmsKeyRotation;
        private String kmsKeyVersionId;
        private String lastBackupTimestamp;
        private String lifecycleDetails;
        private String ncharacterSet;
        private String pdbName;
        private String sidPrefix;
        private String source;
        private String sourceDatabasePointInTimeRecoveryTimestamp;
        private String state;
        private String timeCreated;
        private String vaultId;
        private String vmClusterId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characterSet = defaults.characterSet;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseManagementConfigs = defaults.databaseManagementConfigs;
    	      this.databaseSoftwareImageId = defaults.databaseSoftwareImageId;
    	      this.databases = defaults.databases;
    	      this.dbBackupConfigs = defaults.dbBackupConfigs;
    	      this.dbHomeId = defaults.dbHomeId;
    	      this.dbName = defaults.dbName;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.dbVersion = defaults.dbVersion;
    	      this.dbWorkload = defaults.dbWorkload;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isCdb = defaults.isCdb;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyMigration = defaults.kmsKeyMigration;
    	      this.kmsKeyRotation = defaults.kmsKeyRotation;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.lastBackupTimestamp = defaults.lastBackupTimestamp;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.pdbName = defaults.pdbName;
    	      this.sidPrefix = defaults.sidPrefix;
    	      this.source = defaults.source;
    	      this.sourceDatabasePointInTimeRecoveryTimestamp = defaults.sourceDatabasePointInTimeRecoveryTimestamp;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.vaultId = defaults.vaultId;
    	      this.vmClusterId = defaults.vmClusterId;
        }

        public Builder characterSet(String characterSet) {
            this.characterSet = Objects.requireNonNull(characterSet);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder connectionStrings(List<GetDatabaseConnectionString> connectionStrings) {
            this.connectionStrings = Objects.requireNonNull(connectionStrings);
            return this;
        }
        public Builder connectionStrings(GetDatabaseConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        public Builder databaseId(String databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        public Builder databaseManagementConfigs(List<GetDatabaseDatabaseManagementConfig> databaseManagementConfigs) {
            this.databaseManagementConfigs = Objects.requireNonNull(databaseManagementConfigs);
            return this;
        }
        public Builder databaseManagementConfigs(GetDatabaseDatabaseManagementConfig... databaseManagementConfigs) {
            return databaseManagementConfigs(List.of(databaseManagementConfigs));
        }
        public Builder databaseSoftwareImageId(String databaseSoftwareImageId) {
            this.databaseSoftwareImageId = Objects.requireNonNull(databaseSoftwareImageId);
            return this;
        }
        public Builder databases(List<GetDatabaseDatabase> databases) {
            this.databases = Objects.requireNonNull(databases);
            return this;
        }
        public Builder databases(GetDatabaseDatabase... databases) {
            return databases(List.of(databases));
        }
        public Builder dbBackupConfigs(List<GetDatabaseDbBackupConfig> dbBackupConfigs) {
            this.dbBackupConfigs = Objects.requireNonNull(dbBackupConfigs);
            return this;
        }
        public Builder dbBackupConfigs(GetDatabaseDbBackupConfig... dbBackupConfigs) {
            return dbBackupConfigs(List.of(dbBackupConfigs));
        }
        public Builder dbHomeId(String dbHomeId) {
            this.dbHomeId = Objects.requireNonNull(dbHomeId);
            return this;
        }
        public Builder dbName(String dbName) {
            this.dbName = Objects.requireNonNull(dbName);
            return this;
        }
        public Builder dbSystemId(String dbSystemId) {
            this.dbSystemId = Objects.requireNonNull(dbSystemId);
            return this;
        }
        public Builder dbUniqueName(String dbUniqueName) {
            this.dbUniqueName = Objects.requireNonNull(dbUniqueName);
            return this;
        }
        public Builder dbVersion(String dbVersion) {
            this.dbVersion = Objects.requireNonNull(dbVersion);
            return this;
        }
        public Builder dbWorkload(String dbWorkload) {
            this.dbWorkload = Objects.requireNonNull(dbWorkload);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isCdb(Boolean isCdb) {
            this.isCdb = Objects.requireNonNull(isCdb);
            return this;
        }
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        public Builder kmsKeyMigration(Boolean kmsKeyMigration) {
            this.kmsKeyMigration = Objects.requireNonNull(kmsKeyMigration);
            return this;
        }
        public Builder kmsKeyRotation(Integer kmsKeyRotation) {
            this.kmsKeyRotation = Objects.requireNonNull(kmsKeyRotation);
            return this;
        }
        public Builder kmsKeyVersionId(String kmsKeyVersionId) {
            this.kmsKeyVersionId = Objects.requireNonNull(kmsKeyVersionId);
            return this;
        }
        public Builder lastBackupTimestamp(String lastBackupTimestamp) {
            this.lastBackupTimestamp = Objects.requireNonNull(lastBackupTimestamp);
            return this;
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder ncharacterSet(String ncharacterSet) {
            this.ncharacterSet = Objects.requireNonNull(ncharacterSet);
            return this;
        }
        public Builder pdbName(String pdbName) {
            this.pdbName = Objects.requireNonNull(pdbName);
            return this;
        }
        public Builder sidPrefix(String sidPrefix) {
            this.sidPrefix = Objects.requireNonNull(sidPrefix);
            return this;
        }
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        public Builder sourceDatabasePointInTimeRecoveryTimestamp(String sourceDatabasePointInTimeRecoveryTimestamp) {
            this.sourceDatabasePointInTimeRecoveryTimestamp = Objects.requireNonNull(sourceDatabasePointInTimeRecoveryTimestamp);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }
        public Builder vmClusterId(String vmClusterId) {
            this.vmClusterId = Objects.requireNonNull(vmClusterId);
            return this;
        }        public GetDatabaseResult build() {
            return new GetDatabaseResult(characterSet, compartmentId, connectionStrings, databaseId, databaseManagementConfigs, databaseSoftwareImageId, databases, dbBackupConfigs, dbHomeId, dbName, dbSystemId, dbUniqueName, dbVersion, dbWorkload, definedTags, freeformTags, id, isCdb, kmsKeyId, kmsKeyMigration, kmsKeyRotation, kmsKeyVersionId, lastBackupTimestamp, lifecycleDetails, ncharacterSet, pdbName, sidPrefix, source, sourceDatabasePointInTimeRecoveryTimestamp, state, timeCreated, vaultId, vmClusterId);
        }
    }
}
