// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetResolverEndpointsResolverEndpoint {
    /**
     * @return The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver&#39;s compartment is changed.
     * 
     */
    private final String compartmentId;
    /**
     * @return The type of resolver endpoint. VNIC is currently the only supported type.
     * 
     */
    private final String endpointType;
    /**
     * @return An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     * 
     */
    private final String forwardingAddress;
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     * 
     */
    private final Boolean isForwarding;
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for listening.
     * 
     */
    private final Boolean isListening;
    /**
     * @return An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     * 
     */
    private final String listeningAddress;
    /**
     * @return The name of a resource.
     * 
     */
    private final String name;
    /**
     * @return An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
     * 
     */
    private final @Nullable List<String> nsgIds;
    /**
     * @return The OCID of the target resolver.
     * 
     */
    private final String resolverId;
    /**
     * @return Value must be `PRIVATE` when listing private name resolver endpoints.
     * 
     */
    private final String scope;
    /**
     * @return The canonical absolute URL of the resource.
     * 
     */
    private final String self;
    /**
     * @return The state of a resource.
     * 
     */
    private final String state;
    /**
     * @return The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     * 
     */
    private final String subnetId;
    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    private final String timeCreated;
    /**
     * @return The date and time the resource was last updated in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetResolverEndpointsResolverEndpoint(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("endpointType") String endpointType,
        @CustomType.Parameter("forwardingAddress") String forwardingAddress,
        @CustomType.Parameter("isForwarding") Boolean isForwarding,
        @CustomType.Parameter("isListening") Boolean isListening,
        @CustomType.Parameter("listeningAddress") String listeningAddress,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nsgIds") @Nullable List<String> nsgIds,
        @CustomType.Parameter("resolverId") String resolverId,
        @CustomType.Parameter("scope") String scope,
        @CustomType.Parameter("self") String self,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("subnetId") String subnetId,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.compartmentId = compartmentId;
        this.endpointType = endpointType;
        this.forwardingAddress = forwardingAddress;
        this.isForwarding = isForwarding;
        this.isListening = isListening;
        this.listeningAddress = listeningAddress;
        this.name = name;
        this.nsgIds = nsgIds;
        this.resolverId = resolverId;
        this.scope = scope;
        this.self = self;
        this.state = state;
        this.subnetId = subnetId;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    /**
     * @return The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver&#39;s compartment is changed.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The type of resolver endpoint. VNIC is currently the only supported type.
     * 
     */
    public String endpointType() {
        return this.endpointType;
    }
    /**
     * @return An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     * 
     */
    public String forwardingAddress() {
        return this.forwardingAddress;
    }
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     * 
     */
    public Boolean isForwarding() {
        return this.isForwarding;
    }
    /**
     * @return A Boolean flag indicating whether or not the resolver endpoint is for listening.
     * 
     */
    public Boolean isListening() {
        return this.isListening;
    }
    /**
     * @return An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     * 
     */
    public String listeningAddress() {
        return this.listeningAddress;
    }
    /**
     * @return The name of a resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds == null ? List.of() : this.nsgIds;
    }
    /**
     * @return The OCID of the target resolver.
     * 
     */
    public String resolverId() {
        return this.resolverId;
    }
    /**
     * @return Value must be `PRIVATE` when listing private name resolver endpoints.
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return The canonical absolute URL of the resource.
     * 
     */
    public String self() {
        return this.self;
    }
    /**
     * @return The state of a resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The date and time the resource was created in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the resource was last updated in &#34;YYYY-MM-ddThh:mm:ssZ&#34; format with a Z offset, as defined by RFC 3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResolverEndpointsResolverEndpoint defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private String endpointType;
        private String forwardingAddress;
        private Boolean isForwarding;
        private Boolean isListening;
        private String listeningAddress;
        private String name;
        private @Nullable List<String> nsgIds;
        private String resolverId;
        private String scope;
        private String self;
        private String state;
        private String subnetId;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetResolverEndpointsResolverEndpoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.endpointType = defaults.endpointType;
    	      this.forwardingAddress = defaults.forwardingAddress;
    	      this.isForwarding = defaults.isForwarding;
    	      this.isListening = defaults.isListening;
    	      this.listeningAddress = defaults.listeningAddress;
    	      this.name = defaults.name;
    	      this.nsgIds = defaults.nsgIds;
    	      this.resolverId = defaults.resolverId;
    	      this.scope = defaults.scope;
    	      this.self = defaults.self;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder endpointType(String endpointType) {
            this.endpointType = Objects.requireNonNull(endpointType);
            return this;
        }
        public Builder forwardingAddress(String forwardingAddress) {
            this.forwardingAddress = Objects.requireNonNull(forwardingAddress);
            return this;
        }
        public Builder isForwarding(Boolean isForwarding) {
            this.isForwarding = Objects.requireNonNull(isForwarding);
            return this;
        }
        public Builder isListening(Boolean isListening) {
            this.isListening = Objects.requireNonNull(isListening);
            return this;
        }
        public Builder listeningAddress(String listeningAddress) {
            this.listeningAddress = Objects.requireNonNull(listeningAddress);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nsgIds(@Nullable List<String> nsgIds) {
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        public Builder resolverId(String resolverId) {
            this.resolverId = Objects.requireNonNull(resolverId);
            return this;
        }
        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        public Builder self(String self) {
            this.self = Objects.requireNonNull(self);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetResolverEndpointsResolverEndpoint build() {
            return new GetResolverEndpointsResolverEndpoint(compartmentId, endpointType, forwardingAddress, isForwarding, isListening, listeningAddress, name, nsgIds, resolverId, scope, self, state, subnetId, timeCreated, timeUpdated);
        }
    }
}
