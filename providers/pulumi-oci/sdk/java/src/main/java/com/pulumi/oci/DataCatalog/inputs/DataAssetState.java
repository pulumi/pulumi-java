// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataAssetState extends com.pulumi.resources.ResourceArgs {

    public static final DataAssetState Empty = new DataAssetState();

    /**
     * Unique catalog identifier.
     * 
     */
    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    /**
     * @return Unique catalog identifier.
     * 
     */
    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    /**
     * OCID of the user who created the data asset.
     * 
     */
    @Import(name="createdById")
    private @Nullable Output<String> createdById;

    /**
     * @return OCID of the user who created the data asset.
     * 
     */
    public Optional<Output<String>> createdById() {
        return Optional.ofNullable(this.createdById);
    }

    /**
     * (Updatable) Detailed description of the data asset.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Detailed description of the data asset.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * External URI that can be used to reference the object. Format will differ based on the type of object.
     * 
     */
    @Import(name="externalKey")
    private @Nullable Output<String> externalKey;

    /**
     * @return External URI that can be used to reference the object. Format will differ based on the type of object.
     * 
     */
    public Optional<Output<String>> externalKey() {
        return Optional.ofNullable(this.externalKey);
    }

    /**
     * Unique data asset key that is immutable.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Unique data asset key that is immutable.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;host&#34;: &#34;host1&#34;, &#34;port&#34;: &#34;1521&#34;, &#34;database&#34;: &#34;orcl&#34;}}}`
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,Object>> properties;

    /**
     * @return A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;host&#34;: &#34;host1&#34;, &#34;port&#34;: &#34;1521&#34;, &#34;database&#34;: &#34;orcl&#34;}}}`
     * 
     */
    public Optional<Output<Map<String,Object>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The current state of the data asset.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the data asset.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the data asset was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the data asset was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The last time that a harvest was performed on the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    @Import(name="timeHarvested")
    private @Nullable Output<String> timeHarvested;

    /**
     * @return The last time that a harvest was performed on the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeHarvested() {
        return Optional.ofNullable(this.timeHarvested);
    }

    /**
     * The last time that any change was made to the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The last time that any change was made to the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * The key of the data asset type. This can be obtained via the &#39;/types&#39; endpoint.
     * 
     */
    @Import(name="typeKey")
    private @Nullable Output<String> typeKey;

    /**
     * @return The key of the data asset type. This can be obtained via the &#39;/types&#39; endpoint.
     * 
     */
    public Optional<Output<String>> typeKey() {
        return Optional.ofNullable(this.typeKey);
    }

    /**
     * OCID of the user who last modified the data asset.
     * 
     */
    @Import(name="updatedById")
    private @Nullable Output<String> updatedById;

    /**
     * @return OCID of the user who last modified the data asset.
     * 
     */
    public Optional<Output<String>> updatedById() {
        return Optional.ofNullable(this.updatedById);
    }

    /**
     * URI to the data asset instance in the API.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return URI to the data asset instance in the API.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private DataAssetState() {}

    private DataAssetState(DataAssetState $) {
        this.catalogId = $.catalogId;
        this.createdById = $.createdById;
        this.description = $.description;
        this.displayName = $.displayName;
        this.externalKey = $.externalKey;
        this.key = $.key;
        this.properties = $.properties;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeHarvested = $.timeHarvested;
        this.timeUpdated = $.timeUpdated;
        this.typeKey = $.typeKey;
        this.updatedById = $.updatedById;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataAssetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataAssetState $;

        public Builder() {
            $ = new DataAssetState();
        }

        public Builder(DataAssetState defaults) {
            $ = new DataAssetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param createdById OCID of the user who created the data asset.
         * 
         * @return builder
         * 
         */
        public Builder createdById(@Nullable Output<String> createdById) {
            $.createdById = createdById;
            return this;
        }

        /**
         * @param createdById OCID of the user who created the data asset.
         * 
         * @return builder
         * 
         */
        public Builder createdById(String createdById) {
            return createdById(Output.of(createdById));
        }

        /**
         * @param description (Updatable) Detailed description of the data asset.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Detailed description of the data asset.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param externalKey External URI that can be used to reference the object. Format will differ based on the type of object.
         * 
         * @return builder
         * 
         */
        public Builder externalKey(@Nullable Output<String> externalKey) {
            $.externalKey = externalKey;
            return this;
        }

        /**
         * @param externalKey External URI that can be used to reference the object. Format will differ based on the type of object.
         * 
         * @return builder
         * 
         */
        public Builder externalKey(String externalKey) {
            return externalKey(Output.of(externalKey));
        }

        /**
         * @param key Unique data asset key that is immutable.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Unique data asset key that is immutable.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param properties A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;host&#34;: &#34;host1&#34;, &#34;port&#34;: &#34;1521&#34;, &#34;database&#34;: &#34;orcl&#34;}}}`
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,Object>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;host&#34;: &#34;host1&#34;, &#34;port&#34;: &#34;1521&#34;, &#34;database&#34;: &#34;orcl&#34;}}}`
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,Object> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param state The current state of the data asset.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the data asset.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the data asset was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the data asset was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeHarvested The last time that a harvest was performed on the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeHarvested(@Nullable Output<String> timeHarvested) {
            $.timeHarvested = timeHarvested;
            return this;
        }

        /**
         * @param timeHarvested The last time that a harvest was performed on the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeHarvested(String timeHarvested) {
            return timeHarvested(Output.of(timeHarvested));
        }

        /**
         * @param timeUpdated The last time that any change was made to the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The last time that any change was made to the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param typeKey The key of the data asset type. This can be obtained via the &#39;/types&#39; endpoint.
         * 
         * @return builder
         * 
         */
        public Builder typeKey(@Nullable Output<String> typeKey) {
            $.typeKey = typeKey;
            return this;
        }

        /**
         * @param typeKey The key of the data asset type. This can be obtained via the &#39;/types&#39; endpoint.
         * 
         * @return builder
         * 
         */
        public Builder typeKey(String typeKey) {
            return typeKey(Output.of(typeKey));
        }

        /**
         * @param updatedById OCID of the user who last modified the data asset.
         * 
         * @return builder
         * 
         */
        public Builder updatedById(@Nullable Output<String> updatedById) {
            $.updatedById = updatedById;
            return this;
        }

        /**
         * @param updatedById OCID of the user who last modified the data asset.
         * 
         * @return builder
         * 
         */
        public Builder updatedById(String updatedById) {
            return updatedById(Output.of(updatedById));
        }

        /**
         * @param uri URI to the data asset instance in the API.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri URI to the data asset instance in the API.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public DataAssetState build() {
            return $;
        }
    }

}
