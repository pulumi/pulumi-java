// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigScriptParameterMonitorScriptParameterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigScriptParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigScriptParameterArgs Empty = new ConfigScriptParameterArgs();

    /**
     * If parameter value is default or overwritten.
     * 
     */
    @Import(name="isOverwritten")
    private @Nullable Output<Boolean> isOverwritten;

    /**
     * @return If parameter value is default or overwritten.
     * 
     */
    public Optional<Output<Boolean>> isOverwritten() {
        return Optional.ofNullable(this.isOverwritten);
    }

    /**
     * Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
     * 
     */
    @Import(name="isSecret")
    private @Nullable Output<Boolean> isSecret;

    /**
     * @return Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
     * 
     */
    public Optional<Output<Boolean>> isSecret() {
        return Optional.ofNullable(this.isSecret);
    }

    /**
     * Details of the script parameter that can be used to overwrite the parameter present in the script.
     * 
     */
    @Import(name="monitorScriptParameters")
    private @Nullable Output<List<ConfigScriptParameterMonitorScriptParameterArgs>> monitorScriptParameters;

    /**
     * @return Details of the script parameter that can be used to overwrite the parameter present in the script.
     * 
     */
    public Optional<Output<List<ConfigScriptParameterMonitorScriptParameterArgs>>> monitorScriptParameters() {
        return Optional.ofNullable(this.monitorScriptParameters);
    }

    /**
     * (Updatable) Name of the parameter.
     * 
     */
    @Import(name="paramName", required=true)
    private Output<String> paramName;

    /**
     * @return (Updatable) Name of the parameter.
     * 
     */
    public Output<String> paramName() {
        return this.paramName;
    }

    /**
     * (Updatable) Value of the parameter.
     * 
     */
    @Import(name="paramValue", required=true)
    private Output<String> paramValue;

    /**
     * @return (Updatable) Value of the parameter.
     * 
     */
    public Output<String> paramValue() {
        return this.paramValue;
    }

    private ConfigScriptParameterArgs() {}

    private ConfigScriptParameterArgs(ConfigScriptParameterArgs $) {
        this.isOverwritten = $.isOverwritten;
        this.isSecret = $.isSecret;
        this.monitorScriptParameters = $.monitorScriptParameters;
        this.paramName = $.paramName;
        this.paramValue = $.paramValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigScriptParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigScriptParameterArgs $;

        public Builder() {
            $ = new ConfigScriptParameterArgs();
        }

        public Builder(ConfigScriptParameterArgs defaults) {
            $ = new ConfigScriptParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isOverwritten If parameter value is default or overwritten.
         * 
         * @return builder
         * 
         */
        public Builder isOverwritten(@Nullable Output<Boolean> isOverwritten) {
            $.isOverwritten = isOverwritten;
            return this;
        }

        /**
         * @param isOverwritten If parameter value is default or overwritten.
         * 
         * @return builder
         * 
         */
        public Builder isOverwritten(Boolean isOverwritten) {
            return isOverwritten(Output.of(isOverwritten));
        }

        /**
         * @param isSecret Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
         * 
         * @return builder
         * 
         */
        public Builder isSecret(@Nullable Output<Boolean> isSecret) {
            $.isSecret = isSecret;
            return this;
        }

        /**
         * @param isSecret Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
         * 
         * @return builder
         * 
         */
        public Builder isSecret(Boolean isSecret) {
            return isSecret(Output.of(isSecret));
        }

        /**
         * @param monitorScriptParameters Details of the script parameter that can be used to overwrite the parameter present in the script.
         * 
         * @return builder
         * 
         */
        public Builder monitorScriptParameters(@Nullable Output<List<ConfigScriptParameterMonitorScriptParameterArgs>> monitorScriptParameters) {
            $.monitorScriptParameters = monitorScriptParameters;
            return this;
        }

        /**
         * @param monitorScriptParameters Details of the script parameter that can be used to overwrite the parameter present in the script.
         * 
         * @return builder
         * 
         */
        public Builder monitorScriptParameters(List<ConfigScriptParameterMonitorScriptParameterArgs> monitorScriptParameters) {
            return monitorScriptParameters(Output.of(monitorScriptParameters));
        }

        /**
         * @param monitorScriptParameters Details of the script parameter that can be used to overwrite the parameter present in the script.
         * 
         * @return builder
         * 
         */
        public Builder monitorScriptParameters(ConfigScriptParameterMonitorScriptParameterArgs... monitorScriptParameters) {
            return monitorScriptParameters(List.of(monitorScriptParameters));
        }

        /**
         * @param paramName (Updatable) Name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder paramName(Output<String> paramName) {
            $.paramName = paramName;
            return this;
        }

        /**
         * @param paramName (Updatable) Name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder paramName(String paramName) {
            return paramName(Output.of(paramName));
        }

        /**
         * @param paramValue (Updatable) Value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder paramValue(Output<String> paramValue) {
            $.paramValue = paramValue;
            return this;
        }

        /**
         * @param paramValue (Updatable) Value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder paramValue(String paramValue) {
            return paramValue(Output.of(paramValue));
        }

        public ConfigScriptParameterArgs build() {
            $.paramName = Objects.requireNonNull($.paramName, "expected parameter 'paramName' to be non-null");
            $.paramValue = Objects.requireNonNull($.paramValue, "expected parameter 'paramValue' to be non-null");
            return $;
        }
    }

}
