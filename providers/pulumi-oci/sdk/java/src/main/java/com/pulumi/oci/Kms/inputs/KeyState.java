// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Kms.inputs.KeyKeyShapeArgs;
import com.pulumi.oci.Kms.inputs.KeyReplicaDetailArgs;
import com.pulumi.oci.Kms.inputs.KeyRestoreFromFileArgs;
import com.pulumi.oci.Kms.inputs.KeyRestoreFromObjectStoreArgs;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyState extends com.pulumi.resources.ResourceArgs {

    public static final KeyState Empty = new KeyState();

    /**
     * (Updatable) The OCID of the compartment where you want to create the master encryption key.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment where you want to create the master encryption key.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
     * 
     */
    @Import(name="currentKeyVersion")
    private @Nullable Output<String> currentKeyVersion;

    /**
     * @return The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
     * 
     */
    public Optional<Output<String>> currentKeyVersion() {
        return Optional.ofNullable(this.currentKeyVersion);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Desired state of the key. Possible values : `ENABLED` or `DISABLED`
     * 
     */
    @Import(name="desiredState")
    private @Nullable Output<String> desiredState;

    /**
     * @return (Updatable) Desired state of the key. Possible values : `ENABLED` or `DISABLED`
     * 
     */
    public Optional<Output<String>> desiredState() {
        return Optional.ofNullable(this.desiredState);
    }

    /**
     * (Updatable) A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * A boolean that will be true when key is primary, and will be false when key is a replica from a primary key.
     * 
     */
    @Import(name="isPrimary")
    private @Nullable Output<Boolean> isPrimary;

    /**
     * @return A boolean that will be true when key is primary, and will be false when key is a replica from a primary key.
     * 
     */
    public Optional<Output<Boolean>> isPrimary() {
        return Optional.ofNullable(this.isPrimary);
    }

    /**
     * The cryptographic properties of a key.
     * 
     */
    @Import(name="keyShape")
    private @Nullable Output<KeyKeyShapeArgs> keyShape;

    /**
     * @return The cryptographic properties of a key.
     * 
     */
    public Optional<Output<KeyKeyShapeArgs>> keyShape() {
        return Optional.ofNullable(this.keyShape);
    }

    /**
     * The service endpoint to perform management operations against. Management operations include &#39;Create,&#39; &#39;Update,&#39; &#39;List,&#39; &#39;Get,&#39; and &#39;Delete&#39; operations. See Vault Management endpoint.
     * 
     */
    @Import(name="managementEndpoint")
    private @Nullable Output<String> managementEndpoint;

    /**
     * @return The service endpoint to perform management operations against. Management operations include &#39;Create,&#39; &#39;Update,&#39; &#39;List,&#39; &#39;Get,&#39; and &#39;Delete&#39; operations. See Vault Management endpoint.
     * 
     */
    public Optional<Output<String>> managementEndpoint() {
        return Optional.ofNullable(this.managementEndpoint);
    }

    /**
     * The key&#39;s protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault&#39;s RSA wrapping key which persists  on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default,  a key&#39;s protection mode is set to `HSM`. You can&#39;t change a key&#39;s protection mode after the key is created or imported.
     * 
     */
    @Import(name="protectionMode")
    private @Nullable Output<String> protectionMode;

    /**
     * @return The key&#39;s protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault&#39;s RSA wrapping key which persists  on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default,  a key&#39;s protection mode is set to `HSM`. You can&#39;t change a key&#39;s protection mode after the key is created or imported.
     * 
     */
    public Optional<Output<String>> protectionMode() {
        return Optional.ofNullable(this.protectionMode);
    }

    /**
     * Key replica details
     * 
     */
    @Import(name="replicaDetails")
    private @Nullable Output<List<KeyReplicaDetailArgs>> replicaDetails;

    /**
     * @return Key replica details
     * 
     */
    public Optional<Output<List<KeyReplicaDetailArgs>>> replicaDetails() {
        return Optional.ofNullable(this.replicaDetails);
    }

    /**
     * (Updatable) Details where key was backed up.
     * 
     */
    @Import(name="restoreFromFile")
    private @Nullable Output<KeyRestoreFromFileArgs> restoreFromFile;

    /**
     * @return (Updatable) Details where key was backed up.
     * 
     */
    public Optional<Output<KeyRestoreFromFileArgs>> restoreFromFile() {
        return Optional.ofNullable(this.restoreFromFile);
    }

    /**
     * (Updatable) Details where key was backed up
     * 
     */
    @Import(name="restoreFromObjectStore")
    private @Nullable Output<KeyRestoreFromObjectStoreArgs> restoreFromObjectStore;

    /**
     * @return (Updatable) Details where key was backed up
     * 
     */
    public Optional<Output<KeyRestoreFromObjectStoreArgs>> restoreFromObjectStore() {
        return Optional.ofNullable(this.restoreFromObjectStore);
    }

    /**
     * (Updatable) An optional property when flipped triggers restore from restore option provided in config file.
     * 
     */
    @Import(name="restoreTrigger")
    private @Nullable Output<Boolean> restoreTrigger;

    /**
     * @return (Updatable) An optional property when flipped triggers restore from restore option provided in config file.
     * 
     */
    public Optional<Output<Boolean>> restoreTrigger() {
        return Optional.ofNullable(this.restoreTrigger);
    }

    /**
     * The OCID of the key from which this key was restored.
     * 
     */
    @Import(name="restoredFromKeyId")
    private @Nullable Output<String> restoredFromKeyId;

    /**
     * @return The OCID of the key from which this key was restored.
     * 
     */
    public Optional<Output<String>> restoredFromKeyId() {
        return Optional.ofNullable(this.restoredFromKeyId);
    }

    /**
     * The key&#39;s current lifecycle state.  Example: `ENABLED`
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The key&#39;s current lifecycle state.  Example: `ENABLED`
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * (Updatable) An optional property for the deletion time of the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    @Import(name="timeOfDeletion")
    private @Nullable Output<String> timeOfDeletion;

    /**
     * @return (Updatable) An optional property for the deletion time of the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeOfDeletion() {
        return Optional.ofNullable(this.timeOfDeletion);
    }

    /**
     * The OCID of the vault that contains this key.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return The OCID of the vault that contains this key.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    private KeyState() {}

    private KeyState(KeyState $) {
        this.compartmentId = $.compartmentId;
        this.currentKeyVersion = $.currentKeyVersion;
        this.definedTags = $.definedTags;
        this.desiredState = $.desiredState;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.isPrimary = $.isPrimary;
        this.keyShape = $.keyShape;
        this.managementEndpoint = $.managementEndpoint;
        this.protectionMode = $.protectionMode;
        this.replicaDetails = $.replicaDetails;
        this.restoreFromFile = $.restoreFromFile;
        this.restoreFromObjectStore = $.restoreFromObjectStore;
        this.restoreTrigger = $.restoreTrigger;
        this.restoredFromKeyId = $.restoredFromKeyId;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeOfDeletion = $.timeOfDeletion;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyState $;

        public Builder() {
            $ = new KeyState();
        }

        public Builder(KeyState defaults) {
            $ = new KeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where you want to create the master encryption key.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where you want to create the master encryption key.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param currentKeyVersion The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
         * 
         * @return builder
         * 
         */
        public Builder currentKeyVersion(@Nullable Output<String> currentKeyVersion) {
            $.currentKeyVersion = currentKeyVersion;
            return this;
        }

        /**
         * @param currentKeyVersion The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
         * 
         * @return builder
         * 
         */
        public Builder currentKeyVersion(String currentKeyVersion) {
            return currentKeyVersion(Output.of(currentKeyVersion));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param desiredState (Updatable) Desired state of the key. Possible values : `ENABLED` or `DISABLED`
         * 
         * @return builder
         * 
         */
        public Builder desiredState(@Nullable Output<String> desiredState) {
            $.desiredState = desiredState;
            return this;
        }

        /**
         * @param desiredState (Updatable) Desired state of the key. Possible values : `ENABLED` or `DISABLED`
         * 
         * @return builder
         * 
         */
        public Builder desiredState(String desiredState) {
            return desiredState(Output.of(desiredState));
        }

        /**
         * @param displayName (Updatable) A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isPrimary A boolean that will be true when key is primary, and will be false when key is a replica from a primary key.
         * 
         * @return builder
         * 
         */
        public Builder isPrimary(@Nullable Output<Boolean> isPrimary) {
            $.isPrimary = isPrimary;
            return this;
        }

        /**
         * @param isPrimary A boolean that will be true when key is primary, and will be false when key is a replica from a primary key.
         * 
         * @return builder
         * 
         */
        public Builder isPrimary(Boolean isPrimary) {
            return isPrimary(Output.of(isPrimary));
        }

        /**
         * @param keyShape The cryptographic properties of a key.
         * 
         * @return builder
         * 
         */
        public Builder keyShape(@Nullable Output<KeyKeyShapeArgs> keyShape) {
            $.keyShape = keyShape;
            return this;
        }

        /**
         * @param keyShape The cryptographic properties of a key.
         * 
         * @return builder
         * 
         */
        public Builder keyShape(KeyKeyShapeArgs keyShape) {
            return keyShape(Output.of(keyShape));
        }

        /**
         * @param managementEndpoint The service endpoint to perform management operations against. Management operations include &#39;Create,&#39; &#39;Update,&#39; &#39;List,&#39; &#39;Get,&#39; and &#39;Delete&#39; operations. See Vault Management endpoint.
         * 
         * @return builder
         * 
         */
        public Builder managementEndpoint(@Nullable Output<String> managementEndpoint) {
            $.managementEndpoint = managementEndpoint;
            return this;
        }

        /**
         * @param managementEndpoint The service endpoint to perform management operations against. Management operations include &#39;Create,&#39; &#39;Update,&#39; &#39;List,&#39; &#39;Get,&#39; and &#39;Delete&#39; operations. See Vault Management endpoint.
         * 
         * @return builder
         * 
         */
        public Builder managementEndpoint(String managementEndpoint) {
            return managementEndpoint(Output.of(managementEndpoint));
        }

        /**
         * @param protectionMode The key&#39;s protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault&#39;s RSA wrapping key which persists  on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default,  a key&#39;s protection mode is set to `HSM`. You can&#39;t change a key&#39;s protection mode after the key is created or imported.
         * 
         * @return builder
         * 
         */
        public Builder protectionMode(@Nullable Output<String> protectionMode) {
            $.protectionMode = protectionMode;
            return this;
        }

        /**
         * @param protectionMode The key&#39;s protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault&#39;s RSA wrapping key which persists  on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default,  a key&#39;s protection mode is set to `HSM`. You can&#39;t change a key&#39;s protection mode after the key is created or imported.
         * 
         * @return builder
         * 
         */
        public Builder protectionMode(String protectionMode) {
            return protectionMode(Output.of(protectionMode));
        }

        /**
         * @param replicaDetails Key replica details
         * 
         * @return builder
         * 
         */
        public Builder replicaDetails(@Nullable Output<List<KeyReplicaDetailArgs>> replicaDetails) {
            $.replicaDetails = replicaDetails;
            return this;
        }

        /**
         * @param replicaDetails Key replica details
         * 
         * @return builder
         * 
         */
        public Builder replicaDetails(List<KeyReplicaDetailArgs> replicaDetails) {
            return replicaDetails(Output.of(replicaDetails));
        }

        /**
         * @param replicaDetails Key replica details
         * 
         * @return builder
         * 
         */
        public Builder replicaDetails(KeyReplicaDetailArgs... replicaDetails) {
            return replicaDetails(List.of(replicaDetails));
        }

        /**
         * @param restoreFromFile (Updatable) Details where key was backed up.
         * 
         * @return builder
         * 
         */
        public Builder restoreFromFile(@Nullable Output<KeyRestoreFromFileArgs> restoreFromFile) {
            $.restoreFromFile = restoreFromFile;
            return this;
        }

        /**
         * @param restoreFromFile (Updatable) Details where key was backed up.
         * 
         * @return builder
         * 
         */
        public Builder restoreFromFile(KeyRestoreFromFileArgs restoreFromFile) {
            return restoreFromFile(Output.of(restoreFromFile));
        }

        /**
         * @param restoreFromObjectStore (Updatable) Details where key was backed up
         * 
         * @return builder
         * 
         */
        public Builder restoreFromObjectStore(@Nullable Output<KeyRestoreFromObjectStoreArgs> restoreFromObjectStore) {
            $.restoreFromObjectStore = restoreFromObjectStore;
            return this;
        }

        /**
         * @param restoreFromObjectStore (Updatable) Details where key was backed up
         * 
         * @return builder
         * 
         */
        public Builder restoreFromObjectStore(KeyRestoreFromObjectStoreArgs restoreFromObjectStore) {
            return restoreFromObjectStore(Output.of(restoreFromObjectStore));
        }

        /**
         * @param restoreTrigger (Updatable) An optional property when flipped triggers restore from restore option provided in config file.
         * 
         * @return builder
         * 
         */
        public Builder restoreTrigger(@Nullable Output<Boolean> restoreTrigger) {
            $.restoreTrigger = restoreTrigger;
            return this;
        }

        /**
         * @param restoreTrigger (Updatable) An optional property when flipped triggers restore from restore option provided in config file.
         * 
         * @return builder
         * 
         */
        public Builder restoreTrigger(Boolean restoreTrigger) {
            return restoreTrigger(Output.of(restoreTrigger));
        }

        /**
         * @param restoredFromKeyId The OCID of the key from which this key was restored.
         * 
         * @return builder
         * 
         */
        public Builder restoredFromKeyId(@Nullable Output<String> restoredFromKeyId) {
            $.restoredFromKeyId = restoredFromKeyId;
            return this;
        }

        /**
         * @param restoredFromKeyId The OCID of the key from which this key was restored.
         * 
         * @return builder
         * 
         */
        public Builder restoredFromKeyId(String restoredFromKeyId) {
            return restoredFromKeyId(Output.of(restoredFromKeyId));
        }

        /**
         * @param state The key&#39;s current lifecycle state.  Example: `ENABLED`
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The key&#39;s current lifecycle state.  Example: `ENABLED`
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeOfDeletion (Updatable) An optional property for the deletion time of the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeOfDeletion(@Nullable Output<String> timeOfDeletion) {
            $.timeOfDeletion = timeOfDeletion;
            return this;
        }

        /**
         * @param timeOfDeletion (Updatable) An optional property for the deletion time of the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeOfDeletion(String timeOfDeletion) {
            return timeOfDeletion(Output.of(timeOfDeletion));
        }

        /**
         * @param vaultId The OCID of the vault that contains this key.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The OCID of the vault that contains this key.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public KeyState build() {
            return $;
        }
    }

}
