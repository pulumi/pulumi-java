// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class MigrationDatapumpSettingsMetadataRemapArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationDatapumpSettingsMetadataRemapArgs Empty = new MigrationDatapumpSettingsMetadataRemapArgs();

    /**
     * (Updatable) Specifies the new value that oldValue should be translated into.
     * 
     */
    @Import(name="newValue", required=true)
    private Output<String> newValue;

    /**
     * @return (Updatable) Specifies the new value that oldValue should be translated into.
     * 
     */
    public Output<String> newValue() {
        return this.newValue;
    }

    /**
     * (Updatable) Specifies the value which needs to be reset.
     * 
     */
    @Import(name="oldValue", required=true)
    private Output<String> oldValue;

    /**
     * @return (Updatable) Specifies the value which needs to be reset.
     * 
     */
    public Output<String> oldValue() {
        return this.oldValue;
    }

    /**
     * (Updatable) Migration type.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Migration type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private MigrationDatapumpSettingsMetadataRemapArgs() {}

    private MigrationDatapumpSettingsMetadataRemapArgs(MigrationDatapumpSettingsMetadataRemapArgs $) {
        this.newValue = $.newValue;
        this.oldValue = $.oldValue;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationDatapumpSettingsMetadataRemapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationDatapumpSettingsMetadataRemapArgs $;

        public Builder() {
            $ = new MigrationDatapumpSettingsMetadataRemapArgs();
        }

        public Builder(MigrationDatapumpSettingsMetadataRemapArgs defaults) {
            $ = new MigrationDatapumpSettingsMetadataRemapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param newValue (Updatable) Specifies the new value that oldValue should be translated into.
         * 
         * @return builder
         * 
         */
        public Builder newValue(Output<String> newValue) {
            $.newValue = newValue;
            return this;
        }

        /**
         * @param newValue (Updatable) Specifies the new value that oldValue should be translated into.
         * 
         * @return builder
         * 
         */
        public Builder newValue(String newValue) {
            return newValue(Output.of(newValue));
        }

        /**
         * @param oldValue (Updatable) Specifies the value which needs to be reset.
         * 
         * @return builder
         * 
         */
        public Builder oldValue(Output<String> oldValue) {
            $.oldValue = oldValue;
            return this;
        }

        /**
         * @param oldValue (Updatable) Specifies the value which needs to be reset.
         * 
         * @return builder
         * 
         */
        public Builder oldValue(String oldValue) {
            return oldValue(Output.of(oldValue));
        }

        /**
         * @param type (Updatable) Migration type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Migration type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MigrationDatapumpSettingsMetadataRemapArgs build() {
            $.newValue = Objects.requireNonNull($.newValue, "expected parameter 'newValue' to be non-null");
            $.oldValue = Objects.requireNonNull($.oldValue, "expected parameter 'oldValue' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
