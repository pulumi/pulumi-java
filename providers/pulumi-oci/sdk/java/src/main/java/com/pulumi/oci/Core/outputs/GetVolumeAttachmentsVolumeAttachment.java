// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetVolumeAttachmentsVolumeAttachmentMultipathDevice;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVolumeAttachmentsVolumeAttachment {
    /**
     * @return The type of volume attachment.
     * 
     */
    private final String attachmentType;
    /**
     * @return The name of the availability domain.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private final String availabilityDomain;
    /**
     * @return The Challenge-Handshake-Authentication-Protocol (CHAP) secret valid for the associated CHAP user name. (Also called the &#34;CHAP password&#34;.)
     * 
     */
    private final String chapSecret;
    /**
     * @return The volume&#39;s system-generated Challenge-Handshake-Authentication-Protocol (CHAP) user name. See [RFC 1994](https://tools.ietf.org/html/rfc1994) for more on CHAP.  Example: `ocid1.volume.oc1.phx.&lt;unique_ID&gt;`
     * 
     */
    private final String chapUsername;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     * @deprecated
     * The &#39;compartment_id&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'compartment_id' field has been deprecated and may be removed in a future version. Do not use this field. */
    private final String compartmentId;
    /**
     * @return The device name.
     * 
     */
    private final String device;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private final String displayName;
    /**
     * @return Refer the top-level definition of encryptionInTransitType. The default value is NONE.
     * 
     */
    private final String encryptionInTransitType;
    /**
     * @return The OCID of the volume attachment.
     * 
     */
    private final String id;
    /**
     * @return The OCID of the instance.
     * 
     */
    private final String instanceId;
    /**
     * @return The volume&#39;s iSCSI IP address.  Example: `169.254.2.2`
     * 
     */
    private final String ipv4;
    /**
     * @return The target volume&#39;s iSCSI Qualified Name in the format defined by [RFC 3720](https://tools.ietf.org/html/rfc3720#page-32).  Example: `iqn.2015-12.com.oracleiaas:40b7ee03-883f-46c6-a951-63d2841d2195`
     * 
     */
    private final String iqn;
    /**
     * @return Whether the Iscsi or Paravirtualized attachment is multipath or not, it is not applicable to NVMe attachment.
     * 
     */
    private final Boolean isMultipath;
    /**
     * @return Whether in-transit encryption for the data volume&#39;s paravirtualized attachment is enabled or not.
     * 
     */
    private final Boolean isPvEncryptionInTransitEnabled;
    /**
     * @return Whether the attachment was created in read-only mode.
     * 
     */
    private final Boolean isReadOnly;
    private final Boolean isShareable;
    /**
     * @return The iscsi login state of the volume attachment. For a Iscsi volume attachment, all iscsi sessions need to be all logged-in or logged-out to be in logged-in or logged-out state.
     * 
     */
    private final String iscsiLoginState;
    /**
     * @return A list of secondary multipath devices
     * 
     */
    private final List<GetVolumeAttachmentsVolumeAttachmentMultipathDevice> multipathDevices;
    /**
     * @return The volume&#39;s iSCSI port, usually port 860 or 3260.  Example: `3260`
     * 
     */
    private final Integer port;
    /**
     * @return The current state of the volume attachment.
     * 
     */
    private final String state;
    /**
     * @return The date and time the volume was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private final String timeCreated;
    private final Boolean useChap;
    /**
     * @return The OCID of the volume.
     * 
     */
    private final String volumeId;

    @CustomType.Constructor
    private GetVolumeAttachmentsVolumeAttachment(
        @CustomType.Parameter("attachmentType") String attachmentType,
        @CustomType.Parameter("availabilityDomain") String availabilityDomain,
        @CustomType.Parameter("chapSecret") String chapSecret,
        @CustomType.Parameter("chapUsername") String chapUsername,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("device") String device,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("encryptionInTransitType") String encryptionInTransitType,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceId") String instanceId,
        @CustomType.Parameter("ipv4") String ipv4,
        @CustomType.Parameter("iqn") String iqn,
        @CustomType.Parameter("isMultipath") Boolean isMultipath,
        @CustomType.Parameter("isPvEncryptionInTransitEnabled") Boolean isPvEncryptionInTransitEnabled,
        @CustomType.Parameter("isReadOnly") Boolean isReadOnly,
        @CustomType.Parameter("isShareable") Boolean isShareable,
        @CustomType.Parameter("iscsiLoginState") String iscsiLoginState,
        @CustomType.Parameter("multipathDevices") List<GetVolumeAttachmentsVolumeAttachmentMultipathDevice> multipathDevices,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("useChap") Boolean useChap,
        @CustomType.Parameter("volumeId") String volumeId) {
        this.attachmentType = attachmentType;
        this.availabilityDomain = availabilityDomain;
        this.chapSecret = chapSecret;
        this.chapUsername = chapUsername;
        this.compartmentId = compartmentId;
        this.device = device;
        this.displayName = displayName;
        this.encryptionInTransitType = encryptionInTransitType;
        this.id = id;
        this.instanceId = instanceId;
        this.ipv4 = ipv4;
        this.iqn = iqn;
        this.isMultipath = isMultipath;
        this.isPvEncryptionInTransitEnabled = isPvEncryptionInTransitEnabled;
        this.isReadOnly = isReadOnly;
        this.isShareable = isShareable;
        this.iscsiLoginState = iscsiLoginState;
        this.multipathDevices = multipathDevices;
        this.port = port;
        this.state = state;
        this.timeCreated = timeCreated;
        this.useChap = useChap;
        this.volumeId = volumeId;
    }

    /**
     * @return The type of volume attachment.
     * 
     */
    public String attachmentType() {
        return this.attachmentType;
    }
    /**
     * @return The name of the availability domain.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The Challenge-Handshake-Authentication-Protocol (CHAP) secret valid for the associated CHAP user name. (Also called the &#34;CHAP password&#34;.)
     * 
     */
    public String chapSecret() {
        return this.chapSecret;
    }
    /**
     * @return The volume&#39;s system-generated Challenge-Handshake-Authentication-Protocol (CHAP) user name. See [RFC 1994](https://tools.ietf.org/html/rfc1994) for more on CHAP.  Example: `ocid1.volume.oc1.phx.&lt;unique_ID&gt;`
     * 
     */
    public String chapUsername() {
        return this.chapUsername;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     * @deprecated
     * The &#39;compartment_id&#39; field has been deprecated and may be removed in a future version. Do not use this field.
     * 
     */
    @Deprecated /* The 'compartment_id' field has been deprecated and may be removed in a future version. Do not use this field. */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The device name.
     * 
     */
    public String device() {
        return this.device;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Refer the top-level definition of encryptionInTransitType. The default value is NONE.
     * 
     */
    public String encryptionInTransitType() {
        return this.encryptionInTransitType;
    }
    /**
     * @return The OCID of the volume attachment.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The volume&#39;s iSCSI IP address.  Example: `169.254.2.2`
     * 
     */
    public String ipv4() {
        return this.ipv4;
    }
    /**
     * @return The target volume&#39;s iSCSI Qualified Name in the format defined by [RFC 3720](https://tools.ietf.org/html/rfc3720#page-32).  Example: `iqn.2015-12.com.oracleiaas:40b7ee03-883f-46c6-a951-63d2841d2195`
     * 
     */
    public String iqn() {
        return this.iqn;
    }
    /**
     * @return Whether the Iscsi or Paravirtualized attachment is multipath or not, it is not applicable to NVMe attachment.
     * 
     */
    public Boolean isMultipath() {
        return this.isMultipath;
    }
    /**
     * @return Whether in-transit encryption for the data volume&#39;s paravirtualized attachment is enabled or not.
     * 
     */
    public Boolean isPvEncryptionInTransitEnabled() {
        return this.isPvEncryptionInTransitEnabled;
    }
    /**
     * @return Whether the attachment was created in read-only mode.
     * 
     */
    public Boolean isReadOnly() {
        return this.isReadOnly;
    }
    public Boolean isShareable() {
        return this.isShareable;
    }
    /**
     * @return The iscsi login state of the volume attachment. For a Iscsi volume attachment, all iscsi sessions need to be all logged-in or logged-out to be in logged-in or logged-out state.
     * 
     */
    public String iscsiLoginState() {
        return this.iscsiLoginState;
    }
    /**
     * @return A list of secondary multipath devices
     * 
     */
    public List<GetVolumeAttachmentsVolumeAttachmentMultipathDevice> multipathDevices() {
        return this.multipathDevices;
    }
    /**
     * @return The volume&#39;s iSCSI port, usually port 860 or 3260.  Example: `3260`
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The current state of the volume attachment.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the volume was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    public Boolean useChap() {
        return this.useChap;
    }
    /**
     * @return The OCID of the volume.
     * 
     */
    public String volumeId() {
        return this.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeAttachmentsVolumeAttachment defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String attachmentType;
        private String availabilityDomain;
        private String chapSecret;
        private String chapUsername;
        private String compartmentId;
        private String device;
        private String displayName;
        private String encryptionInTransitType;
        private String id;
        private String instanceId;
        private String ipv4;
        private String iqn;
        private Boolean isMultipath;
        private Boolean isPvEncryptionInTransitEnabled;
        private Boolean isReadOnly;
        private Boolean isShareable;
        private String iscsiLoginState;
        private List<GetVolumeAttachmentsVolumeAttachmentMultipathDevice> multipathDevices;
        private Integer port;
        private String state;
        private String timeCreated;
        private Boolean useChap;
        private String volumeId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetVolumeAttachmentsVolumeAttachment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachmentType = defaults.attachmentType;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.chapSecret = defaults.chapSecret;
    	      this.chapUsername = defaults.chapUsername;
    	      this.compartmentId = defaults.compartmentId;
    	      this.device = defaults.device;
    	      this.displayName = defaults.displayName;
    	      this.encryptionInTransitType = defaults.encryptionInTransitType;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.ipv4 = defaults.ipv4;
    	      this.iqn = defaults.iqn;
    	      this.isMultipath = defaults.isMultipath;
    	      this.isPvEncryptionInTransitEnabled = defaults.isPvEncryptionInTransitEnabled;
    	      this.isReadOnly = defaults.isReadOnly;
    	      this.isShareable = defaults.isShareable;
    	      this.iscsiLoginState = defaults.iscsiLoginState;
    	      this.multipathDevices = defaults.multipathDevices;
    	      this.port = defaults.port;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.useChap = defaults.useChap;
    	      this.volumeId = defaults.volumeId;
        }

        public Builder attachmentType(String attachmentType) {
            this.attachmentType = Objects.requireNonNull(attachmentType);
            return this;
        }
        public Builder availabilityDomain(String availabilityDomain) {
            this.availabilityDomain = Objects.requireNonNull(availabilityDomain);
            return this;
        }
        public Builder chapSecret(String chapSecret) {
            this.chapSecret = Objects.requireNonNull(chapSecret);
            return this;
        }
        public Builder chapUsername(String chapUsername) {
            this.chapUsername = Objects.requireNonNull(chapUsername);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder device(String device) {
            this.device = Objects.requireNonNull(device);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder encryptionInTransitType(String encryptionInTransitType) {
            this.encryptionInTransitType = Objects.requireNonNull(encryptionInTransitType);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        public Builder ipv4(String ipv4) {
            this.ipv4 = Objects.requireNonNull(ipv4);
            return this;
        }
        public Builder iqn(String iqn) {
            this.iqn = Objects.requireNonNull(iqn);
            return this;
        }
        public Builder isMultipath(Boolean isMultipath) {
            this.isMultipath = Objects.requireNonNull(isMultipath);
            return this;
        }
        public Builder isPvEncryptionInTransitEnabled(Boolean isPvEncryptionInTransitEnabled) {
            this.isPvEncryptionInTransitEnabled = Objects.requireNonNull(isPvEncryptionInTransitEnabled);
            return this;
        }
        public Builder isReadOnly(Boolean isReadOnly) {
            this.isReadOnly = Objects.requireNonNull(isReadOnly);
            return this;
        }
        public Builder isShareable(Boolean isShareable) {
            this.isShareable = Objects.requireNonNull(isShareable);
            return this;
        }
        public Builder iscsiLoginState(String iscsiLoginState) {
            this.iscsiLoginState = Objects.requireNonNull(iscsiLoginState);
            return this;
        }
        public Builder multipathDevices(List<GetVolumeAttachmentsVolumeAttachmentMultipathDevice> multipathDevices) {
            this.multipathDevices = Objects.requireNonNull(multipathDevices);
            return this;
        }
        public Builder multipathDevices(GetVolumeAttachmentsVolumeAttachmentMultipathDevice... multipathDevices) {
            return multipathDevices(List.of(multipathDevices));
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder useChap(Boolean useChap) {
            this.useChap = Objects.requireNonNull(useChap);
            return this;
        }
        public Builder volumeId(String volumeId) {
            this.volumeId = Objects.requireNonNull(volumeId);
            return this;
        }        public GetVolumeAttachmentsVolumeAttachment build() {
            return new GetVolumeAttachmentsVolumeAttachment(attachmentType, availabilityDomain, chapSecret, chapUsername, compartmentId, device, displayName, encryptionInTransitType, id, instanceId, ipv4, iqn, isMultipath, isPvEncryptionInTransitEnabled, isReadOnly, isShareable, iscsiLoginState, multipathDevices, port, state, timeCreated, useChap, volumeId);
        }
    }
}
