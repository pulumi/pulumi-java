// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RrsetItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final RrsetItemArgs Empty = new RrsetItemArgs();

    /**
     * The fully qualified domain name where the record can be located.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The fully qualified domain name where the record can be located.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * A Boolean flag indicating whether or not parts of the record are unable to be explicitly managed.
     * 
     */
    @Import(name="isProtected")
    private @Nullable Output<Boolean> isProtected;

    /**
     * @return A Boolean flag indicating whether or not parts of the record are unable to be explicitly managed.
     * 
     */
    public Optional<Output<Boolean>> isProtected() {
        return Optional.ofNullable(this.isProtected);
    }

    /**
     * (Updatable) The record&#39;s data, as whitespace-delimited tokens in type-specific presentation format. All RDATA is normalized and the returned presentation of your RDATA may differ from its initial input. For more information about RDATA, see [Supported DNS Resource Record Types](https://docs.cloud.oracle.com/iaas/Content/DNS/Reference/supporteddnsresource.htm)
     * 
     */
    @Import(name="rdata", required=true)
    private Output<String> rdata;

    /**
     * @return (Updatable) The record&#39;s data, as whitespace-delimited tokens in type-specific presentation format. All RDATA is normalized and the returned presentation of your RDATA may differ from its initial input. For more information about RDATA, see [Supported DNS Resource Record Types](https://docs.cloud.oracle.com/iaas/Content/DNS/Reference/supporteddnsresource.htm)
     * 
     */
    public Output<String> rdata() {
        return this.rdata;
    }

    /**
     * A unique identifier for the record within its zone.
     * 
     */
    @Import(name="recordHash")
    private @Nullable Output<String> recordHash;

    /**
     * @return A unique identifier for the record within its zone.
     * 
     */
    public Optional<Output<String>> recordHash() {
        return Optional.ofNullable(this.recordHash);
    }

    /**
     * The latest version of the record&#39;s zone in which its RRSet differs from the preceding version.
     * 
     */
    @Import(name="rrsetVersion")
    private @Nullable Output<String> rrsetVersion;

    /**
     * @return The latest version of the record&#39;s zone in which its RRSet differs from the preceding version.
     * 
     */
    public Optional<Output<String>> rrsetVersion() {
        return Optional.ofNullable(this.rrsetVersion);
    }

    /**
     * The type of the target RRSet within the target zone.
     * 
     */
    @Import(name="rtype", required=true)
    private Output<String> rtype;

    /**
     * @return The type of the target RRSet within the target zone.
     * 
     */
    public Output<String> rtype() {
        return this.rtype;
    }

    /**
     * (Updatable) The Time To Live for the record, in seconds.
     * 
     */
    @Import(name="ttl", required=true)
    private Output<Integer> ttl;

    /**
     * @return (Updatable) The Time To Live for the record, in seconds.
     * 
     */
    public Output<Integer> ttl() {
        return this.ttl;
    }

    private RrsetItemArgs() {}

    private RrsetItemArgs(RrsetItemArgs $) {
        this.domain = $.domain;
        this.isProtected = $.isProtected;
        this.rdata = $.rdata;
        this.recordHash = $.recordHash;
        this.rrsetVersion = $.rrsetVersion;
        this.rtype = $.rtype;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RrsetItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RrsetItemArgs $;

        public Builder() {
            $ = new RrsetItemArgs();
        }

        public Builder(RrsetItemArgs defaults) {
            $ = new RrsetItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The fully qualified domain name where the record can be located.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The fully qualified domain name where the record can be located.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param isProtected A Boolean flag indicating whether or not parts of the record are unable to be explicitly managed.
         * 
         * @return builder
         * 
         */
        public Builder isProtected(@Nullable Output<Boolean> isProtected) {
            $.isProtected = isProtected;
            return this;
        }

        /**
         * @param isProtected A Boolean flag indicating whether or not parts of the record are unable to be explicitly managed.
         * 
         * @return builder
         * 
         */
        public Builder isProtected(Boolean isProtected) {
            return isProtected(Output.of(isProtected));
        }

        /**
         * @param rdata (Updatable) The record&#39;s data, as whitespace-delimited tokens in type-specific presentation format. All RDATA is normalized and the returned presentation of your RDATA may differ from its initial input. For more information about RDATA, see [Supported DNS Resource Record Types](https://docs.cloud.oracle.com/iaas/Content/DNS/Reference/supporteddnsresource.htm)
         * 
         * @return builder
         * 
         */
        public Builder rdata(Output<String> rdata) {
            $.rdata = rdata;
            return this;
        }

        /**
         * @param rdata (Updatable) The record&#39;s data, as whitespace-delimited tokens in type-specific presentation format. All RDATA is normalized and the returned presentation of your RDATA may differ from its initial input. For more information about RDATA, see [Supported DNS Resource Record Types](https://docs.cloud.oracle.com/iaas/Content/DNS/Reference/supporteddnsresource.htm)
         * 
         * @return builder
         * 
         */
        public Builder rdata(String rdata) {
            return rdata(Output.of(rdata));
        }

        /**
         * @param recordHash A unique identifier for the record within its zone.
         * 
         * @return builder
         * 
         */
        public Builder recordHash(@Nullable Output<String> recordHash) {
            $.recordHash = recordHash;
            return this;
        }

        /**
         * @param recordHash A unique identifier for the record within its zone.
         * 
         * @return builder
         * 
         */
        public Builder recordHash(String recordHash) {
            return recordHash(Output.of(recordHash));
        }

        /**
         * @param rrsetVersion The latest version of the record&#39;s zone in which its RRSet differs from the preceding version.
         * 
         * @return builder
         * 
         */
        public Builder rrsetVersion(@Nullable Output<String> rrsetVersion) {
            $.rrsetVersion = rrsetVersion;
            return this;
        }

        /**
         * @param rrsetVersion The latest version of the record&#39;s zone in which its RRSet differs from the preceding version.
         * 
         * @return builder
         * 
         */
        public Builder rrsetVersion(String rrsetVersion) {
            return rrsetVersion(Output.of(rrsetVersion));
        }

        /**
         * @param rtype The type of the target RRSet within the target zone.
         * 
         * @return builder
         * 
         */
        public Builder rtype(Output<String> rtype) {
            $.rtype = rtype;
            return this;
        }

        /**
         * @param rtype The type of the target RRSet within the target zone.
         * 
         * @return builder
         * 
         */
        public Builder rtype(String rtype) {
            return rtype(Output.of(rtype));
        }

        /**
         * @param ttl (Updatable) The Time To Live for the record, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl (Updatable) The Time To Live for the record, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public RrsetItemArgs build() {
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.rdata = Objects.requireNonNull($.rdata, "expected parameter 'rdata' to be non-null");
            $.rtype = Objects.requireNonNull($.rtype, "expected parameter 'rtype' to be non-null");
            $.ttl = Objects.requireNonNull($.ttl, "expected parameter 'ttl' to be non-null");
            return $;
        }
    }

}
