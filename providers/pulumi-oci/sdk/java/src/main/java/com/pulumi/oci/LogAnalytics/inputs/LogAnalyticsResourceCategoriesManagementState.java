// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogAnalyticsResourceCategoriesManagementState extends com.pulumi.resources.ResourceArgs {

    public static final LogAnalyticsResourceCategoriesManagementState Empty = new LogAnalyticsResourceCategoriesManagementState();

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The list of categories to be assigned to the resource.
     * 
     */
    @Import(name="resourceCategories")
    private @Nullable Output<List<String>> resourceCategories;

    /**
     * @return The list of categories to be assigned to the resource.
     * 
     */
    public Optional<Output<List<String>>> resourceCategories() {
        return Optional.ofNullable(this.resourceCategories);
    }

    /**
     * The resource unique identifier for which catagories are managed.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The resource unique identifier for which catagories are managed.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The resource type of the resource for which categories are managed.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The resource type of the resource for which categories are managed.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    private LogAnalyticsResourceCategoriesManagementState() {}

    private LogAnalyticsResourceCategoriesManagementState(LogAnalyticsResourceCategoriesManagementState $) {
        this.namespace = $.namespace;
        this.resourceCategories = $.resourceCategories;
        this.resourceId = $.resourceId;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogAnalyticsResourceCategoriesManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogAnalyticsResourceCategoriesManagementState $;

        public Builder() {
            $ = new LogAnalyticsResourceCategoriesManagementState();
        }

        public Builder(LogAnalyticsResourceCategoriesManagementState defaults) {
            $ = new LogAnalyticsResourceCategoriesManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param resourceCategories The list of categories to be assigned to the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceCategories(@Nullable Output<List<String>> resourceCategories) {
            $.resourceCategories = resourceCategories;
            return this;
        }

        /**
         * @param resourceCategories The list of categories to be assigned to the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceCategories(List<String> resourceCategories) {
            return resourceCategories(Output.of(resourceCategories));
        }

        /**
         * @param resourceCategories The list of categories to be assigned to the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceCategories(String... resourceCategories) {
            return resourceCategories(List.of(resourceCategories));
        }

        /**
         * @param resourceId The resource unique identifier for which catagories are managed.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The resource unique identifier for which catagories are managed.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceType The resource type of the resource for which categories are managed.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The resource type of the resource for which categories are managed.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public LogAnalyticsResourceCategoriesManagementState build() {
            return $;
        }
    }

}
