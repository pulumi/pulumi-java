// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.GetUserAssessmentUsersFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetUserAssessmentUsersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserAssessmentUsersArgs Empty = new GetUserAssessmentUsersArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private Output</* @Nullable */ String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Output</* @Nullable */ String> accessLevel() {
        return this.accessLevel;
    }

    /**
     * A filter to return only items that match the specified account status.
     * 
     */
    @Import(name="accountStatus")
    private Output</* @Nullable */ String> accountStatus;

    /**
     * @return A filter to return only items that match the specified account status.
     * 
     */
    public Output</* @Nullable */ String> accountStatus() {
        return this.accountStatus;
    }

    /**
     * A filter to return only items that match the specified authentication type.
     * 
     */
    @Import(name="authenticationType")
    private Output</* @Nullable */ String> authenticationType;

    /**
     * @return A filter to return only items that match the specified authentication type.
     * 
     */
    public Output</* @Nullable */ String> authenticationType() {
        return this.authenticationType;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private Output</* @Nullable */ Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Output</* @Nullable */ Boolean> compartmentIdInSubtree() {
        return this.compartmentIdInSubtree;
    }

    @Import(name="filters")
    private Output</* @Nullable */ List<GetUserAssessmentUsersFilter>> filters;

    public Output</* @Nullable */ List<GetUserAssessmentUsersFilter>> filters() {
        return this.filters;
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private Output</* @Nullable */ String> targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Output</* @Nullable */ String> targetId() {
        return this.targetId;
    }

    /**
     * A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeLastLoginGreaterThanOrEqualTo")
    private Output</* @Nullable */ String> timeLastLoginGreaterThanOrEqualTo;

    /**
     * @return A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Output</* @Nullable */ String> timeLastLoginGreaterThanOrEqualTo() {
        return this.timeLastLoginGreaterThanOrEqualTo;
    }

    /**
     * A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timeLastLoginLessThan")
    private Output</* @Nullable */ String> timeLastLoginLessThan;

    /**
     * @return A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Output</* @Nullable */ String> timeLastLoginLessThan() {
        return this.timeLastLoginLessThan;
    }

    /**
     * A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timePasswordLastChangedGreaterThanOrEqualTo")
    private Output</* @Nullable */ String> timePasswordLastChangedGreaterThanOrEqualTo;

    /**
     * @return A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Output</* @Nullable */ String> timePasswordLastChangedGreaterThanOrEqualTo() {
        return this.timePasswordLastChangedGreaterThanOrEqualTo;
    }

    /**
     * A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timePasswordLastChangedLessThan")
    private Output</* @Nullable */ String> timePasswordLastChangedLessThan;

    /**
     * @return A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Output</* @Nullable */ String> timePasswordLastChangedLessThan() {
        return this.timePasswordLastChangedLessThan;
    }

    /**
     * A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timeUserCreatedGreaterThanOrEqualTo")
    private Output</* @Nullable */ String> timeUserCreatedGreaterThanOrEqualTo;

    /**
     * @return A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Output</* @Nullable */ String> timeUserCreatedGreaterThanOrEqualTo() {
        return this.timeUserCreatedGreaterThanOrEqualTo;
    }

    /**
     * A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timeUserCreatedLessThan")
    private Output</* @Nullable */ String> timeUserCreatedLessThan;

    /**
     * @return A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Output</* @Nullable */ String> timeUserCreatedLessThan() {
        return this.timeUserCreatedLessThan;
    }

    /**
     * The OCID of the user assessment.
     * 
     */
    @Import(name="userAssessmentId", required=true)
    private Output<String> userAssessmentId;

    /**
     * @return The OCID of the user assessment.
     * 
     */
    public Output<String> userAssessmentId() {
        return this.userAssessmentId;
    }

    /**
     * A filter to return only items that match the specified user category.
     * 
     */
    @Import(name="userCategory")
    private Output</* @Nullable */ String> userCategory;

    /**
     * @return A filter to return only items that match the specified user category.
     * 
     */
    public Output</* @Nullable */ String> userCategory() {
        return this.userCategory;
    }

    /**
     * A filter to return only items that match the specified user key.
     * 
     */
    @Import(name="userKey")
    private Output</* @Nullable */ String> userKey;

    /**
     * @return A filter to return only items that match the specified user key.
     * 
     */
    public Output</* @Nullable */ String> userKey() {
        return this.userKey;
    }

    /**
     * A filter to return only items that match the specified user name.
     * 
     */
    @Import(name="userName")
    private Output</* @Nullable */ String> userName;

    /**
     * @return A filter to return only items that match the specified user name.
     * 
     */
    public Output</* @Nullable */ String> userName() {
        return this.userName;
    }

    private GetUserAssessmentUsersArgs() {}

    private GetUserAssessmentUsersArgs(GetUserAssessmentUsersArgs $) {
        this.accessLevel = $.accessLevel;
        this.accountStatus = $.accountStatus;
        this.authenticationType = $.authenticationType;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.targetId = $.targetId;
        this.timeLastLoginGreaterThanOrEqualTo = $.timeLastLoginGreaterThanOrEqualTo;
        this.timeLastLoginLessThan = $.timeLastLoginLessThan;
        this.timePasswordLastChangedGreaterThanOrEqualTo = $.timePasswordLastChangedGreaterThanOrEqualTo;
        this.timePasswordLastChangedLessThan = $.timePasswordLastChangedLessThan;
        this.timeUserCreatedGreaterThanOrEqualTo = $.timeUserCreatedGreaterThanOrEqualTo;
        this.timeUserCreatedLessThan = $.timeUserCreatedLessThan;
        this.userAssessmentId = $.userAssessmentId;
        this.userCategory = $.userCategory;
        this.userKey = $.userKey;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserAssessmentUsersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserAssessmentUsersArgs $;

        public Builder() {
            $ = new GetUserAssessmentUsersArgs();
        }

        public Builder(GetUserAssessmentUsersArgs defaults) {
            $ = new GetUserAssessmentUsersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(Output</* @Nullable */ String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param accountStatus A filter to return only items that match the specified account status.
         * 
         * @return builder
         * 
         */
        public Builder accountStatus(Output</* @Nullable */ String> accountStatus) {
            $.accountStatus = accountStatus;
            return this;
        }

        /**
         * @param accountStatus A filter to return only items that match the specified account status.
         * 
         * @return builder
         * 
         */
        public Builder accountStatus(@Nullable String accountStatus) {
            return accountStatus(Output.of(accountStatus));
        }

        /**
         * @param authenticationType A filter to return only items that match the specified authentication type.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(Output</* @Nullable */ String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param authenticationType A filter to return only items that match the specified authentication type.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(@Nullable String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Output</* @Nullable */ Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        public Builder filters(Output</* @Nullable */ List<GetUserAssessmentUsersFilter>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(@Nullable List<GetUserAssessmentUsersFilter> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetUserAssessmentUsersFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(Output</* @Nullable */ String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param timeLastLoginGreaterThanOrEqualTo A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeLastLoginGreaterThanOrEqualTo(Output</* @Nullable */ String> timeLastLoginGreaterThanOrEqualTo) {
            $.timeLastLoginGreaterThanOrEqualTo = timeLastLoginGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timeLastLoginGreaterThanOrEqualTo A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeLastLoginGreaterThanOrEqualTo(@Nullable String timeLastLoginGreaterThanOrEqualTo) {
            return timeLastLoginGreaterThanOrEqualTo(Output.of(timeLastLoginGreaterThanOrEqualTo));
        }

        /**
         * @param timeLastLoginLessThan A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeLastLoginLessThan(Output</* @Nullable */ String> timeLastLoginLessThan) {
            $.timeLastLoginLessThan = timeLastLoginLessThan;
            return this;
        }

        /**
         * @param timeLastLoginLessThan A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeLastLoginLessThan(@Nullable String timeLastLoginLessThan) {
            return timeLastLoginLessThan(Output.of(timeLastLoginLessThan));
        }

        /**
         * @param timePasswordLastChangedGreaterThanOrEqualTo A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timePasswordLastChangedGreaterThanOrEqualTo(Output</* @Nullable */ String> timePasswordLastChangedGreaterThanOrEqualTo) {
            $.timePasswordLastChangedGreaterThanOrEqualTo = timePasswordLastChangedGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timePasswordLastChangedGreaterThanOrEqualTo A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timePasswordLastChangedGreaterThanOrEqualTo(@Nullable String timePasswordLastChangedGreaterThanOrEqualTo) {
            return timePasswordLastChangedGreaterThanOrEqualTo(Output.of(timePasswordLastChangedGreaterThanOrEqualTo));
        }

        /**
         * @param timePasswordLastChangedLessThan A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timePasswordLastChangedLessThan(Output</* @Nullable */ String> timePasswordLastChangedLessThan) {
            $.timePasswordLastChangedLessThan = timePasswordLastChangedLessThan;
            return this;
        }

        /**
         * @param timePasswordLastChangedLessThan A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timePasswordLastChangedLessThan(@Nullable String timePasswordLastChangedLessThan) {
            return timePasswordLastChangedLessThan(Output.of(timePasswordLastChangedLessThan));
        }

        /**
         * @param timeUserCreatedGreaterThanOrEqualTo A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeUserCreatedGreaterThanOrEqualTo(Output</* @Nullable */ String> timeUserCreatedGreaterThanOrEqualTo) {
            $.timeUserCreatedGreaterThanOrEqualTo = timeUserCreatedGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timeUserCreatedGreaterThanOrEqualTo A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeUserCreatedGreaterThanOrEqualTo(@Nullable String timeUserCreatedGreaterThanOrEqualTo) {
            return timeUserCreatedGreaterThanOrEqualTo(Output.of(timeUserCreatedGreaterThanOrEqualTo));
        }

        /**
         * @param timeUserCreatedLessThan A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeUserCreatedLessThan(Output</* @Nullable */ String> timeUserCreatedLessThan) {
            $.timeUserCreatedLessThan = timeUserCreatedLessThan;
            return this;
        }

        /**
         * @param timeUserCreatedLessThan A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeUserCreatedLessThan(@Nullable String timeUserCreatedLessThan) {
            return timeUserCreatedLessThan(Output.of(timeUserCreatedLessThan));
        }

        /**
         * @param userAssessmentId The OCID of the user assessment.
         * 
         * @return builder
         * 
         */
        public Builder userAssessmentId(Output<String> userAssessmentId) {
            $.userAssessmentId = userAssessmentId;
            return this;
        }

        /**
         * @param userAssessmentId The OCID of the user assessment.
         * 
         * @return builder
         * 
         */
        public Builder userAssessmentId(String userAssessmentId) {
            return userAssessmentId(Output.of(userAssessmentId));
        }

        /**
         * @param userCategory A filter to return only items that match the specified user category.
         * 
         * @return builder
         * 
         */
        public Builder userCategory(Output</* @Nullable */ String> userCategory) {
            $.userCategory = userCategory;
            return this;
        }

        /**
         * @param userCategory A filter to return only items that match the specified user category.
         * 
         * @return builder
         * 
         */
        public Builder userCategory(@Nullable String userCategory) {
            return userCategory(Output.of(userCategory));
        }

        /**
         * @param userKey A filter to return only items that match the specified user key.
         * 
         * @return builder
         * 
         */
        public Builder userKey(Output</* @Nullable */ String> userKey) {
            $.userKey = userKey;
            return this;
        }

        /**
         * @param userKey A filter to return only items that match the specified user key.
         * 
         * @return builder
         * 
         */
        public Builder userKey(@Nullable String userKey) {
            return userKey(Output.of(userKey));
        }

        /**
         * @param userName A filter to return only items that match the specified user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(Output</* @Nullable */ String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName A filter to return only items that match the specified user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable String userName) {
            return userName(Output.of(userName));
        }

        public GetUserAssessmentUsersArgs build() {
            $.userAssessmentId = Objects.requireNonNull($.userAssessmentId, "expected parameter 'userAssessmentId' to be non-null");
            return $;
        }
    }

}
