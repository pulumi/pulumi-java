// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesUserProxyUsersFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesUserProxyUsersProxyUserCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabasesUserProxyUsersResult {
    private final @Nullable List<GetManagedDatabasesUserProxyUsersFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String managedDatabaseId;
    /**
     * @return The name of a proxy user or the name of the client user.
     * 
     */
    private final @Nullable String name;
    /**
     * @return The list of proxy_user_collection.
     * 
     */
    private final List<GetManagedDatabasesUserProxyUsersProxyUserCollection> proxyUserCollections;
    private final String userName;

    @CustomType.Constructor
    private GetManagedDatabasesUserProxyUsersResult(
        @CustomType.Parameter("filters") @Nullable List<GetManagedDatabasesUserProxyUsersFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("managedDatabaseId") String managedDatabaseId,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("proxyUserCollections") List<GetManagedDatabasesUserProxyUsersProxyUserCollection> proxyUserCollections,
        @CustomType.Parameter("userName") String userName) {
        this.filters = filters;
        this.id = id;
        this.managedDatabaseId = managedDatabaseId;
        this.name = name;
        this.proxyUserCollections = proxyUserCollections;
        this.userName = userName;
    }

    public List<GetManagedDatabasesUserProxyUsersFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The name of a proxy user or the name of the client user.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The list of proxy_user_collection.
     * 
     */
    public List<GetManagedDatabasesUserProxyUsersProxyUserCollection> proxyUserCollections() {
        return this.proxyUserCollections;
    }
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabasesUserProxyUsersResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<GetManagedDatabasesUserProxyUsersFilter> filters;
        private String id;
        private String managedDatabaseId;
        private @Nullable String name;
        private List<GetManagedDatabasesUserProxyUsersProxyUserCollection> proxyUserCollections;
        private String userName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedDatabasesUserProxyUsersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.name = defaults.name;
    	      this.proxyUserCollections = defaults.proxyUserCollections;
    	      this.userName = defaults.userName;
        }

        public Builder filters(@Nullable List<GetManagedDatabasesUserProxyUsersFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedDatabasesUserProxyUsersFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder managedDatabaseId(String managedDatabaseId) {
            this.managedDatabaseId = Objects.requireNonNull(managedDatabaseId);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder proxyUserCollections(List<GetManagedDatabasesUserProxyUsersProxyUserCollection> proxyUserCollections) {
            this.proxyUserCollections = Objects.requireNonNull(proxyUserCollections);
            return this;
        }
        public Builder proxyUserCollections(GetManagedDatabasesUserProxyUsersProxyUserCollection... proxyUserCollections) {
            return proxyUserCollections(List.of(proxyUserCollections));
        }
        public Builder userName(String userName) {
            this.userName = Objects.requireNonNull(userName);
            return this;
        }        public GetManagedDatabasesUserProxyUsersResult build() {
            return new GetManagedDatabasesUserProxyUsersResult(filters, id, managedDatabaseId, name, proxyUserCollections, userName);
        }
    }
}
