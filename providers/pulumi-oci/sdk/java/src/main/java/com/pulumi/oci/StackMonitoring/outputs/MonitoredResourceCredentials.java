// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.StackMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.StackMonitoring.outputs.MonitoredResourceCredentialsProperty;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MonitoredResourceCredentials {
    /**
     * @return (Updatable) Type of credentials specified in the credentials element. Three possible values - EXISTING, PLAINTEXT and ENCRYPTED. * EXISTING  - Credential is already stored in agent and only credential name need to be passed for existing credential. * PLAINTEXT - The credential properties will have credentials in plain text format. * ENCRYPTED - The credential properties will have credentials stored in vault in encrypted format using KMS client which uses master key for encryption. The same master key will be used to decrypt the credentials before passing on to the management agent.
     * 
     */
    private final @Nullable String credentialType;
    /**
     * @return (Updatable) The user-specified textual description of the credential.
     * 
     */
    private final @Nullable String description;
    /**
     * @return (Updatable) The master key OCID and applicable only for property value type ENCRYPTION. Key OCID is passed as input to Key management service decrypt API to retrieve the encrypted property value text.
     * 
     */
    private final @Nullable String keyId;
    /**
     * @return (Updatable) property name
     * 
     */
    private final @Nullable String name;
    /**
     * @return (Updatable) List of monitored resource properties
     * 
     */
    private final @Nullable List<MonitoredResourceCredentialsProperty> properties;
    /**
     * @return (Updatable) The source type and source name combination,delimited with (.) separator. {source type}.{source name} and source type max char limit is 63.
     * 
     */
    private final @Nullable String source;
    /**
     * @return Monitored resource type
     * 
     */
    private final @Nullable String type;

    @CustomType.Constructor
    private MonitoredResourceCredentials(
        @CustomType.Parameter("credentialType") @Nullable String credentialType,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("keyId") @Nullable String keyId,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("properties") @Nullable List<MonitoredResourceCredentialsProperty> properties,
        @CustomType.Parameter("source") @Nullable String source,
        @CustomType.Parameter("type") @Nullable String type) {
        this.credentialType = credentialType;
        this.description = description;
        this.keyId = keyId;
        this.name = name;
        this.properties = properties;
        this.source = source;
        this.type = type;
    }

    /**
     * @return (Updatable) Type of credentials specified in the credentials element. Three possible values - EXISTING, PLAINTEXT and ENCRYPTED. * EXISTING  - Credential is already stored in agent and only credential name need to be passed for existing credential. * PLAINTEXT - The credential properties will have credentials in plain text format. * ENCRYPTED - The credential properties will have credentials stored in vault in encrypted format using KMS client which uses master key for encryption. The same master key will be used to decrypt the credentials before passing on to the management agent.
     * 
     */
    public Optional<String> credentialType() {
        return Optional.ofNullable(this.credentialType);
    }
    /**
     * @return (Updatable) The user-specified textual description of the credential.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) The master key OCID and applicable only for property value type ENCRYPTION. Key OCID is passed as input to Key management service decrypt API to retrieve the encrypted property value text.
     * 
     */
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }
    /**
     * @return (Updatable) property name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (Updatable) List of monitored resource properties
     * 
     */
    public List<MonitoredResourceCredentialsProperty> properties() {
        return this.properties == null ? List.of() : this.properties;
    }
    /**
     * @return (Updatable) The source type and source name combination,delimited with (.) separator. {source type}.{source name} and source type max char limit is 63.
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return Monitored resource type
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitoredResourceCredentials defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String credentialType;
        private @Nullable String description;
        private @Nullable String keyId;
        private @Nullable String name;
        private @Nullable List<MonitoredResourceCredentialsProperty> properties;
        private @Nullable String source;
        private @Nullable String type;

        public Builder() {
    	      // Empty
        }

        public Builder(MonitoredResourceCredentials defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialType = defaults.credentialType;
    	      this.description = defaults.description;
    	      this.keyId = defaults.keyId;
    	      this.name = defaults.name;
    	      this.properties = defaults.properties;
    	      this.source = defaults.source;
    	      this.type = defaults.type;
        }

        public Builder credentialType(@Nullable String credentialType) {
            this.credentialType = credentialType;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder keyId(@Nullable String keyId) {
            this.keyId = keyId;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder properties(@Nullable List<MonitoredResourceCredentialsProperty> properties) {
            this.properties = properties;
            return this;
        }
        public Builder properties(MonitoredResourceCredentialsProperty... properties) {
            return properties(List.of(properties));
        }
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }        public MonitoredResourceCredentials build() {
            return new MonitoredResourceCredentials(credentialType, description, keyId, name, properties, source, type);
        }
    }
}
