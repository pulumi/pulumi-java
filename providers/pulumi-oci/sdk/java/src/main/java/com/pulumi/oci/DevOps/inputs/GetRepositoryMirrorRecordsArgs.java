// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.GetRepositoryMirrorRecordsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryMirrorRecordsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryMirrorRecordsArgs Empty = new GetRepositoryMirrorRecordsArgs();

    @Import(name="filters")
    private @Nullable List<GetRepositoryMirrorRecordsFilter> filters;

    public Optional<List<GetRepositoryMirrorRecordsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId", required=true)
    private String repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    private GetRepositoryMirrorRecordsArgs() {}

    private GetRepositoryMirrorRecordsArgs(GetRepositoryMirrorRecordsArgs $) {
        this.filters = $.filters;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryMirrorRecordsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryMirrorRecordsArgs $;

        public Builder() {
            $ = new GetRepositoryMirrorRecordsArgs();
        }

        public Builder(GetRepositoryMirrorRecordsArgs defaults) {
            $ = new GetRepositoryMirrorRecordsArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetRepositoryMirrorRecordsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetRepositoryMirrorRecordsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        public GetRepositoryMirrorRecordsArgs build() {
            $.repositoryId = Objects.requireNonNull($.repositoryId, "expected parameter 'repositoryId' to be non-null");
            return $;
        }
    }

}
