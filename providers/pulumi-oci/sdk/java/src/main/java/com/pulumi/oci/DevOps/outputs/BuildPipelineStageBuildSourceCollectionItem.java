// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BuildPipelineStageBuildSourceCollectionItem {
    /**
     * @return (Updatable) Branch name.
     * 
     */
    private final @Nullable String branch;
    /**
     * @return (Updatable) Connection identifier pertinent to GitHub source provider.
     * 
     */
    private final @Nullable String connectionId;
    /**
     * @return (Updatable) The type of source provider.
     * 
     */
    private final String connectionType;
    /**
     * @return (Updatable) Name of the build source. This must be unique within a build source collection. The name can be used by customers to locate the working directory pertinent to this repository.
     * 
     */
    private final @Nullable String name;
    /**
     * @return (Updatable) The DevOps code repository ID.
     * 
     */
    private final @Nullable String repositoryId;
    /**
     * @return (Updatable) URL for the repository.
     * 
     */
    private final @Nullable String repositoryUrl;

    @CustomType.Constructor
    private BuildPipelineStageBuildSourceCollectionItem(
        @CustomType.Parameter("branch") @Nullable String branch,
        @CustomType.Parameter("connectionId") @Nullable String connectionId,
        @CustomType.Parameter("connectionType") String connectionType,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("repositoryId") @Nullable String repositoryId,
        @CustomType.Parameter("repositoryUrl") @Nullable String repositoryUrl) {
        this.branch = branch;
        this.connectionId = connectionId;
        this.connectionType = connectionType;
        this.name = name;
        this.repositoryId = repositoryId;
        this.repositoryUrl = repositoryUrl;
    }

    /**
     * @return (Updatable) Branch name.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }
    /**
     * @return (Updatable) Connection identifier pertinent to GitHub source provider.
     * 
     */
    public Optional<String> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }
    /**
     * @return (Updatable) The type of source provider.
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return (Updatable) Name of the build source. This must be unique within a build source collection. The name can be used by customers to locate the working directory pertinent to this repository.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (Updatable) The DevOps code repository ID.
     * 
     */
    public Optional<String> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }
    /**
     * @return (Updatable) URL for the repository.
     * 
     */
    public Optional<String> repositoryUrl() {
        return Optional.ofNullable(this.repositoryUrl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildPipelineStageBuildSourceCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String branch;
        private @Nullable String connectionId;
        private String connectionType;
        private @Nullable String name;
        private @Nullable String repositoryId;
        private @Nullable String repositoryUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildPipelineStageBuildSourceCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.connectionId = defaults.connectionId;
    	      this.connectionType = defaults.connectionType;
    	      this.name = defaults.name;
    	      this.repositoryId = defaults.repositoryId;
    	      this.repositoryUrl = defaults.repositoryUrl;
        }

        public Builder branch(@Nullable String branch) {
            this.branch = branch;
            return this;
        }
        public Builder connectionId(@Nullable String connectionId) {
            this.connectionId = connectionId;
            return this;
        }
        public Builder connectionType(String connectionType) {
            this.connectionType = Objects.requireNonNull(connectionType);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder repositoryId(@Nullable String repositoryId) {
            this.repositoryId = repositoryId;
            return this;
        }
        public Builder repositoryUrl(@Nullable String repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }        public BuildPipelineStageBuildSourceCollectionItem build() {
            return new BuildPipelineStageBuildSourceCollectionItem(branch, connectionId, connectionType, name, repositoryId, repositoryUrl);
        }
    }
}
