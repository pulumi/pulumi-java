// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseTools.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseTools.outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStore;
import com.pulumi.oci.DatabaseTools.outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResource;
import com.pulumi.oci.DatabaseTools.outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPassword;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItem {
    /**
     * @return Advanced connection properties key-value pair (e.g., oracle.net.ssl_server_dn_match).
     * 
     */
    private final Map<String,Object> advancedProperties;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private final String compartmentId;
    /**
     * @return Connect descriptor or Easy Connect Naming method to connect to the database.
     * 
     */
    private final String connectionString;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private final String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DatabaseToolsConnection.
     * 
     */
    private final String id;
    /**
     * @return Oracle wallet or Java Keystores containing trusted certificates for authenticating the server&#39;s public certificate and the client private key and associated certificates required for client authentication.
     * 
     */
    private final List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStore> keyStores;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private final String lifecycleDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DatabaseToolsPrivateEndpoint used to access the database in the Customer VCN.
     * 
     */
    private final String privateEndpointId;
    /**
     * @return A related resource
     * 
     */
    private final List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResource> relatedResources;
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    private final String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private final Map<String,Object> systemTags;
    /**
     * @return The time the DatabaseToolsConnection was created. An RFC3339 formatted datetime string
     * 
     */
    private final String timeCreated;
    /**
     * @return The time the DatabaseToolsConnection was updated. An RFC3339 formatted datetime string
     * 
     */
    private final String timeUpdated;
    /**
     * @return A filter to return only resources their endpointServiceId matches the given endpointServiceId.
     * 
     */
    private final String type;
    /**
     * @return Database user name.
     * 
     */
    private final String userName;
    /**
     * @return The user password.
     * 
     */
    private final List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPassword> userPasswords;

    @CustomType.Constructor
    private GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItem(
        @CustomType.Parameter("advancedProperties") Map<String,Object> advancedProperties,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("connectionString") String connectionString,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("keyStores") List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStore> keyStores,
        @CustomType.Parameter("lifecycleDetails") String lifecycleDetails,
        @CustomType.Parameter("privateEndpointId") String privateEndpointId,
        @CustomType.Parameter("relatedResources") List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResource> relatedResources,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("systemTags") Map<String,Object> systemTags,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("userName") String userName,
        @CustomType.Parameter("userPasswords") List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPassword> userPasswords) {
        this.advancedProperties = advancedProperties;
        this.compartmentId = compartmentId;
        this.connectionString = connectionString;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.id = id;
        this.keyStores = keyStores;
        this.lifecycleDetails = lifecycleDetails;
        this.privateEndpointId = privateEndpointId;
        this.relatedResources = relatedResources;
        this.state = state;
        this.systemTags = systemTags;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
        this.type = type;
        this.userName = userName;
        this.userPasswords = userPasswords;
    }

    /**
     * @return Advanced connection properties key-value pair (e.g., oracle.net.ssl_server_dn_match).
     * 
     */
    public Map<String,Object> advancedProperties() {
        return this.advancedProperties;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Connect descriptor or Easy Connect Naming method to connect to the database.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DatabaseToolsConnection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Oracle wallet or Java Keystores containing trusted certificates for authenticating the server&#39;s public certificate and the client private key and associated certificates required for client authentication.
     * 
     */
    public List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStore> keyStores() {
        return this.keyStores;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DatabaseToolsPrivateEndpoint used to access the database in the Customer VCN.
     * 
     */
    public String privateEndpointId() {
        return this.privateEndpointId;
    }
    /**
     * @return A related resource
     * 
     */
    public List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResource> relatedResources() {
        return this.relatedResources;
    }
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the DatabaseToolsConnection was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the DatabaseToolsConnection was updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return A filter to return only resources their endpointServiceId matches the given endpointServiceId.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Database user name.
     * 
     */
    public String userName() {
        return this.userName;
    }
    /**
     * @return The user password.
     * 
     */
    public List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPassword> userPasswords() {
        return this.userPasswords;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,Object> advancedProperties;
        private String compartmentId;
        private String connectionString;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStore> keyStores;
        private String lifecycleDetails;
        private String privateEndpointId;
        private List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResource> relatedResources;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        private String userName;
        private List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPassword> userPasswords;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedProperties = defaults.advancedProperties;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionString = defaults.connectionString;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.keyStores = defaults.keyStores;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.privateEndpointId = defaults.privateEndpointId;
    	      this.relatedResources = defaults.relatedResources;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.userName = defaults.userName;
    	      this.userPasswords = defaults.userPasswords;
        }

        public Builder advancedProperties(Map<String,Object> advancedProperties) {
            this.advancedProperties = Objects.requireNonNull(advancedProperties);
            return this;
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder keyStores(List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStore> keyStores) {
            this.keyStores = Objects.requireNonNull(keyStores);
            return this;
        }
        public Builder keyStores(GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStore... keyStores) {
            return keyStores(List.of(keyStores));
        }
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        public Builder privateEndpointId(String privateEndpointId) {
            this.privateEndpointId = Objects.requireNonNull(privateEndpointId);
            return this;
        }
        public Builder relatedResources(List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResource> relatedResources) {
            this.relatedResources = Objects.requireNonNull(relatedResources);
            return this;
        }
        public Builder relatedResources(GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResource... relatedResources) {
            return relatedResources(List.of(relatedResources));
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder userName(String userName) {
            this.userName = Objects.requireNonNull(userName);
            return this;
        }
        public Builder userPasswords(List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPassword> userPasswords) {
            this.userPasswords = Objects.requireNonNull(userPasswords);
            return this;
        }
        public Builder userPasswords(GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPassword... userPasswords) {
            return userPasswords(List.of(userPasswords));
        }        public GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItem build() {
            return new GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItem(advancedProperties, compartmentId, connectionString, definedTags, displayName, freeformTags, id, keyStores, lifecycleDetails, privateEndpointId, relatedResources, state, systemTags, timeCreated, timeUpdated, type, userName, userPasswords);
        }
    }
}
