// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ManagementAgent.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementAgentInstallKeyState extends com.pulumi.resources.ResourceArgs {

    public static final ManagementAgentInstallKeyState Empty = new ManagementAgentInstallKeyState();

    /**
     * Total number of install for this keys
     * 
     */
    @Import(name="allowedKeyInstallCount")
    private @Nullable Output<Integer> allowedKeyInstallCount;

    /**
     * @return Total number of install for this keys
     * 
     */
    public Optional<Output<Integer>> allowedKeyInstallCount() {
        return Optional.ofNullable(this.allowedKeyInstallCount);
    }

    /**
     * Compartment Identifier
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return Compartment Identifier
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Principal id of user who created the Agent Install key
     * 
     */
    @Import(name="createdByPrincipalId")
    private @Nullable Output<String> createdByPrincipalId;

    /**
     * @return Principal id of user who created the Agent Install key
     * 
     */
    public Optional<Output<String>> createdByPrincipalId() {
        return Optional.ofNullable(this.createdByPrincipalId);
    }

    /**
     * Total number of install for this keys
     * 
     */
    @Import(name="currentKeyInstallCount")
    private @Nullable Output<Integer> currentKeyInstallCount;

    /**
     * @return Total number of install for this keys
     * 
     */
    public Optional<Output<Integer>> currentKeyInstallCount() {
        return Optional.ofNullable(this.currentKeyInstallCount);
    }

    /**
     * (Updatable) Management Agent install Key Name
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) Management Agent install Key Name
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * If set to true, the install key has no expiration date or usage limit. Defaults to false
     * 
     */
    @Import(name="isUnlimited")
    private @Nullable Output<Boolean> isUnlimited;

    /**
     * @return If set to true, the install key has no expiration date or usage limit. Defaults to false
     * 
     */
    public Optional<Output<Boolean>> isUnlimited() {
        return Optional.ofNullable(this.isUnlimited);
    }

    /**
     * Management Agent Install Key
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Management Agent Install Key
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * Status of Key
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Status of Key
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The time when Management Agent install Key was created. An RFC3339 formatted date time string
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time when Management Agent install Key was created. An RFC3339 formatted date time string
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * date after which key would expire after creation
     * 
     */
    @Import(name="timeExpires")
    private @Nullable Output<String> timeExpires;

    /**
     * @return date after which key would expire after creation
     * 
     */
    public Optional<Output<String>> timeExpires() {
        return Optional.ofNullable(this.timeExpires);
    }

    /**
     * The time when Management Agent install Key was updated. An RFC3339 formatted date time string
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time when Management Agent install Key was updated. An RFC3339 formatted date time string
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private ManagementAgentInstallKeyState() {}

    private ManagementAgentInstallKeyState(ManagementAgentInstallKeyState $) {
        this.allowedKeyInstallCount = $.allowedKeyInstallCount;
        this.compartmentId = $.compartmentId;
        this.createdByPrincipalId = $.createdByPrincipalId;
        this.currentKeyInstallCount = $.currentKeyInstallCount;
        this.displayName = $.displayName;
        this.isUnlimited = $.isUnlimited;
        this.key = $.key;
        this.lifecycleDetails = $.lifecycleDetails;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeExpires = $.timeExpires;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementAgentInstallKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementAgentInstallKeyState $;

        public Builder() {
            $ = new ManagementAgentInstallKeyState();
        }

        public Builder(ManagementAgentInstallKeyState defaults) {
            $ = new ManagementAgentInstallKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedKeyInstallCount Total number of install for this keys
         * 
         * @return builder
         * 
         */
        public Builder allowedKeyInstallCount(@Nullable Output<Integer> allowedKeyInstallCount) {
            $.allowedKeyInstallCount = allowedKeyInstallCount;
            return this;
        }

        /**
         * @param allowedKeyInstallCount Total number of install for this keys
         * 
         * @return builder
         * 
         */
        public Builder allowedKeyInstallCount(Integer allowedKeyInstallCount) {
            return allowedKeyInstallCount(Output.of(allowedKeyInstallCount));
        }

        /**
         * @param compartmentId Compartment Identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId Compartment Identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param createdByPrincipalId Principal id of user who created the Agent Install key
         * 
         * @return builder
         * 
         */
        public Builder createdByPrincipalId(@Nullable Output<String> createdByPrincipalId) {
            $.createdByPrincipalId = createdByPrincipalId;
            return this;
        }

        /**
         * @param createdByPrincipalId Principal id of user who created the Agent Install key
         * 
         * @return builder
         * 
         */
        public Builder createdByPrincipalId(String createdByPrincipalId) {
            return createdByPrincipalId(Output.of(createdByPrincipalId));
        }

        /**
         * @param currentKeyInstallCount Total number of install for this keys
         * 
         * @return builder
         * 
         */
        public Builder currentKeyInstallCount(@Nullable Output<Integer> currentKeyInstallCount) {
            $.currentKeyInstallCount = currentKeyInstallCount;
            return this;
        }

        /**
         * @param currentKeyInstallCount Total number of install for this keys
         * 
         * @return builder
         * 
         */
        public Builder currentKeyInstallCount(Integer currentKeyInstallCount) {
            return currentKeyInstallCount(Output.of(currentKeyInstallCount));
        }

        /**
         * @param displayName (Updatable) Management Agent install Key Name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Management Agent install Key Name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param isUnlimited If set to true, the install key has no expiration date or usage limit. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder isUnlimited(@Nullable Output<Boolean> isUnlimited) {
            $.isUnlimited = isUnlimited;
            return this;
        }

        /**
         * @param isUnlimited If set to true, the install key has no expiration date or usage limit. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder isUnlimited(Boolean isUnlimited) {
            return isUnlimited(Output.of(isUnlimited));
        }

        /**
         * @param key Management Agent Install Key
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Management Agent Install Key
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param lifecycleDetails A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param state Status of Key
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Status of Key
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The time when Management Agent install Key was created. An RFC3339 formatted date time string
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time when Management Agent install Key was created. An RFC3339 formatted date time string
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeExpires date after which key would expire after creation
         * 
         * @return builder
         * 
         */
        public Builder timeExpires(@Nullable Output<String> timeExpires) {
            $.timeExpires = timeExpires;
            return this;
        }

        /**
         * @param timeExpires date after which key would expire after creation
         * 
         * @return builder
         * 
         */
        public Builder timeExpires(String timeExpires) {
            return timeExpires(Output.of(timeExpires));
        }

        /**
         * @param timeUpdated The time when Management Agent install Key was updated. An RFC3339 formatted date time string
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time when Management Agent install Key was updated. An RFC3339 formatted date time string
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public ManagementAgentInstallKeyState build() {
            return $;
        }
    }

}
