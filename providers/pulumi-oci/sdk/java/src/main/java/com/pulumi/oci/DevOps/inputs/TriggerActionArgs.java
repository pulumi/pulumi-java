// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.TriggerActionFilterArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerActionArgs Empty = new TriggerActionArgs();

    /**
     * (Updatable) The OCID of the build pipeline to be triggered.
     * 
     */
    @Import(name="buildPipelineId", required=true)
    private Output<String> buildPipelineId;

    /**
     * @return (Updatable) The OCID of the build pipeline to be triggered.
     * 
     */
    public Output<String> buildPipelineId() {
        return this.buildPipelineId;
    }

    /**
     * (Updatable) The filters for the trigger.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<TriggerActionFilterArgs> filter;

    /**
     * @return (Updatable) The filters for the trigger.
     * 
     */
    public Optional<Output<TriggerActionFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * (Updatable) The type of action that will be taken. Allowed value is TRIGGER_BUILD_PIPELINE.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) The type of action that will be taken. Allowed value is TRIGGER_BUILD_PIPELINE.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private TriggerActionArgs() {}

    private TriggerActionArgs(TriggerActionArgs $) {
        this.buildPipelineId = $.buildPipelineId;
        this.filter = $.filter;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerActionArgs $;

        public Builder() {
            $ = new TriggerActionArgs();
        }

        public Builder(TriggerActionArgs defaults) {
            $ = new TriggerActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param buildPipelineId (Updatable) The OCID of the build pipeline to be triggered.
         * 
         * @return builder
         * 
         */
        public Builder buildPipelineId(Output<String> buildPipelineId) {
            $.buildPipelineId = buildPipelineId;
            return this;
        }

        /**
         * @param buildPipelineId (Updatable) The OCID of the build pipeline to be triggered.
         * 
         * @return builder
         * 
         */
        public Builder buildPipelineId(String buildPipelineId) {
            return buildPipelineId(Output.of(buildPipelineId));
        }

        /**
         * @param filter (Updatable) The filters for the trigger.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<TriggerActionFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter (Updatable) The filters for the trigger.
         * 
         * @return builder
         * 
         */
        public Builder filter(TriggerActionFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param type (Updatable) The type of action that will be taken. Allowed value is TRIGGER_BUILD_PIPELINE.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) The type of action that will be taken. Allowed value is TRIGGER_BUILD_PIPELINE.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TriggerActionArgs build() {
            $.buildPipelineId = Objects.requireNonNull($.buildPipelineId, "expected parameter 'buildPipelineId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
