// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.SecurityAssessmentStatisticAdvisoryArgs;
import com.pulumi.oci.DataSafe.inputs.SecurityAssessmentStatisticEvaluateArgs;
import com.pulumi.oci.DataSafe.inputs.SecurityAssessmentStatisticHighRiskArgs;
import com.pulumi.oci.DataSafe.inputs.SecurityAssessmentStatisticLowRiskArgs;
import com.pulumi.oci.DataSafe.inputs.SecurityAssessmentStatisticMediumRiskArgs;
import com.pulumi.oci.DataSafe.inputs.SecurityAssessmentStatisticPassArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityAssessmentStatisticArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityAssessmentStatisticArgs Empty = new SecurityAssessmentStatisticArgs();

    /**
     * Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    @Import(name="advisories")
    private @Nullable Output<List<SecurityAssessmentStatisticAdvisoryArgs>> advisories;

    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public Optional<Output<List<SecurityAssessmentStatisticAdvisoryArgs>>> advisories() {
        return Optional.ofNullable(this.advisories);
    }

    /**
     * Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    @Import(name="evaluates")
    private @Nullable Output<List<SecurityAssessmentStatisticEvaluateArgs>> evaluates;

    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public Optional<Output<List<SecurityAssessmentStatisticEvaluateArgs>>> evaluates() {
        return Optional.ofNullable(this.evaluates);
    }

    /**
     * Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    @Import(name="highRisks")
    private @Nullable Output<List<SecurityAssessmentStatisticHighRiskArgs>> highRisks;

    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public Optional<Output<List<SecurityAssessmentStatisticHighRiskArgs>>> highRisks() {
        return Optional.ofNullable(this.highRisks);
    }

    /**
     * Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    @Import(name="lowRisks")
    private @Nullable Output<List<SecurityAssessmentStatisticLowRiskArgs>> lowRisks;

    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public Optional<Output<List<SecurityAssessmentStatisticLowRiskArgs>>> lowRisks() {
        return Optional.ofNullable(this.lowRisks);
    }

    /**
     * Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    @Import(name="mediumRisks")
    private @Nullable Output<List<SecurityAssessmentStatisticMediumRiskArgs>> mediumRisks;

    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public Optional<Output<List<SecurityAssessmentStatisticMediumRiskArgs>>> mediumRisks() {
        return Optional.ofNullable(this.mediumRisks);
    }

    /**
     * Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    @Import(name="passes")
    private @Nullable Output<List<SecurityAssessmentStatisticPassArgs>> passes;

    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public Optional<Output<List<SecurityAssessmentStatisticPassArgs>>> passes() {
        return Optional.ofNullable(this.passes);
    }

    /**
     * The total number of targets in this security assessment.
     * 
     */
    @Import(name="targetsCount")
    private @Nullable Output<Integer> targetsCount;

    /**
     * @return The total number of targets in this security assessment.
     * 
     */
    public Optional<Output<Integer>> targetsCount() {
        return Optional.ofNullable(this.targetsCount);
    }

    private SecurityAssessmentStatisticArgs() {}

    private SecurityAssessmentStatisticArgs(SecurityAssessmentStatisticArgs $) {
        this.advisories = $.advisories;
        this.evaluates = $.evaluates;
        this.highRisks = $.highRisks;
        this.lowRisks = $.lowRisks;
        this.mediumRisks = $.mediumRisks;
        this.passes = $.passes;
        this.targetsCount = $.targetsCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityAssessmentStatisticArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityAssessmentStatisticArgs $;

        public Builder() {
            $ = new SecurityAssessmentStatisticArgs();
        }

        public Builder(SecurityAssessmentStatisticArgs defaults) {
            $ = new SecurityAssessmentStatisticArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advisories Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder advisories(@Nullable Output<List<SecurityAssessmentStatisticAdvisoryArgs>> advisories) {
            $.advisories = advisories;
            return this;
        }

        /**
         * @param advisories Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder advisories(List<SecurityAssessmentStatisticAdvisoryArgs> advisories) {
            return advisories(Output.of(advisories));
        }

        /**
         * @param advisories Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder advisories(SecurityAssessmentStatisticAdvisoryArgs... advisories) {
            return advisories(List.of(advisories));
        }

        /**
         * @param evaluates Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder evaluates(@Nullable Output<List<SecurityAssessmentStatisticEvaluateArgs>> evaluates) {
            $.evaluates = evaluates;
            return this;
        }

        /**
         * @param evaluates Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder evaluates(List<SecurityAssessmentStatisticEvaluateArgs> evaluates) {
            return evaluates(Output.of(evaluates));
        }

        /**
         * @param evaluates Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder evaluates(SecurityAssessmentStatisticEvaluateArgs... evaluates) {
            return evaluates(List.of(evaluates));
        }

        /**
         * @param highRisks Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder highRisks(@Nullable Output<List<SecurityAssessmentStatisticHighRiskArgs>> highRisks) {
            $.highRisks = highRisks;
            return this;
        }

        /**
         * @param highRisks Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder highRisks(List<SecurityAssessmentStatisticHighRiskArgs> highRisks) {
            return highRisks(Output.of(highRisks));
        }

        /**
         * @param highRisks Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder highRisks(SecurityAssessmentStatisticHighRiskArgs... highRisks) {
            return highRisks(List.of(highRisks));
        }

        /**
         * @param lowRisks Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder lowRisks(@Nullable Output<List<SecurityAssessmentStatisticLowRiskArgs>> lowRisks) {
            $.lowRisks = lowRisks;
            return this;
        }

        /**
         * @param lowRisks Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder lowRisks(List<SecurityAssessmentStatisticLowRiskArgs> lowRisks) {
            return lowRisks(Output.of(lowRisks));
        }

        /**
         * @param lowRisks Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder lowRisks(SecurityAssessmentStatisticLowRiskArgs... lowRisks) {
            return lowRisks(List.of(lowRisks));
        }

        /**
         * @param mediumRisks Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder mediumRisks(@Nullable Output<List<SecurityAssessmentStatisticMediumRiskArgs>> mediumRisks) {
            $.mediumRisks = mediumRisks;
            return this;
        }

        /**
         * @param mediumRisks Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder mediumRisks(List<SecurityAssessmentStatisticMediumRiskArgs> mediumRisks) {
            return mediumRisks(Output.of(mediumRisks));
        }

        /**
         * @param mediumRisks Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder mediumRisks(SecurityAssessmentStatisticMediumRiskArgs... mediumRisks) {
            return mediumRisks(List.of(mediumRisks));
        }

        /**
         * @param passes Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder passes(@Nullable Output<List<SecurityAssessmentStatisticPassArgs>> passes) {
            $.passes = passes;
            return this;
        }

        /**
         * @param passes Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder passes(List<SecurityAssessmentStatisticPassArgs> passes) {
            return passes(Output.of(passes));
        }

        /**
         * @param passes Statistics showing the number of findings with a particular risk level for each category.
         * 
         * @return builder
         * 
         */
        public Builder passes(SecurityAssessmentStatisticPassArgs... passes) {
            return passes(List.of(passes));
        }

        /**
         * @param targetsCount The total number of targets in this security assessment.
         * 
         * @return builder
         * 
         */
        public Builder targetsCount(@Nullable Output<Integer> targetsCount) {
            $.targetsCount = targetsCount;
            return this;
        }

        /**
         * @param targetsCount The total number of targets in this security assessment.
         * 
         * @return builder
         * 
         */
        public Builder targetsCount(Integer targetsCount) {
            return targetsCount(Output.of(targetsCount));
        }

        public SecurityAssessmentStatisticArgs build() {
            return $;
        }
    }

}
