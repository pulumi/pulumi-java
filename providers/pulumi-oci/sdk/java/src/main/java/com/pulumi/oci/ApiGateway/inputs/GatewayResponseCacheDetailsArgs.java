// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ApiGateway.inputs.GatewayResponseCacheDetailsServerArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayResponseCacheDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayResponseCacheDetailsArgs Empty = new GatewayResponseCacheDetailsArgs();

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
     * 
     */
    @Import(name="authenticationSecretId")
    private @Nullable Output<String> authenticationSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
     * 
     */
    public Optional<Output<String>> authenticationSecretId() {
        return Optional.ofNullable(this.authenticationSecretId);
    }

    /**
     * (Updatable) The version number of the authentication secret to use.
     * 
     */
    @Import(name="authenticationSecretVersionNumber")
    private @Nullable Output<String> authenticationSecretVersionNumber;

    /**
     * @return (Updatable) The version number of the authentication secret to use.
     * 
     */
    public Optional<Output<String>> authenticationSecretVersionNumber() {
        return Optional.ofNullable(this.authenticationSecretVersionNumber);
    }

    /**
     * (Updatable) Defines the timeout for establishing a connection with the Response Cache.
     * 
     */
    @Import(name="connectTimeoutInMs")
    private @Nullable Output<Integer> connectTimeoutInMs;

    /**
     * @return (Updatable) Defines the timeout for establishing a connection with the Response Cache.
     * 
     */
    public Optional<Output<Integer>> connectTimeoutInMs() {
        return Optional.ofNullable(this.connectTimeoutInMs);
    }

    /**
     * (Updatable) Defines if the connection should be over SSL.
     * 
     */
    @Import(name="isSslEnabled")
    private @Nullable Output<Boolean> isSslEnabled;

    /**
     * @return (Updatable) Defines if the connection should be over SSL.
     * 
     */
    public Optional<Output<Boolean>> isSslEnabled() {
        return Optional.ofNullable(this.isSslEnabled);
    }

    /**
     * (Updatable) Defines whether or not to uphold SSL verification.
     * 
     */
    @Import(name="isSslVerifyDisabled")
    private @Nullable Output<Boolean> isSslVerifyDisabled;

    /**
     * @return (Updatable) Defines whether or not to uphold SSL verification.
     * 
     */
    public Optional<Output<Boolean>> isSslVerifyDisabled() {
        return Optional.ofNullable(this.isSslVerifyDisabled);
    }

    /**
     * (Updatable) Defines the timeout for reading data from the Response Cache.
     * 
     */
    @Import(name="readTimeoutInMs")
    private @Nullable Output<Integer> readTimeoutInMs;

    /**
     * @return (Updatable) Defines the timeout for reading data from the Response Cache.
     * 
     */
    public Optional<Output<Integer>> readTimeoutInMs() {
        return Optional.ofNullable(this.readTimeoutInMs);
    }

    /**
     * (Updatable) Defines the timeout for transmitting data to the Response Cache.
     * 
     */
    @Import(name="sendTimeoutInMs")
    private @Nullable Output<Integer> sendTimeoutInMs;

    /**
     * @return (Updatable) Defines the timeout for transmitting data to the Response Cache.
     * 
     */
    public Optional<Output<Integer>> sendTimeoutInMs() {
        return Optional.ofNullable(this.sendTimeoutInMs);
    }

    /**
     * (Updatable) The set of cache store members to connect to. At present only a single server is supported.
     * 
     */
    @Import(name="servers")
    private @Nullable Output<List<GatewayResponseCacheDetailsServerArgs>> servers;

    /**
     * @return (Updatable) The set of cache store members to connect to. At present only a single server is supported.
     * 
     */
    public Optional<Output<List<GatewayResponseCacheDetailsServerArgs>>> servers() {
        return Optional.ofNullable(this.servers);
    }

    /**
     * (Updatable) Type of the Response Cache.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Type of the Response Cache.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private GatewayResponseCacheDetailsArgs() {}

    private GatewayResponseCacheDetailsArgs(GatewayResponseCacheDetailsArgs $) {
        this.authenticationSecretId = $.authenticationSecretId;
        this.authenticationSecretVersionNumber = $.authenticationSecretVersionNumber;
        this.connectTimeoutInMs = $.connectTimeoutInMs;
        this.isSslEnabled = $.isSslEnabled;
        this.isSslVerifyDisabled = $.isSslVerifyDisabled;
        this.readTimeoutInMs = $.readTimeoutInMs;
        this.sendTimeoutInMs = $.sendTimeoutInMs;
        this.servers = $.servers;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayResponseCacheDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayResponseCacheDetailsArgs $;

        public Builder() {
            $ = new GatewayResponseCacheDetailsArgs();
        }

        public Builder(GatewayResponseCacheDetailsArgs defaults) {
            $ = new GatewayResponseCacheDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
         * 
         * @return builder
         * 
         */
        public Builder authenticationSecretId(@Nullable Output<String> authenticationSecretId) {
            $.authenticationSecretId = authenticationSecretId;
            return this;
        }

        /**
         * @param authenticationSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
         * 
         * @return builder
         * 
         */
        public Builder authenticationSecretId(String authenticationSecretId) {
            return authenticationSecretId(Output.of(authenticationSecretId));
        }

        /**
         * @param authenticationSecretVersionNumber (Updatable) The version number of the authentication secret to use.
         * 
         * @return builder
         * 
         */
        public Builder authenticationSecretVersionNumber(@Nullable Output<String> authenticationSecretVersionNumber) {
            $.authenticationSecretVersionNumber = authenticationSecretVersionNumber;
            return this;
        }

        /**
         * @param authenticationSecretVersionNumber (Updatable) The version number of the authentication secret to use.
         * 
         * @return builder
         * 
         */
        public Builder authenticationSecretVersionNumber(String authenticationSecretVersionNumber) {
            return authenticationSecretVersionNumber(Output.of(authenticationSecretVersionNumber));
        }

        /**
         * @param connectTimeoutInMs (Updatable) Defines the timeout for establishing a connection with the Response Cache.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeoutInMs(@Nullable Output<Integer> connectTimeoutInMs) {
            $.connectTimeoutInMs = connectTimeoutInMs;
            return this;
        }

        /**
         * @param connectTimeoutInMs (Updatable) Defines the timeout for establishing a connection with the Response Cache.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeoutInMs(Integer connectTimeoutInMs) {
            return connectTimeoutInMs(Output.of(connectTimeoutInMs));
        }

        /**
         * @param isSslEnabled (Updatable) Defines if the connection should be over SSL.
         * 
         * @return builder
         * 
         */
        public Builder isSslEnabled(@Nullable Output<Boolean> isSslEnabled) {
            $.isSslEnabled = isSslEnabled;
            return this;
        }

        /**
         * @param isSslEnabled (Updatable) Defines if the connection should be over SSL.
         * 
         * @return builder
         * 
         */
        public Builder isSslEnabled(Boolean isSslEnabled) {
            return isSslEnabled(Output.of(isSslEnabled));
        }

        /**
         * @param isSslVerifyDisabled (Updatable) Defines whether or not to uphold SSL verification.
         * 
         * @return builder
         * 
         */
        public Builder isSslVerifyDisabled(@Nullable Output<Boolean> isSslVerifyDisabled) {
            $.isSslVerifyDisabled = isSslVerifyDisabled;
            return this;
        }

        /**
         * @param isSslVerifyDisabled (Updatable) Defines whether or not to uphold SSL verification.
         * 
         * @return builder
         * 
         */
        public Builder isSslVerifyDisabled(Boolean isSslVerifyDisabled) {
            return isSslVerifyDisabled(Output.of(isSslVerifyDisabled));
        }

        /**
         * @param readTimeoutInMs (Updatable) Defines the timeout for reading data from the Response Cache.
         * 
         * @return builder
         * 
         */
        public Builder readTimeoutInMs(@Nullable Output<Integer> readTimeoutInMs) {
            $.readTimeoutInMs = readTimeoutInMs;
            return this;
        }

        /**
         * @param readTimeoutInMs (Updatable) Defines the timeout for reading data from the Response Cache.
         * 
         * @return builder
         * 
         */
        public Builder readTimeoutInMs(Integer readTimeoutInMs) {
            return readTimeoutInMs(Output.of(readTimeoutInMs));
        }

        /**
         * @param sendTimeoutInMs (Updatable) Defines the timeout for transmitting data to the Response Cache.
         * 
         * @return builder
         * 
         */
        public Builder sendTimeoutInMs(@Nullable Output<Integer> sendTimeoutInMs) {
            $.sendTimeoutInMs = sendTimeoutInMs;
            return this;
        }

        /**
         * @param sendTimeoutInMs (Updatable) Defines the timeout for transmitting data to the Response Cache.
         * 
         * @return builder
         * 
         */
        public Builder sendTimeoutInMs(Integer sendTimeoutInMs) {
            return sendTimeoutInMs(Output.of(sendTimeoutInMs));
        }

        /**
         * @param servers (Updatable) The set of cache store members to connect to. At present only a single server is supported.
         * 
         * @return builder
         * 
         */
        public Builder servers(@Nullable Output<List<GatewayResponseCacheDetailsServerArgs>> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers (Updatable) The set of cache store members to connect to. At present only a single server is supported.
         * 
         * @return builder
         * 
         */
        public Builder servers(List<GatewayResponseCacheDetailsServerArgs> servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param servers (Updatable) The set of cache store members to connect to. At present only a single server is supported.
         * 
         * @return builder
         * 
         */
        public Builder servers(GatewayResponseCacheDetailsServerArgs... servers) {
            return servers(List.of(servers));
        }

        /**
         * @param type (Updatable) Type of the Response Cache.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Type of the Response Cache.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GatewayResponseCacheDetailsArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
