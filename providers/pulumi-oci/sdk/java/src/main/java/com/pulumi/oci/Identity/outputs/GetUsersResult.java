// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Identity.outputs.GetUsersFilter;
import com.pulumi.oci.Identity.outputs.GetUsersUser;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUsersResult {
    /**
     * @return The OCID of the tenancy containing the user.
     * 
     */
    private final String compartmentId;
    /**
     * @return Identifier of the user in the identity provider
     * 
     */
    private final @Nullable String externalIdentifier;
    private final @Nullable List<GetUsersFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The OCID of the `IdentityProvider` this user belongs to.
     * 
     */
    private final @Nullable String identityProviderId;
    /**
     * @return The name you assign to the user during creation. This is the user&#39;s login for the Console. The name must be unique across all users in the tenancy and cannot be changed.
     * 
     */
    private final @Nullable String name;
    /**
     * @return The user&#39;s current state.
     * 
     */
    private final @Nullable String state;
    /**
     * @return The list of users.
     * 
     */
    private final List<GetUsersUser> users;

    @CustomType.Constructor
    private GetUsersResult(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("externalIdentifier") @Nullable String externalIdentifier,
        @CustomType.Parameter("filters") @Nullable List<GetUsersFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identityProviderId") @Nullable String identityProviderId,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("state") @Nullable String state,
        @CustomType.Parameter("users") List<GetUsersUser> users) {
        this.compartmentId = compartmentId;
        this.externalIdentifier = externalIdentifier;
        this.filters = filters;
        this.id = id;
        this.identityProviderId = identityProviderId;
        this.name = name;
        this.state = state;
        this.users = users;
    }

    /**
     * @return The OCID of the tenancy containing the user.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Identifier of the user in the identity provider
     * 
     */
    public Optional<String> externalIdentifier() {
        return Optional.ofNullable(this.externalIdentifier);
    }
    public List<GetUsersFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the `IdentityProvider` this user belongs to.
     * 
     */
    public Optional<String> identityProviderId() {
        return Optional.ofNullable(this.identityProviderId);
    }
    /**
     * @return The name you assign to the user during creation. This is the user&#39;s login for the Console. The name must be unique across all users in the tenancy and cannot be changed.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The user&#39;s current state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The list of users.
     * 
     */
    public List<GetUsersUser> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private @Nullable String externalIdentifier;
        private @Nullable List<GetUsersFilter> filters;
        private String id;
        private @Nullable String identityProviderId;
        private @Nullable String name;
        private @Nullable String state;
        private List<GetUsersUser> users;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUsersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.externalIdentifier = defaults.externalIdentifier;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.identityProviderId = defaults.identityProviderId;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.users = defaults.users;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder externalIdentifier(@Nullable String externalIdentifier) {
            this.externalIdentifier = externalIdentifier;
            return this;
        }
        public Builder filters(@Nullable List<GetUsersFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetUsersFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identityProviderId(@Nullable String identityProviderId) {
            this.identityProviderId = identityProviderId;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public Builder users(List<GetUsersUser> users) {
            this.users = Objects.requireNonNull(users);
            return this;
        }
        public Builder users(GetUsersUser... users) {
            return users(List.of(users));
        }        public GetUsersResult build() {
            return new GetUsersResult(compartmentId, externalIdentifier, filters, id, identityProviderId, name, state, users);
        }
    }
}
