// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.OperatorAccessControl.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetControlResult {
    /**
     * @return List of operator actions that need explicit approval. Any operator action not in the pre-approved list will require explicit approval. Access requests associated with a resource governed by this operator control will be require explicit approval if the access request contains any operator action in this list.
     * 
     */
    private final List<String> approvalRequiredOpActionLists;
    /**
     * @return List of user groups who can approve an access request associated with a target resource under the governance of this operator control.
     * 
     */
    private final List<String> approverGroupsLists;
    /**
     * @return List of users who can approve an access request associated with a target resource under the governance of this operator control.
     * 
     */
    private final List<String> approversLists;
    /**
     * @return The OCID of the compartment that contains the operator control.
     * 
     */
    private final String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return Description of operator control.
     * 
     */
    private final String description;
    /**
     * @return List of emailId.
     * 
     */
    private final List<String> emailIdLists;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The OCID of the operator control.
     * 
     */
    private final String id;
    /**
     * @return Whether all the operator actions have been pre-approved. If yes, all access requests associated with a resource governed by this operator control  will be auto-approved.
     * 
     */
    private final Boolean isFullyPreApproved;
    /**
     * @return Description associated with the latest modification of the operator control.
     * 
     */
    private final String lastModifiedInfo;
    private final String operatorControlId;
    /**
     * @return Name of the operator control. The name must be unique.
     * 
     */
    private final String operatorControlName;
    /**
     * @return List of pre-approved operator actions. Access requests associated with a resource governed by this operator control will be automatically approved if the access request only contain operator actions in the pre-approved list.
     * 
     */
    private final List<String> preApprovedOpActionLists;
    /**
     * @return resourceType for which the OperatorControl is applicable
     * 
     */
    private final String resourceType;
    /**
     * @return The current lifecycle state of the operator control.
     * 
     */
    private final String state;
    /**
     * @return System message that would be displayed to the operator users on accessing the target resource under the governance of this operator control.
     * 
     */
    private final String systemMessage;
    /**
     * @return Time when the operator control was created expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private final String timeOfCreation;
    /**
     * @return Time when deleted expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;. Note a deleted operator control still stays in the system, so that you can still audit operator actions associated with access requests raised on target resources governed by the deleted operator control.
     * 
     */
    private final String timeOfDeletion;
    /**
     * @return Time when the operator control was last modified expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    private final String timeOfModification;

    @CustomType.Constructor
    private GetControlResult(
        @CustomType.Parameter("approvalRequiredOpActionLists") List<String> approvalRequiredOpActionLists,
        @CustomType.Parameter("approverGroupsLists") List<String> approverGroupsLists,
        @CustomType.Parameter("approversLists") List<String> approversLists,
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("emailIdLists") List<String> emailIdLists,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isFullyPreApproved") Boolean isFullyPreApproved,
        @CustomType.Parameter("lastModifiedInfo") String lastModifiedInfo,
        @CustomType.Parameter("operatorControlId") String operatorControlId,
        @CustomType.Parameter("operatorControlName") String operatorControlName,
        @CustomType.Parameter("preApprovedOpActionLists") List<String> preApprovedOpActionLists,
        @CustomType.Parameter("resourceType") String resourceType,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("systemMessage") String systemMessage,
        @CustomType.Parameter("timeOfCreation") String timeOfCreation,
        @CustomType.Parameter("timeOfDeletion") String timeOfDeletion,
        @CustomType.Parameter("timeOfModification") String timeOfModification) {
        this.approvalRequiredOpActionLists = approvalRequiredOpActionLists;
        this.approverGroupsLists = approverGroupsLists;
        this.approversLists = approversLists;
        this.compartmentId = compartmentId;
        this.definedTags = definedTags;
        this.description = description;
        this.emailIdLists = emailIdLists;
        this.freeformTags = freeformTags;
        this.id = id;
        this.isFullyPreApproved = isFullyPreApproved;
        this.lastModifiedInfo = lastModifiedInfo;
        this.operatorControlId = operatorControlId;
        this.operatorControlName = operatorControlName;
        this.preApprovedOpActionLists = preApprovedOpActionLists;
        this.resourceType = resourceType;
        this.state = state;
        this.systemMessage = systemMessage;
        this.timeOfCreation = timeOfCreation;
        this.timeOfDeletion = timeOfDeletion;
        this.timeOfModification = timeOfModification;
    }

    /**
     * @return List of operator actions that need explicit approval. Any operator action not in the pre-approved list will require explicit approval. Access requests associated with a resource governed by this operator control will be require explicit approval if the access request contains any operator action in this list.
     * 
     */
    public List<String> approvalRequiredOpActionLists() {
        return this.approvalRequiredOpActionLists;
    }
    /**
     * @return List of user groups who can approve an access request associated with a target resource under the governance of this operator control.
     * 
     */
    public List<String> approverGroupsLists() {
        return this.approverGroupsLists;
    }
    /**
     * @return List of users who can approve an access request associated with a target resource under the governance of this operator control.
     * 
     */
    public List<String> approversLists() {
        return this.approversLists;
    }
    /**
     * @return The OCID of the compartment that contains the operator control.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Description of operator control.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of emailId.
     * 
     */
    public List<String> emailIdLists() {
        return this.emailIdLists;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the operator control.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether all the operator actions have been pre-approved. If yes, all access requests associated with a resource governed by this operator control  will be auto-approved.
     * 
     */
    public Boolean isFullyPreApproved() {
        return this.isFullyPreApproved;
    }
    /**
     * @return Description associated with the latest modification of the operator control.
     * 
     */
    public String lastModifiedInfo() {
        return this.lastModifiedInfo;
    }
    public String operatorControlId() {
        return this.operatorControlId;
    }
    /**
     * @return Name of the operator control. The name must be unique.
     * 
     */
    public String operatorControlName() {
        return this.operatorControlName;
    }
    /**
     * @return List of pre-approved operator actions. Access requests associated with a resource governed by this operator control will be automatically approved if the access request only contain operator actions in the pre-approved list.
     * 
     */
    public List<String> preApprovedOpActionLists() {
        return this.preApprovedOpActionLists;
    }
    /**
     * @return resourceType for which the OperatorControl is applicable
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return The current lifecycle state of the operator control.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System message that would be displayed to the operator users on accessing the target resource under the governance of this operator control.
     * 
     */
    public String systemMessage() {
        return this.systemMessage;
    }
    /**
     * @return Time when the operator control was created expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeOfCreation() {
        return this.timeOfCreation;
    }
    /**
     * @return Time when deleted expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;. Note a deleted operator control still stays in the system, so that you can still audit operator actions associated with access requests raised on target resources governed by the deleted operator control.
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    /**
     * @return Time when the operator control was last modified expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: &#39;2020-05-22T21:10:29.600Z&#39;
     * 
     */
    public String timeOfModification() {
        return this.timeOfModification;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetControlResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> approvalRequiredOpActionLists;
        private List<String> approverGroupsLists;
        private List<String> approversLists;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private List<String> emailIdLists;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isFullyPreApproved;
        private String lastModifiedInfo;
        private String operatorControlId;
        private String operatorControlName;
        private List<String> preApprovedOpActionLists;
        private String resourceType;
        private String state;
        private String systemMessage;
        private String timeOfCreation;
        private String timeOfDeletion;
        private String timeOfModification;

        public Builder() {
    	      // Empty
        }

        public Builder(GetControlResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approvalRequiredOpActionLists = defaults.approvalRequiredOpActionLists;
    	      this.approverGroupsLists = defaults.approverGroupsLists;
    	      this.approversLists = defaults.approversLists;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.emailIdLists = defaults.emailIdLists;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isFullyPreApproved = defaults.isFullyPreApproved;
    	      this.lastModifiedInfo = defaults.lastModifiedInfo;
    	      this.operatorControlId = defaults.operatorControlId;
    	      this.operatorControlName = defaults.operatorControlName;
    	      this.preApprovedOpActionLists = defaults.preApprovedOpActionLists;
    	      this.resourceType = defaults.resourceType;
    	      this.state = defaults.state;
    	      this.systemMessage = defaults.systemMessage;
    	      this.timeOfCreation = defaults.timeOfCreation;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.timeOfModification = defaults.timeOfModification;
        }

        public Builder approvalRequiredOpActionLists(List<String> approvalRequiredOpActionLists) {
            this.approvalRequiredOpActionLists = Objects.requireNonNull(approvalRequiredOpActionLists);
            return this;
        }
        public Builder approvalRequiredOpActionLists(String... approvalRequiredOpActionLists) {
            return approvalRequiredOpActionLists(List.of(approvalRequiredOpActionLists));
        }
        public Builder approverGroupsLists(List<String> approverGroupsLists) {
            this.approverGroupsLists = Objects.requireNonNull(approverGroupsLists);
            return this;
        }
        public Builder approverGroupsLists(String... approverGroupsLists) {
            return approverGroupsLists(List.of(approverGroupsLists));
        }
        public Builder approversLists(List<String> approversLists) {
            this.approversLists = Objects.requireNonNull(approversLists);
            return this;
        }
        public Builder approversLists(String... approversLists) {
            return approversLists(List.of(approversLists));
        }
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder emailIdLists(List<String> emailIdLists) {
            this.emailIdLists = Objects.requireNonNull(emailIdLists);
            return this;
        }
        public Builder emailIdLists(String... emailIdLists) {
            return emailIdLists(List.of(emailIdLists));
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isFullyPreApproved(Boolean isFullyPreApproved) {
            this.isFullyPreApproved = Objects.requireNonNull(isFullyPreApproved);
            return this;
        }
        public Builder lastModifiedInfo(String lastModifiedInfo) {
            this.lastModifiedInfo = Objects.requireNonNull(lastModifiedInfo);
            return this;
        }
        public Builder operatorControlId(String operatorControlId) {
            this.operatorControlId = Objects.requireNonNull(operatorControlId);
            return this;
        }
        public Builder operatorControlName(String operatorControlName) {
            this.operatorControlName = Objects.requireNonNull(operatorControlName);
            return this;
        }
        public Builder preApprovedOpActionLists(List<String> preApprovedOpActionLists) {
            this.preApprovedOpActionLists = Objects.requireNonNull(preApprovedOpActionLists);
            return this;
        }
        public Builder preApprovedOpActionLists(String... preApprovedOpActionLists) {
            return preApprovedOpActionLists(List.of(preApprovedOpActionLists));
        }
        public Builder resourceType(String resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder systemMessage(String systemMessage) {
            this.systemMessage = Objects.requireNonNull(systemMessage);
            return this;
        }
        public Builder timeOfCreation(String timeOfCreation) {
            this.timeOfCreation = Objects.requireNonNull(timeOfCreation);
            return this;
        }
        public Builder timeOfDeletion(String timeOfDeletion) {
            this.timeOfDeletion = Objects.requireNonNull(timeOfDeletion);
            return this;
        }
        public Builder timeOfModification(String timeOfModification) {
            this.timeOfModification = Objects.requireNonNull(timeOfModification);
            return this;
        }        public GetControlResult build() {
            return new GetControlResult(approvalRequiredOpActionLists, approverGroupsLists, approversLists, compartmentId, definedTags, description, emailIdLists, freeformTags, id, isFullyPreApproved, lastModifiedInfo, operatorControlId, operatorControlName, preApprovedOpActionLists, resourceType, state, systemMessage, timeOfCreation, timeOfDeletion, timeOfModification);
        }
    }
}
