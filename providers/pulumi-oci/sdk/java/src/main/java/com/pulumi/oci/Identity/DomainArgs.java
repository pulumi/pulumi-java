// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    /**
     * The admin email address
     * 
     */
    @Import(name="adminEmail")
    private @Nullable Output<String> adminEmail;

    /**
     * @return The admin email address
     * 
     */
    public Optional<Output<String>> adminEmail() {
        return Optional.ofNullable(this.adminEmail);
    }

    /**
     * The admin first name
     * 
     */
    @Import(name="adminFirstName")
    private @Nullable Output<String> adminFirstName;

    /**
     * @return The admin first name
     * 
     */
    public Optional<Output<String>> adminFirstName() {
        return Optional.ofNullable(this.adminFirstName);
    }

    /**
     * The admin last name
     * 
     */
    @Import(name="adminLastName")
    private @Nullable Output<String> adminLastName;

    /**
     * @return The admin last name
     * 
     */
    public Optional<Output<String>> adminLastName() {
        return Optional.ofNullable(this.adminLastName);
    }

    /**
     * The admin user name
     * 
     */
    @Import(name="adminUserName")
    private @Nullable Output<String> adminUserName;

    /**
     * @return The admin user name
     * 
     */
    public Optional<Output<String>> adminUserName() {
        return Optional.ofNullable(this.adminUserName);
    }

    /**
     * (Updatable) The OCID of the Compartment where domain is created
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the Compartment where domain is created
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Domain entity description
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return (Updatable) Domain entity description
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * (Updatable) The mutable display name of the domain.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) The mutable display name of the domain.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The region&#39;s name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
     * 
     */
    @Import(name="homeRegion", required=true)
    private Output<String> homeRegion;

    /**
     * @return The region&#39;s name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
     * 
     */
    public Output<String> homeRegion() {
        return this.homeRegion;
    }

    /**
     * (Updatable) Indicates whether domain is hidden on login screen or not.
     * 
     */
    @Import(name="isHiddenOnLogin")
    private @Nullable Output<Boolean> isHiddenOnLogin;

    /**
     * @return (Updatable) Indicates whether domain is hidden on login screen or not.
     * 
     */
    public Optional<Output<Boolean>> isHiddenOnLogin() {
        return Optional.ofNullable(this.isHiddenOnLogin);
    }

    /**
     * Indicates if admin user created in IDCS stripe would like to receive notification like welcome email or not. Required field only if admin information is provided, otherwise optional.
     * 
     */
    @Import(name="isNotificationBypassed")
    private @Nullable Output<Boolean> isNotificationBypassed;

    /**
     * @return Indicates if admin user created in IDCS stripe would like to receive notification like welcome email or not. Required field only if admin information is provided, otherwise optional.
     * 
     */
    public Optional<Output<Boolean>> isNotificationBypassed() {
        return Optional.ofNullable(this.isNotificationBypassed);
    }

    /**
     * Optional field to indicate whether users in the domain are required to have a primary email address or not Defaults to true
     * 
     */
    @Import(name="isPrimaryEmailRequired")
    private @Nullable Output<Boolean> isPrimaryEmailRequired;

    /**
     * @return Optional field to indicate whether users in the domain are required to have a primary email address or not Defaults to true
     * 
     */
    public Optional<Output<Boolean>> isPrimaryEmailRequired() {
        return Optional.ofNullable(this.isPrimaryEmailRequired);
    }

    /**
     * The License type of Domain
     * 
     */
    @Import(name="licenseType", required=true)
    private Output<String> licenseType;

    /**
     * @return The License type of Domain
     * 
     */
    public Output<String> licenseType() {
        return this.licenseType;
    }

    /**
     * The current state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private DomainArgs() {}

    private DomainArgs(DomainArgs $) {
        this.adminEmail = $.adminEmail;
        this.adminFirstName = $.adminFirstName;
        this.adminLastName = $.adminLastName;
        this.adminUserName = $.adminUserName;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.homeRegion = $.homeRegion;
        this.isHiddenOnLogin = $.isHiddenOnLogin;
        this.isNotificationBypassed = $.isNotificationBypassed;
        this.isPrimaryEmailRequired = $.isPrimaryEmailRequired;
        this.licenseType = $.licenseType;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainArgs $;

        public Builder() {
            $ = new DomainArgs();
        }

        public Builder(DomainArgs defaults) {
            $ = new DomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminEmail The admin email address
         * 
         * @return builder
         * 
         */
        public Builder adminEmail(@Nullable Output<String> adminEmail) {
            $.adminEmail = adminEmail;
            return this;
        }

        /**
         * @param adminEmail The admin email address
         * 
         * @return builder
         * 
         */
        public Builder adminEmail(String adminEmail) {
            return adminEmail(Output.of(adminEmail));
        }

        /**
         * @param adminFirstName The admin first name
         * 
         * @return builder
         * 
         */
        public Builder adminFirstName(@Nullable Output<String> adminFirstName) {
            $.adminFirstName = adminFirstName;
            return this;
        }

        /**
         * @param adminFirstName The admin first name
         * 
         * @return builder
         * 
         */
        public Builder adminFirstName(String adminFirstName) {
            return adminFirstName(Output.of(adminFirstName));
        }

        /**
         * @param adminLastName The admin last name
         * 
         * @return builder
         * 
         */
        public Builder adminLastName(@Nullable Output<String> adminLastName) {
            $.adminLastName = adminLastName;
            return this;
        }

        /**
         * @param adminLastName The admin last name
         * 
         * @return builder
         * 
         */
        public Builder adminLastName(String adminLastName) {
            return adminLastName(Output.of(adminLastName));
        }

        /**
         * @param adminUserName The admin user name
         * 
         * @return builder
         * 
         */
        public Builder adminUserName(@Nullable Output<String> adminUserName) {
            $.adminUserName = adminUserName;
            return this;
        }

        /**
         * @param adminUserName The admin user name
         * 
         * @return builder
         * 
         */
        public Builder adminUserName(String adminUserName) {
            return adminUserName(Output.of(adminUserName));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the Compartment where domain is created
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the Compartment where domain is created
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) Domain entity description
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Domain entity description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) The mutable display name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The mutable display name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param homeRegion The region&#39;s name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
         * 
         * @return builder
         * 
         */
        public Builder homeRegion(Output<String> homeRegion) {
            $.homeRegion = homeRegion;
            return this;
        }

        /**
         * @param homeRegion The region&#39;s name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
         * 
         * @return builder
         * 
         */
        public Builder homeRegion(String homeRegion) {
            return homeRegion(Output.of(homeRegion));
        }

        /**
         * @param isHiddenOnLogin (Updatable) Indicates whether domain is hidden on login screen or not.
         * 
         * @return builder
         * 
         */
        public Builder isHiddenOnLogin(@Nullable Output<Boolean> isHiddenOnLogin) {
            $.isHiddenOnLogin = isHiddenOnLogin;
            return this;
        }

        /**
         * @param isHiddenOnLogin (Updatable) Indicates whether domain is hidden on login screen or not.
         * 
         * @return builder
         * 
         */
        public Builder isHiddenOnLogin(Boolean isHiddenOnLogin) {
            return isHiddenOnLogin(Output.of(isHiddenOnLogin));
        }

        /**
         * @param isNotificationBypassed Indicates if admin user created in IDCS stripe would like to receive notification like welcome email or not. Required field only if admin information is provided, otherwise optional.
         * 
         * @return builder
         * 
         */
        public Builder isNotificationBypassed(@Nullable Output<Boolean> isNotificationBypassed) {
            $.isNotificationBypassed = isNotificationBypassed;
            return this;
        }

        /**
         * @param isNotificationBypassed Indicates if admin user created in IDCS stripe would like to receive notification like welcome email or not. Required field only if admin information is provided, otherwise optional.
         * 
         * @return builder
         * 
         */
        public Builder isNotificationBypassed(Boolean isNotificationBypassed) {
            return isNotificationBypassed(Output.of(isNotificationBypassed));
        }

        /**
         * @param isPrimaryEmailRequired Optional field to indicate whether users in the domain are required to have a primary email address or not Defaults to true
         * 
         * @return builder
         * 
         */
        public Builder isPrimaryEmailRequired(@Nullable Output<Boolean> isPrimaryEmailRequired) {
            $.isPrimaryEmailRequired = isPrimaryEmailRequired;
            return this;
        }

        /**
         * @param isPrimaryEmailRequired Optional field to indicate whether users in the domain are required to have a primary email address or not Defaults to true
         * 
         * @return builder
         * 
         */
        public Builder isPrimaryEmailRequired(Boolean isPrimaryEmailRequired) {
            return isPrimaryEmailRequired(Output.of(isPrimaryEmailRequired));
        }

        /**
         * @param licenseType The License type of Domain
         * 
         * @return builder
         * 
         */
        public Builder licenseType(Output<String> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param licenseType The License type of Domain
         * 
         * @return builder
         * 
         */
        public Builder licenseType(String licenseType) {
            return licenseType(Output.of(licenseType));
        }

        /**
         * @param state The current state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public DomainArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.homeRegion = Objects.requireNonNull($.homeRegion, "expected parameter 'homeRegion' to be non-null");
            $.licenseType = Objects.requireNonNull($.licenseType, "expected parameter 'licenseType' to be non-null");
            return $;
        }
    }

}
