// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKey {
    /**
     * @return The algorithm intended for use with this key.
     * 
     */
    private final String alg;
    /**
     * @return The base64 url encoded exponent of the RSA public key represented by this key.
     * 
     */
    private final String e;
    /**
     * @return The format of the public key.
     * 
     */
    private final String format;
    /**
     * @return Name of the claim.
     * 
     */
    private final String key;
    /**
     * @return The operations for which this key is to be used.
     * 
     */
    private final List<String> keyOps;
    /**
     * @return A unique key ID. This key will be used to verify the signature of a JWT with matching &#34;kid&#34;.
     * 
     */
    private final String kid;
    /**
     * @return The key type.
     * 
     */
    private final String kty;
    /**
     * @return The base64 url encoded modulus of the RSA public key represented by this key.
     * 
     */
    private final String n;
    /**
     * @return The intended use of the public key.
     * 
     */
    private final String use;

    @CustomType.Constructor
    private GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKey(
        @CustomType.Parameter("alg") String alg,
        @CustomType.Parameter("e") String e,
        @CustomType.Parameter("format") String format,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("keyOps") List<String> keyOps,
        @CustomType.Parameter("kid") String kid,
        @CustomType.Parameter("kty") String kty,
        @CustomType.Parameter("n") String n,
        @CustomType.Parameter("use") String use) {
        this.alg = alg;
        this.e = e;
        this.format = format;
        this.key = key;
        this.keyOps = keyOps;
        this.kid = kid;
        this.kty = kty;
        this.n = n;
        this.use = use;
    }

    /**
     * @return The algorithm intended for use with this key.
     * 
     */
    public String alg() {
        return this.alg;
    }
    /**
     * @return The base64 url encoded exponent of the RSA public key represented by this key.
     * 
     */
    public String e() {
        return this.e;
    }
    /**
     * @return The format of the public key.
     * 
     */
    public String format() {
        return this.format;
    }
    /**
     * @return Name of the claim.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The operations for which this key is to be used.
     * 
     */
    public List<String> keyOps() {
        return this.keyOps;
    }
    /**
     * @return A unique key ID. This key will be used to verify the signature of a JWT with matching &#34;kid&#34;.
     * 
     */
    public String kid() {
        return this.kid;
    }
    /**
     * @return The key type.
     * 
     */
    public String kty() {
        return this.kty;
    }
    /**
     * @return The base64 url encoded modulus of the RSA public key represented by this key.
     * 
     */
    public String n() {
        return this.n;
    }
    /**
     * @return The intended use of the public key.
     * 
     */
    public String use() {
        return this.use;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKey defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String alg;
        private String e;
        private String format;
        private String key;
        private List<String> keyOps;
        private String kid;
        private String kty;
        private String n;
        private String use;

        public Builder() {
    	      // Empty
        }

        public Builder(GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alg = defaults.alg;
    	      this.e = defaults.e;
    	      this.format = defaults.format;
    	      this.key = defaults.key;
    	      this.keyOps = defaults.keyOps;
    	      this.kid = defaults.kid;
    	      this.kty = defaults.kty;
    	      this.n = defaults.n;
    	      this.use = defaults.use;
        }

        public Builder alg(String alg) {
            this.alg = Objects.requireNonNull(alg);
            return this;
        }
        public Builder e(String e) {
            this.e = Objects.requireNonNull(e);
            return this;
        }
        public Builder format(String format) {
            this.format = Objects.requireNonNull(format);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder keyOps(List<String> keyOps) {
            this.keyOps = Objects.requireNonNull(keyOps);
            return this;
        }
        public Builder keyOps(String... keyOps) {
            return keyOps(List.of(keyOps));
        }
        public Builder kid(String kid) {
            this.kid = Objects.requireNonNull(kid);
            return this;
        }
        public Builder kty(String kty) {
            this.kty = Objects.requireNonNull(kty);
            return this;
        }
        public Builder n(String n) {
            this.n = Objects.requireNonNull(n);
            return this;
        }
        public Builder use(String use) {
            this.use = Objects.requireNonNull(use);
            return this;
        }        public GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKey build() {
            return new GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKey(alg, e, format, key, keyOps, kid, kty, n, use);
        }
    }
}
