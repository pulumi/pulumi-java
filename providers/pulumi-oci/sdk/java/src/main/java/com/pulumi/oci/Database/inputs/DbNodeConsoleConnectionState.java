// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbNodeConsoleConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final DbNodeConsoleConnectionState Empty = new DbNodeConsoleConnectionState();

    /**
     * The OCID of the compartment to contain the console connection.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment to contain the console connection.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The SSH connection string for the console connection.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return The SSH connection string for the console connection.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * The database node [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="dbNodeId")
    private @Nullable Output<String> dbNodeId;

    /**
     * @return The database node [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> dbNodeId() {
        return Optional.ofNullable(this.dbNodeId);
    }

    /**
     * The SSH public key fingerprint for the console connection.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return The SSH public key fingerprint for the console connection.
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * The SSH public key used to authenticate the console connection.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return The SSH public key used to authenticate the console connection.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * The current state of the console connection.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the console connection.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private DbNodeConsoleConnectionState() {}

    private DbNodeConsoleConnectionState(DbNodeConsoleConnectionState $) {
        this.compartmentId = $.compartmentId;
        this.connectionString = $.connectionString;
        this.dbNodeId = $.dbNodeId;
        this.fingerprint = $.fingerprint;
        this.publicKey = $.publicKey;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbNodeConsoleConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbNodeConsoleConnectionState $;

        public Builder() {
            $ = new DbNodeConsoleConnectionState();
        }

        public Builder(DbNodeConsoleConnectionState defaults) {
            $ = new DbNodeConsoleConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment to contain the console connection.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment to contain the console connection.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param connectionString The SSH connection string for the console connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString The SSH connection string for the console connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param dbNodeId The database node [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbNodeId(@Nullable Output<String> dbNodeId) {
            $.dbNodeId = dbNodeId;
            return this;
        }

        /**
         * @param dbNodeId The database node [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbNodeId(String dbNodeId) {
            return dbNodeId(Output.of(dbNodeId));
        }

        /**
         * @param fingerprint The SSH public key fingerprint for the console connection.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint The SSH public key fingerprint for the console connection.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param publicKey The SSH public key used to authenticate the console connection.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey The SSH public key used to authenticate the console connection.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param state The current state of the console connection.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the console connection.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public DbNodeConsoleConnectionState build() {
            return $;
        }
    }

}
