// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.DataSafe.SensitiveDataModelsSensitiveColumnArgs;
import com.pulumi.oci.DataSafe.inputs.SensitiveDataModelsSensitiveColumnState;
import com.pulumi.oci.Utilities;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * This resource provides the Sensitive Data Models Sensitive Column resource in Oracle Cloud Infrastructure Data Safe service.
 * 
 * Creates a new sensitive column in the specified sensitive data model.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * SensitiveDataModelsSensitiveColumns can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn test_sensitive_data_models_sensitive_column &#34;sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/{sensitiveColumnKey}&#34;
 * ```
 * 
 */
@ResourceType(type="oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn")
public class SensitiveDataModelsSensitiveColumn extends com.pulumi.resources.CustomResource {
    /**
     * (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     * 
     */
    @Export(name="appDefinedChildColumnKeys", type=List.class, parameters={String.class})
    private Output<List<String>> appDefinedChildColumnKeys;

    /**
     * @return (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     * 
     */
    public Output<List<String>> appDefinedChildColumnKeys() {
        return this.appDefinedChildColumnKeys;
    }
    /**
     * The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it&#39;s automatically populated with the value provided for the schemaName attribute.
     * 
     */
    @Export(name="appName", type=String.class, parameters={})
    private Output<String> appName;

    /**
     * @return The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it&#39;s automatically populated with the value provided for the schemaName attribute.
     * 
     */
    public Output<String> appName() {
        return this.appName;
    }
    /**
     * The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it&#39;s assigned a column group. It helps identify and manage referential relationships that involve composite keys.
     * 
     */
    @Export(name="columnGroups", type=List.class, parameters={String.class})
    private Output<List<String>> columnGroups;

    /**
     * @return The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it&#39;s assigned a column group. It helps identify and manage referential relationships that involve composite keys.
     * 
     */
    public Output<List<String>> columnGroups() {
        return this.columnGroups;
    }
    /**
     * The name of the sensitive column.
     * 
     */
    @Export(name="columnName", type=String.class, parameters={})
    private Output<String> columnName;

    /**
     * @return The name of the sensitive column.
     * 
     */
    public Output<String> columnName() {
        return this.columnName;
    }
    /**
     * (Updatable) The data type of the sensitive column.
     * 
     */
    @Export(name="dataType", type=String.class, parameters={})
    private Output<String> dataType;

    /**
     * @return (Updatable) The data type of the sensitive column.
     * 
     */
    public Output<String> dataType() {
        return this.dataType;
    }
    /**
     * (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     * 
     */
    @Export(name="dbDefinedChildColumnKeys", type=List.class, parameters={String.class})
    private Output<List<String>> dbDefinedChildColumnKeys;

    /**
     * @return (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     * 
     */
    public Output<List<String>> dbDefinedChildColumnKeys() {
        return this.dbDefinedChildColumnKeys;
    }
    /**
     * The estimated number of data values the column has in the associated database.
     * 
     */
    @Export(name="estimatedDataValueCount", type=String.class, parameters={})
    private Output<String> estimatedDataValueCount;

    /**
     * @return The estimated number of data values the column has in the associated database.
     * 
     */
    public Output<String> estimatedDataValueCount() {
        return this.estimatedDataValueCount;
    }
    /**
     * The unique key that identifies the sensitive column. It&#39;s numeric and unique within a sensitive data model.
     * 
     */
    @Export(name="key", type=String.class, parameters={})
    private Output<String> key;

    /**
     * @return The unique key that identifies the sensitive column. It&#39;s numeric and unique within a sensitive data model.
     * 
     */
    public Output<String> key() {
        return this.key;
    }
    /**
     * Details about the current state of the sensitive column.
     * 
     */
    @Export(name="lifecycleDetails", type=String.class, parameters={})
    private Output<String> lifecycleDetails;

    /**
     * @return Details about the current state of the sensitive column.
     * 
     */
    public Output<String> lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * The database object that contains the sensitive column.
     * 
     */
    @Export(name="object", type=String.class, parameters={})
    private Output<String> object;

    /**
     * @return The database object that contains the sensitive column.
     * 
     */
    public Output<String> object() {
        return this.object;
    }
    /**
     * The type of the database object that contains the sensitive column.
     * 
     */
    @Export(name="objectType", type=String.class, parameters={})
    private Output<String> objectType;

    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    public Output<String> objectType() {
        return this.objectType;
    }
    /**
     * (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
     * 
     */
    @Export(name="parentColumnKeys", type=List.class, parameters={String.class})
    private Output<List<String>> parentColumnKeys;

    /**
     * @return (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
     * 
     */
    public Output<List<String>> parentColumnKeys() {
        return this.parentColumnKeys;
    }
    /**
     * (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    @Export(name="relationType", type=String.class, parameters={})
    private Output<String> relationType;

    /**
     * @return (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    public Output<String> relationType() {
        return this.relationType;
    }
    /**
     * Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     * 
     */
    @Export(name="sampleDataValues", type=List.class, parameters={String.class})
    private Output<List<String>> sampleDataValues;

    /**
     * @return Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     * 
     */
    public Output<List<String>> sampleDataValues() {
        return this.sampleDataValues;
    }
    /**
     * The database schema that contains the sensitive column.
     * 
     */
    @Export(name="schemaName", type=String.class, parameters={})
    private Output<String> schemaName;

    /**
     * @return The database schema that contains the sensitive column.
     * 
     */
    public Output<String> schemaName() {
        return this.schemaName;
    }
    /**
     * The OCID of the sensitive data model.
     * 
     */
    @Export(name="sensitiveDataModelId", type=String.class, parameters={})
    private Output<String> sensitiveDataModelId;

    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    public Output<String> sensitiveDataModelId() {
        return this.sensitiveDataModelId;
    }
    /**
     * (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
     * 
     */
    @Export(name="sensitiveTypeId", type=String.class, parameters={})
    private Output<String> sensitiveTypeId;

    /**
     * @return (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
     * 
     */
    public Output<String> sensitiveTypeId() {
        return this.sensitiveTypeId;
    }
    /**
     * The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
     * 
     */
    @Export(name="source", type=String.class, parameters={})
    private Output<String> source;

    /**
     * @return The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
     * 
     */
    public Output<String> source() {
        return this.source;
    }
    /**
     * The current state of the sensitive column.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The current state of the sensitive column.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
     * 
     */
    @Export(name="timeCreated", type=String.class, parameters={})
    private Output<String> timeCreated;

    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
     * 
     */
    @Export(name="timeUpdated", type=String.class, parameters={})
    private Output<String> timeUpdated;

    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
     * 
     */
    public Output<String> timeUpdated() {
        return this.timeUpdated;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SensitiveDataModelsSensitiveColumn(String name) {
        this(name, SensitiveDataModelsSensitiveColumnArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SensitiveDataModelsSensitiveColumn(String name, SensitiveDataModelsSensitiveColumnArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SensitiveDataModelsSensitiveColumn(String name, SensitiveDataModelsSensitiveColumnArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn", name, args == null ? SensitiveDataModelsSensitiveColumnArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SensitiveDataModelsSensitiveColumn(String name, Output<String> id, @Nullable SensitiveDataModelsSensitiveColumnState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SensitiveDataModelsSensitiveColumn get(String name, Output<String> id, @Nullable SensitiveDataModelsSensitiveColumnState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SensitiveDataModelsSensitiveColumn(name, id, state, options);
    }
}
