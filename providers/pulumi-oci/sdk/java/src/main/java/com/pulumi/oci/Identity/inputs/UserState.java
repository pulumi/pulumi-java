// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Identity.inputs.UserCapabilityArgs;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * Properties indicating how the user is allowed to authenticate.
     * 
     */
    @Import(name="capabilities")
    private @Nullable Output<List<UserCapabilityArgs>> capabilities;

    /**
     * @return Properties indicating how the user is allowed to authenticate.
     * 
     */
    public Optional<Output<List<UserCapabilityArgs>>> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    /**
     * The OCID of the tenancy containing the user.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the tenancy containing the user.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * DB username of the DB credential. Has to be unique across the tenancy.
     * 
     */
    @Import(name="dbUserName")
    private @Nullable Output<String> dbUserName;

    /**
     * @return DB username of the DB credential. Has to be unique across the tenancy.
     * 
     */
    public Optional<Output<String>> dbUserName() {
        return Optional.ofNullable(this.dbUserName);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The description you assign to the user during creation. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The description you assign to the user during creation. Does not have to be unique, and it&#39;s changeable.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The email you assign to the user. Has to be unique across the tenancy.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return (Updatable) The email you assign to the user. Has to be unique across the tenancy.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Whether the email address has been validated.
     * 
     */
    @Import(name="emailVerified")
    private @Nullable Output<Boolean> emailVerified;

    /**
     * @return Whether the email address has been validated.
     * 
     */
    public Optional<Output<Boolean>> emailVerified() {
        return Optional.ofNullable(this.emailVerified);
    }

    /**
     * Identifier of the user in the identity provider
     * 
     */
    @Import(name="externalIdentifier")
    private @Nullable Output<String> externalIdentifier;

    /**
     * @return Identifier of the user in the identity provider
     * 
     */
    public Optional<Output<String>> externalIdentifier() {
        return Optional.ofNullable(this.externalIdentifier);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The OCID of the `IdentityProvider` this user belongs to.
     * 
     */
    @Import(name="identityProviderId")
    private @Nullable Output<String> identityProviderId;

    /**
     * @return The OCID of the `IdentityProvider` this user belongs to.
     * 
     */
    public Optional<Output<String>> identityProviderId() {
        return Optional.ofNullable(this.identityProviderId);
    }

    /**
     * Returned only if the user&#39;s `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
     * * bit 0: SUSPENDED (reserved for future use)
     * * bit 1: DISABLED (reserved for future use)
     * * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
     * 
     */
    @Import(name="inactiveState")
    private @Nullable Output<String> inactiveState;

    /**
     * @return Returned only if the user&#39;s `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
     * * bit 0: SUSPENDED (reserved for future use)
     * * bit 1: DISABLED (reserved for future use)
     * * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
     * 
     */
    public Optional<Output<String>> inactiveState() {
        return Optional.ofNullable(this.inactiveState);
    }

    /**
     * The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    @Import(name="lastSuccessfulLoginTime")
    private @Nullable Output<String> lastSuccessfulLoginTime;

    /**
     * @return The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    public Optional<Output<String>> lastSuccessfulLoginTime() {
        return Optional.ofNullable(this.lastSuccessfulLoginTime);
    }

    /**
     * The name you assign to the user during creation. This is the user&#39;s login for the Console. The name must be unique across all users in the tenancy and cannot be changed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name you assign to the user during creation. This is the user&#39;s login for the Console. The name must be unique across all users in the tenancy and cannot be changed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    @Import(name="previousSuccessfulLoginTime")
    private @Nullable Output<String> previousSuccessfulLoginTime;

    /**
     * @return The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
     * 
     */
    public Optional<Output<String>> previousSuccessfulLoginTime() {
        return Optional.ofNullable(this.previousSuccessfulLoginTime);
    }

    /**
     * The user&#39;s current state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The user&#39;s current state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.capabilities = $.capabilities;
        this.compartmentId = $.compartmentId;
        this.dbUserName = $.dbUserName;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.email = $.email;
        this.emailVerified = $.emailVerified;
        this.externalIdentifier = $.externalIdentifier;
        this.freeformTags = $.freeformTags;
        this.identityProviderId = $.identityProviderId;
        this.inactiveState = $.inactiveState;
        this.lastSuccessfulLoginTime = $.lastSuccessfulLoginTime;
        this.name = $.name;
        this.previousSuccessfulLoginTime = $.previousSuccessfulLoginTime;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param capabilities Properties indicating how the user is allowed to authenticate.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(@Nullable Output<List<UserCapabilityArgs>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities Properties indicating how the user is allowed to authenticate.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<UserCapabilityArgs> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param capabilities Properties indicating how the user is allowed to authenticate.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(UserCapabilityArgs... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param compartmentId The OCID of the tenancy containing the user.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the tenancy containing the user.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param dbUserName DB username of the DB credential. Has to be unique across the tenancy.
         * 
         * @return builder
         * 
         */
        public Builder dbUserName(@Nullable Output<String> dbUserName) {
            $.dbUserName = dbUserName;
            return this;
        }

        /**
         * @param dbUserName DB username of the DB credential. Has to be unique across the tenancy.
         * 
         * @return builder
         * 
         */
        public Builder dbUserName(String dbUserName) {
            return dbUserName(Output.of(dbUserName));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) The description you assign to the user during creation. Does not have to be unique, and it&#39;s changeable.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The description you assign to the user during creation. Does not have to be unique, and it&#39;s changeable.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param email (Updatable) The email you assign to the user. Has to be unique across the tenancy.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email (Updatable) The email you assign to the user. Has to be unique across the tenancy.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param emailVerified Whether the email address has been validated.
         * 
         * @return builder
         * 
         */
        public Builder emailVerified(@Nullable Output<Boolean> emailVerified) {
            $.emailVerified = emailVerified;
            return this;
        }

        /**
         * @param emailVerified Whether the email address has been validated.
         * 
         * @return builder
         * 
         */
        public Builder emailVerified(Boolean emailVerified) {
            return emailVerified(Output.of(emailVerified));
        }

        /**
         * @param externalIdentifier Identifier of the user in the identity provider
         * 
         * @return builder
         * 
         */
        public Builder externalIdentifier(@Nullable Output<String> externalIdentifier) {
            $.externalIdentifier = externalIdentifier;
            return this;
        }

        /**
         * @param externalIdentifier Identifier of the user in the identity provider
         * 
         * @return builder
         * 
         */
        public Builder externalIdentifier(String externalIdentifier) {
            return externalIdentifier(Output.of(externalIdentifier));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param identityProviderId The OCID of the `IdentityProvider` this user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderId(@Nullable Output<String> identityProviderId) {
            $.identityProviderId = identityProviderId;
            return this;
        }

        /**
         * @param identityProviderId The OCID of the `IdentityProvider` this user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderId(String identityProviderId) {
            return identityProviderId(Output.of(identityProviderId));
        }

        /**
         * @param inactiveState Returned only if the user&#39;s `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
         * * bit 0: SUSPENDED (reserved for future use)
         * * bit 1: DISABLED (reserved for future use)
         * * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
         * 
         * @return builder
         * 
         */
        public Builder inactiveState(@Nullable Output<String> inactiveState) {
            $.inactiveState = inactiveState;
            return this;
        }

        /**
         * @param inactiveState Returned only if the user&#39;s `lifecycleState` is INACTIVE. A 16-bit value showing the reason why the user is inactive:
         * * bit 0: SUSPENDED (reserved for future use)
         * * bit 1: DISABLED (reserved for future use)
         * * bit 2: BLOCKED (the user has exceeded the maximum number of failed login attempts for the Console)
         * 
         * @return builder
         * 
         */
        public Builder inactiveState(String inactiveState) {
            return inactiveState(Output.of(inactiveState));
        }

        /**
         * @param lastSuccessfulLoginTime The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
         * 
         * @return builder
         * 
         */
        public Builder lastSuccessfulLoginTime(@Nullable Output<String> lastSuccessfulLoginTime) {
            $.lastSuccessfulLoginTime = lastSuccessfulLoginTime;
            return this;
        }

        /**
         * @param lastSuccessfulLoginTime The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
         * 
         * @return builder
         * 
         */
        public Builder lastSuccessfulLoginTime(String lastSuccessfulLoginTime) {
            return lastSuccessfulLoginTime(Output.of(lastSuccessfulLoginTime));
        }

        /**
         * @param name The name you assign to the user during creation. This is the user&#39;s login for the Console. The name must be unique across all users in the tenancy and cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name you assign to the user during creation. This is the user&#39;s login for the Console. The name must be unique across all users in the tenancy and cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param previousSuccessfulLoginTime The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
         * 
         * @return builder
         * 
         */
        public Builder previousSuccessfulLoginTime(@Nullable Output<String> previousSuccessfulLoginTime) {
            $.previousSuccessfulLoginTime = previousSuccessfulLoginTime;
            return this;
        }

        /**
         * @param previousSuccessfulLoginTime The date and time of when the user most recently logged in the format defined by RFC3339 (ex. `2016-08-25T21:10:29.600Z`). If there is no login history, this field is null.
         * 
         * @return builder
         * 
         */
        public Builder previousSuccessfulLoginTime(String previousSuccessfulLoginTime) {
            return previousSuccessfulLoginTime(Output.of(previousSuccessfulLoginTime));
        }

        /**
         * @param state The user&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The user&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated Date and time the user was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        public UserState build() {
            return $;
        }
    }

}
