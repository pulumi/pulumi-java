// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeBackupPolicyScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeBackupPolicyScheduleArgs Empty = new VolumeBackupPolicyScheduleArgs();

    /**
     * (Updatable) The type of volume backup to create.
     * 
     */
    @Import(name="backupType", required=true)
    private Output<String> backupType;

    /**
     * @return (Updatable) The type of volume backup to create.
     * 
     */
    public Output<String> backupType() {
        return this.backupType;
    }

    /**
     * (Updatable) The day of the month to schedule the volume backup.
     * 
     */
    @Import(name="dayOfMonth")
    private @Nullable Output<Integer> dayOfMonth;

    /**
     * @return (Updatable) The day of the month to schedule the volume backup.
     * 
     */
    public Optional<Output<Integer>> dayOfMonth() {
        return Optional.ofNullable(this.dayOfMonth);
    }

    /**
     * (Updatable) The day of the week to schedule the volume backup.
     * 
     */
    @Import(name="dayOfWeek")
    private @Nullable Output<String> dayOfWeek;

    /**
     * @return (Updatable) The day of the week to schedule the volume backup.
     * 
     */
    public Optional<Output<String>> dayOfWeek() {
        return Optional.ofNullable(this.dayOfWeek);
    }

    /**
     * (Updatable) The hour of the day to schedule the volume backup.
     * 
     */
    @Import(name="hourOfDay")
    private @Nullable Output<Integer> hourOfDay;

    /**
     * @return (Updatable) The hour of the day to schedule the volume backup.
     * 
     */
    public Optional<Output<Integer>> hourOfDay() {
        return Optional.ofNullable(this.hourOfDay);
    }

    /**
     * (Updatable) The month of the year to schedule the volume backup.
     * 
     */
    @Import(name="month")
    private @Nullable Output<String> month;

    /**
     * @return (Updatable) The month of the year to schedule the volume backup.
     * 
     */
    public Optional<Output<String>> month() {
        return Optional.ofNullable(this.month);
    }

    /**
     * (Updatable) The number of seconds that the volume backup start time should be shifted from the default interval boundaries specified by the period. The volume backup start time is the frequency start time plus the offset.
     * 
     */
    @Import(name="offsetSeconds")
    private @Nullable Output<Integer> offsetSeconds;

    /**
     * @return (Updatable) The number of seconds that the volume backup start time should be shifted from the default interval boundaries specified by the period. The volume backup start time is the frequency start time plus the offset.
     * 
     */
    public Optional<Output<Integer>> offsetSeconds() {
        return Optional.ofNullable(this.offsetSeconds);
    }

    /**
     * (Updatable) Indicates how the offset is defined. If value is `STRUCTURED`, then `hourOfDay`, `dayOfWeek`, `dayOfMonth`, and `month` fields are used and `offsetSeconds` will be ignored in requests and users should ignore its value from the responses.
     * 
     */
    @Import(name="offsetType")
    private @Nullable Output<String> offsetType;

    /**
     * @return (Updatable) Indicates how the offset is defined. If value is `STRUCTURED`, then `hourOfDay`, `dayOfWeek`, `dayOfMonth`, and `month` fields are used and `offsetSeconds` will be ignored in requests and users should ignore its value from the responses.
     * 
     */
    public Optional<Output<String>> offsetType() {
        return Optional.ofNullable(this.offsetType);
    }

    /**
     * (Updatable) The volume backup frequency.
     * 
     */
    @Import(name="period", required=true)
    private Output<String> period;

    /**
     * @return (Updatable) The volume backup frequency.
     * 
     */
    public Output<String> period() {
        return this.period;
    }

    /**
     * (Updatable) How long, in seconds, to keep the volume backups created by this schedule.
     * 
     */
    @Import(name="retentionSeconds", required=true)
    private Output<Integer> retentionSeconds;

    /**
     * @return (Updatable) How long, in seconds, to keep the volume backups created by this schedule.
     * 
     */
    public Output<Integer> retentionSeconds() {
        return this.retentionSeconds;
    }

    /**
     * (Updatable) Specifies what time zone is the schedule in
     * enum:
     * - `UTC`
     * - `REGIONAL_DATA_CENTER_TIME`
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return (Updatable) Specifies what time zone is the schedule in
     * enum:
     * - `UTC`
     * - `REGIONAL_DATA_CENTER_TIME`
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private VolumeBackupPolicyScheduleArgs() {}

    private VolumeBackupPolicyScheduleArgs(VolumeBackupPolicyScheduleArgs $) {
        this.backupType = $.backupType;
        this.dayOfMonth = $.dayOfMonth;
        this.dayOfWeek = $.dayOfWeek;
        this.hourOfDay = $.hourOfDay;
        this.month = $.month;
        this.offsetSeconds = $.offsetSeconds;
        this.offsetType = $.offsetType;
        this.period = $.period;
        this.retentionSeconds = $.retentionSeconds;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeBackupPolicyScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeBackupPolicyScheduleArgs $;

        public Builder() {
            $ = new VolumeBackupPolicyScheduleArgs();
        }

        public Builder(VolumeBackupPolicyScheduleArgs defaults) {
            $ = new VolumeBackupPolicyScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupType (Updatable) The type of volume backup to create.
         * 
         * @return builder
         * 
         */
        public Builder backupType(Output<String> backupType) {
            $.backupType = backupType;
            return this;
        }

        /**
         * @param backupType (Updatable) The type of volume backup to create.
         * 
         * @return builder
         * 
         */
        public Builder backupType(String backupType) {
            return backupType(Output.of(backupType));
        }

        /**
         * @param dayOfMonth (Updatable) The day of the month to schedule the volume backup.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(@Nullable Output<Integer> dayOfMonth) {
            $.dayOfMonth = dayOfMonth;
            return this;
        }

        /**
         * @param dayOfMonth (Updatable) The day of the month to schedule the volume backup.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(Integer dayOfMonth) {
            return dayOfMonth(Output.of(dayOfMonth));
        }

        /**
         * @param dayOfWeek (Updatable) The day of the week to schedule the volume backup.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(@Nullable Output<String> dayOfWeek) {
            $.dayOfWeek = dayOfWeek;
            return this;
        }

        /**
         * @param dayOfWeek (Updatable) The day of the week to schedule the volume backup.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(String dayOfWeek) {
            return dayOfWeek(Output.of(dayOfWeek));
        }

        /**
         * @param hourOfDay (Updatable) The hour of the day to schedule the volume backup.
         * 
         * @return builder
         * 
         */
        public Builder hourOfDay(@Nullable Output<Integer> hourOfDay) {
            $.hourOfDay = hourOfDay;
            return this;
        }

        /**
         * @param hourOfDay (Updatable) The hour of the day to schedule the volume backup.
         * 
         * @return builder
         * 
         */
        public Builder hourOfDay(Integer hourOfDay) {
            return hourOfDay(Output.of(hourOfDay));
        }

        /**
         * @param month (Updatable) The month of the year to schedule the volume backup.
         * 
         * @return builder
         * 
         */
        public Builder month(@Nullable Output<String> month) {
            $.month = month;
            return this;
        }

        /**
         * @param month (Updatable) The month of the year to schedule the volume backup.
         * 
         * @return builder
         * 
         */
        public Builder month(String month) {
            return month(Output.of(month));
        }

        /**
         * @param offsetSeconds (Updatable) The number of seconds that the volume backup start time should be shifted from the default interval boundaries specified by the period. The volume backup start time is the frequency start time plus the offset.
         * 
         * @return builder
         * 
         */
        public Builder offsetSeconds(@Nullable Output<Integer> offsetSeconds) {
            $.offsetSeconds = offsetSeconds;
            return this;
        }

        /**
         * @param offsetSeconds (Updatable) The number of seconds that the volume backup start time should be shifted from the default interval boundaries specified by the period. The volume backup start time is the frequency start time plus the offset.
         * 
         * @return builder
         * 
         */
        public Builder offsetSeconds(Integer offsetSeconds) {
            return offsetSeconds(Output.of(offsetSeconds));
        }

        /**
         * @param offsetType (Updatable) Indicates how the offset is defined. If value is `STRUCTURED`, then `hourOfDay`, `dayOfWeek`, `dayOfMonth`, and `month` fields are used and `offsetSeconds` will be ignored in requests and users should ignore its value from the responses.
         * 
         * @return builder
         * 
         */
        public Builder offsetType(@Nullable Output<String> offsetType) {
            $.offsetType = offsetType;
            return this;
        }

        /**
         * @param offsetType (Updatable) Indicates how the offset is defined. If value is `STRUCTURED`, then `hourOfDay`, `dayOfWeek`, `dayOfMonth`, and `month` fields are used and `offsetSeconds` will be ignored in requests and users should ignore its value from the responses.
         * 
         * @return builder
         * 
         */
        public Builder offsetType(String offsetType) {
            return offsetType(Output.of(offsetType));
        }

        /**
         * @param period (Updatable) The volume backup frequency.
         * 
         * @return builder
         * 
         */
        public Builder period(Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period (Updatable) The volume backup frequency.
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param retentionSeconds (Updatable) How long, in seconds, to keep the volume backups created by this schedule.
         * 
         * @return builder
         * 
         */
        public Builder retentionSeconds(Output<Integer> retentionSeconds) {
            $.retentionSeconds = retentionSeconds;
            return this;
        }

        /**
         * @param retentionSeconds (Updatable) How long, in seconds, to keep the volume backups created by this schedule.
         * 
         * @return builder
         * 
         */
        public Builder retentionSeconds(Integer retentionSeconds) {
            return retentionSeconds(Output.of(retentionSeconds));
        }

        /**
         * @param timeZone (Updatable) Specifies what time zone is the schedule in
         * enum:
         * - `UTC`
         * - `REGIONAL_DATA_CENTER_TIME`
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone (Updatable) Specifies what time zone is the schedule in
         * enum:
         * - `UTC`
         * - `REGIONAL_DATA_CENTER_TIME`
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public VolumeBackupPolicyScheduleArgs build() {
            $.backupType = Objects.requireNonNull($.backupType, "expected parameter 'backupType' to be non-null");
            $.period = Objects.requireNonNull($.period, "expected parameter 'period' to be non-null");
            $.retentionSeconds = Objects.requireNonNull($.retentionSeconds, "expected parameter 'retentionSeconds' to be non-null");
            return $;
        }
    }

}
