// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationAdvisorSettingsArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationDataTransferMediumDetailsArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationDatapumpSettingsArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationDumpTransferDetailsArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationExcludeObjectArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationGoldenGateDetailsArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationIncludeObjectArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationVaultDetailsArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MigrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationArgs Empty = new MigrationArgs();

    /**
     * (Updatable) Optional Pre-Migration advisor settings.
     * 
     */
    @Import(name="advisorSettings")
    private @Nullable Output<MigrationAdvisorSettingsArgs> advisorSettings;

    /**
     * @return (Updatable) Optional Pre-Migration advisor settings.
     * 
     */
    public Optional<Output<MigrationAdvisorSettingsArgs>> advisorSettings() {
        return Optional.ofNullable(this.advisorSettings);
    }

    /**
     * (Updatable) The OCID of the registered ODMS Agent. Only valid for Offline Logical Migrations.
     * 
     */
    @Import(name="agentId")
    private @Nullable Output<String> agentId;

    /**
     * @return (Updatable) The OCID of the registered ODMS Agent. Only valid for Offline Logical Migrations.
     * 
     */
    public Optional<Output<String>> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    /**
     * (Updatable) OCID of the compartment where the secret containing the credentials will be created.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) OCID of the compartment where the secret containing the credentials will be created.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Data Transfer Medium details for the Migration. If not specified, it will default to Database Link. Only one type of data transfer medium can be specified.
     * 
     */
    @Import(name="dataTransferMediumDetails")
    private @Nullable Output<MigrationDataTransferMediumDetailsArgs> dataTransferMediumDetails;

    /**
     * @return (Updatable) Data Transfer Medium details for the Migration. If not specified, it will default to Database Link. Only one type of data transfer medium can be specified.
     * 
     */
    public Optional<Output<MigrationDataTransferMediumDetailsArgs>> dataTransferMediumDetails() {
        return Optional.ofNullable(this.dataTransferMediumDetails);
    }

    /**
     * (Updatable) Optional settings for Data Pump Export and Import jobs
     * 
     */
    @Import(name="datapumpSettings")
    private @Nullable Output<MigrationDatapumpSettingsArgs> datapumpSettings;

    /**
     * @return (Updatable) Optional settings for Data Pump Export and Import jobs
     * 
     */
    public Optional<Output<MigrationDatapumpSettingsArgs>> datapumpSettings() {
        return Optional.ofNullable(this.datapumpSettings);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Migration Display Name
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) Migration Display Name
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Optional additional properties for dump transfer.
     * 
     */
    @Import(name="dumpTransferDetails")
    private @Nullable Output<MigrationDumpTransferDetailsArgs> dumpTransferDetails;

    /**
     * @return (Updatable) Optional additional properties for dump transfer.
     * 
     */
    public Optional<Output<MigrationDumpTransferDetailsArgs>> dumpTransferDetails() {
        return Optional.ofNullable(this.dumpTransferDetails);
    }

    /**
     * (Updatable) Database objects to exclude from migration, cannot be specified alongside &#39;includeObjects&#39;
     * 
     */
    @Import(name="excludeObjects")
    private @Nullable Output<List<MigrationExcludeObjectArgs>> excludeObjects;

    /**
     * @return (Updatable) Database objects to exclude from migration, cannot be specified alongside &#39;includeObjects&#39;
     * 
     */
    public Optional<Output<List<MigrationExcludeObjectArgs>>> excludeObjects() {
        return Optional.ofNullable(this.excludeObjects);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Details about Oracle GoldenGate Microservices. Required for online logical migration.
     * 
     */
    @Import(name="goldenGateDetails")
    private @Nullable Output<MigrationGoldenGateDetailsArgs> goldenGateDetails;

    /**
     * @return (Updatable) Details about Oracle GoldenGate Microservices. Required for online logical migration.
     * 
     */
    public Optional<Output<MigrationGoldenGateDetailsArgs>> goldenGateDetails() {
        return Optional.ofNullable(this.goldenGateDetails);
    }

    /**
     * (Updatable) Database objects to include from migration, cannot be specified alongside &#39;excludeObjects&#39;
     * 
     */
    @Import(name="includeObjects")
    private @Nullable Output<List<MigrationIncludeObjectArgs>> includeObjects;

    /**
     * @return (Updatable) Database objects to include from migration, cannot be specified alongside &#39;excludeObjects&#39;
     * 
     */
    public Optional<Output<List<MigrationIncludeObjectArgs>>> includeObjects() {
        return Optional.ofNullable(this.includeObjects);
    }

    /**
     * (Updatable) The OCID of the Source Container Database Connection. Only used for Online migrations. Only Connections of type Non-Autonomous can be used as source container databases.
     * 
     */
    @Import(name="sourceContainerDatabaseConnectionId")
    private @Nullable Output<String> sourceContainerDatabaseConnectionId;

    /**
     * @return (Updatable) The OCID of the Source Container Database Connection. Only used for Online migrations. Only Connections of type Non-Autonomous can be used as source container databases.
     * 
     */
    public Optional<Output<String>> sourceContainerDatabaseConnectionId() {
        return Optional.ofNullable(this.sourceContainerDatabaseConnectionId);
    }

    /**
     * (Updatable) The OCID of the Source Database Connection.
     * 
     */
    @Import(name="sourceDatabaseConnectionId", required=true)
    private Output<String> sourceDatabaseConnectionId;

    /**
     * @return (Updatable) The OCID of the Source Database Connection.
     * 
     */
    public Output<String> sourceDatabaseConnectionId() {
        return this.sourceDatabaseConnectionId;
    }

    /**
     * (Updatable) The OCID of the Target Database Connection.
     * 
     */
    @Import(name="targetDatabaseConnectionId", required=true)
    private Output<String> targetDatabaseConnectionId;

    /**
     * @return (Updatable) The OCID of the Target Database Connection.
     * 
     */
    public Output<String> targetDatabaseConnectionId() {
        return this.targetDatabaseConnectionId;
    }

    /**
     * (Updatable) Migration type.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Migration type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) Oracle Cloud Infrastructure Vault details to store migration and connection credentials secrets
     * 
     */
    @Import(name="vaultDetails")
    private @Nullable Output<MigrationVaultDetailsArgs> vaultDetails;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure Vault details to store migration and connection credentials secrets
     * 
     */
    public Optional<Output<MigrationVaultDetailsArgs>> vaultDetails() {
        return Optional.ofNullable(this.vaultDetails);
    }

    private MigrationArgs() {}

    private MigrationArgs(MigrationArgs $) {
        this.advisorSettings = $.advisorSettings;
        this.agentId = $.agentId;
        this.compartmentId = $.compartmentId;
        this.dataTransferMediumDetails = $.dataTransferMediumDetails;
        this.datapumpSettings = $.datapumpSettings;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.dumpTransferDetails = $.dumpTransferDetails;
        this.excludeObjects = $.excludeObjects;
        this.freeformTags = $.freeformTags;
        this.goldenGateDetails = $.goldenGateDetails;
        this.includeObjects = $.includeObjects;
        this.sourceContainerDatabaseConnectionId = $.sourceContainerDatabaseConnectionId;
        this.sourceDatabaseConnectionId = $.sourceDatabaseConnectionId;
        this.targetDatabaseConnectionId = $.targetDatabaseConnectionId;
        this.type = $.type;
        this.vaultDetails = $.vaultDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationArgs $;

        public Builder() {
            $ = new MigrationArgs();
        }

        public Builder(MigrationArgs defaults) {
            $ = new MigrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advisorSettings (Updatable) Optional Pre-Migration advisor settings.
         * 
         * @return builder
         * 
         */
        public Builder advisorSettings(@Nullable Output<MigrationAdvisorSettingsArgs> advisorSettings) {
            $.advisorSettings = advisorSettings;
            return this;
        }

        /**
         * @param advisorSettings (Updatable) Optional Pre-Migration advisor settings.
         * 
         * @return builder
         * 
         */
        public Builder advisorSettings(MigrationAdvisorSettingsArgs advisorSettings) {
            return advisorSettings(Output.of(advisorSettings));
        }

        /**
         * @param agentId (Updatable) The OCID of the registered ODMS Agent. Only valid for Offline Logical Migrations.
         * 
         * @return builder
         * 
         */
        public Builder agentId(@Nullable Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId (Updatable) The OCID of the registered ODMS Agent. Only valid for Offline Logical Migrations.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param compartmentId (Updatable) OCID of the compartment where the secret containing the credentials will be created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) OCID of the compartment where the secret containing the credentials will be created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param dataTransferMediumDetails (Updatable) Data Transfer Medium details for the Migration. If not specified, it will default to Database Link. Only one type of data transfer medium can be specified.
         * 
         * @return builder
         * 
         */
        public Builder dataTransferMediumDetails(@Nullable Output<MigrationDataTransferMediumDetailsArgs> dataTransferMediumDetails) {
            $.dataTransferMediumDetails = dataTransferMediumDetails;
            return this;
        }

        /**
         * @param dataTransferMediumDetails (Updatable) Data Transfer Medium details for the Migration. If not specified, it will default to Database Link. Only one type of data transfer medium can be specified.
         * 
         * @return builder
         * 
         */
        public Builder dataTransferMediumDetails(MigrationDataTransferMediumDetailsArgs dataTransferMediumDetails) {
            return dataTransferMediumDetails(Output.of(dataTransferMediumDetails));
        }

        /**
         * @param datapumpSettings (Updatable) Optional settings for Data Pump Export and Import jobs
         * 
         * @return builder
         * 
         */
        public Builder datapumpSettings(@Nullable Output<MigrationDatapumpSettingsArgs> datapumpSettings) {
            $.datapumpSettings = datapumpSettings;
            return this;
        }

        /**
         * @param datapumpSettings (Updatable) Optional settings for Data Pump Export and Import jobs
         * 
         * @return builder
         * 
         */
        public Builder datapumpSettings(MigrationDatapumpSettingsArgs datapumpSettings) {
            return datapumpSettings(Output.of(datapumpSettings));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) Migration Display Name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Migration Display Name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param dumpTransferDetails (Updatable) Optional additional properties for dump transfer.
         * 
         * @return builder
         * 
         */
        public Builder dumpTransferDetails(@Nullable Output<MigrationDumpTransferDetailsArgs> dumpTransferDetails) {
            $.dumpTransferDetails = dumpTransferDetails;
            return this;
        }

        /**
         * @param dumpTransferDetails (Updatable) Optional additional properties for dump transfer.
         * 
         * @return builder
         * 
         */
        public Builder dumpTransferDetails(MigrationDumpTransferDetailsArgs dumpTransferDetails) {
            return dumpTransferDetails(Output.of(dumpTransferDetails));
        }

        /**
         * @param excludeObjects (Updatable) Database objects to exclude from migration, cannot be specified alongside &#39;includeObjects&#39;
         * 
         * @return builder
         * 
         */
        public Builder excludeObjects(@Nullable Output<List<MigrationExcludeObjectArgs>> excludeObjects) {
            $.excludeObjects = excludeObjects;
            return this;
        }

        /**
         * @param excludeObjects (Updatable) Database objects to exclude from migration, cannot be specified alongside &#39;includeObjects&#39;
         * 
         * @return builder
         * 
         */
        public Builder excludeObjects(List<MigrationExcludeObjectArgs> excludeObjects) {
            return excludeObjects(Output.of(excludeObjects));
        }

        /**
         * @param excludeObjects (Updatable) Database objects to exclude from migration, cannot be specified alongside &#39;includeObjects&#39;
         * 
         * @return builder
         * 
         */
        public Builder excludeObjects(MigrationExcludeObjectArgs... excludeObjects) {
            return excludeObjects(List.of(excludeObjects));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param goldenGateDetails (Updatable) Details about Oracle GoldenGate Microservices. Required for online logical migration.
         * 
         * @return builder
         * 
         */
        public Builder goldenGateDetails(@Nullable Output<MigrationGoldenGateDetailsArgs> goldenGateDetails) {
            $.goldenGateDetails = goldenGateDetails;
            return this;
        }

        /**
         * @param goldenGateDetails (Updatable) Details about Oracle GoldenGate Microservices. Required for online logical migration.
         * 
         * @return builder
         * 
         */
        public Builder goldenGateDetails(MigrationGoldenGateDetailsArgs goldenGateDetails) {
            return goldenGateDetails(Output.of(goldenGateDetails));
        }

        /**
         * @param includeObjects (Updatable) Database objects to include from migration, cannot be specified alongside &#39;excludeObjects&#39;
         * 
         * @return builder
         * 
         */
        public Builder includeObjects(@Nullable Output<List<MigrationIncludeObjectArgs>> includeObjects) {
            $.includeObjects = includeObjects;
            return this;
        }

        /**
         * @param includeObjects (Updatable) Database objects to include from migration, cannot be specified alongside &#39;excludeObjects&#39;
         * 
         * @return builder
         * 
         */
        public Builder includeObjects(List<MigrationIncludeObjectArgs> includeObjects) {
            return includeObjects(Output.of(includeObjects));
        }

        /**
         * @param includeObjects (Updatable) Database objects to include from migration, cannot be specified alongside &#39;excludeObjects&#39;
         * 
         * @return builder
         * 
         */
        public Builder includeObjects(MigrationIncludeObjectArgs... includeObjects) {
            return includeObjects(List.of(includeObjects));
        }

        /**
         * @param sourceContainerDatabaseConnectionId (Updatable) The OCID of the Source Container Database Connection. Only used for Online migrations. Only Connections of type Non-Autonomous can be used as source container databases.
         * 
         * @return builder
         * 
         */
        public Builder sourceContainerDatabaseConnectionId(@Nullable Output<String> sourceContainerDatabaseConnectionId) {
            $.sourceContainerDatabaseConnectionId = sourceContainerDatabaseConnectionId;
            return this;
        }

        /**
         * @param sourceContainerDatabaseConnectionId (Updatable) The OCID of the Source Container Database Connection. Only used for Online migrations. Only Connections of type Non-Autonomous can be used as source container databases.
         * 
         * @return builder
         * 
         */
        public Builder sourceContainerDatabaseConnectionId(String sourceContainerDatabaseConnectionId) {
            return sourceContainerDatabaseConnectionId(Output.of(sourceContainerDatabaseConnectionId));
        }

        /**
         * @param sourceDatabaseConnectionId (Updatable) The OCID of the Source Database Connection.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabaseConnectionId(Output<String> sourceDatabaseConnectionId) {
            $.sourceDatabaseConnectionId = sourceDatabaseConnectionId;
            return this;
        }

        /**
         * @param sourceDatabaseConnectionId (Updatable) The OCID of the Source Database Connection.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabaseConnectionId(String sourceDatabaseConnectionId) {
            return sourceDatabaseConnectionId(Output.of(sourceDatabaseConnectionId));
        }

        /**
         * @param targetDatabaseConnectionId (Updatable) The OCID of the Target Database Connection.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseConnectionId(Output<String> targetDatabaseConnectionId) {
            $.targetDatabaseConnectionId = targetDatabaseConnectionId;
            return this;
        }

        /**
         * @param targetDatabaseConnectionId (Updatable) The OCID of the Target Database Connection.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseConnectionId(String targetDatabaseConnectionId) {
            return targetDatabaseConnectionId(Output.of(targetDatabaseConnectionId));
        }

        /**
         * @param type (Updatable) Migration type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Migration type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vaultDetails (Updatable) Oracle Cloud Infrastructure Vault details to store migration and connection credentials secrets
         * 
         * @return builder
         * 
         */
        public Builder vaultDetails(@Nullable Output<MigrationVaultDetailsArgs> vaultDetails) {
            $.vaultDetails = vaultDetails;
            return this;
        }

        /**
         * @param vaultDetails (Updatable) Oracle Cloud Infrastructure Vault details to store migration and connection credentials secrets
         * 
         * @return builder
         * 
         */
        public Builder vaultDetails(MigrationVaultDetailsArgs vaultDetails) {
            return vaultDetails(Output.of(vaultDetails));
        }

        public MigrationArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.sourceDatabaseConnectionId = Objects.requireNonNull($.sourceDatabaseConnectionId, "expected parameter 'sourceDatabaseConnectionId' to be non-null");
            $.targetDatabaseConnectionId = Objects.requireNonNull($.targetDatabaseConnectionId, "expected parameter 'targetDatabaseConnectionId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
