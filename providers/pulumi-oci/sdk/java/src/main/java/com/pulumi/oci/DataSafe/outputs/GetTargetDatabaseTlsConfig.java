// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTargetDatabaseTlsConfig {
    /**
     * @return The format of the certificate store.
     * 
     */
    private final String certificateStoreType;
    /**
     * @return Base64 encoded string of key store file content.
     * 
     */
    private final String keyStoreContent;
    /**
     * @return Status to represent whether the database connection is TLS enabled or not.
     * 
     */
    private final String status;
    /**
     * @return The password to read the trust store and key store files, if they are password protected.
     * 
     */
    private final String storePassword;
    /**
     * @return Base64 encoded string of trust store file content.
     * 
     */
    private final String trustStoreContent;

    @CustomType.Constructor
    private GetTargetDatabaseTlsConfig(
        @CustomType.Parameter("certificateStoreType") String certificateStoreType,
        @CustomType.Parameter("keyStoreContent") String keyStoreContent,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("storePassword") String storePassword,
        @CustomType.Parameter("trustStoreContent") String trustStoreContent) {
        this.certificateStoreType = certificateStoreType;
        this.keyStoreContent = keyStoreContent;
        this.status = status;
        this.storePassword = storePassword;
        this.trustStoreContent = trustStoreContent;
    }

    /**
     * @return The format of the certificate store.
     * 
     */
    public String certificateStoreType() {
        return this.certificateStoreType;
    }
    /**
     * @return Base64 encoded string of key store file content.
     * 
     */
    public String keyStoreContent() {
        return this.keyStoreContent;
    }
    /**
     * @return Status to represent whether the database connection is TLS enabled or not.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The password to read the trust store and key store files, if they are password protected.
     * 
     */
    public String storePassword() {
        return this.storePassword;
    }
    /**
     * @return Base64 encoded string of trust store file content.
     * 
     */
    public String trustStoreContent() {
        return this.trustStoreContent;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetDatabaseTlsConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String certificateStoreType;
        private String keyStoreContent;
        private String status;
        private String storePassword;
        private String trustStoreContent;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTargetDatabaseTlsConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateStoreType = defaults.certificateStoreType;
    	      this.keyStoreContent = defaults.keyStoreContent;
    	      this.status = defaults.status;
    	      this.storePassword = defaults.storePassword;
    	      this.trustStoreContent = defaults.trustStoreContent;
        }

        public Builder certificateStoreType(String certificateStoreType) {
            this.certificateStoreType = Objects.requireNonNull(certificateStoreType);
            return this;
        }
        public Builder keyStoreContent(String keyStoreContent) {
            this.keyStoreContent = Objects.requireNonNull(keyStoreContent);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder storePassword(String storePassword) {
            this.storePassword = Objects.requireNonNull(storePassword);
            return this;
        }
        public Builder trustStoreContent(String trustStoreContent) {
            this.trustStoreContent = Objects.requireNonNull(trustStoreContent);
            return this;
        }        public GetTargetDatabaseTlsConfig build() {
            return new GetTargetDatabaseTlsConfig(certificateStoreType, keyStoreContent, status, storePassword, trustStoreContent);
        }
    }
}
