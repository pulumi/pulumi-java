// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackendSetHealthChecker {
    /**
     * @return (Updatable) The interval between health checks, in milliseconds.  Example: `10000`
     * 
     */
    private final @Nullable Integer intervalMs;
    /**
     * @return (Updatable) The backend server port against which to run the health check. If the port is not specified, the load balancer uses the port information from the `Backend` object.  Example: `8080`
     * 
     */
    private final @Nullable Integer port;
    /**
     * @return (Updatable) The protocol the health check must use; either HTTP or TCP.  Example: `HTTP`
     * 
     */
    private final String protocol;
    /**
     * @return (Updatable) A regular expression for parsing the response body from the backend server.  Example: `^((?!false).|\s)*$`
     * 
     */
    private final @Nullable String responseBodyRegex;
    /**
     * @return (Updatable) The number of retries to attempt before a backend server is considered &#34;unhealthy&#34;. This number also applies when recovering a server to the &#34;healthy&#34; state.  Example: `3`
     * 
     */
    private final @Nullable Integer retries;
    /**
     * @return (Updatable) The status code a healthy backend server should return.  Example: `200`
     * 
     */
    private final @Nullable Integer returnCode;
    /**
     * @return (Updatable) The maximum time, in milliseconds, to wait for a reply to a health check. A health check is successful only if a reply returns within this timeout period.  Example: `3000`
     * 
     */
    private final @Nullable Integer timeoutInMillis;
    /**
     * @return (Updatable) The path against which to run the health check.  Example: `/healthcheck`
     * 
     */
    private final @Nullable String urlPath;

    @CustomType.Constructor
    private BackendSetHealthChecker(
        @CustomType.Parameter("intervalMs") @Nullable Integer intervalMs,
        @CustomType.Parameter("port") @Nullable Integer port,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("responseBodyRegex") @Nullable String responseBodyRegex,
        @CustomType.Parameter("retries") @Nullable Integer retries,
        @CustomType.Parameter("returnCode") @Nullable Integer returnCode,
        @CustomType.Parameter("timeoutInMillis") @Nullable Integer timeoutInMillis,
        @CustomType.Parameter("urlPath") @Nullable String urlPath) {
        this.intervalMs = intervalMs;
        this.port = port;
        this.protocol = protocol;
        this.responseBodyRegex = responseBodyRegex;
        this.retries = retries;
        this.returnCode = returnCode;
        this.timeoutInMillis = timeoutInMillis;
        this.urlPath = urlPath;
    }

    /**
     * @return (Updatable) The interval between health checks, in milliseconds.  Example: `10000`
     * 
     */
    public Optional<Integer> intervalMs() {
        return Optional.ofNullable(this.intervalMs);
    }
    /**
     * @return (Updatable) The backend server port against which to run the health check. If the port is not specified, the load balancer uses the port information from the `Backend` object.  Example: `8080`
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return (Updatable) The protocol the health check must use; either HTTP or TCP.  Example: `HTTP`
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return (Updatable) A regular expression for parsing the response body from the backend server.  Example: `^((?!false).|\s)*$`
     * 
     */
    public Optional<String> responseBodyRegex() {
        return Optional.ofNullable(this.responseBodyRegex);
    }
    /**
     * @return (Updatable) The number of retries to attempt before a backend server is considered &#34;unhealthy&#34;. This number also applies when recovering a server to the &#34;healthy&#34; state.  Example: `3`
     * 
     */
    public Optional<Integer> retries() {
        return Optional.ofNullable(this.retries);
    }
    /**
     * @return (Updatable) The status code a healthy backend server should return.  Example: `200`
     * 
     */
    public Optional<Integer> returnCode() {
        return Optional.ofNullable(this.returnCode);
    }
    /**
     * @return (Updatable) The maximum time, in milliseconds, to wait for a reply to a health check. A health check is successful only if a reply returns within this timeout period.  Example: `3000`
     * 
     */
    public Optional<Integer> timeoutInMillis() {
        return Optional.ofNullable(this.timeoutInMillis);
    }
    /**
     * @return (Updatable) The path against which to run the health check.  Example: `/healthcheck`
     * 
     */
    public Optional<String> urlPath() {
        return Optional.ofNullable(this.urlPath);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendSetHealthChecker defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer intervalMs;
        private @Nullable Integer port;
        private String protocol;
        private @Nullable String responseBodyRegex;
        private @Nullable Integer retries;
        private @Nullable Integer returnCode;
        private @Nullable Integer timeoutInMillis;
        private @Nullable String urlPath;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendSetHealthChecker defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.intervalMs = defaults.intervalMs;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.responseBodyRegex = defaults.responseBodyRegex;
    	      this.retries = defaults.retries;
    	      this.returnCode = defaults.returnCode;
    	      this.timeoutInMillis = defaults.timeoutInMillis;
    	      this.urlPath = defaults.urlPath;
        }

        public Builder intervalMs(@Nullable Integer intervalMs) {
            this.intervalMs = intervalMs;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder responseBodyRegex(@Nullable String responseBodyRegex) {
            this.responseBodyRegex = responseBodyRegex;
            return this;
        }
        public Builder retries(@Nullable Integer retries) {
            this.retries = retries;
            return this;
        }
        public Builder returnCode(@Nullable Integer returnCode) {
            this.returnCode = returnCode;
            return this;
        }
        public Builder timeoutInMillis(@Nullable Integer timeoutInMillis) {
            this.timeoutInMillis = timeoutInMillis;
            return this;
        }
        public Builder urlPath(@Nullable String urlPath) {
            this.urlPath = urlPath;
            return this;
        }        public BackendSetHealthChecker build() {
            return new BackendSetHealthChecker(intervalMs, port, protocol, responseBodyRegex, retries, returnCode, timeoutInMillis, urlPath);
        }
    }
}
