// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Mysql.inputs.GetMysqlDbSystemsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMysqlDbSystemsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMysqlDbSystemsArgs Empty = new GetMysqlDbSystemsArgs();

    /**
     * The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * The requested Configuration instance.
     * 
     */
    @Import(name="configurationId")
    private @Nullable String configurationId;

    /**
     * @return The requested Configuration instance.
     * 
     */
    public Optional<String> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }

    /**
     * The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="dbSystemId")
    private @Nullable String dbSystemId;

    /**
     * @return The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }

    /**
     * A filter to return only the resource matching the given display name exactly.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only the resource matching the given display name exactly.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetMysqlDbSystemsFilter> filters;

    public Optional<List<GetMysqlDbSystemsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * DEPRECATED -- please use HeatWave API instead. If true, return only DB Systems with an Analytics Cluster attached, if false return only DB Systems with no Analytics Cluster attached. If not present, return all DB Systems.
     * 
     */
    @Import(name="isAnalyticsClusterAttached")
    private @Nullable Boolean isAnalyticsClusterAttached;

    /**
     * @return DEPRECATED -- please use HeatWave API instead. If true, return only DB Systems with an Analytics Cluster attached, if false return only DB Systems with no Analytics Cluster attached. If not present, return all DB Systems.
     * 
     */
    public Optional<Boolean> isAnalyticsClusterAttached() {
        return Optional.ofNullable(this.isAnalyticsClusterAttached);
    }

    /**
     * If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
     * 
     */
    @Import(name="isHeatWaveClusterAttached")
    private @Nullable Boolean isHeatWaveClusterAttached;

    /**
     * @return If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
     * 
     */
    public Optional<Boolean> isHeatWaveClusterAttached() {
        return Optional.ofNullable(this.isHeatWaveClusterAttached);
    }

    /**
     * Filter instances if they are using the latest revision of the Configuration they are associated with.
     * 
     */
    @Import(name="isUpToDate")
    private @Nullable Boolean isUpToDate;

    /**
     * @return Filter instances if they are using the latest revision of the Configuration they are associated with.
     * 
     */
    public Optional<Boolean> isUpToDate() {
        return Optional.ofNullable(this.isUpToDate);
    }

    /**
     * DbSystem Lifecycle State
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return DbSystem Lifecycle State
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetMysqlDbSystemsArgs() {}

    private GetMysqlDbSystemsArgs(GetMysqlDbSystemsArgs $) {
        this.compartmentId = $.compartmentId;
        this.configurationId = $.configurationId;
        this.dbSystemId = $.dbSystemId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.isAnalyticsClusterAttached = $.isAnalyticsClusterAttached;
        this.isHeatWaveClusterAttached = $.isHeatWaveClusterAttached;
        this.isUpToDate = $.isUpToDate;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMysqlDbSystemsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMysqlDbSystemsArgs $;

        public Builder() {
            $ = new GetMysqlDbSystemsArgs();
        }

        public Builder(GetMysqlDbSystemsArgs defaults) {
            $ = new GetMysqlDbSystemsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param configurationId The requested Configuration instance.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable String configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param dbSystemId The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(@Nullable String dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param displayName A filter to return only the resource matching the given display name exactly.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetMysqlDbSystemsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetMysqlDbSystemsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isAnalyticsClusterAttached DEPRECATED -- please use HeatWave API instead. If true, return only DB Systems with an Analytics Cluster attached, if false return only DB Systems with no Analytics Cluster attached. If not present, return all DB Systems.
         * 
         * @return builder
         * 
         */
        public Builder isAnalyticsClusterAttached(@Nullable Boolean isAnalyticsClusterAttached) {
            $.isAnalyticsClusterAttached = isAnalyticsClusterAttached;
            return this;
        }

        /**
         * @param isHeatWaveClusterAttached If true, return only DB Systems with a HeatWave cluster attached, if false return only DB Systems with no HeatWave cluster attached. If not present, return all DB Systems.
         * 
         * @return builder
         * 
         */
        public Builder isHeatWaveClusterAttached(@Nullable Boolean isHeatWaveClusterAttached) {
            $.isHeatWaveClusterAttached = isHeatWaveClusterAttached;
            return this;
        }

        /**
         * @param isUpToDate Filter instances if they are using the latest revision of the Configuration they are associated with.
         * 
         * @return builder
         * 
         */
        public Builder isUpToDate(@Nullable Boolean isUpToDate) {
            $.isUpToDate = isUpToDate;
            return this;
        }

        /**
         * @param state DbSystem Lifecycle State
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetMysqlDbSystemsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
