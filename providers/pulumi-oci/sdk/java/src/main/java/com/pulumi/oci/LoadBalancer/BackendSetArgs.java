// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.LoadBalancer.inputs.BackendSetHealthCheckerArgs;
import com.pulumi.oci.LoadBalancer.inputs.BackendSetLbCookieSessionPersistenceConfigurationArgs;
import com.pulumi.oci.LoadBalancer.inputs.BackendSetSessionPersistenceConfigurationArgs;
import com.pulumi.oci.LoadBalancer.inputs.BackendSetSslConfigurationArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendSetArgs Empty = new BackendSetArgs();

    /**
     * (Updatable) The health check policy&#39;s configuration details.
     * 
     */
    @Import(name="healthChecker", required=true)
    private Output<BackendSetHealthCheckerArgs> healthChecker;

    /**
     * @return (Updatable) The health check policy&#39;s configuration details.
     * 
     */
    public Output<BackendSetHealthCheckerArgs> healthChecker() {
        return this.healthChecker;
    }

    /**
     * (Updatable) The configuration details for implementing load balancer cookie session persistence (LB cookie stickiness).
     * 
     */
    @Import(name="lbCookieSessionPersistenceConfiguration")
    private @Nullable Output<BackendSetLbCookieSessionPersistenceConfigurationArgs> lbCookieSessionPersistenceConfiguration;

    /**
     * @return (Updatable) The configuration details for implementing load balancer cookie session persistence (LB cookie stickiness).
     * 
     */
    public Optional<Output<BackendSetLbCookieSessionPersistenceConfigurationArgs>> lbCookieSessionPersistenceConfiguration() {
        return Optional.ofNullable(this.lbCookieSessionPersistenceConfiguration);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer on which to add a backend set.
     * 
     */
    @Import(name="loadBalancerId", required=true)
    private Output<String> loadBalancerId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer on which to add a backend set.
     * 
     */
    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }

    /**
     * A friendly name for the backend set. It must be unique and it cannot be changed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A friendly name for the backend set. It must be unique and it cannot be changed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The load balancer policy for the backend set. To get a list of available policies, use the [ListPolicies](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies) operation.  Example: `LEAST_CONNECTIONS`
     * 
     */
    @Import(name="policy", required=true)
    private Output<String> policy;

    /**
     * @return (Updatable) The load balancer policy for the backend set. To get a list of available policies, use the [ListPolicies](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies) operation.  Example: `LEAST_CONNECTIONS`
     * 
     */
    public Output<String> policy() {
        return this.policy;
    }

    /**
     * (Updatable) The configuration details for implementing session persistence based on a user-specified cookie name (application cookie stickiness).
     * 
     */
    @Import(name="sessionPersistenceConfiguration")
    private @Nullable Output<BackendSetSessionPersistenceConfigurationArgs> sessionPersistenceConfiguration;

    /**
     * @return (Updatable) The configuration details for implementing session persistence based on a user-specified cookie name (application cookie stickiness).
     * 
     */
    public Optional<Output<BackendSetSessionPersistenceConfigurationArgs>> sessionPersistenceConfiguration() {
        return Optional.ofNullable(this.sessionPersistenceConfiguration);
    }

    /**
     * (Updatable) The load balancer&#39;s SSL handling configuration details.
     * 
     */
    @Import(name="sslConfiguration")
    private @Nullable Output<BackendSetSslConfigurationArgs> sslConfiguration;

    /**
     * @return (Updatable) The load balancer&#39;s SSL handling configuration details.
     * 
     */
    public Optional<Output<BackendSetSslConfigurationArgs>> sslConfiguration() {
        return Optional.ofNullable(this.sslConfiguration);
    }

    private BackendSetArgs() {}

    private BackendSetArgs(BackendSetArgs $) {
        this.healthChecker = $.healthChecker;
        this.lbCookieSessionPersistenceConfiguration = $.lbCookieSessionPersistenceConfiguration;
        this.loadBalancerId = $.loadBalancerId;
        this.name = $.name;
        this.policy = $.policy;
        this.sessionPersistenceConfiguration = $.sessionPersistenceConfiguration;
        this.sslConfiguration = $.sslConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendSetArgs $;

        public Builder() {
            $ = new BackendSetArgs();
        }

        public Builder(BackendSetArgs defaults) {
            $ = new BackendSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param healthChecker (Updatable) The health check policy&#39;s configuration details.
         * 
         * @return builder
         * 
         */
        public Builder healthChecker(Output<BackendSetHealthCheckerArgs> healthChecker) {
            $.healthChecker = healthChecker;
            return this;
        }

        /**
         * @param healthChecker (Updatable) The health check policy&#39;s configuration details.
         * 
         * @return builder
         * 
         */
        public Builder healthChecker(BackendSetHealthCheckerArgs healthChecker) {
            return healthChecker(Output.of(healthChecker));
        }

        /**
         * @param lbCookieSessionPersistenceConfiguration (Updatable) The configuration details for implementing load balancer cookie session persistence (LB cookie stickiness).
         * 
         * @return builder
         * 
         */
        public Builder lbCookieSessionPersistenceConfiguration(@Nullable Output<BackendSetLbCookieSessionPersistenceConfigurationArgs> lbCookieSessionPersistenceConfiguration) {
            $.lbCookieSessionPersistenceConfiguration = lbCookieSessionPersistenceConfiguration;
            return this;
        }

        /**
         * @param lbCookieSessionPersistenceConfiguration (Updatable) The configuration details for implementing load balancer cookie session persistence (LB cookie stickiness).
         * 
         * @return builder
         * 
         */
        public Builder lbCookieSessionPersistenceConfiguration(BackendSetLbCookieSessionPersistenceConfigurationArgs lbCookieSessionPersistenceConfiguration) {
            return lbCookieSessionPersistenceConfiguration(Output.of(lbCookieSessionPersistenceConfiguration));
        }

        /**
         * @param loadBalancerId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer on which to add a backend set.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer on which to add a backend set.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param name A friendly name for the backend set. It must be unique and it cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A friendly name for the backend set. It must be unique and it cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policy (Updatable) The load balancer policy for the backend set. To get a list of available policies, use the [ListPolicies](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies) operation.  Example: `LEAST_CONNECTIONS`
         * 
         * @return builder
         * 
         */
        public Builder policy(Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy (Updatable) The load balancer policy for the backend set. To get a list of available policies, use the [ListPolicies](https://docs.cloud.oracle.com/iaas/api/#/en/loadbalancer/20170115/LoadBalancerPolicy/ListPolicies) operation.  Example: `LEAST_CONNECTIONS`
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param sessionPersistenceConfiguration (Updatable) The configuration details for implementing session persistence based on a user-specified cookie name (application cookie stickiness).
         * 
         * @return builder
         * 
         */
        public Builder sessionPersistenceConfiguration(@Nullable Output<BackendSetSessionPersistenceConfigurationArgs> sessionPersistenceConfiguration) {
            $.sessionPersistenceConfiguration = sessionPersistenceConfiguration;
            return this;
        }

        /**
         * @param sessionPersistenceConfiguration (Updatable) The configuration details for implementing session persistence based on a user-specified cookie name (application cookie stickiness).
         * 
         * @return builder
         * 
         */
        public Builder sessionPersistenceConfiguration(BackendSetSessionPersistenceConfigurationArgs sessionPersistenceConfiguration) {
            return sessionPersistenceConfiguration(Output.of(sessionPersistenceConfiguration));
        }

        /**
         * @param sslConfiguration (Updatable) The load balancer&#39;s SSL handling configuration details.
         * 
         * @return builder
         * 
         */
        public Builder sslConfiguration(@Nullable Output<BackendSetSslConfigurationArgs> sslConfiguration) {
            $.sslConfiguration = sslConfiguration;
            return this;
        }

        /**
         * @param sslConfiguration (Updatable) The load balancer&#39;s SSL handling configuration details.
         * 
         * @return builder
         * 
         */
        public Builder sslConfiguration(BackendSetSslConfigurationArgs sslConfiguration) {
            return sslConfiguration(Output.of(sslConfiguration));
        }

        public BackendSetArgs build() {
            $.healthChecker = Objects.requireNonNull($.healthChecker, "expected parameter 'healthChecker' to be non-null");
            $.loadBalancerId = Objects.requireNonNull($.loadBalancerId, "expected parameter 'loadBalancerId' to be non-null");
            $.policy = Objects.requireNonNull($.policy, "expected parameter 'policy' to be non-null");
            return $;
        }
    }

}
