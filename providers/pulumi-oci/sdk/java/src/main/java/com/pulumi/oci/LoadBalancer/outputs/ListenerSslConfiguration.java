// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListenerSslConfiguration {
    /**
     * @return (Updatable) Ids for Oracle Cloud Infrastructure certificates service certificates. Currently only a single Id may be passed.  Example: `[ocid1.certificate.oc1.us-ashburn-1.amaaaaaaav3bgsaa5o2q7rh5nfmkkukfkogasqhk6af2opufhjlqg7m6jqzq]`
     * 
     */
    private final @Nullable List<String> certificateIds;
    /**
     * @return (Updatable) A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: `example_certificate_bundle`
     * 
     */
    private final @Nullable String certificateName;
    /**
     * @return (Updatable) The name of the cipher suite to use for HTTPS or SSL connections.
     * 
     */
    private final @Nullable String cipherSuiteName;
    /**
     * @return (Updatable) A list of SSL protocols the load balancer must support for HTTPS or SSL connections.
     * 
     */
    private final @Nullable List<String> protocols;
    /**
     * @return (Updatable) When this attribute is set to ENABLED, the system gives preference to the server ciphers over the client ciphers.
     * 
     */
    private final @Nullable String serverOrderPreference;
    /**
     * @return (Updatable) Ids for Oracle Cloud Infrastructure certificates service CA or CA bundles for the load balancer to trust.  Example: `[ocid1.cabundle.oc1.us-ashburn-1.amaaaaaaav3bgsaagl4zzyqdop5i2vuwoqewdvauuw34llqa74otq2jdsfyq]`
     * 
     */
    private final @Nullable List<String> trustedCertificateAuthorityIds;
    /**
     * @return (Updatable) The maximum depth for peer certificate chain verification.  Example: `3`
     * 
     */
    private final @Nullable Integer verifyDepth;
    /**
     * @return (Updatable) Whether the load balancer listener should verify peer certificates.  Example: `true`
     * 
     */
    private final @Nullable Boolean verifyPeerCertificate;

    @CustomType.Constructor
    private ListenerSslConfiguration(
        @CustomType.Parameter("certificateIds") @Nullable List<String> certificateIds,
        @CustomType.Parameter("certificateName") @Nullable String certificateName,
        @CustomType.Parameter("cipherSuiteName") @Nullable String cipherSuiteName,
        @CustomType.Parameter("protocols") @Nullable List<String> protocols,
        @CustomType.Parameter("serverOrderPreference") @Nullable String serverOrderPreference,
        @CustomType.Parameter("trustedCertificateAuthorityIds") @Nullable List<String> trustedCertificateAuthorityIds,
        @CustomType.Parameter("verifyDepth") @Nullable Integer verifyDepth,
        @CustomType.Parameter("verifyPeerCertificate") @Nullable Boolean verifyPeerCertificate) {
        this.certificateIds = certificateIds;
        this.certificateName = certificateName;
        this.cipherSuiteName = cipherSuiteName;
        this.protocols = protocols;
        this.serverOrderPreference = serverOrderPreference;
        this.trustedCertificateAuthorityIds = trustedCertificateAuthorityIds;
        this.verifyDepth = verifyDepth;
        this.verifyPeerCertificate = verifyPeerCertificate;
    }

    /**
     * @return (Updatable) Ids for Oracle Cloud Infrastructure certificates service certificates. Currently only a single Id may be passed.  Example: `[ocid1.certificate.oc1.us-ashburn-1.amaaaaaaav3bgsaa5o2q7rh5nfmkkukfkogasqhk6af2opufhjlqg7m6jqzq]`
     * 
     */
    public List<String> certificateIds() {
        return this.certificateIds == null ? List.of() : this.certificateIds;
    }
    /**
     * @return (Updatable) A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: `example_certificate_bundle`
     * 
     */
    public Optional<String> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }
    /**
     * @return (Updatable) The name of the cipher suite to use for HTTPS or SSL connections.
     * 
     */
    public Optional<String> cipherSuiteName() {
        return Optional.ofNullable(this.cipherSuiteName);
    }
    /**
     * @return (Updatable) A list of SSL protocols the load balancer must support for HTTPS or SSL connections.
     * 
     */
    public List<String> protocols() {
        return this.protocols == null ? List.of() : this.protocols;
    }
    /**
     * @return (Updatable) When this attribute is set to ENABLED, the system gives preference to the server ciphers over the client ciphers.
     * 
     */
    public Optional<String> serverOrderPreference() {
        return Optional.ofNullable(this.serverOrderPreference);
    }
    /**
     * @return (Updatable) Ids for Oracle Cloud Infrastructure certificates service CA or CA bundles for the load balancer to trust.  Example: `[ocid1.cabundle.oc1.us-ashburn-1.amaaaaaaav3bgsaagl4zzyqdop5i2vuwoqewdvauuw34llqa74otq2jdsfyq]`
     * 
     */
    public List<String> trustedCertificateAuthorityIds() {
        return this.trustedCertificateAuthorityIds == null ? List.of() : this.trustedCertificateAuthorityIds;
    }
    /**
     * @return (Updatable) The maximum depth for peer certificate chain verification.  Example: `3`
     * 
     */
    public Optional<Integer> verifyDepth() {
        return Optional.ofNullable(this.verifyDepth);
    }
    /**
     * @return (Updatable) Whether the load balancer listener should verify peer certificates.  Example: `true`
     * 
     */
    public Optional<Boolean> verifyPeerCertificate() {
        return Optional.ofNullable(this.verifyPeerCertificate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerSslConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> certificateIds;
        private @Nullable String certificateName;
        private @Nullable String cipherSuiteName;
        private @Nullable List<String> protocols;
        private @Nullable String serverOrderPreference;
        private @Nullable List<String> trustedCertificateAuthorityIds;
        private @Nullable Integer verifyDepth;
        private @Nullable Boolean verifyPeerCertificate;

        public Builder() {
    	      // Empty
        }

        public Builder(ListenerSslConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateIds = defaults.certificateIds;
    	      this.certificateName = defaults.certificateName;
    	      this.cipherSuiteName = defaults.cipherSuiteName;
    	      this.protocols = defaults.protocols;
    	      this.serverOrderPreference = defaults.serverOrderPreference;
    	      this.trustedCertificateAuthorityIds = defaults.trustedCertificateAuthorityIds;
    	      this.verifyDepth = defaults.verifyDepth;
    	      this.verifyPeerCertificate = defaults.verifyPeerCertificate;
        }

        public Builder certificateIds(@Nullable List<String> certificateIds) {
            this.certificateIds = certificateIds;
            return this;
        }
        public Builder certificateIds(String... certificateIds) {
            return certificateIds(List.of(certificateIds));
        }
        public Builder certificateName(@Nullable String certificateName) {
            this.certificateName = certificateName;
            return this;
        }
        public Builder cipherSuiteName(@Nullable String cipherSuiteName) {
            this.cipherSuiteName = cipherSuiteName;
            return this;
        }
        public Builder protocols(@Nullable List<String> protocols) {
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        public Builder serverOrderPreference(@Nullable String serverOrderPreference) {
            this.serverOrderPreference = serverOrderPreference;
            return this;
        }
        public Builder trustedCertificateAuthorityIds(@Nullable List<String> trustedCertificateAuthorityIds) {
            this.trustedCertificateAuthorityIds = trustedCertificateAuthorityIds;
            return this;
        }
        public Builder trustedCertificateAuthorityIds(String... trustedCertificateAuthorityIds) {
            return trustedCertificateAuthorityIds(List.of(trustedCertificateAuthorityIds));
        }
        public Builder verifyDepth(@Nullable Integer verifyDepth) {
            this.verifyDepth = verifyDepth;
            return this;
        }
        public Builder verifyPeerCertificate(@Nullable Boolean verifyPeerCertificate) {
            this.verifyPeerCertificate = verifyPeerCertificate;
            return this;
        }        public ListenerSslConfiguration build() {
            return new ListenerSslConfiguration(certificateIds, certificateName, cipherSuiteName, protocols, serverOrderPreference, trustedCertificateAuthorityIds, verifyDepth, verifyPeerCertificate);
        }
    }
}
