// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VulnerabilityScanning.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.VulnerabilityScanning.outputs.GetContainerScanRecipeScanSetting;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetContainerScanRecipeResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe&#39;s compartment
     * 
     */
    private final String compartmentId;
    private final String containerScanRecipeId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> definedTags;
    /**
     * @return User friendly name of container scan recipe
     * 
     */
    private final String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private final Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of container scan recipe. Immutable and generated on creation.
     * 
     */
    private final String id;
    /**
     * @return This field is set equal to the number of images we want to scan in the first go when the recipe is created
     * 
     */
    private final Integer imageCount;
    /**
     * @return A collection of container scan settings
     * 
     */
    private final List<GetContainerScanRecipeScanSetting> scanSettings;
    /**
     * @return The current state of the config.
     * 
     */
    private final String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private final Map<String,Object> systemTags;
    /**
     * @return Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    private final String timeCreated;
    /**
     * @return Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    private final String timeUpdated;

    @CustomType.Constructor
    private GetContainerScanRecipeResult(
        @CustomType.Parameter("compartmentId") String compartmentId,
        @CustomType.Parameter("containerScanRecipeId") String containerScanRecipeId,
        @CustomType.Parameter("definedTags") Map<String,Object> definedTags,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("freeformTags") Map<String,Object> freeformTags,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("imageCount") Integer imageCount,
        @CustomType.Parameter("scanSettings") List<GetContainerScanRecipeScanSetting> scanSettings,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("systemTags") Map<String,Object> systemTags,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeUpdated") String timeUpdated) {
        this.compartmentId = compartmentId;
        this.containerScanRecipeId = containerScanRecipeId;
        this.definedTags = definedTags;
        this.displayName = displayName;
        this.freeformTags = freeformTags;
        this.id = id;
        this.imageCount = imageCount;
        this.scanSettings = scanSettings;
        this.state = state;
        this.systemTags = systemTags;
        this.timeCreated = timeCreated;
        this.timeUpdated = timeUpdated;
    }

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe&#39;s compartment
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public String containerScanRecipeId() {
        return this.containerScanRecipeId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return User friendly name of container scan recipe
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of container scan recipe. Immutable and generated on creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return This field is set equal to the number of images we want to scan in the first go when the recipe is created
     * 
     */
    public Integer imageCount() {
        return this.imageCount;
    }
    /**
     * @return A collection of container scan settings
     * 
     */
    public List<GetContainerScanRecipeScanSetting> scanSettings() {
        return this.scanSettings;
    }
    /**
     * @return The current state of the config.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerScanRecipeResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String compartmentId;
        private String containerScanRecipeId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private Integer imageCount;
        private List<GetContainerScanRecipeScanSetting> scanSettings;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetContainerScanRecipeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.containerScanRecipeId = defaults.containerScanRecipeId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.imageCount = defaults.imageCount;
    	      this.scanSettings = defaults.scanSettings;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        public Builder containerScanRecipeId(String containerScanRecipeId) {
            this.containerScanRecipeId = Objects.requireNonNull(containerScanRecipeId);
            return this;
        }
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imageCount(Integer imageCount) {
            this.imageCount = Objects.requireNonNull(imageCount);
            return this;
        }
        public Builder scanSettings(List<GetContainerScanRecipeScanSetting> scanSettings) {
            this.scanSettings = Objects.requireNonNull(scanSettings);
            return this;
        }
        public Builder scanSettings(GetContainerScanRecipeScanSetting... scanSettings) {
            return scanSettings(List.of(scanSettings));
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }        public GetContainerScanRecipeResult build() {
            return new GetContainerScanRecipeResult(compartmentId, containerScanRecipeId, definedTags, displayName, freeformTags, id, imageCount, scanSettings, state, systemTags, timeCreated, timeUpdated);
        }
    }
}
