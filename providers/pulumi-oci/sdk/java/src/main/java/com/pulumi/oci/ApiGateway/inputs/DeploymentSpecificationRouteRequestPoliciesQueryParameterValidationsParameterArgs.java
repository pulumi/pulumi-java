// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs Empty = new DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs();

    /**
     * (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Updatable) Determines if the parameter is required in the request.
     * 
     */
    @Import(name="required")
    private @Nullable Output<Boolean> required;

    /**
     * @return (Updatable) Determines if the parameter is required in the request.
     * 
     */
    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    private DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs() {}

    private DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs(DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs $) {
        this.name = $.name;
        this.required = $.required;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs();
        }

        public Builder(DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs defaults) {
            $ = new DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param required (Updatable) Determines if the parameter is required in the request.
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required (Updatable) Determines if the parameter is required in the request.
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        public DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
