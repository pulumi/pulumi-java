// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateIssuerNameArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateIssuerNameArgs Empty = new CertificateIssuerNameArgs();

    /**
     * The fully qualified domain name used for DNS lookups of the server.
     * 
     */
    @Import(name="commonName")
    private @Nullable Output<String> commonName;

    /**
     * @return The fully qualified domain name used for DNS lookups of the server.
     * 
     */
    public Optional<Output<String>> commonName() {
        return Optional.ofNullable(this.commonName);
    }

    /**
     * ISO 3166-1 alpha-2 code of the country where the organization is located. For a list of codes, see [ISO&#39;s website](https://www.iso.org/obp/ui/#search/code/).
     * 
     */
    @Import(name="country")
    private @Nullable Output<String> country;

    /**
     * @return ISO 3166-1 alpha-2 code of the country where the organization is located. For a list of codes, see [ISO&#39;s website](https://www.iso.org/obp/ui/#search/code/).
     * 
     */
    public Optional<Output<String>> country() {
        return Optional.ofNullable(this.country);
    }

    /**
     * The email address of the server&#39;s administrator.
     * 
     */
    @Import(name="emailAddress")
    private @Nullable Output<String> emailAddress;

    /**
     * @return The email address of the server&#39;s administrator.
     * 
     */
    public Optional<Output<String>> emailAddress() {
        return Optional.ofNullable(this.emailAddress);
    }

    /**
     * The city in which the organization is located.
     * 
     */
    @Import(name="locality")
    private @Nullable Output<String> locality;

    /**
     * @return The city in which the organization is located.
     * 
     */
    public Optional<Output<String>> locality() {
        return Optional.ofNullable(this.locality);
    }

    /**
     * The organization name.
     * 
     */
    @Import(name="organization")
    private @Nullable Output<String> organization;

    /**
     * @return The organization name.
     * 
     */
    public Optional<Output<String>> organization() {
        return Optional.ofNullable(this.organization);
    }

    /**
     * The field to differentiate between divisions within an organization.
     * 
     */
    @Import(name="organizationalUnit")
    private @Nullable Output<String> organizationalUnit;

    /**
     * @return The field to differentiate between divisions within an organization.
     * 
     */
    public Optional<Output<String>> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }

    /**
     * The province where the organization is located.
     * 
     */
    @Import(name="stateProvince")
    private @Nullable Output<String> stateProvince;

    /**
     * @return The province where the organization is located.
     * 
     */
    public Optional<Output<String>> stateProvince() {
        return Optional.ofNullable(this.stateProvince);
    }

    private CertificateIssuerNameArgs() {}

    private CertificateIssuerNameArgs(CertificateIssuerNameArgs $) {
        this.commonName = $.commonName;
        this.country = $.country;
        this.emailAddress = $.emailAddress;
        this.locality = $.locality;
        this.organization = $.organization;
        this.organizationalUnit = $.organizationalUnit;
        this.stateProvince = $.stateProvince;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateIssuerNameArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateIssuerNameArgs $;

        public Builder() {
            $ = new CertificateIssuerNameArgs();
        }

        public Builder(CertificateIssuerNameArgs defaults) {
            $ = new CertificateIssuerNameArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commonName The fully qualified domain name used for DNS lookups of the server.
         * 
         * @return builder
         * 
         */
        public Builder commonName(@Nullable Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName The fully qualified domain name used for DNS lookups of the server.
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param country ISO 3166-1 alpha-2 code of the country where the organization is located. For a list of codes, see [ISO&#39;s website](https://www.iso.org/obp/ui/#search/code/).
         * 
         * @return builder
         * 
         */
        public Builder country(@Nullable Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country ISO 3166-1 alpha-2 code of the country where the organization is located. For a list of codes, see [ISO&#39;s website](https://www.iso.org/obp/ui/#search/code/).
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param emailAddress The email address of the server&#39;s administrator.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(@Nullable Output<String> emailAddress) {
            $.emailAddress = emailAddress;
            return this;
        }

        /**
         * @param emailAddress The email address of the server&#39;s administrator.
         * 
         * @return builder
         * 
         */
        public Builder emailAddress(String emailAddress) {
            return emailAddress(Output.of(emailAddress));
        }

        /**
         * @param locality The city in which the organization is located.
         * 
         * @return builder
         * 
         */
        public Builder locality(@Nullable Output<String> locality) {
            $.locality = locality;
            return this;
        }

        /**
         * @param locality The city in which the organization is located.
         * 
         * @return builder
         * 
         */
        public Builder locality(String locality) {
            return locality(Output.of(locality));
        }

        /**
         * @param organization The organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization The organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param organizationalUnit The field to differentiate between divisions within an organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(@Nullable Output<String> organizationalUnit) {
            $.organizationalUnit = organizationalUnit;
            return this;
        }

        /**
         * @param organizationalUnit The field to differentiate between divisions within an organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(String organizationalUnit) {
            return organizationalUnit(Output.of(organizationalUnit));
        }

        /**
         * @param stateProvince The province where the organization is located.
         * 
         * @return builder
         * 
         */
        public Builder stateProvince(@Nullable Output<String> stateProvince) {
            $.stateProvince = stateProvince;
            return this;
        }

        /**
         * @param stateProvince The province where the organization is located.
         * 
         * @return builder
         * 
         */
        public Builder stateProvince(String stateProvince) {
            return stateProvince(Output.of(stateProvince));
        }

        public CertificateIssuerNameArgs build() {
            return $;
        }
    }

}
