// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiAnomalyDetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelModelTrainingResultRowReductionDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelModelTrainingResultRowReductionDetailArgs Empty = new ModelModelTrainingResultRowReductionDetailArgs();

    /**
     * A boolean value to indicate if row reduction is applied
     * 
     */
    @Import(name="isReductionEnabled")
    private @Nullable Output<Boolean> isReductionEnabled;

    /**
     * @return A boolean value to indicate if row reduction is applied
     * 
     */
    public Optional<Output<Boolean>> isReductionEnabled() {
        return Optional.ofNullable(this.isReductionEnabled);
    }

    /**
     * Method for row reduction:
     * * DELETE_ROW - delete rows with equal intervals
     * * AVERAGE_ROW - average multiple rows to one row
     * 
     */
    @Import(name="reductionMethod")
    private @Nullable Output<String> reductionMethod;

    /**
     * @return Method for row reduction:
     * * DELETE_ROW - delete rows with equal intervals
     * * AVERAGE_ROW - average multiple rows to one row
     * 
     */
    public Optional<Output<String>> reductionMethod() {
        return Optional.ofNullable(this.reductionMethod);
    }

    /**
     * A percentage to reduce data size down to on top of original data
     * 
     */
    @Import(name="reductionPercentage")
    private @Nullable Output<Double> reductionPercentage;

    /**
     * @return A percentage to reduce data size down to on top of original data
     * 
     */
    public Optional<Output<Double>> reductionPercentage() {
        return Optional.ofNullable(this.reductionPercentage);
    }

    private ModelModelTrainingResultRowReductionDetailArgs() {}

    private ModelModelTrainingResultRowReductionDetailArgs(ModelModelTrainingResultRowReductionDetailArgs $) {
        this.isReductionEnabled = $.isReductionEnabled;
        this.reductionMethod = $.reductionMethod;
        this.reductionPercentage = $.reductionPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelModelTrainingResultRowReductionDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelModelTrainingResultRowReductionDetailArgs $;

        public Builder() {
            $ = new ModelModelTrainingResultRowReductionDetailArgs();
        }

        public Builder(ModelModelTrainingResultRowReductionDetailArgs defaults) {
            $ = new ModelModelTrainingResultRowReductionDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isReductionEnabled A boolean value to indicate if row reduction is applied
         * 
         * @return builder
         * 
         */
        public Builder isReductionEnabled(@Nullable Output<Boolean> isReductionEnabled) {
            $.isReductionEnabled = isReductionEnabled;
            return this;
        }

        /**
         * @param isReductionEnabled A boolean value to indicate if row reduction is applied
         * 
         * @return builder
         * 
         */
        public Builder isReductionEnabled(Boolean isReductionEnabled) {
            return isReductionEnabled(Output.of(isReductionEnabled));
        }

        /**
         * @param reductionMethod Method for row reduction:
         * * DELETE_ROW - delete rows with equal intervals
         * * AVERAGE_ROW - average multiple rows to one row
         * 
         * @return builder
         * 
         */
        public Builder reductionMethod(@Nullable Output<String> reductionMethod) {
            $.reductionMethod = reductionMethod;
            return this;
        }

        /**
         * @param reductionMethod Method for row reduction:
         * * DELETE_ROW - delete rows with equal intervals
         * * AVERAGE_ROW - average multiple rows to one row
         * 
         * @return builder
         * 
         */
        public Builder reductionMethod(String reductionMethod) {
            return reductionMethod(Output.of(reductionMethod));
        }

        /**
         * @param reductionPercentage A percentage to reduce data size down to on top of original data
         * 
         * @return builder
         * 
         */
        public Builder reductionPercentage(@Nullable Output<Double> reductionPercentage) {
            $.reductionPercentage = reductionPercentage;
            return this;
        }

        /**
         * @param reductionPercentage A percentage to reduce data size down to on top of original data
         * 
         * @return builder
         * 
         */
        public Builder reductionPercentage(Double reductionPercentage) {
            return reductionPercentage(Output.of(reductionPercentage));
        }

        public ModelModelTrainingResultRowReductionDetailArgs build() {
            return $;
        }
    }

}
