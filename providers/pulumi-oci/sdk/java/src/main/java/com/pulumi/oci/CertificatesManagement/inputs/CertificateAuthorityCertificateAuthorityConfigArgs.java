// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateAuthorityCertificateAuthorityConfigSubjectArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateAuthorityCertificateAuthorityConfigValidityArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateAuthorityCertificateAuthorityConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityCertificateAuthorityConfigArgs Empty = new CertificateAuthorityCertificateAuthorityConfigArgs();

    /**
     * (Updatable) The origin of the CA.
     * 
     */
    @Import(name="configType", required=true)
    private Output<String> configType;

    /**
     * @return (Updatable) The origin of the CA.
     * 
     */
    public Output<String> configType() {
        return this.configType;
    }

    /**
     * The OCID of the private CA.
     * 
     */
    @Import(name="issuerCertificateAuthorityId")
    private @Nullable Output<String> issuerCertificateAuthorityId;

    /**
     * @return The OCID of the private CA.
     * 
     */
    public Optional<Output<String>> issuerCertificateAuthorityId() {
        return Optional.ofNullable(this.issuerCertificateAuthorityId);
    }

    /**
     * The algorithm used to sign public key certificates that the CA issues.
     * 
     */
    @Import(name="signingAlgorithm")
    private @Nullable Output<String> signingAlgorithm;

    /**
     * @return The algorithm used to sign public key certificates that the CA issues.
     * 
     */
    public Optional<Output<String>> signingAlgorithm() {
        return Optional.ofNullable(this.signingAlgorithm);
    }

    /**
     * The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    @Import(name="subject", required=true)
    private Output<CertificateAuthorityCertificateAuthorityConfigSubjectArgs> subject;

    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    public Output<CertificateAuthorityCertificateAuthorityConfigSubjectArgs> subject() {
        return this.subject;
    }

    /**
     * (Updatable) An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    @Import(name="validity")
    private @Nullable Output<CertificateAuthorityCertificateAuthorityConfigValidityArgs> validity;

    /**
     * @return (Updatable) An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    public Optional<Output<CertificateAuthorityCertificateAuthorityConfigValidityArgs>> validity() {
        return Optional.ofNullable(this.validity);
    }

    /**
     * (Updatable) The name of the CA version. When the value is not null, a name is unique across versions of a given CA.
     * 
     */
    @Import(name="versionName")
    private @Nullable Output<String> versionName;

    /**
     * @return (Updatable) The name of the CA version. When the value is not null, a name is unique across versions of a given CA.
     * 
     */
    public Optional<Output<String>> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    private CertificateAuthorityCertificateAuthorityConfigArgs() {}

    private CertificateAuthorityCertificateAuthorityConfigArgs(CertificateAuthorityCertificateAuthorityConfigArgs $) {
        this.configType = $.configType;
        this.issuerCertificateAuthorityId = $.issuerCertificateAuthorityId;
        this.signingAlgorithm = $.signingAlgorithm;
        this.subject = $.subject;
        this.validity = $.validity;
        this.versionName = $.versionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateAuthorityCertificateAuthorityConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateAuthorityCertificateAuthorityConfigArgs $;

        public Builder() {
            $ = new CertificateAuthorityCertificateAuthorityConfigArgs();
        }

        public Builder(CertificateAuthorityCertificateAuthorityConfigArgs defaults) {
            $ = new CertificateAuthorityCertificateAuthorityConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configType (Updatable) The origin of the CA.
         * 
         * @return builder
         * 
         */
        public Builder configType(Output<String> configType) {
            $.configType = configType;
            return this;
        }

        /**
         * @param configType (Updatable) The origin of the CA.
         * 
         * @return builder
         * 
         */
        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        /**
         * @param issuerCertificateAuthorityId The OCID of the private CA.
         * 
         * @return builder
         * 
         */
        public Builder issuerCertificateAuthorityId(@Nullable Output<String> issuerCertificateAuthorityId) {
            $.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            return this;
        }

        /**
         * @param issuerCertificateAuthorityId The OCID of the private CA.
         * 
         * @return builder
         * 
         */
        public Builder issuerCertificateAuthorityId(String issuerCertificateAuthorityId) {
            return issuerCertificateAuthorityId(Output.of(issuerCertificateAuthorityId));
        }

        /**
         * @param signingAlgorithm The algorithm used to sign public key certificates that the CA issues.
         * 
         * @return builder
         * 
         */
        public Builder signingAlgorithm(@Nullable Output<String> signingAlgorithm) {
            $.signingAlgorithm = signingAlgorithm;
            return this;
        }

        /**
         * @param signingAlgorithm The algorithm used to sign public key certificates that the CA issues.
         * 
         * @return builder
         * 
         */
        public Builder signingAlgorithm(String signingAlgorithm) {
            return signingAlgorithm(Output.of(signingAlgorithm));
        }

        /**
         * @param subject The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subject(Output<CertificateAuthorityCertificateAuthorityConfigSubjectArgs> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subject(CertificateAuthorityCertificateAuthorityConfigSubjectArgs subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param validity (Updatable) An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
         * 
         * @return builder
         * 
         */
        public Builder validity(@Nullable Output<CertificateAuthorityCertificateAuthorityConfigValidityArgs> validity) {
            $.validity = validity;
            return this;
        }

        /**
         * @param validity (Updatable) An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
         * 
         * @return builder
         * 
         */
        public Builder validity(CertificateAuthorityCertificateAuthorityConfigValidityArgs validity) {
            return validity(Output.of(validity));
        }

        /**
         * @param versionName (Updatable) The name of the CA version. When the value is not null, a name is unique across versions of a given CA.
         * 
         * @return builder
         * 
         */
        public Builder versionName(@Nullable Output<String> versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param versionName (Updatable) The name of the CA version. When the value is not null, a name is unique across versions of a given CA.
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            return versionName(Output.of(versionName));
        }

        public CertificateAuthorityCertificateAuthorityConfigArgs build() {
            $.configType = Objects.requireNonNull($.configType, "expected parameter 'configType' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            return $;
        }
    }

}
