// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.ReportDefinitionColumnFilterArgs;
import com.pulumi.oci.DataSafe.inputs.ReportDefinitionColumnInfoArgs;
import com.pulumi.oci.DataSafe.inputs.ReportDefinitionColumnSortingArgs;
import com.pulumi.oci.DataSafe.inputs.ReportDefinitionSummaryArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReportDefinitionState extends com.pulumi.resources.ResourceArgs {

    public static final ReportDefinitionState Empty = new ReportDefinitionState();

    /**
     * Specifies the name of the category that this report belongs to.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Specifies the name of the category that this report belongs to.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * (Updatable) An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
     * 
     */
    @Import(name="columnFilters")
    private @Nullable Output<List<ReportDefinitionColumnFilterArgs>> columnFilters;

    /**
     * @return (Updatable) An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
     * 
     */
    public Optional<Output<List<ReportDefinitionColumnFilterArgs>>> columnFilters() {
        return Optional.ofNullable(this.columnFilters);
    }

    /**
     * (Updatable) An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
     * 
     */
    @Import(name="columnInfos")
    private @Nullable Output<List<ReportDefinitionColumnInfoArgs>> columnInfos;

    /**
     * @return (Updatable) An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
     * 
     */
    public Optional<Output<List<ReportDefinitionColumnInfoArgs>>> columnInfos() {
        return Optional.ofNullable(this.columnInfos);
    }

    /**
     * (Updatable) An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
     * 
     */
    @Import(name="columnSortings")
    private @Nullable Output<List<ReportDefinitionColumnSortingArgs>> columnSortings;

    /**
     * @return (Updatable) An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
     * 
     */
    public Optional<Output<List<ReportDefinitionColumnSortingArgs>>> columnSortings() {
        return Optional.ofNullable(this.columnSortings);
    }

    /**
     * (Updatable) The OCID of the compartment containing the report definition.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment containing the report definition.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Specifies the name of a resource that provides data for the report. For example alerts, events.
     * 
     */
    @Import(name="dataSource")
    private @Nullable Output<String> dataSource;

    /**
     * @return Specifies the name of a resource that provides data for the report. For example alerts, events.
     * 
     */
    public Optional<Output<String>> dataSource() {
        return Optional.ofNullable(this.dataSource);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A description of the report definition.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A description of the report definition.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Specifies the name of the report definition.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) Specifies the name of the report definition.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Specifies the order in which the summary must be displayed.
     * 
     */
    @Import(name="displayOrder")
    private @Nullable Output<Integer> displayOrder;

    /**
     * @return (Updatable) Specifies the order in which the summary must be displayed.
     * 
     */
    public Optional<Output<Integer>> displayOrder() {
        return Optional.ofNullable(this.displayOrder);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Signifies whether the definition is seeded or user defined. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    @Import(name="isSeeded")
    private @Nullable Output<Boolean> isSeeded;

    /**
     * @return Signifies whether the definition is seeded or user defined. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    public Optional<Output<Boolean>> isSeeded() {
        return Optional.ofNullable(this.isSeeded);
    }

    /**
     * The OCID of the parent report definition.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return The OCID of the parent report definition.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * (Updatable) Additional scim filters used to get the specific summary.
     * 
     */
    @Import(name="scimFilter")
    private @Nullable Output<String> scimFilter;

    /**
     * @return (Updatable) Additional scim filters used to get the specific summary.
     * 
     */
    public Optional<Output<String>> scimFilter() {
        return Optional.ofNullable(this.scimFilter);
    }

    /**
     * The current state of the report.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the report.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Updatable) An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
     * 
     */
    @Import(name="summaries")
    private @Nullable Output<List<ReportDefinitionSummaryArgs>> summaries;

    /**
     * @return (Updatable) An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
     * 
     */
    public Optional<Output<List<ReportDefinitionSummaryArgs>>> summaries() {
        return Optional.ofNullable(this.summaries);
    }

    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,Object>> systemTags;

    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * Specifies the time at which the report definition was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return Specifies the time at which the report definition was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time of the report definition update in Data Safe.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time of the report definition update in Data Safe.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private ReportDefinitionState() {}

    private ReportDefinitionState(ReportDefinitionState $) {
        this.category = $.category;
        this.columnFilters = $.columnFilters;
        this.columnInfos = $.columnInfos;
        this.columnSortings = $.columnSortings;
        this.compartmentId = $.compartmentId;
        this.dataSource = $.dataSource;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.displayOrder = $.displayOrder;
        this.freeformTags = $.freeformTags;
        this.isSeeded = $.isSeeded;
        this.parentId = $.parentId;
        this.scimFilter = $.scimFilter;
        this.state = $.state;
        this.summaries = $.summaries;
        this.systemTags = $.systemTags;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportDefinitionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportDefinitionState $;

        public Builder() {
            $ = new ReportDefinitionState();
        }

        public Builder(ReportDefinitionState defaults) {
            $ = new ReportDefinitionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Specifies the name of the category that this report belongs to.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Specifies the name of the category that this report belongs to.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param columnFilters (Updatable) An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
         * 
         * @return builder
         * 
         */
        public Builder columnFilters(@Nullable Output<List<ReportDefinitionColumnFilterArgs>> columnFilters) {
            $.columnFilters = columnFilters;
            return this;
        }

        /**
         * @param columnFilters (Updatable) An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
         * 
         * @return builder
         * 
         */
        public Builder columnFilters(List<ReportDefinitionColumnFilterArgs> columnFilters) {
            return columnFilters(Output.of(columnFilters));
        }

        /**
         * @param columnFilters (Updatable) An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
         * 
         * @return builder
         * 
         */
        public Builder columnFilters(ReportDefinitionColumnFilterArgs... columnFilters) {
            return columnFilters(List.of(columnFilters));
        }

        /**
         * @param columnInfos (Updatable) An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
         * 
         * @return builder
         * 
         */
        public Builder columnInfos(@Nullable Output<List<ReportDefinitionColumnInfoArgs>> columnInfos) {
            $.columnInfos = columnInfos;
            return this;
        }

        /**
         * @param columnInfos (Updatable) An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
         * 
         * @return builder
         * 
         */
        public Builder columnInfos(List<ReportDefinitionColumnInfoArgs> columnInfos) {
            return columnInfos(Output.of(columnInfos));
        }

        /**
         * @param columnInfos (Updatable) An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
         * 
         * @return builder
         * 
         */
        public Builder columnInfos(ReportDefinitionColumnInfoArgs... columnInfos) {
            return columnInfos(List.of(columnInfos));
        }

        /**
         * @param columnSortings (Updatable) An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
         * 
         * @return builder
         * 
         */
        public Builder columnSortings(@Nullable Output<List<ReportDefinitionColumnSortingArgs>> columnSortings) {
            $.columnSortings = columnSortings;
            return this;
        }

        /**
         * @param columnSortings (Updatable) An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
         * 
         * @return builder
         * 
         */
        public Builder columnSortings(List<ReportDefinitionColumnSortingArgs> columnSortings) {
            return columnSortings(Output.of(columnSortings));
        }

        /**
         * @param columnSortings (Updatable) An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
         * 
         * @return builder
         * 
         */
        public Builder columnSortings(ReportDefinitionColumnSortingArgs... columnSortings) {
            return columnSortings(List.of(columnSortings));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment containing the report definition.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment containing the report definition.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param dataSource Specifies the name of a resource that provides data for the report. For example alerts, events.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(@Nullable Output<String> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        /**
         * @param dataSource Specifies the name of a resource that provides data for the report. For example alerts, events.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(String dataSource) {
            return dataSource(Output.of(dataSource));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A description of the report definition.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A description of the report definition.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) Specifies the name of the report definition.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Specifies the name of the report definition.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param displayOrder (Updatable) Specifies the order in which the summary must be displayed.
         * 
         * @return builder
         * 
         */
        public Builder displayOrder(@Nullable Output<Integer> displayOrder) {
            $.displayOrder = displayOrder;
            return this;
        }

        /**
         * @param displayOrder (Updatable) Specifies the order in which the summary must be displayed.
         * 
         * @return builder
         * 
         */
        public Builder displayOrder(Integer displayOrder) {
            return displayOrder(Output.of(displayOrder));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isSeeded Signifies whether the definition is seeded or user defined. Values can either be &#39;true&#39; or &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder isSeeded(@Nullable Output<Boolean> isSeeded) {
            $.isSeeded = isSeeded;
            return this;
        }

        /**
         * @param isSeeded Signifies whether the definition is seeded or user defined. Values can either be &#39;true&#39; or &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder isSeeded(Boolean isSeeded) {
            return isSeeded(Output.of(isSeeded));
        }

        /**
         * @param parentId The OCID of the parent report definition.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The OCID of the parent report definition.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param scimFilter (Updatable) Additional scim filters used to get the specific summary.
         * 
         * @return builder
         * 
         */
        public Builder scimFilter(@Nullable Output<String> scimFilter) {
            $.scimFilter = scimFilter;
            return this;
        }

        /**
         * @param scimFilter (Updatable) Additional scim filters used to get the specific summary.
         * 
         * @return builder
         * 
         */
        public Builder scimFilter(String scimFilter) {
            return scimFilter(Output.of(scimFilter));
        }

        /**
         * @param state The current state of the report.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the report.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param summaries (Updatable) An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
         * 
         * @return builder
         * 
         */
        public Builder summaries(@Nullable Output<List<ReportDefinitionSummaryArgs>> summaries) {
            $.summaries = summaries;
            return this;
        }

        /**
         * @param summaries (Updatable) An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
         * 
         * @return builder
         * 
         */
        public Builder summaries(List<ReportDefinitionSummaryArgs> summaries) {
            return summaries(Output.of(summaries));
        }

        /**
         * @param summaries (Updatable) An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
         * 
         * @return builder
         * 
         */
        public Builder summaries(ReportDefinitionSummaryArgs... summaries) {
            return summaries(List.of(summaries));
        }

        /**
         * @param systemTags System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,Object>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,Object> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param timeCreated Specifies the time at which the report definition was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated Specifies the time at which the report definition was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The date and time of the report definition update in Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time of the report definition update in Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public ReportDefinitionState build() {
            return $;
        }
    }

}
