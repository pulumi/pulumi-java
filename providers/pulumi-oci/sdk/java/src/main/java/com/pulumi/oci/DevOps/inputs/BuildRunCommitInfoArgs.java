// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class BuildRunCommitInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildRunCommitInfoArgs Empty = new BuildRunCommitInfoArgs();

    /**
     * Commit hash pertinent to the repository URL and the specified branch.
     * 
     */
    @Import(name="commitHash", required=true)
    private Output<String> commitHash;

    /**
     * @return Commit hash pertinent to the repository URL and the specified branch.
     * 
     */
    public Output<String> commitHash() {
        return this.commitHash;
    }

    /**
     * Name of the repository branch.
     * 
     */
    @Import(name="repositoryBranch", required=true)
    private Output<String> repositoryBranch;

    /**
     * @return Name of the repository branch.
     * 
     */
    public Output<String> repositoryBranch() {
        return this.repositoryBranch;
    }

    /**
     * Repository URL.
     * 
     */
    @Import(name="repositoryUrl", required=true)
    private Output<String> repositoryUrl;

    /**
     * @return Repository URL.
     * 
     */
    public Output<String> repositoryUrl() {
        return this.repositoryUrl;
    }

    private BuildRunCommitInfoArgs() {}

    private BuildRunCommitInfoArgs(BuildRunCommitInfoArgs $) {
        this.commitHash = $.commitHash;
        this.repositoryBranch = $.repositoryBranch;
        this.repositoryUrl = $.repositoryUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildRunCommitInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildRunCommitInfoArgs $;

        public Builder() {
            $ = new BuildRunCommitInfoArgs();
        }

        public Builder(BuildRunCommitInfoArgs defaults) {
            $ = new BuildRunCommitInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commitHash Commit hash pertinent to the repository URL and the specified branch.
         * 
         * @return builder
         * 
         */
        public Builder commitHash(Output<String> commitHash) {
            $.commitHash = commitHash;
            return this;
        }

        /**
         * @param commitHash Commit hash pertinent to the repository URL and the specified branch.
         * 
         * @return builder
         * 
         */
        public Builder commitHash(String commitHash) {
            return commitHash(Output.of(commitHash));
        }

        /**
         * @param repositoryBranch Name of the repository branch.
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(Output<String> repositoryBranch) {
            $.repositoryBranch = repositoryBranch;
            return this;
        }

        /**
         * @param repositoryBranch Name of the repository branch.
         * 
         * @return builder
         * 
         */
        public Builder repositoryBranch(String repositoryBranch) {
            return repositoryBranch(Output.of(repositoryBranch));
        }

        /**
         * @param repositoryUrl Repository URL.
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(Output<String> repositoryUrl) {
            $.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * @param repositoryUrl Repository URL.
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(String repositoryUrl) {
            return repositoryUrl(Output.of(repositoryUrl));
        }

        public BuildRunCommitInfoArgs build() {
            $.commitHash = Objects.requireNonNull($.commitHash, "expected parameter 'commitHash' to be non-null");
            $.repositoryBranch = Objects.requireNonNull($.repositoryBranch, "expected parameter 'repositoryBranch' to be non-null");
            $.repositoryUrl = Objects.requireNonNull($.repositoryUrl, "expected parameter 'repositoryUrl' to be non-null");
            return $;
        }
    }

}
