// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Vault.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecretVersionResult {
    /**
     * @return The content type of the secret version&#39;s secret contents.
     * 
     */
    private final String contentType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The name of the secret version. A name is unique across versions of a secret.
     * 
     */
    private final String name;
    /**
     * @return The OCID of the secret.
     * 
     */
    private final String secretId;
    private final String secretVersionNumber;
    /**
     * @return A list of possible rotation states for the secret version. A secret version marked `CURRENT` is currently in use. A secret version marked `PENDING` is staged and available for use, but has not been applied on the target system and, therefore, has not been rotated into current, active use. The secret most recently uploaded to a vault is always marked `LATEST`. (The first version of a secret is always marked as both `CURRENT` and `LATEST`.) A secret version marked `PREVIOUS` is the secret version that was most recently marked `CURRENT`, before the last secret version rotation. A secret version marked `DEPRECATED` is neither current, pending, nor the previous one in use. Only secret versions marked `DEPRECATED` can be scheduled for deletion.
     * 
     */
    private final List<String> stages;
    /**
     * @return A optional property indicating when the secret version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private final String timeCreated;
    /**
     * @return An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private final String timeOfCurrentVersionExpiry;
    /**
     * @return An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private final String timeOfDeletion;
    /**
     * @return The version number of the secret.
     * 
     */
    private final String versionNumber;

    @CustomType.Constructor
    private GetSecretVersionResult(
        @CustomType.Parameter("contentType") String contentType,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("secretId") String secretId,
        @CustomType.Parameter("secretVersionNumber") String secretVersionNumber,
        @CustomType.Parameter("stages") List<String> stages,
        @CustomType.Parameter("timeCreated") String timeCreated,
        @CustomType.Parameter("timeOfCurrentVersionExpiry") String timeOfCurrentVersionExpiry,
        @CustomType.Parameter("timeOfDeletion") String timeOfDeletion,
        @CustomType.Parameter("versionNumber") String versionNumber) {
        this.contentType = contentType;
        this.id = id;
        this.name = name;
        this.secretId = secretId;
        this.secretVersionNumber = secretVersionNumber;
        this.stages = stages;
        this.timeCreated = timeCreated;
        this.timeOfCurrentVersionExpiry = timeOfCurrentVersionExpiry;
        this.timeOfDeletion = timeOfDeletion;
        this.versionNumber = versionNumber;
    }

    /**
     * @return The content type of the secret version&#39;s secret contents.
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the secret version. A name is unique across versions of a secret.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The OCID of the secret.
     * 
     */
    public String secretId() {
        return this.secretId;
    }
    public String secretVersionNumber() {
        return this.secretVersionNumber;
    }
    /**
     * @return A list of possible rotation states for the secret version. A secret version marked `CURRENT` is currently in use. A secret version marked `PENDING` is staged and available for use, but has not been applied on the target system and, therefore, has not been rotated into current, active use. The secret most recently uploaded to a vault is always marked `LATEST`. (The first version of a secret is always marked as both `CURRENT` and `LATEST`.) A secret version marked `PREVIOUS` is the secret version that was most recently marked `CURRENT`, before the last secret version rotation. A secret version marked `DEPRECATED` is neither current, pending, nor the previous one in use. Only secret versions marked `DEPRECATED` can be scheduled for deletion.
     * 
     */
    public List<String> stages() {
        return this.stages;
    }
    /**
     * @return A optional property indicating when the secret version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfCurrentVersionExpiry() {
        return this.timeOfCurrentVersionExpiry;
    }
    /**
     * @return An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    /**
     * @return The version number of the secret.
     * 
     */
    public String versionNumber() {
        return this.versionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretVersionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String contentType;
        private String id;
        private String name;
        private String secretId;
        private String secretVersionNumber;
        private List<String> stages;
        private String timeCreated;
        private String timeOfCurrentVersionExpiry;
        private String timeOfDeletion;
        private String versionNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSecretVersionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentType = defaults.contentType;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.secretId = defaults.secretId;
    	      this.secretVersionNumber = defaults.secretVersionNumber;
    	      this.stages = defaults.stages;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfCurrentVersionExpiry = defaults.timeOfCurrentVersionExpiry;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.versionNumber = defaults.versionNumber;
        }

        public Builder contentType(String contentType) {
            this.contentType = Objects.requireNonNull(contentType);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder secretId(String secretId) {
            this.secretId = Objects.requireNonNull(secretId);
            return this;
        }
        public Builder secretVersionNumber(String secretVersionNumber) {
            this.secretVersionNumber = Objects.requireNonNull(secretVersionNumber);
            return this;
        }
        public Builder stages(List<String> stages) {
            this.stages = Objects.requireNonNull(stages);
            return this;
        }
        public Builder stages(String... stages) {
            return stages(List.of(stages));
        }
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public Builder timeOfCurrentVersionExpiry(String timeOfCurrentVersionExpiry) {
            this.timeOfCurrentVersionExpiry = Objects.requireNonNull(timeOfCurrentVersionExpiry);
            return this;
        }
        public Builder timeOfDeletion(String timeOfDeletion) {
            this.timeOfDeletion = Objects.requireNonNull(timeOfDeletion);
            return this;
        }
        public Builder versionNumber(String versionNumber) {
            this.versionNumber = Objects.requireNonNull(versionNumber);
            return this;
        }        public GetSecretVersionResult build() {
            return new GetSecretVersionResult(contentType, id, name, secretId, secretVersionNumber, stages, timeCreated, timeOfCurrentVersionExpiry, timeOfDeletion, versionNumber);
        }
    }
}
