// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttribute;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDiscoveryJobsResultsDiscoveryJobResultCollectionItem {
    /**
     * @return Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
     * 
     */
    private final List<String> appDefinedChildColumnKeys;
    /**
     * @return The name of the application. An application is an entity that is identified by a schema and stores sensitive information for that schema. Its value will be same as schemaName, if no value is passed.
     * 
     */
    private final String appName;
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    private final String columnName;
    /**
     * @return The data type of the sensitive column.
     * 
     */
    private final String dataType;
    /**
     * @return Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
     * 
     */
    private final List<String> dbDefinedChildColumnKeys;
    /**
     * @return The OCID of the discovery job.
     * 
     */
    private final String discoveryJobId;
    /**
     * @return A filter to return only the resources that match the specified discovery type.
     * 
     */
    private final String discoveryType;
    /**
     * @return The estimated number of data values the column has in the associated database.
     * 
     */
    private final String estimatedDataValueCount;
    /**
     * @return A filter to return the discovery result resources based on the value of their isResultApplied attribute.
     * 
     */
    private final Boolean isResultApplied;
    /**
     * @return The unique key that identifies the discovery result.
     * 
     */
    private final String key;
    /**
     * @return The attributes of a sensitive column that have been modified in the target database. It&#39;s populated only in the case of MODIFIED discovery results and shows the new values of the modified attributes.
     * 
     */
    private final List<GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttribute> modifiedAttributes;
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    private final String object;
    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    private final String objectType;
    /**
     * @return Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
     * 
     */
    private final List<String> parentColumnKeys;
    /**
     * @return A filter to return only the resources that match the specified planned action.
     * 
     */
    private final String plannedAction;
    /**
     * @return The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    private final String relationType;
    /**
     * @return Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     * 
     */
    private final List<String> sampleDataValues;
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    private final String schemaName;
    /**
     * @return The unique key that identifies the sensitive column represented by the discovery result.
     * 
     */
    private final String sensitiveColumnkey;
    /**
     * @return The OCID of the sensitive type associated with the sensitive column.
     * 
     */
    private final String sensitiveTypeId;

    @CustomType.Constructor
    private GetDiscoveryJobsResultsDiscoveryJobResultCollectionItem(
        @CustomType.Parameter("appDefinedChildColumnKeys") List<String> appDefinedChildColumnKeys,
        @CustomType.Parameter("appName") String appName,
        @CustomType.Parameter("columnName") String columnName,
        @CustomType.Parameter("dataType") String dataType,
        @CustomType.Parameter("dbDefinedChildColumnKeys") List<String> dbDefinedChildColumnKeys,
        @CustomType.Parameter("discoveryJobId") String discoveryJobId,
        @CustomType.Parameter("discoveryType") String discoveryType,
        @CustomType.Parameter("estimatedDataValueCount") String estimatedDataValueCount,
        @CustomType.Parameter("isResultApplied") Boolean isResultApplied,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("modifiedAttributes") List<GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttribute> modifiedAttributes,
        @CustomType.Parameter("object") String object,
        @CustomType.Parameter("objectType") String objectType,
        @CustomType.Parameter("parentColumnKeys") List<String> parentColumnKeys,
        @CustomType.Parameter("plannedAction") String plannedAction,
        @CustomType.Parameter("relationType") String relationType,
        @CustomType.Parameter("sampleDataValues") List<String> sampleDataValues,
        @CustomType.Parameter("schemaName") String schemaName,
        @CustomType.Parameter("sensitiveColumnkey") String sensitiveColumnkey,
        @CustomType.Parameter("sensitiveTypeId") String sensitiveTypeId) {
        this.appDefinedChildColumnKeys = appDefinedChildColumnKeys;
        this.appName = appName;
        this.columnName = columnName;
        this.dataType = dataType;
        this.dbDefinedChildColumnKeys = dbDefinedChildColumnKeys;
        this.discoveryJobId = discoveryJobId;
        this.discoveryType = discoveryType;
        this.estimatedDataValueCount = estimatedDataValueCount;
        this.isResultApplied = isResultApplied;
        this.key = key;
        this.modifiedAttributes = modifiedAttributes;
        this.object = object;
        this.objectType = objectType;
        this.parentColumnKeys = parentColumnKeys;
        this.plannedAction = plannedAction;
        this.relationType = relationType;
        this.sampleDataValues = sampleDataValues;
        this.schemaName = schemaName;
        this.sensitiveColumnkey = sensitiveColumnkey;
        this.sensitiveTypeId = sensitiveTypeId;
    }

    /**
     * @return Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
     * 
     */
    public List<String> appDefinedChildColumnKeys() {
        return this.appDefinedChildColumnKeys;
    }
    /**
     * @return The name of the application. An application is an entity that is identified by a schema and stores sensitive information for that schema. Its value will be same as schemaName, if no value is passed.
     * 
     */
    public String appName() {
        return this.appName;
    }
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    /**
     * @return The data type of the sensitive column.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
     * 
     */
    public List<String> dbDefinedChildColumnKeys() {
        return this.dbDefinedChildColumnKeys;
    }
    /**
     * @return The OCID of the discovery job.
     * 
     */
    public String discoveryJobId() {
        return this.discoveryJobId;
    }
    /**
     * @return A filter to return only the resources that match the specified discovery type.
     * 
     */
    public String discoveryType() {
        return this.discoveryType;
    }
    /**
     * @return The estimated number of data values the column has in the associated database.
     * 
     */
    public String estimatedDataValueCount() {
        return this.estimatedDataValueCount;
    }
    /**
     * @return A filter to return the discovery result resources based on the value of their isResultApplied attribute.
     * 
     */
    public Boolean isResultApplied() {
        return this.isResultApplied;
    }
    /**
     * @return The unique key that identifies the discovery result.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The attributes of a sensitive column that have been modified in the target database. It&#39;s populated only in the case of MODIFIED discovery results and shows the new values of the modified attributes.
     * 
     */
    public List<GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttribute> modifiedAttributes() {
        return this.modifiedAttributes;
    }
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    public String objectType() {
        return this.objectType;
    }
    /**
     * @return Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
     * 
     */
    public List<String> parentColumnKeys() {
        return this.parentColumnKeys;
    }
    /**
     * @return A filter to return only the resources that match the specified planned action.
     * 
     */
    public String plannedAction() {
        return this.plannedAction;
    }
    /**
     * @return The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    public String relationType() {
        return this.relationType;
    }
    /**
     * @return Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     * 
     */
    public List<String> sampleDataValues() {
        return this.sampleDataValues;
    }
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public String schemaName() {
        return this.schemaName;
    }
    /**
     * @return The unique key that identifies the sensitive column represented by the discovery result.
     * 
     */
    public String sensitiveColumnkey() {
        return this.sensitiveColumnkey;
    }
    /**
     * @return The OCID of the sensitive type associated with the sensitive column.
     * 
     */
    public String sensitiveTypeId() {
        return this.sensitiveTypeId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiscoveryJobsResultsDiscoveryJobResultCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> appDefinedChildColumnKeys;
        private String appName;
        private String columnName;
        private String dataType;
        private List<String> dbDefinedChildColumnKeys;
        private String discoveryJobId;
        private String discoveryType;
        private String estimatedDataValueCount;
        private Boolean isResultApplied;
        private String key;
        private List<GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttribute> modifiedAttributes;
        private String object;
        private String objectType;
        private List<String> parentColumnKeys;
        private String plannedAction;
        private String relationType;
        private List<String> sampleDataValues;
        private String schemaName;
        private String sensitiveColumnkey;
        private String sensitiveTypeId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDiscoveryJobsResultsDiscoveryJobResultCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appDefinedChildColumnKeys = defaults.appDefinedChildColumnKeys;
    	      this.appName = defaults.appName;
    	      this.columnName = defaults.columnName;
    	      this.dataType = defaults.dataType;
    	      this.dbDefinedChildColumnKeys = defaults.dbDefinedChildColumnKeys;
    	      this.discoveryJobId = defaults.discoveryJobId;
    	      this.discoveryType = defaults.discoveryType;
    	      this.estimatedDataValueCount = defaults.estimatedDataValueCount;
    	      this.isResultApplied = defaults.isResultApplied;
    	      this.key = defaults.key;
    	      this.modifiedAttributes = defaults.modifiedAttributes;
    	      this.object = defaults.object;
    	      this.objectType = defaults.objectType;
    	      this.parentColumnKeys = defaults.parentColumnKeys;
    	      this.plannedAction = defaults.plannedAction;
    	      this.relationType = defaults.relationType;
    	      this.sampleDataValues = defaults.sampleDataValues;
    	      this.schemaName = defaults.schemaName;
    	      this.sensitiveColumnkey = defaults.sensitiveColumnkey;
    	      this.sensitiveTypeId = defaults.sensitiveTypeId;
        }

        public Builder appDefinedChildColumnKeys(List<String> appDefinedChildColumnKeys) {
            this.appDefinedChildColumnKeys = Objects.requireNonNull(appDefinedChildColumnKeys);
            return this;
        }
        public Builder appDefinedChildColumnKeys(String... appDefinedChildColumnKeys) {
            return appDefinedChildColumnKeys(List.of(appDefinedChildColumnKeys));
        }
        public Builder appName(String appName) {
            this.appName = Objects.requireNonNull(appName);
            return this;
        }
        public Builder columnName(String columnName) {
            this.columnName = Objects.requireNonNull(columnName);
            return this;
        }
        public Builder dataType(String dataType) {
            this.dataType = Objects.requireNonNull(dataType);
            return this;
        }
        public Builder dbDefinedChildColumnKeys(List<String> dbDefinedChildColumnKeys) {
            this.dbDefinedChildColumnKeys = Objects.requireNonNull(dbDefinedChildColumnKeys);
            return this;
        }
        public Builder dbDefinedChildColumnKeys(String... dbDefinedChildColumnKeys) {
            return dbDefinedChildColumnKeys(List.of(dbDefinedChildColumnKeys));
        }
        public Builder discoveryJobId(String discoveryJobId) {
            this.discoveryJobId = Objects.requireNonNull(discoveryJobId);
            return this;
        }
        public Builder discoveryType(String discoveryType) {
            this.discoveryType = Objects.requireNonNull(discoveryType);
            return this;
        }
        public Builder estimatedDataValueCount(String estimatedDataValueCount) {
            this.estimatedDataValueCount = Objects.requireNonNull(estimatedDataValueCount);
            return this;
        }
        public Builder isResultApplied(Boolean isResultApplied) {
            this.isResultApplied = Objects.requireNonNull(isResultApplied);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder modifiedAttributes(List<GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttribute> modifiedAttributes) {
            this.modifiedAttributes = Objects.requireNonNull(modifiedAttributes);
            return this;
        }
        public Builder modifiedAttributes(GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttribute... modifiedAttributes) {
            return modifiedAttributes(List.of(modifiedAttributes));
        }
        public Builder object(String object) {
            this.object = Objects.requireNonNull(object);
            return this;
        }
        public Builder objectType(String objectType) {
            this.objectType = Objects.requireNonNull(objectType);
            return this;
        }
        public Builder parentColumnKeys(List<String> parentColumnKeys) {
            this.parentColumnKeys = Objects.requireNonNull(parentColumnKeys);
            return this;
        }
        public Builder parentColumnKeys(String... parentColumnKeys) {
            return parentColumnKeys(List.of(parentColumnKeys));
        }
        public Builder plannedAction(String plannedAction) {
            this.plannedAction = Objects.requireNonNull(plannedAction);
            return this;
        }
        public Builder relationType(String relationType) {
            this.relationType = Objects.requireNonNull(relationType);
            return this;
        }
        public Builder sampleDataValues(List<String> sampleDataValues) {
            this.sampleDataValues = Objects.requireNonNull(sampleDataValues);
            return this;
        }
        public Builder sampleDataValues(String... sampleDataValues) {
            return sampleDataValues(List.of(sampleDataValues));
        }
        public Builder schemaName(String schemaName) {
            this.schemaName = Objects.requireNonNull(schemaName);
            return this;
        }
        public Builder sensitiveColumnkey(String sensitiveColumnkey) {
            this.sensitiveColumnkey = Objects.requireNonNull(sensitiveColumnkey);
            return this;
        }
        public Builder sensitiveTypeId(String sensitiveTypeId) {
            this.sensitiveTypeId = Objects.requireNonNull(sensitiveTypeId);
            return this;
        }        public GetDiscoveryJobsResultsDiscoveryJobResultCollectionItem build() {
            return new GetDiscoveryJobsResultsDiscoveryJobResultCollectionItem(appDefinedChildColumnKeys, appName, columnName, dataType, dbDefinedChildColumnKeys, discoveryJobId, discoveryType, estimatedDataValueCount, isResultApplied, key, modifiedAttributes, object, objectType, parentColumnKeys, plannedAction, relationType, sampleDataValues, schemaName, sensitiveColumnkey, sensitiveTypeId);
        }
    }
}
