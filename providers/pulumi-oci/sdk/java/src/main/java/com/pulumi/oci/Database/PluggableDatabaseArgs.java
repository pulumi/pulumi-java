// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluggableDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluggableDatabaseArgs Empty = new PluggableDatabaseArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     * 
     */
    @Import(name="containerDatabaseId", required=true)
    private Output<String> containerDatabaseId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     * 
     */
    public Output<String> containerDatabaseId() {
        return this.containerDatabaseId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    @Import(name="pdbAdminPassword")
    private @Nullable Output<String> pdbAdminPassword;

    /**
     * @return A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public Optional<Output<String>> pdbAdminPassword() {
        return Optional.ofNullable(this.pdbAdminPassword);
    }

    /**
     * The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    @Import(name="pdbName", required=true)
    private Output<String> pdbName;

    /**
     * @return The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    public Output<String> pdbName() {
        return this.pdbName;
    }

    /**
     * The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     * 
     */
    @Import(name="shouldPdbAdminAccountBeLocked")
    private @Nullable Output<Boolean> shouldPdbAdminAccountBeLocked;

    /**
     * @return The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     * 
     */
    public Optional<Output<Boolean>> shouldPdbAdminAccountBeLocked() {
        return Optional.ofNullable(this.shouldPdbAdminAccountBeLocked);
    }

    /**
     * The existing TDE wallet password of the CDB.
     * 
     */
    @Import(name="tdeWalletPassword")
    private @Nullable Output<String> tdeWalletPassword;

    /**
     * @return The existing TDE wallet password of the CDB.
     * 
     */
    public Optional<Output<String>> tdeWalletPassword() {
        return Optional.ofNullable(this.tdeWalletPassword);
    }

    private PluggableDatabaseArgs() {}

    private PluggableDatabaseArgs(PluggableDatabaseArgs $) {
        this.containerDatabaseId = $.containerDatabaseId;
        this.definedTags = $.definedTags;
        this.freeformTags = $.freeformTags;
        this.pdbAdminPassword = $.pdbAdminPassword;
        this.pdbName = $.pdbName;
        this.shouldPdbAdminAccountBeLocked = $.shouldPdbAdminAccountBeLocked;
        this.tdeWalletPassword = $.tdeWalletPassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluggableDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluggableDatabaseArgs $;

        public Builder() {
            $ = new PluggableDatabaseArgs();
        }

        public Builder(PluggableDatabaseArgs defaults) {
            $ = new PluggableDatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(Output<String> containerDatabaseId) {
            $.containerDatabaseId = containerDatabaseId;
            return this;
        }

        /**
         * @param containerDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(String containerDatabaseId) {
            return containerDatabaseId(Output.of(containerDatabaseId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param pdbAdminPassword A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder pdbAdminPassword(@Nullable Output<String> pdbAdminPassword) {
            $.pdbAdminPassword = pdbAdminPassword;
            return this;
        }

        /**
         * @param pdbAdminPassword A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder pdbAdminPassword(String pdbAdminPassword) {
            return pdbAdminPassword(Output.of(pdbAdminPassword));
        }

        /**
         * @param pdbName The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(Output<String> pdbName) {
            $.pdbName = pdbName;
            return this;
        }

        /**
         * @param pdbName The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(String pdbName) {
            return pdbName(Output.of(pdbName));
        }

        /**
         * @param shouldPdbAdminAccountBeLocked The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
         * 
         * @return builder
         * 
         */
        public Builder shouldPdbAdminAccountBeLocked(@Nullable Output<Boolean> shouldPdbAdminAccountBeLocked) {
            $.shouldPdbAdminAccountBeLocked = shouldPdbAdminAccountBeLocked;
            return this;
        }

        /**
         * @param shouldPdbAdminAccountBeLocked The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
         * 
         * @return builder
         * 
         */
        public Builder shouldPdbAdminAccountBeLocked(Boolean shouldPdbAdminAccountBeLocked) {
            return shouldPdbAdminAccountBeLocked(Output.of(shouldPdbAdminAccountBeLocked));
        }

        /**
         * @param tdeWalletPassword The existing TDE wallet password of the CDB.
         * 
         * @return builder
         * 
         */
        public Builder tdeWalletPassword(@Nullable Output<String> tdeWalletPassword) {
            $.tdeWalletPassword = tdeWalletPassword;
            return this;
        }

        /**
         * @param tdeWalletPassword The existing TDE wallet password of the CDB.
         * 
         * @return builder
         * 
         */
        public Builder tdeWalletPassword(String tdeWalletPassword) {
            return tdeWalletPassword(Output.of(tdeWalletPassword));
        }

        public PluggableDatabaseArgs build() {
            $.containerDatabaseId = Objects.requireNonNull($.containerDatabaseId, "expected parameter 'containerDatabaseId' to be non-null");
            $.pdbName = Objects.requireNonNull($.pdbName, "expected parameter 'pdbName' to be non-null");
            return $;
        }
    }

}
