// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Streaming.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetStreamPoolsStreamPoolKafkaSetting {
    /**
     * @return Enable auto creation of topic on the server.
     * 
     */
    private final Boolean autoCreateTopicsEnable;
    /**
     * @return Bootstrap servers.
     * 
     */
    private final String bootstrapServers;
    /**
     * @return The number of hours to keep a log file before deleting it (in hours).
     * 
     */
    private final Integer logRetentionHours;
    /**
     * @return The default number of log partitions per topic.
     * 
     */
    private final Integer numPartitions;

    @CustomType.Constructor
    private GetStreamPoolsStreamPoolKafkaSetting(
        @CustomType.Parameter("autoCreateTopicsEnable") Boolean autoCreateTopicsEnable,
        @CustomType.Parameter("bootstrapServers") String bootstrapServers,
        @CustomType.Parameter("logRetentionHours") Integer logRetentionHours,
        @CustomType.Parameter("numPartitions") Integer numPartitions) {
        this.autoCreateTopicsEnable = autoCreateTopicsEnable;
        this.bootstrapServers = bootstrapServers;
        this.logRetentionHours = logRetentionHours;
        this.numPartitions = numPartitions;
    }

    /**
     * @return Enable auto creation of topic on the server.
     * 
     */
    public Boolean autoCreateTopicsEnable() {
        return this.autoCreateTopicsEnable;
    }
    /**
     * @return Bootstrap servers.
     * 
     */
    public String bootstrapServers() {
        return this.bootstrapServers;
    }
    /**
     * @return The number of hours to keep a log file before deleting it (in hours).
     * 
     */
    public Integer logRetentionHours() {
        return this.logRetentionHours;
    }
    /**
     * @return The default number of log partitions per topic.
     * 
     */
    public Integer numPartitions() {
        return this.numPartitions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamPoolsStreamPoolKafkaSetting defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean autoCreateTopicsEnable;
        private String bootstrapServers;
        private Integer logRetentionHours;
        private Integer numPartitions;

        public Builder() {
    	      // Empty
        }

        public Builder(GetStreamPoolsStreamPoolKafkaSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoCreateTopicsEnable = defaults.autoCreateTopicsEnable;
    	      this.bootstrapServers = defaults.bootstrapServers;
    	      this.logRetentionHours = defaults.logRetentionHours;
    	      this.numPartitions = defaults.numPartitions;
        }

        public Builder autoCreateTopicsEnable(Boolean autoCreateTopicsEnable) {
            this.autoCreateTopicsEnable = Objects.requireNonNull(autoCreateTopicsEnable);
            return this;
        }
        public Builder bootstrapServers(String bootstrapServers) {
            this.bootstrapServers = Objects.requireNonNull(bootstrapServers);
            return this;
        }
        public Builder logRetentionHours(Integer logRetentionHours) {
            this.logRetentionHours = Objects.requireNonNull(logRetentionHours);
            return this;
        }
        public Builder numPartitions(Integer numPartitions) {
            this.numPartitions = Objects.requireNonNull(numPartitions);
            return this;
        }        public GetStreamPoolsStreamPoolKafkaSetting build() {
            return new GetStreamPoolsStreamPoolKafkaSetting(autoCreateTopicsEnable, bootstrapServers, logRetentionHours, numPartitions);
        }
    }
}
