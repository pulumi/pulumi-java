// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VulnerabilityScanning;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.VulnerabilityScanning.inputs.ContainerScanRecipeScanSettingsArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerScanRecipeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerScanRecipeArgs Empty = new ContainerScanRecipeArgs();

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe&#39;s compartment
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe&#39;s compartment
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) User friendly name of container scan recipe. If not present, will be auto-generated.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) User friendly name of container scan recipe. If not present, will be auto-generated.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) This field is set equal to the number of images we want to scan in the first go when the recipe is created
     * 
     */
    @Import(name="imageCount")
    private @Nullable Output<Integer> imageCount;

    /**
     * @return (Updatable) This field is set equal to the number of images we want to scan in the first go when the recipe is created
     * 
     */
    public Optional<Output<Integer>> imageCount() {
        return Optional.ofNullable(this.imageCount);
    }

    /**
     * (Updatable) A collection of container scan settings
     * 
     */
    @Import(name="scanSettings", required=true)
    private Output<ContainerScanRecipeScanSettingsArgs> scanSettings;

    /**
     * @return (Updatable) A collection of container scan settings
     * 
     */
    public Output<ContainerScanRecipeScanSettingsArgs> scanSettings() {
        return this.scanSettings;
    }

    private ContainerScanRecipeArgs() {}

    private ContainerScanRecipeArgs(ContainerScanRecipeArgs $) {
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.imageCount = $.imageCount;
        this.scanSettings = $.scanSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerScanRecipeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerScanRecipeArgs $;

        public Builder() {
            $ = new ContainerScanRecipeArgs();
        }

        public Builder(ContainerScanRecipeArgs defaults) {
            $ = new ContainerScanRecipeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe&#39;s compartment
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe&#39;s compartment
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) User friendly name of container scan recipe. If not present, will be auto-generated.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) User friendly name of container scan recipe. If not present, will be auto-generated.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param imageCount (Updatable) This field is set equal to the number of images we want to scan in the first go when the recipe is created
         * 
         * @return builder
         * 
         */
        public Builder imageCount(@Nullable Output<Integer> imageCount) {
            $.imageCount = imageCount;
            return this;
        }

        /**
         * @param imageCount (Updatable) This field is set equal to the number of images we want to scan in the first go when the recipe is created
         * 
         * @return builder
         * 
         */
        public Builder imageCount(Integer imageCount) {
            return imageCount(Output.of(imageCount));
        }

        /**
         * @param scanSettings (Updatable) A collection of container scan settings
         * 
         * @return builder
         * 
         */
        public Builder scanSettings(Output<ContainerScanRecipeScanSettingsArgs> scanSettings) {
            $.scanSettings = scanSettings;
            return this;
        }

        /**
         * @param scanSettings (Updatable) A collection of container scan settings
         * 
         * @return builder
         * 
         */
        public Builder scanSettings(ContainerScanRecipeScanSettingsArgs scanSettings) {
            return scanSettings(Output.of(scanSettings));
        }

        public ContainerScanRecipeArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.scanSettings = Objects.requireNonNull($.scanSettings, "expected parameter 'scanSettings' to be non-null");
            return $;
        }
    }

}
