// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Secrets.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecretbundleArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecretbundleArgs Empty = new GetSecretbundleArgs();

    /**
     * The OCID of the secret.
     * 
     */
    @Import(name="secretId", required=true)
    private Output<String> secretId;

    /**
     * @return The OCID of the secret.
     * 
     */
    public Output<String> secretId() {
        return this.secretId;
    }

    /**
     * The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
     * 
     */
    @Import(name="secretVersionName")
    private @Nullable Output<String> secretVersionName;

    /**
     * @return The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
     * 
     */
    public Optional<Output<String>> secretVersionName() {
        return Optional.ofNullable(this.secretVersionName);
    }

    /**
     * The rotation state of the secret version.
     * 
     */
    @Import(name="stage")
    private @Nullable Output<String> stage;

    /**
     * @return The rotation state of the secret version.
     * 
     */
    public Optional<Output<String>> stage() {
        return Optional.ofNullable(this.stage);
    }

    /**
     * The version number of the secret.
     * 
     */
    @Import(name="versionNumber")
    private @Nullable Output<String> versionNumber;

    /**
     * @return The version number of the secret.
     * 
     */
    public Optional<Output<String>> versionNumber() {
        return Optional.ofNullable(this.versionNumber);
    }

    private GetSecretbundleArgs() {}

    private GetSecretbundleArgs(GetSecretbundleArgs $) {
        this.secretId = $.secretId;
        this.secretVersionName = $.secretVersionName;
        this.stage = $.stage;
        this.versionNumber = $.versionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecretbundleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecretbundleArgs $;

        public Builder() {
            $ = new GetSecretbundleArgs();
        }

        public Builder(GetSecretbundleArgs defaults) {
            $ = new GetSecretbundleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param secretId The OCID of the secret.
         * 
         * @return builder
         * 
         */
        public Builder secretId(Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId The OCID of the secret.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param secretVersionName The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
         * 
         * @return builder
         * 
         */
        public Builder secretVersionName(@Nullable Output<String> secretVersionName) {
            $.secretVersionName = secretVersionName;
            return this;
        }

        /**
         * @param secretVersionName The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
         * 
         * @return builder
         * 
         */
        public Builder secretVersionName(String secretVersionName) {
            return secretVersionName(Output.of(secretVersionName));
        }

        /**
         * @param stage The rotation state of the secret version.
         * 
         * @return builder
         * 
         */
        public Builder stage(@Nullable Output<String> stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param stage The rotation state of the secret version.
         * 
         * @return builder
         * 
         */
        public Builder stage(String stage) {
            return stage(Output.of(stage));
        }

        /**
         * @param versionNumber The version number of the secret.
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(@Nullable Output<String> versionNumber) {
            $.versionNumber = versionNumber;
            return this;
        }

        /**
         * @param versionNumber The version number of the secret.
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(String versionNumber) {
            return versionNumber(Output.of(versionNumber));
        }

        public GetSecretbundleArgs build() {
            $.secretId = Objects.requireNonNull($.secretId, "expected parameter 'secretId' to be non-null");
            return $;
        }
    }

}
