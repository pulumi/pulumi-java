// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.RegistryFolderDataAssetDefaultConnection;
import com.pulumi.oci.DataConnectivity.outputs.RegistryFolderDataAssetMetadata;
import com.pulumi.oci.DataConnectivity.outputs.RegistryFolderDataAssetNativeTypeSystem;
import com.pulumi.oci.DataConnectivity.outputs.RegistryFolderDataAssetRegistryMetadata;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryFolderDataAsset {
    /**
     * @return (Updatable) Additional properties for the data asset.
     * 
     */
    private final @Nullable Map<String,Object> assetProperties;
    /**
     * @return (Updatable) The default connection key.
     * 
     */
    private final @Nullable RegistryFolderDataAssetDefaultConnection defaultConnection;
    /**
     * @return (Updatable) User-defined description for the folder.
     * 
     */
    private final @Nullable String description;
    /**
     * @return (Updatable) The external key for the object.
     * 
     */
    private final @Nullable String externalKey;
    /**
     * @return (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    private final String identifier;
    /**
     * @return (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     * 
     */
    private final String key;
    /**
     * @return (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    private final @Nullable RegistryFolderDataAssetMetadata metadata;
    /**
     * @return (Updatable) The type of the folder.
     * 
     */
    private final @Nullable String modelType;
    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    private final @Nullable String modelVersion;
    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private final String name;
    /**
     * @return (Updatable) The type system maps from and to a type.
     * 
     */
    private final @Nullable RegistryFolderDataAssetNativeTypeSystem nativeTypeSystem;
    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private final @Nullable Integer objectStatus;
    /**
     * @return (Updatable) The version of the object that is used to track changes in the object instance.
     * 
     */
    private final @Nullable Integer objectVersion;
    /**
     * @return (Updatable) All the properties for the data asset in a key-value map format.
     * 
     */
    private final @Nullable Map<String,Object> properties;
    /**
     * @return (Updatable) Information about the object and its parent.
     * 
     */
    private final @Nullable RegistryFolderDataAssetRegistryMetadata registryMetadata;
    /**
     * @return (Updatable) Specific DataAsset Type
     * 
     */
    private final @Nullable String type;

    @CustomType.Constructor
    private RegistryFolderDataAsset(
        @CustomType.Parameter("assetProperties") @Nullable Map<String,Object> assetProperties,
        @CustomType.Parameter("defaultConnection") @Nullable RegistryFolderDataAssetDefaultConnection defaultConnection,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("externalKey") @Nullable String externalKey,
        @CustomType.Parameter("identifier") String identifier,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("metadata") @Nullable RegistryFolderDataAssetMetadata metadata,
        @CustomType.Parameter("modelType") @Nullable String modelType,
        @CustomType.Parameter("modelVersion") @Nullable String modelVersion,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nativeTypeSystem") @Nullable RegistryFolderDataAssetNativeTypeSystem nativeTypeSystem,
        @CustomType.Parameter("objectStatus") @Nullable Integer objectStatus,
        @CustomType.Parameter("objectVersion") @Nullable Integer objectVersion,
        @CustomType.Parameter("properties") @Nullable Map<String,Object> properties,
        @CustomType.Parameter("registryMetadata") @Nullable RegistryFolderDataAssetRegistryMetadata registryMetadata,
        @CustomType.Parameter("type") @Nullable String type) {
        this.assetProperties = assetProperties;
        this.defaultConnection = defaultConnection;
        this.description = description;
        this.externalKey = externalKey;
        this.identifier = identifier;
        this.key = key;
        this.metadata = metadata;
        this.modelType = modelType;
        this.modelVersion = modelVersion;
        this.name = name;
        this.nativeTypeSystem = nativeTypeSystem;
        this.objectStatus = objectStatus;
        this.objectVersion = objectVersion;
        this.properties = properties;
        this.registryMetadata = registryMetadata;
        this.type = type;
    }

    /**
     * @return (Updatable) Additional properties for the data asset.
     * 
     */
    public Map<String,Object> assetProperties() {
        return this.assetProperties == null ? Map.of() : this.assetProperties;
    }
    /**
     * @return (Updatable) The default connection key.
     * 
     */
    public Optional<RegistryFolderDataAssetDefaultConnection> defaultConnection() {
        return Optional.ofNullable(this.defaultConnection);
    }
    /**
     * @return (Updatable) User-defined description for the folder.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) The external key for the object.
     * 
     */
    public Optional<String> externalKey() {
        return Optional.ofNullable(this.externalKey);
    }
    /**
     * @return (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    public Optional<RegistryFolderDataAssetMetadata> metadata() {
        return Optional.ofNullable(this.metadata);
    }
    /**
     * @return (Updatable) The type of the folder.
     * 
     */
    public Optional<String> modelType() {
        return Optional.ofNullable(this.modelType);
    }
    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    public Optional<String> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }
    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Updatable) The type system maps from and to a type.
     * 
     */
    public Optional<RegistryFolderDataAssetNativeTypeSystem> nativeTypeSystem() {
        return Optional.ofNullable(this.nativeTypeSystem);
    }
    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Optional<Integer> objectStatus() {
        return Optional.ofNullable(this.objectStatus);
    }
    /**
     * @return (Updatable) The version of the object that is used to track changes in the object instance.
     * 
     */
    public Optional<Integer> objectVersion() {
        return Optional.ofNullable(this.objectVersion);
    }
    /**
     * @return (Updatable) All the properties for the data asset in a key-value map format.
     * 
     */
    public Map<String,Object> properties() {
        return this.properties == null ? Map.of() : this.properties;
    }
    /**
     * @return (Updatable) Information about the object and its parent.
     * 
     */
    public Optional<RegistryFolderDataAssetRegistryMetadata> registryMetadata() {
        return Optional.ofNullable(this.registryMetadata);
    }
    /**
     * @return (Updatable) Specific DataAsset Type
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryFolderDataAsset defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Map<String,Object> assetProperties;
        private @Nullable RegistryFolderDataAssetDefaultConnection defaultConnection;
        private @Nullable String description;
        private @Nullable String externalKey;
        private String identifier;
        private String key;
        private @Nullable RegistryFolderDataAssetMetadata metadata;
        private @Nullable String modelType;
        private @Nullable String modelVersion;
        private String name;
        private @Nullable RegistryFolderDataAssetNativeTypeSystem nativeTypeSystem;
        private @Nullable Integer objectStatus;
        private @Nullable Integer objectVersion;
        private @Nullable Map<String,Object> properties;
        private @Nullable RegistryFolderDataAssetRegistryMetadata registryMetadata;
        private @Nullable String type;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistryFolderDataAsset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assetProperties = defaults.assetProperties;
    	      this.defaultConnection = defaults.defaultConnection;
    	      this.description = defaults.description;
    	      this.externalKey = defaults.externalKey;
    	      this.identifier = defaults.identifier;
    	      this.key = defaults.key;
    	      this.metadata = defaults.metadata;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.nativeTypeSystem = defaults.nativeTypeSystem;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.properties = defaults.properties;
    	      this.registryMetadata = defaults.registryMetadata;
    	      this.type = defaults.type;
        }

        public Builder assetProperties(@Nullable Map<String,Object> assetProperties) {
            this.assetProperties = assetProperties;
            return this;
        }
        public Builder defaultConnection(@Nullable RegistryFolderDataAssetDefaultConnection defaultConnection) {
            this.defaultConnection = defaultConnection;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder externalKey(@Nullable String externalKey) {
            this.externalKey = externalKey;
            return this;
        }
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder metadata(@Nullable RegistryFolderDataAssetMetadata metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder modelType(@Nullable String modelType) {
            this.modelType = modelType;
            return this;
        }
        public Builder modelVersion(@Nullable String modelVersion) {
            this.modelVersion = modelVersion;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nativeTypeSystem(@Nullable RegistryFolderDataAssetNativeTypeSystem nativeTypeSystem) {
            this.nativeTypeSystem = nativeTypeSystem;
            return this;
        }
        public Builder objectStatus(@Nullable Integer objectStatus) {
            this.objectStatus = objectStatus;
            return this;
        }
        public Builder objectVersion(@Nullable Integer objectVersion) {
            this.objectVersion = objectVersion;
            return this;
        }
        public Builder properties(@Nullable Map<String,Object> properties) {
            this.properties = properties;
            return this;
        }
        public Builder registryMetadata(@Nullable RegistryFolderDataAssetRegistryMetadata registryMetadata) {
            this.registryMetadata = registryMetadata;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }        public RegistryFolderDataAsset build() {
            return new RegistryFolderDataAsset(assetProperties, defaultConnection, description, externalKey, identifier, key, metadata, modelType, modelVersion, name, nativeTypeSystem, objectStatus, objectVersion, properties, registryMetadata, type);
        }
    }
}
