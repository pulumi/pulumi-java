// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmTraces.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApmTraces.outputs.GetTraceServiceSummary;
import com.pulumi.oci.ApmTraces.outputs.GetTraceSpan;
import com.pulumi.oci.ApmTraces.outputs.GetTraceSpanSummary;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTraceResult {
    private final String apmDomainId;
    /**
     * @return The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
     * 
     */
    private final Integer errorSpanCount;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Boolean flag that indicates whether the trace has an error.
     * 
     */
    private final Boolean isFault;
    /**
     * @return Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
     * 
     */
    private final String key;
    /**
     * @return Time taken for the root span operation to complete in milliseconds.
     * 
     */
    private final Integer rootSpanDurationInMs;
    /**
     * @return Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
     * 
     */
    private final String rootSpanOperationName;
    /**
     * @return Service associated with the trace.
     * 
     */
    private final String rootSpanServiceName;
    /**
     * @return A summary of the spans by service.
     * 
     */
    private final List<GetTraceServiceSummary> serviceSummaries;
    /**
     * @return The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
     * 
     */
    private final Integer spanCount;
    /**
     * @return Summary of the information pertaining to the spans in the trace window that is being queried.
     * 
     */
    private final List<GetTraceSpanSummary> spanSummaries;
    /**
     * @return An array of spans in the trace.
     * 
     */
    private final List<GetTraceSpan> spans;
    /**
     * @return Start time of the earliest span in the span collection.
     * 
     */
    private final String timeEarliestSpanStarted;
    /**
     * @return End time of the span that most recently ended in the span collection.
     * 
     */
    private final String timeLatestSpanEnded;
    /**
     * @return End time of the root span for the span collection.
     * 
     */
    private final String timeRootSpanEnded;
    /**
     * @return Start time of the root span for the span collection.
     * 
     */
    private final String timeRootSpanStarted;
    /**
     * @return Time between the start of the earliest span and the end of the most recent span in milliseconds.
     * 
     */
    private final Integer traceDurationInMs;
    /**
     * @return Error code of the trace.
     * 
     */
    private final String traceErrorCode;
    /**
     * @return Error type of the trace.
     * 
     */
    private final String traceErrorType;
    /**
     * @return Unique identifier for the trace.
     * 
     */
    private final String traceKey;
    /**
     * @return The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
     * 
     */
    private final String traceStatus;

    @CustomType.Constructor
    private GetTraceResult(
        @CustomType.Parameter("apmDomainId") String apmDomainId,
        @CustomType.Parameter("errorSpanCount") Integer errorSpanCount,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isFault") Boolean isFault,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("rootSpanDurationInMs") Integer rootSpanDurationInMs,
        @CustomType.Parameter("rootSpanOperationName") String rootSpanOperationName,
        @CustomType.Parameter("rootSpanServiceName") String rootSpanServiceName,
        @CustomType.Parameter("serviceSummaries") List<GetTraceServiceSummary> serviceSummaries,
        @CustomType.Parameter("spanCount") Integer spanCount,
        @CustomType.Parameter("spanSummaries") List<GetTraceSpanSummary> spanSummaries,
        @CustomType.Parameter("spans") List<GetTraceSpan> spans,
        @CustomType.Parameter("timeEarliestSpanStarted") String timeEarliestSpanStarted,
        @CustomType.Parameter("timeLatestSpanEnded") String timeLatestSpanEnded,
        @CustomType.Parameter("timeRootSpanEnded") String timeRootSpanEnded,
        @CustomType.Parameter("timeRootSpanStarted") String timeRootSpanStarted,
        @CustomType.Parameter("traceDurationInMs") Integer traceDurationInMs,
        @CustomType.Parameter("traceErrorCode") String traceErrorCode,
        @CustomType.Parameter("traceErrorType") String traceErrorType,
        @CustomType.Parameter("traceKey") String traceKey,
        @CustomType.Parameter("traceStatus") String traceStatus) {
        this.apmDomainId = apmDomainId;
        this.errorSpanCount = errorSpanCount;
        this.id = id;
        this.isFault = isFault;
        this.key = key;
        this.rootSpanDurationInMs = rootSpanDurationInMs;
        this.rootSpanOperationName = rootSpanOperationName;
        this.rootSpanServiceName = rootSpanServiceName;
        this.serviceSummaries = serviceSummaries;
        this.spanCount = spanCount;
        this.spanSummaries = spanSummaries;
        this.spans = spans;
        this.timeEarliestSpanStarted = timeEarliestSpanStarted;
        this.timeLatestSpanEnded = timeLatestSpanEnded;
        this.timeRootSpanEnded = timeRootSpanEnded;
        this.timeRootSpanStarted = timeRootSpanStarted;
        this.traceDurationInMs = traceDurationInMs;
        this.traceErrorCode = traceErrorCode;
        this.traceErrorType = traceErrorType;
        this.traceKey = traceKey;
        this.traceStatus = traceStatus;
    }

    public String apmDomainId() {
        return this.apmDomainId;
    }
    /**
     * @return The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
     * 
     */
    public Integer errorSpanCount() {
        return this.errorSpanCount;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Boolean flag that indicates whether the trace has an error.
     * 
     */
    public Boolean isFault() {
        return this.isFault;
    }
    /**
     * @return Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Time taken for the root span operation to complete in milliseconds.
     * 
     */
    public Integer rootSpanDurationInMs() {
        return this.rootSpanDurationInMs;
    }
    /**
     * @return Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
     * 
     */
    public String rootSpanOperationName() {
        return this.rootSpanOperationName;
    }
    /**
     * @return Service associated with the trace.
     * 
     */
    public String rootSpanServiceName() {
        return this.rootSpanServiceName;
    }
    /**
     * @return A summary of the spans by service.
     * 
     */
    public List<GetTraceServiceSummary> serviceSummaries() {
        return this.serviceSummaries;
    }
    /**
     * @return The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
     * 
     */
    public Integer spanCount() {
        return this.spanCount;
    }
    /**
     * @return Summary of the information pertaining to the spans in the trace window that is being queried.
     * 
     */
    public List<GetTraceSpanSummary> spanSummaries() {
        return this.spanSummaries;
    }
    /**
     * @return An array of spans in the trace.
     * 
     */
    public List<GetTraceSpan> spans() {
        return this.spans;
    }
    /**
     * @return Start time of the earliest span in the span collection.
     * 
     */
    public String timeEarliestSpanStarted() {
        return this.timeEarliestSpanStarted;
    }
    /**
     * @return End time of the span that most recently ended in the span collection.
     * 
     */
    public String timeLatestSpanEnded() {
        return this.timeLatestSpanEnded;
    }
    /**
     * @return End time of the root span for the span collection.
     * 
     */
    public String timeRootSpanEnded() {
        return this.timeRootSpanEnded;
    }
    /**
     * @return Start time of the root span for the span collection.
     * 
     */
    public String timeRootSpanStarted() {
        return this.timeRootSpanStarted;
    }
    /**
     * @return Time between the start of the earliest span and the end of the most recent span in milliseconds.
     * 
     */
    public Integer traceDurationInMs() {
        return this.traceDurationInMs;
    }
    /**
     * @return Error code of the trace.
     * 
     */
    public String traceErrorCode() {
        return this.traceErrorCode;
    }
    /**
     * @return Error type of the trace.
     * 
     */
    public String traceErrorType() {
        return this.traceErrorType;
    }
    /**
     * @return Unique identifier for the trace.
     * 
     */
    public String traceKey() {
        return this.traceKey;
    }
    /**
     * @return The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
     * 
     */
    public String traceStatus() {
        return this.traceStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTraceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String apmDomainId;
        private Integer errorSpanCount;
        private String id;
        private Boolean isFault;
        private String key;
        private Integer rootSpanDurationInMs;
        private String rootSpanOperationName;
        private String rootSpanServiceName;
        private List<GetTraceServiceSummary> serviceSummaries;
        private Integer spanCount;
        private List<GetTraceSpanSummary> spanSummaries;
        private List<GetTraceSpan> spans;
        private String timeEarliestSpanStarted;
        private String timeLatestSpanEnded;
        private String timeRootSpanEnded;
        private String timeRootSpanStarted;
        private Integer traceDurationInMs;
        private String traceErrorCode;
        private String traceErrorType;
        private String traceKey;
        private String traceStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTraceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apmDomainId = defaults.apmDomainId;
    	      this.errorSpanCount = defaults.errorSpanCount;
    	      this.id = defaults.id;
    	      this.isFault = defaults.isFault;
    	      this.key = defaults.key;
    	      this.rootSpanDurationInMs = defaults.rootSpanDurationInMs;
    	      this.rootSpanOperationName = defaults.rootSpanOperationName;
    	      this.rootSpanServiceName = defaults.rootSpanServiceName;
    	      this.serviceSummaries = defaults.serviceSummaries;
    	      this.spanCount = defaults.spanCount;
    	      this.spanSummaries = defaults.spanSummaries;
    	      this.spans = defaults.spans;
    	      this.timeEarliestSpanStarted = defaults.timeEarliestSpanStarted;
    	      this.timeLatestSpanEnded = defaults.timeLatestSpanEnded;
    	      this.timeRootSpanEnded = defaults.timeRootSpanEnded;
    	      this.timeRootSpanStarted = defaults.timeRootSpanStarted;
    	      this.traceDurationInMs = defaults.traceDurationInMs;
    	      this.traceErrorCode = defaults.traceErrorCode;
    	      this.traceErrorType = defaults.traceErrorType;
    	      this.traceKey = defaults.traceKey;
    	      this.traceStatus = defaults.traceStatus;
        }

        public Builder apmDomainId(String apmDomainId) {
            this.apmDomainId = Objects.requireNonNull(apmDomainId);
            return this;
        }
        public Builder errorSpanCount(Integer errorSpanCount) {
            this.errorSpanCount = Objects.requireNonNull(errorSpanCount);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isFault(Boolean isFault) {
            this.isFault = Objects.requireNonNull(isFault);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder rootSpanDurationInMs(Integer rootSpanDurationInMs) {
            this.rootSpanDurationInMs = Objects.requireNonNull(rootSpanDurationInMs);
            return this;
        }
        public Builder rootSpanOperationName(String rootSpanOperationName) {
            this.rootSpanOperationName = Objects.requireNonNull(rootSpanOperationName);
            return this;
        }
        public Builder rootSpanServiceName(String rootSpanServiceName) {
            this.rootSpanServiceName = Objects.requireNonNull(rootSpanServiceName);
            return this;
        }
        public Builder serviceSummaries(List<GetTraceServiceSummary> serviceSummaries) {
            this.serviceSummaries = Objects.requireNonNull(serviceSummaries);
            return this;
        }
        public Builder serviceSummaries(GetTraceServiceSummary... serviceSummaries) {
            return serviceSummaries(List.of(serviceSummaries));
        }
        public Builder spanCount(Integer spanCount) {
            this.spanCount = Objects.requireNonNull(spanCount);
            return this;
        }
        public Builder spanSummaries(List<GetTraceSpanSummary> spanSummaries) {
            this.spanSummaries = Objects.requireNonNull(spanSummaries);
            return this;
        }
        public Builder spanSummaries(GetTraceSpanSummary... spanSummaries) {
            return spanSummaries(List.of(spanSummaries));
        }
        public Builder spans(List<GetTraceSpan> spans) {
            this.spans = Objects.requireNonNull(spans);
            return this;
        }
        public Builder spans(GetTraceSpan... spans) {
            return spans(List.of(spans));
        }
        public Builder timeEarliestSpanStarted(String timeEarliestSpanStarted) {
            this.timeEarliestSpanStarted = Objects.requireNonNull(timeEarliestSpanStarted);
            return this;
        }
        public Builder timeLatestSpanEnded(String timeLatestSpanEnded) {
            this.timeLatestSpanEnded = Objects.requireNonNull(timeLatestSpanEnded);
            return this;
        }
        public Builder timeRootSpanEnded(String timeRootSpanEnded) {
            this.timeRootSpanEnded = Objects.requireNonNull(timeRootSpanEnded);
            return this;
        }
        public Builder timeRootSpanStarted(String timeRootSpanStarted) {
            this.timeRootSpanStarted = Objects.requireNonNull(timeRootSpanStarted);
            return this;
        }
        public Builder traceDurationInMs(Integer traceDurationInMs) {
            this.traceDurationInMs = Objects.requireNonNull(traceDurationInMs);
            return this;
        }
        public Builder traceErrorCode(String traceErrorCode) {
            this.traceErrorCode = Objects.requireNonNull(traceErrorCode);
            return this;
        }
        public Builder traceErrorType(String traceErrorType) {
            this.traceErrorType = Objects.requireNonNull(traceErrorType);
            return this;
        }
        public Builder traceKey(String traceKey) {
            this.traceKey = Objects.requireNonNull(traceKey);
            return this;
        }
        public Builder traceStatus(String traceStatus) {
            this.traceStatus = Objects.requireNonNull(traceStatus);
            return this;
        }        public GetTraceResult build() {
            return new GetTraceResult(apmDomainId, errorSpanCount, id, isFault, key, rootSpanDurationInMs, rootSpanOperationName, rootSpanServiceName, serviceSummaries, spanCount, spanSummaries, spans, timeEarliestSpanStarted, timeLatestSpanEnded, timeRootSpanEnded, timeRootSpanStarted, traceDurationInMs, traceErrorCode, traceErrorType, traceKey, traceStatus);
        }
    }
}
