// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Identity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetAuthenticationPolicyPasswordPolicy {
    /**
     * @return At least one lower case character required.
     * 
     */
    private final Boolean isLowercaseCharactersRequired;
    /**
     * @return At least one numeric character required.
     * 
     */
    private final Boolean isNumericCharactersRequired;
    /**
     * @return At least one special character required.
     * 
     */
    private final Boolean isSpecialCharactersRequired;
    /**
     * @return At least one uppercase character required.
     * 
     */
    private final Boolean isUppercaseCharactersRequired;
    /**
     * @return User name is allowed to be part of the password.
     * 
     */
    private final Boolean isUsernameContainmentAllowed;
    /**
     * @return Minimum password length required.
     * 
     */
    private final Integer minimumPasswordLength;

    @CustomType.Constructor
    private GetAuthenticationPolicyPasswordPolicy(
        @CustomType.Parameter("isLowercaseCharactersRequired") Boolean isLowercaseCharactersRequired,
        @CustomType.Parameter("isNumericCharactersRequired") Boolean isNumericCharactersRequired,
        @CustomType.Parameter("isSpecialCharactersRequired") Boolean isSpecialCharactersRequired,
        @CustomType.Parameter("isUppercaseCharactersRequired") Boolean isUppercaseCharactersRequired,
        @CustomType.Parameter("isUsernameContainmentAllowed") Boolean isUsernameContainmentAllowed,
        @CustomType.Parameter("minimumPasswordLength") Integer minimumPasswordLength) {
        this.isLowercaseCharactersRequired = isLowercaseCharactersRequired;
        this.isNumericCharactersRequired = isNumericCharactersRequired;
        this.isSpecialCharactersRequired = isSpecialCharactersRequired;
        this.isUppercaseCharactersRequired = isUppercaseCharactersRequired;
        this.isUsernameContainmentAllowed = isUsernameContainmentAllowed;
        this.minimumPasswordLength = minimumPasswordLength;
    }

    /**
     * @return At least one lower case character required.
     * 
     */
    public Boolean isLowercaseCharactersRequired() {
        return this.isLowercaseCharactersRequired;
    }
    /**
     * @return At least one numeric character required.
     * 
     */
    public Boolean isNumericCharactersRequired() {
        return this.isNumericCharactersRequired;
    }
    /**
     * @return At least one special character required.
     * 
     */
    public Boolean isSpecialCharactersRequired() {
        return this.isSpecialCharactersRequired;
    }
    /**
     * @return At least one uppercase character required.
     * 
     */
    public Boolean isUppercaseCharactersRequired() {
        return this.isUppercaseCharactersRequired;
    }
    /**
     * @return User name is allowed to be part of the password.
     * 
     */
    public Boolean isUsernameContainmentAllowed() {
        return this.isUsernameContainmentAllowed;
    }
    /**
     * @return Minimum password length required.
     * 
     */
    public Integer minimumPasswordLength() {
        return this.minimumPasswordLength;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthenticationPolicyPasswordPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean isLowercaseCharactersRequired;
        private Boolean isNumericCharactersRequired;
        private Boolean isSpecialCharactersRequired;
        private Boolean isUppercaseCharactersRequired;
        private Boolean isUsernameContainmentAllowed;
        private Integer minimumPasswordLength;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAuthenticationPolicyPasswordPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isLowercaseCharactersRequired = defaults.isLowercaseCharactersRequired;
    	      this.isNumericCharactersRequired = defaults.isNumericCharactersRequired;
    	      this.isSpecialCharactersRequired = defaults.isSpecialCharactersRequired;
    	      this.isUppercaseCharactersRequired = defaults.isUppercaseCharactersRequired;
    	      this.isUsernameContainmentAllowed = defaults.isUsernameContainmentAllowed;
    	      this.minimumPasswordLength = defaults.minimumPasswordLength;
        }

        public Builder isLowercaseCharactersRequired(Boolean isLowercaseCharactersRequired) {
            this.isLowercaseCharactersRequired = Objects.requireNonNull(isLowercaseCharactersRequired);
            return this;
        }
        public Builder isNumericCharactersRequired(Boolean isNumericCharactersRequired) {
            this.isNumericCharactersRequired = Objects.requireNonNull(isNumericCharactersRequired);
            return this;
        }
        public Builder isSpecialCharactersRequired(Boolean isSpecialCharactersRequired) {
            this.isSpecialCharactersRequired = Objects.requireNonNull(isSpecialCharactersRequired);
            return this;
        }
        public Builder isUppercaseCharactersRequired(Boolean isUppercaseCharactersRequired) {
            this.isUppercaseCharactersRequired = Objects.requireNonNull(isUppercaseCharactersRequired);
            return this;
        }
        public Builder isUsernameContainmentAllowed(Boolean isUsernameContainmentAllowed) {
            this.isUsernameContainmentAllowed = Objects.requireNonNull(isUsernameContainmentAllowed);
            return this;
        }
        public Builder minimumPasswordLength(Integer minimumPasswordLength) {
            this.minimumPasswordLength = Objects.requireNonNull(minimumPasswordLength);
            return this;
        }        public GetAuthenticationPolicyPasswordPolicy build() {
            return new GetAuthenticationPolicyPasswordPolicy(isLowercaseCharactersRequired, isNumericCharactersRequired, isSpecialCharactersRequired, isUppercaseCharactersRequired, isUsernameContainmentAllowed, minimumPasswordLength);
        }
    }
}
