// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LogAnalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetLogAnalyticsResourceCategoriesListArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLogAnalyticsResourceCategoriesListArgs Empty = new GetLogAnalyticsResourceCategoriesListArgs();

    /**
     * The Logging Analytics namespace used for the request.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The Logging Analytics namespace used for the request.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * A comma-separated list of category names used for filtering
     * 
     */
    @Import(name="resourceCategories")
    private Output</* @Nullable */ String> resourceCategories;

    /**
     * @return A comma-separated list of category names used for filtering
     * 
     */
    public Output</* @Nullable */ String> resourceCategories() {
        return this.resourceCategories;
    }

    /**
     * A comma-separated list of resource unique identifiers used for filtering. Only resources with matching unique identifiers will be returned.
     * 
     */
    @Import(name="resourceIds")
    private Output</* @Nullable */ String> resourceIds;

    /**
     * @return A comma-separated list of resource unique identifiers used for filtering. Only resources with matching unique identifiers will be returned.
     * 
     */
    public Output</* @Nullable */ String> resourceIds() {
        return this.resourceIds;
    }

    /**
     * A comma-separated list of resource types used for filtering. Only resources of the types specified will be returned. Examples include SOURCE, PARSER, LOOKUP, etc.
     * 
     */
    @Import(name="resourceTypes")
    private Output</* @Nullable */ String> resourceTypes;

    /**
     * @return A comma-separated list of resource types used for filtering. Only resources of the types specified will be returned. Examples include SOURCE, PARSER, LOOKUP, etc.
     * 
     */
    public Output</* @Nullable */ String> resourceTypes() {
        return this.resourceTypes;
    }

    private GetLogAnalyticsResourceCategoriesListArgs() {}

    private GetLogAnalyticsResourceCategoriesListArgs(GetLogAnalyticsResourceCategoriesListArgs $) {
        this.namespace = $.namespace;
        this.resourceCategories = $.resourceCategories;
        this.resourceIds = $.resourceIds;
        this.resourceTypes = $.resourceTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLogAnalyticsResourceCategoriesListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLogAnalyticsResourceCategoriesListArgs $;

        public Builder() {
            $ = new GetLogAnalyticsResourceCategoriesListArgs();
        }

        public Builder(GetLogAnalyticsResourceCategoriesListArgs defaults) {
            $ = new GetLogAnalyticsResourceCategoriesListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The Logging Analytics namespace used for the request.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param resourceCategories A comma-separated list of category names used for filtering
         * 
         * @return builder
         * 
         */
        public Builder resourceCategories(Output</* @Nullable */ String> resourceCategories) {
            $.resourceCategories = resourceCategories;
            return this;
        }

        /**
         * @param resourceCategories A comma-separated list of category names used for filtering
         * 
         * @return builder
         * 
         */
        public Builder resourceCategories(@Nullable String resourceCategories) {
            return resourceCategories(Output.of(resourceCategories));
        }

        /**
         * @param resourceIds A comma-separated list of resource unique identifiers used for filtering. Only resources with matching unique identifiers will be returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceIds(Output</* @Nullable */ String> resourceIds) {
            $.resourceIds = resourceIds;
            return this;
        }

        /**
         * @param resourceIds A comma-separated list of resource unique identifiers used for filtering. Only resources with matching unique identifiers will be returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceIds(@Nullable String resourceIds) {
            return resourceIds(Output.of(resourceIds));
        }

        /**
         * @param resourceTypes A comma-separated list of resource types used for filtering. Only resources of the types specified will be returned. Examples include SOURCE, PARSER, LOOKUP, etc.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(Output</* @Nullable */ String> resourceTypes) {
            $.resourceTypes = resourceTypes;
            return this;
        }

        /**
         * @param resourceTypes A comma-separated list of resource types used for filtering. Only resources of the types specified will be returned. Examples include SOURCE, PARSER, LOOKUP, etc.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(@Nullable String resourceTypes) {
            return resourceTypes(Output.of(resourceTypes));
        }

        public GetLogAnalyticsResourceCategoriesListArgs build() {
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            return $;
        }
    }

}
