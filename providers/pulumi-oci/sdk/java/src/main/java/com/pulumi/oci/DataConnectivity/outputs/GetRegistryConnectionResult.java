// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryConnectionConnectionProperty;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryConnectionMetadata;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryConnectionPrimarySchema;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryConnectionRegistryMetadata;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRegistryConnectionResult {
    private final String connectionKey;
    /**
     * @return The properties for the connection.
     * 
     */
    private final List<GetRegistryConnectionConnectionProperty> connectionProperties;
    /**
     * @return The description of the aggregator.
     * 
     */
    private final String description;
    private final String id;
    /**
     * @return The identifier of the aggregator.
     * 
     */
    private final String identifier;
    /**
     * @return The default property for the connection.
     * 
     */
    private final Boolean isDefault;
    /**
     * @return The identifying key for the object.
     * 
     */
    private final String key;
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    private final List<GetRegistryConnectionMetadata> metadatas;
    /**
     * @return The object&#39;s type.
     * 
     */
    private final String modelType;
    /**
     * @return The object&#39;s model version.
     * 
     */
    private final String modelVersion;
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private final String name;
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private final Integer objectStatus;
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    private final Integer objectVersion;
    /**
     * @return The schema object.
     * 
     */
    private final List<GetRegistryConnectionPrimarySchema> primarySchemas;
    /**
     * @return All the properties for the connection in a key-value map format.
     * 
     */
    private final Map<String,Object> properties;
    private final String registryId;
    /**
     * @return Information about the object and its parent.
     * 
     */
    private final List<GetRegistryConnectionRegistryMetadata> registryMetadatas;
    /**
     * @return Specific Connection Type
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetRegistryConnectionResult(
        @CustomType.Parameter("connectionKey") String connectionKey,
        @CustomType.Parameter("connectionProperties") List<GetRegistryConnectionConnectionProperty> connectionProperties,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identifier") String identifier,
        @CustomType.Parameter("isDefault") Boolean isDefault,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("metadatas") List<GetRegistryConnectionMetadata> metadatas,
        @CustomType.Parameter("modelType") String modelType,
        @CustomType.Parameter("modelVersion") String modelVersion,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("objectStatus") Integer objectStatus,
        @CustomType.Parameter("objectVersion") Integer objectVersion,
        @CustomType.Parameter("primarySchemas") List<GetRegistryConnectionPrimarySchema> primarySchemas,
        @CustomType.Parameter("properties") Map<String,Object> properties,
        @CustomType.Parameter("registryId") String registryId,
        @CustomType.Parameter("registryMetadatas") List<GetRegistryConnectionRegistryMetadata> registryMetadatas,
        @CustomType.Parameter("type") String type) {
        this.connectionKey = connectionKey;
        this.connectionProperties = connectionProperties;
        this.description = description;
        this.id = id;
        this.identifier = identifier;
        this.isDefault = isDefault;
        this.key = key;
        this.metadatas = metadatas;
        this.modelType = modelType;
        this.modelVersion = modelVersion;
        this.name = name;
        this.objectStatus = objectStatus;
        this.objectVersion = objectVersion;
        this.primarySchemas = primarySchemas;
        this.properties = properties;
        this.registryId = registryId;
        this.registryMetadatas = registryMetadatas;
        this.type = type;
    }

    public String connectionKey() {
        return this.connectionKey;
    }
    /**
     * @return The properties for the connection.
     * 
     */
    public List<GetRegistryConnectionConnectionProperty> connectionProperties() {
        return this.connectionProperties;
    }
    /**
     * @return The description of the aggregator.
     * 
     */
    public String description() {
        return this.description;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The identifier of the aggregator.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return The default property for the connection.
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return The identifying key for the object.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    public List<GetRegistryConnectionMetadata> metadatas() {
        return this.metadatas;
    }
    /**
     * @return The object&#39;s type.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The object&#39;s model version.
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Integer objectStatus() {
        return this.objectStatus;
    }
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    public Integer objectVersion() {
        return this.objectVersion;
    }
    /**
     * @return The schema object.
     * 
     */
    public List<GetRegistryConnectionPrimarySchema> primarySchemas() {
        return this.primarySchemas;
    }
    /**
     * @return All the properties for the connection in a key-value map format.
     * 
     */
    public Map<String,Object> properties() {
        return this.properties;
    }
    public String registryId() {
        return this.registryId;
    }
    /**
     * @return Information about the object and its parent.
     * 
     */
    public List<GetRegistryConnectionRegistryMetadata> registryMetadatas() {
        return this.registryMetadatas;
    }
    /**
     * @return Specific Connection Type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryConnectionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String connectionKey;
        private List<GetRegistryConnectionConnectionProperty> connectionProperties;
        private String description;
        private String id;
        private String identifier;
        private Boolean isDefault;
        private String key;
        private List<GetRegistryConnectionMetadata> metadatas;
        private String modelType;
        private String modelVersion;
        private String name;
        private Integer objectStatus;
        private Integer objectVersion;
        private List<GetRegistryConnectionPrimarySchema> primarySchemas;
        private Map<String,Object> properties;
        private String registryId;
        private List<GetRegistryConnectionRegistryMetadata> registryMetadatas;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRegistryConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionKey = defaults.connectionKey;
    	      this.connectionProperties = defaults.connectionProperties;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.isDefault = defaults.isDefault;
    	      this.key = defaults.key;
    	      this.metadatas = defaults.metadatas;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.primarySchemas = defaults.primarySchemas;
    	      this.properties = defaults.properties;
    	      this.registryId = defaults.registryId;
    	      this.registryMetadatas = defaults.registryMetadatas;
    	      this.type = defaults.type;
        }

        public Builder connectionKey(String connectionKey) {
            this.connectionKey = Objects.requireNonNull(connectionKey);
            return this;
        }
        public Builder connectionProperties(List<GetRegistryConnectionConnectionProperty> connectionProperties) {
            this.connectionProperties = Objects.requireNonNull(connectionProperties);
            return this;
        }
        public Builder connectionProperties(GetRegistryConnectionConnectionProperty... connectionProperties) {
            return connectionProperties(List.of(connectionProperties));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        public Builder isDefault(Boolean isDefault) {
            this.isDefault = Objects.requireNonNull(isDefault);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder metadatas(List<GetRegistryConnectionMetadata> metadatas) {
            this.metadatas = Objects.requireNonNull(metadatas);
            return this;
        }
        public Builder metadatas(GetRegistryConnectionMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        public Builder modelType(String modelType) {
            this.modelType = Objects.requireNonNull(modelType);
            return this;
        }
        public Builder modelVersion(String modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder objectStatus(Integer objectStatus) {
            this.objectStatus = Objects.requireNonNull(objectStatus);
            return this;
        }
        public Builder objectVersion(Integer objectVersion) {
            this.objectVersion = Objects.requireNonNull(objectVersion);
            return this;
        }
        public Builder primarySchemas(List<GetRegistryConnectionPrimarySchema> primarySchemas) {
            this.primarySchemas = Objects.requireNonNull(primarySchemas);
            return this;
        }
        public Builder primarySchemas(GetRegistryConnectionPrimarySchema... primarySchemas) {
            return primarySchemas(List.of(primarySchemas));
        }
        public Builder properties(Map<String,Object> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        public Builder registryId(String registryId) {
            this.registryId = Objects.requireNonNull(registryId);
            return this;
        }
        public Builder registryMetadatas(List<GetRegistryConnectionRegistryMetadata> registryMetadatas) {
            this.registryMetadatas = Objects.requireNonNull(registryMetadatas);
            return this;
        }
        public Builder registryMetadatas(GetRegistryConnectionRegistryMetadata... registryMetadatas) {
            return registryMetadatas(List.of(registryMetadatas));
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetRegistryConnectionResult build() {
            return new GetRegistryConnectionResult(connectionKey, connectionProperties, description, id, identifier, isDefault, key, metadatas, modelType, modelVersion, name, objectStatus, objectVersion, primarySchemas, properties, registryId, registryMetadatas, type);
        }
    }
}
