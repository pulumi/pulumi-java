// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.GetDatabaseUpgradeHistoryEntriesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatabaseUpgradeHistoryEntriesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabaseUpgradeHistoryEntriesArgs Empty = new GetDatabaseUpgradeHistoryEntriesArgs();

    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="databaseId", required=true)
    private Output<String> databaseId;

    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Output<String> databaseId() {
        return this.databaseId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDatabaseUpgradeHistoryEntriesFilterArgs>> filters;

    public Optional<Output<List<GetDatabaseUpgradeHistoryEntriesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only upgradeHistoryEntries that match the given lifecycle state exactly.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only upgradeHistoryEntries that match the given lifecycle state exactly.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return only upgradeHistoryEntries that match the specified Upgrade Action.
     * 
     */
    @Import(name="upgradeAction")
    private @Nullable Output<String> upgradeAction;

    /**
     * @return A filter to return only upgradeHistoryEntries that match the specified Upgrade Action.
     * 
     */
    public Optional<Output<String>> upgradeAction() {
        return Optional.ofNullable(this.upgradeAction);
    }

    private GetDatabaseUpgradeHistoryEntriesArgs() {}

    private GetDatabaseUpgradeHistoryEntriesArgs(GetDatabaseUpgradeHistoryEntriesArgs $) {
        this.databaseId = $.databaseId;
        this.filters = $.filters;
        this.state = $.state;
        this.upgradeAction = $.upgradeAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabaseUpgradeHistoryEntriesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabaseUpgradeHistoryEntriesArgs $;

        public Builder() {
            $ = new GetDatabaseUpgradeHistoryEntriesArgs();
        }

        public Builder(GetDatabaseUpgradeHistoryEntriesArgs defaults) {
            $ = new GetDatabaseUpgradeHistoryEntriesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder databaseId(Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        public Builder filters(@Nullable Output<List<GetDatabaseUpgradeHistoryEntriesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDatabaseUpgradeHistoryEntriesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDatabaseUpgradeHistoryEntriesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state A filter to return only upgradeHistoryEntries that match the given lifecycle state exactly.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only upgradeHistoryEntries that match the given lifecycle state exactly.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param upgradeAction A filter to return only upgradeHistoryEntries that match the specified Upgrade Action.
         * 
         * @return builder
         * 
         */
        public Builder upgradeAction(@Nullable Output<String> upgradeAction) {
            $.upgradeAction = upgradeAction;
            return this;
        }

        /**
         * @param upgradeAction A filter to return only upgradeHistoryEntries that match the specified Upgrade Action.
         * 
         * @return builder
         * 
         */
        public Builder upgradeAction(String upgradeAction) {
            return upgradeAction(Output.of(upgradeAction));
        }

        public GetDatabaseUpgradeHistoryEntriesArgs build() {
            $.databaseId = Objects.requireNonNull($.databaseId, "expected parameter 'databaseId' to be non-null");
            return $;
        }
    }

}
