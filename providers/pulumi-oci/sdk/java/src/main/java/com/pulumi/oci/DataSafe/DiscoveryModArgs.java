// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiscoveryModArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiscoveryModArgs Empty = new DiscoveryModArgs();

    /**
     * (Updatable) The OCID of the compartment where the discovery job resource should be created.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment where the discovery job resource should be created.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * The type of the discovery job. It defines the job&#39;s scope. NEW identifies new sensitive columns in the target database that are not in the sensitive data model. DELETED identifies columns that are present in the sensitive data model but have been deleted from the target database. MODIFIED identifies columns that are present in the target database as well as the sensitive data model but some of their attributes have been modified. ALL covers all the above three scenarios and reports new, deleted and modified columns.
     * 
     */
    @Import(name="discoveryType")
    private @Nullable Output<String> discoveryType;

    /**
     * @return The type of the discovery job. It defines the job&#39;s scope. NEW identifies new sensitive columns in the target database that are not in the sensitive data model. DELETED identifies columns that are present in the sensitive data model but have been deleted from the target database. MODIFIED identifies columns that are present in the target database as well as the sensitive data model but some of their attributes have been modified. ALL covers all the above three scenarios and reports new, deleted and modified columns.
     * 
     */
    public Optional<Output<String>> discoveryType() {
        return Optional.ofNullable(this.discoveryType);
    }

    /**
     * A user-friendly name for the discovery job. Does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A user-friendly name for the discovery job. Does not have to be unique, and it is changeable. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Indicates if the discovery job should identify potential application-level (non-dictionary) referential relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined) relationships. This option helps identify application-level relationships that are not defined in the database dictionary, which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking. It&#39;s disabled by default and should be used only if there is a need to identify application-level relationships.
     * 
     */
    @Import(name="isAppDefinedRelationDiscoveryEnabled")
    private @Nullable Output<Boolean> isAppDefinedRelationDiscoveryEnabled;

    /**
     * @return Indicates if the discovery job should identify potential application-level (non-dictionary) referential relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined) relationships. This option helps identify application-level relationships that are not defined in the database dictionary, which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking. It&#39;s disabled by default and should be used only if there is a need to identify application-level relationships.
     * 
     */
    public Optional<Output<Boolean>> isAppDefinedRelationDiscoveryEnabled() {
        return Optional.ofNullable(this.isAppDefinedRelationDiscoveryEnabled);
    }

    /**
     * Indicates if all the schemas should be scanned by the discovery job. If it&#39;s set to true, the schemasForDiscovery attribute is ignored and all schemas are used for data discovery. If both attributes are not provided, the configuration from the sensitive data model is used.
     * 
     */
    @Import(name="isIncludeAllSchemas")
    private @Nullable Output<Boolean> isIncludeAllSchemas;

    /**
     * @return Indicates if all the schemas should be scanned by the discovery job. If it&#39;s set to true, the schemasForDiscovery attribute is ignored and all schemas are used for data discovery. If both attributes are not provided, the configuration from the sensitive data model is used.
     * 
     */
    public Optional<Output<Boolean>> isIncludeAllSchemas() {
        return Optional.ofNullable(this.isIncludeAllSchemas);
    }

    /**
     * Indicates if all the existing sensitive types should be used by the discovery job. If it&#39;s set to true, the sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used for data discovery. If both attributes are not provided, the configuration from the sensitive data model is used.
     * 
     */
    @Import(name="isIncludeAllSensitiveTypes")
    private @Nullable Output<Boolean> isIncludeAllSensitiveTypes;

    /**
     * @return Indicates if all the existing sensitive types should be used by the discovery job. If it&#39;s set to true, the sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used for data discovery. If both attributes are not provided, the configuration from the sensitive data model is used.
     * 
     */
    public Optional<Output<Boolean>> isIncludeAllSensitiveTypes() {
        return Optional.ofNullable(this.isIncludeAllSensitiveTypes);
    }

    /**
     * Indicates if the discovery job should collect and store sample data values for the discovered columns. Sample data helps review the discovered columns and ensure that they actually contain sensitive data. As it collects original data from the target database, it&#39;s disabled by default and should be used only if it&#39;s acceptable to store sample data in Data Safe&#39;s repository in Oracle Cloud. Note that sample data values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
     * 
     */
    @Import(name="isSampleDataCollectionEnabled")
    private @Nullable Output<Boolean> isSampleDataCollectionEnabled;

    /**
     * @return Indicates if the discovery job should collect and store sample data values for the discovered columns. Sample data helps review the discovered columns and ensure that they actually contain sensitive data. As it collects original data from the target database, it&#39;s disabled by default and should be used only if it&#39;s acceptable to store sample data in Data Safe&#39;s repository in Oracle Cloud. Note that sample data values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
     * 
     */
    public Optional<Output<Boolean>> isSampleDataCollectionEnabled() {
        return Optional.ofNullable(this.isSampleDataCollectionEnabled);
    }

    /**
     * The schemas to be scanned by the discovery job. If not provided, the schemasForDiscovery attribute of the sensitive data model is used to get the list of schemas.
     * 
     */
    @Import(name="schemasForDiscoveries")
    private @Nullable Output<List<String>> schemasForDiscoveries;

    /**
     * @return The schemas to be scanned by the discovery job. If not provided, the schemasForDiscovery attribute of the sensitive data model is used to get the list of schemas.
     * 
     */
    public Optional<Output<List<String>>> schemasForDiscoveries() {
        return Optional.ofNullable(this.schemasForDiscoveries);
    }

    /**
     * The OCID of the sensitive data model.
     * 
     */
    @Import(name="sensitiveDataModelId", required=true)
    private Output<String> sensitiveDataModelId;

    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    public Output<String> sensitiveDataModelId() {
        return this.sensitiveDataModelId;
    }

    /**
     * The OCIDs of the sensitive types to be used by the discovery job. If not provided, the sensitiveTypeIdsForDiscovery attribute of the sensitive data model is used to get the list of sensitive types.
     * 
     */
    @Import(name="sensitiveTypeIdsForDiscoveries")
    private @Nullable Output<List<String>> sensitiveTypeIdsForDiscoveries;

    /**
     * @return The OCIDs of the sensitive types to be used by the discovery job. If not provided, the sensitiveTypeIdsForDiscovery attribute of the sensitive data model is used to get the list of sensitive types.
     * 
     */
    public Optional<Output<List<String>>> sensitiveTypeIdsForDiscoveries() {
        return Optional.ofNullable(this.sensitiveTypeIdsForDiscoveries);
    }

    private DiscoveryModArgs() {}

    private DiscoveryModArgs(DiscoveryModArgs $) {
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.discoveryType = $.discoveryType;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.isAppDefinedRelationDiscoveryEnabled = $.isAppDefinedRelationDiscoveryEnabled;
        this.isIncludeAllSchemas = $.isIncludeAllSchemas;
        this.isIncludeAllSensitiveTypes = $.isIncludeAllSensitiveTypes;
        this.isSampleDataCollectionEnabled = $.isSampleDataCollectionEnabled;
        this.schemasForDiscoveries = $.schemasForDiscoveries;
        this.sensitiveDataModelId = $.sensitiveDataModelId;
        this.sensitiveTypeIdsForDiscoveries = $.sensitiveTypeIdsForDiscoveries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiscoveryModArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiscoveryModArgs $;

        public Builder() {
            $ = new DiscoveryModArgs();
        }

        public Builder(DiscoveryModArgs defaults) {
            $ = new DiscoveryModArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where the discovery job resource should be created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where the discovery job resource should be created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param discoveryType The type of the discovery job. It defines the job&#39;s scope. NEW identifies new sensitive columns in the target database that are not in the sensitive data model. DELETED identifies columns that are present in the sensitive data model but have been deleted from the target database. MODIFIED identifies columns that are present in the target database as well as the sensitive data model but some of their attributes have been modified. ALL covers all the above three scenarios and reports new, deleted and modified columns.
         * 
         * @return builder
         * 
         */
        public Builder discoveryType(@Nullable Output<String> discoveryType) {
            $.discoveryType = discoveryType;
            return this;
        }

        /**
         * @param discoveryType The type of the discovery job. It defines the job&#39;s scope. NEW identifies new sensitive columns in the target database that are not in the sensitive data model. DELETED identifies columns that are present in the sensitive data model but have been deleted from the target database. MODIFIED identifies columns that are present in the target database as well as the sensitive data model but some of their attributes have been modified. ALL covers all the above three scenarios and reports new, deleted and modified columns.
         * 
         * @return builder
         * 
         */
        public Builder discoveryType(String discoveryType) {
            return discoveryType(Output.of(discoveryType));
        }

        /**
         * @param displayName A user-friendly name for the discovery job. Does not have to be unique, and it is changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A user-friendly name for the discovery job. Does not have to be unique, and it is changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isAppDefinedRelationDiscoveryEnabled Indicates if the discovery job should identify potential application-level (non-dictionary) referential relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined) relationships. This option helps identify application-level relationships that are not defined in the database dictionary, which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking. It&#39;s disabled by default and should be used only if there is a need to identify application-level relationships.
         * 
         * @return builder
         * 
         */
        public Builder isAppDefinedRelationDiscoveryEnabled(@Nullable Output<Boolean> isAppDefinedRelationDiscoveryEnabled) {
            $.isAppDefinedRelationDiscoveryEnabled = isAppDefinedRelationDiscoveryEnabled;
            return this;
        }

        /**
         * @param isAppDefinedRelationDiscoveryEnabled Indicates if the discovery job should identify potential application-level (non-dictionary) referential relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined) relationships. This option helps identify application-level relationships that are not defined in the database dictionary, which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking. It&#39;s disabled by default and should be used only if there is a need to identify application-level relationships.
         * 
         * @return builder
         * 
         */
        public Builder isAppDefinedRelationDiscoveryEnabled(Boolean isAppDefinedRelationDiscoveryEnabled) {
            return isAppDefinedRelationDiscoveryEnabled(Output.of(isAppDefinedRelationDiscoveryEnabled));
        }

        /**
         * @param isIncludeAllSchemas Indicates if all the schemas should be scanned by the discovery job. If it&#39;s set to true, the schemasForDiscovery attribute is ignored and all schemas are used for data discovery. If both attributes are not provided, the configuration from the sensitive data model is used.
         * 
         * @return builder
         * 
         */
        public Builder isIncludeAllSchemas(@Nullable Output<Boolean> isIncludeAllSchemas) {
            $.isIncludeAllSchemas = isIncludeAllSchemas;
            return this;
        }

        /**
         * @param isIncludeAllSchemas Indicates if all the schemas should be scanned by the discovery job. If it&#39;s set to true, the schemasForDiscovery attribute is ignored and all schemas are used for data discovery. If both attributes are not provided, the configuration from the sensitive data model is used.
         * 
         * @return builder
         * 
         */
        public Builder isIncludeAllSchemas(Boolean isIncludeAllSchemas) {
            return isIncludeAllSchemas(Output.of(isIncludeAllSchemas));
        }

        /**
         * @param isIncludeAllSensitiveTypes Indicates if all the existing sensitive types should be used by the discovery job. If it&#39;s set to true, the sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used for data discovery. If both attributes are not provided, the configuration from the sensitive data model is used.
         * 
         * @return builder
         * 
         */
        public Builder isIncludeAllSensitiveTypes(@Nullable Output<Boolean> isIncludeAllSensitiveTypes) {
            $.isIncludeAllSensitiveTypes = isIncludeAllSensitiveTypes;
            return this;
        }

        /**
         * @param isIncludeAllSensitiveTypes Indicates if all the existing sensitive types should be used by the discovery job. If it&#39;s set to true, the sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used for data discovery. If both attributes are not provided, the configuration from the sensitive data model is used.
         * 
         * @return builder
         * 
         */
        public Builder isIncludeAllSensitiveTypes(Boolean isIncludeAllSensitiveTypes) {
            return isIncludeAllSensitiveTypes(Output.of(isIncludeAllSensitiveTypes));
        }

        /**
         * @param isSampleDataCollectionEnabled Indicates if the discovery job should collect and store sample data values for the discovered columns. Sample data helps review the discovered columns and ensure that they actually contain sensitive data. As it collects original data from the target database, it&#39;s disabled by default and should be used only if it&#39;s acceptable to store sample data in Data Safe&#39;s repository in Oracle Cloud. Note that sample data values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
         * 
         * @return builder
         * 
         */
        public Builder isSampleDataCollectionEnabled(@Nullable Output<Boolean> isSampleDataCollectionEnabled) {
            $.isSampleDataCollectionEnabled = isSampleDataCollectionEnabled;
            return this;
        }

        /**
         * @param isSampleDataCollectionEnabled Indicates if the discovery job should collect and store sample data values for the discovered columns. Sample data helps review the discovered columns and ensure that they actually contain sensitive data. As it collects original data from the target database, it&#39;s disabled by default and should be used only if it&#39;s acceptable to store sample data in Data Safe&#39;s repository in Oracle Cloud. Note that sample data values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
         * 
         * @return builder
         * 
         */
        public Builder isSampleDataCollectionEnabled(Boolean isSampleDataCollectionEnabled) {
            return isSampleDataCollectionEnabled(Output.of(isSampleDataCollectionEnabled));
        }

        /**
         * @param schemasForDiscoveries The schemas to be scanned by the discovery job. If not provided, the schemasForDiscovery attribute of the sensitive data model is used to get the list of schemas.
         * 
         * @return builder
         * 
         */
        public Builder schemasForDiscoveries(@Nullable Output<List<String>> schemasForDiscoveries) {
            $.schemasForDiscoveries = schemasForDiscoveries;
            return this;
        }

        /**
         * @param schemasForDiscoveries The schemas to be scanned by the discovery job. If not provided, the schemasForDiscovery attribute of the sensitive data model is used to get the list of schemas.
         * 
         * @return builder
         * 
         */
        public Builder schemasForDiscoveries(List<String> schemasForDiscoveries) {
            return schemasForDiscoveries(Output.of(schemasForDiscoveries));
        }

        /**
         * @param schemasForDiscoveries The schemas to be scanned by the discovery job. If not provided, the schemasForDiscovery attribute of the sensitive data model is used to get the list of schemas.
         * 
         * @return builder
         * 
         */
        public Builder schemasForDiscoveries(String... schemasForDiscoveries) {
            return schemasForDiscoveries(List.of(schemasForDiscoveries));
        }

        /**
         * @param sensitiveDataModelId The OCID of the sensitive data model.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveDataModelId(Output<String> sensitiveDataModelId) {
            $.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }

        /**
         * @param sensitiveDataModelId The OCID of the sensitive data model.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveDataModelId(String sensitiveDataModelId) {
            return sensitiveDataModelId(Output.of(sensitiveDataModelId));
        }

        /**
         * @param sensitiveTypeIdsForDiscoveries The OCIDs of the sensitive types to be used by the discovery job. If not provided, the sensitiveTypeIdsForDiscovery attribute of the sensitive data model is used to get the list of sensitive types.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIdsForDiscoveries(@Nullable Output<List<String>> sensitiveTypeIdsForDiscoveries) {
            $.sensitiveTypeIdsForDiscoveries = sensitiveTypeIdsForDiscoveries;
            return this;
        }

        /**
         * @param sensitiveTypeIdsForDiscoveries The OCIDs of the sensitive types to be used by the discovery job. If not provided, the sensitiveTypeIdsForDiscovery attribute of the sensitive data model is used to get the list of sensitive types.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIdsForDiscoveries(List<String> sensitiveTypeIdsForDiscoveries) {
            return sensitiveTypeIdsForDiscoveries(Output.of(sensitiveTypeIdsForDiscoveries));
        }

        /**
         * @param sensitiveTypeIdsForDiscoveries The OCIDs of the sensitive types to be used by the discovery job. If not provided, the sensitiveTypeIdsForDiscovery attribute of the sensitive data model is used to get the list of sensitive types.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIdsForDiscoveries(String... sensitiveTypeIdsForDiscoveries) {
            return sensitiveTypeIdsForDiscoveries(List.of(sensitiveTypeIdsForDiscoveries));
        }

        public DiscoveryModArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.sensitiveDataModelId = Objects.requireNonNull($.sensitiveDataModelId, "expected parameter 'sensitiveDataModelId' to be non-null");
            return $;
        }
    }

}
