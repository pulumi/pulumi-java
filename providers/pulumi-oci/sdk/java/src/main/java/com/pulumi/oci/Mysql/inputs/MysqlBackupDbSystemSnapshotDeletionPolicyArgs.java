// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MysqlBackupDbSystemSnapshotDeletionPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final MysqlBackupDbSystemSnapshotDeletionPolicyArgs Empty = new MysqlBackupDbSystemSnapshotDeletionPolicyArgs();

    /**
     * Specifies if any automatic backups created for a DB System should be retained or deleted when the DB System is deleted.
     * 
     */
    @Import(name="automaticBackupRetention")
    private @Nullable Output<String> automaticBackupRetention;

    /**
     * @return Specifies if any automatic backups created for a DB System should be retained or deleted when the DB System is deleted.
     * 
     */
    public Optional<Output<String>> automaticBackupRetention() {
        return Optional.ofNullable(this.automaticBackupRetention);
    }

    /**
     * Specifies whether or not a backup is taken when the DB System is deleted. REQUIRE_FINAL_BACKUP: a backup is taken if the DB System is deleted. SKIP_FINAL_BACKUP: a backup is not taken if the DB System is deleted.
     * 
     */
    @Import(name="finalBackup")
    private @Nullable Output<String> finalBackup;

    /**
     * @return Specifies whether or not a backup is taken when the DB System is deleted. REQUIRE_FINAL_BACKUP: a backup is taken if the DB System is deleted. SKIP_FINAL_BACKUP: a backup is not taken if the DB System is deleted.
     * 
     */
    public Optional<Output<String>> finalBackup() {
        return Optional.ofNullable(this.finalBackup);
    }

    /**
     * Specifies whether the DB System can be deleted. Set to true to prevent deletion, false (default) to allow.
     * 
     */
    @Import(name="isDeleteProtected")
    private @Nullable Output<Boolean> isDeleteProtected;

    /**
     * @return Specifies whether the DB System can be deleted. Set to true to prevent deletion, false (default) to allow.
     * 
     */
    public Optional<Output<Boolean>> isDeleteProtected() {
        return Optional.ofNullable(this.isDeleteProtected);
    }

    private MysqlBackupDbSystemSnapshotDeletionPolicyArgs() {}

    private MysqlBackupDbSystemSnapshotDeletionPolicyArgs(MysqlBackupDbSystemSnapshotDeletionPolicyArgs $) {
        this.automaticBackupRetention = $.automaticBackupRetention;
        this.finalBackup = $.finalBackup;
        this.isDeleteProtected = $.isDeleteProtected;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MysqlBackupDbSystemSnapshotDeletionPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MysqlBackupDbSystemSnapshotDeletionPolicyArgs $;

        public Builder() {
            $ = new MysqlBackupDbSystemSnapshotDeletionPolicyArgs();
        }

        public Builder(MysqlBackupDbSystemSnapshotDeletionPolicyArgs defaults) {
            $ = new MysqlBackupDbSystemSnapshotDeletionPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automaticBackupRetention Specifies if any automatic backups created for a DB System should be retained or deleted when the DB System is deleted.
         * 
         * @return builder
         * 
         */
        public Builder automaticBackupRetention(@Nullable Output<String> automaticBackupRetention) {
            $.automaticBackupRetention = automaticBackupRetention;
            return this;
        }

        /**
         * @param automaticBackupRetention Specifies if any automatic backups created for a DB System should be retained or deleted when the DB System is deleted.
         * 
         * @return builder
         * 
         */
        public Builder automaticBackupRetention(String automaticBackupRetention) {
            return automaticBackupRetention(Output.of(automaticBackupRetention));
        }

        /**
         * @param finalBackup Specifies whether or not a backup is taken when the DB System is deleted. REQUIRE_FINAL_BACKUP: a backup is taken if the DB System is deleted. SKIP_FINAL_BACKUP: a backup is not taken if the DB System is deleted.
         * 
         * @return builder
         * 
         */
        public Builder finalBackup(@Nullable Output<String> finalBackup) {
            $.finalBackup = finalBackup;
            return this;
        }

        /**
         * @param finalBackup Specifies whether or not a backup is taken when the DB System is deleted. REQUIRE_FINAL_BACKUP: a backup is taken if the DB System is deleted. SKIP_FINAL_BACKUP: a backup is not taken if the DB System is deleted.
         * 
         * @return builder
         * 
         */
        public Builder finalBackup(String finalBackup) {
            return finalBackup(Output.of(finalBackup));
        }

        /**
         * @param isDeleteProtected Specifies whether the DB System can be deleted. Set to true to prevent deletion, false (default) to allow.
         * 
         * @return builder
         * 
         */
        public Builder isDeleteProtected(@Nullable Output<Boolean> isDeleteProtected) {
            $.isDeleteProtected = isDeleteProtected;
            return this;
        }

        /**
         * @param isDeleteProtected Specifies whether the DB System can be deleted. Set to true to prevent deletion, false (default) to allow.
         * 
         * @return builder
         * 
         */
        public Builder isDeleteProtected(Boolean isDeleteProtected) {
            return isDeleteProtected(Output.of(isDeleteProtected));
        }

        public MysqlBackupDbSystemSnapshotDeletionPolicyArgs build() {
            return $;
        }
    }

}
