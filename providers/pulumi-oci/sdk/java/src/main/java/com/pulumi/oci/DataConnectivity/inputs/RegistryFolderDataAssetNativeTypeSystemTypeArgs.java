// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataConnectivity.inputs.RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionArgs;
import com.pulumi.oci.DataConnectivity.inputs.RegistryFolderDataAssetNativeTypeSystemTypeParentRefArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryFolderDataAssetNativeTypeSystemTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryFolderDataAssetNativeTypeSystemTypeArgs Empty = new RegistryFolderDataAssetNativeTypeSystemTypeArgs();

    /**
     * (Updatable) The configuration details of a configurable object. This contains one or more config param definitions.
     * 
     */
    @Import(name="configDefinition")
    private @Nullable Output<RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionArgs> configDefinition;

    /**
     * @return (Updatable) The configuration details of a configurable object. This contains one or more config param definitions.
     * 
     */
    public Optional<Output<RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionArgs>> configDefinition() {
        return Optional.ofNullable(this.configDefinition);
    }

    /**
     * (Updatable) User-defined description for the folder.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) User-defined description for the folder.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The data type.
     * 
     */
    @Import(name="dtType")
    private @Nullable Output<String> dtType;

    /**
     * @return (Updatable) The data type.
     * 
     */
    public Optional<Output<String>> dtType() {
        return Optional.ofNullable(this.dtType);
    }

    /**
     * (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * (Updatable) The type of the folder.
     * 
     */
    @Import(name="modelType", required=true)
    private Output<String> modelType;

    /**
     * @return (Updatable) The type of the folder.
     * 
     */
    public Output<String> modelType() {
        return this.modelType;
    }

    /**
     * (Updatable) The model version of an object.
     * 
     */
    @Import(name="modelVersion")
    private @Nullable Output<String> modelVersion;

    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    public Optional<Output<String>> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }

    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    @Import(name="objectStatus")
    private @Nullable Output<Integer> objectStatus;

    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Optional<Output<Integer>> objectStatus() {
        return Optional.ofNullable(this.objectStatus);
    }

    /**
     * (Updatable) A reference to the object&#39;s parent.
     * 
     */
    @Import(name="parentRef")
    private @Nullable Output<RegistryFolderDataAssetNativeTypeSystemTypeParentRefArgs> parentRef;

    /**
     * @return (Updatable) A reference to the object&#39;s parent.
     * 
     */
    public Optional<Output<RegistryFolderDataAssetNativeTypeSystemTypeParentRefArgs>> parentRef() {
        return Optional.ofNullable(this.parentRef);
    }

    /**
     * (Updatable) The data type system name.
     * 
     */
    @Import(name="typeSystemName")
    private @Nullable Output<String> typeSystemName;

    /**
     * @return (Updatable) The data type system name.
     * 
     */
    public Optional<Output<String>> typeSystemName() {
        return Optional.ofNullable(this.typeSystemName);
    }

    private RegistryFolderDataAssetNativeTypeSystemTypeArgs() {}

    private RegistryFolderDataAssetNativeTypeSystemTypeArgs(RegistryFolderDataAssetNativeTypeSystemTypeArgs $) {
        this.configDefinition = $.configDefinition;
        this.description = $.description;
        this.dtType = $.dtType;
        this.key = $.key;
        this.modelType = $.modelType;
        this.modelVersion = $.modelVersion;
        this.name = $.name;
        this.objectStatus = $.objectStatus;
        this.parentRef = $.parentRef;
        this.typeSystemName = $.typeSystemName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryFolderDataAssetNativeTypeSystemTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryFolderDataAssetNativeTypeSystemTypeArgs $;

        public Builder() {
            $ = new RegistryFolderDataAssetNativeTypeSystemTypeArgs();
        }

        public Builder(RegistryFolderDataAssetNativeTypeSystemTypeArgs defaults) {
            $ = new RegistryFolderDataAssetNativeTypeSystemTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configDefinition (Updatable) The configuration details of a configurable object. This contains one or more config param definitions.
         * 
         * @return builder
         * 
         */
        public Builder configDefinition(@Nullable Output<RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionArgs> configDefinition) {
            $.configDefinition = configDefinition;
            return this;
        }

        /**
         * @param configDefinition (Updatable) The configuration details of a configurable object. This contains one or more config param definitions.
         * 
         * @return builder
         * 
         */
        public Builder configDefinition(RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionArgs configDefinition) {
            return configDefinition(Output.of(configDefinition));
        }

        /**
         * @param description (Updatable) User-defined description for the folder.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) User-defined description for the folder.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dtType (Updatable) The data type.
         * 
         * @return builder
         * 
         */
        public Builder dtType(@Nullable Output<String> dtType) {
            $.dtType = dtType;
            return this;
        }

        /**
         * @param dtType (Updatable) The data type.
         * 
         * @return builder
         * 
         */
        public Builder dtType(String dtType) {
            return dtType(Output.of(dtType));
        }

        /**
         * @param key (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param modelType (Updatable) The type of the folder.
         * 
         * @return builder
         * 
         */
        public Builder modelType(Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType (Updatable) The type of the folder.
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        /**
         * @param modelVersion (Updatable) The model version of an object.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(@Nullable Output<String> modelVersion) {
            $.modelVersion = modelVersion;
            return this;
        }

        /**
         * @param modelVersion (Updatable) The model version of an object.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(String modelVersion) {
            return modelVersion(Output.of(modelVersion));
        }

        /**
         * @param name (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param objectStatus (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
         * 
         * @return builder
         * 
         */
        public Builder objectStatus(@Nullable Output<Integer> objectStatus) {
            $.objectStatus = objectStatus;
            return this;
        }

        /**
         * @param objectStatus (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
         * 
         * @return builder
         * 
         */
        public Builder objectStatus(Integer objectStatus) {
            return objectStatus(Output.of(objectStatus));
        }

        /**
         * @param parentRef (Updatable) A reference to the object&#39;s parent.
         * 
         * @return builder
         * 
         */
        public Builder parentRef(@Nullable Output<RegistryFolderDataAssetNativeTypeSystemTypeParentRefArgs> parentRef) {
            $.parentRef = parentRef;
            return this;
        }

        /**
         * @param parentRef (Updatable) A reference to the object&#39;s parent.
         * 
         * @return builder
         * 
         */
        public Builder parentRef(RegistryFolderDataAssetNativeTypeSystemTypeParentRefArgs parentRef) {
            return parentRef(Output.of(parentRef));
        }

        /**
         * @param typeSystemName (Updatable) The data type system name.
         * 
         * @return builder
         * 
         */
        public Builder typeSystemName(@Nullable Output<String> typeSystemName) {
            $.typeSystemName = typeSystemName;
            return this;
        }

        /**
         * @param typeSystemName (Updatable) The data type system name.
         * 
         * @return builder
         * 
         */
        public Builder typeSystemName(String typeSystemName) {
            return typeSystemName(Output.of(typeSystemName));
        }

        public RegistryFolderDataAssetNativeTypeSystemTypeArgs build() {
            $.modelType = Objects.requireNonNull($.modelType, "expected parameter 'modelType' to be non-null");
            return $;
        }
    }

}
