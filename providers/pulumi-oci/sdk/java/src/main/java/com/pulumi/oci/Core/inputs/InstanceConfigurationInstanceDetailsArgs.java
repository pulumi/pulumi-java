// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Core.inputs.InstanceConfigurationInstanceDetailsBlockVolumeArgs;
import com.pulumi.oci.Core.inputs.InstanceConfigurationInstanceDetailsLaunchDetailsArgs;
import com.pulumi.oci.Core.inputs.InstanceConfigurationInstanceDetailsSecondaryVnicArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceConfigurationInstanceDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceConfigurationInstanceDetailsArgs Empty = new InstanceConfigurationInstanceDetailsArgs();

    @Import(name="blockVolumes")
    private @Nullable Output<List<InstanceConfigurationInstanceDetailsBlockVolumeArgs>> blockVolumes;

    public Optional<Output<List<InstanceConfigurationInstanceDetailsBlockVolumeArgs>>> blockVolumes() {
        return Optional.ofNullable(this.blockVolumes);
    }

    /**
     * The type of instance details. Supported instanceType is compute
     * 
     */
    @Import(name="instanceType", required=true)
    private Output<String> instanceType;

    /**
     * @return The type of instance details. Supported instanceType is compute
     * 
     */
    public Output<String> instanceType() {
        return this.instanceType;
    }

    /**
     * Instance launch details for creating an instance from an instance configuration. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    @Import(name="launchDetails")
    private @Nullable Output<InstanceConfigurationInstanceDetailsLaunchDetailsArgs> launchDetails;

    /**
     * @return Instance launch details for creating an instance from an instance configuration. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    public Optional<Output<InstanceConfigurationInstanceDetailsLaunchDetailsArgs>> launchDetails() {
        return Optional.ofNullable(this.launchDetails);
    }

    @Import(name="secondaryVnics")
    private @Nullable Output<List<InstanceConfigurationInstanceDetailsSecondaryVnicArgs>> secondaryVnics;

    public Optional<Output<List<InstanceConfigurationInstanceDetailsSecondaryVnicArgs>>> secondaryVnics() {
        return Optional.ofNullable(this.secondaryVnics);
    }

    private InstanceConfigurationInstanceDetailsArgs() {}

    private InstanceConfigurationInstanceDetailsArgs(InstanceConfigurationInstanceDetailsArgs $) {
        this.blockVolumes = $.blockVolumes;
        this.instanceType = $.instanceType;
        this.launchDetails = $.launchDetails;
        this.secondaryVnics = $.secondaryVnics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceConfigurationInstanceDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceConfigurationInstanceDetailsArgs $;

        public Builder() {
            $ = new InstanceConfigurationInstanceDetailsArgs();
        }

        public Builder(InstanceConfigurationInstanceDetailsArgs defaults) {
            $ = new InstanceConfigurationInstanceDetailsArgs(Objects.requireNonNull(defaults));
        }

        public Builder blockVolumes(@Nullable Output<List<InstanceConfigurationInstanceDetailsBlockVolumeArgs>> blockVolumes) {
            $.blockVolumes = blockVolumes;
            return this;
        }

        public Builder blockVolumes(List<InstanceConfigurationInstanceDetailsBlockVolumeArgs> blockVolumes) {
            return blockVolumes(Output.of(blockVolumes));
        }

        public Builder blockVolumes(InstanceConfigurationInstanceDetailsBlockVolumeArgs... blockVolumes) {
            return blockVolumes(List.of(blockVolumes));
        }

        /**
         * @param instanceType The type of instance details. Supported instanceType is compute
         * 
         * @return builder
         * 
         */
        public Builder instanceType(Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The type of instance details. Supported instanceType is compute
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param launchDetails Instance launch details for creating an instance from an instance configuration. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
         * 
         * @return builder
         * 
         */
        public Builder launchDetails(@Nullable Output<InstanceConfigurationInstanceDetailsLaunchDetailsArgs> launchDetails) {
            $.launchDetails = launchDetails;
            return this;
        }

        /**
         * @param launchDetails Instance launch details for creating an instance from an instance configuration. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
         * 
         * @return builder
         * 
         */
        public Builder launchDetails(InstanceConfigurationInstanceDetailsLaunchDetailsArgs launchDetails) {
            return launchDetails(Output.of(launchDetails));
        }

        public Builder secondaryVnics(@Nullable Output<List<InstanceConfigurationInstanceDetailsSecondaryVnicArgs>> secondaryVnics) {
            $.secondaryVnics = secondaryVnics;
            return this;
        }

        public Builder secondaryVnics(List<InstanceConfigurationInstanceDetailsSecondaryVnicArgs> secondaryVnics) {
            return secondaryVnics(Output.of(secondaryVnics));
        }

        public Builder secondaryVnics(InstanceConfigurationInstanceDetailsSecondaryVnicArgs... secondaryVnics) {
            return secondaryVnics(List.of(secondaryVnics));
        }

        public InstanceConfigurationInstanceDetailsArgs build() {
            $.instanceType = Objects.requireNonNull($.instanceType, "expected parameter 'instanceType' to be non-null");
            return $;
        }
    }

}
