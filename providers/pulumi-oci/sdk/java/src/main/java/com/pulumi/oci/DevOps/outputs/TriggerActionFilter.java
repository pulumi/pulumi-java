// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.TriggerActionFilterInclude;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TriggerActionFilter {
    /**
     * @return (Updatable) The events, for example, PUSH, PULL_REQUEST_MERGE.
     * 
     */
    private final @Nullable List<String> events;
    /**
     * @return (Updatable) Attributes to filter DevOps code repository events.
     * 
     */
    private final @Nullable TriggerActionFilterInclude include;
    /**
     * @return (Updatable) Source of the trigger. Allowed values are, GITHUB and GITLAB.
     * 
     */
    private final String triggerSource;

    @CustomType.Constructor
    private TriggerActionFilter(
        @CustomType.Parameter("events") @Nullable List<String> events,
        @CustomType.Parameter("include") @Nullable TriggerActionFilterInclude include,
        @CustomType.Parameter("triggerSource") String triggerSource) {
        this.events = events;
        this.include = include;
        this.triggerSource = triggerSource;
    }

    /**
     * @return (Updatable) The events, for example, PUSH, PULL_REQUEST_MERGE.
     * 
     */
    public List<String> events() {
        return this.events == null ? List.of() : this.events;
    }
    /**
     * @return (Updatable) Attributes to filter DevOps code repository events.
     * 
     */
    public Optional<TriggerActionFilterInclude> include() {
        return Optional.ofNullable(this.include);
    }
    /**
     * @return (Updatable) Source of the trigger. Allowed values are, GITHUB and GITLAB.
     * 
     */
    public String triggerSource() {
        return this.triggerSource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerActionFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> events;
        private @Nullable TriggerActionFilterInclude include;
        private String triggerSource;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerActionFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.events = defaults.events;
    	      this.include = defaults.include;
    	      this.triggerSource = defaults.triggerSource;
        }

        public Builder events(@Nullable List<String> events) {
            this.events = events;
            return this;
        }
        public Builder events(String... events) {
            return events(List.of(events));
        }
        public Builder include(@Nullable TriggerActionFilterInclude include) {
            this.include = include;
            return this;
        }
        public Builder triggerSource(String triggerSource) {
            this.triggerSource = Objects.requireNonNull(triggerSource);
            return this;
        }        public TriggerActionFilter build() {
            return new TriggerActionFilter(events, include, triggerSource);
        }
    }
}
