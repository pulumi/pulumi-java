// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.LoadBalancer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendSetHealthCheckerArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendSetHealthCheckerArgs Empty = new BackendSetHealthCheckerArgs();

    /**
     * (Updatable) The interval between health checks, in milliseconds.  Example: `10000`
     * 
     */
    @Import(name="intervalMs")
    private @Nullable Output<Integer> intervalMs;

    /**
     * @return (Updatable) The interval between health checks, in milliseconds.  Example: `10000`
     * 
     */
    public Optional<Output<Integer>> intervalMs() {
        return Optional.ofNullable(this.intervalMs);
    }

    /**
     * (Updatable) The backend server port against which to run the health check. If the port is not specified, the load balancer uses the port information from the `Backend` object.  Example: `8080`
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return (Updatable) The backend server port against which to run the health check. If the port is not specified, the load balancer uses the port information from the `Backend` object.  Example: `8080`
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * (Updatable) The protocol the health check must use; either HTTP or TCP.  Example: `HTTP`
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return (Updatable) The protocol the health check must use; either HTTP or TCP.  Example: `HTTP`
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * (Updatable) A regular expression for parsing the response body from the backend server.  Example: `^((?!false).|\s)*$`
     * 
     */
    @Import(name="responseBodyRegex")
    private @Nullable Output<String> responseBodyRegex;

    /**
     * @return (Updatable) A regular expression for parsing the response body from the backend server.  Example: `^((?!false).|\s)*$`
     * 
     */
    public Optional<Output<String>> responseBodyRegex() {
        return Optional.ofNullable(this.responseBodyRegex);
    }

    /**
     * (Updatable) The number of retries to attempt before a backend server is considered &#34;unhealthy&#34;. This number also applies when recovering a server to the &#34;healthy&#34; state.  Example: `3`
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    /**
     * @return (Updatable) The number of retries to attempt before a backend server is considered &#34;unhealthy&#34;. This number also applies when recovering a server to the &#34;healthy&#34; state.  Example: `3`
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * (Updatable) The status code a healthy backend server should return.  Example: `200`
     * 
     */
    @Import(name="returnCode")
    private @Nullable Output<Integer> returnCode;

    /**
     * @return (Updatable) The status code a healthy backend server should return.  Example: `200`
     * 
     */
    public Optional<Output<Integer>> returnCode() {
        return Optional.ofNullable(this.returnCode);
    }

    /**
     * (Updatable) The maximum time, in milliseconds, to wait for a reply to a health check. A health check is successful only if a reply returns within this timeout period.  Example: `3000`
     * 
     */
    @Import(name="timeoutInMillis")
    private @Nullable Output<Integer> timeoutInMillis;

    /**
     * @return (Updatable) The maximum time, in milliseconds, to wait for a reply to a health check. A health check is successful only if a reply returns within this timeout period.  Example: `3000`
     * 
     */
    public Optional<Output<Integer>> timeoutInMillis() {
        return Optional.ofNullable(this.timeoutInMillis);
    }

    /**
     * (Updatable) The path against which to run the health check.  Example: `/healthcheck`
     * 
     */
    @Import(name="urlPath")
    private @Nullable Output<String> urlPath;

    /**
     * @return (Updatable) The path against which to run the health check.  Example: `/healthcheck`
     * 
     */
    public Optional<Output<String>> urlPath() {
        return Optional.ofNullable(this.urlPath);
    }

    private BackendSetHealthCheckerArgs() {}

    private BackendSetHealthCheckerArgs(BackendSetHealthCheckerArgs $) {
        this.intervalMs = $.intervalMs;
        this.port = $.port;
        this.protocol = $.protocol;
        this.responseBodyRegex = $.responseBodyRegex;
        this.retries = $.retries;
        this.returnCode = $.returnCode;
        this.timeoutInMillis = $.timeoutInMillis;
        this.urlPath = $.urlPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendSetHealthCheckerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendSetHealthCheckerArgs $;

        public Builder() {
            $ = new BackendSetHealthCheckerArgs();
        }

        public Builder(BackendSetHealthCheckerArgs defaults) {
            $ = new BackendSetHealthCheckerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param intervalMs (Updatable) The interval between health checks, in milliseconds.  Example: `10000`
         * 
         * @return builder
         * 
         */
        public Builder intervalMs(@Nullable Output<Integer> intervalMs) {
            $.intervalMs = intervalMs;
            return this;
        }

        /**
         * @param intervalMs (Updatable) The interval between health checks, in milliseconds.  Example: `10000`
         * 
         * @return builder
         * 
         */
        public Builder intervalMs(Integer intervalMs) {
            return intervalMs(Output.of(intervalMs));
        }

        /**
         * @param port (Updatable) The backend server port against which to run the health check. If the port is not specified, the load balancer uses the port information from the `Backend` object.  Example: `8080`
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) The backend server port against which to run the health check. If the port is not specified, the load balancer uses the port information from the `Backend` object.  Example: `8080`
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol (Updatable) The protocol the health check must use; either HTTP or TCP.  Example: `HTTP`
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Updatable) The protocol the health check must use; either HTTP or TCP.  Example: `HTTP`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param responseBodyRegex (Updatable) A regular expression for parsing the response body from the backend server.  Example: `^((?!false).|\s)*$`
         * 
         * @return builder
         * 
         */
        public Builder responseBodyRegex(@Nullable Output<String> responseBodyRegex) {
            $.responseBodyRegex = responseBodyRegex;
            return this;
        }

        /**
         * @param responseBodyRegex (Updatable) A regular expression for parsing the response body from the backend server.  Example: `^((?!false).|\s)*$`
         * 
         * @return builder
         * 
         */
        public Builder responseBodyRegex(String responseBodyRegex) {
            return responseBodyRegex(Output.of(responseBodyRegex));
        }

        /**
         * @param retries (Updatable) The number of retries to attempt before a backend server is considered &#34;unhealthy&#34;. This number also applies when recovering a server to the &#34;healthy&#34; state.  Example: `3`
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries (Updatable) The number of retries to attempt before a backend server is considered &#34;unhealthy&#34;. This number also applies when recovering a server to the &#34;healthy&#34; state.  Example: `3`
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param returnCode (Updatable) The status code a healthy backend server should return.  Example: `200`
         * 
         * @return builder
         * 
         */
        public Builder returnCode(@Nullable Output<Integer> returnCode) {
            $.returnCode = returnCode;
            return this;
        }

        /**
         * @param returnCode (Updatable) The status code a healthy backend server should return.  Example: `200`
         * 
         * @return builder
         * 
         */
        public Builder returnCode(Integer returnCode) {
            return returnCode(Output.of(returnCode));
        }

        /**
         * @param timeoutInMillis (Updatable) The maximum time, in milliseconds, to wait for a reply to a health check. A health check is successful only if a reply returns within this timeout period.  Example: `3000`
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMillis(@Nullable Output<Integer> timeoutInMillis) {
            $.timeoutInMillis = timeoutInMillis;
            return this;
        }

        /**
         * @param timeoutInMillis (Updatable) The maximum time, in milliseconds, to wait for a reply to a health check. A health check is successful only if a reply returns within this timeout period.  Example: `3000`
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMillis(Integer timeoutInMillis) {
            return timeoutInMillis(Output.of(timeoutInMillis));
        }

        /**
         * @param urlPath (Updatable) The path against which to run the health check.  Example: `/healthcheck`
         * 
         * @return builder
         * 
         */
        public Builder urlPath(@Nullable Output<String> urlPath) {
            $.urlPath = urlPath;
            return this;
        }

        /**
         * @param urlPath (Updatable) The path against which to run the health check.  Example: `/healthcheck`
         * 
         * @return builder
         * 
         */
        public Builder urlPath(String urlPath) {
            return urlPath(Output.of(urlPath));
        }

        public BackendSetHealthCheckerArgs build() {
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            return $;
        }
    }

}
