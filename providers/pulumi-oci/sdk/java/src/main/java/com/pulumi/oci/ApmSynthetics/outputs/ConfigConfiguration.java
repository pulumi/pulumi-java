// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationNetworkConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationReqAuthenticationDetails;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationRequestHeader;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationRequestQueryParam;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationVerifyText;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigConfiguration {
    /**
     * @return (Updatable) Type of configuration.
     * 
     */
    private final @Nullable String configType;
    /**
     * @return (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    private final @Nullable Boolean isCertificateValidationEnabled;
    /**
     * @return (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    private final @Nullable Boolean isFailureRetried;
    /**
     * @return (Updatable) If redirection enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    private final @Nullable Boolean isRedirectionEnabled;
    /**
     * @return (Updatable) Details of the network configuration.
     * 
     */
    private final @Nullable ConfigConfigurationNetworkConfiguration networkConfiguration;
    /**
     * @return (Updatable) Details for request HTTP authentication.
     * 
     */
    private final @Nullable ConfigConfigurationReqAuthenticationDetails reqAuthenticationDetails;
    /**
     * @return (Updatable) Request http authentication scheme.
     * 
     */
    private final @Nullable String reqAuthenticationScheme;
    /**
     * @return (Updatable) List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    private final @Nullable List<ConfigConfigurationRequestHeader> requestHeaders;
    /**
     * @return (Updatable) Request HTTP method.
     * 
     */
    private final @Nullable String requestMethod;
    /**
     * @return (Updatable) Request post body content.
     * 
     */
    private final @Nullable String requestPostBody;
    /**
     * @return (Updatable) List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    private final @Nullable List<ConfigConfigurationRequestQueryParam> requestQueryParams;
    /**
     * @return (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    private final @Nullable List<String> verifyResponseCodes;
    /**
     * @return (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    private final @Nullable String verifyResponseContent;
    /**
     * @return (Updatable) Verify all the search strings present in response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    private final @Nullable List<ConfigConfigurationVerifyText> verifyTexts;

    @CustomType.Constructor
    private ConfigConfiguration(
        @CustomType.Parameter("configType") @Nullable String configType,
        @CustomType.Parameter("isCertificateValidationEnabled") @Nullable Boolean isCertificateValidationEnabled,
        @CustomType.Parameter("isFailureRetried") @Nullable Boolean isFailureRetried,
        @CustomType.Parameter("isRedirectionEnabled") @Nullable Boolean isRedirectionEnabled,
        @CustomType.Parameter("networkConfiguration") @Nullable ConfigConfigurationNetworkConfiguration networkConfiguration,
        @CustomType.Parameter("reqAuthenticationDetails") @Nullable ConfigConfigurationReqAuthenticationDetails reqAuthenticationDetails,
        @CustomType.Parameter("reqAuthenticationScheme") @Nullable String reqAuthenticationScheme,
        @CustomType.Parameter("requestHeaders") @Nullable List<ConfigConfigurationRequestHeader> requestHeaders,
        @CustomType.Parameter("requestMethod") @Nullable String requestMethod,
        @CustomType.Parameter("requestPostBody") @Nullable String requestPostBody,
        @CustomType.Parameter("requestQueryParams") @Nullable List<ConfigConfigurationRequestQueryParam> requestQueryParams,
        @CustomType.Parameter("verifyResponseCodes") @Nullable List<String> verifyResponseCodes,
        @CustomType.Parameter("verifyResponseContent") @Nullable String verifyResponseContent,
        @CustomType.Parameter("verifyTexts") @Nullable List<ConfigConfigurationVerifyText> verifyTexts) {
        this.configType = configType;
        this.isCertificateValidationEnabled = isCertificateValidationEnabled;
        this.isFailureRetried = isFailureRetried;
        this.isRedirectionEnabled = isRedirectionEnabled;
        this.networkConfiguration = networkConfiguration;
        this.reqAuthenticationDetails = reqAuthenticationDetails;
        this.reqAuthenticationScheme = reqAuthenticationScheme;
        this.requestHeaders = requestHeaders;
        this.requestMethod = requestMethod;
        this.requestPostBody = requestPostBody;
        this.requestQueryParams = requestQueryParams;
        this.verifyResponseCodes = verifyResponseCodes;
        this.verifyResponseContent = verifyResponseContent;
        this.verifyTexts = verifyTexts;
    }

    /**
     * @return (Updatable) Type of configuration.
     * 
     */
    public Optional<String> configType() {
        return Optional.ofNullable(this.configType);
    }
    /**
     * @return (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    public Optional<Boolean> isCertificateValidationEnabled() {
        return Optional.ofNullable(this.isCertificateValidationEnabled);
    }
    /**
     * @return (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    public Optional<Boolean> isFailureRetried() {
        return Optional.ofNullable(this.isFailureRetried);
    }
    /**
     * @return (Updatable) If redirection enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    public Optional<Boolean> isRedirectionEnabled() {
        return Optional.ofNullable(this.isRedirectionEnabled);
    }
    /**
     * @return (Updatable) Details of the network configuration.
     * 
     */
    public Optional<ConfigConfigurationNetworkConfiguration> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }
    /**
     * @return (Updatable) Details for request HTTP authentication.
     * 
     */
    public Optional<ConfigConfigurationReqAuthenticationDetails> reqAuthenticationDetails() {
        return Optional.ofNullable(this.reqAuthenticationDetails);
    }
    /**
     * @return (Updatable) Request http authentication scheme.
     * 
     */
    public Optional<String> reqAuthenticationScheme() {
        return Optional.ofNullable(this.reqAuthenticationScheme);
    }
    /**
     * @return (Updatable) List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    public List<ConfigConfigurationRequestHeader> requestHeaders() {
        return this.requestHeaders == null ? List.of() : this.requestHeaders;
    }
    /**
     * @return (Updatable) Request HTTP method.
     * 
     */
    public Optional<String> requestMethod() {
        return Optional.ofNullable(this.requestMethod);
    }
    /**
     * @return (Updatable) Request post body content.
     * 
     */
    public Optional<String> requestPostBody() {
        return Optional.ofNullable(this.requestPostBody);
    }
    /**
     * @return (Updatable) List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    public List<ConfigConfigurationRequestQueryParam> requestQueryParams() {
        return this.requestQueryParams == null ? List.of() : this.requestQueryParams;
    }
    /**
     * @return (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    public List<String> verifyResponseCodes() {
        return this.verifyResponseCodes == null ? List.of() : this.verifyResponseCodes;
    }
    /**
     * @return (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    public Optional<String> verifyResponseContent() {
        return Optional.ofNullable(this.verifyResponseContent);
    }
    /**
     * @return (Updatable) Verify all the search strings present in response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    public List<ConfigConfigurationVerifyText> verifyTexts() {
        return this.verifyTexts == null ? List.of() : this.verifyTexts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String configType;
        private @Nullable Boolean isCertificateValidationEnabled;
        private @Nullable Boolean isFailureRetried;
        private @Nullable Boolean isRedirectionEnabled;
        private @Nullable ConfigConfigurationNetworkConfiguration networkConfiguration;
        private @Nullable ConfigConfigurationReqAuthenticationDetails reqAuthenticationDetails;
        private @Nullable String reqAuthenticationScheme;
        private @Nullable List<ConfigConfigurationRequestHeader> requestHeaders;
        private @Nullable String requestMethod;
        private @Nullable String requestPostBody;
        private @Nullable List<ConfigConfigurationRequestQueryParam> requestQueryParams;
        private @Nullable List<String> verifyResponseCodes;
        private @Nullable String verifyResponseContent;
        private @Nullable List<ConfigConfigurationVerifyText> verifyTexts;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configType = defaults.configType;
    	      this.isCertificateValidationEnabled = defaults.isCertificateValidationEnabled;
    	      this.isFailureRetried = defaults.isFailureRetried;
    	      this.isRedirectionEnabled = defaults.isRedirectionEnabled;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.reqAuthenticationDetails = defaults.reqAuthenticationDetails;
    	      this.reqAuthenticationScheme = defaults.reqAuthenticationScheme;
    	      this.requestHeaders = defaults.requestHeaders;
    	      this.requestMethod = defaults.requestMethod;
    	      this.requestPostBody = defaults.requestPostBody;
    	      this.requestQueryParams = defaults.requestQueryParams;
    	      this.verifyResponseCodes = defaults.verifyResponseCodes;
    	      this.verifyResponseContent = defaults.verifyResponseContent;
    	      this.verifyTexts = defaults.verifyTexts;
        }

        public Builder configType(@Nullable String configType) {
            this.configType = configType;
            return this;
        }
        public Builder isCertificateValidationEnabled(@Nullable Boolean isCertificateValidationEnabled) {
            this.isCertificateValidationEnabled = isCertificateValidationEnabled;
            return this;
        }
        public Builder isFailureRetried(@Nullable Boolean isFailureRetried) {
            this.isFailureRetried = isFailureRetried;
            return this;
        }
        public Builder isRedirectionEnabled(@Nullable Boolean isRedirectionEnabled) {
            this.isRedirectionEnabled = isRedirectionEnabled;
            return this;
        }
        public Builder networkConfiguration(@Nullable ConfigConfigurationNetworkConfiguration networkConfiguration) {
            this.networkConfiguration = networkConfiguration;
            return this;
        }
        public Builder reqAuthenticationDetails(@Nullable ConfigConfigurationReqAuthenticationDetails reqAuthenticationDetails) {
            this.reqAuthenticationDetails = reqAuthenticationDetails;
            return this;
        }
        public Builder reqAuthenticationScheme(@Nullable String reqAuthenticationScheme) {
            this.reqAuthenticationScheme = reqAuthenticationScheme;
            return this;
        }
        public Builder requestHeaders(@Nullable List<ConfigConfigurationRequestHeader> requestHeaders) {
            this.requestHeaders = requestHeaders;
            return this;
        }
        public Builder requestHeaders(ConfigConfigurationRequestHeader... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }
        public Builder requestMethod(@Nullable String requestMethod) {
            this.requestMethod = requestMethod;
            return this;
        }
        public Builder requestPostBody(@Nullable String requestPostBody) {
            this.requestPostBody = requestPostBody;
            return this;
        }
        public Builder requestQueryParams(@Nullable List<ConfigConfigurationRequestQueryParam> requestQueryParams) {
            this.requestQueryParams = requestQueryParams;
            return this;
        }
        public Builder requestQueryParams(ConfigConfigurationRequestQueryParam... requestQueryParams) {
            return requestQueryParams(List.of(requestQueryParams));
        }
        public Builder verifyResponseCodes(@Nullable List<String> verifyResponseCodes) {
            this.verifyResponseCodes = verifyResponseCodes;
            return this;
        }
        public Builder verifyResponseCodes(String... verifyResponseCodes) {
            return verifyResponseCodes(List.of(verifyResponseCodes));
        }
        public Builder verifyResponseContent(@Nullable String verifyResponseContent) {
            this.verifyResponseContent = verifyResponseContent;
            return this;
        }
        public Builder verifyTexts(@Nullable List<ConfigConfigurationVerifyText> verifyTexts) {
            this.verifyTexts = verifyTexts;
            return this;
        }
        public Builder verifyTexts(ConfigConfigurationVerifyText... verifyTexts) {
            return verifyTexts(List.of(verifyTexts));
        }        public ConfigConfiguration build() {
            return new ConfigConfiguration(configType, isCertificateValidationEnabled, isFailureRetried, isRedirectionEnabled, networkConfiguration, reqAuthenticationDetails, reqAuthenticationScheme, requestHeaders, requestMethod, requestPostBody, requestQueryParams, verifyResponseCodes, verifyResponseContent, verifyTexts);
        }
    }
}
