// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRequestPoliciesMutualTlsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRequestPoliciesMutualTlsArgs Empty = new DeploymentSpecificationRequestPoliciesMutualTlsArgs();

    /**
     * (Updatable) Allowed list of CN or SAN which will be used for verification of certificate.
     * 
     */
    @Import(name="allowedSans")
    private @Nullable Output<List<String>> allowedSans;

    /**
     * @return (Updatable) Allowed list of CN or SAN which will be used for verification of certificate.
     * 
     */
    public Optional<Output<List<String>>> allowedSans() {
        return Optional.ofNullable(this.allowedSans);
    }

    /**
     * (Updatable) Determines whether to enable client verification when API Consumer makes connection to the gateway.
     * 
     */
    @Import(name="isVerifiedCertificateRequired")
    private @Nullable Output<Boolean> isVerifiedCertificateRequired;

    /**
     * @return (Updatable) Determines whether to enable client verification when API Consumer makes connection to the gateway.
     * 
     */
    public Optional<Output<Boolean>> isVerifiedCertificateRequired() {
        return Optional.ofNullable(this.isVerifiedCertificateRequired);
    }

    private DeploymentSpecificationRequestPoliciesMutualTlsArgs() {}

    private DeploymentSpecificationRequestPoliciesMutualTlsArgs(DeploymentSpecificationRequestPoliciesMutualTlsArgs $) {
        this.allowedSans = $.allowedSans;
        this.isVerifiedCertificateRequired = $.isVerifiedCertificateRequired;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRequestPoliciesMutualTlsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRequestPoliciesMutualTlsArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRequestPoliciesMutualTlsArgs();
        }

        public Builder(DeploymentSpecificationRequestPoliciesMutualTlsArgs defaults) {
            $ = new DeploymentSpecificationRequestPoliciesMutualTlsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedSans (Updatable) Allowed list of CN or SAN which will be used for verification of certificate.
         * 
         * @return builder
         * 
         */
        public Builder allowedSans(@Nullable Output<List<String>> allowedSans) {
            $.allowedSans = allowedSans;
            return this;
        }

        /**
         * @param allowedSans (Updatable) Allowed list of CN or SAN which will be used for verification of certificate.
         * 
         * @return builder
         * 
         */
        public Builder allowedSans(List<String> allowedSans) {
            return allowedSans(Output.of(allowedSans));
        }

        /**
         * @param allowedSans (Updatable) Allowed list of CN or SAN which will be used for verification of certificate.
         * 
         * @return builder
         * 
         */
        public Builder allowedSans(String... allowedSans) {
            return allowedSans(List.of(allowedSans));
        }

        /**
         * @param isVerifiedCertificateRequired (Updatable) Determines whether to enable client verification when API Consumer makes connection to the gateway.
         * 
         * @return builder
         * 
         */
        public Builder isVerifiedCertificateRequired(@Nullable Output<Boolean> isVerifiedCertificateRequired) {
            $.isVerifiedCertificateRequired = isVerifiedCertificateRequired;
            return this;
        }

        /**
         * @param isVerifiedCertificateRequired (Updatable) Determines whether to enable client verification when API Consumer makes connection to the gateway.
         * 
         * @return builder
         * 
         */
        public Builder isVerifiedCertificateRequired(Boolean isVerifiedCertificateRequired) {
            return isVerifiedCertificateRequired(Output.of(isVerifiedCertificateRequired));
        }

        public DeploymentSpecificationRequestPoliciesMutualTlsArgs build() {
            return $;
        }
    }

}
