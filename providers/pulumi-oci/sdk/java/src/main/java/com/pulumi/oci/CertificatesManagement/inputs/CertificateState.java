// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateCertificateConfigArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateCertificateRevocationListDetailArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateCertificateRuleArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateCurrentVersionArgs;
import com.pulumi.oci.CertificatesManagement.inputs.CertificateSubjectArgs;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * (Updatable) The details of the contents of the certificate and certificate metadata.
     * 
     */
    @Import(name="certificateConfig")
    private @Nullable Output<CertificateCertificateConfigArgs> certificateConfig;

    /**
     * @return (Updatable) The details of the contents of the certificate and certificate metadata.
     * 
     */
    public Optional<Output<CertificateCertificateConfigArgs>> certificateConfig() {
        return Optional.ofNullable(this.certificateConfig);
    }

    /**
     * The name of the profile used to create the certificate, which depends on the type of certificate you need.
     * 
     */
    @Import(name="certificateProfileType")
    private @Nullable Output<String> certificateProfileType;

    /**
     * @return The name of the profile used to create the certificate, which depends on the type of certificate you need.
     * 
     */
    public Optional<Output<String>> certificateProfileType() {
        return Optional.ofNullable(this.certificateProfileType);
    }

    /**
     * The details of the certificate revocation list (CRL).
     * 
     */
    @Import(name="certificateRevocationListDetails")
    private @Nullable Output<List<CertificateCertificateRevocationListDetailArgs>> certificateRevocationListDetails;

    /**
     * @return The details of the certificate revocation list (CRL).
     * 
     */
    public Optional<Output<List<CertificateCertificateRevocationListDetailArgs>>> certificateRevocationListDetails() {
        return Optional.ofNullable(this.certificateRevocationListDetails);
    }

    /**
     * (Updatable) An optional list of rules that control how the certificate is used and managed.
     * 
     */
    @Import(name="certificateRules")
    private @Nullable Output<List<CertificateCertificateRuleArgs>> certificateRules;

    /**
     * @return (Updatable) An optional list of rules that control how the certificate is used and managed.
     * 
     */
    public Optional<Output<List<CertificateCertificateRuleArgs>>> certificateRules() {
        return Optional.ofNullable(this.certificateRules);
    }

    /**
     * (Updatable) The OCID of the compartment where you want to create the certificate.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment where you want to create the certificate.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) The origin of the certificate.
     * 
     */
    @Import(name="configType")
    private @Nullable Output<String> configType;

    /**
     * @return (Updatable) The origin of the certificate.
     * 
     */
    public Optional<Output<String>> configType() {
        return Optional.ofNullable(this.configType);
    }

    /**
     * The details of the certificate version. This object does not contain the certificate contents.
     * 
     */
    @Import(name="currentVersions")
    private @Nullable Output<List<CertificateCurrentVersionArgs>> currentVersions;

    /**
     * @return The details of the certificate version. This object does not contain the certificate contents.
     * 
     */
    public Optional<Output<List<CertificateCurrentVersionArgs>>> currentVersions() {
        return Optional.ofNullable(this.currentVersions);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A brief description of the certificate. Avoid entering confidential information.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A brief description of the certificate. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The OCID of the private CA.
     * 
     */
    @Import(name="issuerCertificateAuthorityId")
    private @Nullable Output<String> issuerCertificateAuthorityId;

    /**
     * @return The OCID of the private CA.
     * 
     */
    public Optional<Output<String>> issuerCertificateAuthorityId() {
        return Optional.ofNullable(this.issuerCertificateAuthorityId);
    }

    /**
     * The algorithm to use to create key pairs.
     * 
     */
    @Import(name="keyAlgorithm")
    private @Nullable Output<String> keyAlgorithm;

    /**
     * @return The algorithm to use to create key pairs.
     * 
     */
    public Optional<Output<String>> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }

    /**
     * Additional information about the current lifecycle state of the certificate.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state of the certificate.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The algorithm to use to sign the public key certificate.
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return The algorithm to use to sign the public key certificate.
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * The current lifecycle state of the certificate.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifecycle state of the certificate.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    @Import(name="subjects")
    private @Nullable Output<List<CertificateSubjectArgs>> subjects;

    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    public Optional<Output<List<CertificateSubjectArgs>>> subjects() {
        return Optional.ofNullable(this.subjects);
    }

    /**
     * A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    @Import(name="timeOfDeletion")
    private @Nullable Output<String> timeOfDeletion;

    /**
     * @return An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public Optional<Output<String>> timeOfDeletion() {
        return Optional.ofNullable(this.timeOfDeletion);
    }

    private CertificateState() {}

    private CertificateState(CertificateState $) {
        this.certificateConfig = $.certificateConfig;
        this.certificateProfileType = $.certificateProfileType;
        this.certificateRevocationListDetails = $.certificateRevocationListDetails;
        this.certificateRules = $.certificateRules;
        this.compartmentId = $.compartmentId;
        this.configType = $.configType;
        this.currentVersions = $.currentVersions;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.freeformTags = $.freeformTags;
        this.issuerCertificateAuthorityId = $.issuerCertificateAuthorityId;
        this.keyAlgorithm = $.keyAlgorithm;
        this.lifecycleDetails = $.lifecycleDetails;
        this.name = $.name;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.state = $.state;
        this.subjects = $.subjects;
        this.timeCreated = $.timeCreated;
        this.timeOfDeletion = $.timeOfDeletion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateState $;

        public Builder() {
            $ = new CertificateState();
        }

        public Builder(CertificateState defaults) {
            $ = new CertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateConfig (Updatable) The details of the contents of the certificate and certificate metadata.
         * 
         * @return builder
         * 
         */
        public Builder certificateConfig(@Nullable Output<CertificateCertificateConfigArgs> certificateConfig) {
            $.certificateConfig = certificateConfig;
            return this;
        }

        /**
         * @param certificateConfig (Updatable) The details of the contents of the certificate and certificate metadata.
         * 
         * @return builder
         * 
         */
        public Builder certificateConfig(CertificateCertificateConfigArgs certificateConfig) {
            return certificateConfig(Output.of(certificateConfig));
        }

        /**
         * @param certificateProfileType The name of the profile used to create the certificate, which depends on the type of certificate you need.
         * 
         * @return builder
         * 
         */
        public Builder certificateProfileType(@Nullable Output<String> certificateProfileType) {
            $.certificateProfileType = certificateProfileType;
            return this;
        }

        /**
         * @param certificateProfileType The name of the profile used to create the certificate, which depends on the type of certificate you need.
         * 
         * @return builder
         * 
         */
        public Builder certificateProfileType(String certificateProfileType) {
            return certificateProfileType(Output.of(certificateProfileType));
        }

        /**
         * @param certificateRevocationListDetails The details of the certificate revocation list (CRL).
         * 
         * @return builder
         * 
         */
        public Builder certificateRevocationListDetails(@Nullable Output<List<CertificateCertificateRevocationListDetailArgs>> certificateRevocationListDetails) {
            $.certificateRevocationListDetails = certificateRevocationListDetails;
            return this;
        }

        /**
         * @param certificateRevocationListDetails The details of the certificate revocation list (CRL).
         * 
         * @return builder
         * 
         */
        public Builder certificateRevocationListDetails(List<CertificateCertificateRevocationListDetailArgs> certificateRevocationListDetails) {
            return certificateRevocationListDetails(Output.of(certificateRevocationListDetails));
        }

        /**
         * @param certificateRevocationListDetails The details of the certificate revocation list (CRL).
         * 
         * @return builder
         * 
         */
        public Builder certificateRevocationListDetails(CertificateCertificateRevocationListDetailArgs... certificateRevocationListDetails) {
            return certificateRevocationListDetails(List.of(certificateRevocationListDetails));
        }

        /**
         * @param certificateRules (Updatable) An optional list of rules that control how the certificate is used and managed.
         * 
         * @return builder
         * 
         */
        public Builder certificateRules(@Nullable Output<List<CertificateCertificateRuleArgs>> certificateRules) {
            $.certificateRules = certificateRules;
            return this;
        }

        /**
         * @param certificateRules (Updatable) An optional list of rules that control how the certificate is used and managed.
         * 
         * @return builder
         * 
         */
        public Builder certificateRules(List<CertificateCertificateRuleArgs> certificateRules) {
            return certificateRules(Output.of(certificateRules));
        }

        /**
         * @param certificateRules (Updatable) An optional list of rules that control how the certificate is used and managed.
         * 
         * @return builder
         * 
         */
        public Builder certificateRules(CertificateCertificateRuleArgs... certificateRules) {
            return certificateRules(List.of(certificateRules));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where you want to create the certificate.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where you want to create the certificate.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configType (Updatable) The origin of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder configType(@Nullable Output<String> configType) {
            $.configType = configType;
            return this;
        }

        /**
         * @param configType (Updatable) The origin of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        /**
         * @param currentVersions The details of the certificate version. This object does not contain the certificate contents.
         * 
         * @return builder
         * 
         */
        public Builder currentVersions(@Nullable Output<List<CertificateCurrentVersionArgs>> currentVersions) {
            $.currentVersions = currentVersions;
            return this;
        }

        /**
         * @param currentVersions The details of the certificate version. This object does not contain the certificate contents.
         * 
         * @return builder
         * 
         */
        public Builder currentVersions(List<CertificateCurrentVersionArgs> currentVersions) {
            return currentVersions(Output.of(currentVersions));
        }

        /**
         * @param currentVersions The details of the certificate version. This object does not contain the certificate contents.
         * 
         * @return builder
         * 
         */
        public Builder currentVersions(CertificateCurrentVersionArgs... currentVersions) {
            return currentVersions(List.of(currentVersions));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A brief description of the certificate. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A brief description of the certificate. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param issuerCertificateAuthorityId The OCID of the private CA.
         * 
         * @return builder
         * 
         */
        public Builder issuerCertificateAuthorityId(@Nullable Output<String> issuerCertificateAuthorityId) {
            $.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            return this;
        }

        /**
         * @param issuerCertificateAuthorityId The OCID of the private CA.
         * 
         * @return builder
         * 
         */
        public Builder issuerCertificateAuthorityId(String issuerCertificateAuthorityId) {
            return issuerCertificateAuthorityId(Output.of(issuerCertificateAuthorityId));
        }

        /**
         * @param keyAlgorithm The algorithm to use to create key pairs.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(@Nullable Output<String> keyAlgorithm) {
            $.keyAlgorithm = keyAlgorithm;
            return this;
        }

        /**
         * @param keyAlgorithm The algorithm to use to create key pairs.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(String keyAlgorithm) {
            return keyAlgorithm(Output.of(keyAlgorithm));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param name A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param signatureAlgorithm The algorithm to use to sign the public key certificate.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm The algorithm to use to sign the public key certificate.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param state The current lifecycle state of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifecycle state of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subjects The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjects(@Nullable Output<List<CertificateSubjectArgs>> subjects) {
            $.subjects = subjects;
            return this;
        }

        /**
         * @param subjects The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjects(List<CertificateSubjectArgs> subjects) {
            return subjects(Output.of(subjects));
        }

        /**
         * @param subjects The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjects(CertificateSubjectArgs... subjects) {
            return subjects(List.of(subjects));
        }

        /**
         * @param timeCreated A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeOfDeletion An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeOfDeletion(@Nullable Output<String> timeOfDeletion) {
            $.timeOfDeletion = timeOfDeletion;
            return this;
        }

        /**
         * @param timeOfDeletion An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
         * 
         * @return builder
         * 
         */
        public Builder timeOfDeletion(String timeOfDeletion) {
            return timeOfDeletion(Output.of(timeOfDeletion));
        }

        public CertificateState build() {
            return $;
        }
    }

}
