// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CloudGuard.inputs.TargetTargetDetectorRecipeDetectorRuleArgs;
import com.pulumi.oci.CloudGuard.inputs.TargetTargetDetectorRecipeEffectiveDetectorRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetTargetDetectorRecipeArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetTargetDetectorRecipeArgs Empty = new TargetTargetDetectorRecipeArgs();

    /**
     * (Updatable) compartment associated with condition
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) compartment associated with condition
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The target description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The target description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * detector for the rule
     * 
     */
    @Import(name="detector")
    private @Nullable Output<String> detector;

    /**
     * @return detector for the rule
     * 
     */
    public Optional<Output<String>> detector() {
        return Optional.ofNullable(this.detector);
    }

    /**
     * Identifier for DetectorRecipe.
     * 
     */
    @Import(name="detectorRecipeId", required=true)
    private Output<String> detectorRecipeId;

    /**
     * @return Identifier for DetectorRecipe.
     * 
     */
    public Output<String> detectorRecipeId() {
        return this.detectorRecipeId;
    }

    /**
     * (Updatable) Overrides to be applied to Detector Rule associated with the target
     * 
     */
    @Import(name="detectorRules")
    private @Nullable Output<List<TargetTargetDetectorRecipeDetectorRuleArgs>> detectorRules;

    /**
     * @return (Updatable) Overrides to be applied to Detector Rule associated with the target
     * 
     */
    public Optional<Output<List<TargetTargetDetectorRecipeDetectorRuleArgs>>> detectorRules() {
        return Optional.ofNullable(this.detectorRules);
    }

    /**
     * (Updatable) DetectorTemplate Identifier
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) DetectorTemplate Identifier
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * List of effective detector rules for the detector type for recipe after applying defaults
     * 
     */
    @Import(name="effectiveDetectorRules")
    private @Nullable Output<List<TargetTargetDetectorRecipeEffectiveDetectorRuleArgs>> effectiveDetectorRules;

    /**
     * @return List of effective detector rules for the detector type for recipe after applying defaults
     * 
     */
    public Optional<Output<List<TargetTargetDetectorRecipeEffectiveDetectorRuleArgs>>> effectiveDetectorRules() {
        return Optional.ofNullable(this.effectiveDetectorRules);
    }

    /**
     * Unique identifier of TargetResponderRecipe that is immutable on creation
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique identifier of TargetResponderRecipe that is immutable on creation
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Owner of ResponderRecipe
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return Owner of ResponderRecipe
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * (Updatable) The current state of the DetectorRule.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Updatable) The current state of the DetectorRule.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the target was created. Format defined by RFC3339.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the target was created. Format defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time the target was updated. Format defined by RFC3339.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time the target was updated. Format defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private TargetTargetDetectorRecipeArgs() {}

    private TargetTargetDetectorRecipeArgs(TargetTargetDetectorRecipeArgs $) {
        this.compartmentId = $.compartmentId;
        this.description = $.description;
        this.detector = $.detector;
        this.detectorRecipeId = $.detectorRecipeId;
        this.detectorRules = $.detectorRules;
        this.displayName = $.displayName;
        this.effectiveDetectorRules = $.effectiveDetectorRules;
        this.id = $.id;
        this.owner = $.owner;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetTargetDetectorRecipeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetTargetDetectorRecipeArgs $;

        public Builder() {
            $ = new TargetTargetDetectorRecipeArgs();
        }

        public Builder(TargetTargetDetectorRecipeArgs defaults) {
            $ = new TargetTargetDetectorRecipeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) compartment associated with condition
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) compartment associated with condition
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param description The target description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The target description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param detector detector for the rule
         * 
         * @return builder
         * 
         */
        public Builder detector(@Nullable Output<String> detector) {
            $.detector = detector;
            return this;
        }

        /**
         * @param detector detector for the rule
         * 
         * @return builder
         * 
         */
        public Builder detector(String detector) {
            return detector(Output.of(detector));
        }

        /**
         * @param detectorRecipeId Identifier for DetectorRecipe.
         * 
         * @return builder
         * 
         */
        public Builder detectorRecipeId(Output<String> detectorRecipeId) {
            $.detectorRecipeId = detectorRecipeId;
            return this;
        }

        /**
         * @param detectorRecipeId Identifier for DetectorRecipe.
         * 
         * @return builder
         * 
         */
        public Builder detectorRecipeId(String detectorRecipeId) {
            return detectorRecipeId(Output.of(detectorRecipeId));
        }

        /**
         * @param detectorRules (Updatable) Overrides to be applied to Detector Rule associated with the target
         * 
         * @return builder
         * 
         */
        public Builder detectorRules(@Nullable Output<List<TargetTargetDetectorRecipeDetectorRuleArgs>> detectorRules) {
            $.detectorRules = detectorRules;
            return this;
        }

        /**
         * @param detectorRules (Updatable) Overrides to be applied to Detector Rule associated with the target
         * 
         * @return builder
         * 
         */
        public Builder detectorRules(List<TargetTargetDetectorRecipeDetectorRuleArgs> detectorRules) {
            return detectorRules(Output.of(detectorRules));
        }

        /**
         * @param detectorRules (Updatable) Overrides to be applied to Detector Rule associated with the target
         * 
         * @return builder
         * 
         */
        public Builder detectorRules(TargetTargetDetectorRecipeDetectorRuleArgs... detectorRules) {
            return detectorRules(List.of(detectorRules));
        }

        /**
         * @param displayName (Updatable) DetectorTemplate Identifier
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) DetectorTemplate Identifier
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param effectiveDetectorRules List of effective detector rules for the detector type for recipe after applying defaults
         * 
         * @return builder
         * 
         */
        public Builder effectiveDetectorRules(@Nullable Output<List<TargetTargetDetectorRecipeEffectiveDetectorRuleArgs>> effectiveDetectorRules) {
            $.effectiveDetectorRules = effectiveDetectorRules;
            return this;
        }

        /**
         * @param effectiveDetectorRules List of effective detector rules for the detector type for recipe after applying defaults
         * 
         * @return builder
         * 
         */
        public Builder effectiveDetectorRules(List<TargetTargetDetectorRecipeEffectiveDetectorRuleArgs> effectiveDetectorRules) {
            return effectiveDetectorRules(Output.of(effectiveDetectorRules));
        }

        /**
         * @param effectiveDetectorRules List of effective detector rules for the detector type for recipe after applying defaults
         * 
         * @return builder
         * 
         */
        public Builder effectiveDetectorRules(TargetTargetDetectorRecipeEffectiveDetectorRuleArgs... effectiveDetectorRules) {
            return effectiveDetectorRules(List.of(effectiveDetectorRules));
        }

        /**
         * @param id Unique identifier of TargetResponderRecipe that is immutable on creation
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier of TargetResponderRecipe that is immutable on creation
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param owner Owner of ResponderRecipe
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Owner of ResponderRecipe
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param state (Updatable) The current state of the DetectorRule.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Updatable) The current state of the DetectorRule.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the target was created. Format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the target was created. Format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The date and time the target was updated. Format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time the target was updated. Format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public TargetTargetDetectorRecipeArgs build() {
            $.detectorRecipeId = Objects.requireNonNull($.detectorRecipeId, "expected parameter 'detectorRecipeId' to be non-null");
            return $;
        }
    }

}
