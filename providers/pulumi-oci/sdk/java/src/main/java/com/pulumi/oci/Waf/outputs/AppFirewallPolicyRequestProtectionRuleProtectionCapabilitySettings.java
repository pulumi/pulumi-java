// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waf.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings {
    /**
     * @return (Updatable) List of allowed HTTP methods. Each value as a RFC7230 formated token string. Used in protection capability 911100: Restrict HTTP Request Methods.
     * 
     */
    private final @Nullable List<String> allowedHttpMethods;
    /**
     * @return (Updatable) Maximum allowed length of headers in an HTTP request. Used in protection capability: 9200024: Limit length of request header size.
     * 
     */
    private final @Nullable Integer maxHttpRequestHeaderLength;
    /**
     * @return (Updatable) Maximum number of headers allowed in an HTTP request. Used in protection capability 9200014: Limit Number of Request Headers.
     * 
     */
    private final @Nullable Integer maxHttpRequestHeaders;
    /**
     * @return (Updatable) Maximum number of arguments allowed. Used in protection capability 920380: Number of Arguments Limits.
     * 
     */
    private final @Nullable Integer maxNumberOfArguments;
    /**
     * @return (Updatable) Maximum allowed length of a single argument. Used in protection capability 920370: Limit argument value length.
     * 
     */
    private final @Nullable Integer maxSingleArgumentLength;
    /**
     * @return (Updatable) Maximum allowed total length of all arguments. Used in protection capability 920390: Limit arguments total length.
     * 
     */
    private final @Nullable Integer maxTotalArgumentLength;

    @CustomType.Constructor
    private AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings(
        @CustomType.Parameter("allowedHttpMethods") @Nullable List<String> allowedHttpMethods,
        @CustomType.Parameter("maxHttpRequestHeaderLength") @Nullable Integer maxHttpRequestHeaderLength,
        @CustomType.Parameter("maxHttpRequestHeaders") @Nullable Integer maxHttpRequestHeaders,
        @CustomType.Parameter("maxNumberOfArguments") @Nullable Integer maxNumberOfArguments,
        @CustomType.Parameter("maxSingleArgumentLength") @Nullable Integer maxSingleArgumentLength,
        @CustomType.Parameter("maxTotalArgumentLength") @Nullable Integer maxTotalArgumentLength) {
        this.allowedHttpMethods = allowedHttpMethods;
        this.maxHttpRequestHeaderLength = maxHttpRequestHeaderLength;
        this.maxHttpRequestHeaders = maxHttpRequestHeaders;
        this.maxNumberOfArguments = maxNumberOfArguments;
        this.maxSingleArgumentLength = maxSingleArgumentLength;
        this.maxTotalArgumentLength = maxTotalArgumentLength;
    }

    /**
     * @return (Updatable) List of allowed HTTP methods. Each value as a RFC7230 formated token string. Used in protection capability 911100: Restrict HTTP Request Methods.
     * 
     */
    public List<String> allowedHttpMethods() {
        return this.allowedHttpMethods == null ? List.of() : this.allowedHttpMethods;
    }
    /**
     * @return (Updatable) Maximum allowed length of headers in an HTTP request. Used in protection capability: 9200024: Limit length of request header size.
     * 
     */
    public Optional<Integer> maxHttpRequestHeaderLength() {
        return Optional.ofNullable(this.maxHttpRequestHeaderLength);
    }
    /**
     * @return (Updatable) Maximum number of headers allowed in an HTTP request. Used in protection capability 9200014: Limit Number of Request Headers.
     * 
     */
    public Optional<Integer> maxHttpRequestHeaders() {
        return Optional.ofNullable(this.maxHttpRequestHeaders);
    }
    /**
     * @return (Updatable) Maximum number of arguments allowed. Used in protection capability 920380: Number of Arguments Limits.
     * 
     */
    public Optional<Integer> maxNumberOfArguments() {
        return Optional.ofNullable(this.maxNumberOfArguments);
    }
    /**
     * @return (Updatable) Maximum allowed length of a single argument. Used in protection capability 920370: Limit argument value length.
     * 
     */
    public Optional<Integer> maxSingleArgumentLength() {
        return Optional.ofNullable(this.maxSingleArgumentLength);
    }
    /**
     * @return (Updatable) Maximum allowed total length of all arguments. Used in protection capability 920390: Limit arguments total length.
     * 
     */
    public Optional<Integer> maxTotalArgumentLength() {
        return Optional.ofNullable(this.maxTotalArgumentLength);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> allowedHttpMethods;
        private @Nullable Integer maxHttpRequestHeaderLength;
        private @Nullable Integer maxHttpRequestHeaders;
        private @Nullable Integer maxNumberOfArguments;
        private @Nullable Integer maxSingleArgumentLength;
        private @Nullable Integer maxTotalArgumentLength;

        public Builder() {
    	      // Empty
        }

        public Builder(AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedHttpMethods = defaults.allowedHttpMethods;
    	      this.maxHttpRequestHeaderLength = defaults.maxHttpRequestHeaderLength;
    	      this.maxHttpRequestHeaders = defaults.maxHttpRequestHeaders;
    	      this.maxNumberOfArguments = defaults.maxNumberOfArguments;
    	      this.maxSingleArgumentLength = defaults.maxSingleArgumentLength;
    	      this.maxTotalArgumentLength = defaults.maxTotalArgumentLength;
        }

        public Builder allowedHttpMethods(@Nullable List<String> allowedHttpMethods) {
            this.allowedHttpMethods = allowedHttpMethods;
            return this;
        }
        public Builder allowedHttpMethods(String... allowedHttpMethods) {
            return allowedHttpMethods(List.of(allowedHttpMethods));
        }
        public Builder maxHttpRequestHeaderLength(@Nullable Integer maxHttpRequestHeaderLength) {
            this.maxHttpRequestHeaderLength = maxHttpRequestHeaderLength;
            return this;
        }
        public Builder maxHttpRequestHeaders(@Nullable Integer maxHttpRequestHeaders) {
            this.maxHttpRequestHeaders = maxHttpRequestHeaders;
            return this;
        }
        public Builder maxNumberOfArguments(@Nullable Integer maxNumberOfArguments) {
            this.maxNumberOfArguments = maxNumberOfArguments;
            return this;
        }
        public Builder maxSingleArgumentLength(@Nullable Integer maxSingleArgumentLength) {
            this.maxSingleArgumentLength = maxSingleArgumentLength;
            return this;
        }
        public Builder maxTotalArgumentLength(@Nullable Integer maxTotalArgumentLength) {
            this.maxTotalArgumentLength = maxTotalArgumentLength;
            return this;
        }        public AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings build() {
            return new AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings(allowedHttpMethods, maxHttpRequestHeaderLength, maxHttpRequestHeaders, maxNumberOfArguments, maxSingleArgumentLength, maxTotalArgumentLength);
        }
    }
}
