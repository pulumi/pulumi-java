// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.GetRouteTableFilter;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRouteTableArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetRouteTableArgs Empty = new GetRouteTableArgs();

    /**
     * Configuration block. Detailed below.
     * 
     */
    @Import(name="filters")
      private final @Nullable List<GetRouteTableFilter> filters;

    public List<GetRouteTableFilter> getFilters() {
        return this.filters == null ? List.of() : this.filters;
    }

    /**
     * ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
     * 
     */
    @Import(name="gatewayId")
      private final @Nullable String gatewayId;

    public Optional<String> getGatewayId() {
        return this.gatewayId == null ? Optional.empty() : Optional.ofNullable(this.gatewayId);
    }

    /**
     * ID of the specific Route Table to retrieve.
     * 
     */
    @Import(name="routeTableId")
      private final @Nullable String routeTableId;

    public Optional<String> getRouteTableId() {
        return this.routeTableId == null ? Optional.empty() : Optional.ofNullable(this.routeTableId);
    }

    /**
     * ID of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
     * 
     */
    @Import(name="subnetId")
      private final @Nullable String subnetId;

    public Optional<String> getSubnetId() {
        return this.subnetId == null ? Optional.empty() : Optional.ofNullable(this.subnetId);
    }

    /**
     * Map of tags, each pair of which must exactly match a pair on the desired Route Table.
     * 
     */
    @Import(name="tags")
      private final @Nullable Map<String,String> tags;

    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    /**
     * ID of the VPC that the desired Route Table belongs to.
     * 
     */
    @Import(name="vpcId")
      private final @Nullable String vpcId;

    public Optional<String> getVpcId() {
        return this.vpcId == null ? Optional.empty() : Optional.ofNullable(this.vpcId);
    }

    public GetRouteTableArgs(
        @Nullable List<GetRouteTableFilter> filters,
        @Nullable String gatewayId,
        @Nullable String routeTableId,
        @Nullable String subnetId,
        @Nullable Map<String,String> tags,
        @Nullable String vpcId) {
        this.filters = filters;
        this.gatewayId = gatewayId;
        this.routeTableId = routeTableId;
        this.subnetId = subnetId;
        this.tags = tags;
        this.vpcId = vpcId;
    }

    private GetRouteTableArgs() {
        this.filters = List.of();
        this.gatewayId = null;
        this.routeTableId = null;
        this.subnetId = null;
        this.tags = Map.of();
        this.vpcId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<GetRouteTableFilter> filters;
        private @Nullable String gatewayId;
        private @Nullable String routeTableId;
        private @Nullable String subnetId;
        private @Nullable Map<String,String> tags;
        private @Nullable String vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRouteTableArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.gatewayId = defaults.gatewayId;
    	      this.routeTableId = defaults.routeTableId;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder filters(@Nullable List<GetRouteTableFilter> filters) {
            this.filters = filters;
            return this;
        }

        public Builder gatewayId(@Nullable String gatewayId) {
            this.gatewayId = gatewayId;
            return this;
        }

        public Builder routeTableId(@Nullable String routeTableId) {
            this.routeTableId = routeTableId;
            return this;
        }

        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        public GetRouteTableArgs build() {
            return new GetRouteTableArgs(filters, gatewayId, routeTableId, subnetId, tags, vpcId);
        }
    }
}
