// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.datasync;

import io.pulumi.aws.datasync.inputs.NfsLocationMountOptionsArgs;
import io.pulumi.aws.datasync.inputs.NfsLocationOnPremConfigArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NfsLocationArgs extends io.pulumi.resources.ResourceArgs {

    public static final NfsLocationArgs Empty = new NfsLocationArgs();

    /**
     * Configuration block containing mount options used by DataSync to access the NFS Server.
     * 
     */
    @Import(name="mountOptions")
      private final @Nullable Output<NfsLocationMountOptionsArgs> mountOptions;

    public Output<NfsLocationMountOptionsArgs> mountOptions() {
        return this.mountOptions == null ? Codegen.empty() : this.mountOptions;
    }

    /**
     * Configuration block containing information for connecting to the NFS File System.
     * 
     */
    @Import(name="onPremConfig", required=true)
      private final Output<NfsLocationOnPremConfigArgs> onPremConfig;

    public Output<NfsLocationOnPremConfigArgs> onPremConfig() {
        return this.onPremConfig;
    }

    /**
     * Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
     * 
     */
    @Import(name="serverHostname", required=true)
      private final Output<String> serverHostname;

    public Output<String> serverHostname() {
        return this.serverHostname;
    }

    /**
     * Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
     * 
     */
    @Import(name="subdirectory", required=true)
      private final Output<String> subdirectory;

    public Output<String> subdirectory() {
        return this.subdirectory;
    }

    /**
     * Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public NfsLocationArgs(
        @Nullable Output<NfsLocationMountOptionsArgs> mountOptions,
        Output<NfsLocationOnPremConfigArgs> onPremConfig,
        Output<String> serverHostname,
        Output<String> subdirectory,
        @Nullable Output<Map<String,String>> tags) {
        this.mountOptions = mountOptions;
        this.onPremConfig = Objects.requireNonNull(onPremConfig, "expected parameter 'onPremConfig' to be non-null");
        this.serverHostname = Objects.requireNonNull(serverHostname, "expected parameter 'serverHostname' to be non-null");
        this.subdirectory = Objects.requireNonNull(subdirectory, "expected parameter 'subdirectory' to be non-null");
        this.tags = tags;
    }

    private NfsLocationArgs() {
        this.mountOptions = Codegen.empty();
        this.onPremConfig = Codegen.empty();
        this.serverHostname = Codegen.empty();
        this.subdirectory = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NfsLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<NfsLocationMountOptionsArgs> mountOptions;
        private Output<NfsLocationOnPremConfigArgs> onPremConfig;
        private Output<String> serverHostname;
        private Output<String> subdirectory;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(NfsLocationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mountOptions = defaults.mountOptions;
    	      this.onPremConfig = defaults.onPremConfig;
    	      this.serverHostname = defaults.serverHostname;
    	      this.subdirectory = defaults.subdirectory;
    	      this.tags = defaults.tags;
        }

        public Builder mountOptions(@Nullable Output<NfsLocationMountOptionsArgs> mountOptions) {
            this.mountOptions = mountOptions;
            return this;
        }
        public Builder mountOptions(@Nullable NfsLocationMountOptionsArgs mountOptions) {
            this.mountOptions = Codegen.ofNullable(mountOptions);
            return this;
        }
        public Builder onPremConfig(Output<NfsLocationOnPremConfigArgs> onPremConfig) {
            this.onPremConfig = Objects.requireNonNull(onPremConfig);
            return this;
        }
        public Builder onPremConfig(NfsLocationOnPremConfigArgs onPremConfig) {
            this.onPremConfig = Output.of(Objects.requireNonNull(onPremConfig));
            return this;
        }
        public Builder serverHostname(Output<String> serverHostname) {
            this.serverHostname = Objects.requireNonNull(serverHostname);
            return this;
        }
        public Builder serverHostname(String serverHostname) {
            this.serverHostname = Output.of(Objects.requireNonNull(serverHostname));
            return this;
        }
        public Builder subdirectory(Output<String> subdirectory) {
            this.subdirectory = Objects.requireNonNull(subdirectory);
            return this;
        }
        public Builder subdirectory(String subdirectory) {
            this.subdirectory = Output.of(Objects.requireNonNull(subdirectory));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public NfsLocationArgs build() {
            return new NfsLocationArgs(mountOptions, onPremConfig, serverHostname, subdirectory, tags);
        }
    }
}
