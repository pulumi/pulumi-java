// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.dynamodb.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TableGlobalSecondaryIndexArgs extends io.pulumi.resources.ResourceArgs {

    public static final TableGlobalSecondaryIndexArgs Empty = new TableGlobalSecondaryIndexArgs();

    /**
     * The name of the hash key in the index; must be
     * defined as an attribute in the resource.
     * 
     */
    @InputImport(name="hashKey", required=true)
      private final Input<String> hashKey;

    public Input<String> getHashKey() {
        return this.hashKey;
    }

    /**
     * The name of the index
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * Only required with `INCLUDE` as a
     * projection type; a list of attributes to project into the index. These
     * do not need to be defined as attributes on the table.
     * 
     */
    @InputImport(name="nonKeyAttributes")
      private final @Nullable Input<List<String>> nonKeyAttributes;

    public Input<List<String>> getNonKeyAttributes() {
        return this.nonKeyAttributes == null ? Input.empty() : this.nonKeyAttributes;
    }

    /**
     * One of `ALL`, `INCLUDE` or `KEYS_ONLY`
     * where `ALL` projects every attribute into the index, `KEYS_ONLY`
     * projects just the hash and range key into the index, and `INCLUDE`
     * projects only the keys specified in the _non_key_attributes_
     * parameter.
     * 
     */
    @InputImport(name="projectionType", required=true)
      private final Input<String> projectionType;

    public Input<String> getProjectionType() {
        return this.projectionType;
    }

    /**
     * The name of the range key; must be defined
     * 
     */
    @InputImport(name="rangeKey")
      private final @Nullable Input<String> rangeKey;

    public Input<String> getRangeKey() {
        return this.rangeKey == null ? Input.empty() : this.rangeKey;
    }

    /**
     * The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
     * 
     */
    @InputImport(name="readCapacity")
      private final @Nullable Input<Integer> readCapacity;

    public Input<Integer> getReadCapacity() {
        return this.readCapacity == null ? Input.empty() : this.readCapacity;
    }

    /**
     * The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
     * 
     */
    @InputImport(name="writeCapacity")
      private final @Nullable Input<Integer> writeCapacity;

    public Input<Integer> getWriteCapacity() {
        return this.writeCapacity == null ? Input.empty() : this.writeCapacity;
    }

    public TableGlobalSecondaryIndexArgs(
        Input<String> hashKey,
        Input<String> name,
        @Nullable Input<List<String>> nonKeyAttributes,
        Input<String> projectionType,
        @Nullable Input<String> rangeKey,
        @Nullable Input<Integer> readCapacity,
        @Nullable Input<Integer> writeCapacity) {
        this.hashKey = Objects.requireNonNull(hashKey, "expected parameter 'hashKey' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.nonKeyAttributes = nonKeyAttributes;
        this.projectionType = Objects.requireNonNull(projectionType, "expected parameter 'projectionType' to be non-null");
        this.rangeKey = rangeKey;
        this.readCapacity = readCapacity;
        this.writeCapacity = writeCapacity;
    }

    private TableGlobalSecondaryIndexArgs() {
        this.hashKey = Input.empty();
        this.name = Input.empty();
        this.nonKeyAttributes = Input.empty();
        this.projectionType = Input.empty();
        this.rangeKey = Input.empty();
        this.readCapacity = Input.empty();
        this.writeCapacity = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableGlobalSecondaryIndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> hashKey;
        private Input<String> name;
        private @Nullable Input<List<String>> nonKeyAttributes;
        private Input<String> projectionType;
        private @Nullable Input<String> rangeKey;
        private @Nullable Input<Integer> readCapacity;
        private @Nullable Input<Integer> writeCapacity;

        public Builder() {
    	      // Empty
        }

        public Builder(TableGlobalSecondaryIndexArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hashKey = defaults.hashKey;
    	      this.name = defaults.name;
    	      this.nonKeyAttributes = defaults.nonKeyAttributes;
    	      this.projectionType = defaults.projectionType;
    	      this.rangeKey = defaults.rangeKey;
    	      this.readCapacity = defaults.readCapacity;
    	      this.writeCapacity = defaults.writeCapacity;
        }

        public Builder setHashKey(Input<String> hashKey) {
            this.hashKey = Objects.requireNonNull(hashKey);
            return this;
        }

        public Builder setHashKey(String hashKey) {
            this.hashKey = Input.of(Objects.requireNonNull(hashKey));
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setNonKeyAttributes(@Nullable Input<List<String>> nonKeyAttributes) {
            this.nonKeyAttributes = nonKeyAttributes;
            return this;
        }

        public Builder setNonKeyAttributes(@Nullable List<String> nonKeyAttributes) {
            this.nonKeyAttributes = Input.ofNullable(nonKeyAttributes);
            return this;
        }

        public Builder setProjectionType(Input<String> projectionType) {
            this.projectionType = Objects.requireNonNull(projectionType);
            return this;
        }

        public Builder setProjectionType(String projectionType) {
            this.projectionType = Input.of(Objects.requireNonNull(projectionType));
            return this;
        }

        public Builder setRangeKey(@Nullable Input<String> rangeKey) {
            this.rangeKey = rangeKey;
            return this;
        }

        public Builder setRangeKey(@Nullable String rangeKey) {
            this.rangeKey = Input.ofNullable(rangeKey);
            return this;
        }

        public Builder setReadCapacity(@Nullable Input<Integer> readCapacity) {
            this.readCapacity = readCapacity;
            return this;
        }

        public Builder setReadCapacity(@Nullable Integer readCapacity) {
            this.readCapacity = Input.ofNullable(readCapacity);
            return this;
        }

        public Builder setWriteCapacity(@Nullable Input<Integer> writeCapacity) {
            this.writeCapacity = writeCapacity;
            return this;
        }

        public Builder setWriteCapacity(@Nullable Integer writeCapacity) {
            this.writeCapacity = Input.ofNullable(writeCapacity);
            return this;
        }
        public TableGlobalSecondaryIndexArgs build() {
            return new TableGlobalSecondaryIndexArgs(hashKey, name, nonKeyAttributes, projectionType, rangeKey, readCapacity, writeCapacity);
        }
    }
}
