// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elastictranscoder.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PresetVideoWatermarkGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final PresetVideoWatermarkGetArgs Empty = new PresetVideoWatermarkGetArgs();

    /**
     * The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
     * 
     */
    @Import(name="horizontalAlign")
      private final @Nullable Output<String> horizontalAlign;

    public Output<String> getHorizontalAlign() {
        return this.horizontalAlign == null ? Output.empty() : this.horizontalAlign;
    }

    /**
     * The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
     * 
     */
    @Import(name="horizontalOffset")
      private final @Nullable Output<String> horizontalOffset;

    public Output<String> getHorizontalOffset() {
        return this.horizontalOffset == null ? Output.empty() : this.horizontalOffset;
    }

    /**
     * A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> getId() {
        return this.id == null ? Output.empty() : this.id;
    }

    /**
     * The maximum height of the watermark.
     * 
     */
    @Import(name="maxHeight")
      private final @Nullable Output<String> maxHeight;

    public Output<String> getMaxHeight() {
        return this.maxHeight == null ? Output.empty() : this.maxHeight;
    }

    /**
     * The maximum width of the watermark.
     * 
     */
    @Import(name="maxWidth")
      private final @Nullable Output<String> maxWidth;

    public Output<String> getMaxWidth() {
        return this.maxWidth == null ? Output.empty() : this.maxWidth;
    }

    /**
     * A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
     * 
     */
    @Import(name="opacity")
      private final @Nullable Output<String> opacity;

    public Output<String> getOpacity() {
        return this.opacity == null ? Output.empty() : this.opacity;
    }

    /**
     * A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
     * 
     */
    @Import(name="sizingPolicy")
      private final @Nullable Output<String> sizingPolicy;

    public Output<String> getSizingPolicy() {
        return this.sizingPolicy == null ? Output.empty() : this.sizingPolicy;
    }

    /**
     * A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
     * 
     */
    @Import(name="target")
      private final @Nullable Output<String> target;

    public Output<String> getTarget() {
        return this.target == null ? Output.empty() : this.target;
    }

    /**
     * The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
     * 
     */
    @Import(name="verticalAlign")
      private final @Nullable Output<String> verticalAlign;

    public Output<String> getVerticalAlign() {
        return this.verticalAlign == null ? Output.empty() : this.verticalAlign;
    }

    /**
     * The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
     * 
     */
    @Import(name="verticalOffset")
      private final @Nullable Output<String> verticalOffset;

    public Output<String> getVerticalOffset() {
        return this.verticalOffset == null ? Output.empty() : this.verticalOffset;
    }

    public PresetVideoWatermarkGetArgs(
        @Nullable Output<String> horizontalAlign,
        @Nullable Output<String> horizontalOffset,
        @Nullable Output<String> id,
        @Nullable Output<String> maxHeight,
        @Nullable Output<String> maxWidth,
        @Nullable Output<String> opacity,
        @Nullable Output<String> sizingPolicy,
        @Nullable Output<String> target,
        @Nullable Output<String> verticalAlign,
        @Nullable Output<String> verticalOffset) {
        this.horizontalAlign = horizontalAlign;
        this.horizontalOffset = horizontalOffset;
        this.id = id;
        this.maxHeight = maxHeight;
        this.maxWidth = maxWidth;
        this.opacity = opacity;
        this.sizingPolicy = sizingPolicy;
        this.target = target;
        this.verticalAlign = verticalAlign;
        this.verticalOffset = verticalOffset;
    }

    private PresetVideoWatermarkGetArgs() {
        this.horizontalAlign = Output.empty();
        this.horizontalOffset = Output.empty();
        this.id = Output.empty();
        this.maxHeight = Output.empty();
        this.maxWidth = Output.empty();
        this.opacity = Output.empty();
        this.sizingPolicy = Output.empty();
        this.target = Output.empty();
        this.verticalAlign = Output.empty();
        this.verticalOffset = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PresetVideoWatermarkGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> horizontalAlign;
        private @Nullable Output<String> horizontalOffset;
        private @Nullable Output<String> id;
        private @Nullable Output<String> maxHeight;
        private @Nullable Output<String> maxWidth;
        private @Nullable Output<String> opacity;
        private @Nullable Output<String> sizingPolicy;
        private @Nullable Output<String> target;
        private @Nullable Output<String> verticalAlign;
        private @Nullable Output<String> verticalOffset;

        public Builder() {
    	      // Empty
        }

        public Builder(PresetVideoWatermarkGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.horizontalAlign = defaults.horizontalAlign;
    	      this.horizontalOffset = defaults.horizontalOffset;
    	      this.id = defaults.id;
    	      this.maxHeight = defaults.maxHeight;
    	      this.maxWidth = defaults.maxWidth;
    	      this.opacity = defaults.opacity;
    	      this.sizingPolicy = defaults.sizingPolicy;
    	      this.target = defaults.target;
    	      this.verticalAlign = defaults.verticalAlign;
    	      this.verticalOffset = defaults.verticalOffset;
        }

        public Builder horizontalAlign(@Nullable Output<String> horizontalAlign) {
            this.horizontalAlign = horizontalAlign;
            return this;
        }
        public Builder horizontalAlign(@Nullable String horizontalAlign) {
            this.horizontalAlign = Output.ofNullable(horizontalAlign);
            return this;
        }
        public Builder horizontalOffset(@Nullable Output<String> horizontalOffset) {
            this.horizontalOffset = horizontalOffset;
            return this;
        }
        public Builder horizontalOffset(@Nullable String horizontalOffset) {
            this.horizontalOffset = Output.ofNullable(horizontalOffset);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Output.ofNullable(id);
            return this;
        }
        public Builder maxHeight(@Nullable Output<String> maxHeight) {
            this.maxHeight = maxHeight;
            return this;
        }
        public Builder maxHeight(@Nullable String maxHeight) {
            this.maxHeight = Output.ofNullable(maxHeight);
            return this;
        }
        public Builder maxWidth(@Nullable Output<String> maxWidth) {
            this.maxWidth = maxWidth;
            return this;
        }
        public Builder maxWidth(@Nullable String maxWidth) {
            this.maxWidth = Output.ofNullable(maxWidth);
            return this;
        }
        public Builder opacity(@Nullable Output<String> opacity) {
            this.opacity = opacity;
            return this;
        }
        public Builder opacity(@Nullable String opacity) {
            this.opacity = Output.ofNullable(opacity);
            return this;
        }
        public Builder sizingPolicy(@Nullable Output<String> sizingPolicy) {
            this.sizingPolicy = sizingPolicy;
            return this;
        }
        public Builder sizingPolicy(@Nullable String sizingPolicy) {
            this.sizingPolicy = Output.ofNullable(sizingPolicy);
            return this;
        }
        public Builder target(@Nullable Output<String> target) {
            this.target = target;
            return this;
        }
        public Builder target(@Nullable String target) {
            this.target = Output.ofNullable(target);
            return this;
        }
        public Builder verticalAlign(@Nullable Output<String> verticalAlign) {
            this.verticalAlign = verticalAlign;
            return this;
        }
        public Builder verticalAlign(@Nullable String verticalAlign) {
            this.verticalAlign = Output.ofNullable(verticalAlign);
            return this;
        }
        public Builder verticalOffset(@Nullable Output<String> verticalOffset) {
            this.verticalOffset = verticalOffset;
            return this;
        }
        public Builder verticalOffset(@Nullable String verticalOffset) {
            this.verticalOffset = Output.ofNullable(verticalOffset);
            return this;
        }        public PresetVideoWatermarkGetArgs build() {
            return new PresetVideoWatermarkGetArgs(horizontalAlign, horizontalOffset, id, maxHeight, maxWidth, opacity, sizingPolicy, target, verticalAlign, verticalOffset);
        }
    }
}
