// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.resourcegroupstaggingapi.inputs;

import io.pulumi.aws.resourcegroupstaggingapi.inputs.GetResourcesTagFilter;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetResourcesArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetResourcesArgs Empty = new GetResourcesArgs();

    /**
     * Specifies whether to exclude resources that are compliant with the tag policy. You can use this parameter only if the `include_compliance_details` argument is also set to `true`.
     * 
     */
    @Import(name="excludeCompliantResources")
      private final @Nullable Boolean excludeCompliantResources;

    public Optional<Boolean> getExcludeCompliantResources() {
        return this.excludeCompliantResources == null ? Optional.empty() : Optional.ofNullable(this.excludeCompliantResources);
    }

    /**
     * Specifies whether to include details regarding the compliance with the effective tag policy.
     * 
     */
    @Import(name="includeComplianceDetails")
      private final @Nullable Boolean includeComplianceDetails;

    public Optional<Boolean> getIncludeComplianceDetails() {
        return this.includeComplianceDetails == null ? Optional.empty() : Optional.ofNullable(this.includeComplianceDetails);
    }

    /**
     * Specifies a list of ARNs of resources for which you want to retrieve tag data. Conflicts with `filter`.
     * 
     */
    @Import(name="resourceArnLists")
      private final @Nullable List<String> resourceArnLists;

    public List<String> getResourceArnLists() {
        return this.resourceArnLists == null ? List.of() : this.resourceArnLists;
    }

    /**
     * The constraints on the resources that you want returned. The format of each resource type is `service:resourceType`. For example, specifying a resource type of `ec2` returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of `ec2:instance` returns only EC2 instances.
     * 
     */
    @Import(name="resourceTypeFilters")
      private final @Nullable List<String> resourceTypeFilters;

    public List<String> getResourceTypeFilters() {
        return this.resourceTypeFilters == null ? List.of() : this.resourceTypeFilters;
    }

    /**
     * Specifies a list of Tag Filters (keys and values) to restrict the output to only those resources that have the specified tag and, if included, the specified value. See Tag Filter below. Conflicts with `resource_arn_list`.
     * 
     */
    @Import(name="tagFilters")
      private final @Nullable List<GetResourcesTagFilter> tagFilters;

    public List<GetResourcesTagFilter> getTagFilters() {
        return this.tagFilters == null ? List.of() : this.tagFilters;
    }

    public GetResourcesArgs(
        @Nullable Boolean excludeCompliantResources,
        @Nullable Boolean includeComplianceDetails,
        @Nullable List<String> resourceArnLists,
        @Nullable List<String> resourceTypeFilters,
        @Nullable List<GetResourcesTagFilter> tagFilters) {
        this.excludeCompliantResources = excludeCompliantResources;
        this.includeComplianceDetails = includeComplianceDetails;
        this.resourceArnLists = resourceArnLists;
        this.resourceTypeFilters = resourceTypeFilters;
        this.tagFilters = tagFilters;
    }

    private GetResourcesArgs() {
        this.excludeCompliantResources = null;
        this.includeComplianceDetails = null;
        this.resourceArnLists = List.of();
        this.resourceTypeFilters = List.of();
        this.tagFilters = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResourcesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean excludeCompliantResources;
        private @Nullable Boolean includeComplianceDetails;
        private @Nullable List<String> resourceArnLists;
        private @Nullable List<String> resourceTypeFilters;
        private @Nullable List<GetResourcesTagFilter> tagFilters;

        public Builder() {
    	      // Empty
        }

        public Builder(GetResourcesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludeCompliantResources = defaults.excludeCompliantResources;
    	      this.includeComplianceDetails = defaults.includeComplianceDetails;
    	      this.resourceArnLists = defaults.resourceArnLists;
    	      this.resourceTypeFilters = defaults.resourceTypeFilters;
    	      this.tagFilters = defaults.tagFilters;
        }

        public Builder excludeCompliantResources(@Nullable Boolean excludeCompliantResources) {
            this.excludeCompliantResources = excludeCompliantResources;
            return this;
        }

        public Builder includeComplianceDetails(@Nullable Boolean includeComplianceDetails) {
            this.includeComplianceDetails = includeComplianceDetails;
            return this;
        }

        public Builder resourceArnLists(@Nullable List<String> resourceArnLists) {
            this.resourceArnLists = resourceArnLists;
            return this;
        }

        public Builder resourceTypeFilters(@Nullable List<String> resourceTypeFilters) {
            this.resourceTypeFilters = resourceTypeFilters;
            return this;
        }

        public Builder tagFilters(@Nullable List<GetResourcesTagFilter> tagFilters) {
            this.tagFilters = tagFilters;
            return this;
        }
        public GetResourcesArgs build() {
            return new GetResourcesArgs(excludeCompliantResources, includeComplianceDetails, resourceArnLists, resourceTypeFilters, tagFilters);
        }
    }
}
