// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigateway.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class MethodSettingsSettings {
    /**
     * Specifies whether the cached responses are encrypted.
     * 
     */
    private final @Nullable Boolean cacheDataEncrypted;
    /**
     * Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
     * 
     */
    private final @Nullable Integer cacheTtlInSeconds;
    /**
     * Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
     * 
     */
    private final @Nullable Boolean cachingEnabled;
    /**
     * Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
     * 
     */
    private final @Nullable Boolean dataTraceEnabled;
    /**
     * Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
     * 
     */
    private final @Nullable String loggingLevel;
    /**
     * Specifies whether Amazon CloudWatch metrics are enabled for this method.
     * 
     */
    private final @Nullable Boolean metricsEnabled;
    /**
     * Specifies whether authorization is required for a cache invalidation request.
     * 
     */
    private final @Nullable Boolean requireAuthorizationForCacheControl;
    /**
     * Specifies the throttling burst limit. Default: `-1` (throttling disabled).
     * 
     */
    private final @Nullable Integer throttlingBurstLimit;
    /**
     * Specifies the throttling rate limit. Default: `-1` (throttling disabled).
     * 
     */
    private final @Nullable Double throttlingRateLimit;
    /**
     * Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
     * 
     */
    private final @Nullable String unauthorizedCacheControlHeaderStrategy;

    @OutputCustomType.Constructor({"cacheDataEncrypted","cacheTtlInSeconds","cachingEnabled","dataTraceEnabled","loggingLevel","metricsEnabled","requireAuthorizationForCacheControl","throttlingBurstLimit","throttlingRateLimit","unauthorizedCacheControlHeaderStrategy"})
    private MethodSettingsSettings(
        @Nullable Boolean cacheDataEncrypted,
        @Nullable Integer cacheTtlInSeconds,
        @Nullable Boolean cachingEnabled,
        @Nullable Boolean dataTraceEnabled,
        @Nullable String loggingLevel,
        @Nullable Boolean metricsEnabled,
        @Nullable Boolean requireAuthorizationForCacheControl,
        @Nullable Integer throttlingBurstLimit,
        @Nullable Double throttlingRateLimit,
        @Nullable String unauthorizedCacheControlHeaderStrategy) {
        this.cacheDataEncrypted = cacheDataEncrypted;
        this.cacheTtlInSeconds = cacheTtlInSeconds;
        this.cachingEnabled = cachingEnabled;
        this.dataTraceEnabled = dataTraceEnabled;
        this.loggingLevel = loggingLevel;
        this.metricsEnabled = metricsEnabled;
        this.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl;
        this.throttlingBurstLimit = throttlingBurstLimit;
        this.throttlingRateLimit = throttlingRateLimit;
        this.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy;
    }

    /**
     * Specifies whether the cached responses are encrypted.
     * 
     */
    public Optional<Boolean> getCacheDataEncrypted() {
        return Optional.ofNullable(this.cacheDataEncrypted);
    }
    /**
     * Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
     * 
     */
    public Optional<Integer> getCacheTtlInSeconds() {
        return Optional.ofNullable(this.cacheTtlInSeconds);
    }
    /**
     * Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
     * 
     */
    public Optional<Boolean> getCachingEnabled() {
        return Optional.ofNullable(this.cachingEnabled);
    }
    /**
     * Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
     * 
     */
    public Optional<Boolean> getDataTraceEnabled() {
        return Optional.ofNullable(this.dataTraceEnabled);
    }
    /**
     * Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
     * 
     */
    public Optional<String> getLoggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }
    /**
     * Specifies whether Amazon CloudWatch metrics are enabled for this method.
     * 
     */
    public Optional<Boolean> getMetricsEnabled() {
        return Optional.ofNullable(this.metricsEnabled);
    }
    /**
     * Specifies whether authorization is required for a cache invalidation request.
     * 
     */
    public Optional<Boolean> getRequireAuthorizationForCacheControl() {
        return Optional.ofNullable(this.requireAuthorizationForCacheControl);
    }
    /**
     * Specifies the throttling burst limit. Default: `-1` (throttling disabled).
     * 
     */
    public Optional<Integer> getThrottlingBurstLimit() {
        return Optional.ofNullable(this.throttlingBurstLimit);
    }
    /**
     * Specifies the throttling rate limit. Default: `-1` (throttling disabled).
     * 
     */
    public Optional<Double> getThrottlingRateLimit() {
        return Optional.ofNullable(this.throttlingRateLimit);
    }
    /**
     * Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
     * 
     */
    public Optional<String> getUnauthorizedCacheControlHeaderStrategy() {
        return Optional.ofNullable(this.unauthorizedCacheControlHeaderStrategy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MethodSettingsSettings defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean cacheDataEncrypted;
        private @Nullable Integer cacheTtlInSeconds;
        private @Nullable Boolean cachingEnabled;
        private @Nullable Boolean dataTraceEnabled;
        private @Nullable String loggingLevel;
        private @Nullable Boolean metricsEnabled;
        private @Nullable Boolean requireAuthorizationForCacheControl;
        private @Nullable Integer throttlingBurstLimit;
        private @Nullable Double throttlingRateLimit;
        private @Nullable String unauthorizedCacheControlHeaderStrategy;

        public Builder() {
    	      // Empty
        }

        public Builder(MethodSettingsSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheDataEncrypted = defaults.cacheDataEncrypted;
    	      this.cacheTtlInSeconds = defaults.cacheTtlInSeconds;
    	      this.cachingEnabled = defaults.cachingEnabled;
    	      this.dataTraceEnabled = defaults.dataTraceEnabled;
    	      this.loggingLevel = defaults.loggingLevel;
    	      this.metricsEnabled = defaults.metricsEnabled;
    	      this.requireAuthorizationForCacheControl = defaults.requireAuthorizationForCacheControl;
    	      this.throttlingBurstLimit = defaults.throttlingBurstLimit;
    	      this.throttlingRateLimit = defaults.throttlingRateLimit;
    	      this.unauthorizedCacheControlHeaderStrategy = defaults.unauthorizedCacheControlHeaderStrategy;
        }

        public Builder setCacheDataEncrypted(@Nullable Boolean cacheDataEncrypted) {
            this.cacheDataEncrypted = cacheDataEncrypted;
            return this;
        }

        public Builder setCacheTtlInSeconds(@Nullable Integer cacheTtlInSeconds) {
            this.cacheTtlInSeconds = cacheTtlInSeconds;
            return this;
        }

        public Builder setCachingEnabled(@Nullable Boolean cachingEnabled) {
            this.cachingEnabled = cachingEnabled;
            return this;
        }

        public Builder setDataTraceEnabled(@Nullable Boolean dataTraceEnabled) {
            this.dataTraceEnabled = dataTraceEnabled;
            return this;
        }

        public Builder setLoggingLevel(@Nullable String loggingLevel) {
            this.loggingLevel = loggingLevel;
            return this;
        }

        public Builder setMetricsEnabled(@Nullable Boolean metricsEnabled) {
            this.metricsEnabled = metricsEnabled;
            return this;
        }

        public Builder setRequireAuthorizationForCacheControl(@Nullable Boolean requireAuthorizationForCacheControl) {
            this.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl;
            return this;
        }

        public Builder setThrottlingBurstLimit(@Nullable Integer throttlingBurstLimit) {
            this.throttlingBurstLimit = throttlingBurstLimit;
            return this;
        }

        public Builder setThrottlingRateLimit(@Nullable Double throttlingRateLimit) {
            this.throttlingRateLimit = throttlingRateLimit;
            return this;
        }

        public Builder setUnauthorizedCacheControlHeaderStrategy(@Nullable String unauthorizedCacheControlHeaderStrategy) {
            this.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy;
            return this;
        }
        public MethodSettingsSettings build() {
            return new MethodSettingsSettings(cacheDataEncrypted, cacheTtlInSeconds, cachingEnabled, dataTraceEnabled, loggingLevel, metricsEnabled, requireAuthorizationForCacheControl, throttlingBurstLimit, throttlingRateLimit, unauthorizedCacheControlHeaderStrategy);
        }
    }
}
