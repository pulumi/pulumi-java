// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kms.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CiphertextState extends io.pulumi.resources.ResourceArgs {

    public static final CiphertextState Empty = new CiphertextState();

    /**
     * Base64 encoded ciphertext
     * 
     */
    @Import(name="ciphertextBlob")
      private final @Nullable Output<String> ciphertextBlob;

    public Output<String> getCiphertextBlob() {
        return this.ciphertextBlob == null ? Output.empty() : this.ciphertextBlob;
    }

    /**
     * An optional mapping that makes up the encryption context.
     * 
     */
    @Import(name="context")
      private final @Nullable Output<Map<String,String>> context;

    public Output<Map<String,String>> getContext() {
        return this.context == null ? Output.empty() : this.context;
    }

    /**
     * Globally unique key ID for the customer master key.
     * 
     */
    @Import(name="keyId")
      private final @Nullable Output<String> keyId;

    public Output<String> getKeyId() {
        return this.keyId == null ? Output.empty() : this.keyId;
    }

    /**
     * Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
     * 
     */
    @Import(name="plaintext")
      private final @Nullable Output<String> plaintext;

    public Output<String> getPlaintext() {
        return this.plaintext == null ? Output.empty() : this.plaintext;
    }

    public CiphertextState(
        @Nullable Output<String> ciphertextBlob,
        @Nullable Output<Map<String,String>> context,
        @Nullable Output<String> keyId,
        @Nullable Output<String> plaintext) {
        this.ciphertextBlob = ciphertextBlob;
        this.context = context;
        this.keyId = keyId;
        this.plaintext = plaintext;
    }

    private CiphertextState() {
        this.ciphertextBlob = Output.empty();
        this.context = Output.empty();
        this.keyId = Output.empty();
        this.plaintext = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CiphertextState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> ciphertextBlob;
        private @Nullable Output<Map<String,String>> context;
        private @Nullable Output<String> keyId;
        private @Nullable Output<String> plaintext;

        public Builder() {
    	      // Empty
        }

        public Builder(CiphertextState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ciphertextBlob = defaults.ciphertextBlob;
    	      this.context = defaults.context;
    	      this.keyId = defaults.keyId;
    	      this.plaintext = defaults.plaintext;
        }

        public Builder ciphertextBlob(@Nullable Output<String> ciphertextBlob) {
            this.ciphertextBlob = ciphertextBlob;
            return this;
        }

        public Builder ciphertextBlob(@Nullable String ciphertextBlob) {
            this.ciphertextBlob = Output.ofNullable(ciphertextBlob);
            return this;
        }

        public Builder context(@Nullable Output<Map<String,String>> context) {
            this.context = context;
            return this;
        }

        public Builder context(@Nullable Map<String,String> context) {
            this.context = Output.ofNullable(context);
            return this;
        }

        public Builder keyId(@Nullable Output<String> keyId) {
            this.keyId = keyId;
            return this;
        }

        public Builder keyId(@Nullable String keyId) {
            this.keyId = Output.ofNullable(keyId);
            return this;
        }

        public Builder plaintext(@Nullable Output<String> plaintext) {
            this.plaintext = plaintext;
            return this;
        }

        public Builder plaintext(@Nullable String plaintext) {
            this.plaintext = Output.ofNullable(plaintext);
            return this;
        }
        public CiphertextState build() {
            return new CiphertextState(ciphertextBlob, context, keyId, plaintext);
        }
    }
}
