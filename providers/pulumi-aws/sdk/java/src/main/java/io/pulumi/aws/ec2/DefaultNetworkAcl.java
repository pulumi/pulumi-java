// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.ec2.DefaultNetworkAclArgs;
import io.pulumi.aws.ec2.inputs.DefaultNetworkAclState;
import io.pulumi.aws.ec2.outputs.DefaultNetworkAclEgress;
import io.pulumi.aws.ec2.outputs.DefaultNetworkAclIngress;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a resource to manage a VPC's default network ACL. This resource can manage the default network ACL of the default or a non-default VPC.
 * 
 * > **NOTE:** This is an advanced resource with special caveats. Please read this document in its entirety before using this resource. The `aws.ec2.DefaultNetworkAcl` behaves differently from normal resources. This provider does not _create_ this resource but instead attempts to "adopt" it into management.
 * 
 * Every VPC has a default network ACL that can be managed but not destroyed. When the provider first adopts the Default Network ACL, it **immediately removes all rules in the ACL**. It then proceeds to create any rules specified in the configuration. This step is required so that only the rules specified in the configuration are created.
 * 
 * This resource treats its inline rules as absolute; only the rules defined inline are created, and any additions/removals external to this resource will result in diffs being shown. For these reasons, this resource is incompatible with the `aws.ec2.NetworkAclRule` resource.
 * 
 * For more information about Network ACLs, see the AWS Documentation on [Network ACLs][aws-network-acls].
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Basic Example
 * 
 * The following config gives the Default Network ACL the same rules that AWS includes but pulls the resource under management by this provider. This means that any ACL rules added or changed will be detected as drift.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const mainvpc = new aws.ec2.Vpc("mainvpc", {cidrBlock: "10.1.0.0/16"});
 * const _default = new aws.ec2.DefaultNetworkAcl("default", {
 *     defaultNetworkAclId: mainvpc.defaultNetworkAclId,
 *     ingress: [{
 *         protocol: -1,
 *         ruleNo: 100,
 *         action: "allow",
 *         cidrBlock: mainvpc.cidrBlock,
 *         fromPort: 0,
 *         toPort: 0,
 *     }],
 *     egress: [{
 *         protocol: -1,
 *         ruleNo: 100,
 *         action: "allow",
 *         cidrBlock: "0.0.0.0/0",
 *         fromPort: 0,
 *         toPort: 0,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * mainvpc = aws.ec2.Vpc("mainvpc", cidr_block="10.1.0.0/16")
 * default = aws.ec2.DefaultNetworkAcl("default",
 *     default_network_acl_id=mainvpc.default_network_acl_id,
 *     ingress=[aws.ec2.DefaultNetworkAclIngressArgs(
 *         protocol="-1",
 *         rule_no=100,
 *         action="allow",
 *         cidr_block=mainvpc.cidr_block,
 *         from_port=0,
 *         to_port=0,
 *     )],
 *     egress=[aws.ec2.DefaultNetworkAclEgressArgs(
 *         protocol="-1",
 *         rule_no=100,
 *         action="allow",
 *         cidr_block="0.0.0.0/0",
 *         from_port=0,
 *         to_port=0,
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var mainvpc = new Aws.Ec2.Vpc("mainvpc", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "10.1.0.0/16",
 *         });
 *         var @default = new Aws.Ec2.DefaultNetworkAcl("default", new Aws.Ec2.DefaultNetworkAclArgs
 *         {
 *             DefaultNetworkAclId = mainvpc.DefaultNetworkAclId,
 *             Ingress = 
 *             {
 *                 new Aws.Ec2.Inputs.DefaultNetworkAclIngressArgs
 *                 {
 *                     Protocol = "-1",
 *                     RuleNo = 100,
 *                     Action = "allow",
 *                     CidrBlock = mainvpc.CidrBlock,
 *                     FromPort = 0,
 *                     ToPort = 0,
 *                 },
 *             },
 *             Egress = 
 *             {
 *                 new Aws.Ec2.Inputs.DefaultNetworkAclEgressArgs
 *                 {
 *                     Protocol = "-1",
 *                     RuleNo = 100,
 *                     Action = "allow",
 *                     CidrBlock = "0.0.0.0/0",
 *                     FromPort = 0,
 *                     ToPort = 0,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		mainvpc, err := ec2.NewVpc(ctx, "mainvpc", &ec2.VpcArgs{
 * 			CidrBlock: pulumi.String("10.1.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = ec2.NewDefaultNetworkAcl(ctx, "default", &ec2.DefaultNetworkAclArgs{
 * 			DefaultNetworkAclId: mainvpc.DefaultNetworkAclId,
 * 			Ingress: ec2.DefaultNetworkAclIngressArray{
 * 				&ec2.DefaultNetworkAclIngressArgs{
 * 					Protocol:  pulumi.String("-1"),
 * 					RuleNo:    pulumi.Int(100),
 * 					Action:    pulumi.String("allow"),
 * 					CidrBlock: mainvpc.CidrBlock,
 * 					FromPort:  pulumi.Int(0),
 * 					ToPort:    pulumi.Int(0),
 * 				},
 * 			},
 * 			Egress: ec2.DefaultNetworkAclEgressArray{
 * 				&ec2.DefaultNetworkAclEgressArgs{
 * 					Protocol:  pulumi.String("-1"),
 * 					RuleNo:    pulumi.Int(100),
 * 					Action:    pulumi.String("allow"),
 * 					CidrBlock: pulumi.String("0.0.0.0/0"),
 * 					FromPort:  pulumi.Int(0),
 * 					ToPort:    pulumi.Int(0),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example: Deny All Egress Traffic, Allow Ingress
 * 
 * The following denies all Egress traffic by omitting any `egress` rules, while including the default `ingress` rule to allow all traffic.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const mainvpc = new aws.ec2.Vpc("mainvpc", {cidrBlock: "10.1.0.0/16"});
 * const _default = new aws.ec2.DefaultNetworkAcl("default", {
 *     defaultNetworkAclId: mainvpc.defaultNetworkAclId,
 *     ingress: [{
 *         protocol: -1,
 *         ruleNo: 100,
 *         action: "allow",
 *         cidrBlock: aws_default_vpc.mainvpc.cidr_block,
 *         fromPort: 0,
 *         toPort: 0,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * mainvpc = aws.ec2.Vpc("mainvpc", cidr_block="10.1.0.0/16")
 * default = aws.ec2.DefaultNetworkAcl("default",
 *     default_network_acl_id=mainvpc.default_network_acl_id,
 *     ingress=[aws.ec2.DefaultNetworkAclIngressArgs(
 *         protocol="-1",
 *         rule_no=100,
 *         action="allow",
 *         cidr_block=aws_default_vpc["mainvpc"]["cidr_block"],
 *         from_port=0,
 *         to_port=0,
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var mainvpc = new Aws.Ec2.Vpc("mainvpc", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "10.1.0.0/16",
 *         });
 *         var @default = new Aws.Ec2.DefaultNetworkAcl("default", new Aws.Ec2.DefaultNetworkAclArgs
 *         {
 *             DefaultNetworkAclId = mainvpc.DefaultNetworkAclId,
 *             Ingress = 
 *             {
 *                 new Aws.Ec2.Inputs.DefaultNetworkAclIngressArgs
 *                 {
 *                     Protocol = "-1",
 *                     RuleNo = 100,
 *                     Action = "allow",
 *                     CidrBlock = aws_default_vpc.Mainvpc.Cidr_block,
 *                     FromPort = 0,
 *                     ToPort = 0,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		mainvpc, err := ec2.NewVpc(ctx, "mainvpc", &ec2.VpcArgs{
 * 			CidrBlock: pulumi.String("10.1.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = ec2.NewDefaultNetworkAcl(ctx, "default", &ec2.DefaultNetworkAclArgs{
 * 			DefaultNetworkAclId: mainvpc.DefaultNetworkAclId,
 * 			Ingress: ec2.DefaultNetworkAclIngressArray{
 * 				&ec2.DefaultNetworkAclIngressArgs{
 * 					Protocol:  pulumi.String("-1"),
 * 					RuleNo:    pulumi.Int(100),
 * 					Action:    pulumi.String("allow"),
 * 					CidrBlock: pulumi.Any(aws_default_vpc.Mainvpc.Cidr_block),
 * 					FromPort:  pulumi.Int(0),
 * 					ToPort:    pulumi.Int(0),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example: Deny All Traffic To Any Subnet In The Default Network ACL
 * 
 * This config denies all traffic in the Default ACL. This can be useful if you want to lock down the VPC to force all resources to assign a non-default ACL.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const mainvpc = new aws.ec2.Vpc("mainvpc", {cidrBlock: "10.1.0.0/16"});
 * const _default = new aws.ec2.DefaultNetworkAcl("default", {defaultNetworkAclId: mainvpc.defaultNetworkAclId});
 * // no rules defined, deny all traffic in this ACL
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * mainvpc = aws.ec2.Vpc("mainvpc", cidr_block="10.1.0.0/16")
 * default = aws.ec2.DefaultNetworkAcl("default", default_network_acl_id=mainvpc.default_network_acl_id)
 * # no rules defined, deny all traffic in this ACL
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var mainvpc = new Aws.Ec2.Vpc("mainvpc", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "10.1.0.0/16",
 *         });
 *         var @default = new Aws.Ec2.DefaultNetworkAcl("default", new Aws.Ec2.DefaultNetworkAclArgs
 *         {
 *             DefaultNetworkAclId = mainvpc.DefaultNetworkAclId,
 *         });
 *         // no rules defined, deny all traffic in this ACL
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		mainvpc, err := ec2.NewVpc(ctx, "mainvpc", &ec2.VpcArgs{
 * 			CidrBlock: pulumi.String("10.1.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = ec2.NewDefaultNetworkAcl(ctx, "default", &ec2.DefaultNetworkAclArgs{
 * 			DefaultNetworkAclId: mainvpc.DefaultNetworkAclId,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Managing Subnets In A Default Network ACL
 * 
 * Within a VPC, all Subnets must be associated with a Network ACL. In order to "delete" the association between a Subnet and a non-default Network ACL, the association is destroyed by replacing it with an association between the Subnet and the Default ACL instead.
 * 
 * When managing the Default Network ACL, you cannot "remove" Subnets. Instead, they must be reassigned to another Network ACL, or the Subnet itself must be destroyed. Because of these requirements, removing the `subnet_ids` attribute from the configuration of a `aws.ec2.DefaultNetworkAcl` resource may result in a reoccurring plan, until the Subnets are reassigned to another Network ACL or are destroyed.
 * 
 * Because Subnets are by default associated with the Default Network ACL, any non-explicit association will show up as a plan to remove the Subnet. For example: if you have a custom `aws.ec2.NetworkAcl` with two subnets attached, and you remove the `aws.ec2.NetworkAcl` resource, after successfully destroying this resource future plans will show a diff on the managed `aws.ec2.DefaultNetworkAcl`, as those two Subnets have been orphaned by the now destroyed network acl and thus adopted by the Default Network ACL. In order to avoid a reoccurring plan, they will need to be reassigned, destroyed, or added to the `subnet_ids` attribute of the `aws.ec2.DefaultNetworkAcl` entry.
 * 
 * As an alternative to the above, you can also specify the following lifecycle configuration in your `aws.ec2.DefaultNetworkAcl` resource:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * // ... other configuration ...
 * const _default = new aws.ec2.DefaultNetworkAcl("default", {});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * # ... other configuration ...
 * default = aws.ec2.DefaultNetworkAcl("default")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         // ... other configuration ...
 *         var @default = new Aws.Ec2.DefaultNetworkAcl("default", new Aws.Ec2.DefaultNetworkAclArgs
 *         {
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ec2.NewDefaultNetworkAcl(ctx, "default", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * ### Removing `aws.ec2.DefaultNetworkAcl` From Your Configuration
 * 
 * Each AWS VPC comes with a Default Network ACL that cannot be deleted. The `aws.ec2.DefaultNetworkAcl` allows you to manage this Network ACL, but the provider cannot destroy it. Removing this resource from your configuration will remove it from your statefile and management, **but will not destroy the Network ACL.** All Subnets associations and ingress or egress rules will be left as they are at the time of removal. You can resume managing them via the AWS Console.
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Default Network ACLs can be imported using the `id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:ec2/defaultNetworkAcl:DefaultNetworkAcl sample acl-7aaabd18
 * ```
 * 
 *  
 */
@ResourceType(type="aws:ec2/defaultNetworkAcl:DefaultNetworkAcl")
public class DefaultNetworkAcl extends io.pulumi.resources.CustomResource {
    /**
     * ARN of the Default Network ACL
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return ARN of the Default Network ACL
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Network ACL ID to manage. This attribute is exported from `aws.ec2.Vpc`, or manually found via the AWS Console.
     * 
     */
    @Export(name="defaultNetworkAclId", type=String.class, parameters={})
    private Output<String> defaultNetworkAclId;

    /**
     * @return Network ACL ID to manage. This attribute is exported from `aws.ec2.Vpc`, or manually found via the AWS Console.
     * 
     */
    public Output<String> getDefaultNetworkAclId() {
        return this.defaultNetworkAclId;
    }
    /**
     * Configuration block for an egress rule. Detailed below.
     * 
     */
    @Export(name="egress", type=List.class, parameters={DefaultNetworkAclEgress.class})
    private Output</* @Nullable */ List<DefaultNetworkAclEgress>> egress;

    /**
     * @return Configuration block for an egress rule. Detailed below.
     * 
     */
    public Output</* @Nullable */ List<DefaultNetworkAclEgress>> getEgress() {
        return this.egress;
    }
    /**
     * Configuration block for an ingress rule. Detailed below.
     * 
     */
    @Export(name="ingress", type=List.class, parameters={DefaultNetworkAclIngress.class})
    private Output</* @Nullable */ List<DefaultNetworkAclIngress>> ingress;

    /**
     * @return Configuration block for an ingress rule. Detailed below.
     * 
     */
    public Output</* @Nullable */ List<DefaultNetworkAclIngress>> getIngress() {
        return this.ingress;
    }
    /**
     * ID of the AWS account that owns the Default Network ACL
     * 
     */
    @Export(name="ownerId", type=String.class, parameters={})
    private Output<String> ownerId;

    /**
     * @return ID of the AWS account that owns the Default Network ACL
     * 
     */
    public Output<String> getOwnerId() {
        return this.ownerId;
    }
    /**
     * List of Subnet IDs to apply the ACL to. See the notes below on managing Subnets in the Default Network ACL
     * 
     */
    @Export(name="subnetIds", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> subnetIds;

    /**
     * @return List of Subnet IDs to apply the ACL to. See the notes below on managing Subnets in the Default Network ACL
     * 
     */
    public Output</* @Nullable */ List<String>> getSubnetIds() {
        return this.subnetIds;
    }
    /**
     * Map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * ID of the associated VPC
     * 
     */
    @Export(name="vpcId", type=String.class, parameters={})
    private Output<String> vpcId;

    /**
     * @return ID of the associated VPC
     * 
     */
    public Output<String> getVpcId() {
        return this.vpcId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DefaultNetworkAcl(String name) {
        this(name, DefaultNetworkAclArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DefaultNetworkAcl(String name, DefaultNetworkAclArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DefaultNetworkAcl(String name, DefaultNetworkAclArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, args == null ? DefaultNetworkAclArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private DefaultNetworkAcl(String name, Output<String> id, @Nullable DefaultNetworkAclState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DefaultNetworkAcl get(String name, Output<String> id, @Nullable DefaultNetworkAclState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new DefaultNetworkAcl(name, id, state, options);
    }
}
