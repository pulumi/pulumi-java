// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetRouteTableAssociation extends io.pulumi.resources.InvokeArgs {

    public static final GetRouteTableAssociation Empty = new GetRouteTableAssociation();

    /**
     * ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
     * 
     */
    @Import(name="gatewayId", required=true)
      private final String gatewayId;

    public String getGatewayId() {
        return this.gatewayId;
    }

    /**
     * Whether the association is due to the main route table.
     * 
     */
    @Import(name="main", required=true)
      private final Boolean main;

    public Boolean getMain() {
        return this.main;
    }

    /**
     * Association ID.
     * 
     */
    @Import(name="routeTableAssociationId", required=true)
      private final String routeTableAssociationId;

    public String getRouteTableAssociationId() {
        return this.routeTableAssociationId;
    }

    /**
     * ID of the specific Route Table to retrieve.
     * 
     */
    @Import(name="routeTableId", required=true)
      private final String routeTableId;

    public String getRouteTableId() {
        return this.routeTableId;
    }

    /**
     * ID of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
     * 
     */
    @Import(name="subnetId", required=true)
      private final String subnetId;

    public String getSubnetId() {
        return this.subnetId;
    }

    public GetRouteTableAssociation(
        String gatewayId,
        Boolean main,
        String routeTableAssociationId,
        String routeTableId,
        String subnetId) {
        this.gatewayId = Objects.requireNonNull(gatewayId, "expected parameter 'gatewayId' to be non-null");
        this.main = Objects.requireNonNull(main, "expected parameter 'main' to be non-null");
        this.routeTableAssociationId = Objects.requireNonNull(routeTableAssociationId, "expected parameter 'routeTableAssociationId' to be non-null");
        this.routeTableId = Objects.requireNonNull(routeTableId, "expected parameter 'routeTableId' to be non-null");
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
    }

    private GetRouteTableAssociation() {
        this.gatewayId = null;
        this.main = null;
        this.routeTableAssociationId = null;
        this.routeTableId = null;
        this.subnetId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteTableAssociation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String gatewayId;
        private Boolean main;
        private String routeTableAssociationId;
        private String routeTableId;
        private String subnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRouteTableAssociation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gatewayId = defaults.gatewayId;
    	      this.main = defaults.main;
    	      this.routeTableAssociationId = defaults.routeTableAssociationId;
    	      this.routeTableId = defaults.routeTableId;
    	      this.subnetId = defaults.subnetId;
        }

        public Builder gatewayId(String gatewayId) {
            this.gatewayId = Objects.requireNonNull(gatewayId);
            return this;
        }
        public Builder main(Boolean main) {
            this.main = Objects.requireNonNull(main);
            return this;
        }
        public Builder routeTableAssociationId(String routeTableAssociationId) {
            this.routeTableAssociationId = Objects.requireNonNull(routeTableAssociationId);
            return this;
        }
        public Builder routeTableId(String routeTableId) {
            this.routeTableId = Objects.requireNonNull(routeTableId);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }        public GetRouteTableAssociation build() {
            return new GetRouteTableAssociation(gatewayId, main, routeTableAssociationId, routeTableId, subnetId);
        }
    }
}
