// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lambda;

import io.pulumi.aws.lambda.inputs.CodeSigningConfigAllowedPublishersArgs;
import io.pulumi.aws.lambda.inputs.CodeSigningConfigPoliciesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CodeSigningConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final CodeSigningConfigArgs Empty = new CodeSigningConfigArgs();

    /**
     * A configuration block of allowed publishers as signing profiles for this code signing configuration. Detailed below.
     * 
     */
    @InputImport(name="allowedPublishers", required=true)
      private final Input<CodeSigningConfigAllowedPublishersArgs> allowedPublishers;

    public Input<CodeSigningConfigAllowedPublishersArgs> getAllowedPublishers() {
        return this.allowedPublishers;
    }

    /**
     * Descriptive name for this code signing configuration.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * A configuration block of code signing policies that define the actions to take if the validation checks fail. Detailed below.
     * 
     */
    @InputImport(name="policies")
      private final @Nullable Input<CodeSigningConfigPoliciesArgs> policies;

    public Input<CodeSigningConfigPoliciesArgs> getPolicies() {
        return this.policies == null ? Input.empty() : this.policies;
    }

    public CodeSigningConfigArgs(
        Input<CodeSigningConfigAllowedPublishersArgs> allowedPublishers,
        @Nullable Input<String> description,
        @Nullable Input<CodeSigningConfigPoliciesArgs> policies) {
        this.allowedPublishers = Objects.requireNonNull(allowedPublishers, "expected parameter 'allowedPublishers' to be non-null");
        this.description = description;
        this.policies = policies;
    }

    private CodeSigningConfigArgs() {
        this.allowedPublishers = Input.empty();
        this.description = Input.empty();
        this.policies = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CodeSigningConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<CodeSigningConfigAllowedPublishersArgs> allowedPublishers;
        private @Nullable Input<String> description;
        private @Nullable Input<CodeSigningConfigPoliciesArgs> policies;

        public Builder() {
    	      // Empty
        }

        public Builder(CodeSigningConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedPublishers = defaults.allowedPublishers;
    	      this.description = defaults.description;
    	      this.policies = defaults.policies;
        }

        public Builder allowedPublishers(Input<CodeSigningConfigAllowedPublishersArgs> allowedPublishers) {
            this.allowedPublishers = Objects.requireNonNull(allowedPublishers);
            return this;
        }

        public Builder allowedPublishers(CodeSigningConfigAllowedPublishersArgs allowedPublishers) {
            this.allowedPublishers = Input.of(Objects.requireNonNull(allowedPublishers));
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder policies(@Nullable Input<CodeSigningConfigPoliciesArgs> policies) {
            this.policies = policies;
            return this;
        }

        public Builder policies(@Nullable CodeSigningConfigPoliciesArgs policies) {
            this.policies = Input.ofNullable(policies);
            return this;
        }
        public CodeSigningConfigArgs build() {
            return new CodeSigningConfigArgs(allowedPublishers, description, policies);
        }
    }
}
