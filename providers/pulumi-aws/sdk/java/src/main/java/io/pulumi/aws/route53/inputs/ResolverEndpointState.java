// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.route53.inputs;

import io.pulumi.aws.route53.inputs.ResolverEndpointIpAddressGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ResolverEndpointState extends io.pulumi.resources.ResourceArgs {

    public static final ResolverEndpointState Empty = new ResolverEndpointState();

    /**
     * The ARN of the Route 53 Resolver endpoint.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The direction of DNS queries to or from the Route 53 Resolver endpoint.
     * Valid values are `INBOUND` (resolver forwards DNS queries to the DNS service for a VPC from your network or another VPC)
     * or `OUTBOUND` (resolver forwards DNS queries from the DNS service for a VPC to your network or another VPC).
     * 
     */
    @Import(name="direction")
      private final @Nullable Output<String> direction;

    public Output<String> getDirection() {
        return this.direction == null ? Codegen.empty() : this.direction;
    }

    /**
     * The ID of the VPC that you want to create the resolver endpoint in.
     * 
     */
    @Import(name="hostVpcId")
      private final @Nullable Output<String> hostVpcId;

    public Output<String> getHostVpcId() {
        return this.hostVpcId == null ? Codegen.empty() : this.hostVpcId;
    }

    /**
     * The subnets and IP addresses in your VPC that you want DNS queries to pass through on the way from your VPCs
     * to your network (for outbound endpoints) or on the way from your network to your VPCs (for inbound endpoints). Described below.
     * 
     */
    @Import(name="ipAddresses")
      private final @Nullable Output<List<ResolverEndpointIpAddressGetArgs>> ipAddresses;

    public Output<List<ResolverEndpointIpAddressGetArgs>> getIpAddresses() {
        return this.ipAddresses == null ? Codegen.empty() : this.ipAddresses;
    }

    /**
     * The friendly name of the Route 53 Resolver endpoint.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of one or more security groups that you want to use to control access to this VPC.
     * 
     */
    @Import(name="securityGroupIds")
      private final @Nullable Output<List<String>> securityGroupIds;

    public Output<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds == null ? Codegen.empty() : this.securityGroupIds;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    public ResolverEndpointState(
        @Nullable Output<String> arn,
        @Nullable Output<String> direction,
        @Nullable Output<String> hostVpcId,
        @Nullable Output<List<ResolverEndpointIpAddressGetArgs>> ipAddresses,
        @Nullable Output<String> name,
        @Nullable Output<List<String>> securityGroupIds,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.direction = direction;
        this.hostVpcId = hostVpcId;
        this.ipAddresses = ipAddresses;
        this.name = name;
        this.securityGroupIds = securityGroupIds;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private ResolverEndpointState() {
        this.arn = Codegen.empty();
        this.direction = Codegen.empty();
        this.hostVpcId = Codegen.empty();
        this.ipAddresses = Codegen.empty();
        this.name = Codegen.empty();
        this.securityGroupIds = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverEndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> direction;
        private @Nullable Output<String> hostVpcId;
        private @Nullable Output<List<ResolverEndpointIpAddressGetArgs>> ipAddresses;
        private @Nullable Output<String> name;
        private @Nullable Output<List<String>> securityGroupIds;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(ResolverEndpointState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.direction = defaults.direction;
    	      this.hostVpcId = defaults.hostVpcId;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.name = defaults.name;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder direction(@Nullable Output<String> direction) {
            this.direction = direction;
            return this;
        }
        public Builder direction(@Nullable String direction) {
            this.direction = Codegen.ofNullable(direction);
            return this;
        }
        public Builder hostVpcId(@Nullable Output<String> hostVpcId) {
            this.hostVpcId = hostVpcId;
            return this;
        }
        public Builder hostVpcId(@Nullable String hostVpcId) {
            this.hostVpcId = Codegen.ofNullable(hostVpcId);
            return this;
        }
        public Builder ipAddresses(@Nullable Output<List<ResolverEndpointIpAddressGetArgs>> ipAddresses) {
            this.ipAddresses = ipAddresses;
            return this;
        }
        public Builder ipAddresses(@Nullable List<ResolverEndpointIpAddressGetArgs> ipAddresses) {
            this.ipAddresses = Codegen.ofNullable(ipAddresses);
            return this;
        }
        public Builder ipAddresses(ResolverEndpointIpAddressGetArgs... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Codegen.ofNullable(securityGroupIds);
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }        public ResolverEndpointState build() {
            return new ResolverEndpointState(arn, direction, hostVpcId, ipAddresses, name, securityGroupIds, tags, tagsAll);
        }
    }
}
