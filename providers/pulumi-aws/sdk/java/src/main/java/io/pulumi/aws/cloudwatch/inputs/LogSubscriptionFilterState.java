// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LogSubscriptionFilterState extends io.pulumi.resources.ResourceArgs {

    public static final LogSubscriptionFilterState Empty = new LogSubscriptionFilterState();

    /**
     * The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
     * 
     */
    @InputImport(name="destinationArn")
    private final @Nullable Input<String> destinationArn;

    public Input<String> getDestinationArn() {
        return this.destinationArn == null ? Input.empty() : this.destinationArn;
    }

    /**
     * The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
     * 
     */
    @InputImport(name="distribution")
    private final @Nullable Input<String> distribution;

    public Input<String> getDistribution() {
        return this.distribution == null ? Input.empty() : this.distribution;
    }

    /**
     * A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
     * 
     */
    @InputImport(name="filterPattern")
    private final @Nullable Input<String> filterPattern;

    public Input<String> getFilterPattern() {
        return this.filterPattern == null ? Input.empty() : this.filterPattern;
    }

    /**
     * The name of the log group to associate the subscription filter with
     * 
     */
    @InputImport(name="logGroup")
    private final @Nullable Input<String> logGroup;

    public Input<String> getLogGroup() {
        return this.logGroup == null ? Input.empty() : this.logGroup;
    }

    /**
     * A name for the subscription filter
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `aws.lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
     * 
     */
    @InputImport(name="roleArn")
    private final @Nullable Input<String> roleArn;

    public Input<String> getRoleArn() {
        return this.roleArn == null ? Input.empty() : this.roleArn;
    }

    public LogSubscriptionFilterState(
        @Nullable Input<String> destinationArn,
        @Nullable Input<String> distribution,
        @Nullable Input<String> filterPattern,
        @Nullable Input<String> logGroup,
        @Nullable Input<String> name,
        @Nullable Input<String> roleArn) {
        this.destinationArn = destinationArn;
        this.distribution = distribution;
        this.filterPattern = filterPattern;
        this.logGroup = logGroup;
        this.name = name;
        this.roleArn = roleArn;
    }

    private LogSubscriptionFilterState() {
        this.destinationArn = Input.empty();
        this.distribution = Input.empty();
        this.filterPattern = Input.empty();
        this.logGroup = Input.empty();
        this.name = Input.empty();
        this.roleArn = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogSubscriptionFilterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> destinationArn;
        private @Nullable Input<String> distribution;
        private @Nullable Input<String> filterPattern;
        private @Nullable Input<String> logGroup;
        private @Nullable Input<String> name;
        private @Nullable Input<String> roleArn;

        public Builder() {
    	      // Empty
        }

        public Builder(LogSubscriptionFilterState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationArn = defaults.destinationArn;
    	      this.distribution = defaults.distribution;
    	      this.filterPattern = defaults.filterPattern;
    	      this.logGroup = defaults.logGroup;
    	      this.name = defaults.name;
    	      this.roleArn = defaults.roleArn;
        }

        public Builder setDestinationArn(@Nullable Input<String> destinationArn) {
            this.destinationArn = destinationArn;
            return this;
        }

        public Builder setDestinationArn(@Nullable String destinationArn) {
            this.destinationArn = Input.ofNullable(destinationArn);
            return this;
        }

        public Builder setDistribution(@Nullable Input<String> distribution) {
            this.distribution = distribution;
            return this;
        }

        public Builder setDistribution(@Nullable String distribution) {
            this.distribution = Input.ofNullable(distribution);
            return this;
        }

        public Builder setFilterPattern(@Nullable Input<String> filterPattern) {
            this.filterPattern = filterPattern;
            return this;
        }

        public Builder setFilterPattern(@Nullable String filterPattern) {
            this.filterPattern = Input.ofNullable(filterPattern);
            return this;
        }

        public Builder setLogGroup(@Nullable Input<String> logGroup) {
            this.logGroup = logGroup;
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setRoleArn(@Nullable Input<String> roleArn) {
            this.roleArn = roleArn;
            return this;
        }

        public Builder setRoleArn(@Nullable String roleArn) {
            this.roleArn = Input.ofNullable(roleArn);
            return this;
        }
        public LogSubscriptionFilterState build() {
            return new LogSubscriptionFilterState(destinationArn, distribution, filterPattern, logGroup, name, roleArn);
        }
    }
}
