// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appmesh.inputs;

import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationGetArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerOutlierDetectionIntervalGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.util.Objects;


public final class VirtualNodeSpecListenerOutlierDetectionGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualNodeSpecListenerOutlierDetectionGetArgs Empty = new VirtualNodeSpecListenerOutlierDetectionGetArgs();

    /**
     * The base amount of time for which a host is ejected.
     * 
     */
    @InputImport(name="baseEjectionDuration", required=true)
    private final Input<VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationGetArgs> baseEjectionDuration;

    public Input<VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationGetArgs> getBaseEjectionDuration() {
        return this.baseEjectionDuration;
    }

    /**
     * The time interval between ejection sweep analysis.
     * 
     */
    @InputImport(name="interval", required=true)
    private final Input<VirtualNodeSpecListenerOutlierDetectionIntervalGetArgs> interval;

    public Input<VirtualNodeSpecListenerOutlierDetectionIntervalGetArgs> getInterval() {
        return this.interval;
    }

    /**
     * Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
     * Minimum value of `0`. Maximum value of `100`.
     * 
     */
    @InputImport(name="maxEjectionPercent", required=true)
    private final Input<Integer> maxEjectionPercent;

    public Input<Integer> getMaxEjectionPercent() {
        return this.maxEjectionPercent;
    }

    /**
     * Number of consecutive `5xx` errors required for ejection. Minimum value of `1`.
     * 
     */
    @InputImport(name="maxServerErrors", required=true)
    private final Input<Integer> maxServerErrors;

    public Input<Integer> getMaxServerErrors() {
        return this.maxServerErrors;
    }

    public VirtualNodeSpecListenerOutlierDetectionGetArgs(
        Input<VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationGetArgs> baseEjectionDuration,
        Input<VirtualNodeSpecListenerOutlierDetectionIntervalGetArgs> interval,
        Input<Integer> maxEjectionPercent,
        Input<Integer> maxServerErrors) {
        this.baseEjectionDuration = Objects.requireNonNull(baseEjectionDuration, "expected parameter 'baseEjectionDuration' to be non-null");
        this.interval = Objects.requireNonNull(interval, "expected parameter 'interval' to be non-null");
        this.maxEjectionPercent = Objects.requireNonNull(maxEjectionPercent, "expected parameter 'maxEjectionPercent' to be non-null");
        this.maxServerErrors = Objects.requireNonNull(maxServerErrors, "expected parameter 'maxServerErrors' to be non-null");
    }

    private VirtualNodeSpecListenerOutlierDetectionGetArgs() {
        this.baseEjectionDuration = Input.empty();
        this.interval = Input.empty();
        this.maxEjectionPercent = Input.empty();
        this.maxServerErrors = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNodeSpecListenerOutlierDetectionGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationGetArgs> baseEjectionDuration;
        private Input<VirtualNodeSpecListenerOutlierDetectionIntervalGetArgs> interval;
        private Input<Integer> maxEjectionPercent;
        private Input<Integer> maxServerErrors;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNodeSpecListenerOutlierDetectionGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseEjectionDuration = defaults.baseEjectionDuration;
    	      this.interval = defaults.interval;
    	      this.maxEjectionPercent = defaults.maxEjectionPercent;
    	      this.maxServerErrors = defaults.maxServerErrors;
        }

        public Builder setBaseEjectionDuration(Input<VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationGetArgs> baseEjectionDuration) {
            this.baseEjectionDuration = Objects.requireNonNull(baseEjectionDuration);
            return this;
        }

        public Builder setBaseEjectionDuration(VirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationGetArgs baseEjectionDuration) {
            this.baseEjectionDuration = Input.of(Objects.requireNonNull(baseEjectionDuration));
            return this;
        }

        public Builder setInterval(Input<VirtualNodeSpecListenerOutlierDetectionIntervalGetArgs> interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }

        public Builder setInterval(VirtualNodeSpecListenerOutlierDetectionIntervalGetArgs interval) {
            this.interval = Input.of(Objects.requireNonNull(interval));
            return this;
        }

        public Builder setMaxEjectionPercent(Input<Integer> maxEjectionPercent) {
            this.maxEjectionPercent = Objects.requireNonNull(maxEjectionPercent);
            return this;
        }

        public Builder setMaxEjectionPercent(Integer maxEjectionPercent) {
            this.maxEjectionPercent = Input.of(Objects.requireNonNull(maxEjectionPercent));
            return this;
        }

        public Builder setMaxServerErrors(Input<Integer> maxServerErrors) {
            this.maxServerErrors = Objects.requireNonNull(maxServerErrors);
            return this;
        }

        public Builder setMaxServerErrors(Integer maxServerErrors) {
            this.maxServerErrors = Input.of(Objects.requireNonNull(maxServerErrors));
            return this;
        }
        public VirtualNodeSpecListenerOutlierDetectionGetArgs build() {
            return new VirtualNodeSpecListenerOutlierDetectionGetArgs(baseEjectionDuration, interval, maxEjectionPercent, maxServerErrors);
        }
    }
}
