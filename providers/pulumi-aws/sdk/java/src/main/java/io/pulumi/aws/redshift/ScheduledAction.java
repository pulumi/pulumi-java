// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.redshift;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.redshift.ScheduledActionArgs;
import io.pulumi.aws.redshift.inputs.ScheduledActionState;
import io.pulumi.aws.redshift.outputs.ScheduledActionTargetAction;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Pause Cluster Action
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleRole = new aws.iam.Role("exampleRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": [
 *           "scheduler.redshift.amazonaws.com"
 *         ]
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const examplePolicy = new aws.iam.Policy("examplePolicy", {policy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *       {
 *           "Sid": "VisualEditor0",
 *           "Effect": "Allow",
 *           "Action": [
 *               "redshift:PauseCluster",
 *               "redshift:ResumeCluster",
 *               "redshift:ResizeCluster"
 *           ],
 *           "Resource": "*"
 *       }
 *   ]
 * }
 * `});
 * const exampleRolePolicyAttachment = new aws.iam.RolePolicyAttachment("exampleRolePolicyAttachment", {
 *     policyArn: examplePolicy.arn,
 *     role: exampleRole.name,
 * });
 * const exampleScheduledAction = new aws.redshift.ScheduledAction("exampleScheduledAction", {
 *     schedule: "cron(00 23 * * ? *)",
 *     iamRole: exampleRole.arn,
 *     targetAction: {
 *         pauseCluster: {
 *             clusterIdentifier: "tf-redshift001",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_role = aws.iam.Role("exampleRole", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": [
 *           "scheduler.redshift.amazonaws.com"
 *         ]
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * """)
 * example_policy = aws.iam.Policy("examplePolicy", policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *       {
 *           "Sid": "VisualEditor0",
 *           "Effect": "Allow",
 *           "Action": [
 *               "redshift:PauseCluster",
 *               "redshift:ResumeCluster",
 *               "redshift:ResizeCluster"
 *           ],
 *           "Resource": "*"
 *       }
 *   ]
 * }
 * """)
 * example_role_policy_attachment = aws.iam.RolePolicyAttachment("exampleRolePolicyAttachment",
 *     policy_arn=example_policy.arn,
 *     role=example_role.name)
 * example_scheduled_action = aws.redshift.ScheduledAction("exampleScheduledAction",
 *     schedule="cron(00 23 * * ? *)",
 *     iam_role=example_role.arn,
 *     target_action=aws.redshift.ScheduledActionTargetActionArgs(
 *         pause_cluster=aws.redshift.ScheduledActionTargetActionPauseClusterArgs(
 *             cluster_identifier="tf-redshift001",
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleRole = new Aws.Iam.Role("exampleRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": ""sts:AssumeRole"",
 *       ""Principal"": {
 *         ""Service"": [
 *           ""scheduler.redshift.amazonaws.com""
 *         ]
 *       },
 *       ""Effect"": ""Allow"",
 *       ""Sid"": """"
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var examplePolicy = new Aws.Iam.Policy("examplePolicy", new Aws.Iam.PolicyArgs
 *         {
 *             Policy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *       {
 *           ""Sid"": ""VisualEditor0"",
 *           ""Effect"": ""Allow"",
 *           ""Action"": [
 *               ""redshift:PauseCluster"",
 *               ""redshift:ResumeCluster"",
 *               ""redshift:ResizeCluster""
 *           ],
 *           ""Resource"": ""*""
 *       }
 *   ]
 * }
 * ",
 *         });
 *         var exampleRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("exampleRolePolicyAttachment", new Aws.Iam.RolePolicyAttachmentArgs
 *         {
 *             PolicyArn = examplePolicy.Arn,
 *             Role = exampleRole.Name,
 *         });
 *         var exampleScheduledAction = new Aws.RedShift.ScheduledAction("exampleScheduledAction", new Aws.RedShift.ScheduledActionArgs
 *         {
 *             Schedule = "cron(00 23 * * ? *)",
 *             IamRole = exampleRole.Arn,
 *             TargetAction = new Aws.RedShift.Inputs.ScheduledActionTargetActionArgs
 *             {
 *                 PauseCluster = new Aws.RedShift.Inputs.ScheduledActionTargetActionPauseClusterArgs
 *                 {
 *                     ClusterIdentifier = "tf-redshift001",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/redshift"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleRole, err := iam.NewRole(ctx, "exampleRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": [\n", "          \"scheduler.redshift.amazonaws.com\"\n", "        ]\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		examplePolicy, err := iam.NewPolicy(ctx, "examplePolicy", &iam.PolicyArgs{
 * 			Policy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "      {\n", "          \"Sid\": \"VisualEditor0\",\n", "          \"Effect\": \"Allow\",\n", "          \"Action\": [\n", "              \"redshift:PauseCluster\",\n", "              \"redshift:ResumeCluster\",\n", "              \"redshift:ResizeCluster\"\n", "          ],\n", "          \"Resource\": \"*\"\n", "      }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicyAttachment(ctx, "exampleRolePolicyAttachment", &iam.RolePolicyAttachmentArgs{
 * 			PolicyArn: examplePolicy.Arn,
 * 			Role:      exampleRole.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = redshift.NewScheduledAction(ctx, "exampleScheduledAction", &redshift.ScheduledActionArgs{
 * 			Schedule: pulumi.String("cron(00 23 * * ? *)"),
 * 			IamRole:  exampleRole.Arn,
 * 			TargetAction: &redshift.ScheduledActionTargetActionArgs{
 * 				PauseCluster: &redshift.ScheduledActionTargetActionPauseClusterArgs{
 * 					ClusterIdentifier: pulumi.String("tf-redshift001"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Resize Cluster Action
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.redshift.ScheduledAction("example", {
 *     schedule: "cron(00 23 * * ? *)",
 *     iamRole: aws_iam_role.example.arn,
 *     targetAction: {
 *         resizeCluster: {
 *             clusterIdentifier: "tf-redshift001",
 *             clusterType: "multi-node",
 *             nodeType: "dc1.large",
 *             numberOfNodes: 2,
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.redshift.ScheduledAction("example",
 *     schedule="cron(00 23 * * ? *)",
 *     iam_role=aws_iam_role["example"]["arn"],
 *     target_action=aws.redshift.ScheduledActionTargetActionArgs(
 *         resize_cluster=aws.redshift.ScheduledActionTargetActionResizeClusterArgs(
 *             cluster_identifier="tf-redshift001",
 *             cluster_type="multi-node",
 *             node_type="dc1.large",
 *             number_of_nodes=2,
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.RedShift.ScheduledAction("example", new Aws.RedShift.ScheduledActionArgs
 *         {
 *             Schedule = "cron(00 23 * * ? *)",
 *             IamRole = aws_iam_role.Example.Arn,
 *             TargetAction = new Aws.RedShift.Inputs.ScheduledActionTargetActionArgs
 *             {
 *                 ResizeCluster = new Aws.RedShift.Inputs.ScheduledActionTargetActionResizeClusterArgs
 *                 {
 *                     ClusterIdentifier = "tf-redshift001",
 *                     ClusterType = "multi-node",
 *                     NodeType = "dc1.large",
 *                     NumberOfNodes = 2,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/redshift"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := redshift.NewScheduledAction(ctx, "example", &redshift.ScheduledActionArgs{
 * 			Schedule: pulumi.String("cron(00 23 * * ? *)"),
 * 			IamRole:  pulumi.Any(aws_iam_role.Example.Arn),
 * 			TargetAction: &redshift.ScheduledActionTargetActionArgs{
 * 				ResizeCluster: &redshift.ScheduledActionTargetActionResizeClusterArgs{
 * 					ClusterIdentifier: pulumi.String("tf-redshift001"),
 * 					ClusterType:       pulumi.String("multi-node"),
 * 					NodeType:          pulumi.String("dc1.large"),
 * 					NumberOfNodes:     pulumi.Int(2),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Redshift Scheduled Action can be imported using the `name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:redshift/scheduledAction:ScheduledAction example tf-redshift-scheduled-action
 * ```
 * 
 *  
 */
@ResourceType(type="aws:redshift/scheduledAction:ScheduledAction")
public class ScheduledAction extends io.pulumi.resources.CustomResource {
    /**
     * The description of the scheduled action.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the scheduled action.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Whether to enable the scheduled action. Default is `true` .
     * 
     */
    @Export(name="enable", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enable;

    /**
     * @return Whether to enable the scheduled action. Default is `true` .
     * 
     */
    public Output</* @Nullable */ Boolean> getEnable() {
        return this.enable;
    }
    /**
     * The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    @Export(name="endTime", type=String.class, parameters={})
    private Output</* @Nullable */ String> endTime;

    /**
     * @return The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    public Output</* @Nullable */ String> getEndTime() {
        return this.endTime;
    }
    /**
     * The IAM role to assume to run the scheduled action.
     * 
     */
    @Export(name="iamRole", type=String.class, parameters={})
    private Output<String> iamRole;

    /**
     * @return The IAM role to assume to run the scheduled action.
     * 
     */
    public Output<String> getIamRole() {
        return this.iamRole;
    }
    /**
     * The scheduled action name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The scheduled action name.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example `at(2016-03-04T17:27:00)` or `cron(0 10 ? * MON *)`. See [Scheduled Action](https://docs.aws.amazon.com/redshift/latest/APIReference/API_ScheduledAction.html) for more information.
     * 
     */
    @Export(name="schedule", type=String.class, parameters={})
    private Output<String> schedule;

    /**
     * @return The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example `at(2016-03-04T17:27:00)` or `cron(0 10 ? * MON *)`. See [Scheduled Action](https://docs.aws.amazon.com/redshift/latest/APIReference/API_ScheduledAction.html) for more information.
     * 
     */
    public Output<String> getSchedule() {
        return this.schedule;
    }
    /**
     * The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    @Export(name="startTime", type=String.class, parameters={})
    private Output</* @Nullable */ String> startTime;

    /**
     * @return The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
     * 
     */
    public Output</* @Nullable */ String> getStartTime() {
        return this.startTime;
    }
    /**
     * Target action. Documented below.
     * 
     */
    @Export(name="targetAction", type=ScheduledActionTargetAction.class, parameters={})
    private Output<ScheduledActionTargetAction> targetAction;

    /**
     * @return Target action. Documented below.
     * 
     */
    public Output<ScheduledActionTargetAction> getTargetAction() {
        return this.targetAction;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ScheduledAction(String name) {
        this(name, ScheduledActionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ScheduledAction(String name, ScheduledActionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ScheduledAction(String name, ScheduledActionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:redshift/scheduledAction:ScheduledAction", name, args == null ? ScheduledActionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ScheduledAction(String name, Output<String> id, @Nullable ScheduledActionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:redshift/scheduledAction:ScheduledAction", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ScheduledAction get(String name, Output<String> id, @Nullable ScheduledActionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ScheduledAction(name, id, state, options);
    }
}
