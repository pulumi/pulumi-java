// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecs;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.ecs.TaskDefinitionArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionState;
import io.pulumi.aws.ecs.outputs.TaskDefinitionEphemeralStorage;
import io.pulumi.aws.ecs.outputs.TaskDefinitionInferenceAccelerator;
import io.pulumi.aws.ecs.outputs.TaskDefinitionPlacementConstraint;
import io.pulumi.aws.ecs.outputs.TaskDefinitionProxyConfiguration;
import io.pulumi.aws.ecs.outputs.TaskDefinitionRuntimePlatform;
import io.pulumi.aws.ecs.outputs.TaskDefinitionVolume;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Manages a revision of an ECS task definition to be used in `aws.ecs.Service`.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * ECS Task Definitions can be imported via their Amazon Resource Name (ARN)
 * 
 * ```sh
 *  $ pulumi import aws:ecs/taskDefinition:TaskDefinition example arn:aws:ecs:us-east-1:012345678910:task-definition/mytaskfamily:123
 * ```
 * 
 */
@ResourceType(type="aws:ecs/taskDefinition:TaskDefinition")
public class TaskDefinition extends io.pulumi.resources.CustomResource {
    /**
     * Full ARN of the Task Definition (including both `family` and `revision`).
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Full ARN of the Task Definition (including both `family` and `revision`).
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
     * 
     */
    @Export(name="containerDefinitions", type=String.class, parameters={})
    private Output<String> containerDefinitions;

    /**
     * @return A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
     * 
     */
    public Output<String> getContainerDefinitions() {
        return this.containerDefinitions;
    }
    /**
     * Number of cpu units used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
     * 
     */
    @Export(name="cpu", type=String.class, parameters={})
    private Output</* @Nullable */ String> cpu;

    /**
     * @return Number of cpu units used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
     * 
     */
    public Output</* @Nullable */ String> getCpu() {
        return this.cpu;
    }
    /**
     * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
     * 
     */
    @Export(name="ephemeralStorage", type=TaskDefinitionEphemeralStorage.class, parameters={})
    private Output</* @Nullable */ TaskDefinitionEphemeralStorage> ephemeralStorage;

    /**
     * @return The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
     * 
     */
    public Output</* @Nullable */ TaskDefinitionEphemeralStorage> getEphemeralStorage() {
        return this.ephemeralStorage;
    }
    /**
     * ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
     * 
     */
    @Export(name="executionRoleArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> executionRoleArn;

    /**
     * @return ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
     * 
     */
    public Output</* @Nullable */ String> getExecutionRoleArn() {
        return this.executionRoleArn;
    }
    /**
     * A unique name for your task definition.
     * 
     */
    @Export(name="family", type=String.class, parameters={})
    private Output<String> family;

    /**
     * @return A unique name for your task definition.
     * 
     */
    public Output<String> getFamily() {
        return this.family;
    }
    /**
     * Configuration block(s) with Inference Accelerators settings. Detailed below.
     * 
     */
    @Export(name="inferenceAccelerators", type=List.class, parameters={TaskDefinitionInferenceAccelerator.class})
    private Output</* @Nullable */ List<TaskDefinitionInferenceAccelerator>> inferenceAccelerators;

    /**
     * @return Configuration block(s) with Inference Accelerators settings. Detailed below.
     * 
     */
    public Output</* @Nullable */ List<TaskDefinitionInferenceAccelerator>> getInferenceAccelerators() {
        return this.inferenceAccelerators;
    }
    /**
     * IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
     * 
     */
    @Export(name="ipcMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> ipcMode;

    /**
     * @return IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
     * 
     */
    public Output</* @Nullable */ String> getIpcMode() {
        return this.ipcMode;
    }
    /**
     * Amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
     * 
     */
    @Export(name="memory", type=String.class, parameters={})
    private Output</* @Nullable */ String> memory;

    /**
     * @return Amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
     * 
     */
    public Output</* @Nullable */ String> getMemory() {
        return this.memory;
    }
    /**
     * Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
     * 
     */
    @Export(name="networkMode", type=String.class, parameters={})
    private Output<String> networkMode;

    /**
     * @return Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
     * 
     */
    public Output<String> getNetworkMode() {
        return this.networkMode;
    }
    /**
     * Process namespace to use for the containers in the task. The valid values are `host` and `task`.
     * 
     */
    @Export(name="pidMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> pidMode;

    /**
     * @return Process namespace to use for the containers in the task. The valid values are `host` and `task`.
     * 
     */
    public Output</* @Nullable */ String> getPidMode() {
        return this.pidMode;
    }
    /**
     * Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
     * 
     */
    @Export(name="placementConstraints", type=List.class, parameters={TaskDefinitionPlacementConstraint.class})
    private Output</* @Nullable */ List<TaskDefinitionPlacementConstraint>> placementConstraints;

    /**
     * @return Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
     * 
     */
    public Output</* @Nullable */ List<TaskDefinitionPlacementConstraint>> getPlacementConstraints() {
        return this.placementConstraints;
    }
    /**
     * Configuration block for the App Mesh proxy. Detailed below.
     * 
     */
    @Export(name="proxyConfiguration", type=TaskDefinitionProxyConfiguration.class, parameters={})
    private Output</* @Nullable */ TaskDefinitionProxyConfiguration> proxyConfiguration;

    /**
     * @return Configuration block for the App Mesh proxy. Detailed below.
     * 
     */
    public Output</* @Nullable */ TaskDefinitionProxyConfiguration> getProxyConfiguration() {
        return this.proxyConfiguration;
    }
    /**
     * Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
     * 
     */
    @Export(name="requiresCompatibilities", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> requiresCompatibilities;

    /**
     * @return Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
     * 
     */
    public Output</* @Nullable */ List<String>> getRequiresCompatibilities() {
        return this.requiresCompatibilities;
    }
    /**
     * Revision of the task in a particular family.
     * 
     */
    @Export(name="revision", type=Integer.class, parameters={})
    private Output<Integer> revision;

    /**
     * @return Revision of the task in a particular family.
     * 
     */
    public Output<Integer> getRevision() {
        return this.revision;
    }
    /**
     * Configuration block for runtime_platform that containers in your task may use.
     * 
     */
    @Export(name="runtimePlatform", type=TaskDefinitionRuntimePlatform.class, parameters={})
    private Output</* @Nullable */ TaskDefinitionRuntimePlatform> runtimePlatform;

    /**
     * @return Configuration block for runtime_platform that containers in your task may use.
     * 
     */
    public Output</* @Nullable */ TaskDefinitionRuntimePlatform> getRuntimePlatform() {
        return this.runtimePlatform;
    }
    @Export(name="skipDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> skipDestroy;

    public Output</* @Nullable */ Boolean> getSkipDestroy() {
        return this.skipDestroy;
    }
    /**
     * Key-value map of resource tags.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * Map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return Map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
     * 
     */
    @Export(name="taskRoleArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> taskRoleArn;

    /**
     * @return ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
     * 
     */
    public Output</* @Nullable */ String> getTaskRoleArn() {
        return this.taskRoleArn;
    }
    /**
     * Configuration block for volumes that containers in your task may use. Detailed below.
     * 
     */
    @Export(name="volumes", type=List.class, parameters={TaskDefinitionVolume.class})
    private Output</* @Nullable */ List<TaskDefinitionVolume>> volumes;

    /**
     * @return Configuration block for volumes that containers in your task may use. Detailed below.
     * 
     */
    public Output</* @Nullable */ List<TaskDefinitionVolume>> getVolumes() {
        return this.volumes;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TaskDefinition(String name) {
        this(name, TaskDefinitionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TaskDefinition(String name, TaskDefinitionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TaskDefinition(String name, TaskDefinitionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ecs/taskDefinition:TaskDefinition", name, args == null ? TaskDefinitionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private TaskDefinition(String name, Output<String> id, @Nullable TaskDefinitionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ecs/taskDefinition:TaskDefinition", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TaskDefinition get(String name, Output<String> id, @Nullable TaskDefinitionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new TaskDefinition(name, id, state, options);
    }
}
