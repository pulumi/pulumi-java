// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.route53;

import io.pulumi.aws.route53.enums.RecordType;
import io.pulumi.aws.route53.inputs.RecordAliasArgs;
import io.pulumi.aws.route53.inputs.RecordFailoverRoutingPolicyArgs;
import io.pulumi.aws.route53.inputs.RecordGeolocationRoutingPolicyArgs;
import io.pulumi.aws.route53.inputs.RecordLatencyRoutingPolicyArgs;
import io.pulumi.aws.route53.inputs.RecordWeightedRoutingPolicyArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RecordArgs extends io.pulumi.resources.ResourceArgs {

    public static final RecordArgs Empty = new RecordArgs();

    /**
     * An alias block. Conflicts with `ttl` & `records`.
     * Alias record documented below.
     * 
     */
    @InputImport(name="aliases")
      private final @Nullable Input<List<RecordAliasArgs>> aliases;

    public Input<List<RecordAliasArgs>> getAliases() {
        return this.aliases == null ? Input.empty() : this.aliases;
    }

    /**
     * Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
     * 
     */
    @InputImport(name="allowOverwrite")
      private final @Nullable Input<Boolean> allowOverwrite;

    public Input<Boolean> getAllowOverwrite() {
        return this.allowOverwrite == null ? Input.empty() : this.allowOverwrite;
    }

    /**
     * A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
     * 
     */
    @InputImport(name="failoverRoutingPolicies")
      private final @Nullable Input<List<RecordFailoverRoutingPolicyArgs>> failoverRoutingPolicies;

    public Input<List<RecordFailoverRoutingPolicyArgs>> getFailoverRoutingPolicies() {
        return this.failoverRoutingPolicies == null ? Input.empty() : this.failoverRoutingPolicies;
    }

    /**
     * A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
     * 
     */
    @InputImport(name="geolocationRoutingPolicies")
      private final @Nullable Input<List<RecordGeolocationRoutingPolicyArgs>> geolocationRoutingPolicies;

    public Input<List<RecordGeolocationRoutingPolicyArgs>> getGeolocationRoutingPolicies() {
        return this.geolocationRoutingPolicies == null ? Input.empty() : this.geolocationRoutingPolicies;
    }

    /**
     * The health check the record should be associated with.
     * 
     */
    @InputImport(name="healthCheckId")
      private final @Nullable Input<String> healthCheckId;

    public Input<String> getHealthCheckId() {
        return this.healthCheckId == null ? Input.empty() : this.healthCheckId;
    }

    /**
     * A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
     * 
     */
    @InputImport(name="latencyRoutingPolicies")
      private final @Nullable Input<List<RecordLatencyRoutingPolicyArgs>> latencyRoutingPolicies;

    public Input<List<RecordLatencyRoutingPolicyArgs>> getLatencyRoutingPolicies() {
        return this.latencyRoutingPolicies == null ? Input.empty() : this.latencyRoutingPolicies;
    }

    /**
     * Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
     * 
     */
    @InputImport(name="multivalueAnswerRoutingPolicy")
      private final @Nullable Input<Boolean> multivalueAnswerRoutingPolicy;

    public Input<Boolean> getMultivalueAnswerRoutingPolicy() {
        return this.multivalueAnswerRoutingPolicy == null ? Input.empty() : this.multivalueAnswerRoutingPolicy;
    }

    /**
     * DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the configuration string (e.g. `"first255characters\"\"morecharacters"`).
     * 
     */
    @InputImport(name="records")
      private final @Nullable Input<List<String>> records;

    public Input<List<String>> getRecords() {
        return this.records == null ? Input.empty() : this.records;
    }

    /**
     * Unique identifier to differentiate records with routing policies from one another. Required if using `failover`, `geolocation`, `latency`, or `weighted` routing policies documented below.
     * 
     */
    @InputImport(name="setIdentifier")
      private final @Nullable Input<String> setIdentifier;

    public Input<String> getSetIdentifier() {
        return this.setIdentifier == null ? Input.empty() : this.setIdentifier;
    }

    /**
     * The TTL of the record.
     * 
     */
    @InputImport(name="ttl")
      private final @Nullable Input<Integer> ttl;

    public Input<Integer> getTtl() {
        return this.ttl == null ? Input.empty() : this.ttl;
    }

    /**
     * `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<Either<String,RecordType>> type;

    public Input<Either<String,RecordType>> getType() {
        return this.type;
    }

    /**
     * A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
     * 
     */
    @InputImport(name="weightedRoutingPolicies")
      private final @Nullable Input<List<RecordWeightedRoutingPolicyArgs>> weightedRoutingPolicies;

    public Input<List<RecordWeightedRoutingPolicyArgs>> getWeightedRoutingPolicies() {
        return this.weightedRoutingPolicies == null ? Input.empty() : this.weightedRoutingPolicies;
    }

    /**
     * Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
     * 
     */
    @InputImport(name="zoneId", required=true)
      private final Input<String> zoneId;

    public Input<String> getZoneId() {
        return this.zoneId;
    }

    public RecordArgs(
        @Nullable Input<List<RecordAliasArgs>> aliases,
        @Nullable Input<Boolean> allowOverwrite,
        @Nullable Input<List<RecordFailoverRoutingPolicyArgs>> failoverRoutingPolicies,
        @Nullable Input<List<RecordGeolocationRoutingPolicyArgs>> geolocationRoutingPolicies,
        @Nullable Input<String> healthCheckId,
        @Nullable Input<List<RecordLatencyRoutingPolicyArgs>> latencyRoutingPolicies,
        @Nullable Input<Boolean> multivalueAnswerRoutingPolicy,
        Input<String> name,
        @Nullable Input<List<String>> records,
        @Nullable Input<String> setIdentifier,
        @Nullable Input<Integer> ttl,
        Input<Either<String,RecordType>> type,
        @Nullable Input<List<RecordWeightedRoutingPolicyArgs>> weightedRoutingPolicies,
        Input<String> zoneId) {
        this.aliases = aliases;
        this.allowOverwrite = allowOverwrite;
        this.failoverRoutingPolicies = failoverRoutingPolicies;
        this.geolocationRoutingPolicies = geolocationRoutingPolicies;
        this.healthCheckId = healthCheckId;
        this.latencyRoutingPolicies = latencyRoutingPolicies;
        this.multivalueAnswerRoutingPolicy = multivalueAnswerRoutingPolicy;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.records = records;
        this.setIdentifier = setIdentifier;
        this.ttl = ttl;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.weightedRoutingPolicies = weightedRoutingPolicies;
        this.zoneId = Objects.requireNonNull(zoneId, "expected parameter 'zoneId' to be non-null");
    }

    private RecordArgs() {
        this.aliases = Input.empty();
        this.allowOverwrite = Input.empty();
        this.failoverRoutingPolicies = Input.empty();
        this.geolocationRoutingPolicies = Input.empty();
        this.healthCheckId = Input.empty();
        this.latencyRoutingPolicies = Input.empty();
        this.multivalueAnswerRoutingPolicy = Input.empty();
        this.name = Input.empty();
        this.records = Input.empty();
        this.setIdentifier = Input.empty();
        this.ttl = Input.empty();
        this.type = Input.empty();
        this.weightedRoutingPolicies = Input.empty();
        this.zoneId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<RecordAliasArgs>> aliases;
        private @Nullable Input<Boolean> allowOverwrite;
        private @Nullable Input<List<RecordFailoverRoutingPolicyArgs>> failoverRoutingPolicies;
        private @Nullable Input<List<RecordGeolocationRoutingPolicyArgs>> geolocationRoutingPolicies;
        private @Nullable Input<String> healthCheckId;
        private @Nullable Input<List<RecordLatencyRoutingPolicyArgs>> latencyRoutingPolicies;
        private @Nullable Input<Boolean> multivalueAnswerRoutingPolicy;
        private Input<String> name;
        private @Nullable Input<List<String>> records;
        private @Nullable Input<String> setIdentifier;
        private @Nullable Input<Integer> ttl;
        private Input<Either<String,RecordType>> type;
        private @Nullable Input<List<RecordWeightedRoutingPolicyArgs>> weightedRoutingPolicies;
        private Input<String> zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(RecordArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliases = defaults.aliases;
    	      this.allowOverwrite = defaults.allowOverwrite;
    	      this.failoverRoutingPolicies = defaults.failoverRoutingPolicies;
    	      this.geolocationRoutingPolicies = defaults.geolocationRoutingPolicies;
    	      this.healthCheckId = defaults.healthCheckId;
    	      this.latencyRoutingPolicies = defaults.latencyRoutingPolicies;
    	      this.multivalueAnswerRoutingPolicy = defaults.multivalueAnswerRoutingPolicy;
    	      this.name = defaults.name;
    	      this.records = defaults.records;
    	      this.setIdentifier = defaults.setIdentifier;
    	      this.ttl = defaults.ttl;
    	      this.type = defaults.type;
    	      this.weightedRoutingPolicies = defaults.weightedRoutingPolicies;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder aliases(@Nullable Input<List<RecordAliasArgs>> aliases) {
            this.aliases = aliases;
            return this;
        }

        public Builder aliases(@Nullable List<RecordAliasArgs> aliases) {
            this.aliases = Input.ofNullable(aliases);
            return this;
        }

        public Builder allowOverwrite(@Nullable Input<Boolean> allowOverwrite) {
            this.allowOverwrite = allowOverwrite;
            return this;
        }

        public Builder allowOverwrite(@Nullable Boolean allowOverwrite) {
            this.allowOverwrite = Input.ofNullable(allowOverwrite);
            return this;
        }

        public Builder failoverRoutingPolicies(@Nullable Input<List<RecordFailoverRoutingPolicyArgs>> failoverRoutingPolicies) {
            this.failoverRoutingPolicies = failoverRoutingPolicies;
            return this;
        }

        public Builder failoverRoutingPolicies(@Nullable List<RecordFailoverRoutingPolicyArgs> failoverRoutingPolicies) {
            this.failoverRoutingPolicies = Input.ofNullable(failoverRoutingPolicies);
            return this;
        }

        public Builder geolocationRoutingPolicies(@Nullable Input<List<RecordGeolocationRoutingPolicyArgs>> geolocationRoutingPolicies) {
            this.geolocationRoutingPolicies = geolocationRoutingPolicies;
            return this;
        }

        public Builder geolocationRoutingPolicies(@Nullable List<RecordGeolocationRoutingPolicyArgs> geolocationRoutingPolicies) {
            this.geolocationRoutingPolicies = Input.ofNullable(geolocationRoutingPolicies);
            return this;
        }

        public Builder healthCheckId(@Nullable Input<String> healthCheckId) {
            this.healthCheckId = healthCheckId;
            return this;
        }

        public Builder healthCheckId(@Nullable String healthCheckId) {
            this.healthCheckId = Input.ofNullable(healthCheckId);
            return this;
        }

        public Builder latencyRoutingPolicies(@Nullable Input<List<RecordLatencyRoutingPolicyArgs>> latencyRoutingPolicies) {
            this.latencyRoutingPolicies = latencyRoutingPolicies;
            return this;
        }

        public Builder latencyRoutingPolicies(@Nullable List<RecordLatencyRoutingPolicyArgs> latencyRoutingPolicies) {
            this.latencyRoutingPolicies = Input.ofNullable(latencyRoutingPolicies);
            return this;
        }

        public Builder multivalueAnswerRoutingPolicy(@Nullable Input<Boolean> multivalueAnswerRoutingPolicy) {
            this.multivalueAnswerRoutingPolicy = multivalueAnswerRoutingPolicy;
            return this;
        }

        public Builder multivalueAnswerRoutingPolicy(@Nullable Boolean multivalueAnswerRoutingPolicy) {
            this.multivalueAnswerRoutingPolicy = Input.ofNullable(multivalueAnswerRoutingPolicy);
            return this;
        }

        public Builder name(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder records(@Nullable Input<List<String>> records) {
            this.records = records;
            return this;
        }

        public Builder records(@Nullable List<String> records) {
            this.records = Input.ofNullable(records);
            return this;
        }

        public Builder setIdentifier(@Nullable Input<String> setIdentifier) {
            this.setIdentifier = setIdentifier;
            return this;
        }

        public Builder setIdentifier(@Nullable String setIdentifier) {
            this.setIdentifier = Input.ofNullable(setIdentifier);
            return this;
        }

        public Builder ttl(@Nullable Input<Integer> ttl) {
            this.ttl = ttl;
            return this;
        }

        public Builder ttl(@Nullable Integer ttl) {
            this.ttl = Input.ofNullable(ttl);
            return this;
        }

        public Builder type(Input<Either<String,RecordType>> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(Either<String,RecordType> type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder weightedRoutingPolicies(@Nullable Input<List<RecordWeightedRoutingPolicyArgs>> weightedRoutingPolicies) {
            this.weightedRoutingPolicies = weightedRoutingPolicies;
            return this;
        }

        public Builder weightedRoutingPolicies(@Nullable List<RecordWeightedRoutingPolicyArgs> weightedRoutingPolicies) {
            this.weightedRoutingPolicies = Input.ofNullable(weightedRoutingPolicies);
            return this;
        }

        public Builder zoneId(Input<String> zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }

        public Builder zoneId(String zoneId) {
            this.zoneId = Input.of(Objects.requireNonNull(zoneId));
            return this;
        }
        public RecordArgs build() {
            return new RecordArgs(aliases, allowOverwrite, failoverRoutingPolicies, geolocationRoutingPolicies, healthCheckId, latencyRoutingPolicies, multivalueAnswerRoutingPolicy, name, records, setIdentifier, ttl, type, weightedRoutingPolicies, zoneId);
        }
    }
}
