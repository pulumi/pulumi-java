// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lightsail;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.lightsail.InstancePublicPortsArgs;
import io.pulumi.aws.lightsail.inputs.InstancePublicPortsState;
import io.pulumi.aws.lightsail.outputs.InstancePublicPortsPortInfo;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses allowed to connect to the instance through the ports, and the protocol.
 * 
 * > See [What is Amazon Lightsail?](https://lightsail.aws.amazon.com/ls/docs/getting-started/article/what-is-amazon-lightsail) for more information.
 * 
 * > **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testInstance = new aws.lightsail.Instance("testInstance", {
 *     availabilityZone: data.aws_availability_zones.available.names[0],
 *     blueprintId: "amazon_linux",
 *     bundleId: "nano_1_0",
 * });
 * const testInstancePublicPorts = new aws.lightsail.InstancePublicPorts("testInstancePublicPorts", {
 *     instanceName: testInstance.name,
 *     portInfos: [{
 *         protocol: "tcp",
 *         fromPort: 80,
 *         toPort: 80,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test_instance = aws.lightsail.Instance("testInstance",
 *     availability_zone=data["aws_availability_zones"]["available"]["names"],
 *     blueprint_id="amazon_linux",
 *     bundle_id="nano_1_0")
 * test_instance_public_ports = aws.lightsail.InstancePublicPorts("testInstancePublicPorts",
 *     instance_name=test_instance.name,
 *     port_infos=[aws.lightsail.InstancePublicPortsPortInfoArgs(
 *         protocol="tcp",
 *         from_port=80,
 *         to_port=80,
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var testInstance = new Aws.LightSail.Instance("testInstance", new Aws.LightSail.InstanceArgs
 *         {
 *             AvailabilityZone = data.Aws_availability_zones.Available.Names[0],
 *             BlueprintId = "amazon_linux",
 *             BundleId = "nano_1_0",
 *         });
 *         var testInstancePublicPorts = new Aws.LightSail.InstancePublicPorts("testInstancePublicPorts", new Aws.LightSail.InstancePublicPortsArgs
 *         {
 *             InstanceName = testInstance.Name,
 *             PortInfos = 
 *             {
 *                 new Aws.LightSail.Inputs.InstancePublicPortsPortInfoArgs
 *                 {
 *                     Protocol = "tcp",
 *                     FromPort = 80,
 *                     ToPort = 80,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/lightsail"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		testInstance, err := lightsail.NewInstance(ctx, "testInstance", &lightsail.InstanceArgs{
 * 			AvailabilityZone: pulumi.Any(data.Aws_availability_zones.Available.Names[0]),
 * 			BlueprintId:      pulumi.String("amazon_linux"),
 * 			BundleId:         pulumi.String("nano_1_0"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = lightsail.NewInstancePublicPorts(ctx, "testInstancePublicPorts", &lightsail.InstancePublicPortsArgs{
 * 			InstanceName: testInstance.Name,
 * 			PortInfos: lightsail.InstancePublicPortsPortInfoArray{
 * 				&lightsail.InstancePublicPortsPortInfoArgs{
 * 					Protocol: pulumi.String("tcp"),
 * 					FromPort: pulumi.Int(80),
 * 					ToPort:   pulumi.Int(80),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 */
@ResourceType(type="aws:lightsail/instancePublicPorts:InstancePublicPorts")
public class InstancePublicPorts extends io.pulumi.resources.CustomResource {
    /**
     * Name of the Lightsail Instance.
     * 
     */
    @Export(name="instanceName", type=String.class, parameters={})
    private Output<String> instanceName;

    /**
     * @return Name of the Lightsail Instance.
     * 
     */
    public Output<String> getInstanceName() {
        return this.instanceName;
    }
    /**
     * Configuration block with port information. AWS closes all currently open ports that are not included in the `port_info`. Detailed below.
     * 
     */
    @Export(name="portInfos", type=List.class, parameters={InstancePublicPortsPortInfo.class})
    private Output<List<InstancePublicPortsPortInfo>> portInfos;

    /**
     * @return Configuration block with port information. AWS closes all currently open ports that are not included in the `port_info`. Detailed below.
     * 
     */
    public Output<List<InstancePublicPortsPortInfo>> getPortInfos() {
        return this.portInfos;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InstancePublicPorts(String name) {
        this(name, InstancePublicPortsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InstancePublicPorts(String name, InstancePublicPortsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InstancePublicPorts(String name, InstancePublicPortsArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:lightsail/instancePublicPorts:InstancePublicPorts", name, args == null ? InstancePublicPortsArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private InstancePublicPorts(String name, Output<String> id, @Nullable InstancePublicPortsState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:lightsail/instancePublicPorts:InstancePublicPorts", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InstancePublicPorts get(String name, Output<String> id, @Nullable InstancePublicPortsState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new InstancePublicPorts(name, id, state, options);
    }
}
