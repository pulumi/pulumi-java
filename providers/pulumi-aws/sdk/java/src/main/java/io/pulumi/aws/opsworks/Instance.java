// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.opsworks;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.opsworks.InstanceArgs;
import io.pulumi.aws.opsworks.inputs.InstanceState;
import io.pulumi.aws.opsworks.outputs.InstanceEbsBlockDevice;
import io.pulumi.aws.opsworks.outputs.InstanceEphemeralBlockDevice;
import io.pulumi.aws.opsworks.outputs.InstanceRootBlockDevice;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Provides an OpsWorks instance resource.
 * 
 * ## Example Usage
 * ## Block devices
 * 
 * Each of the `*_block_device` attributes controls a portion of the AWS
 * Instance's "Block Device Mapping". It's a good idea to familiarize yourself with [AWS's Block Device
 * Mapping docs](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html)
 * to understand the implications of using these attributes.
 * 
 * The `root_block_device` mapping supports the following:
 * 
 * * `volume_type` - (Optional) The type of volume. Can be `"standard"`, `"gp2"`,
 *   or `"io1"`. (Default: `"standard"`).
 * * `volume_size` - (Optional) The size of the volume in gigabytes.
 * * `iops` - (Optional) The amount of provisioned
 *   [IOPS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
 *   This must be set with a `volume_type` of `"io1"`.
 * * `delete_on_termination` - (Optional) Whether the volume should be destroyed
 *   on instance termination (Default: `true`).
 * 
 * Modifying any of the `root_block_device` settings requires resource
 * replacement.
 * 
 * Each `ebs_block_device` supports the following:
 * 
 * * `device_name` - The name of the device to mount.
 * * `snapshot_id` - (Optional) The Snapshot ID to mount.
 * * `volume_type` - (Optional) The type of volume. Can be `"standard"`, `"gp2"`,
 *   or `"io1"`. (Default: `"standard"`).
 * * `volume_size` - (Optional) The size of the volume in gigabytes.
 * * `iops` - (Optional) The amount of provisioned
 *   [IOPS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
 *   This must be set with a `volume_type` of `"io1"`.
 * * `delete_on_termination` - (Optional) Whether the volume should be destroyed
 *   on instance termination (Default: `true`).
 * 
 * Modifying any `ebs_block_device` currently requires resource replacement.
 * 
 * Each `ephemeral_block_device` supports the following:
 * 
 * * `device_name` - The name of the block device to mount on the instance.
 * * `virtual_name` - The [Instance Store Device
 *   Name](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
 *   (e.g., `"ephemeral0"`)
 * 
 * Each AWS Instance type has a different set of Instance Store block devices
 * available for attachment. AWS [publishes a
 * list](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#StorageOnInstanceTypes)
 * of which ephemeral devices are available on each type. The devices are always
 * identified by the `virtual_name` in the format `"ephemeral{0..N}"`.
 * 
 * > **NOTE:** Currently, changes to `*_block_device` configuration of _existing_
 * resources cannot be automatically detected by this provider. After making updates
 * to block device configuration, resource recreation can be manually triggered by
 * using the [`up` command with the --replace argument](https://www.pulumi.com/docs/reference/cli/pulumi_up/).
 * 
 * ## Import
 * 
 * Opsworks Instances can be imported using the `instance id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:opsworks/instance:Instance my_instance 4d6d1710-ded9-42a1-b08e-b043ad7af1e2
 * ```
 * 
 */
@ResourceType(type="aws:opsworks/instance:Instance")
public class Instance extends io.pulumi.resources.CustomResource {
    /**
     * The AWS OpsWorks agent to install.  Defaults to `"INHERIT"`.
     * 
     */
    @OutputExport(name="agentVersion", type=String.class, parameters={})
    private Output</* @Nullable */ String> agentVersion;

    /**
     * @return The AWS OpsWorks agent to install.  Defaults to `"INHERIT"`.
     * 
     */
    public Output</* @Nullable */ String> getAgentVersion() {
        return this.agentVersion;
    }
    /**
     * The AMI to use for the instance.  If an AMI is specified, `os` must be `"Custom"`.
     * 
     */
    @OutputExport(name="amiId", type=String.class, parameters={})
    private Output<String> amiId;

    /**
     * @return The AMI to use for the instance.  If an AMI is specified, `os` must be `"Custom"`.
     * 
     */
    public Output<String> getAmiId() {
        return this.amiId;
    }
    /**
     * Machine architecture for created instances.  Can be either `"x86_64"` (the default) or `"i386"`
     * 
     */
    @OutputExport(name="architecture", type=String.class, parameters={})
    private Output</* @Nullable */ String> architecture;

    /**
     * @return Machine architecture for created instances.  Can be either `"x86_64"` (the default) or `"i386"`
     * 
     */
    public Output</* @Nullable */ String> getArchitecture() {
        return this.architecture;
    }
    /**
     * Creates load-based or time-based instances.  If set, can be either: `"load"` or `"timer"`.
     * 
     */
    @OutputExport(name="autoScalingType", type=String.class, parameters={})
    private Output</* @Nullable */ String> autoScalingType;

    /**
     * @return Creates load-based or time-based instances.  If set, can be either: `"load"` or `"timer"`.
     * 
     */
    public Output</* @Nullable */ String> getAutoScalingType() {
        return this.autoScalingType;
    }
    /**
     * Name of the availability zone where instances will be created
     * by default.
     * 
     */
    @OutputExport(name="availabilityZone", type=String.class, parameters={})
    private Output<String> availabilityZone;

    /**
     * @return Name of the availability zone where instances will be created
     * by default.
     * 
     */
    public Output<String> getAvailabilityZone() {
        return this.availabilityZone;
    }
    @OutputExport(name="createdAt", type=String.class, parameters={})
    private Output<String> createdAt;

    public Output<String> getCreatedAt() {
        return this.createdAt;
    }
    @OutputExport(name="deleteEbs", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> deleteEbs;

    public Output</* @Nullable */ Boolean> getDeleteEbs() {
        return this.deleteEbs;
    }
    @OutputExport(name="deleteEip", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> deleteEip;

    public Output</* @Nullable */ Boolean> getDeleteEip() {
        return this.deleteEip;
    }
    /**
     * Additional EBS block devices to attach to the
     * instance.  See Block Devices below for details.
     * 
     */
    @OutputExport(name="ebsBlockDevices", type=List.class, parameters={InstanceEbsBlockDevice.class})
    private Output<List<InstanceEbsBlockDevice>> ebsBlockDevices;

    /**
     * @return Additional EBS block devices to attach to the
     * instance.  See Block Devices below for details.
     * 
     */
    public Output<List<InstanceEbsBlockDevice>> getEbsBlockDevices() {
        return this.ebsBlockDevices;
    }
    /**
     * If true, the launched EC2 instance will be EBS-optimized.
     * 
     */
    @OutputExport(name="ebsOptimized", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> ebsOptimized;

    /**
     * @return If true, the launched EC2 instance will be EBS-optimized.
     * 
     */
    public Output</* @Nullable */ Boolean> getEbsOptimized() {
        return this.ebsOptimized;
    }
    /**
     * EC2 instance ID
     * 
     */
    @OutputExport(name="ec2InstanceId", type=String.class, parameters={})
    private Output<String> ec2InstanceId;

    /**
     * @return EC2 instance ID
     * 
     */
    public Output<String> getEc2InstanceId() {
        return this.ec2InstanceId;
    }
    @OutputExport(name="ecsClusterArn", type=String.class, parameters={})
    private Output<String> ecsClusterArn;

    public Output<String> getEcsClusterArn() {
        return this.ecsClusterArn;
    }
    @OutputExport(name="elasticIp", type=String.class, parameters={})
    private Output<String> elasticIp;

    public Output<String> getElasticIp() {
        return this.elasticIp;
    }
    /**
     * Customize Ephemeral (also known as
     * "Instance Store") volumes on the instance. See Block Devices below for details.
     * 
     */
    @OutputExport(name="ephemeralBlockDevices", type=List.class, parameters={InstanceEphemeralBlockDevice.class})
    private Output<List<InstanceEphemeralBlockDevice>> ephemeralBlockDevices;

    /**
     * @return Customize Ephemeral (also known as
     * "Instance Store") volumes on the instance. See Block Devices below for details.
     * 
     */
    public Output<List<InstanceEphemeralBlockDevice>> getEphemeralBlockDevices() {
        return this.ephemeralBlockDevices;
    }
    /**
     * The instance's host name.
     * 
     */
    @OutputExport(name="hostname", type=String.class, parameters={})
    private Output<String> hostname;

    /**
     * @return The instance's host name.
     * 
     */
    public Output<String> getHostname() {
        return this.hostname;
    }
    @OutputExport(name="infrastructureClass", type=String.class, parameters={})
    private Output<String> infrastructureClass;

    public Output<String> getInfrastructureClass() {
        return this.infrastructureClass;
    }
    /**
     * Controls where to install OS and package updates when the instance boots.  Defaults to `true`.
     * 
     */
    @OutputExport(name="installUpdatesOnBoot", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> installUpdatesOnBoot;

    /**
     * @return Controls where to install OS and package updates when the instance boots.  Defaults to `true`.
     * 
     */
    public Output</* @Nullable */ Boolean> getInstallUpdatesOnBoot() {
        return this.installUpdatesOnBoot;
    }
    @OutputExport(name="instanceProfileArn", type=String.class, parameters={})
    private Output<String> instanceProfileArn;

    public Output<String> getInstanceProfileArn() {
        return this.instanceProfileArn;
    }
    /**
     * The type of instance to start
     * 
     */
    @OutputExport(name="instanceType", type=String.class, parameters={})
    private Output</* @Nullable */ String> instanceType;

    /**
     * @return The type of instance to start
     * 
     */
    public Output</* @Nullable */ String> getInstanceType() {
        return this.instanceType;
    }
    @OutputExport(name="lastServiceErrorId", type=String.class, parameters={})
    private Output<String> lastServiceErrorId;

    public Output<String> getLastServiceErrorId() {
        return this.lastServiceErrorId;
    }
    /**
     * The ids of the layers the instance will belong to.
     * 
     */
    @OutputExport(name="layerIds", type=List.class, parameters={String.class})
    private Output<List<String>> layerIds;

    /**
     * @return The ids of the layers the instance will belong to.
     * 
     */
    public Output<List<String>> getLayerIds() {
        return this.layerIds;
    }
    /**
     * Name of operating system that will be installed.
     * 
     */
    @OutputExport(name="os", type=String.class, parameters={})
    private Output<String> os;

    /**
     * @return Name of operating system that will be installed.
     * 
     */
    public Output<String> getOs() {
        return this.os;
    }
    @OutputExport(name="platform", type=String.class, parameters={})
    private Output<String> platform;

    public Output<String> getPlatform() {
        return this.platform;
    }
    /**
     * The private DNS name assigned to the instance. Can only be
     * used inside the Amazon EC2, and only available if you've enabled DNS hostnames
     * for your VPC
     * 
     */
    @OutputExport(name="privateDns", type=String.class, parameters={})
    private Output<String> privateDns;

    /**
     * @return The private DNS name assigned to the instance. Can only be
     * used inside the Amazon EC2, and only available if you've enabled DNS hostnames
     * for your VPC
     * 
     */
    public Output<String> getPrivateDns() {
        return this.privateDns;
    }
    /**
     * The private IP address assigned to the instance
     * 
     */
    @OutputExport(name="privateIp", type=String.class, parameters={})
    private Output<String> privateIp;

    /**
     * @return The private IP address assigned to the instance
     * 
     */
    public Output<String> getPrivateIp() {
        return this.privateIp;
    }
    /**
     * The public DNS name assigned to the instance. For EC2-VPC, this
     * is only available if you've enabled DNS hostnames for your VPC
     * 
     */
    @OutputExport(name="publicDns", type=String.class, parameters={})
    private Output<String> publicDns;

    /**
     * @return The public DNS name assigned to the instance. For EC2-VPC, this
     * is only available if you've enabled DNS hostnames for your VPC
     * 
     */
    public Output<String> getPublicDns() {
        return this.publicDns;
    }
    /**
     * The public IP address assigned to the instance, if applicable.
     * 
     */
    @OutputExport(name="publicIp", type=String.class, parameters={})
    private Output<String> publicIp;

    /**
     * @return The public IP address assigned to the instance, if applicable.
     * 
     */
    public Output<String> getPublicIp() {
        return this.publicIp;
    }
    @OutputExport(name="registeredBy", type=String.class, parameters={})
    private Output<String> registeredBy;

    public Output<String> getRegisteredBy() {
        return this.registeredBy;
    }
    @OutputExport(name="reportedAgentVersion", type=String.class, parameters={})
    private Output<String> reportedAgentVersion;

    public Output<String> getReportedAgentVersion() {
        return this.reportedAgentVersion;
    }
    @OutputExport(name="reportedOsFamily", type=String.class, parameters={})
    private Output<String> reportedOsFamily;

    public Output<String> getReportedOsFamily() {
        return this.reportedOsFamily;
    }
    @OutputExport(name="reportedOsName", type=String.class, parameters={})
    private Output<String> reportedOsName;

    public Output<String> getReportedOsName() {
        return this.reportedOsName;
    }
    @OutputExport(name="reportedOsVersion", type=String.class, parameters={})
    private Output<String> reportedOsVersion;

    public Output<String> getReportedOsVersion() {
        return this.reportedOsVersion;
    }
    /**
     * Customize details about the root block
     * device of the instance. See Block Devices below for details.
     * 
     */
    @OutputExport(name="rootBlockDevices", type=List.class, parameters={InstanceRootBlockDevice.class})
    private Output<List<InstanceRootBlockDevice>> rootBlockDevices;

    /**
     * @return Customize details about the root block
     * device of the instance. See Block Devices below for details.
     * 
     */
    public Output<List<InstanceRootBlockDevice>> getRootBlockDevices() {
        return this.rootBlockDevices;
    }
    /**
     * Name of the type of root device instances will have by default.  Can be either `"ebs"` or `"instance-store"`
     * 
     */
    @OutputExport(name="rootDeviceType", type=String.class, parameters={})
    private Output<String> rootDeviceType;

    /**
     * @return Name of the type of root device instances will have by default.  Can be either `"ebs"` or `"instance-store"`
     * 
     */
    public Output<String> getRootDeviceType() {
        return this.rootDeviceType;
    }
    @OutputExport(name="rootDeviceVolumeId", type=String.class, parameters={})
    private Output<String> rootDeviceVolumeId;

    public Output<String> getRootDeviceVolumeId() {
        return this.rootDeviceVolumeId;
    }
    /**
     * The associated security groups.
     * 
     */
    @OutputExport(name="securityGroupIds", type=List.class, parameters={String.class})
    private Output<List<String>> securityGroupIds;

    /**
     * @return The associated security groups.
     * 
     */
    public Output<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds;
    }
    @OutputExport(name="sshHostDsaKeyFingerprint", type=String.class, parameters={})
    private Output<String> sshHostDsaKeyFingerprint;

    public Output<String> getSshHostDsaKeyFingerprint() {
        return this.sshHostDsaKeyFingerprint;
    }
    @OutputExport(name="sshHostRsaKeyFingerprint", type=String.class, parameters={})
    private Output<String> sshHostRsaKeyFingerprint;

    public Output<String> getSshHostRsaKeyFingerprint() {
        return this.sshHostRsaKeyFingerprint;
    }
    /**
     * Name of the SSH keypair that instances will have by default.
     * 
     */
    @OutputExport(name="sshKeyName", type=String.class, parameters={})
    private Output<String> sshKeyName;

    /**
     * @return Name of the SSH keypair that instances will have by default.
     * 
     */
    public Output<String> getSshKeyName() {
        return this.sshKeyName;
    }
    /**
     * The id of the stack the instance will belong to.
     * 
     */
    @OutputExport(name="stackId", type=String.class, parameters={})
    private Output<String> stackId;

    /**
     * @return The id of the stack the instance will belong to.
     * 
     */
    public Output<String> getStackId() {
        return this.stackId;
    }
    /**
     * The desired state of the instance.  Can be either `"running"` or `"stopped"`.
     * 
     */
    @OutputExport(name="state", type=String.class, parameters={})
    private Output</* @Nullable */ String> state;

    /**
     * @return The desired state of the instance.  Can be either `"running"` or `"stopped"`.
     * 
     */
    public Output</* @Nullable */ String> getState() {
        return this.state;
    }
    @OutputExport(name="status", type=String.class, parameters={})
    private Output<String> status;

    public Output<String> getStatus() {
        return this.status;
    }
    /**
     * Subnet ID to attach to
     * 
     */
    @OutputExport(name="subnetId", type=String.class, parameters={})
    private Output<String> subnetId;

    /**
     * @return Subnet ID to attach to
     * 
     */
    public Output<String> getSubnetId() {
        return this.subnetId;
    }
    /**
     * Instance tenancy to use. Can be one of `"default"`, `"dedicated"` or `"host"`
     * 
     */
    @OutputExport(name="tenancy", type=String.class, parameters={})
    private Output<String> tenancy;

    /**
     * @return Instance tenancy to use. Can be one of `"default"`, `"dedicated"` or `"host"`
     * 
     */
    public Output<String> getTenancy() {
        return this.tenancy;
    }
    /**
     * Keyword to choose what virtualization mode created instances
     * will use. Can be either `"paravirtual"` or `"hvm"`.
     * 
     */
    @OutputExport(name="virtualizationType", type=String.class, parameters={})
    private Output<String> virtualizationType;

    /**
     * @return Keyword to choose what virtualization mode created instances
     * will use. Can be either `"paravirtual"` or `"hvm"`.
     * 
     */
    public Output<String> getVirtualizationType() {
        return this.virtualizationType;
    }

    public interface BuilderApplicator {
        public void apply(InstanceArgs.Builder a);
    }
    private static io.pulumi.aws.opsworks.InstanceArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.aws.opsworks.InstanceArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public Instance(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(String name, InstanceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:opsworks/instance:Instance", name, args == null ? InstanceArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Instance(String name, Output<String> id, @Nullable InstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:opsworks/instance:Instance", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(String name, Output<String> id, @Nullable InstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
