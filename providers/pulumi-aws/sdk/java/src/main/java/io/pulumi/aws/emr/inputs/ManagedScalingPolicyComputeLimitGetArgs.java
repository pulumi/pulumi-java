// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.emr.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ManagedScalingPolicyComputeLimitGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagedScalingPolicyComputeLimitGetArgs Empty = new ManagedScalingPolicyComputeLimitGetArgs();

    /**
     * The upper boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
     * 
     */
    @InputImport(name="maximumCapacityUnits", required=true)
    private final Input<Integer> maximumCapacityUnits;

    public Input<Integer> getMaximumCapacityUnits() {
        return this.maximumCapacityUnits;
    }

    /**
     * The upper boundary of EC2 units for core node type in a cluster. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.
     * 
     */
    @InputImport(name="maximumCoreCapacityUnits")
    private final @Nullable Input<Integer> maximumCoreCapacityUnits;

    public Input<Integer> getMaximumCoreCapacityUnits() {
        return this.maximumCoreCapacityUnits == null ? Input.empty() : this.maximumCoreCapacityUnits;
    }

    /**
     * The upper boundary of On-Demand EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot instances.
     * 
     */
    @InputImport(name="maximumOndemandCapacityUnits")
    private final @Nullable Input<Integer> maximumOndemandCapacityUnits;

    public Input<Integer> getMaximumOndemandCapacityUnits() {
        return this.maximumOndemandCapacityUnits == null ? Input.empty() : this.maximumOndemandCapacityUnits;
    }

    /**
     * The lower boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
     * 
     */
    @InputImport(name="minimumCapacityUnits", required=true)
    private final Input<Integer> minimumCapacityUnits;

    public Input<Integer> getMinimumCapacityUnits() {
        return this.minimumCapacityUnits;
    }

    /**
     * The unit type used for specifying a managed scaling policy. Valid Values: `InstanceFleetUnits` | `Instances` | `VCPU`
     * 
     */
    @InputImport(name="unitType", required=true)
    private final Input<String> unitType;

    public Input<String> getUnitType() {
        return this.unitType;
    }

    public ManagedScalingPolicyComputeLimitGetArgs(
        Input<Integer> maximumCapacityUnits,
        @Nullable Input<Integer> maximumCoreCapacityUnits,
        @Nullable Input<Integer> maximumOndemandCapacityUnits,
        Input<Integer> minimumCapacityUnits,
        Input<String> unitType) {
        this.maximumCapacityUnits = Objects.requireNonNull(maximumCapacityUnits, "expected parameter 'maximumCapacityUnits' to be non-null");
        this.maximumCoreCapacityUnits = maximumCoreCapacityUnits;
        this.maximumOndemandCapacityUnits = maximumOndemandCapacityUnits;
        this.minimumCapacityUnits = Objects.requireNonNull(minimumCapacityUnits, "expected parameter 'minimumCapacityUnits' to be non-null");
        this.unitType = Objects.requireNonNull(unitType, "expected parameter 'unitType' to be non-null");
    }

    private ManagedScalingPolicyComputeLimitGetArgs() {
        this.maximumCapacityUnits = Input.empty();
        this.maximumCoreCapacityUnits = Input.empty();
        this.maximumOndemandCapacityUnits = Input.empty();
        this.minimumCapacityUnits = Input.empty();
        this.unitType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedScalingPolicyComputeLimitGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Integer> maximumCapacityUnits;
        private @Nullable Input<Integer> maximumCoreCapacityUnits;
        private @Nullable Input<Integer> maximumOndemandCapacityUnits;
        private Input<Integer> minimumCapacityUnits;
        private Input<String> unitType;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedScalingPolicyComputeLimitGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maximumCapacityUnits = defaults.maximumCapacityUnits;
    	      this.maximumCoreCapacityUnits = defaults.maximumCoreCapacityUnits;
    	      this.maximumOndemandCapacityUnits = defaults.maximumOndemandCapacityUnits;
    	      this.minimumCapacityUnits = defaults.minimumCapacityUnits;
    	      this.unitType = defaults.unitType;
        }

        public Builder setMaximumCapacityUnits(Input<Integer> maximumCapacityUnits) {
            this.maximumCapacityUnits = Objects.requireNonNull(maximumCapacityUnits);
            return this;
        }

        public Builder setMaximumCapacityUnits(Integer maximumCapacityUnits) {
            this.maximumCapacityUnits = Input.of(Objects.requireNonNull(maximumCapacityUnits));
            return this;
        }

        public Builder setMaximumCoreCapacityUnits(@Nullable Input<Integer> maximumCoreCapacityUnits) {
            this.maximumCoreCapacityUnits = maximumCoreCapacityUnits;
            return this;
        }

        public Builder setMaximumCoreCapacityUnits(@Nullable Integer maximumCoreCapacityUnits) {
            this.maximumCoreCapacityUnits = Input.ofNullable(maximumCoreCapacityUnits);
            return this;
        }

        public Builder setMaximumOndemandCapacityUnits(@Nullable Input<Integer> maximumOndemandCapacityUnits) {
            this.maximumOndemandCapacityUnits = maximumOndemandCapacityUnits;
            return this;
        }

        public Builder setMaximumOndemandCapacityUnits(@Nullable Integer maximumOndemandCapacityUnits) {
            this.maximumOndemandCapacityUnits = Input.ofNullable(maximumOndemandCapacityUnits);
            return this;
        }

        public Builder setMinimumCapacityUnits(Input<Integer> minimumCapacityUnits) {
            this.minimumCapacityUnits = Objects.requireNonNull(minimumCapacityUnits);
            return this;
        }

        public Builder setMinimumCapacityUnits(Integer minimumCapacityUnits) {
            this.minimumCapacityUnits = Input.of(Objects.requireNonNull(minimumCapacityUnits));
            return this;
        }

        public Builder setUnitType(Input<String> unitType) {
            this.unitType = Objects.requireNonNull(unitType);
            return this;
        }

        public Builder setUnitType(String unitType) {
            this.unitType = Input.of(Objects.requireNonNull(unitType));
            return this;
        }
        public ManagedScalingPolicyComputeLimitGetArgs build() {
            return new ManagedScalingPolicyComputeLimitGetArgs(maximumCapacityUnits, maximumCoreCapacityUnits, maximumOndemandCapacityUnits, minimumCapacityUnits, unitType);
        }
    }
}
