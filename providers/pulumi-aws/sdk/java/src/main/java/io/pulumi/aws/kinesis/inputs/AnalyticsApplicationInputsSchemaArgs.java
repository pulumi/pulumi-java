// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesis.inputs;

import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsSchemaRecordColumnArgs;
import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsSchemaRecordFormatArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AnalyticsApplicationInputsSchemaArgs extends io.pulumi.resources.ResourceArgs {

    public static final AnalyticsApplicationInputsSchemaArgs Empty = new AnalyticsApplicationInputsSchemaArgs();

    /**
     * The Record Column mapping for the streaming source data element.
     * See Record Columns below for more details.
     * 
     */
    @Import(name="recordColumns", required=true)
      private final Output<List<AnalyticsApplicationInputsSchemaRecordColumnArgs>> recordColumns;

    public Output<List<AnalyticsApplicationInputsSchemaRecordColumnArgs>> getRecordColumns() {
        return this.recordColumns;
    }

    /**
     * The Encoding of the record in the streaming source.
     * 
     */
    @Import(name="recordEncoding")
      private final @Nullable Output<String> recordEncoding;

    public Output<String> getRecordEncoding() {
        return this.recordEncoding == null ? Codegen.empty() : this.recordEncoding;
    }

    /**
     * The Record Format and mapping information to schematize a record.
     * See Record Format below for more details.
     * 
     */
    @Import(name="recordFormat", required=true)
      private final Output<AnalyticsApplicationInputsSchemaRecordFormatArgs> recordFormat;

    public Output<AnalyticsApplicationInputsSchemaRecordFormatArgs> getRecordFormat() {
        return this.recordFormat;
    }

    public AnalyticsApplicationInputsSchemaArgs(
        Output<List<AnalyticsApplicationInputsSchemaRecordColumnArgs>> recordColumns,
        @Nullable Output<String> recordEncoding,
        Output<AnalyticsApplicationInputsSchemaRecordFormatArgs> recordFormat) {
        this.recordColumns = Objects.requireNonNull(recordColumns, "expected parameter 'recordColumns' to be non-null");
        this.recordEncoding = recordEncoding;
        this.recordFormat = Objects.requireNonNull(recordFormat, "expected parameter 'recordFormat' to be non-null");
    }

    private AnalyticsApplicationInputsSchemaArgs() {
        this.recordColumns = Codegen.empty();
        this.recordEncoding = Codegen.empty();
        this.recordFormat = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyticsApplicationInputsSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<AnalyticsApplicationInputsSchemaRecordColumnArgs>> recordColumns;
        private @Nullable Output<String> recordEncoding;
        private Output<AnalyticsApplicationInputsSchemaRecordFormatArgs> recordFormat;

        public Builder() {
    	      // Empty
        }

        public Builder(AnalyticsApplicationInputsSchemaArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recordColumns = defaults.recordColumns;
    	      this.recordEncoding = defaults.recordEncoding;
    	      this.recordFormat = defaults.recordFormat;
        }

        public Builder recordColumns(Output<List<AnalyticsApplicationInputsSchemaRecordColumnArgs>> recordColumns) {
            this.recordColumns = Objects.requireNonNull(recordColumns);
            return this;
        }
        public Builder recordColumns(List<AnalyticsApplicationInputsSchemaRecordColumnArgs> recordColumns) {
            this.recordColumns = Output.of(Objects.requireNonNull(recordColumns));
            return this;
        }
        public Builder recordColumns(AnalyticsApplicationInputsSchemaRecordColumnArgs... recordColumns) {
            return recordColumns(List.of(recordColumns));
        }
        public Builder recordEncoding(@Nullable Output<String> recordEncoding) {
            this.recordEncoding = recordEncoding;
            return this;
        }
        public Builder recordEncoding(@Nullable String recordEncoding) {
            this.recordEncoding = Codegen.ofNullable(recordEncoding);
            return this;
        }
        public Builder recordFormat(Output<AnalyticsApplicationInputsSchemaRecordFormatArgs> recordFormat) {
            this.recordFormat = Objects.requireNonNull(recordFormat);
            return this;
        }
        public Builder recordFormat(AnalyticsApplicationInputsSchemaRecordFormatArgs recordFormat) {
            this.recordFormat = Output.of(Objects.requireNonNull(recordFormat));
            return this;
        }        public AnalyticsApplicationInputsSchemaArgs build() {
            return new AnalyticsApplicationInputsSchemaArgs(recordColumns, recordEncoding, recordFormat);
        }
    }
}
