// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.neptune;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.neptune.EventSubscriptionArgs;
import io.pulumi.aws.neptune.inputs.EventSubscriptionState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const defaultCluster = new aws.neptune.Cluster("defaultCluster", {
 *     clusterIdentifier: "neptune-cluster-demo",
 *     engine: "neptune",
 *     backupRetentionPeriod: 5,
 *     preferredBackupWindow: "07:00-09:00",
 *     skipFinalSnapshot: true,
 *     iamDatabaseAuthenticationEnabled: "true",
 *     applyImmediately: "true",
 * });
 * const example = new aws.neptune.ClusterInstance("example", {
 *     clusterIdentifier: defaultCluster.id,
 *     engine: "neptune",
 *     instanceClass: "db.r4.large",
 *     applyImmediately: "true",
 * });
 * const defaultTopic = new aws.sns.Topic("defaultTopic", {});
 * const defaultEventSubscription = new aws.neptune.EventSubscription("defaultEventSubscription", {
 *     snsTopicArn: defaultTopic.arn,
 *     sourceType: "db-instance",
 *     sourceIds: [example.id],
 *     eventCategories: [
 *         "maintenance",
 *         "availability",
 *         "creation",
 *         "backup",
 *         "restoration",
 *         "recovery",
 *         "deletion",
 *         "failover",
 *         "failure",
 *         "notification",
 *         "configuration change",
 *         "read replica",
 *     ],
 *     tags: {
 *         env: "test",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * default_cluster = aws.neptune.Cluster("defaultCluster",
 *     cluster_identifier="neptune-cluster-demo",
 *     engine="neptune",
 *     backup_retention_period=5,
 *     preferred_backup_window="07:00-09:00",
 *     skip_final_snapshot=True,
 *     iam_database_authentication_enabled=True,
 *     apply_immediately=True)
 * example = aws.neptune.ClusterInstance("example",
 *     cluster_identifier=default_cluster.id,
 *     engine="neptune",
 *     instance_class="db.r4.large",
 *     apply_immediately=True)
 * default_topic = aws.sns.Topic("defaultTopic")
 * default_event_subscription = aws.neptune.EventSubscription("defaultEventSubscription",
 *     sns_topic_arn=default_topic.arn,
 *     source_type="db-instance",
 *     source_ids=[example.id],
 *     event_categories=[
 *         "maintenance",
 *         "availability",
 *         "creation",
 *         "backup",
 *         "restoration",
 *         "recovery",
 *         "deletion",
 *         "failover",
 *         "failure",
 *         "notification",
 *         "configuration change",
 *         "read replica",
 *     ],
 *     tags={
 *         "env": "test",
 *     })
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var defaultCluster = new Aws.Neptune.Cluster("defaultCluster", new Aws.Neptune.ClusterArgs
 *         {
 *             ClusterIdentifier = "neptune-cluster-demo",
 *             Engine = "neptune",
 *             BackupRetentionPeriod = 5,
 *             PreferredBackupWindow = "07:00-09:00",
 *             SkipFinalSnapshot = true,
 *             IamDatabaseAuthenticationEnabled = true,
 *             ApplyImmediately = true,
 *         });
 *         var example = new Aws.Neptune.ClusterInstance("example", new Aws.Neptune.ClusterInstanceArgs
 *         {
 *             ClusterIdentifier = defaultCluster.Id,
 *             Engine = "neptune",
 *             InstanceClass = "db.r4.large",
 *             ApplyImmediately = true,
 *         });
 *         var defaultTopic = new Aws.Sns.Topic("defaultTopic", new Aws.Sns.TopicArgs
 *         {
 *         });
 *         var defaultEventSubscription = new Aws.Neptune.EventSubscription("defaultEventSubscription", new Aws.Neptune.EventSubscriptionArgs
 *         {
 *             SnsTopicArn = defaultTopic.Arn,
 *             SourceType = "db-instance",
 *             SourceIds = 
 *             {
 *                 example.Id,
 *             },
 *             EventCategories = 
 *             {
 *                 "maintenance",
 *                 "availability",
 *                 "creation",
 *                 "backup",
 *                 "restoration",
 *                 "recovery",
 *                 "deletion",
 *                 "failover",
 *                 "failure",
 *                 "notification",
 *                 "configuration change",
 *                 "read replica",
 *             },
 *             Tags = 
 *             {
 *                 { "env", "test" },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/neptune"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sns"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		defaultCluster, err := neptune.NewCluster(ctx, "defaultCluster", &neptune.ClusterArgs{
 * 			ClusterIdentifier:                pulumi.String("neptune-cluster-demo"),
 * 			Engine:                           pulumi.String("neptune"),
 * 			BackupRetentionPeriod:            pulumi.Int(5),
 * 			PreferredBackupWindow:            pulumi.String("07:00-09:00"),
 * 			SkipFinalSnapshot:                pulumi.Bool(true),
 * 			IamDatabaseAuthenticationEnabled: pulumi.Bool(true),
 * 			ApplyImmediately:                 pulumi.Bool(true),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		example, err := neptune.NewClusterInstance(ctx, "example", &neptune.ClusterInstanceArgs{
 * 			ClusterIdentifier: defaultCluster.ID(),
 * 			Engine:            pulumi.String("neptune"),
 * 			InstanceClass:     pulumi.String("db.r4.large"),
 * 			ApplyImmediately:  pulumi.Bool(true),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		defaultTopic, err := sns.NewTopic(ctx, "defaultTopic", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = neptune.NewEventSubscription(ctx, "defaultEventSubscription", &neptune.EventSubscriptionArgs{
 * 			SnsTopicArn: defaultTopic.Arn,
 * 			SourceType:  pulumi.String("db-instance"),
 * 			SourceIds: pulumi.StringArray{
 * 				example.ID(),
 * 			},
 * 			EventCategories: pulumi.StringArray{
 * 				pulumi.String("maintenance"),
 * 				pulumi.String("availability"),
 * 				pulumi.String("creation"),
 * 				pulumi.String("backup"),
 * 				pulumi.String("restoration"),
 * 				pulumi.String("recovery"),
 * 				pulumi.String("deletion"),
 * 				pulumi.String("failover"),
 * 				pulumi.String("failure"),
 * 				pulumi.String("notification"),
 * 				pulumi.String("configuration change"),
 * 				pulumi.String("read replica"),
 * 			},
 * 			Tags: pulumi.StringMap{
 * 				"env": pulumi.String("test"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * `aws_neptune_event_subscription` can be imported by using the event subscription name, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:neptune/eventSubscription:EventSubscription example my-event-subscription
 * ```
 * 
 *  
 */
@ResourceType(type="aws:neptune/eventSubscription:EventSubscription")
public class EventSubscription extends io.pulumi.resources.CustomResource {
    /**
     * The Amazon Resource Name of the Neptune event notification subscription.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name of the Neptune event notification subscription.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The AWS customer account associated with the Neptune event notification subscription.
     * 
     */
    @Export(name="customerAwsId", type=String.class, parameters={})
    private Output<String> customerAwsId;

    /**
     * @return The AWS customer account associated with the Neptune event notification subscription.
     * 
     */
    public Output<String> getCustomerAwsId() {
        return this.customerAwsId;
    }
    /**
     * A boolean flag to enable/disable the subscription. Defaults to true.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return A boolean flag to enable/disable the subscription. Defaults to true.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnabled() {
        return this.enabled;
    }
    /**
     * A list of event categories for a `source_type` that you want to subscribe to. Run `aws neptune describe-event-categories` to find all the event categories.
     * 
     */
    @Export(name="eventCategories", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> eventCategories;

    /**
     * @return A list of event categories for a `source_type` that you want to subscribe to. Run `aws neptune describe-event-categories` to find all the event categories.
     * 
     */
    public Output</* @Nullable */ List<String>> getEventCategories() {
        return this.eventCategories;
    }
    /**
     * The name of the Neptune event subscription. By default generated by this provider.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the Neptune event subscription. By default generated by this provider.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The name of the Neptune event subscription. Conflicts with `name`.
     * 
     */
    @Export(name="namePrefix", type=String.class, parameters={})
    private Output<String> namePrefix;

    /**
     * @return The name of the Neptune event subscription. Conflicts with `name`.
     * 
     */
    public Output<String> getNamePrefix() {
        return this.namePrefix;
    }
    /**
     * The ARN of the SNS topic to send events to.
     * 
     */
    @Export(name="snsTopicArn", type=String.class, parameters={})
    private Output<String> snsTopicArn;

    /**
     * @return The ARN of the SNS topic to send events to.
     * 
     */
    public Output<String> getSnsTopicArn() {
        return this.snsTopicArn;
    }
    /**
     * A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a `source_type` must also be specified.
     * 
     */
    @Export(name="sourceIds", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> sourceIds;

    /**
     * @return A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a `source_type` must also be specified.
     * 
     */
    public Output</* @Nullable */ List<String>> getSourceIds() {
        return this.sourceIds;
    }
    /**
     * The type of source that will be generating the events. Valid options are `db-instance`, `db-security-group`, `db-parameter-group`, `db-snapshot`, `db-cluster` or `db-cluster-snapshot`. If not set, all sources will be subscribed to.
     * 
     */
    @Export(name="sourceType", type=String.class, parameters={})
    private Output</* @Nullable */ String> sourceType;

    /**
     * @return The type of source that will be generating the events. Valid options are `db-instance`, `db-security-group`, `db-parameter-group`, `db-snapshot`, `db-cluster` or `db-cluster-snapshot`. If not set, all sources will be subscribed to.
     * 
     */
    public Output</* @Nullable */ String> getSourceType() {
        return this.sourceType;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventSubscription(String name) {
        this(name, EventSubscriptionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventSubscription(String name, EventSubscriptionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventSubscription(String name, EventSubscriptionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:neptune/eventSubscription:EventSubscription", name, args == null ? EventSubscriptionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private EventSubscription(String name, Output<String> id, @Nullable EventSubscriptionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:neptune/eventSubscription:EventSubscription", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventSubscription get(String name, Output<String> id, @Nullable EventSubscriptionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new EventSubscription(name, id, state, options);
    }
}
