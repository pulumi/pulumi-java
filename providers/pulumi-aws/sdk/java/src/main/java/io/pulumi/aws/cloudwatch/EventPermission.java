// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.cloudwatch.EventPermissionArgs;
import io.pulumi.aws.cloudwatch.inputs.EventPermissionState;
import io.pulumi.aws.cloudwatch.outputs.EventPermissionCondition;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a resource to create an EventBridge permission to support cross-account events in the current account default event bus.
 * 
 * > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
 * 
 * > **Note:** The EventBridge bus policy resource  (`aws.cloudwatch.EventBusPolicy`) is incompatible with the EventBridge permission resource (`aws.cloudwatch.EventPermission`) and will overwrite permissions.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Account Access
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const devAccountAccess = new aws.cloudwatch.EventPermission("DevAccountAccess", {
 *     principal: "123456789012",
 *     statementId: "DevAccountAccess",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * dev_account_access = aws.cloudwatch.EventPermission("devAccountAccess",
 *     principal="123456789012",
 *     statement_id="DevAccountAccess")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var devAccountAccess = new Aws.CloudWatch.EventPermission("devAccountAccess", new Aws.CloudWatch.EventPermissionArgs
 *         {
 *             Principal = "123456789012",
 *             StatementId = "DevAccountAccess",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudwatch.NewEventPermission(ctx, "devAccountAccess", &cloudwatch.EventPermissionArgs{
 * 			Principal:   pulumi.String("123456789012"),
 * 			StatementId: pulumi.String("DevAccountAccess"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Organization Access
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const organizationAccess = new aws.cloudwatch.EventPermission("organizationAccess", {
 *     principal: "*",
 *     statementId: "OrganizationAccess",
 *     condition: {
 *         key: "aws:PrincipalOrgID",
 *         type: "StringEquals",
 *         value: aws_organizations_organization.example.id,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * organization_access = aws.cloudwatch.EventPermission("organizationAccess",
 *     principal="*",
 *     statement_id="OrganizationAccess",
 *     condition=aws.cloudwatch.EventPermissionConditionArgs(
 *         key="aws:PrincipalOrgID",
 *         type="StringEquals",
 *         value=aws_organizations_organization["example"]["id"],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var organizationAccess = new Aws.CloudWatch.EventPermission("organizationAccess", new Aws.CloudWatch.EventPermissionArgs
 *         {
 *             Principal = "*",
 *             StatementId = "OrganizationAccess",
 *             Condition = new Aws.CloudWatch.Inputs.EventPermissionConditionArgs
 *             {
 *                 Key = "aws:PrincipalOrgID",
 *                 Type = "StringEquals",
 *                 Value = aws_organizations_organization.Example.Id,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudwatch.NewEventPermission(ctx, "organizationAccess", &cloudwatch.EventPermissionArgs{
 * 			Principal:   pulumi.String("*"),
 * 			StatementId: pulumi.String("OrganizationAccess"),
 * 			Condition: &cloudwatch.EventPermissionConditionArgs{
 * 				Key:   pulumi.String("aws:PrincipalOrgID"),
 * 				Type:  pulumi.String("StringEquals"),
 * 				Value: pulumi.Any(aws_organizations_organization.Example.Id),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * EventBridge permissions can be imported using the `event_bus_name/statement_id` (if you omit `event_bus_name`, the `default` event bus will be used), e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:cloudwatch/eventPermission:EventPermission DevAccountAccess example-event-bus/DevAccountAccess
 * ```
 * 
 *  
 */
@ResourceType(type="aws:cloudwatch/eventPermission:EventPermission")
public class EventPermission extends io.pulumi.resources.CustomResource {
    /**
     * The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
     * 
     */
    @Export(name="action", type=String.class, parameters={})
    private Output</* @Nullable */ String> action;

    /**
     * @return The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
     * 
     */
    public Output</* @Nullable */ String> getAction() {
        return this.action;
    }
    /**
     * Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
     * 
     */
    @Export(name="condition", type=EventPermissionCondition.class, parameters={})
    private Output</* @Nullable */ EventPermissionCondition> condition;

    /**
     * @return Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
     * 
     */
    public Output</* @Nullable */ EventPermissionCondition> getCondition() {
        return this.condition;
    }
    /**
     * The event bus to set the permissions on. If you omit this, the permissions are set on the `default` event bus.
     * 
     */
    @Export(name="eventBusName", type=String.class, parameters={})
    private Output</* @Nullable */ String> eventBusName;

    /**
     * @return The event bus to set the permissions on. If you omit this, the permissions are set on the `default` event bus.
     * 
     */
    public Output</* @Nullable */ String> getEventBusName() {
        return this.eventBusName;
    }
    /**
     * The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
     * 
     */
    @Export(name="principal", type=String.class, parameters={})
    private Output<String> principal;

    /**
     * @return The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
     * 
     */
    public Output<String> getPrincipal() {
        return this.principal;
    }
    /**
     * An identifier string for the external account that you are granting permissions to.
     * 
     */
    @Export(name="statementId", type=String.class, parameters={})
    private Output<String> statementId;

    /**
     * @return An identifier string for the external account that you are granting permissions to.
     * 
     */
    public Output<String> getStatementId() {
        return this.statementId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventPermission(String name) {
        this(name, EventPermissionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventPermission(String name, EventPermissionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventPermission(String name, EventPermissionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventPermission:EventPermission", name, args == null ? EventPermissionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private EventPermission(String name, Output<String> id, @Nullable EventPermissionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventPermission:EventPermission", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventPermission get(String name, Output<String> id, @Nullable EventPermissionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new EventPermission(name, id, state, options);
    }
}
