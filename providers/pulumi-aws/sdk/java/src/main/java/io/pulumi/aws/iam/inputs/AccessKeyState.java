// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.iam.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccessKeyState extends io.pulumi.resources.ResourceArgs {

    public static final AccessKeyState Empty = new AccessKeyState();

    /**
     * Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the access key was created.
     * 
     */
    @Import(name="createDate")
      private final @Nullable Output<String> createDate;

    public Output<String> getCreateDate() {
        return this.createDate == null ? Output.empty() : this.createDate;
    }

    @Import(name="encryptedSecret")
      private final @Nullable Output<String> encryptedSecret;

    public Output<String> getEncryptedSecret() {
        return this.encryptedSecret == null ? Output.empty() : this.encryptedSecret;
    }

    @Import(name="encryptedSesSmtpPasswordV4")
      private final @Nullable Output<String> encryptedSesSmtpPasswordV4;

    public Output<String> getEncryptedSesSmtpPasswordV4() {
        return this.encryptedSesSmtpPasswordV4 == null ? Output.empty() : this.encryptedSesSmtpPasswordV4;
    }

    /**
     * Fingerprint of the PGP key used to encrypt the secret. This attribute is not available for imported resources.
     * 
     */
    @Import(name="keyFingerprint")
      private final @Nullable Output<String> keyFingerprint;

    public Output<String> getKeyFingerprint() {
        return this.keyFingerprint == null ? Output.empty() : this.keyFingerprint;
    }

    /**
     * Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`, for use in the `encrypted_secret` output attribute.
     * 
     */
    @Import(name="pgpKey")
      private final @Nullable Output<String> pgpKey;

    public Output<String> getPgpKey() {
        return this.pgpKey == null ? Output.empty() : this.pgpKey;
    }

    /**
     * Secret access key. This attribute is not available for imported resources. Note that this will be written to the state file. If you use this, please protect your backend state file judiciously. Alternatively, you may supply a `pgp_key` instead, which will prevent the secret from being stored in plaintext, at the cost of preventing the use of the secret key in automation.
     * 
     */
    @Import(name="secret")
      private final @Nullable Output<String> secret;

    public Output<String> getSecret() {
        return this.secret == null ? Output.empty() : this.secret;
    }

    /**
     * Secret access key converted into an SES SMTP password by applying [AWS's documented Sigv4 conversion algorithm](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/smtp-credentials.html#smtp-credentials-convert). This attribute is not available for imported resources. As SigV4 is region specific, valid Provider regions are `ap-south-1`, `ap-southeast-2`, `eu-central-1`, `eu-west-1`, `us-east-1` and `us-west-2`. See current [AWS SES regions](https://docs.aws.amazon.com/general/latest/gr/rande.html#ses_region).
     * 
     */
    @Import(name="sesSmtpPasswordV4")
      private final @Nullable Output<String> sesSmtpPasswordV4;

    public Output<String> getSesSmtpPasswordV4() {
        return this.sesSmtpPasswordV4 == null ? Output.empty() : this.sesSmtpPasswordV4;
    }

    /**
     * Access key status to apply. Defaults to `Active`. Valid values are `Active` and `Inactive`.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * IAM user to associate with this access key.
     * 
     */
    @Import(name="user")
      private final @Nullable Output<String> user;

    public Output<String> getUser() {
        return this.user == null ? Output.empty() : this.user;
    }

    public AccessKeyState(
        @Nullable Output<String> createDate,
        @Nullable Output<String> encryptedSecret,
        @Nullable Output<String> encryptedSesSmtpPasswordV4,
        @Nullable Output<String> keyFingerprint,
        @Nullable Output<String> pgpKey,
        @Nullable Output<String> secret,
        @Nullable Output<String> sesSmtpPasswordV4,
        @Nullable Output<String> status,
        @Nullable Output<String> user) {
        this.createDate = createDate;
        this.encryptedSecret = encryptedSecret;
        this.encryptedSesSmtpPasswordV4 = encryptedSesSmtpPasswordV4;
        this.keyFingerprint = keyFingerprint;
        this.pgpKey = pgpKey;
        this.secret = secret;
        this.sesSmtpPasswordV4 = sesSmtpPasswordV4;
        this.status = status;
        this.user = user;
    }

    private AccessKeyState() {
        this.createDate = Output.empty();
        this.encryptedSecret = Output.empty();
        this.encryptedSesSmtpPasswordV4 = Output.empty();
        this.keyFingerprint = Output.empty();
        this.pgpKey = Output.empty();
        this.secret = Output.empty();
        this.sesSmtpPasswordV4 = Output.empty();
        this.status = Output.empty();
        this.user = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> createDate;
        private @Nullable Output<String> encryptedSecret;
        private @Nullable Output<String> encryptedSesSmtpPasswordV4;
        private @Nullable Output<String> keyFingerprint;
        private @Nullable Output<String> pgpKey;
        private @Nullable Output<String> secret;
        private @Nullable Output<String> sesSmtpPasswordV4;
        private @Nullable Output<String> status;
        private @Nullable Output<String> user;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessKeyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createDate = defaults.createDate;
    	      this.encryptedSecret = defaults.encryptedSecret;
    	      this.encryptedSesSmtpPasswordV4 = defaults.encryptedSesSmtpPasswordV4;
    	      this.keyFingerprint = defaults.keyFingerprint;
    	      this.pgpKey = defaults.pgpKey;
    	      this.secret = defaults.secret;
    	      this.sesSmtpPasswordV4 = defaults.sesSmtpPasswordV4;
    	      this.status = defaults.status;
    	      this.user = defaults.user;
        }

        public Builder createDate(@Nullable Output<String> createDate) {
            this.createDate = createDate;
            return this;
        }

        public Builder createDate(@Nullable String createDate) {
            this.createDate = Output.ofNullable(createDate);
            return this;
        }

        public Builder encryptedSecret(@Nullable Output<String> encryptedSecret) {
            this.encryptedSecret = encryptedSecret;
            return this;
        }

        public Builder encryptedSecret(@Nullable String encryptedSecret) {
            this.encryptedSecret = Output.ofNullable(encryptedSecret);
            return this;
        }

        public Builder encryptedSesSmtpPasswordV4(@Nullable Output<String> encryptedSesSmtpPasswordV4) {
            this.encryptedSesSmtpPasswordV4 = encryptedSesSmtpPasswordV4;
            return this;
        }

        public Builder encryptedSesSmtpPasswordV4(@Nullable String encryptedSesSmtpPasswordV4) {
            this.encryptedSesSmtpPasswordV4 = Output.ofNullable(encryptedSesSmtpPasswordV4);
            return this;
        }

        public Builder keyFingerprint(@Nullable Output<String> keyFingerprint) {
            this.keyFingerprint = keyFingerprint;
            return this;
        }

        public Builder keyFingerprint(@Nullable String keyFingerprint) {
            this.keyFingerprint = Output.ofNullable(keyFingerprint);
            return this;
        }

        public Builder pgpKey(@Nullable Output<String> pgpKey) {
            this.pgpKey = pgpKey;
            return this;
        }

        public Builder pgpKey(@Nullable String pgpKey) {
            this.pgpKey = Output.ofNullable(pgpKey);
            return this;
        }

        public Builder secret(@Nullable Output<String> secret) {
            this.secret = secret;
            return this;
        }

        public Builder secret(@Nullable String secret) {
            this.secret = Output.ofNullable(secret);
            return this;
        }

        public Builder sesSmtpPasswordV4(@Nullable Output<String> sesSmtpPasswordV4) {
            this.sesSmtpPasswordV4 = sesSmtpPasswordV4;
            return this;
        }

        public Builder sesSmtpPasswordV4(@Nullable String sesSmtpPasswordV4) {
            this.sesSmtpPasswordV4 = Output.ofNullable(sesSmtpPasswordV4);
            return this;
        }

        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Output.ofNullable(status);
            return this;
        }

        public Builder user(@Nullable Output<String> user) {
            this.user = user;
            return this;
        }

        public Builder user(@Nullable String user) {
            this.user = Output.ofNullable(user);
            return this;
        }
        public AccessKeyState build() {
            return new AccessKeyState(createDate, encryptedSecret, encryptedSesSmtpPasswordV4, keyFingerprint, pgpKey, secret, sesSmtpPasswordV4, status, user);
        }
    }
}
