// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.glue.inputs.PartitionStorageDescriptorArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PartitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final PartitionArgs Empty = new PartitionArgs();

    /**
     * ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
     * 
     */
    @Import(name="catalogId")
      private final @Nullable Output<String> catalogId;

    public Output<String> getCatalogId() {
        return this.catalogId == null ? Codegen.empty() : this.catalogId;
    }

    /**
     * Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName;
    }

    /**
     * A map of initialization parameters for the SerDe, in key-value form.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Map<String,String>> parameters;

    public Output<Map<String,String>> getParameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * The values that define the partition.
     * 
     */
    @Import(name="partitionValues", required=true)
      private final Output<List<String>> partitionValues;

    public Output<List<String>> getPartitionValues() {
        return this.partitionValues;
    }

    /**
     * A storage descriptor object containing information about the physical storage of this table. You can refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor) for a full explanation of this object.
     * 
     */
    @Import(name="storageDescriptor")
      private final @Nullable Output<PartitionStorageDescriptorArgs> storageDescriptor;

    public Output<PartitionStorageDescriptorArgs> getStorageDescriptor() {
        return this.storageDescriptor == null ? Codegen.empty() : this.storageDescriptor;
    }

    @Import(name="tableName", required=true)
      private final Output<String> tableName;

    public Output<String> getTableName() {
        return this.tableName;
    }

    public PartitionArgs(
        @Nullable Output<String> catalogId,
        Output<String> databaseName,
        @Nullable Output<Map<String,String>> parameters,
        Output<List<String>> partitionValues,
        @Nullable Output<PartitionStorageDescriptorArgs> storageDescriptor,
        Output<String> tableName) {
        this.catalogId = catalogId;
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.parameters = parameters;
        this.partitionValues = Objects.requireNonNull(partitionValues, "expected parameter 'partitionValues' to be non-null");
        this.storageDescriptor = storageDescriptor;
        this.tableName = Objects.requireNonNull(tableName, "expected parameter 'tableName' to be non-null");
    }

    private PartitionArgs() {
        this.catalogId = Codegen.empty();
        this.databaseName = Codegen.empty();
        this.parameters = Codegen.empty();
        this.partitionValues = Codegen.empty();
        this.storageDescriptor = Codegen.empty();
        this.tableName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PartitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> catalogId;
        private Output<String> databaseName;
        private @Nullable Output<Map<String,String>> parameters;
        private Output<List<String>> partitionValues;
        private @Nullable Output<PartitionStorageDescriptorArgs> storageDescriptor;
        private Output<String> tableName;

        public Builder() {
    	      // Empty
        }

        public Builder(PartitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.databaseName = defaults.databaseName;
    	      this.parameters = defaults.parameters;
    	      this.partitionValues = defaults.partitionValues;
    	      this.storageDescriptor = defaults.storageDescriptor;
    	      this.tableName = defaults.tableName;
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            this.catalogId = catalogId;
            return this;
        }
        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = Codegen.ofNullable(catalogId);
            return this;
        }
        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder partitionValues(Output<List<String>> partitionValues) {
            this.partitionValues = Objects.requireNonNull(partitionValues);
            return this;
        }
        public Builder partitionValues(List<String> partitionValues) {
            this.partitionValues = Output.of(Objects.requireNonNull(partitionValues));
            return this;
        }
        public Builder partitionValues(String... partitionValues) {
            return partitionValues(List.of(partitionValues));
        }
        public Builder storageDescriptor(@Nullable Output<PartitionStorageDescriptorArgs> storageDescriptor) {
            this.storageDescriptor = storageDescriptor;
            return this;
        }
        public Builder storageDescriptor(@Nullable PartitionStorageDescriptorArgs storageDescriptor) {
            this.storageDescriptor = Codegen.ofNullable(storageDescriptor);
            return this;
        }
        public Builder tableName(Output<String> tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }
        public Builder tableName(String tableName) {
            this.tableName = Output.of(Objects.requireNonNull(tableName));
            return this;
        }        public PartitionArgs build() {
            return new PartitionArgs(catalogId, databaseName, parameters, partitionValues, storageDescriptor, tableName);
        }
    }
}
