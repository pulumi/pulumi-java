// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.fsx.DataRepositoryAssociationArgs;
import io.pulumi.aws.fsx.inputs.DataRepositoryAssociationState;
import io.pulumi.aws.fsx.outputs.DataRepositoryAssociationS3;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Manages a FSx for Lustre Data Repository Association. See [Linking your file system to an S3 bucket](https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data-repo.html) for more information.
 * 
 * > **NOTE:** Data Repository Associations are only compatible with AWS FSx for Lustre File Systems and `PERSISTENT_2` deployment type.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * FSx Data Repository Associations can be imported using the `id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation example dra-0b1cfaeca11088b10
 * ```
 * 
 */
@ResourceType(type="aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation")
public class DataRepositoryAssociation extends io.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name of the file system.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name of the file system.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    @Export(name="associationId", type=String.class, parameters={})
    private Output<String> associationId;

    public Output<String> getAssociationId() {
        return this.associationId;
    }
    /**
     * Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
     * 
     */
    @Export(name="batchImportMetaDataOnCreate", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> batchImportMetaDataOnCreate;

    /**
     * @return Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to `false`.
     * 
     */
    public Output</* @Nullable */ Boolean> getBatchImportMetaDataOnCreate() {
        return this.batchImportMetaDataOnCreate;
    }
    /**
     * The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
     * 
     */
    @Export(name="dataRepositoryPath", type=String.class, parameters={})
    private Output<String> dataRepositoryPath;

    /**
     * @return The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
     * 
     */
    public Output<String> getDataRepositoryPath() {
        return this.dataRepositoryPath;
    }
    /**
     * Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
     * 
     */
    @Export(name="deleteDataInFilesystem", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> deleteDataInFilesystem;

    /**
     * @return Set to true to delete files from the file system upon deleting this data repository association. Defaults to `false`.
     * 
     */
    public Output</* @Nullable */ Boolean> getDeleteDataInFilesystem() {
        return this.deleteDataInFilesystem;
    }
    /**
     * The ID of the Amazon FSx file system to on which to create a data repository association.
     * 
     */
    @Export(name="fileSystemId", type=String.class, parameters={})
    private Output<String> fileSystemId;

    /**
     * @return The ID of the Amazon FSx file system to on which to create a data repository association.
     * 
     */
    public Output<String> getFileSystemId() {
        return this.fileSystemId;
    }
    /**
     * A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `data_repository_path`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
     * 
     */
    @Export(name="fileSystemPath", type=String.class, parameters={})
    private Output<String> fileSystemPath;

    /**
     * @return A path on the file system that points to a high-level directory (such as `/ns1/`) or subdirectory (such as `/ns1/subdir/`) that will be mapped 1-1 with `data_repository_path`. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path `/ns1/`, then you cannot link another data repository with file system path `/ns1/ns2`. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
     * 
     */
    public Output<String> getFileSystemPath() {
        return this.fileSystemPath;
    }
    /**
     * For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
     * 
     */
    @Export(name="importedFileChunkSize", type=Integer.class, parameters={})
    private Output<Integer> importedFileChunkSize;

    /**
     * @return For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
     * 
     */
    public Output<Integer> getImportedFileChunkSize() {
        return this.importedFileChunkSize;
    }
    /**
     * See the `s3` configuration block. Max of 1.
     * The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
     * 
     */
    @Export(name="s3", type=DataRepositoryAssociationS3.class, parameters={})
    private Output<DataRepositoryAssociationS3> s3;

    /**
     * @return See the `s3` configuration block. Max of 1.
     * The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
     * 
     */
    public Output<DataRepositoryAssociationS3> getS3() {
        return this.s3;
    }
    /**
     * A map of tags to assign to the data repository association. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the data repository association. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }

    public interface BuilderApplicator {
        public void apply(DataRepositoryAssociationArgs.Builder a);
    }
    private static io.pulumi.aws.fsx.DataRepositoryAssociationArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.aws.fsx.DataRepositoryAssociationArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public DataRepositoryAssociation(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DataRepositoryAssociation(String name) {
        this(name, DataRepositoryAssociationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DataRepositoryAssociation(String name, DataRepositoryAssociationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataRepositoryAssociation(String name, DataRepositoryAssociationArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation", name, args == null ? DataRepositoryAssociationArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private DataRepositoryAssociation(String name, Output<String> id, @Nullable DataRepositoryAssociationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataRepositoryAssociation get(String name, Output<String> id, @Nullable DataRepositoryAssociationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new DataRepositoryAssociation(name, id, state, options);
    }
}
