// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.datasync;

import io.pulumi.aws.datasync.inputs.LocationSmbMountOptionsArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LocationSmbArgs extends io.pulumi.resources.ResourceArgs {

    public static final LocationSmbArgs Empty = new LocationSmbArgs();

    /**
     * A list of DataSync Agent ARNs with which this location will be associated.
     * 
     */
    @InputImport(name="agentArns", required=true)
      private final Input<List<String>> agentArns;

    public Input<List<String>> getAgentArns() {
        return this.agentArns;
    }

    /**
     * The name of the Windows domain the SMB server belongs to.
     * 
     */
    @InputImport(name="domain")
      private final @Nullable Input<String> domain;

    public Input<String> getDomain() {
        return this.domain == null ? Input.empty() : this.domain;
    }

    /**
     * Configuration block containing mount options used by DataSync to access the SMB Server. Can be `AUTOMATIC`, `SMB2`, or `SMB3`.
     * 
     */
    @InputImport(name="mountOptions")
      private final @Nullable Input<LocationSmbMountOptionsArgs> mountOptions;

    public Input<LocationSmbMountOptionsArgs> getMountOptions() {
        return this.mountOptions == null ? Input.empty() : this.mountOptions;
    }

    /**
     * The password of the user who can mount the share and has file permissions in the SMB.
     * 
     */
    @InputImport(name="password", required=true)
      private final Input<String> password;

    public Input<String> getPassword() {
        return this.password;
    }

    /**
     * Specifies the IP address or DNS name of the SMB server. The DataSync Agent(s) use this to mount the SMB share.
     * 
     */
    @InputImport(name="serverHostname", required=true)
      private final Input<String> serverHostname;

    public Input<String> getServerHostname() {
        return this.serverHostname;
    }

    /**
     * Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
     * 
     */
    @InputImport(name="subdirectory", required=true)
      private final Input<String> subdirectory;

    public Input<String> getSubdirectory() {
        return this.subdirectory;
    }

    /**
     * Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The user who can mount the share and has file and folder permissions in the SMB share.
     * 
     */
    @InputImport(name="user", required=true)
      private final Input<String> user;

    public Input<String> getUser() {
        return this.user;
    }

    public LocationSmbArgs(
        Input<List<String>> agentArns,
        @Nullable Input<String> domain,
        @Nullable Input<LocationSmbMountOptionsArgs> mountOptions,
        Input<String> password,
        Input<String> serverHostname,
        Input<String> subdirectory,
        @Nullable Input<Map<String,String>> tags,
        Input<String> user) {
        this.agentArns = Objects.requireNonNull(agentArns, "expected parameter 'agentArns' to be non-null");
        this.domain = domain;
        this.mountOptions = mountOptions;
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.serverHostname = Objects.requireNonNull(serverHostname, "expected parameter 'serverHostname' to be non-null");
        this.subdirectory = Objects.requireNonNull(subdirectory, "expected parameter 'subdirectory' to be non-null");
        this.tags = tags;
        this.user = Objects.requireNonNull(user, "expected parameter 'user' to be non-null");
    }

    private LocationSmbArgs() {
        this.agentArns = Input.empty();
        this.domain = Input.empty();
        this.mountOptions = Input.empty();
        this.password = Input.empty();
        this.serverHostname = Input.empty();
        this.subdirectory = Input.empty();
        this.tags = Input.empty();
        this.user = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocationSmbArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> agentArns;
        private @Nullable Input<String> domain;
        private @Nullable Input<LocationSmbMountOptionsArgs> mountOptions;
        private Input<String> password;
        private Input<String> serverHostname;
        private Input<String> subdirectory;
        private @Nullable Input<Map<String,String>> tags;
        private Input<String> user;

        public Builder() {
    	      // Empty
        }

        public Builder(LocationSmbArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentArns = defaults.agentArns;
    	      this.domain = defaults.domain;
    	      this.mountOptions = defaults.mountOptions;
    	      this.password = defaults.password;
    	      this.serverHostname = defaults.serverHostname;
    	      this.subdirectory = defaults.subdirectory;
    	      this.tags = defaults.tags;
    	      this.user = defaults.user;
        }

        public Builder setAgentArns(Input<List<String>> agentArns) {
            this.agentArns = Objects.requireNonNull(agentArns);
            return this;
        }

        public Builder setAgentArns(List<String> agentArns) {
            this.agentArns = Input.of(Objects.requireNonNull(agentArns));
            return this;
        }

        public Builder setDomain(@Nullable Input<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder setDomain(@Nullable String domain) {
            this.domain = Input.ofNullable(domain);
            return this;
        }

        public Builder setMountOptions(@Nullable Input<LocationSmbMountOptionsArgs> mountOptions) {
            this.mountOptions = mountOptions;
            return this;
        }

        public Builder setMountOptions(@Nullable LocationSmbMountOptionsArgs mountOptions) {
            this.mountOptions = Input.ofNullable(mountOptions);
            return this;
        }

        public Builder setPassword(Input<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder setPassword(String password) {
            this.password = Input.of(Objects.requireNonNull(password));
            return this;
        }

        public Builder setServerHostname(Input<String> serverHostname) {
            this.serverHostname = Objects.requireNonNull(serverHostname);
            return this;
        }

        public Builder setServerHostname(String serverHostname) {
            this.serverHostname = Input.of(Objects.requireNonNull(serverHostname));
            return this;
        }

        public Builder setSubdirectory(Input<String> subdirectory) {
            this.subdirectory = Objects.requireNonNull(subdirectory);
            return this;
        }

        public Builder setSubdirectory(String subdirectory) {
            this.subdirectory = Input.of(Objects.requireNonNull(subdirectory));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setUser(Input<String> user) {
            this.user = Objects.requireNonNull(user);
            return this;
        }

        public Builder setUser(String user) {
            this.user = Input.of(Objects.requireNonNull(user));
            return this;
        }
        public LocationSmbArgs build() {
            return new LocationSmbArgs(agentArns, domain, mountOptions, password, serverHostname, subdirectory, tags, user);
        }
    }
}
