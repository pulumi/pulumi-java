// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class KeyPairState extends io.pulumi.resources.ResourceArgs {

    public static final KeyPairState Empty = new KeyPairState();

    /**
     * The key pair ARN.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The MD5 public key fingerprint as specified in section 4 of RFC 4716.
     * 
     */
    @InputImport(name="fingerprint")
      private final @Nullable Input<String> fingerprint;

    public Input<String> getFingerprint() {
        return this.fingerprint == null ? Input.empty() : this.fingerprint;
    }

    /**
     * The name for the key pair.
     * 
     */
    @InputImport(name="keyName")
      private final @Nullable Input<String> keyName;

    public Input<String> getKeyName() {
        return this.keyName == null ? Input.empty() : this.keyName;
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `key_name`.
     * 
     */
    @InputImport(name="keyNamePrefix")
      private final @Nullable Input<String> keyNamePrefix;

    public Input<String> getKeyNamePrefix() {
        return this.keyNamePrefix == null ? Input.empty() : this.keyNamePrefix;
    }

    /**
     * The key pair ID.
     * 
     */
    @InputImport(name="keyPairId")
      private final @Nullable Input<String> keyPairId;

    public Input<String> getKeyPairId() {
        return this.keyPairId == null ? Input.empty() : this.keyPairId;
    }

    /**
     * The public key material.
     * 
     */
    @InputImport(name="publicKey")
      private final @Nullable Input<String> publicKey;

    public Input<String> getPublicKey() {
        return this.publicKey == null ? Input.empty() : this.publicKey;
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public KeyPairState(
        @Nullable Input<String> arn,
        @Nullable Input<String> fingerprint,
        @Nullable Input<String> keyName,
        @Nullable Input<String> keyNamePrefix,
        @Nullable Input<String> keyPairId,
        @Nullable Input<String> publicKey,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.fingerprint = fingerprint;
        this.keyName = keyName;
        this.keyNamePrefix = keyNamePrefix;
        this.keyPairId = keyPairId;
        this.publicKey = publicKey;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private KeyPairState() {
        this.arn = Input.empty();
        this.fingerprint = Input.empty();
        this.keyName = Input.empty();
        this.keyNamePrefix = Input.empty();
        this.keyPairId = Input.empty();
        this.publicKey = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyPairState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> fingerprint;
        private @Nullable Input<String> keyName;
        private @Nullable Input<String> keyNamePrefix;
        private @Nullable Input<String> keyPairId;
        private @Nullable Input<String> publicKey;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyPairState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.fingerprint = defaults.fingerprint;
    	      this.keyName = defaults.keyName;
    	      this.keyNamePrefix = defaults.keyNamePrefix;
    	      this.keyPairId = defaults.keyPairId;
    	      this.publicKey = defaults.publicKey;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder fingerprint(@Nullable Input<String> fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }

        public Builder fingerprint(@Nullable String fingerprint) {
            this.fingerprint = Input.ofNullable(fingerprint);
            return this;
        }

        public Builder keyName(@Nullable Input<String> keyName) {
            this.keyName = keyName;
            return this;
        }

        public Builder keyName(@Nullable String keyName) {
            this.keyName = Input.ofNullable(keyName);
            return this;
        }

        public Builder keyNamePrefix(@Nullable Input<String> keyNamePrefix) {
            this.keyNamePrefix = keyNamePrefix;
            return this;
        }

        public Builder keyNamePrefix(@Nullable String keyNamePrefix) {
            this.keyNamePrefix = Input.ofNullable(keyNamePrefix);
            return this;
        }

        public Builder keyPairId(@Nullable Input<String> keyPairId) {
            this.keyPairId = keyPairId;
            return this;
        }

        public Builder keyPairId(@Nullable String keyPairId) {
            this.keyPairId = Input.ofNullable(keyPairId);
            return this;
        }

        public Builder publicKey(@Nullable Input<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public Builder publicKey(@Nullable String publicKey) {
            this.publicKey = Input.ofNullable(publicKey);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public KeyPairState build() {
            return new KeyPairState(arn, fingerprint, keyName, keyNamePrefix, keyPairId, publicKey, tags, tagsAll);
        }
    }
}
