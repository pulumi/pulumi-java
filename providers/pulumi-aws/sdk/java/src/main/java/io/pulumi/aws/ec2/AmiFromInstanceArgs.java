// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.ec2.inputs.AmiFromInstanceEbsBlockDeviceArgs;
import io.pulumi.aws.ec2.inputs.AmiFromInstanceEphemeralBlockDeviceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AmiFromInstanceArgs extends io.pulumi.resources.ResourceArgs {

    public static final AmiFromInstanceArgs Empty = new AmiFromInstanceArgs();

    /**
     * A longer, human-readable description for the AMI.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Nested block describing an EBS block device that should be
     * attached to created instances. The structure of this block is described below.
     * 
     */
    @InputImport(name="ebsBlockDevices")
      private final @Nullable Input<List<AmiFromInstanceEbsBlockDeviceArgs>> ebsBlockDevices;

    public Input<List<AmiFromInstanceEbsBlockDeviceArgs>> getEbsBlockDevices() {
        return this.ebsBlockDevices == null ? Input.empty() : this.ebsBlockDevices;
    }

    /**
     * Nested block describing an ephemeral block device that
     * should be attached to created instances. The structure of this block is described below.
     * 
     */
    @InputImport(name="ephemeralBlockDevices")
      private final @Nullable Input<List<AmiFromInstanceEphemeralBlockDeviceArgs>> ephemeralBlockDevices;

    public Input<List<AmiFromInstanceEphemeralBlockDeviceArgs>> getEphemeralBlockDevices() {
        return this.ephemeralBlockDevices == null ? Input.empty() : this.ephemeralBlockDevices;
    }

    /**
     * A region-unique name for the AMI.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Boolean that overrides the behavior of stopping
     * the instance before snapshotting. This is risky since it may cause a snapshot of an
     * inconsistent filesystem state, but can be used to avoid downtime if the user otherwise
     * guarantees that no filesystem writes will be underway at the time of snapshot.
     * 
     */
    @InputImport(name="snapshotWithoutReboot")
      private final @Nullable Input<Boolean> snapshotWithoutReboot;

    public Input<Boolean> getSnapshotWithoutReboot() {
        return this.snapshotWithoutReboot == null ? Input.empty() : this.snapshotWithoutReboot;
    }

    /**
     * The id of the instance to use as the basis of the AMI.
     * 
     */
    @InputImport(name="sourceInstanceId", required=true)
      private final Input<String> sourceInstanceId;

    public Input<String> getSourceInstanceId() {
        return this.sourceInstanceId;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public AmiFromInstanceArgs(
        @Nullable Input<String> description,
        @Nullable Input<List<AmiFromInstanceEbsBlockDeviceArgs>> ebsBlockDevices,
        @Nullable Input<List<AmiFromInstanceEphemeralBlockDeviceArgs>> ephemeralBlockDevices,
        @Nullable Input<String> name,
        @Nullable Input<Boolean> snapshotWithoutReboot,
        Input<String> sourceInstanceId,
        @Nullable Input<Map<String,String>> tags) {
        this.description = description;
        this.ebsBlockDevices = ebsBlockDevices;
        this.ephemeralBlockDevices = ephemeralBlockDevices;
        this.name = name;
        this.snapshotWithoutReboot = snapshotWithoutReboot;
        this.sourceInstanceId = Objects.requireNonNull(sourceInstanceId, "expected parameter 'sourceInstanceId' to be non-null");
        this.tags = tags;
    }

    private AmiFromInstanceArgs() {
        this.description = Input.empty();
        this.ebsBlockDevices = Input.empty();
        this.ephemeralBlockDevices = Input.empty();
        this.name = Input.empty();
        this.snapshotWithoutReboot = Input.empty();
        this.sourceInstanceId = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AmiFromInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private @Nullable Input<List<AmiFromInstanceEbsBlockDeviceArgs>> ebsBlockDevices;
        private @Nullable Input<List<AmiFromInstanceEphemeralBlockDeviceArgs>> ephemeralBlockDevices;
        private @Nullable Input<String> name;
        private @Nullable Input<Boolean> snapshotWithoutReboot;
        private Input<String> sourceInstanceId;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(AmiFromInstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.ebsBlockDevices = defaults.ebsBlockDevices;
    	      this.ephemeralBlockDevices = defaults.ephemeralBlockDevices;
    	      this.name = defaults.name;
    	      this.snapshotWithoutReboot = defaults.snapshotWithoutReboot;
    	      this.sourceInstanceId = defaults.sourceInstanceId;
    	      this.tags = defaults.tags;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder ebsBlockDevices(@Nullable Input<List<AmiFromInstanceEbsBlockDeviceArgs>> ebsBlockDevices) {
            this.ebsBlockDevices = ebsBlockDevices;
            return this;
        }

        public Builder ebsBlockDevices(@Nullable List<AmiFromInstanceEbsBlockDeviceArgs> ebsBlockDevices) {
            this.ebsBlockDevices = Input.ofNullable(ebsBlockDevices);
            return this;
        }

        public Builder ephemeralBlockDevices(@Nullable Input<List<AmiFromInstanceEphemeralBlockDeviceArgs>> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = ephemeralBlockDevices;
            return this;
        }

        public Builder ephemeralBlockDevices(@Nullable List<AmiFromInstanceEphemeralBlockDeviceArgs> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = Input.ofNullable(ephemeralBlockDevices);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder snapshotWithoutReboot(@Nullable Input<Boolean> snapshotWithoutReboot) {
            this.snapshotWithoutReboot = snapshotWithoutReboot;
            return this;
        }

        public Builder snapshotWithoutReboot(@Nullable Boolean snapshotWithoutReboot) {
            this.snapshotWithoutReboot = Input.ofNullable(snapshotWithoutReboot);
            return this;
        }

        public Builder sourceInstanceId(Input<String> sourceInstanceId) {
            this.sourceInstanceId = Objects.requireNonNull(sourceInstanceId);
            return this;
        }

        public Builder sourceInstanceId(String sourceInstanceId) {
            this.sourceInstanceId = Input.of(Objects.requireNonNull(sourceInstanceId));
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public AmiFromInstanceArgs build() {
            return new AmiFromInstanceArgs(description, ebsBlockDevices, ephemeralBlockDevices, name, snapshotWithoutReboot, sourceInstanceId, tags);
        }
    }
}
