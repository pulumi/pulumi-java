// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesis;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.kinesis.AnalyticsApplicationArgs;
import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationState;
import io.pulumi.aws.kinesis.outputs.AnalyticsApplicationCloudwatchLoggingOptions;
import io.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputs;
import io.pulumi.aws.kinesis.outputs.AnalyticsApplicationOutput;
import io.pulumi.aws.kinesis.outputs.AnalyticsApplicationReferenceDataSources;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a Kinesis Analytics Application resource. Kinesis Analytics is a managed service that
 * allows processing and analyzing streaming data using standard SQL.
 * 
 * For more details, see the [Amazon Kinesis Analytics Documentation](https://docs.aws.amazon.com/kinesisanalytics/latest/dev/what-is.html).
 * 
 * > **Note:** To manage Amazon Kinesis Data Analytics for Apache Flink applications, use the `aws.kinesisanalyticsv2.Application` resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Kinesis Stream Input
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testStream = new aws.kinesis.Stream("testStream", {shardCount: 1});
 * const testApplication = new aws.kinesis.AnalyticsApplication("testApplication", {inputs: {
 *     namePrefix: "test_prefix",
 *     kinesisStream: {
 *         resourceArn: testStream.arn,
 *         roleArn: aws_iam_role.test.arn,
 *     },
 *     parallelism: {
 *         count: 1,
 *     },
 *     schema: {
 *         recordColumns: [{
 *             mapping: `$.test`,
 *             name: "test",
 *             sqlType: "VARCHAR(8)",
 *         }],
 *         recordEncoding: "UTF-8",
 *         recordFormat: {
 *             mappingParameters: {
 *                 json: {
 *                     recordRowPath: "$",
 *                 },
 *             },
 *         },
 *     },
 * }});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test_stream = aws.kinesis.Stream("testStream", shard_count=1)
 * test_application = aws.kinesis.AnalyticsApplication("testApplication", inputs=aws.kinesis.AnalyticsApplicationInputsArgs(
 *     name_prefix="test_prefix",
 *     kinesis_stream=aws.kinesis.AnalyticsApplicationInputsKinesisStreamArgs(
 *         resource_arn=test_stream.arn,
 *         role_arn=aws_iam_role["test"]["arn"],
 *     ),
 *     parallelism=aws.kinesis.AnalyticsApplicationInputsParallelismArgs(
 *         count=1,
 *     ),
 *     schema=aws.kinesis.AnalyticsApplicationInputsSchemaArgs(
 *         record_columns=[aws.kinesis.AnalyticsApplicationInputsSchemaRecordColumnArgs(
 *             mapping="$.test",
 *             name="test",
 *             sql_type="VARCHAR(8)",
 *         )],
 *         record_encoding="UTF-8",
 *         record_format=aws.kinesis.AnalyticsApplicationInputsSchemaRecordFormatArgs(
 *             mapping_parameters=aws.kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs(
 *                 json=aws.kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs(
 *                     record_row_path="$",
 *                 ),
 *             ),
 *         ),
 *     ),
 * ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var testStream = new Aws.Kinesis.Stream("testStream", new Aws.Kinesis.StreamArgs
 *         {
 *             ShardCount = 1,
 *         });
 *         var testApplication = new Aws.Kinesis.AnalyticsApplication("testApplication", new Aws.Kinesis.AnalyticsApplicationArgs
 *         {
 *             Inputs = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsArgs
 *             {
 *                 NamePrefix = "test_prefix",
 *                 KinesisStream = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsKinesisStreamArgs
 *                 {
 *                     ResourceArn = testStream.Arn,
 *                     RoleArn = aws_iam_role.Test.Arn,
 *                 },
 *                 Parallelism = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsParallelismArgs
 *                 {
 *                     Count = 1,
 *                 },
 *                 Schema = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsSchemaArgs
 *                 {
 *                     RecordColumns = 
 *                     {
 *                         new Aws.Kinesis.Inputs.AnalyticsApplicationInputsSchemaRecordColumnArgs
 *                         {
 *                             Mapping = "$.test",
 *                             Name = "test",
 *                             SqlType = "VARCHAR(8)",
 *                         },
 *                     },
 *                     RecordEncoding = "UTF-8",
 *                     RecordFormat = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsSchemaRecordFormatArgs
 *                     {
 *                         MappingParameters = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs
 *                         {
 *                             Json = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs
 *                             {
 *                                 RecordRowPath = "$",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kinesis"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		testStream, err := kinesis.NewStream(ctx, "testStream", &kinesis.StreamArgs{
 * 			ShardCount: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = kinesis.NewAnalyticsApplication(ctx, "testApplication", &kinesis.AnalyticsApplicationArgs{
 * 			Inputs: &kinesis.AnalyticsApplicationInputsArgs{
 * 				NamePrefix: pulumi.String("test_prefix"),
 * 				KinesisStream: &kinesis.AnalyticsApplicationInputsKinesisStreamArgs{
 * 					ResourceArn: testStream.Arn,
 * 					RoleArn:     pulumi.Any(aws_iam_role.Test.Arn),
 * 				},
 * 				Parallelism: &kinesis.AnalyticsApplicationInputsParallelismArgs{
 * 					Count: pulumi.Int(1),
 * 				},
 * 				Schema: &kinesis.AnalyticsApplicationInputsSchemaArgs{
 * 					RecordColumns: kinesis.AnalyticsApplicationInputsSchemaRecordColumnArray{
 * 						&kinesis.AnalyticsApplicationInputsSchemaRecordColumnArgs{
 * 							Mapping: pulumi.String(fmt.Sprintf("%v%v", "$", ".test")),
 * 							Name:    pulumi.String("test"),
 * 							SqlType: pulumi.String("VARCHAR(8)"),
 * 						},
 * 					},
 * 					RecordEncoding: pulumi.String("UTF-8"),
 * 					RecordFormat: &kinesis.AnalyticsApplicationInputsSchemaRecordFormatArgs{
 * 						MappingParameters: &kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs{
 * 							Json: &kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs{
 * 								RecordRowPath: pulumi.String("$"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Starting An Application
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleLogGroup = new aws.cloudwatch.LogGroup("exampleLogGroup", {});
 * const exampleLogStream = new aws.cloudwatch.LogStream("exampleLogStream", {logGroupName: exampleLogGroup.name});
 * const exampleStream = new aws.kinesis.Stream("exampleStream", {shardCount: 1});
 * const exampleFirehoseDeliveryStream = new aws.kinesis.FirehoseDeliveryStream("exampleFirehoseDeliveryStream", {
 *     destination: "extended_s3",
 *     extendedS3Configuration: {
 *         bucketArn: aws_s3_bucket.example.arn,
 *         roleArn: aws_iam_role.example.arn,
 *     },
 * });
 * const test = new aws.kinesis.AnalyticsApplication("test", {
 *     cloudwatchLoggingOptions: {
 *         logStreamArn: exampleLogStream.arn,
 *         roleArn: aws_iam_role.example.arn,
 *     },
 *     inputs: {
 *         namePrefix: "example_prefix",
 *         schema: {
 *             recordColumns: [{
 *                 name: "COLUMN_1",
 *                 sqlType: "INTEGER",
 *             }],
 *             recordFormat: {
 *                 mappingParameters: {
 *                     csv: {
 *                         recordColumnDelimiter: ",",
 *                         recordRowDelimiter: "|",
 *                     },
 *                 },
 *             },
 *         },
 *         kinesisStream: {
 *             resourceArn: exampleStream.arn,
 *             roleArn: aws_iam_role.example.arn,
 *         },
 *         startingPositionConfigurations: [{
 *             startingPosition: "NOW",
 *         }],
 *     },
 *     outputs: [{
 *         name: "OUTPUT_1",
 *         schema: {
 *             recordFormatType: "CSV",
 *         },
 *         kinesisFirehose: {
 *             resourceArn: exampleFirehoseDeliveryStream.arn,
 *             roleArn: aws_iam_role.example.arn,
 *         },
 *     }],
 *     startApplication: true,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_log_group = aws.cloudwatch.LogGroup("exampleLogGroup")
 * example_log_stream = aws.cloudwatch.LogStream("exampleLogStream", log_group_name=example_log_group.name)
 * example_stream = aws.kinesis.Stream("exampleStream", shard_count=1)
 * example_firehose_delivery_stream = aws.kinesis.FirehoseDeliveryStream("exampleFirehoseDeliveryStream",
 *     destination="extended_s3",
 *     extended_s3_configuration=aws.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationArgs(
 *         bucket_arn=aws_s3_bucket["example"]["arn"],
 *         role_arn=aws_iam_role["example"]["arn"],
 *     ))
 * test = aws.kinesis.AnalyticsApplication("test",
 *     cloudwatch_logging_options=aws.kinesis.AnalyticsApplicationCloudwatchLoggingOptionsArgs(
 *         log_stream_arn=example_log_stream.arn,
 *         role_arn=aws_iam_role["example"]["arn"],
 *     ),
 *     inputs=aws.kinesis.AnalyticsApplicationInputsArgs(
 *         name_prefix="example_prefix",
 *         schema=aws.kinesis.AnalyticsApplicationInputsSchemaArgs(
 *             record_columns=[aws.kinesis.AnalyticsApplicationInputsSchemaRecordColumnArgs(
 *                 name="COLUMN_1",
 *                 sql_type="INTEGER",
 *             )],
 *             record_format=aws.kinesis.AnalyticsApplicationInputsSchemaRecordFormatArgs(
 *                 mapping_parameters=aws.kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs(
 *                     csv=aws.kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs(
 *                         record_column_delimiter=",",
 *                         record_row_delimiter="|",
 *                     ),
 *                 ),
 *             ),
 *         ),
 *         kinesis_stream=aws.kinesis.AnalyticsApplicationInputsKinesisStreamArgs(
 *             resource_arn=example_stream.arn,
 *             role_arn=aws_iam_role["example"]["arn"],
 *         ),
 *         starting_position_configurations=[aws.kinesis.AnalyticsApplicationInputsStartingPositionConfigurationArgs(
 *             starting_position="NOW",
 *         )],
 *     ),
 *     outputs=[aws.kinesis.AnalyticsApplicationOutputArgs(
 *         name="OUTPUT_1",
 *         schema=aws.kinesis.AnalyticsApplicationOutputSchemaArgs(
 *             record_format_type="CSV",
 *         ),
 *         kinesis_firehose=aws.kinesis.AnalyticsApplicationOutputKinesisFirehoseArgs(
 *             resource_arn=example_firehose_delivery_stream.arn,
 *             role_arn=aws_iam_role["example"]["arn"],
 *         ),
 *     )],
 *     start_application=True)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleLogGroup = new Aws.CloudWatch.LogGroup("exampleLogGroup", new Aws.CloudWatch.LogGroupArgs
 *         {
 *         });
 *         var exampleLogStream = new Aws.CloudWatch.LogStream("exampleLogStream", new Aws.CloudWatch.LogStreamArgs
 *         {
 *             LogGroupName = exampleLogGroup.Name,
 *         });
 *         var exampleStream = new Aws.Kinesis.Stream("exampleStream", new Aws.Kinesis.StreamArgs
 *         {
 *             ShardCount = 1,
 *         });
 *         var exampleFirehoseDeliveryStream = new Aws.Kinesis.FirehoseDeliveryStream("exampleFirehoseDeliveryStream", new Aws.Kinesis.FirehoseDeliveryStreamArgs
 *         {
 *             Destination = "extended_s3",
 *             ExtendedS3Configuration = new Aws.Kinesis.Inputs.FirehoseDeliveryStreamExtendedS3ConfigurationArgs
 *             {
 *                 BucketArn = aws_s3_bucket.Example.Arn,
 *                 RoleArn = aws_iam_role.Example.Arn,
 *             },
 *         });
 *         var test = new Aws.Kinesis.AnalyticsApplication("test", new Aws.Kinesis.AnalyticsApplicationArgs
 *         {
 *             CloudwatchLoggingOptions = new Aws.Kinesis.Inputs.AnalyticsApplicationCloudwatchLoggingOptionsArgs
 *             {
 *                 LogStreamArn = exampleLogStream.Arn,
 *                 RoleArn = aws_iam_role.Example.Arn,
 *             },
 *             Inputs = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsArgs
 *             {
 *                 NamePrefix = "example_prefix",
 *                 Schema = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsSchemaArgs
 *                 {
 *                     RecordColumns = 
 *                     {
 *                         new Aws.Kinesis.Inputs.AnalyticsApplicationInputsSchemaRecordColumnArgs
 *                         {
 *                             Name = "COLUMN_1",
 *                             SqlType = "INTEGER",
 *                         },
 *                     },
 *                     RecordFormat = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsSchemaRecordFormatArgs
 *                     {
 *                         MappingParameters = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs
 *                         {
 *                             Csv = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs
 *                             {
 *                                 RecordColumnDelimiter = ",",
 *                                 RecordRowDelimiter = "|",
 *                             },
 *                         },
 *                     },
 *                 },
 *                 KinesisStream = new Aws.Kinesis.Inputs.AnalyticsApplicationInputsKinesisStreamArgs
 *                 {
 *                     ResourceArn = exampleStream.Arn,
 *                     RoleArn = aws_iam_role.Example.Arn,
 *                 },
 *                 StartingPositionConfigurations = 
 *                 {
 *                     new Aws.Kinesis.Inputs.AnalyticsApplicationInputsStartingPositionConfigurationArgs
 *                     {
 *                         StartingPosition = "NOW",
 *                     },
 *                 },
 *             },
 *             Outputs = 
 *             {
 *                 new Aws.Kinesis.Inputs.AnalyticsApplicationOutputArgs
 *                 {
 *                     Name = "OUTPUT_1",
 *                     Schema = new Aws.Kinesis.Inputs.AnalyticsApplicationOutputSchemaArgs
 *                     {
 *                         RecordFormatType = "CSV",
 *                     },
 *                     KinesisFirehose = new Aws.Kinesis.Inputs.AnalyticsApplicationOutputKinesisFirehoseArgs
 *                     {
 *                         ResourceArn = exampleFirehoseDeliveryStream.Arn,
 *                         RoleArn = aws_iam_role.Example.Arn,
 *                     },
 *                 },
 *             },
 *             StartApplication = true,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kinesis"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleLogGroup, err := cloudwatch.NewLogGroup(ctx, "exampleLogGroup", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleLogStream, err := cloudwatch.NewLogStream(ctx, "exampleLogStream", &cloudwatch.LogStreamArgs{
 * 			LogGroupName: exampleLogGroup.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleStream, err := kinesis.NewStream(ctx, "exampleStream", &kinesis.StreamArgs{
 * 			ShardCount: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleFirehoseDeliveryStream, err := kinesis.NewFirehoseDeliveryStream(ctx, "exampleFirehoseDeliveryStream", &kinesis.FirehoseDeliveryStreamArgs{
 * 			Destination: pulumi.String("extended_s3"),
 * 			ExtendedS3Configuration: &kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationArgs{
 * 				BucketArn: pulumi.Any(aws_s3_bucket.Example.Arn),
 * 				RoleArn:   pulumi.Any(aws_iam_role.Example.Arn),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = kinesis.NewAnalyticsApplication(ctx, "test", &kinesis.AnalyticsApplicationArgs{
 * 			CloudwatchLoggingOptions: &kinesis.AnalyticsApplicationCloudwatchLoggingOptionsArgs{
 * 				LogStreamArn: exampleLogStream.Arn,
 * 				RoleArn:      pulumi.Any(aws_iam_role.Example.Arn),
 * 			},
 * 			Inputs: &kinesis.AnalyticsApplicationInputsArgs{
 * 				NamePrefix: pulumi.String("example_prefix"),
 * 				Schema: &kinesis.AnalyticsApplicationInputsSchemaArgs{
 * 					RecordColumns: kinesis.AnalyticsApplicationInputsSchemaRecordColumnArray{
 * 						&kinesis.AnalyticsApplicationInputsSchemaRecordColumnArgs{
 * 							Name:    pulumi.String("COLUMN_1"),
 * 							SqlType: pulumi.String("INTEGER"),
 * 						},
 * 					},
 * 					RecordFormat: &kinesis.AnalyticsApplicationInputsSchemaRecordFormatArgs{
 * 						MappingParameters: &kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs{
 * 							Csv: &kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs{
 * 								RecordColumnDelimiter: pulumi.String(","),
 * 								RecordRowDelimiter:    pulumi.String("|"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 				KinesisStream: &kinesis.AnalyticsApplicationInputsKinesisStreamArgs{
 * 					ResourceArn: exampleStream.Arn,
 * 					RoleArn:     pulumi.Any(aws_iam_role.Example.Arn),
 * 				},
 * 				StartingPositionConfigurations: kinesis.AnalyticsApplicationInputsStartingPositionConfigurationArray{
 * 					&kinesis.AnalyticsApplicationInputsStartingPositionConfigurationArgs{
 * 						StartingPosition: pulumi.String("NOW"),
 * 					},
 * 				},
 * 			},
 * 			Outputs: kinesis.AnalyticsApplicationOutputArray{
 * 				kinesis.AnalyticsApplicationOutputArgs{
 * 					Name: pulumi.String("OUTPUT_1"),
 * 					Schema: &kinesis.AnalyticsApplicationOutputSchemaArgs{
 * 						RecordFormatType: pulumi.String("CSV"),
 * 					},
 * 					KinesisFirehose: &kinesis.AnalyticsApplicationOutputKinesisFirehoseArgs{
 * 						ResourceArn: exampleFirehoseDeliveryStream.Arn,
 * 						RoleArn:     pulumi.Any(aws_iam_role.Example.Arn),
 * 					},
 * 				},
 * 			},
 * 			StartApplication: pulumi.Bool(true),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Kinesis Analytics Application can be imported by using ARN, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:kinesis/analyticsApplication:AnalyticsApplication example arn:aws:kinesisanalytics:us-west-2:1234567890:application/example
 * ```
 * 
 *  
 */
@ResourceType(type="aws:kinesis/analyticsApplication:AnalyticsApplication")
public class AnalyticsApplication extends io.pulumi.resources.CustomResource {
    /**
     * The ARN of the Kinesis Analytics Appliation.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the Kinesis Analytics Appliation.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The CloudWatch log stream options to monitor application errors.
     * See CloudWatch Logging Options below for more details.
     * 
     */
    @Export(name="cloudwatchLoggingOptions", type=AnalyticsApplicationCloudwatchLoggingOptions.class, parameters={})
    private Output</* @Nullable */ AnalyticsApplicationCloudwatchLoggingOptions> cloudwatchLoggingOptions;

    /**
     * @return The CloudWatch log stream options to monitor application errors.
     * See CloudWatch Logging Options below for more details.
     * 
     */
    public Output</* @Nullable */ AnalyticsApplicationCloudwatchLoggingOptions> getCloudwatchLoggingOptions() {
        return this.cloudwatchLoggingOptions;
    }
    /**
     * SQL Code to transform input data, and generate output.
     * 
     */
    @Export(name="code", type=String.class, parameters={})
    private Output</* @Nullable */ String> code;

    /**
     * @return SQL Code to transform input data, and generate output.
     * 
     */
    public Output</* @Nullable */ String> getCode() {
        return this.code;
    }
    /**
     * The Timestamp when the application version was created.
     * 
     */
    @Export(name="createTimestamp", type=String.class, parameters={})
    private Output<String> createTimestamp;

    /**
     * @return The Timestamp when the application version was created.
     * 
     */
    public Output<String> getCreateTimestamp() {
        return this.createTimestamp;
    }
    /**
     * Description of the application.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the application.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Input configuration of the application. See Inputs below for more details.
     * 
     */
    @Export(name="inputs", type=AnalyticsApplicationInputs.class, parameters={})
    private Output</* @Nullable */ AnalyticsApplicationInputs> inputs;

    /**
     * @return Input configuration of the application. See Inputs below for more details.
     * 
     */
    public Output</* @Nullable */ AnalyticsApplicationInputs> getInputs() {
        return this.inputs;
    }
    /**
     * The Timestamp when the application was last updated.
     * 
     */
    @Export(name="lastUpdateTimestamp", type=String.class, parameters={})
    private Output<String> lastUpdateTimestamp;

    /**
     * @return The Timestamp when the application was last updated.
     * 
     */
    public Output<String> getLastUpdateTimestamp() {
        return this.lastUpdateTimestamp;
    }
    /**
     * Name of the Kinesis Analytics Application.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the Kinesis Analytics Application.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Output destination configuration of the application. See Outputs below for more details.
     * 
     */
    @Export(name="outputs", type=List.class, parameters={AnalyticsApplicationOutput.class})
    private Output</* @Nullable */ List<AnalyticsApplicationOutput>> outputs;

    /**
     * @return Output destination configuration of the application. See Outputs below for more details.
     * 
     */
    public Output</* @Nullable */ List<AnalyticsApplicationOutput>> getOutputs() {
        return this.outputs;
    }
    /**
     * An S3 Reference Data Source for the application.
     * See Reference Data Sources below for more details.
     * 
     */
    @Export(name="referenceDataSources", type=AnalyticsApplicationReferenceDataSources.class, parameters={})
    private Output</* @Nullable */ AnalyticsApplicationReferenceDataSources> referenceDataSources;

    /**
     * @return An S3 Reference Data Source for the application.
     * See Reference Data Sources below for more details.
     * 
     */
    public Output</* @Nullable */ AnalyticsApplicationReferenceDataSources> getReferenceDataSources() {
        return this.referenceDataSources;
    }
    /**
     * Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `starting_position` must be configured.
     * To modify an application's starting position, first stop the application by setting `start_application = false`, then update `starting_position` and set `start_application = true`.
     * 
     */
    @Export(name="startApplication", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> startApplication;

    /**
     * @return Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `starting_position` must be configured.
     * To modify an application's starting position, first stop the application by setting `start_application = false`, then update `starting_position` and set `start_application = true`.
     * 
     */
    public Output</* @Nullable */ Boolean> getStartApplication() {
        return this.startApplication;
    }
    /**
     * The Status of the application.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The Status of the application.
     * 
     */
    public Output<String> getStatus() {
        return this.status;
    }
    /**
     * Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The Version of the application.
     * 
     */
    @Export(name="version", type=Integer.class, parameters={})
    private Output<Integer> version;

    /**
     * @return The Version of the application.
     * 
     */
    public Output<Integer> getVersion() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AnalyticsApplication(String name) {
        this(name, AnalyticsApplicationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AnalyticsApplication(String name, @Nullable AnalyticsApplicationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AnalyticsApplication(String name, @Nullable AnalyticsApplicationArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:kinesis/analyticsApplication:AnalyticsApplication", name, args == null ? AnalyticsApplicationArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private AnalyticsApplication(String name, Output<String> id, @Nullable AnalyticsApplicationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:kinesis/analyticsApplication:AnalyticsApplication", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AnalyticsApplication get(String name, Output<String> id, @Nullable AnalyticsApplicationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new AnalyticsApplication(name, id, state, options);
    }
}
