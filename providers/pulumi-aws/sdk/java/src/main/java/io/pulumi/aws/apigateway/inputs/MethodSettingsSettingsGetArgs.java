// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigateway.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MethodSettingsSettingsGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final MethodSettingsSettingsGetArgs Empty = new MethodSettingsSettingsGetArgs();

    /**
     * Specifies whether the cached responses are encrypted.
     * 
     */
    @Import(name="cacheDataEncrypted")
      private final @Nullable Output<Boolean> cacheDataEncrypted;

    public Output<Boolean> getCacheDataEncrypted() {
        return this.cacheDataEncrypted == null ? Output.empty() : this.cacheDataEncrypted;
    }

    /**
     * Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
     * 
     */
    @Import(name="cacheTtlInSeconds")
      private final @Nullable Output<Integer> cacheTtlInSeconds;

    public Output<Integer> getCacheTtlInSeconds() {
        return this.cacheTtlInSeconds == null ? Output.empty() : this.cacheTtlInSeconds;
    }

    /**
     * Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
     * 
     */
    @Import(name="cachingEnabled")
      private final @Nullable Output<Boolean> cachingEnabled;

    public Output<Boolean> getCachingEnabled() {
        return this.cachingEnabled == null ? Output.empty() : this.cachingEnabled;
    }

    /**
     * Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
     * 
     */
    @Import(name="dataTraceEnabled")
      private final @Nullable Output<Boolean> dataTraceEnabled;

    public Output<Boolean> getDataTraceEnabled() {
        return this.dataTraceEnabled == null ? Output.empty() : this.dataTraceEnabled;
    }

    /**
     * Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
     * 
     */
    @Import(name="loggingLevel")
      private final @Nullable Output<String> loggingLevel;

    public Output<String> getLoggingLevel() {
        return this.loggingLevel == null ? Output.empty() : this.loggingLevel;
    }

    /**
     * Specifies whether Amazon CloudWatch metrics are enabled for this method.
     * 
     */
    @Import(name="metricsEnabled")
      private final @Nullable Output<Boolean> metricsEnabled;

    public Output<Boolean> getMetricsEnabled() {
        return this.metricsEnabled == null ? Output.empty() : this.metricsEnabled;
    }

    /**
     * Specifies whether authorization is required for a cache invalidation request.
     * 
     */
    @Import(name="requireAuthorizationForCacheControl")
      private final @Nullable Output<Boolean> requireAuthorizationForCacheControl;

    public Output<Boolean> getRequireAuthorizationForCacheControl() {
        return this.requireAuthorizationForCacheControl == null ? Output.empty() : this.requireAuthorizationForCacheControl;
    }

    /**
     * Specifies the throttling burst limit. Default: `-1` (throttling disabled).
     * 
     */
    @Import(name="throttlingBurstLimit")
      private final @Nullable Output<Integer> throttlingBurstLimit;

    public Output<Integer> getThrottlingBurstLimit() {
        return this.throttlingBurstLimit == null ? Output.empty() : this.throttlingBurstLimit;
    }

    /**
     * Specifies the throttling rate limit. Default: `-1` (throttling disabled).
     * 
     */
    @Import(name="throttlingRateLimit")
      private final @Nullable Output<Double> throttlingRateLimit;

    public Output<Double> getThrottlingRateLimit() {
        return this.throttlingRateLimit == null ? Output.empty() : this.throttlingRateLimit;
    }

    /**
     * Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
     * 
     */
    @Import(name="unauthorizedCacheControlHeaderStrategy")
      private final @Nullable Output<String> unauthorizedCacheControlHeaderStrategy;

    public Output<String> getUnauthorizedCacheControlHeaderStrategy() {
        return this.unauthorizedCacheControlHeaderStrategy == null ? Output.empty() : this.unauthorizedCacheControlHeaderStrategy;
    }

    public MethodSettingsSettingsGetArgs(
        @Nullable Output<Boolean> cacheDataEncrypted,
        @Nullable Output<Integer> cacheTtlInSeconds,
        @Nullable Output<Boolean> cachingEnabled,
        @Nullable Output<Boolean> dataTraceEnabled,
        @Nullable Output<String> loggingLevel,
        @Nullable Output<Boolean> metricsEnabled,
        @Nullable Output<Boolean> requireAuthorizationForCacheControl,
        @Nullable Output<Integer> throttlingBurstLimit,
        @Nullable Output<Double> throttlingRateLimit,
        @Nullable Output<String> unauthorizedCacheControlHeaderStrategy) {
        this.cacheDataEncrypted = cacheDataEncrypted;
        this.cacheTtlInSeconds = cacheTtlInSeconds;
        this.cachingEnabled = cachingEnabled;
        this.dataTraceEnabled = dataTraceEnabled;
        this.loggingLevel = loggingLevel;
        this.metricsEnabled = metricsEnabled;
        this.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl;
        this.throttlingBurstLimit = throttlingBurstLimit;
        this.throttlingRateLimit = throttlingRateLimit;
        this.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy;
    }

    private MethodSettingsSettingsGetArgs() {
        this.cacheDataEncrypted = Output.empty();
        this.cacheTtlInSeconds = Output.empty();
        this.cachingEnabled = Output.empty();
        this.dataTraceEnabled = Output.empty();
        this.loggingLevel = Output.empty();
        this.metricsEnabled = Output.empty();
        this.requireAuthorizationForCacheControl = Output.empty();
        this.throttlingBurstLimit = Output.empty();
        this.throttlingRateLimit = Output.empty();
        this.unauthorizedCacheControlHeaderStrategy = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MethodSettingsSettingsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> cacheDataEncrypted;
        private @Nullable Output<Integer> cacheTtlInSeconds;
        private @Nullable Output<Boolean> cachingEnabled;
        private @Nullable Output<Boolean> dataTraceEnabled;
        private @Nullable Output<String> loggingLevel;
        private @Nullable Output<Boolean> metricsEnabled;
        private @Nullable Output<Boolean> requireAuthorizationForCacheControl;
        private @Nullable Output<Integer> throttlingBurstLimit;
        private @Nullable Output<Double> throttlingRateLimit;
        private @Nullable Output<String> unauthorizedCacheControlHeaderStrategy;

        public Builder() {
    	      // Empty
        }

        public Builder(MethodSettingsSettingsGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheDataEncrypted = defaults.cacheDataEncrypted;
    	      this.cacheTtlInSeconds = defaults.cacheTtlInSeconds;
    	      this.cachingEnabled = defaults.cachingEnabled;
    	      this.dataTraceEnabled = defaults.dataTraceEnabled;
    	      this.loggingLevel = defaults.loggingLevel;
    	      this.metricsEnabled = defaults.metricsEnabled;
    	      this.requireAuthorizationForCacheControl = defaults.requireAuthorizationForCacheControl;
    	      this.throttlingBurstLimit = defaults.throttlingBurstLimit;
    	      this.throttlingRateLimit = defaults.throttlingRateLimit;
    	      this.unauthorizedCacheControlHeaderStrategy = defaults.unauthorizedCacheControlHeaderStrategy;
        }

        public Builder cacheDataEncrypted(@Nullable Output<Boolean> cacheDataEncrypted) {
            this.cacheDataEncrypted = cacheDataEncrypted;
            return this;
        }
        public Builder cacheDataEncrypted(@Nullable Boolean cacheDataEncrypted) {
            this.cacheDataEncrypted = Output.ofNullable(cacheDataEncrypted);
            return this;
        }
        public Builder cacheTtlInSeconds(@Nullable Output<Integer> cacheTtlInSeconds) {
            this.cacheTtlInSeconds = cacheTtlInSeconds;
            return this;
        }
        public Builder cacheTtlInSeconds(@Nullable Integer cacheTtlInSeconds) {
            this.cacheTtlInSeconds = Output.ofNullable(cacheTtlInSeconds);
            return this;
        }
        public Builder cachingEnabled(@Nullable Output<Boolean> cachingEnabled) {
            this.cachingEnabled = cachingEnabled;
            return this;
        }
        public Builder cachingEnabled(@Nullable Boolean cachingEnabled) {
            this.cachingEnabled = Output.ofNullable(cachingEnabled);
            return this;
        }
        public Builder dataTraceEnabled(@Nullable Output<Boolean> dataTraceEnabled) {
            this.dataTraceEnabled = dataTraceEnabled;
            return this;
        }
        public Builder dataTraceEnabled(@Nullable Boolean dataTraceEnabled) {
            this.dataTraceEnabled = Output.ofNullable(dataTraceEnabled);
            return this;
        }
        public Builder loggingLevel(@Nullable Output<String> loggingLevel) {
            this.loggingLevel = loggingLevel;
            return this;
        }
        public Builder loggingLevel(@Nullable String loggingLevel) {
            this.loggingLevel = Output.ofNullable(loggingLevel);
            return this;
        }
        public Builder metricsEnabled(@Nullable Output<Boolean> metricsEnabled) {
            this.metricsEnabled = metricsEnabled;
            return this;
        }
        public Builder metricsEnabled(@Nullable Boolean metricsEnabled) {
            this.metricsEnabled = Output.ofNullable(metricsEnabled);
            return this;
        }
        public Builder requireAuthorizationForCacheControl(@Nullable Output<Boolean> requireAuthorizationForCacheControl) {
            this.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl;
            return this;
        }
        public Builder requireAuthorizationForCacheControl(@Nullable Boolean requireAuthorizationForCacheControl) {
            this.requireAuthorizationForCacheControl = Output.ofNullable(requireAuthorizationForCacheControl);
            return this;
        }
        public Builder throttlingBurstLimit(@Nullable Output<Integer> throttlingBurstLimit) {
            this.throttlingBurstLimit = throttlingBurstLimit;
            return this;
        }
        public Builder throttlingBurstLimit(@Nullable Integer throttlingBurstLimit) {
            this.throttlingBurstLimit = Output.ofNullable(throttlingBurstLimit);
            return this;
        }
        public Builder throttlingRateLimit(@Nullable Output<Double> throttlingRateLimit) {
            this.throttlingRateLimit = throttlingRateLimit;
            return this;
        }
        public Builder throttlingRateLimit(@Nullable Double throttlingRateLimit) {
            this.throttlingRateLimit = Output.ofNullable(throttlingRateLimit);
            return this;
        }
        public Builder unauthorizedCacheControlHeaderStrategy(@Nullable Output<String> unauthorizedCacheControlHeaderStrategy) {
            this.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy;
            return this;
        }
        public Builder unauthorizedCacheControlHeaderStrategy(@Nullable String unauthorizedCacheControlHeaderStrategy) {
            this.unauthorizedCacheControlHeaderStrategy = Output.ofNullable(unauthorizedCacheControlHeaderStrategy);
            return this;
        }        public MethodSettingsSettingsGetArgs build() {
            return new MethodSettingsSettingsGetArgs(cacheDataEncrypted, cacheTtlInSeconds, cachingEnabled, dataTraceEnabled, loggingLevel, metricsEnabled, requireAuthorizationForCacheControl, throttlingBurstLimit, throttlingRateLimit, unauthorizedCacheControlHeaderStrategy);
        }
    }
}
