// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.VpcIpamOperatingRegionGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpcIpamState extends io.pulumi.resources.ResourceArgs {

    public static final VpcIpamState Empty = new VpcIpamState();

    /**
     * Amazon Resource Name (ARN) of IPAM
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * A description for the IPAM.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Determines which locales can be chosen when you create pools. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. You specify a region using the region_name parameter. You **must** set your provider block region as an operating_region.
     * 
     */
    @InputImport(name="operatingRegions")
      private final @Nullable Input<List<VpcIpamOperatingRegionGetArgs>> operatingRegions;

    public Input<List<VpcIpamOperatingRegionGetArgs>> getOperatingRegions() {
        return this.operatingRegions == null ? Input.empty() : this.operatingRegions;
    }

    /**
     * The ID of the IPAM's private scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private IP space. The public scope is intended for all internet-routable IP space.
     * 
     */
    @InputImport(name="privateDefaultScopeId")
      private final @Nullable Input<String> privateDefaultScopeId;

    public Input<String> getPrivateDefaultScopeId() {
        return this.privateDefaultScopeId == null ? Input.empty() : this.privateDefaultScopeId;
    }

    /**
     * The ID of the IPAM's public scope. A scope is a top-level container in IPAM. Each scope represents an IP-independent network. Scopes enable you to represent networks where you have overlapping IP space. When you create an IPAM, IPAM automatically creates two scopes: public and private. The private scope is intended for private
     * IP space. The public scope is intended for all internet-routable IP space.
     * 
     */
    @InputImport(name="publicDefaultScopeId")
      private final @Nullable Input<String> publicDefaultScopeId;

    public Input<String> getPublicDefaultScopeId() {
        return this.publicDefaultScopeId == null ? Input.empty() : this.publicDefaultScopeId;
    }

    /**
     * The number of scopes in the IPAM.
     * 
     */
    @InputImport(name="scopeCount")
      private final @Nullable Input<Integer> scopeCount;

    public Input<Integer> getScopeCount() {
        return this.scopeCount == null ? Input.empty() : this.scopeCount;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public VpcIpamState(
        @Nullable Input<String> arn,
        @Nullable Input<String> description,
        @Nullable Input<List<VpcIpamOperatingRegionGetArgs>> operatingRegions,
        @Nullable Input<String> privateDefaultScopeId,
        @Nullable Input<String> publicDefaultScopeId,
        @Nullable Input<Integer> scopeCount,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.description = description;
        this.operatingRegions = operatingRegions;
        this.privateDefaultScopeId = privateDefaultScopeId;
        this.publicDefaultScopeId = publicDefaultScopeId;
        this.scopeCount = scopeCount;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private VpcIpamState() {
        this.arn = Input.empty();
        this.description = Input.empty();
        this.operatingRegions = Input.empty();
        this.privateDefaultScopeId = Input.empty();
        this.publicDefaultScopeId = Input.empty();
        this.scopeCount = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpcIpamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> description;
        private @Nullable Input<List<VpcIpamOperatingRegionGetArgs>> operatingRegions;
        private @Nullable Input<String> privateDefaultScopeId;
        private @Nullable Input<String> publicDefaultScopeId;
        private @Nullable Input<Integer> scopeCount;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(VpcIpamState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.operatingRegions = defaults.operatingRegions;
    	      this.privateDefaultScopeId = defaults.privateDefaultScopeId;
    	      this.publicDefaultScopeId = defaults.publicDefaultScopeId;
    	      this.scopeCount = defaults.scopeCount;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder operatingRegions(@Nullable Input<List<VpcIpamOperatingRegionGetArgs>> operatingRegions) {
            this.operatingRegions = operatingRegions;
            return this;
        }

        public Builder operatingRegions(@Nullable List<VpcIpamOperatingRegionGetArgs> operatingRegions) {
            this.operatingRegions = Input.ofNullable(operatingRegions);
            return this;
        }

        public Builder privateDefaultScopeId(@Nullable Input<String> privateDefaultScopeId) {
            this.privateDefaultScopeId = privateDefaultScopeId;
            return this;
        }

        public Builder privateDefaultScopeId(@Nullable String privateDefaultScopeId) {
            this.privateDefaultScopeId = Input.ofNullable(privateDefaultScopeId);
            return this;
        }

        public Builder publicDefaultScopeId(@Nullable Input<String> publicDefaultScopeId) {
            this.publicDefaultScopeId = publicDefaultScopeId;
            return this;
        }

        public Builder publicDefaultScopeId(@Nullable String publicDefaultScopeId) {
            this.publicDefaultScopeId = Input.ofNullable(publicDefaultScopeId);
            return this;
        }

        public Builder scopeCount(@Nullable Input<Integer> scopeCount) {
            this.scopeCount = scopeCount;
            return this;
        }

        public Builder scopeCount(@Nullable Integer scopeCount) {
            this.scopeCount = Input.ofNullable(scopeCount);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public VpcIpamState build() {
            return new VpcIpamState(arn, description, operatingRegions, privateDefaultScopeId, publicDefaultScopeId, scopeCount, tags, tagsAll);
        }
    }
}
