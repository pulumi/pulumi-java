// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.workspaces;

import io.pulumi.aws.workspaces.inputs.DirectorySelfServicePermissionsArgs;
import io.pulumi.aws.workspaces.inputs.DirectoryWorkspaceAccessPropertiesArgs;
import io.pulumi.aws.workspaces.inputs.DirectoryWorkspaceCreationPropertiesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DirectoryArgs extends io.pulumi.resources.ResourceArgs {

    public static final DirectoryArgs Empty = new DirectoryArgs();

    /**
     * The directory identifier for registration in WorkSpaces service.
     * 
     */
    @InputImport(name="directoryId", required=true)
      private final Output<String> directoryId;

    public Output<String> getDirectoryId() {
        return this.directoryId;
    }

    /**
     * The identifiers of the IP access control groups associated with the directory.
     * 
     */
    @InputImport(name="ipGroupIds")
      private final @Nullable Output<List<String>> ipGroupIds;

    public Output<List<String>> getIpGroupIds() {
        return this.ipGroupIds == null ? Output.empty() : this.ipGroupIds;
    }

    /**
     * Permissions to enable or disable self-service capabilities. Defined below.
     * 
     */
    @InputImport(name="selfServicePermissions")
      private final @Nullable Output<DirectorySelfServicePermissionsArgs> selfServicePermissions;

    public Output<DirectorySelfServicePermissionsArgs> getSelfServicePermissions() {
        return this.selfServicePermissions == null ? Output.empty() : this.selfServicePermissions;
    }

    /**
     * The identifiers of the subnets where the directory resides.
     * 
     */
    @InputImport(name="subnetIds")
      private final @Nullable Output<List<String>> subnetIds;

    public Output<List<String>> getSubnetIds() {
        return this.subnetIds == null ? Output.empty() : this.subnetIds;
    }

    /**
     * A map of tags assigned to the WorkSpaces directory. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
     * 
     */
    @InputImport(name="workspaceAccessProperties")
      private final @Nullable Output<DirectoryWorkspaceAccessPropertiesArgs> workspaceAccessProperties;

    public Output<DirectoryWorkspaceAccessPropertiesArgs> getWorkspaceAccessProperties() {
        return this.workspaceAccessProperties == null ? Output.empty() : this.workspaceAccessProperties;
    }

    /**
     * Default properties that are used for creating WorkSpaces. Defined below.
     * 
     */
    @InputImport(name="workspaceCreationProperties")
      private final @Nullable Output<DirectoryWorkspaceCreationPropertiesArgs> workspaceCreationProperties;

    public Output<DirectoryWorkspaceCreationPropertiesArgs> getWorkspaceCreationProperties() {
        return this.workspaceCreationProperties == null ? Output.empty() : this.workspaceCreationProperties;
    }

    public DirectoryArgs(
        Output<String> directoryId,
        @Nullable Output<List<String>> ipGroupIds,
        @Nullable Output<DirectorySelfServicePermissionsArgs> selfServicePermissions,
        @Nullable Output<List<String>> subnetIds,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<DirectoryWorkspaceAccessPropertiesArgs> workspaceAccessProperties,
        @Nullable Output<DirectoryWorkspaceCreationPropertiesArgs> workspaceCreationProperties) {
        this.directoryId = Objects.requireNonNull(directoryId, "expected parameter 'directoryId' to be non-null");
        this.ipGroupIds = ipGroupIds;
        this.selfServicePermissions = selfServicePermissions;
        this.subnetIds = subnetIds;
        this.tags = tags;
        this.workspaceAccessProperties = workspaceAccessProperties;
        this.workspaceCreationProperties = workspaceCreationProperties;
    }

    private DirectoryArgs() {
        this.directoryId = Output.empty();
        this.ipGroupIds = Output.empty();
        this.selfServicePermissions = Output.empty();
        this.subnetIds = Output.empty();
        this.tags = Output.empty();
        this.workspaceAccessProperties = Output.empty();
        this.workspaceCreationProperties = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> directoryId;
        private @Nullable Output<List<String>> ipGroupIds;
        private @Nullable Output<DirectorySelfServicePermissionsArgs> selfServicePermissions;
        private @Nullable Output<List<String>> subnetIds;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<DirectoryWorkspaceAccessPropertiesArgs> workspaceAccessProperties;
        private @Nullable Output<DirectoryWorkspaceCreationPropertiesArgs> workspaceCreationProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(DirectoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.directoryId = defaults.directoryId;
    	      this.ipGroupIds = defaults.ipGroupIds;
    	      this.selfServicePermissions = defaults.selfServicePermissions;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.workspaceAccessProperties = defaults.workspaceAccessProperties;
    	      this.workspaceCreationProperties = defaults.workspaceCreationProperties;
        }

        public Builder directoryId(Output<String> directoryId) {
            this.directoryId = Objects.requireNonNull(directoryId);
            return this;
        }

        public Builder directoryId(String directoryId) {
            this.directoryId = Output.of(Objects.requireNonNull(directoryId));
            return this;
        }

        public Builder ipGroupIds(@Nullable Output<List<String>> ipGroupIds) {
            this.ipGroupIds = ipGroupIds;
            return this;
        }

        public Builder ipGroupIds(@Nullable List<String> ipGroupIds) {
            this.ipGroupIds = Output.ofNullable(ipGroupIds);
            return this;
        }

        public Builder selfServicePermissions(@Nullable Output<DirectorySelfServicePermissionsArgs> selfServicePermissions) {
            this.selfServicePermissions = selfServicePermissions;
            return this;
        }

        public Builder selfServicePermissions(@Nullable DirectorySelfServicePermissionsArgs selfServicePermissions) {
            this.selfServicePermissions = Output.ofNullable(selfServicePermissions);
            return this;
        }

        public Builder subnetIds(@Nullable Output<List<String>> subnetIds) {
            this.subnetIds = subnetIds;
            return this;
        }

        public Builder subnetIds(@Nullable List<String> subnetIds) {
            this.subnetIds = Output.ofNullable(subnetIds);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder workspaceAccessProperties(@Nullable Output<DirectoryWorkspaceAccessPropertiesArgs> workspaceAccessProperties) {
            this.workspaceAccessProperties = workspaceAccessProperties;
            return this;
        }

        public Builder workspaceAccessProperties(@Nullable DirectoryWorkspaceAccessPropertiesArgs workspaceAccessProperties) {
            this.workspaceAccessProperties = Output.ofNullable(workspaceAccessProperties);
            return this;
        }

        public Builder workspaceCreationProperties(@Nullable Output<DirectoryWorkspaceCreationPropertiesArgs> workspaceCreationProperties) {
            this.workspaceCreationProperties = workspaceCreationProperties;
            return this;
        }

        public Builder workspaceCreationProperties(@Nullable DirectoryWorkspaceCreationPropertiesArgs workspaceCreationProperties) {
            this.workspaceCreationProperties = Output.ofNullable(workspaceCreationProperties);
            return this;
        }
        public DirectoryArgs build() {
            return new DirectoryArgs(directoryId, ipGroupIds, selfServicePermissions, subnetIds, tags, workspaceAccessProperties, workspaceCreationProperties);
        }
    }
}
