// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lightsail.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class KeyPairState extends io.pulumi.resources.ResourceArgs {

    public static final KeyPairState Empty = new KeyPairState();

    /**
     * The ARN of the Lightsail key pair
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The MD5 public key fingerprint for the encrypted
     * private key
     * 
     */
    @InputImport(name="encryptedFingerprint")
    private final @Nullable Input<String> encryptedFingerprint;

    public Input<String> getEncryptedFingerprint() {
        return this.encryptedFingerprint == null ? Input.empty() : this.encryptedFingerprint;
    }

    /**
     * the private key material, base 64 encoded and
     * encrypted with the given `pgp_key`. This is only populated when creating a new
     * key and `pgp_key` is supplied
     * 
     */
    @InputImport(name="encryptedPrivateKey")
    private final @Nullable Input<String> encryptedPrivateKey;

    public Input<String> getEncryptedPrivateKey() {
        return this.encryptedPrivateKey == null ? Input.empty() : this.encryptedPrivateKey;
    }

    /**
     * The MD5 public key fingerprint as specified in section 4 of RFC 4716.
     * 
     */
    @InputImport(name="fingerprint")
    private final @Nullable Input<String> fingerprint;

    public Input<String> getFingerprint() {
        return this.fingerprint == null ? Input.empty() : this.fingerprint;
    }

    /**
     * The name of the Lightsail Key Pair. If omitted, a unique
     * name will be generated by this provider
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="namePrefix")
    private final @Nullable Input<String> namePrefix;

    public Input<String> getNamePrefix() {
        return this.namePrefix == null ? Input.empty() : this.namePrefix;
    }

    /**
     * An optional PGP key to encrypt the resulting private
     * key material. Only used when creating a new key pair
     * 
     */
    @InputImport(name="pgpKey")
    private final @Nullable Input<String> pgpKey;

    public Input<String> getPgpKey() {
        return this.pgpKey == null ? Input.empty() : this.pgpKey;
    }

    /**
     * the private key, base64 encoded. This is only populated
     * when creating a new key, and when no `pgp_key` is provided
     * 
     */
    @InputImport(name="privateKey")
    private final @Nullable Input<String> privateKey;

    public Input<String> getPrivateKey() {
        return this.privateKey == null ? Input.empty() : this.privateKey;
    }

    /**
     * The public key material. This public key will be
     * imported into Lightsail
     * 
     */
    @InputImport(name="publicKey")
    private final @Nullable Input<String> publicKey;

    public Input<String> getPublicKey() {
        return this.publicKey == null ? Input.empty() : this.publicKey;
    }

    public KeyPairState(
        @Nullable Input<String> arn,
        @Nullable Input<String> encryptedFingerprint,
        @Nullable Input<String> encryptedPrivateKey,
        @Nullable Input<String> fingerprint,
        @Nullable Input<String> name,
        @Nullable Input<String> namePrefix,
        @Nullable Input<String> pgpKey,
        @Nullable Input<String> privateKey,
        @Nullable Input<String> publicKey) {
        this.arn = arn;
        this.encryptedFingerprint = encryptedFingerprint;
        this.encryptedPrivateKey = encryptedPrivateKey;
        this.fingerprint = fingerprint;
        this.name = name;
        this.namePrefix = namePrefix;
        this.pgpKey = pgpKey;
        this.privateKey = privateKey;
        this.publicKey = publicKey;
    }

    private KeyPairState() {
        this.arn = Input.empty();
        this.encryptedFingerprint = Input.empty();
        this.encryptedPrivateKey = Input.empty();
        this.fingerprint = Input.empty();
        this.name = Input.empty();
        this.namePrefix = Input.empty();
        this.pgpKey = Input.empty();
        this.privateKey = Input.empty();
        this.publicKey = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyPairState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> encryptedFingerprint;
        private @Nullable Input<String> encryptedPrivateKey;
        private @Nullable Input<String> fingerprint;
        private @Nullable Input<String> name;
        private @Nullable Input<String> namePrefix;
        private @Nullable Input<String> pgpKey;
        private @Nullable Input<String> privateKey;
        private @Nullable Input<String> publicKey;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyPairState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.encryptedFingerprint = defaults.encryptedFingerprint;
    	      this.encryptedPrivateKey = defaults.encryptedPrivateKey;
    	      this.fingerprint = defaults.fingerprint;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.pgpKey = defaults.pgpKey;
    	      this.privateKey = defaults.privateKey;
    	      this.publicKey = defaults.publicKey;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setEncryptedFingerprint(@Nullable Input<String> encryptedFingerprint) {
            this.encryptedFingerprint = encryptedFingerprint;
            return this;
        }

        public Builder setEncryptedFingerprint(@Nullable String encryptedFingerprint) {
            this.encryptedFingerprint = Input.ofNullable(encryptedFingerprint);
            return this;
        }

        public Builder setEncryptedPrivateKey(@Nullable Input<String> encryptedPrivateKey) {
            this.encryptedPrivateKey = encryptedPrivateKey;
            return this;
        }

        public Builder setEncryptedPrivateKey(@Nullable String encryptedPrivateKey) {
            this.encryptedPrivateKey = Input.ofNullable(encryptedPrivateKey);
            return this;
        }

        public Builder setFingerprint(@Nullable Input<String> fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }

        public Builder setFingerprint(@Nullable String fingerprint) {
            this.fingerprint = Input.ofNullable(fingerprint);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNamePrefix(@Nullable Input<String> namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }

        public Builder setNamePrefix(@Nullable String namePrefix) {
            this.namePrefix = Input.ofNullable(namePrefix);
            return this;
        }

        public Builder setPgpKey(@Nullable Input<String> pgpKey) {
            this.pgpKey = pgpKey;
            return this;
        }

        public Builder setPgpKey(@Nullable String pgpKey) {
            this.pgpKey = Input.ofNullable(pgpKey);
            return this;
        }

        public Builder setPrivateKey(@Nullable Input<String> privateKey) {
            this.privateKey = privateKey;
            return this;
        }

        public Builder setPrivateKey(@Nullable String privateKey) {
            this.privateKey = Input.ofNullable(privateKey);
            return this;
        }

        public Builder setPublicKey(@Nullable Input<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public Builder setPublicKey(@Nullable String publicKey) {
            this.publicKey = Input.ofNullable(publicKey);
            return this;
        }
        public KeyPairState build() {
            return new KeyPairState(arn, encryptedFingerprint, encryptedPrivateKey, fingerprint, name, namePrefix, pgpKey, privateKey, publicKey);
        }
    }
}
