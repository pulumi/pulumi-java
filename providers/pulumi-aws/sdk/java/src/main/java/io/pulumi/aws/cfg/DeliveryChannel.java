// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cfg;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.cfg.DeliveryChannelArgs;
import io.pulumi.aws.cfg.inputs.DeliveryChannelState;
import io.pulumi.aws.cfg.outputs.DeliveryChannelSnapshotDeliveryProperties;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides an AWS Config Delivery Channel.
 * 
 * > **Note:** Delivery Channel requires a `Configuration Recorder` to be present. Use of `depends_on` (as shown below) is recommended to avoid race conditions.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const bucket = new aws.s3.Bucket("bucket", {forceDestroy: true});
 * const role = new aws.iam.Role("role", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "config.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const fooRecorder = new aws.cfg.Recorder("fooRecorder", {roleArn: role.arn});
 * const fooDeliveryChannel = new aws.cfg.DeliveryChannel("fooDeliveryChannel", {s3BucketName: bucket.bucket}, {
 *     dependsOn: [fooRecorder],
 * });
 * const rolePolicy = new aws.iam.RolePolicy("rolePolicy", {
 *     role: role.id,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "s3:*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${bucket.arn}",
 *         "${bucket.arn}/*"
 *       ]
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * bucket = aws.s3.Bucket("bucket", force_destroy=True)
 * role = aws.iam.Role("role", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "config.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * """)
 * foo_recorder = aws.cfg.Recorder("fooRecorder", role_arn=role.arn)
 * foo_delivery_channel = aws.cfg.DeliveryChannel("fooDeliveryChannel", s3_bucket_name=bucket.bucket,
 * opts=pulumi.ResourceOptions(depends_on=[foo_recorder]))
 * role_policy = aws.iam.RolePolicy("rolePolicy",
 *     role=role.id,
 *     policy=pulumi.Output.all(bucket.arn, bucket.arn).apply(lambda bucketArn, bucketArn1: f"""{{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {{
 *       "Action": [
 *         "s3:*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "{bucket_arn}",
 *         "{bucket_arn1}/*"
 *       ]
 *     }}
 *   ]
 * }}
 * """))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bucket = new Aws.S3.Bucket("bucket", new Aws.S3.BucketArgs
 *         {
 *             ForceDestroy = true,
 *         });
 *         var role = new Aws.Iam.Role("role", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": ""sts:AssumeRole"",
 *       ""Principal"": {
 *         ""Service"": ""config.amazonaws.com""
 *       },
 *       ""Effect"": ""Allow"",
 *       ""Sid"": """"
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var fooRecorder = new Aws.Cfg.Recorder("fooRecorder", new Aws.Cfg.RecorderArgs
 *         {
 *             RoleArn = role.Arn,
 *         });
 *         var fooDeliveryChannel = new Aws.Cfg.DeliveryChannel("fooDeliveryChannel", new Aws.Cfg.DeliveryChannelArgs
 *         {
 *             S3BucketName = bucket.BucketName,
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 fooRecorder,
 *             },
 *         });
 *         var rolePolicy = new Aws.Iam.RolePolicy("rolePolicy", new Aws.Iam.RolePolicyArgs
 *         {
 *             Role = role.Id,
 *             Policy = Output.Tuple(bucket.Arn, bucket.Arn).Apply(values =>
 *             {
 *                 var bucketArn = values.Item1;
 *                 var bucketArn1 = values.Item2;
 *                 return @$"{{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {{
 *       ""Action"": [
 *         ""s3:*""
 *       ],
 *       ""Effect"": ""Allow"",
 *       ""Resource"": [
 *         ""{bucketArn}"",
 *         ""{bucketArn1}/*""
 *       ]
 *     }}
 *   ]
 * }}
 * ";
 *             }),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cfg"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		bucket, err := s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
 * 			ForceDestroy: pulumi.Bool(true),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		role, err := iam.NewRole(ctx, "role", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"config.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		fooRecorder, err := cfg.NewRecorder(ctx, "fooRecorder", &cfg.RecorderArgs{
 * 			RoleArn: role.Arn,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cfg.NewDeliveryChannel(ctx, "fooDeliveryChannel", &cfg.DeliveryChannelArgs{
 * 			S3BucketName: bucket.Bucket,
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			fooRecorder,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicy(ctx, "rolePolicy", &iam.RolePolicyArgs{
 * 			Role: role.ID(),
 * 			Policy: pulumi.All(bucket.Arn, bucket.Arn).ApplyT(func(_args []interface{}) (string, error) {
 * 				bucketArn := _args[0].(string)
 * 				bucketArn1 := _args[1].(string)
 * 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": [\n", "        \"s3:*\"\n", "      ],\n", "      \"Effect\": \"Allow\",\n", "      \"Resource\": [\n", "        \"", bucketArn, "\",\n", "        \"", bucketArn1, "/*\"\n", "      ]\n", "    }\n", "  ]\n", "}\n"), nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Delivery Channel can be imported using the name, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:cfg/deliveryChannel:DeliveryChannel foo example
 * ```
 * 
 *  
 */
@ResourceType(type="aws:cfg/deliveryChannel:DeliveryChannel")
public class DeliveryChannel extends io.pulumi.resources.CustomResource {
    /**
     * The name of the delivery channel. Defaults to `default`. Changing it recreates the resource.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the delivery channel. Defaults to `default`. Changing it recreates the resource.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The name of the S3 bucket used to store the configuration history.
     * 
     */
    @Export(name="s3BucketName", type=String.class, parameters={})
    private Output<String> s3BucketName;

    /**
     * @return The name of the S3 bucket used to store the configuration history.
     * 
     */
    public Output<String> getS3BucketName() {
        return this.s3BucketName;
    }
    /**
     * The prefix for the specified S3 bucket.
     * 
     */
    @Export(name="s3KeyPrefix", type=String.class, parameters={})
    private Output</* @Nullable */ String> s3KeyPrefix;

    /**
     * @return The prefix for the specified S3 bucket.
     * 
     */
    public Output</* @Nullable */ String> getS3KeyPrefix() {
        return this.s3KeyPrefix;
    }
    /**
     * The ARN of the AWS KMS key used to encrypt objects delivered by AWS Config. Must belong to the same Region as the destination S3 bucket.
     * 
     */
    @Export(name="s3KmsKeyArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> s3KmsKeyArn;

    /**
     * @return The ARN of the AWS KMS key used to encrypt objects delivered by AWS Config. Must belong to the same Region as the destination S3 bucket.
     * 
     */
    public Output</* @Nullable */ String> getS3KmsKeyArn() {
        return this.s3KmsKeyArn;
    }
    /**
     * Options for how AWS Config delivers configuration snapshots. See below
     * 
     */
    @Export(name="snapshotDeliveryProperties", type=DeliveryChannelSnapshotDeliveryProperties.class, parameters={})
    private Output</* @Nullable */ DeliveryChannelSnapshotDeliveryProperties> snapshotDeliveryProperties;

    /**
     * @return Options for how AWS Config delivers configuration snapshots. See below
     * 
     */
    public Output</* @Nullable */ DeliveryChannelSnapshotDeliveryProperties> getSnapshotDeliveryProperties() {
        return this.snapshotDeliveryProperties;
    }
    /**
     * The ARN of the SNS topic that AWS Config delivers notifications to.
     * 
     */
    @Export(name="snsTopicArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> snsTopicArn;

    /**
     * @return The ARN of the SNS topic that AWS Config delivers notifications to.
     * 
     */
    public Output</* @Nullable */ String> getSnsTopicArn() {
        return this.snsTopicArn;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DeliveryChannel(String name) {
        this(name, DeliveryChannelArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DeliveryChannel(String name, DeliveryChannelArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DeliveryChannel(String name, DeliveryChannelArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cfg/deliveryChannel:DeliveryChannel", name, args == null ? DeliveryChannelArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private DeliveryChannel(String name, Output<String> id, @Nullable DeliveryChannelState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cfg/deliveryChannel:DeliveryChannel", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DeliveryChannel get(String name, Output<String> id, @Nullable DeliveryChannelState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new DeliveryChannel(name, id, state, options);
    }
}
