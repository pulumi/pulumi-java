// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue.outputs;

import io.pulumi.aws.glue.outputs.TriggerPredicateCondition;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class TriggerPredicate {
    /**
     * A list of the conditions that determine when the trigger will fire. See Conditions.
     * 
     */
    private final List<TriggerPredicateCondition> conditions;
    /**
     * How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
     * 
     */
    private final @Nullable String logical;

    @OutputCustomType.Constructor({"conditions","logical"})
    private TriggerPredicate(
        List<TriggerPredicateCondition> conditions,
        @Nullable String logical) {
        this.conditions = Objects.requireNonNull(conditions);
        this.logical = logical;
    }

    /**
     * A list of the conditions that determine when the trigger will fire. See Conditions.
     * 
     */
    public List<TriggerPredicateCondition> getConditions() {
        return this.conditions;
    }
    /**
     * How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
     * 
     */
    public Optional<String> getLogical() {
        return Optional.ofNullable(this.logical);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerPredicate defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<TriggerPredicateCondition> conditions;
        private @Nullable String logical;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerPredicate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.logical = defaults.logical;
        }

        public Builder setConditions(List<TriggerPredicateCondition> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }

        public Builder setLogical(@Nullable String logical) {
            this.logical = logical;
            return this;
        }
        public TriggerPredicate build() {
            return new TriggerPredicate(conditions, logical);
        }
    }
}
