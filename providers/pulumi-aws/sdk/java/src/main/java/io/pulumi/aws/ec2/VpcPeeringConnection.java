// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.ec2.VpcPeeringConnectionArgs;
import io.pulumi.aws.ec2.inputs.VpcPeeringConnectionState;
import io.pulumi.aws.ec2.outputs.VpcPeeringConnectionAccepter;
import io.pulumi.aws.ec2.outputs.VpcPeeringConnectionRequester;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a resource to manage a VPC peering connection.
 * 
 * > **NOTE on VPC Peering Connections and VPC Peering Connection Options:** This provider provides
 * both a standalone VPC Peering Connection Options and a VPC Peering Connection
 * resource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering
 * connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.
 * Doing so will cause a conflict of options and will overwrite the options.
 * Using a VPC Peering Connection Options resource decouples management of the connection options from
 * management of the VPC Peering Connection and allows options to be set correctly in cross-account scenarios.
 * 
 * > **Note:** For cross-account (requester's AWS account differs from the accepter's AWS account) or inter-region
 * VPC Peering Connections use the `aws.ec2.VpcPeeringConnection` resource to manage the requester's side of the
 * connection and use the `aws.ec2.VpcPeeringConnectionAccepter` resource to manage the accepter's side of the connection.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const foo = new aws.ec2.VpcPeeringConnection("foo", {
 *     peerOwnerId: _var.peer_owner_id,
 *     peerVpcId: aws_vpc.bar.id,
 *     vpcId: aws_vpc.foo.id,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * foo = aws.ec2.VpcPeeringConnection("foo",
 *     peer_owner_id=var["peer_owner_id"],
 *     peer_vpc_id=aws_vpc["bar"]["id"],
 *     vpc_id=aws_vpc["foo"]["id"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var foo = new Aws.Ec2.VpcPeeringConnection("foo", new Aws.Ec2.VpcPeeringConnectionArgs
 *         {
 *             PeerOwnerId = @var.Peer_owner_id,
 *             PeerVpcId = aws_vpc.Bar.Id,
 *             VpcId = aws_vpc.Foo.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ec2.NewVpcPeeringConnection(ctx, "foo", &ec2.VpcPeeringConnectionArgs{
 * 			PeerOwnerId: pulumi.Any(_var.Peer_owner_id),
 * 			PeerVpcId:   pulumi.Any(aws_vpc.Bar.Id),
 * 			VpcId:       pulumi.Any(aws_vpc.Foo.Id),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * Basic usage with connection options:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const foo = new aws.ec2.VpcPeeringConnection("foo", {
 *     peerOwnerId: _var.peer_owner_id,
 *     peerVpcId: aws_vpc.bar.id,
 *     vpcId: aws_vpc.foo.id,
 *     accepter: {
 *         allowRemoteVpcDnsResolution: true,
 *     },
 *     requester: {
 *         allowRemoteVpcDnsResolution: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * foo = aws.ec2.VpcPeeringConnection("foo",
 *     peer_owner_id=var["peer_owner_id"],
 *     peer_vpc_id=aws_vpc["bar"]["id"],
 *     vpc_id=aws_vpc["foo"]["id"],
 *     accepter=aws.ec2.VpcPeeringConnectionAccepterArgs(
 *         allow_remote_vpc_dns_resolution=True,
 *     ),
 *     requester=aws.ec2.VpcPeeringConnectionRequesterArgs(
 *         allow_remote_vpc_dns_resolution=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var foo = new Aws.Ec2.VpcPeeringConnection("foo", new Aws.Ec2.VpcPeeringConnectionArgs
 *         {
 *             PeerOwnerId = @var.Peer_owner_id,
 *             PeerVpcId = aws_vpc.Bar.Id,
 *             VpcId = aws_vpc.Foo.Id,
 *             Accepter = new Aws.Ec2.Inputs.VpcPeeringConnectionAccepterArgs
 *             {
 *                 AllowRemoteVpcDnsResolution = true,
 *             },
 *             Requester = new Aws.Ec2.Inputs.VpcPeeringConnectionRequesterArgs
 *             {
 *                 AllowRemoteVpcDnsResolution = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ec2.NewVpcPeeringConnection(ctx, "foo", &ec2.VpcPeeringConnectionArgs{
 * 			PeerOwnerId: pulumi.Any(_var.Peer_owner_id),
 * 			PeerVpcId:   pulumi.Any(aws_vpc.Bar.Id),
 * 			VpcId:       pulumi.Any(aws_vpc.Foo.Id),
 * 			Accepter: &ec2.VpcPeeringConnectionAccepterArgs{
 * 				AllowRemoteVpcDnsResolution: pulumi.Bool(true),
 * 			},
 * 			Requester: &ec2.VpcPeeringConnectionRequesterArgs{
 * 				AllowRemoteVpcDnsResolution: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * Basic usage with tags:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const fooVpc = new aws.ec2.Vpc("fooVpc", {cidrBlock: "10.1.0.0/16"});
 * const bar = new aws.ec2.Vpc("bar", {cidrBlock: "10.2.0.0/16"});
 * const fooVpcPeeringConnection = new aws.ec2.VpcPeeringConnection("fooVpcPeeringConnection", {
 *     peerOwnerId: _var.peer_owner_id,
 *     peerVpcId: bar.id,
 *     vpcId: fooVpc.id,
 *     autoAccept: true,
 *     tags: {
 *         Name: "VPC Peering between foo and bar",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * foo_vpc = aws.ec2.Vpc("fooVpc", cidr_block="10.1.0.0/16")
 * bar = aws.ec2.Vpc("bar", cidr_block="10.2.0.0/16")
 * foo_vpc_peering_connection = aws.ec2.VpcPeeringConnection("fooVpcPeeringConnection",
 *     peer_owner_id=var["peer_owner_id"],
 *     peer_vpc_id=bar.id,
 *     vpc_id=foo_vpc.id,
 *     auto_accept=True,
 *     tags={
 *         "Name": "VPC Peering between foo and bar",
 *     })
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var fooVpc = new Aws.Ec2.Vpc("fooVpc", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "10.1.0.0/16",
 *         });
 *         var bar = new Aws.Ec2.Vpc("bar", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "10.2.0.0/16",
 *         });
 *         var fooVpcPeeringConnection = new Aws.Ec2.VpcPeeringConnection("fooVpcPeeringConnection", new Aws.Ec2.VpcPeeringConnectionArgs
 *         {
 *             PeerOwnerId = @var.Peer_owner_id,
 *             PeerVpcId = bar.Id,
 *             VpcId = fooVpc.Id,
 *             AutoAccept = true,
 *             Tags = 
 *             {
 *                 { "Name", "VPC Peering between foo and bar" },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		fooVpc, err := ec2.NewVpc(ctx, "fooVpc", &ec2.VpcArgs{
 * 			CidrBlock: pulumi.String("10.1.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		bar, err := ec2.NewVpc(ctx, "bar", &ec2.VpcArgs{
 * 			CidrBlock: pulumi.String("10.2.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = ec2.NewVpcPeeringConnection(ctx, "fooVpcPeeringConnection", &ec2.VpcPeeringConnectionArgs{
 * 			PeerOwnerId: pulumi.Any(_var.Peer_owner_id),
 * 			PeerVpcId:   bar.ID(),
 * 			VpcId:       fooVpc.ID(),
 * 			AutoAccept:  pulumi.Bool(true),
 * 			Tags: pulumi.StringMap{
 * 				"Name": pulumi.String("VPC Peering between foo and bar"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * Basic usage with region:
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const fooVpc = new aws.ec2.Vpc("fooVpc", {cidrBlock: "10.1.0.0/16"}, {
 *     provider: aws["us-west-2"],
 * });
 * const bar = new aws.ec2.Vpc("bar", {cidrBlock: "10.2.0.0/16"}, {
 *     provider: aws["us-east-1"],
 * });
 * const fooVpcPeeringConnection = new aws.ec2.VpcPeeringConnection("fooVpcPeeringConnection", {
 *     peerOwnerId: _var.peer_owner_id,
 *     peerVpcId: bar.id,
 *     vpcId: fooVpc.id,
 *     peerRegion: "us-east-1",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * foo_vpc = aws.ec2.Vpc("fooVpc", cidr_block="10.1.0.0/16",
 * opts=pulumi.ResourceOptions(provider=aws["us-west-2"]))
 * bar = aws.ec2.Vpc("bar", cidr_block="10.2.0.0/16",
 * opts=pulumi.ResourceOptions(provider=aws["us-east-1"]))
 * foo_vpc_peering_connection = aws.ec2.VpcPeeringConnection("fooVpcPeeringConnection",
 *     peer_owner_id=var["peer_owner_id"],
 *     peer_vpc_id=bar.id,
 *     vpc_id=foo_vpc.id,
 *     peer_region="us-east-1")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var fooVpc = new Aws.Ec2.Vpc("fooVpc", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "10.1.0.0/16",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Us_west_2,
 *         });
 *         var bar = new Aws.Ec2.Vpc("bar", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "10.2.0.0/16",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Us_east_1,
 *         });
 *         var fooVpcPeeringConnection = new Aws.Ec2.VpcPeeringConnection("fooVpcPeeringConnection", new Aws.Ec2.VpcPeeringConnectionArgs
 *         {
 *             PeerOwnerId = @var.Peer_owner_id,
 *             PeerVpcId = bar.Id,
 *             VpcId = fooVpc.Id,
 *             PeerRegion = "us-east-1",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		fooVpc, err := ec2.NewVpc(ctx, "fooVpc", &ec2.VpcArgs{
 * 			CidrBlock: pulumi.String("10.1.0.0/16"),
 * 		}, pulumi.Provider(aws.Us-west-2))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		bar, err := ec2.NewVpc(ctx, "bar", &ec2.VpcArgs{
 * 			CidrBlock: pulumi.String("10.2.0.0/16"),
 * 		}, pulumi.Provider(aws.Us-east-1))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = ec2.NewVpcPeeringConnection(ctx, "fooVpcPeeringConnection", &ec2.VpcPeeringConnectionArgs{
 * 			PeerOwnerId: pulumi.Any(_var.Peer_owner_id),
 * 			PeerVpcId:   bar.ID(),
 * 			VpcId:       fooVpc.ID(),
 * 			PeerRegion:  pulumi.String("us-east-1"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * ## Notes
 * 
 * If both VPCs are not in the same AWS account and region do not enable the `auto_accept` attribute.
 * The accepter can manage its side of the connection using the `aws.ec2.VpcPeeringConnectionAccepter` resource
 * or accept the connection manually using the AWS Management Console, AWS CLI, through SDKs, etc.
 * 
 * 
 * ## Import
 * 
 * VPC Peering resources can be imported using the `vpc peering id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:ec2/vpcPeeringConnection:VpcPeeringConnection test_connection pcx-111aaa111
 * ```
 * 
 *  [1]/docs/providers/aws/index.html 
 */
@ResourceType(type="aws:ec2/vpcPeeringConnection:VpcPeeringConnection")
public class VpcPeeringConnection extends io.pulumi.resources.CustomResource {
    /**
     * The status of the VPC Peering Connection request.
     * 
     */
    @Export(name="acceptStatus", type=String.class, parameters={})
    private Output<String> acceptStatus;

    /**
     * @return The status of the VPC Peering Connection request.
     * 
     */
    public Output<String> getAcceptStatus() {
        return this.acceptStatus;
    }
    /**
     * An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     * 
     */
    @Export(name="accepter", type=VpcPeeringConnectionAccepter.class, parameters={})
    private Output<VpcPeeringConnectionAccepter> accepter;

    /**
     * @return An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     * 
     */
    public Output<VpcPeeringConnectionAccepter> getAccepter() {
        return this.accepter;
    }
    /**
     * Accept the peering (both VPCs need to be in the same AWS account and region).
     * 
     */
    @Export(name="autoAccept", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> autoAccept;

    /**
     * @return Accept the peering (both VPCs need to be in the same AWS account and region).
     * 
     */
    public Output</* @Nullable */ Boolean> getAutoAccept() {
        return this.autoAccept;
    }
    /**
     * The AWS account ID of the owner of the peer VPC.
     * Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.
     * 
     */
    @Export(name="peerOwnerId", type=String.class, parameters={})
    private Output<String> peerOwnerId;

    /**
     * @return The AWS account ID of the owner of the peer VPC.
     * Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.
     * 
     */
    public Output<String> getPeerOwnerId() {
        return this.peerOwnerId;
    }
    /**
     * The region of the accepter VPC of the VPC Peering Connection. `auto_accept` must be `false`,
     * and use the `aws.ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
     * 
     */
    @Export(name="peerRegion", type=String.class, parameters={})
    private Output<String> peerRegion;

    /**
     * @return The region of the accepter VPC of the VPC Peering Connection. `auto_accept` must be `false`,
     * and use the `aws.ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
     * 
     */
    public Output<String> getPeerRegion() {
        return this.peerRegion;
    }
    /**
     * The ID of the VPC with which you are creating the VPC Peering Connection.
     * 
     */
    @Export(name="peerVpcId", type=String.class, parameters={})
    private Output<String> peerVpcId;

    /**
     * @return The ID of the VPC with which you are creating the VPC Peering Connection.
     * 
     */
    public Output<String> getPeerVpcId() {
        return this.peerVpcId;
    }
    /**
     * A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     * 
     */
    @Export(name="requester", type=VpcPeeringConnectionRequester.class, parameters={})
    private Output<VpcPeeringConnectionRequester> requester;

    /**
     * @return A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     * 
     */
    public Output<VpcPeeringConnectionRequester> getRequester() {
        return this.requester;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The ID of the requester VPC.
     * 
     */
    @Export(name="vpcId", type=String.class, parameters={})
    private Output<String> vpcId;

    /**
     * @return The ID of the requester VPC.
     * 
     */
    public Output<String> getVpcId() {
        return this.vpcId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VpcPeeringConnection(String name) {
        this(name, VpcPeeringConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VpcPeeringConnection(String name, VpcPeeringConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VpcPeeringConnection(String name, VpcPeeringConnectionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, args == null ? VpcPeeringConnectionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private VpcPeeringConnection(String name, Output<String> id, @Nullable VpcPeeringConnectionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ec2/vpcPeeringConnection:VpcPeeringConnection", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VpcPeeringConnection get(String name, Output<String> id, @Nullable VpcPeeringConnectionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new VpcPeeringConnection(name, id, state, options);
    }
}
