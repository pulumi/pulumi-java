// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.VpcPeeringConnectionAccepterAccepterGetArgs;
import io.pulumi.aws.ec2.inputs.VpcPeeringConnectionAccepterRequesterGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpcPeeringConnectionAccepterState extends io.pulumi.resources.ResourceArgs {

    public static final VpcPeeringConnectionAccepterState Empty = new VpcPeeringConnectionAccepterState();

    /**
     * The status of the VPC Peering Connection request.
     * 
     */
    @InputImport(name="acceptStatus")
      private final @Nullable Input<String> acceptStatus;

    public Input<String> getAcceptStatus() {
        return this.acceptStatus == null ? Input.empty() : this.acceptStatus;
    }

    /**
     * A configuration block that describes [VPC Peering Connection]
     * (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
     * 
     */
    @InputImport(name="accepter")
      private final @Nullable Input<VpcPeeringConnectionAccepterAccepterGetArgs> accepter;

    public Input<VpcPeeringConnectionAccepterAccepterGetArgs> getAccepter() {
        return this.accepter == null ? Input.empty() : this.accepter;
    }

    /**
     * Whether or not to accept the peering request. Defaults to `false`.
     * 
     */
    @InputImport(name="autoAccept")
      private final @Nullable Input<Boolean> autoAccept;

    public Input<Boolean> getAutoAccept() {
        return this.autoAccept == null ? Input.empty() : this.autoAccept;
    }

    /**
     * The AWS account ID of the owner of the requester VPC.
     * 
     */
    @InputImport(name="peerOwnerId")
      private final @Nullable Input<String> peerOwnerId;

    public Input<String> getPeerOwnerId() {
        return this.peerOwnerId == null ? Input.empty() : this.peerOwnerId;
    }

    /**
     * The region of the accepter VPC.
     * 
     */
    @InputImport(name="peerRegion")
      private final @Nullable Input<String> peerRegion;

    public Input<String> getPeerRegion() {
        return this.peerRegion == null ? Input.empty() : this.peerRegion;
    }

    /**
     * The ID of the requester VPC.
     * 
     */
    @InputImport(name="peerVpcId")
      private final @Nullable Input<String> peerVpcId;

    public Input<String> getPeerVpcId() {
        return this.peerVpcId == null ? Input.empty() : this.peerVpcId;
    }

    /**
     * A configuration block that describes [VPC Peering Connection]
     * (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
     * 
     */
    @InputImport(name="requester")
      private final @Nullable Input<VpcPeeringConnectionAccepterRequesterGetArgs> requester;

    public Input<VpcPeeringConnectionAccepterRequesterGetArgs> getRequester() {
        return this.requester == null ? Input.empty() : this.requester;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The ID of the accepter VPC.
     * 
     */
    @InputImport(name="vpcId")
      private final @Nullable Input<String> vpcId;

    public Input<String> getVpcId() {
        return this.vpcId == null ? Input.empty() : this.vpcId;
    }

    /**
     * The VPC Peering Connection ID to manage.
     * 
     */
    @InputImport(name="vpcPeeringConnectionId")
      private final @Nullable Input<String> vpcPeeringConnectionId;

    public Input<String> getVpcPeeringConnectionId() {
        return this.vpcPeeringConnectionId == null ? Input.empty() : this.vpcPeeringConnectionId;
    }

    public VpcPeeringConnectionAccepterState(
        @Nullable Input<String> acceptStatus,
        @Nullable Input<VpcPeeringConnectionAccepterAccepterGetArgs> accepter,
        @Nullable Input<Boolean> autoAccept,
        @Nullable Input<String> peerOwnerId,
        @Nullable Input<String> peerRegion,
        @Nullable Input<String> peerVpcId,
        @Nullable Input<VpcPeeringConnectionAccepterRequesterGetArgs> requester,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> vpcId,
        @Nullable Input<String> vpcPeeringConnectionId) {
        this.acceptStatus = acceptStatus;
        this.accepter = accepter;
        this.autoAccept = autoAccept;
        this.peerOwnerId = peerOwnerId;
        this.peerRegion = peerRegion;
        this.peerVpcId = peerVpcId;
        this.requester = requester;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcId = vpcId;
        this.vpcPeeringConnectionId = vpcPeeringConnectionId;
    }

    private VpcPeeringConnectionAccepterState() {
        this.acceptStatus = Input.empty();
        this.accepter = Input.empty();
        this.autoAccept = Input.empty();
        this.peerOwnerId = Input.empty();
        this.peerRegion = Input.empty();
        this.peerVpcId = Input.empty();
        this.requester = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.vpcId = Input.empty();
        this.vpcPeeringConnectionId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpcPeeringConnectionAccepterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> acceptStatus;
        private @Nullable Input<VpcPeeringConnectionAccepterAccepterGetArgs> accepter;
        private @Nullable Input<Boolean> autoAccept;
        private @Nullable Input<String> peerOwnerId;
        private @Nullable Input<String> peerRegion;
        private @Nullable Input<String> peerVpcId;
        private @Nullable Input<VpcPeeringConnectionAccepterRequesterGetArgs> requester;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> vpcId;
        private @Nullable Input<String> vpcPeeringConnectionId;

        public Builder() {
    	      // Empty
        }

        public Builder(VpcPeeringConnectionAccepterState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptStatus = defaults.acceptStatus;
    	      this.accepter = defaults.accepter;
    	      this.autoAccept = defaults.autoAccept;
    	      this.peerOwnerId = defaults.peerOwnerId;
    	      this.peerRegion = defaults.peerRegion;
    	      this.peerVpcId = defaults.peerVpcId;
    	      this.requester = defaults.requester;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcId = defaults.vpcId;
    	      this.vpcPeeringConnectionId = defaults.vpcPeeringConnectionId;
        }

        public Builder acceptStatus(@Nullable Input<String> acceptStatus) {
            this.acceptStatus = acceptStatus;
            return this;
        }

        public Builder acceptStatus(@Nullable String acceptStatus) {
            this.acceptStatus = Input.ofNullable(acceptStatus);
            return this;
        }

        public Builder accepter(@Nullable Input<VpcPeeringConnectionAccepterAccepterGetArgs> accepter) {
            this.accepter = accepter;
            return this;
        }

        public Builder accepter(@Nullable VpcPeeringConnectionAccepterAccepterGetArgs accepter) {
            this.accepter = Input.ofNullable(accepter);
            return this;
        }

        public Builder autoAccept(@Nullable Input<Boolean> autoAccept) {
            this.autoAccept = autoAccept;
            return this;
        }

        public Builder autoAccept(@Nullable Boolean autoAccept) {
            this.autoAccept = Input.ofNullable(autoAccept);
            return this;
        }

        public Builder peerOwnerId(@Nullable Input<String> peerOwnerId) {
            this.peerOwnerId = peerOwnerId;
            return this;
        }

        public Builder peerOwnerId(@Nullable String peerOwnerId) {
            this.peerOwnerId = Input.ofNullable(peerOwnerId);
            return this;
        }

        public Builder peerRegion(@Nullable Input<String> peerRegion) {
            this.peerRegion = peerRegion;
            return this;
        }

        public Builder peerRegion(@Nullable String peerRegion) {
            this.peerRegion = Input.ofNullable(peerRegion);
            return this;
        }

        public Builder peerVpcId(@Nullable Input<String> peerVpcId) {
            this.peerVpcId = peerVpcId;
            return this;
        }

        public Builder peerVpcId(@Nullable String peerVpcId) {
            this.peerVpcId = Input.ofNullable(peerVpcId);
            return this;
        }

        public Builder requester(@Nullable Input<VpcPeeringConnectionAccepterRequesterGetArgs> requester) {
            this.requester = requester;
            return this;
        }

        public Builder requester(@Nullable VpcPeeringConnectionAccepterRequesterGetArgs requester) {
            this.requester = Input.ofNullable(requester);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder vpcId(@Nullable Input<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }

        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = Input.ofNullable(vpcId);
            return this;
        }

        public Builder vpcPeeringConnectionId(@Nullable Input<String> vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = vpcPeeringConnectionId;
            return this;
        }

        public Builder vpcPeeringConnectionId(@Nullable String vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = Input.ofNullable(vpcPeeringConnectionId);
            return this;
        }
        public VpcPeeringConnectionAccepterState build() {
            return new VpcPeeringConnectionAccepterState(acceptStatus, accepter, autoAccept, peerOwnerId, peerRegion, peerVpcId, requester, tags, tagsAll, vpcId, vpcPeeringConnectionId);
        }
    }
}
