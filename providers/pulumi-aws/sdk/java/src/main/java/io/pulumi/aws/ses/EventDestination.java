// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ses;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.ses.EventDestinationArgs;
import io.pulumi.aws.ses.inputs.EventDestinationState;
import io.pulumi.aws.ses.outputs.EventDestinationCloudwatchDestination;
import io.pulumi.aws.ses.outputs.EventDestinationKinesisDestination;
import io.pulumi.aws.ses.outputs.EventDestinationSnsDestination;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Provides an SES event destination
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### CloudWatch Destination
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const cloudwatch = new aws.ses.EventDestination("cloudwatch", {
 *     configurationSetName: aws_ses_configuration_set.example.name,
 *     enabled: true,
 *     matchingTypes: [
 *         "bounce",
 *         "send",
 *     ],
 *     cloudwatchDestinations: [{
 *         defaultValue: "default",
 *         dimensionName: "dimension",
 *         valueSource: "emailHeader",
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * cloudwatch = aws.ses.EventDestination("cloudwatch",
 *     configuration_set_name=aws_ses_configuration_set["example"]["name"],
 *     enabled=True,
 *     matching_types=[
 *         "bounce",
 *         "send",
 *     ],
 *     cloudwatch_destinations=[aws.ses.EventDestinationCloudwatchDestinationArgs(
 *         default_value="default",
 *         dimension_name="dimension",
 *         value_source="emailHeader",
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var cloudwatch = new Aws.Ses.EventDestination("cloudwatch", new Aws.Ses.EventDestinationArgs
 *         {
 *             ConfigurationSetName = aws_ses_configuration_set.Example.Name,
 *             Enabled = true,
 *             MatchingTypes = 
 *             {
 *                 "bounce",
 *                 "send",
 *             },
 *             CloudwatchDestinations = 
 *             {
 *                 new Aws.Ses.Inputs.EventDestinationCloudwatchDestinationArgs
 *                 {
 *                     DefaultValue = "default",
 *                     DimensionName = "dimension",
 *                     ValueSource = "emailHeader",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ses"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ses.NewEventDestination(ctx, "cloudwatch", &ses.EventDestinationArgs{
 * 			ConfigurationSetName: pulumi.Any(aws_ses_configuration_set.Example.Name),
 * 			Enabled:              pulumi.Bool(true),
 * 			MatchingTypes: pulumi.StringArray{
 * 				pulumi.String("bounce"),
 * 				pulumi.String("send"),
 * 			},
 * 			CloudwatchDestinations: ses.EventDestinationCloudwatchDestinationArray{
 * 				&ses.EventDestinationCloudwatchDestinationArgs{
 * 					DefaultValue:  pulumi.String("default"),
 * 					DimensionName: pulumi.String("dimension"),
 * 					ValueSource:   pulumi.String("emailHeader"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Kinesis Destination
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const kinesis = new aws.ses.EventDestination("kinesis", {
 *     configurationSetName: aws_ses_configuration_set.example.name,
 *     enabled: true,
 *     matchingTypes: [
 *         "bounce",
 *         "send",
 *     ],
 *     kinesisDestination: {
 *         streamArn: aws_kinesis_firehose_delivery_stream.example.arn,
 *         roleArn: aws_iam_role.example.arn,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * kinesis = aws.ses.EventDestination("kinesis",
 *     configuration_set_name=aws_ses_configuration_set["example"]["name"],
 *     enabled=True,
 *     matching_types=[
 *         "bounce",
 *         "send",
 *     ],
 *     kinesis_destination=aws.ses.EventDestinationKinesisDestinationArgs(
 *         stream_arn=aws_kinesis_firehose_delivery_stream["example"]["arn"],
 *         role_arn=aws_iam_role["example"]["arn"],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var kinesis = new Aws.Ses.EventDestination("kinesis", new Aws.Ses.EventDestinationArgs
 *         {
 *             ConfigurationSetName = aws_ses_configuration_set.Example.Name,
 *             Enabled = true,
 *             MatchingTypes = 
 *             {
 *                 "bounce",
 *                 "send",
 *             },
 *             KinesisDestination = new Aws.Ses.Inputs.EventDestinationKinesisDestinationArgs
 *             {
 *                 StreamArn = aws_kinesis_firehose_delivery_stream.Example.Arn,
 *                 RoleArn = aws_iam_role.Example.Arn,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ses"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ses.NewEventDestination(ctx, "kinesis", &ses.EventDestinationArgs{
 * 			ConfigurationSetName: pulumi.Any(aws_ses_configuration_set.Example.Name),
 * 			Enabled:              pulumi.Bool(true),
 * 			MatchingTypes: pulumi.StringArray{
 * 				pulumi.String("bounce"),
 * 				pulumi.String("send"),
 * 			},
 * 			KinesisDestination: &ses.EventDestinationKinesisDestinationArgs{
 * 				StreamArn: pulumi.Any(aws_kinesis_firehose_delivery_stream.Example.Arn),
 * 				RoleArn:   pulumi.Any(aws_iam_role.Example.Arn),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### SNS Destination
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const sns = new aws.ses.EventDestination("sns", {
 *     configurationSetName: aws_ses_configuration_set.example.name,
 *     enabled: true,
 *     matchingTypes: [
 *         "bounce",
 *         "send",
 *     ],
 *     snsDestination: {
 *         topicArn: aws_sns_topic.example.arn,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * sns = aws.ses.EventDestination("sns",
 *     configuration_set_name=aws_ses_configuration_set["example"]["name"],
 *     enabled=True,
 *     matching_types=[
 *         "bounce",
 *         "send",
 *     ],
 *     sns_destination=aws.ses.EventDestinationSnsDestinationArgs(
 *         topic_arn=aws_sns_topic["example"]["arn"],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var sns = new Aws.Ses.EventDestination("sns", new Aws.Ses.EventDestinationArgs
 *         {
 *             ConfigurationSetName = aws_ses_configuration_set.Example.Name,
 *             Enabled = true,
 *             MatchingTypes = 
 *             {
 *                 "bounce",
 *                 "send",
 *             },
 *             SnsDestination = new Aws.Ses.Inputs.EventDestinationSnsDestinationArgs
 *             {
 *                 TopicArn = aws_sns_topic.Example.Arn,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ses"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ses.NewEventDestination(ctx, "sns", &ses.EventDestinationArgs{
 * 			ConfigurationSetName: pulumi.Any(aws_ses_configuration_set.Example.Name),
 * 			Enabled:              pulumi.Bool(true),
 * 			MatchingTypes: pulumi.StringArray{
 * 				pulumi.String("bounce"),
 * 				pulumi.String("send"),
 * 			},
 * 			SnsDestination: &ses.EventDestinationSnsDestinationArgs{
 * 				TopicArn: pulumi.Any(aws_sns_topic.Example.Arn),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * SES event destinations can be imported using `configuration_set_name` together with the event destination's `name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:ses/eventDestination:EventDestination sns some-configuration-set-test/event-destination-sns
 * ```
 * 
 *  
 */
@ResourceType(type="aws:ses/eventDestination:EventDestination")
public class EventDestination extends io.pulumi.resources.CustomResource {
    /**
     * The SES event destination ARN.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The SES event destination ARN.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * CloudWatch destination for the events
     * 
     */
    @Export(name="cloudwatchDestinations", type=List.class, parameters={EventDestinationCloudwatchDestination.class})
    private Output</* @Nullable */ List<EventDestinationCloudwatchDestination>> cloudwatchDestinations;

    /**
     * @return CloudWatch destination for the events
     * 
     */
    public Output</* @Nullable */ List<EventDestinationCloudwatchDestination>> getCloudwatchDestinations() {
        return this.cloudwatchDestinations;
    }
    /**
     * The name of the configuration set
     * 
     */
    @Export(name="configurationSetName", type=String.class, parameters={})
    private Output<String> configurationSetName;

    /**
     * @return The name of the configuration set
     * 
     */
    public Output<String> getConfigurationSetName() {
        return this.configurationSetName;
    }
    /**
     * If true, the event destination will be enabled
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return If true, the event destination will be enabled
     * 
     */
    public Output</* @Nullable */ Boolean> getEnabled() {
        return this.enabled;
    }
    /**
     * Send the events to a kinesis firehose destination
     * 
     */
    @Export(name="kinesisDestination", type=EventDestinationKinesisDestination.class, parameters={})
    private Output</* @Nullable */ EventDestinationKinesisDestination> kinesisDestination;

    /**
     * @return Send the events to a kinesis firehose destination
     * 
     */
    public Output</* @Nullable */ EventDestinationKinesisDestination> getKinesisDestination() {
        return this.kinesisDestination;
    }
    /**
     * A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
     * 
     */
    @Export(name="matchingTypes", type=List.class, parameters={String.class})
    private Output<List<String>> matchingTypes;

    /**
     * @return A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
     * 
     */
    public Output<List<String>> getMatchingTypes() {
        return this.matchingTypes;
    }
    /**
     * The name of the event destination
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the event destination
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Send the events to an SNS Topic destination
     * 
     */
    @Export(name="snsDestination", type=EventDestinationSnsDestination.class, parameters={})
    private Output</* @Nullable */ EventDestinationSnsDestination> snsDestination;

    /**
     * @return Send the events to an SNS Topic destination
     * 
     */
    public Output</* @Nullable */ EventDestinationSnsDestination> getSnsDestination() {
        return this.snsDestination;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventDestination(String name) {
        this(name, EventDestinationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventDestination(String name, EventDestinationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventDestination(String name, EventDestinationArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ses/eventDestination:EventDestination", name, args == null ? EventDestinationArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private EventDestination(String name, Output<String> id, @Nullable EventDestinationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ses/eventDestination:EventDestination", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventDestination get(String name, Output<String> id, @Nullable EventDestinationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new EventDestination(name, id, state, options);
    }
}
