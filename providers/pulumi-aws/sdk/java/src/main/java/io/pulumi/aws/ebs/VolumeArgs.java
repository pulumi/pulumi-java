// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ebs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VolumeArgs extends io.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * The AZ where the EBS volume will exist.
     * 
     */
    @Import(name="availabilityZone", required=true)
      private final Output<String> availabilityZone;

    public Output<String> getAvailabilityZone() {
        return this.availabilityZone;
    }

    /**
     * If true, the disk will be encrypted.
     * 
     */
    @Import(name="encrypted")
      private final @Nullable Output<Boolean> encrypted;

    public Output<Boolean> getEncrypted() {
        return this.encrypted == null ? Output.empty() : this.encrypted;
    }

    /**
     * The amount of IOPS to provision for the disk. Only valid for `type` of `io1`, `io2` or `gp3`.
     * 
     */
    @Import(name="iops")
      private final @Nullable Output<Integer> iops;

    public Output<Integer> getIops() {
        return this.iops == null ? Output.empty() : this.iops;
    }

    @Import(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Output.empty() : this.kmsKeyId;
    }

    /**
     * Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported exclusively on `io1` volumes.
     * 
     */
    @Import(name="multiAttachEnabled")
      private final @Nullable Output<Boolean> multiAttachEnabled;

    public Output<Boolean> getMultiAttachEnabled() {
        return this.multiAttachEnabled == null ? Output.empty() : this.multiAttachEnabled;
    }

    /**
     * The Amazon Resource Name (ARN) of the Outpost.
     * 
     */
    @Import(name="outpostArn")
      private final @Nullable Output<String> outpostArn;

    public Output<String> getOutpostArn() {
        return this.outpostArn == null ? Output.empty() : this.outpostArn;
    }

    /**
     * The size of the drive in GiBs.
     * 
     */
    @Import(name="size")
      private final @Nullable Output<Integer> size;

    public Output<Integer> getSize() {
        return this.size == null ? Output.empty() : this.size;
    }

    /**
     * A snapshot to base the EBS volume off of.
     * 
     */
    @Import(name="snapshotId")
      private final @Nullable Output<String> snapshotId;

    public Output<String> getSnapshotId() {
        return this.snapshotId == null ? Output.empty() : this.snapshotId;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The throughput that the volume supports, in MiB/s. Only valid for `type` of `gp3`.
     * 
     */
    @Import(name="throughput")
      private final @Nullable Output<Integer> throughput;

    public Output<Integer> getThroughput() {
        return this.throughput == null ? Output.empty() : this.throughput;
    }

    /**
     * The type of EBS volume. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public VolumeArgs(
        Output<String> availabilityZone,
        @Nullable Output<Boolean> encrypted,
        @Nullable Output<Integer> iops,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<Boolean> multiAttachEnabled,
        @Nullable Output<String> outpostArn,
        @Nullable Output<Integer> size,
        @Nullable Output<String> snapshotId,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Integer> throughput,
        @Nullable Output<String> type) {
        this.availabilityZone = Objects.requireNonNull(availabilityZone, "expected parameter 'availabilityZone' to be non-null");
        this.encrypted = encrypted;
        this.iops = iops;
        this.kmsKeyId = kmsKeyId;
        this.multiAttachEnabled = multiAttachEnabled;
        this.outpostArn = outpostArn;
        this.size = size;
        this.snapshotId = snapshotId;
        this.tags = tags;
        this.throughput = throughput;
        this.type = type;
    }

    private VolumeArgs() {
        this.availabilityZone = Output.empty();
        this.encrypted = Output.empty();
        this.iops = Output.empty();
        this.kmsKeyId = Output.empty();
        this.multiAttachEnabled = Output.empty();
        this.outpostArn = Output.empty();
        this.size = Output.empty();
        this.snapshotId = Output.empty();
        this.tags = Output.empty();
        this.throughput = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> availabilityZone;
        private @Nullable Output<Boolean> encrypted;
        private @Nullable Output<Integer> iops;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<Boolean> multiAttachEnabled;
        private @Nullable Output<String> outpostArn;
        private @Nullable Output<Integer> size;
        private @Nullable Output<String> snapshotId;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Integer> throughput;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(VolumeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.encrypted = defaults.encrypted;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.multiAttachEnabled = defaults.multiAttachEnabled;
    	      this.outpostArn = defaults.outpostArn;
    	      this.size = defaults.size;
    	      this.snapshotId = defaults.snapshotId;
    	      this.tags = defaults.tags;
    	      this.throughput = defaults.throughput;
    	      this.type = defaults.type;
        }

        public Builder availabilityZone(Output<String> availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }

        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Output.of(Objects.requireNonNull(availabilityZone));
            return this;
        }

        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            this.encrypted = encrypted;
            return this;
        }

        public Builder encrypted(@Nullable Boolean encrypted) {
            this.encrypted = Output.ofNullable(encrypted);
            return this;
        }

        public Builder iops(@Nullable Output<Integer> iops) {
            this.iops = iops;
            return this;
        }

        public Builder iops(@Nullable Integer iops) {
            this.iops = Output.ofNullable(iops);
            return this;
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Output.ofNullable(kmsKeyId);
            return this;
        }

        public Builder multiAttachEnabled(@Nullable Output<Boolean> multiAttachEnabled) {
            this.multiAttachEnabled = multiAttachEnabled;
            return this;
        }

        public Builder multiAttachEnabled(@Nullable Boolean multiAttachEnabled) {
            this.multiAttachEnabled = Output.ofNullable(multiAttachEnabled);
            return this;
        }

        public Builder outpostArn(@Nullable Output<String> outpostArn) {
            this.outpostArn = outpostArn;
            return this;
        }

        public Builder outpostArn(@Nullable String outpostArn) {
            this.outpostArn = Output.ofNullable(outpostArn);
            return this;
        }

        public Builder size(@Nullable Output<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder size(@Nullable Integer size) {
            this.size = Output.ofNullable(size);
            return this;
        }

        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }

        public Builder snapshotId(@Nullable String snapshotId) {
            this.snapshotId = Output.ofNullable(snapshotId);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder throughput(@Nullable Output<Integer> throughput) {
            this.throughput = throughput;
            return this;
        }

        public Builder throughput(@Nullable Integer throughput) {
            this.throughput = Output.ofNullable(throughput);
            return this;
        }

        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }
        public VolumeArgs build() {
            return new VolumeArgs(availabilityZone, encrypted, iops, kmsKeyId, multiAttachEnabled, outpostArn, size, snapshotId, tags, throughput, type);
        }
    }
}
