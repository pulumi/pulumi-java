// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.outputs;

import io.pulumi.aws.ec2.outputs.GetInstanceTypeOfferingsFilter;
import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceTypeOfferingsResult {
    private final @Nullable List<GetInstanceTypeOfferingsFilter> filters;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * List of EC2 Instance Types.
     * 
     */
    private final List<String> instanceTypes;
    private final @Nullable String locationType;
    /**
     * List of location types.
     * 
     */
    private final List<String> locationTypes;
    /**
     * List of locations.
     * 
     */
    private final List<String> locations;

    @CustomType.Constructor
    private GetInstanceTypeOfferingsResult(
        @CustomType.Parameter("filters") @Nullable List<GetInstanceTypeOfferingsFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceTypes") List<String> instanceTypes,
        @CustomType.Parameter("locationType") @Nullable String locationType,
        @CustomType.Parameter("locationTypes") List<String> locationTypes,
        @CustomType.Parameter("locations") List<String> locations) {
        this.filters = filters;
        this.id = id;
        this.instanceTypes = instanceTypes;
        this.locationType = locationType;
        this.locationTypes = locationTypes;
        this.locations = locations;
    }

    public List<GetInstanceTypeOfferingsFilter> getFilters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * List of EC2 Instance Types.
     * 
    */
    public List<String> getInstanceTypes() {
        return this.instanceTypes;
    }
    public Optional<String> getLocationType() {
        return Optional.ofNullable(this.locationType);
    }
    /**
     * List of location types.
     * 
    */
    public List<String> getLocationTypes() {
        return this.locationTypes;
    }
    /**
     * List of locations.
     * 
    */
    public List<String> getLocations() {
        return this.locations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceTypeOfferingsResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<GetInstanceTypeOfferingsFilter> filters;
        private String id;
        private List<String> instanceTypes;
        private @Nullable String locationType;
        private List<String> locationTypes;
        private List<String> locations;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceTypeOfferingsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.instanceTypes = defaults.instanceTypes;
    	      this.locationType = defaults.locationType;
    	      this.locationTypes = defaults.locationTypes;
    	      this.locations = defaults.locations;
        }

        public Builder filters(@Nullable List<GetInstanceTypeOfferingsFilter> filters) {
            this.filters = filters;
            return this;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder instanceTypes(List<String> instanceTypes) {
            this.instanceTypes = Objects.requireNonNull(instanceTypes);
            return this;
        }

        public Builder locationType(@Nullable String locationType) {
            this.locationType = locationType;
            return this;
        }

        public Builder locationTypes(List<String> locationTypes) {
            this.locationTypes = Objects.requireNonNull(locationTypes);
            return this;
        }

        public Builder locations(List<String> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }
        public GetInstanceTypeOfferingsResult build() {
            return new GetInstanceTypeOfferingsResult(filters, id, instanceTypes, locationType, locationTypes, locations);
        }
    }
}
