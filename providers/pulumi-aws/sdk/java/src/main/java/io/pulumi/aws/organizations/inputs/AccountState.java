// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.organizations.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccountState extends io.pulumi.resources.ResourceArgs {

    public static final AccountState Empty = new AccountState();

    /**
     * The ARN for this account.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
     * 
     */
    @InputImport(name="email")
    private final @Nullable Input<String> email;

    public Input<String> getEmail() {
        return this.email == null ? Input.empty() : this.email;
    }

    /**
     * If set to `ALLOW`, the new account enables IAM users to access account billing information if they have the required permissions. If set to `DENY`, then only the root user of the new account can access account billing information.
     * 
     */
    @InputImport(name="iamUserAccessToBilling")
    private final @Nullable Input<String> iamUserAccessToBilling;

    public Input<String> getIamUserAccessToBilling() {
        return this.iamUserAccessToBilling == null ? Input.empty() : this.iamUserAccessToBilling;
    }

    @InputImport(name="joinedMethod")
    private final @Nullable Input<String> joinedMethod;

    public Input<String> getJoinedMethod() {
        return this.joinedMethod == null ? Input.empty() : this.joinedMethod;
    }

    @InputImport(name="joinedTimestamp")
    private final @Nullable Input<String> joinedTimestamp;

    public Input<String> getJoinedTimestamp() {
        return this.joinedTimestamp == null ? Input.empty() : this.joinedTimestamp;
    }

    /**
     * A friendly name for the member account.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Parent Organizational Unit ID or Root ID for the account. Defaults to the Organization default Root ID. A configuration must be present for this argument to perform drift detection.
     * 
     */
    @InputImport(name="parentId")
    private final @Nullable Input<String> parentId;

    public Input<String> getParentId() {
        return this.parentId == null ? Input.empty() : this.parentId;
    }

    /**
     * The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the master account, allowing users in the master account to assume the role, as permitted by the master account administrator. The role has administrator permissions in the new member account. The Organizations API provides no method for reading this information after account creation, so this provider cannot perform drift detection on its value and will always show a difference for a configured value after import unless [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) is used.
     * 
     */
    @InputImport(name="roleName")
    private final @Nullable Input<String> roleName;

    public Input<String> getRoleName() {
        return this.roleName == null ? Input.empty() : this.roleName;
    }

    @InputImport(name="status")
    private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * Key-value mapping of resource tags.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public AccountState(
        @Nullable Input<String> arn,
        @Nullable Input<String> email,
        @Nullable Input<String> iamUserAccessToBilling,
        @Nullable Input<String> joinedMethod,
        @Nullable Input<String> joinedTimestamp,
        @Nullable Input<String> name,
        @Nullable Input<String> parentId,
        @Nullable Input<String> roleName,
        @Nullable Input<String> status,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.email = email;
        this.iamUserAccessToBilling = iamUserAccessToBilling;
        this.joinedMethod = joinedMethod;
        this.joinedTimestamp = joinedTimestamp;
        this.name = name;
        this.parentId = parentId;
        this.roleName = roleName;
        this.status = status;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private AccountState() {
        this.arn = Input.empty();
        this.email = Input.empty();
        this.iamUserAccessToBilling = Input.empty();
        this.joinedMethod = Input.empty();
        this.joinedTimestamp = Input.empty();
        this.name = Input.empty();
        this.parentId = Input.empty();
        this.roleName = Input.empty();
        this.status = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> email;
        private @Nullable Input<String> iamUserAccessToBilling;
        private @Nullable Input<String> joinedMethod;
        private @Nullable Input<String> joinedTimestamp;
        private @Nullable Input<String> name;
        private @Nullable Input<String> parentId;
        private @Nullable Input<String> roleName;
        private @Nullable Input<String> status;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(AccountState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.email = defaults.email;
    	      this.iamUserAccessToBilling = defaults.iamUserAccessToBilling;
    	      this.joinedMethod = defaults.joinedMethod;
    	      this.joinedTimestamp = defaults.joinedTimestamp;
    	      this.name = defaults.name;
    	      this.parentId = defaults.parentId;
    	      this.roleName = defaults.roleName;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setEmail(@Nullable Input<String> email) {
            this.email = email;
            return this;
        }

        public Builder setEmail(@Nullable String email) {
            this.email = Input.ofNullable(email);
            return this;
        }

        public Builder setIamUserAccessToBilling(@Nullable Input<String> iamUserAccessToBilling) {
            this.iamUserAccessToBilling = iamUserAccessToBilling;
            return this;
        }

        public Builder setIamUserAccessToBilling(@Nullable String iamUserAccessToBilling) {
            this.iamUserAccessToBilling = Input.ofNullable(iamUserAccessToBilling);
            return this;
        }

        public Builder setJoinedMethod(@Nullable Input<String> joinedMethod) {
            this.joinedMethod = joinedMethod;
            return this;
        }

        public Builder setJoinedMethod(@Nullable String joinedMethod) {
            this.joinedMethod = Input.ofNullable(joinedMethod);
            return this;
        }

        public Builder setJoinedTimestamp(@Nullable Input<String> joinedTimestamp) {
            this.joinedTimestamp = joinedTimestamp;
            return this;
        }

        public Builder setJoinedTimestamp(@Nullable String joinedTimestamp) {
            this.joinedTimestamp = Input.ofNullable(joinedTimestamp);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setParentId(@Nullable Input<String> parentId) {
            this.parentId = parentId;
            return this;
        }

        public Builder setParentId(@Nullable String parentId) {
            this.parentId = Input.ofNullable(parentId);
            return this;
        }

        public Builder setRoleName(@Nullable Input<String> roleName) {
            this.roleName = roleName;
            return this;
        }

        public Builder setRoleName(@Nullable String roleName) {
            this.roleName = Input.ofNullable(roleName);
            return this;
        }

        public Builder setStatus(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public AccountState build() {
            return new AccountState(arn, email, iamUserAccessToBilling, joinedMethod, joinedTimestamp, name, parentId, roleName, status, tags, tagsAll);
        }
    }
}
