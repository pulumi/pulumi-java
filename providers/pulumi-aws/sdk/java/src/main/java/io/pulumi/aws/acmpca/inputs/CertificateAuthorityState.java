// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.acmpca.inputs;

import io.pulumi.aws.acmpca.inputs.CertificateAuthorityCertificateAuthorityConfigurationGetArgs;
import io.pulumi.aws.acmpca.inputs.CertificateAuthorityRevocationConfigurationGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateAuthorityState extends io.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityState Empty = new CertificateAuthorityState();

    /**
     * Amazon Resource Name (ARN) of the certificate authority.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
     * 
     */
    @Import(name="certificate")
      private final @Nullable Output<String> certificate;

    public Output<String> getCertificate() {
        return this.certificate == null ? Output.empty() : this.certificate;
    }

    /**
     * Nested argument containing algorithms and certificate subject information. Defined below.
     * 
     */
    @Import(name="certificateAuthorityConfiguration")
      private final @Nullable Output<CertificateAuthorityCertificateAuthorityConfigurationGetArgs> certificateAuthorityConfiguration;

    public Output<CertificateAuthorityCertificateAuthorityConfigurationGetArgs> getCertificateAuthorityConfiguration() {
        return this.certificateAuthorityConfiguration == null ? Output.empty() : this.certificateAuthorityConfiguration;
    }

    /**
     * Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
     * 
     */
    @Import(name="certificateChain")
      private final @Nullable Output<String> certificateChain;

    public Output<String> getCertificateChain() {
        return this.certificateChain == null ? Output.empty() : this.certificateChain;
    }

    /**
     * The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
     * 
     */
    @Import(name="certificateSigningRequest")
      private final @Nullable Output<String> certificateSigningRequest;

    public Output<String> getCertificateSigningRequest() {
        return this.certificateSigningRequest == null ? Output.empty() : this.certificateSigningRequest;
    }

    /**
     * Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
     * 
     */
    @Import(name="notAfter")
      private final @Nullable Output<String> notAfter;

    public Output<String> getNotAfter() {
        return this.notAfter == null ? Output.empty() : this.notAfter;
    }

    /**
     * Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
     * 
     */
    @Import(name="notBefore")
      private final @Nullable Output<String> notBefore;

    public Output<String> getNotBefore() {
        return this.notBefore == null ? Output.empty() : this.notBefore;
    }

    /**
     * The number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
     * 
     */
    @Import(name="permanentDeletionTimeInDays")
      private final @Nullable Output<Integer> permanentDeletionTimeInDays;

    public Output<Integer> getPermanentDeletionTimeInDays() {
        return this.permanentDeletionTimeInDays == null ? Output.empty() : this.permanentDeletionTimeInDays;
    }

    /**
     * Nested argument containing revocation configuration. Defined below.
     * 
     */
    @Import(name="revocationConfiguration")
      private final @Nullable Output<CertificateAuthorityRevocationConfigurationGetArgs> revocationConfiguration;

    public Output<CertificateAuthorityRevocationConfigurationGetArgs> getRevocationConfiguration() {
        return this.revocationConfiguration == null ? Output.empty() : this.revocationConfiguration;
    }

    /**
     * Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
     * 
     */
    @Import(name="serial")
      private final @Nullable Output<String> serial;

    public Output<String> getSerial() {
        return this.serial == null ? Output.empty() : this.serial;
    }

    /**
     * Status of the certificate authority.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * Specifies a key-value map of user-defined tags that are attached to the certificate authority. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * The type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public CertificateAuthorityState(
        @Nullable Output<String> arn,
        @Nullable Output<String> certificate,
        @Nullable Output<CertificateAuthorityCertificateAuthorityConfigurationGetArgs> certificateAuthorityConfiguration,
        @Nullable Output<String> certificateChain,
        @Nullable Output<String> certificateSigningRequest,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<String> notAfter,
        @Nullable Output<String> notBefore,
        @Nullable Output<Integer> permanentDeletionTimeInDays,
        @Nullable Output<CertificateAuthorityRevocationConfigurationGetArgs> revocationConfiguration,
        @Nullable Output<String> serial,
        @Nullable Output<String> status,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> type) {
        this.arn = arn;
        this.certificate = certificate;
        this.certificateAuthorityConfiguration = certificateAuthorityConfiguration;
        this.certificateChain = certificateChain;
        this.certificateSigningRequest = certificateSigningRequest;
        this.enabled = enabled;
        this.notAfter = notAfter;
        this.notBefore = notBefore;
        this.permanentDeletionTimeInDays = permanentDeletionTimeInDays;
        this.revocationConfiguration = revocationConfiguration;
        this.serial = serial;
        this.status = status;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.type = type;
    }

    private CertificateAuthorityState() {
        this.arn = Output.empty();
        this.certificate = Output.empty();
        this.certificateAuthorityConfiguration = Output.empty();
        this.certificateChain = Output.empty();
        this.certificateSigningRequest = Output.empty();
        this.enabled = Output.empty();
        this.notAfter = Output.empty();
        this.notBefore = Output.empty();
        this.permanentDeletionTimeInDays = Output.empty();
        this.revocationConfiguration = Output.empty();
        this.serial = Output.empty();
        this.status = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateAuthorityState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> certificate;
        private @Nullable Output<CertificateAuthorityCertificateAuthorityConfigurationGetArgs> certificateAuthorityConfiguration;
        private @Nullable Output<String> certificateChain;
        private @Nullable Output<String> certificateSigningRequest;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<String> notAfter;
        private @Nullable Output<String> notBefore;
        private @Nullable Output<Integer> permanentDeletionTimeInDays;
        private @Nullable Output<CertificateAuthorityRevocationConfigurationGetArgs> revocationConfiguration;
        private @Nullable Output<String> serial;
        private @Nullable Output<String> status;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateAuthorityState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.certificate = defaults.certificate;
    	      this.certificateAuthorityConfiguration = defaults.certificateAuthorityConfiguration;
    	      this.certificateChain = defaults.certificateChain;
    	      this.certificateSigningRequest = defaults.certificateSigningRequest;
    	      this.enabled = defaults.enabled;
    	      this.notAfter = defaults.notAfter;
    	      this.notBefore = defaults.notBefore;
    	      this.permanentDeletionTimeInDays = defaults.permanentDeletionTimeInDays;
    	      this.revocationConfiguration = defaults.revocationConfiguration;
    	      this.serial = defaults.serial;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.type = defaults.type;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }
        public Builder certificate(@Nullable Output<String> certificate) {
            this.certificate = certificate;
            return this;
        }
        public Builder certificate(@Nullable String certificate) {
            this.certificate = Output.ofNullable(certificate);
            return this;
        }
        public Builder certificateAuthorityConfiguration(@Nullable Output<CertificateAuthorityCertificateAuthorityConfigurationGetArgs> certificateAuthorityConfiguration) {
            this.certificateAuthorityConfiguration = certificateAuthorityConfiguration;
            return this;
        }
        public Builder certificateAuthorityConfiguration(@Nullable CertificateAuthorityCertificateAuthorityConfigurationGetArgs certificateAuthorityConfiguration) {
            this.certificateAuthorityConfiguration = Output.ofNullable(certificateAuthorityConfiguration);
            return this;
        }
        public Builder certificateChain(@Nullable Output<String> certificateChain) {
            this.certificateChain = certificateChain;
            return this;
        }
        public Builder certificateChain(@Nullable String certificateChain) {
            this.certificateChain = Output.ofNullable(certificateChain);
            return this;
        }
        public Builder certificateSigningRequest(@Nullable Output<String> certificateSigningRequest) {
            this.certificateSigningRequest = certificateSigningRequest;
            return this;
        }
        public Builder certificateSigningRequest(@Nullable String certificateSigningRequest) {
            this.certificateSigningRequest = Output.ofNullable(certificateSigningRequest);
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }
        public Builder notAfter(@Nullable Output<String> notAfter) {
            this.notAfter = notAfter;
            return this;
        }
        public Builder notAfter(@Nullable String notAfter) {
            this.notAfter = Output.ofNullable(notAfter);
            return this;
        }
        public Builder notBefore(@Nullable Output<String> notBefore) {
            this.notBefore = notBefore;
            return this;
        }
        public Builder notBefore(@Nullable String notBefore) {
            this.notBefore = Output.ofNullable(notBefore);
            return this;
        }
        public Builder permanentDeletionTimeInDays(@Nullable Output<Integer> permanentDeletionTimeInDays) {
            this.permanentDeletionTimeInDays = permanentDeletionTimeInDays;
            return this;
        }
        public Builder permanentDeletionTimeInDays(@Nullable Integer permanentDeletionTimeInDays) {
            this.permanentDeletionTimeInDays = Output.ofNullable(permanentDeletionTimeInDays);
            return this;
        }
        public Builder revocationConfiguration(@Nullable Output<CertificateAuthorityRevocationConfigurationGetArgs> revocationConfiguration) {
            this.revocationConfiguration = revocationConfiguration;
            return this;
        }
        public Builder revocationConfiguration(@Nullable CertificateAuthorityRevocationConfigurationGetArgs revocationConfiguration) {
            this.revocationConfiguration = Output.ofNullable(revocationConfiguration);
            return this;
        }
        public Builder serial(@Nullable Output<String> serial) {
            this.serial = serial;
            return this;
        }
        public Builder serial(@Nullable String serial) {
            this.serial = Output.ofNullable(serial);
            return this;
        }
        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = Output.ofNullable(status);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }        public CertificateAuthorityState build() {
            return new CertificateAuthorityState(arn, certificate, certificateAuthorityConfiguration, certificateChain, certificateSigningRequest, enabled, notAfter, notBefore, permanentDeletionTimeInDays, revocationConfiguration, serial, status, tags, tagsAll, type);
        }
    }
}
