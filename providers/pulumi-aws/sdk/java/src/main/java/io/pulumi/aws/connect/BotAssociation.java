// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.connect;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.connect.BotAssociationArgs;
import io.pulumi.aws.connect.inputs.BotAssociationState;
import io.pulumi.aws.connect.outputs.BotAssociationLexBot;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Allows the specified Amazon Connect instance to access the specified Amazon Lex (V1) bot. For more information see
 * [Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html) and [Add an Amazon Lex bot](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-lex.html).
 * 
 * > **NOTE:** This resource only currently supports Amazon Lex (V1) Associations.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Basic
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.connect.BotAssociation("example", {
 *     instanceId: aws_connect_instance.example.id,
 *     lexBot: {
 *         lexRegion: "us-west-2",
 *         name: "Test",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.connect.BotAssociation("example",
 *     instance_id=aws_connect_instance["example"]["id"],
 *     lex_bot=aws.connect.BotAssociationLexBotArgs(
 *         lex_region="us-west-2",
 *         name="Test",
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Connect.BotAssociation("example", new Aws.Connect.BotAssociationArgs
 *         {
 *             InstanceId = aws_connect_instance.Example.Id,
 *             LexBot = new Aws.Connect.Inputs.BotAssociationLexBotArgs
 *             {
 *                 LexRegion = "us-west-2",
 *                 Name = "Test",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/connect"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := connect.NewBotAssociation(ctx, "example", &connect.BotAssociationArgs{
 * 			InstanceId: pulumi.Any(aws_connect_instance.Example.Id),
 * 			LexBot: &connect.BotAssociationLexBotArgs{
 * 				LexRegion: pulumi.String("us-west-2"),
 * 				Name:      pulumi.String("Test"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Including a sample Lex bot
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const current = aws.getRegion({});
 * const exampleIntent = new aws.lex.Intent("exampleIntent", {
 *     createVersion: true,
 *     name: "connect_lex_intent",
 *     fulfillmentActivity: {
 *         type: "ReturnIntent",
 *     },
 *     sampleUtterances: ["I would like to pick up flowers."],
 * });
 * const exampleBot = new aws.lex.Bot("exampleBot", {
 *     abortStatement: {
 *         messages: [{
 *             content: "Sorry, I am not able to assist at this time.",
 *             contentType: "PlainText",
 *         }],
 *     },
 *     clarificationPrompt: {
 *         maxAttempts: 2,
 *         messages: [{
 *             content: "I didn't understand you, what would you like to do?",
 *             contentType: "PlainText",
 *         }],
 *     },
 *     intents: [{
 *         intentName: exampleIntent.name,
 *         intentVersion: "1",
 *     }],
 *     childDirected: false,
 *     name: "connect_lex_bot",
 *     processBehavior: "BUILD",
 * });
 * const exampleBotAssociation = new aws.connect.BotAssociation("exampleBotAssociation", {
 *     instanceId: aws_connect_instance.example.id,
 *     lexBot: {
 *         lexRegion: current.then(current => current.name),
 *         name: exampleBot.name,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * current = aws.get_region()
 * example_intent = aws.lex.Intent("exampleIntent",
 *     create_version=True,
 *     name="connect_lex_intent",
 *     fulfillment_activity=aws.lex.IntentFulfillmentActivityArgs(
 *         type="ReturnIntent",
 *     ),
 *     sample_utterances=["I would like to pick up flowers."])
 * example_bot = aws.lex.Bot("exampleBot",
 *     abort_statement=aws.lex.BotAbortStatementArgs(
 *         messages=[aws.lex.BotAbortStatementMessageArgs(
 *             content="Sorry, I am not able to assist at this time.",
 *             content_type="PlainText",
 *         )],
 *     ),
 *     clarification_prompt=aws.lex.BotClarificationPromptArgs(
 *         max_attempts=2,
 *         messages=[aws.lex.BotClarificationPromptMessageArgs(
 *             content="I didn't understand you, what would you like to do?",
 *             content_type="PlainText",
 *         )],
 *     ),
 *     intents=[aws.lex.BotIntentArgs(
 *         intent_name=example_intent.name,
 *         intent_version="1",
 *     )],
 *     child_directed=False,
 *     name="connect_lex_bot",
 *     process_behavior="BUILD")
 * example_bot_association = aws.connect.BotAssociation("exampleBotAssociation",
 *     instance_id=aws_connect_instance["example"]["id"],
 *     lex_bot=aws.connect.BotAssociationLexBotArgs(
 *         lex_region=current.name,
 *         name=example_bot.name,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var current = Output.Create(Aws.GetRegion.InvokeAsync());
 *         var exampleIntent = new Aws.Lex.Intent("exampleIntent", new Aws.Lex.IntentArgs
 *         {
 *             CreateVersion = true,
 *             Name = "connect_lex_intent",
 *             FulfillmentActivity = new Aws.Lex.Inputs.IntentFulfillmentActivityArgs
 *             {
 *                 Type = "ReturnIntent",
 *             },
 *             SampleUtterances = 
 *             {
 *                 "I would like to pick up flowers.",
 *             },
 *         });
 *         var exampleBot = new Aws.Lex.Bot("exampleBot", new Aws.Lex.BotArgs
 *         {
 *             AbortStatement = new Aws.Lex.Inputs.BotAbortStatementArgs
 *             {
 *                 Messages = 
 *                 {
 *                     new Aws.Lex.Inputs.BotAbortStatementMessageArgs
 *                     {
 *                         Content = "Sorry, I am not able to assist at this time.",
 *                         ContentType = "PlainText",
 *                     },
 *                 },
 *             },
 *             ClarificationPrompt = new Aws.Lex.Inputs.BotClarificationPromptArgs
 *             {
 *                 MaxAttempts = 2,
 *                 Messages = 
 *                 {
 *                     new Aws.Lex.Inputs.BotClarificationPromptMessageArgs
 *                     {
 *                         Content = "I didn't understand you, what would you like to do?",
 *                         ContentType = "PlainText",
 *                     },
 *                 },
 *             },
 *             Intents = 
 *             {
 *                 new Aws.Lex.Inputs.BotIntentArgs
 *                 {
 *                     IntentName = exampleIntent.Name,
 *                     IntentVersion = "1",
 *                 },
 *             },
 *             ChildDirected = false,
 *             Name = "connect_lex_bot",
 *             ProcessBehavior = "BUILD",
 *         });
 *         var exampleBotAssociation = new Aws.Connect.BotAssociation("exampleBotAssociation", new Aws.Connect.BotAssociationArgs
 *         {
 *             InstanceId = aws_connect_instance.Example.Id,
 *             LexBot = new Aws.Connect.Inputs.BotAssociationLexBotArgs
 *             {
 *                 LexRegion = current.Apply(current => current.Name),
 *                 Name = exampleBot.Name,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/connect"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/lex"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		current, err := aws.GetRegion(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleIntent, err := lex.NewIntent(ctx, "exampleIntent", &lex.IntentArgs{
 * 			CreateVersion: pulumi.Bool(true),
 * 			Name:          pulumi.String("connect_lex_intent"),
 * 			FulfillmentActivity: &lex.IntentFulfillmentActivityArgs{
 * 				Type: pulumi.String("ReturnIntent"),
 * 			},
 * 			SampleUtterances: pulumi.StringArray{
 * 				pulumi.String("I would like to pick up flowers."),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleBot, err := lex.NewBot(ctx, "exampleBot", &lex.BotArgs{
 * 			AbortStatement: &lex.BotAbortStatementArgs{
 * 				Messages: lex.BotAbortStatementMessageArray{
 * 					&lex.BotAbortStatementMessageArgs{
 * 						Content:     pulumi.String("Sorry, I am not able to assist at this time."),
 * 						ContentType: pulumi.String("PlainText"),
 * 					},
 * 				},
 * 			},
 * 			ClarificationPrompt: &lex.BotClarificationPromptArgs{
 * 				MaxAttempts: pulumi.Int(2),
 * 				Messages: lex.BotClarificationPromptMessageArray{
 * 					&lex.BotClarificationPromptMessageArgs{
 * 						Content:     pulumi.String("I didn't understand you, what would you like to do?"),
 * 						ContentType: pulumi.String("PlainText"),
 * 					},
 * 				},
 * 			},
 * 			Intents: lex.BotIntentArray{
 * 				&lex.BotIntentArgs{
 * 					IntentName:    exampleIntent.Name,
 * 					IntentVersion: pulumi.String("1"),
 * 				},
 * 			},
 * 			ChildDirected:   pulumi.Bool(false),
 * 			Name:            pulumi.String("connect_lex_bot"),
 * 			ProcessBehavior: pulumi.String("BUILD"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = connect.NewBotAssociation(ctx, "exampleBotAssociation", &connect.BotAssociationArgs{
 * 			InstanceId: pulumi.Any(aws_connect_instance.Example.Id),
 * 			LexBot: &connect.BotAssociationLexBotArgs{
 * 				LexRegion: pulumi.String(current.Name),
 * 				Name:      exampleBot.Name,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * `aws_connect_bot_association` can be imported by using the Amazon Connect instance ID, Lex (V1) bot name, and Lex (V1) bot region separated by colons (`:`), e.g.
 * 
 * ```sh
 *  $ pulumi import aws:connect/botAssociation:BotAssociation example aaaaaaaa-bbbb-cccc-dddd-111111111111:Example:us-west-2
 * ```
 * 
 *  
 */
@ResourceType(type="aws:connect/botAssociation:BotAssociation")
public class BotAssociation extends io.pulumi.resources.CustomResource {
    /**
     * The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
     * 
     */
    @Export(name="instanceId", type=String.class, parameters={})
    private Output<String> instanceId;

    /**
     * @return The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
     * 
     */
    public Output<String> getInstanceId() {
        return this.instanceId;
    }
    /**
     * Configuration information of an Amazon Lex (V1) bot. Detailed below.
     * 
     */
    @Export(name="lexBot", type=BotAssociationLexBot.class, parameters={})
    private Output<BotAssociationLexBot> lexBot;

    /**
     * @return Configuration information of an Amazon Lex (V1) bot. Detailed below.
     * 
     */
    public Output<BotAssociationLexBot> getLexBot() {
        return this.lexBot;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BotAssociation(String name) {
        this(name, BotAssociationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BotAssociation(String name, BotAssociationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BotAssociation(String name, BotAssociationArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:connect/botAssociation:BotAssociation", name, args == null ? BotAssociationArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private BotAssociation(String name, Output<String> id, @Nullable BotAssociationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:connect/botAssociation:BotAssociation", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BotAssociation get(String name, Output<String> id, @Nullable BotAssociationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new BotAssociation(name, id, state, options);
    }
}
