// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.alb.inputs;

import io.pulumi.aws.alb.inputs.LoadBalancerAccessLogsGetArgs;
import io.pulumi.aws.alb.inputs.LoadBalancerSubnetMappingGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LoadBalancerState extends io.pulumi.resources.ResourceArgs {

    public static final LoadBalancerState Empty = new LoadBalancerState();

    /**
     * An Access Logs block. Access Logs documented below.
     * 
     */
    @InputImport(name="accessLogs")
    private final @Nullable Input<LoadBalancerAccessLogsGetArgs> accessLogs;

    public Input<LoadBalancerAccessLogsGetArgs> getAccessLogs() {
        return this.accessLogs == null ? Input.empty() : this.accessLogs;
    }

    /**
     * The ARN of the load balancer (matches `id`).
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The ARN suffix for use with CloudWatch Metrics.
     * 
     */
    @InputImport(name="arnSuffix")
    private final @Nullable Input<String> arnSuffix;

    public Input<String> getArnSuffix() {
        return this.arnSuffix == null ? Input.empty() : this.arnSuffix;
    }

    /**
     * The ID of the customer owned ipv4 pool to use for this load balancer.
     * 
     */
    @InputImport(name="customerOwnedIpv4Pool")
    private final @Nullable Input<String> customerOwnedIpv4Pool;

    public Input<String> getCustomerOwnedIpv4Pool() {
        return this.customerOwnedIpv4Pool == null ? Input.empty() : this.customerOwnedIpv4Pool;
    }

    /**
     * Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
     * 
     */
    @InputImport(name="desyncMitigationMode")
    private final @Nullable Input<String> desyncMitigationMode;

    public Input<String> getDesyncMitigationMode() {
        return this.desyncMitigationMode == null ? Input.empty() : this.desyncMitigationMode;
    }

    /**
     * The DNS name of the load balancer.
     * 
     */
    @InputImport(name="dnsName")
    private final @Nullable Input<String> dnsName;

    public Input<String> getDnsName() {
        return this.dnsName == null ? Input.empty() : this.dnsName;
    }

    /**
     * Indicates whether HTTP headers with header fields that are not valid are removed by the load balancer (true) or routed to targets (false). The default is false. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. Only valid for Load Balancers of type `application`.
     * 
     */
    @InputImport(name="dropInvalidHeaderFields")
    private final @Nullable Input<Boolean> dropInvalidHeaderFields;

    public Input<Boolean> getDropInvalidHeaderFields() {
        return this.dropInvalidHeaderFields == null ? Input.empty() : this.dropInvalidHeaderFields;
    }

    /**
     * If true, cross-zone load balancing of the load balancer will be enabled.
     * This is a `network` load balancer feature. Defaults to `false`.
     * 
     */
    @InputImport(name="enableCrossZoneLoadBalancing")
    private final @Nullable Input<Boolean> enableCrossZoneLoadBalancing;

    public Input<Boolean> getEnableCrossZoneLoadBalancing() {
        return this.enableCrossZoneLoadBalancing == null ? Input.empty() : this.enableCrossZoneLoadBalancing;
    }

    /**
     * If true, deletion of the load balancer will be disabled via
     * the AWS API. This will prevent this provider from deleting the load balancer. Defaults to `false`.
     * 
     */
    @InputImport(name="enableDeletionProtection")
    private final @Nullable Input<Boolean> enableDeletionProtection;

    public Input<Boolean> getEnableDeletionProtection() {
        return this.enableDeletionProtection == null ? Input.empty() : this.enableDeletionProtection;
    }

    /**
     * Indicates whether HTTP/2 is enabled in `application` load balancers. Defaults to `true`.
     * 
     */
    @InputImport(name="enableHttp2")
    private final @Nullable Input<Boolean> enableHttp2;

    public Input<Boolean> getEnableHttp2() {
        return this.enableHttp2 == null ? Input.empty() : this.enableHttp2;
    }

    /**
     * Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. Defaults to `false`.
     * 
     */
    @InputImport(name="enableWafFailOpen")
    private final @Nullable Input<Boolean> enableWafFailOpen;

    public Input<Boolean> getEnableWafFailOpen() {
        return this.enableWafFailOpen == null ? Input.empty() : this.enableWafFailOpen;
    }

    /**
     * The time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type `application`. Default: 60.
     * 
     */
    @InputImport(name="idleTimeout")
    private final @Nullable Input<Integer> idleTimeout;

    public Input<Integer> getIdleTimeout() {
        return this.idleTimeout == null ? Input.empty() : this.idleTimeout;
    }

    /**
     * If true, the LB will be internal.
     * 
     */
    @InputImport(name="internal")
    private final @Nullable Input<Boolean> internal;

    public Input<Boolean> getInternal() {
        return this.internal == null ? Input.empty() : this.internal;
    }

    /**
     * The type of IP addresses used by the subnets for your load balancer. The possible values are `ipv4` and `dualstack`
     * 
     */
    @InputImport(name="ipAddressType")
    private final @Nullable Input<String> ipAddressType;

    public Input<String> getIpAddressType() {
        return this.ipAddressType == null ? Input.empty() : this.ipAddressType;
    }

    /**
     * The type of load balancer to create. Possible values are `application`, `gateway`, or `network`. The default value is `application`.
     * 
     */
    @InputImport(name="loadBalancerType")
    private final @Nullable Input<String> loadBalancerType;

    public Input<String> getLoadBalancerType() {
        return this.loadBalancerType == null ? Input.empty() : this.loadBalancerType;
    }

    /**
     * The name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters,
     * must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. If not specified,
     * this provider will autogenerate a name beginning with `tf-lb`.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @InputImport(name="namePrefix")
    private final @Nullable Input<String> namePrefix;

    public Input<String> getNamePrefix() {
        return this.namePrefix == null ? Input.empty() : this.namePrefix;
    }

    /**
     * A list of security group IDs to assign to the LB. Only valid for Load Balancers of type `application`.
     * 
     */
    @InputImport(name="securityGroups")
    private final @Nullable Input<List<String>> securityGroups;

    public Input<List<String>> getSecurityGroups() {
        return this.securityGroups == null ? Input.empty() : this.securityGroups;
    }

    /**
     * A subnet mapping block as documented below.
     * 
     */
    @InputImport(name="subnetMappings")
    private final @Nullable Input<List<LoadBalancerSubnetMappingGetArgs>> subnetMappings;

    public Input<List<LoadBalancerSubnetMappingGetArgs>> getSubnetMappings() {
        return this.subnetMappings == null ? Input.empty() : this.subnetMappings;
    }

    /**
     * A list of subnet IDs to attach to the LB. Subnets
     * cannot be updated for Load Balancers of type `network`. Changing this value
     * for load balancers of type `network` will force a recreation of the resource.
     * 
     */
    @InputImport(name="subnets")
    private final @Nullable Input<List<String>> subnets;

    public Input<List<String>> getSubnets() {
        return this.subnets == null ? Input.empty() : this.subnets;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    @InputImport(name="vpcId")
    private final @Nullable Input<String> vpcId;

    public Input<String> getVpcId() {
        return this.vpcId == null ? Input.empty() : this.vpcId;
    }

    /**
     * The canonical hosted zone ID of the load balancer (to be used in a Route 53 Alias record).
     * * `subnet_mapping.*.outpost_id` - ID of the Outpost containing the load balancer.
     * 
     */
    @InputImport(name="zoneId")
    private final @Nullable Input<String> zoneId;

    public Input<String> getZoneId() {
        return this.zoneId == null ? Input.empty() : this.zoneId;
    }

    public LoadBalancerState(
        @Nullable Input<LoadBalancerAccessLogsGetArgs> accessLogs,
        @Nullable Input<String> arn,
        @Nullable Input<String> arnSuffix,
        @Nullable Input<String> customerOwnedIpv4Pool,
        @Nullable Input<String> desyncMitigationMode,
        @Nullable Input<String> dnsName,
        @Nullable Input<Boolean> dropInvalidHeaderFields,
        @Nullable Input<Boolean> enableCrossZoneLoadBalancing,
        @Nullable Input<Boolean> enableDeletionProtection,
        @Nullable Input<Boolean> enableHttp2,
        @Nullable Input<Boolean> enableWafFailOpen,
        @Nullable Input<Integer> idleTimeout,
        @Nullable Input<Boolean> internal,
        @Nullable Input<String> ipAddressType,
        @Nullable Input<String> loadBalancerType,
        @Nullable Input<String> name,
        @Nullable Input<String> namePrefix,
        @Nullable Input<List<String>> securityGroups,
        @Nullable Input<List<LoadBalancerSubnetMappingGetArgs>> subnetMappings,
        @Nullable Input<List<String>> subnets,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> vpcId,
        @Nullable Input<String> zoneId) {
        this.accessLogs = accessLogs;
        this.arn = arn;
        this.arnSuffix = arnSuffix;
        this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
        this.desyncMitigationMode = desyncMitigationMode;
        this.dnsName = dnsName;
        this.dropInvalidHeaderFields = dropInvalidHeaderFields;
        this.enableCrossZoneLoadBalancing = enableCrossZoneLoadBalancing;
        this.enableDeletionProtection = enableDeletionProtection;
        this.enableHttp2 = enableHttp2;
        this.enableWafFailOpen = enableWafFailOpen;
        this.idleTimeout = idleTimeout;
        this.internal = internal;
        this.ipAddressType = ipAddressType;
        this.loadBalancerType = loadBalancerType;
        this.name = name;
        this.namePrefix = namePrefix;
        this.securityGroups = securityGroups;
        this.subnetMappings = subnetMappings;
        this.subnets = subnets;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcId = vpcId;
        this.zoneId = zoneId;
    }

    private LoadBalancerState() {
        this.accessLogs = Input.empty();
        this.arn = Input.empty();
        this.arnSuffix = Input.empty();
        this.customerOwnedIpv4Pool = Input.empty();
        this.desyncMitigationMode = Input.empty();
        this.dnsName = Input.empty();
        this.dropInvalidHeaderFields = Input.empty();
        this.enableCrossZoneLoadBalancing = Input.empty();
        this.enableDeletionProtection = Input.empty();
        this.enableHttp2 = Input.empty();
        this.enableWafFailOpen = Input.empty();
        this.idleTimeout = Input.empty();
        this.internal = Input.empty();
        this.ipAddressType = Input.empty();
        this.loadBalancerType = Input.empty();
        this.name = Input.empty();
        this.namePrefix = Input.empty();
        this.securityGroups = Input.empty();
        this.subnetMappings = Input.empty();
        this.subnets = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.vpcId = Input.empty();
        this.zoneId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<LoadBalancerAccessLogsGetArgs> accessLogs;
        private @Nullable Input<String> arn;
        private @Nullable Input<String> arnSuffix;
        private @Nullable Input<String> customerOwnedIpv4Pool;
        private @Nullable Input<String> desyncMitigationMode;
        private @Nullable Input<String> dnsName;
        private @Nullable Input<Boolean> dropInvalidHeaderFields;
        private @Nullable Input<Boolean> enableCrossZoneLoadBalancing;
        private @Nullable Input<Boolean> enableDeletionProtection;
        private @Nullable Input<Boolean> enableHttp2;
        private @Nullable Input<Boolean> enableWafFailOpen;
        private @Nullable Input<Integer> idleTimeout;
        private @Nullable Input<Boolean> internal;
        private @Nullable Input<String> ipAddressType;
        private @Nullable Input<String> loadBalancerType;
        private @Nullable Input<String> name;
        private @Nullable Input<String> namePrefix;
        private @Nullable Input<List<String>> securityGroups;
        private @Nullable Input<List<LoadBalancerSubnetMappingGetArgs>> subnetMappings;
        private @Nullable Input<List<String>> subnets;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> vpcId;
        private @Nullable Input<String> zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancerState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLogs = defaults.accessLogs;
    	      this.arn = defaults.arn;
    	      this.arnSuffix = defaults.arnSuffix;
    	      this.customerOwnedIpv4Pool = defaults.customerOwnedIpv4Pool;
    	      this.desyncMitigationMode = defaults.desyncMitigationMode;
    	      this.dnsName = defaults.dnsName;
    	      this.dropInvalidHeaderFields = defaults.dropInvalidHeaderFields;
    	      this.enableCrossZoneLoadBalancing = defaults.enableCrossZoneLoadBalancing;
    	      this.enableDeletionProtection = defaults.enableDeletionProtection;
    	      this.enableHttp2 = defaults.enableHttp2;
    	      this.enableWafFailOpen = defaults.enableWafFailOpen;
    	      this.idleTimeout = defaults.idleTimeout;
    	      this.internal = defaults.internal;
    	      this.ipAddressType = defaults.ipAddressType;
    	      this.loadBalancerType = defaults.loadBalancerType;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.securityGroups = defaults.securityGroups;
    	      this.subnetMappings = defaults.subnetMappings;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcId = defaults.vpcId;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder setAccessLogs(@Nullable Input<LoadBalancerAccessLogsGetArgs> accessLogs) {
            this.accessLogs = accessLogs;
            return this;
        }

        public Builder setAccessLogs(@Nullable LoadBalancerAccessLogsGetArgs accessLogs) {
            this.accessLogs = Input.ofNullable(accessLogs);
            return this;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setArnSuffix(@Nullable Input<String> arnSuffix) {
            this.arnSuffix = arnSuffix;
            return this;
        }

        public Builder setArnSuffix(@Nullable String arnSuffix) {
            this.arnSuffix = Input.ofNullable(arnSuffix);
            return this;
        }

        public Builder setCustomerOwnedIpv4Pool(@Nullable Input<String> customerOwnedIpv4Pool) {
            this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
            return this;
        }

        public Builder setCustomerOwnedIpv4Pool(@Nullable String customerOwnedIpv4Pool) {
            this.customerOwnedIpv4Pool = Input.ofNullable(customerOwnedIpv4Pool);
            return this;
        }

        public Builder setDesyncMitigationMode(@Nullable Input<String> desyncMitigationMode) {
            this.desyncMitigationMode = desyncMitigationMode;
            return this;
        }

        public Builder setDesyncMitigationMode(@Nullable String desyncMitigationMode) {
            this.desyncMitigationMode = Input.ofNullable(desyncMitigationMode);
            return this;
        }

        public Builder setDnsName(@Nullable Input<String> dnsName) {
            this.dnsName = dnsName;
            return this;
        }

        public Builder setDnsName(@Nullable String dnsName) {
            this.dnsName = Input.ofNullable(dnsName);
            return this;
        }

        public Builder setDropInvalidHeaderFields(@Nullable Input<Boolean> dropInvalidHeaderFields) {
            this.dropInvalidHeaderFields = dropInvalidHeaderFields;
            return this;
        }

        public Builder setDropInvalidHeaderFields(@Nullable Boolean dropInvalidHeaderFields) {
            this.dropInvalidHeaderFields = Input.ofNullable(dropInvalidHeaderFields);
            return this;
        }

        public Builder setEnableCrossZoneLoadBalancing(@Nullable Input<Boolean> enableCrossZoneLoadBalancing) {
            this.enableCrossZoneLoadBalancing = enableCrossZoneLoadBalancing;
            return this;
        }

        public Builder setEnableCrossZoneLoadBalancing(@Nullable Boolean enableCrossZoneLoadBalancing) {
            this.enableCrossZoneLoadBalancing = Input.ofNullable(enableCrossZoneLoadBalancing);
            return this;
        }

        public Builder setEnableDeletionProtection(@Nullable Input<Boolean> enableDeletionProtection) {
            this.enableDeletionProtection = enableDeletionProtection;
            return this;
        }

        public Builder setEnableDeletionProtection(@Nullable Boolean enableDeletionProtection) {
            this.enableDeletionProtection = Input.ofNullable(enableDeletionProtection);
            return this;
        }

        public Builder setEnableHttp2(@Nullable Input<Boolean> enableHttp2) {
            this.enableHttp2 = enableHttp2;
            return this;
        }

        public Builder setEnableHttp2(@Nullable Boolean enableHttp2) {
            this.enableHttp2 = Input.ofNullable(enableHttp2);
            return this;
        }

        public Builder setEnableWafFailOpen(@Nullable Input<Boolean> enableWafFailOpen) {
            this.enableWafFailOpen = enableWafFailOpen;
            return this;
        }

        public Builder setEnableWafFailOpen(@Nullable Boolean enableWafFailOpen) {
            this.enableWafFailOpen = Input.ofNullable(enableWafFailOpen);
            return this;
        }

        public Builder setIdleTimeout(@Nullable Input<Integer> idleTimeout) {
            this.idleTimeout = idleTimeout;
            return this;
        }

        public Builder setIdleTimeout(@Nullable Integer idleTimeout) {
            this.idleTimeout = Input.ofNullable(idleTimeout);
            return this;
        }

        public Builder setInternal(@Nullable Input<Boolean> internal) {
            this.internal = internal;
            return this;
        }

        public Builder setInternal(@Nullable Boolean internal) {
            this.internal = Input.ofNullable(internal);
            return this;
        }

        public Builder setIpAddressType(@Nullable Input<String> ipAddressType) {
            this.ipAddressType = ipAddressType;
            return this;
        }

        public Builder setIpAddressType(@Nullable String ipAddressType) {
            this.ipAddressType = Input.ofNullable(ipAddressType);
            return this;
        }

        public Builder setLoadBalancerType(@Nullable Input<String> loadBalancerType) {
            this.loadBalancerType = loadBalancerType;
            return this;
        }

        public Builder setLoadBalancerType(@Nullable String loadBalancerType) {
            this.loadBalancerType = Input.ofNullable(loadBalancerType);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNamePrefix(@Nullable Input<String> namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }

        public Builder setNamePrefix(@Nullable String namePrefix) {
            this.namePrefix = Input.ofNullable(namePrefix);
            return this;
        }

        public Builder setSecurityGroups(@Nullable Input<List<String>> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }

        public Builder setSecurityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = Input.ofNullable(securityGroups);
            return this;
        }

        public Builder setSubnetMappings(@Nullable Input<List<LoadBalancerSubnetMappingGetArgs>> subnetMappings) {
            this.subnetMappings = subnetMappings;
            return this;
        }

        public Builder setSubnetMappings(@Nullable List<LoadBalancerSubnetMappingGetArgs> subnetMappings) {
            this.subnetMappings = Input.ofNullable(subnetMappings);
            return this;
        }

        public Builder setSubnets(@Nullable Input<List<String>> subnets) {
            this.subnets = subnets;
            return this;
        }

        public Builder setSubnets(@Nullable List<String> subnets) {
            this.subnets = Input.ofNullable(subnets);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setVpcId(@Nullable Input<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }

        public Builder setVpcId(@Nullable String vpcId) {
            this.vpcId = Input.ofNullable(vpcId);
            return this;
        }

        public Builder setZoneId(@Nullable Input<String> zoneId) {
            this.zoneId = zoneId;
            return this;
        }

        public Builder setZoneId(@Nullable String zoneId) {
            this.zoneId = Input.ofNullable(zoneId);
            return this;
        }
        public LoadBalancerState build() {
            return new LoadBalancerState(accessLogs, arn, arnSuffix, customerOwnedIpv4Pool, desyncMitigationMode, dnsName, dropInvalidHeaderFields, enableCrossZoneLoadBalancing, enableDeletionProtection, enableHttp2, enableWafFailOpen, idleTimeout, internal, ipAddressType, loadBalancerType, name, namePrefix, securityGroups, subnetMappings, subnets, tags, tagsAll, vpcId, zoneId);
        }
    }
}
