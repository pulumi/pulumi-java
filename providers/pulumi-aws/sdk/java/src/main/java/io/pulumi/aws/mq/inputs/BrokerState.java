// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.mq.inputs;

import io.pulumi.aws.mq.inputs.BrokerConfigurationGetArgs;
import io.pulumi.aws.mq.inputs.BrokerEncryptionOptionsGetArgs;
import io.pulumi.aws.mq.inputs.BrokerInstanceGetArgs;
import io.pulumi.aws.mq.inputs.BrokerLdapServerMetadataGetArgs;
import io.pulumi.aws.mq.inputs.BrokerLogsGetArgs;
import io.pulumi.aws.mq.inputs.BrokerMaintenanceWindowStartTimeGetArgs;
import io.pulumi.aws.mq.inputs.BrokerUserGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BrokerState extends io.pulumi.resources.ResourceArgs {

    public static final BrokerState Empty = new BrokerState();

    /**
     * Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
     * 
     */
    @Import(name="applyImmediately")
      private final @Nullable Output<Boolean> applyImmediately;

    public Output<Boolean> getApplyImmediately() {
        return this.applyImmediately == null ? Output.empty() : this.applyImmediately;
    }

    /**
     * ARN of the broker.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engine_type` `RabbitMQ`.
     * 
     */
    @Import(name="authenticationStrategy")
      private final @Nullable Output<String> authenticationStrategy;

    public Output<String> getAuthenticationStrategy() {
        return this.authenticationStrategy == null ? Output.empty() : this.authenticationStrategy;
    }

    /**
     * Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
     * 
     */
    @Import(name="autoMinorVersionUpgrade")
      private final @Nullable Output<Boolean> autoMinorVersionUpgrade;

    public Output<Boolean> getAutoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade == null ? Output.empty() : this.autoMinorVersionUpgrade;
    }

    /**
     * Name of the broker.
     * 
     */
    @Import(name="brokerName")
      private final @Nullable Output<String> brokerName;

    public Output<String> getBrokerName() {
        return this.brokerName == null ? Output.empty() : this.brokerName;
    }

    /**
     * Configuration block for broker configuration. Applies to `engine_type` of `ActiveMQ` only. Detailed below.
     * 
     */
    @Import(name="configuration")
      private final @Nullable Output<BrokerConfigurationGetArgs> configuration;

    public Output<BrokerConfigurationGetArgs> getConfiguration() {
        return this.configuration == null ? Output.empty() : this.configuration;
    }

    /**
     * Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
     * 
     */
    @Import(name="deploymentMode")
      private final @Nullable Output<String> deploymentMode;

    public Output<String> getDeploymentMode() {
        return this.deploymentMode == null ? Output.empty() : this.deploymentMode;
    }

    /**
     * Configuration block containing encryption options. Detailed below.
     * 
     */
    @Import(name="encryptionOptions")
      private final @Nullable Output<BrokerEncryptionOptionsGetArgs> encryptionOptions;

    public Output<BrokerEncryptionOptionsGetArgs> getEncryptionOptions() {
        return this.encryptionOptions == null ? Output.empty() : this.encryptionOptions;
    }

    /**
     * Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
     * 
     */
    @Import(name="engineType")
      private final @Nullable Output<String> engineType;

    public Output<String> getEngineType() {
        return this.engineType == null ? Output.empty() : this.engineType;
    }

    /**
     * Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.15.0`.
     * 
     */
    @Import(name="engineVersion")
      private final @Nullable Output<String> engineVersion;

    public Output<String> getEngineVersion() {
        return this.engineVersion == null ? Output.empty() : this.engineVersion;
    }

    /**
     * Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
     * 
     */
    @Import(name="hostInstanceType")
      private final @Nullable Output<String> hostInstanceType;

    public Output<String> getHostInstanceType() {
        return this.hostInstanceType == null ? Output.empty() : this.hostInstanceType;
    }

    /**
     * List of information about allocated brokers (both active & standby).
     * * `instances.0.console_url` - The URL of the broker's [ActiveMQ Web Console](http://activemq.apache.org/web-console.html).
     * * `instances.0.ip_address` - IP Address of the broker.
     * * `instances.0.endpoints` - Broker's wire-level protocol endpoints in the following order & format referenceable e.g., as `instances.0.endpoints.0` (SSL):
     * * For `ActiveMQ`:
     * * `ssl://broker-id.mq.us-west-2.amazonaws.com:61617`
     * * `amqp+ssl://broker-id.mq.us-west-2.amazonaws.com:5671`
     * * `stomp+ssl://broker-id.mq.us-west-2.amazonaws.com:61614`
     * * `mqtt+ssl://broker-id.mq.us-west-2.amazonaws.com:8883`
     * * `wss://broker-id.mq.us-west-2.amazonaws.com:61619`
     * * For `RabbitMQ`:
     * * `amqps://broker-id.mq.us-west-2.amazonaws.com:5671`
     * 
     */
    @Import(name="instances")
      private final @Nullable Output<List<BrokerInstanceGetArgs>> instances;

    public Output<List<BrokerInstanceGetArgs>> getInstances() {
        return this.instances == null ? Output.empty() : this.instances;
    }

    /**
     * Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engine_type` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
     * 
     */
    @Import(name="ldapServerMetadata")
      private final @Nullable Output<BrokerLdapServerMetadataGetArgs> ldapServerMetadata;

    public Output<BrokerLdapServerMetadataGetArgs> getLdapServerMetadata() {
        return this.ldapServerMetadata == null ? Output.empty() : this.ldapServerMetadata;
    }

    /**
     * Configuration block for the logging configuration of the broker. Detailed below.
     * 
     */
    @Import(name="logs")
      private final @Nullable Output<BrokerLogsGetArgs> logs;

    public Output<BrokerLogsGetArgs> getLogs() {
        return this.logs == null ? Output.empty() : this.logs;
    }

    /**
     * Configuration block for the maintenance window start time. Detailed below.
     * 
     */
    @Import(name="maintenanceWindowStartTime")
      private final @Nullable Output<BrokerMaintenanceWindowStartTimeGetArgs> maintenanceWindowStartTime;

    public Output<BrokerMaintenanceWindowStartTimeGetArgs> getMaintenanceWindowStartTime() {
        return this.maintenanceWindowStartTime == null ? Output.empty() : this.maintenanceWindowStartTime;
    }

    /**
     * Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
     * 
     */
    @Import(name="publiclyAccessible")
      private final @Nullable Output<Boolean> publiclyAccessible;

    public Output<Boolean> getPubliclyAccessible() {
        return this.publiclyAccessible == null ? Output.empty() : this.publiclyAccessible;
    }

    /**
     * List of security group IDs assigned to the broker.
     * 
     */
    @Import(name="securityGroups")
      private final @Nullable Output<List<String>> securityGroups;

    public Output<List<String>> getSecurityGroups() {
        return this.securityGroups == null ? Output.empty() : this.securityGroups;
    }

    /**
     * Storage type of the broker. For `engine_type` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engine_type` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
     * 
     */
    @Import(name="storageType")
      private final @Nullable Output<String> storageType;

    public Output<String> getStorageType() {
        return this.storageType == null ? Output.empty() : this.storageType;
    }

    /**
     * List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
     * 
     */
    @Import(name="subnetIds")
      private final @Nullable Output<List<String>> subnetIds;

    public Output<List<String>> getSubnetIds() {
        return this.subnetIds == null ? Output.empty() : this.subnetIds;
    }

    /**
     * Map of tags to assign to the broker. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * Configuration block for broker users. For `engine_type` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
     * 
     */
    @Import(name="users")
      private final @Nullable Output<List<BrokerUserGetArgs>> users;

    public Output<List<BrokerUserGetArgs>> getUsers() {
        return this.users == null ? Output.empty() : this.users;
    }

    public BrokerState(
        @Nullable Output<Boolean> applyImmediately,
        @Nullable Output<String> arn,
        @Nullable Output<String> authenticationStrategy,
        @Nullable Output<Boolean> autoMinorVersionUpgrade,
        @Nullable Output<String> brokerName,
        @Nullable Output<BrokerConfigurationGetArgs> configuration,
        @Nullable Output<String> deploymentMode,
        @Nullable Output<BrokerEncryptionOptionsGetArgs> encryptionOptions,
        @Nullable Output<String> engineType,
        @Nullable Output<String> engineVersion,
        @Nullable Output<String> hostInstanceType,
        @Nullable Output<List<BrokerInstanceGetArgs>> instances,
        @Nullable Output<BrokerLdapServerMetadataGetArgs> ldapServerMetadata,
        @Nullable Output<BrokerLogsGetArgs> logs,
        @Nullable Output<BrokerMaintenanceWindowStartTimeGetArgs> maintenanceWindowStartTime,
        @Nullable Output<Boolean> publiclyAccessible,
        @Nullable Output<List<String>> securityGroups,
        @Nullable Output<String> storageType,
        @Nullable Output<List<String>> subnetIds,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<List<BrokerUserGetArgs>> users) {
        this.applyImmediately = applyImmediately;
        this.arn = arn;
        this.authenticationStrategy = authenticationStrategy;
        this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
        this.brokerName = brokerName;
        this.configuration = configuration;
        this.deploymentMode = deploymentMode;
        this.encryptionOptions = encryptionOptions;
        this.engineType = engineType;
        this.engineVersion = engineVersion;
        this.hostInstanceType = hostInstanceType;
        this.instances = instances;
        this.ldapServerMetadata = ldapServerMetadata;
        this.logs = logs;
        this.maintenanceWindowStartTime = maintenanceWindowStartTime;
        this.publiclyAccessible = publiclyAccessible;
        this.securityGroups = securityGroups;
        this.storageType = storageType;
        this.subnetIds = subnetIds;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.users = users;
    }

    private BrokerState() {
        this.applyImmediately = Output.empty();
        this.arn = Output.empty();
        this.authenticationStrategy = Output.empty();
        this.autoMinorVersionUpgrade = Output.empty();
        this.brokerName = Output.empty();
        this.configuration = Output.empty();
        this.deploymentMode = Output.empty();
        this.encryptionOptions = Output.empty();
        this.engineType = Output.empty();
        this.engineVersion = Output.empty();
        this.hostInstanceType = Output.empty();
        this.instances = Output.empty();
        this.ldapServerMetadata = Output.empty();
        this.logs = Output.empty();
        this.maintenanceWindowStartTime = Output.empty();
        this.publiclyAccessible = Output.empty();
        this.securityGroups = Output.empty();
        this.storageType = Output.empty();
        this.subnetIds = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.users = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BrokerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> applyImmediately;
        private @Nullable Output<String> arn;
        private @Nullable Output<String> authenticationStrategy;
        private @Nullable Output<Boolean> autoMinorVersionUpgrade;
        private @Nullable Output<String> brokerName;
        private @Nullable Output<BrokerConfigurationGetArgs> configuration;
        private @Nullable Output<String> deploymentMode;
        private @Nullable Output<BrokerEncryptionOptionsGetArgs> encryptionOptions;
        private @Nullable Output<String> engineType;
        private @Nullable Output<String> engineVersion;
        private @Nullable Output<String> hostInstanceType;
        private @Nullable Output<List<BrokerInstanceGetArgs>> instances;
        private @Nullable Output<BrokerLdapServerMetadataGetArgs> ldapServerMetadata;
        private @Nullable Output<BrokerLogsGetArgs> logs;
        private @Nullable Output<BrokerMaintenanceWindowStartTimeGetArgs> maintenanceWindowStartTime;
        private @Nullable Output<Boolean> publiclyAccessible;
        private @Nullable Output<List<String>> securityGroups;
        private @Nullable Output<String> storageType;
        private @Nullable Output<List<String>> subnetIds;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<List<BrokerUserGetArgs>> users;

        public Builder() {
    	      // Empty
        }

        public Builder(BrokerState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyImmediately = defaults.applyImmediately;
    	      this.arn = defaults.arn;
    	      this.authenticationStrategy = defaults.authenticationStrategy;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.brokerName = defaults.brokerName;
    	      this.configuration = defaults.configuration;
    	      this.deploymentMode = defaults.deploymentMode;
    	      this.encryptionOptions = defaults.encryptionOptions;
    	      this.engineType = defaults.engineType;
    	      this.engineVersion = defaults.engineVersion;
    	      this.hostInstanceType = defaults.hostInstanceType;
    	      this.instances = defaults.instances;
    	      this.ldapServerMetadata = defaults.ldapServerMetadata;
    	      this.logs = defaults.logs;
    	      this.maintenanceWindowStartTime = defaults.maintenanceWindowStartTime;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.securityGroups = defaults.securityGroups;
    	      this.storageType = defaults.storageType;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.users = defaults.users;
        }

        public Builder applyImmediately(@Nullable Output<Boolean> applyImmediately) {
            this.applyImmediately = applyImmediately;
            return this;
        }

        public Builder applyImmediately(@Nullable Boolean applyImmediately) {
            this.applyImmediately = Output.ofNullable(applyImmediately);
            return this;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }

        public Builder authenticationStrategy(@Nullable Output<String> authenticationStrategy) {
            this.authenticationStrategy = authenticationStrategy;
            return this;
        }

        public Builder authenticationStrategy(@Nullable String authenticationStrategy) {
            this.authenticationStrategy = Output.ofNullable(authenticationStrategy);
            return this;
        }

        public Builder autoMinorVersionUpgrade(@Nullable Output<Boolean> autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }

        public Builder autoMinorVersionUpgrade(@Nullable Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Output.ofNullable(autoMinorVersionUpgrade);
            return this;
        }

        public Builder brokerName(@Nullable Output<String> brokerName) {
            this.brokerName = brokerName;
            return this;
        }

        public Builder brokerName(@Nullable String brokerName) {
            this.brokerName = Output.ofNullable(brokerName);
            return this;
        }

        public Builder configuration(@Nullable Output<BrokerConfigurationGetArgs> configuration) {
            this.configuration = configuration;
            return this;
        }

        public Builder configuration(@Nullable BrokerConfigurationGetArgs configuration) {
            this.configuration = Output.ofNullable(configuration);
            return this;
        }

        public Builder deploymentMode(@Nullable Output<String> deploymentMode) {
            this.deploymentMode = deploymentMode;
            return this;
        }

        public Builder deploymentMode(@Nullable String deploymentMode) {
            this.deploymentMode = Output.ofNullable(deploymentMode);
            return this;
        }

        public Builder encryptionOptions(@Nullable Output<BrokerEncryptionOptionsGetArgs> encryptionOptions) {
            this.encryptionOptions = encryptionOptions;
            return this;
        }

        public Builder encryptionOptions(@Nullable BrokerEncryptionOptionsGetArgs encryptionOptions) {
            this.encryptionOptions = Output.ofNullable(encryptionOptions);
            return this;
        }

        public Builder engineType(@Nullable Output<String> engineType) {
            this.engineType = engineType;
            return this;
        }

        public Builder engineType(@Nullable String engineType) {
            this.engineType = Output.ofNullable(engineType);
            return this;
        }

        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = Output.ofNullable(engineVersion);
            return this;
        }

        public Builder hostInstanceType(@Nullable Output<String> hostInstanceType) {
            this.hostInstanceType = hostInstanceType;
            return this;
        }

        public Builder hostInstanceType(@Nullable String hostInstanceType) {
            this.hostInstanceType = Output.ofNullable(hostInstanceType);
            return this;
        }

        public Builder instances(@Nullable Output<List<BrokerInstanceGetArgs>> instances) {
            this.instances = instances;
            return this;
        }

        public Builder instances(@Nullable List<BrokerInstanceGetArgs> instances) {
            this.instances = Output.ofNullable(instances);
            return this;
        }

        public Builder ldapServerMetadata(@Nullable Output<BrokerLdapServerMetadataGetArgs> ldapServerMetadata) {
            this.ldapServerMetadata = ldapServerMetadata;
            return this;
        }

        public Builder ldapServerMetadata(@Nullable BrokerLdapServerMetadataGetArgs ldapServerMetadata) {
            this.ldapServerMetadata = Output.ofNullable(ldapServerMetadata);
            return this;
        }

        public Builder logs(@Nullable Output<BrokerLogsGetArgs> logs) {
            this.logs = logs;
            return this;
        }

        public Builder logs(@Nullable BrokerLogsGetArgs logs) {
            this.logs = Output.ofNullable(logs);
            return this;
        }

        public Builder maintenanceWindowStartTime(@Nullable Output<BrokerMaintenanceWindowStartTimeGetArgs> maintenanceWindowStartTime) {
            this.maintenanceWindowStartTime = maintenanceWindowStartTime;
            return this;
        }

        public Builder maintenanceWindowStartTime(@Nullable BrokerMaintenanceWindowStartTimeGetArgs maintenanceWindowStartTime) {
            this.maintenanceWindowStartTime = Output.ofNullable(maintenanceWindowStartTime);
            return this;
        }

        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }

        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = Output.ofNullable(publiclyAccessible);
            return this;
        }

        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }

        public Builder securityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = Output.ofNullable(securityGroups);
            return this;
        }

        public Builder storageType(@Nullable Output<String> storageType) {
            this.storageType = storageType;
            return this;
        }

        public Builder storageType(@Nullable String storageType) {
            this.storageType = Output.ofNullable(storageType);
            return this;
        }

        public Builder subnetIds(@Nullable Output<List<String>> subnetIds) {
            this.subnetIds = subnetIds;
            return this;
        }

        public Builder subnetIds(@Nullable List<String> subnetIds) {
            this.subnetIds = Output.ofNullable(subnetIds);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }

        public Builder users(@Nullable Output<List<BrokerUserGetArgs>> users) {
            this.users = users;
            return this;
        }

        public Builder users(@Nullable List<BrokerUserGetArgs> users) {
            this.users = Output.ofNullable(users);
            return this;
        }
        public BrokerState build() {
            return new BrokerState(applyImmediately, arn, authenticationStrategy, autoMinorVersionUpgrade, brokerName, configuration, deploymentMode, encryptionOptions, engineType, engineVersion, hostInstanceType, instances, ldapServerMetadata, logs, maintenanceWindowStartTime, publiclyAccessible, securityGroups, storageType, subnetIds, tags, tagsAll, users);
        }
    }
}
