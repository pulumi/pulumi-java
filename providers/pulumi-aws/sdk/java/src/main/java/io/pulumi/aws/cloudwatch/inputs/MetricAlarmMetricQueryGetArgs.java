// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch.inputs;

import io.pulumi.aws.cloudwatch.inputs.MetricAlarmMetricQueryMetricGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MetricAlarmMetricQueryGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricAlarmMetricQueryGetArgs Empty = new MetricAlarmMetricQueryGetArgs();

    /**
     * The ID of the account where the metrics are located, if this is a cross-account alarm.
     * 
     */
    @InputImport(name="accountId")
    private final @Nullable Input<String> accountId;

    public Input<String> getAccountId() {
        return this.accountId == null ? Input.empty() : this.accountId;
    }

    /**
     * The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
     * 
     */
    @InputImport(name="expression")
    private final @Nullable Input<String> expression;

    public Input<String> getExpression() {
        return this.expression == null ? Input.empty() : this.expression;
    }

    /**
     * A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
     * 
     */
    @InputImport(name="id", required=true)
    private final Input<String> id;

    public Input<String> getId() {
        return this.id;
    }

    /**
     * A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
     * 
     */
    @InputImport(name="label")
    private final @Nullable Input<String> label;

    public Input<String> getLabel() {
        return this.label == null ? Input.empty() : this.label;
    }

    /**
     * The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
     * 
     */
    @InputImport(name="metric")
    private final @Nullable Input<MetricAlarmMetricQueryMetricGetArgs> metric;

    public Input<MetricAlarmMetricQueryMetricGetArgs> getMetric() {
        return this.metric == null ? Input.empty() : this.metric;
    }

    /**
     * Specify exactly one `metric_query` to be `true` to use that `metric_query` result as the alarm.
     * 
     */
    @InputImport(name="returnData")
    private final @Nullable Input<Boolean> returnData;

    public Input<Boolean> getReturnData() {
        return this.returnData == null ? Input.empty() : this.returnData;
    }

    public MetricAlarmMetricQueryGetArgs(
        @Nullable Input<String> accountId,
        @Nullable Input<String> expression,
        Input<String> id,
        @Nullable Input<String> label,
        @Nullable Input<MetricAlarmMetricQueryMetricGetArgs> metric,
        @Nullable Input<Boolean> returnData) {
        this.accountId = accountId;
        this.expression = expression;
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.label = label;
        this.metric = metric;
        this.returnData = returnData;
    }

    private MetricAlarmMetricQueryGetArgs() {
        this.accountId = Input.empty();
        this.expression = Input.empty();
        this.id = Input.empty();
        this.label = Input.empty();
        this.metric = Input.empty();
        this.returnData = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricAlarmMetricQueryGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accountId;
        private @Nullable Input<String> expression;
        private Input<String> id;
        private @Nullable Input<String> label;
        private @Nullable Input<MetricAlarmMetricQueryMetricGetArgs> metric;
        private @Nullable Input<Boolean> returnData;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricAlarmMetricQueryGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.expression = defaults.expression;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.metric = defaults.metric;
    	      this.returnData = defaults.returnData;
        }

        public Builder setAccountId(@Nullable Input<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder setAccountId(@Nullable String accountId) {
            this.accountId = Input.ofNullable(accountId);
            return this;
        }

        public Builder setExpression(@Nullable Input<String> expression) {
            this.expression = expression;
            return this;
        }

        public Builder setExpression(@Nullable String expression) {
            this.expression = Input.ofNullable(expression);
            return this;
        }

        public Builder setId(Input<String> id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setId(String id) {
            this.id = Input.of(Objects.requireNonNull(id));
            return this;
        }

        public Builder setLabel(@Nullable Input<String> label) {
            this.label = label;
            return this;
        }

        public Builder setLabel(@Nullable String label) {
            this.label = Input.ofNullable(label);
            return this;
        }

        public Builder setMetric(@Nullable Input<MetricAlarmMetricQueryMetricGetArgs> metric) {
            this.metric = metric;
            return this;
        }

        public Builder setMetric(@Nullable MetricAlarmMetricQueryMetricGetArgs metric) {
            this.metric = Input.ofNullable(metric);
            return this;
        }

        public Builder setReturnData(@Nullable Input<Boolean> returnData) {
            this.returnData = returnData;
            return this;
        }

        public Builder setReturnData(@Nullable Boolean returnData) {
            this.returnData = Input.ofNullable(returnData);
            return this;
        }
        public MetricAlarmMetricQueryGetArgs build() {
            return new MetricAlarmMetricQueryGetArgs(accountId, expression, id, label, metric, returnData);
        }
    }
}
