// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appsync;

import io.pulumi.aws.appsync.inputs.ResolverCachingConfigArgs;
import io.pulumi.aws.appsync.inputs.ResolverPipelineConfigArgs;
import io.pulumi.aws.appsync.inputs.ResolverSyncConfigArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ResolverArgs extends io.pulumi.resources.ResourceArgs {

    public static final ResolverArgs Empty = new ResolverArgs();

    /**
     * The API ID for the GraphQL API.
     * 
     */
    @InputImport(name="apiId", required=true)
    private final Input<String> apiId;

    public Input<String> getApiId() {
        return this.apiId;
    }

    /**
     * The CachingConfig.
     * 
     */
    @InputImport(name="cachingConfig")
    private final @Nullable Input<ResolverCachingConfigArgs> cachingConfig;

    public Input<ResolverCachingConfigArgs> getCachingConfig() {
        return this.cachingConfig == null ? Input.empty() : this.cachingConfig;
    }

    /**
     * The DataSource name.
     * 
     */
    @InputImport(name="dataSource")
    private final @Nullable Input<String> dataSource;

    public Input<String> getDataSource() {
        return this.dataSource == null ? Input.empty() : this.dataSource;
    }

    /**
     * The field name from the schema defined in the GraphQL API.
     * 
     */
    @InputImport(name="field", required=true)
    private final Input<String> field;

    public Input<String> getField() {
        return this.field;
    }

    /**
     * The resolver type. Valid values are `UNIT` and `PIPELINE`.
     * 
     */
    @InputImport(name="kind")
    private final @Nullable Input<String> kind;

    public Input<String> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    /**
     * The maximum batching size for a resolver. Valid values are between `0` and `2000`.
     * 
     */
    @InputImport(name="maxBatchSize")
    private final @Nullable Input<Integer> maxBatchSize;

    public Input<Integer> getMaxBatchSize() {
        return this.maxBatchSize == null ? Input.empty() : this.maxBatchSize;
    }

    /**
     * The PipelineConfig.
     * 
     */
    @InputImport(name="pipelineConfig")
    private final @Nullable Input<ResolverPipelineConfigArgs> pipelineConfig;

    public Input<ResolverPipelineConfigArgs> getPipelineConfig() {
        return this.pipelineConfig == null ? Input.empty() : this.pipelineConfig;
    }

    /**
     * The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    @InputImport(name="requestTemplate")
    private final @Nullable Input<String> requestTemplate;

    public Input<String> getRequestTemplate() {
        return this.requestTemplate == null ? Input.empty() : this.requestTemplate;
    }

    /**
     * The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    @InputImport(name="responseTemplate")
    private final @Nullable Input<String> responseTemplate;

    public Input<String> getResponseTemplate() {
        return this.responseTemplate == null ? Input.empty() : this.responseTemplate;
    }

    /**
     * Describes a Sync configuration for a resolver. See Sync Config.
     * 
     */
    @InputImport(name="syncConfig")
    private final @Nullable Input<ResolverSyncConfigArgs> syncConfig;

    public Input<ResolverSyncConfigArgs> getSyncConfig() {
        return this.syncConfig == null ? Input.empty() : this.syncConfig;
    }

    /**
     * The type name from the schema defined in the GraphQL API.
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public ResolverArgs(
        Input<String> apiId,
        @Nullable Input<ResolverCachingConfigArgs> cachingConfig,
        @Nullable Input<String> dataSource,
        Input<String> field,
        @Nullable Input<String> kind,
        @Nullable Input<Integer> maxBatchSize,
        @Nullable Input<ResolverPipelineConfigArgs> pipelineConfig,
        @Nullable Input<String> requestTemplate,
        @Nullable Input<String> responseTemplate,
        @Nullable Input<ResolverSyncConfigArgs> syncConfig,
        Input<String> type) {
        this.apiId = Objects.requireNonNull(apiId, "expected parameter 'apiId' to be non-null");
        this.cachingConfig = cachingConfig;
        this.dataSource = dataSource;
        this.field = Objects.requireNonNull(field, "expected parameter 'field' to be non-null");
        this.kind = kind;
        this.maxBatchSize = maxBatchSize;
        this.pipelineConfig = pipelineConfig;
        this.requestTemplate = requestTemplate;
        this.responseTemplate = responseTemplate;
        this.syncConfig = syncConfig;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ResolverArgs() {
        this.apiId = Input.empty();
        this.cachingConfig = Input.empty();
        this.dataSource = Input.empty();
        this.field = Input.empty();
        this.kind = Input.empty();
        this.maxBatchSize = Input.empty();
        this.pipelineConfig = Input.empty();
        this.requestTemplate = Input.empty();
        this.responseTemplate = Input.empty();
        this.syncConfig = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> apiId;
        private @Nullable Input<ResolverCachingConfigArgs> cachingConfig;
        private @Nullable Input<String> dataSource;
        private Input<String> field;
        private @Nullable Input<String> kind;
        private @Nullable Input<Integer> maxBatchSize;
        private @Nullable Input<ResolverPipelineConfigArgs> pipelineConfig;
        private @Nullable Input<String> requestTemplate;
        private @Nullable Input<String> responseTemplate;
        private @Nullable Input<ResolverSyncConfigArgs> syncConfig;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ResolverArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiId = defaults.apiId;
    	      this.cachingConfig = defaults.cachingConfig;
    	      this.dataSource = defaults.dataSource;
    	      this.field = defaults.field;
    	      this.kind = defaults.kind;
    	      this.maxBatchSize = defaults.maxBatchSize;
    	      this.pipelineConfig = defaults.pipelineConfig;
    	      this.requestTemplate = defaults.requestTemplate;
    	      this.responseTemplate = defaults.responseTemplate;
    	      this.syncConfig = defaults.syncConfig;
    	      this.type = defaults.type;
        }

        public Builder setApiId(Input<String> apiId) {
            this.apiId = Objects.requireNonNull(apiId);
            return this;
        }

        public Builder setApiId(String apiId) {
            this.apiId = Input.of(Objects.requireNonNull(apiId));
            return this;
        }

        public Builder setCachingConfig(@Nullable Input<ResolverCachingConfigArgs> cachingConfig) {
            this.cachingConfig = cachingConfig;
            return this;
        }

        public Builder setCachingConfig(@Nullable ResolverCachingConfigArgs cachingConfig) {
            this.cachingConfig = Input.ofNullable(cachingConfig);
            return this;
        }

        public Builder setDataSource(@Nullable Input<String> dataSource) {
            this.dataSource = dataSource;
            return this;
        }

        public Builder setDataSource(@Nullable String dataSource) {
            this.dataSource = Input.ofNullable(dataSource);
            return this;
        }

        public Builder setField(Input<String> field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }

        public Builder setField(String field) {
            this.field = Input.of(Objects.requireNonNull(field));
            return this;
        }

        public Builder setKind(@Nullable Input<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder setKind(@Nullable String kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder setMaxBatchSize(@Nullable Input<Integer> maxBatchSize) {
            this.maxBatchSize = maxBatchSize;
            return this;
        }

        public Builder setMaxBatchSize(@Nullable Integer maxBatchSize) {
            this.maxBatchSize = Input.ofNullable(maxBatchSize);
            return this;
        }

        public Builder setPipelineConfig(@Nullable Input<ResolverPipelineConfigArgs> pipelineConfig) {
            this.pipelineConfig = pipelineConfig;
            return this;
        }

        public Builder setPipelineConfig(@Nullable ResolverPipelineConfigArgs pipelineConfig) {
            this.pipelineConfig = Input.ofNullable(pipelineConfig);
            return this;
        }

        public Builder setRequestTemplate(@Nullable Input<String> requestTemplate) {
            this.requestTemplate = requestTemplate;
            return this;
        }

        public Builder setRequestTemplate(@Nullable String requestTemplate) {
            this.requestTemplate = Input.ofNullable(requestTemplate);
            return this;
        }

        public Builder setResponseTemplate(@Nullable Input<String> responseTemplate) {
            this.responseTemplate = responseTemplate;
            return this;
        }

        public Builder setResponseTemplate(@Nullable String responseTemplate) {
            this.responseTemplate = Input.ofNullable(responseTemplate);
            return this;
        }

        public Builder setSyncConfig(@Nullable Input<ResolverSyncConfigArgs> syncConfig) {
            this.syncConfig = syncConfig;
            return this;
        }

        public Builder setSyncConfig(@Nullable ResolverSyncConfigArgs syncConfig) {
            this.syncConfig = Input.ofNullable(syncConfig);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }
        public ResolverArgs build() {
            return new ResolverArgs(apiId, cachingConfig, dataSource, field, kind, maxBatchSize, pipelineConfig, requestTemplate, responseTemplate, syncConfig, type);
        }
    }
}
