// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.iot.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateState extends io.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * Boolean flag to indicate if the certificate should be active
     * 
     */
    @InputImport(name="active")
    private final @Nullable Input<Boolean> active;

    public Input<Boolean> getActive() {
        return this.active == null ? Input.empty() : this.active;
    }

    /**
     * The ARN of the created certificate.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The certificate data, in PEM format.
     * 
     */
    @InputImport(name="certificatePem")
    private final @Nullable Input<String> certificatePem;

    public Input<String> getCertificatePem() {
        return this.certificatePem == null ? Input.empty() : this.certificatePem;
    }

    /**
     * The certificate signing request. Review
     * [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
     * for more information on generating a certificate from a certificate signing request (CSR).
     * If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
     * for more information on generating keys and a certificate.
     * 
     */
    @InputImport(name="csr")
    private final @Nullable Input<String> csr;

    public Input<String> getCsr() {
        return this.csr == null ? Input.empty() : this.csr;
    }

    /**
     * When no CSR is provided, the private key.
     * 
     */
    @InputImport(name="privateKey")
    private final @Nullable Input<String> privateKey;

    public Input<String> getPrivateKey() {
        return this.privateKey == null ? Input.empty() : this.privateKey;
    }

    /**
     * When no CSR is provided, the public key.
     * 
     */
    @InputImport(name="publicKey")
    private final @Nullable Input<String> publicKey;

    public Input<String> getPublicKey() {
        return this.publicKey == null ? Input.empty() : this.publicKey;
    }

    public CertificateState(
        @Nullable Input<Boolean> active,
        @Nullable Input<String> arn,
        @Nullable Input<String> certificatePem,
        @Nullable Input<String> csr,
        @Nullable Input<String> privateKey,
        @Nullable Input<String> publicKey) {
        this.active = active;
        this.arn = arn;
        this.certificatePem = certificatePem;
        this.csr = csr;
        this.privateKey = privateKey;
        this.publicKey = publicKey;
    }

    private CertificateState() {
        this.active = Input.empty();
        this.arn = Input.empty();
        this.certificatePem = Input.empty();
        this.csr = Input.empty();
        this.privateKey = Input.empty();
        this.publicKey = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> active;
        private @Nullable Input<String> arn;
        private @Nullable Input<String> certificatePem;
        private @Nullable Input<String> csr;
        private @Nullable Input<String> privateKey;
        private @Nullable Input<String> publicKey;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.arn = defaults.arn;
    	      this.certificatePem = defaults.certificatePem;
    	      this.csr = defaults.csr;
    	      this.privateKey = defaults.privateKey;
    	      this.publicKey = defaults.publicKey;
        }

        public Builder setActive(@Nullable Input<Boolean> active) {
            this.active = active;
            return this;
        }

        public Builder setActive(@Nullable Boolean active) {
            this.active = Input.ofNullable(active);
            return this;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setCertificatePem(@Nullable Input<String> certificatePem) {
            this.certificatePem = certificatePem;
            return this;
        }

        public Builder setCertificatePem(@Nullable String certificatePem) {
            this.certificatePem = Input.ofNullable(certificatePem);
            return this;
        }

        public Builder setCsr(@Nullable Input<String> csr) {
            this.csr = csr;
            return this;
        }

        public Builder setCsr(@Nullable String csr) {
            this.csr = Input.ofNullable(csr);
            return this;
        }

        public Builder setPrivateKey(@Nullable Input<String> privateKey) {
            this.privateKey = privateKey;
            return this;
        }

        public Builder setPrivateKey(@Nullable String privateKey) {
            this.privateKey = Input.ofNullable(privateKey);
            return this;
        }

        public Builder setPublicKey(@Nullable Input<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public Builder setPublicKey(@Nullable String publicKey) {
            this.publicKey = Input.ofNullable(publicKey);
            return this;
        }
        public CertificateState build() {
            return new CertificateState(active, arn, certificatePem, csr, privateKey, publicKey);
        }
    }
}
