// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codedeploy.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeploymentGroupDeploymentStyleArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeploymentGroupDeploymentStyleArgs Empty = new DeploymentGroupDeploymentStyleArgs();

    /**
     * Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
     * 
     */
    @Import(name="deploymentOption")
      private final @Nullable Output<String> deploymentOption;

    public Output<String> getDeploymentOption() {
        return this.deploymentOption == null ? Codegen.empty() : this.deploymentOption;
    }

    /**
     * Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
     * 
     */
    @Import(name="deploymentType")
      private final @Nullable Output<String> deploymentType;

    public Output<String> getDeploymentType() {
        return this.deploymentType == null ? Codegen.empty() : this.deploymentType;
    }

    public DeploymentGroupDeploymentStyleArgs(
        @Nullable Output<String> deploymentOption,
        @Nullable Output<String> deploymentType) {
        this.deploymentOption = deploymentOption;
        this.deploymentType = deploymentType;
    }

    private DeploymentGroupDeploymentStyleArgs() {
        this.deploymentOption = Codegen.empty();
        this.deploymentType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentGroupDeploymentStyleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> deploymentOption;
        private @Nullable Output<String> deploymentType;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentGroupDeploymentStyleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deploymentOption = defaults.deploymentOption;
    	      this.deploymentType = defaults.deploymentType;
        }

        public Builder deploymentOption(@Nullable Output<String> deploymentOption) {
            this.deploymentOption = deploymentOption;
            return this;
        }
        public Builder deploymentOption(@Nullable String deploymentOption) {
            this.deploymentOption = Codegen.ofNullable(deploymentOption);
            return this;
        }
        public Builder deploymentType(@Nullable Output<String> deploymentType) {
            this.deploymentType = deploymentType;
            return this;
        }
        public Builder deploymentType(@Nullable String deploymentType) {
            this.deploymentType = Codegen.ofNullable(deploymentType);
            return this;
        }        public DeploymentGroupDeploymentStyleArgs build() {
            return new DeploymentGroupDeploymentStyleArgs(deploymentOption, deploymentType);
        }
    }
}
