// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.s3control;

import io.pulumi.aws.s3control.inputs.BucketLifecycleConfigurationRuleArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class BucketLifecycleConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleConfigurationArgs Empty = new BucketLifecycleConfigurationArgs();

    /**
     * Amazon Resource Name (ARN) of the bucket.
     * 
     */
    @InputImport(name="bucket", required=true)
      private final Input<String> bucket;

    public Input<String> getBucket() {
        return this.bucket;
    }

    /**
     * Configuration block(s) containing lifecycle rules for the bucket.
     * 
     */
    @InputImport(name="rules", required=true)
      private final Input<List<BucketLifecycleConfigurationRuleArgs>> rules;

    public Input<List<BucketLifecycleConfigurationRuleArgs>> getRules() {
        return this.rules;
    }

    public BucketLifecycleConfigurationArgs(
        Input<String> bucket,
        Input<List<BucketLifecycleConfigurationRuleArgs>> rules) {
        this.bucket = Objects.requireNonNull(bucket, "expected parameter 'bucket' to be non-null");
        this.rules = Objects.requireNonNull(rules, "expected parameter 'rules' to be non-null");
    }

    private BucketLifecycleConfigurationArgs() {
        this.bucket = Input.empty();
        this.rules = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> bucket;
        private Input<List<BucketLifecycleConfigurationRuleArgs>> rules;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketLifecycleConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.rules = defaults.rules;
        }

        public Builder setBucket(Input<String> bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }

        public Builder setBucket(String bucket) {
            this.bucket = Input.of(Objects.requireNonNull(bucket));
            return this;
        }

        public Builder setRules(Input<List<BucketLifecycleConfigurationRuleArgs>> rules) {
            this.rules = Objects.requireNonNull(rules);
            return this;
        }

        public Builder setRules(List<BucketLifecycleConfigurationRuleArgs> rules) {
            this.rules = Input.of(Objects.requireNonNull(rules));
            return this;
        }
        public BucketLifecycleConfigurationArgs build() {
            return new BucketLifecycleConfigurationArgs(bucket, rules);
        }
    }
}
