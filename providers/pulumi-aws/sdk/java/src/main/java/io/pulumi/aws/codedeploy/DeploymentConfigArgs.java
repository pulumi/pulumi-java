// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codedeploy;

import io.pulumi.aws.codedeploy.inputs.DeploymentConfigMinimumHealthyHostsArgs;
import io.pulumi.aws.codedeploy.inputs.DeploymentConfigTrafficRoutingConfigArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeploymentConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeploymentConfigArgs Empty = new DeploymentConfigArgs();

    /**
     * The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
     * 
     */
    @InputImport(name="computePlatform")
      private final @Nullable Input<String> computePlatform;

    public Input<String> getComputePlatform() {
        return this.computePlatform == null ? Input.empty() : this.computePlatform;
    }

    /**
     * The name of the deployment config.
     * 
     */
    @InputImport(name="deploymentConfigName", required=true)
      private final Input<String> deploymentConfigName;

    public Input<String> getDeploymentConfigName() {
        return this.deploymentConfigName;
    }

    /**
     * A minimum_healthy_hosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
     * 
     */
    @InputImport(name="minimumHealthyHosts")
      private final @Nullable Input<DeploymentConfigMinimumHealthyHostsArgs> minimumHealthyHosts;

    public Input<DeploymentConfigMinimumHealthyHostsArgs> getMinimumHealthyHosts() {
        return this.minimumHealthyHosts == null ? Input.empty() : this.minimumHealthyHosts;
    }

    /**
     * A traffic_routing_config block. Traffic Routing Config is documented below.
     * 
     */
    @InputImport(name="trafficRoutingConfig")
      private final @Nullable Input<DeploymentConfigTrafficRoutingConfigArgs> trafficRoutingConfig;

    public Input<DeploymentConfigTrafficRoutingConfigArgs> getTrafficRoutingConfig() {
        return this.trafficRoutingConfig == null ? Input.empty() : this.trafficRoutingConfig;
    }

    public DeploymentConfigArgs(
        @Nullable Input<String> computePlatform,
        Input<String> deploymentConfigName,
        @Nullable Input<DeploymentConfigMinimumHealthyHostsArgs> minimumHealthyHosts,
        @Nullable Input<DeploymentConfigTrafficRoutingConfigArgs> trafficRoutingConfig) {
        this.computePlatform = computePlatform;
        this.deploymentConfigName = Objects.requireNonNull(deploymentConfigName, "expected parameter 'deploymentConfigName' to be non-null");
        this.minimumHealthyHosts = minimumHealthyHosts;
        this.trafficRoutingConfig = trafficRoutingConfig;
    }

    private DeploymentConfigArgs() {
        this.computePlatform = Input.empty();
        this.deploymentConfigName = Input.empty();
        this.minimumHealthyHosts = Input.empty();
        this.trafficRoutingConfig = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> computePlatform;
        private Input<String> deploymentConfigName;
        private @Nullable Input<DeploymentConfigMinimumHealthyHostsArgs> minimumHealthyHosts;
        private @Nullable Input<DeploymentConfigTrafficRoutingConfigArgs> trafficRoutingConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computePlatform = defaults.computePlatform;
    	      this.deploymentConfigName = defaults.deploymentConfigName;
    	      this.minimumHealthyHosts = defaults.minimumHealthyHosts;
    	      this.trafficRoutingConfig = defaults.trafficRoutingConfig;
        }

        public Builder setComputePlatform(@Nullable Input<String> computePlatform) {
            this.computePlatform = computePlatform;
            return this;
        }

        public Builder setComputePlatform(@Nullable String computePlatform) {
            this.computePlatform = Input.ofNullable(computePlatform);
            return this;
        }

        public Builder setDeploymentConfigName(Input<String> deploymentConfigName) {
            this.deploymentConfigName = Objects.requireNonNull(deploymentConfigName);
            return this;
        }

        public Builder setDeploymentConfigName(String deploymentConfigName) {
            this.deploymentConfigName = Input.of(Objects.requireNonNull(deploymentConfigName));
            return this;
        }

        public Builder setMinimumHealthyHosts(@Nullable Input<DeploymentConfigMinimumHealthyHostsArgs> minimumHealthyHosts) {
            this.minimumHealthyHosts = minimumHealthyHosts;
            return this;
        }

        public Builder setMinimumHealthyHosts(@Nullable DeploymentConfigMinimumHealthyHostsArgs minimumHealthyHosts) {
            this.minimumHealthyHosts = Input.ofNullable(minimumHealthyHosts);
            return this;
        }

        public Builder setTrafficRoutingConfig(@Nullable Input<DeploymentConfigTrafficRoutingConfigArgs> trafficRoutingConfig) {
            this.trafficRoutingConfig = trafficRoutingConfig;
            return this;
        }

        public Builder setTrafficRoutingConfig(@Nullable DeploymentConfigTrafficRoutingConfigArgs trafficRoutingConfig) {
            this.trafficRoutingConfig = Input.ofNullable(trafficRoutingConfig);
            return this;
        }
        public DeploymentConfigArgs build() {
            return new DeploymentConfigArgs(computePlatform, deploymentConfigName, minimumHealthyHosts, trafficRoutingConfig);
        }
    }
}
