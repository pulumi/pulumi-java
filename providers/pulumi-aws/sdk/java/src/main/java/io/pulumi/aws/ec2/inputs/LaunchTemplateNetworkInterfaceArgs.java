// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LaunchTemplateNetworkInterfaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final LaunchTemplateNetworkInterfaceArgs Empty = new LaunchTemplateNetworkInterfaceArgs();

    /**
     * Associate a Carrier IP address with `eth0` for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. Boolean value.
     * 
     */
    @InputImport(name="associateCarrierIpAddress")
      private final @Nullable Input<String> associateCarrierIpAddress;

    public Input<String> getAssociateCarrierIpAddress() {
        return this.associateCarrierIpAddress == null ? Input.empty() : this.associateCarrierIpAddress;
    }

    /**
     * Associate a public ip address with the network interface.  Boolean value.
     * 
     */
    @InputImport(name="associatePublicIpAddress")
      private final @Nullable Input<String> associatePublicIpAddress;

    public Input<String> getAssociatePublicIpAddress() {
        return this.associatePublicIpAddress == null ? Input.empty() : this.associatePublicIpAddress;
    }

    /**
     * Whether the network interface should be destroyed on instance termination. Defaults to `false` if not set.
     * 
     */
    @InputImport(name="deleteOnTermination")
      private final @Nullable Input<String> deleteOnTermination;

    public Input<String> getDeleteOnTermination() {
        return this.deleteOnTermination == null ? Input.empty() : this.deleteOnTermination;
    }

    /**
     * Description of the network interface.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The integer index of the network interface attachment.
     * 
     */
    @InputImport(name="deviceIndex")
      private final @Nullable Input<Integer> deviceIndex;

    public Input<Integer> getDeviceIndex() {
        return this.deviceIndex == null ? Input.empty() : this.deviceIndex;
    }

    /**
     * The type of network interface. To create an Elastic Fabric Adapter (EFA), specify `efa`.
     * 
     */
    @InputImport(name="interfaceType")
      private final @Nullable Input<String> interfaceType;

    public Input<String> getInterfaceType() {
        return this.interfaceType == null ? Input.empty() : this.interfaceType;
    }

    /**
     * The number of secondary private IPv4 addresses to assign to a network interface. Conflicts with `ipv4_addresses`
     * 
     */
    @InputImport(name="ipv4AddressCount")
      private final @Nullable Input<Integer> ipv4AddressCount;

    public Input<Integer> getIpv4AddressCount() {
        return this.ipv4AddressCount == null ? Input.empty() : this.ipv4AddressCount;
    }

    /**
     * One or more private IPv4 addresses to associate. Conflicts with `ipv4_address_count`
     * 
     */
    @InputImport(name="ipv4Addresses")
      private final @Nullable Input<List<String>> ipv4Addresses;

    public Input<List<String>> getIpv4Addresses() {
        return this.ipv4Addresses == null ? Input.empty() : this.ipv4Addresses;
    }

    /**
     * The number of IPv6 addresses to assign to a network interface. Conflicts with `ipv6_addresses`
     * 
     */
    @InputImport(name="ipv6AddressCount")
      private final @Nullable Input<Integer> ipv6AddressCount;

    public Input<Integer> getIpv6AddressCount() {
        return this.ipv6AddressCount == null ? Input.empty() : this.ipv6AddressCount;
    }

    /**
     * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Conflicts with `ipv6_address_count`
     * 
     */
    @InputImport(name="ipv6Addresses")
      private final @Nullable Input<List<String>> ipv6Addresses;

    public Input<List<String>> getIpv6Addresses() {
        return this.ipv6Addresses == null ? Input.empty() : this.ipv6Addresses;
    }

    /**
     * The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
     * 
     */
    @InputImport(name="networkCardIndex")
      private final @Nullable Input<Integer> networkCardIndex;

    public Input<Integer> getNetworkCardIndex() {
        return this.networkCardIndex == null ? Input.empty() : this.networkCardIndex;
    }

    /**
     * The ID of the network interface to attach.
     * 
     */
    @InputImport(name="networkInterfaceId")
      private final @Nullable Input<String> networkInterfaceId;

    public Input<String> getNetworkInterfaceId() {
        return this.networkInterfaceId == null ? Input.empty() : this.networkInterfaceId;
    }

    /**
     * The primary private IPv4 address.
     * 
     */
    @InputImport(name="privateIpAddress")
      private final @Nullable Input<String> privateIpAddress;

    public Input<String> getPrivateIpAddress() {
        return this.privateIpAddress == null ? Input.empty() : this.privateIpAddress;
    }

    /**
     * A list of security group IDs to associate.
     * 
     */
    @InputImport(name="securityGroups")
      private final @Nullable Input<List<String>> securityGroups;

    public Input<List<String>> getSecurityGroups() {
        return this.securityGroups == null ? Input.empty() : this.securityGroups;
    }

    /**
     * The VPC Subnet ID to associate.
     * 
     */
    @InputImport(name="subnetId")
      private final @Nullable Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId == null ? Input.empty() : this.subnetId;
    }

    public LaunchTemplateNetworkInterfaceArgs(
        @Nullable Input<String> associateCarrierIpAddress,
        @Nullable Input<String> associatePublicIpAddress,
        @Nullable Input<String> deleteOnTermination,
        @Nullable Input<String> description,
        @Nullable Input<Integer> deviceIndex,
        @Nullable Input<String> interfaceType,
        @Nullable Input<Integer> ipv4AddressCount,
        @Nullable Input<List<String>> ipv4Addresses,
        @Nullable Input<Integer> ipv6AddressCount,
        @Nullable Input<List<String>> ipv6Addresses,
        @Nullable Input<Integer> networkCardIndex,
        @Nullable Input<String> networkInterfaceId,
        @Nullable Input<String> privateIpAddress,
        @Nullable Input<List<String>> securityGroups,
        @Nullable Input<String> subnetId) {
        this.associateCarrierIpAddress = associateCarrierIpAddress;
        this.associatePublicIpAddress = associatePublicIpAddress;
        this.deleteOnTermination = deleteOnTermination;
        this.description = description;
        this.deviceIndex = deviceIndex;
        this.interfaceType = interfaceType;
        this.ipv4AddressCount = ipv4AddressCount;
        this.ipv4Addresses = ipv4Addresses;
        this.ipv6AddressCount = ipv6AddressCount;
        this.ipv6Addresses = ipv6Addresses;
        this.networkCardIndex = networkCardIndex;
        this.networkInterfaceId = networkInterfaceId;
        this.privateIpAddress = privateIpAddress;
        this.securityGroups = securityGroups;
        this.subnetId = subnetId;
    }

    private LaunchTemplateNetworkInterfaceArgs() {
        this.associateCarrierIpAddress = Input.empty();
        this.associatePublicIpAddress = Input.empty();
        this.deleteOnTermination = Input.empty();
        this.description = Input.empty();
        this.deviceIndex = Input.empty();
        this.interfaceType = Input.empty();
        this.ipv4AddressCount = Input.empty();
        this.ipv4Addresses = Input.empty();
        this.ipv6AddressCount = Input.empty();
        this.ipv6Addresses = Input.empty();
        this.networkCardIndex = Input.empty();
        this.networkInterfaceId = Input.empty();
        this.privateIpAddress = Input.empty();
        this.securityGroups = Input.empty();
        this.subnetId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LaunchTemplateNetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> associateCarrierIpAddress;
        private @Nullable Input<String> associatePublicIpAddress;
        private @Nullable Input<String> deleteOnTermination;
        private @Nullable Input<String> description;
        private @Nullable Input<Integer> deviceIndex;
        private @Nullable Input<String> interfaceType;
        private @Nullable Input<Integer> ipv4AddressCount;
        private @Nullable Input<List<String>> ipv4Addresses;
        private @Nullable Input<Integer> ipv6AddressCount;
        private @Nullable Input<List<String>> ipv6Addresses;
        private @Nullable Input<Integer> networkCardIndex;
        private @Nullable Input<String> networkInterfaceId;
        private @Nullable Input<String> privateIpAddress;
        private @Nullable Input<List<String>> securityGroups;
        private @Nullable Input<String> subnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(LaunchTemplateNetworkInterfaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associateCarrierIpAddress = defaults.associateCarrierIpAddress;
    	      this.associatePublicIpAddress = defaults.associatePublicIpAddress;
    	      this.deleteOnTermination = defaults.deleteOnTermination;
    	      this.description = defaults.description;
    	      this.deviceIndex = defaults.deviceIndex;
    	      this.interfaceType = defaults.interfaceType;
    	      this.ipv4AddressCount = defaults.ipv4AddressCount;
    	      this.ipv4Addresses = defaults.ipv4Addresses;
    	      this.ipv6AddressCount = defaults.ipv6AddressCount;
    	      this.ipv6Addresses = defaults.ipv6Addresses;
    	      this.networkCardIndex = defaults.networkCardIndex;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.securityGroups = defaults.securityGroups;
    	      this.subnetId = defaults.subnetId;
        }

        public Builder setAssociateCarrierIpAddress(@Nullable Input<String> associateCarrierIpAddress) {
            this.associateCarrierIpAddress = associateCarrierIpAddress;
            return this;
        }

        public Builder setAssociateCarrierIpAddress(@Nullable String associateCarrierIpAddress) {
            this.associateCarrierIpAddress = Input.ofNullable(associateCarrierIpAddress);
            return this;
        }

        public Builder setAssociatePublicIpAddress(@Nullable Input<String> associatePublicIpAddress) {
            this.associatePublicIpAddress = associatePublicIpAddress;
            return this;
        }

        public Builder setAssociatePublicIpAddress(@Nullable String associatePublicIpAddress) {
            this.associatePublicIpAddress = Input.ofNullable(associatePublicIpAddress);
            return this;
        }

        public Builder setDeleteOnTermination(@Nullable Input<String> deleteOnTermination) {
            this.deleteOnTermination = deleteOnTermination;
            return this;
        }

        public Builder setDeleteOnTermination(@Nullable String deleteOnTermination) {
            this.deleteOnTermination = Input.ofNullable(deleteOnTermination);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDeviceIndex(@Nullable Input<Integer> deviceIndex) {
            this.deviceIndex = deviceIndex;
            return this;
        }

        public Builder setDeviceIndex(@Nullable Integer deviceIndex) {
            this.deviceIndex = Input.ofNullable(deviceIndex);
            return this;
        }

        public Builder setInterfaceType(@Nullable Input<String> interfaceType) {
            this.interfaceType = interfaceType;
            return this;
        }

        public Builder setInterfaceType(@Nullable String interfaceType) {
            this.interfaceType = Input.ofNullable(interfaceType);
            return this;
        }

        public Builder setIpv4AddressCount(@Nullable Input<Integer> ipv4AddressCount) {
            this.ipv4AddressCount = ipv4AddressCount;
            return this;
        }

        public Builder setIpv4AddressCount(@Nullable Integer ipv4AddressCount) {
            this.ipv4AddressCount = Input.ofNullable(ipv4AddressCount);
            return this;
        }

        public Builder setIpv4Addresses(@Nullable Input<List<String>> ipv4Addresses) {
            this.ipv4Addresses = ipv4Addresses;
            return this;
        }

        public Builder setIpv4Addresses(@Nullable List<String> ipv4Addresses) {
            this.ipv4Addresses = Input.ofNullable(ipv4Addresses);
            return this;
        }

        public Builder setIpv6AddressCount(@Nullable Input<Integer> ipv6AddressCount) {
            this.ipv6AddressCount = ipv6AddressCount;
            return this;
        }

        public Builder setIpv6AddressCount(@Nullable Integer ipv6AddressCount) {
            this.ipv6AddressCount = Input.ofNullable(ipv6AddressCount);
            return this;
        }

        public Builder setIpv6Addresses(@Nullable Input<List<String>> ipv6Addresses) {
            this.ipv6Addresses = ipv6Addresses;
            return this;
        }

        public Builder setIpv6Addresses(@Nullable List<String> ipv6Addresses) {
            this.ipv6Addresses = Input.ofNullable(ipv6Addresses);
            return this;
        }

        public Builder setNetworkCardIndex(@Nullable Input<Integer> networkCardIndex) {
            this.networkCardIndex = networkCardIndex;
            return this;
        }

        public Builder setNetworkCardIndex(@Nullable Integer networkCardIndex) {
            this.networkCardIndex = Input.ofNullable(networkCardIndex);
            return this;
        }

        public Builder setNetworkInterfaceId(@Nullable Input<String> networkInterfaceId) {
            this.networkInterfaceId = networkInterfaceId;
            return this;
        }

        public Builder setNetworkInterfaceId(@Nullable String networkInterfaceId) {
            this.networkInterfaceId = Input.ofNullable(networkInterfaceId);
            return this;
        }

        public Builder setPrivateIpAddress(@Nullable Input<String> privateIpAddress) {
            this.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder setPrivateIpAddress(@Nullable String privateIpAddress) {
            this.privateIpAddress = Input.ofNullable(privateIpAddress);
            return this;
        }

        public Builder setSecurityGroups(@Nullable Input<List<String>> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }

        public Builder setSecurityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = Input.ofNullable(securityGroups);
            return this;
        }

        public Builder setSubnetId(@Nullable Input<String> subnetId) {
            this.subnetId = subnetId;
            return this;
        }

        public Builder setSubnetId(@Nullable String subnetId) {
            this.subnetId = Input.ofNullable(subnetId);
            return this;
        }
        public LaunchTemplateNetworkInterfaceArgs build() {
            return new LaunchTemplateNetworkInterfaceArgs(associateCarrierIpAddress, associatePublicIpAddress, deleteOnTermination, description, deviceIndex, interfaceType, ipv4AddressCount, ipv4Addresses, ipv6AddressCount, ipv6Addresses, networkCardIndex, networkInterfaceId, privateIpAddress, securityGroups, subnetId);
        }
    }
}
