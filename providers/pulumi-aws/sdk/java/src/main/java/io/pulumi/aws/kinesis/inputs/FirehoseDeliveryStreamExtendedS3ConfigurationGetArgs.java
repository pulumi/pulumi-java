// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesis.inputs;

import io.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsGetArgs;
import io.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationGetArgs;
import io.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationGetArgs;
import io.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationGetArgs;
import io.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamExtendedS3ConfigurationGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final FirehoseDeliveryStreamExtendedS3ConfigurationGetArgs Empty = new FirehoseDeliveryStreamExtendedS3ConfigurationGetArgs();

    /**
     * The ARN of the S3 bucket
     * 
     */
    @Import(name="bucketArn", required=true)
      private final Output<String> bucketArn;

    public Output<String> getBucketArn() {
        return this.bucketArn;
    }

    /**
     * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
     * 
     */
    @Import(name="bufferInterval")
      private final @Nullable Output<Integer> bufferInterval;

    public Output<Integer> getBufferInterval() {
        return this.bufferInterval == null ? Output.empty() : this.bufferInterval;
    }

    /**
     * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
     * We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
     * 
     */
    @Import(name="bufferSize")
      private final @Nullable Output<Integer> bufferSize;

    public Output<Integer> getBufferSize() {
        return this.bufferSize == null ? Output.empty() : this.bufferSize;
    }

    /**
     * The CloudWatch Logging Options for the delivery stream. More details are given below
     * 
     */
    @Import(name="cloudwatchLoggingOptions")
      private final @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions;

    public Output<FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsGetArgs> getCloudwatchLoggingOptions() {
        return this.cloudwatchLoggingOptions == null ? Output.empty() : this.cloudwatchLoggingOptions;
    }

    /**
     * The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
     * 
     */
    @Import(name="compressionFormat")
      private final @Nullable Output<String> compressionFormat;

    public Output<String> getCompressionFormat() {
        return this.compressionFormat == null ? Output.empty() : this.compressionFormat;
    }

    /**
     * Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. More details given below.
     * 
     */
    @Import(name="dataFormatConversionConfiguration")
      private final @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationGetArgs> dataFormatConversionConfiguration;

    public Output<FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationGetArgs> getDataFormatConversionConfiguration() {
        return this.dataFormatConversionConfiguration == null ? Output.empty() : this.dataFormatConversionConfiguration;
    }

    @Import(name="dynamicPartitioningConfiguration")
      private final @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationGetArgs> dynamicPartitioningConfiguration;

    public Output<FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationGetArgs> getDynamicPartitioningConfiguration() {
        return this.dynamicPartitioningConfiguration == null ? Output.empty() : this.dynamicPartitioningConfiguration;
    }

    /**
     * Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
     * 
     */
    @Import(name="errorOutputPrefix")
      private final @Nullable Output<String> errorOutputPrefix;

    public Output<String> getErrorOutputPrefix() {
        return this.errorOutputPrefix == null ? Output.empty() : this.errorOutputPrefix;
    }

    /**
     * Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
     * be used.
     * 
     */
    @Import(name="kmsKeyArn")
      private final @Nullable Output<String> kmsKeyArn;

    public Output<String> getKmsKeyArn() {
        return this.kmsKeyArn == null ? Output.empty() : this.kmsKeyArn;
    }

    /**
     * The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
     * 
     */
    @Import(name="prefix")
      private final @Nullable Output<String> prefix;

    public Output<String> getPrefix() {
        return this.prefix == null ? Output.empty() : this.prefix;
    }

    /**
     * The data processing configuration.  More details are given below.
     * 
     */
    @Import(name="processingConfiguration")
      private final @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationGetArgs> processingConfiguration;

    public Output<FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationGetArgs> getProcessingConfiguration() {
        return this.processingConfiguration == null ? Output.empty() : this.processingConfiguration;
    }

    /**
     * The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
     * 
     */
    @Import(name="roleArn", required=true)
      private final Output<String> roleArn;

    public Output<String> getRoleArn() {
        return this.roleArn;
    }

    /**
     * The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
     * 
     */
    @Import(name="s3BackupConfiguration")
      private final @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs> s3BackupConfiguration;

    public Output<FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs> getS3BackupConfiguration() {
        return this.s3BackupConfiguration == null ? Output.empty() : this.s3BackupConfiguration;
    }

    /**
     * The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
     * 
     */
    @Import(name="s3BackupMode")
      private final @Nullable Output<String> s3BackupMode;

    public Output<String> getS3BackupMode() {
        return this.s3BackupMode == null ? Output.empty() : this.s3BackupMode;
    }

    public FirehoseDeliveryStreamExtendedS3ConfigurationGetArgs(
        Output<String> bucketArn,
        @Nullable Output<Integer> bufferInterval,
        @Nullable Output<Integer> bufferSize,
        @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions,
        @Nullable Output<String> compressionFormat,
        @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationGetArgs> dataFormatConversionConfiguration,
        @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationGetArgs> dynamicPartitioningConfiguration,
        @Nullable Output<String> errorOutputPrefix,
        @Nullable Output<String> kmsKeyArn,
        @Nullable Output<String> prefix,
        @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationGetArgs> processingConfiguration,
        Output<String> roleArn,
        @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs> s3BackupConfiguration,
        @Nullable Output<String> s3BackupMode) {
        this.bucketArn = Objects.requireNonNull(bucketArn, "expected parameter 'bucketArn' to be non-null");
        this.bufferInterval = bufferInterval;
        this.bufferSize = bufferSize;
        this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
        this.compressionFormat = compressionFormat;
        this.dataFormatConversionConfiguration = dataFormatConversionConfiguration;
        this.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration;
        this.errorOutputPrefix = errorOutputPrefix;
        this.kmsKeyArn = kmsKeyArn;
        this.prefix = prefix;
        this.processingConfiguration = processingConfiguration;
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.s3BackupConfiguration = s3BackupConfiguration;
        this.s3BackupMode = s3BackupMode;
    }

    private FirehoseDeliveryStreamExtendedS3ConfigurationGetArgs() {
        this.bucketArn = Output.empty();
        this.bufferInterval = Output.empty();
        this.bufferSize = Output.empty();
        this.cloudwatchLoggingOptions = Output.empty();
        this.compressionFormat = Output.empty();
        this.dataFormatConversionConfiguration = Output.empty();
        this.dynamicPartitioningConfiguration = Output.empty();
        this.errorOutputPrefix = Output.empty();
        this.kmsKeyArn = Output.empty();
        this.prefix = Output.empty();
        this.processingConfiguration = Output.empty();
        this.roleArn = Output.empty();
        this.s3BackupConfiguration = Output.empty();
        this.s3BackupMode = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirehoseDeliveryStreamExtendedS3ConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> bucketArn;
        private @Nullable Output<Integer> bufferInterval;
        private @Nullable Output<Integer> bufferSize;
        private @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions;
        private @Nullable Output<String> compressionFormat;
        private @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationGetArgs> dataFormatConversionConfiguration;
        private @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationGetArgs> dynamicPartitioningConfiguration;
        private @Nullable Output<String> errorOutputPrefix;
        private @Nullable Output<String> kmsKeyArn;
        private @Nullable Output<String> prefix;
        private @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationGetArgs> processingConfiguration;
        private Output<String> roleArn;
        private @Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs> s3BackupConfiguration;
        private @Nullable Output<String> s3BackupMode;

        public Builder() {
    	      // Empty
        }

        public Builder(FirehoseDeliveryStreamExtendedS3ConfigurationGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketArn = defaults.bucketArn;
    	      this.bufferInterval = defaults.bufferInterval;
    	      this.bufferSize = defaults.bufferSize;
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.compressionFormat = defaults.compressionFormat;
    	      this.dataFormatConversionConfiguration = defaults.dataFormatConversionConfiguration;
    	      this.dynamicPartitioningConfiguration = defaults.dynamicPartitioningConfiguration;
    	      this.errorOutputPrefix = defaults.errorOutputPrefix;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.prefix = defaults.prefix;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.roleArn = defaults.roleArn;
    	      this.s3BackupConfiguration = defaults.s3BackupConfiguration;
    	      this.s3BackupMode = defaults.s3BackupMode;
        }

        public Builder bucketArn(Output<String> bucketArn) {
            this.bucketArn = Objects.requireNonNull(bucketArn);
            return this;
        }
        public Builder bucketArn(String bucketArn) {
            this.bucketArn = Output.of(Objects.requireNonNull(bucketArn));
            return this;
        }
        public Builder bufferInterval(@Nullable Output<Integer> bufferInterval) {
            this.bufferInterval = bufferInterval;
            return this;
        }
        public Builder bufferInterval(@Nullable Integer bufferInterval) {
            this.bufferInterval = Output.ofNullable(bufferInterval);
            return this;
        }
        public Builder bufferSize(@Nullable Output<Integer> bufferSize) {
            this.bufferSize = bufferSize;
            return this;
        }
        public Builder bufferSize(@Nullable Integer bufferSize) {
            this.bufferSize = Output.ofNullable(bufferSize);
            return this;
        }
        public Builder cloudwatchLoggingOptions(@Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }
        public Builder cloudwatchLoggingOptions(@Nullable FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsGetArgs cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = Output.ofNullable(cloudwatchLoggingOptions);
            return this;
        }
        public Builder compressionFormat(@Nullable Output<String> compressionFormat) {
            this.compressionFormat = compressionFormat;
            return this;
        }
        public Builder compressionFormat(@Nullable String compressionFormat) {
            this.compressionFormat = Output.ofNullable(compressionFormat);
            return this;
        }
        public Builder dataFormatConversionConfiguration(@Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationGetArgs> dataFormatConversionConfiguration) {
            this.dataFormatConversionConfiguration = dataFormatConversionConfiguration;
            return this;
        }
        public Builder dataFormatConversionConfiguration(@Nullable FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationGetArgs dataFormatConversionConfiguration) {
            this.dataFormatConversionConfiguration = Output.ofNullable(dataFormatConversionConfiguration);
            return this;
        }
        public Builder dynamicPartitioningConfiguration(@Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationGetArgs> dynamicPartitioningConfiguration) {
            this.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration;
            return this;
        }
        public Builder dynamicPartitioningConfiguration(@Nullable FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationGetArgs dynamicPartitioningConfiguration) {
            this.dynamicPartitioningConfiguration = Output.ofNullable(dynamicPartitioningConfiguration);
            return this;
        }
        public Builder errorOutputPrefix(@Nullable Output<String> errorOutputPrefix) {
            this.errorOutputPrefix = errorOutputPrefix;
            return this;
        }
        public Builder errorOutputPrefix(@Nullable String errorOutputPrefix) {
            this.errorOutputPrefix = Output.ofNullable(errorOutputPrefix);
            return this;
        }
        public Builder kmsKeyArn(@Nullable Output<String> kmsKeyArn) {
            this.kmsKeyArn = kmsKeyArn;
            return this;
        }
        public Builder kmsKeyArn(@Nullable String kmsKeyArn) {
            this.kmsKeyArn = Output.ofNullable(kmsKeyArn);
            return this;
        }
        public Builder prefix(@Nullable Output<String> prefix) {
            this.prefix = prefix;
            return this;
        }
        public Builder prefix(@Nullable String prefix) {
            this.prefix = Output.ofNullable(prefix);
            return this;
        }
        public Builder processingConfiguration(@Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationGetArgs> processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }
        public Builder processingConfiguration(@Nullable FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationGetArgs processingConfiguration) {
            this.processingConfiguration = Output.ofNullable(processingConfiguration);
            return this;
        }
        public Builder roleArn(Output<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }
        public Builder roleArn(String roleArn) {
            this.roleArn = Output.of(Objects.requireNonNull(roleArn));
            return this;
        }
        public Builder s3BackupConfiguration(@Nullable Output<FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs> s3BackupConfiguration) {
            this.s3BackupConfiguration = s3BackupConfiguration;
            return this;
        }
        public Builder s3BackupConfiguration(@Nullable FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs s3BackupConfiguration) {
            this.s3BackupConfiguration = Output.ofNullable(s3BackupConfiguration);
            return this;
        }
        public Builder s3BackupMode(@Nullable Output<String> s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }
        public Builder s3BackupMode(@Nullable String s3BackupMode) {
            this.s3BackupMode = Output.ofNullable(s3BackupMode);
            return this;
        }        public FirehoseDeliveryStreamExtendedS3ConfigurationGetArgs build() {
            return new FirehoseDeliveryStreamExtendedS3ConfigurationGetArgs(bucketArn, bufferInterval, bufferSize, cloudwatchLoggingOptions, compressionFormat, dataFormatConversionConfiguration, dynamicPartitioningConfiguration, errorOutputPrefix, kmsKeyArn, prefix, processingConfiguration, roleArn, s3BackupConfiguration, s3BackupMode);
        }
    }
}
