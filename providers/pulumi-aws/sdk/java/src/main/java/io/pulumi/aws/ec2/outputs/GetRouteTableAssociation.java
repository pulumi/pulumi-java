// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@OutputCustomType
public final class GetRouteTableAssociation {
    /**
     * ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
     * 
     */
    private final String gatewayId;
    /**
     * Whether the association is due to the main route table.
     * 
     */
    private final Boolean main;
    /**
     * Association ID.
     * 
     */
    private final String routeTableAssociationId;
    /**
     * ID of the specific Route Table to retrieve.
     * 
     */
    private final String routeTableId;
    /**
     * ID of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
     * 
     */
    private final String subnetId;

    @OutputCustomType.Constructor
    private GetRouteTableAssociation(
        @OutputCustomType.Parameter("gatewayId") String gatewayId,
        @OutputCustomType.Parameter("main") Boolean main,
        @OutputCustomType.Parameter("routeTableAssociationId") String routeTableAssociationId,
        @OutputCustomType.Parameter("routeTableId") String routeTableId,
        @OutputCustomType.Parameter("subnetId") String subnetId) {
        this.gatewayId = gatewayId;
        this.main = main;
        this.routeTableAssociationId = routeTableAssociationId;
        this.routeTableId = routeTableId;
        this.subnetId = subnetId;
    }

    /**
     * ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
     * 
    */
    public String getGatewayId() {
        return this.gatewayId;
    }
    /**
     * Whether the association is due to the main route table.
     * 
    */
    public Boolean getMain() {
        return this.main;
    }
    /**
     * Association ID.
     * 
    */
    public String getRouteTableAssociationId() {
        return this.routeTableAssociationId;
    }
    /**
     * ID of the specific Route Table to retrieve.
     * 
    */
    public String getRouteTableId() {
        return this.routeTableId;
    }
    /**
     * ID of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
     * 
    */
    public String getSubnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteTableAssociation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String gatewayId;
        private Boolean main;
        private String routeTableAssociationId;
        private String routeTableId;
        private String subnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRouteTableAssociation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gatewayId = defaults.gatewayId;
    	      this.main = defaults.main;
    	      this.routeTableAssociationId = defaults.routeTableAssociationId;
    	      this.routeTableId = defaults.routeTableId;
    	      this.subnetId = defaults.subnetId;
        }

        public Builder gatewayId(String gatewayId) {
            this.gatewayId = Objects.requireNonNull(gatewayId);
            return this;
        }

        public Builder main(Boolean main) {
            this.main = Objects.requireNonNull(main);
            return this;
        }

        public Builder routeTableAssociationId(String routeTableAssociationId) {
            this.routeTableAssociationId = Objects.requireNonNull(routeTableAssociationId);
            return this;
        }

        public Builder routeTableId(String routeTableId) {
            this.routeTableId = Objects.requireNonNull(routeTableId);
            return this;
        }

        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public GetRouteTableAssociation build() {
            return new GetRouteTableAssociation(gatewayId, main, routeTableAssociationId, routeTableId, subnetId);
        }
    }
}
