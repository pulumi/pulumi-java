// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.datasync.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TaskOptionsGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final TaskOptionsGetArgs Empty = new TaskOptionsGetArgs();

    /**
     * A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
     * 
     */
    @Import(name="atime")
      private final @Nullable Output<String> atime;

    public Output<String> getAtime() {
        return this.atime == null ? Output.empty() : this.atime;
    }

    /**
     * Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
     * 
     */
    @Import(name="bytesPerSecond")
      private final @Nullable Output<Integer> bytesPerSecond;

    public Output<Integer> getBytesPerSecond() {
        return this.bytesPerSecond == null ? Output.empty() : this.bytesPerSecond;
    }

    /**
     * Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
     * 
     */
    @Import(name="gid")
      private final @Nullable Output<String> gid;

    public Output<String> getGid() {
        return this.gid == null ? Output.empty() : this.gid;
    }

    /**
     * Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
     * 
     */
    @Import(name="logLevel")
      private final @Nullable Output<String> logLevel;

    public Output<String> getLogLevel() {
        return this.logLevel == null ? Output.empty() : this.logLevel;
    }

    /**
     * A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
     * 
     */
    @Import(name="mtime")
      private final @Nullable Output<String> mtime;

    public Output<String> getMtime() {
        return this.mtime == null ? Output.empty() : this.mtime;
    }

    /**
     * Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
     * 
     */
    @Import(name="overwriteMode")
      private final @Nullable Output<String> overwriteMode;

    public Output<String> getOverwriteMode() {
        return this.overwriteMode == null ? Output.empty() : this.overwriteMode;
    }

    /**
     * Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
     * 
     */
    @Import(name="posixPermissions")
      private final @Nullable Output<String> posixPermissions;

    public Output<String> getPosixPermissions() {
        return this.posixPermissions == null ? Output.empty() : this.posixPermissions;
    }

    /**
     * Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
     * 
     */
    @Import(name="preserveDeletedFiles")
      private final @Nullable Output<String> preserveDeletedFiles;

    public Output<String> getPreserveDeletedFiles() {
        return this.preserveDeletedFiles == null ? Output.empty() : this.preserveDeletedFiles;
    }

    /**
     * Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
     * 
     */
    @Import(name="preserveDevices")
      private final @Nullable Output<String> preserveDevices;

    public Output<String> getPreserveDevices() {
        return this.preserveDevices == null ? Output.empty() : this.preserveDevices;
    }

    /**
     * Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
     * 
     */
    @Import(name="taskQueueing")
      private final @Nullable Output<String> taskQueueing;

    public Output<String> getTaskQueueing() {
        return this.taskQueueing == null ? Output.empty() : this.taskQueueing;
    }

    /**
     * Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
     * 
     */
    @Import(name="transferMode")
      private final @Nullable Output<String> transferMode;

    public Output<String> getTransferMode() {
        return this.transferMode == null ? Output.empty() : this.transferMode;
    }

    /**
     * User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
     * 
     */
    @Import(name="uid")
      private final @Nullable Output<String> uid;

    public Output<String> getUid() {
        return this.uid == null ? Output.empty() : this.uid;
    }

    /**
     * Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
     * 
     */
    @Import(name="verifyMode")
      private final @Nullable Output<String> verifyMode;

    public Output<String> getVerifyMode() {
        return this.verifyMode == null ? Output.empty() : this.verifyMode;
    }

    public TaskOptionsGetArgs(
        @Nullable Output<String> atime,
        @Nullable Output<Integer> bytesPerSecond,
        @Nullable Output<String> gid,
        @Nullable Output<String> logLevel,
        @Nullable Output<String> mtime,
        @Nullable Output<String> overwriteMode,
        @Nullable Output<String> posixPermissions,
        @Nullable Output<String> preserveDeletedFiles,
        @Nullable Output<String> preserveDevices,
        @Nullable Output<String> taskQueueing,
        @Nullable Output<String> transferMode,
        @Nullable Output<String> uid,
        @Nullable Output<String> verifyMode) {
        this.atime = atime;
        this.bytesPerSecond = bytesPerSecond;
        this.gid = gid;
        this.logLevel = logLevel;
        this.mtime = mtime;
        this.overwriteMode = overwriteMode;
        this.posixPermissions = posixPermissions;
        this.preserveDeletedFiles = preserveDeletedFiles;
        this.preserveDevices = preserveDevices;
        this.taskQueueing = taskQueueing;
        this.transferMode = transferMode;
        this.uid = uid;
        this.verifyMode = verifyMode;
    }

    private TaskOptionsGetArgs() {
        this.atime = Output.empty();
        this.bytesPerSecond = Output.empty();
        this.gid = Output.empty();
        this.logLevel = Output.empty();
        this.mtime = Output.empty();
        this.overwriteMode = Output.empty();
        this.posixPermissions = Output.empty();
        this.preserveDeletedFiles = Output.empty();
        this.preserveDevices = Output.empty();
        this.taskQueueing = Output.empty();
        this.transferMode = Output.empty();
        this.uid = Output.empty();
        this.verifyMode = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskOptionsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> atime;
        private @Nullable Output<Integer> bytesPerSecond;
        private @Nullable Output<String> gid;
        private @Nullable Output<String> logLevel;
        private @Nullable Output<String> mtime;
        private @Nullable Output<String> overwriteMode;
        private @Nullable Output<String> posixPermissions;
        private @Nullable Output<String> preserveDeletedFiles;
        private @Nullable Output<String> preserveDevices;
        private @Nullable Output<String> taskQueueing;
        private @Nullable Output<String> transferMode;
        private @Nullable Output<String> uid;
        private @Nullable Output<String> verifyMode;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskOptionsGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.atime = defaults.atime;
    	      this.bytesPerSecond = defaults.bytesPerSecond;
    	      this.gid = defaults.gid;
    	      this.logLevel = defaults.logLevel;
    	      this.mtime = defaults.mtime;
    	      this.overwriteMode = defaults.overwriteMode;
    	      this.posixPermissions = defaults.posixPermissions;
    	      this.preserveDeletedFiles = defaults.preserveDeletedFiles;
    	      this.preserveDevices = defaults.preserveDevices;
    	      this.taskQueueing = defaults.taskQueueing;
    	      this.transferMode = defaults.transferMode;
    	      this.uid = defaults.uid;
    	      this.verifyMode = defaults.verifyMode;
        }

        public Builder atime(@Nullable Output<String> atime) {
            this.atime = atime;
            return this;
        }

        public Builder atime(@Nullable String atime) {
            this.atime = Output.ofNullable(atime);
            return this;
        }

        public Builder bytesPerSecond(@Nullable Output<Integer> bytesPerSecond) {
            this.bytesPerSecond = bytesPerSecond;
            return this;
        }

        public Builder bytesPerSecond(@Nullable Integer bytesPerSecond) {
            this.bytesPerSecond = Output.ofNullable(bytesPerSecond);
            return this;
        }

        public Builder gid(@Nullable Output<String> gid) {
            this.gid = gid;
            return this;
        }

        public Builder gid(@Nullable String gid) {
            this.gid = Output.ofNullable(gid);
            return this;
        }

        public Builder logLevel(@Nullable Output<String> logLevel) {
            this.logLevel = logLevel;
            return this;
        }

        public Builder logLevel(@Nullable String logLevel) {
            this.logLevel = Output.ofNullable(logLevel);
            return this;
        }

        public Builder mtime(@Nullable Output<String> mtime) {
            this.mtime = mtime;
            return this;
        }

        public Builder mtime(@Nullable String mtime) {
            this.mtime = Output.ofNullable(mtime);
            return this;
        }

        public Builder overwriteMode(@Nullable Output<String> overwriteMode) {
            this.overwriteMode = overwriteMode;
            return this;
        }

        public Builder overwriteMode(@Nullable String overwriteMode) {
            this.overwriteMode = Output.ofNullable(overwriteMode);
            return this;
        }

        public Builder posixPermissions(@Nullable Output<String> posixPermissions) {
            this.posixPermissions = posixPermissions;
            return this;
        }

        public Builder posixPermissions(@Nullable String posixPermissions) {
            this.posixPermissions = Output.ofNullable(posixPermissions);
            return this;
        }

        public Builder preserveDeletedFiles(@Nullable Output<String> preserveDeletedFiles) {
            this.preserveDeletedFiles = preserveDeletedFiles;
            return this;
        }

        public Builder preserveDeletedFiles(@Nullable String preserveDeletedFiles) {
            this.preserveDeletedFiles = Output.ofNullable(preserveDeletedFiles);
            return this;
        }

        public Builder preserveDevices(@Nullable Output<String> preserveDevices) {
            this.preserveDevices = preserveDevices;
            return this;
        }

        public Builder preserveDevices(@Nullable String preserveDevices) {
            this.preserveDevices = Output.ofNullable(preserveDevices);
            return this;
        }

        public Builder taskQueueing(@Nullable Output<String> taskQueueing) {
            this.taskQueueing = taskQueueing;
            return this;
        }

        public Builder taskQueueing(@Nullable String taskQueueing) {
            this.taskQueueing = Output.ofNullable(taskQueueing);
            return this;
        }

        public Builder transferMode(@Nullable Output<String> transferMode) {
            this.transferMode = transferMode;
            return this;
        }

        public Builder transferMode(@Nullable String transferMode) {
            this.transferMode = Output.ofNullable(transferMode);
            return this;
        }

        public Builder uid(@Nullable Output<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(@Nullable String uid) {
            this.uid = Output.ofNullable(uid);
            return this;
        }

        public Builder verifyMode(@Nullable Output<String> verifyMode) {
            this.verifyMode = verifyMode;
            return this;
        }

        public Builder verifyMode(@Nullable String verifyMode) {
            this.verifyMode = Output.ofNullable(verifyMode);
            return this;
        }
        public TaskOptionsGetArgs build() {
            return new TaskOptionsGetArgs(atime, bytesPerSecond, gid, logLevel, mtime, overwriteMode, posixPermissions, preserveDeletedFiles, preserveDevices, taskQueueing, transferMode, uid, verifyMode);
        }
    }
}
