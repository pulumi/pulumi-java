// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.guardduty.inputs;

import io.pulumi.aws.guardduty.inputs.FilterFindingCriteriaGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FilterState extends io.pulumi.resources.ResourceArgs {

    public static final FilterState Empty = new FilterState();

    /**
     * Specifies the action that is to be applied to the findings that match the filter. Can be one of `ARCHIVE` or `NOOP`.
     * 
     */
    @InputImport(name="action")
      private final @Nullable Output<String> action;

    public Output<String> getAction() {
        return this.action == null ? Output.empty() : this.action;
    }

    /**
     * The ARN of the GuardDuty filter.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * Description of the filter.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * ID of a GuardDuty detector, attached to your account.
     * 
     */
    @InputImport(name="detectorId")
      private final @Nullable Output<String> detectorId;

    public Output<String> getDetectorId() {
        return this.detectorId == null ? Output.empty() : this.detectorId;
    }

    /**
     * Represents the criteria to be used in the filter for querying findings. Contains one or more `criterion` blocks, documented below.
     * 
     */
    @InputImport(name="findingCriteria")
      private final @Nullable Output<FilterFindingCriteriaGetArgs> findingCriteria;

    public Output<FilterFindingCriteriaGetArgs> getFindingCriteria() {
        return this.findingCriteria == null ? Output.empty() : this.findingCriteria;
    }

    /**
     * The name of your filter.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
     * 
     */
    @InputImport(name="rank")
      private final @Nullable Output<Integer> rank;

    public Output<Integer> getRank() {
        return this.rank == null ? Output.empty() : this.rank;
    }

    /**
     * The tags that you want to add to the Filter resource. A tag consists of a key and a value. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    public FilterState(
        @Nullable Output<String> action,
        @Nullable Output<String> arn,
        @Nullable Output<String> description,
        @Nullable Output<String> detectorId,
        @Nullable Output<FilterFindingCriteriaGetArgs> findingCriteria,
        @Nullable Output<String> name,
        @Nullable Output<Integer> rank,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.action = action;
        this.arn = arn;
        this.description = description;
        this.detectorId = detectorId;
        this.findingCriteria = findingCriteria;
        this.name = name;
        this.rank = rank;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private FilterState() {
        this.action = Output.empty();
        this.arn = Output.empty();
        this.description = Output.empty();
        this.detectorId = Output.empty();
        this.findingCriteria = Output.empty();
        this.name = Output.empty();
        this.rank = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FilterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> action;
        private @Nullable Output<String> arn;
        private @Nullable Output<String> description;
        private @Nullable Output<String> detectorId;
        private @Nullable Output<FilterFindingCriteriaGetArgs> findingCriteria;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> rank;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(FilterState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.detectorId = defaults.detectorId;
    	      this.findingCriteria = defaults.findingCriteria;
    	      this.name = defaults.name;
    	      this.rank = defaults.rank;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder action(@Nullable Output<String> action) {
            this.action = action;
            return this;
        }

        public Builder action(@Nullable String action) {
            this.action = Output.ofNullable(action);
            return this;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder detectorId(@Nullable Output<String> detectorId) {
            this.detectorId = detectorId;
            return this;
        }

        public Builder detectorId(@Nullable String detectorId) {
            this.detectorId = Output.ofNullable(detectorId);
            return this;
        }

        public Builder findingCriteria(@Nullable Output<FilterFindingCriteriaGetArgs> findingCriteria) {
            this.findingCriteria = findingCriteria;
            return this;
        }

        public Builder findingCriteria(@Nullable FilterFindingCriteriaGetArgs findingCriteria) {
            this.findingCriteria = Output.ofNullable(findingCriteria);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder rank(@Nullable Output<Integer> rank) {
            this.rank = rank;
            return this;
        }

        public Builder rank(@Nullable Integer rank) {
            this.rank = Output.ofNullable(rank);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }
        public FilterState build() {
            return new FilterState(action, arn, description, detectorId, findingCriteria, name, rank, tags, tagsAll);
        }
    }
}
