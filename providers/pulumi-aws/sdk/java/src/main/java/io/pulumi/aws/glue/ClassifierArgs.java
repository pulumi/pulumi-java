// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.glue.inputs.ClassifierCsvClassifierArgs;
import io.pulumi.aws.glue.inputs.ClassifierGrokClassifierArgs;
import io.pulumi.aws.glue.inputs.ClassifierJsonClassifierArgs;
import io.pulumi.aws.glue.inputs.ClassifierXmlClassifierArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClassifierArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClassifierArgs Empty = new ClassifierArgs();

    /**
     * A classifier for Csv content. Defined below.
     * 
     */
    @InputImport(name="csvClassifier")
      private final @Nullable Input<ClassifierCsvClassifierArgs> csvClassifier;

    public Input<ClassifierCsvClassifierArgs> getCsvClassifier() {
        return this.csvClassifier == null ? Input.empty() : this.csvClassifier;
    }

    /**
     * A classifier that uses grok patterns. Defined below.
     * 
     */
    @InputImport(name="grokClassifier")
      private final @Nullable Input<ClassifierGrokClassifierArgs> grokClassifier;

    public Input<ClassifierGrokClassifierArgs> getGrokClassifier() {
        return this.grokClassifier == null ? Input.empty() : this.grokClassifier;
    }

    /**
     * A classifier for JSON content. Defined below.
     * 
     */
    @InputImport(name="jsonClassifier")
      private final @Nullable Input<ClassifierJsonClassifierArgs> jsonClassifier;

    public Input<ClassifierJsonClassifierArgs> getJsonClassifier() {
        return this.jsonClassifier == null ? Input.empty() : this.jsonClassifier;
    }

    /**
     * The name of the classifier.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A classifier for XML content. Defined below.
     * 
     */
    @InputImport(name="xmlClassifier")
      private final @Nullable Input<ClassifierXmlClassifierArgs> xmlClassifier;

    public Input<ClassifierXmlClassifierArgs> getXmlClassifier() {
        return this.xmlClassifier == null ? Input.empty() : this.xmlClassifier;
    }

    public ClassifierArgs(
        @Nullable Input<ClassifierCsvClassifierArgs> csvClassifier,
        @Nullable Input<ClassifierGrokClassifierArgs> grokClassifier,
        @Nullable Input<ClassifierJsonClassifierArgs> jsonClassifier,
        @Nullable Input<String> name,
        @Nullable Input<ClassifierXmlClassifierArgs> xmlClassifier) {
        this.csvClassifier = csvClassifier;
        this.grokClassifier = grokClassifier;
        this.jsonClassifier = jsonClassifier;
        this.name = name;
        this.xmlClassifier = xmlClassifier;
    }

    private ClassifierArgs() {
        this.csvClassifier = Input.empty();
        this.grokClassifier = Input.empty();
        this.jsonClassifier = Input.empty();
        this.name = Input.empty();
        this.xmlClassifier = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClassifierArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ClassifierCsvClassifierArgs> csvClassifier;
        private @Nullable Input<ClassifierGrokClassifierArgs> grokClassifier;
        private @Nullable Input<ClassifierJsonClassifierArgs> jsonClassifier;
        private @Nullable Input<String> name;
        private @Nullable Input<ClassifierXmlClassifierArgs> xmlClassifier;

        public Builder() {
    	      // Empty
        }

        public Builder(ClassifierArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.csvClassifier = defaults.csvClassifier;
    	      this.grokClassifier = defaults.grokClassifier;
    	      this.jsonClassifier = defaults.jsonClassifier;
    	      this.name = defaults.name;
    	      this.xmlClassifier = defaults.xmlClassifier;
        }

        public Builder setCsvClassifier(@Nullable Input<ClassifierCsvClassifierArgs> csvClassifier) {
            this.csvClassifier = csvClassifier;
            return this;
        }

        public Builder setCsvClassifier(@Nullable ClassifierCsvClassifierArgs csvClassifier) {
            this.csvClassifier = Input.ofNullable(csvClassifier);
            return this;
        }

        public Builder setGrokClassifier(@Nullable Input<ClassifierGrokClassifierArgs> grokClassifier) {
            this.grokClassifier = grokClassifier;
            return this;
        }

        public Builder setGrokClassifier(@Nullable ClassifierGrokClassifierArgs grokClassifier) {
            this.grokClassifier = Input.ofNullable(grokClassifier);
            return this;
        }

        public Builder setJsonClassifier(@Nullable Input<ClassifierJsonClassifierArgs> jsonClassifier) {
            this.jsonClassifier = jsonClassifier;
            return this;
        }

        public Builder setJsonClassifier(@Nullable ClassifierJsonClassifierArgs jsonClassifier) {
            this.jsonClassifier = Input.ofNullable(jsonClassifier);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setXmlClassifier(@Nullable Input<ClassifierXmlClassifierArgs> xmlClassifier) {
            this.xmlClassifier = xmlClassifier;
            return this;
        }

        public Builder setXmlClassifier(@Nullable ClassifierXmlClassifierArgs xmlClassifier) {
            this.xmlClassifier = Input.ofNullable(xmlClassifier);
            return this;
        }
        public ClassifierArgs build() {
            return new ClassifierArgs(csvClassifier, grokClassifier, jsonClassifier, name, xmlClassifier);
        }
    }
}
