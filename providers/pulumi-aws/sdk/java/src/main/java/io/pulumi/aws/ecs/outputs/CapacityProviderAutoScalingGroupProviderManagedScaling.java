// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecs.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class CapacityProviderAutoScalingGroupProviderManagedScaling {
    /**
     * Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
     * 
     */
    private final @Nullable Integer instanceWarmupPeriod;
    /**
     * Maximum step adjustment size. A number between 1 and 10,000.
     * 
     */
    private final @Nullable Integer maximumScalingStepSize;
    /**
     * Minimum step adjustment size. A number between 1 and 10,000.
     * 
     */
    private final @Nullable Integer minimumScalingStepSize;
    /**
     * Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
     * 
     */
    private final @Nullable String status;
    /**
     * Target utilization for the capacity provider. A number between 1 and 100.
     * 
     */
    private final @Nullable Integer targetCapacity;

    @OutputCustomType.Constructor
    private CapacityProviderAutoScalingGroupProviderManagedScaling(
        @OutputCustomType.Parameter("instanceWarmupPeriod") @Nullable Integer instanceWarmupPeriod,
        @OutputCustomType.Parameter("maximumScalingStepSize") @Nullable Integer maximumScalingStepSize,
        @OutputCustomType.Parameter("minimumScalingStepSize") @Nullable Integer minimumScalingStepSize,
        @OutputCustomType.Parameter("status") @Nullable String status,
        @OutputCustomType.Parameter("targetCapacity") @Nullable Integer targetCapacity) {
        this.instanceWarmupPeriod = instanceWarmupPeriod;
        this.maximumScalingStepSize = maximumScalingStepSize;
        this.minimumScalingStepSize = minimumScalingStepSize;
        this.status = status;
        this.targetCapacity = targetCapacity;
    }

    /**
     * Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
     * 
    */
    public Optional<Integer> getInstanceWarmupPeriod() {
        return Optional.ofNullable(this.instanceWarmupPeriod);
    }
    /**
     * Maximum step adjustment size. A number between 1 and 10,000.
     * 
    */
    public Optional<Integer> getMaximumScalingStepSize() {
        return Optional.ofNullable(this.maximumScalingStepSize);
    }
    /**
     * Minimum step adjustment size. A number between 1 and 10,000.
     * 
    */
    public Optional<Integer> getMinimumScalingStepSize() {
        return Optional.ofNullable(this.minimumScalingStepSize);
    }
    /**
     * Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
     * 
    */
    public Optional<String> getStatus() {
        return Optional.ofNullable(this.status);
    }
    /**
     * Target utilization for the capacity provider. A number between 1 and 100.
     * 
    */
    public Optional<Integer> getTargetCapacity() {
        return Optional.ofNullable(this.targetCapacity);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CapacityProviderAutoScalingGroupProviderManagedScaling defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer instanceWarmupPeriod;
        private @Nullable Integer maximumScalingStepSize;
        private @Nullable Integer minimumScalingStepSize;
        private @Nullable String status;
        private @Nullable Integer targetCapacity;

        public Builder() {
    	      // Empty
        }

        public Builder(CapacityProviderAutoScalingGroupProviderManagedScaling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instanceWarmupPeriod = defaults.instanceWarmupPeriod;
    	      this.maximumScalingStepSize = defaults.maximumScalingStepSize;
    	      this.minimumScalingStepSize = defaults.minimumScalingStepSize;
    	      this.status = defaults.status;
    	      this.targetCapacity = defaults.targetCapacity;
        }

        public Builder setInstanceWarmupPeriod(@Nullable Integer instanceWarmupPeriod) {
            this.instanceWarmupPeriod = instanceWarmupPeriod;
            return this;
        }

        public Builder setMaximumScalingStepSize(@Nullable Integer maximumScalingStepSize) {
            this.maximumScalingStepSize = maximumScalingStepSize;
            return this;
        }

        public Builder setMinimumScalingStepSize(@Nullable Integer minimumScalingStepSize) {
            this.minimumScalingStepSize = minimumScalingStepSize;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = status;
            return this;
        }

        public Builder setTargetCapacity(@Nullable Integer targetCapacity) {
            this.targetCapacity = targetCapacity;
            return this;
        }
        public CapacityProviderAutoScalingGroupProviderManagedScaling build() {
            return new CapacityProviderAutoScalingGroupProviderManagedScaling(instanceWarmupPeriod, maximumScalingStepSize, minimumScalingStepSize, status, targetCapacity);
        }
    }
}
