// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigateway.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetExportArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetExportArgs Empty = new GetExportArgs();

    /**
     * The content-type of the export. Valid values are `application/json` and `application/yaml` are supported for `export_type` `ofoas30` and `swagger`.
     * 
     */
    @Import(name="accepts")
      private final @Nullable String accepts;

    public Optional<String> getAccepts() {
        return this.accepts == null ? Optional.empty() : Optional.ofNullable(this.accepts);
    }

    /**
     * The type of export. Acceptable values are `oas30` for OpenAPI 3.0.x and `swagger` for Swagger/OpenAPI 2.0.
     * 
     */
    @Import(name="exportType", required=true)
      private final String exportType;

    public String getExportType() {
        return this.exportType;
    }

    /**
     * A key-value map of query string parameters that specify properties of the export. the following parameters are supported: `extensions='integrations'` or `extensions='apigateway'` will export the API with x-amazon-apigateway-integration extensions. `extensions='authorizers'` will export the API with x-amazon-apigateway-authorizer extensions.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Map<String,String> parameters;

    public Map<String,String> getParameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }

    /**
     * The identifier of the associated REST API.
     * 
     */
    @Import(name="restApiId", required=true)
      private final String restApiId;

    public String getRestApiId() {
        return this.restApiId;
    }

    /**
     * The name of the Stage that will be exported.
     * 
     */
    @Import(name="stageName", required=true)
      private final String stageName;

    public String getStageName() {
        return this.stageName;
    }

    public GetExportArgs(
        @Nullable String accepts,
        String exportType,
        @Nullable Map<String,String> parameters,
        String restApiId,
        String stageName) {
        this.accepts = accepts;
        this.exportType = Objects.requireNonNull(exportType, "expected parameter 'exportType' to be non-null");
        this.parameters = parameters;
        this.restApiId = Objects.requireNonNull(restApiId, "expected parameter 'restApiId' to be non-null");
        this.stageName = Objects.requireNonNull(stageName, "expected parameter 'stageName' to be non-null");
    }

    private GetExportArgs() {
        this.accepts = null;
        this.exportType = null;
        this.parameters = Map.of();
        this.restApiId = null;
        this.stageName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accepts;
        private String exportType;
        private @Nullable Map<String,String> parameters;
        private String restApiId;
        private String stageName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetExportArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepts = defaults.accepts;
    	      this.exportType = defaults.exportType;
    	      this.parameters = defaults.parameters;
    	      this.restApiId = defaults.restApiId;
    	      this.stageName = defaults.stageName;
        }

        public Builder accepts(@Nullable String accepts) {
            this.accepts = accepts;
            return this;
        }
        public Builder exportType(String exportType) {
            this.exportType = Objects.requireNonNull(exportType);
            return this;
        }
        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder restApiId(String restApiId) {
            this.restApiId = Objects.requireNonNull(restApiId);
            return this;
        }
        public Builder stageName(String stageName) {
            this.stageName = Objects.requireNonNull(stageName);
            return this;
        }        public GetExportArgs build() {
            return new GetExportArgs(accepts, exportType, parameters, restApiId, stageName);
        }
    }
}
