// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.acm;

import io.pulumi.aws.acm.inputs.CertificateOptionsArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    /**
     * ARN of an ACM PCA
     * 
     */
    @InputImport(name="certificateAuthorityArn")
      private final @Nullable Input<String> certificateAuthorityArn;

    public Input<String> getCertificateAuthorityArn() {
        return this.certificateAuthorityArn == null ? Input.empty() : this.certificateAuthorityArn;
    }

    /**
     * The certificate's PEM-formatted public key
     * 
     */
    @InputImport(name="certificateBody")
      private final @Nullable Input<String> certificateBody;

    public Input<String> getCertificateBody() {
        return this.certificateBody == null ? Input.empty() : this.certificateBody;
    }

    /**
     * The certificate's PEM-formatted chain
     * * Creating a private CA issued certificate
     * 
     */
    @InputImport(name="certificateChain")
      private final @Nullable Input<String> certificateChain;

    public Input<String> getCertificateChain() {
        return this.certificateChain == null ? Input.empty() : this.certificateChain;
    }

    /**
     * A domain name for which the certificate should be issued
     * 
     */
    @InputImport(name="domainName")
      private final @Nullable Input<String> domainName;

    public Input<String> getDomainName() {
        return this.domainName == null ? Input.empty() : this.domainName;
    }

    /**
     * Configuration block used to set certificate options. Detailed below.
     * * Importing an existing certificate
     * 
     */
    @InputImport(name="options")
      private final @Nullable Input<CertificateOptionsArgs> options;

    public Input<CertificateOptionsArgs> getOptions() {
        return this.options == null ? Input.empty() : this.options;
    }

    /**
     * The certificate's PEM-formatted private key
     * 
     */
    @InputImport(name="privateKey")
      private final @Nullable Input<String> privateKey;

    public Input<String> getPrivateKey() {
        return this.privateKey == null ? Input.empty() : this.privateKey;
    }

    /**
     * Set of domains that should be SANs in the issued certificate. To remove all elements of a previously configured list, set this value equal to an empty list (`[]`).
     * 
     */
    @InputImport(name="subjectAlternativeNames")
      private final @Nullable Input<List<String>> subjectAlternativeNames;

    public Input<List<String>> getSubjectAlternativeNames() {
        return this.subjectAlternativeNames == null ? Input.empty() : this.subjectAlternativeNames;
    }

    /**
     * A map of tags to assign to the resource..
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into the provider.
     * 
     */
    @InputImport(name="validationMethod")
      private final @Nullable Input<String> validationMethod;

    public Input<String> getValidationMethod() {
        return this.validationMethod == null ? Input.empty() : this.validationMethod;
    }

    public CertificateArgs(
        @Nullable Input<String> certificateAuthorityArn,
        @Nullable Input<String> certificateBody,
        @Nullable Input<String> certificateChain,
        @Nullable Input<String> domainName,
        @Nullable Input<CertificateOptionsArgs> options,
        @Nullable Input<String> privateKey,
        @Nullable Input<List<String>> subjectAlternativeNames,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> validationMethod) {
        this.certificateAuthorityArn = certificateAuthorityArn;
        this.certificateBody = certificateBody;
        this.certificateChain = certificateChain;
        this.domainName = domainName;
        this.options = options;
        this.privateKey = privateKey;
        this.subjectAlternativeNames = subjectAlternativeNames;
        this.tags = tags;
        this.validationMethod = validationMethod;
    }

    private CertificateArgs() {
        this.certificateAuthorityArn = Input.empty();
        this.certificateBody = Input.empty();
        this.certificateChain = Input.empty();
        this.domainName = Input.empty();
        this.options = Input.empty();
        this.privateKey = Input.empty();
        this.subjectAlternativeNames = Input.empty();
        this.tags = Input.empty();
        this.validationMethod = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> certificateAuthorityArn;
        private @Nullable Input<String> certificateBody;
        private @Nullable Input<String> certificateChain;
        private @Nullable Input<String> domainName;
        private @Nullable Input<CertificateOptionsArgs> options;
        private @Nullable Input<String> privateKey;
        private @Nullable Input<List<String>> subjectAlternativeNames;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> validationMethod;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthorityArn = defaults.certificateAuthorityArn;
    	      this.certificateBody = defaults.certificateBody;
    	      this.certificateChain = defaults.certificateChain;
    	      this.domainName = defaults.domainName;
    	      this.options = defaults.options;
    	      this.privateKey = defaults.privateKey;
    	      this.subjectAlternativeNames = defaults.subjectAlternativeNames;
    	      this.tags = defaults.tags;
    	      this.validationMethod = defaults.validationMethod;
        }

        public Builder setCertificateAuthorityArn(@Nullable Input<String> certificateAuthorityArn) {
            this.certificateAuthorityArn = certificateAuthorityArn;
            return this;
        }

        public Builder setCertificateAuthorityArn(@Nullable String certificateAuthorityArn) {
            this.certificateAuthorityArn = Input.ofNullable(certificateAuthorityArn);
            return this;
        }

        public Builder setCertificateBody(@Nullable Input<String> certificateBody) {
            this.certificateBody = certificateBody;
            return this;
        }

        public Builder setCertificateBody(@Nullable String certificateBody) {
            this.certificateBody = Input.ofNullable(certificateBody);
            return this;
        }

        public Builder setCertificateChain(@Nullable Input<String> certificateChain) {
            this.certificateChain = certificateChain;
            return this;
        }

        public Builder setCertificateChain(@Nullable String certificateChain) {
            this.certificateChain = Input.ofNullable(certificateChain);
            return this;
        }

        public Builder setDomainName(@Nullable Input<String> domainName) {
            this.domainName = domainName;
            return this;
        }

        public Builder setDomainName(@Nullable String domainName) {
            this.domainName = Input.ofNullable(domainName);
            return this;
        }

        public Builder setOptions(@Nullable Input<CertificateOptionsArgs> options) {
            this.options = options;
            return this;
        }

        public Builder setOptions(@Nullable CertificateOptionsArgs options) {
            this.options = Input.ofNullable(options);
            return this;
        }

        public Builder setPrivateKey(@Nullable Input<String> privateKey) {
            this.privateKey = privateKey;
            return this;
        }

        public Builder setPrivateKey(@Nullable String privateKey) {
            this.privateKey = Input.ofNullable(privateKey);
            return this;
        }

        public Builder setSubjectAlternativeNames(@Nullable Input<List<String>> subjectAlternativeNames) {
            this.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        public Builder setSubjectAlternativeNames(@Nullable List<String> subjectAlternativeNames) {
            this.subjectAlternativeNames = Input.ofNullable(subjectAlternativeNames);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setValidationMethod(@Nullable Input<String> validationMethod) {
            this.validationMethod = validationMethod;
            return this;
        }

        public Builder setValidationMethod(@Nullable String validationMethod) {
            this.validationMethod = Input.ofNullable(validationMethod);
            return this;
        }
        public CertificateArgs build() {
            return new CertificateArgs(certificateAuthorityArn, certificateBody, certificateChain, domainName, options, privateKey, subjectAlternativeNames, tags, validationMethod);
        }
    }
}
