// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.s3control;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.s3control.MultiRegionAccessPointArgs;
import io.pulumi.aws.s3control.inputs.MultiRegionAccessPointState;
import io.pulumi.aws.s3control.outputs.MultiRegionAccessPointDetails;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a resource to manage an S3 Multi-Region Access Point associated with specified buckets.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Multiple AWS Buckets in Different Regions
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const primaryRegion = new aws.Provider("primaryRegion", {region: "us-east-1"});
 * const secondaryRegion = new aws.Provider("secondaryRegion", {region: "us-west-2"});
 * const fooBucket = new aws.s3.Bucket("fooBucket", {}, {
 *     provider: aws.primary_region,
 * });
 * const barBucket = new aws.s3.Bucket("barBucket", {}, {
 *     provider: aws.secondary_region,
 * });
 * const example = new aws.s3control.MultiRegionAccessPoint("example", {details: {
 *     name: "example",
 *     regions: [
 *         {
 *             bucket: fooBucket.id,
 *         },
 *         {
 *             bucket: barBucket.id,
 *         },
 *     ],
 * }});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * import pulumi_pulumi as pulumi
 * 
 * primary_region = pulumi.providers.Aws("primaryRegion", region="us-east-1")
 * secondary_region = pulumi.providers.Aws("secondaryRegion", region="us-west-2")
 * foo_bucket = aws.s3.Bucket("fooBucket", opts=pulumi.ResourceOptions(provider=aws["primary_region"]))
 * bar_bucket = aws.s3.Bucket("barBucket", opts=pulumi.ResourceOptions(provider=aws["secondary_region"]))
 * example = aws.s3control.MultiRegionAccessPoint("example", details=aws.s3control.MultiRegionAccessPointDetailsArgs(
 *     name="example",
 *     regions=[
 *         aws.s3control.MultiRegionAccessPointDetailsRegionArgs(
 *             bucket=foo_bucket.id,
 *         ),
 *         aws.s3control.MultiRegionAccessPointDetailsRegionArgs(
 *             bucket=bar_bucket.id,
 *         ),
 *     ],
 * ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var primaryRegion = new Aws.Provider("primaryRegion", new Aws.ProviderArgs
 *         {
 *             Region = "us-east-1",
 *         });
 *         var secondaryRegion = new Aws.Provider("secondaryRegion", new Aws.ProviderArgs
 *         {
 *             Region = "us-west-2",
 *         });
 *         var fooBucket = new Aws.S3.Bucket("fooBucket", new Aws.S3.BucketArgs
 *         {
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Primary_region,
 *         });
 *         var barBucket = new Aws.S3.Bucket("barBucket", new Aws.S3.BucketArgs
 *         {
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Secondary_region,
 *         });
 *         var example = new Aws.S3Control.MultiRegionAccessPoint("example", new Aws.S3Control.MultiRegionAccessPointArgs
 *         {
 *             Details = new Aws.S3Control.Inputs.MultiRegionAccessPointDetailsArgs
 *             {
 *                 Name = "example",
 *                 Regions = 
 *                 {
 *                     new Aws.S3Control.Inputs.MultiRegionAccessPointDetailsRegionArgs
 *                     {
 *                         Bucket = fooBucket.Id,
 *                     },
 *                     new Aws.S3Control.Inputs.MultiRegionAccessPointDetailsRegionArgs
 *                     {
 *                         Bucket = barBucket.Id,
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/providers"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3control"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := providers.Newaws(ctx, "primaryRegion", &providers.awsArgs{
 * 			Region: "us-east-1",
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = providers.Newaws(ctx, "secondaryRegion", &providers.awsArgs{
 * 			Region: "us-west-2",
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		fooBucket, err := s3.NewBucket(ctx, "fooBucket", nil, pulumi.Provider(aws.Primary_region))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		barBucket, err := s3.NewBucket(ctx, "barBucket", nil, pulumi.Provider(aws.Secondary_region))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = s3control.NewMultiRegionAccessPoint(ctx, "example", &s3control.MultiRegionAccessPointArgs{
 * 			Details: &s3control.MultiRegionAccessPointDetailsArgs{
 * 				Name: pulumi.String("example"),
 * 				Regions: s3control.MultiRegionAccessPointDetailsRegionArray{
 * 					&s3control.MultiRegionAccessPointDetailsRegionArgs{
 * 						Bucket: fooBucket.ID(),
 * 					},
 * 					&s3control.MultiRegionAccessPointDetailsRegionArgs{
 * 						Bucket: barBucket.ID(),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Multi-Region Access Points can be imported using the `account_id` and `name` of the Multi-Region Access Point separated by a colon (`:`), e.g.
 * 
 * ```sh
 *  $ pulumi import aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint example 123456789012:example
 * ```
 * 
 *  
 */
@ResourceType(type="aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint")
public class MultiRegionAccessPoint extends io.pulumi.resources.CustomResource {
    /**
     * The AWS account ID for the owner of the buckets for which you want to create a Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
     * 
     */
    @Export(name="accountId", type=String.class, parameters={})
    private Output<String> accountId;

    /**
     * @return The AWS account ID for the owner of the buckets for which you want to create a Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
     * 
     */
    public Output<String> getAccountId() {
        return this.accountId;
    }
    /**
     * The alias for the Multi-Region Access Point.
     * 
     */
    @Export(name="alias", type=String.class, parameters={})
    private Output<String> alias;

    /**
     * @return The alias for the Multi-Region Access Point.
     * 
     */
    public Output<String> getAlias() {
        return this.alias;
    }
    /**
     * Amazon Resource Name (ARN) of the Multi-Region Access Point.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of the Multi-Region Access Point.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * A configuration block containing details about the Multi-Region Access Point. See Details Configuration Block below for more details
     * 
     */
    @Export(name="details", type=MultiRegionAccessPointDetails.class, parameters={})
    private Output<MultiRegionAccessPointDetails> details;

    /**
     * @return A configuration block containing details about the Multi-Region Access Point. See Details Configuration Block below for more details
     * 
     */
    public Output<MultiRegionAccessPointDetails> getDetails() {
        return this.details;
    }
    /**
     * The DNS domain name of the S3 Multi-Region Access Point in the format _`alias`_.accesspoint.s3-global.amazonaws.com. For more information, see the documentation on [Multi-Region Access Point Requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiRegionAccessPointRequests.html).
     * 
     */
    @Export(name="domainName", type=String.class, parameters={})
    private Output<String> domainName;

    /**
     * @return The DNS domain name of the S3 Multi-Region Access Point in the format _`alias`_.accesspoint.s3-global.amazonaws.com. For more information, see the documentation on [Multi-Region Access Point Requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiRegionAccessPointRequests.html).
     * 
     */
    public Output<String> getDomainName() {
        return this.domainName;
    }
    /**
     * The current status of the Multi-Region Access Point. One of: `READY`, `INCONSISTENT_ACROSS_REGIONS`, `CREATING`, `PARTIALLY_CREATED`, `PARTIALLY_DELETED`, `DELETING`.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The current status of the Multi-Region Access Point. One of: `READY`, `INCONSISTENT_ACROSS_REGIONS`, `CREATING`, `PARTIALLY_CREATED`, `PARTIALLY_DELETED`, `DELETING`.
     * 
     */
    public Output<String> getStatus() {
        return this.status;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MultiRegionAccessPoint(String name) {
        this(name, MultiRegionAccessPointArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MultiRegionAccessPoint(String name, MultiRegionAccessPointArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MultiRegionAccessPoint(String name, MultiRegionAccessPointArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint", name, args == null ? MultiRegionAccessPointArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private MultiRegionAccessPoint(String name, Output<String> id, @Nullable MultiRegionAccessPointState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MultiRegionAccessPoint get(String name, Output<String> id, @Nullable MultiRegionAccessPointState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new MultiRegionAccessPoint(name, id, state, options);
    }
}
