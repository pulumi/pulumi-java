// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cfg;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.cfg.RuleArgs;
import io.pulumi.aws.cfg.inputs.RuleState;
import io.pulumi.aws.cfg.outputs.RuleScope;
import io.pulumi.aws.cfg.outputs.RuleSource;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides an AWS Config Rule.
 * 
 * > **Note:** Config Rule requires an existing `Configuration Recorder` to be present. Use of `depends_on` is recommended (as shown below) to avoid race conditions.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### AWS Managed Rules
 * 
 * AWS managed rules can be used by setting the source owner to `AWS` and the source identifier to the name of the managed rule. More information about AWS managed rules can be found in the [AWS Config Developer Guide](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html).
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const role = new aws.iam.Role("role", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "config.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const foo = new aws.cfg.Recorder("foo", {roleArn: role.arn});
 * const rule = new aws.cfg.Rule("rule", {source: {
 *     owner: "AWS",
 *     sourceIdentifier: "S3_BUCKET_VERSIONING_ENABLED",
 * }}, {
 *     dependsOn: [foo],
 * });
 * const rolePolicy = new aws.iam.RolePolicy("rolePolicy", {
 *     role: role.id,
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *   	{
 *   		"Action": "config:Put*",
 *   		"Effect": "Allow",
 *   		"Resource": "*"
 * 
 *   	}
 *   ]
 * }
 * `,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * role = aws.iam.Role("role", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "config.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * """)
 * foo = aws.cfg.Recorder("foo", role_arn=role.arn)
 * rule = aws.cfg.Rule("rule", source=aws.cfg.RuleSourceArgs(
 *     owner="AWS",
 *     source_identifier="S3_BUCKET_VERSIONING_ENABLED",
 * ),
 * opts=pulumi.ResourceOptions(depends_on=[foo]))
 * role_policy = aws.iam.RolePolicy("rolePolicy",
 *     role=role.id,
 *     policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *   	{
 *   		"Action": "config:Put*",
 *   		"Effect": "Allow",
 *   		"Resource": "*"
 * 
 *   	}
 *   ]
 * }
 * """)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var role = new Aws.Iam.Role("role", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": ""sts:AssumeRole"",
 *       ""Principal"": {
 *         ""Service"": ""config.amazonaws.com""
 *       },
 *       ""Effect"": ""Allow"",
 *       ""Sid"": """"
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var foo = new Aws.Cfg.Recorder("foo", new Aws.Cfg.RecorderArgs
 *         {
 *             RoleArn = role.Arn,
 *         });
 *         var rule = new Aws.Cfg.Rule("rule", new Aws.Cfg.RuleArgs
 *         {
 *             Source = new Aws.Cfg.Inputs.RuleSourceArgs
 *             {
 *                 Owner = "AWS",
 *                 SourceIdentifier = "S3_BUCKET_VERSIONING_ENABLED",
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 foo,
 *             },
 *         });
 *         var rolePolicy = new Aws.Iam.RolePolicy("rolePolicy", new Aws.Iam.RolePolicyArgs
 *         {
 *             Role = role.Id,
 *             Policy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *   	{
 *   		""Action"": ""config:Put*"",
 *   		""Effect"": ""Allow"",
 *   		""Resource"": ""*""
 * 
 *   	}
 *   ]
 * }
 * ",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cfg"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		role, err := iam.NewRole(ctx, "role", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"config.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		foo, err := cfg.NewRecorder(ctx, "foo", &cfg.RecorderArgs{
 * 			RoleArn: role.Arn,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cfg.NewRule(ctx, "rule", &cfg.RuleArgs{
 * 			Source: &cfg.RuleSourceArgs{
 * 				Owner:            pulumi.String("AWS"),
 * 				SourceIdentifier: pulumi.String("S3_BUCKET_VERSIONING_ENABLED"),
 * 			},
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			foo,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicy(ctx, "rolePolicy", &iam.RolePolicyArgs{
 * 			Role: role.ID(),
 * 			Policy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "  	{\n", "  		\"Action\": \"config:Put*\",\n", "  		\"Effect\": \"Allow\",\n", "  		\"Resource\": \"*\"\n", "\n", "  	}\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Custom Rules
 * 
 * Custom rules can be used by setting the source owner to `CUSTOM_LAMBDA` and the source identifier to the Amazon Resource Name (ARN) of the Lambda Function. The AWS Config service must have permissions to invoke the Lambda Function, e.g. via the `aws.lambda.Permission` resource. More information about custom rules can be found in the [AWS Config Developer Guide](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html).
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleRecorder = new aws.cfg.Recorder("exampleRecorder", {});
 * // ... other configuration ...
 * const exampleFunction = new aws.lambda.Function("exampleFunction", {});
 * // ... other configuration ...
 * const examplePermission = new aws.lambda.Permission("examplePermission", {
 *     action: "lambda:InvokeFunction",
 *     "function": exampleFunction.arn,
 *     principal: "config.amazonaws.com",
 * });
 * // ... other configuration ...
 * const exampleRule = new aws.cfg.Rule("exampleRule", {source: {
 *     owner: "CUSTOM_LAMBDA",
 *     sourceIdentifier: exampleFunction.arn,
 * }}, {
 *     dependsOn: [
 *         exampleRecorder,
 *         examplePermission,
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_recorder = aws.cfg.Recorder("exampleRecorder")
 * # ... other configuration ...
 * example_function = aws.lambda_.Function("exampleFunction")
 * # ... other configuration ...
 * example_permission = aws.lambda_.Permission("examplePermission",
 *     action="lambda:InvokeFunction",
 *     function=example_function.arn,
 *     principal="config.amazonaws.com")
 * # ... other configuration ...
 * example_rule = aws.cfg.Rule("exampleRule", source=aws.cfg.RuleSourceArgs(
 *     owner="CUSTOM_LAMBDA",
 *     source_identifier=example_function.arn,
 * ),
 * opts=pulumi.ResourceOptions(depends_on=[
 *         example_recorder,
 *         example_permission,
 *     ]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleRecorder = new Aws.Cfg.Recorder("exampleRecorder", new Aws.Cfg.RecorderArgs
 *         {
 *         });
 *         // ... other configuration ...
 *         var exampleFunction = new Aws.Lambda.Function("exampleFunction", new Aws.Lambda.FunctionArgs
 *         {
 *         });
 *         // ... other configuration ...
 *         var examplePermission = new Aws.Lambda.Permission("examplePermission", new Aws.Lambda.PermissionArgs
 *         {
 *             Action = "lambda:InvokeFunction",
 *             Function = exampleFunction.Arn,
 *             Principal = "config.amazonaws.com",
 *         });
 *         // ... other configuration ...
 *         var exampleRule = new Aws.Cfg.Rule("exampleRule", new Aws.Cfg.RuleArgs
 *         {
 *             Source = new Aws.Cfg.Inputs.RuleSourceArgs
 *             {
 *                 Owner = "CUSTOM_LAMBDA",
 *                 SourceIdentifier = exampleFunction.Arn,
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 exampleRecorder,
 *                 examplePermission,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cfg"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/lambda"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleRecorder, err := cfg.NewRecorder(ctx, "exampleRecorder", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleFunction, err := lambda.NewFunction(ctx, "exampleFunction", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		examplePermission, err := lambda.NewPermission(ctx, "examplePermission", &lambda.PermissionArgs{
 * 			Action:    pulumi.String("lambda:InvokeFunction"),
 * 			Function:  exampleFunction.Arn,
 * 			Principal: pulumi.String("config.amazonaws.com"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cfg.NewRule(ctx, "exampleRule", &cfg.RuleArgs{
 * 			Source: &cfg.RuleSourceArgs{
 * 				Owner:            pulumi.String("CUSTOM_LAMBDA"),
 * 				SourceIdentifier: exampleFunction.Arn,
 * 			},
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			exampleRecorder,
 * 			examplePermission,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Config Rule can be imported using the name, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:cfg/rule:Rule foo example
 * ```
 * 
 *  
 */
@ResourceType(type="aws:cfg/rule:Rule")
public class Rule extends io.pulumi.resources.CustomResource {
    /**
     * The ARN of the config rule
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the config rule
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Description of the rule
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the rule
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * A string in JSON format that is passed to the AWS Config rule Lambda function.
     * 
     */
    @Export(name="inputParameters", type=String.class, parameters={})
    private Output</* @Nullable */ String> inputParameters;

    /**
     * @return A string in JSON format that is passed to the AWS Config rule Lambda function.
     * 
     */
    public Output</* @Nullable */ String> getInputParameters() {
        return this.inputParameters;
    }
    /**
     * The frequency that you want AWS Config to run evaluations for a rule that is triggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
     * 
     */
    @Export(name="maximumExecutionFrequency", type=String.class, parameters={})
    private Output</* @Nullable */ String> maximumExecutionFrequency;

    /**
     * @return The frequency that you want AWS Config to run evaluations for a rule that is triggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
     * 
     */
    public Output</* @Nullable */ String> getMaximumExecutionFrequency() {
        return this.maximumExecutionFrequency;
    }
    /**
     * The name of the rule
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the rule
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ID of the config rule
     * 
     */
    @Export(name="ruleId", type=String.class, parameters={})
    private Output<String> ruleId;

    /**
     * @return The ID of the config rule
     * 
     */
    public Output<String> getRuleId() {
        return this.ruleId;
    }
    /**
     * Scope defines which resources can trigger an evaluation for the rule as documented below.
     * 
     */
    @Export(name="scope", type=RuleScope.class, parameters={})
    private Output</* @Nullable */ RuleScope> scope;

    /**
     * @return Scope defines which resources can trigger an evaluation for the rule as documented below.
     * 
     */
    public Output</* @Nullable */ RuleScope> getScope() {
        return this.scope;
    }
    /**
     * Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources as documented below.
     * 
     */
    @Export(name="source", type=RuleSource.class, parameters={})
    private Output<RuleSource> source;

    /**
     * @return Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources as documented below.
     * 
     */
    public Output<RuleSource> getSource() {
        return this.source;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Rule(String name) {
        this(name, RuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Rule(String name, RuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Rule(String name, RuleArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cfg/rule:Rule", name, args == null ? RuleArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Rule(String name, Output<String> id, @Nullable RuleState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cfg/rule:Rule", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Rule get(String name, Output<String> id, @Nullable RuleState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Rule(name, id, state, options);
    }
}
