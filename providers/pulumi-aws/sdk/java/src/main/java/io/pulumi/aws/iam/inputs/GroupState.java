// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.iam.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GroupState extends io.pulumi.resources.ResourceArgs {

    public static final GroupState Empty = new GroupState();

    /**
     * The ARN assigned by AWS for this group.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * The group's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. Group names are not distinguished by case. For example, you cannot create groups named both "ADMINS" and "admins".
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Path in which to create the group.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> getPath() {
        return this.path == null ? Output.empty() : this.path;
    }

    /**
     * The [unique ID][1] assigned by AWS.
     * 
     */
    @Import(name="uniqueId")
      private final @Nullable Output<String> uniqueId;

    public Output<String> getUniqueId() {
        return this.uniqueId == null ? Output.empty() : this.uniqueId;
    }

    public GroupState(
        @Nullable Output<String> arn,
        @Nullable Output<String> name,
        @Nullable Output<String> path,
        @Nullable Output<String> uniqueId) {
        this.arn = arn;
        this.name = name;
        this.path = path;
        this.uniqueId = uniqueId;
    }

    private GroupState() {
        this.arn = Output.empty();
        this.name = Output.empty();
        this.path = Output.empty();
        this.uniqueId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> name;
        private @Nullable Output<String> path;
        private @Nullable Output<String> uniqueId;

        public Builder() {
    	      // Empty
        }

        public Builder(GroupState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.uniqueId = defaults.uniqueId;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }

        public Builder path(@Nullable String path) {
            this.path = Output.ofNullable(path);
            return this;
        }

        public Builder uniqueId(@Nullable Output<String> uniqueId) {
            this.uniqueId = uniqueId;
            return this;
        }

        public Builder uniqueId(@Nullable String uniqueId) {
            this.uniqueId = Output.ofNullable(uniqueId);
            return this;
        }
        public GroupState build() {
            return new GroupState(arn, name, path, uniqueId);
        }
    }
}
