// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.autoscaling.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScheduleState extends io.pulumi.resources.ResourceArgs {

    public static final ScheduleState Empty = new ScheduleState();

    /**
     * The ARN assigned by AWS to the autoscaling schedule.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The name or Amazon Resource Name (ARN) of the Auto Scaling group.
     * 
     */
    @InputImport(name="autoscalingGroupName")
      private final @Nullable Input<String> autoscalingGroupName;

    public Input<String> getAutoscalingGroupName() {
        return this.autoscalingGroupName == null ? Input.empty() : this.autoscalingGroupName;
    }

    /**
     * The number of EC2 instances that should be running in the group. Default 0.  Set to -1 if you don't want to change the desired capacity at the scheduled time.
     * 
     */
    @InputImport(name="desiredCapacity")
      private final @Nullable Input<Integer> desiredCapacity;

    public Input<Integer> getDesiredCapacity() {
        return this.desiredCapacity == null ? Input.empty() : this.desiredCapacity;
    }

    /**
     * The time for this action to end, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ).
     * If you try to schedule your action in the past, Auto Scaling returns an error message.
     * 
     */
    @InputImport(name="endTime")
      private final @Nullable Input<String> endTime;

    public Input<String> getEndTime() {
        return this.endTime == null ? Input.empty() : this.endTime;
    }

    /**
     * The maximum size for the Auto Scaling group. Default 0.
     * Set to -1 if you don't want to change the maximum size at the scheduled time.
     * 
     */
    @InputImport(name="maxSize")
      private final @Nullable Input<Integer> maxSize;

    public Input<Integer> getMaxSize() {
        return this.maxSize == null ? Input.empty() : this.maxSize;
    }

    /**
     * The minimum size for the Auto Scaling group. Default 0.
     * Set to -1 if you don't want to change the minimum size at the scheduled time.
     * 
     */
    @InputImport(name="minSize")
      private final @Nullable Input<Integer> minSize;

    public Input<Integer> getMinSize() {
        return this.minSize == null ? Input.empty() : this.minSize;
    }

    /**
     * The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format.
     * 
     */
    @InputImport(name="recurrence")
      private final @Nullable Input<String> recurrence;

    public Input<String> getRecurrence() {
        return this.recurrence == null ? Input.empty() : this.recurrence;
    }

    /**
     * The name of this scaling action.
     * 
     */
    @InputImport(name="scheduledActionName")
      private final @Nullable Input<String> scheduledActionName;

    public Input<String> getScheduledActionName() {
        return this.scheduledActionName == null ? Input.empty() : this.scheduledActionName;
    }

    /**
     * The time for this action to start, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ).
     * If you try to schedule your action in the past, Auto Scaling returns an error message.
     * 
     */
    @InputImport(name="startTime")
      private final @Nullable Input<String> startTime;

    public Input<String> getStartTime() {
        return this.startTime == null ? Input.empty() : this.startTime;
    }

    /**
     * The timezone for the cron expression. Valid values are the canonical names of the IANA time zones (such as Etc/GMT+9 or Pacific/Tahiti).
     * 
     */
    @InputImport(name="timeZone")
      private final @Nullable Input<String> timeZone;

    public Input<String> getTimeZone() {
        return this.timeZone == null ? Input.empty() : this.timeZone;
    }

    public ScheduleState(
        @Nullable Input<String> arn,
        @Nullable Input<String> autoscalingGroupName,
        @Nullable Input<Integer> desiredCapacity,
        @Nullable Input<String> endTime,
        @Nullable Input<Integer> maxSize,
        @Nullable Input<Integer> minSize,
        @Nullable Input<String> recurrence,
        @Nullable Input<String> scheduledActionName,
        @Nullable Input<String> startTime,
        @Nullable Input<String> timeZone) {
        this.arn = arn;
        this.autoscalingGroupName = autoscalingGroupName;
        this.desiredCapacity = desiredCapacity;
        this.endTime = endTime;
        this.maxSize = maxSize;
        this.minSize = minSize;
        this.recurrence = recurrence;
        this.scheduledActionName = scheduledActionName;
        this.startTime = startTime;
        this.timeZone = timeZone;
    }

    private ScheduleState() {
        this.arn = Input.empty();
        this.autoscalingGroupName = Input.empty();
        this.desiredCapacity = Input.empty();
        this.endTime = Input.empty();
        this.maxSize = Input.empty();
        this.minSize = Input.empty();
        this.recurrence = Input.empty();
        this.scheduledActionName = Input.empty();
        this.startTime = Input.empty();
        this.timeZone = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> autoscalingGroupName;
        private @Nullable Input<Integer> desiredCapacity;
        private @Nullable Input<String> endTime;
        private @Nullable Input<Integer> maxSize;
        private @Nullable Input<Integer> minSize;
        private @Nullable Input<String> recurrence;
        private @Nullable Input<String> scheduledActionName;
        private @Nullable Input<String> startTime;
        private @Nullable Input<String> timeZone;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduleState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.autoscalingGroupName = defaults.autoscalingGroupName;
    	      this.desiredCapacity = defaults.desiredCapacity;
    	      this.endTime = defaults.endTime;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.recurrence = defaults.recurrence;
    	      this.scheduledActionName = defaults.scheduledActionName;
    	      this.startTime = defaults.startTime;
    	      this.timeZone = defaults.timeZone;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder autoscalingGroupName(@Nullable Input<String> autoscalingGroupName) {
            this.autoscalingGroupName = autoscalingGroupName;
            return this;
        }

        public Builder autoscalingGroupName(@Nullable String autoscalingGroupName) {
            this.autoscalingGroupName = Input.ofNullable(autoscalingGroupName);
            return this;
        }

        public Builder desiredCapacity(@Nullable Input<Integer> desiredCapacity) {
            this.desiredCapacity = desiredCapacity;
            return this;
        }

        public Builder desiredCapacity(@Nullable Integer desiredCapacity) {
            this.desiredCapacity = Input.ofNullable(desiredCapacity);
            return this;
        }

        public Builder endTime(@Nullable Input<String> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder endTime(@Nullable String endTime) {
            this.endTime = Input.ofNullable(endTime);
            return this;
        }

        public Builder maxSize(@Nullable Input<Integer> maxSize) {
            this.maxSize = maxSize;
            return this;
        }

        public Builder maxSize(@Nullable Integer maxSize) {
            this.maxSize = Input.ofNullable(maxSize);
            return this;
        }

        public Builder minSize(@Nullable Input<Integer> minSize) {
            this.minSize = minSize;
            return this;
        }

        public Builder minSize(@Nullable Integer minSize) {
            this.minSize = Input.ofNullable(minSize);
            return this;
        }

        public Builder recurrence(@Nullable Input<String> recurrence) {
            this.recurrence = recurrence;
            return this;
        }

        public Builder recurrence(@Nullable String recurrence) {
            this.recurrence = Input.ofNullable(recurrence);
            return this;
        }

        public Builder scheduledActionName(@Nullable Input<String> scheduledActionName) {
            this.scheduledActionName = scheduledActionName;
            return this;
        }

        public Builder scheduledActionName(@Nullable String scheduledActionName) {
            this.scheduledActionName = Input.ofNullable(scheduledActionName);
            return this;
        }

        public Builder startTime(@Nullable Input<String> startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder startTime(@Nullable String startTime) {
            this.startTime = Input.ofNullable(startTime);
            return this;
        }

        public Builder timeZone(@Nullable Input<String> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(@Nullable String timeZone) {
            this.timeZone = Input.ofNullable(timeZone);
            return this;
        }
        public ScheduleState build() {
            return new ScheduleState(arn, autoscalingGroupName, desiredCapacity, endTime, maxSize, minSize, recurrence, scheduledActionName, startTime, timeZone);
        }
    }
}
