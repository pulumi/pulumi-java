// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.serverlessrepository;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CloudFormationStackArgs extends io.pulumi.resources.ResourceArgs {

    public static final CloudFormationStackArgs Empty = new CloudFormationStackArgs();

    /**
     * The ARN of the application from the Serverless Application Repository.
     * 
     */
    @Import(name="applicationId", required=true)
      private final Output<String> applicationId;

    public Output<String> getApplicationId() {
        return this.applicationId;
    }

    /**
     * A list of capabilities. Valid values are `CAPABILITY_IAM`, `CAPABILITY_NAMED_IAM`, `CAPABILITY_RESOURCE_POLICY`, or `CAPABILITY_AUTO_EXPAND`
     * 
     */
    @Import(name="capabilities", required=true)
      private final Output<List<String>> capabilities;

    public Output<List<String>> getCapabilities() {
        return this.capabilities;
    }

    /**
     * The name of the stack to create. The resource deployed in AWS will be prefixed with `serverlessrepo-`
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * A map of Parameter structures that specify input parameters for the stack.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Map<String,String>> parameters;

    public Output<Map<String,String>> getParameters() {
        return this.parameters == null ? Output.empty() : this.parameters;
    }

    /**
     * The version of the application to deploy. If not supplied, deploys the latest version.
     * 
     */
    @Import(name="semanticVersion")
      private final @Nullable Output<String> semanticVersion;

    public Output<String> getSemanticVersion() {
        return this.semanticVersion == null ? Output.empty() : this.semanticVersion;
    }

    /**
     * A list of tags to associate with this stack. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public CloudFormationStackArgs(
        Output<String> applicationId,
        Output<List<String>> capabilities,
        @Nullable Output<String> name,
        @Nullable Output<Map<String,String>> parameters,
        @Nullable Output<String> semanticVersion,
        @Nullable Output<Map<String,String>> tags) {
        this.applicationId = Objects.requireNonNull(applicationId, "expected parameter 'applicationId' to be non-null");
        this.capabilities = Objects.requireNonNull(capabilities, "expected parameter 'capabilities' to be non-null");
        this.name = name;
        this.parameters = parameters;
        this.semanticVersion = semanticVersion;
        this.tags = tags;
    }

    private CloudFormationStackArgs() {
        this.applicationId = Output.empty();
        this.capabilities = Output.empty();
        this.name = Output.empty();
        this.parameters = Output.empty();
        this.semanticVersion = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloudFormationStackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> applicationId;
        private Output<List<String>> capabilities;
        private @Nullable Output<String> name;
        private @Nullable Output<Map<String,String>> parameters;
        private @Nullable Output<String> semanticVersion;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(CloudFormationStackArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.capabilities = defaults.capabilities;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.semanticVersion = defaults.semanticVersion;
    	      this.tags = defaults.tags;
        }

        public Builder applicationId(Output<String> applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }

        public Builder applicationId(String applicationId) {
            this.applicationId = Output.of(Objects.requireNonNull(applicationId));
            return this;
        }

        public Builder capabilities(Output<List<String>> capabilities) {
            this.capabilities = Objects.requireNonNull(capabilities);
            return this;
        }

        public Builder capabilities(List<String> capabilities) {
            this.capabilities = Output.of(Objects.requireNonNull(capabilities));
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = Output.ofNullable(parameters);
            return this;
        }

        public Builder semanticVersion(@Nullable Output<String> semanticVersion) {
            this.semanticVersion = semanticVersion;
            return this;
        }

        public Builder semanticVersion(@Nullable String semanticVersion) {
            this.semanticVersion = Output.ofNullable(semanticVersion);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public CloudFormationStackArgs build() {
            return new CloudFormationStackArgs(applicationId, capabilities, name, parameters, semanticVersion, tags);
        }
    }
}
