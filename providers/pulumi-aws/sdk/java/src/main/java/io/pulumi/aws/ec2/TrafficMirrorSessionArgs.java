// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TrafficMirrorSessionArgs extends io.pulumi.resources.ResourceArgs {

    public static final TrafficMirrorSessionArgs Empty = new TrafficMirrorSessionArgs();

    /**
     * A description of the traffic mirror session.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * ID of the source network interface. Not all network interfaces are eligible as mirror sources. On EC2 instances only nitro based instances support mirroring.
     * 
     */
    @Import(name="networkInterfaceId", required=true)
      private final Output<String> networkInterfaceId;

    public Output<String> getNetworkInterfaceId() {
        return this.networkInterfaceId;
    }

    /**
     * The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror.
     * 
     */
    @Import(name="packetLength")
      private final @Nullable Output<Integer> packetLength;

    public Output<Integer> getPacketLength() {
        return this.packetLength == null ? Output.empty() : this.packetLength;
    }

    /**
     * - The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
     * 
     */
    @Import(name="sessionNumber", required=true)
      private final Output<Integer> sessionNumber;

    public Output<Integer> getSessionNumber() {
        return this.sessionNumber;
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * ID of the traffic mirror filter to be used
     * 
     */
    @Import(name="trafficMirrorFilterId", required=true)
      private final Output<String> trafficMirrorFilterId;

    public Output<String> getTrafficMirrorFilterId() {
        return this.trafficMirrorFilterId;
    }

    /**
     * ID of the traffic mirror target to be used
     * 
     */
    @Import(name="trafficMirrorTargetId", required=true)
      private final Output<String> trafficMirrorTargetId;

    public Output<String> getTrafficMirrorTargetId() {
        return this.trafficMirrorTargetId;
    }

    /**
     * - The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
     * 
     */
    @Import(name="virtualNetworkId")
      private final @Nullable Output<Integer> virtualNetworkId;

    public Output<Integer> getVirtualNetworkId() {
        return this.virtualNetworkId == null ? Output.empty() : this.virtualNetworkId;
    }

    public TrafficMirrorSessionArgs(
        @Nullable Output<String> description,
        Output<String> networkInterfaceId,
        @Nullable Output<Integer> packetLength,
        Output<Integer> sessionNumber,
        @Nullable Output<Map<String,String>> tags,
        Output<String> trafficMirrorFilterId,
        Output<String> trafficMirrorTargetId,
        @Nullable Output<Integer> virtualNetworkId) {
        this.description = description;
        this.networkInterfaceId = Objects.requireNonNull(networkInterfaceId, "expected parameter 'networkInterfaceId' to be non-null");
        this.packetLength = packetLength;
        this.sessionNumber = Objects.requireNonNull(sessionNumber, "expected parameter 'sessionNumber' to be non-null");
        this.tags = tags;
        this.trafficMirrorFilterId = Objects.requireNonNull(trafficMirrorFilterId, "expected parameter 'trafficMirrorFilterId' to be non-null");
        this.trafficMirrorTargetId = Objects.requireNonNull(trafficMirrorTargetId, "expected parameter 'trafficMirrorTargetId' to be non-null");
        this.virtualNetworkId = virtualNetworkId;
    }

    private TrafficMirrorSessionArgs() {
        this.description = Output.empty();
        this.networkInterfaceId = Output.empty();
        this.packetLength = Output.empty();
        this.sessionNumber = Output.empty();
        this.tags = Output.empty();
        this.trafficMirrorFilterId = Output.empty();
        this.trafficMirrorTargetId = Output.empty();
        this.virtualNetworkId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrafficMirrorSessionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<String> networkInterfaceId;
        private @Nullable Output<Integer> packetLength;
        private Output<Integer> sessionNumber;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> trafficMirrorFilterId;
        private Output<String> trafficMirrorTargetId;
        private @Nullable Output<Integer> virtualNetworkId;

        public Builder() {
    	      // Empty
        }

        public Builder(TrafficMirrorSessionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.packetLength = defaults.packetLength;
    	      this.sessionNumber = defaults.sessionNumber;
    	      this.tags = defaults.tags;
    	      this.trafficMirrorFilterId = defaults.trafficMirrorFilterId;
    	      this.trafficMirrorTargetId = defaults.trafficMirrorTargetId;
    	      this.virtualNetworkId = defaults.virtualNetworkId;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder networkInterfaceId(Output<String> networkInterfaceId) {
            this.networkInterfaceId = Objects.requireNonNull(networkInterfaceId);
            return this;
        }
        public Builder networkInterfaceId(String networkInterfaceId) {
            this.networkInterfaceId = Output.of(Objects.requireNonNull(networkInterfaceId));
            return this;
        }
        public Builder packetLength(@Nullable Output<Integer> packetLength) {
            this.packetLength = packetLength;
            return this;
        }
        public Builder packetLength(@Nullable Integer packetLength) {
            this.packetLength = Output.ofNullable(packetLength);
            return this;
        }
        public Builder sessionNumber(Output<Integer> sessionNumber) {
            this.sessionNumber = Objects.requireNonNull(sessionNumber);
            return this;
        }
        public Builder sessionNumber(Integer sessionNumber) {
            this.sessionNumber = Output.of(Objects.requireNonNull(sessionNumber));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder trafficMirrorFilterId(Output<String> trafficMirrorFilterId) {
            this.trafficMirrorFilterId = Objects.requireNonNull(trafficMirrorFilterId);
            return this;
        }
        public Builder trafficMirrorFilterId(String trafficMirrorFilterId) {
            this.trafficMirrorFilterId = Output.of(Objects.requireNonNull(trafficMirrorFilterId));
            return this;
        }
        public Builder trafficMirrorTargetId(Output<String> trafficMirrorTargetId) {
            this.trafficMirrorTargetId = Objects.requireNonNull(trafficMirrorTargetId);
            return this;
        }
        public Builder trafficMirrorTargetId(String trafficMirrorTargetId) {
            this.trafficMirrorTargetId = Output.of(Objects.requireNonNull(trafficMirrorTargetId));
            return this;
        }
        public Builder virtualNetworkId(@Nullable Output<Integer> virtualNetworkId) {
            this.virtualNetworkId = virtualNetworkId;
            return this;
        }
        public Builder virtualNetworkId(@Nullable Integer virtualNetworkId) {
            this.virtualNetworkId = Output.ofNullable(virtualNetworkId);
            return this;
        }        public TrafficMirrorSessionArgs build() {
            return new TrafficMirrorSessionArgs(description, networkInterfaceId, packetLength, sessionNumber, tags, trafficMirrorFilterId, trafficMirrorTargetId, virtualNetworkId);
        }
    }
}
