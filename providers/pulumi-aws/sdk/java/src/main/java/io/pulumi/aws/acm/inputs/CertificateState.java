// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.acm.inputs;

import io.pulumi.aws.acm.inputs.CertificateDomainValidationOptionGetArgs;
import io.pulumi.aws.acm.inputs.CertificateOptionsGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateState extends io.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * The ARN of the certificate
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * ARN of an ACM PCA
     * 
     */
    @InputImport(name="certificateAuthorityArn")
      private final @Nullable Output<String> certificateAuthorityArn;

    public Output<String> getCertificateAuthorityArn() {
        return this.certificateAuthorityArn == null ? Output.empty() : this.certificateAuthorityArn;
    }

    /**
     * The certificate's PEM-formatted public key
     * 
     */
    @InputImport(name="certificateBody")
      private final @Nullable Output<String> certificateBody;

    public Output<String> getCertificateBody() {
        return this.certificateBody == null ? Output.empty() : this.certificateBody;
    }

    /**
     * The certificate's PEM-formatted chain
     * * Creating a private CA issued certificate
     * 
     */
    @InputImport(name="certificateChain")
      private final @Nullable Output<String> certificateChain;

    public Output<String> getCertificateChain() {
        return this.certificateChain == null ? Output.empty() : this.certificateChain;
    }

    /**
     * A domain name for which the certificate should be issued
     * 
     */
    @InputImport(name="domainName")
      private final @Nullable Output<String> domainName;

    public Output<String> getDomainName() {
        return this.domainName == null ? Output.empty() : this.domainName;
    }

    /**
     * Set of domain validation objects which can be used to complete certificate validation. Can have more than one element, e.g., if SANs are defined. Only set if `DNS`-validation was used.
     * 
     */
    @InputImport(name="domainValidationOptions")
      private final @Nullable Output<List<CertificateDomainValidationOptionGetArgs>> domainValidationOptions;

    public Output<List<CertificateDomainValidationOptionGetArgs>> getDomainValidationOptions() {
        return this.domainValidationOptions == null ? Output.empty() : this.domainValidationOptions;
    }

    /**
     * Configuration block used to set certificate options. Detailed below.
     * * Importing an existing certificate
     * 
     */
    @InputImport(name="options")
      private final @Nullable Output<CertificateOptionsGetArgs> options;

    public Output<CertificateOptionsGetArgs> getOptions() {
        return this.options == null ? Output.empty() : this.options;
    }

    /**
     * The certificate's PEM-formatted private key
     * 
     */
    @InputImport(name="privateKey")
      private final @Nullable Output<String> privateKey;

    public Output<String> getPrivateKey() {
        return this.privateKey == null ? Output.empty() : this.privateKey;
    }

    /**
     * Status of the certificate.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Output<String> status;

    public Output<String> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * Set of domains that should be SANs in the issued certificate. To remove all elements of a previously configured list, set this value equal to an empty list (`[]`).
     * 
     */
    @InputImport(name="subjectAlternativeNames")
      private final @Nullable Output<List<String>> subjectAlternativeNames;

    public Output<List<String>> getSubjectAlternativeNames() {
        return this.subjectAlternativeNames == null ? Output.empty() : this.subjectAlternativeNames;
    }

    /**
     * A map of tags to assign to the resource..
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * A list of addresses that received a validation E-Mail. Only set if `EMAIL`-validation was used.
     * 
     */
    @InputImport(name="validationEmails")
      private final @Nullable Output<List<String>> validationEmails;

    public Output<List<String>> getValidationEmails() {
        return this.validationEmails == null ? Output.empty() : this.validationEmails;
    }

    /**
     * Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into the provider.
     * 
     */
    @InputImport(name="validationMethod")
      private final @Nullable Output<String> validationMethod;

    public Output<String> getValidationMethod() {
        return this.validationMethod == null ? Output.empty() : this.validationMethod;
    }

    public CertificateState(
        @Nullable Output<String> arn,
        @Nullable Output<String> certificateAuthorityArn,
        @Nullable Output<String> certificateBody,
        @Nullable Output<String> certificateChain,
        @Nullable Output<String> domainName,
        @Nullable Output<List<CertificateDomainValidationOptionGetArgs>> domainValidationOptions,
        @Nullable Output<CertificateOptionsGetArgs> options,
        @Nullable Output<String> privateKey,
        @Nullable Output<String> status,
        @Nullable Output<List<String>> subjectAlternativeNames,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<List<String>> validationEmails,
        @Nullable Output<String> validationMethod) {
        this.arn = arn;
        this.certificateAuthorityArn = certificateAuthorityArn;
        this.certificateBody = certificateBody;
        this.certificateChain = certificateChain;
        this.domainName = domainName;
        this.domainValidationOptions = domainValidationOptions;
        this.options = options;
        this.privateKey = privateKey;
        this.status = status;
        this.subjectAlternativeNames = subjectAlternativeNames;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.validationEmails = validationEmails;
        this.validationMethod = validationMethod;
    }

    private CertificateState() {
        this.arn = Output.empty();
        this.certificateAuthorityArn = Output.empty();
        this.certificateBody = Output.empty();
        this.certificateChain = Output.empty();
        this.domainName = Output.empty();
        this.domainValidationOptions = Output.empty();
        this.options = Output.empty();
        this.privateKey = Output.empty();
        this.status = Output.empty();
        this.subjectAlternativeNames = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.validationEmails = Output.empty();
        this.validationMethod = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> certificateAuthorityArn;
        private @Nullable Output<String> certificateBody;
        private @Nullable Output<String> certificateChain;
        private @Nullable Output<String> domainName;
        private @Nullable Output<List<CertificateDomainValidationOptionGetArgs>> domainValidationOptions;
        private @Nullable Output<CertificateOptionsGetArgs> options;
        private @Nullable Output<String> privateKey;
        private @Nullable Output<String> status;
        private @Nullable Output<List<String>> subjectAlternativeNames;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<List<String>> validationEmails;
        private @Nullable Output<String> validationMethod;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.certificateAuthorityArn = defaults.certificateAuthorityArn;
    	      this.certificateBody = defaults.certificateBody;
    	      this.certificateChain = defaults.certificateChain;
    	      this.domainName = defaults.domainName;
    	      this.domainValidationOptions = defaults.domainValidationOptions;
    	      this.options = defaults.options;
    	      this.privateKey = defaults.privateKey;
    	      this.status = defaults.status;
    	      this.subjectAlternativeNames = defaults.subjectAlternativeNames;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.validationEmails = defaults.validationEmails;
    	      this.validationMethod = defaults.validationMethod;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }

        public Builder certificateAuthorityArn(@Nullable Output<String> certificateAuthorityArn) {
            this.certificateAuthorityArn = certificateAuthorityArn;
            return this;
        }

        public Builder certificateAuthorityArn(@Nullable String certificateAuthorityArn) {
            this.certificateAuthorityArn = Output.ofNullable(certificateAuthorityArn);
            return this;
        }

        public Builder certificateBody(@Nullable Output<String> certificateBody) {
            this.certificateBody = certificateBody;
            return this;
        }

        public Builder certificateBody(@Nullable String certificateBody) {
            this.certificateBody = Output.ofNullable(certificateBody);
            return this;
        }

        public Builder certificateChain(@Nullable Output<String> certificateChain) {
            this.certificateChain = certificateChain;
            return this;
        }

        public Builder certificateChain(@Nullable String certificateChain) {
            this.certificateChain = Output.ofNullable(certificateChain);
            return this;
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            this.domainName = domainName;
            return this;
        }

        public Builder domainName(@Nullable String domainName) {
            this.domainName = Output.ofNullable(domainName);
            return this;
        }

        public Builder domainValidationOptions(@Nullable Output<List<CertificateDomainValidationOptionGetArgs>> domainValidationOptions) {
            this.domainValidationOptions = domainValidationOptions;
            return this;
        }

        public Builder domainValidationOptions(@Nullable List<CertificateDomainValidationOptionGetArgs> domainValidationOptions) {
            this.domainValidationOptions = Output.ofNullable(domainValidationOptions);
            return this;
        }

        public Builder options(@Nullable Output<CertificateOptionsGetArgs> options) {
            this.options = options;
            return this;
        }

        public Builder options(@Nullable CertificateOptionsGetArgs options) {
            this.options = Output.ofNullable(options);
            return this;
        }

        public Builder privateKey(@Nullable Output<String> privateKey) {
            this.privateKey = privateKey;
            return this;
        }

        public Builder privateKey(@Nullable String privateKey) {
            this.privateKey = Output.ofNullable(privateKey);
            return this;
        }

        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Output.ofNullable(status);
            return this;
        }

        public Builder subjectAlternativeNames(@Nullable Output<List<String>> subjectAlternativeNames) {
            this.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        public Builder subjectAlternativeNames(@Nullable List<String> subjectAlternativeNames) {
            this.subjectAlternativeNames = Output.ofNullable(subjectAlternativeNames);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }

        public Builder validationEmails(@Nullable Output<List<String>> validationEmails) {
            this.validationEmails = validationEmails;
            return this;
        }

        public Builder validationEmails(@Nullable List<String> validationEmails) {
            this.validationEmails = Output.ofNullable(validationEmails);
            return this;
        }

        public Builder validationMethod(@Nullable Output<String> validationMethod) {
            this.validationMethod = validationMethod;
            return this;
        }

        public Builder validationMethod(@Nullable String validationMethod) {
            this.validationMethod = Output.ofNullable(validationMethod);
            return this;
        }
        public CertificateState build() {
            return new CertificateState(arn, certificateAuthorityArn, certificateBody, certificateChain, domainName, domainValidationOptions, options, privateKey, status, subjectAlternativeNames, tags, tagsAll, validationEmails, validationMethod);
        }
    }
}
