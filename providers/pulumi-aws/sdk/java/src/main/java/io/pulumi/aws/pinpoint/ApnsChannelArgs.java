// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.pinpoint;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApnsChannelArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApnsChannelArgs Empty = new ApnsChannelArgs();

    /**
     * The application ID.
     * 
     */
    @Import(name="applicationId", required=true)
      private final Output<String> applicationId;

    public Output<String> getApplicationId() {
        return this.applicationId;
    }

    /**
     * The ID assigned to your iOS app. To find this value, choose Certificates, IDs & Profiles, choose App IDs in the Identifiers section, and choose your app.
     * 
     */
    @Import(name="bundleId")
      private final @Nullable Output<String> bundleId;

    public Output<String> getBundleId() {
        return this.bundleId == null ? Output.empty() : this.bundleId;
    }

    /**
     * The pem encoded TLS Certificate from Apple.
     * 
     */
    @Import(name="certificate")
      private final @Nullable Output<String> certificate;

    public Output<String> getCertificate() {
        return this.certificate == null ? Output.empty() : this.certificate;
    }

    /**
     * The default authentication method used for APNs.
     * __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
     * You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
     * If your default authentication type fails, Amazon Pinpoint doesn't attempt to use the other authentication type.
     * 
     */
    @Import(name="defaultAuthenticationMethod")
      private final @Nullable Output<String> defaultAuthenticationMethod;

    public Output<String> getDefaultAuthenticationMethod() {
        return this.defaultAuthenticationMethod == null ? Output.empty() : this.defaultAuthenticationMethod;
    }

    /**
     * Whether the channel is enabled or disabled. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * The Certificate Private Key file (ie. `.key` file).
     * 
     */
    @Import(name="privateKey")
      private final @Nullable Output<String> privateKey;

    public Output<String> getPrivateKey() {
        return this.privateKey == null ? Output.empty() : this.privateKey;
    }

    /**
     * The ID assigned to your Apple developer account team. This value is provided on the Membership page.
     * 
     */
    @Import(name="teamId")
      private final @Nullable Output<String> teamId;

    public Output<String> getTeamId() {
        return this.teamId == null ? Output.empty() : this.teamId;
    }

    /**
     * The `.p8` file that you download from your Apple developer account when you create an authentication key.
     * 
     */
    @Import(name="tokenKey")
      private final @Nullable Output<String> tokenKey;

    public Output<String> getTokenKey() {
        return this.tokenKey == null ? Output.empty() : this.tokenKey;
    }

    /**
     * The ID assigned to your signing key. To find this value, choose Certificates, IDs & Profiles, and choose your key in the Keys section.
     * 
     */
    @Import(name="tokenKeyId")
      private final @Nullable Output<String> tokenKeyId;

    public Output<String> getTokenKeyId() {
        return this.tokenKeyId == null ? Output.empty() : this.tokenKeyId;
    }

    public ApnsChannelArgs(
        Output<String> applicationId,
        @Nullable Output<String> bundleId,
        @Nullable Output<String> certificate,
        @Nullable Output<String> defaultAuthenticationMethod,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<String> privateKey,
        @Nullable Output<String> teamId,
        @Nullable Output<String> tokenKey,
        @Nullable Output<String> tokenKeyId) {
        this.applicationId = Objects.requireNonNull(applicationId, "expected parameter 'applicationId' to be non-null");
        this.bundleId = bundleId;
        this.certificate = certificate;
        this.defaultAuthenticationMethod = defaultAuthenticationMethod;
        this.enabled = enabled;
        this.privateKey = privateKey;
        this.teamId = teamId;
        this.tokenKey = tokenKey;
        this.tokenKeyId = tokenKeyId;
    }

    private ApnsChannelArgs() {
        this.applicationId = Output.empty();
        this.bundleId = Output.empty();
        this.certificate = Output.empty();
        this.defaultAuthenticationMethod = Output.empty();
        this.enabled = Output.empty();
        this.privateKey = Output.empty();
        this.teamId = Output.empty();
        this.tokenKey = Output.empty();
        this.tokenKeyId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApnsChannelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> applicationId;
        private @Nullable Output<String> bundleId;
        private @Nullable Output<String> certificate;
        private @Nullable Output<String> defaultAuthenticationMethod;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<String> privateKey;
        private @Nullable Output<String> teamId;
        private @Nullable Output<String> tokenKey;
        private @Nullable Output<String> tokenKeyId;

        public Builder() {
    	      // Empty
        }

        public Builder(ApnsChannelArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.bundleId = defaults.bundleId;
    	      this.certificate = defaults.certificate;
    	      this.defaultAuthenticationMethod = defaults.defaultAuthenticationMethod;
    	      this.enabled = defaults.enabled;
    	      this.privateKey = defaults.privateKey;
    	      this.teamId = defaults.teamId;
    	      this.tokenKey = defaults.tokenKey;
    	      this.tokenKeyId = defaults.tokenKeyId;
        }

        public Builder applicationId(Output<String> applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }
        public Builder applicationId(String applicationId) {
            this.applicationId = Output.of(Objects.requireNonNull(applicationId));
            return this;
        }
        public Builder bundleId(@Nullable Output<String> bundleId) {
            this.bundleId = bundleId;
            return this;
        }
        public Builder bundleId(@Nullable String bundleId) {
            this.bundleId = Output.ofNullable(bundleId);
            return this;
        }
        public Builder certificate(@Nullable Output<String> certificate) {
            this.certificate = certificate;
            return this;
        }
        public Builder certificate(@Nullable String certificate) {
            this.certificate = Output.ofNullable(certificate);
            return this;
        }
        public Builder defaultAuthenticationMethod(@Nullable Output<String> defaultAuthenticationMethod) {
            this.defaultAuthenticationMethod = defaultAuthenticationMethod;
            return this;
        }
        public Builder defaultAuthenticationMethod(@Nullable String defaultAuthenticationMethod) {
            this.defaultAuthenticationMethod = Output.ofNullable(defaultAuthenticationMethod);
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }
        public Builder privateKey(@Nullable Output<String> privateKey) {
            this.privateKey = privateKey;
            return this;
        }
        public Builder privateKey(@Nullable String privateKey) {
            this.privateKey = Output.ofNullable(privateKey);
            return this;
        }
        public Builder teamId(@Nullable Output<String> teamId) {
            this.teamId = teamId;
            return this;
        }
        public Builder teamId(@Nullable String teamId) {
            this.teamId = Output.ofNullable(teamId);
            return this;
        }
        public Builder tokenKey(@Nullable Output<String> tokenKey) {
            this.tokenKey = tokenKey;
            return this;
        }
        public Builder tokenKey(@Nullable String tokenKey) {
            this.tokenKey = Output.ofNullable(tokenKey);
            return this;
        }
        public Builder tokenKeyId(@Nullable Output<String> tokenKeyId) {
            this.tokenKeyId = tokenKeyId;
            return this;
        }
        public Builder tokenKeyId(@Nullable String tokenKeyId) {
            this.tokenKeyId = Output.ofNullable(tokenKeyId);
            return this;
        }        public ApnsChannelArgs build() {
            return new ApnsChannelArgs(applicationId, bundleId, certificate, defaultAuthenticationMethod, enabled, privateKey, teamId, tokenKey, tokenKeyId);
        }
    }
}
