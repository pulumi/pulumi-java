// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codepipeline;

import io.pulumi.aws.codepipeline.inputs.WebhookAuthenticationConfigurationArgs;
import io.pulumi.aws.codepipeline.inputs.WebhookFilterArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WebhookArgs extends io.pulumi.resources.ResourceArgs {

    public static final WebhookArgs Empty = new WebhookArgs();

    /**
     * The type of authentication  to use. One of `IP`, `GITHUB_HMAC`, or `UNAUTHENTICATED`.
     * 
     */
    @Import(name="authentication", required=true)
      private final Output<String> authentication;

    public Output<String> authentication() {
        return this.authentication;
    }

    /**
     * An `auth` block. Required for `IP` and `GITHUB_HMAC`. Auth blocks are documented below.
     * 
     */
    @Import(name="authenticationConfiguration")
      private final @Nullable Output<WebhookAuthenticationConfigurationArgs> authenticationConfiguration;

    public Output<WebhookAuthenticationConfigurationArgs> authenticationConfiguration() {
        return this.authenticationConfiguration == null ? Codegen.empty() : this.authenticationConfiguration;
    }

    /**
     * One or more `filter` blocks. Filter blocks are documented below.
     * 
     */
    @Import(name="filters", required=true)
      private final Output<List<WebhookFilterArgs>> filters;

    public Output<List<WebhookFilterArgs>> filters() {
        return this.filters;
    }

    /**
     * The name of the webhook.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The name of the action in a pipeline you want to connect to the webhook. The action must be from the source (first) stage of the pipeline.
     * 
     */
    @Import(name="targetAction", required=true)
      private final Output<String> targetAction;

    public Output<String> targetAction() {
        return this.targetAction;
    }

    /**
     * The name of the pipeline.
     * 
     */
    @Import(name="targetPipeline", required=true)
      private final Output<String> targetPipeline;

    public Output<String> targetPipeline() {
        return this.targetPipeline;
    }

    public WebhookArgs(
        Output<String> authentication,
        @Nullable Output<WebhookAuthenticationConfigurationArgs> authenticationConfiguration,
        Output<List<WebhookFilterArgs>> filters,
        @Nullable Output<String> name,
        @Nullable Output<Map<String,String>> tags,
        Output<String> targetAction,
        Output<String> targetPipeline) {
        this.authentication = Objects.requireNonNull(authentication, "expected parameter 'authentication' to be non-null");
        this.authenticationConfiguration = authenticationConfiguration;
        this.filters = Objects.requireNonNull(filters, "expected parameter 'filters' to be non-null");
        this.name = name;
        this.tags = tags;
        this.targetAction = Objects.requireNonNull(targetAction, "expected parameter 'targetAction' to be non-null");
        this.targetPipeline = Objects.requireNonNull(targetPipeline, "expected parameter 'targetPipeline' to be non-null");
    }

    private WebhookArgs() {
        this.authentication = Codegen.empty();
        this.authenticationConfiguration = Codegen.empty();
        this.filters = Codegen.empty();
        this.name = Codegen.empty();
        this.tags = Codegen.empty();
        this.targetAction = Codegen.empty();
        this.targetPipeline = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebhookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> authentication;
        private @Nullable Output<WebhookAuthenticationConfigurationArgs> authenticationConfiguration;
        private Output<List<WebhookFilterArgs>> filters;
        private @Nullable Output<String> name;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> targetAction;
        private Output<String> targetPipeline;

        public Builder() {
    	      // Empty
        }

        public Builder(WebhookArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentication = defaults.authentication;
    	      this.authenticationConfiguration = defaults.authenticationConfiguration;
    	      this.filters = defaults.filters;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.targetAction = defaults.targetAction;
    	      this.targetPipeline = defaults.targetPipeline;
        }

        public Builder authentication(Output<String> authentication) {
            this.authentication = Objects.requireNonNull(authentication);
            return this;
        }
        public Builder authentication(String authentication) {
            this.authentication = Output.of(Objects.requireNonNull(authentication));
            return this;
        }
        public Builder authenticationConfiguration(@Nullable Output<WebhookAuthenticationConfigurationArgs> authenticationConfiguration) {
            this.authenticationConfiguration = authenticationConfiguration;
            return this;
        }
        public Builder authenticationConfiguration(@Nullable WebhookAuthenticationConfigurationArgs authenticationConfiguration) {
            this.authenticationConfiguration = Codegen.ofNullable(authenticationConfiguration);
            return this;
        }
        public Builder filters(Output<List<WebhookFilterArgs>> filters) {
            this.filters = Objects.requireNonNull(filters);
            return this;
        }
        public Builder filters(List<WebhookFilterArgs> filters) {
            this.filters = Output.of(Objects.requireNonNull(filters));
            return this;
        }
        public Builder filters(WebhookFilterArgs... filters) {
            return filters(List.of(filters));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder targetAction(Output<String> targetAction) {
            this.targetAction = Objects.requireNonNull(targetAction);
            return this;
        }
        public Builder targetAction(String targetAction) {
            this.targetAction = Output.of(Objects.requireNonNull(targetAction));
            return this;
        }
        public Builder targetPipeline(Output<String> targetPipeline) {
            this.targetPipeline = Objects.requireNonNull(targetPipeline);
            return this;
        }
        public Builder targetPipeline(String targetPipeline) {
            this.targetPipeline = Output.of(Objects.requireNonNull(targetPipeline));
            return this;
        }        public WebhookArgs build() {
            return new WebhookArgs(authentication, authenticationConfiguration, filters, name, tags, targetAction, targetPipeline);
        }
    }
}
