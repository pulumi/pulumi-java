// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.amplify;

import io.pulumi.aws.amplify.inputs.DomainAssociationSubDomainArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainAssociationArgs extends io.pulumi.resources.ResourceArgs {

    public static final DomainAssociationArgs Empty = new DomainAssociationArgs();

    /**
     * The unique ID for an Amplify app.
     * 
     */
    @Import(name="appId", required=true)
      private final Output<String> appId;

    public Output<String> getAppId() {
        return this.appId;
    }

    /**
     * The domain name for the domain association.
     * 
     */
    @Import(name="domainName", required=true)
      private final Output<String> domainName;

    public Output<String> getDomainName() {
        return this.domainName;
    }

    /**
     * The setting for the subdomain. Documented below.
     * 
     */
    @Import(name="subDomains", required=true)
      private final Output<List<DomainAssociationSubDomainArgs>> subDomains;

    public Output<List<DomainAssociationSubDomainArgs>> getSubDomains() {
        return this.subDomains;
    }

    /**
     * If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
     * 
     */
    @Import(name="waitForVerification")
      private final @Nullable Output<Boolean> waitForVerification;

    public Output<Boolean> getWaitForVerification() {
        return this.waitForVerification == null ? Codegen.empty() : this.waitForVerification;
    }

    public DomainAssociationArgs(
        Output<String> appId,
        Output<String> domainName,
        Output<List<DomainAssociationSubDomainArgs>> subDomains,
        @Nullable Output<Boolean> waitForVerification) {
        this.appId = Objects.requireNonNull(appId, "expected parameter 'appId' to be non-null");
        this.domainName = Objects.requireNonNull(domainName, "expected parameter 'domainName' to be non-null");
        this.subDomains = Objects.requireNonNull(subDomains, "expected parameter 'subDomains' to be non-null");
        this.waitForVerification = waitForVerification;
    }

    private DomainAssociationArgs() {
        this.appId = Codegen.empty();
        this.domainName = Codegen.empty();
        this.subDomains = Codegen.empty();
        this.waitForVerification = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> appId;
        private Output<String> domainName;
        private Output<List<DomainAssociationSubDomainArgs>> subDomains;
        private @Nullable Output<Boolean> waitForVerification;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainAssociationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.domainName = defaults.domainName;
    	      this.subDomains = defaults.subDomains;
    	      this.waitForVerification = defaults.waitForVerification;
        }

        public Builder appId(Output<String> appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }
        public Builder appId(String appId) {
            this.appId = Output.of(Objects.requireNonNull(appId));
            return this;
        }
        public Builder domainName(Output<String> domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        public Builder domainName(String domainName) {
            this.domainName = Output.of(Objects.requireNonNull(domainName));
            return this;
        }
        public Builder subDomains(Output<List<DomainAssociationSubDomainArgs>> subDomains) {
            this.subDomains = Objects.requireNonNull(subDomains);
            return this;
        }
        public Builder subDomains(List<DomainAssociationSubDomainArgs> subDomains) {
            this.subDomains = Output.of(Objects.requireNonNull(subDomains));
            return this;
        }
        public Builder subDomains(DomainAssociationSubDomainArgs... subDomains) {
            return subDomains(List.of(subDomains));
        }
        public Builder waitForVerification(@Nullable Output<Boolean> waitForVerification) {
            this.waitForVerification = waitForVerification;
            return this;
        }
        public Builder waitForVerification(@Nullable Boolean waitForVerification) {
            this.waitForVerification = Codegen.ofNullable(waitForVerification);
            return this;
        }        public DomainAssociationArgs build() {
            return new DomainAssociationArgs(appId, domainName, subDomains, waitForVerification);
        }
    }
}
