// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.route53recoverycontrol.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class SafetyRuleRuleConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final SafetyRuleRuleConfigArgs Empty = new SafetyRuleRuleConfigArgs();

    /**
     * Logical negation of the rule.
     * 
     */
    @InputImport(name="inverted", required=true)
      private final Input<Boolean> inverted;

    public Input<Boolean> getInverted() {
        return this.inverted;
    }

    /**
     * Number of controls that must be set when you specify an `ATLEAST` type rule.
     * 
     */
    @InputImport(name="threshold", required=true)
      private final Input<Integer> threshold;

    public Input<Integer> getThreshold() {
        return this.threshold;
    }

    /**
     * Rule type. Valid values are `ATLEAST`, `AND`, and `OR`.
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public SafetyRuleRuleConfigArgs(
        Input<Boolean> inverted,
        Input<Integer> threshold,
        Input<String> type) {
        this.inverted = Objects.requireNonNull(inverted, "expected parameter 'inverted' to be non-null");
        this.threshold = Objects.requireNonNull(threshold, "expected parameter 'threshold' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private SafetyRuleRuleConfigArgs() {
        this.inverted = Input.empty();
        this.threshold = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SafetyRuleRuleConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Boolean> inverted;
        private Input<Integer> threshold;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(SafetyRuleRuleConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inverted = defaults.inverted;
    	      this.threshold = defaults.threshold;
    	      this.type = defaults.type;
        }

        public Builder inverted(Input<Boolean> inverted) {
            this.inverted = Objects.requireNonNull(inverted);
            return this;
        }

        public Builder inverted(Boolean inverted) {
            this.inverted = Input.of(Objects.requireNonNull(inverted));
            return this;
        }

        public Builder threshold(Input<Integer> threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }

        public Builder threshold(Integer threshold) {
            this.threshold = Input.of(Objects.requireNonNull(threshold));
            return this;
        }

        public Builder type(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }
        public SafetyRuleRuleConfigArgs build() {
            return new SafetyRuleRuleConfigArgs(inverted, threshold, type);
        }
    }
}
