// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecs;

import io.pulumi.aws.ecs.inputs.TaskDefinitionEphemeralStorageArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionInferenceAcceleratorArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionPlacementConstraintArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionProxyConfigurationArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionRuntimePlatformArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionVolumeArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TaskDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final TaskDefinitionArgs Empty = new TaskDefinitionArgs();

    /**
     * A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
     * 
     */
    @InputImport(name="containerDefinitions", required=true)
      private final Input<String> containerDefinitions;

    public Input<String> getContainerDefinitions() {
        return this.containerDefinitions;
    }

    /**
     * Number of cpu units used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
     * 
     */
    @InputImport(name="cpu")
      private final @Nullable Input<String> cpu;

    public Input<String> getCpu() {
        return this.cpu == null ? Input.empty() : this.cpu;
    }

    /**
     * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
     * 
     */
    @InputImport(name="ephemeralStorage")
      private final @Nullable Input<TaskDefinitionEphemeralStorageArgs> ephemeralStorage;

    public Input<TaskDefinitionEphemeralStorageArgs> getEphemeralStorage() {
        return this.ephemeralStorage == null ? Input.empty() : this.ephemeralStorage;
    }

    /**
     * ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
     * 
     */
    @InputImport(name="executionRoleArn")
      private final @Nullable Input<String> executionRoleArn;

    public Input<String> getExecutionRoleArn() {
        return this.executionRoleArn == null ? Input.empty() : this.executionRoleArn;
    }

    /**
     * A unique name for your task definition.
     * 
     */
    @InputImport(name="family", required=true)
      private final Input<String> family;

    public Input<String> getFamily() {
        return this.family;
    }

    /**
     * Configuration block(s) with Inference Accelerators settings. Detailed below.
     * 
     */
    @InputImport(name="inferenceAccelerators")
      private final @Nullable Input<List<TaskDefinitionInferenceAcceleratorArgs>> inferenceAccelerators;

    public Input<List<TaskDefinitionInferenceAcceleratorArgs>> getInferenceAccelerators() {
        return this.inferenceAccelerators == null ? Input.empty() : this.inferenceAccelerators;
    }

    /**
     * IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
     * 
     */
    @InputImport(name="ipcMode")
      private final @Nullable Input<String> ipcMode;

    public Input<String> getIpcMode() {
        return this.ipcMode == null ? Input.empty() : this.ipcMode;
    }

    /**
     * Amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
     * 
     */
    @InputImport(name="memory")
      private final @Nullable Input<String> memory;

    public Input<String> getMemory() {
        return this.memory == null ? Input.empty() : this.memory;
    }

    /**
     * Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
     * 
     */
    @InputImport(name="networkMode")
      private final @Nullable Input<String> networkMode;

    public Input<String> getNetworkMode() {
        return this.networkMode == null ? Input.empty() : this.networkMode;
    }

    /**
     * Process namespace to use for the containers in the task. The valid values are `host` and `task`.
     * 
     */
    @InputImport(name="pidMode")
      private final @Nullable Input<String> pidMode;

    public Input<String> getPidMode() {
        return this.pidMode == null ? Input.empty() : this.pidMode;
    }

    /**
     * Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
     * 
     */
    @InputImport(name="placementConstraints")
      private final @Nullable Input<List<TaskDefinitionPlacementConstraintArgs>> placementConstraints;

    public Input<List<TaskDefinitionPlacementConstraintArgs>> getPlacementConstraints() {
        return this.placementConstraints == null ? Input.empty() : this.placementConstraints;
    }

    /**
     * Configuration block for the App Mesh proxy. Detailed below.
     * 
     */
    @InputImport(name="proxyConfiguration")
      private final @Nullable Input<TaskDefinitionProxyConfigurationArgs> proxyConfiguration;

    public Input<TaskDefinitionProxyConfigurationArgs> getProxyConfiguration() {
        return this.proxyConfiguration == null ? Input.empty() : this.proxyConfiguration;
    }

    /**
     * Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
     * 
     */
    @InputImport(name="requiresCompatibilities")
      private final @Nullable Input<List<String>> requiresCompatibilities;

    public Input<List<String>> getRequiresCompatibilities() {
        return this.requiresCompatibilities == null ? Input.empty() : this.requiresCompatibilities;
    }

    /**
     * Configuration block for runtime_platform that containers in your task may use.
     * 
     */
    @InputImport(name="runtimePlatform")
      private final @Nullable Input<TaskDefinitionRuntimePlatformArgs> runtimePlatform;

    public Input<TaskDefinitionRuntimePlatformArgs> getRuntimePlatform() {
        return this.runtimePlatform == null ? Input.empty() : this.runtimePlatform;
    }

    @InputImport(name="skipDestroy")
      private final @Nullable Input<Boolean> skipDestroy;

    public Input<Boolean> getSkipDestroy() {
        return this.skipDestroy == null ? Input.empty() : this.skipDestroy;
    }

    /**
     * Key-value map of resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
     * 
     */
    @InputImport(name="taskRoleArn")
      private final @Nullable Input<String> taskRoleArn;

    public Input<String> getTaskRoleArn() {
        return this.taskRoleArn == null ? Input.empty() : this.taskRoleArn;
    }

    /**
     * Configuration block for volumes that containers in your task may use. Detailed below.
     * 
     */
    @InputImport(name="volumes")
      private final @Nullable Input<List<TaskDefinitionVolumeArgs>> volumes;

    public Input<List<TaskDefinitionVolumeArgs>> getVolumes() {
        return this.volumes == null ? Input.empty() : this.volumes;
    }

    public TaskDefinitionArgs(
        Input<String> containerDefinitions,
        @Nullable Input<String> cpu,
        @Nullable Input<TaskDefinitionEphemeralStorageArgs> ephemeralStorage,
        @Nullable Input<String> executionRoleArn,
        Input<String> family,
        @Nullable Input<List<TaskDefinitionInferenceAcceleratorArgs>> inferenceAccelerators,
        @Nullable Input<String> ipcMode,
        @Nullable Input<String> memory,
        @Nullable Input<String> networkMode,
        @Nullable Input<String> pidMode,
        @Nullable Input<List<TaskDefinitionPlacementConstraintArgs>> placementConstraints,
        @Nullable Input<TaskDefinitionProxyConfigurationArgs> proxyConfiguration,
        @Nullable Input<List<String>> requiresCompatibilities,
        @Nullable Input<TaskDefinitionRuntimePlatformArgs> runtimePlatform,
        @Nullable Input<Boolean> skipDestroy,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> taskRoleArn,
        @Nullable Input<List<TaskDefinitionVolumeArgs>> volumes) {
        this.containerDefinitions = Objects.requireNonNull(containerDefinitions, "expected parameter 'containerDefinitions' to be non-null");
        this.cpu = cpu;
        this.ephemeralStorage = ephemeralStorage;
        this.executionRoleArn = executionRoleArn;
        this.family = Objects.requireNonNull(family, "expected parameter 'family' to be non-null");
        this.inferenceAccelerators = inferenceAccelerators;
        this.ipcMode = ipcMode;
        this.memory = memory;
        this.networkMode = networkMode;
        this.pidMode = pidMode;
        this.placementConstraints = placementConstraints;
        this.proxyConfiguration = proxyConfiguration;
        this.requiresCompatibilities = requiresCompatibilities;
        this.runtimePlatform = runtimePlatform;
        this.skipDestroy = skipDestroy;
        this.tags = tags;
        this.taskRoleArn = taskRoleArn;
        this.volumes = volumes;
    }

    private TaskDefinitionArgs() {
        this.containerDefinitions = Input.empty();
        this.cpu = Input.empty();
        this.ephemeralStorage = Input.empty();
        this.executionRoleArn = Input.empty();
        this.family = Input.empty();
        this.inferenceAccelerators = Input.empty();
        this.ipcMode = Input.empty();
        this.memory = Input.empty();
        this.networkMode = Input.empty();
        this.pidMode = Input.empty();
        this.placementConstraints = Input.empty();
        this.proxyConfiguration = Input.empty();
        this.requiresCompatibilities = Input.empty();
        this.runtimePlatform = Input.empty();
        this.skipDestroy = Input.empty();
        this.tags = Input.empty();
        this.taskRoleArn = Input.empty();
        this.volumes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> containerDefinitions;
        private @Nullable Input<String> cpu;
        private @Nullable Input<TaskDefinitionEphemeralStorageArgs> ephemeralStorage;
        private @Nullable Input<String> executionRoleArn;
        private Input<String> family;
        private @Nullable Input<List<TaskDefinitionInferenceAcceleratorArgs>> inferenceAccelerators;
        private @Nullable Input<String> ipcMode;
        private @Nullable Input<String> memory;
        private @Nullable Input<String> networkMode;
        private @Nullable Input<String> pidMode;
        private @Nullable Input<List<TaskDefinitionPlacementConstraintArgs>> placementConstraints;
        private @Nullable Input<TaskDefinitionProxyConfigurationArgs> proxyConfiguration;
        private @Nullable Input<List<String>> requiresCompatibilities;
        private @Nullable Input<TaskDefinitionRuntimePlatformArgs> runtimePlatform;
        private @Nullable Input<Boolean> skipDestroy;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> taskRoleArn;
        private @Nullable Input<List<TaskDefinitionVolumeArgs>> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerDefinitions = defaults.containerDefinitions;
    	      this.cpu = defaults.cpu;
    	      this.ephemeralStorage = defaults.ephemeralStorage;
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.family = defaults.family;
    	      this.inferenceAccelerators = defaults.inferenceAccelerators;
    	      this.ipcMode = defaults.ipcMode;
    	      this.memory = defaults.memory;
    	      this.networkMode = defaults.networkMode;
    	      this.pidMode = defaults.pidMode;
    	      this.placementConstraints = defaults.placementConstraints;
    	      this.proxyConfiguration = defaults.proxyConfiguration;
    	      this.requiresCompatibilities = defaults.requiresCompatibilities;
    	      this.runtimePlatform = defaults.runtimePlatform;
    	      this.skipDestroy = defaults.skipDestroy;
    	      this.tags = defaults.tags;
    	      this.taskRoleArn = defaults.taskRoleArn;
    	      this.volumes = defaults.volumes;
        }

        public Builder setContainerDefinitions(Input<String> containerDefinitions) {
            this.containerDefinitions = Objects.requireNonNull(containerDefinitions);
            return this;
        }

        public Builder setContainerDefinitions(String containerDefinitions) {
            this.containerDefinitions = Input.of(Objects.requireNonNull(containerDefinitions));
            return this;
        }

        public Builder setCpu(@Nullable Input<String> cpu) {
            this.cpu = cpu;
            return this;
        }

        public Builder setCpu(@Nullable String cpu) {
            this.cpu = Input.ofNullable(cpu);
            return this;
        }

        public Builder setEphemeralStorage(@Nullable Input<TaskDefinitionEphemeralStorageArgs> ephemeralStorage) {
            this.ephemeralStorage = ephemeralStorage;
            return this;
        }

        public Builder setEphemeralStorage(@Nullable TaskDefinitionEphemeralStorageArgs ephemeralStorage) {
            this.ephemeralStorage = Input.ofNullable(ephemeralStorage);
            return this;
        }

        public Builder setExecutionRoleArn(@Nullable Input<String> executionRoleArn) {
            this.executionRoleArn = executionRoleArn;
            return this;
        }

        public Builder setExecutionRoleArn(@Nullable String executionRoleArn) {
            this.executionRoleArn = Input.ofNullable(executionRoleArn);
            return this;
        }

        public Builder setFamily(Input<String> family) {
            this.family = Objects.requireNonNull(family);
            return this;
        }

        public Builder setFamily(String family) {
            this.family = Input.of(Objects.requireNonNull(family));
            return this;
        }

        public Builder setInferenceAccelerators(@Nullable Input<List<TaskDefinitionInferenceAcceleratorArgs>> inferenceAccelerators) {
            this.inferenceAccelerators = inferenceAccelerators;
            return this;
        }

        public Builder setInferenceAccelerators(@Nullable List<TaskDefinitionInferenceAcceleratorArgs> inferenceAccelerators) {
            this.inferenceAccelerators = Input.ofNullable(inferenceAccelerators);
            return this;
        }

        public Builder setIpcMode(@Nullable Input<String> ipcMode) {
            this.ipcMode = ipcMode;
            return this;
        }

        public Builder setIpcMode(@Nullable String ipcMode) {
            this.ipcMode = Input.ofNullable(ipcMode);
            return this;
        }

        public Builder setMemory(@Nullable Input<String> memory) {
            this.memory = memory;
            return this;
        }

        public Builder setMemory(@Nullable String memory) {
            this.memory = Input.ofNullable(memory);
            return this;
        }

        public Builder setNetworkMode(@Nullable Input<String> networkMode) {
            this.networkMode = networkMode;
            return this;
        }

        public Builder setNetworkMode(@Nullable String networkMode) {
            this.networkMode = Input.ofNullable(networkMode);
            return this;
        }

        public Builder setPidMode(@Nullable Input<String> pidMode) {
            this.pidMode = pidMode;
            return this;
        }

        public Builder setPidMode(@Nullable String pidMode) {
            this.pidMode = Input.ofNullable(pidMode);
            return this;
        }

        public Builder setPlacementConstraints(@Nullable Input<List<TaskDefinitionPlacementConstraintArgs>> placementConstraints) {
            this.placementConstraints = placementConstraints;
            return this;
        }

        public Builder setPlacementConstraints(@Nullable List<TaskDefinitionPlacementConstraintArgs> placementConstraints) {
            this.placementConstraints = Input.ofNullable(placementConstraints);
            return this;
        }

        public Builder setProxyConfiguration(@Nullable Input<TaskDefinitionProxyConfigurationArgs> proxyConfiguration) {
            this.proxyConfiguration = proxyConfiguration;
            return this;
        }

        public Builder setProxyConfiguration(@Nullable TaskDefinitionProxyConfigurationArgs proxyConfiguration) {
            this.proxyConfiguration = Input.ofNullable(proxyConfiguration);
            return this;
        }

        public Builder setRequiresCompatibilities(@Nullable Input<List<String>> requiresCompatibilities) {
            this.requiresCompatibilities = requiresCompatibilities;
            return this;
        }

        public Builder setRequiresCompatibilities(@Nullable List<String> requiresCompatibilities) {
            this.requiresCompatibilities = Input.ofNullable(requiresCompatibilities);
            return this;
        }

        public Builder setRuntimePlatform(@Nullable Input<TaskDefinitionRuntimePlatformArgs> runtimePlatform) {
            this.runtimePlatform = runtimePlatform;
            return this;
        }

        public Builder setRuntimePlatform(@Nullable TaskDefinitionRuntimePlatformArgs runtimePlatform) {
            this.runtimePlatform = Input.ofNullable(runtimePlatform);
            return this;
        }

        public Builder setSkipDestroy(@Nullable Input<Boolean> skipDestroy) {
            this.skipDestroy = skipDestroy;
            return this;
        }

        public Builder setSkipDestroy(@Nullable Boolean skipDestroy) {
            this.skipDestroy = Input.ofNullable(skipDestroy);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTaskRoleArn(@Nullable Input<String> taskRoleArn) {
            this.taskRoleArn = taskRoleArn;
            return this;
        }

        public Builder setTaskRoleArn(@Nullable String taskRoleArn) {
            this.taskRoleArn = Input.ofNullable(taskRoleArn);
            return this;
        }

        public Builder setVolumes(@Nullable Input<List<TaskDefinitionVolumeArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder setVolumes(@Nullable List<TaskDefinitionVolumeArgs> volumes) {
            this.volumes = Input.ofNullable(volumes);
            return this;
        }
        public TaskDefinitionArgs build() {
            return new TaskDefinitionArgs(containerDefinitions, cpu, ephemeralStorage, executionRoleArn, family, inferenceAccelerators, ipcMode, memory, networkMode, pidMode, placementConstraints, proxyConfiguration, requiresCompatibilities, runtimePlatform, skipDestroy, tags, taskRoleArn, volumes);
        }
    }
}
