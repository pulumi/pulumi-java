// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.directconnect.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LinkAggregationGroupState extends io.pulumi.resources.ResourceArgs {

    public static final LinkAggregationGroupState Empty = new LinkAggregationGroupState();

    /**
     * The ARN of the LAG.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The ID of an existing dedicated connection to migrate to the LAG.
     * 
     */
    @InputImport(name="connectionId")
      private final @Nullable Input<String> connectionId;

    public Input<String> getConnectionId() {
        return this.connectionId == null ? Input.empty() : this.connectionId;
    }

    /**
     * The bandwidth of the individual physical connections bundled by the LAG. Valid values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps and 100Gbps. Case sensitive.
     * 
     */
    @InputImport(name="connectionsBandwidth")
      private final @Nullable Input<String> connectionsBandwidth;

    public Input<String> getConnectionsBandwidth() {
        return this.connectionsBandwidth == null ? Input.empty() : this.connectionsBandwidth;
    }

    /**
     * A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
     * 
     */
    @InputImport(name="forceDestroy")
      private final @Nullable Input<Boolean> forceDestroy;

    public Input<Boolean> getForceDestroy() {
        return this.forceDestroy == null ? Input.empty() : this.forceDestroy;
    }

    /**
     * Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
     * 
     */
    @InputImport(name="hasLogicalRedundancy")
      private final @Nullable Input<String> hasLogicalRedundancy;

    public Input<String> getHasLogicalRedundancy() {
        return this.hasLogicalRedundancy == null ? Input.empty() : this.hasLogicalRedundancy;
    }

    @InputImport(name="jumboFrameCapable")
      private final @Nullable Input<Boolean> jumboFrameCapable;

    public Input<Boolean> getJumboFrameCapable() {
        return this.jumboFrameCapable == null ? Input.empty() : this.jumboFrameCapable;
    }

    /**
     * The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * The name of the LAG.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The ID of the AWS account that owns the LAG.
     * 
     */
    @InputImport(name="ownerAccountId")
      private final @Nullable Input<String> ownerAccountId;

    public Input<String> getOwnerAccountId() {
        return this.ownerAccountId == null ? Input.empty() : this.ownerAccountId;
    }

    /**
     * The name of the service provider associated with the LAG.
     * 
     */
    @InputImport(name="providerName")
      private final @Nullable Input<String> providerName;

    public Input<String> getProviderName() {
        return this.providerName == null ? Input.empty() : this.providerName;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public LinkAggregationGroupState(
        @Nullable Input<String> arn,
        @Nullable Input<String> connectionId,
        @Nullable Input<String> connectionsBandwidth,
        @Nullable Input<Boolean> forceDestroy,
        @Nullable Input<String> hasLogicalRedundancy,
        @Nullable Input<Boolean> jumboFrameCapable,
        @Nullable Input<String> location,
        @Nullable Input<String> name,
        @Nullable Input<String> ownerAccountId,
        @Nullable Input<String> providerName,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.connectionId = connectionId;
        this.connectionsBandwidth = connectionsBandwidth;
        this.forceDestroy = forceDestroy;
        this.hasLogicalRedundancy = hasLogicalRedundancy;
        this.jumboFrameCapable = jumboFrameCapable;
        this.location = location;
        this.name = name;
        this.ownerAccountId = ownerAccountId;
        this.providerName = providerName;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private LinkAggregationGroupState() {
        this.arn = Input.empty();
        this.connectionId = Input.empty();
        this.connectionsBandwidth = Input.empty();
        this.forceDestroy = Input.empty();
        this.hasLogicalRedundancy = Input.empty();
        this.jumboFrameCapable = Input.empty();
        this.location = Input.empty();
        this.name = Input.empty();
        this.ownerAccountId = Input.empty();
        this.providerName = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinkAggregationGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> connectionId;
        private @Nullable Input<String> connectionsBandwidth;
        private @Nullable Input<Boolean> forceDestroy;
        private @Nullable Input<String> hasLogicalRedundancy;
        private @Nullable Input<Boolean> jumboFrameCapable;
        private @Nullable Input<String> location;
        private @Nullable Input<String> name;
        private @Nullable Input<String> ownerAccountId;
        private @Nullable Input<String> providerName;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(LinkAggregationGroupState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.connectionId = defaults.connectionId;
    	      this.connectionsBandwidth = defaults.connectionsBandwidth;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.hasLogicalRedundancy = defaults.hasLogicalRedundancy;
    	      this.jumboFrameCapable = defaults.jumboFrameCapable;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.ownerAccountId = defaults.ownerAccountId;
    	      this.providerName = defaults.providerName;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setConnectionId(@Nullable Input<String> connectionId) {
            this.connectionId = connectionId;
            return this;
        }

        public Builder setConnectionId(@Nullable String connectionId) {
            this.connectionId = Input.ofNullable(connectionId);
            return this;
        }

        public Builder setConnectionsBandwidth(@Nullable Input<String> connectionsBandwidth) {
            this.connectionsBandwidth = connectionsBandwidth;
            return this;
        }

        public Builder setConnectionsBandwidth(@Nullable String connectionsBandwidth) {
            this.connectionsBandwidth = Input.ofNullable(connectionsBandwidth);
            return this;
        }

        public Builder setForceDestroy(@Nullable Input<Boolean> forceDestroy) {
            this.forceDestroy = forceDestroy;
            return this;
        }

        public Builder setForceDestroy(@Nullable Boolean forceDestroy) {
            this.forceDestroy = Input.ofNullable(forceDestroy);
            return this;
        }

        public Builder setHasLogicalRedundancy(@Nullable Input<String> hasLogicalRedundancy) {
            this.hasLogicalRedundancy = hasLogicalRedundancy;
            return this;
        }

        public Builder setHasLogicalRedundancy(@Nullable String hasLogicalRedundancy) {
            this.hasLogicalRedundancy = Input.ofNullable(hasLogicalRedundancy);
            return this;
        }

        public Builder setJumboFrameCapable(@Nullable Input<Boolean> jumboFrameCapable) {
            this.jumboFrameCapable = jumboFrameCapable;
            return this;
        }

        public Builder setJumboFrameCapable(@Nullable Boolean jumboFrameCapable) {
            this.jumboFrameCapable = Input.ofNullable(jumboFrameCapable);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setOwnerAccountId(@Nullable Input<String> ownerAccountId) {
            this.ownerAccountId = ownerAccountId;
            return this;
        }

        public Builder setOwnerAccountId(@Nullable String ownerAccountId) {
            this.ownerAccountId = Input.ofNullable(ownerAccountId);
            return this;
        }

        public Builder setProviderName(@Nullable Input<String> providerName) {
            this.providerName = providerName;
            return this;
        }

        public Builder setProviderName(@Nullable String providerName) {
            this.providerName = Input.ofNullable(providerName);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public LinkAggregationGroupState build() {
            return new LinkAggregationGroupState(arn, connectionId, connectionsBandwidth, forceDestroy, hasLogicalRedundancy, jumboFrameCapable, location, name, ownerAccountId, providerName, tags, tagsAll);
        }
    }
}
