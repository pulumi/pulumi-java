// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public final class GetInstanceEbsBlockDevice extends io.pulumi.resources.InvokeArgs {

    public static final GetInstanceEbsBlockDevice Empty = new GetInstanceEbsBlockDevice();

    /**
     * If the root block device will be deleted on termination.
     * 
     */
    @Import(name="deleteOnTermination", required=true)
      private final Boolean deleteOnTermination;

    public Boolean getDeleteOnTermination() {
        return this.deleteOnTermination;
    }

    /**
     * The physical name of the device.
     * 
     */
    @Import(name="deviceName", required=true)
      private final String deviceName;

    public String getDeviceName() {
        return this.deviceName;
    }

    /**
     * If the EBS volume is encrypted.
     * 
     */
    @Import(name="encrypted", required=true)
      private final Boolean encrypted;

    public Boolean getEncrypted() {
        return this.encrypted;
    }

    /**
     * `0` If the volume is not a provisioned IOPS image, otherwise the supported IOPS count.
     * 
     */
    @Import(name="iops", required=true)
      private final Integer iops;

    public Integer getIops() {
        return this.iops;
    }

    @Import(name="kmsKeyId", required=true)
      private final String kmsKeyId;

    public String getKmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * The ID of the snapshot.
     * 
     */
    @Import(name="snapshotId", required=true)
      private final String snapshotId;

    public String getSnapshotId() {
        return this.snapshotId;
    }

    /**
     * A map of tags assigned to the Instance.
     * 
     */
    @Import(name="tags", required=true)
      private final Map<String,String> tags;

    public Map<String,String> getTags() {
        return this.tags;
    }

    /**
     * The throughput of the volume, in MiB/s.
     * 
     */
    @Import(name="throughput", required=true)
      private final Integer throughput;

    public Integer getThroughput() {
        return this.throughput;
    }

    @Import(name="volumeId", required=true)
      private final String volumeId;

    public String getVolumeId() {
        return this.volumeId;
    }

    /**
     * The size of the volume, in GiB.
     * 
     */
    @Import(name="volumeSize", required=true)
      private final Integer volumeSize;

    public Integer getVolumeSize() {
        return this.volumeSize;
    }

    /**
     * The type of the volume.
     * 
     */
    @Import(name="volumeType", required=true)
      private final String volumeType;

    public String getVolumeType() {
        return this.volumeType;
    }

    public GetInstanceEbsBlockDevice(
        Boolean deleteOnTermination,
        String deviceName,
        Boolean encrypted,
        Integer iops,
        String kmsKeyId,
        String snapshotId,
        Map<String,String> tags,
        Integer throughput,
        String volumeId,
        Integer volumeSize,
        String volumeType) {
        this.deleteOnTermination = Objects.requireNonNull(deleteOnTermination, "expected parameter 'deleteOnTermination' to be non-null");
        this.deviceName = Objects.requireNonNull(deviceName, "expected parameter 'deviceName' to be non-null");
        this.encrypted = Objects.requireNonNull(encrypted, "expected parameter 'encrypted' to be non-null");
        this.iops = Objects.requireNonNull(iops, "expected parameter 'iops' to be non-null");
        this.kmsKeyId = Objects.requireNonNull(kmsKeyId, "expected parameter 'kmsKeyId' to be non-null");
        this.snapshotId = Objects.requireNonNull(snapshotId, "expected parameter 'snapshotId' to be non-null");
        this.tags = Objects.requireNonNull(tags, "expected parameter 'tags' to be non-null");
        this.throughput = Objects.requireNonNull(throughput, "expected parameter 'throughput' to be non-null");
        this.volumeId = Objects.requireNonNull(volumeId, "expected parameter 'volumeId' to be non-null");
        this.volumeSize = Objects.requireNonNull(volumeSize, "expected parameter 'volumeSize' to be non-null");
        this.volumeType = Objects.requireNonNull(volumeType, "expected parameter 'volumeType' to be non-null");
    }

    private GetInstanceEbsBlockDevice() {
        this.deleteOnTermination = null;
        this.deviceName = null;
        this.encrypted = null;
        this.iops = null;
        this.kmsKeyId = null;
        this.snapshotId = null;
        this.tags = Map.of();
        this.throughput = null;
        this.volumeId = null;
        this.volumeSize = null;
        this.volumeType = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceEbsBlockDevice defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean deleteOnTermination;
        private String deviceName;
        private Boolean encrypted;
        private Integer iops;
        private String kmsKeyId;
        private String snapshotId;
        private Map<String,String> tags;
        private Integer throughput;
        private String volumeId;
        private Integer volumeSize;
        private String volumeType;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceEbsBlockDevice defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteOnTermination = defaults.deleteOnTermination;
    	      this.deviceName = defaults.deviceName;
    	      this.encrypted = defaults.encrypted;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.snapshotId = defaults.snapshotId;
    	      this.tags = defaults.tags;
    	      this.throughput = defaults.throughput;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeSize = defaults.volumeSize;
    	      this.volumeType = defaults.volumeType;
        }

        public Builder deleteOnTermination(Boolean deleteOnTermination) {
            this.deleteOnTermination = Objects.requireNonNull(deleteOnTermination);
            return this;
        }

        public Builder deviceName(String deviceName) {
            this.deviceName = Objects.requireNonNull(deviceName);
            return this;
        }

        public Builder encrypted(Boolean encrypted) {
            this.encrypted = Objects.requireNonNull(encrypted);
            return this;
        }

        public Builder iops(Integer iops) {
            this.iops = Objects.requireNonNull(iops);
            return this;
        }

        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }

        public Builder snapshotId(String snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder throughput(Integer throughput) {
            this.throughput = Objects.requireNonNull(throughput);
            return this;
        }

        public Builder volumeId(String volumeId) {
            this.volumeId = Objects.requireNonNull(volumeId);
            return this;
        }

        public Builder volumeSize(Integer volumeSize) {
            this.volumeSize = Objects.requireNonNull(volumeSize);
            return this;
        }

        public Builder volumeType(String volumeType) {
            this.volumeType = Objects.requireNonNull(volumeType);
            return this;
        }
        public GetInstanceEbsBlockDevice build() {
            return new GetInstanceEbsBlockDevice(deleteOnTermination, deviceName, encrypted, iops, kmsKeyId, snapshotId, tags, throughput, volumeId, volumeSize, volumeType);
        }
    }
}
