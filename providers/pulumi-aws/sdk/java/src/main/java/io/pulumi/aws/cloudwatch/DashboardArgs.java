// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class DashboardArgs extends io.pulumi.resources.ResourceArgs {

    public static final DashboardArgs Empty = new DashboardArgs();

    /**
     * The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     * 
     */
    @InputImport(name="dashboardBody", required=true)
      private final Input<String> dashboardBody;

    public Input<String> getDashboardBody() {
        return this.dashboardBody;
    }

    /**
     * The name of the dashboard.
     * 
     */
    @InputImport(name="dashboardName", required=true)
      private final Input<String> dashboardName;

    public Input<String> getDashboardName() {
        return this.dashboardName;
    }

    public DashboardArgs(
        Input<String> dashboardBody,
        Input<String> dashboardName) {
        this.dashboardBody = Objects.requireNonNull(dashboardBody, "expected parameter 'dashboardBody' to be non-null");
        this.dashboardName = Objects.requireNonNull(dashboardName, "expected parameter 'dashboardName' to be non-null");
    }

    private DashboardArgs() {
        this.dashboardBody = Input.empty();
        this.dashboardName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> dashboardBody;
        private Input<String> dashboardName;

        public Builder() {
    	      // Empty
        }

        public Builder(DashboardArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dashboardBody = defaults.dashboardBody;
    	      this.dashboardName = defaults.dashboardName;
        }

        public Builder setDashboardBody(Input<String> dashboardBody) {
            this.dashboardBody = Objects.requireNonNull(dashboardBody);
            return this;
        }

        public Builder setDashboardBody(String dashboardBody) {
            this.dashboardBody = Input.of(Objects.requireNonNull(dashboardBody));
            return this;
        }

        public Builder setDashboardName(Input<String> dashboardName) {
            this.dashboardName = Objects.requireNonNull(dashboardName);
            return this;
        }

        public Builder setDashboardName(String dashboardName) {
            this.dashboardName = Input.of(Objects.requireNonNull(dashboardName));
            return this;
        }
        public DashboardArgs build() {
            return new DashboardArgs(dashboardBody, dashboardName);
        }
    }
}
