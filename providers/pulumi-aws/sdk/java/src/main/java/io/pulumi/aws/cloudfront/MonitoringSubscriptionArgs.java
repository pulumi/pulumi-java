// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudfront;

import io.pulumi.aws.cloudfront.inputs.MonitoringSubscriptionMonitoringSubscriptionArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class MonitoringSubscriptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final MonitoringSubscriptionArgs Empty = new MonitoringSubscriptionArgs();

    /**
     * The ID of the distribution that you are enabling metrics for.
     * 
     */
    @InputImport(name="distributionId", required=true)
      private final Input<String> distributionId;

    public Input<String> getDistributionId() {
        return this.distributionId;
    }

    /**
     * A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
     * 
     */
    @InputImport(name="monitoringSubscription", required=true)
      private final Input<MonitoringSubscriptionMonitoringSubscriptionArgs> monitoringSubscription;

    public Input<MonitoringSubscriptionMonitoringSubscriptionArgs> getMonitoringSubscription() {
        return this.monitoringSubscription;
    }

    public MonitoringSubscriptionArgs(
        Input<String> distributionId,
        Input<MonitoringSubscriptionMonitoringSubscriptionArgs> monitoringSubscription) {
        this.distributionId = Objects.requireNonNull(distributionId, "expected parameter 'distributionId' to be non-null");
        this.monitoringSubscription = Objects.requireNonNull(monitoringSubscription, "expected parameter 'monitoringSubscription' to be non-null");
    }

    private MonitoringSubscriptionArgs() {
        this.distributionId = Input.empty();
        this.monitoringSubscription = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitoringSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> distributionId;
        private Input<MonitoringSubscriptionMonitoringSubscriptionArgs> monitoringSubscription;

        public Builder() {
    	      // Empty
        }

        public Builder(MonitoringSubscriptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distributionId = defaults.distributionId;
    	      this.monitoringSubscription = defaults.monitoringSubscription;
        }

        public Builder distributionId(Input<String> distributionId) {
            this.distributionId = Objects.requireNonNull(distributionId);
            return this;
        }

        public Builder distributionId(String distributionId) {
            this.distributionId = Input.of(Objects.requireNonNull(distributionId));
            return this;
        }

        public Builder monitoringSubscription(Input<MonitoringSubscriptionMonitoringSubscriptionArgs> monitoringSubscription) {
            this.monitoringSubscription = Objects.requireNonNull(monitoringSubscription);
            return this;
        }

        public Builder monitoringSubscription(MonitoringSubscriptionMonitoringSubscriptionArgs monitoringSubscription) {
            this.monitoringSubscription = Input.of(Objects.requireNonNull(monitoringSubscription));
            return this;
        }
        public MonitoringSubscriptionArgs build() {
            return new MonitoringSubscriptionArgs(distributionId, monitoringSubscription);
        }
    }
}
