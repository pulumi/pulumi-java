// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.storagegateway;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CachesIscsiVolumeArgs extends io.pulumi.resources.ResourceArgs {

    public static final CachesIscsiVolumeArgs Empty = new CachesIscsiVolumeArgs();

    /**
     * The Amazon Resource Name (ARN) of the gateway.
     * 
     */
    @Import(name="gatewayArn", required=true)
      private final Output<String> gatewayArn;

    public Output<String> getGatewayArn() {
        return this.gatewayArn;
    }

    /**
     * Set to `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3.
     * 
     */
    @Import(name="kmsEncrypted")
      private final @Nullable Output<Boolean> kmsEncrypted;

    public Output<Boolean> getKmsEncrypted() {
        return this.kmsEncrypted == null ? Output.empty() : this.kmsEncrypted;
    }

    /**
     * The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. Is required when `kms_encrypted` is set.
     * 
     */
    @Import(name="kmsKey")
      private final @Nullable Output<String> kmsKey;

    public Output<String> getKmsKey() {
        return this.kmsKey == null ? Output.empty() : this.kmsKey;
    }

    /**
     * The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
     * 
     */
    @Import(name="networkInterfaceId", required=true)
      private final Output<String> networkInterfaceId;

    public Output<String> getNetworkInterfaceId() {
        return this.networkInterfaceId;
    }

    /**
     * The snapshot ID of the snapshot to restore as the new cached volumeE.g., `snap-1122aabb`.
     * 
     */
    @Import(name="snapshotId")
      private final @Nullable Output<String> snapshotId;

    public Output<String> getSnapshotId() {
        return this.snapshotId == null ? Output.empty() : this.snapshotId;
    }

    /**
     * The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volume_size_in_bytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
     * 
     */
    @Import(name="sourceVolumeArn")
      private final @Nullable Output<String> sourceVolumeArn;

    public Output<String> getSourceVolumeArn() {
        return this.sourceVolumeArn == null ? Output.empty() : this.sourceVolumeArn;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
     * 
     */
    @Import(name="targetName", required=true)
      private final Output<String> targetName;

    public Output<String> getTargetName() {
        return this.targetName;
    }

    /**
     * The size of the volume in bytes.
     * 
     */
    @Import(name="volumeSizeInBytes", required=true)
      private final Output<Integer> volumeSizeInBytes;

    public Output<Integer> getVolumeSizeInBytes() {
        return this.volumeSizeInBytes;
    }

    public CachesIscsiVolumeArgs(
        Output<String> gatewayArn,
        @Nullable Output<Boolean> kmsEncrypted,
        @Nullable Output<String> kmsKey,
        Output<String> networkInterfaceId,
        @Nullable Output<String> snapshotId,
        @Nullable Output<String> sourceVolumeArn,
        @Nullable Output<Map<String,String>> tags,
        Output<String> targetName,
        Output<Integer> volumeSizeInBytes) {
        this.gatewayArn = Objects.requireNonNull(gatewayArn, "expected parameter 'gatewayArn' to be non-null");
        this.kmsEncrypted = kmsEncrypted;
        this.kmsKey = kmsKey;
        this.networkInterfaceId = Objects.requireNonNull(networkInterfaceId, "expected parameter 'networkInterfaceId' to be non-null");
        this.snapshotId = snapshotId;
        this.sourceVolumeArn = sourceVolumeArn;
        this.tags = tags;
        this.targetName = Objects.requireNonNull(targetName, "expected parameter 'targetName' to be non-null");
        this.volumeSizeInBytes = Objects.requireNonNull(volumeSizeInBytes, "expected parameter 'volumeSizeInBytes' to be non-null");
    }

    private CachesIscsiVolumeArgs() {
        this.gatewayArn = Output.empty();
        this.kmsEncrypted = Output.empty();
        this.kmsKey = Output.empty();
        this.networkInterfaceId = Output.empty();
        this.snapshotId = Output.empty();
        this.sourceVolumeArn = Output.empty();
        this.tags = Output.empty();
        this.targetName = Output.empty();
        this.volumeSizeInBytes = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CachesIscsiVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> gatewayArn;
        private @Nullable Output<Boolean> kmsEncrypted;
        private @Nullable Output<String> kmsKey;
        private Output<String> networkInterfaceId;
        private @Nullable Output<String> snapshotId;
        private @Nullable Output<String> sourceVolumeArn;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> targetName;
        private Output<Integer> volumeSizeInBytes;

        public Builder() {
    	      // Empty
        }

        public Builder(CachesIscsiVolumeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gatewayArn = defaults.gatewayArn;
    	      this.kmsEncrypted = defaults.kmsEncrypted;
    	      this.kmsKey = defaults.kmsKey;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.snapshotId = defaults.snapshotId;
    	      this.sourceVolumeArn = defaults.sourceVolumeArn;
    	      this.tags = defaults.tags;
    	      this.targetName = defaults.targetName;
    	      this.volumeSizeInBytes = defaults.volumeSizeInBytes;
        }

        public Builder gatewayArn(Output<String> gatewayArn) {
            this.gatewayArn = Objects.requireNonNull(gatewayArn);
            return this;
        }
        public Builder gatewayArn(String gatewayArn) {
            this.gatewayArn = Output.of(Objects.requireNonNull(gatewayArn));
            return this;
        }
        public Builder kmsEncrypted(@Nullable Output<Boolean> kmsEncrypted) {
            this.kmsEncrypted = kmsEncrypted;
            return this;
        }
        public Builder kmsEncrypted(@Nullable Boolean kmsEncrypted) {
            this.kmsEncrypted = Output.ofNullable(kmsEncrypted);
            return this;
        }
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            this.kmsKey = kmsKey;
            return this;
        }
        public Builder kmsKey(@Nullable String kmsKey) {
            this.kmsKey = Output.ofNullable(kmsKey);
            return this;
        }
        public Builder networkInterfaceId(Output<String> networkInterfaceId) {
            this.networkInterfaceId = Objects.requireNonNull(networkInterfaceId);
            return this;
        }
        public Builder networkInterfaceId(String networkInterfaceId) {
            this.networkInterfaceId = Output.of(Objects.requireNonNull(networkInterfaceId));
            return this;
        }
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }
        public Builder snapshotId(@Nullable String snapshotId) {
            this.snapshotId = Output.ofNullable(snapshotId);
            return this;
        }
        public Builder sourceVolumeArn(@Nullable Output<String> sourceVolumeArn) {
            this.sourceVolumeArn = sourceVolumeArn;
            return this;
        }
        public Builder sourceVolumeArn(@Nullable String sourceVolumeArn) {
            this.sourceVolumeArn = Output.ofNullable(sourceVolumeArn);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder targetName(Output<String> targetName) {
            this.targetName = Objects.requireNonNull(targetName);
            return this;
        }
        public Builder targetName(String targetName) {
            this.targetName = Output.of(Objects.requireNonNull(targetName));
            return this;
        }
        public Builder volumeSizeInBytes(Output<Integer> volumeSizeInBytes) {
            this.volumeSizeInBytes = Objects.requireNonNull(volumeSizeInBytes);
            return this;
        }
        public Builder volumeSizeInBytes(Integer volumeSizeInBytes) {
            this.volumeSizeInBytes = Output.of(Objects.requireNonNull(volumeSizeInBytes));
            return this;
        }        public CachesIscsiVolumeArgs build() {
            return new CachesIscsiVolumeArgs(gatewayArn, kmsEncrypted, kmsKey, networkInterfaceId, snapshotId, sourceVolumeArn, tags, targetName, volumeSizeInBytes);
        }
    }
}
