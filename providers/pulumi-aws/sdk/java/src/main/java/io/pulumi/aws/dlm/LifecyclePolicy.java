// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.dlm;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.dlm.LifecyclePolicyArgs;
import io.pulumi.aws.dlm.inputs.LifecyclePolicyState;
import io.pulumi.aws.dlm.outputs.LifecyclePolicyPolicyDetails;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a [Data Lifecycle Manager (DLM) lifecycle policy](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html) for managing snapshots.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Basic
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const dlmLifecycleRole = new aws.iam.Role("dlmLifecycleRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "dlm.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const dlmLifecycle = new aws.iam.RolePolicy("dlmLifecycle", {
 *     role: dlmLifecycleRole.id,
 *     policy: `{
 *    "Version": "2012-10-17",
 *    "Statement": [
 *       {
 *          "Effect": "Allow",
 *          "Action": [
 *             "ec2:CreateSnapshot",
 *             "ec2:CreateSnapshots",
 *             "ec2:DeleteSnapshot",
 *             "ec2:DescribeInstances",
 *             "ec2:DescribeVolumes",
 *             "ec2:DescribeSnapshots"
 *          ],
 *          "Resource": "*"
 *       },
 *       {
 *          "Effect": "Allow",
 *          "Action": [
 *             "ec2:CreateTags"
 *          ],
 *          "Resource": "arn:aws:ec2:*::snapshot/*"
 *       }
 *    ]
 * }
 * `,
 * });
 * const example = new aws.dlm.LifecyclePolicy("example", {
 *     description: "example DLM lifecycle policy",
 *     executionRoleArn: dlmLifecycleRole.arn,
 *     state: "ENABLED",
 *     policyDetails: {
 *         resourceTypes: ["VOLUME"],
 *         schedules: [{
 *             name: "2 weeks of daily snapshots",
 *             createRule: {
 *                 interval: 24,
 *                 intervalUnit: "HOURS",
 *                 times: ["23:45"],
 *             },
 *             retainRule: {
 *                 count: 14,
 *             },
 *             tagsToAdd: {
 *                 SnapshotCreator: "DLM",
 *             },
 *             copyTags: false,
 *         }],
 *         targetTags: {
 *             Snapshot: "true",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * dlm_lifecycle_role = aws.iam.Role("dlmLifecycleRole", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "dlm.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * """)
 * dlm_lifecycle = aws.iam.RolePolicy("dlmLifecycle",
 *     role=dlm_lifecycle_role.id,
 *     policy="""{
 *    "Version": "2012-10-17",
 *    "Statement": [
 *       {
 *          "Effect": "Allow",
 *          "Action": [
 *             "ec2:CreateSnapshot",
 *             "ec2:CreateSnapshots",
 *             "ec2:DeleteSnapshot",
 *             "ec2:DescribeInstances",
 *             "ec2:DescribeVolumes",
 *             "ec2:DescribeSnapshots"
 *          ],
 *          "Resource": "*"
 *       },
 *       {
 *          "Effect": "Allow",
 *          "Action": [
 *             "ec2:CreateTags"
 *          ],
 *          "Resource": "arn:aws:ec2:*::snapshot/*"
 *       }
 *    ]
 * }
 * """)
 * example = aws.dlm.LifecyclePolicy("example",
 *     description="example DLM lifecycle policy",
 *     execution_role_arn=dlm_lifecycle_role.arn,
 *     state="ENABLED",
 *     policy_details=aws.dlm.LifecyclePolicyPolicyDetailsArgs(
 *         resource_types=["VOLUME"],
 *         schedules=[aws.dlm.LifecyclePolicyPolicyDetailsScheduleArgs(
 *             name="2 weeks of daily snapshots",
 *             create_rule=aws.dlm.LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs(
 *                 interval=24,
 *                 interval_unit="HOURS",
 *                 times=["23:45"],
 *             ),
 *             retain_rule=aws.dlm.LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs(
 *                 count=14,
 *             ),
 *             tags_to_add={
 *                 "SnapshotCreator": "DLM",
 *             },
 *             copy_tags=False,
 *         )],
 *         target_tags={
 *             "Snapshot": "true",
 *         },
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var dlmLifecycleRole = new Aws.Iam.Role("dlmLifecycleRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": ""sts:AssumeRole"",
 *       ""Principal"": {
 *         ""Service"": ""dlm.amazonaws.com""
 *       },
 *       ""Effect"": ""Allow"",
 *       ""Sid"": """"
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var dlmLifecycle = new Aws.Iam.RolePolicy("dlmLifecycle", new Aws.Iam.RolePolicyArgs
 *         {
 *             Role = dlmLifecycleRole.Id,
 *             Policy = @"{
 *    ""Version"": ""2012-10-17"",
 *    ""Statement"": [
 *       {
 *          ""Effect"": ""Allow"",
 *          ""Action"": [
 *             ""ec2:CreateSnapshot"",
 *             ""ec2:CreateSnapshots"",
 *             ""ec2:DeleteSnapshot"",
 *             ""ec2:DescribeInstances"",
 *             ""ec2:DescribeVolumes"",
 *             ""ec2:DescribeSnapshots""
 *          ],
 *          ""Resource"": ""*""
 *       },
 *       {
 *          ""Effect"": ""Allow"",
 *          ""Action"": [
 *             ""ec2:CreateTags""
 *          ],
 *          ""Resource"": ""arn:aws:ec2:*::snapshot/*""
 *       }
 *    ]
 * }
 * ",
 *         });
 *         var example = new Aws.Dlm.LifecyclePolicy("example", new Aws.Dlm.LifecyclePolicyArgs
 *         {
 *             Description = "example DLM lifecycle policy",
 *             ExecutionRoleArn = dlmLifecycleRole.Arn,
 *             State = "ENABLED",
 *             PolicyDetails = new Aws.Dlm.Inputs.LifecyclePolicyPolicyDetailsArgs
 *             {
 *                 ResourceTypes = 
 *                 {
 *                     "VOLUME",
 *                 },
 *                 Schedules = 
 *                 {
 *                     new Aws.Dlm.Inputs.LifecyclePolicyPolicyDetailsScheduleArgs
 *                     {
 *                         Name = "2 weeks of daily snapshots",
 *                         CreateRule = new Aws.Dlm.Inputs.LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs
 *                         {
 *                             Interval = 24,
 *                             IntervalUnit = "HOURS",
 *                             Times = 
 *                             {
 *                                 "23:45",
 *                             },
 *                         },
 *                         RetainRule = new Aws.Dlm.Inputs.LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs
 *                         {
 *                             Count = 14,
 *                         },
 *                         TagsToAdd = 
 *                         {
 *                             { "SnapshotCreator", "DLM" },
 *                         },
 *                         CopyTags = false,
 *                     },
 *                 },
 *                 TargetTags = 
 *                 {
 *                     { "Snapshot", "true" },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/dlm"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		dlmLifecycleRole, err := iam.NewRole(ctx, "dlmLifecycleRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"dlm.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicy(ctx, "dlmLifecycle", &iam.RolePolicyArgs{
 * 			Role:   dlmLifecycleRole.ID(),
 * 			Policy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "   \"Version\": \"2012-10-17\",\n", "   \"Statement\": [\n", "      {\n", "         \"Effect\": \"Allow\",\n", "         \"Action\": [\n", "            \"ec2:CreateSnapshot\",\n", "            \"ec2:CreateSnapshots\",\n", "            \"ec2:DeleteSnapshot\",\n", "            \"ec2:DescribeInstances\",\n", "            \"ec2:DescribeVolumes\",\n", "            \"ec2:DescribeSnapshots\"\n", "         ],\n", "         \"Resource\": \"*\"\n", "      },\n", "      {\n", "         \"Effect\": \"Allow\",\n", "         \"Action\": [\n", "            \"ec2:CreateTags\"\n", "         ],\n", "         \"Resource\": \"arn:aws:ec2:*::snapshot/*\"\n", "      }\n", "   ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = dlm.NewLifecyclePolicy(ctx, "example", &dlm.LifecyclePolicyArgs{
 * 			Description:      pulumi.String("example DLM lifecycle policy"),
 * 			ExecutionRoleArn: dlmLifecycleRole.Arn,
 * 			State:            pulumi.String("ENABLED"),
 * 			PolicyDetails: &dlm.LifecyclePolicyPolicyDetailsArgs{
 * 				ResourceTypes: pulumi.StringArray{
 * 					pulumi.String("VOLUME"),
 * 				},
 * 				Schedules: dlm.LifecyclePolicyPolicyDetailsScheduleArray{
 * 					&dlm.LifecyclePolicyPolicyDetailsScheduleArgs{
 * 						Name: pulumi.String("2 weeks of daily snapshots"),
 * 						CreateRule: &dlm.LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs{
 * 							Interval:     pulumi.Int(24),
 * 							IntervalUnit: pulumi.String("HOURS"),
 * 							Times: pulumi.String{
 * 								"23:45",
 * 							},
 * 						},
 * 						RetainRule: &dlm.LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs{
 * 							Count: pulumi.Int(14),
 * 						},
 * 						TagsToAdd: pulumi.StringMap{
 * 							"SnapshotCreator": pulumi.String("DLM"),
 * 						},
 * 						CopyTags: pulumi.Bool(false),
 * 					},
 * 				},
 * 				TargetTags: pulumi.StringMap{
 * 					"Snapshot": pulumi.String("true"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example Cross-Region Snapshot Copy Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * // ...other configuration...
 * const dlmCrossRegionCopyCmk = new aws.kms.Key("dlmCrossRegionCopyCmk", {
 *     description: "Example Alternate Region KMS Key",
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Id": "dlm-cross-region-copy-cmk",
 *   "Statement": [
 *     {
 *       "Sid": "Enable IAM User Permissions",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "AWS": "*"
 *       },
 *       "Action": "kms:*",
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * `,
 * }, {
 *     provider: aws.alternate,
 * });
 * const example = new aws.dlm.LifecyclePolicy("example", {
 *     description: "example DLM lifecycle policy",
 *     executionRoleArn: aws_iam_role.dlm_lifecycle_role.arn,
 *     state: "ENABLED",
 *     policyDetails: {
 *         resourceTypes: ["VOLUME"],
 *         schedules: [{
 *             name: "2 weeks of daily snapshots",
 *             createRule: {
 *                 interval: 24,
 *                 intervalUnit: "HOURS",
 *                 times: ["23:45"],
 *             },
 *             retainRule: {
 *                 count: 14,
 *             },
 *             tagsToAdd: {
 *                 SnapshotCreator: "DLM",
 *             },
 *             copyTags: false,
 *             crossRegionCopyRules: [{
 *                 target: "us-west-2",
 *                 encrypted: true,
 *                 cmkArn: dlmCrossRegionCopyCmk.arn,
 *                 copyTags: true,
 *                 retainRule: {
 *                     interval: 30,
 *                     intervalUnit: "DAYS",
 *                 },
 *             }],
 *         }],
 *         targetTags: {
 *             Snapshot: "true",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * # ...other configuration...
 * dlm_cross_region_copy_cmk = aws.kms.Key("dlmCrossRegionCopyCmk",
 *     description="Example Alternate Region KMS Key",
 *     policy="""{
 *   "Version": "2012-10-17",
 *   "Id": "dlm-cross-region-copy-cmk",
 *   "Statement": [
 *     {
 *       "Sid": "Enable IAM User Permissions",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "AWS": "*"
 *       },
 *       "Action": "kms:*",
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * """,
 *     opts=pulumi.ResourceOptions(provider=aws["alternate"]))
 * example = aws.dlm.LifecyclePolicy("example",
 *     description="example DLM lifecycle policy",
 *     execution_role_arn=aws_iam_role["dlm_lifecycle_role"]["arn"],
 *     state="ENABLED",
 *     policy_details=aws.dlm.LifecyclePolicyPolicyDetailsArgs(
 *         resource_types=["VOLUME"],
 *         schedules=[aws.dlm.LifecyclePolicyPolicyDetailsScheduleArgs(
 *             name="2 weeks of daily snapshots",
 *             create_rule=aws.dlm.LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs(
 *                 interval=24,
 *                 interval_unit="HOURS",
 *                 times=["23:45"],
 *             ),
 *             retain_rule=aws.dlm.LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs(
 *                 count=14,
 *             ),
 *             tags_to_add={
 *                 "SnapshotCreator": "DLM",
 *             },
 *             copy_tags=False,
 *             cross_region_copy_rules=[aws.dlm.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs(
 *                 target="us-west-2",
 *                 encrypted=True,
 *                 cmk_arn=dlm_cross_region_copy_cmk.arn,
 *                 copy_tags=True,
 *                 retain_rule=aws.dlm.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleArgs(
 *                     interval=30,
 *                     interval_unit="DAYS",
 *                 ),
 *             )],
 *         )],
 *         target_tags={
 *             "Snapshot": "true",
 *         },
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         // ...other configuration...
 *         var dlmCrossRegionCopyCmk = new Aws.Kms.Key("dlmCrossRegionCopyCmk", new Aws.Kms.KeyArgs
 *         {
 *             Description = "Example Alternate Region KMS Key",
 *             Policy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Id"": ""dlm-cross-region-copy-cmk"",
 *   ""Statement"": [
 *     {
 *       ""Sid"": ""Enable IAM User Permissions"",
 *       ""Effect"": ""Allow"",
 *       ""Principal"": {
 *         ""AWS"": ""*""
 *       },
 *       ""Action"": ""kms:*"",
 *       ""Resource"": ""*""
 *     }
 *   ]
 * }
 * ",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Alternate,
 *         });
 *         var example = new Aws.Dlm.LifecyclePolicy("example", new Aws.Dlm.LifecyclePolicyArgs
 *         {
 *             Description = "example DLM lifecycle policy",
 *             ExecutionRoleArn = aws_iam_role.Dlm_lifecycle_role.Arn,
 *             State = "ENABLED",
 *             PolicyDetails = new Aws.Dlm.Inputs.LifecyclePolicyPolicyDetailsArgs
 *             {
 *                 ResourceTypes = 
 *                 {
 *                     "VOLUME",
 *                 },
 *                 Schedules = 
 *                 {
 *                     new Aws.Dlm.Inputs.LifecyclePolicyPolicyDetailsScheduleArgs
 *                     {
 *                         Name = "2 weeks of daily snapshots",
 *                         CreateRule = new Aws.Dlm.Inputs.LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs
 *                         {
 *                             Interval = 24,
 *                             IntervalUnit = "HOURS",
 *                             Times = 
 *                             {
 *                                 "23:45",
 *                             },
 *                         },
 *                         RetainRule = new Aws.Dlm.Inputs.LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs
 *                         {
 *                             Count = 14,
 *                         },
 *                         TagsToAdd = 
 *                         {
 *                             { "SnapshotCreator", "DLM" },
 *                         },
 *                         CopyTags = false,
 *                         CrossRegionCopyRules = 
 *                         {
 *                             new Aws.Dlm.Inputs.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs
 *                             {
 *                                 Target = "us-west-2",
 *                                 Encrypted = true,
 *                                 CmkArn = dlmCrossRegionCopyCmk.Arn,
 *                                 CopyTags = true,
 *                                 RetainRule = new Aws.Dlm.Inputs.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleArgs
 *                                 {
 *                                     Interval = 30,
 *                                     IntervalUnit = "DAYS",
 *                                 },
 *                             },
 *                         },
 *                     },
 *                 },
 *                 TargetTags = 
 *                 {
 *                     { "Snapshot", "true" },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/dlm"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kms"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		dlmCrossRegionCopyCmk, err := kms.NewKey(ctx, "dlmCrossRegionCopyCmk", &kms.KeyArgs{
 * 			Description: pulumi.String("Example Alternate Region KMS Key"),
 * 			Policy:      pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Id\": \"dlm-cross-region-copy-cmk\",\n", "  \"Statement\": [\n", "    {\n", "      \"Sid\": \"Enable IAM User Permissions\",\n", "      \"Effect\": \"Allow\",\n", "      \"Principal\": {\n", "        \"AWS\": \"*\"\n", "      },\n", "      \"Action\": \"kms:*\",\n", "      \"Resource\": \"*\"\n", "    }\n", "  ]\n", "}\n")),
 * 		}, pulumi.Provider(aws.Alternate))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = dlm.NewLifecyclePolicy(ctx, "example", &dlm.LifecyclePolicyArgs{
 * 			Description:      pulumi.String("example DLM lifecycle policy"),
 * 			ExecutionRoleArn: pulumi.Any(aws_iam_role.Dlm_lifecycle_role.Arn),
 * 			State:            pulumi.String("ENABLED"),
 * 			PolicyDetails: &dlm.LifecyclePolicyPolicyDetailsArgs{
 * 				ResourceTypes: pulumi.StringArray{
 * 					pulumi.String("VOLUME"),
 * 				},
 * 				Schedules: dlm.LifecyclePolicyPolicyDetailsScheduleArray{
 * 					&dlm.LifecyclePolicyPolicyDetailsScheduleArgs{
 * 						Name: pulumi.String("2 weeks of daily snapshots"),
 * 						CreateRule: &dlm.LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs{
 * 							Interval:     pulumi.Int(24),
 * 							IntervalUnit: pulumi.String("HOURS"),
 * 							Times: pulumi.String{
 * 								"23:45",
 * 							},
 * 						},
 * 						RetainRule: &dlm.LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs{
 * 							Count: pulumi.Int(14),
 * 						},
 * 						TagsToAdd: pulumi.StringMap{
 * 							"SnapshotCreator": pulumi.String("DLM"),
 * 						},
 * 						CopyTags: pulumi.Bool(false),
 * 						CrossRegionCopyRules: dlm.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArray{
 * 							&dlm.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs{
 * 								Target:    pulumi.String("us-west-2"),
 * 								Encrypted: pulumi.Bool(true),
 * 								CmkArn:    dlmCrossRegionCopyCmk.Arn,
 * 								CopyTags:  pulumi.Bool(true),
 * 								RetainRule: &dlm.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleArgs{
 * 									Interval:     pulumi.Int(30),
 * 									IntervalUnit: pulumi.String("DAYS"),
 * 								},
 * 							},
 * 						},
 * 					},
 * 				},
 * 				TargetTags: pulumi.StringMap{
 * 					"Snapshot": pulumi.String("true"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * DLM lifecycle policies can be imported by their policy ID
 * 
 * ```sh
 *  $ pulumi import aws:dlm/lifecyclePolicy:LifecyclePolicy example policy-abcdef12345678901
 * ```
 * 
 *  
 */
@ResourceType(type="aws:dlm/lifecyclePolicy:LifecyclePolicy")
public class LifecyclePolicy extends io.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name (ARN) of the DLM Lifecycle Policy.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of the DLM Lifecycle Policy.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * A description for the DLM lifecycle policy.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return A description for the DLM lifecycle policy.
     * 
     */
    public Output<String> getDescription() {
        return this.description;
    }
    /**
     * The ARN of an IAM role that is able to be assumed by the DLM service.
     * 
     */
    @Export(name="executionRoleArn", type=String.class, parameters={})
    private Output<String> executionRoleArn;

    /**
     * @return The ARN of an IAM role that is able to be assumed by the DLM service.
     * 
     */
    public Output<String> getExecutionRoleArn() {
        return this.executionRoleArn;
    }
    /**
     * See the `policy_details` configuration block. Max of 1.
     * 
     */
    @Export(name="policyDetails", type=LifecyclePolicyPolicyDetails.class, parameters={})
    private Output<LifecyclePolicyPolicyDetails> policyDetails;

    /**
     * @return See the `policy_details` configuration block. Max of 1.
     * 
     */
    public Output<LifecyclePolicyPolicyDetails> getPolicyDetails() {
        return this.policyDetails;
    }
    /**
     * Whether the lifecycle policy should be enabled or disabled. `ENABLED` or `DISABLED` are valid values. Defaults to `ENABLED`.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output</* @Nullable */ String> state;

    /**
     * @return Whether the lifecycle policy should be enabled or disabled. `ENABLED` or `DISABLED` are valid values. Defaults to `ENABLED`.
     * 
     */
    public Output</* @Nullable */ String> getState() {
        return this.state;
    }
    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LifecyclePolicy(String name) {
        this(name, LifecyclePolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LifecyclePolicy(String name, LifecyclePolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LifecyclePolicy(String name, LifecyclePolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:dlm/lifecyclePolicy:LifecyclePolicy", name, args == null ? LifecyclePolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private LifecyclePolicy(String name, Output<String> id, @Nullable LifecyclePolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:dlm/lifecyclePolicy:LifecyclePolicy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LifecyclePolicy get(String name, Output<String> id, @Nullable LifecyclePolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new LifecyclePolicy(name, id, state, options);
    }
}
