// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx;

import io.pulumi.aws.fsx.inputs.OntapVolumeTieringPolicyArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OntapVolumeArgs extends io.pulumi.resources.ResourceArgs {

    public static final OntapVolumeArgs Empty = new OntapVolumeArgs();

    /**
     * Specifies the location in the storage virtual machine's namespace where the volume is mounted. The junction_path must have a leading forward slash, such as `/vol3`
     * 
     */
    @InputImport(name="junctionPath", required=true)
      private final Input<String> junctionPath;

    public Input<String> getJunctionPath() {
        return this.junctionPath;
    }

    /**
     * Specifies the tiering policy for the ONTAP volume for moving data to the capacity pool storage. Valid values are `SNAPSHOT_ONLY`, `AUTO`, `ALL`, `NONE`. Default value is `SNAPSHOT_ONLY`.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Specifies the volume security style, Valid values are `UNIX`, `NTFS`, and `MIXED`. Default value is `UNIX`.
     * 
     */
    @InputImport(name="securityStyle")
      private final @Nullable Input<String> securityStyle;

    public Input<String> getSecurityStyle() {
        return this.securityStyle == null ? Input.empty() : this.securityStyle;
    }

    /**
     * Specifies the size of the volume, in megabytes (MB), that you are creating.
     * 
     */
    @InputImport(name="sizeInMegabytes", required=true)
      private final Input<Integer> sizeInMegabytes;

    public Input<Integer> getSizeInMegabytes() {
        return this.sizeInMegabytes;
    }

    /**
     * Set to true to enable deduplication, compression, and compaction storage efficiency features on the volume.
     * 
     */
    @InputImport(name="storageEfficiencyEnabled", required=true)
      private final Input<Boolean> storageEfficiencyEnabled;

    public Input<Boolean> getStorageEfficiencyEnabled() {
        return this.storageEfficiencyEnabled;
    }

    /**
     * Specifies the storage virtual machine in which to create the volume.
     * 
     */
    @InputImport(name="storageVirtualMachineId", required=true)
      private final Input<String> storageVirtualMachineId;

    public Input<String> getStorageVirtualMachineId() {
        return this.storageVirtualMachineId;
    }

    /**
     * A map of tags to assign to the volume. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="tieringPolicy")
      private final @Nullable Input<OntapVolumeTieringPolicyArgs> tieringPolicy;

    public Input<OntapVolumeTieringPolicyArgs> getTieringPolicy() {
        return this.tieringPolicy == null ? Input.empty() : this.tieringPolicy;
    }

    /**
     * The type of volume, currently the only valid value is `ONTAP`.
     * 
     */
    @InputImport(name="volumeType")
      private final @Nullable Input<String> volumeType;

    public Input<String> getVolumeType() {
        return this.volumeType == null ? Input.empty() : this.volumeType;
    }

    public OntapVolumeArgs(
        Input<String> junctionPath,
        @Nullable Input<String> name,
        @Nullable Input<String> securityStyle,
        Input<Integer> sizeInMegabytes,
        Input<Boolean> storageEfficiencyEnabled,
        Input<String> storageVirtualMachineId,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<OntapVolumeTieringPolicyArgs> tieringPolicy,
        @Nullable Input<String> volumeType) {
        this.junctionPath = Objects.requireNonNull(junctionPath, "expected parameter 'junctionPath' to be non-null");
        this.name = name;
        this.securityStyle = securityStyle;
        this.sizeInMegabytes = Objects.requireNonNull(sizeInMegabytes, "expected parameter 'sizeInMegabytes' to be non-null");
        this.storageEfficiencyEnabled = Objects.requireNonNull(storageEfficiencyEnabled, "expected parameter 'storageEfficiencyEnabled' to be non-null");
        this.storageVirtualMachineId = Objects.requireNonNull(storageVirtualMachineId, "expected parameter 'storageVirtualMachineId' to be non-null");
        this.tags = tags;
        this.tieringPolicy = tieringPolicy;
        this.volumeType = volumeType;
    }

    private OntapVolumeArgs() {
        this.junctionPath = Input.empty();
        this.name = Input.empty();
        this.securityStyle = Input.empty();
        this.sizeInMegabytes = Input.empty();
        this.storageEfficiencyEnabled = Input.empty();
        this.storageVirtualMachineId = Input.empty();
        this.tags = Input.empty();
        this.tieringPolicy = Input.empty();
        this.volumeType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OntapVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> junctionPath;
        private @Nullable Input<String> name;
        private @Nullable Input<String> securityStyle;
        private Input<Integer> sizeInMegabytes;
        private Input<Boolean> storageEfficiencyEnabled;
        private Input<String> storageVirtualMachineId;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<OntapVolumeTieringPolicyArgs> tieringPolicy;
        private @Nullable Input<String> volumeType;

        public Builder() {
    	      // Empty
        }

        public Builder(OntapVolumeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.junctionPath = defaults.junctionPath;
    	      this.name = defaults.name;
    	      this.securityStyle = defaults.securityStyle;
    	      this.sizeInMegabytes = defaults.sizeInMegabytes;
    	      this.storageEfficiencyEnabled = defaults.storageEfficiencyEnabled;
    	      this.storageVirtualMachineId = defaults.storageVirtualMachineId;
    	      this.tags = defaults.tags;
    	      this.tieringPolicy = defaults.tieringPolicy;
    	      this.volumeType = defaults.volumeType;
        }

        public Builder setJunctionPath(Input<String> junctionPath) {
            this.junctionPath = Objects.requireNonNull(junctionPath);
            return this;
        }

        public Builder setJunctionPath(String junctionPath) {
            this.junctionPath = Input.of(Objects.requireNonNull(junctionPath));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setSecurityStyle(@Nullable Input<String> securityStyle) {
            this.securityStyle = securityStyle;
            return this;
        }

        public Builder setSecurityStyle(@Nullable String securityStyle) {
            this.securityStyle = Input.ofNullable(securityStyle);
            return this;
        }

        public Builder setSizeInMegabytes(Input<Integer> sizeInMegabytes) {
            this.sizeInMegabytes = Objects.requireNonNull(sizeInMegabytes);
            return this;
        }

        public Builder setSizeInMegabytes(Integer sizeInMegabytes) {
            this.sizeInMegabytes = Input.of(Objects.requireNonNull(sizeInMegabytes));
            return this;
        }

        public Builder setStorageEfficiencyEnabled(Input<Boolean> storageEfficiencyEnabled) {
            this.storageEfficiencyEnabled = Objects.requireNonNull(storageEfficiencyEnabled);
            return this;
        }

        public Builder setStorageEfficiencyEnabled(Boolean storageEfficiencyEnabled) {
            this.storageEfficiencyEnabled = Input.of(Objects.requireNonNull(storageEfficiencyEnabled));
            return this;
        }

        public Builder setStorageVirtualMachineId(Input<String> storageVirtualMachineId) {
            this.storageVirtualMachineId = Objects.requireNonNull(storageVirtualMachineId);
            return this;
        }

        public Builder setStorageVirtualMachineId(String storageVirtualMachineId) {
            this.storageVirtualMachineId = Input.of(Objects.requireNonNull(storageVirtualMachineId));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTieringPolicy(@Nullable Input<OntapVolumeTieringPolicyArgs> tieringPolicy) {
            this.tieringPolicy = tieringPolicy;
            return this;
        }

        public Builder setTieringPolicy(@Nullable OntapVolumeTieringPolicyArgs tieringPolicy) {
            this.tieringPolicy = Input.ofNullable(tieringPolicy);
            return this;
        }

        public Builder setVolumeType(@Nullable Input<String> volumeType) {
            this.volumeType = volumeType;
            return this;
        }

        public Builder setVolumeType(@Nullable String volumeType) {
            this.volumeType = Input.ofNullable(volumeType);
            return this;
        }
        public OntapVolumeArgs build() {
            return new OntapVolumeArgs(junctionPath, name, securityStyle, sizeInMegabytes, storageEfficiencyEnabled, storageVirtualMachineId, tags, tieringPolicy, volumeType);
        }
    }
}
