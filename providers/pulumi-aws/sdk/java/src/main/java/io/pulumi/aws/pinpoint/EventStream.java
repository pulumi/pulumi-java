// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.pinpoint;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.pinpoint.EventStreamArgs;
import io.pulumi.aws.pinpoint.inputs.EventStreamState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a Pinpoint Event Stream resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const app = new aws.pinpoint.App("app", {});
 * const testStream = new aws.kinesis.Stream("testStream", {shardCount: 1});
 * const testRole = new aws.iam.Role("testRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "pinpoint.us-east-1.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const stream = new aws.pinpoint.EventStream("stream", {
 *     applicationId: app.applicationId,
 *     destinationStreamArn: testStream.arn,
 *     roleArn: testRole.arn,
 * });
 * const testRolePolicy = new aws.iam.RolePolicy("testRolePolicy", {
 *     role: testRole.id,
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Statement": {
 *     "Action": [
 *       "kinesis:PutRecords",
 *       "kinesis:DescribeStream"
 *     ],
 *     "Effect": "Allow",
 *     "Resource": [
 *       "arn:aws:kinesis:us-east-1:*:*{@literal /}*"
 *     ]
 *   }
 * }
 * `,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * app = aws.pinpoint.App("app")
 * test_stream = aws.kinesis.Stream("testStream", shard_count=1)
 * test_role = aws.iam.Role("testRole", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "pinpoint.us-east-1.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * """)
 * stream = aws.pinpoint.EventStream("stream",
 *     application_id=app.application_id,
 *     destination_stream_arn=test_stream.arn,
 *     role_arn=test_role.arn)
 * test_role_policy = aws.iam.RolePolicy("testRolePolicy",
 *     role=test_role.id,
 *     policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": {
 *     "Action": [
 *       "kinesis:PutRecords",
 *       "kinesis:DescribeStream"
 *     ],
 *     "Effect": "Allow",
 *     "Resource": [
 *       "arn:aws:kinesis:us-east-1:*:*{@literal /}*"
 *     ]
 *   }
 * }
 * """)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var app = new Aws.Pinpoint.App("app", new Aws.Pinpoint.AppArgs
 *         {
 *         });
 *         var testStream = new Aws.Kinesis.Stream("testStream", new Aws.Kinesis.StreamArgs
 *         {
 *             ShardCount = 1,
 *         });
 *         var testRole = new Aws.Iam.Role("testRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": ""sts:AssumeRole"",
 *       ""Principal"": {
 *         ""Service"": ""pinpoint.us-east-1.amazonaws.com""
 *       },
 *       ""Effect"": ""Allow"",
 *       ""Sid"": """"
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var stream = new Aws.Pinpoint.EventStream("stream", new Aws.Pinpoint.EventStreamArgs
 *         {
 *             ApplicationId = app.ApplicationId,
 *             DestinationStreamArn = testStream.Arn,
 *             RoleArn = testRole.Arn,
 *         });
 *         var testRolePolicy = new Aws.Iam.RolePolicy("testRolePolicy", new Aws.Iam.RolePolicyArgs
 *         {
 *             Role = testRole.Id,
 *             Policy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": {
 *     ""Action"": [
 *       ""kinesis:PutRecords"",
 *       ""kinesis:DescribeStream""
 *     ],
 *     ""Effect"": ""Allow"",
 *     ""Resource"": [
 *       ""arn:aws:kinesis:us-east-1:*:*{@literal /}*""
 *     ]
 *   }
 * }
 * ",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kinesis"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/pinpoint"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		app, err := pinpoint.NewApp(ctx, "app", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		testStream, err := kinesis.NewStream(ctx, "testStream", &kinesis.StreamArgs{
 * 			ShardCount: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		testRole, err := iam.NewRole(ctx, "testRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"pinpoint.us-east-1.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = pinpoint.NewEventStream(ctx, "stream", &pinpoint.EventStreamArgs{
 * 			ApplicationId:        app.ApplicationId,
 * 			DestinationStreamArn: testStream.Arn,
 * 			RoleArn:              testRole.Arn,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicy(ctx, "testRolePolicy", &iam.RolePolicyArgs{
 * 			Role:   testRole.ID(),
 * 			Policy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": {\n", "    \"Action\": [\n", "      \"kinesis:PutRecords\",\n", "      \"kinesis:DescribeStream\"\n", "    ],\n", "    \"Effect\": \"Allow\",\n", "    \"Resource\": [\n", "      \"arn:aws:kinesis:us-east-1:*:*{@literal /}*\"\n", "    ]\n", "  }\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Pinpoint Event Stream can be imported using the `application-id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:pinpoint/eventStream:EventStream stream application-id
 * ```
 * 
 *  
 */
@ResourceType(type="aws:pinpoint/eventStream:EventStream")
public class EventStream extends io.pulumi.resources.CustomResource {
    /**
     * The application ID.
     * 
     */
    @Export(name="applicationId", type=String.class, parameters={})
    private Output<String> applicationId;

    /**
     * @return The application ID.
     * 
     */
    public Output<String> getApplicationId() {
        return this.applicationId;
    }
    /**
     * The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
     * 
     */
    @Export(name="destinationStreamArn", type=String.class, parameters={})
    private Output<String> destinationStreamArn;

    /**
     * @return The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
     * 
     */
    public Output<String> getDestinationStreamArn() {
        return this.destinationStreamArn;
    }
    /**
     * The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.
     * 
     */
    @Export(name="roleArn", type=String.class, parameters={})
    private Output<String> roleArn;

    /**
     * @return The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.
     * 
     */
    public Output<String> getRoleArn() {
        return this.roleArn;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventStream(String name) {
        this(name, EventStreamArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventStream(String name, EventStreamArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventStream(String name, EventStreamArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:pinpoint/eventStream:EventStream", name, args == null ? EventStreamArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private EventStream(String name, Output<String> id, @Nullable EventStreamState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:pinpoint/eventStream:EventStream", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventStream get(String name, Output<String> id, @Nullable EventStreamState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new EventStream(name, id, state, options);
    }
}
