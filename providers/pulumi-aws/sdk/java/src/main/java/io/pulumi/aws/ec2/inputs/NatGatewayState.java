// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NatGatewayState extends io.pulumi.resources.ResourceArgs {

    public static final NatGatewayState Empty = new NatGatewayState();

    /**
     * The Allocation ID of the Elastic IP address for the gateway. Required for `connectivity_type` of `public`.
     * 
     */
    @InputImport(name="allocationId")
      private final @Nullable Input<String> allocationId;

    public Input<String> getAllocationId() {
        return this.allocationId == null ? Input.empty() : this.allocationId;
    }

    /**
     * Connectivity type for the gateway. Valid values are `private` and `public`. Defaults to `public`.
     * 
     */
    @InputImport(name="connectivityType")
      private final @Nullable Input<String> connectivityType;

    public Input<String> getConnectivityType() {
        return this.connectivityType == null ? Input.empty() : this.connectivityType;
    }

    /**
     * The ENI ID of the network interface created by the NAT gateway.
     * 
     */
    @InputImport(name="networkInterfaceId")
      private final @Nullable Input<String> networkInterfaceId;

    public Input<String> getNetworkInterfaceId() {
        return this.networkInterfaceId == null ? Input.empty() : this.networkInterfaceId;
    }

    /**
     * The private IP address of the NAT Gateway.
     * 
     */
    @InputImport(name="privateIp")
      private final @Nullable Input<String> privateIp;

    public Input<String> getPrivateIp() {
        return this.privateIp == null ? Input.empty() : this.privateIp;
    }

    /**
     * The public IP address of the NAT Gateway.
     * 
     */
    @InputImport(name="publicIp")
      private final @Nullable Input<String> publicIp;

    public Input<String> getPublicIp() {
        return this.publicIp == null ? Input.empty() : this.publicIp;
    }

    /**
     * The Subnet ID of the subnet in which to place the gateway.
     * 
     */
    @InputImport(name="subnetId")
      private final @Nullable Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId == null ? Input.empty() : this.subnetId;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public NatGatewayState(
        @Nullable Input<String> allocationId,
        @Nullable Input<String> connectivityType,
        @Nullable Input<String> networkInterfaceId,
        @Nullable Input<String> privateIp,
        @Nullable Input<String> publicIp,
        @Nullable Input<String> subnetId,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.allocationId = allocationId;
        this.connectivityType = connectivityType;
        this.networkInterfaceId = networkInterfaceId;
        this.privateIp = privateIp;
        this.publicIp = publicIp;
        this.subnetId = subnetId;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private NatGatewayState() {
        this.allocationId = Input.empty();
        this.connectivityType = Input.empty();
        this.networkInterfaceId = Input.empty();
        this.privateIp = Input.empty();
        this.publicIp = Input.empty();
        this.subnetId = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NatGatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> allocationId;
        private @Nullable Input<String> connectivityType;
        private @Nullable Input<String> networkInterfaceId;
        private @Nullable Input<String> privateIp;
        private @Nullable Input<String> publicIp;
        private @Nullable Input<String> subnetId;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(NatGatewayState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationId = defaults.allocationId;
    	      this.connectivityType = defaults.connectivityType;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.privateIp = defaults.privateIp;
    	      this.publicIp = defaults.publicIp;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setAllocationId(@Nullable Input<String> allocationId) {
            this.allocationId = allocationId;
            return this;
        }

        public Builder setAllocationId(@Nullable String allocationId) {
            this.allocationId = Input.ofNullable(allocationId);
            return this;
        }

        public Builder setConnectivityType(@Nullable Input<String> connectivityType) {
            this.connectivityType = connectivityType;
            return this;
        }

        public Builder setConnectivityType(@Nullable String connectivityType) {
            this.connectivityType = Input.ofNullable(connectivityType);
            return this;
        }

        public Builder setNetworkInterfaceId(@Nullable Input<String> networkInterfaceId) {
            this.networkInterfaceId = networkInterfaceId;
            return this;
        }

        public Builder setNetworkInterfaceId(@Nullable String networkInterfaceId) {
            this.networkInterfaceId = Input.ofNullable(networkInterfaceId);
            return this;
        }

        public Builder setPrivateIp(@Nullable Input<String> privateIp) {
            this.privateIp = privateIp;
            return this;
        }

        public Builder setPrivateIp(@Nullable String privateIp) {
            this.privateIp = Input.ofNullable(privateIp);
            return this;
        }

        public Builder setPublicIp(@Nullable Input<String> publicIp) {
            this.publicIp = publicIp;
            return this;
        }

        public Builder setPublicIp(@Nullable String publicIp) {
            this.publicIp = Input.ofNullable(publicIp);
            return this;
        }

        public Builder setSubnetId(@Nullable Input<String> subnetId) {
            this.subnetId = subnetId;
            return this;
        }

        public Builder setSubnetId(@Nullable String subnetId) {
            this.subnetId = Input.ofNullable(subnetId);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public NatGatewayState build() {
            return new NatGatewayState(allocationId, connectivityType, networkInterfaceId, privateIp, publicIp, subnetId, tags, tagsAll);
        }
    }
}
