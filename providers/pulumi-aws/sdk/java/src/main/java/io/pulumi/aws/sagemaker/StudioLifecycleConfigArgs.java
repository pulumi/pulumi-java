// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.sagemaker;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StudioLifecycleConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final StudioLifecycleConfigArgs Empty = new StudioLifecycleConfigArgs();

    /**
     * The App type that the Lifecycle Configuration is attached to. Valid values are `JupyterServer` and `KernelGateway`.
     * 
     */
    @InputImport(name="studioLifecycleConfigAppType", required=true)
      private final Input<String> studioLifecycleConfigAppType;

    public Input<String> getStudioLifecycleConfigAppType() {
        return this.studioLifecycleConfigAppType;
    }

    /**
     * The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
     * 
     */
    @InputImport(name="studioLifecycleConfigContent", required=true)
      private final Input<String> studioLifecycleConfigContent;

    public Input<String> getStudioLifecycleConfigContent() {
        return this.studioLifecycleConfigContent;
    }

    /**
     * The name of the Studio Lifecycle Configuration to create.
     * 
     */
    @InputImport(name="studioLifecycleConfigName", required=true)
      private final Input<String> studioLifecycleConfigName;

    public Input<String> getStudioLifecycleConfigName() {
        return this.studioLifecycleConfigName;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public StudioLifecycleConfigArgs(
        Input<String> studioLifecycleConfigAppType,
        Input<String> studioLifecycleConfigContent,
        Input<String> studioLifecycleConfigName,
        @Nullable Input<Map<String,String>> tags) {
        this.studioLifecycleConfigAppType = Objects.requireNonNull(studioLifecycleConfigAppType, "expected parameter 'studioLifecycleConfigAppType' to be non-null");
        this.studioLifecycleConfigContent = Objects.requireNonNull(studioLifecycleConfigContent, "expected parameter 'studioLifecycleConfigContent' to be non-null");
        this.studioLifecycleConfigName = Objects.requireNonNull(studioLifecycleConfigName, "expected parameter 'studioLifecycleConfigName' to be non-null");
        this.tags = tags;
    }

    private StudioLifecycleConfigArgs() {
        this.studioLifecycleConfigAppType = Input.empty();
        this.studioLifecycleConfigContent = Input.empty();
        this.studioLifecycleConfigName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StudioLifecycleConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> studioLifecycleConfigAppType;
        private Input<String> studioLifecycleConfigContent;
        private Input<String> studioLifecycleConfigName;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(StudioLifecycleConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.studioLifecycleConfigAppType = defaults.studioLifecycleConfigAppType;
    	      this.studioLifecycleConfigContent = defaults.studioLifecycleConfigContent;
    	      this.studioLifecycleConfigName = defaults.studioLifecycleConfigName;
    	      this.tags = defaults.tags;
        }

        public Builder studioLifecycleConfigAppType(Input<String> studioLifecycleConfigAppType) {
            this.studioLifecycleConfigAppType = Objects.requireNonNull(studioLifecycleConfigAppType);
            return this;
        }

        public Builder studioLifecycleConfigAppType(String studioLifecycleConfigAppType) {
            this.studioLifecycleConfigAppType = Input.of(Objects.requireNonNull(studioLifecycleConfigAppType));
            return this;
        }

        public Builder studioLifecycleConfigContent(Input<String> studioLifecycleConfigContent) {
            this.studioLifecycleConfigContent = Objects.requireNonNull(studioLifecycleConfigContent);
            return this;
        }

        public Builder studioLifecycleConfigContent(String studioLifecycleConfigContent) {
            this.studioLifecycleConfigContent = Input.of(Objects.requireNonNull(studioLifecycleConfigContent));
            return this;
        }

        public Builder studioLifecycleConfigName(Input<String> studioLifecycleConfigName) {
            this.studioLifecycleConfigName = Objects.requireNonNull(studioLifecycleConfigName);
            return this;
        }

        public Builder studioLifecycleConfigName(String studioLifecycleConfigName) {
            this.studioLifecycleConfigName = Input.of(Objects.requireNonNull(studioLifecycleConfigName));
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public StudioLifecycleConfigArgs build() {
            return new StudioLifecycleConfigArgs(studioLifecycleConfigAppType, studioLifecycleConfigContent, studioLifecycleConfigName, tags);
        }
    }
}
