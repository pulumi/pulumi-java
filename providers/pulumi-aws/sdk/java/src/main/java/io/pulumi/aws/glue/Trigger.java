// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.glue.TriggerArgs;
import io.pulumi.aws.glue.inputs.TriggerState;
import io.pulumi.aws.glue.outputs.TriggerAction;
import io.pulumi.aws.glue.outputs.TriggerPredicate;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Manages a Glue Trigger resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Conditional Trigger
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.glue.Trigger("example", {
 *     type: "CONDITIONAL",
 *     actions: [{
 *         jobName: aws_glue_job.example1.name,
 *     }],
 *     predicate: {
 *         conditions: [{
 *             jobName: aws_glue_job.example2.name,
 *             state: "SUCCEEDED",
 *         }],
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.glue.Trigger("example",
 *     type="CONDITIONAL",
 *     actions=[aws.glue.TriggerActionArgs(
 *         job_name=aws_glue_job["example1"]["name"],
 *     )],
 *     predicate=aws.glue.TriggerPredicateArgs(
 *         conditions=[aws.glue.TriggerPredicateConditionArgs(
 *             job_name=aws_glue_job["example2"]["name"],
 *             state="SUCCEEDED",
 *         )],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Glue.Trigger("example", new Aws.Glue.TriggerArgs
 *         {
 *             Type = "CONDITIONAL",
 *             Actions = 
 *             {
 *                 new Aws.Glue.Inputs.TriggerActionArgs
 *                 {
 *                     JobName = aws_glue_job.Example1.Name,
 *                 },
 *             },
 *             Predicate = new Aws.Glue.Inputs.TriggerPredicateArgs
 *             {
 *                 Conditions = 
 *                 {
 *                     new Aws.Glue.Inputs.TriggerPredicateConditionArgs
 *                     {
 *                         JobName = aws_glue_job.Example2.Name,
 *                         State = "SUCCEEDED",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := glue.NewTrigger(ctx, "example", &glue.TriggerArgs{
 * 			Type: pulumi.String("CONDITIONAL"),
 * 			Actions: glue.TriggerActionArray{
 * 				&glue.TriggerActionArgs{
 * 					JobName: pulumi.Any(aws_glue_job.Example1.Name),
 * 				},
 * 			},
 * 			Predicate: &glue.TriggerPredicateArgs{
 * 				Conditions: glue.TriggerPredicateConditionArray{
 * 					&glue.TriggerPredicateConditionArgs{
 * 						JobName: pulumi.Any(aws_glue_job.Example2.Name),
 * 						State:   pulumi.String("SUCCEEDED"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### On-Demand Trigger
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.glue.Trigger("example", {
 *     type: "ON_DEMAND",
 *     actions: [{
 *         jobName: aws_glue_job.example.name,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.glue.Trigger("example",
 *     type="ON_DEMAND",
 *     actions=[aws.glue.TriggerActionArgs(
 *         job_name=aws_glue_job["example"]["name"],
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Glue.Trigger("example", new Aws.Glue.TriggerArgs
 *         {
 *             Type = "ON_DEMAND",
 *             Actions = 
 *             {
 *                 new Aws.Glue.Inputs.TriggerActionArgs
 *                 {
 *                     JobName = aws_glue_job.Example.Name,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := glue.NewTrigger(ctx, "example", &glue.TriggerArgs{
 * 			Type: pulumi.String("ON_DEMAND"),
 * 			Actions: glue.TriggerActionArray{
 * 				&glue.TriggerActionArgs{
 * 					JobName: pulumi.Any(aws_glue_job.Example.Name),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Scheduled Trigger
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.glue.Trigger("example", {
 *     schedule: "cron(15 12 * * ? *)",
 *     type: "SCHEDULED",
 *     actions: [{
 *         jobName: aws_glue_job.example.name,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.glue.Trigger("example",
 *     schedule="cron(15 12 * * ? *)",
 *     type="SCHEDULED",
 *     actions=[aws.glue.TriggerActionArgs(
 *         job_name=aws_glue_job["example"]["name"],
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Glue.Trigger("example", new Aws.Glue.TriggerArgs
 *         {
 *             Schedule = "cron(15 12 * * ? *)",
 *             Type = "SCHEDULED",
 *             Actions = 
 *             {
 *                 new Aws.Glue.Inputs.TriggerActionArgs
 *                 {
 *                     JobName = aws_glue_job.Example.Name,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := glue.NewTrigger(ctx, "example", &glue.TriggerArgs{
 * 			Schedule: pulumi.String("cron(15 12 * * ? *)"),
 * 			Type:     pulumi.String("SCHEDULED"),
 * 			Actions: glue.TriggerActionArray{
 * 				&glue.TriggerActionArgs{
 * 					JobName: pulumi.Any(aws_glue_job.Example.Name),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Conditional Trigger with Crawler Action
 * 
 * **Note:** Triggers can have both a crawler action and a crawler condition, just no example provided.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.glue.Trigger("example", {
 *     type: "CONDITIONAL",
 *     actions: [{
 *         crawlerName: aws_glue_crawler.example1.name,
 *     }],
 *     predicate: {
 *         conditions: [{
 *             jobName: aws_glue_job.example2.name,
 *             state: "SUCCEEDED",
 *         }],
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.glue.Trigger("example",
 *     type="CONDITIONAL",
 *     actions=[aws.glue.TriggerActionArgs(
 *         crawler_name=aws_glue_crawler["example1"]["name"],
 *     )],
 *     predicate=aws.glue.TriggerPredicateArgs(
 *         conditions=[aws.glue.TriggerPredicateConditionArgs(
 *             job_name=aws_glue_job["example2"]["name"],
 *             state="SUCCEEDED",
 *         )],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Glue.Trigger("example", new Aws.Glue.TriggerArgs
 *         {
 *             Type = "CONDITIONAL",
 *             Actions = 
 *             {
 *                 new Aws.Glue.Inputs.TriggerActionArgs
 *                 {
 *                     CrawlerName = aws_glue_crawler.Example1.Name,
 *                 },
 *             },
 *             Predicate = new Aws.Glue.Inputs.TriggerPredicateArgs
 *             {
 *                 Conditions = 
 *                 {
 *                     new Aws.Glue.Inputs.TriggerPredicateConditionArgs
 *                     {
 *                         JobName = aws_glue_job.Example2.Name,
 *                         State = "SUCCEEDED",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := glue.NewTrigger(ctx, "example", &glue.TriggerArgs{
 * 			Type: pulumi.String("CONDITIONAL"),
 * 			Actions: glue.TriggerActionArray{
 * 				&glue.TriggerActionArgs{
 * 					CrawlerName: pulumi.Any(aws_glue_crawler.Example1.Name),
 * 				},
 * 			},
 * 			Predicate: &glue.TriggerPredicateArgs{
 * 				Conditions: glue.TriggerPredicateConditionArray{
 * 					&glue.TriggerPredicateConditionArgs{
 * 						JobName: pulumi.Any(aws_glue_job.Example2.Name),
 * 						State:   pulumi.String("SUCCEEDED"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Conditional Trigger with Crawler Condition
 * 
 * **Note:** Triggers can have both a crawler action and a crawler condition, just no example provided.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.glue.Trigger("example", {
 *     type: "CONDITIONAL",
 *     actions: [{
 *         jobName: aws_glue_job.example1.name,
 *     }],
 *     predicate: {
 *         conditions: [{
 *             crawlerName: aws_glue_crawler.example2.name,
 *             crawlState: "SUCCEEDED",
 *         }],
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.glue.Trigger("example",
 *     type="CONDITIONAL",
 *     actions=[aws.glue.TriggerActionArgs(
 *         job_name=aws_glue_job["example1"]["name"],
 *     )],
 *     predicate=aws.glue.TriggerPredicateArgs(
 *         conditions=[aws.glue.TriggerPredicateConditionArgs(
 *             crawler_name=aws_glue_crawler["example2"]["name"],
 *             crawl_state="SUCCEEDED",
 *         )],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Glue.Trigger("example", new Aws.Glue.TriggerArgs
 *         {
 *             Type = "CONDITIONAL",
 *             Actions = 
 *             {
 *                 new Aws.Glue.Inputs.TriggerActionArgs
 *                 {
 *                     JobName = aws_glue_job.Example1.Name,
 *                 },
 *             },
 *             Predicate = new Aws.Glue.Inputs.TriggerPredicateArgs
 *             {
 *                 Conditions = 
 *                 {
 *                     new Aws.Glue.Inputs.TriggerPredicateConditionArgs
 *                     {
 *                         CrawlerName = aws_glue_crawler.Example2.Name,
 *                         CrawlState = "SUCCEEDED",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := glue.NewTrigger(ctx, "example", &glue.TriggerArgs{
 * 			Type: pulumi.String("CONDITIONAL"),
 * 			Actions: glue.TriggerActionArray{
 * 				&glue.TriggerActionArgs{
 * 					JobName: pulumi.Any(aws_glue_job.Example1.Name),
 * 				},
 * 			},
 * 			Predicate: &glue.TriggerPredicateArgs{
 * 				Conditions: glue.TriggerPredicateConditionArray{
 * 					&glue.TriggerPredicateConditionArgs{
 * 						CrawlerName: pulumi.Any(aws_glue_crawler.Example2.Name),
 * 						CrawlState:  pulumi.String("SUCCEEDED"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Glue Triggers can be imported using `name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:glue/trigger:Trigger MyTrigger MyTrigger
 * ```
 * 
 *  
 */
@ResourceType(type="aws:glue/trigger:Trigger")
public class Trigger extends io.pulumi.resources.CustomResource {
    /**
     * List of actions initiated by this trigger when it fires. See Actions Below.
     * 
     */
    @Export(name="actions", type=List.class, parameters={TriggerAction.class})
    private Output<List<TriggerAction>> actions;

    /**
     * @return List of actions initiated by this trigger when it fires. See Actions Below.
     * 
     */
    public Output<List<TriggerAction>> getActions() {
        return this.actions;
    }
    /**
     * Amazon Resource Name (ARN) of Glue Trigger
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of Glue Trigger
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * A description of the new trigger.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A description of the new trigger.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Start the trigger. Defaults to `true`.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Start the trigger. Defaults to `true`.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnabled() {
        return this.enabled;
    }
    /**
     * The name of the trigger.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the trigger.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
     * 
     */
    @Export(name="predicate", type=TriggerPredicate.class, parameters={})
    private Output</* @Nullable */ TriggerPredicate> predicate;

    /**
     * @return A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
     * 
     */
    public Output</* @Nullable */ TriggerPredicate> getPredicate() {
        return this.predicate;
    }
    /**
     * A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
     * 
     */
    @Export(name="schedule", type=String.class, parameters={})
    private Output</* @Nullable */ String> schedule;

    /**
     * @return A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
     * 
     */
    public Output</* @Nullable */ String> getSchedule() {
        return this.schedule;
    }
    /**
     * Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
     * 
     */
    @Export(name="startOnCreation", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> startOnCreation;

    /**
     * @return Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
     * 
     */
    public Output</* @Nullable */ Boolean> getStartOnCreation() {
        return this.startOnCreation;
    }
    /**
     * The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `job_name` must also be specified. Conflicts with `crawler_state`.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `job_name` must also be specified. Conflicts with `crawler_state`.
     * 
     */
    public Output<String> getState() {
        return this.state;
    }
    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
     * 
     */
    @Export(name="workflowName", type=String.class, parameters={})
    private Output</* @Nullable */ String> workflowName;

    /**
     * @return A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
     * 
     */
    public Output</* @Nullable */ String> getWorkflowName() {
        return this.workflowName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Trigger(String name) {
        this(name, TriggerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Trigger(String name, TriggerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Trigger(String name, TriggerArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/trigger:Trigger", name, args == null ? TriggerArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Trigger(String name, Output<String> id, @Nullable TriggerState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/trigger:Trigger", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Trigger get(String name, Output<String> id, @Nullable TriggerState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Trigger(name, id, state, options);
    }
}
