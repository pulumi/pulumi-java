// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.servicediscovery;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.servicediscovery.InstanceArgs;
import io.pulumi.aws.servicediscovery.inputs.InstanceState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a Service Discovery Instance resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleVpc = new aws.ec2.Vpc("exampleVpc", {
 *     cidrBlock: "10.0.0.0/16",
 *     enableDnsSupport: true,
 *     enableDnsHostnames: true,
 * });
 * const examplePrivateDnsNamespace = new aws.servicediscovery.PrivateDnsNamespace("examplePrivateDnsNamespace", {
 *     description: "example",
 *     vpc: exampleVpc.id,
 * });
 * const exampleService = new aws.servicediscovery.Service("exampleService", {
 *     dnsConfig: {
 *         namespaceId: examplePrivateDnsNamespace.id,
 *         dnsRecords: [{
 *             ttl: 10,
 *             type: "A",
 *         }],
 *         routingPolicy: "MULTIVALUE",
 *     },
 *     healthCheckCustomConfig: {
 *         failureThreshold: 1,
 *     },
 * });
 * const exampleInstance = new aws.servicediscovery.Instance("exampleInstance", {
 *     instanceId: "example-instance-id",
 *     serviceId: exampleService.id,
 *     attributes: {
 *         AWS_INSTANCE_IPV4: "172.18.0.1",
 *         custom_attribute: "custom",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_vpc = aws.ec2.Vpc("exampleVpc",
 *     cidr_block="10.0.0.0/16",
 *     enable_dns_support=True,
 *     enable_dns_hostnames=True)
 * example_private_dns_namespace = aws.servicediscovery.PrivateDnsNamespace("examplePrivateDnsNamespace",
 *     description="example",
 *     vpc=example_vpc.id)
 * example_service = aws.servicediscovery.Service("exampleService",
 *     dns_config=aws.servicediscovery.ServiceDnsConfigArgs(
 *         namespace_id=example_private_dns_namespace.id,
 *         dns_records=[aws.servicediscovery.ServiceDnsConfigDnsRecordArgs(
 *             ttl=10,
 *             type="A",
 *         )],
 *         routing_policy="MULTIVALUE",
 *     ),
 *     health_check_custom_config=aws.servicediscovery.ServiceHealthCheckCustomConfigArgs(
 *         failure_threshold=1,
 *     ))
 * example_instance = aws.servicediscovery.Instance("exampleInstance",
 *     instance_id="example-instance-id",
 *     service_id=example_service.id,
 *     attributes={
 *         "AWS_INSTANCE_IPV4": "172.18.0.1",
 *         "custom_attribute": "custom",
 *     })
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleVpc = new Aws.Ec2.Vpc("exampleVpc", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "10.0.0.0/16",
 *             EnableDnsSupport = true,
 *             EnableDnsHostnames = true,
 *         });
 *         var examplePrivateDnsNamespace = new Aws.ServiceDiscovery.PrivateDnsNamespace("examplePrivateDnsNamespace", new Aws.ServiceDiscovery.PrivateDnsNamespaceArgs
 *         {
 *             Description = "example",
 *             Vpc = exampleVpc.Id,
 *         });
 *         var exampleService = new Aws.ServiceDiscovery.Service("exampleService", new Aws.ServiceDiscovery.ServiceArgs
 *         {
 *             DnsConfig = new Aws.ServiceDiscovery.Inputs.ServiceDnsConfigArgs
 *             {
 *                 NamespaceId = examplePrivateDnsNamespace.Id,
 *                 DnsRecords = 
 *                 {
 *                     new Aws.ServiceDiscovery.Inputs.ServiceDnsConfigDnsRecordArgs
 *                     {
 *                         Ttl = 10,
 *                         Type = "A",
 *                     },
 *                 },
 *                 RoutingPolicy = "MULTIVALUE",
 *             },
 *             HealthCheckCustomConfig = new Aws.ServiceDiscovery.Inputs.ServiceHealthCheckCustomConfigArgs
 *             {
 *                 FailureThreshold = 1,
 *             },
 *         });
 *         var exampleInstance = new Aws.ServiceDiscovery.Instance("exampleInstance", new Aws.ServiceDiscovery.InstanceArgs
 *         {
 *             InstanceId = "example-instance-id",
 *             ServiceId = exampleService.Id,
 *             Attributes = 
 *             {
 *                 { "AWS_INSTANCE_IPV4", "172.18.0.1" },
 *                 { "custom_attribute", "custom" },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/servicediscovery"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleVpc, err := ec2.NewVpc(ctx, "exampleVpc", &ec2.VpcArgs{
 * 			CidrBlock:          pulumi.String("10.0.0.0/16"),
 * 			EnableDnsSupport:   pulumi.Bool(true),
 * 			EnableDnsHostnames: pulumi.Bool(true),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		examplePrivateDnsNamespace, err := servicediscovery.NewPrivateDnsNamespace(ctx, "examplePrivateDnsNamespace", &servicediscovery.PrivateDnsNamespaceArgs{
 * 			Description: pulumi.String("example"),
 * 			Vpc:         exampleVpc.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleService, err := servicediscovery.NewService(ctx, "exampleService", &servicediscovery.ServiceArgs{
 * 			DnsConfig: &servicediscovery.ServiceDnsConfigArgs{
 * 				NamespaceId: examplePrivateDnsNamespace.ID(),
 * 				DnsRecords: servicediscovery.ServiceDnsConfigDnsRecordArray{
 * 					&servicediscovery.ServiceDnsConfigDnsRecordArgs{
 * 						Ttl:  pulumi.Int(10),
 * 						Type: pulumi.String("A"),
 * 					},
 * 				},
 * 				RoutingPolicy: pulumi.String("MULTIVALUE"),
 * 			},
 * 			HealthCheckCustomConfig: &servicediscovery.ServiceHealthCheckCustomConfigArgs{
 * 				FailureThreshold: pulumi.Int(1),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = servicediscovery.NewInstance(ctx, "exampleInstance", &servicediscovery.InstanceArgs{
 * 			InstanceId: pulumi.String("example-instance-id"),
 * 			ServiceId:  exampleService.ID(),
 * 			Attributes: pulumi.StringMap{
 * 				"AWS_INSTANCE_IPV4": pulumi.String("172.18.0.1"),
 * 				"custom_attribute":  pulumi.String("custom"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleHttpNamespace = new aws.servicediscovery.HttpNamespace("exampleHttpNamespace", {description: "example"});
 * const exampleService = new aws.servicediscovery.Service("exampleService", {namespaceId: exampleHttpNamespace.id});
 * const exampleInstance = new aws.servicediscovery.Instance("exampleInstance", {
 *     instanceId: "example-instance-id",
 *     serviceId: exampleService.id,
 *     attributes: {
 *         AWS_EC2_INSTANCE_ID: "i-0abdg374kd892cj6dl",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_http_namespace = aws.servicediscovery.HttpNamespace("exampleHttpNamespace", description="example")
 * example_service = aws.servicediscovery.Service("exampleService", namespace_id=example_http_namespace.id)
 * example_instance = aws.servicediscovery.Instance("exampleInstance",
 *     instance_id="example-instance-id",
 *     service_id=example_service.id,
 *     attributes={
 *         "AWS_EC2_INSTANCE_ID": "i-0abdg374kd892cj6dl",
 *     })
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleHttpNamespace = new Aws.ServiceDiscovery.HttpNamespace("exampleHttpNamespace", new Aws.ServiceDiscovery.HttpNamespaceArgs
 *         {
 *             Description = "example",
 *         });
 *         var exampleService = new Aws.ServiceDiscovery.Service("exampleService", new Aws.ServiceDiscovery.ServiceArgs
 *         {
 *             NamespaceId = exampleHttpNamespace.Id,
 *         });
 *         var exampleInstance = new Aws.ServiceDiscovery.Instance("exampleInstance", new Aws.ServiceDiscovery.InstanceArgs
 *         {
 *             InstanceId = "example-instance-id",
 *             ServiceId = exampleService.Id,
 *             Attributes = 
 *             {
 *                 { "AWS_EC2_INSTANCE_ID", "i-0abdg374kd892cj6dl" },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/servicediscovery"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleHttpNamespace, err := servicediscovery.NewHttpNamespace(ctx, "exampleHttpNamespace", &servicediscovery.HttpNamespaceArgs{
 * 			Description: pulumi.String("example"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleService, err := servicediscovery.NewService(ctx, "exampleService", &servicediscovery.ServiceArgs{
 * 			NamespaceId: exampleHttpNamespace.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = servicediscovery.NewInstance(ctx, "exampleInstance", &servicediscovery.InstanceArgs{
 * 			InstanceId: pulumi.String("example-instance-id"),
 * 			ServiceId:  exampleService.ID(),
 * 			Attributes: pulumi.StringMap{
 * 				"AWS_EC2_INSTANCE_ID": pulumi.String("i-0abdg374kd892cj6dl"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Service Discovery Instance can be imported using the service ID and instance ID, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:servicediscovery/instance:Instance example 0123456789/i-0123
 * ```
 * 
 *  
 */
@ResourceType(type="aws:servicediscovery/instance:Instance")
public class Instance extends io.pulumi.resources.CustomResource {
    /**
     * A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.
     * 
     */
    @Export(name="attributes", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> attributes;

    /**
     * @return A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.
     * 
     */
    public Output<Map<String,String>> getAttributes() {
        return this.attributes;
    }
    /**
     * The ID of the service instance.
     * 
     */
    @Export(name="instanceId", type=String.class, parameters={})
    private Output<String> instanceId;

    /**
     * @return The ID of the service instance.
     * 
     */
    public Output<String> getInstanceId() {
        return this.instanceId;
    }
    /**
     * The ID of the service that you want to use to create the instance.
     * 
     */
    @Export(name="serviceId", type=String.class, parameters={})
    private Output<String> serviceId;

    /**
     * @return The ID of the service that you want to use to create the instance.
     * 
     */
    public Output<String> getServiceId() {
        return this.serviceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(String name, InstanceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:servicediscovery/instance:Instance", name, args == null ? InstanceArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Instance(String name, Output<String> id, @Nullable InstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:servicediscovery/instance:Instance", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(String name, Output<String> id, @Nullable InstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
