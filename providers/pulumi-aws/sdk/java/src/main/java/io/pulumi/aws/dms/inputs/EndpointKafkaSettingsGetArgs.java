// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.dms.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointKafkaSettingsGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointKafkaSettingsGetArgs Empty = new EndpointKafkaSettingsGetArgs();

    /**
     * Kafka broker location. Specify in the form broker-hostname-or-ip:port.
     * 
     */
    @InputImport(name="broker", required=true)
    private final Input<String> broker;

    public Input<String> getBroker() {
        return this.broker;
    }

    /**
     * Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. The default is `false`.
     * 
     */
    @InputImport(name="includeControlDetails")
    private final @Nullable Input<Boolean> includeControlDetails;

    public Input<Boolean> getIncludeControlDetails() {
        return this.includeControlDetails == null ? Input.empty() : this.includeControlDetails;
    }

    /**
     * Include NULL and empty columns for records migrated to the endpoint. The default is `false`.
     * 
     */
    @InputImport(name="includeNullAndEmpty")
    private final @Nullable Input<Boolean> includeNullAndEmpty;

    public Input<Boolean> getIncludeNullAndEmpty() {
        return this.includeNullAndEmpty == null ? Input.empty() : this.includeNullAndEmpty;
    }

    /**
     * Shows the partition value within the Kafka message output unless the partition type is `schema-table-type`. The default is `false`.
     * 
     */
    @InputImport(name="includePartitionValue")
    private final @Nullable Input<Boolean> includePartitionValue;

    public Input<Boolean> getIncludePartitionValue() {
        return this.includePartitionValue == null ? Input.empty() : this.includePartitionValue;
    }

    /**
     * Includes any data definition language (DDL) operations that change the table in the control data, such as `rename-table`, `drop-table`, `add-column`, `drop-column`, and `rename-column`. The default is `false`.
     * 
     */
    @InputImport(name="includeTableAlterOperations")
    private final @Nullable Input<Boolean> includeTableAlterOperations;

    public Input<Boolean> getIncludeTableAlterOperations() {
        return this.includeTableAlterOperations == null ? Input.empty() : this.includeTableAlterOperations;
    }

    /**
     * Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for `transaction_id`, previous `transaction_id`, and `transaction_record_id` (the record offset within a transaction). The default is `false`.
     * 
     */
    @InputImport(name="includeTransactionDetails")
    private final @Nullable Input<Boolean> includeTransactionDetails;

    public Input<Boolean> getIncludeTransactionDetails() {
        return this.includeTransactionDetails == null ? Input.empty() : this.includeTransactionDetails;
    }

    /**
     * The output format for the records created on the endpoint. The message format is `JSON` (default) or `JSON_UNFORMATTED` (a single line with no tab).
     * 
     */
    @InputImport(name="messageFormat")
    private final @Nullable Input<String> messageFormat;

    public Input<String> getMessageFormat() {
        return this.messageFormat == null ? Input.empty() : this.messageFormat;
    }

    /**
     * The maximum size in bytes for records created on the endpoint The default is `1,000,000`.
     * 
     */
    @InputImport(name="messageMaxBytes")
    private final @Nullable Input<Integer> messageMaxBytes;

    public Input<Integer> getMessageMaxBytes() {
        return this.messageMaxBytes == null ? Input.empty() : this.messageMaxBytes;
    }

    /**
     * Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the `no_hex_prefix` endpoint setting to enable migration of RAW data type columns without adding the `'0x'` prefix.
     * 
     */
    @InputImport(name="noHexPrefix")
    private final @Nullable Input<Boolean> noHexPrefix;

    public Input<Boolean> getNoHexPrefix() {
        return this.noHexPrefix == null ? Input.empty() : this.noHexPrefix;
    }

    /**
     * Prefixes schema and table names to partition values, when the partition type is `primary-key-type`. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. The default is `false`.
     * 
     */
    @InputImport(name="partitionIncludeSchemaTable")
    private final @Nullable Input<Boolean> partitionIncludeSchemaTable;

    public Input<Boolean> getPartitionIncludeSchemaTable() {
        return this.partitionIncludeSchemaTable == null ? Input.empty() : this.partitionIncludeSchemaTable;
    }

    /**
     * The secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
     * 
     */
    @InputImport(name="saslPassword")
    private final @Nullable Input<String> saslPassword;

    public Input<String> getSaslPassword() {
        return this.saslPassword == null ? Input.empty() : this.saslPassword;
    }

    /**
     * The secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
     * 
     */
    @InputImport(name="saslUsername")
    private final @Nullable Input<String> saslUsername;

    public Input<String> getSaslUsername() {
        return this.saslUsername == null ? Input.empty() : this.saslUsername;
    }

    /**
     * Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include `ssl-encryption`, `ssl-authentication`, and `sasl-ssl`. `sasl-ssl` requires `sasl_username` and `sasl_password`.
     * 
     */
    @InputImport(name="securityProtocol")
    private final @Nullable Input<String> securityProtocol;

    public Input<String> getSecurityProtocol() {
        return this.securityProtocol == null ? Input.empty() : this.securityProtocol;
    }

    /**
     * The Amazon Resource Name (ARN) for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.
     * 
     */
    @InputImport(name="sslCaCertificateArn")
    private final @Nullable Input<String> sslCaCertificateArn;

    public Input<String> getSslCaCertificateArn() {
        return this.sslCaCertificateArn == null ? Input.empty() : this.sslCaCertificateArn;
    }

    /**
     * The Amazon Resource Name (ARN) of the client certificate used to securely connect to a Kafka target endpoint.
     * 
     */
    @InputImport(name="sslClientCertificateArn")
    private final @Nullable Input<String> sslClientCertificateArn;

    public Input<String> getSslClientCertificateArn() {
        return this.sslClientCertificateArn == null ? Input.empty() : this.sslClientCertificateArn;
    }

    /**
     * The Amazon Resource Name (ARN) for the client private key used to securely connect to a Kafka target endpoint.
     * 
     */
    @InputImport(name="sslClientKeyArn")
    private final @Nullable Input<String> sslClientKeyArn;

    public Input<String> getSslClientKeyArn() {
        return this.sslClientKeyArn == null ? Input.empty() : this.sslClientKeyArn;
    }

    /**
     * The password for the client private key used to securely connect to a Kafka target endpoint.
     * 
     */
    @InputImport(name="sslClientKeyPassword")
    private final @Nullable Input<String> sslClientKeyPassword;

    public Input<String> getSslClientKeyPassword() {
        return this.sslClientKeyPassword == null ? Input.empty() : this.sslClientKeyPassword;
    }

    /**
     * Kafka topic for migration. Defaults to `kafka-default-topic`.
     * 
     */
    @InputImport(name="topic")
    private final @Nullable Input<String> topic;

    public Input<String> getTopic() {
        return this.topic == null ? Input.empty() : this.topic;
    }

    public EndpointKafkaSettingsGetArgs(
        Input<String> broker,
        @Nullable Input<Boolean> includeControlDetails,
        @Nullable Input<Boolean> includeNullAndEmpty,
        @Nullable Input<Boolean> includePartitionValue,
        @Nullable Input<Boolean> includeTableAlterOperations,
        @Nullable Input<Boolean> includeTransactionDetails,
        @Nullable Input<String> messageFormat,
        @Nullable Input<Integer> messageMaxBytes,
        @Nullable Input<Boolean> noHexPrefix,
        @Nullable Input<Boolean> partitionIncludeSchemaTable,
        @Nullable Input<String> saslPassword,
        @Nullable Input<String> saslUsername,
        @Nullable Input<String> securityProtocol,
        @Nullable Input<String> sslCaCertificateArn,
        @Nullable Input<String> sslClientCertificateArn,
        @Nullable Input<String> sslClientKeyArn,
        @Nullable Input<String> sslClientKeyPassword,
        @Nullable Input<String> topic) {
        this.broker = Objects.requireNonNull(broker, "expected parameter 'broker' to be non-null");
        this.includeControlDetails = includeControlDetails;
        this.includeNullAndEmpty = includeNullAndEmpty;
        this.includePartitionValue = includePartitionValue;
        this.includeTableAlterOperations = includeTableAlterOperations;
        this.includeTransactionDetails = includeTransactionDetails;
        this.messageFormat = messageFormat;
        this.messageMaxBytes = messageMaxBytes;
        this.noHexPrefix = noHexPrefix;
        this.partitionIncludeSchemaTable = partitionIncludeSchemaTable;
        this.saslPassword = saslPassword;
        this.saslUsername = saslUsername;
        this.securityProtocol = securityProtocol;
        this.sslCaCertificateArn = sslCaCertificateArn;
        this.sslClientCertificateArn = sslClientCertificateArn;
        this.sslClientKeyArn = sslClientKeyArn;
        this.sslClientKeyPassword = sslClientKeyPassword;
        this.topic = topic;
    }

    private EndpointKafkaSettingsGetArgs() {
        this.broker = Input.empty();
        this.includeControlDetails = Input.empty();
        this.includeNullAndEmpty = Input.empty();
        this.includePartitionValue = Input.empty();
        this.includeTableAlterOperations = Input.empty();
        this.includeTransactionDetails = Input.empty();
        this.messageFormat = Input.empty();
        this.messageMaxBytes = Input.empty();
        this.noHexPrefix = Input.empty();
        this.partitionIncludeSchemaTable = Input.empty();
        this.saslPassword = Input.empty();
        this.saslUsername = Input.empty();
        this.securityProtocol = Input.empty();
        this.sslCaCertificateArn = Input.empty();
        this.sslClientCertificateArn = Input.empty();
        this.sslClientKeyArn = Input.empty();
        this.sslClientKeyPassword = Input.empty();
        this.topic = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointKafkaSettingsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> broker;
        private @Nullable Input<Boolean> includeControlDetails;
        private @Nullable Input<Boolean> includeNullAndEmpty;
        private @Nullable Input<Boolean> includePartitionValue;
        private @Nullable Input<Boolean> includeTableAlterOperations;
        private @Nullable Input<Boolean> includeTransactionDetails;
        private @Nullable Input<String> messageFormat;
        private @Nullable Input<Integer> messageMaxBytes;
        private @Nullable Input<Boolean> noHexPrefix;
        private @Nullable Input<Boolean> partitionIncludeSchemaTable;
        private @Nullable Input<String> saslPassword;
        private @Nullable Input<String> saslUsername;
        private @Nullable Input<String> securityProtocol;
        private @Nullable Input<String> sslCaCertificateArn;
        private @Nullable Input<String> sslClientCertificateArn;
        private @Nullable Input<String> sslClientKeyArn;
        private @Nullable Input<String> sslClientKeyPassword;
        private @Nullable Input<String> topic;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointKafkaSettingsGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.broker = defaults.broker;
    	      this.includeControlDetails = defaults.includeControlDetails;
    	      this.includeNullAndEmpty = defaults.includeNullAndEmpty;
    	      this.includePartitionValue = defaults.includePartitionValue;
    	      this.includeTableAlterOperations = defaults.includeTableAlterOperations;
    	      this.includeTransactionDetails = defaults.includeTransactionDetails;
    	      this.messageFormat = defaults.messageFormat;
    	      this.messageMaxBytes = defaults.messageMaxBytes;
    	      this.noHexPrefix = defaults.noHexPrefix;
    	      this.partitionIncludeSchemaTable = defaults.partitionIncludeSchemaTable;
    	      this.saslPassword = defaults.saslPassword;
    	      this.saslUsername = defaults.saslUsername;
    	      this.securityProtocol = defaults.securityProtocol;
    	      this.sslCaCertificateArn = defaults.sslCaCertificateArn;
    	      this.sslClientCertificateArn = defaults.sslClientCertificateArn;
    	      this.sslClientKeyArn = defaults.sslClientKeyArn;
    	      this.sslClientKeyPassword = defaults.sslClientKeyPassword;
    	      this.topic = defaults.topic;
        }

        public Builder setBroker(Input<String> broker) {
            this.broker = Objects.requireNonNull(broker);
            return this;
        }

        public Builder setBroker(String broker) {
            this.broker = Input.of(Objects.requireNonNull(broker));
            return this;
        }

        public Builder setIncludeControlDetails(@Nullable Input<Boolean> includeControlDetails) {
            this.includeControlDetails = includeControlDetails;
            return this;
        }

        public Builder setIncludeControlDetails(@Nullable Boolean includeControlDetails) {
            this.includeControlDetails = Input.ofNullable(includeControlDetails);
            return this;
        }

        public Builder setIncludeNullAndEmpty(@Nullable Input<Boolean> includeNullAndEmpty) {
            this.includeNullAndEmpty = includeNullAndEmpty;
            return this;
        }

        public Builder setIncludeNullAndEmpty(@Nullable Boolean includeNullAndEmpty) {
            this.includeNullAndEmpty = Input.ofNullable(includeNullAndEmpty);
            return this;
        }

        public Builder setIncludePartitionValue(@Nullable Input<Boolean> includePartitionValue) {
            this.includePartitionValue = includePartitionValue;
            return this;
        }

        public Builder setIncludePartitionValue(@Nullable Boolean includePartitionValue) {
            this.includePartitionValue = Input.ofNullable(includePartitionValue);
            return this;
        }

        public Builder setIncludeTableAlterOperations(@Nullable Input<Boolean> includeTableAlterOperations) {
            this.includeTableAlterOperations = includeTableAlterOperations;
            return this;
        }

        public Builder setIncludeTableAlterOperations(@Nullable Boolean includeTableAlterOperations) {
            this.includeTableAlterOperations = Input.ofNullable(includeTableAlterOperations);
            return this;
        }

        public Builder setIncludeTransactionDetails(@Nullable Input<Boolean> includeTransactionDetails) {
            this.includeTransactionDetails = includeTransactionDetails;
            return this;
        }

        public Builder setIncludeTransactionDetails(@Nullable Boolean includeTransactionDetails) {
            this.includeTransactionDetails = Input.ofNullable(includeTransactionDetails);
            return this;
        }

        public Builder setMessageFormat(@Nullable Input<String> messageFormat) {
            this.messageFormat = messageFormat;
            return this;
        }

        public Builder setMessageFormat(@Nullable String messageFormat) {
            this.messageFormat = Input.ofNullable(messageFormat);
            return this;
        }

        public Builder setMessageMaxBytes(@Nullable Input<Integer> messageMaxBytes) {
            this.messageMaxBytes = messageMaxBytes;
            return this;
        }

        public Builder setMessageMaxBytes(@Nullable Integer messageMaxBytes) {
            this.messageMaxBytes = Input.ofNullable(messageMaxBytes);
            return this;
        }

        public Builder setNoHexPrefix(@Nullable Input<Boolean> noHexPrefix) {
            this.noHexPrefix = noHexPrefix;
            return this;
        }

        public Builder setNoHexPrefix(@Nullable Boolean noHexPrefix) {
            this.noHexPrefix = Input.ofNullable(noHexPrefix);
            return this;
        }

        public Builder setPartitionIncludeSchemaTable(@Nullable Input<Boolean> partitionIncludeSchemaTable) {
            this.partitionIncludeSchemaTable = partitionIncludeSchemaTable;
            return this;
        }

        public Builder setPartitionIncludeSchemaTable(@Nullable Boolean partitionIncludeSchemaTable) {
            this.partitionIncludeSchemaTable = Input.ofNullable(partitionIncludeSchemaTable);
            return this;
        }

        public Builder setSaslPassword(@Nullable Input<String> saslPassword) {
            this.saslPassword = saslPassword;
            return this;
        }

        public Builder setSaslPassword(@Nullable String saslPassword) {
            this.saslPassword = Input.ofNullable(saslPassword);
            return this;
        }

        public Builder setSaslUsername(@Nullable Input<String> saslUsername) {
            this.saslUsername = saslUsername;
            return this;
        }

        public Builder setSaslUsername(@Nullable String saslUsername) {
            this.saslUsername = Input.ofNullable(saslUsername);
            return this;
        }

        public Builder setSecurityProtocol(@Nullable Input<String> securityProtocol) {
            this.securityProtocol = securityProtocol;
            return this;
        }

        public Builder setSecurityProtocol(@Nullable String securityProtocol) {
            this.securityProtocol = Input.ofNullable(securityProtocol);
            return this;
        }

        public Builder setSslCaCertificateArn(@Nullable Input<String> sslCaCertificateArn) {
            this.sslCaCertificateArn = sslCaCertificateArn;
            return this;
        }

        public Builder setSslCaCertificateArn(@Nullable String sslCaCertificateArn) {
            this.sslCaCertificateArn = Input.ofNullable(sslCaCertificateArn);
            return this;
        }

        public Builder setSslClientCertificateArn(@Nullable Input<String> sslClientCertificateArn) {
            this.sslClientCertificateArn = sslClientCertificateArn;
            return this;
        }

        public Builder setSslClientCertificateArn(@Nullable String sslClientCertificateArn) {
            this.sslClientCertificateArn = Input.ofNullable(sslClientCertificateArn);
            return this;
        }

        public Builder setSslClientKeyArn(@Nullable Input<String> sslClientKeyArn) {
            this.sslClientKeyArn = sslClientKeyArn;
            return this;
        }

        public Builder setSslClientKeyArn(@Nullable String sslClientKeyArn) {
            this.sslClientKeyArn = Input.ofNullable(sslClientKeyArn);
            return this;
        }

        public Builder setSslClientKeyPassword(@Nullable Input<String> sslClientKeyPassword) {
            this.sslClientKeyPassword = sslClientKeyPassword;
            return this;
        }

        public Builder setSslClientKeyPassword(@Nullable String sslClientKeyPassword) {
            this.sslClientKeyPassword = Input.ofNullable(sslClientKeyPassword);
            return this;
        }

        public Builder setTopic(@Nullable Input<String> topic) {
            this.topic = topic;
            return this;
        }

        public Builder setTopic(@Nullable String topic) {
            this.topic = Input.ofNullable(topic);
            return this;
        }
        public EndpointKafkaSettingsGetArgs build() {
            return new EndpointKafkaSettingsGetArgs(broker, includeControlDetails, includeNullAndEmpty, includePartitionValue, includeTableAlterOperations, includeTransactionDetails, messageFormat, messageMaxBytes, noHexPrefix, partitionIncludeSchemaTable, saslPassword, saslUsername, securityProtocol, sslCaCertificateArn, sslClientCertificateArn, sslClientKeyArn, sslClientKeyPassword, topic);
        }
    }
}
