// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.acmpca;

import io.pulumi.aws.acmpca.inputs.CertificateAuthorityCertificateAuthorityConfigurationArgs;
import io.pulumi.aws.acmpca.inputs.CertificateAuthorityRevocationConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateAuthorityArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateAuthorityArgs Empty = new CertificateAuthorityArgs();

    /**
     * Nested argument containing algorithms and certificate subject information. Defined below.
     * 
     */
    @Import(name="certificateAuthorityConfiguration", required=true)
      private final Output<CertificateAuthorityCertificateAuthorityConfigurationArgs> certificateAuthorityConfiguration;

    public Output<CertificateAuthorityCertificateAuthorityConfigurationArgs> getCertificateAuthorityConfiguration() {
        return this.certificateAuthorityConfiguration;
    }

    /**
     * Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * The number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
     * 
     */
    @Import(name="permanentDeletionTimeInDays")
      private final @Nullable Output<Integer> permanentDeletionTimeInDays;

    public Output<Integer> getPermanentDeletionTimeInDays() {
        return this.permanentDeletionTimeInDays == null ? Output.empty() : this.permanentDeletionTimeInDays;
    }

    /**
     * Nested argument containing revocation configuration. Defined below.
     * 
     */
    @Import(name="revocationConfiguration")
      private final @Nullable Output<CertificateAuthorityRevocationConfigurationArgs> revocationConfiguration;

    public Output<CertificateAuthorityRevocationConfigurationArgs> getRevocationConfiguration() {
        return this.revocationConfiguration == null ? Output.empty() : this.revocationConfiguration;
    }

    /**
     * Specifies a key-value map of user-defined tags that are attached to the certificate authority. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public CertificateAuthorityArgs(
        Output<CertificateAuthorityCertificateAuthorityConfigurationArgs> certificateAuthorityConfiguration,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<Integer> permanentDeletionTimeInDays,
        @Nullable Output<CertificateAuthorityRevocationConfigurationArgs> revocationConfiguration,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> type) {
        this.certificateAuthorityConfiguration = Objects.requireNonNull(certificateAuthorityConfiguration, "expected parameter 'certificateAuthorityConfiguration' to be non-null");
        this.enabled = enabled;
        this.permanentDeletionTimeInDays = permanentDeletionTimeInDays;
        this.revocationConfiguration = revocationConfiguration;
        this.tags = tags;
        this.type = type;
    }

    private CertificateAuthorityArgs() {
        this.certificateAuthorityConfiguration = Output.empty();
        this.enabled = Output.empty();
        this.permanentDeletionTimeInDays = Output.empty();
        this.revocationConfiguration = Output.empty();
        this.tags = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateAuthorityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<CertificateAuthorityCertificateAuthorityConfigurationArgs> certificateAuthorityConfiguration;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<Integer> permanentDeletionTimeInDays;
        private @Nullable Output<CertificateAuthorityRevocationConfigurationArgs> revocationConfiguration;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateAuthorityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthorityConfiguration = defaults.certificateAuthorityConfiguration;
    	      this.enabled = defaults.enabled;
    	      this.permanentDeletionTimeInDays = defaults.permanentDeletionTimeInDays;
    	      this.revocationConfiguration = defaults.revocationConfiguration;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder certificateAuthorityConfiguration(Output<CertificateAuthorityCertificateAuthorityConfigurationArgs> certificateAuthorityConfiguration) {
            this.certificateAuthorityConfiguration = Objects.requireNonNull(certificateAuthorityConfiguration);
            return this;
        }

        public Builder certificateAuthorityConfiguration(CertificateAuthorityCertificateAuthorityConfigurationArgs certificateAuthorityConfiguration) {
            this.certificateAuthorityConfiguration = Output.of(Objects.requireNonNull(certificateAuthorityConfiguration));
            return this;
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }

        public Builder permanentDeletionTimeInDays(@Nullable Output<Integer> permanentDeletionTimeInDays) {
            this.permanentDeletionTimeInDays = permanentDeletionTimeInDays;
            return this;
        }

        public Builder permanentDeletionTimeInDays(@Nullable Integer permanentDeletionTimeInDays) {
            this.permanentDeletionTimeInDays = Output.ofNullable(permanentDeletionTimeInDays);
            return this;
        }

        public Builder revocationConfiguration(@Nullable Output<CertificateAuthorityRevocationConfigurationArgs> revocationConfiguration) {
            this.revocationConfiguration = revocationConfiguration;
            return this;
        }

        public Builder revocationConfiguration(@Nullable CertificateAuthorityRevocationConfigurationArgs revocationConfiguration) {
            this.revocationConfiguration = Output.ofNullable(revocationConfiguration);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }
        public CertificateAuthorityArgs build() {
            return new CertificateAuthorityArgs(certificateAuthorityConfiguration, enabled, permanentDeletionTimeInDays, revocationConfiguration, tags, type);
        }
    }
}
