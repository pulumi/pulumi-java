// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.xray;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GroupArgs extends io.pulumi.resources.ResourceArgs {

    public static final GroupArgs Empty = new GroupArgs();

    /**
     * The filter expression defining criteria by which to group traces. more info can be found in official [docs](https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html).
     * 
     */
    @Import(name="filterExpression", required=true)
      private final Output<String> filterExpression;

    public Output<String> getFilterExpression() {
        return this.filterExpression;
    }

    /**
     * The name of the group.
     * 
     */
    @Import(name="groupName", required=true)
      private final Output<String> groupName;

    public Output<String> getGroupName() {
        return this.groupName;
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public GroupArgs(
        Output<String> filterExpression,
        Output<String> groupName,
        @Nullable Output<Map<String,String>> tags) {
        this.filterExpression = Objects.requireNonNull(filterExpression, "expected parameter 'filterExpression' to be non-null");
        this.groupName = Objects.requireNonNull(groupName, "expected parameter 'groupName' to be non-null");
        this.tags = tags;
    }

    private GroupArgs() {
        this.filterExpression = Output.empty();
        this.groupName = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> filterExpression;
        private Output<String> groupName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filterExpression = defaults.filterExpression;
    	      this.groupName = defaults.groupName;
    	      this.tags = defaults.tags;
        }

        public Builder filterExpression(Output<String> filterExpression) {
            this.filterExpression = Objects.requireNonNull(filterExpression);
            return this;
        }
        public Builder filterExpression(String filterExpression) {
            this.filterExpression = Output.of(Objects.requireNonNull(filterExpression));
            return this;
        }
        public Builder groupName(Output<String> groupName) {
            this.groupName = Objects.requireNonNull(groupName);
            return this;
        }
        public Builder groupName(String groupName) {
            this.groupName = Output.of(Objects.requireNonNull(groupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }        public GroupArgs build() {
            return new GroupArgs(filterExpression, groupName, tags);
        }
    }
}
