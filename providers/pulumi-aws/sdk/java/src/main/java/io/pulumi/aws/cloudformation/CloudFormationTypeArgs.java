// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudformation;

import io.pulumi.aws.cloudformation.inputs.CloudFormationTypeLoggingConfigArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CloudFormationTypeArgs extends io.pulumi.resources.ResourceArgs {

    public static final CloudFormationTypeArgs Empty = new CloudFormationTypeArgs();

    /**
     * Amazon Resource Name (ARN) of the IAM Role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.
     * 
     */
    @InputImport(name="executionRoleArn")
      private final @Nullable Input<String> executionRoleArn;

    public Input<String> getExecutionRoleArn() {
        return this.executionRoleArn == null ? Input.empty() : this.executionRoleArn;
    }

    /**
     * Configuration block containing logging configuration.
     * 
     */
    @InputImport(name="loggingConfig")
      private final @Nullable Input<CloudFormationTypeLoggingConfigArgs> loggingConfig;

    public Input<CloudFormationTypeLoggingConfigArgs> getLoggingConfig() {
        return this.loggingConfig == null ? Input.empty() : this.loggingConfig;
    }

    /**
     * URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. Must begin with `s3://` or `https://`. For example, `s3://example-bucket/example-object`.
     * 
     */
    @InputImport(name="schemaHandlerPackage", required=true)
      private final Input<String> schemaHandlerPackage;

    public Input<String> getSchemaHandlerPackage() {
        return this.schemaHandlerPackage;
    }

    /**
     * CloudFormation Registry Type. For example, `RESOURCE` or `MODULE`.
     * 
     */
    @InputImport(name="type")
      private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * CloudFormation Type name. For example, `ExampleCompany::ExampleService::ExampleResource`.
     * 
     */
    @InputImport(name="typeName", required=true)
      private final Input<String> typeName;

    public Input<String> getTypeName() {
        return this.typeName;
    }

    public CloudFormationTypeArgs(
        @Nullable Input<String> executionRoleArn,
        @Nullable Input<CloudFormationTypeLoggingConfigArgs> loggingConfig,
        Input<String> schemaHandlerPackage,
        @Nullable Input<String> type,
        Input<String> typeName) {
        this.executionRoleArn = executionRoleArn;
        this.loggingConfig = loggingConfig;
        this.schemaHandlerPackage = Objects.requireNonNull(schemaHandlerPackage, "expected parameter 'schemaHandlerPackage' to be non-null");
        this.type = type;
        this.typeName = Objects.requireNonNull(typeName, "expected parameter 'typeName' to be non-null");
    }

    private CloudFormationTypeArgs() {
        this.executionRoleArn = Input.empty();
        this.loggingConfig = Input.empty();
        this.schemaHandlerPackage = Input.empty();
        this.type = Input.empty();
        this.typeName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloudFormationTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> executionRoleArn;
        private @Nullable Input<CloudFormationTypeLoggingConfigArgs> loggingConfig;
        private Input<String> schemaHandlerPackage;
        private @Nullable Input<String> type;
        private Input<String> typeName;

        public Builder() {
    	      // Empty
        }

        public Builder(CloudFormationTypeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.loggingConfig = defaults.loggingConfig;
    	      this.schemaHandlerPackage = defaults.schemaHandlerPackage;
    	      this.type = defaults.type;
    	      this.typeName = defaults.typeName;
        }

        public Builder setExecutionRoleArn(@Nullable Input<String> executionRoleArn) {
            this.executionRoleArn = executionRoleArn;
            return this;
        }

        public Builder setExecutionRoleArn(@Nullable String executionRoleArn) {
            this.executionRoleArn = Input.ofNullable(executionRoleArn);
            return this;
        }

        public Builder setLoggingConfig(@Nullable Input<CloudFormationTypeLoggingConfigArgs> loggingConfig) {
            this.loggingConfig = loggingConfig;
            return this;
        }

        public Builder setLoggingConfig(@Nullable CloudFormationTypeLoggingConfigArgs loggingConfig) {
            this.loggingConfig = Input.ofNullable(loggingConfig);
            return this;
        }

        public Builder setSchemaHandlerPackage(Input<String> schemaHandlerPackage) {
            this.schemaHandlerPackage = Objects.requireNonNull(schemaHandlerPackage);
            return this;
        }

        public Builder setSchemaHandlerPackage(String schemaHandlerPackage) {
            this.schemaHandlerPackage = Input.of(Objects.requireNonNull(schemaHandlerPackage));
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setTypeName(Input<String> typeName) {
            this.typeName = Objects.requireNonNull(typeName);
            return this;
        }

        public Builder setTypeName(String typeName) {
            this.typeName = Input.of(Objects.requireNonNull(typeName));
            return this;
        }
        public CloudFormationTypeArgs build() {
            return new CloudFormationTypeArgs(executionRoleArn, loggingConfig, schemaHandlerPackage, type, typeName);
        }
    }
}
