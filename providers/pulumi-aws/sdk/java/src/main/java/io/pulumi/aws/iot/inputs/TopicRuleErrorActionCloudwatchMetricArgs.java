// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.iot.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TopicRuleErrorActionCloudwatchMetricArgs extends io.pulumi.resources.ResourceArgs {

    public static final TopicRuleErrorActionCloudwatchMetricArgs Empty = new TopicRuleErrorActionCloudwatchMetricArgs();

    /**
     * The CloudWatch metric name.
     * 
     */
    @InputImport(name="metricName", required=true)
      private final Output<String> metricName;

    public Output<String> getMetricName() {
        return this.metricName;
    }

    /**
     * The CloudWatch metric namespace name.
     * 
     */
    @InputImport(name="metricNamespace", required=true)
      private final Output<String> metricNamespace;

    public Output<String> getMetricNamespace() {
        return this.metricNamespace;
    }

    /**
     * An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
     * 
     */
    @InputImport(name="metricTimestamp")
      private final @Nullable Output<String> metricTimestamp;

    public Output<String> getMetricTimestamp() {
        return this.metricTimestamp == null ? Output.empty() : this.metricTimestamp;
    }

    /**
     * The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
     * 
     */
    @InputImport(name="metricUnit", required=true)
      private final Output<String> metricUnit;

    public Output<String> getMetricUnit() {
        return this.metricUnit;
    }

    /**
     * The CloudWatch metric value.
     * 
     */
    @InputImport(name="metricValue", required=true)
      private final Output<String> metricValue;

    public Output<String> getMetricValue() {
        return this.metricValue;
    }

    /**
     * The IAM role ARN that allows access to the CloudWatch metric.
     * 
     */
    @InputImport(name="roleArn", required=true)
      private final Output<String> roleArn;

    public Output<String> getRoleArn() {
        return this.roleArn;
    }

    public TopicRuleErrorActionCloudwatchMetricArgs(
        Output<String> metricName,
        Output<String> metricNamespace,
        @Nullable Output<String> metricTimestamp,
        Output<String> metricUnit,
        Output<String> metricValue,
        Output<String> roleArn) {
        this.metricName = Objects.requireNonNull(metricName, "expected parameter 'metricName' to be non-null");
        this.metricNamespace = Objects.requireNonNull(metricNamespace, "expected parameter 'metricNamespace' to be non-null");
        this.metricTimestamp = metricTimestamp;
        this.metricUnit = Objects.requireNonNull(metricUnit, "expected parameter 'metricUnit' to be non-null");
        this.metricValue = Objects.requireNonNull(metricValue, "expected parameter 'metricValue' to be non-null");
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
    }

    private TopicRuleErrorActionCloudwatchMetricArgs() {
        this.metricName = Output.empty();
        this.metricNamespace = Output.empty();
        this.metricTimestamp = Output.empty();
        this.metricUnit = Output.empty();
        this.metricValue = Output.empty();
        this.roleArn = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TopicRuleErrorActionCloudwatchMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> metricName;
        private Output<String> metricNamespace;
        private @Nullable Output<String> metricTimestamp;
        private Output<String> metricUnit;
        private Output<String> metricValue;
        private Output<String> roleArn;

        public Builder() {
    	      // Empty
        }

        public Builder(TopicRuleErrorActionCloudwatchMetricArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricName = defaults.metricName;
    	      this.metricNamespace = defaults.metricNamespace;
    	      this.metricTimestamp = defaults.metricTimestamp;
    	      this.metricUnit = defaults.metricUnit;
    	      this.metricValue = defaults.metricValue;
    	      this.roleArn = defaults.roleArn;
        }

        public Builder metricName(Output<String> metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }

        public Builder metricName(String metricName) {
            this.metricName = Output.of(Objects.requireNonNull(metricName));
            return this;
        }

        public Builder metricNamespace(Output<String> metricNamespace) {
            this.metricNamespace = Objects.requireNonNull(metricNamespace);
            return this;
        }

        public Builder metricNamespace(String metricNamespace) {
            this.metricNamespace = Output.of(Objects.requireNonNull(metricNamespace));
            return this;
        }

        public Builder metricTimestamp(@Nullable Output<String> metricTimestamp) {
            this.metricTimestamp = metricTimestamp;
            return this;
        }

        public Builder metricTimestamp(@Nullable String metricTimestamp) {
            this.metricTimestamp = Output.ofNullable(metricTimestamp);
            return this;
        }

        public Builder metricUnit(Output<String> metricUnit) {
            this.metricUnit = Objects.requireNonNull(metricUnit);
            return this;
        }

        public Builder metricUnit(String metricUnit) {
            this.metricUnit = Output.of(Objects.requireNonNull(metricUnit));
            return this;
        }

        public Builder metricValue(Output<String> metricValue) {
            this.metricValue = Objects.requireNonNull(metricValue);
            return this;
        }

        public Builder metricValue(String metricValue) {
            this.metricValue = Output.of(Objects.requireNonNull(metricValue));
            return this;
        }

        public Builder roleArn(Output<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }

        public Builder roleArn(String roleArn) {
            this.roleArn = Output.of(Objects.requireNonNull(roleArn));
            return this;
        }
        public TopicRuleErrorActionCloudwatchMetricArgs build() {
            return new TopicRuleErrorActionCloudwatchMetricArgs(metricName, metricNamespace, metricTimestamp, metricUnit, metricValue, roleArn);
        }
    }
}
