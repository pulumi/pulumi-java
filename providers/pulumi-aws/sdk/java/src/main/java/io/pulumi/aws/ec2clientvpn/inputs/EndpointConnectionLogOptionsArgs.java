// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2clientvpn.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointConnectionLogOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointConnectionLogOptionsArgs Empty = new EndpointConnectionLogOptionsArgs();

    /**
     * The name of the CloudWatch Logs log group.
     * 
     */
    @Import(name="cloudwatchLogGroup")
      private final @Nullable Output<String> cloudwatchLogGroup;

    public Output<String> getCloudwatchLogGroup() {
        return this.cloudwatchLogGroup == null ? Output.empty() : this.cloudwatchLogGroup;
    }

    /**
     * The name of the CloudWatch Logs log stream to which the connection data is published.
     * 
     */
    @Import(name="cloudwatchLogStream")
      private final @Nullable Output<String> cloudwatchLogStream;

    public Output<String> getCloudwatchLogStream() {
        return this.cloudwatchLogStream == null ? Output.empty() : this.cloudwatchLogStream;
    }

    /**
     * Indicates whether connection logging is enabled.
     * 
     */
    @Import(name="enabled", required=true)
      private final Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled;
    }

    public EndpointConnectionLogOptionsArgs(
        @Nullable Output<String> cloudwatchLogGroup,
        @Nullable Output<String> cloudwatchLogStream,
        Output<Boolean> enabled) {
        this.cloudwatchLogGroup = cloudwatchLogGroup;
        this.cloudwatchLogStream = cloudwatchLogStream;
        this.enabled = Objects.requireNonNull(enabled, "expected parameter 'enabled' to be non-null");
    }

    private EndpointConnectionLogOptionsArgs() {
        this.cloudwatchLogGroup = Output.empty();
        this.cloudwatchLogStream = Output.empty();
        this.enabled = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointConnectionLogOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> cloudwatchLogGroup;
        private @Nullable Output<String> cloudwatchLogStream;
        private Output<Boolean> enabled;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointConnectionLogOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudwatchLogGroup = defaults.cloudwatchLogGroup;
    	      this.cloudwatchLogStream = defaults.cloudwatchLogStream;
    	      this.enabled = defaults.enabled;
        }

        public Builder cloudwatchLogGroup(@Nullable Output<String> cloudwatchLogGroup) {
            this.cloudwatchLogGroup = cloudwatchLogGroup;
            return this;
        }
        public Builder cloudwatchLogGroup(@Nullable String cloudwatchLogGroup) {
            this.cloudwatchLogGroup = Output.ofNullable(cloudwatchLogGroup);
            return this;
        }
        public Builder cloudwatchLogStream(@Nullable Output<String> cloudwatchLogStream) {
            this.cloudwatchLogStream = cloudwatchLogStream;
            return this;
        }
        public Builder cloudwatchLogStream(@Nullable String cloudwatchLogStream) {
            this.cloudwatchLogStream = Output.ofNullable(cloudwatchLogStream);
            return this;
        }
        public Builder enabled(Output<Boolean> enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Output.of(Objects.requireNonNull(enabled));
            return this;
        }        public EndpointConnectionLogOptionsArgs build() {
            return new EndpointConnectionLogOptionsArgs(cloudwatchLogGroup, cloudwatchLogStream, enabled);
        }
    }
}
