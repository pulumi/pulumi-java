// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appsync;

import io.pulumi.aws.appsync.inputs.GraphQLApiAdditionalAuthenticationProviderArgs;
import io.pulumi.aws.appsync.inputs.GraphQLApiLambdaAuthorizerConfigArgs;
import io.pulumi.aws.appsync.inputs.GraphQLApiLogConfigArgs;
import io.pulumi.aws.appsync.inputs.GraphQLApiOpenidConnectConfigArgs;
import io.pulumi.aws.appsync.inputs.GraphQLApiUserPoolConfigArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GraphQLApiArgs extends io.pulumi.resources.ResourceArgs {

    public static final GraphQLApiArgs Empty = new GraphQLApiArgs();

    /**
     * One or more additional authentication providers for the GraphqlApi. Defined below.
     * 
     */
    @Import(name="additionalAuthenticationProviders")
      private final @Nullable Output<List<GraphQLApiAdditionalAuthenticationProviderArgs>> additionalAuthenticationProviders;

    public Output<List<GraphQLApiAdditionalAuthenticationProviderArgs>> getAdditionalAuthenticationProviders() {
        return this.additionalAuthenticationProviders == null ? Codegen.empty() : this.additionalAuthenticationProviders;
    }

    /**
     * The authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
     * 
     */
    @Import(name="authenticationType", required=true)
      private final Output<String> authenticationType;

    public Output<String> getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Nested argument containing Lambda authorizer configuration. Defined below.
     * 
     */
    @Import(name="lambdaAuthorizerConfig")
      private final @Nullable Output<GraphQLApiLambdaAuthorizerConfigArgs> lambdaAuthorizerConfig;

    public Output<GraphQLApiLambdaAuthorizerConfigArgs> getLambdaAuthorizerConfig() {
        return this.lambdaAuthorizerConfig == null ? Codegen.empty() : this.lambdaAuthorizerConfig;
    }

    /**
     * Nested argument containing logging configuration. Defined below.
     * 
     */
    @Import(name="logConfig")
      private final @Nullable Output<GraphQLApiLogConfigArgs> logConfig;

    public Output<GraphQLApiLogConfigArgs> getLogConfig() {
        return this.logConfig == null ? Codegen.empty() : this.logConfig;
    }

    /**
     * A user-supplied name for the GraphqlApi.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Nested argument containing OpenID Connect configuration. Defined below.
     * 
     */
    @Import(name="openidConnectConfig")
      private final @Nullable Output<GraphQLApiOpenidConnectConfigArgs> openidConnectConfig;

    public Output<GraphQLApiOpenidConnectConfigArgs> getOpenidConnectConfig() {
        return this.openidConnectConfig == null ? Codegen.empty() : this.openidConnectConfig;
    }

    /**
     * The schema definition, in GraphQL schema language format. This provider cannot perform drift detection of this configuration.
     * 
     */
    @Import(name="schema")
      private final @Nullable Output<String> schema;

    public Output<String> getSchema() {
        return this.schema == null ? Codegen.empty() : this.schema;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The Amazon Cognito User Pool configuration. Defined below.
     * 
     */
    @Import(name="userPoolConfig")
      private final @Nullable Output<GraphQLApiUserPoolConfigArgs> userPoolConfig;

    public Output<GraphQLApiUserPoolConfigArgs> getUserPoolConfig() {
        return this.userPoolConfig == null ? Codegen.empty() : this.userPoolConfig;
    }

    /**
     * Whether tracing with X-ray is enabled. Defaults to false.
     * 
     */
    @Import(name="xrayEnabled")
      private final @Nullable Output<Boolean> xrayEnabled;

    public Output<Boolean> getXrayEnabled() {
        return this.xrayEnabled == null ? Codegen.empty() : this.xrayEnabled;
    }

    public GraphQLApiArgs(
        @Nullable Output<List<GraphQLApiAdditionalAuthenticationProviderArgs>> additionalAuthenticationProviders,
        Output<String> authenticationType,
        @Nullable Output<GraphQLApiLambdaAuthorizerConfigArgs> lambdaAuthorizerConfig,
        @Nullable Output<GraphQLApiLogConfigArgs> logConfig,
        @Nullable Output<String> name,
        @Nullable Output<GraphQLApiOpenidConnectConfigArgs> openidConnectConfig,
        @Nullable Output<String> schema,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<GraphQLApiUserPoolConfigArgs> userPoolConfig,
        @Nullable Output<Boolean> xrayEnabled) {
        this.additionalAuthenticationProviders = additionalAuthenticationProviders;
        this.authenticationType = Objects.requireNonNull(authenticationType, "expected parameter 'authenticationType' to be non-null");
        this.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
        this.logConfig = logConfig;
        this.name = name;
        this.openidConnectConfig = openidConnectConfig;
        this.schema = schema;
        this.tags = tags;
        this.userPoolConfig = userPoolConfig;
        this.xrayEnabled = xrayEnabled;
    }

    private GraphQLApiArgs() {
        this.additionalAuthenticationProviders = Codegen.empty();
        this.authenticationType = Codegen.empty();
        this.lambdaAuthorizerConfig = Codegen.empty();
        this.logConfig = Codegen.empty();
        this.name = Codegen.empty();
        this.openidConnectConfig = Codegen.empty();
        this.schema = Codegen.empty();
        this.tags = Codegen.empty();
        this.userPoolConfig = Codegen.empty();
        this.xrayEnabled = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GraphQLApiArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<GraphQLApiAdditionalAuthenticationProviderArgs>> additionalAuthenticationProviders;
        private Output<String> authenticationType;
        private @Nullable Output<GraphQLApiLambdaAuthorizerConfigArgs> lambdaAuthorizerConfig;
        private @Nullable Output<GraphQLApiLogConfigArgs> logConfig;
        private @Nullable Output<String> name;
        private @Nullable Output<GraphQLApiOpenidConnectConfigArgs> openidConnectConfig;
        private @Nullable Output<String> schema;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<GraphQLApiUserPoolConfigArgs> userPoolConfig;
        private @Nullable Output<Boolean> xrayEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(GraphQLApiArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalAuthenticationProviders = defaults.additionalAuthenticationProviders;
    	      this.authenticationType = defaults.authenticationType;
    	      this.lambdaAuthorizerConfig = defaults.lambdaAuthorizerConfig;
    	      this.logConfig = defaults.logConfig;
    	      this.name = defaults.name;
    	      this.openidConnectConfig = defaults.openidConnectConfig;
    	      this.schema = defaults.schema;
    	      this.tags = defaults.tags;
    	      this.userPoolConfig = defaults.userPoolConfig;
    	      this.xrayEnabled = defaults.xrayEnabled;
        }

        public Builder additionalAuthenticationProviders(@Nullable Output<List<GraphQLApiAdditionalAuthenticationProviderArgs>> additionalAuthenticationProviders) {
            this.additionalAuthenticationProviders = additionalAuthenticationProviders;
            return this;
        }
        public Builder additionalAuthenticationProviders(@Nullable List<GraphQLApiAdditionalAuthenticationProviderArgs> additionalAuthenticationProviders) {
            this.additionalAuthenticationProviders = Codegen.ofNullable(additionalAuthenticationProviders);
            return this;
        }
        public Builder additionalAuthenticationProviders(GraphQLApiAdditionalAuthenticationProviderArgs... additionalAuthenticationProviders) {
            return additionalAuthenticationProviders(List.of(additionalAuthenticationProviders));
        }
        public Builder authenticationType(Output<String> authenticationType) {
            this.authenticationType = Objects.requireNonNull(authenticationType);
            return this;
        }
        public Builder authenticationType(String authenticationType) {
            this.authenticationType = Output.of(Objects.requireNonNull(authenticationType));
            return this;
        }
        public Builder lambdaAuthorizerConfig(@Nullable Output<GraphQLApiLambdaAuthorizerConfigArgs> lambdaAuthorizerConfig) {
            this.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
            return this;
        }
        public Builder lambdaAuthorizerConfig(@Nullable GraphQLApiLambdaAuthorizerConfigArgs lambdaAuthorizerConfig) {
            this.lambdaAuthorizerConfig = Codegen.ofNullable(lambdaAuthorizerConfig);
            return this;
        }
        public Builder logConfig(@Nullable Output<GraphQLApiLogConfigArgs> logConfig) {
            this.logConfig = logConfig;
            return this;
        }
        public Builder logConfig(@Nullable GraphQLApiLogConfigArgs logConfig) {
            this.logConfig = Codegen.ofNullable(logConfig);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder openidConnectConfig(@Nullable Output<GraphQLApiOpenidConnectConfigArgs> openidConnectConfig) {
            this.openidConnectConfig = openidConnectConfig;
            return this;
        }
        public Builder openidConnectConfig(@Nullable GraphQLApiOpenidConnectConfigArgs openidConnectConfig) {
            this.openidConnectConfig = Codegen.ofNullable(openidConnectConfig);
            return this;
        }
        public Builder schema(@Nullable Output<String> schema) {
            this.schema = schema;
            return this;
        }
        public Builder schema(@Nullable String schema) {
            this.schema = Codegen.ofNullable(schema);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder userPoolConfig(@Nullable Output<GraphQLApiUserPoolConfigArgs> userPoolConfig) {
            this.userPoolConfig = userPoolConfig;
            return this;
        }
        public Builder userPoolConfig(@Nullable GraphQLApiUserPoolConfigArgs userPoolConfig) {
            this.userPoolConfig = Codegen.ofNullable(userPoolConfig);
            return this;
        }
        public Builder xrayEnabled(@Nullable Output<Boolean> xrayEnabled) {
            this.xrayEnabled = xrayEnabled;
            return this;
        }
        public Builder xrayEnabled(@Nullable Boolean xrayEnabled) {
            this.xrayEnabled = Codegen.ofNullable(xrayEnabled);
            return this;
        }        public GraphQLApiArgs build() {
            return new GraphQLApiArgs(additionalAuthenticationProviders, authenticationType, lambdaAuthorizerConfig, logConfig, name, openidConnectConfig, schema, tags, userPoolConfig, xrayEnabled);
        }
    }
}
