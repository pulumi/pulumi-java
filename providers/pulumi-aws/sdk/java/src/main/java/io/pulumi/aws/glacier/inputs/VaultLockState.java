// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glacier.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VaultLockState extends io.pulumi.resources.ResourceArgs {

    public static final VaultLockState Empty = new VaultLockState();

    /**
     * Boolean whether to permanently apply this Glacier Lock Policy. Once completed, this cannot be undone. If set to `false`, the Glacier Lock Policy remains in a testing mode for 24 hours. After that time, the Glacier Lock Policy is automatically removed by Glacier and the this provider resource will show as needing recreation. Changing this from `false` to `true` will show as resource recreation, which is expected. Changing this from `true` to `false` is not possible unless the Glacier Vault is recreated at the same time.
     * 
     */
    @Import(name="completeLock")
      private final @Nullable Output<Boolean> completeLock;

    public Output<Boolean> getCompleteLock() {
        return this.completeLock == null ? Codegen.empty() : this.completeLock;
    }

    /**
     * Allow this provider to ignore the error returned when attempting to delete the Glacier Lock Policy. This can be used to delete or recreate the Glacier Vault via this provider, for example, if the Glacier Vault Lock policy permits that action. This should only be used in conjunction with `complete_lock` being set to `true`.
     * 
     */
    @Import(name="ignoreDeletionError")
      private final @Nullable Output<Boolean> ignoreDeletionError;

    public Output<Boolean> getIgnoreDeletionError() {
        return this.ignoreDeletionError == null ? Codegen.empty() : this.ignoreDeletionError;
    }

    /**
     * JSON string containing the IAM policy to apply as the Glacier Vault Lock policy.
     * 
     */
    @Import(name="policy")
      private final @Nullable Output<String> policy;

    public Output<String> getPolicy() {
        return this.policy == null ? Codegen.empty() : this.policy;
    }

    /**
     * The name of the Glacier Vault.
     * 
     */
    @Import(name="vaultName")
      private final @Nullable Output<String> vaultName;

    public Output<String> getVaultName() {
        return this.vaultName == null ? Codegen.empty() : this.vaultName;
    }

    public VaultLockState(
        @Nullable Output<Boolean> completeLock,
        @Nullable Output<Boolean> ignoreDeletionError,
        @Nullable Output<String> policy,
        @Nullable Output<String> vaultName) {
        this.completeLock = completeLock;
        this.ignoreDeletionError = ignoreDeletionError;
        this.policy = policy;
        this.vaultName = vaultName;
    }

    private VaultLockState() {
        this.completeLock = Codegen.empty();
        this.ignoreDeletionError = Codegen.empty();
        this.policy = Codegen.empty();
        this.vaultName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VaultLockState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> completeLock;
        private @Nullable Output<Boolean> ignoreDeletionError;
        private @Nullable Output<String> policy;
        private @Nullable Output<String> vaultName;

        public Builder() {
    	      // Empty
        }

        public Builder(VaultLockState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completeLock = defaults.completeLock;
    	      this.ignoreDeletionError = defaults.ignoreDeletionError;
    	      this.policy = defaults.policy;
    	      this.vaultName = defaults.vaultName;
        }

        public Builder completeLock(@Nullable Output<Boolean> completeLock) {
            this.completeLock = completeLock;
            return this;
        }
        public Builder completeLock(@Nullable Boolean completeLock) {
            this.completeLock = Codegen.ofNullable(completeLock);
            return this;
        }
        public Builder ignoreDeletionError(@Nullable Output<Boolean> ignoreDeletionError) {
            this.ignoreDeletionError = ignoreDeletionError;
            return this;
        }
        public Builder ignoreDeletionError(@Nullable Boolean ignoreDeletionError) {
            this.ignoreDeletionError = Codegen.ofNullable(ignoreDeletionError);
            return this;
        }
        public Builder policy(@Nullable Output<String> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable String policy) {
            this.policy = Codegen.ofNullable(policy);
            return this;
        }
        public Builder vaultName(@Nullable Output<String> vaultName) {
            this.vaultName = vaultName;
            return this;
        }
        public Builder vaultName(@Nullable String vaultName) {
            this.vaultName = Codegen.ofNullable(vaultName);
            return this;
        }        public VaultLockState build() {
            return new VaultLockState(completeLock, ignoreDeletionError, policy, vaultName);
        }
    }
}
