// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2clientvpn.inputs;

import io.pulumi.aws.ec2clientvpn.inputs.EndpointAuthenticationOptionGetArgs;
import io.pulumi.aws.ec2clientvpn.inputs.EndpointConnectionLogOptionsGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointState extends io.pulumi.resources.ResourceArgs {

    public static final EndpointState Empty = new EndpointState();

    /**
     * The ARN of the Client VPN endpoint.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * Information about the authentication method to be used to authenticate clients.
     * 
     */
    @Import(name="authenticationOptions")
      private final @Nullable Output<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions;

    public Output<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions() {
        return this.authenticationOptions == null ? Codegen.empty() : this.authenticationOptions;
    }

    /**
     * The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
     * 
     */
    @Import(name="clientCidrBlock")
      private final @Nullable Output<String> clientCidrBlock;

    public Output<String> clientCidrBlock() {
        return this.clientCidrBlock == null ? Codegen.empty() : this.clientCidrBlock;
    }

    /**
     * Information about the client connection logging options.
     * 
     */
    @Import(name="connectionLogOptions")
      private final @Nullable Output<EndpointConnectionLogOptionsGetArgs> connectionLogOptions;

    public Output<EndpointConnectionLogOptionsGetArgs> connectionLogOptions() {
        return this.connectionLogOptions == null ? Codegen.empty() : this.connectionLogOptions;
    }

    /**
     * A brief description of the Client VPN endpoint.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The DNS name to be used by clients when establishing their VPN session.
     * 
     */
    @Import(name="dnsName")
      private final @Nullable Output<String> dnsName;

    public Output<String> dnsName() {
        return this.dnsName == null ? Codegen.empty() : this.dnsName;
    }

    /**
     * Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
     * 
     */
    @Import(name="dnsServers")
      private final @Nullable Output<List<String>> dnsServers;

    public Output<List<String>> dnsServers() {
        return this.dnsServers == null ? Codegen.empty() : this.dnsServers;
    }

    /**
     * Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
     * 
     */
    @Import(name="selfServicePortal")
      private final @Nullable Output<String> selfServicePortal;

    public Output<String> selfServicePortal() {
        return this.selfServicePortal == null ? Codegen.empty() : this.selfServicePortal;
    }

    /**
     * The ARN of the ACM server certificate.
     * 
     */
    @Import(name="serverCertificateArn")
      private final @Nullable Output<String> serverCertificateArn;

    public Output<String> serverCertificateArn() {
        return this.serverCertificateArn == null ? Codegen.empty() : this.serverCertificateArn;
    }

    /**
     * Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
     * 
     */
    @Import(name="splitTunnel")
      private final @Nullable Output<Boolean> splitTunnel;

    public Output<Boolean> splitTunnel() {
        return this.splitTunnel == null ? Codegen.empty() : this.splitTunnel;
    }

    /**
     * The current state of the Client VPN endpoint.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * A mapping of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * The transport protocol to be used by the VPN session. Default value is `udp`.
     * 
     */
    @Import(name="transportProtocol")
      private final @Nullable Output<String> transportProtocol;

    public Output<String> transportProtocol() {
        return this.transportProtocol == null ? Codegen.empty() : this.transportProtocol;
    }

    public EndpointState(
        @Nullable Output<String> arn,
        @Nullable Output<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions,
        @Nullable Output<String> clientCidrBlock,
        @Nullable Output<EndpointConnectionLogOptionsGetArgs> connectionLogOptions,
        @Nullable Output<String> description,
        @Nullable Output<String> dnsName,
        @Nullable Output<List<String>> dnsServers,
        @Nullable Output<String> selfServicePortal,
        @Nullable Output<String> serverCertificateArn,
        @Nullable Output<Boolean> splitTunnel,
        @Nullable Output<String> status,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> transportProtocol) {
        this.arn = arn;
        this.authenticationOptions = authenticationOptions;
        this.clientCidrBlock = clientCidrBlock;
        this.connectionLogOptions = connectionLogOptions;
        this.description = description;
        this.dnsName = dnsName;
        this.dnsServers = dnsServers;
        this.selfServicePortal = selfServicePortal;
        this.serverCertificateArn = serverCertificateArn;
        this.splitTunnel = splitTunnel;
        this.status = status;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.transportProtocol = transportProtocol;
    }

    private EndpointState() {
        this.arn = Codegen.empty();
        this.authenticationOptions = Codegen.empty();
        this.clientCidrBlock = Codegen.empty();
        this.connectionLogOptions = Codegen.empty();
        this.description = Codegen.empty();
        this.dnsName = Codegen.empty();
        this.dnsServers = Codegen.empty();
        this.selfServicePortal = Codegen.empty();
        this.serverCertificateArn = Codegen.empty();
        this.splitTunnel = Codegen.empty();
        this.status = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.transportProtocol = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions;
        private @Nullable Output<String> clientCidrBlock;
        private @Nullable Output<EndpointConnectionLogOptionsGetArgs> connectionLogOptions;
        private @Nullable Output<String> description;
        private @Nullable Output<String> dnsName;
        private @Nullable Output<List<String>> dnsServers;
        private @Nullable Output<String> selfServicePortal;
        private @Nullable Output<String> serverCertificateArn;
        private @Nullable Output<Boolean> splitTunnel;
        private @Nullable Output<String> status;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> transportProtocol;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authenticationOptions = defaults.authenticationOptions;
    	      this.clientCidrBlock = defaults.clientCidrBlock;
    	      this.connectionLogOptions = defaults.connectionLogOptions;
    	      this.description = defaults.description;
    	      this.dnsName = defaults.dnsName;
    	      this.dnsServers = defaults.dnsServers;
    	      this.selfServicePortal = defaults.selfServicePortal;
    	      this.serverCertificateArn = defaults.serverCertificateArn;
    	      this.splitTunnel = defaults.splitTunnel;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.transportProtocol = defaults.transportProtocol;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder authenticationOptions(@Nullable Output<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions) {
            this.authenticationOptions = authenticationOptions;
            return this;
        }
        public Builder authenticationOptions(@Nullable List<EndpointAuthenticationOptionGetArgs> authenticationOptions) {
            this.authenticationOptions = Codegen.ofNullable(authenticationOptions);
            return this;
        }
        public Builder authenticationOptions(EndpointAuthenticationOptionGetArgs... authenticationOptions) {
            return authenticationOptions(List.of(authenticationOptions));
        }
        public Builder clientCidrBlock(@Nullable Output<String> clientCidrBlock) {
            this.clientCidrBlock = clientCidrBlock;
            return this;
        }
        public Builder clientCidrBlock(@Nullable String clientCidrBlock) {
            this.clientCidrBlock = Codegen.ofNullable(clientCidrBlock);
            return this;
        }
        public Builder connectionLogOptions(@Nullable Output<EndpointConnectionLogOptionsGetArgs> connectionLogOptions) {
            this.connectionLogOptions = connectionLogOptions;
            return this;
        }
        public Builder connectionLogOptions(@Nullable EndpointConnectionLogOptionsGetArgs connectionLogOptions) {
            this.connectionLogOptions = Codegen.ofNullable(connectionLogOptions);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder dnsName(@Nullable Output<String> dnsName) {
            this.dnsName = dnsName;
            return this;
        }
        public Builder dnsName(@Nullable String dnsName) {
            this.dnsName = Codegen.ofNullable(dnsName);
            return this;
        }
        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = Codegen.ofNullable(dnsServers);
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        public Builder selfServicePortal(@Nullable Output<String> selfServicePortal) {
            this.selfServicePortal = selfServicePortal;
            return this;
        }
        public Builder selfServicePortal(@Nullable String selfServicePortal) {
            this.selfServicePortal = Codegen.ofNullable(selfServicePortal);
            return this;
        }
        public Builder serverCertificateArn(@Nullable Output<String> serverCertificateArn) {
            this.serverCertificateArn = serverCertificateArn;
            return this;
        }
        public Builder serverCertificateArn(@Nullable String serverCertificateArn) {
            this.serverCertificateArn = Codegen.ofNullable(serverCertificateArn);
            return this;
        }
        public Builder splitTunnel(@Nullable Output<Boolean> splitTunnel) {
            this.splitTunnel = splitTunnel;
            return this;
        }
        public Builder splitTunnel(@Nullable Boolean splitTunnel) {
            this.splitTunnel = Codegen.ofNullable(splitTunnel);
            return this;
        }
        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder transportProtocol(@Nullable Output<String> transportProtocol) {
            this.transportProtocol = transportProtocol;
            return this;
        }
        public Builder transportProtocol(@Nullable String transportProtocol) {
            this.transportProtocol = Codegen.ofNullable(transportProtocol);
            return this;
        }        public EndpointState build() {
            return new EndpointState(arn, authenticationOptions, clientCidrBlock, connectionLogOptions, description, dnsName, dnsServers, selfServicePortal, serverCertificateArn, splitTunnel, status, tags, tagsAll, transportProtocol);
        }
    }
}
