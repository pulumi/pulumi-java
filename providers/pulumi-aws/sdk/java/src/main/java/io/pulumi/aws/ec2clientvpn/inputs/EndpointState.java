// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2clientvpn.inputs;

import io.pulumi.aws.ec2clientvpn.inputs.EndpointAuthenticationOptionGetArgs;
import io.pulumi.aws.ec2clientvpn.inputs.EndpointConnectionLogOptionsGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointState extends io.pulumi.resources.ResourceArgs {

    public static final EndpointState Empty = new EndpointState();

    /**
     * The ARN of the Client VPN endpoint.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Information about the authentication method to be used to authenticate clients.
     * 
     */
    @InputImport(name="authenticationOptions")
      private final @Nullable Input<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions;

    public Input<List<EndpointAuthenticationOptionGetArgs>> getAuthenticationOptions() {
        return this.authenticationOptions == null ? Input.empty() : this.authenticationOptions;
    }

    /**
     * The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
     * 
     */
    @InputImport(name="clientCidrBlock")
      private final @Nullable Input<String> clientCidrBlock;

    public Input<String> getClientCidrBlock() {
        return this.clientCidrBlock == null ? Input.empty() : this.clientCidrBlock;
    }

    /**
     * Information about the client connection logging options.
     * 
     */
    @InputImport(name="connectionLogOptions")
      private final @Nullable Input<EndpointConnectionLogOptionsGetArgs> connectionLogOptions;

    public Input<EndpointConnectionLogOptionsGetArgs> getConnectionLogOptions() {
        return this.connectionLogOptions == null ? Input.empty() : this.connectionLogOptions;
    }

    /**
     * A brief description of the Client VPN endpoint.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The DNS name to be used by clients when establishing their VPN session.
     * 
     */
    @InputImport(name="dnsName")
      private final @Nullable Input<String> dnsName;

    public Input<String> getDnsName() {
        return this.dnsName == null ? Input.empty() : this.dnsName;
    }

    /**
     * Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
     * 
     */
    @InputImport(name="dnsServers")
      private final @Nullable Input<List<String>> dnsServers;

    public Input<List<String>> getDnsServers() {
        return this.dnsServers == null ? Input.empty() : this.dnsServers;
    }

    /**
     * Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
     * 
     */
    @InputImport(name="selfServicePortal")
      private final @Nullable Input<String> selfServicePortal;

    public Input<String> getSelfServicePortal() {
        return this.selfServicePortal == null ? Input.empty() : this.selfServicePortal;
    }

    /**
     * The ARN of the ACM server certificate.
     * 
     */
    @InputImport(name="serverCertificateArn")
      private final @Nullable Input<String> serverCertificateArn;

    public Input<String> getServerCertificateArn() {
        return this.serverCertificateArn == null ? Input.empty() : this.serverCertificateArn;
    }

    /**
     * Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
     * 
     */
    @InputImport(name="splitTunnel")
      private final @Nullable Input<Boolean> splitTunnel;

    public Input<Boolean> getSplitTunnel() {
        return this.splitTunnel == null ? Input.empty() : this.splitTunnel;
    }

    /**
     * The current state of the Client VPN endpoint.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * A mapping of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The transport protocol to be used by the VPN session. Default value is `udp`.
     * 
     */
    @InputImport(name="transportProtocol")
      private final @Nullable Input<String> transportProtocol;

    public Input<String> getTransportProtocol() {
        return this.transportProtocol == null ? Input.empty() : this.transportProtocol;
    }

    public EndpointState(
        @Nullable Input<String> arn,
        @Nullable Input<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions,
        @Nullable Input<String> clientCidrBlock,
        @Nullable Input<EndpointConnectionLogOptionsGetArgs> connectionLogOptions,
        @Nullable Input<String> description,
        @Nullable Input<String> dnsName,
        @Nullable Input<List<String>> dnsServers,
        @Nullable Input<String> selfServicePortal,
        @Nullable Input<String> serverCertificateArn,
        @Nullable Input<Boolean> splitTunnel,
        @Nullable Input<String> status,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> transportProtocol) {
        this.arn = arn;
        this.authenticationOptions = authenticationOptions;
        this.clientCidrBlock = clientCidrBlock;
        this.connectionLogOptions = connectionLogOptions;
        this.description = description;
        this.dnsName = dnsName;
        this.dnsServers = dnsServers;
        this.selfServicePortal = selfServicePortal;
        this.serverCertificateArn = serverCertificateArn;
        this.splitTunnel = splitTunnel;
        this.status = status;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.transportProtocol = transportProtocol;
    }

    private EndpointState() {
        this.arn = Input.empty();
        this.authenticationOptions = Input.empty();
        this.clientCidrBlock = Input.empty();
        this.connectionLogOptions = Input.empty();
        this.description = Input.empty();
        this.dnsName = Input.empty();
        this.dnsServers = Input.empty();
        this.selfServicePortal = Input.empty();
        this.serverCertificateArn = Input.empty();
        this.splitTunnel = Input.empty();
        this.status = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.transportProtocol = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions;
        private @Nullable Input<String> clientCidrBlock;
        private @Nullable Input<EndpointConnectionLogOptionsGetArgs> connectionLogOptions;
        private @Nullable Input<String> description;
        private @Nullable Input<String> dnsName;
        private @Nullable Input<List<String>> dnsServers;
        private @Nullable Input<String> selfServicePortal;
        private @Nullable Input<String> serverCertificateArn;
        private @Nullable Input<Boolean> splitTunnel;
        private @Nullable Input<String> status;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> transportProtocol;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authenticationOptions = defaults.authenticationOptions;
    	      this.clientCidrBlock = defaults.clientCidrBlock;
    	      this.connectionLogOptions = defaults.connectionLogOptions;
    	      this.description = defaults.description;
    	      this.dnsName = defaults.dnsName;
    	      this.dnsServers = defaults.dnsServers;
    	      this.selfServicePortal = defaults.selfServicePortal;
    	      this.serverCertificateArn = defaults.serverCertificateArn;
    	      this.splitTunnel = defaults.splitTunnel;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.transportProtocol = defaults.transportProtocol;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setAuthenticationOptions(@Nullable Input<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions) {
            this.authenticationOptions = authenticationOptions;
            return this;
        }

        public Builder setAuthenticationOptions(@Nullable List<EndpointAuthenticationOptionGetArgs> authenticationOptions) {
            this.authenticationOptions = Input.ofNullable(authenticationOptions);
            return this;
        }

        public Builder setClientCidrBlock(@Nullable Input<String> clientCidrBlock) {
            this.clientCidrBlock = clientCidrBlock;
            return this;
        }

        public Builder setClientCidrBlock(@Nullable String clientCidrBlock) {
            this.clientCidrBlock = Input.ofNullable(clientCidrBlock);
            return this;
        }

        public Builder setConnectionLogOptions(@Nullable Input<EndpointConnectionLogOptionsGetArgs> connectionLogOptions) {
            this.connectionLogOptions = connectionLogOptions;
            return this;
        }

        public Builder setConnectionLogOptions(@Nullable EndpointConnectionLogOptionsGetArgs connectionLogOptions) {
            this.connectionLogOptions = Input.ofNullable(connectionLogOptions);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDnsName(@Nullable Input<String> dnsName) {
            this.dnsName = dnsName;
            return this;
        }

        public Builder setDnsName(@Nullable String dnsName) {
            this.dnsName = Input.ofNullable(dnsName);
            return this;
        }

        public Builder setDnsServers(@Nullable Input<List<String>> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }

        public Builder setDnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = Input.ofNullable(dnsServers);
            return this;
        }

        public Builder setSelfServicePortal(@Nullable Input<String> selfServicePortal) {
            this.selfServicePortal = selfServicePortal;
            return this;
        }

        public Builder setSelfServicePortal(@Nullable String selfServicePortal) {
            this.selfServicePortal = Input.ofNullable(selfServicePortal);
            return this;
        }

        public Builder setServerCertificateArn(@Nullable Input<String> serverCertificateArn) {
            this.serverCertificateArn = serverCertificateArn;
            return this;
        }

        public Builder setServerCertificateArn(@Nullable String serverCertificateArn) {
            this.serverCertificateArn = Input.ofNullable(serverCertificateArn);
            return this;
        }

        public Builder setSplitTunnel(@Nullable Input<Boolean> splitTunnel) {
            this.splitTunnel = splitTunnel;
            return this;
        }

        public Builder setSplitTunnel(@Nullable Boolean splitTunnel) {
            this.splitTunnel = Input.ofNullable(splitTunnel);
            return this;
        }

        public Builder setStatus(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setTransportProtocol(@Nullable Input<String> transportProtocol) {
            this.transportProtocol = transportProtocol;
            return this;
        }

        public Builder setTransportProtocol(@Nullable String transportProtocol) {
            this.transportProtocol = Input.ofNullable(transportProtocol);
            return this;
        }
        public EndpointState build() {
            return new EndpointState(arn, authenticationOptions, clientCidrBlock, connectionLogOptions, description, dnsName, dnsServers, selfServicePortal, serverCertificateArn, splitTunnel, status, tags, tagsAll, transportProtocol);
        }
    }
}
