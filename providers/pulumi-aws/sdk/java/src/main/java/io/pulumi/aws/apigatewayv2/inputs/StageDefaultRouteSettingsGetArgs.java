// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigatewayv2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StageDefaultRouteSettingsGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final StageDefaultRouteSettingsGetArgs Empty = new StageDefaultRouteSettingsGetArgs();

    /**
     * Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
     * Defaults to `false`. Supported only for WebSocket APIs.
     * 
     */
    @InputImport(name="dataTraceEnabled")
    private final @Nullable Input<Boolean> dataTraceEnabled;

    public Input<Boolean> getDataTraceEnabled() {
        return this.dataTraceEnabled == null ? Input.empty() : this.dataTraceEnabled;
    }

    /**
     * Whether detailed metrics are enabled for the default route. Defaults to `false`.
     * 
     */
    @InputImport(name="detailedMetricsEnabled")
    private final @Nullable Input<Boolean> detailedMetricsEnabled;

    public Input<Boolean> getDetailedMetricsEnabled() {
        return this.detailedMetricsEnabled == null ? Input.empty() : this.detailedMetricsEnabled;
    }

    /**
     * The logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
     * Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
     * 
     */
    @InputImport(name="loggingLevel")
    private final @Nullable Input<String> loggingLevel;

    public Input<String> getLoggingLevel() {
        return this.loggingLevel == null ? Input.empty() : this.loggingLevel;
    }

    /**
     * The throttling burst limit for the default route.
     * 
     */
    @InputImport(name="throttlingBurstLimit")
    private final @Nullable Input<Integer> throttlingBurstLimit;

    public Input<Integer> getThrottlingBurstLimit() {
        return this.throttlingBurstLimit == null ? Input.empty() : this.throttlingBurstLimit;
    }

    /**
     * The throttling rate limit for the default route.
     * 
     */
    @InputImport(name="throttlingRateLimit")
    private final @Nullable Input<Double> throttlingRateLimit;

    public Input<Double> getThrottlingRateLimit() {
        return this.throttlingRateLimit == null ? Input.empty() : this.throttlingRateLimit;
    }

    public StageDefaultRouteSettingsGetArgs(
        @Nullable Input<Boolean> dataTraceEnabled,
        @Nullable Input<Boolean> detailedMetricsEnabled,
        @Nullable Input<String> loggingLevel,
        @Nullable Input<Integer> throttlingBurstLimit,
        @Nullable Input<Double> throttlingRateLimit) {
        this.dataTraceEnabled = dataTraceEnabled;
        this.detailedMetricsEnabled = detailedMetricsEnabled;
        this.loggingLevel = loggingLevel;
        this.throttlingBurstLimit = throttlingBurstLimit;
        this.throttlingRateLimit = throttlingRateLimit;
    }

    private StageDefaultRouteSettingsGetArgs() {
        this.dataTraceEnabled = Input.empty();
        this.detailedMetricsEnabled = Input.empty();
        this.loggingLevel = Input.empty();
        this.throttlingBurstLimit = Input.empty();
        this.throttlingRateLimit = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StageDefaultRouteSettingsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> dataTraceEnabled;
        private @Nullable Input<Boolean> detailedMetricsEnabled;
        private @Nullable Input<String> loggingLevel;
        private @Nullable Input<Integer> throttlingBurstLimit;
        private @Nullable Input<Double> throttlingRateLimit;

        public Builder() {
    	      // Empty
        }

        public Builder(StageDefaultRouteSettingsGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataTraceEnabled = defaults.dataTraceEnabled;
    	      this.detailedMetricsEnabled = defaults.detailedMetricsEnabled;
    	      this.loggingLevel = defaults.loggingLevel;
    	      this.throttlingBurstLimit = defaults.throttlingBurstLimit;
    	      this.throttlingRateLimit = defaults.throttlingRateLimit;
        }

        public Builder setDataTraceEnabled(@Nullable Input<Boolean> dataTraceEnabled) {
            this.dataTraceEnabled = dataTraceEnabled;
            return this;
        }

        public Builder setDataTraceEnabled(@Nullable Boolean dataTraceEnabled) {
            this.dataTraceEnabled = Input.ofNullable(dataTraceEnabled);
            return this;
        }

        public Builder setDetailedMetricsEnabled(@Nullable Input<Boolean> detailedMetricsEnabled) {
            this.detailedMetricsEnabled = detailedMetricsEnabled;
            return this;
        }

        public Builder setDetailedMetricsEnabled(@Nullable Boolean detailedMetricsEnabled) {
            this.detailedMetricsEnabled = Input.ofNullable(detailedMetricsEnabled);
            return this;
        }

        public Builder setLoggingLevel(@Nullable Input<String> loggingLevel) {
            this.loggingLevel = loggingLevel;
            return this;
        }

        public Builder setLoggingLevel(@Nullable String loggingLevel) {
            this.loggingLevel = Input.ofNullable(loggingLevel);
            return this;
        }

        public Builder setThrottlingBurstLimit(@Nullable Input<Integer> throttlingBurstLimit) {
            this.throttlingBurstLimit = throttlingBurstLimit;
            return this;
        }

        public Builder setThrottlingBurstLimit(@Nullable Integer throttlingBurstLimit) {
            this.throttlingBurstLimit = Input.ofNullable(throttlingBurstLimit);
            return this;
        }

        public Builder setThrottlingRateLimit(@Nullable Input<Double> throttlingRateLimit) {
            this.throttlingRateLimit = throttlingRateLimit;
            return this;
        }

        public Builder setThrottlingRateLimit(@Nullable Double throttlingRateLimit) {
            this.throttlingRateLimit = Input.ofNullable(throttlingRateLimit);
            return this;
        }
        public StageDefaultRouteSettingsGetArgs build() {
            return new StageDefaultRouteSettingsGetArgs(dataTraceEnabled, detailedMetricsEnabled, loggingLevel, throttlingBurstLimit, throttlingRateLimit);
        }
    }
}
