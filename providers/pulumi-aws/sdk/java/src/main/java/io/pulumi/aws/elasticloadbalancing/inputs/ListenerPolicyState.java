// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elasticloadbalancing.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ListenerPolicyState extends io.pulumi.resources.ResourceArgs {

    public static final ListenerPolicyState Empty = new ListenerPolicyState();

    /**
     * The load balancer to attach the policy to.
     * 
     */
    @InputImport(name="loadBalancerName")
      private final @Nullable Output<String> loadBalancerName;

    public Output<String> getLoadBalancerName() {
        return this.loadBalancerName == null ? Output.empty() : this.loadBalancerName;
    }

    /**
     * The load balancer listener port to apply the policy to.
     * 
     */
    @InputImport(name="loadBalancerPort")
      private final @Nullable Output<Integer> loadBalancerPort;

    public Output<Integer> getLoadBalancerPort() {
        return this.loadBalancerPort == null ? Output.empty() : this.loadBalancerPort;
    }

    /**
     * List of Policy Names to apply to the backend server.
     * 
     */
    @InputImport(name="policyNames")
      private final @Nullable Output<List<String>> policyNames;

    public Output<List<String>> getPolicyNames() {
        return this.policyNames == null ? Output.empty() : this.policyNames;
    }

    public ListenerPolicyState(
        @Nullable Output<String> loadBalancerName,
        @Nullable Output<Integer> loadBalancerPort,
        @Nullable Output<List<String>> policyNames) {
        this.loadBalancerName = loadBalancerName;
        this.loadBalancerPort = loadBalancerPort;
        this.policyNames = policyNames;
    }

    private ListenerPolicyState() {
        this.loadBalancerName = Output.empty();
        this.loadBalancerPort = Output.empty();
        this.policyNames = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> loadBalancerName;
        private @Nullable Output<Integer> loadBalancerPort;
        private @Nullable Output<List<String>> policyNames;

        public Builder() {
    	      // Empty
        }

        public Builder(ListenerPolicyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.loadBalancerName = defaults.loadBalancerName;
    	      this.loadBalancerPort = defaults.loadBalancerPort;
    	      this.policyNames = defaults.policyNames;
        }

        public Builder loadBalancerName(@Nullable Output<String> loadBalancerName) {
            this.loadBalancerName = loadBalancerName;
            return this;
        }

        public Builder loadBalancerName(@Nullable String loadBalancerName) {
            this.loadBalancerName = Output.ofNullable(loadBalancerName);
            return this;
        }

        public Builder loadBalancerPort(@Nullable Output<Integer> loadBalancerPort) {
            this.loadBalancerPort = loadBalancerPort;
            return this;
        }

        public Builder loadBalancerPort(@Nullable Integer loadBalancerPort) {
            this.loadBalancerPort = Output.ofNullable(loadBalancerPort);
            return this;
        }

        public Builder policyNames(@Nullable Output<List<String>> policyNames) {
            this.policyNames = policyNames;
            return this;
        }

        public Builder policyNames(@Nullable List<String> policyNames) {
            this.policyNames = Output.ofNullable(policyNames);
            return this;
        }
        public ListenerPolicyState build() {
            return new ListenerPolicyState(loadBalancerName, loadBalancerPort, policyNames);
        }
    }
}
