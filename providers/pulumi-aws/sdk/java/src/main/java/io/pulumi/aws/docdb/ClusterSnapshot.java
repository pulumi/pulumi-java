// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.docdb;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.docdb.ClusterSnapshotArgs;
import io.pulumi.aws.docdb.inputs.ClusterSnapshotState;
import io.pulumi.core.Input;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.OutputExport;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Manages a DocDB database cluster snapshot for DocDB clusters.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * `aws_docdb_cluster_snapshot` can be imported by using the cluster snapshot identifier, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:docdb/clusterSnapshot:ClusterSnapshot example my-cluster-snapshot
 * ```
 * 
 */
@ResourceType(type="aws:docdb/clusterSnapshot:ClusterSnapshot")
public class ClusterSnapshot extends io.pulumi.resources.CustomResource {
    /**
     * List of EC2 Availability Zones that instances in the DocDB cluster snapshot can be restored in.
     * 
     */
    @OutputExport(name="availabilityZones", type=List.class, parameters={String.class})
    private Output<List<String>> availabilityZones;

    /**
     * @return List of EC2 Availability Zones that instances in the DocDB cluster snapshot can be restored in.
     * 
     */
    public Output<List<String>> getAvailabilityZones() {
        return this.availabilityZones;
    }
    /**
     * The DocDB Cluster Identifier from which to take the snapshot.
     * 
     */
    @OutputExport(name="dbClusterIdentifier", type=String.class, parameters={})
    private Output<String> dbClusterIdentifier;

    /**
     * @return The DocDB Cluster Identifier from which to take the snapshot.
     * 
     */
    public Output<String> getDbClusterIdentifier() {
        return this.dbClusterIdentifier;
    }
    /**
     * The Amazon Resource Name (ARN) for the DocDB Cluster Snapshot.
     * 
     */
    @OutputExport(name="dbClusterSnapshotArn", type=String.class, parameters={})
    private Output<String> dbClusterSnapshotArn;

    /**
     * @return The Amazon Resource Name (ARN) for the DocDB Cluster Snapshot.
     * 
     */
    public Output<String> getDbClusterSnapshotArn() {
        return this.dbClusterSnapshotArn;
    }
    /**
     * The Identifier for the snapshot.
     * 
     */
    @OutputExport(name="dbClusterSnapshotIdentifier", type=String.class, parameters={})
    private Output<String> dbClusterSnapshotIdentifier;

    /**
     * @return The Identifier for the snapshot.
     * 
     */
    public Output<String> getDbClusterSnapshotIdentifier() {
        return this.dbClusterSnapshotIdentifier;
    }
    /**
     * Specifies the name of the database engine.
     * 
     */
    @OutputExport(name="engine", type=String.class, parameters={})
    private Output<String> engine;

    /**
     * @return Specifies the name of the database engine.
     * 
     */
    public Output<String> getEngine() {
        return this.engine;
    }
    /**
     * Version of the database engine for this DocDB cluster snapshot.
     * 
     */
    @OutputExport(name="engineVersion", type=String.class, parameters={})
    private Output<String> engineVersion;

    /**
     * @return Version of the database engine for this DocDB cluster snapshot.
     * 
     */
    public Output<String> getEngineVersion() {
        return this.engineVersion;
    }
    /**
     * If storage_encrypted is true, the AWS KMS key identifier for the encrypted DocDB cluster snapshot.
     * 
     */
    @OutputExport(name="kmsKeyId", type=String.class, parameters={})
    private Output<String> kmsKeyId;

    /**
     * @return If storage_encrypted is true, the AWS KMS key identifier for the encrypted DocDB cluster snapshot.
     * 
     */
    public Output<String> getKmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * Port that the DocDB cluster was listening on at the time of the snapshot.
     * 
     */
    @OutputExport(name="port", type=Integer.class, parameters={})
    private Output<Integer> port;

    /**
     * @return Port that the DocDB cluster was listening on at the time of the snapshot.
     * 
     */
    public Output<Integer> getPort() {
        return this.port;
    }
    @OutputExport(name="snapshotType", type=String.class, parameters={})
    private Output<String> snapshotType;

    public Output<String> getSnapshotType() {
        return this.snapshotType;
    }
    @OutputExport(name="sourceDbClusterSnapshotArn", type=String.class, parameters={})
    private Output<String> sourceDbClusterSnapshotArn;

    public Output<String> getSourceDbClusterSnapshotArn() {
        return this.sourceDbClusterSnapshotArn;
    }
    /**
     * The status of this DocDB Cluster Snapshot.
     * 
     */
    @OutputExport(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The status of this DocDB Cluster Snapshot.
     * 
     */
    public Output<String> getStatus() {
        return this.status;
    }
    /**
     * Specifies whether the DocDB cluster snapshot is encrypted.
     * 
     */
    @OutputExport(name="storageEncrypted", type=Boolean.class, parameters={})
    private Output<Boolean> storageEncrypted;

    /**
     * @return Specifies whether the DocDB cluster snapshot is encrypted.
     * 
     */
    public Output<Boolean> getStorageEncrypted() {
        return this.storageEncrypted;
    }
    /**
     * The VPC ID associated with the DocDB cluster snapshot.
     * 
     */
    @OutputExport(name="vpcId", type=String.class, parameters={})
    private Output<String> vpcId;

    /**
     * @return The VPC ID associated with the DocDB cluster snapshot.
     * 
     */
    public Output<String> getVpcId() {
        return this.vpcId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ClusterSnapshot(String name) {
        this(name, ClusterSnapshotArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ClusterSnapshot(String name, ClusterSnapshotArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ClusterSnapshot(String name, ClusterSnapshotArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:docdb/clusterSnapshot:ClusterSnapshot", name, args == null ? ClusterSnapshotArgs.Empty : args, makeResourceOptions(options, Input.empty()));
    }

    private ClusterSnapshot(String name, Input<String> id, @Nullable ClusterSnapshotState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:docdb/clusterSnapshot:ClusterSnapshot", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Input<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .setVersion(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ClusterSnapshot get(String name, Input<String> id, @Nullable ClusterSnapshotState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ClusterSnapshot(name, id, state, options);
    }
}
