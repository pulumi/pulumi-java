// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.macie2;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MemberArgs extends io.pulumi.resources.ResourceArgs {

    public static final MemberArgs Empty = new MemberArgs();

    /**
     * The AWS account ID for the account.
     * 
     */
    @InputImport(name="accountId", required=true)
      private final Input<String> accountId;

    public Input<String> getAccountId() {
        return this.accountId;
    }

    /**
     * The email address for the account.
     * 
     */
    @InputImport(name="email", required=true)
      private final Input<String> email;

    public Input<String> getEmail() {
        return this.email;
    }

    /**
     * Specifies whether to send an email notification to the root user of each account that the invitation will be sent to. This notification is in addition to an alert that the root user receives in AWS Personal Health Dashboard. To send an email notification to the root user of each account, set this value to `true`.
     * 
     */
    @InputImport(name="invitationDisableEmailNotification")
      private final @Nullable Input<String> invitationDisableEmailNotification;

    public Input<String> getInvitationDisableEmailNotification() {
        return this.invitationDisableEmailNotification == null ? Input.empty() : this.invitationDisableEmailNotification;
    }

    /**
     * A custom message to include in the invitation. Amazon Macie adds this message to the standard content that it sends for an invitation.
     * 
     */
    @InputImport(name="invitationMessage")
      private final @Nullable Input<String> invitationMessage;

    public Input<String> getInvitationMessage() {
        return this.invitationMessage == null ? Input.empty() : this.invitationMessage;
    }

    /**
     * Send an invitation to a member
     * 
     */
    @InputImport(name="invite")
      private final @Nullable Input<Boolean> invite;

    public Input<Boolean> getInvite() {
        return this.invite == null ? Input.empty() : this.invite;
    }

    /**
     * Specifies the status for the account. To enable Amazon Macie and start all Macie activities for the account, set this value to `ENABLED`. Valid values are `ENABLED` or `PAUSED`.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * A map of key-value pairs that specifies the tags to associate with the account in Amazon Macie.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public MemberArgs(
        Input<String> accountId,
        Input<String> email,
        @Nullable Input<String> invitationDisableEmailNotification,
        @Nullable Input<String> invitationMessage,
        @Nullable Input<Boolean> invite,
        @Nullable Input<String> status,
        @Nullable Input<Map<String,String>> tags) {
        this.accountId = Objects.requireNonNull(accountId, "expected parameter 'accountId' to be non-null");
        this.email = Objects.requireNonNull(email, "expected parameter 'email' to be non-null");
        this.invitationDisableEmailNotification = invitationDisableEmailNotification;
        this.invitationMessage = invitationMessage;
        this.invite = invite;
        this.status = status;
        this.tags = tags;
    }

    private MemberArgs() {
        this.accountId = Input.empty();
        this.email = Input.empty();
        this.invitationDisableEmailNotification = Input.empty();
        this.invitationMessage = Input.empty();
        this.invite = Input.empty();
        this.status = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> accountId;
        private Input<String> email;
        private @Nullable Input<String> invitationDisableEmailNotification;
        private @Nullable Input<String> invitationMessage;
        private @Nullable Input<Boolean> invite;
        private @Nullable Input<String> status;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(MemberArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.email = defaults.email;
    	      this.invitationDisableEmailNotification = defaults.invitationDisableEmailNotification;
    	      this.invitationMessage = defaults.invitationMessage;
    	      this.invite = defaults.invite;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
        }

        public Builder accountId(Input<String> accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }

        public Builder accountId(String accountId) {
            this.accountId = Input.of(Objects.requireNonNull(accountId));
            return this;
        }

        public Builder email(Input<String> email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }

        public Builder email(String email) {
            this.email = Input.of(Objects.requireNonNull(email));
            return this;
        }

        public Builder invitationDisableEmailNotification(@Nullable Input<String> invitationDisableEmailNotification) {
            this.invitationDisableEmailNotification = invitationDisableEmailNotification;
            return this;
        }

        public Builder invitationDisableEmailNotification(@Nullable String invitationDisableEmailNotification) {
            this.invitationDisableEmailNotification = Input.ofNullable(invitationDisableEmailNotification);
            return this;
        }

        public Builder invitationMessage(@Nullable Input<String> invitationMessage) {
            this.invitationMessage = invitationMessage;
            return this;
        }

        public Builder invitationMessage(@Nullable String invitationMessage) {
            this.invitationMessage = Input.ofNullable(invitationMessage);
            return this;
        }

        public Builder invite(@Nullable Input<Boolean> invite) {
            this.invite = invite;
            return this;
        }

        public Builder invite(@Nullable Boolean invite) {
            this.invite = Input.ofNullable(invite);
            return this;
        }

        public Builder status(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public MemberArgs build() {
            return new MemberArgs(accountId, email, invitationDisableEmailNotification, invitationMessage, invite, status, tags);
        }
    }
}
