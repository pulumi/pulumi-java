// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.route53;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.route53.QueryLogArgs;
import io.pulumi.aws.route53.inputs.QueryLogState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a Route53 query logging configuration resource.
 * 
 * > **NOTE:** There are restrictions on the configuration of query logging. Notably,
 * the CloudWatch log group must be in the `us-east-1` region,
 * a permissive CloudWatch log resource policy must be in place, and
 * the Route53 hosted zone must be public.
 * See [Configuring Logging for DNS Queries](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html?console_help=true#query-logs-configuring) for additional details.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * // Example CloudWatch log group in us-east-1
 * const us_east_1 = new aws.Provider("us-east-1", {region: "us-east-1"});
 * const awsRoute53ExampleCom = new aws.cloudwatch.LogGroup("awsRoute53ExampleCom", {retentionInDays: 30}, {
 *     provider: aws["us-east-1"],
 * });
 * // Example CloudWatch log resource policy to allow Route53 to write logs
 * // to any log group under /aws/route53/*
 * const route53-query-logging-policyPolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: [
 *             "logs:CreateLogStream",
 *             "logs:PutLogEvents",
 *         ],
 *         resources: ["arn:aws:logs:*:*:log-group:/aws/route53/*"],
 *         principals: [{
 *             identifiers: ["route53.amazonaws.com"],
 *             type: "Service",
 *         }],
 *     }],
 * });
 * const route53_query_logging_policyLogResourcePolicy = new aws.cloudwatch.LogResourcePolicy("route53-query-logging-policyLogResourcePolicy", {
 *     policyDocument: route53_query_logging_policyPolicyDocument.then(route53_query_logging_policyPolicyDocument => route53_query_logging_policyPolicyDocument.json),
 *     policyName: "route53-query-logging-policy",
 * }, {
 *     provider: aws["us-east-1"],
 * });
 * // Example Route53 zone with query logging
 * const exampleComZone = new aws.route53.Zone("exampleComZone", {});
 * const exampleComQueryLog = new aws.route53.QueryLog("exampleComQueryLog", {
 *     cloudwatchLogGroupArn: awsRoute53ExampleCom.arn,
 *     zoneId: exampleComZone.zoneId,
 * }, {
 *     dependsOn: [route53_query_logging_policyLogResourcePolicy],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * import pulumi_pulumi as pulumi
 * 
 * # Example CloudWatch log group in us-east-1
 * us_east_1 = pulumi.providers.Aws("us-east-1", region="us-east-1")
 * aws_route53_example_com = aws.cloudwatch.LogGroup("awsRoute53ExampleCom", retention_in_days=30,
 * opts=pulumi.ResourceOptions(provider=aws["us-east-1"]))
 * # Example CloudWatch log resource policy to allow Route53 to write logs
 * # to any log group under /aws/route53/*
 * route53_query_logging_policy_policy_document = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     actions=[
 *         "logs:CreateLogStream",
 *         "logs:PutLogEvents",
 *     ],
 *     resources=["arn:aws:logs:*:*:log-group:/aws/route53/*"],
 *     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *         identifiers=["route53.amazonaws.com"],
 *         type="Service",
 *     )],
 * )])
 * route53_query_logging_policy_log_resource_policy = aws.cloudwatch.LogResourcePolicy("route53-query-logging-policyLogResourcePolicy",
 *     policy_document=route53_query_logging_policy_policy_document.json,
 *     policy_name="route53-query-logging-policy",
 *     opts=pulumi.ResourceOptions(provider=aws["us-east-1"]))
 * # Example Route53 zone with query logging
 * example_com_zone = aws.route53.Zone("exampleComZone")
 * example_com_query_log = aws.route53.QueryLog("exampleComQueryLog",
 *     cloudwatch_log_group_arn=aws_route53_example_com.arn,
 *     zone_id=example_com_zone.zone_id,
 *     opts=pulumi.ResourceOptions(depends_on=[route53_query_logging_policy_log_resource_policy]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         // Example CloudWatch log group in us-east-1
 *         var us_east_1 = new Aws.Provider("us-east-1", new Aws.ProviderArgs
 *         {
 *             Region = "us-east-1",
 *         });
 *         var awsRoute53ExampleCom = new Aws.CloudWatch.LogGroup("awsRoute53ExampleCom", new Aws.CloudWatch.LogGroupArgs
 *         {
 *             RetentionInDays = 30,
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Us_east_1,
 *         });
 *         // Example CloudWatch log resource policy to allow Route53 to write logs
 *         // to any log group under /aws/route53/*
 *         var route53_query_logging_policyPolicyDocument = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Actions = 
 *                     {
 *                         "logs:CreateLogStream",
 *                         "logs:PutLogEvents",
 *                     },
 *                     Resources = 
 *                     {
 *                         "arn:aws:logs:*:*:log-group:/aws/route53/*",
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                         {
 *                             Identifiers = 
 *                             {
 *                                 "route53.amazonaws.com",
 *                             },
 *                             Type = "Service",
 *                         },
 *                     },
 *                 },
 *             },
 *         }));
 *         var route53_query_logging_policyLogResourcePolicy = new Aws.CloudWatch.LogResourcePolicy("route53-query-logging-policyLogResourcePolicy", new Aws.CloudWatch.LogResourcePolicyArgs
 *         {
 *             PolicyDocument = route53_query_logging_policyPolicyDocument.Apply(route53_query_logging_policyPolicyDocument => route53_query_logging_policyPolicyDocument.Json),
 *             PolicyName = "route53-query-logging-policy",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Us_east_1,
 *         });
 *         // Example Route53 zone with query logging
 *         var exampleComZone = new Aws.Route53.Zone("exampleComZone", new Aws.Route53.ZoneArgs
 *         {
 *         });
 *         var exampleComQueryLog = new Aws.Route53.QueryLog("exampleComQueryLog", new Aws.Route53.QueryLogArgs
 *         {
 *             CloudwatchLogGroupArn = awsRoute53ExampleCom.Arn,
 *             ZoneId = exampleComZone.ZoneId,
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 route53_query_logging_policyLogResourcePolicy,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/providers"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/route53"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := providers.Newaws(ctx, "us-east-1", &providers.awsArgs{
 * 			Region: "us-east-1",
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		awsRoute53ExampleCom, err := cloudwatch.NewLogGroup(ctx, "awsRoute53ExampleCom", &cloudwatch.LogGroupArgs{
 * 			RetentionInDays: pulumi.Int(30),
 * 		}, pulumi.Provider(aws.Us-east-1))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		route53_query_logging_policyPolicyDocument, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Actions: []string{
 * 						"logs:CreateLogStream",
 * 						"logs:PutLogEvents",
 * 					},
 * 					Resources: []string{
 * 						"arn:aws:logs:*:*:log-group:/aws/route53/*",
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Identifiers: []string{
 * 								"route53.amazonaws.com",
 * 							},
 * 							Type: "Service",
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewLogResourcePolicy(ctx, "route53-query-logging-policyLogResourcePolicy", &cloudwatch.LogResourcePolicyArgs{
 * 			PolicyDocument: pulumi.String(route53_query_logging_policyPolicyDocument.Json),
 * 			PolicyName:     pulumi.String("route53-query-logging-policy"),
 * 		}, pulumi.Provider(aws.Us-east-1))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleComZone, err := route53.NewZone(ctx, "exampleComZone", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = route53.NewQueryLog(ctx, "exampleComQueryLog", &route53.QueryLogArgs{
 * 			CloudwatchLogGroupArn: awsRoute53ExampleCom.Arn,
 * 			ZoneId:                exampleComZone.ZoneId,
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			route53_query_logging_policyLogResourcePolicy,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Route53 query logging configurations can be imported using their ID, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:route53/queryLog:QueryLog example_com xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 * 
 *  
 */
@ResourceType(type="aws:route53/queryLog:QueryLog")
public class QueryLog extends io.pulumi.resources.CustomResource {
    /**
     * The Amazon Resource Name (ARN) of the Query Logging Config.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the Query Logging Config.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * CloudWatch log group ARN to send query logs.
     * 
     */
    @Export(name="cloudwatchLogGroupArn", type=String.class, parameters={})
    private Output<String> cloudwatchLogGroupArn;

    /**
     * @return CloudWatch log group ARN to send query logs.
     * 
     */
    public Output<String> getCloudwatchLogGroupArn() {
        return this.cloudwatchLogGroupArn;
    }
    /**
     * Route53 hosted zone ID to enable query logs.
     * 
     */
    @Export(name="zoneId", type=String.class, parameters={})
    private Output<String> zoneId;

    /**
     * @return Route53 hosted zone ID to enable query logs.
     * 
     */
    public Output<String> getZoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public QueryLog(String name) {
        this(name, QueryLogArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public QueryLog(String name, QueryLogArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public QueryLog(String name, QueryLogArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:route53/queryLog:QueryLog", name, args == null ? QueryLogArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private QueryLog(String name, Output<String> id, @Nullable QueryLogState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:route53/queryLog:QueryLog", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static QueryLog get(String name, Output<String> id, @Nullable QueryLogState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new QueryLog(name, id, state, options);
    }
}
