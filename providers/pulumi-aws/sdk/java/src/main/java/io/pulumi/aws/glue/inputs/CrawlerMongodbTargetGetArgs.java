// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CrawlerMongodbTargetGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final CrawlerMongodbTargetGetArgs Empty = new CrawlerMongodbTargetGetArgs();

    /**
     * The name of the connection to use to connect to the Delta table target.
     * 
     */
    @Import(name="connectionName", required=true)
      private final Output<String> connectionName;

    public Output<String> getConnectionName() {
        return this.connectionName;
    }

    /**
     * The path of the Amazon DocumentDB or MongoDB target (database/collection).
     * 
     */
    @Import(name="path", required=true)
      private final Output<String> path;

    public Output<String> getPath() {
        return this.path;
    }

    /**
     * Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
     * 
     */
    @Import(name="scanAll")
      private final @Nullable Output<Boolean> scanAll;

    public Output<Boolean> getScanAll() {
        return this.scanAll == null ? Codegen.empty() : this.scanAll;
    }

    public CrawlerMongodbTargetGetArgs(
        Output<String> connectionName,
        Output<String> path,
        @Nullable Output<Boolean> scanAll) {
        this.connectionName = Objects.requireNonNull(connectionName, "expected parameter 'connectionName' to be non-null");
        this.path = Objects.requireNonNull(path, "expected parameter 'path' to be non-null");
        this.scanAll = scanAll;
    }

    private CrawlerMongodbTargetGetArgs() {
        this.connectionName = Codegen.empty();
        this.path = Codegen.empty();
        this.scanAll = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CrawlerMongodbTargetGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> connectionName;
        private Output<String> path;
        private @Nullable Output<Boolean> scanAll;

        public Builder() {
    	      // Empty
        }

        public Builder(CrawlerMongodbTargetGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionName = defaults.connectionName;
    	      this.path = defaults.path;
    	      this.scanAll = defaults.scanAll;
        }

        public Builder connectionName(Output<String> connectionName) {
            this.connectionName = Objects.requireNonNull(connectionName);
            return this;
        }
        public Builder connectionName(String connectionName) {
            this.connectionName = Output.of(Objects.requireNonNull(connectionName));
            return this;
        }
        public Builder path(Output<String> path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        public Builder path(String path) {
            this.path = Output.of(Objects.requireNonNull(path));
            return this;
        }
        public Builder scanAll(@Nullable Output<Boolean> scanAll) {
            this.scanAll = scanAll;
            return this;
        }
        public Builder scanAll(@Nullable Boolean scanAll) {
            this.scanAll = Codegen.ofNullable(scanAll);
            return this;
        }        public CrawlerMongodbTargetGetArgs build() {
            return new CrawlerMongodbTargetGetArgs(connectionName, path, scanAll);
        }
    }
}
