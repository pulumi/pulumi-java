// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codedeploy.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationState extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationState Empty = new ApplicationState();

    /**
     * The application ID.
     * 
     */
    @Import(name="applicationId")
      private final @Nullable Output<String> applicationId;

    public Output<String> getApplicationId() {
        return this.applicationId == null ? Output.empty() : this.applicationId;
    }

    /**
     * The ARN of the CodeDeploy application.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
     * 
     */
    @Import(name="computePlatform")
      private final @Nullable Output<String> computePlatform;

    public Output<String> getComputePlatform() {
        return this.computePlatform == null ? Output.empty() : this.computePlatform;
    }

    /**
     * The name for a connection to a GitHub account.
     * 
     */
    @Import(name="githubAccountName")
      private final @Nullable Output<String> githubAccountName;

    public Output<String> getGithubAccountName() {
        return this.githubAccountName == null ? Output.empty() : this.githubAccountName;
    }

    /**
     * Whether the user has authenticated with GitHub for the specified application.
     * 
     */
    @Import(name="linkedToGithub")
      private final @Nullable Output<Boolean> linkedToGithub;

    public Output<Boolean> getLinkedToGithub() {
        return this.linkedToGithub == null ? Output.empty() : this.linkedToGithub;
    }

    /**
     * The name of the application.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    public ApplicationState(
        @Nullable Output<String> applicationId,
        @Nullable Output<String> arn,
        @Nullable Output<String> computePlatform,
        @Nullable Output<String> githubAccountName,
        @Nullable Output<Boolean> linkedToGithub,
        @Nullable Output<String> name,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.applicationId = applicationId;
        this.arn = arn;
        this.computePlatform = computePlatform;
        this.githubAccountName = githubAccountName;
        this.linkedToGithub = linkedToGithub;
        this.name = name;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private ApplicationState() {
        this.applicationId = Output.empty();
        this.arn = Output.empty();
        this.computePlatform = Output.empty();
        this.githubAccountName = Output.empty();
        this.linkedToGithub = Output.empty();
        this.name = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> applicationId;
        private @Nullable Output<String> arn;
        private @Nullable Output<String> computePlatform;
        private @Nullable Output<String> githubAccountName;
        private @Nullable Output<Boolean> linkedToGithub;
        private @Nullable Output<String> name;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.arn = defaults.arn;
    	      this.computePlatform = defaults.computePlatform;
    	      this.githubAccountName = defaults.githubAccountName;
    	      this.linkedToGithub = defaults.linkedToGithub;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder applicationId(@Nullable Output<String> applicationId) {
            this.applicationId = applicationId;
            return this;
        }
        public Builder applicationId(@Nullable String applicationId) {
            this.applicationId = Output.ofNullable(applicationId);
            return this;
        }
        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }
        public Builder computePlatform(@Nullable Output<String> computePlatform) {
            this.computePlatform = computePlatform;
            return this;
        }
        public Builder computePlatform(@Nullable String computePlatform) {
            this.computePlatform = Output.ofNullable(computePlatform);
            return this;
        }
        public Builder githubAccountName(@Nullable Output<String> githubAccountName) {
            this.githubAccountName = githubAccountName;
            return this;
        }
        public Builder githubAccountName(@Nullable String githubAccountName) {
            this.githubAccountName = Output.ofNullable(githubAccountName);
            return this;
        }
        public Builder linkedToGithub(@Nullable Output<Boolean> linkedToGithub) {
            this.linkedToGithub = linkedToGithub;
            return this;
        }
        public Builder linkedToGithub(@Nullable Boolean linkedToGithub) {
            this.linkedToGithub = Output.ofNullable(linkedToGithub);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }        public ApplicationState build() {
            return new ApplicationState(applicationId, arn, computePlatform, githubAccountName, linkedToGithub, name, tags, tagsAll);
        }
    }
}
