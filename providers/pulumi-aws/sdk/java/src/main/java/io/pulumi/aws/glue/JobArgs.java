// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.glue.inputs.JobCommandArgs;
import io.pulumi.aws.glue.inputs.JobExecutionPropertyArgs;
import io.pulumi.aws.glue.inputs.JobNotificationPropertyArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobArgs Empty = new JobArgs();

    /**
     * The command of the job. Defined below.
     * 
     */
    @InputImport(name="command", required=true)
      private final Output<JobCommandArgs> command;

    public Output<JobCommandArgs> getCommand() {
        return this.command;
    }

    /**
     * The list of connections used for this job.
     * 
     */
    @InputImport(name="connections")
      private final @Nullable Output<List<String>> connections;

    public Output<List<String>> getConnections() {
        return this.connections == null ? Output.empty() : this.connections;
    }

    /**
     * The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
     * 
     */
    @InputImport(name="defaultArguments")
      private final @Nullable Output<Map<String,String>> defaultArguments;

    public Output<Map<String,String>> getDefaultArguments() {
        return this.defaultArguments == null ? Output.empty() : this.defaultArguments;
    }

    /**
     * Description of the job.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Execution property of the job. Defined below.
     * 
     */
    @InputImport(name="executionProperty")
      private final @Nullable Output<JobExecutionPropertyArgs> executionProperty;

    public Output<JobExecutionPropertyArgs> getExecutionProperty() {
        return this.executionProperty == null ? Output.empty() : this.executionProperty;
    }

    /**
     * The version of glue to use, for example "1.0". For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
     * 
     */
    @InputImport(name="glueVersion")
      private final @Nullable Output<String> glueVersion;

    public Output<String> getGlueVersion() {
        return this.glueVersion == null ? Output.empty() : this.glueVersion;
    }

    /**
     * The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `number_of_workers` and `worker_type` arguments instead with `glue_version` `2.0` and above.
     * 
     */
    @InputImport(name="maxCapacity")
      private final @Nullable Output<Double> maxCapacity;

    public Output<Double> getMaxCapacity() {
        return this.maxCapacity == null ? Output.empty() : this.maxCapacity;
    }

    /**
     * The maximum number of times to retry this job if it fails.
     * 
     */
    @InputImport(name="maxRetries")
      private final @Nullable Output<Integer> maxRetries;

    public Output<Integer> getMaxRetries() {
        return this.maxRetries == null ? Output.empty() : this.maxRetries;
    }

    /**
     * The name you assign to this job. It must be unique in your account.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Non-overridable arguments for this job, specified as name-value pairs.
     * 
     */
    @InputImport(name="nonOverridableArguments")
      private final @Nullable Output<Map<String,String>> nonOverridableArguments;

    public Output<Map<String,String>> getNonOverridableArguments() {
        return this.nonOverridableArguments == null ? Output.empty() : this.nonOverridableArguments;
    }

    /**
     * Notification property of the job. Defined below.
     * 
     */
    @InputImport(name="notificationProperty")
      private final @Nullable Output<JobNotificationPropertyArgs> notificationProperty;

    public Output<JobNotificationPropertyArgs> getNotificationProperty() {
        return this.notificationProperty == null ? Output.empty() : this.notificationProperty;
    }

    /**
     * The number of workers of a defined workerType that are allocated when a job runs.
     * 
     */
    @InputImport(name="numberOfWorkers")
      private final @Nullable Output<Integer> numberOfWorkers;

    public Output<Integer> getNumberOfWorkers() {
        return this.numberOfWorkers == null ? Output.empty() : this.numberOfWorkers;
    }

    /**
     * The ARN of the IAM role associated with this job.
     * 
     */
    @InputImport(name="roleArn", required=true)
      private final Output<String> roleArn;

    public Output<String> getRoleArn() {
        return this.roleArn;
    }

    /**
     * The name of the Security Configuration to be associated with the job.
     * 
     */
    @InputImport(name="securityConfiguration")
      private final @Nullable Output<String> securityConfiguration;

    public Output<String> getSecurityConfiguration() {
        return this.securityConfiguration == null ? Output.empty() : this.securityConfiguration;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The job timeout in minutes. The default is 2880 minutes (48 hours).
     * 
     */
    @InputImport(name="timeout")
      private final @Nullable Output<Integer> timeout;

    public Output<Integer> getTimeout() {
        return this.timeout == null ? Output.empty() : this.timeout;
    }

    /**
     * The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.
     * 
     */
    @InputImport(name="workerType")
      private final @Nullable Output<String> workerType;

    public Output<String> getWorkerType() {
        return this.workerType == null ? Output.empty() : this.workerType;
    }

    public JobArgs(
        Output<JobCommandArgs> command,
        @Nullable Output<List<String>> connections,
        @Nullable Output<Map<String,String>> defaultArguments,
        @Nullable Output<String> description,
        @Nullable Output<JobExecutionPropertyArgs> executionProperty,
        @Nullable Output<String> glueVersion,
        @Nullable Output<Double> maxCapacity,
        @Nullable Output<Integer> maxRetries,
        @Nullable Output<String> name,
        @Nullable Output<Map<String,String>> nonOverridableArguments,
        @Nullable Output<JobNotificationPropertyArgs> notificationProperty,
        @Nullable Output<Integer> numberOfWorkers,
        Output<String> roleArn,
        @Nullable Output<String> securityConfiguration,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Integer> timeout,
        @Nullable Output<String> workerType) {
        this.command = Objects.requireNonNull(command, "expected parameter 'command' to be non-null");
        this.connections = connections;
        this.defaultArguments = defaultArguments;
        this.description = description;
        this.executionProperty = executionProperty;
        this.glueVersion = glueVersion;
        this.maxCapacity = maxCapacity;
        this.maxRetries = maxRetries;
        this.name = name;
        this.nonOverridableArguments = nonOverridableArguments;
        this.notificationProperty = notificationProperty;
        this.numberOfWorkers = numberOfWorkers;
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.securityConfiguration = securityConfiguration;
        this.tags = tags;
        this.timeout = timeout;
        this.workerType = workerType;
    }

    private JobArgs() {
        this.command = Output.empty();
        this.connections = Output.empty();
        this.defaultArguments = Output.empty();
        this.description = Output.empty();
        this.executionProperty = Output.empty();
        this.glueVersion = Output.empty();
        this.maxCapacity = Output.empty();
        this.maxRetries = Output.empty();
        this.name = Output.empty();
        this.nonOverridableArguments = Output.empty();
        this.notificationProperty = Output.empty();
        this.numberOfWorkers = Output.empty();
        this.roleArn = Output.empty();
        this.securityConfiguration = Output.empty();
        this.tags = Output.empty();
        this.timeout = Output.empty();
        this.workerType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<JobCommandArgs> command;
        private @Nullable Output<List<String>> connections;
        private @Nullable Output<Map<String,String>> defaultArguments;
        private @Nullable Output<String> description;
        private @Nullable Output<JobExecutionPropertyArgs> executionProperty;
        private @Nullable Output<String> glueVersion;
        private @Nullable Output<Double> maxCapacity;
        private @Nullable Output<Integer> maxRetries;
        private @Nullable Output<String> name;
        private @Nullable Output<Map<String,String>> nonOverridableArguments;
        private @Nullable Output<JobNotificationPropertyArgs> notificationProperty;
        private @Nullable Output<Integer> numberOfWorkers;
        private Output<String> roleArn;
        private @Nullable Output<String> securityConfiguration;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Integer> timeout;
        private @Nullable Output<String> workerType;

        public Builder() {
    	      // Empty
        }

        public Builder(JobArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.command = defaults.command;
    	      this.connections = defaults.connections;
    	      this.defaultArguments = defaults.defaultArguments;
    	      this.description = defaults.description;
    	      this.executionProperty = defaults.executionProperty;
    	      this.glueVersion = defaults.glueVersion;
    	      this.maxCapacity = defaults.maxCapacity;
    	      this.maxRetries = defaults.maxRetries;
    	      this.name = defaults.name;
    	      this.nonOverridableArguments = defaults.nonOverridableArguments;
    	      this.notificationProperty = defaults.notificationProperty;
    	      this.numberOfWorkers = defaults.numberOfWorkers;
    	      this.roleArn = defaults.roleArn;
    	      this.securityConfiguration = defaults.securityConfiguration;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
    	      this.workerType = defaults.workerType;
        }

        public Builder command(Output<JobCommandArgs> command) {
            this.command = Objects.requireNonNull(command);
            return this;
        }

        public Builder command(JobCommandArgs command) {
            this.command = Output.of(Objects.requireNonNull(command));
            return this;
        }

        public Builder connections(@Nullable Output<List<String>> connections) {
            this.connections = connections;
            return this;
        }

        public Builder connections(@Nullable List<String> connections) {
            this.connections = Output.ofNullable(connections);
            return this;
        }

        public Builder defaultArguments(@Nullable Output<Map<String,String>> defaultArguments) {
            this.defaultArguments = defaultArguments;
            return this;
        }

        public Builder defaultArguments(@Nullable Map<String,String> defaultArguments) {
            this.defaultArguments = Output.ofNullable(defaultArguments);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder executionProperty(@Nullable Output<JobExecutionPropertyArgs> executionProperty) {
            this.executionProperty = executionProperty;
            return this;
        }

        public Builder executionProperty(@Nullable JobExecutionPropertyArgs executionProperty) {
            this.executionProperty = Output.ofNullable(executionProperty);
            return this;
        }

        public Builder glueVersion(@Nullable Output<String> glueVersion) {
            this.glueVersion = glueVersion;
            return this;
        }

        public Builder glueVersion(@Nullable String glueVersion) {
            this.glueVersion = Output.ofNullable(glueVersion);
            return this;
        }

        public Builder maxCapacity(@Nullable Output<Double> maxCapacity) {
            this.maxCapacity = maxCapacity;
            return this;
        }

        public Builder maxCapacity(@Nullable Double maxCapacity) {
            this.maxCapacity = Output.ofNullable(maxCapacity);
            return this;
        }

        public Builder maxRetries(@Nullable Output<Integer> maxRetries) {
            this.maxRetries = maxRetries;
            return this;
        }

        public Builder maxRetries(@Nullable Integer maxRetries) {
            this.maxRetries = Output.ofNullable(maxRetries);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder nonOverridableArguments(@Nullable Output<Map<String,String>> nonOverridableArguments) {
            this.nonOverridableArguments = nonOverridableArguments;
            return this;
        }

        public Builder nonOverridableArguments(@Nullable Map<String,String> nonOverridableArguments) {
            this.nonOverridableArguments = Output.ofNullable(nonOverridableArguments);
            return this;
        }

        public Builder notificationProperty(@Nullable Output<JobNotificationPropertyArgs> notificationProperty) {
            this.notificationProperty = notificationProperty;
            return this;
        }

        public Builder notificationProperty(@Nullable JobNotificationPropertyArgs notificationProperty) {
            this.notificationProperty = Output.ofNullable(notificationProperty);
            return this;
        }

        public Builder numberOfWorkers(@Nullable Output<Integer> numberOfWorkers) {
            this.numberOfWorkers = numberOfWorkers;
            return this;
        }

        public Builder numberOfWorkers(@Nullable Integer numberOfWorkers) {
            this.numberOfWorkers = Output.ofNullable(numberOfWorkers);
            return this;
        }

        public Builder roleArn(Output<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }

        public Builder roleArn(String roleArn) {
            this.roleArn = Output.of(Objects.requireNonNull(roleArn));
            return this;
        }

        public Builder securityConfiguration(@Nullable Output<String> securityConfiguration) {
            this.securityConfiguration = securityConfiguration;
            return this;
        }

        public Builder securityConfiguration(@Nullable String securityConfiguration) {
            this.securityConfiguration = Output.ofNullable(securityConfiguration);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder timeout(@Nullable Output<Integer> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = Output.ofNullable(timeout);
            return this;
        }

        public Builder workerType(@Nullable Output<String> workerType) {
            this.workerType = workerType;
            return this;
        }

        public Builder workerType(@Nullable String workerType) {
            this.workerType = Output.ofNullable(workerType);
            return this;
        }
        public JobArgs build() {
            return new JobArgs(command, connections, defaultArguments, description, executionProperty, glueVersion, maxCapacity, maxRetries, name, nonOverridableArguments, notificationProperty, numberOfWorkers, roleArn, securityConfiguration, tags, timeout, workerType);
        }
    }
}
