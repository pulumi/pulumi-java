// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.route53;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ResolverFirewallConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final ResolverFirewallConfigArgs Empty = new ResolverFirewallConfigArgs();

    /**
     * Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
     * 
     */
    @InputImport(name="firewallFailOpen")
      private final @Nullable Input<String> firewallFailOpen;

    public Input<String> getFirewallFailOpen() {
        return this.firewallFailOpen == null ? Input.empty() : this.firewallFailOpen;
    }

    /**
     * The ID of the VPC that the configuration is for.
     * 
     */
    @InputImport(name="resourceId", required=true)
      private final Input<String> resourceId;

    public Input<String> getResourceId() {
        return this.resourceId;
    }

    public ResolverFirewallConfigArgs(
        @Nullable Input<String> firewallFailOpen,
        Input<String> resourceId) {
        this.firewallFailOpen = firewallFailOpen;
        this.resourceId = Objects.requireNonNull(resourceId, "expected parameter 'resourceId' to be non-null");
    }

    private ResolverFirewallConfigArgs() {
        this.firewallFailOpen = Input.empty();
        this.resourceId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverFirewallConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> firewallFailOpen;
        private Input<String> resourceId;

        public Builder() {
    	      // Empty
        }

        public Builder(ResolverFirewallConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.firewallFailOpen = defaults.firewallFailOpen;
    	      this.resourceId = defaults.resourceId;
        }

        public Builder setFirewallFailOpen(@Nullable Input<String> firewallFailOpen) {
            this.firewallFailOpen = firewallFailOpen;
            return this;
        }

        public Builder setFirewallFailOpen(@Nullable String firewallFailOpen) {
            this.firewallFailOpen = Input.ofNullable(firewallFailOpen);
            return this;
        }

        public Builder setResourceId(Input<String> resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }

        public Builder setResourceId(String resourceId) {
            this.resourceId = Input.of(Objects.requireNonNull(resourceId));
            return this;
        }
        public ResolverFirewallConfigArgs build() {
            return new ResolverFirewallConfigArgs(firewallFailOpen, resourceId);
        }
    }
}
