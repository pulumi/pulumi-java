// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cfg;

import io.pulumi.aws.cfg.inputs.ConfigurationAggregatorAccountAggregationSourceArgs;
import io.pulumi.aws.cfg.inputs.ConfigurationAggregatorOrganizationAggregationSourceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConfigurationAggregatorArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConfigurationAggregatorArgs Empty = new ConfigurationAggregatorArgs();

    /**
     * The account(s) to aggregate config data from as documented below.
     * 
     */
    @InputImport(name="accountAggregationSource")
      private final @Nullable Input<ConfigurationAggregatorAccountAggregationSourceArgs> accountAggregationSource;

    public Input<ConfigurationAggregatorAccountAggregationSourceArgs> getAccountAggregationSource() {
        return this.accountAggregationSource == null ? Input.empty() : this.accountAggregationSource;
    }

    /**
     * The name of the configuration aggregator.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The organization to aggregate config data from as documented below.
     * 
     */
    @InputImport(name="organizationAggregationSource")
      private final @Nullable Input<ConfigurationAggregatorOrganizationAggregationSourceArgs> organizationAggregationSource;

    public Input<ConfigurationAggregatorOrganizationAggregationSourceArgs> getOrganizationAggregationSource() {
        return this.organizationAggregationSource == null ? Input.empty() : this.organizationAggregationSource;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ConfigurationAggregatorArgs(
        @Nullable Input<ConfigurationAggregatorAccountAggregationSourceArgs> accountAggregationSource,
        @Nullable Input<String> name,
        @Nullable Input<ConfigurationAggregatorOrganizationAggregationSourceArgs> organizationAggregationSource,
        @Nullable Input<Map<String,String>> tags) {
        this.accountAggregationSource = accountAggregationSource;
        this.name = name;
        this.organizationAggregationSource = organizationAggregationSource;
        this.tags = tags;
    }

    private ConfigurationAggregatorArgs() {
        this.accountAggregationSource = Input.empty();
        this.name = Input.empty();
        this.organizationAggregationSource = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationAggregatorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ConfigurationAggregatorAccountAggregationSourceArgs> accountAggregationSource;
        private @Nullable Input<String> name;
        private @Nullable Input<ConfigurationAggregatorOrganizationAggregationSourceArgs> organizationAggregationSource;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigurationAggregatorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountAggregationSource = defaults.accountAggregationSource;
    	      this.name = defaults.name;
    	      this.organizationAggregationSource = defaults.organizationAggregationSource;
    	      this.tags = defaults.tags;
        }

        public Builder accountAggregationSource(@Nullable Input<ConfigurationAggregatorAccountAggregationSourceArgs> accountAggregationSource) {
            this.accountAggregationSource = accountAggregationSource;
            return this;
        }

        public Builder accountAggregationSource(@Nullable ConfigurationAggregatorAccountAggregationSourceArgs accountAggregationSource) {
            this.accountAggregationSource = Input.ofNullable(accountAggregationSource);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder organizationAggregationSource(@Nullable Input<ConfigurationAggregatorOrganizationAggregationSourceArgs> organizationAggregationSource) {
            this.organizationAggregationSource = organizationAggregationSource;
            return this;
        }

        public Builder organizationAggregationSource(@Nullable ConfigurationAggregatorOrganizationAggregationSourceArgs organizationAggregationSource) {
            this.organizationAggregationSource = Input.ofNullable(organizationAggregationSource);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public ConfigurationAggregatorArgs build() {
            return new ConfigurationAggregatorArgs(accountAggregationSource, name, organizationAggregationSource, tags);
        }
    }
}
