// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elb;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LoadBalancerBackendServerPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final LoadBalancerBackendServerPolicyArgs Empty = new LoadBalancerBackendServerPolicyArgs();

    /**
     * The instance port to apply the policy to.
     * 
     */
    @Import(name="instancePort", required=true)
      private final Output<Integer> instancePort;

    public Output<Integer> getInstancePort() {
        return this.instancePort;
    }

    /**
     * The load balancer to attach the policy to.
     * 
     */
    @Import(name="loadBalancerName", required=true)
      private final Output<String> loadBalancerName;

    public Output<String> getLoadBalancerName() {
        return this.loadBalancerName;
    }

    /**
     * List of Policy Names to apply to the backend server.
     * 
     */
    @Import(name="policyNames")
      private final @Nullable Output<List<String>> policyNames;

    public Output<List<String>> getPolicyNames() {
        return this.policyNames == null ? Output.empty() : this.policyNames;
    }

    public LoadBalancerBackendServerPolicyArgs(
        Output<Integer> instancePort,
        Output<String> loadBalancerName,
        @Nullable Output<List<String>> policyNames) {
        this.instancePort = Objects.requireNonNull(instancePort, "expected parameter 'instancePort' to be non-null");
        this.loadBalancerName = Objects.requireNonNull(loadBalancerName, "expected parameter 'loadBalancerName' to be non-null");
        this.policyNames = policyNames;
    }

    private LoadBalancerBackendServerPolicyArgs() {
        this.instancePort = Output.empty();
        this.loadBalancerName = Output.empty();
        this.policyNames = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerBackendServerPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> instancePort;
        private Output<String> loadBalancerName;
        private @Nullable Output<List<String>> policyNames;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancerBackendServerPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instancePort = defaults.instancePort;
    	      this.loadBalancerName = defaults.loadBalancerName;
    	      this.policyNames = defaults.policyNames;
        }

        public Builder instancePort(Output<Integer> instancePort) {
            this.instancePort = Objects.requireNonNull(instancePort);
            return this;
        }
        public Builder instancePort(Integer instancePort) {
            this.instancePort = Output.of(Objects.requireNonNull(instancePort));
            return this;
        }
        public Builder loadBalancerName(Output<String> loadBalancerName) {
            this.loadBalancerName = Objects.requireNonNull(loadBalancerName);
            return this;
        }
        public Builder loadBalancerName(String loadBalancerName) {
            this.loadBalancerName = Output.of(Objects.requireNonNull(loadBalancerName));
            return this;
        }
        public Builder policyNames(@Nullable Output<List<String>> policyNames) {
            this.policyNames = policyNames;
            return this;
        }
        public Builder policyNames(@Nullable List<String> policyNames) {
            this.policyNames = Output.ofNullable(policyNames);
            return this;
        }
        public Builder policyNames(String... policyNames) {
            return policyNames(List.of(policyNames));
        }        public LoadBalancerBackendServerPolicyArgs build() {
            return new LoadBalancerBackendServerPolicyArgs(instancePort, loadBalancerName, policyNames);
        }
    }
}
