// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.eks;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AddonArgs extends io.pulumi.resources.ResourceArgs {

    public static final AddonArgs Empty = new AddonArgs();

    /**
     * Name of the EKS add-on. The name must match one of
     * the names returned by [list-addon](https://docs.aws.amazon.com/cli/latest/reference/eks/list-addons.html).
     * 
     */
    @Import(name="addonName", required=true)
      private final Output<String> addonName;

    public Output<String> getAddonName() {
        return this.addonName;
    }

    /**
     * The version of the EKS add-on. The version must
     * match one of the versions returned by [describe-addon-versions](https://docs.aws.amazon.com/cli/latest/reference/eks/describe-addon-versions.html).
     * 
     */
    @Import(name="addonVersion")
      private final @Nullable Output<String> addonVersion;

    public Output<String> getAddonVersion() {
        return this.addonVersion == null ? Codegen.empty() : this.addonVersion;
    }

    /**
     * Name of the EKS Cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and underscores (`^[0-9A-Za-z][A-Za-z0-9\-_]+$`).
     * 
     */
    @Import(name="clusterName", required=true)
      private final Output<String> clusterName;

    public Output<String> getClusterName() {
        return this.clusterName;
    }

    /**
     * Define how to resolve parameter value conflicts
     * when migrating an existing add-on to an Amazon EKS add-on or when applying
     * version updates to the add-on. Valid values are `NONE` and `OVERWRITE`.
     * 
     */
    @Import(name="resolveConflicts")
      private final @Nullable Output<String> resolveConflicts;

    public Output<String> getResolveConflicts() {
        return this.resolveConflicts == null ? Codegen.empty() : this.resolveConflicts;
    }

    /**
     * The Amazon Resource Name (ARN) of an
     * existing IAM role to bind to the add-on's service account. The role must be
     * assigned the IAM permissions required by the add-on. If you don't specify
     * an existing IAM role, then the add-on uses the permissions assigned to the node
     * IAM role. For more information, see [Amazon EKS node IAM role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html)
     * in the Amazon EKS User Guide.
     * 
     */
    @Import(name="serviceAccountRoleArn")
      private final @Nullable Output<String> serviceAccountRoleArn;

    public Output<String> getServiceAccountRoleArn() {
        return this.serviceAccountRoleArn == null ? Codegen.empty() : this.serviceAccountRoleArn;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public AddonArgs(
        Output<String> addonName,
        @Nullable Output<String> addonVersion,
        Output<String> clusterName,
        @Nullable Output<String> resolveConflicts,
        @Nullable Output<String> serviceAccountRoleArn,
        @Nullable Output<Map<String,String>> tags) {
        this.addonName = Objects.requireNonNull(addonName, "expected parameter 'addonName' to be non-null");
        this.addonVersion = addonVersion;
        this.clusterName = Objects.requireNonNull(clusterName, "expected parameter 'clusterName' to be non-null");
        this.resolveConflicts = resolveConflicts;
        this.serviceAccountRoleArn = serviceAccountRoleArn;
        this.tags = tags;
    }

    private AddonArgs() {
        this.addonName = Codegen.empty();
        this.addonVersion = Codegen.empty();
        this.clusterName = Codegen.empty();
        this.resolveConflicts = Codegen.empty();
        this.serviceAccountRoleArn = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AddonArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> addonName;
        private @Nullable Output<String> addonVersion;
        private Output<String> clusterName;
        private @Nullable Output<String> resolveConflicts;
        private @Nullable Output<String> serviceAccountRoleArn;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(AddonArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addonName = defaults.addonName;
    	      this.addonVersion = defaults.addonVersion;
    	      this.clusterName = defaults.clusterName;
    	      this.resolveConflicts = defaults.resolveConflicts;
    	      this.serviceAccountRoleArn = defaults.serviceAccountRoleArn;
    	      this.tags = defaults.tags;
        }

        public Builder addonName(Output<String> addonName) {
            this.addonName = Objects.requireNonNull(addonName);
            return this;
        }
        public Builder addonName(String addonName) {
            this.addonName = Output.of(Objects.requireNonNull(addonName));
            return this;
        }
        public Builder addonVersion(@Nullable Output<String> addonVersion) {
            this.addonVersion = addonVersion;
            return this;
        }
        public Builder addonVersion(@Nullable String addonVersion) {
            this.addonVersion = Codegen.ofNullable(addonVersion);
            return this;
        }
        public Builder clusterName(Output<String> clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }
        public Builder clusterName(String clusterName) {
            this.clusterName = Output.of(Objects.requireNonNull(clusterName));
            return this;
        }
        public Builder resolveConflicts(@Nullable Output<String> resolveConflicts) {
            this.resolveConflicts = resolveConflicts;
            return this;
        }
        public Builder resolveConflicts(@Nullable String resolveConflicts) {
            this.resolveConflicts = Codegen.ofNullable(resolveConflicts);
            return this;
        }
        public Builder serviceAccountRoleArn(@Nullable Output<String> serviceAccountRoleArn) {
            this.serviceAccountRoleArn = serviceAccountRoleArn;
            return this;
        }
        public Builder serviceAccountRoleArn(@Nullable String serviceAccountRoleArn) {
            this.serviceAccountRoleArn = Codegen.ofNullable(serviceAccountRoleArn);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public AddonArgs build() {
            return new AddonArgs(addonName, addonVersion, clusterName, resolveConflicts, serviceAccountRoleArn, tags);
        }
    }
}
