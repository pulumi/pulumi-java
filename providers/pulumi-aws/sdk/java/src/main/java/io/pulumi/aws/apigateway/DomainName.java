// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigateway;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.apigateway.DomainNameArgs;
import io.pulumi.aws.apigateway.inputs.DomainNameState;
import io.pulumi.aws.apigateway.outputs.DomainNameEndpointConfiguration;
import io.pulumi.aws.apigateway.outputs.DomainNameMutualTlsAuthentication;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Registers a custom domain name for use with AWS API Gateway. Additional information about this functionality
 * can be found in the [API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html).
 * 
 * This resource just establishes ownership of and the TLS settings for
 * a particular domain name. An API can be attached to a particular path
 * under the registered domain name using
 * the `aws.apigateway.BasePathMapping` resource.
 * 
 * API Gateway domains can be defined as either 'edge-optimized' or 'regional'.  In an edge-optimized configuration,
 * API Gateway internally creates and manages a CloudFront distribution to route requests on the given hostname. In
 * addition to this resource it's necessary to create a DNS record corresponding to the given domain name which is an alias
 * (either Route53 alias or traditional CNAME) to the Cloudfront domain name exported in the `cloudfront_domain_name`
 * attribute.
 * 
 * In a regional configuration, API Gateway does not create a CloudFront distribution to route requests to the API, though
 * a distribution can be created if needed. In either case, it is necessary to create a DNS record corresponding to the
 * given domain name which is an alias (either Route53 alias or traditional CNAME) to the regional domain name exported in
 * the `regional_domain_name` attribute.
 * 
 * > **Note:** API Gateway requires the use of AWS Certificate Manager (ACM) certificates instead of Identity and Access Management (IAM) certificates in regions that support ACM. Regions that support ACM can be found in the [Regions and Endpoints Documentation](https://docs.aws.amazon.com/general/latest/gr/rande.html#acm_region). To import an existing private key and certificate into ACM or request an ACM certificate, see the `aws.acm.Certificate` resource.
 * 
 * > **Note:** The `aws.apigateway.DomainName` resource expects dependency on the `aws.acm.CertificateValidation` as
 * only verified certificates can be used. This can be made either explicitly by adding the
 * `depends_on = [aws_acm_certificate_validation.cert]` attribute. Or implicitly by referring certificate ARN
 * from the validation resource where it will be available after the resource creation:
 * `regional_certificate_arn = aws_acm_certificate_validation.cert.certificate_arn`.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * API Gateway domain names can be imported using their `name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:apigateway/domainName:DomainName example dev.example.com
 * ```
 * 
 */
@ResourceType(type="aws:apigateway/domainName:DomainName")
public class DomainName extends io.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name (ARN)
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN)
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * The ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificate_name`, `certificate_body`, `certificate_chain`, `certificate_private_key`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    @Export(name="certificateArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> certificateArn;

    /**
     * @return The ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with `certificate_name`, `certificate_body`, `certificate_chain`, `certificate_private_key`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    public Output</* @Nullable */ String> certificateArn() {
        return this.certificateArn;
    }
    /**
     * The certificate issued for the domain name
     * being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and
     * `regional_certificate_name`.
     * 
     */
    @Export(name="certificateBody", type=String.class, parameters={})
    private Output</* @Nullable */ String> certificateBody;

    /**
     * @return The certificate issued for the domain name
     * being registered, in PEM format. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and
     * `regional_certificate_name`.
     * 
     */
    public Output</* @Nullable */ String> certificateBody() {
        return this.certificateBody;
    }
    /**
     * The certificate for the CA that issued the
     * certificate, along with any intermediate CA certificates required to
     * create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`,
     * `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    @Export(name="certificateChain", type=String.class, parameters={})
    private Output</* @Nullable */ String> certificateChain;

    /**
     * @return The certificate for the CA that issued the
     * certificate, along with any intermediate CA certificates required to
     * create an unbroken chain to a certificate trusted by the intended API clients. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`,
     * `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    public Output</* @Nullable */ String> certificateChain() {
        return this.certificateChain;
    }
    /**
     * The unique name to use when registering this
     * certificate as an IAM server certificate. Conflicts with `certificate_arn`, `regional_certificate_arn`, and
     * `regional_certificate_name`. Required if `certificate_arn` is not set.
     * 
     */
    @Export(name="certificateName", type=String.class, parameters={})
    private Output</* @Nullable */ String> certificateName;

    /**
     * @return The unique name to use when registering this
     * certificate as an IAM server certificate. Conflicts with `certificate_arn`, `regional_certificate_arn`, and
     * `regional_certificate_name`. Required if `certificate_arn` is not set.
     * 
     */
    public Output</* @Nullable */ String> certificateName() {
        return this.certificateName;
    }
    /**
     * The private key associated with the
     * domain certificate given in `certificate_body`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    @Export(name="certificatePrivateKey", type=String.class, parameters={})
    private Output</* @Nullable */ String> certificatePrivateKey;

    /**
     * @return The private key associated with the
     * domain certificate given in `certificate_body`. Only valid for `EDGE` endpoint configuration type. Conflicts with `certificate_arn`, `regional_certificate_arn`, and `regional_certificate_name`.
     * 
     */
    public Output</* @Nullable */ String> certificatePrivateKey() {
        return this.certificatePrivateKey;
    }
    /**
     * The upload date associated with the domain certificate.
     * 
     */
    @Export(name="certificateUploadDate", type=String.class, parameters={})
    private Output<String> certificateUploadDate;

    /**
     * @return The upload date associated with the domain certificate.
     * 
     */
    public Output<String> certificateUploadDate() {
        return this.certificateUploadDate;
    }
    /**
     * The hostname created by Cloudfront to represent
     * the distribution that implements this domain name mapping.
     * 
     */
    @Export(name="cloudfrontDomainName", type=String.class, parameters={})
    private Output<String> cloudfrontDomainName;

    /**
     * @return The hostname created by Cloudfront to represent
     * the distribution that implements this domain name mapping.
     * 
     */
    public Output<String> cloudfrontDomainName() {
        return this.cloudfrontDomainName;
    }
    /**
     * For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`)
     * that can be used to create a Route53 alias record for the distribution.
     * 
     */
    @Export(name="cloudfrontZoneId", type=String.class, parameters={})
    private Output<String> cloudfrontZoneId;

    /**
     * @return For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`)
     * that can be used to create a Route53 alias record for the distribution.
     * 
     */
    public Output<String> cloudfrontZoneId() {
        return this.cloudfrontZoneId;
    }
    /**
     * The fully-qualified domain name to register
     * 
     */
    @Export(name="domainName", type=String.class, parameters={})
    private Output<String> domainName;

    /**
     * @return The fully-qualified domain name to register
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }
    /**
     * Configuration block defining API endpoint information including type. Defined below.
     * 
     */
    @Export(name="endpointConfiguration", type=DomainNameEndpointConfiguration.class, parameters={})
    private Output<DomainNameEndpointConfiguration> endpointConfiguration;

    /**
     * @return Configuration block defining API endpoint information including type. Defined below.
     * 
     */
    public Output<DomainNameEndpointConfiguration> endpointConfiguration() {
        return this.endpointConfiguration;
    }
    /**
     * The mutual TLS authentication configuration for the domain name. Defined below.
     * 
     */
    @Export(name="mutualTlsAuthentication", type=DomainNameMutualTlsAuthentication.class, parameters={})
    private Output</* @Nullable */ DomainNameMutualTlsAuthentication> mutualTlsAuthentication;

    /**
     * @return The mutual TLS authentication configuration for the domain name. Defined below.
     * 
     */
    public Output</* @Nullable */ DomainNameMutualTlsAuthentication> mutualTlsAuthentication() {
        return this.mutualTlsAuthentication;
    }
    /**
     * The ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and `certificate_private_key`.
     * 
     */
    @Export(name="regionalCertificateArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> regionalCertificateArn;

    /**
     * @return The ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and `certificate_private_key`.
     * 
     */
    public Output</* @Nullable */ String> regionalCertificateArn() {
        return this.regionalCertificateArn;
    }
    /**
     * The user-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and
     * `certificate_private_key`.
     * 
     */
    @Export(name="regionalCertificateName", type=String.class, parameters={})
    private Output</* @Nullable */ String> regionalCertificateName;

    /**
     * @return The user-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with `certificate_arn`, `certificate_name`, `certificate_body`, `certificate_chain`, and
     * `certificate_private_key`.
     * 
     */
    public Output</* @Nullable */ String> regionalCertificateName() {
        return this.regionalCertificateName;
    }
    /**
     * The hostname for the custom domain's regional endpoint.
     * 
     */
    @Export(name="regionalDomainName", type=String.class, parameters={})
    private Output<String> regionalDomainName;

    /**
     * @return The hostname for the custom domain's regional endpoint.
     * 
     */
    public Output<String> regionalDomainName() {
        return this.regionalDomainName;
    }
    /**
     * The hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
     * 
     */
    @Export(name="regionalZoneId", type=String.class, parameters={})
    private Output<String> regionalZoneId;

    /**
     * @return The hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
     * 
     */
    public Output<String> regionalZoneId() {
        return this.regionalZoneId;
    }
    /**
     * The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
     * 
     */
    @Export(name="securityPolicy", type=String.class, parameters={})
    private Output<String> securityPolicy;

    /**
     * @return The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are `TLS_1_0` and `TLS_1_2`. Must be configured to perform drift detection.
     * 
     */
    public Output<String> securityPolicy() {
        return this.securityPolicy;
    }
    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> tags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DomainName(String name) {
        this(name, DomainNameArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DomainName(String name, DomainNameArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DomainName(String name, DomainNameArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:apigateway/domainName:DomainName", name, args == null ? DomainNameArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DomainName(String name, Output<String> id, @Nullable DomainNameState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:apigateway/domainName:DomainName", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DomainName get(String name, Output<String> id, @Nullable DomainNameState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new DomainName(name, id, state, options);
    }
}
