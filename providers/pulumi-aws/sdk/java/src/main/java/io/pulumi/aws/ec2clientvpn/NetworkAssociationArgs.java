// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2clientvpn;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NetworkAssociationArgs extends io.pulumi.resources.ResourceArgs {

    public static final NetworkAssociationArgs Empty = new NetworkAssociationArgs();

    /**
     * The ID of the Client VPN endpoint.
     * 
     */
    @InputImport(name="clientVpnEndpointId", required=true)
    private final Input<String> clientVpnEndpointId;

    public Input<String> getClientVpnEndpointId() {
        return this.clientVpnEndpointId;
    }

    /**
     * A list of up to five custom security groups to apply to the target network. If not specified, the VPC's default security group is assigned.
     * 
     */
    @InputImport(name="securityGroups")
    private final @Nullable Input<List<String>> securityGroups;

    public Input<List<String>> getSecurityGroups() {
        return this.securityGroups == null ? Input.empty() : this.securityGroups;
    }

    /**
     * The ID of the subnet to associate with the Client VPN endpoint.
     * 
     */
    @InputImport(name="subnetId", required=true)
    private final Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId;
    }

    public NetworkAssociationArgs(
        Input<String> clientVpnEndpointId,
        @Nullable Input<List<String>> securityGroups,
        Input<String> subnetId) {
        this.clientVpnEndpointId = Objects.requireNonNull(clientVpnEndpointId, "expected parameter 'clientVpnEndpointId' to be non-null");
        this.securityGroups = securityGroups;
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
    }

    private NetworkAssociationArgs() {
        this.clientVpnEndpointId = Input.empty();
        this.securityGroups = Input.empty();
        this.subnetId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> clientVpnEndpointId;
        private @Nullable Input<List<String>> securityGroups;
        private Input<String> subnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkAssociationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientVpnEndpointId = defaults.clientVpnEndpointId;
    	      this.securityGroups = defaults.securityGroups;
    	      this.subnetId = defaults.subnetId;
        }

        public Builder setClientVpnEndpointId(Input<String> clientVpnEndpointId) {
            this.clientVpnEndpointId = Objects.requireNonNull(clientVpnEndpointId);
            return this;
        }

        public Builder setClientVpnEndpointId(String clientVpnEndpointId) {
            this.clientVpnEndpointId = Input.of(Objects.requireNonNull(clientVpnEndpointId));
            return this;
        }

        public Builder setSecurityGroups(@Nullable Input<List<String>> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }

        public Builder setSecurityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = Input.ofNullable(securityGroups);
            return this;
        }

        public Builder setSubnetId(Input<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }

        public Builder setSubnetId(String subnetId) {
            this.subnetId = Input.of(Objects.requireNonNull(subnetId));
            return this;
        }
        public NetworkAssociationArgs build() {
            return new NetworkAssociationArgs(clientVpnEndpointId, securityGroups, subnetId);
        }
    }
}
