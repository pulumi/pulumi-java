// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codebuild;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SourceCredentialArgs extends io.pulumi.resources.ResourceArgs {

    public static final SourceCredentialArgs Empty = new SourceCredentialArgs();

    /**
     * The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API.
     * 
     */
    @InputImport(name="authType", required=true)
      private final Input<String> authType;

    public Input<String> getAuthType() {
        return this.authType;
    }

    /**
     * The source provider used for this project.
     * 
     */
    @InputImport(name="serverType", required=true)
      private final Input<String> serverType;

    public Input<String> getServerType() {
        return this.serverType;
    }

    /**
     * For `GitHub` or `GitHub Enterprise`, this is the personal access token. For `Bitbucket`, this is the app password.
     * 
     */
    @InputImport(name="token", required=true)
      private final Input<String> token;

    public Input<String> getToken() {
        return this.token;
    }

    /**
     * The Bitbucket username when the authType is `BASIC_AUTH`. This parameter is not valid for other types of source providers or connections.
     * 
     */
    @InputImport(name="userName")
      private final @Nullable Input<String> userName;

    public Input<String> getUserName() {
        return this.userName == null ? Input.empty() : this.userName;
    }

    public SourceCredentialArgs(
        Input<String> authType,
        Input<String> serverType,
        Input<String> token,
        @Nullable Input<String> userName) {
        this.authType = Objects.requireNonNull(authType, "expected parameter 'authType' to be non-null");
        this.serverType = Objects.requireNonNull(serverType, "expected parameter 'serverType' to be non-null");
        this.token = Objects.requireNonNull(token, "expected parameter 'token' to be non-null");
        this.userName = userName;
    }

    private SourceCredentialArgs() {
        this.authType = Input.empty();
        this.serverType = Input.empty();
        this.token = Input.empty();
        this.userName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SourceCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> authType;
        private Input<String> serverType;
        private Input<String> token;
        private @Nullable Input<String> userName;

        public Builder() {
    	      // Empty
        }

        public Builder(SourceCredentialArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authType = defaults.authType;
    	      this.serverType = defaults.serverType;
    	      this.token = defaults.token;
    	      this.userName = defaults.userName;
        }

        public Builder setAuthType(Input<String> authType) {
            this.authType = Objects.requireNonNull(authType);
            return this;
        }

        public Builder setAuthType(String authType) {
            this.authType = Input.of(Objects.requireNonNull(authType));
            return this;
        }

        public Builder setServerType(Input<String> serverType) {
            this.serverType = Objects.requireNonNull(serverType);
            return this;
        }

        public Builder setServerType(String serverType) {
            this.serverType = Input.of(Objects.requireNonNull(serverType));
            return this;
        }

        public Builder setToken(Input<String> token) {
            this.token = Objects.requireNonNull(token);
            return this;
        }

        public Builder setToken(String token) {
            this.token = Input.of(Objects.requireNonNull(token));
            return this;
        }

        public Builder setUserName(@Nullable Input<String> userName) {
            this.userName = userName;
            return this;
        }

        public Builder setUserName(@Nullable String userName) {
            this.userName = Input.ofNullable(userName);
            return this;
        }
        public SourceCredentialArgs build() {
            return new SourceCredentialArgs(authType, serverType, token, userName);
        }
    }
}
