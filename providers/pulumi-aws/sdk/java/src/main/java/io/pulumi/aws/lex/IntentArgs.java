// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lex;

import io.pulumi.aws.lex.inputs.IntentConclusionStatementArgs;
import io.pulumi.aws.lex.inputs.IntentConfirmationPromptArgs;
import io.pulumi.aws.lex.inputs.IntentDialogCodeHookArgs;
import io.pulumi.aws.lex.inputs.IntentFollowUpPromptArgs;
import io.pulumi.aws.lex.inputs.IntentFulfillmentActivityArgs;
import io.pulumi.aws.lex.inputs.IntentRejectionStatementArgs;
import io.pulumi.aws.lex.inputs.IntentSlotArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IntentArgs extends io.pulumi.resources.ResourceArgs {

    public static final IntentArgs Empty = new IntentArgs();

    /**
     * The statement that you want Amazon Lex to convey to the user
     * after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
     * you provide a Lambda function in the `fulfillment_activity`. If you return the intent to the client
     * application, you can't specify this element. The `follow_up_prompt` and `conclusion_statement` are
     * mutually exclusive. You can specify only one. Attributes are documented under statement.
     * 
     */
    @Import(name="conclusionStatement")
      private final @Nullable Output<IntentConclusionStatementArgs> conclusionStatement;

    public Output<IntentConclusionStatementArgs> getConclusionStatement() {
        return this.conclusionStatement == null ? Output.empty() : this.conclusionStatement;
    }

    /**
     * Prompts the user to confirm the intent. This question should
     * have a yes or no answer. You you must provide both the `rejection_statement` and `confirmation_prompt`,
     * or neither. Attributes are documented under prompt.
     * 
     */
    @Import(name="confirmationPrompt")
      private final @Nullable Output<IntentConfirmationPromptArgs> confirmationPrompt;

    public Output<IntentConfirmationPromptArgs> getConfirmationPrompt() {
        return this.confirmationPrompt == null ? Output.empty() : this.confirmationPrompt;
    }

    /**
     * Determines if a new slot type version is created when the initial
     * resource is created and on each update. Defaults to `false`.
     * 
     */
    @Import(name="createVersion")
      private final @Nullable Output<Boolean> createVersion;

    public Output<Boolean> getCreateVersion() {
        return this.createVersion == null ? Output.empty() : this.createVersion;
    }

    /**
     * A description of the bot. Must be less than or equal to 200 characters in length.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Specifies a Lambda function to invoke for each user input. You can
     * invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
     * 
     */
    @Import(name="dialogCodeHook")
      private final @Nullable Output<IntentDialogCodeHookArgs> dialogCodeHook;

    public Output<IntentDialogCodeHookArgs> getDialogCodeHook() {
        return this.dialogCodeHook == null ? Output.empty() : this.dialogCodeHook;
    }

    /**
     * Amazon Lex uses this prompt to solicit additional activity after
     * fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
     * user to order a drink. The `follow_up_prompt` field and the `conclusion_statement` field are mutually
     * exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
     * 
     */
    @Import(name="followUpPrompt")
      private final @Nullable Output<IntentFollowUpPromptArgs> followUpPrompt;

    public Output<IntentFollowUpPromptArgs> getFollowUpPrompt() {
        return this.followUpPrompt == null ? Output.empty() : this.followUpPrompt;
    }

    /**
     * Describes how the intent is fulfilled. For example, after a
     * user provides all of the information for a pizza order, `fulfillment_activity` defines how the bot
     * places an order with a local pizza store. Attributes are documented under fulfillment_activity.
     * 
     */
    @Import(name="fulfillmentActivity", required=true)
      private final Output<IntentFulfillmentActivityArgs> fulfillmentActivity;

    public Output<IntentFulfillmentActivityArgs> getFulfillmentActivity() {
        return this.fulfillmentActivity;
    }

    /**
     * The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * A unique identifier for the built-in intent to base this
     * intent on. To find the signature for an intent, see
     * [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
     * in the Alexa Skills Kit.
     * 
     */
    @Import(name="parentIntentSignature")
      private final @Nullable Output<String> parentIntentSignature;

    public Output<String> getParentIntentSignature() {
        return this.parentIntentSignature == null ? Output.empty() : this.parentIntentSignature;
    }

    /**
     * If the user answers "no" to the question defined in the prompt field,
     * Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
     * documented below under statement.
     * 
     */
    @Import(name="rejectionStatement")
      private final @Nullable Output<IntentRejectionStatementArgs> rejectionStatement;

    public Output<IntentRejectionStatementArgs> getRejectionStatement() {
        return this.rejectionStatement == null ? Output.empty() : this.rejectionStatement;
    }

    /**
     * If you know a specific pattern with which users might respond to
     * an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
     * is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
     * 
     */
    @Import(name="sampleUtterances")
      private final @Nullable Output<List<String>> sampleUtterances;

    public Output<List<String>> getSampleUtterances() {
        return this.sampleUtterances == null ? Output.empty() : this.sampleUtterances;
    }

    /**
     * An list of intent slots. At runtime, Amazon Lex elicits required slot values
     * from the user using prompts defined in the slots. Attributes are documented under slot.
     * 
     */
    @Import(name="slots")
      private final @Nullable Output<List<IntentSlotArgs>> slots;

    public Output<List<IntentSlotArgs>> getSlots() {
        return this.slots == null ? Output.empty() : this.slots;
    }

    public IntentArgs(
        @Nullable Output<IntentConclusionStatementArgs> conclusionStatement,
        @Nullable Output<IntentConfirmationPromptArgs> confirmationPrompt,
        @Nullable Output<Boolean> createVersion,
        @Nullable Output<String> description,
        @Nullable Output<IntentDialogCodeHookArgs> dialogCodeHook,
        @Nullable Output<IntentFollowUpPromptArgs> followUpPrompt,
        Output<IntentFulfillmentActivityArgs> fulfillmentActivity,
        @Nullable Output<String> name,
        @Nullable Output<String> parentIntentSignature,
        @Nullable Output<IntentRejectionStatementArgs> rejectionStatement,
        @Nullable Output<List<String>> sampleUtterances,
        @Nullable Output<List<IntentSlotArgs>> slots) {
        this.conclusionStatement = conclusionStatement;
        this.confirmationPrompt = confirmationPrompt;
        this.createVersion = createVersion;
        this.description = description;
        this.dialogCodeHook = dialogCodeHook;
        this.followUpPrompt = followUpPrompt;
        this.fulfillmentActivity = Objects.requireNonNull(fulfillmentActivity, "expected parameter 'fulfillmentActivity' to be non-null");
        this.name = name;
        this.parentIntentSignature = parentIntentSignature;
        this.rejectionStatement = rejectionStatement;
        this.sampleUtterances = sampleUtterances;
        this.slots = slots;
    }

    private IntentArgs() {
        this.conclusionStatement = Output.empty();
        this.confirmationPrompt = Output.empty();
        this.createVersion = Output.empty();
        this.description = Output.empty();
        this.dialogCodeHook = Output.empty();
        this.followUpPrompt = Output.empty();
        this.fulfillmentActivity = Output.empty();
        this.name = Output.empty();
        this.parentIntentSignature = Output.empty();
        this.rejectionStatement = Output.empty();
        this.sampleUtterances = Output.empty();
        this.slots = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IntentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<IntentConclusionStatementArgs> conclusionStatement;
        private @Nullable Output<IntentConfirmationPromptArgs> confirmationPrompt;
        private @Nullable Output<Boolean> createVersion;
        private @Nullable Output<String> description;
        private @Nullable Output<IntentDialogCodeHookArgs> dialogCodeHook;
        private @Nullable Output<IntentFollowUpPromptArgs> followUpPrompt;
        private Output<IntentFulfillmentActivityArgs> fulfillmentActivity;
        private @Nullable Output<String> name;
        private @Nullable Output<String> parentIntentSignature;
        private @Nullable Output<IntentRejectionStatementArgs> rejectionStatement;
        private @Nullable Output<List<String>> sampleUtterances;
        private @Nullable Output<List<IntentSlotArgs>> slots;

        public Builder() {
    	      // Empty
        }

        public Builder(IntentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conclusionStatement = defaults.conclusionStatement;
    	      this.confirmationPrompt = defaults.confirmationPrompt;
    	      this.createVersion = defaults.createVersion;
    	      this.description = defaults.description;
    	      this.dialogCodeHook = defaults.dialogCodeHook;
    	      this.followUpPrompt = defaults.followUpPrompt;
    	      this.fulfillmentActivity = defaults.fulfillmentActivity;
    	      this.name = defaults.name;
    	      this.parentIntentSignature = defaults.parentIntentSignature;
    	      this.rejectionStatement = defaults.rejectionStatement;
    	      this.sampleUtterances = defaults.sampleUtterances;
    	      this.slots = defaults.slots;
        }

        public Builder conclusionStatement(@Nullable Output<IntentConclusionStatementArgs> conclusionStatement) {
            this.conclusionStatement = conclusionStatement;
            return this;
        }
        public Builder conclusionStatement(@Nullable IntentConclusionStatementArgs conclusionStatement) {
            this.conclusionStatement = Output.ofNullable(conclusionStatement);
            return this;
        }
        public Builder confirmationPrompt(@Nullable Output<IntentConfirmationPromptArgs> confirmationPrompt) {
            this.confirmationPrompt = confirmationPrompt;
            return this;
        }
        public Builder confirmationPrompt(@Nullable IntentConfirmationPromptArgs confirmationPrompt) {
            this.confirmationPrompt = Output.ofNullable(confirmationPrompt);
            return this;
        }
        public Builder createVersion(@Nullable Output<Boolean> createVersion) {
            this.createVersion = createVersion;
            return this;
        }
        public Builder createVersion(@Nullable Boolean createVersion) {
            this.createVersion = Output.ofNullable(createVersion);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder dialogCodeHook(@Nullable Output<IntentDialogCodeHookArgs> dialogCodeHook) {
            this.dialogCodeHook = dialogCodeHook;
            return this;
        }
        public Builder dialogCodeHook(@Nullable IntentDialogCodeHookArgs dialogCodeHook) {
            this.dialogCodeHook = Output.ofNullable(dialogCodeHook);
            return this;
        }
        public Builder followUpPrompt(@Nullable Output<IntentFollowUpPromptArgs> followUpPrompt) {
            this.followUpPrompt = followUpPrompt;
            return this;
        }
        public Builder followUpPrompt(@Nullable IntentFollowUpPromptArgs followUpPrompt) {
            this.followUpPrompt = Output.ofNullable(followUpPrompt);
            return this;
        }
        public Builder fulfillmentActivity(Output<IntentFulfillmentActivityArgs> fulfillmentActivity) {
            this.fulfillmentActivity = Objects.requireNonNull(fulfillmentActivity);
            return this;
        }
        public Builder fulfillmentActivity(IntentFulfillmentActivityArgs fulfillmentActivity) {
            this.fulfillmentActivity = Output.of(Objects.requireNonNull(fulfillmentActivity));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder parentIntentSignature(@Nullable Output<String> parentIntentSignature) {
            this.parentIntentSignature = parentIntentSignature;
            return this;
        }
        public Builder parentIntentSignature(@Nullable String parentIntentSignature) {
            this.parentIntentSignature = Output.ofNullable(parentIntentSignature);
            return this;
        }
        public Builder rejectionStatement(@Nullable Output<IntentRejectionStatementArgs> rejectionStatement) {
            this.rejectionStatement = rejectionStatement;
            return this;
        }
        public Builder rejectionStatement(@Nullable IntentRejectionStatementArgs rejectionStatement) {
            this.rejectionStatement = Output.ofNullable(rejectionStatement);
            return this;
        }
        public Builder sampleUtterances(@Nullable Output<List<String>> sampleUtterances) {
            this.sampleUtterances = sampleUtterances;
            return this;
        }
        public Builder sampleUtterances(@Nullable List<String> sampleUtterances) {
            this.sampleUtterances = Output.ofNullable(sampleUtterances);
            return this;
        }
        public Builder sampleUtterances(String... sampleUtterances) {
            return sampleUtterances(List.of(sampleUtterances));
        }
        public Builder slots(@Nullable Output<List<IntentSlotArgs>> slots) {
            this.slots = slots;
            return this;
        }
        public Builder slots(@Nullable List<IntentSlotArgs> slots) {
            this.slots = Output.ofNullable(slots);
            return this;
        }
        public Builder slots(IntentSlotArgs... slots) {
            return slots(List.of(slots));
        }        public IntentArgs build() {
            return new IntentArgs(conclusionStatement, confirmationPrompt, createVersion, description, dialogCodeHook, followUpPrompt, fulfillmentActivity, name, parentIntentSignature, rejectionStatement, sampleUtterances, slots);
        }
    }
}
