// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecs.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterConfigurationExecuteCommandConfigurationLogConfigurationGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClusterConfigurationExecuteCommandConfigurationLogConfigurationGetArgs Empty = new ClusterConfigurationExecuteCommandConfigurationLogConfigurationGetArgs();

    /**
     * Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
     * 
     */
    @InputImport(name="cloudWatchEncryptionEnabled")
      private final @Nullable Input<Boolean> cloudWatchEncryptionEnabled;

    public Input<Boolean> getCloudWatchEncryptionEnabled() {
        return this.cloudWatchEncryptionEnabled == null ? Input.empty() : this.cloudWatchEncryptionEnabled;
    }

    /**
     * The name of the CloudWatch log group to send logs to.
     * 
     */
    @InputImport(name="cloudWatchLogGroupName")
      private final @Nullable Input<String> cloudWatchLogGroupName;

    public Input<String> getCloudWatchLogGroupName() {
        return this.cloudWatchLogGroupName == null ? Input.empty() : this.cloudWatchLogGroupName;
    }

    /**
     * Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
     * 
     */
    @InputImport(name="s3BucketEncryptionEnabled")
      private final @Nullable Input<Boolean> s3BucketEncryptionEnabled;

    public Input<Boolean> getS3BucketEncryptionEnabled() {
        return this.s3BucketEncryptionEnabled == null ? Input.empty() : this.s3BucketEncryptionEnabled;
    }

    /**
     * The name of the S3 bucket to send logs to.
     * 
     */
    @InputImport(name="s3BucketName")
      private final @Nullable Input<String> s3BucketName;

    public Input<String> getS3BucketName() {
        return this.s3BucketName == null ? Input.empty() : this.s3BucketName;
    }

    /**
     * An optional folder in the S3 bucket to place logs in.
     * 
     */
    @InputImport(name="s3KeyPrefix")
      private final @Nullable Input<String> s3KeyPrefix;

    public Input<String> getS3KeyPrefix() {
        return this.s3KeyPrefix == null ? Input.empty() : this.s3KeyPrefix;
    }

    public ClusterConfigurationExecuteCommandConfigurationLogConfigurationGetArgs(
        @Nullable Input<Boolean> cloudWatchEncryptionEnabled,
        @Nullable Input<String> cloudWatchLogGroupName,
        @Nullable Input<Boolean> s3BucketEncryptionEnabled,
        @Nullable Input<String> s3BucketName,
        @Nullable Input<String> s3KeyPrefix) {
        this.cloudWatchEncryptionEnabled = cloudWatchEncryptionEnabled;
        this.cloudWatchLogGroupName = cloudWatchLogGroupName;
        this.s3BucketEncryptionEnabled = s3BucketEncryptionEnabled;
        this.s3BucketName = s3BucketName;
        this.s3KeyPrefix = s3KeyPrefix;
    }

    private ClusterConfigurationExecuteCommandConfigurationLogConfigurationGetArgs() {
        this.cloudWatchEncryptionEnabled = Input.empty();
        this.cloudWatchLogGroupName = Input.empty();
        this.s3BucketEncryptionEnabled = Input.empty();
        this.s3BucketName = Input.empty();
        this.s3KeyPrefix = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterConfigurationExecuteCommandConfigurationLogConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> cloudWatchEncryptionEnabled;
        private @Nullable Input<String> cloudWatchLogGroupName;
        private @Nullable Input<Boolean> s3BucketEncryptionEnabled;
        private @Nullable Input<String> s3BucketName;
        private @Nullable Input<String> s3KeyPrefix;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterConfigurationExecuteCommandConfigurationLogConfigurationGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudWatchEncryptionEnabled = defaults.cloudWatchEncryptionEnabled;
    	      this.cloudWatchLogGroupName = defaults.cloudWatchLogGroupName;
    	      this.s3BucketEncryptionEnabled = defaults.s3BucketEncryptionEnabled;
    	      this.s3BucketName = defaults.s3BucketName;
    	      this.s3KeyPrefix = defaults.s3KeyPrefix;
        }

        public Builder cloudWatchEncryptionEnabled(@Nullable Input<Boolean> cloudWatchEncryptionEnabled) {
            this.cloudWatchEncryptionEnabled = cloudWatchEncryptionEnabled;
            return this;
        }

        public Builder cloudWatchEncryptionEnabled(@Nullable Boolean cloudWatchEncryptionEnabled) {
            this.cloudWatchEncryptionEnabled = Input.ofNullable(cloudWatchEncryptionEnabled);
            return this;
        }

        public Builder cloudWatchLogGroupName(@Nullable Input<String> cloudWatchLogGroupName) {
            this.cloudWatchLogGroupName = cloudWatchLogGroupName;
            return this;
        }

        public Builder cloudWatchLogGroupName(@Nullable String cloudWatchLogGroupName) {
            this.cloudWatchLogGroupName = Input.ofNullable(cloudWatchLogGroupName);
            return this;
        }

        public Builder s3BucketEncryptionEnabled(@Nullable Input<Boolean> s3BucketEncryptionEnabled) {
            this.s3BucketEncryptionEnabled = s3BucketEncryptionEnabled;
            return this;
        }

        public Builder s3BucketEncryptionEnabled(@Nullable Boolean s3BucketEncryptionEnabled) {
            this.s3BucketEncryptionEnabled = Input.ofNullable(s3BucketEncryptionEnabled);
            return this;
        }

        public Builder s3BucketName(@Nullable Input<String> s3BucketName) {
            this.s3BucketName = s3BucketName;
            return this;
        }

        public Builder s3BucketName(@Nullable String s3BucketName) {
            this.s3BucketName = Input.ofNullable(s3BucketName);
            return this;
        }

        public Builder s3KeyPrefix(@Nullable Input<String> s3KeyPrefix) {
            this.s3KeyPrefix = s3KeyPrefix;
            return this;
        }

        public Builder s3KeyPrefix(@Nullable String s3KeyPrefix) {
            this.s3KeyPrefix = Input.ofNullable(s3KeyPrefix);
            return this;
        }
        public ClusterConfigurationExecuteCommandConfigurationLogConfigurationGetArgs build() {
            return new ClusterConfigurationExecuteCommandConfigurationLogConfigurationGetArgs(cloudWatchEncryptionEnabled, cloudWatchLogGroupName, s3BucketEncryptionEnabled, s3BucketName, s3KeyPrefix);
        }
    }
}
