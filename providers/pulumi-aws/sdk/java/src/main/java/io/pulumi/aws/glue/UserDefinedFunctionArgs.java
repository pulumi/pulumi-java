// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.glue.inputs.UserDefinedFunctionResourceUriArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserDefinedFunctionArgs extends io.pulumi.resources.ResourceArgs {

    public static final UserDefinedFunctionArgs Empty = new UserDefinedFunctionArgs();

    /**
     * ID of the Glue Catalog to create the function in. If omitted, this defaults to the AWS Account ID.
     * 
     */
    @Import(name="catalogId")
      private final @Nullable Output<String> catalogId;

    public Output<String> catalogId() {
        return this.catalogId == null ? Codegen.empty() : this.catalogId;
    }

    /**
     * The Java class that contains the function code.
     * 
     */
    @Import(name="className", required=true)
      private final Output<String> className;

    public Output<String> className() {
        return this.className;
    }

    /**
     * The name of the Database to create the Function.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the function.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The owner of the function.
     * 
     */
    @Import(name="ownerName", required=true)
      private final Output<String> ownerName;

    public Output<String> ownerName() {
        return this.ownerName;
    }

    /**
     * The owner type. can be one of `USER`, `ROLE`, and `GROUP`.
     * 
     */
    @Import(name="ownerType", required=true)
      private final Output<String> ownerType;

    public Output<String> ownerType() {
        return this.ownerType;
    }

    /**
     * The configuration block for Resource URIs. See resource uris below for more details.
     * 
     */
    @Import(name="resourceUris")
      private final @Nullable Output<List<UserDefinedFunctionResourceUriArgs>> resourceUris;

    public Output<List<UserDefinedFunctionResourceUriArgs>> resourceUris() {
        return this.resourceUris == null ? Codegen.empty() : this.resourceUris;
    }

    public UserDefinedFunctionArgs(
        @Nullable Output<String> catalogId,
        Output<String> className,
        Output<String> databaseName,
        @Nullable Output<String> name,
        Output<String> ownerName,
        Output<String> ownerType,
        @Nullable Output<List<UserDefinedFunctionResourceUriArgs>> resourceUris) {
        this.catalogId = catalogId;
        this.className = Objects.requireNonNull(className, "expected parameter 'className' to be non-null");
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.name = name;
        this.ownerName = Objects.requireNonNull(ownerName, "expected parameter 'ownerName' to be non-null");
        this.ownerType = Objects.requireNonNull(ownerType, "expected parameter 'ownerType' to be non-null");
        this.resourceUris = resourceUris;
    }

    private UserDefinedFunctionArgs() {
        this.catalogId = Codegen.empty();
        this.className = Codegen.empty();
        this.databaseName = Codegen.empty();
        this.name = Codegen.empty();
        this.ownerName = Codegen.empty();
        this.ownerType = Codegen.empty();
        this.resourceUris = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserDefinedFunctionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> catalogId;
        private Output<String> className;
        private Output<String> databaseName;
        private @Nullable Output<String> name;
        private Output<String> ownerName;
        private Output<String> ownerType;
        private @Nullable Output<List<UserDefinedFunctionResourceUriArgs>> resourceUris;

        public Builder() {
    	      // Empty
        }

        public Builder(UserDefinedFunctionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.className = defaults.className;
    	      this.databaseName = defaults.databaseName;
    	      this.name = defaults.name;
    	      this.ownerName = defaults.ownerName;
    	      this.ownerType = defaults.ownerType;
    	      this.resourceUris = defaults.resourceUris;
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            this.catalogId = catalogId;
            return this;
        }
        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = Codegen.ofNullable(catalogId);
            return this;
        }
        public Builder className(Output<String> className) {
            this.className = Objects.requireNonNull(className);
            return this;
        }
        public Builder className(String className) {
            this.className = Output.of(Objects.requireNonNull(className));
            return this;
        }
        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder ownerName(Output<String> ownerName) {
            this.ownerName = Objects.requireNonNull(ownerName);
            return this;
        }
        public Builder ownerName(String ownerName) {
            this.ownerName = Output.of(Objects.requireNonNull(ownerName));
            return this;
        }
        public Builder ownerType(Output<String> ownerType) {
            this.ownerType = Objects.requireNonNull(ownerType);
            return this;
        }
        public Builder ownerType(String ownerType) {
            this.ownerType = Output.of(Objects.requireNonNull(ownerType));
            return this;
        }
        public Builder resourceUris(@Nullable Output<List<UserDefinedFunctionResourceUriArgs>> resourceUris) {
            this.resourceUris = resourceUris;
            return this;
        }
        public Builder resourceUris(@Nullable List<UserDefinedFunctionResourceUriArgs> resourceUris) {
            this.resourceUris = Codegen.ofNullable(resourceUris);
            return this;
        }
        public Builder resourceUris(UserDefinedFunctionResourceUriArgs... resourceUris) {
            return resourceUris(List.of(resourceUris));
        }        public UserDefinedFunctionArgs build() {
            return new UserDefinedFunctionArgs(catalogId, className, databaseName, name, ownerName, ownerType, resourceUris);
        }
    }
}
