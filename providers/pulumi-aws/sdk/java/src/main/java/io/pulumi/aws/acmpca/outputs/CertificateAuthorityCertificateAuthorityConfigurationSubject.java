// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.acmpca.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class CertificateAuthorityCertificateAuthorityConfigurationSubject {
    /**
     * Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    private final @Nullable String commonName;
    /**
     * Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
     * 
     */
    private final @Nullable String country;
    /**
     * Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    private final @Nullable String distinguishedNameQualifier;
    /**
     * Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
     * 
     */
    private final @Nullable String generationQualifier;
    /**
     * First name. Must be less than or equal to 16 characters in length.
     * 
     */
    private final @Nullable String givenName;
    /**
     * Concatenation that typically contains the first letter of the `given_name`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
     * 
     */
    private final @Nullable String initials;
    /**
     * The locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
     * 
     */
    private final @Nullable String locality;
    /**
     * Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
     * 
     */
    private final @Nullable String organization;
    /**
     * A subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
     * 
     */
    private final @Nullable String organizationalUnit;
    /**
     * Typically a shortened version of a longer `given_name`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
     * 
     */
    private final @Nullable String pseudonym;
    /**
     * State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
     * 
     */
    private final @Nullable String state;
    /**
     * Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
     * 
     */
    private final @Nullable String surname;
    /**
     * A title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    private final @Nullable String title;

    @OutputCustomType.Constructor({"commonName","country","distinguishedNameQualifier","generationQualifier","givenName","initials","locality","organization","organizationalUnit","pseudonym","state","surname","title"})
    private CertificateAuthorityCertificateAuthorityConfigurationSubject(
        @Nullable String commonName,
        @Nullable String country,
        @Nullable String distinguishedNameQualifier,
        @Nullable String generationQualifier,
        @Nullable String givenName,
        @Nullable String initials,
        @Nullable String locality,
        @Nullable String organization,
        @Nullable String organizationalUnit,
        @Nullable String pseudonym,
        @Nullable String state,
        @Nullable String surname,
        @Nullable String title) {
        this.commonName = commonName;
        this.country = country;
        this.distinguishedNameQualifier = distinguishedNameQualifier;
        this.generationQualifier = generationQualifier;
        this.givenName = givenName;
        this.initials = initials;
        this.locality = locality;
        this.organization = organization;
        this.organizationalUnit = organizationalUnit;
        this.pseudonym = pseudonym;
        this.state = state;
        this.surname = surname;
        this.title = title;
    }

    /**
     * Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    public Optional<String> getCommonName() {
        return Optional.ofNullable(this.commonName);
    }
    /**
     * Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
     * 
     */
    public Optional<String> getCountry() {
        return Optional.ofNullable(this.country);
    }
    /**
     * Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    public Optional<String> getDistinguishedNameQualifier() {
        return Optional.ofNullable(this.distinguishedNameQualifier);
    }
    /**
     * Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
     * 
     */
    public Optional<String> getGenerationQualifier() {
        return Optional.ofNullable(this.generationQualifier);
    }
    /**
     * First name. Must be less than or equal to 16 characters in length.
     * 
     */
    public Optional<String> getGivenName() {
        return Optional.ofNullable(this.givenName);
    }
    /**
     * Concatenation that typically contains the first letter of the `given_name`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
     * 
     */
    public Optional<String> getInitials() {
        return Optional.ofNullable(this.initials);
    }
    /**
     * The locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
     * 
     */
    public Optional<String> getLocality() {
        return Optional.ofNullable(this.locality);
    }
    /**
     * Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
     * 
     */
    public Optional<String> getOrganization() {
        return Optional.ofNullable(this.organization);
    }
    /**
     * A subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
     * 
     */
    public Optional<String> getOrganizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }
    /**
     * Typically a shortened version of a longer `given_name`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
     * 
     */
    public Optional<String> getPseudonym() {
        return Optional.ofNullable(this.pseudonym);
    }
    /**
     * State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
     * 
     */
    public Optional<String> getState() {
        return Optional.ofNullable(this.state);
    }
    /**
     * Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
     * 
     */
    public Optional<String> getSurname() {
        return Optional.ofNullable(this.surname);
    }
    /**
     * A title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
     * 
     */
    public Optional<String> getTitle() {
        return Optional.ofNullable(this.title);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateAuthorityCertificateAuthorityConfigurationSubject defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String commonName;
        private @Nullable String country;
        private @Nullable String distinguishedNameQualifier;
        private @Nullable String generationQualifier;
        private @Nullable String givenName;
        private @Nullable String initials;
        private @Nullable String locality;
        private @Nullable String organization;
        private @Nullable String organizationalUnit;
        private @Nullable String pseudonym;
        private @Nullable String state;
        private @Nullable String surname;
        private @Nullable String title;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateAuthorityCertificateAuthorityConfigurationSubject defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commonName = defaults.commonName;
    	      this.country = defaults.country;
    	      this.distinguishedNameQualifier = defaults.distinguishedNameQualifier;
    	      this.generationQualifier = defaults.generationQualifier;
    	      this.givenName = defaults.givenName;
    	      this.initials = defaults.initials;
    	      this.locality = defaults.locality;
    	      this.organization = defaults.organization;
    	      this.organizationalUnit = defaults.organizationalUnit;
    	      this.pseudonym = defaults.pseudonym;
    	      this.state = defaults.state;
    	      this.surname = defaults.surname;
    	      this.title = defaults.title;
        }

        public Builder setCommonName(@Nullable String commonName) {
            this.commonName = commonName;
            return this;
        }

        public Builder setCountry(@Nullable String country) {
            this.country = country;
            return this;
        }

        public Builder setDistinguishedNameQualifier(@Nullable String distinguishedNameQualifier) {
            this.distinguishedNameQualifier = distinguishedNameQualifier;
            return this;
        }

        public Builder setGenerationQualifier(@Nullable String generationQualifier) {
            this.generationQualifier = generationQualifier;
            return this;
        }

        public Builder setGivenName(@Nullable String givenName) {
            this.givenName = givenName;
            return this;
        }

        public Builder setInitials(@Nullable String initials) {
            this.initials = initials;
            return this;
        }

        public Builder setLocality(@Nullable String locality) {
            this.locality = locality;
            return this;
        }

        public Builder setOrganization(@Nullable String organization) {
            this.organization = organization;
            return this;
        }

        public Builder setOrganizationalUnit(@Nullable String organizationalUnit) {
            this.organizationalUnit = organizationalUnit;
            return this;
        }

        public Builder setPseudonym(@Nullable String pseudonym) {
            this.pseudonym = pseudonym;
            return this;
        }

        public Builder setState(@Nullable String state) {
            this.state = state;
            return this;
        }

        public Builder setSurname(@Nullable String surname) {
            this.surname = surname;
            return this;
        }

        public Builder setTitle(@Nullable String title) {
            this.title = title;
            return this;
        }
        public CertificateAuthorityCertificateAuthorityConfigurationSubject build() {
            return new CertificateAuthorityCertificateAuthorityConfigurationSubject(commonName, country, distinguishedNameQualifier, generationQualifier, givenName, initials, locality, organization, organizationalUnit, pseudonym, state, surname, title);
        }
    }
}
