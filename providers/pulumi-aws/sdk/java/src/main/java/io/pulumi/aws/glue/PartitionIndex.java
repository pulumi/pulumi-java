// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.glue.PartitionIndexArgs;
import io.pulumi.aws.glue.inputs.PartitionIndexState;
import io.pulumi.aws.glue.outputs.PartitionIndexPartitionIndex;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleCatalogDatabase = new aws.glue.CatalogDatabase("exampleCatalogDatabase", {name: "example"});
 * const exampleCatalogTable = new aws.glue.CatalogTable("exampleCatalogTable", {
 *     name: "example",
 *     databaseName: exampleCatalogDatabase.name,
 *     owner: "my_owner",
 *     retention: 1,
 *     tableType: "VIRTUAL_VIEW",
 *     viewExpandedText: "view_expanded_text_1",
 *     viewOriginalText: "view_original_text_1",
 *     storageDescriptor: {
 *         bucketColumns: ["bucket_column_1"],
 *         compressed: false,
 *         inputFormat: "SequenceFileInputFormat",
 *         location: "my_location",
 *         numberOfBuckets: 1,
 *         outputFormat: "SequenceFileInputFormat",
 *         storedAsSubDirectories: false,
 *         parameters: {
 *             param1: "param1_val",
 *         },
 *         columns: [
 *             {
 *                 name: "my_column_1",
 *                 type: "int",
 *                 comment: "my_column1_comment",
 *             },
 *             {
 *                 name: "my_column_2",
 *                 type: "string",
 *                 comment: "my_column2_comment",
 *             },
 *         ],
 *         serDeInfo: {
 *             name: "ser_de_name",
 *             parameters: {
 *                 param1: "param_val_1",
 *             },
 *             serializationLibrary: "org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe",
 *         },
 *         sortColumns: [{
 *             column: "my_column_1",
 *             sortOrder: 1,
 *         }],
 *         skewedInfo: {
 *             skewedColumnNames: ["my_column_1"],
 *             skewedColumnValueLocationMaps: {
 *                 my_column_1: "my_column_1_val_loc_map",
 *             },
 *             skewedColumnValues: ["skewed_val_1"],
 *         },
 *     },
 *     partitionKeys: [
 *         {
 *             name: "my_column_1",
 *             type: "int",
 *             comment: "my_column_1_comment",
 *         },
 *         {
 *             name: "my_column_2",
 *             type: "string",
 *             comment: "my_column_2_comment",
 *         },
 *     ],
 *     parameters: {
 *         param1: "param1_val",
 *     },
 * });
 * const examplePartitionIndex = new aws.glue.PartitionIndex("examplePartitionIndex", {
 *     databaseName: exampleCatalogDatabase.name,
 *     tableName: exampleCatalogTable.name,
 *     partitionIndex: {
 *         indexName: "example",
 *         keys: [
 *             "my_column_1",
 *             "my_column_2",
 *         ],
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_catalog_database = aws.glue.CatalogDatabase("exampleCatalogDatabase", name="example")
 * example_catalog_table = aws.glue.CatalogTable("exampleCatalogTable",
 *     name="example",
 *     database_name=example_catalog_database.name,
 *     owner="my_owner",
 *     retention=1,
 *     table_type="VIRTUAL_VIEW",
 *     view_expanded_text="view_expanded_text_1",
 *     view_original_text="view_original_text_1",
 *     storage_descriptor=aws.glue.CatalogTableStorageDescriptorArgs(
 *         bucket_columns=["bucket_column_1"],
 *         compressed=False,
 *         input_format="SequenceFileInputFormat",
 *         location="my_location",
 *         number_of_buckets=1,
 *         output_format="SequenceFileInputFormat",
 *         stored_as_sub_directories=False,
 *         parameters={
 *             "param1": "param1_val",
 *         },
 *         columns=[
 *             aws.glue.CatalogTableStorageDescriptorColumnArgs(
 *                 name="my_column_1",
 *                 type="int",
 *                 comment="my_column1_comment",
 *             ),
 *             aws.glue.CatalogTableStorageDescriptorColumnArgs(
 *                 name="my_column_2",
 *                 type="string",
 *                 comment="my_column2_comment",
 *             ),
 *         ],
 *         ser_de_info=aws.glue.CatalogTableStorageDescriptorSerDeInfoArgs(
 *             name="ser_de_name",
 *             parameters={
 *                 "param1": "param_val_1",
 *             },
 *             serialization_library="org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe",
 *         ),
 *         sort_columns=[aws.glue.CatalogTableStorageDescriptorSortColumnArgs(
 *             column="my_column_1",
 *             sort_order=1,
 *         )],
 *         skewed_info=aws.glue.CatalogTableStorageDescriptorSkewedInfoArgs(
 *             skewed_column_names=["my_column_1"],
 *             skewed_column_value_location_maps={
 *                 "my_column_1": "my_column_1_val_loc_map",
 *             },
 *             skewed_column_values=["skewed_val_1"],
 *         ),
 *     ),
 *     partition_keys=[
 *         aws.glue.CatalogTablePartitionKeyArgs(
 *             name="my_column_1",
 *             type="int",
 *             comment="my_column_1_comment",
 *         ),
 *         aws.glue.CatalogTablePartitionKeyArgs(
 *             name="my_column_2",
 *             type="string",
 *             comment="my_column_2_comment",
 *         ),
 *     ],
 *     parameters={
 *         "param1": "param1_val",
 *     })
 * example_partition_index = aws.glue.PartitionIndex("examplePartitionIndex",
 *     database_name=example_catalog_database.name,
 *     table_name=example_catalog_table.name,
 *     partition_index=aws.glue.PartitionIndexPartitionIndexArgs(
 *         index_name="example",
 *         keys=[
 *             "my_column_1",
 *             "my_column_2",
 *         ],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleCatalogDatabase = new Aws.Glue.CatalogDatabase("exampleCatalogDatabase", new Aws.Glue.CatalogDatabaseArgs
 *         {
 *             Name = "example",
 *         });
 *         var exampleCatalogTable = new Aws.Glue.CatalogTable("exampleCatalogTable", new Aws.Glue.CatalogTableArgs
 *         {
 *             Name = "example",
 *             DatabaseName = exampleCatalogDatabase.Name,
 *             Owner = "my_owner",
 *             Retention = 1,
 *             TableType = "VIRTUAL_VIEW",
 *             ViewExpandedText = "view_expanded_text_1",
 *             ViewOriginalText = "view_original_text_1",
 *             StorageDescriptor = new Aws.Glue.Inputs.CatalogTableStorageDescriptorArgs
 *             {
 *                 BucketColumns = 
 *                 {
 *                     "bucket_column_1",
 *                 },
 *                 Compressed = false,
 *                 InputFormat = "SequenceFileInputFormat",
 *                 Location = "my_location",
 *                 NumberOfBuckets = 1,
 *                 OutputFormat = "SequenceFileInputFormat",
 *                 StoredAsSubDirectories = false,
 *                 Parameters = 
 *                 {
 *                     { "param1", "param1_val" },
 *                 },
 *                 Columns = 
 *                 {
 *                     new Aws.Glue.Inputs.CatalogTableStorageDescriptorColumnArgs
 *                     {
 *                         Name = "my_column_1",
 *                         Type = "int",
 *                         Comment = "my_column1_comment",
 *                     },
 *                     new Aws.Glue.Inputs.CatalogTableStorageDescriptorColumnArgs
 *                     {
 *                         Name = "my_column_2",
 *                         Type = "string",
 *                         Comment = "my_column2_comment",
 *                     },
 *                 },
 *                 SerDeInfo = new Aws.Glue.Inputs.CatalogTableStorageDescriptorSerDeInfoArgs
 *                 {
 *                     Name = "ser_de_name",
 *                     Parameters = 
 *                     {
 *                         { "param1", "param_val_1" },
 *                     },
 *                     SerializationLibrary = "org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe",
 *                 },
 *                 SortColumns = 
 *                 {
 *                     new Aws.Glue.Inputs.CatalogTableStorageDescriptorSortColumnArgs
 *                     {
 *                         Column = "my_column_1",
 *                         SortOrder = 1,
 *                     },
 *                 },
 *                 SkewedInfo = new Aws.Glue.Inputs.CatalogTableStorageDescriptorSkewedInfoArgs
 *                 {
 *                     SkewedColumnNames = 
 *                     {
 *                         "my_column_1",
 *                     },
 *                     SkewedColumnValueLocationMaps = 
 *                     {
 *                         { "my_column_1", "my_column_1_val_loc_map" },
 *                     },
 *                     SkewedColumnValues = 
 *                     {
 *                         "skewed_val_1",
 *                     },
 *                 },
 *             },
 *             PartitionKeys = 
 *             {
 *                 new Aws.Glue.Inputs.CatalogTablePartitionKeyArgs
 *                 {
 *                     Name = "my_column_1",
 *                     Type = "int",
 *                     Comment = "my_column_1_comment",
 *                 },
 *                 new Aws.Glue.Inputs.CatalogTablePartitionKeyArgs
 *                 {
 *                     Name = "my_column_2",
 *                     Type = "string",
 *                     Comment = "my_column_2_comment",
 *                 },
 *             },
 *             Parameters = 
 *             {
 *                 { "param1", "param1_val" },
 *             },
 *         });
 *         var examplePartitionIndex = new Aws.Glue.PartitionIndex("examplePartitionIndex", new Aws.Glue.PartitionIndexArgs
 *         {
 *             DatabaseName = exampleCatalogDatabase.Name,
 *             TableName = exampleCatalogTable.Name,
 *             PartitionIndex = new Aws.Glue.Inputs.PartitionIndexPartitionIndexArgs
 *             {
 *                 IndexName = "example",
 *                 Keys = 
 *                 {
 *                     "my_column_1",
 *                     "my_column_2",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleCatalogDatabase, err := glue.NewCatalogDatabase(ctx, "exampleCatalogDatabase", &glue.CatalogDatabaseArgs{
 * 			Name: pulumi.String("example"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleCatalogTable, err := glue.NewCatalogTable(ctx, "exampleCatalogTable", &glue.CatalogTableArgs{
 * 			Name:             pulumi.String("example"),
 * 			DatabaseName:     exampleCatalogDatabase.Name,
 * 			Owner:            pulumi.String("my_owner"),
 * 			Retention:        pulumi.Int(1),
 * 			TableType:        pulumi.String("VIRTUAL_VIEW"),
 * 			ViewExpandedText: pulumi.String("view_expanded_text_1"),
 * 			ViewOriginalText: pulumi.String("view_original_text_1"),
 * 			StorageDescriptor: &glue.CatalogTableStorageDescriptorArgs{
 * 				BucketColumns: pulumi.StringArray{
 * 					pulumi.String("bucket_column_1"),
 * 				},
 * 				Compressed:             pulumi.Bool(false),
 * 				InputFormat:            pulumi.String("SequenceFileInputFormat"),
 * 				Location:               pulumi.String("my_location"),
 * 				NumberOfBuckets:        pulumi.Int(1),
 * 				OutputFormat:           pulumi.String("SequenceFileInputFormat"),
 * 				StoredAsSubDirectories: pulumi.Bool(false),
 * 				Parameters: pulumi.StringMap{
 * 					"param1": pulumi.String("param1_val"),
 * 				},
 * 				Columns: glue.CatalogTableStorageDescriptorColumnArray{
 * 					&glue.CatalogTableStorageDescriptorColumnArgs{
 * 						Name:    pulumi.String("my_column_1"),
 * 						Type:    pulumi.String("int"),
 * 						Comment: pulumi.String("my_column1_comment"),
 * 					},
 * 					&glue.CatalogTableStorageDescriptorColumnArgs{
 * 						Name:    pulumi.String("my_column_2"),
 * 						Type:    pulumi.String("string"),
 * 						Comment: pulumi.String("my_column2_comment"),
 * 					},
 * 				},
 * 				SerDeInfo: &glue.CatalogTableStorageDescriptorSerDeInfoArgs{
 * 					Name: pulumi.String("ser_de_name"),
 * 					Parameters: pulumi.StringMap{
 * 						"param1": pulumi.String("param_val_1"),
 * 					},
 * 					SerializationLibrary: pulumi.String("org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe"),
 * 				},
 * 				SortColumns: glue.CatalogTableStorageDescriptorSortColumnArray{
 * 					&glue.CatalogTableStorageDescriptorSortColumnArgs{
 * 						Column:    pulumi.String("my_column_1"),
 * 						SortOrder: pulumi.Int(1),
 * 					},
 * 				},
 * 				SkewedInfo: &glue.CatalogTableStorageDescriptorSkewedInfoArgs{
 * 					SkewedColumnNames: pulumi.StringArray{
 * 						pulumi.String("my_column_1"),
 * 					},
 * 					SkewedColumnValueLocationMaps: pulumi.StringMap{
 * 						"my_column_1": pulumi.String("my_column_1_val_loc_map"),
 * 					},
 * 					SkewedColumnValues: pulumi.StringArray{
 * 						pulumi.String("skewed_val_1"),
 * 					},
 * 				},
 * 			},
 * 			PartitionKeys: glue.CatalogTablePartitionKeyArray{
 * 				&glue.CatalogTablePartitionKeyArgs{
 * 					Name:    pulumi.String("my_column_1"),
 * 					Type:    pulumi.String("int"),
 * 					Comment: pulumi.String("my_column_1_comment"),
 * 				},
 * 				&glue.CatalogTablePartitionKeyArgs{
 * 					Name:    pulumi.String("my_column_2"),
 * 					Type:    pulumi.String("string"),
 * 					Comment: pulumi.String("my_column_2_comment"),
 * 				},
 * 			},
 * 			Parameters: pulumi.StringMap{
 * 				"param1": pulumi.String("param1_val"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = glue.NewPartitionIndex(ctx, "examplePartitionIndex", &glue.PartitionIndexArgs{
 * 			DatabaseName: exampleCatalogDatabase.Name,
 * 			TableName:    exampleCatalogTable.Name,
 * 			PartitionIndex: &glue.PartitionIndexPartitionIndexArgs{
 * 				IndexName: pulumi.String("example"),
 * 				Keys: pulumi.StringArray{
 * 					pulumi.String("my_column_1"),
 * 					pulumi.String("my_column_2"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Glue Partition Indexes can be imported with their catalog ID (usually AWS account ID), database name, table name, and index name, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:glue/partitionIndex:PartitionIndex example 123456789012:MyDatabase:MyTable:index-name
 * ```
 * 
 *  
 */
@ResourceType(type="aws:glue/partitionIndex:PartitionIndex")
public class PartitionIndex extends io.pulumi.resources.CustomResource {
    /**
     * The catalog ID where the table resides.
     * 
     */
    @Export(name="catalogId", type=String.class, parameters={})
    private Output<String> catalogId;

    /**
     * @return The catalog ID where the table resides.
     * 
     */
    public Output<String> getCatalogId() {
        return this.catalogId;
    }
    /**
     * Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
     * 
     */
    @Export(name="databaseName", type=String.class, parameters={})
    private Output<String> databaseName;

    /**
     * @return Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
     * 
     */
    public Output<String> getDatabaseName() {
        return this.databaseName;
    }
    /**
     * Configuration block for a partition index. See `partition_index` below.
     * 
     */
    @Export(name="partitionIndex", type=PartitionIndexPartitionIndex.class, parameters={})
    private Output<PartitionIndexPartitionIndex> partitionIndex;

    /**
     * @return Configuration block for a partition index. See `partition_index` below.
     * 
     */
    public Output<PartitionIndexPartitionIndex> getPartitionIndex() {
        return this.partitionIndex;
    }
    /**
     * Name of the table. For Hive compatibility, this must be entirely lowercase.
     * 
     */
    @Export(name="tableName", type=String.class, parameters={})
    private Output<String> tableName;

    /**
     * @return Name of the table. For Hive compatibility, this must be entirely lowercase.
     * 
     */
    public Output<String> getTableName() {
        return this.tableName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PartitionIndex(String name) {
        this(name, PartitionIndexArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PartitionIndex(String name, PartitionIndexArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PartitionIndex(String name, PartitionIndexArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/partitionIndex:PartitionIndex", name, args == null ? PartitionIndexArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private PartitionIndex(String name, Output<String> id, @Nullable PartitionIndexState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/partitionIndex:PartitionIndex", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PartitionIndex get(String name, Output<String> id, @Nullable PartitionIndexState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new PartitionIndex(name, id, state, options);
    }
}
