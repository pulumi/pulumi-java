// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecs.inputs;

import io.pulumi.aws.ecs.inputs.TaskDefinitionEphemeralStorageGetArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionInferenceAcceleratorGetArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionPlacementConstraintGetArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionProxyConfigurationGetArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionRuntimePlatformGetArgs;
import io.pulumi.aws.ecs.inputs.TaskDefinitionVolumeGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TaskDefinitionState extends io.pulumi.resources.ResourceArgs {

    public static final TaskDefinitionState Empty = new TaskDefinitionState();

    /**
     * Full ARN of the Task Definition (including both `family` and `revision`).
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
     * 
     */
    @InputImport(name="containerDefinitions")
      private final @Nullable Input<String> containerDefinitions;

    public Input<String> getContainerDefinitions() {
        return this.containerDefinitions == null ? Input.empty() : this.containerDefinitions;
    }

    /**
     * Number of cpu units used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
     * 
     */
    @InputImport(name="cpu")
      private final @Nullable Input<String> cpu;

    public Input<String> getCpu() {
        return this.cpu == null ? Input.empty() : this.cpu;
    }

    /**
     * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
     * 
     */
    @InputImport(name="ephemeralStorage")
      private final @Nullable Input<TaskDefinitionEphemeralStorageGetArgs> ephemeralStorage;

    public Input<TaskDefinitionEphemeralStorageGetArgs> getEphemeralStorage() {
        return this.ephemeralStorage == null ? Input.empty() : this.ephemeralStorage;
    }

    /**
     * ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
     * 
     */
    @InputImport(name="executionRoleArn")
      private final @Nullable Input<String> executionRoleArn;

    public Input<String> getExecutionRoleArn() {
        return this.executionRoleArn == null ? Input.empty() : this.executionRoleArn;
    }

    /**
     * A unique name for your task definition.
     * 
     */
    @InputImport(name="family")
      private final @Nullable Input<String> family;

    public Input<String> getFamily() {
        return this.family == null ? Input.empty() : this.family;
    }

    /**
     * Configuration block(s) with Inference Accelerators settings. Detailed below.
     * 
     */
    @InputImport(name="inferenceAccelerators")
      private final @Nullable Input<List<TaskDefinitionInferenceAcceleratorGetArgs>> inferenceAccelerators;

    public Input<List<TaskDefinitionInferenceAcceleratorGetArgs>> getInferenceAccelerators() {
        return this.inferenceAccelerators == null ? Input.empty() : this.inferenceAccelerators;
    }

    /**
     * IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
     * 
     */
    @InputImport(name="ipcMode")
      private final @Nullable Input<String> ipcMode;

    public Input<String> getIpcMode() {
        return this.ipcMode == null ? Input.empty() : this.ipcMode;
    }

    /**
     * Amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
     * 
     */
    @InputImport(name="memory")
      private final @Nullable Input<String> memory;

    public Input<String> getMemory() {
        return this.memory == null ? Input.empty() : this.memory;
    }

    /**
     * Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
     * 
     */
    @InputImport(name="networkMode")
      private final @Nullable Input<String> networkMode;

    public Input<String> getNetworkMode() {
        return this.networkMode == null ? Input.empty() : this.networkMode;
    }

    /**
     * Process namespace to use for the containers in the task. The valid values are `host` and `task`.
     * 
     */
    @InputImport(name="pidMode")
      private final @Nullable Input<String> pidMode;

    public Input<String> getPidMode() {
        return this.pidMode == null ? Input.empty() : this.pidMode;
    }

    /**
     * Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
     * 
     */
    @InputImport(name="placementConstraints")
      private final @Nullable Input<List<TaskDefinitionPlacementConstraintGetArgs>> placementConstraints;

    public Input<List<TaskDefinitionPlacementConstraintGetArgs>> getPlacementConstraints() {
        return this.placementConstraints == null ? Input.empty() : this.placementConstraints;
    }

    /**
     * Configuration block for the App Mesh proxy. Detailed below.
     * 
     */
    @InputImport(name="proxyConfiguration")
      private final @Nullable Input<TaskDefinitionProxyConfigurationGetArgs> proxyConfiguration;

    public Input<TaskDefinitionProxyConfigurationGetArgs> getProxyConfiguration() {
        return this.proxyConfiguration == null ? Input.empty() : this.proxyConfiguration;
    }

    /**
     * Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
     * 
     */
    @InputImport(name="requiresCompatibilities")
      private final @Nullable Input<List<String>> requiresCompatibilities;

    public Input<List<String>> getRequiresCompatibilities() {
        return this.requiresCompatibilities == null ? Input.empty() : this.requiresCompatibilities;
    }

    /**
     * Revision of the task in a particular family.
     * 
     */
    @InputImport(name="revision")
      private final @Nullable Input<Integer> revision;

    public Input<Integer> getRevision() {
        return this.revision == null ? Input.empty() : this.revision;
    }

    /**
     * Configuration block for runtime_platform that containers in your task may use.
     * 
     */
    @InputImport(name="runtimePlatform")
      private final @Nullable Input<TaskDefinitionRuntimePlatformGetArgs> runtimePlatform;

    public Input<TaskDefinitionRuntimePlatformGetArgs> getRuntimePlatform() {
        return this.runtimePlatform == null ? Input.empty() : this.runtimePlatform;
    }

    @InputImport(name="skipDestroy")
      private final @Nullable Input<Boolean> skipDestroy;

    public Input<Boolean> getSkipDestroy() {
        return this.skipDestroy == null ? Input.empty() : this.skipDestroy;
    }

    /**
     * Key-value map of resource tags.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
     * 
     */
    @InputImport(name="taskRoleArn")
      private final @Nullable Input<String> taskRoleArn;

    public Input<String> getTaskRoleArn() {
        return this.taskRoleArn == null ? Input.empty() : this.taskRoleArn;
    }

    /**
     * Configuration block for volumes that containers in your task may use. Detailed below.
     * 
     */
    @InputImport(name="volumes")
      private final @Nullable Input<List<TaskDefinitionVolumeGetArgs>> volumes;

    public Input<List<TaskDefinitionVolumeGetArgs>> getVolumes() {
        return this.volumes == null ? Input.empty() : this.volumes;
    }

    public TaskDefinitionState(
        @Nullable Input<String> arn,
        @Nullable Input<String> containerDefinitions,
        @Nullable Input<String> cpu,
        @Nullable Input<TaskDefinitionEphemeralStorageGetArgs> ephemeralStorage,
        @Nullable Input<String> executionRoleArn,
        @Nullable Input<String> family,
        @Nullable Input<List<TaskDefinitionInferenceAcceleratorGetArgs>> inferenceAccelerators,
        @Nullable Input<String> ipcMode,
        @Nullable Input<String> memory,
        @Nullable Input<String> networkMode,
        @Nullable Input<String> pidMode,
        @Nullable Input<List<TaskDefinitionPlacementConstraintGetArgs>> placementConstraints,
        @Nullable Input<TaskDefinitionProxyConfigurationGetArgs> proxyConfiguration,
        @Nullable Input<List<String>> requiresCompatibilities,
        @Nullable Input<Integer> revision,
        @Nullable Input<TaskDefinitionRuntimePlatformGetArgs> runtimePlatform,
        @Nullable Input<Boolean> skipDestroy,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> taskRoleArn,
        @Nullable Input<List<TaskDefinitionVolumeGetArgs>> volumes) {
        this.arn = arn;
        this.containerDefinitions = containerDefinitions;
        this.cpu = cpu;
        this.ephemeralStorage = ephemeralStorage;
        this.executionRoleArn = executionRoleArn;
        this.family = family;
        this.inferenceAccelerators = inferenceAccelerators;
        this.ipcMode = ipcMode;
        this.memory = memory;
        this.networkMode = networkMode;
        this.pidMode = pidMode;
        this.placementConstraints = placementConstraints;
        this.proxyConfiguration = proxyConfiguration;
        this.requiresCompatibilities = requiresCompatibilities;
        this.revision = revision;
        this.runtimePlatform = runtimePlatform;
        this.skipDestroy = skipDestroy;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.taskRoleArn = taskRoleArn;
        this.volumes = volumes;
    }

    private TaskDefinitionState() {
        this.arn = Input.empty();
        this.containerDefinitions = Input.empty();
        this.cpu = Input.empty();
        this.ephemeralStorage = Input.empty();
        this.executionRoleArn = Input.empty();
        this.family = Input.empty();
        this.inferenceAccelerators = Input.empty();
        this.ipcMode = Input.empty();
        this.memory = Input.empty();
        this.networkMode = Input.empty();
        this.pidMode = Input.empty();
        this.placementConstraints = Input.empty();
        this.proxyConfiguration = Input.empty();
        this.requiresCompatibilities = Input.empty();
        this.revision = Input.empty();
        this.runtimePlatform = Input.empty();
        this.skipDestroy = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.taskRoleArn = Input.empty();
        this.volumes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskDefinitionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> containerDefinitions;
        private @Nullable Input<String> cpu;
        private @Nullable Input<TaskDefinitionEphemeralStorageGetArgs> ephemeralStorage;
        private @Nullable Input<String> executionRoleArn;
        private @Nullable Input<String> family;
        private @Nullable Input<List<TaskDefinitionInferenceAcceleratorGetArgs>> inferenceAccelerators;
        private @Nullable Input<String> ipcMode;
        private @Nullable Input<String> memory;
        private @Nullable Input<String> networkMode;
        private @Nullable Input<String> pidMode;
        private @Nullable Input<List<TaskDefinitionPlacementConstraintGetArgs>> placementConstraints;
        private @Nullable Input<TaskDefinitionProxyConfigurationGetArgs> proxyConfiguration;
        private @Nullable Input<List<String>> requiresCompatibilities;
        private @Nullable Input<Integer> revision;
        private @Nullable Input<TaskDefinitionRuntimePlatformGetArgs> runtimePlatform;
        private @Nullable Input<Boolean> skipDestroy;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> taskRoleArn;
        private @Nullable Input<List<TaskDefinitionVolumeGetArgs>> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskDefinitionState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.containerDefinitions = defaults.containerDefinitions;
    	      this.cpu = defaults.cpu;
    	      this.ephemeralStorage = defaults.ephemeralStorage;
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.family = defaults.family;
    	      this.inferenceAccelerators = defaults.inferenceAccelerators;
    	      this.ipcMode = defaults.ipcMode;
    	      this.memory = defaults.memory;
    	      this.networkMode = defaults.networkMode;
    	      this.pidMode = defaults.pidMode;
    	      this.placementConstraints = defaults.placementConstraints;
    	      this.proxyConfiguration = defaults.proxyConfiguration;
    	      this.requiresCompatibilities = defaults.requiresCompatibilities;
    	      this.revision = defaults.revision;
    	      this.runtimePlatform = defaults.runtimePlatform;
    	      this.skipDestroy = defaults.skipDestroy;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.taskRoleArn = defaults.taskRoleArn;
    	      this.volumes = defaults.volumes;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder containerDefinitions(@Nullable Input<String> containerDefinitions) {
            this.containerDefinitions = containerDefinitions;
            return this;
        }

        public Builder containerDefinitions(@Nullable String containerDefinitions) {
            this.containerDefinitions = Input.ofNullable(containerDefinitions);
            return this;
        }

        public Builder cpu(@Nullable Input<String> cpu) {
            this.cpu = cpu;
            return this;
        }

        public Builder cpu(@Nullable String cpu) {
            this.cpu = Input.ofNullable(cpu);
            return this;
        }

        public Builder ephemeralStorage(@Nullable Input<TaskDefinitionEphemeralStorageGetArgs> ephemeralStorage) {
            this.ephemeralStorage = ephemeralStorage;
            return this;
        }

        public Builder ephemeralStorage(@Nullable TaskDefinitionEphemeralStorageGetArgs ephemeralStorage) {
            this.ephemeralStorage = Input.ofNullable(ephemeralStorage);
            return this;
        }

        public Builder executionRoleArn(@Nullable Input<String> executionRoleArn) {
            this.executionRoleArn = executionRoleArn;
            return this;
        }

        public Builder executionRoleArn(@Nullable String executionRoleArn) {
            this.executionRoleArn = Input.ofNullable(executionRoleArn);
            return this;
        }

        public Builder family(@Nullable Input<String> family) {
            this.family = family;
            return this;
        }

        public Builder family(@Nullable String family) {
            this.family = Input.ofNullable(family);
            return this;
        }

        public Builder inferenceAccelerators(@Nullable Input<List<TaskDefinitionInferenceAcceleratorGetArgs>> inferenceAccelerators) {
            this.inferenceAccelerators = inferenceAccelerators;
            return this;
        }

        public Builder inferenceAccelerators(@Nullable List<TaskDefinitionInferenceAcceleratorGetArgs> inferenceAccelerators) {
            this.inferenceAccelerators = Input.ofNullable(inferenceAccelerators);
            return this;
        }

        public Builder ipcMode(@Nullable Input<String> ipcMode) {
            this.ipcMode = ipcMode;
            return this;
        }

        public Builder ipcMode(@Nullable String ipcMode) {
            this.ipcMode = Input.ofNullable(ipcMode);
            return this;
        }

        public Builder memory(@Nullable Input<String> memory) {
            this.memory = memory;
            return this;
        }

        public Builder memory(@Nullable String memory) {
            this.memory = Input.ofNullable(memory);
            return this;
        }

        public Builder networkMode(@Nullable Input<String> networkMode) {
            this.networkMode = networkMode;
            return this;
        }

        public Builder networkMode(@Nullable String networkMode) {
            this.networkMode = Input.ofNullable(networkMode);
            return this;
        }

        public Builder pidMode(@Nullable Input<String> pidMode) {
            this.pidMode = pidMode;
            return this;
        }

        public Builder pidMode(@Nullable String pidMode) {
            this.pidMode = Input.ofNullable(pidMode);
            return this;
        }

        public Builder placementConstraints(@Nullable Input<List<TaskDefinitionPlacementConstraintGetArgs>> placementConstraints) {
            this.placementConstraints = placementConstraints;
            return this;
        }

        public Builder placementConstraints(@Nullable List<TaskDefinitionPlacementConstraintGetArgs> placementConstraints) {
            this.placementConstraints = Input.ofNullable(placementConstraints);
            return this;
        }

        public Builder proxyConfiguration(@Nullable Input<TaskDefinitionProxyConfigurationGetArgs> proxyConfiguration) {
            this.proxyConfiguration = proxyConfiguration;
            return this;
        }

        public Builder proxyConfiguration(@Nullable TaskDefinitionProxyConfigurationGetArgs proxyConfiguration) {
            this.proxyConfiguration = Input.ofNullable(proxyConfiguration);
            return this;
        }

        public Builder requiresCompatibilities(@Nullable Input<List<String>> requiresCompatibilities) {
            this.requiresCompatibilities = requiresCompatibilities;
            return this;
        }

        public Builder requiresCompatibilities(@Nullable List<String> requiresCompatibilities) {
            this.requiresCompatibilities = Input.ofNullable(requiresCompatibilities);
            return this;
        }

        public Builder revision(@Nullable Input<Integer> revision) {
            this.revision = revision;
            return this;
        }

        public Builder revision(@Nullable Integer revision) {
            this.revision = Input.ofNullable(revision);
            return this;
        }

        public Builder runtimePlatform(@Nullable Input<TaskDefinitionRuntimePlatformGetArgs> runtimePlatform) {
            this.runtimePlatform = runtimePlatform;
            return this;
        }

        public Builder runtimePlatform(@Nullable TaskDefinitionRuntimePlatformGetArgs runtimePlatform) {
            this.runtimePlatform = Input.ofNullable(runtimePlatform);
            return this;
        }

        public Builder skipDestroy(@Nullable Input<Boolean> skipDestroy) {
            this.skipDestroy = skipDestroy;
            return this;
        }

        public Builder skipDestroy(@Nullable Boolean skipDestroy) {
            this.skipDestroy = Input.ofNullable(skipDestroy);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder taskRoleArn(@Nullable Input<String> taskRoleArn) {
            this.taskRoleArn = taskRoleArn;
            return this;
        }

        public Builder taskRoleArn(@Nullable String taskRoleArn) {
            this.taskRoleArn = Input.ofNullable(taskRoleArn);
            return this;
        }

        public Builder volumes(@Nullable Input<List<TaskDefinitionVolumeGetArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder volumes(@Nullable List<TaskDefinitionVolumeGetArgs> volumes) {
            this.volumes = Input.ofNullable(volumes);
            return this;
        }
        public TaskDefinitionState build() {
            return new TaskDefinitionState(arn, containerDefinitions, cpu, ephemeralStorage, executionRoleArn, family, inferenceAccelerators, ipcMode, memory, networkMode, pidMode, placementConstraints, proxyConfiguration, requiresCompatibilities, revision, runtimePlatform, skipDestroy, tags, tagsAll, taskRoleArn, volumes);
        }
    }
}
