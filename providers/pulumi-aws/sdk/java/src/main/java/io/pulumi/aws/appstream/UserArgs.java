// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appstream;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserArgs extends io.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Authentication type for the user. You must specify USERPOOL. Valid values: `API`, `SAML`, `USERPOOL`
     * 
     */
    @InputImport(name="authenticationType", required=true)
      private final Input<String> authenticationType;

    public Input<String> getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Specifies whether the user in the user pool is enabled.
     * 
     */
    @InputImport(name="enabled")
      private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * First name, or given name, of the user.
     * 
     */
    @InputImport(name="firstName")
      private final @Nullable Input<String> firstName;

    public Input<String> getFirstName() {
        return this.firstName == null ? Input.empty() : this.firstName;
    }

    /**
     * Last name, or surname, of the user.
     * 
     */
    @InputImport(name="lastName")
      private final @Nullable Input<String> lastName;

    public Input<String> getLastName() {
        return this.lastName == null ? Input.empty() : this.lastName;
    }

    /**
     * Send an email notification.
     * 
     */
    @InputImport(name="sendEmailNotification")
      private final @Nullable Input<Boolean> sendEmailNotification;

    public Input<Boolean> getSendEmailNotification() {
        return this.sendEmailNotification == null ? Input.empty() : this.sendEmailNotification;
    }

    /**
     * Email address of the user.
     * 
     */
    @InputImport(name="userName", required=true)
      private final Input<String> userName;

    public Input<String> getUserName() {
        return this.userName;
    }

    public UserArgs(
        Input<String> authenticationType,
        @Nullable Input<Boolean> enabled,
        @Nullable Input<String> firstName,
        @Nullable Input<String> lastName,
        @Nullable Input<Boolean> sendEmailNotification,
        Input<String> userName) {
        this.authenticationType = Objects.requireNonNull(authenticationType, "expected parameter 'authenticationType' to be non-null");
        this.enabled = enabled;
        this.firstName = firstName;
        this.lastName = lastName;
        this.sendEmailNotification = sendEmailNotification;
        this.userName = Objects.requireNonNull(userName, "expected parameter 'userName' to be non-null");
    }

    private UserArgs() {
        this.authenticationType = Input.empty();
        this.enabled = Input.empty();
        this.firstName = Input.empty();
        this.lastName = Input.empty();
        this.sendEmailNotification = Input.empty();
        this.userName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> authenticationType;
        private @Nullable Input<Boolean> enabled;
        private @Nullable Input<String> firstName;
        private @Nullable Input<String> lastName;
        private @Nullable Input<Boolean> sendEmailNotification;
        private Input<String> userName;

        public Builder() {
    	      // Empty
        }

        public Builder(UserArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationType = defaults.authenticationType;
    	      this.enabled = defaults.enabled;
    	      this.firstName = defaults.firstName;
    	      this.lastName = defaults.lastName;
    	      this.sendEmailNotification = defaults.sendEmailNotification;
    	      this.userName = defaults.userName;
        }

        public Builder authenticationType(Input<String> authenticationType) {
            this.authenticationType = Objects.requireNonNull(authenticationType);
            return this;
        }

        public Builder authenticationType(String authenticationType) {
            this.authenticationType = Input.of(Objects.requireNonNull(authenticationType));
            return this;
        }

        public Builder enabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder firstName(@Nullable Input<String> firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder firstName(@Nullable String firstName) {
            this.firstName = Input.ofNullable(firstName);
            return this;
        }

        public Builder lastName(@Nullable Input<String> lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder lastName(@Nullable String lastName) {
            this.lastName = Input.ofNullable(lastName);
            return this;
        }

        public Builder sendEmailNotification(@Nullable Input<Boolean> sendEmailNotification) {
            this.sendEmailNotification = sendEmailNotification;
            return this;
        }

        public Builder sendEmailNotification(@Nullable Boolean sendEmailNotification) {
            this.sendEmailNotification = Input.ofNullable(sendEmailNotification);
            return this;
        }

        public Builder userName(Input<String> userName) {
            this.userName = Objects.requireNonNull(userName);
            return this;
        }

        public Builder userName(String userName) {
            this.userName = Input.of(Objects.requireNonNull(userName));
            return this;
        }
        public UserArgs build() {
            return new UserArgs(authenticationType, enabled, firstName, lastName, sendEmailNotification, userName);
        }
    }
}
