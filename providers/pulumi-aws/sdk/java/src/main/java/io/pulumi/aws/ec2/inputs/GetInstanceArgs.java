// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.GetInstanceFilter;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInstanceArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetInstanceArgs Empty = new GetInstanceArgs();

    /**
     * One or more name/value pairs to use as filters. There are
     * several valid keys, for a full reference, check out
     * [describe-instances in the AWS CLI reference][1].
     * 
     */
    @Import(name="filters")
      private final @Nullable List<GetInstanceFilter> filters;

    public List<GetInstanceFilter> getFilters() {
        return this.filters == null ? List.of() : this.filters;
    }

    /**
     * If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `password_data` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
     * 
     */
    @Import(name="getPasswordData")
      private final @Nullable Boolean getPasswordData;

    public Optional<Boolean> getGetPasswordData() {
        return this.getPasswordData == null ? Optional.empty() : Optional.ofNullable(this.getPasswordData);
    }

    /**
     * Retrieve Base64 encoded User Data contents into the `user_data_base64` attribute. A SHA-1 hash of the User Data contents will always be present in the `user_data` attribute. Defaults to `false`.
     * 
     */
    @Import(name="getUserData")
      private final @Nullable Boolean getUserData;

    public Optional<Boolean> getGetUserData() {
        return this.getUserData == null ? Optional.empty() : Optional.ofNullable(this.getUserData);
    }

    /**
     * Specify the exact Instance ID with which to populate the data source.
     * 
     */
    @Import(name="instanceId")
      private final @Nullable String instanceId;

    public Optional<String> getInstanceId() {
        return this.instanceId == null ? Optional.empty() : Optional.ofNullable(this.instanceId);
    }

    /**
     * A map of tags, each pair of which must
     * exactly match a pair on the desired Instance.
     * 
     */
    @Import(name="instanceTags")
      private final @Nullable Map<String,String> instanceTags;

    public Map<String,String> getInstanceTags() {
        return this.instanceTags == null ? Map.of() : this.instanceTags;
    }

    /**
     * A map of tags assigned to the Instance.
     * 
     */
    @Import(name="tags")
      private final @Nullable Map<String,String> tags;

    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public GetInstanceArgs(
        @Nullable List<GetInstanceFilter> filters,
        @Nullable Boolean getPasswordData,
        @Nullable Boolean getUserData,
        @Nullable String instanceId,
        @Nullable Map<String,String> instanceTags,
        @Nullable Map<String,String> tags) {
        this.filters = filters;
        this.getPasswordData = getPasswordData;
        this.getUserData = getUserData;
        this.instanceId = instanceId;
        this.instanceTags = instanceTags;
        this.tags = tags;
    }

    private GetInstanceArgs() {
        this.filters = List.of();
        this.getPasswordData = null;
        this.getUserData = null;
        this.instanceId = null;
        this.instanceTags = Map.of();
        this.tags = Map.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<GetInstanceFilter> filters;
        private @Nullable Boolean getPasswordData;
        private @Nullable Boolean getUserData;
        private @Nullable String instanceId;
        private @Nullable Map<String,String> instanceTags;
        private @Nullable Map<String,String> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.getPasswordData = defaults.getPasswordData;
    	      this.getUserData = defaults.getUserData;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceTags = defaults.instanceTags;
    	      this.tags = defaults.tags;
        }

        public Builder filters(@Nullable List<GetInstanceFilter> filters) {
            this.filters = filters;
            return this;
        }

        public Builder getPasswordData(@Nullable Boolean getPasswordData) {
            this.getPasswordData = getPasswordData;
            return this;
        }

        public Builder getUserData(@Nullable Boolean getUserData) {
            this.getUserData = getUserData;
            return this;
        }

        public Builder instanceId(@Nullable String instanceId) {
            this.instanceId = instanceId;
            return this;
        }

        public Builder instanceTags(@Nullable Map<String,String> instanceTags) {
            this.instanceTags = instanceTags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public GetInstanceArgs build() {
            return new GetInstanceArgs(filters, getPasswordData, getUserData, instanceId, instanceTags, tags);
        }
    }
}
