// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesisanalyticsv2.inputs;

import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismArgs;
import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationArgs;
import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaArgs;
import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationArgs;
import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputArgs;
import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs Empty = new ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs();

    @InputImport(name="inAppStreamNames")
    private final @Nullable Input<List<String>> inAppStreamNames;

    public Input<List<String>> getInAppStreamNames() {
        return this.inAppStreamNames == null ? Input.empty() : this.inAppStreamNames;
    }

    @InputImport(name="inputId")
    private final @Nullable Input<String> inputId;

    public Input<String> getInputId() {
        return this.inputId == null ? Input.empty() : this.inputId;
    }

    /**
     * Describes the number of in-application streams to create.
     * 
     */
    @InputImport(name="inputParallelism")
    private final @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismArgs> inputParallelism;

    public Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismArgs> getInputParallelism() {
        return this.inputParallelism == null ? Input.empty() : this.inputParallelism;
    }

    /**
     * The input processing configuration for the input.
     * An input processor transforms records as they are received from the stream, before the application's SQL code executes.
     * 
     */
    @InputImport(name="inputProcessingConfiguration")
    private final @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationArgs> inputProcessingConfiguration;

    public Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationArgs> getInputProcessingConfiguration() {
        return this.inputProcessingConfiguration == null ? Input.empty() : this.inputProcessingConfiguration;
    }

    /**
     * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     * 
     */
    @InputImport(name="inputSchema", required=true)
    private final Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaArgs> inputSchema;

    public Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaArgs> getInputSchema() {
        return this.inputSchema;
    }

    /**
     * The point at which the application starts processing records from the streaming source.
     * 
     */
    @InputImport(name="inputStartingPositionConfigurations")
    private final @Nullable Input<List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationArgs>> inputStartingPositionConfigurations;

    public Input<List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationArgs>> getInputStartingPositionConfigurations() {
        return this.inputStartingPositionConfigurations == null ? Input.empty() : this.inputStartingPositionConfigurations;
    }

    /**
     * If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
     * 
     */
    @InputImport(name="kinesisFirehoseInput")
    private final @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputArgs> kinesisFirehoseInput;

    public Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputArgs> getKinesisFirehoseInput() {
        return this.kinesisFirehoseInput == null ? Input.empty() : this.kinesisFirehoseInput;
    }

    /**
     * If the streaming source is a Kinesis data stream, identifies the stream's Amazon Resource Name (ARN).
     * 
     */
    @InputImport(name="kinesisStreamsInput")
    private final @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputArgs> kinesisStreamsInput;

    public Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputArgs> getKinesisStreamsInput() {
        return this.kinesisStreamsInput == null ? Input.empty() : this.kinesisStreamsInput;
    }

    /**
     * The name prefix to use when creating an in-application stream.
     * 
     */
    @InputImport(name="namePrefix", required=true)
    private final Input<String> namePrefix;

    public Input<String> getNamePrefix() {
        return this.namePrefix;
    }

    public ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs(
        @Nullable Input<List<String>> inAppStreamNames,
        @Nullable Input<String> inputId,
        @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismArgs> inputParallelism,
        @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationArgs> inputProcessingConfiguration,
        Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaArgs> inputSchema,
        @Nullable Input<List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationArgs>> inputStartingPositionConfigurations,
        @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputArgs> kinesisFirehoseInput,
        @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputArgs> kinesisStreamsInput,
        Input<String> namePrefix) {
        this.inAppStreamNames = inAppStreamNames;
        this.inputId = inputId;
        this.inputParallelism = inputParallelism;
        this.inputProcessingConfiguration = inputProcessingConfiguration;
        this.inputSchema = Objects.requireNonNull(inputSchema, "expected parameter 'inputSchema' to be non-null");
        this.inputStartingPositionConfigurations = inputStartingPositionConfigurations;
        this.kinesisFirehoseInput = kinesisFirehoseInput;
        this.kinesisStreamsInput = kinesisStreamsInput;
        this.namePrefix = Objects.requireNonNull(namePrefix, "expected parameter 'namePrefix' to be non-null");
    }

    private ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs() {
        this.inAppStreamNames = Input.empty();
        this.inputId = Input.empty();
        this.inputParallelism = Input.empty();
        this.inputProcessingConfiguration = Input.empty();
        this.inputSchema = Input.empty();
        this.inputStartingPositionConfigurations = Input.empty();
        this.kinesisFirehoseInput = Input.empty();
        this.kinesisStreamsInput = Input.empty();
        this.namePrefix = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> inAppStreamNames;
        private @Nullable Input<String> inputId;
        private @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismArgs> inputParallelism;
        private @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationArgs> inputProcessingConfiguration;
        private Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaArgs> inputSchema;
        private @Nullable Input<List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationArgs>> inputStartingPositionConfigurations;
        private @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputArgs> kinesisFirehoseInput;
        private @Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputArgs> kinesisStreamsInput;
        private Input<String> namePrefix;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inAppStreamNames = defaults.inAppStreamNames;
    	      this.inputId = defaults.inputId;
    	      this.inputParallelism = defaults.inputParallelism;
    	      this.inputProcessingConfiguration = defaults.inputProcessingConfiguration;
    	      this.inputSchema = defaults.inputSchema;
    	      this.inputStartingPositionConfigurations = defaults.inputStartingPositionConfigurations;
    	      this.kinesisFirehoseInput = defaults.kinesisFirehoseInput;
    	      this.kinesisStreamsInput = defaults.kinesisStreamsInput;
    	      this.namePrefix = defaults.namePrefix;
        }

        public Builder setInAppStreamNames(@Nullable Input<List<String>> inAppStreamNames) {
            this.inAppStreamNames = inAppStreamNames;
            return this;
        }

        public Builder setInAppStreamNames(@Nullable List<String> inAppStreamNames) {
            this.inAppStreamNames = Input.ofNullable(inAppStreamNames);
            return this;
        }

        public Builder setInputId(@Nullable Input<String> inputId) {
            this.inputId = inputId;
            return this;
        }

        public Builder setInputId(@Nullable String inputId) {
            this.inputId = Input.ofNullable(inputId);
            return this;
        }

        public Builder setInputParallelism(@Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismArgs> inputParallelism) {
            this.inputParallelism = inputParallelism;
            return this;
        }

        public Builder setInputParallelism(@Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismArgs inputParallelism) {
            this.inputParallelism = Input.ofNullable(inputParallelism);
            return this;
        }

        public Builder setInputProcessingConfiguration(@Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationArgs> inputProcessingConfiguration) {
            this.inputProcessingConfiguration = inputProcessingConfiguration;
            return this;
        }

        public Builder setInputProcessingConfiguration(@Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationArgs inputProcessingConfiguration) {
            this.inputProcessingConfiguration = Input.ofNullable(inputProcessingConfiguration);
            return this;
        }

        public Builder setInputSchema(Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaArgs> inputSchema) {
            this.inputSchema = Objects.requireNonNull(inputSchema);
            return this;
        }

        public Builder setInputSchema(ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaArgs inputSchema) {
            this.inputSchema = Input.of(Objects.requireNonNull(inputSchema));
            return this;
        }

        public Builder setInputStartingPositionConfigurations(@Nullable Input<List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationArgs>> inputStartingPositionConfigurations) {
            this.inputStartingPositionConfigurations = inputStartingPositionConfigurations;
            return this;
        }

        public Builder setInputStartingPositionConfigurations(@Nullable List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationArgs> inputStartingPositionConfigurations) {
            this.inputStartingPositionConfigurations = Input.ofNullable(inputStartingPositionConfigurations);
            return this;
        }

        public Builder setKinesisFirehoseInput(@Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputArgs> kinesisFirehoseInput) {
            this.kinesisFirehoseInput = kinesisFirehoseInput;
            return this;
        }

        public Builder setKinesisFirehoseInput(@Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputArgs kinesisFirehoseInput) {
            this.kinesisFirehoseInput = Input.ofNullable(kinesisFirehoseInput);
            return this;
        }

        public Builder setKinesisStreamsInput(@Nullable Input<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputArgs> kinesisStreamsInput) {
            this.kinesisStreamsInput = kinesisStreamsInput;
            return this;
        }

        public Builder setKinesisStreamsInput(@Nullable ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputArgs kinesisStreamsInput) {
            this.kinesisStreamsInput = Input.ofNullable(kinesisStreamsInput);
            return this;
        }

        public Builder setNamePrefix(Input<String> namePrefix) {
            this.namePrefix = Objects.requireNonNull(namePrefix);
            return this;
        }

        public Builder setNamePrefix(String namePrefix) {
            this.namePrefix = Input.of(Objects.requireNonNull(namePrefix));
            return this;
        }
        public ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs build() {
            return new ApplicationApplicationConfigurationSqlApplicationConfigurationInputArgs(inAppStreamNames, inputId, inputParallelism, inputProcessingConfiguration, inputSchema, inputStartingPositionConfigurations, kinesisFirehoseInput, kinesisStreamsInput, namePrefix);
        }
    }
}
