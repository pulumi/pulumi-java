// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.sagemaker.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CodeRepositoryGitConfigGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final CodeRepositoryGitConfigGetArgs Empty = new CodeRepositoryGitConfigGetArgs();

    /**
     * The default branch for the Git repository.
     * 
     */
    @Import(name="branch")
      private final @Nullable Output<String> branch;

    public Output<String> getBranch() {
        return this.branch == null ? Output.empty() : this.branch;
    }

    /**
     * The URL where the Git repository is located.
     * 
     */
    @Import(name="repositoryUrl", required=true)
      private final Output<String> repositoryUrl;

    public Output<String> getRepositoryUrl() {
        return this.repositoryUrl;
    }

    /**
     * The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: `{"username": UserName, "password": Password}`
     * 
     */
    @Import(name="secretArn")
      private final @Nullable Output<String> secretArn;

    public Output<String> getSecretArn() {
        return this.secretArn == null ? Output.empty() : this.secretArn;
    }

    public CodeRepositoryGitConfigGetArgs(
        @Nullable Output<String> branch,
        Output<String> repositoryUrl,
        @Nullable Output<String> secretArn) {
        this.branch = branch;
        this.repositoryUrl = Objects.requireNonNull(repositoryUrl, "expected parameter 'repositoryUrl' to be non-null");
        this.secretArn = secretArn;
    }

    private CodeRepositoryGitConfigGetArgs() {
        this.branch = Output.empty();
        this.repositoryUrl = Output.empty();
        this.secretArn = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CodeRepositoryGitConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> branch;
        private Output<String> repositoryUrl;
        private @Nullable Output<String> secretArn;

        public Builder() {
    	      // Empty
        }

        public Builder(CodeRepositoryGitConfigGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.secretArn = defaults.secretArn;
        }

        public Builder branch(@Nullable Output<String> branch) {
            this.branch = branch;
            return this;
        }
        public Builder branch(@Nullable String branch) {
            this.branch = Output.ofNullable(branch);
            return this;
        }
        public Builder repositoryUrl(Output<String> repositoryUrl) {
            this.repositoryUrl = Objects.requireNonNull(repositoryUrl);
            return this;
        }
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = Output.of(Objects.requireNonNull(repositoryUrl));
            return this;
        }
        public Builder secretArn(@Nullable Output<String> secretArn) {
            this.secretArn = secretArn;
            return this;
        }
        public Builder secretArn(@Nullable String secretArn) {
            this.secretArn = Output.ofNullable(secretArn);
            return this;
        }        public CodeRepositoryGitConfigGetArgs build() {
            return new CodeRepositoryGitConfigGetArgs(branch, repositoryUrl, secretArn);
        }
    }
}
