// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lakeformation.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PermissionsTableWithColumnsArgs extends io.pulumi.resources.ResourceArgs {

    public static final PermissionsTableWithColumnsArgs Empty = new PermissionsTableWithColumnsArgs();

    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     * 
     */
    @InputImport(name="catalogId")
      private final @Nullable Output<String> catalogId;

    public Output<String> getCatalogId() {
        return this.catalogId == null ? Output.empty() : this.catalogId;
    }

    /**
     * Set of column names for the table.
     * 
     */
    @InputImport(name="columnNames")
      private final @Nullable Output<List<String>> columnNames;

    public Output<List<String>> getColumnNames() {
        return this.columnNames == null ? Output.empty() : this.columnNames;
    }

    /**
     * Name of the database for the table with columns resource. Unique to the Data Catalog.
     * 
     */
    @InputImport(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName;
    }

    @InputImport(name="excludedColumnNames")
      private final @Nullable Output<List<String>> excludedColumnNames;

    public Output<List<String>> getExcludedColumnNames() {
        return this.excludedColumnNames == null ? Output.empty() : this.excludedColumnNames;
    }

    /**
     * Name of the table resource.
     * 
     */
    @InputImport(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    @InputImport(name="wildcard")
      private final @Nullable Output<Boolean> wildcard;

    public Output<Boolean> getWildcard() {
        return this.wildcard == null ? Output.empty() : this.wildcard;
    }

    public PermissionsTableWithColumnsArgs(
        @Nullable Output<String> catalogId,
        @Nullable Output<List<String>> columnNames,
        Output<String> databaseName,
        @Nullable Output<List<String>> excludedColumnNames,
        Output<String> name,
        @Nullable Output<Boolean> wildcard) {
        this.catalogId = catalogId;
        this.columnNames = columnNames;
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.excludedColumnNames = excludedColumnNames;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.wildcard = wildcard;
    }

    private PermissionsTableWithColumnsArgs() {
        this.catalogId = Output.empty();
        this.columnNames = Output.empty();
        this.databaseName = Output.empty();
        this.excludedColumnNames = Output.empty();
        this.name = Output.empty();
        this.wildcard = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PermissionsTableWithColumnsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> catalogId;
        private @Nullable Output<List<String>> columnNames;
        private Output<String> databaseName;
        private @Nullable Output<List<String>> excludedColumnNames;
        private Output<String> name;
        private @Nullable Output<Boolean> wildcard;

        public Builder() {
    	      // Empty
        }

        public Builder(PermissionsTableWithColumnsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.columnNames = defaults.columnNames;
    	      this.databaseName = defaults.databaseName;
    	      this.excludedColumnNames = defaults.excludedColumnNames;
    	      this.name = defaults.name;
    	      this.wildcard = defaults.wildcard;
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            this.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = Output.ofNullable(catalogId);
            return this;
        }

        public Builder columnNames(@Nullable Output<List<String>> columnNames) {
            this.columnNames = columnNames;
            return this;
        }

        public Builder columnNames(@Nullable List<String> columnNames) {
            this.columnNames = Output.ofNullable(columnNames);
            return this;
        }

        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }

        public Builder excludedColumnNames(@Nullable Output<List<String>> excludedColumnNames) {
            this.excludedColumnNames = excludedColumnNames;
            return this;
        }

        public Builder excludedColumnNames(@Nullable List<String> excludedColumnNames) {
            this.excludedColumnNames = Output.ofNullable(excludedColumnNames);
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder wildcard(@Nullable Output<Boolean> wildcard) {
            this.wildcard = wildcard;
            return this;
        }

        public Builder wildcard(@Nullable Boolean wildcard) {
            this.wildcard = Output.ofNullable(wildcard);
            return this;
        }
        public PermissionsTableWithColumnsArgs build() {
            return new PermissionsTableWithColumnsArgs(catalogId, columnNames, databaseName, excludedColumnNames, name, wildcard);
        }
    }
}
