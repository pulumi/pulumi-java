// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class CrawlerS3Target {
    /**
     * The name of the connection to use to connect to the Delta table target.
     * 
     */
    private final @Nullable String connectionName;
    /**
     * The ARN of the dead-letter SQS queue.
     * 
     */
    private final @Nullable String dlqEventQueueArn;
    /**
     * The ARN of the SQS queue to receive S3 notifications from.
     * 
     */
    private final @Nullable String eventQueueArn;
    /**
     * A list of glob patterns used to exclude from the crawl.
     * 
     */
    private final @Nullable List<String> exclusions;
    /**
     * The path of the Amazon DocumentDB or MongoDB target (database/collection).
     * 
     */
    private final String path;
    /**
     * Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
     * 
     */
    private final @Nullable Integer sampleSize;

    @OutputCustomType.Constructor({"connectionName","dlqEventQueueArn","eventQueueArn","exclusions","path","sampleSize"})
    private CrawlerS3Target(
        @Nullable String connectionName,
        @Nullable String dlqEventQueueArn,
        @Nullable String eventQueueArn,
        @Nullable List<String> exclusions,
        String path,
        @Nullable Integer sampleSize) {
        this.connectionName = connectionName;
        this.dlqEventQueueArn = dlqEventQueueArn;
        this.eventQueueArn = eventQueueArn;
        this.exclusions = exclusions;
        this.path = Objects.requireNonNull(path);
        this.sampleSize = sampleSize;
    }

    /**
     * The name of the connection to use to connect to the Delta table target.
     * 
     */
    public Optional<String> getConnectionName() {
        return Optional.ofNullable(this.connectionName);
    }
    /**
     * The ARN of the dead-letter SQS queue.
     * 
     */
    public Optional<String> getDlqEventQueueArn() {
        return Optional.ofNullable(this.dlqEventQueueArn);
    }
    /**
     * The ARN of the SQS queue to receive S3 notifications from.
     * 
     */
    public Optional<String> getEventQueueArn() {
        return Optional.ofNullable(this.eventQueueArn);
    }
    /**
     * A list of glob patterns used to exclude from the crawl.
     * 
     */
    public List<String> getExclusions() {
        return this.exclusions == null ? List.of() : this.exclusions;
    }
    /**
     * The path of the Amazon DocumentDB or MongoDB target (database/collection).
     * 
     */
    public String getPath() {
        return this.path;
    }
    /**
     * Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
     * 
     */
    public Optional<Integer> getSampleSize() {
        return Optional.ofNullable(this.sampleSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CrawlerS3Target defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String connectionName;
        private @Nullable String dlqEventQueueArn;
        private @Nullable String eventQueueArn;
        private @Nullable List<String> exclusions;
        private String path;
        private @Nullable Integer sampleSize;

        public Builder() {
    	      // Empty
        }

        public Builder(CrawlerS3Target defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionName = defaults.connectionName;
    	      this.dlqEventQueueArn = defaults.dlqEventQueueArn;
    	      this.eventQueueArn = defaults.eventQueueArn;
    	      this.exclusions = defaults.exclusions;
    	      this.path = defaults.path;
    	      this.sampleSize = defaults.sampleSize;
        }

        public Builder setConnectionName(@Nullable String connectionName) {
            this.connectionName = connectionName;
            return this;
        }

        public Builder setDlqEventQueueArn(@Nullable String dlqEventQueueArn) {
            this.dlqEventQueueArn = dlqEventQueueArn;
            return this;
        }

        public Builder setEventQueueArn(@Nullable String eventQueueArn) {
            this.eventQueueArn = eventQueueArn;
            return this;
        }

        public Builder setExclusions(@Nullable List<String> exclusions) {
            this.exclusions = exclusions;
            return this;
        }

        public Builder setPath(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }

        public Builder setSampleSize(@Nullable Integer sampleSize) {
            this.sampleSize = sampleSize;
            return this;
        }
        public CrawlerS3Target build() {
            return new CrawlerS3Target(connectionName, dlqEventQueueArn, eventQueueArn, exclusions, path, sampleSize);
        }
    }
}
