// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.iam;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.iam.RoleArgs;
import io.pulumi.aws.iam.inputs.RoleState;
import io.pulumi.aws.iam.outputs.RoleInlinePolicy;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides an IAM role.
 * 
 * > **NOTE:** If policies are attached to the role via the `aws.iam.PolicyAttachment` resource and you are modifying the role `name` or `path`, the `force_detach_policies` argument must be set to `true` and applied before attempting the operation otherwise you will encounter a `DeleteConflict` error. The `aws.iam.RolePolicyAttachment` resource does not have this requirement.
 * 
 * > **NOTE:** If you use this resource's `managed_policy_arns` argument or `inline_policy` configuration blocks, this resource will take over exclusive management of the role's respective policy types (e.g., both policy types if both arguments are used). These arguments are incompatible with other ways of managing a role's policies, such as `aws.iam.PolicyAttachment`, `aws.iam.RolePolicyAttachment`, and `aws.iam.RolePolicy`. If you attempt to manage a role's policies by multiple means, you will get resource cycling and/or errors.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Basic Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testRole = new aws.iam.Role("testRole", {
 *     assumeRolePolicy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Action: "sts:AssumeRole",
 *             Effect: "Allow",
 *             Sid: "",
 *             Principal: {
 *                 Service: "ec2.amazonaws.com",
 *             },
 *         }],
 *     }),
 *     tags: {
 *         "tag-key": "tag-value",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import json
 * import pulumi_aws as aws
 * 
 * test_role = aws.iam.Role("testRole",
 *     assume_role_policy=json.dumps({
 *         "Version": "2012-10-17",
 *         "Statement": [{
 *             "Action": "sts:AssumeRole",
 *             "Effect": "Allow",
 *             "Sid": "",
 *             "Principal": {
 *                 "Service": "ec2.amazonaws.com",
 *             },
 *         }],
 *     }),
 *     tags={
 *         "tag-key": "tag-value",
 *     })
 * ```
 * ```csharp
 * using System.Collections.Generic;
 * using System.Text.Json;
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var testRole = new Aws.Iam.Role("testRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary<string, object?>
 *             {
 *                 { "Version", "2012-10-17" },
 *                 { "Statement", new[]
 *                     {
 *                         new Dictionary<string, object?>
 *                         {
 *                             { "Action", "sts:AssumeRole" },
 *                             { "Effect", "Allow" },
 *                             { "Sid", "" },
 *                             { "Principal", new Dictionary<string, object?>
 *                             {
 *                                 { "Service", "ec2.amazonaws.com" },
 *                             } },
 *                         },
 *                     }
 *                  },
 *             }),
 *             Tags = 
 *             {
 *                 { "tag-key", "tag-value" },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"encoding/json"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		tmpJSON0, err := json.Marshal(map[string]interface{}{
 * 			"Version": "2012-10-17",
 * 			"Statement": []map[string]interface{}{
 * 				map[string]interface{}{
 * 					"Action": "sts:AssumeRole",
 * 					"Effect": "Allow",
 * 					"Sid":    "",
 * 					"Principal": map[string]interface{}{
 * 						"Service": "ec2.amazonaws.com",
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		json0 := string(tmpJSON0)
 * 		_, err := iam.NewRole(ctx, "testRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.String(json0),
 * 			Tags: pulumi.StringMap{
 * 				"tag-key": pulumi.String("tag-value"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example of Using Data Source for Assume Role Policy
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const instance-assume-role-policy = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["ec2.amazonaws.com"],
 *         }],
 *     }],
 * });
 * const instance = new aws.iam.Role("instance", {
 *     path: "/system/",
 *     assumeRolePolicy: instance_assume_role_policy.then(instance_assume_role_policy => instance_assume_role_policy.json),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * instance_assume_role_policy = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     actions=["sts:AssumeRole"],
 *     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *         type="Service",
 *         identifiers=["ec2.amazonaws.com"],
 *     )],
 * )])
 * instance = aws.iam.Role("instance",
 *     path="/system/",
 *     assume_role_policy=instance_assume_role_policy.json)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var instance_assume_role_policy = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Actions = 
 *                     {
 *                         "sts:AssumeRole",
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                         {
 *                             Type = "Service",
 *                             Identifiers = 
 *                             {
 *                                 "ec2.amazonaws.com",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         }));
 *         var instance = new Aws.Iam.Role("instance", new Aws.Iam.RoleArgs
 *         {
 *             Path = "/system/",
 *             AssumeRolePolicy = instance_assume_role_policy.Apply(instance_assume_role_policy => instance_assume_role_policy.Json),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		instance_assume_role_policy, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Actions: []string{
 * 						"sts:AssumeRole",
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Type: "Service",
 * 							Identifiers: []string{
 * 								"ec2.amazonaws.com",
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRole(ctx, "instance", &iam.RoleArgs{
 * 			Path:             pulumi.String("/system/"),
 * 			AssumeRolePolicy: pulumi.String(instance_assume_role_policy.Json),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example of Exclusive Inline Policies
 * 
 * This example creates an IAM role with two inline IAM policies. If someone adds another inline policy out-of-band, on the next apply, the provider will remove that policy. If someone deletes these policies out-of-band, the provider will recreate them.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const inlinePolicy = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["ec2:DescribeAccountAttributes"],
 *         resources: ["*"],
 *     }],
 * });
 * const example = new aws.iam.Role("example", {
 *     assumeRolePolicy: data.aws_iam_policy_document.instance_assume_role_policy.json,
 *     inlinePolicies: [
 *         {
 *             name: "my_inline_policy",
 *             policy: JSON.stringify({
 *                 Version: "2012-10-17",
 *                 Statement: [{
 *                     Action: ["ec2:Describe*"],
 *                     Effect: "Allow",
 *                     Resource: "*",
 *                 }],
 *             }),
 *         },
 *         {
 *             name: "policy-8675309",
 *             policy: inlinePolicy.then(inlinePolicy => inlinePolicy.json),
 *         },
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import json
 * import pulumi_aws as aws
 * 
 * inline_policy = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     actions=["ec2:DescribeAccountAttributes"],
 *     resources=["*"],
 * )])
 * example = aws.iam.Role("example",
 *     assume_role_policy=data["aws_iam_policy_document"]["instance_assume_role_policy"]["json"],
 *     inline_policies=[
 *         aws.iam.RoleInlinePolicyArgs(
 *             name="my_inline_policy",
 *             policy=json.dumps({
 *                 "Version": "2012-10-17",
 *                 "Statement": [{
 *                     "Action": ["ec2:Describe*"],
 *                     "Effect": "Allow",
 *                     "Resource": "*",
 *                 }],
 *             }),
 *         ),
 *         aws.iam.RoleInlinePolicyArgs(
 *             name="policy-8675309",
 *             policy=inline_policy.json,
 *         ),
 *     ])
 * ```
 * ```csharp
 * using System.Collections.Generic;
 * using System.Text.Json;
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var inlinePolicy = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Actions = 
 *                     {
 *                         "ec2:DescribeAccountAttributes",
 *                     },
 *                     Resources = 
 *                     {
 *                         "*",
 *                     },
 *                 },
 *             },
 *         }));
 *         var example = new Aws.Iam.Role("example", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = data.Aws_iam_policy_document.Instance_assume_role_policy.Json,
 *             InlinePolicies = 
 *             {
 *                 new Aws.Iam.Inputs.RoleInlinePolicyArgs
 *                 {
 *                     Name = "my_inline_policy",
 *                     Policy = JsonSerializer.Serialize(new Dictionary<string, object?>
 *                     {
 *                         { "Version", "2012-10-17" },
 *                         { "Statement", new[]
 *                             {
 *                                 new Dictionary<string, object?>
 *                                 {
 *                                     { "Action", new[]
 *                                         {
 *                                             "ec2:Describe*",
 *                                         }
 *                                      },
 *                                     { "Effect", "Allow" },
 *                                     { "Resource", "*" },
 *                                 },
 *                             }
 *                          },
 *                     }),
 *                 },
 *                 new Aws.Iam.Inputs.RoleInlinePolicyArgs
 *                 {
 *                     Name = "policy-8675309",
 *                     Policy = inlinePolicy.Apply(inlinePolicy => inlinePolicy.Json),
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"encoding/json"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		inlinePolicy, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Actions: []string{
 * 						"ec2:DescribeAccountAttributes",
 * 					},
 * 					Resources: []string{
 * 						"*",
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		tmpJSON0, err := json.Marshal(map[string]interface{}{
 * 			"Version": "2012-10-17",
 * 			"Statement": []map[string]interface{}{
 * 				map[string]interface{}{
 * 					"Action": []string{
 * 						"ec2:Describe*",
 * 					},
 * 					"Effect":   "Allow",
 * 					"Resource": "*",
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		json0 := string(tmpJSON0)
 * 		_, err = iam.NewRole(ctx, "example", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(data.Aws_iam_policy_document.Instance_assume_role_policy.Json),
 * 			InlinePolicies: iam.RoleInlinePolicyArray{
 * 				&iam.RoleInlinePolicyArgs{
 * 					Name:   pulumi.String("my_inline_policy"),
 * 					Policy: pulumi.String(json0),
 * 				},
 * 				&iam.RoleInlinePolicyArgs{
 * 					Name:   pulumi.String("policy-8675309"),
 * 					Policy: pulumi.String(inlinePolicy.Json),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example of Removing Inline Policies
 * 
 * This example creates an IAM role with what appears to be empty IAM `inline_policy` argument instead of using `inline_policy` as a configuration block. The result is that if someone were to add an inline policy out-of-band, on the next apply, the provider will remove that policy.
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.iam.Role("example", {
 *     assumeRolePolicy: data.aws_iam_policy_document.instance_assume_role_policy.json,
 *     inlinePolicies: [{}],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.iam.Role("example",
 *     assume_role_policy=data["aws_iam_policy_document"]["instance_assume_role_policy"]["json"],
 *     inline_policies=[aws.iam.RoleInlinePolicyArgs()])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Iam.Role("example", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = data.Aws_iam_policy_document.Instance_assume_role_policy.Json,
 *             InlinePolicies = 
 *             {
 *                 ,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := iam.NewRole(ctx, "example", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(data.Aws_iam_policy_document.Instance_assume_role_policy.Json),
 * 			InlinePolicies: iam.RoleInlinePolicyArray{
 * 				nil,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example of Exclusive Managed Policies
 * 
 * This example creates an IAM role and attaches two managed IAM policies. If someone attaches another managed policy out-of-band, on the next apply, the provider will detach that policy. If someone detaches these policies out-of-band, the provider will attach them again.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const policyOne = new aws.iam.Policy("policyOne", {policy: JSON.stringify({
 *     Version: "2012-10-17",
 *     Statement: [{
 *         Action: ["ec2:Describe*"],
 *         Effect: "Allow",
 *         Resource: "*",
 *     }],
 * })});
 * const policyTwo = new aws.iam.Policy("policyTwo", {policy: JSON.stringify({
 *     Version: "2012-10-17",
 *     Statement: [{
 *         Action: [
 *             "s3:ListAllMyBuckets",
 *             "s3:ListBucket",
 *             "s3:HeadBucket",
 *         ],
 *         Effect: "Allow",
 *         Resource: "*",
 *     }],
 * })});
 * const example = new aws.iam.Role("example", {
 *     assumeRolePolicy: data.aws_iam_policy_document.instance_assume_role_policy.json,
 *     managedPolicyArns: [
 *         policyOne.arn,
 *         policyTwo.arn,
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import json
 * import pulumi_aws as aws
 * 
 * policy_one = aws.iam.Policy("policyOne", policy=json.dumps({
 *     "Version": "2012-10-17",
 *     "Statement": [{
 *         "Action": ["ec2:Describe*"],
 *         "Effect": "Allow",
 *         "Resource": "*",
 *     }],
 * }))
 * policy_two = aws.iam.Policy("policyTwo", policy=json.dumps({
 *     "Version": "2012-10-17",
 *     "Statement": [{
 *         "Action": [
 *             "s3:ListAllMyBuckets",
 *             "s3:ListBucket",
 *             "s3:HeadBucket",
 *         ],
 *         "Effect": "Allow",
 *         "Resource": "*",
 *     }],
 * }))
 * example = aws.iam.Role("example",
 *     assume_role_policy=data["aws_iam_policy_document"]["instance_assume_role_policy"]["json"],
 *     managed_policy_arns=[
 *         policy_one.arn,
 *         policy_two.arn,
 *     ])
 * ```
 * ```csharp
 * using System.Collections.Generic;
 * using System.Text.Json;
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var policyOne = new Aws.Iam.Policy("policyOne", new Aws.Iam.PolicyArgs
 *         {
 *             Policy = JsonSerializer.Serialize(new Dictionary<string, object?>
 *             {
 *                 { "Version", "2012-10-17" },
 *                 { "Statement", new[]
 *                     {
 *                         new Dictionary<string, object?>
 *                         {
 *                             { "Action", new[]
 *                                 {
 *                                     "ec2:Describe*",
 *                                 }
 *                              },
 *                             { "Effect", "Allow" },
 *                             { "Resource", "*" },
 *                         },
 *                     }
 *                  },
 *             }),
 *         });
 *         var policyTwo = new Aws.Iam.Policy("policyTwo", new Aws.Iam.PolicyArgs
 *         {
 *             Policy = JsonSerializer.Serialize(new Dictionary<string, object?>
 *             {
 *                 { "Version", "2012-10-17" },
 *                 { "Statement", new[]
 *                     {
 *                         new Dictionary<string, object?>
 *                         {
 *                             { "Action", new[]
 *                                 {
 *                                     "s3:ListAllMyBuckets",
 *                                     "s3:ListBucket",
 *                                     "s3:HeadBucket",
 *                                 }
 *                              },
 *                             { "Effect", "Allow" },
 *                             { "Resource", "*" },
 *                         },
 *                     }
 *                  },
 *             }),
 *         });
 *         var example = new Aws.Iam.Role("example", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = data.Aws_iam_policy_document.Instance_assume_role_policy.Json,
 *             ManagedPolicyArns = 
 *             {
 *                 policyOne.Arn,
 *                 policyTwo.Arn,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"encoding/json"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		tmpJSON0, err := json.Marshal(map[string]interface{}{
 * 			"Version": "2012-10-17",
 * 			"Statement": []map[string]interface{}{
 * 				map[string]interface{}{
 * 					"Action": []string{
 * 						"ec2:Describe*",
 * 					},
 * 					"Effect":   "Allow",
 * 					"Resource": "*",
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		json0 := string(tmpJSON0)
 * 		policyOne, err := iam.NewPolicy(ctx, "policyOne", &iam.PolicyArgs{
 * 			Policy: pulumi.String(json0),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		tmpJSON1, err := json.Marshal(map[string]interface{}{
 * 			"Version": "2012-10-17",
 * 			"Statement": []map[string]interface{}{
 * 				map[string]interface{}{
 * 					"Action": []string{
 * 						"s3:ListAllMyBuckets",
 * 						"s3:ListBucket",
 * 						"s3:HeadBucket",
 * 					},
 * 					"Effect":   "Allow",
 * 					"Resource": "*",
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		json1 := string(tmpJSON1)
 * 		policyTwo, err := iam.NewPolicy(ctx, "policyTwo", &iam.PolicyArgs{
 * 			Policy: pulumi.String(json1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRole(ctx, "example", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(data.Aws_iam_policy_document.Instance_assume_role_policy.Json),
 * 			ManagedPolicyArns: pulumi.StringArray{
 * 				policyOne.Arn,
 * 				policyTwo.Arn,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example of Removing Managed Policies
 * 
 * This example creates an IAM role with an empty `managed_policy_arns` argument. If someone attaches a policy out-of-band, on the next apply, the provider will detach that policy.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.iam.Role("example", {
 *     assumeRolePolicy: data.aws_iam_policy_document.instance_assume_role_policy.json,
 *     managedPolicyArns: [],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.iam.Role("example",
 *     assume_role_policy=data["aws_iam_policy_document"]["instance_assume_role_policy"]["json"],
 *     managed_policy_arns=[])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Iam.Role("example", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = data.Aws_iam_policy_document.Instance_assume_role_policy.Json,
 *             ManagedPolicyArns = {},
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := iam.NewRole(ctx, "example", &iam.RoleArgs{
 * 			AssumeRolePolicy:  pulumi.Any(data.Aws_iam_policy_document.Instance_assume_role_policy.Json),
 * 			ManagedPolicyArns: pulumi.StringArray{},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * IAM Roles can be imported using the `name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:iam/role:Role developer developer_name
 * ```
 * 
 *  
 */
@ResourceType(type="aws:iam/role:Role")
public class Role extends io.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name (ARN) specifying the role.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) specifying the role.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Policy that grants an entity permission to assume the role.
     * 
     */
    @Export(name="assumeRolePolicy", type=String.class, parameters={})
    private Output<String> assumeRolePolicy;

    /**
     * @return Policy that grants an entity permission to assume the role.
     * 
     */
    public Output<String> getAssumeRolePolicy() {
        return this.assumeRolePolicy;
    }
    /**
     * Creation date of the IAM role.
     * 
     */
    @Export(name="createDate", type=String.class, parameters={})
    private Output<String> createDate;

    /**
     * @return Creation date of the IAM role.
     * 
     */
    public Output<String> getCreateDate() {
        return this.createDate;
    }
    /**
     * Description of the role.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the role.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
     * 
     */
    @Export(name="forceDetachPolicies", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceDetachPolicies;

    /**
     * @return Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
     * 
     */
    public Output</* @Nullable */ Boolean> getForceDetachPolicies() {
        return this.forceDetachPolicies;
    }
    /**
     * Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, this provider will not manage any inline policies in this resource. Configuring one empty block (i.e., `inline_policy {}`) will cause the provider to remove _all_ inline policies added out of band on `apply`.
     * 
     */
    @Export(name="inlinePolicies", type=List.class, parameters={RoleInlinePolicy.class})
    private Output<List<RoleInlinePolicy>> inlinePolicies;

    /**
     * @return Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, this provider will not manage any inline policies in this resource. Configuring one empty block (i.e., `inline_policy {}`) will cause the provider to remove _all_ inline policies added out of band on `apply`.
     * 
     */
    public Output<List<RoleInlinePolicy>> getInlinePolicies() {
        return this.inlinePolicies;
    }
    /**
     * Set of exclusive IAM managed policy ARNs to attach to the IAM role. If this attribute is not configured, this provider will ignore policy attachments to this resource. When configured, the provider will align the role's managed policy attachments with this set by attaching or detaching managed policies. Configuring an empty set (i.e., `managed_policy_arns = []`) will cause the provider to remove _all_ managed policy attachments.
     * 
     */
    @Export(name="managedPolicyArns", type=List.class, parameters={String.class})
    private Output<List<String>> managedPolicyArns;

    /**
     * @return Set of exclusive IAM managed policy ARNs to attach to the IAM role. If this attribute is not configured, this provider will ignore policy attachments to this resource. When configured, the provider will align the role's managed policy attachments with this set by attaching or detaching managed policies. Configuring an empty set (i.e., `managed_policy_arns = []`) will cause the provider to remove _all_ managed policy attachments.
     * 
     */
    public Output<List<String>> getManagedPolicyArns() {
        return this.managedPolicyArns;
    }
    /**
     * Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
     * 
     */
    @Export(name="maxSessionDuration", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> maxSessionDuration;

    /**
     * @return Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
     * 
     */
    public Output</* @Nullable */ Integer> getMaxSessionDuration() {
        return this.maxSessionDuration;
    }
    /**
     * Name of the role policy.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the role policy.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @Export(name="namePrefix", type=String.class, parameters={})
    private Output<String> namePrefix;

    /**
     * @return Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    public Output<String> getNamePrefix() {
        return this.namePrefix;
    }
    /**
     * Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
     * 
     */
    @Export(name="path", type=String.class, parameters={})
    private Output</* @Nullable */ String> path;

    /**
     * @return Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
     * 
     */
    public Output</* @Nullable */ String> getPath() {
        return this.path;
    }
    /**
     * ARN of the policy that is used to set the permissions boundary for the role.
     * 
     */
    @Export(name="permissionsBoundary", type=String.class, parameters={})
    private Output</* @Nullable */ String> permissionsBoundary;

    /**
     * @return ARN of the policy that is used to set the permissions boundary for the role.
     * 
     */
    public Output</* @Nullable */ String> getPermissionsBoundary() {
        return this.permissionsBoundary;
    }
    /**
     * Key-value mapping of tags for the IAM role. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value mapping of tags for the IAM role. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * Stable and unique string identifying the role.
     * 
     */
    @Export(name="uniqueId", type=String.class, parameters={})
    private Output<String> uniqueId;

    /**
     * @return Stable and unique string identifying the role.
     * 
     */
    public Output<String> getUniqueId() {
        return this.uniqueId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Role(String name) {
        this(name, RoleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Role(String name, RoleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Role(String name, RoleArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:iam/role:Role", name, args == null ? RoleArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Role(String name, Output<String> id, @Nullable RoleState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:iam/role:Role", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Role get(String name, Output<String> id, @Nullable RoleState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Role(name, id, state, options);
    }
}
