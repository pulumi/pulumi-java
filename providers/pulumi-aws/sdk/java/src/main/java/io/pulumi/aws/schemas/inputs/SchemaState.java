// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.schemas.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SchemaState extends io.pulumi.resources.ResourceArgs {

    public static final SchemaState Empty = new SchemaState();

    /**
     * The Amazon Resource Name (ARN) of the discoverer.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * The schema specification. Must be a valid Open API 3.0 spec.
     * 
     */
    @Import(name="content")
      private final @Nullable Output<String> content;

    public Output<String> getContent() {
        return this.content == null ? Output.empty() : this.content;
    }

    /**
     * The description of the schema. Maximum of 256 characters.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The last modified date of the schema.
     * 
     */
    @Import(name="lastModified")
      private final @Nullable Output<String> lastModified;

    public Output<String> getLastModified() {
        return this.lastModified == null ? Output.empty() : this.lastModified;
    }

    /**
     * The name of the schema. Maximum of 385 characters consisting of lower case letters, upper case letters, ., -, _, @.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The name of the registry in which this schema belongs.
     * 
     */
    @Import(name="registryName")
      private final @Nullable Output<String> registryName;

    public Output<String> getRegistryName() {
        return this.registryName == null ? Output.empty() : this.registryName;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * The type of the schema. Valid values: `OpenApi3`.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    /**
     * The version of the schema.
     * 
     */
    @Import(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Output.empty() : this.version;
    }

    /**
     * The created date of the version of the schema.
     * 
     */
    @Import(name="versionCreatedDate")
      private final @Nullable Output<String> versionCreatedDate;

    public Output<String> getVersionCreatedDate() {
        return this.versionCreatedDate == null ? Output.empty() : this.versionCreatedDate;
    }

    public SchemaState(
        @Nullable Output<String> arn,
        @Nullable Output<String> content,
        @Nullable Output<String> description,
        @Nullable Output<String> lastModified,
        @Nullable Output<String> name,
        @Nullable Output<String> registryName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> type,
        @Nullable Output<String> version,
        @Nullable Output<String> versionCreatedDate) {
        this.arn = arn;
        this.content = content;
        this.description = description;
        this.lastModified = lastModified;
        this.name = name;
        this.registryName = registryName;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.type = type;
        this.version = version;
        this.versionCreatedDate = versionCreatedDate;
    }

    private SchemaState() {
        this.arn = Output.empty();
        this.content = Output.empty();
        this.description = Output.empty();
        this.lastModified = Output.empty();
        this.name = Output.empty();
        this.registryName = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.type = Output.empty();
        this.version = Output.empty();
        this.versionCreatedDate = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchemaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> content;
        private @Nullable Output<String> description;
        private @Nullable Output<String> lastModified;
        private @Nullable Output<String> name;
        private @Nullable Output<String> registryName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> type;
        private @Nullable Output<String> version;
        private @Nullable Output<String> versionCreatedDate;

        public Builder() {
    	      // Empty
        }

        public Builder(SchemaState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.content = defaults.content;
    	      this.description = defaults.description;
    	      this.lastModified = defaults.lastModified;
    	      this.name = defaults.name;
    	      this.registryName = defaults.registryName;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
    	      this.versionCreatedDate = defaults.versionCreatedDate;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }

        public Builder content(@Nullable Output<String> content) {
            this.content = content;
            return this;
        }

        public Builder content(@Nullable String content) {
            this.content = Output.ofNullable(content);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder lastModified(@Nullable Output<String> lastModified) {
            this.lastModified = lastModified;
            return this;
        }

        public Builder lastModified(@Nullable String lastModified) {
            this.lastModified = Output.ofNullable(lastModified);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder registryName(@Nullable Output<String> registryName) {
            this.registryName = registryName;
            return this;
        }

        public Builder registryName(@Nullable String registryName) {
            this.registryName = Output.ofNullable(registryName);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }

        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }

        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }

        public Builder version(@Nullable String version) {
            this.version = Output.ofNullable(version);
            return this;
        }

        public Builder versionCreatedDate(@Nullable Output<String> versionCreatedDate) {
            this.versionCreatedDate = versionCreatedDate;
            return this;
        }

        public Builder versionCreatedDate(@Nullable String versionCreatedDate) {
            this.versionCreatedDate = Output.ofNullable(versionCreatedDate);
            return this;
        }
        public SchemaState build() {
            return new SchemaState(arn, content, description, lastModified, name, registryName, tags, tagsAll, type, version, versionCreatedDate);
        }
    }
}
