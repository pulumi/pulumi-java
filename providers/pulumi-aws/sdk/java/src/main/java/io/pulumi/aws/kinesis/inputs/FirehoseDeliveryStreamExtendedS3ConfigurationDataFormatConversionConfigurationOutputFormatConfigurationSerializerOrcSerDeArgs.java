// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesis.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs extends io.pulumi.resources.ResourceArgs {

    public static final FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs Empty = new FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs();

    /**
     * The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
     * 
     */
    @Import(name="blockSizeBytes")
      private final @Nullable Output<Integer> blockSizeBytes;

    public Output<Integer> getBlockSizeBytes() {
        return this.blockSizeBytes == null ? Output.empty() : this.blockSizeBytes;
    }

    /**
     * A list of column names for which you want Kinesis Data Firehose to create bloom filters.
     * 
     */
    @Import(name="bloomFilterColumns")
      private final @Nullable Output<List<String>> bloomFilterColumns;

    public Output<List<String>> getBloomFilterColumns() {
        return this.bloomFilterColumns == null ? Output.empty() : this.bloomFilterColumns;
    }

    /**
     * The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is `0.05`, the minimum is `0`, and the maximum is `1`.
     * 
     */
    @Import(name="bloomFilterFalsePositiveProbability")
      private final @Nullable Output<Double> bloomFilterFalsePositiveProbability;

    public Output<Double> getBloomFilterFalsePositiveProbability() {
        return this.bloomFilterFalsePositiveProbability == null ? Output.empty() : this.bloomFilterFalsePositiveProbability;
    }

    /**
     * The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
     * 
     */
    @Import(name="compression")
      private final @Nullable Output<String> compression;

    public Output<String> getCompression() {
        return this.compression == null ? Output.empty() : this.compression;
    }

    /**
     * A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to `1`.
     * 
     */
    @Import(name="dictionaryKeyThreshold")
      private final @Nullable Output<Double> dictionaryKeyThreshold;

    public Output<Double> getDictionaryKeyThreshold() {
        return this.dictionaryKeyThreshold == null ? Output.empty() : this.dictionaryKeyThreshold;
    }

    /**
     * Set this to `true` to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `false`.
     * 
     */
    @Import(name="enablePadding")
      private final @Nullable Output<Boolean> enablePadding;

    public Output<Boolean> getEnablePadding() {
        return this.enablePadding == null ? Output.empty() : this.enablePadding;
    }

    /**
     * The version of the file to write. The possible values are `V0_11` and `V0_12`. The default is `V0_12`.
     * 
     */
    @Import(name="formatVersion")
      private final @Nullable Output<String> formatVersion;

    public Output<String> getFormatVersion() {
        return this.formatVersion == null ? Output.empty() : this.formatVersion;
    }

    /**
     * A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is `0.05`, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when `enable_padding` is `false`.
     * 
     */
    @Import(name="paddingTolerance")
      private final @Nullable Output<Double> paddingTolerance;

    public Output<Double> getPaddingTolerance() {
        return this.paddingTolerance == null ? Output.empty() : this.paddingTolerance;
    }

    /**
     * The number of rows between index entries. The default is `10000` and the minimum is `1000`.
     * 
     */
    @Import(name="rowIndexStride")
      private final @Nullable Output<Integer> rowIndexStride;

    public Output<Integer> getRowIndexStride() {
        return this.rowIndexStride == null ? Output.empty() : this.rowIndexStride;
    }

    /**
     * The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
     * 
     */
    @Import(name="stripeSizeBytes")
      private final @Nullable Output<Integer> stripeSizeBytes;

    public Output<Integer> getStripeSizeBytes() {
        return this.stripeSizeBytes == null ? Output.empty() : this.stripeSizeBytes;
    }

    public FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs(
        @Nullable Output<Integer> blockSizeBytes,
        @Nullable Output<List<String>> bloomFilterColumns,
        @Nullable Output<Double> bloomFilterFalsePositiveProbability,
        @Nullable Output<String> compression,
        @Nullable Output<Double> dictionaryKeyThreshold,
        @Nullable Output<Boolean> enablePadding,
        @Nullable Output<String> formatVersion,
        @Nullable Output<Double> paddingTolerance,
        @Nullable Output<Integer> rowIndexStride,
        @Nullable Output<Integer> stripeSizeBytes) {
        this.blockSizeBytes = blockSizeBytes;
        this.bloomFilterColumns = bloomFilterColumns;
        this.bloomFilterFalsePositiveProbability = bloomFilterFalsePositiveProbability;
        this.compression = compression;
        this.dictionaryKeyThreshold = dictionaryKeyThreshold;
        this.enablePadding = enablePadding;
        this.formatVersion = formatVersion;
        this.paddingTolerance = paddingTolerance;
        this.rowIndexStride = rowIndexStride;
        this.stripeSizeBytes = stripeSizeBytes;
    }

    private FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs() {
        this.blockSizeBytes = Output.empty();
        this.bloomFilterColumns = Output.empty();
        this.bloomFilterFalsePositiveProbability = Output.empty();
        this.compression = Output.empty();
        this.dictionaryKeyThreshold = Output.empty();
        this.enablePadding = Output.empty();
        this.formatVersion = Output.empty();
        this.paddingTolerance = Output.empty();
        this.rowIndexStride = Output.empty();
        this.stripeSizeBytes = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> blockSizeBytes;
        private @Nullable Output<List<String>> bloomFilterColumns;
        private @Nullable Output<Double> bloomFilterFalsePositiveProbability;
        private @Nullable Output<String> compression;
        private @Nullable Output<Double> dictionaryKeyThreshold;
        private @Nullable Output<Boolean> enablePadding;
        private @Nullable Output<String> formatVersion;
        private @Nullable Output<Double> paddingTolerance;
        private @Nullable Output<Integer> rowIndexStride;
        private @Nullable Output<Integer> stripeSizeBytes;

        public Builder() {
    	      // Empty
        }

        public Builder(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockSizeBytes = defaults.blockSizeBytes;
    	      this.bloomFilterColumns = defaults.bloomFilterColumns;
    	      this.bloomFilterFalsePositiveProbability = defaults.bloomFilterFalsePositiveProbability;
    	      this.compression = defaults.compression;
    	      this.dictionaryKeyThreshold = defaults.dictionaryKeyThreshold;
    	      this.enablePadding = defaults.enablePadding;
    	      this.formatVersion = defaults.formatVersion;
    	      this.paddingTolerance = defaults.paddingTolerance;
    	      this.rowIndexStride = defaults.rowIndexStride;
    	      this.stripeSizeBytes = defaults.stripeSizeBytes;
        }

        public Builder blockSizeBytes(@Nullable Output<Integer> blockSizeBytes) {
            this.blockSizeBytes = blockSizeBytes;
            return this;
        }

        public Builder blockSizeBytes(@Nullable Integer blockSizeBytes) {
            this.blockSizeBytes = Output.ofNullable(blockSizeBytes);
            return this;
        }

        public Builder bloomFilterColumns(@Nullable Output<List<String>> bloomFilterColumns) {
            this.bloomFilterColumns = bloomFilterColumns;
            return this;
        }

        public Builder bloomFilterColumns(@Nullable List<String> bloomFilterColumns) {
            this.bloomFilterColumns = Output.ofNullable(bloomFilterColumns);
            return this;
        }

        public Builder bloomFilterFalsePositiveProbability(@Nullable Output<Double> bloomFilterFalsePositiveProbability) {
            this.bloomFilterFalsePositiveProbability = bloomFilterFalsePositiveProbability;
            return this;
        }

        public Builder bloomFilterFalsePositiveProbability(@Nullable Double bloomFilterFalsePositiveProbability) {
            this.bloomFilterFalsePositiveProbability = Output.ofNullable(bloomFilterFalsePositiveProbability);
            return this;
        }

        public Builder compression(@Nullable Output<String> compression) {
            this.compression = compression;
            return this;
        }

        public Builder compression(@Nullable String compression) {
            this.compression = Output.ofNullable(compression);
            return this;
        }

        public Builder dictionaryKeyThreshold(@Nullable Output<Double> dictionaryKeyThreshold) {
            this.dictionaryKeyThreshold = dictionaryKeyThreshold;
            return this;
        }

        public Builder dictionaryKeyThreshold(@Nullable Double dictionaryKeyThreshold) {
            this.dictionaryKeyThreshold = Output.ofNullable(dictionaryKeyThreshold);
            return this;
        }

        public Builder enablePadding(@Nullable Output<Boolean> enablePadding) {
            this.enablePadding = enablePadding;
            return this;
        }

        public Builder enablePadding(@Nullable Boolean enablePadding) {
            this.enablePadding = Output.ofNullable(enablePadding);
            return this;
        }

        public Builder formatVersion(@Nullable Output<String> formatVersion) {
            this.formatVersion = formatVersion;
            return this;
        }

        public Builder formatVersion(@Nullable String formatVersion) {
            this.formatVersion = Output.ofNullable(formatVersion);
            return this;
        }

        public Builder paddingTolerance(@Nullable Output<Double> paddingTolerance) {
            this.paddingTolerance = paddingTolerance;
            return this;
        }

        public Builder paddingTolerance(@Nullable Double paddingTolerance) {
            this.paddingTolerance = Output.ofNullable(paddingTolerance);
            return this;
        }

        public Builder rowIndexStride(@Nullable Output<Integer> rowIndexStride) {
            this.rowIndexStride = rowIndexStride;
            return this;
        }

        public Builder rowIndexStride(@Nullable Integer rowIndexStride) {
            this.rowIndexStride = Output.ofNullable(rowIndexStride);
            return this;
        }

        public Builder stripeSizeBytes(@Nullable Output<Integer> stripeSizeBytes) {
            this.stripeSizeBytes = stripeSizeBytes;
            return this;
        }

        public Builder stripeSizeBytes(@Nullable Integer stripeSizeBytes) {
            this.stripeSizeBytes = Output.ofNullable(stripeSizeBytes);
            return this;
        }
        public FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs build() {
            return new FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs(blockSizeBytes, bloomFilterColumns, bloomFilterFalsePositiveProbability, compression, dictionaryKeyThreshold, enablePadding, formatVersion, paddingTolerance, rowIndexStride, stripeSizeBytes);
        }
    }
}
