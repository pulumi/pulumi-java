// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.autoscaling.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GroupWarmPoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final GroupWarmPoolArgs Empty = new GroupWarmPoolArgs();

    /**
     * Specifies the total maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group.
     * 
     */
    @InputImport(name="maxGroupPreparedCapacity")
      private final @Nullable Input<Integer> maxGroupPreparedCapacity;

    public Input<Integer> getMaxGroupPreparedCapacity() {
        return this.maxGroupPreparedCapacity == null ? Input.empty() : this.maxGroupPreparedCapacity;
    }

    /**
     * Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
     * 
     */
    @InputImport(name="minSize")
      private final @Nullable Input<Integer> minSize;

    public Input<Integer> getMinSize() {
        return this.minSize == null ? Input.empty() : this.minSize;
    }

    /**
     * Sets the instance state to transition to after the lifecycle hooks finish. Valid values are: Stopped (default) or Running.
     * 
     */
    @InputImport(name="poolState")
      private final @Nullable Input<String> poolState;

    public Input<String> getPoolState() {
        return this.poolState == null ? Input.empty() : this.poolState;
    }

    public GroupWarmPoolArgs(
        @Nullable Input<Integer> maxGroupPreparedCapacity,
        @Nullable Input<Integer> minSize,
        @Nullable Input<String> poolState) {
        this.maxGroupPreparedCapacity = maxGroupPreparedCapacity;
        this.minSize = minSize;
        this.poolState = poolState;
    }

    private GroupWarmPoolArgs() {
        this.maxGroupPreparedCapacity = Input.empty();
        this.minSize = Input.empty();
        this.poolState = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupWarmPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> maxGroupPreparedCapacity;
        private @Nullable Input<Integer> minSize;
        private @Nullable Input<String> poolState;

        public Builder() {
    	      // Empty
        }

        public Builder(GroupWarmPoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxGroupPreparedCapacity = defaults.maxGroupPreparedCapacity;
    	      this.minSize = defaults.minSize;
    	      this.poolState = defaults.poolState;
        }

        public Builder setMaxGroupPreparedCapacity(@Nullable Input<Integer> maxGroupPreparedCapacity) {
            this.maxGroupPreparedCapacity = maxGroupPreparedCapacity;
            return this;
        }

        public Builder setMaxGroupPreparedCapacity(@Nullable Integer maxGroupPreparedCapacity) {
            this.maxGroupPreparedCapacity = Input.ofNullable(maxGroupPreparedCapacity);
            return this;
        }

        public Builder setMinSize(@Nullable Input<Integer> minSize) {
            this.minSize = minSize;
            return this;
        }

        public Builder setMinSize(@Nullable Integer minSize) {
            this.minSize = Input.ofNullable(minSize);
            return this;
        }

        public Builder setPoolState(@Nullable Input<String> poolState) {
            this.poolState = poolState;
            return this;
        }

        public Builder setPoolState(@Nullable String poolState) {
            this.poolState = Input.ofNullable(poolState);
            return this;
        }
        public GroupWarmPoolArgs build() {
            return new GroupWarmPoolArgs(maxGroupPreparedCapacity, minSize, poolState);
        }
    }
}
