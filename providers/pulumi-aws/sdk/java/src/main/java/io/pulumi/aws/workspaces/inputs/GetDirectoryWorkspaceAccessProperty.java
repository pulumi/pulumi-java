// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.workspaces.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetDirectoryWorkspaceAccessProperty extends io.pulumi.resources.InvokeArgs {

    public static final GetDirectoryWorkspaceAccessProperty Empty = new GetDirectoryWorkspaceAccessProperty();

    /**
     * (Optional) Indicates whether users can use Android devices to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeAndroid", required=true)
      private final String deviceTypeAndroid;

    public String getDeviceTypeAndroid() {
        return this.deviceTypeAndroid;
    }

    /**
     * (Optional) Indicates whether users can use Chromebooks to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeChromeos", required=true)
      private final String deviceTypeChromeos;

    public String getDeviceTypeChromeos() {
        return this.deviceTypeChromeos;
    }

    /**
     * (Optional) Indicates whether users can use iOS devices to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeIos", required=true)
      private final String deviceTypeIos;

    public String getDeviceTypeIos() {
        return this.deviceTypeIos;
    }

    /**
     * (Optional) Indicates whether users can use Linux clients to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeLinux", required=true)
      private final String deviceTypeLinux;

    public String getDeviceTypeLinux() {
        return this.deviceTypeLinux;
    }

    /**
     * (Optional) Indicates whether users can use macOS clients to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeOsx", required=true)
      private final String deviceTypeOsx;

    public String getDeviceTypeOsx() {
        return this.deviceTypeOsx;
    }

    /**
     * (Optional) Indicates whether users can access their WorkSpaces through a web browser.
     * 
     */
    @Import(name="deviceTypeWeb", required=true)
      private final String deviceTypeWeb;

    public String getDeviceTypeWeb() {
        return this.deviceTypeWeb;
    }

    /**
     * (Optional) Indicates whether users can use Windows clients to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeWindows", required=true)
      private final String deviceTypeWindows;

    public String getDeviceTypeWindows() {
        return this.deviceTypeWindows;
    }

    /**
     * (Optional) Indicates whether users can use zero client devices to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeZeroclient", required=true)
      private final String deviceTypeZeroclient;

    public String getDeviceTypeZeroclient() {
        return this.deviceTypeZeroclient;
    }

    public GetDirectoryWorkspaceAccessProperty(
        String deviceTypeAndroid,
        String deviceTypeChromeos,
        String deviceTypeIos,
        String deviceTypeLinux,
        String deviceTypeOsx,
        String deviceTypeWeb,
        String deviceTypeWindows,
        String deviceTypeZeroclient) {
        this.deviceTypeAndroid = Objects.requireNonNull(deviceTypeAndroid, "expected parameter 'deviceTypeAndroid' to be non-null");
        this.deviceTypeChromeos = Objects.requireNonNull(deviceTypeChromeos, "expected parameter 'deviceTypeChromeos' to be non-null");
        this.deviceTypeIos = Objects.requireNonNull(deviceTypeIos, "expected parameter 'deviceTypeIos' to be non-null");
        this.deviceTypeLinux = Objects.requireNonNull(deviceTypeLinux, "expected parameter 'deviceTypeLinux' to be non-null");
        this.deviceTypeOsx = Objects.requireNonNull(deviceTypeOsx, "expected parameter 'deviceTypeOsx' to be non-null");
        this.deviceTypeWeb = Objects.requireNonNull(deviceTypeWeb, "expected parameter 'deviceTypeWeb' to be non-null");
        this.deviceTypeWindows = Objects.requireNonNull(deviceTypeWindows, "expected parameter 'deviceTypeWindows' to be non-null");
        this.deviceTypeZeroclient = Objects.requireNonNull(deviceTypeZeroclient, "expected parameter 'deviceTypeZeroclient' to be non-null");
    }

    private GetDirectoryWorkspaceAccessProperty() {
        this.deviceTypeAndroid = null;
        this.deviceTypeChromeos = null;
        this.deviceTypeIos = null;
        this.deviceTypeLinux = null;
        this.deviceTypeOsx = null;
        this.deviceTypeWeb = null;
        this.deviceTypeWindows = null;
        this.deviceTypeZeroclient = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDirectoryWorkspaceAccessProperty defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String deviceTypeAndroid;
        private String deviceTypeChromeos;
        private String deviceTypeIos;
        private String deviceTypeLinux;
        private String deviceTypeOsx;
        private String deviceTypeWeb;
        private String deviceTypeWindows;
        private String deviceTypeZeroclient;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDirectoryWorkspaceAccessProperty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deviceTypeAndroid = defaults.deviceTypeAndroid;
    	      this.deviceTypeChromeos = defaults.deviceTypeChromeos;
    	      this.deviceTypeIos = defaults.deviceTypeIos;
    	      this.deviceTypeLinux = defaults.deviceTypeLinux;
    	      this.deviceTypeOsx = defaults.deviceTypeOsx;
    	      this.deviceTypeWeb = defaults.deviceTypeWeb;
    	      this.deviceTypeWindows = defaults.deviceTypeWindows;
    	      this.deviceTypeZeroclient = defaults.deviceTypeZeroclient;
        }

        public Builder deviceTypeAndroid(String deviceTypeAndroid) {
            this.deviceTypeAndroid = Objects.requireNonNull(deviceTypeAndroid);
            return this;
        }
        public Builder deviceTypeChromeos(String deviceTypeChromeos) {
            this.deviceTypeChromeos = Objects.requireNonNull(deviceTypeChromeos);
            return this;
        }
        public Builder deviceTypeIos(String deviceTypeIos) {
            this.deviceTypeIos = Objects.requireNonNull(deviceTypeIos);
            return this;
        }
        public Builder deviceTypeLinux(String deviceTypeLinux) {
            this.deviceTypeLinux = Objects.requireNonNull(deviceTypeLinux);
            return this;
        }
        public Builder deviceTypeOsx(String deviceTypeOsx) {
            this.deviceTypeOsx = Objects.requireNonNull(deviceTypeOsx);
            return this;
        }
        public Builder deviceTypeWeb(String deviceTypeWeb) {
            this.deviceTypeWeb = Objects.requireNonNull(deviceTypeWeb);
            return this;
        }
        public Builder deviceTypeWindows(String deviceTypeWindows) {
            this.deviceTypeWindows = Objects.requireNonNull(deviceTypeWindows);
            return this;
        }
        public Builder deviceTypeZeroclient(String deviceTypeZeroclient) {
            this.deviceTypeZeroclient = Objects.requireNonNull(deviceTypeZeroclient);
            return this;
        }        public GetDirectoryWorkspaceAccessProperty build() {
            return new GetDirectoryWorkspaceAccessProperty(deviceTypeAndroid, deviceTypeChromeos, deviceTypeIos, deviceTypeLinux, deviceTypeOsx, deviceTypeWeb, deviceTypeWindows, deviceTypeZeroclient);
        }
    }
}
