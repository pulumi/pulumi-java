// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cognito;

import io.pulumi.aws.cognito.inputs.UserPoolClientAnalyticsConfigurationArgs;
import io.pulumi.aws.cognito.inputs.UserPoolClientTokenValidityUnitsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserPoolClientArgs extends io.pulumi.resources.ResourceArgs {

    public static final UserPoolClientArgs Empty = new UserPoolClientArgs();

    /**
     * Time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `token_validity_units`.
     * 
     */
    @Import(name="accessTokenValidity")
      private final @Nullable Output<Integer> accessTokenValidity;

    public Output<Integer> accessTokenValidity() {
        return this.accessTokenValidity == null ? Codegen.empty() : this.accessTokenValidity;
    }

    /**
     * List of allowed OAuth flows (code, implicit, client_credentials).
     * 
     */
    @Import(name="allowedOauthFlows")
      private final @Nullable Output<List<String>> allowedOauthFlows;

    public Output<List<String>> allowedOauthFlows() {
        return this.allowedOauthFlows == null ? Codegen.empty() : this.allowedOauthFlows;
    }

    /**
     * Whether the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
     * 
     */
    @Import(name="allowedOauthFlowsUserPoolClient")
      private final @Nullable Output<Boolean> allowedOauthFlowsUserPoolClient;

    public Output<Boolean> allowedOauthFlowsUserPoolClient() {
        return this.allowedOauthFlowsUserPoolClient == null ? Codegen.empty() : this.allowedOauthFlowsUserPoolClient;
    }

    /**
     * List of allowed OAuth scopes (phone, email, openid, profile, and aws.cognito.signin.user.admin).
     * 
     */
    @Import(name="allowedOauthScopes")
      private final @Nullable Output<List<String>> allowedOauthScopes;

    public Output<List<String>> allowedOauthScopes() {
        return this.allowedOauthScopes == null ? Codegen.empty() : this.allowedOauthScopes;
    }

    /**
     * Configuration block for Amazon Pinpoint analytics for collecting metrics for this user pool. Detailed below.
     * 
     */
    @Import(name="analyticsConfiguration")
      private final @Nullable Output<UserPoolClientAnalyticsConfigurationArgs> analyticsConfiguration;

    public Output<UserPoolClientAnalyticsConfigurationArgs> analyticsConfiguration() {
        return this.analyticsConfiguration == null ? Codegen.empty() : this.analyticsConfiguration;
    }

    /**
     * List of allowed callback URLs for the identity providers.
     * 
     */
    @Import(name="callbackUrls")
      private final @Nullable Output<List<String>> callbackUrls;

    public Output<List<String>> callbackUrls() {
        return this.callbackUrls == null ? Codegen.empty() : this.callbackUrls;
    }

    /**
     * Default redirect URI. Must be in the list of callback URLs.
     * 
     */
    @Import(name="defaultRedirectUri")
      private final @Nullable Output<String> defaultRedirectUri;

    public Output<String> defaultRedirectUri() {
        return this.defaultRedirectUri == null ? Codegen.empty() : this.defaultRedirectUri;
    }

    /**
     * Enables or disables token revocation.
     * 
     */
    @Import(name="enableTokenRevocation")
      private final @Nullable Output<Boolean> enableTokenRevocation;

    public Output<Boolean> enableTokenRevocation() {
        return this.enableTokenRevocation == null ? Codegen.empty() : this.enableTokenRevocation;
    }

    /**
     * List of authentication flows (ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH, ALLOW_CUSTOM_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH).
     * 
     */
    @Import(name="explicitAuthFlows")
      private final @Nullable Output<List<String>> explicitAuthFlows;

    public Output<List<String>> explicitAuthFlows() {
        return this.explicitAuthFlows == null ? Codegen.empty() : this.explicitAuthFlows;
    }

    /**
     * Should an application secret be generated.
     * 
     */
    @Import(name="generateSecret")
      private final @Nullable Output<Boolean> generateSecret;

    public Output<Boolean> generateSecret() {
        return this.generateSecret == null ? Codegen.empty() : this.generateSecret;
    }

    /**
     * Time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `token_validity_units`.
     * 
     */
    @Import(name="idTokenValidity")
      private final @Nullable Output<Integer> idTokenValidity;

    public Output<Integer> idTokenValidity() {
        return this.idTokenValidity == null ? Codegen.empty() : this.idTokenValidity;
    }

    /**
     * List of allowed logout URLs for the identity providers.
     * 
     */
    @Import(name="logoutUrls")
      private final @Nullable Output<List<String>> logoutUrls;

    public Output<List<String>> logoutUrls() {
        return this.logoutUrls == null ? Codegen.empty() : this.logoutUrls;
    }

    /**
     * Name of the application client.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to `ENABLED` and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to `LEGACY`, those APIs will return a `UserNotFoundException` exception if the user does not exist in the user pool.
     * 
     */
    @Import(name="preventUserExistenceErrors")
      private final @Nullable Output<String> preventUserExistenceErrors;

    public Output<String> preventUserExistenceErrors() {
        return this.preventUserExistenceErrors == null ? Codegen.empty() : this.preventUserExistenceErrors;
    }

    /**
     * List of user pool attributes the application client can read from.
     * 
     */
    @Import(name="readAttributes")
      private final @Nullable Output<List<String>> readAttributes;

    public Output<List<String>> readAttributes() {
        return this.readAttributes == null ? Codegen.empty() : this.readAttributes;
    }

    /**
     * Time limit in days refresh tokens are valid for.
     * 
     */
    @Import(name="refreshTokenValidity")
      private final @Nullable Output<Integer> refreshTokenValidity;

    public Output<Integer> refreshTokenValidity() {
        return this.refreshTokenValidity == null ? Codegen.empty() : this.refreshTokenValidity;
    }

    /**
     * List of provider names for the identity providers that are supported on this client. Uses the `provider_name` attribute of `aws.cognito.IdentityProvider` resource(s), or the equivalent string(s).
     * 
     */
    @Import(name="supportedIdentityProviders")
      private final @Nullable Output<List<String>> supportedIdentityProviders;

    public Output<List<String>> supportedIdentityProviders() {
        return this.supportedIdentityProviders == null ? Codegen.empty() : this.supportedIdentityProviders;
    }

    /**
     * Configuration block for units in which the validity times are represented in. Detailed below.
     * 
     */
    @Import(name="tokenValidityUnits")
      private final @Nullable Output<UserPoolClientTokenValidityUnitsArgs> tokenValidityUnits;

    public Output<UserPoolClientTokenValidityUnitsArgs> tokenValidityUnits() {
        return this.tokenValidityUnits == null ? Codegen.empty() : this.tokenValidityUnits;
    }

    /**
     * User pool the client belongs to.
     * 
     */
    @Import(name="userPoolId", required=true)
      private final Output<String> userPoolId;

    public Output<String> userPoolId() {
        return this.userPoolId;
    }

    /**
     * List of user pool attributes the application client can write to.
     * 
     */
    @Import(name="writeAttributes")
      private final @Nullable Output<List<String>> writeAttributes;

    public Output<List<String>> writeAttributes() {
        return this.writeAttributes == null ? Codegen.empty() : this.writeAttributes;
    }

    public UserPoolClientArgs(
        @Nullable Output<Integer> accessTokenValidity,
        @Nullable Output<List<String>> allowedOauthFlows,
        @Nullable Output<Boolean> allowedOauthFlowsUserPoolClient,
        @Nullable Output<List<String>> allowedOauthScopes,
        @Nullable Output<UserPoolClientAnalyticsConfigurationArgs> analyticsConfiguration,
        @Nullable Output<List<String>> callbackUrls,
        @Nullable Output<String> defaultRedirectUri,
        @Nullable Output<Boolean> enableTokenRevocation,
        @Nullable Output<List<String>> explicitAuthFlows,
        @Nullable Output<Boolean> generateSecret,
        @Nullable Output<Integer> idTokenValidity,
        @Nullable Output<List<String>> logoutUrls,
        @Nullable Output<String> name,
        @Nullable Output<String> preventUserExistenceErrors,
        @Nullable Output<List<String>> readAttributes,
        @Nullable Output<Integer> refreshTokenValidity,
        @Nullable Output<List<String>> supportedIdentityProviders,
        @Nullable Output<UserPoolClientTokenValidityUnitsArgs> tokenValidityUnits,
        Output<String> userPoolId,
        @Nullable Output<List<String>> writeAttributes) {
        this.accessTokenValidity = accessTokenValidity;
        this.allowedOauthFlows = allowedOauthFlows;
        this.allowedOauthFlowsUserPoolClient = allowedOauthFlowsUserPoolClient;
        this.allowedOauthScopes = allowedOauthScopes;
        this.analyticsConfiguration = analyticsConfiguration;
        this.callbackUrls = callbackUrls;
        this.defaultRedirectUri = defaultRedirectUri;
        this.enableTokenRevocation = enableTokenRevocation;
        this.explicitAuthFlows = explicitAuthFlows;
        this.generateSecret = generateSecret;
        this.idTokenValidity = idTokenValidity;
        this.logoutUrls = logoutUrls;
        this.name = name;
        this.preventUserExistenceErrors = preventUserExistenceErrors;
        this.readAttributes = readAttributes;
        this.refreshTokenValidity = refreshTokenValidity;
        this.supportedIdentityProviders = supportedIdentityProviders;
        this.tokenValidityUnits = tokenValidityUnits;
        this.userPoolId = Objects.requireNonNull(userPoolId, "expected parameter 'userPoolId' to be non-null");
        this.writeAttributes = writeAttributes;
    }

    private UserPoolClientArgs() {
        this.accessTokenValidity = Codegen.empty();
        this.allowedOauthFlows = Codegen.empty();
        this.allowedOauthFlowsUserPoolClient = Codegen.empty();
        this.allowedOauthScopes = Codegen.empty();
        this.analyticsConfiguration = Codegen.empty();
        this.callbackUrls = Codegen.empty();
        this.defaultRedirectUri = Codegen.empty();
        this.enableTokenRevocation = Codegen.empty();
        this.explicitAuthFlows = Codegen.empty();
        this.generateSecret = Codegen.empty();
        this.idTokenValidity = Codegen.empty();
        this.logoutUrls = Codegen.empty();
        this.name = Codegen.empty();
        this.preventUserExistenceErrors = Codegen.empty();
        this.readAttributes = Codegen.empty();
        this.refreshTokenValidity = Codegen.empty();
        this.supportedIdentityProviders = Codegen.empty();
        this.tokenValidityUnits = Codegen.empty();
        this.userPoolId = Codegen.empty();
        this.writeAttributes = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserPoolClientArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> accessTokenValidity;
        private @Nullable Output<List<String>> allowedOauthFlows;
        private @Nullable Output<Boolean> allowedOauthFlowsUserPoolClient;
        private @Nullable Output<List<String>> allowedOauthScopes;
        private @Nullable Output<UserPoolClientAnalyticsConfigurationArgs> analyticsConfiguration;
        private @Nullable Output<List<String>> callbackUrls;
        private @Nullable Output<String> defaultRedirectUri;
        private @Nullable Output<Boolean> enableTokenRevocation;
        private @Nullable Output<List<String>> explicitAuthFlows;
        private @Nullable Output<Boolean> generateSecret;
        private @Nullable Output<Integer> idTokenValidity;
        private @Nullable Output<List<String>> logoutUrls;
        private @Nullable Output<String> name;
        private @Nullable Output<String> preventUserExistenceErrors;
        private @Nullable Output<List<String>> readAttributes;
        private @Nullable Output<Integer> refreshTokenValidity;
        private @Nullable Output<List<String>> supportedIdentityProviders;
        private @Nullable Output<UserPoolClientTokenValidityUnitsArgs> tokenValidityUnits;
        private Output<String> userPoolId;
        private @Nullable Output<List<String>> writeAttributes;

        public Builder() {
    	      // Empty
        }

        public Builder(UserPoolClientArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTokenValidity = defaults.accessTokenValidity;
    	      this.allowedOauthFlows = defaults.allowedOauthFlows;
    	      this.allowedOauthFlowsUserPoolClient = defaults.allowedOauthFlowsUserPoolClient;
    	      this.allowedOauthScopes = defaults.allowedOauthScopes;
    	      this.analyticsConfiguration = defaults.analyticsConfiguration;
    	      this.callbackUrls = defaults.callbackUrls;
    	      this.defaultRedirectUri = defaults.defaultRedirectUri;
    	      this.enableTokenRevocation = defaults.enableTokenRevocation;
    	      this.explicitAuthFlows = defaults.explicitAuthFlows;
    	      this.generateSecret = defaults.generateSecret;
    	      this.idTokenValidity = defaults.idTokenValidity;
    	      this.logoutUrls = defaults.logoutUrls;
    	      this.name = defaults.name;
    	      this.preventUserExistenceErrors = defaults.preventUserExistenceErrors;
    	      this.readAttributes = defaults.readAttributes;
    	      this.refreshTokenValidity = defaults.refreshTokenValidity;
    	      this.supportedIdentityProviders = defaults.supportedIdentityProviders;
    	      this.tokenValidityUnits = defaults.tokenValidityUnits;
    	      this.userPoolId = defaults.userPoolId;
    	      this.writeAttributes = defaults.writeAttributes;
        }

        public Builder accessTokenValidity(@Nullable Output<Integer> accessTokenValidity) {
            this.accessTokenValidity = accessTokenValidity;
            return this;
        }
        public Builder accessTokenValidity(@Nullable Integer accessTokenValidity) {
            this.accessTokenValidity = Codegen.ofNullable(accessTokenValidity);
            return this;
        }
        public Builder allowedOauthFlows(@Nullable Output<List<String>> allowedOauthFlows) {
            this.allowedOauthFlows = allowedOauthFlows;
            return this;
        }
        public Builder allowedOauthFlows(@Nullable List<String> allowedOauthFlows) {
            this.allowedOauthFlows = Codegen.ofNullable(allowedOauthFlows);
            return this;
        }
        public Builder allowedOauthFlows(String... allowedOauthFlows) {
            return allowedOauthFlows(List.of(allowedOauthFlows));
        }
        public Builder allowedOauthFlowsUserPoolClient(@Nullable Output<Boolean> allowedOauthFlowsUserPoolClient) {
            this.allowedOauthFlowsUserPoolClient = allowedOauthFlowsUserPoolClient;
            return this;
        }
        public Builder allowedOauthFlowsUserPoolClient(@Nullable Boolean allowedOauthFlowsUserPoolClient) {
            this.allowedOauthFlowsUserPoolClient = Codegen.ofNullable(allowedOauthFlowsUserPoolClient);
            return this;
        }
        public Builder allowedOauthScopes(@Nullable Output<List<String>> allowedOauthScopes) {
            this.allowedOauthScopes = allowedOauthScopes;
            return this;
        }
        public Builder allowedOauthScopes(@Nullable List<String> allowedOauthScopes) {
            this.allowedOauthScopes = Codegen.ofNullable(allowedOauthScopes);
            return this;
        }
        public Builder allowedOauthScopes(String... allowedOauthScopes) {
            return allowedOauthScopes(List.of(allowedOauthScopes));
        }
        public Builder analyticsConfiguration(@Nullable Output<UserPoolClientAnalyticsConfigurationArgs> analyticsConfiguration) {
            this.analyticsConfiguration = analyticsConfiguration;
            return this;
        }
        public Builder analyticsConfiguration(@Nullable UserPoolClientAnalyticsConfigurationArgs analyticsConfiguration) {
            this.analyticsConfiguration = Codegen.ofNullable(analyticsConfiguration);
            return this;
        }
        public Builder callbackUrls(@Nullable Output<List<String>> callbackUrls) {
            this.callbackUrls = callbackUrls;
            return this;
        }
        public Builder callbackUrls(@Nullable List<String> callbackUrls) {
            this.callbackUrls = Codegen.ofNullable(callbackUrls);
            return this;
        }
        public Builder callbackUrls(String... callbackUrls) {
            return callbackUrls(List.of(callbackUrls));
        }
        public Builder defaultRedirectUri(@Nullable Output<String> defaultRedirectUri) {
            this.defaultRedirectUri = defaultRedirectUri;
            return this;
        }
        public Builder defaultRedirectUri(@Nullable String defaultRedirectUri) {
            this.defaultRedirectUri = Codegen.ofNullable(defaultRedirectUri);
            return this;
        }
        public Builder enableTokenRevocation(@Nullable Output<Boolean> enableTokenRevocation) {
            this.enableTokenRevocation = enableTokenRevocation;
            return this;
        }
        public Builder enableTokenRevocation(@Nullable Boolean enableTokenRevocation) {
            this.enableTokenRevocation = Codegen.ofNullable(enableTokenRevocation);
            return this;
        }
        public Builder explicitAuthFlows(@Nullable Output<List<String>> explicitAuthFlows) {
            this.explicitAuthFlows = explicitAuthFlows;
            return this;
        }
        public Builder explicitAuthFlows(@Nullable List<String> explicitAuthFlows) {
            this.explicitAuthFlows = Codegen.ofNullable(explicitAuthFlows);
            return this;
        }
        public Builder explicitAuthFlows(String... explicitAuthFlows) {
            return explicitAuthFlows(List.of(explicitAuthFlows));
        }
        public Builder generateSecret(@Nullable Output<Boolean> generateSecret) {
            this.generateSecret = generateSecret;
            return this;
        }
        public Builder generateSecret(@Nullable Boolean generateSecret) {
            this.generateSecret = Codegen.ofNullable(generateSecret);
            return this;
        }
        public Builder idTokenValidity(@Nullable Output<Integer> idTokenValidity) {
            this.idTokenValidity = idTokenValidity;
            return this;
        }
        public Builder idTokenValidity(@Nullable Integer idTokenValidity) {
            this.idTokenValidity = Codegen.ofNullable(idTokenValidity);
            return this;
        }
        public Builder logoutUrls(@Nullable Output<List<String>> logoutUrls) {
            this.logoutUrls = logoutUrls;
            return this;
        }
        public Builder logoutUrls(@Nullable List<String> logoutUrls) {
            this.logoutUrls = Codegen.ofNullable(logoutUrls);
            return this;
        }
        public Builder logoutUrls(String... logoutUrls) {
            return logoutUrls(List.of(logoutUrls));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder preventUserExistenceErrors(@Nullable Output<String> preventUserExistenceErrors) {
            this.preventUserExistenceErrors = preventUserExistenceErrors;
            return this;
        }
        public Builder preventUserExistenceErrors(@Nullable String preventUserExistenceErrors) {
            this.preventUserExistenceErrors = Codegen.ofNullable(preventUserExistenceErrors);
            return this;
        }
        public Builder readAttributes(@Nullable Output<List<String>> readAttributes) {
            this.readAttributes = readAttributes;
            return this;
        }
        public Builder readAttributes(@Nullable List<String> readAttributes) {
            this.readAttributes = Codegen.ofNullable(readAttributes);
            return this;
        }
        public Builder readAttributes(String... readAttributes) {
            return readAttributes(List.of(readAttributes));
        }
        public Builder refreshTokenValidity(@Nullable Output<Integer> refreshTokenValidity) {
            this.refreshTokenValidity = refreshTokenValidity;
            return this;
        }
        public Builder refreshTokenValidity(@Nullable Integer refreshTokenValidity) {
            this.refreshTokenValidity = Codegen.ofNullable(refreshTokenValidity);
            return this;
        }
        public Builder supportedIdentityProviders(@Nullable Output<List<String>> supportedIdentityProviders) {
            this.supportedIdentityProviders = supportedIdentityProviders;
            return this;
        }
        public Builder supportedIdentityProviders(@Nullable List<String> supportedIdentityProviders) {
            this.supportedIdentityProviders = Codegen.ofNullable(supportedIdentityProviders);
            return this;
        }
        public Builder supportedIdentityProviders(String... supportedIdentityProviders) {
            return supportedIdentityProviders(List.of(supportedIdentityProviders));
        }
        public Builder tokenValidityUnits(@Nullable Output<UserPoolClientTokenValidityUnitsArgs> tokenValidityUnits) {
            this.tokenValidityUnits = tokenValidityUnits;
            return this;
        }
        public Builder tokenValidityUnits(@Nullable UserPoolClientTokenValidityUnitsArgs tokenValidityUnits) {
            this.tokenValidityUnits = Codegen.ofNullable(tokenValidityUnits);
            return this;
        }
        public Builder userPoolId(Output<String> userPoolId) {
            this.userPoolId = Objects.requireNonNull(userPoolId);
            return this;
        }
        public Builder userPoolId(String userPoolId) {
            this.userPoolId = Output.of(Objects.requireNonNull(userPoolId));
            return this;
        }
        public Builder writeAttributes(@Nullable Output<List<String>> writeAttributes) {
            this.writeAttributes = writeAttributes;
            return this;
        }
        public Builder writeAttributes(@Nullable List<String> writeAttributes) {
            this.writeAttributes = Codegen.ofNullable(writeAttributes);
            return this;
        }
        public Builder writeAttributes(String... writeAttributes) {
            return writeAttributes(List.of(writeAttributes));
        }        public UserPoolClientArgs build() {
            return new UserPoolClientArgs(accessTokenValidity, allowedOauthFlows, allowedOauthFlowsUserPoolClient, allowedOauthScopes, analyticsConfiguration, callbackUrls, defaultRedirectUri, enableTokenRevocation, explicitAuthFlows, generateSecret, idTokenValidity, logoutUrls, name, preventUserExistenceErrors, readAttributes, refreshTokenValidity, supportedIdentityProviders, tokenValidityUnits, userPoolId, writeAttributes);
        }
    }
}
