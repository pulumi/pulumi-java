// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appconfig;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeploymentStrategyArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeploymentStrategyArgs Empty = new DeploymentStrategyArgs();

    /**
     * Total amount of time for a deployment to last. Minimum value of 0, maximum value of 1440.
     * 
     */
    @InputImport(name="deploymentDurationInMinutes", required=true)
    private final Input<Integer> deploymentDurationInMinutes;

    public Input<Integer> getDeploymentDurationInMinutes() {
        return this.deploymentDurationInMinutes;
    }

    /**
     * A description of the deployment strategy. Can be at most 1024 characters.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The amount of time AWS AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic roll back. Minimum value of 0, maximum value of 1440.
     * 
     */
    @InputImport(name="finalBakeTimeInMinutes")
    private final @Nullable Input<Integer> finalBakeTimeInMinutes;

    public Input<Integer> getFinalBakeTimeInMinutes() {
        return this.finalBakeTimeInMinutes == null ? Input.empty() : this.finalBakeTimeInMinutes;
    }

    /**
     * The percentage of targets to receive a deployed configuration during each interval. Minimum value of 1.0, maximum value of 100.0.
     * 
     */
    @InputImport(name="growthFactor", required=true)
    private final Input<Double> growthFactor;

    public Input<Double> getGrowthFactor() {
        return this.growthFactor;
    }

    /**
     * The algorithm used to define how percentage grows over time. Valid value: `LINEAR` and `EXPONENTIAL`. Defaults to `LINEAR`.
     * 
     */
    @InputImport(name="growthType")
    private final @Nullable Input<String> growthType;

    public Input<String> getGrowthType() {
        return this.growthType == null ? Input.empty() : this.growthType;
    }

    /**
     * A name for the deployment strategy. Must be between 1 and 64 characters in length.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Where to save the deployment strategy. Valid values: `NONE` and `SSM_DOCUMENT`.
     * 
     */
    @InputImport(name="replicateTo", required=true)
    private final Input<String> replicateTo;

    public Input<String> getReplicateTo() {
        return this.replicateTo;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public DeploymentStrategyArgs(
        Input<Integer> deploymentDurationInMinutes,
        @Nullable Input<String> description,
        @Nullable Input<Integer> finalBakeTimeInMinutes,
        Input<Double> growthFactor,
        @Nullable Input<String> growthType,
        @Nullable Input<String> name,
        Input<String> replicateTo,
        @Nullable Input<Map<String,String>> tags) {
        this.deploymentDurationInMinutes = Objects.requireNonNull(deploymentDurationInMinutes, "expected parameter 'deploymentDurationInMinutes' to be non-null");
        this.description = description;
        this.finalBakeTimeInMinutes = finalBakeTimeInMinutes;
        this.growthFactor = Objects.requireNonNull(growthFactor, "expected parameter 'growthFactor' to be non-null");
        this.growthType = growthType;
        this.name = name;
        this.replicateTo = Objects.requireNonNull(replicateTo, "expected parameter 'replicateTo' to be non-null");
        this.tags = tags;
    }

    private DeploymentStrategyArgs() {
        this.deploymentDurationInMinutes = Input.empty();
        this.description = Input.empty();
        this.finalBakeTimeInMinutes = Input.empty();
        this.growthFactor = Input.empty();
        this.growthType = Input.empty();
        this.name = Input.empty();
        this.replicateTo = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<Integer> deploymentDurationInMinutes;
        private @Nullable Input<String> description;
        private @Nullable Input<Integer> finalBakeTimeInMinutes;
        private Input<Double> growthFactor;
        private @Nullable Input<String> growthType;
        private @Nullable Input<String> name;
        private Input<String> replicateTo;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentStrategyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deploymentDurationInMinutes = defaults.deploymentDurationInMinutes;
    	      this.description = defaults.description;
    	      this.finalBakeTimeInMinutes = defaults.finalBakeTimeInMinutes;
    	      this.growthFactor = defaults.growthFactor;
    	      this.growthType = defaults.growthType;
    	      this.name = defaults.name;
    	      this.replicateTo = defaults.replicateTo;
    	      this.tags = defaults.tags;
        }

        public Builder setDeploymentDurationInMinutes(Input<Integer> deploymentDurationInMinutes) {
            this.deploymentDurationInMinutes = Objects.requireNonNull(deploymentDurationInMinutes);
            return this;
        }

        public Builder setDeploymentDurationInMinutes(Integer deploymentDurationInMinutes) {
            this.deploymentDurationInMinutes = Input.of(Objects.requireNonNull(deploymentDurationInMinutes));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setFinalBakeTimeInMinutes(@Nullable Input<Integer> finalBakeTimeInMinutes) {
            this.finalBakeTimeInMinutes = finalBakeTimeInMinutes;
            return this;
        }

        public Builder setFinalBakeTimeInMinutes(@Nullable Integer finalBakeTimeInMinutes) {
            this.finalBakeTimeInMinutes = Input.ofNullable(finalBakeTimeInMinutes);
            return this;
        }

        public Builder setGrowthFactor(Input<Double> growthFactor) {
            this.growthFactor = Objects.requireNonNull(growthFactor);
            return this;
        }

        public Builder setGrowthFactor(Double growthFactor) {
            this.growthFactor = Input.of(Objects.requireNonNull(growthFactor));
            return this;
        }

        public Builder setGrowthType(@Nullable Input<String> growthType) {
            this.growthType = growthType;
            return this;
        }

        public Builder setGrowthType(@Nullable String growthType) {
            this.growthType = Input.ofNullable(growthType);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setReplicateTo(Input<String> replicateTo) {
            this.replicateTo = Objects.requireNonNull(replicateTo);
            return this;
        }

        public Builder setReplicateTo(String replicateTo) {
            this.replicateTo = Input.of(Objects.requireNonNull(replicateTo));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public DeploymentStrategyArgs build() {
            return new DeploymentStrategyArgs(deploymentDurationInMinutes, description, finalBakeTimeInMinutes, growthFactor, growthType, name, replicateTo, tags);
        }
    }
}
