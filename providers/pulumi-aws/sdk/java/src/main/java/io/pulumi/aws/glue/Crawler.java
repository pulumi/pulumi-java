// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.glue.CrawlerArgs;
import io.pulumi.aws.glue.inputs.CrawlerState;
import io.pulumi.aws.glue.outputs.CrawlerCatalogTarget;
import io.pulumi.aws.glue.outputs.CrawlerDeltaTarget;
import io.pulumi.aws.glue.outputs.CrawlerDynamodbTarget;
import io.pulumi.aws.glue.outputs.CrawlerJdbcTarget;
import io.pulumi.aws.glue.outputs.CrawlerLineageConfiguration;
import io.pulumi.aws.glue.outputs.CrawlerMongodbTarget;
import io.pulumi.aws.glue.outputs.CrawlerRecrawlPolicy;
import io.pulumi.aws.glue.outputs.CrawlerS3Target;
import io.pulumi.aws.glue.outputs.CrawlerSchemaChangePolicy;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Manages a Glue Crawler. More information can be found in the [AWS Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html)
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### DynamoDB Target Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.glue.Crawler("example", {
 *     databaseName: aws_glue_catalog_database.example.name,
 *     role: aws_iam_role.example.arn,
 *     dynamodbTargets: [{
 *         path: "table-name",
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.glue.Crawler("example",
 *     database_name=aws_glue_catalog_database["example"]["name"],
 *     role=aws_iam_role["example"]["arn"],
 *     dynamodb_targets=[aws.glue.CrawlerDynamodbTargetArgs(
 *         path="table-name",
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Glue.Crawler("example", new Aws.Glue.CrawlerArgs
 *         {
 *             DatabaseName = aws_glue_catalog_database.Example.Name,
 *             Role = aws_iam_role.Example.Arn,
 *             DynamodbTargets = 
 *             {
 *                 new Aws.Glue.Inputs.CrawlerDynamodbTargetArgs
 *                 {
 *                     Path = "table-name",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := glue.NewCrawler(ctx, "example", &glue.CrawlerArgs{
 * 			DatabaseName: pulumi.Any(aws_glue_catalog_database.Example.Name),
 * 			Role:         pulumi.Any(aws_iam_role.Example.Arn),
 * 			DynamodbTargets: glue.CrawlerDynamodbTargetArray{
 * 				&glue.CrawlerDynamodbTargetArgs{
 * 					Path: pulumi.String("table-name"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### JDBC Target Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.glue.Crawler("example", {
 *     databaseName: aws_glue_catalog_database.example.name,
 *     role: aws_iam_role.example.arn,
 *     jdbcTargets: [{
 *         connectionName: aws_glue_connection.example.name,
 *         path: `database-name/%`,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.glue.Crawler("example",
 *     database_name=aws_glue_catalog_database["example"]["name"],
 *     role=aws_iam_role["example"]["arn"],
 *     jdbc_targets=[aws.glue.CrawlerJdbcTargetArgs(
 *         connection_name=aws_glue_connection["example"]["name"],
 *         path="database-name/%",
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Glue.Crawler("example", new Aws.Glue.CrawlerArgs
 *         {
 *             DatabaseName = aws_glue_catalog_database.Example.Name,
 *             Role = aws_iam_role.Example.Arn,
 *             JdbcTargets = 
 *             {
 *                 new Aws.Glue.Inputs.CrawlerJdbcTargetArgs
 *                 {
 *                     ConnectionName = aws_glue_connection.Example.Name,
 *                     Path = "database-name/%",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := glue.NewCrawler(ctx, "example", &glue.CrawlerArgs{
 * 			DatabaseName: pulumi.Any(aws_glue_catalog_database.Example.Name),
 * 			Role:         pulumi.Any(aws_iam_role.Example.Arn),
 * 			JdbcTargets: glue.CrawlerJdbcTargetArray{
 * 				&glue.CrawlerJdbcTargetArgs{
 * 					ConnectionName: pulumi.Any(aws_glue_connection.Example.Name),
 * 					Path:           pulumi.String(fmt.Sprintf("%v%v", "database-name/", "%")),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### S3 Target Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.glue.Crawler("example", {
 *     databaseName: aws_glue_catalog_database.example.name,
 *     role: aws_iam_role.example.arn,
 *     s3Targets: [{
 *         path: `s3://${aws_s3_bucket.example.bucket}`,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.glue.Crawler("example",
 *     database_name=aws_glue_catalog_database["example"]["name"],
 *     role=aws_iam_role["example"]["arn"],
 *     s3_targets=[aws.glue.CrawlerS3TargetArgs(
 *         path=f"s3://{aws_s3_bucket['example']['bucket']}",
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Glue.Crawler("example", new Aws.Glue.CrawlerArgs
 *         {
 *             DatabaseName = aws_glue_catalog_database.Example.Name,
 *             Role = aws_iam_role.Example.Arn,
 *             S3Targets = 
 *             {
 *                 new Aws.Glue.Inputs.CrawlerS3TargetArgs
 *                 {
 *                     Path = $"s3://{aws_s3_bucket.Example.Bucket}",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := glue.NewCrawler(ctx, "example", &glue.CrawlerArgs{
 * 			DatabaseName: pulumi.Any(aws_glue_catalog_database.Example.Name),
 * 			Role:         pulumi.Any(aws_iam_role.Example.Arn),
 * 			S3Targets: glue.CrawlerS3TargetArray{
 * 				&glue.CrawlerS3TargetArgs{
 * 					Path: pulumi.String(fmt.Sprintf("%v%v", "s3://", aws_s3_bucket.Example.Bucket)),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Catalog Target Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.glue.Crawler("example", {
 *     databaseName: aws_glue_catalog_database.example.name,
 *     role: aws_iam_role.example.arn,
 *     catalogTargets: [{
 *         databaseName: aws_glue_catalog_database.example.name,
 *         tables: [aws_glue_catalog_table.example.name],
 *     }],
 *     schemaChangePolicy: {
 *         deleteBehavior: "LOG",
 *     },
 *     configuration: `{
 *   "Version":1.0,
 *   "Grouping": {
 *     "TableGroupingPolicy": "CombineCompatibleSchemas"
 *   }
 * }
 * `,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.glue.Crawler("example",
 *     database_name=aws_glue_catalog_database["example"]["name"],
 *     role=aws_iam_role["example"]["arn"],
 *     catalog_targets=[aws.glue.CrawlerCatalogTargetArgs(
 *         database_name=aws_glue_catalog_database["example"]["name"],
 *         tables=[aws_glue_catalog_table["example"]["name"]],
 *     )],
 *     schema_change_policy=aws.glue.CrawlerSchemaChangePolicyArgs(
 *         delete_behavior="LOG",
 *     ),
 *     configuration="""{
 *   "Version":1.0,
 *   "Grouping": {
 *     "TableGroupingPolicy": "CombineCompatibleSchemas"
 *   }
 * }
 * """)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Glue.Crawler("example", new Aws.Glue.CrawlerArgs
 *         {
 *             DatabaseName = aws_glue_catalog_database.Example.Name,
 *             Role = aws_iam_role.Example.Arn,
 *             CatalogTargets = 
 *             {
 *                 new Aws.Glue.Inputs.CrawlerCatalogTargetArgs
 *                 {
 *                     DatabaseName = aws_glue_catalog_database.Example.Name,
 *                     Tables = 
 *                     {
 *                         aws_glue_catalog_table.Example.Name,
 *                     },
 *                 },
 *             },
 *             SchemaChangePolicy = new Aws.Glue.Inputs.CrawlerSchemaChangePolicyArgs
 *             {
 *                 DeleteBehavior = "LOG",
 *             },
 *             Configuration = @"{
 *   ""Version"":1.0,
 *   ""Grouping"": {
 *     ""TableGroupingPolicy"": ""CombineCompatibleSchemas""
 *   }
 * }
 * ",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := glue.NewCrawler(ctx, "example", &glue.CrawlerArgs{
 * 			DatabaseName: pulumi.Any(aws_glue_catalog_database.Example.Name),
 * 			Role:         pulumi.Any(aws_iam_role.Example.Arn),
 * 			CatalogTargets: glue.CrawlerCatalogTargetArray{
 * 				&glue.CrawlerCatalogTargetArgs{
 * 					DatabaseName: pulumi.Any(aws_glue_catalog_database.Example.Name),
 * 					Tables: pulumi.StringArray{
 * 						pulumi.Any(aws_glue_catalog_table.Example.Name),
 * 					},
 * 				},
 * 			},
 * 			SchemaChangePolicy: &glue.CrawlerSchemaChangePolicyArgs{
 * 				DeleteBehavior: pulumi.String("LOG"),
 * 			},
 * 			Configuration: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v", "{\n", "  \"Version\":1.0,\n", "  \"Grouping\": {\n", "    \"TableGroupingPolicy\": \"CombineCompatibleSchemas\"\n", "  }\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### MongoDB Target Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.glue.Crawler("example", {
 *     databaseName: aws_glue_catalog_database.example.name,
 *     role: aws_iam_role.example.arn,
 *     mongodbTargets: [{
 *         connectionName: aws_glue_connection.example.name,
 *         path: `database-name/%`,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.glue.Crawler("example",
 *     database_name=aws_glue_catalog_database["example"]["name"],
 *     role=aws_iam_role["example"]["arn"],
 *     mongodb_targets=[aws.glue.CrawlerMongodbTargetArgs(
 *         connection_name=aws_glue_connection["example"]["name"],
 *         path="database-name/%",
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Glue.Crawler("example", new Aws.Glue.CrawlerArgs
 *         {
 *             DatabaseName = aws_glue_catalog_database.Example.Name,
 *             Role = aws_iam_role.Example.Arn,
 *             MongodbTargets = 
 *             {
 *                 new Aws.Glue.Inputs.CrawlerMongodbTargetArgs
 *                 {
 *                     ConnectionName = aws_glue_connection.Example.Name,
 *                     Path = "database-name/%",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := glue.NewCrawler(ctx, "example", &glue.CrawlerArgs{
 * 			DatabaseName: pulumi.Any(aws_glue_catalog_database.Example.Name),
 * 			Role:         pulumi.Any(aws_iam_role.Example.Arn),
 * 			MongodbTargets: glue.CrawlerMongodbTargetArray{
 * 				&glue.CrawlerMongodbTargetArgs{
 * 					ConnectionName: pulumi.Any(aws_glue_connection.Example.Name),
 * 					Path:           pulumi.String(fmt.Sprintf("%v%v", "database-name/", "%")),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Configuration Settings Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const eventsCrawler = new aws.glue.Crawler("eventsCrawler", {
 *     databaseName: aws_glue_catalog_database.glue_database.name,
 *     schedule: "cron(0 1 * * ? *)",
 *     role: aws_iam_role.glue_role.arn,
 *     tags: _var.tags,
 *     configuration: JSON.stringify({
 *         Grouping: {
 *             TableGroupingPolicy: "CombineCompatibleSchemas",
 *         },
 *         CrawlerOutput: {
 *             Partitions: {
 *                 AddOrUpdateBehavior: "InheritFromTable",
 *             },
 *         },
 *         Version: 1,
 *     }),
 *     s3Targets: [{
 *         path: `s3://${aws_s3_bucket.data_lake_bucket.bucket}`,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import json
 * import pulumi_aws as aws
 * 
 * events_crawler = aws.glue.Crawler("eventsCrawler",
 *     database_name=aws_glue_catalog_database["glue_database"]["name"],
 *     schedule="cron(0 1 * * ? *)",
 *     role=aws_iam_role["glue_role"]["arn"],
 *     tags=var["tags"],
 *     configuration=json.dumps({
 *         "Grouping": {
 *             "TableGroupingPolicy": "CombineCompatibleSchemas",
 *         },
 *         "CrawlerOutput": {
 *             "Partitions": {
 *                 "AddOrUpdateBehavior": "InheritFromTable",
 *             },
 *         },
 *         "Version": 1,
 *     }),
 *     s3_targets=[aws.glue.CrawlerS3TargetArgs(
 *         path=f"s3://{aws_s3_bucket['data_lake_bucket']['bucket']}",
 *     )])
 * ```
 * ```csharp
 * using System.Collections.Generic;
 * using System.Text.Json;
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var eventsCrawler = new Aws.Glue.Crawler("eventsCrawler", new Aws.Glue.CrawlerArgs
 *         {
 *             DatabaseName = aws_glue_catalog_database.Glue_database.Name,
 *             Schedule = "cron(0 1 * * ? *)",
 *             Role = aws_iam_role.Glue_role.Arn,
 *             Tags = @var.Tags,
 *             Configuration = JsonSerializer.Serialize(new Dictionary<string, object?>
 *             {
 *                 { "Grouping", new Dictionary<string, object?>
 *                 {
 *                     { "TableGroupingPolicy", "CombineCompatibleSchemas" },
 *                 } },
 *                 { "CrawlerOutput", new Dictionary<string, object?>
 *                 {
 *                     { "Partitions", new Dictionary<string, object?>
 *                     {
 *                         { "AddOrUpdateBehavior", "InheritFromTable" },
 *                     } },
 *                 } },
 *                 { "Version", 1 },
 *             }),
 *             S3Targets = 
 *             {
 *                 new Aws.Glue.Inputs.CrawlerS3TargetArgs
 *                 {
 *                     Path = $"s3://{aws_s3_bucket.Data_lake_bucket.Bucket}",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"encoding/json"
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		tmpJSON0, err := json.Marshal(map[string]interface{}{
 * 			"Grouping": map[string]interface{}{
 * 				"TableGroupingPolicy": "CombineCompatibleSchemas",
 * 			},
 * 			"CrawlerOutput": map[string]interface{}{
 * 				"Partitions": map[string]interface{}{
 * 					"AddOrUpdateBehavior": "InheritFromTable",
 * 				},
 * 			},
 * 			"Version": 1,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		json0 := string(tmpJSON0)
 * 		_, err := glue.NewCrawler(ctx, "eventsCrawler", &glue.CrawlerArgs{
 * 			DatabaseName:  pulumi.Any(aws_glue_catalog_database.Glue_database.Name),
 * 			Schedule:      pulumi.String("cron(0 1 * * ? *)"),
 * 			Role:          pulumi.Any(aws_iam_role.Glue_role.Arn),
 * 			Tags:          pulumi.Any(_var.Tags),
 * 			Configuration: pulumi.String(json0),
 * 			S3Targets: glue.CrawlerS3TargetArray{
 * 				&glue.CrawlerS3TargetArgs{
 * 					Path: pulumi.String(fmt.Sprintf("%v%v", "s3://", aws_s3_bucket.Data_lake_bucket.Bucket)),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Glue Crawlers can be imported using `name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:glue/crawler:Crawler MyJob MyJob
 * ```
 * 
 *  
 */
@ResourceType(type="aws:glue/crawler:Crawler")
public class Crawler extends io.pulumi.resources.CustomResource {
    /**
     * The ARN of the crawler
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the crawler
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    @Export(name="catalogTargets", type=List.class, parameters={CrawlerCatalogTarget.class})
    private Output</* @Nullable */ List<CrawlerCatalogTarget>> catalogTargets;

    public Output</* @Nullable */ List<CrawlerCatalogTarget>> getCatalogTargets() {
        return this.catalogTargets;
    }
    /**
     * List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
     * 
     */
    @Export(name="classifiers", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> classifiers;

    /**
     * @return List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
     * 
     */
    public Output</* @Nullable */ List<String>> getClassifiers() {
        return this.classifiers;
    }
    /**
     * JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
     * 
     */
    @Export(name="configuration", type=String.class, parameters={})
    private Output</* @Nullable */ String> configuration;

    /**
     * @return JSON string of configuration information. For more details see [Setting Crawler Configuration Options](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
     * 
     */
    public Output</* @Nullable */ String> getConfiguration() {
        return this.configuration;
    }
    /**
     * The name of the Glue database to be synchronized.
     * 
     */
    @Export(name="databaseName", type=String.class, parameters={})
    private Output<String> databaseName;

    /**
     * @return The name of the Glue database to be synchronized.
     * 
     */
    public Output<String> getDatabaseName() {
        return this.databaseName;
    }
    @Export(name="deltaTargets", type=List.class, parameters={CrawlerDeltaTarget.class})
    private Output</* @Nullable */ List<CrawlerDeltaTarget>> deltaTargets;

    public Output</* @Nullable */ List<CrawlerDeltaTarget>> getDeltaTargets() {
        return this.deltaTargets;
    }
    /**
     * Description of the crawler.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the crawler.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * List of nested DynamoDB target arguments. See Dynamodb Target below.
     * 
     */
    @Export(name="dynamodbTargets", type=List.class, parameters={CrawlerDynamodbTarget.class})
    private Output</* @Nullable */ List<CrawlerDynamodbTarget>> dynamodbTargets;

    /**
     * @return List of nested DynamoDB target arguments. See Dynamodb Target below.
     * 
     */
    public Output</* @Nullable */ List<CrawlerDynamodbTarget>> getDynamodbTargets() {
        return this.dynamodbTargets;
    }
    /**
     * List of nested JBDC target arguments. See JDBC Target below.
     * 
     */
    @Export(name="jdbcTargets", type=List.class, parameters={CrawlerJdbcTarget.class})
    private Output</* @Nullable */ List<CrawlerJdbcTarget>> jdbcTargets;

    /**
     * @return List of nested JBDC target arguments. See JDBC Target below.
     * 
     */
    public Output</* @Nullable */ List<CrawlerJdbcTarget>> getJdbcTargets() {
        return this.jdbcTargets;
    }
    /**
     * Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
     * 
     */
    @Export(name="lineageConfiguration", type=CrawlerLineageConfiguration.class, parameters={})
    private Output</* @Nullable */ CrawlerLineageConfiguration> lineageConfiguration;

    /**
     * @return Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
     * 
     */
    public Output</* @Nullable */ CrawlerLineageConfiguration> getLineageConfiguration() {
        return this.lineageConfiguration;
    }
    /**
     * List nested MongoDB target arguments. See MongoDB Target below.
     * 
     */
    @Export(name="mongodbTargets", type=List.class, parameters={CrawlerMongodbTarget.class})
    private Output</* @Nullable */ List<CrawlerMongodbTarget>> mongodbTargets;

    /**
     * @return List nested MongoDB target arguments. See MongoDB Target below.
     * 
     */
    public Output</* @Nullable */ List<CrawlerMongodbTarget>> getMongodbTargets() {
        return this.mongodbTargets;
    }
    /**
     * Name of the crawler.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the crawler.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
     * 
     */
    @Export(name="recrawlPolicy", type=CrawlerRecrawlPolicy.class, parameters={})
    private Output</* @Nullable */ CrawlerRecrawlPolicy> recrawlPolicy;

    /**
     * @return A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
     * 
     */
    public Output</* @Nullable */ CrawlerRecrawlPolicy> getRecrawlPolicy() {
        return this.recrawlPolicy;
    }
    /**
     * The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
     * 
     */
    @Export(name="role", type=String.class, parameters={})
    private Output<String> role;

    /**
     * @return The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
     * 
     */
    public Output<String> getRole() {
        return this.role;
    }
    /**
     * List nested Amazon S3 target arguments. See S3 Target below.
     * 
     */
    @Export(name="s3Targets", type=List.class, parameters={CrawlerS3Target.class})
    private Output</* @Nullable */ List<CrawlerS3Target>> s3Targets;

    /**
     * @return List nested Amazon S3 target arguments. See S3 Target below.
     * 
     */
    public Output</* @Nullable */ List<CrawlerS3Target>> getS3Targets() {
        return this.s3Targets;
    }
    /**
     * A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
     * 
     */
    @Export(name="schedule", type=String.class, parameters={})
    private Output</* @Nullable */ String> schedule;

    /**
     * @return A cron expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: `cron(15 12 * * ? *)`.
     * 
     */
    public Output</* @Nullable */ String> getSchedule() {
        return this.schedule;
    }
    /**
     * Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
     * 
     */
    @Export(name="schemaChangePolicy", type=CrawlerSchemaChangePolicy.class, parameters={})
    private Output</* @Nullable */ CrawlerSchemaChangePolicy> schemaChangePolicy;

    /**
     * @return Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
     * 
     */
    public Output</* @Nullable */ CrawlerSchemaChangePolicy> getSchemaChangePolicy() {
        return this.schemaChangePolicy;
    }
    /**
     * The name of Security Configuration to be used by the crawler
     * 
     */
    @Export(name="securityConfiguration", type=String.class, parameters={})
    private Output</* @Nullable */ String> securityConfiguration;

    /**
     * @return The name of Security Configuration to be used by the crawler
     * 
     */
    public Output</* @Nullable */ String> getSecurityConfiguration() {
        return this.securityConfiguration;
    }
    /**
     * The table prefix used for catalog tables that are created.
     * 
     */
    @Export(name="tablePrefix", type=String.class, parameters={})
    private Output</* @Nullable */ String> tablePrefix;

    /**
     * @return The table prefix used for catalog tables that are created.
     * 
     */
    public Output</* @Nullable */ String> getTablePrefix() {
        return this.tablePrefix;
    }
    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Crawler(String name) {
        this(name, CrawlerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Crawler(String name, CrawlerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Crawler(String name, CrawlerArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/crawler:Crawler", name, args == null ? CrawlerArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Crawler(String name, Output<String> id, @Nullable CrawlerState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/crawler:Crawler", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Crawler get(String name, Output<String> id, @Nullable CrawlerState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Crawler(name, id, state, options);
    }
}
