// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codedeploy;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.codedeploy.DeploymentConfigArgs;
import io.pulumi.aws.codedeploy.inputs.DeploymentConfigState;
import io.pulumi.aws.codedeploy.outputs.DeploymentConfigMinimumHealthyHosts;
import io.pulumi.aws.codedeploy.outputs.DeploymentConfigTrafficRoutingConfig;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a CodeDeploy deployment config for an application
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Server Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const fooDeploymentConfig = new aws.codedeploy.DeploymentConfig("fooDeploymentConfig", {
 *     deploymentConfigName: "test-deployment-config",
 *     minimumHealthyHosts: {
 *         type: "HOST_COUNT",
 *         value: 2,
 *     },
 * });
 * const fooDeploymentGroup = new aws.codedeploy.DeploymentGroup("fooDeploymentGroup", {
 *     appName: aws_codedeploy_app.foo_app.name,
 *     deploymentGroupName: "bar",
 *     serviceRoleArn: aws_iam_role.foo_role.arn,
 *     deploymentConfigName: fooDeploymentConfig.id,
 *     ec2TagFilters: [{
 *         key: "filterkey",
 *         type: "KEY_AND_VALUE",
 *         value: "filtervalue",
 *     }],
 *     triggerConfigurations: [{
 *         triggerEvents: ["DeploymentFailure"],
 *         triggerName: "foo-trigger",
 *         triggerTargetArn: "foo-topic-arn",
 *     }],
 *     autoRollbackConfiguration: {
 *         enabled: true,
 *         events: ["DEPLOYMENT_FAILURE"],
 *     },
 *     alarmConfiguration: {
 *         alarms: ["my-alarm-name"],
 *         enabled: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * foo_deployment_config = aws.codedeploy.DeploymentConfig("fooDeploymentConfig",
 *     deployment_config_name="test-deployment-config",
 *     minimum_healthy_hosts=aws.codedeploy.DeploymentConfigMinimumHealthyHostsArgs(
 *         type="HOST_COUNT",
 *         value=2,
 *     ))
 * foo_deployment_group = aws.codedeploy.DeploymentGroup("fooDeploymentGroup",
 *     app_name=aws_codedeploy_app["foo_app"]["name"],
 *     deployment_group_name="bar",
 *     service_role_arn=aws_iam_role["foo_role"]["arn"],
 *     deployment_config_name=foo_deployment_config.id,
 *     ec2_tag_filters=[aws.codedeploy.DeploymentGroupEc2TagFilterArgs(
 *         key="filterkey",
 *         type="KEY_AND_VALUE",
 *         value="filtervalue",
 *     )],
 *     trigger_configurations=[aws.codedeploy.DeploymentGroupTriggerConfigurationArgs(
 *         trigger_events=["DeploymentFailure"],
 *         trigger_name="foo-trigger",
 *         trigger_target_arn="foo-topic-arn",
 *     )],
 *     auto_rollback_configuration=aws.codedeploy.DeploymentGroupAutoRollbackConfigurationArgs(
 *         enabled=True,
 *         events=["DEPLOYMENT_FAILURE"],
 *     ),
 *     alarm_configuration=aws.codedeploy.DeploymentGroupAlarmConfigurationArgs(
 *         alarms=["my-alarm-name"],
 *         enabled=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var fooDeploymentConfig = new Aws.CodeDeploy.DeploymentConfig("fooDeploymentConfig", new Aws.CodeDeploy.DeploymentConfigArgs
 *         {
 *             DeploymentConfigName = "test-deployment-config",
 *             MinimumHealthyHosts = new Aws.CodeDeploy.Inputs.DeploymentConfigMinimumHealthyHostsArgs
 *             {
 *                 Type = "HOST_COUNT",
 *                 Value = 2,
 *             },
 *         });
 *         var fooDeploymentGroup = new Aws.CodeDeploy.DeploymentGroup("fooDeploymentGroup", new Aws.CodeDeploy.DeploymentGroupArgs
 *         {
 *             AppName = aws_codedeploy_app.Foo_app.Name,
 *             DeploymentGroupName = "bar",
 *             ServiceRoleArn = aws_iam_role.Foo_role.Arn,
 *             DeploymentConfigName = fooDeploymentConfig.Id,
 *             Ec2TagFilters = 
 *             {
 *                 new Aws.CodeDeploy.Inputs.DeploymentGroupEc2TagFilterArgs
 *                 {
 *                     Key = "filterkey",
 *                     Type = "KEY_AND_VALUE",
 *                     Value = "filtervalue",
 *                 },
 *             },
 *             TriggerConfigurations = 
 *             {
 *                 new Aws.CodeDeploy.Inputs.DeploymentGroupTriggerConfigurationArgs
 *                 {
 *                     TriggerEvents = 
 *                     {
 *                         "DeploymentFailure",
 *                     },
 *                     TriggerName = "foo-trigger",
 *                     TriggerTargetArn = "foo-topic-arn",
 *                 },
 *             },
 *             AutoRollbackConfiguration = new Aws.CodeDeploy.Inputs.DeploymentGroupAutoRollbackConfigurationArgs
 *             {
 *                 Enabled = true,
 *                 Events = 
 *                 {
 *                     "DEPLOYMENT_FAILURE",
 *                 },
 *             },
 *             AlarmConfiguration = new Aws.CodeDeploy.Inputs.DeploymentGroupAlarmConfigurationArgs
 *             {
 *                 Alarms = 
 *                 {
 *                     "my-alarm-name",
 *                 },
 *                 Enabled = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codedeploy"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		fooDeploymentConfig, err := codedeploy.NewDeploymentConfig(ctx, "fooDeploymentConfig", &codedeploy.DeploymentConfigArgs{
 * 			DeploymentConfigName: pulumi.String("test-deployment-config"),
 * 			MinimumHealthyHosts: &codedeploy.DeploymentConfigMinimumHealthyHostsArgs{
 * 				Type:  pulumi.String("HOST_COUNT"),
 * 				Value: pulumi.Int(2),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = codedeploy.NewDeploymentGroup(ctx, "fooDeploymentGroup", &codedeploy.DeploymentGroupArgs{
 * 			AppName:              pulumi.Any(aws_codedeploy_app.Foo_app.Name),
 * 			DeploymentGroupName:  pulumi.String("bar"),
 * 			ServiceRoleArn:       pulumi.Any(aws_iam_role.Foo_role.Arn),
 * 			DeploymentConfigName: fooDeploymentConfig.ID(),
 * 			Ec2TagFilters: codedeploy.DeploymentGroupEc2TagFilterArray{
 * 				&codedeploy.DeploymentGroupEc2TagFilterArgs{
 * 					Key:   pulumi.String("filterkey"),
 * 					Type:  pulumi.String("KEY_AND_VALUE"),
 * 					Value: pulumi.String("filtervalue"),
 * 				},
 * 			},
 * 			TriggerConfigurations: codedeploy.DeploymentGroupTriggerConfigurationArray{
 * 				&codedeploy.DeploymentGroupTriggerConfigurationArgs{
 * 					TriggerEvents: pulumi.StringArray{
 * 						pulumi.String("DeploymentFailure"),
 * 					},
 * 					TriggerName:      pulumi.String("foo-trigger"),
 * 					TriggerTargetArn: pulumi.String("foo-topic-arn"),
 * 				},
 * 			},
 * 			AutoRollbackConfiguration: &codedeploy.DeploymentGroupAutoRollbackConfigurationArgs{
 * 				Enabled: pulumi.Bool(true),
 * 				Events: pulumi.StringArray{
 * 					pulumi.String("DEPLOYMENT_FAILURE"),
 * 				},
 * 			},
 * 			AlarmConfiguration: &codedeploy.DeploymentGroupAlarmConfigurationArgs{
 * 				Alarms: pulumi.StringArray{
 * 					pulumi.String("my-alarm-name"),
 * 				},
 * 				Enabled: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Lambda Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const fooDeploymentConfig = new aws.codedeploy.DeploymentConfig("fooDeploymentConfig", {
 *     deploymentConfigName: "test-deployment-config",
 *     computePlatform: "Lambda",
 *     trafficRoutingConfig: {
 *         type: "TimeBasedLinear",
 *         timeBasedLinear: {
 *             interval: 10,
 *             percentage: 10,
 *         },
 *     },
 * });
 * const fooDeploymentGroup = new aws.codedeploy.DeploymentGroup("fooDeploymentGroup", {
 *     appName: aws_codedeploy_app.foo_app.name,
 *     deploymentGroupName: "bar",
 *     serviceRoleArn: aws_iam_role.foo_role.arn,
 *     deploymentConfigName: fooDeploymentConfig.id,
 *     autoRollbackConfiguration: {
 *         enabled: true,
 *         events: ["DEPLOYMENT_STOP_ON_ALARM"],
 *     },
 *     alarmConfiguration: {
 *         alarms: ["my-alarm-name"],
 *         enabled: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * foo_deployment_config = aws.codedeploy.DeploymentConfig("fooDeploymentConfig",
 *     deployment_config_name="test-deployment-config",
 *     compute_platform="Lambda",
 *     traffic_routing_config=aws.codedeploy.DeploymentConfigTrafficRoutingConfigArgs(
 *         type="TimeBasedLinear",
 *         time_based_linear=aws.codedeploy.DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs(
 *             interval=10,
 *             percentage=10,
 *         ),
 *     ))
 * foo_deployment_group = aws.codedeploy.DeploymentGroup("fooDeploymentGroup",
 *     app_name=aws_codedeploy_app["foo_app"]["name"],
 *     deployment_group_name="bar",
 *     service_role_arn=aws_iam_role["foo_role"]["arn"],
 *     deployment_config_name=foo_deployment_config.id,
 *     auto_rollback_configuration=aws.codedeploy.DeploymentGroupAutoRollbackConfigurationArgs(
 *         enabled=True,
 *         events=["DEPLOYMENT_STOP_ON_ALARM"],
 *     ),
 *     alarm_configuration=aws.codedeploy.DeploymentGroupAlarmConfigurationArgs(
 *         alarms=["my-alarm-name"],
 *         enabled=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var fooDeploymentConfig = new Aws.CodeDeploy.DeploymentConfig("fooDeploymentConfig", new Aws.CodeDeploy.DeploymentConfigArgs
 *         {
 *             DeploymentConfigName = "test-deployment-config",
 *             ComputePlatform = "Lambda",
 *             TrafficRoutingConfig = new Aws.CodeDeploy.Inputs.DeploymentConfigTrafficRoutingConfigArgs
 *             {
 *                 Type = "TimeBasedLinear",
 *                 TimeBasedLinear = new Aws.CodeDeploy.Inputs.DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs
 *                 {
 *                     Interval = 10,
 *                     Percentage = 10,
 *                 },
 *             },
 *         });
 *         var fooDeploymentGroup = new Aws.CodeDeploy.DeploymentGroup("fooDeploymentGroup", new Aws.CodeDeploy.DeploymentGroupArgs
 *         {
 *             AppName = aws_codedeploy_app.Foo_app.Name,
 *             DeploymentGroupName = "bar",
 *             ServiceRoleArn = aws_iam_role.Foo_role.Arn,
 *             DeploymentConfigName = fooDeploymentConfig.Id,
 *             AutoRollbackConfiguration = new Aws.CodeDeploy.Inputs.DeploymentGroupAutoRollbackConfigurationArgs
 *             {
 *                 Enabled = true,
 *                 Events = 
 *                 {
 *                     "DEPLOYMENT_STOP_ON_ALARM",
 *                 },
 *             },
 *             AlarmConfiguration = new Aws.CodeDeploy.Inputs.DeploymentGroupAlarmConfigurationArgs
 *             {
 *                 Alarms = 
 *                 {
 *                     "my-alarm-name",
 *                 },
 *                 Enabled = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codedeploy"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		fooDeploymentConfig, err := codedeploy.NewDeploymentConfig(ctx, "fooDeploymentConfig", &codedeploy.DeploymentConfigArgs{
 * 			DeploymentConfigName: pulumi.String("test-deployment-config"),
 * 			ComputePlatform:      pulumi.String("Lambda"),
 * 			TrafficRoutingConfig: &codedeploy.DeploymentConfigTrafficRoutingConfigArgs{
 * 				Type: pulumi.String("TimeBasedLinear"),
 * 				TimeBasedLinear: &codedeploy.DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs{
 * 					Interval:   pulumi.Int(10),
 * 					Percentage: pulumi.Int(10),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = codedeploy.NewDeploymentGroup(ctx, "fooDeploymentGroup", &codedeploy.DeploymentGroupArgs{
 * 			AppName:              pulumi.Any(aws_codedeploy_app.Foo_app.Name),
 * 			DeploymentGroupName:  pulumi.String("bar"),
 * 			ServiceRoleArn:       pulumi.Any(aws_iam_role.Foo_role.Arn),
 * 			DeploymentConfigName: fooDeploymentConfig.ID(),
 * 			AutoRollbackConfiguration: &codedeploy.DeploymentGroupAutoRollbackConfigurationArgs{
 * 				Enabled: pulumi.Bool(true),
 * 				Events: pulumi.StringArray{
 * 					pulumi.String("DEPLOYMENT_STOP_ON_ALARM"),
 * 				},
 * 			},
 * 			AlarmConfiguration: &codedeploy.DeploymentGroupAlarmConfigurationArgs{
 * 				Alarms: pulumi.StringArray{
 * 					pulumi.String("my-alarm-name"),
 * 				},
 * 				Enabled: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * CodeDeploy Deployment Configurations can be imported using the `deployment_config_name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:codedeploy/deploymentConfig:DeploymentConfig example my-deployment-config
 * ```
 * 
 *  
 */
@ResourceType(type="aws:codedeploy/deploymentConfig:DeploymentConfig")
public class DeploymentConfig extends io.pulumi.resources.CustomResource {
    /**
     * The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
     * 
     */
    @Export(name="computePlatform", type=String.class, parameters={})
    private Output</* @Nullable */ String> computePlatform;

    /**
     * @return The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
     * 
     */
    public Output</* @Nullable */ String> getComputePlatform() {
        return this.computePlatform;
    }
    /**
     * The AWS Assigned deployment config id
     * 
     */
    @Export(name="deploymentConfigId", type=String.class, parameters={})
    private Output<String> deploymentConfigId;

    /**
     * @return The AWS Assigned deployment config id
     * 
     */
    public Output<String> getDeploymentConfigId() {
        return this.deploymentConfigId;
    }
    /**
     * The name of the deployment config.
     * 
     */
    @Export(name="deploymentConfigName", type=String.class, parameters={})
    private Output<String> deploymentConfigName;

    /**
     * @return The name of the deployment config.
     * 
     */
    public Output<String> getDeploymentConfigName() {
        return this.deploymentConfigName;
    }
    /**
     * A minimum_healthy_hosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
     * 
     */
    @Export(name="minimumHealthyHosts", type=DeploymentConfigMinimumHealthyHosts.class, parameters={})
    private Output</* @Nullable */ DeploymentConfigMinimumHealthyHosts> minimumHealthyHosts;

    /**
     * @return A minimum_healthy_hosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
     * 
     */
    public Output</* @Nullable */ DeploymentConfigMinimumHealthyHosts> getMinimumHealthyHosts() {
        return this.minimumHealthyHosts;
    }
    /**
     * A traffic_routing_config block. Traffic Routing Config is documented below.
     * 
     */
    @Export(name="trafficRoutingConfig", type=DeploymentConfigTrafficRoutingConfig.class, parameters={})
    private Output</* @Nullable */ DeploymentConfigTrafficRoutingConfig> trafficRoutingConfig;

    /**
     * @return A traffic_routing_config block. Traffic Routing Config is documented below.
     * 
     */
    public Output</* @Nullable */ DeploymentConfigTrafficRoutingConfig> getTrafficRoutingConfig() {
        return this.trafficRoutingConfig;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DeploymentConfig(String name) {
        this(name, DeploymentConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DeploymentConfig(String name, DeploymentConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DeploymentConfig(String name, DeploymentConfigArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codedeploy/deploymentConfig:DeploymentConfig", name, args == null ? DeploymentConfigArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private DeploymentConfig(String name, Output<String> id, @Nullable DeploymentConfigState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codedeploy/deploymentConfig:DeploymentConfig", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DeploymentConfig get(String name, Output<String> id, @Nullable DeploymentConfigState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new DeploymentConfig(name, id, state, options);
    }
}
