// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigateway;

import io.pulumi.aws.apigateway.inputs.StageAccessLogSettingsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StageArgs extends io.pulumi.resources.ResourceArgs {

    public static final StageArgs Empty = new StageArgs();

    /**
     * Enables access logs for the API stage. Detailed below.
     * 
     */
    @InputImport(name="accessLogSettings")
      private final @Nullable Output<StageAccessLogSettingsArgs> accessLogSettings;

    public Output<StageAccessLogSettingsArgs> getAccessLogSettings() {
        return this.accessLogSettings == null ? Output.empty() : this.accessLogSettings;
    }

    /**
     * Specifies whether a cache cluster is enabled for the stage
     * 
     */
    @InputImport(name="cacheClusterEnabled")
      private final @Nullable Output<Boolean> cacheClusterEnabled;

    public Output<Boolean> getCacheClusterEnabled() {
        return this.cacheClusterEnabled == null ? Output.empty() : this.cacheClusterEnabled;
    }

    /**
     * The size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
     * 
     */
    @InputImport(name="cacheClusterSize")
      private final @Nullable Output<String> cacheClusterSize;

    public Output<String> getCacheClusterSize() {
        return this.cacheClusterSize == null ? Output.empty() : this.cacheClusterSize;
    }

    /**
     * The identifier of a client certificate for the stage.
     * 
     */
    @InputImport(name="clientCertificateId")
      private final @Nullable Output<String> clientCertificateId;

    public Output<String> getClientCertificateId() {
        return this.clientCertificateId == null ? Output.empty() : this.clientCertificateId;
    }

    /**
     * The ID of the deployment that the stage points to
     * 
     */
    @InputImport(name="deployment", required=true)
      private final Output<String> deployment;

    public Output<String> getDeployment() {
        return this.deployment;
    }

    /**
     * The description of the stage
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The version of the associated API documentation
     * 
     */
    @InputImport(name="documentationVersion")
      private final @Nullable Output<String> documentationVersion;

    public Output<String> getDocumentationVersion() {
        return this.documentationVersion == null ? Output.empty() : this.documentationVersion;
    }

    /**
     * The ID of the associated REST API
     * 
     */
    @InputImport(name="restApi", required=true)
      private final Output<String> restApi;

    public Output<String> getRestApi() {
        return this.restApi;
    }

    /**
     * The name of the stage
     * 
     */
    @InputImport(name="stageName", required=true)
      private final Output<String> stageName;

    public Output<String> getStageName() {
        return this.stageName;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map that defines the stage variables
     * 
     */
    @InputImport(name="variables")
      private final @Nullable Output<Map<String,String>> variables;

    public Output<Map<String,String>> getVariables() {
        return this.variables == null ? Output.empty() : this.variables;
    }

    /**
     * Whether active tracing with X-ray is enabled. Defaults to `false`.
     * 
     */
    @InputImport(name="xrayTracingEnabled")
      private final @Nullable Output<Boolean> xrayTracingEnabled;

    public Output<Boolean> getXrayTracingEnabled() {
        return this.xrayTracingEnabled == null ? Output.empty() : this.xrayTracingEnabled;
    }

    public StageArgs(
        @Nullable Output<StageAccessLogSettingsArgs> accessLogSettings,
        @Nullable Output<Boolean> cacheClusterEnabled,
        @Nullable Output<String> cacheClusterSize,
        @Nullable Output<String> clientCertificateId,
        Output<String> deployment,
        @Nullable Output<String> description,
        @Nullable Output<String> documentationVersion,
        Output<String> restApi,
        Output<String> stageName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> variables,
        @Nullable Output<Boolean> xrayTracingEnabled) {
        this.accessLogSettings = accessLogSettings;
        this.cacheClusterEnabled = cacheClusterEnabled;
        this.cacheClusterSize = cacheClusterSize;
        this.clientCertificateId = clientCertificateId;
        this.deployment = Objects.requireNonNull(deployment, "expected parameter 'deployment' to be non-null");
        this.description = description;
        this.documentationVersion = documentationVersion;
        this.restApi = Objects.requireNonNull(restApi, "expected parameter 'restApi' to be non-null");
        this.stageName = Objects.requireNonNull(stageName, "expected parameter 'stageName' to be non-null");
        this.tags = tags;
        this.variables = variables;
        this.xrayTracingEnabled = xrayTracingEnabled;
    }

    private StageArgs() {
        this.accessLogSettings = Output.empty();
        this.cacheClusterEnabled = Output.empty();
        this.cacheClusterSize = Output.empty();
        this.clientCertificateId = Output.empty();
        this.deployment = Output.empty();
        this.description = Output.empty();
        this.documentationVersion = Output.empty();
        this.restApi = Output.empty();
        this.stageName = Output.empty();
        this.tags = Output.empty();
        this.variables = Output.empty();
        this.xrayTracingEnabled = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<StageAccessLogSettingsArgs> accessLogSettings;
        private @Nullable Output<Boolean> cacheClusterEnabled;
        private @Nullable Output<String> cacheClusterSize;
        private @Nullable Output<String> clientCertificateId;
        private Output<String> deployment;
        private @Nullable Output<String> description;
        private @Nullable Output<String> documentationVersion;
        private Output<String> restApi;
        private Output<String> stageName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> variables;
        private @Nullable Output<Boolean> xrayTracingEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(StageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLogSettings = defaults.accessLogSettings;
    	      this.cacheClusterEnabled = defaults.cacheClusterEnabled;
    	      this.cacheClusterSize = defaults.cacheClusterSize;
    	      this.clientCertificateId = defaults.clientCertificateId;
    	      this.deployment = defaults.deployment;
    	      this.description = defaults.description;
    	      this.documentationVersion = defaults.documentationVersion;
    	      this.restApi = defaults.restApi;
    	      this.stageName = defaults.stageName;
    	      this.tags = defaults.tags;
    	      this.variables = defaults.variables;
    	      this.xrayTracingEnabled = defaults.xrayTracingEnabled;
        }

        public Builder accessLogSettings(@Nullable Output<StageAccessLogSettingsArgs> accessLogSettings) {
            this.accessLogSettings = accessLogSettings;
            return this;
        }

        public Builder accessLogSettings(@Nullable StageAccessLogSettingsArgs accessLogSettings) {
            this.accessLogSettings = Output.ofNullable(accessLogSettings);
            return this;
        }

        public Builder cacheClusterEnabled(@Nullable Output<Boolean> cacheClusterEnabled) {
            this.cacheClusterEnabled = cacheClusterEnabled;
            return this;
        }

        public Builder cacheClusterEnabled(@Nullable Boolean cacheClusterEnabled) {
            this.cacheClusterEnabled = Output.ofNullable(cacheClusterEnabled);
            return this;
        }

        public Builder cacheClusterSize(@Nullable Output<String> cacheClusterSize) {
            this.cacheClusterSize = cacheClusterSize;
            return this;
        }

        public Builder cacheClusterSize(@Nullable String cacheClusterSize) {
            this.cacheClusterSize = Output.ofNullable(cacheClusterSize);
            return this;
        }

        public Builder clientCertificateId(@Nullable Output<String> clientCertificateId) {
            this.clientCertificateId = clientCertificateId;
            return this;
        }

        public Builder clientCertificateId(@Nullable String clientCertificateId) {
            this.clientCertificateId = Output.ofNullable(clientCertificateId);
            return this;
        }

        public Builder deployment(Output<String> deployment) {
            this.deployment = Objects.requireNonNull(deployment);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder documentationVersion(@Nullable Output<String> documentationVersion) {
            this.documentationVersion = documentationVersion;
            return this;
        }

        public Builder documentationVersion(@Nullable String documentationVersion) {
            this.documentationVersion = Output.ofNullable(documentationVersion);
            return this;
        }

        public Builder restApi(Output<String> restApi) {
            this.restApi = Objects.requireNonNull(restApi);
            return this;
        }

        public Builder stageName(Output<String> stageName) {
            this.stageName = Objects.requireNonNull(stageName);
            return this;
        }

        public Builder stageName(String stageName) {
            this.stageName = Output.of(Objects.requireNonNull(stageName));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder variables(@Nullable Output<Map<String,String>> variables) {
            this.variables = variables;
            return this;
        }

        public Builder variables(@Nullable Map<String,String> variables) {
            this.variables = Output.ofNullable(variables);
            return this;
        }

        public Builder xrayTracingEnabled(@Nullable Output<Boolean> xrayTracingEnabled) {
            this.xrayTracingEnabled = xrayTracingEnabled;
            return this;
        }

        public Builder xrayTracingEnabled(@Nullable Boolean xrayTracingEnabled) {
            this.xrayTracingEnabled = Output.ofNullable(xrayTracingEnabled);
            return this;
        }
        public StageArgs build() {
            return new StageArgs(accessLogSettings, cacheClusterEnabled, cacheClusterSize, clientCertificateId, deployment, description, documentationVersion, restApi, stageName, tags, variables, xrayTracingEnabled);
        }
    }
}
