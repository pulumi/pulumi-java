// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.iot.inputs;

import io.pulumi.aws.iot.inputs.ThingTypePropertiesGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ThingTypeState extends io.pulumi.resources.ResourceArgs {

    public static final ThingTypeState Empty = new ThingTypeState();

    /**
     * The ARN of the created AWS IoT Thing Type.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Whether the thing type is deprecated. If true, no new things could be associated with this type.
     * 
     */
    @InputImport(name="deprecated")
    private final @Nullable Input<Boolean> deprecated;

    public Input<Boolean> getDeprecated() {
        return this.deprecated == null ? Input.empty() : this.deprecated;
    }

    /**
     * The name of the thing type.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * , Configuration block that can contain the following properties of the thing type:
     * 
     */
    @InputImport(name="properties")
    private final @Nullable Input<ThingTypePropertiesGetArgs> properties;

    public Input<ThingTypePropertiesGetArgs> getProperties() {
        return this.properties == null ? Input.empty() : this.properties;
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public ThingTypeState(
        @Nullable Input<String> arn,
        @Nullable Input<Boolean> deprecated,
        @Nullable Input<String> name,
        @Nullable Input<ThingTypePropertiesGetArgs> properties,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.deprecated = deprecated;
        this.name = name;
        this.properties = properties;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private ThingTypeState() {
        this.arn = Input.empty();
        this.deprecated = Input.empty();
        this.name = Input.empty();
        this.properties = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThingTypeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<Boolean> deprecated;
        private @Nullable Input<String> name;
        private @Nullable Input<ThingTypePropertiesGetArgs> properties;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(ThingTypeState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.deprecated = defaults.deprecated;
    	      this.name = defaults.name;
    	      this.properties = defaults.properties;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setDeprecated(@Nullable Input<Boolean> deprecated) {
            this.deprecated = deprecated;
            return this;
        }

        public Builder setDeprecated(@Nullable Boolean deprecated) {
            this.deprecated = Input.ofNullable(deprecated);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProperties(@Nullable Input<ThingTypePropertiesGetArgs> properties) {
            this.properties = properties;
            return this;
        }

        public Builder setProperties(@Nullable ThingTypePropertiesGetArgs properties) {
            this.properties = Input.ofNullable(properties);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public ThingTypeState build() {
            return new ThingTypeState(arn, deprecated, name, properties, tags, tagsAll);
        }
    }
}
