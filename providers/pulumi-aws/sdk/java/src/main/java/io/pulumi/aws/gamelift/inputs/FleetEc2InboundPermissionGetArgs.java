// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.gamelift.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class FleetEc2InboundPermissionGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final FleetEc2InboundPermissionGetArgs Empty = new FleetEc2InboundPermissionGetArgs();

    /**
     * Starting value for a range of allowed port numbers.
     * 
     */
    @Import(name="fromPort", required=true)
      private final Output<Integer> fromPort;

    public Output<Integer> getFromPort() {
        return this.fromPort;
    }

    /**
     * Range of allowed IP addresses expressed in CIDR notationE.g., `000.000.000.000/[subnet mask]` or `0.0.0.0/[subnet mask]`.
     * 
     */
    @Import(name="ipRange", required=true)
      private final Output<String> ipRange;

    public Output<String> getIpRange() {
        return this.ipRange;
    }

    /**
     * Network communication protocol used by the fleetE.g., `TCP` or `UDP`
     * 
     */
    @Import(name="protocol", required=true)
      private final Output<String> protocol;

    public Output<String> getProtocol() {
        return this.protocol;
    }

    /**
     * Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than `from_port`.
     * 
     */
    @Import(name="toPort", required=true)
      private final Output<Integer> toPort;

    public Output<Integer> getToPort() {
        return this.toPort;
    }

    public FleetEc2InboundPermissionGetArgs(
        Output<Integer> fromPort,
        Output<String> ipRange,
        Output<String> protocol,
        Output<Integer> toPort) {
        this.fromPort = Objects.requireNonNull(fromPort, "expected parameter 'fromPort' to be non-null");
        this.ipRange = Objects.requireNonNull(ipRange, "expected parameter 'ipRange' to be non-null");
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
        this.toPort = Objects.requireNonNull(toPort, "expected parameter 'toPort' to be non-null");
    }

    private FleetEc2InboundPermissionGetArgs() {
        this.fromPort = Output.empty();
        this.ipRange = Output.empty();
        this.protocol = Output.empty();
        this.toPort = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FleetEc2InboundPermissionGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> fromPort;
        private Output<String> ipRange;
        private Output<String> protocol;
        private Output<Integer> toPort;

        public Builder() {
    	      // Empty
        }

        public Builder(FleetEc2InboundPermissionGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fromPort = defaults.fromPort;
    	      this.ipRange = defaults.ipRange;
    	      this.protocol = defaults.protocol;
    	      this.toPort = defaults.toPort;
        }

        public Builder fromPort(Output<Integer> fromPort) {
            this.fromPort = Objects.requireNonNull(fromPort);
            return this;
        }

        public Builder fromPort(Integer fromPort) {
            this.fromPort = Output.of(Objects.requireNonNull(fromPort));
            return this;
        }

        public Builder ipRange(Output<String> ipRange) {
            this.ipRange = Objects.requireNonNull(ipRange);
            return this;
        }

        public Builder ipRange(String ipRange) {
            this.ipRange = Output.of(Objects.requireNonNull(ipRange));
            return this;
        }

        public Builder protocol(Output<String> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder protocol(String protocol) {
            this.protocol = Output.of(Objects.requireNonNull(protocol));
            return this;
        }

        public Builder toPort(Output<Integer> toPort) {
            this.toPort = Objects.requireNonNull(toPort);
            return this;
        }

        public Builder toPort(Integer toPort) {
            this.toPort = Output.of(Objects.requireNonNull(toPort));
            return this;
        }
        public FleetEc2InboundPermissionGetArgs build() {
            return new FleetEc2InboundPermissionGetArgs(fromPort, ipRange, protocol, toPort);
        }
    }
}
