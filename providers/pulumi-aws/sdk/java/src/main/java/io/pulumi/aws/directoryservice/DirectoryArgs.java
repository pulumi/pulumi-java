// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.directoryservice;

import io.pulumi.aws.directoryservice.inputs.DirectoryConnectSettingsArgs;
import io.pulumi.aws.directoryservice.inputs.DirectoryVpcSettingsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DirectoryArgs extends io.pulumi.resources.ResourceArgs {

    public static final DirectoryArgs Empty = new DirectoryArgs();

    /**
     * The alias for the directory (must be unique amongst all aliases in AWS). Required for `enable_sso`.
     * 
     */
    @InputImport(name="alias")
      private final @Nullable Output<String> alias;

    public Output<String> getAlias() {
        return this.alias == null ? Output.empty() : this.alias;
    }

    /**
     * Connector related information about the directory. Fields documented below.
     * 
     */
    @InputImport(name="connectSettings")
      private final @Nullable Output<DirectoryConnectSettingsArgs> connectSettings;

    public Output<DirectoryConnectSettingsArgs> getConnectSettings() {
        return this.connectSettings == null ? Output.empty() : this.connectSettings;
    }

    /**
     * A textual description for the directory.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The MicrosoftAD edition (`Standard` or `Enterprise`). Defaults to `Enterprise` (applies to MicrosoftAD type only).
     * 
     */
    @InputImport(name="edition")
      private final @Nullable Output<String> edition;

    public Output<String> getEdition() {
        return this.edition == null ? Output.empty() : this.edition;
    }

    /**
     * Whether to enable single-sign on for the directory. Requires `alias`. Defaults to `false`.
     * 
     */
    @InputImport(name="enableSso")
      private final @Nullable Output<Boolean> enableSso;

    public Output<Boolean> getEnableSso() {
        return this.enableSso == null ? Output.empty() : this.enableSso;
    }

    /**
     * The fully qualified name for the directory, such as `corp.example.com`
     * 
     */
    @InputImport(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * The password for the directory administrator or connector user.
     * 
     */
    @InputImport(name="password", required=true)
      private final Output<String> password;

    public Output<String> getPassword() {
        return this.password;
    }

    /**
     * The short name of the directory, such as `CORP`.
     * 
     */
    @InputImport(name="shortName")
      private final @Nullable Output<String> shortName;

    public Output<String> getShortName() {
        return this.shortName == null ? Output.empty() : this.shortName;
    }

    /**
     * The size of the directory (`Small` or `Large` are accepted values).
     * 
     */
    @InputImport(name="size")
      private final @Nullable Output<String> size;

    public Output<String> getSize() {
        return this.size == null ? Output.empty() : this.size;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD` are accepted values). Defaults to `SimpleAD`.
     * 
     */
    @InputImport(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    /**
     * VPC related information about the directory. Fields documented below.
     * 
     */
    @InputImport(name="vpcSettings")
      private final @Nullable Output<DirectoryVpcSettingsArgs> vpcSettings;

    public Output<DirectoryVpcSettingsArgs> getVpcSettings() {
        return this.vpcSettings == null ? Output.empty() : this.vpcSettings;
    }

    public DirectoryArgs(
        @Nullable Output<String> alias,
        @Nullable Output<DirectoryConnectSettingsArgs> connectSettings,
        @Nullable Output<String> description,
        @Nullable Output<String> edition,
        @Nullable Output<Boolean> enableSso,
        Output<String> name,
        Output<String> password,
        @Nullable Output<String> shortName,
        @Nullable Output<String> size,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> type,
        @Nullable Output<DirectoryVpcSettingsArgs> vpcSettings) {
        this.alias = alias;
        this.connectSettings = connectSettings;
        this.description = description;
        this.edition = edition;
        this.enableSso = enableSso;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.shortName = shortName;
        this.size = size;
        this.tags = tags;
        this.type = type;
        this.vpcSettings = vpcSettings;
    }

    private DirectoryArgs() {
        this.alias = Output.empty();
        this.connectSettings = Output.empty();
        this.description = Output.empty();
        this.edition = Output.empty();
        this.enableSso = Output.empty();
        this.name = Output.empty();
        this.password = Output.empty();
        this.shortName = Output.empty();
        this.size = Output.empty();
        this.tags = Output.empty();
        this.type = Output.empty();
        this.vpcSettings = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> alias;
        private @Nullable Output<DirectoryConnectSettingsArgs> connectSettings;
        private @Nullable Output<String> description;
        private @Nullable Output<String> edition;
        private @Nullable Output<Boolean> enableSso;
        private Output<String> name;
        private Output<String> password;
        private @Nullable Output<String> shortName;
        private @Nullable Output<String> size;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> type;
        private @Nullable Output<DirectoryVpcSettingsArgs> vpcSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(DirectoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.connectSettings = defaults.connectSettings;
    	      this.description = defaults.description;
    	      this.edition = defaults.edition;
    	      this.enableSso = defaults.enableSso;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.shortName = defaults.shortName;
    	      this.size = defaults.size;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.vpcSettings = defaults.vpcSettings;
        }

        public Builder alias(@Nullable Output<String> alias) {
            this.alias = alias;
            return this;
        }

        public Builder alias(@Nullable String alias) {
            this.alias = Output.ofNullable(alias);
            return this;
        }

        public Builder connectSettings(@Nullable Output<DirectoryConnectSettingsArgs> connectSettings) {
            this.connectSettings = connectSettings;
            return this;
        }

        public Builder connectSettings(@Nullable DirectoryConnectSettingsArgs connectSettings) {
            this.connectSettings = Output.ofNullable(connectSettings);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder edition(@Nullable Output<String> edition) {
            this.edition = edition;
            return this;
        }

        public Builder edition(@Nullable String edition) {
            this.edition = Output.ofNullable(edition);
            return this;
        }

        public Builder enableSso(@Nullable Output<Boolean> enableSso) {
            this.enableSso = enableSso;
            return this;
        }

        public Builder enableSso(@Nullable Boolean enableSso) {
            this.enableSso = Output.ofNullable(enableSso);
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder password(Output<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder password(String password) {
            this.password = Output.of(Objects.requireNonNull(password));
            return this;
        }

        public Builder shortName(@Nullable Output<String> shortName) {
            this.shortName = shortName;
            return this;
        }

        public Builder shortName(@Nullable String shortName) {
            this.shortName = Output.ofNullable(shortName);
            return this;
        }

        public Builder size(@Nullable Output<String> size) {
            this.size = size;
            return this;
        }

        public Builder size(@Nullable String size) {
            this.size = Output.ofNullable(size);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }

        public Builder vpcSettings(@Nullable Output<DirectoryVpcSettingsArgs> vpcSettings) {
            this.vpcSettings = vpcSettings;
            return this;
        }

        public Builder vpcSettings(@Nullable DirectoryVpcSettingsArgs vpcSettings) {
            this.vpcSettings = Output.ofNullable(vpcSettings);
            return this;
        }
        public DirectoryArgs build() {
            return new DirectoryArgs(alias, connectSettings, description, edition, enableSso, name, password, shortName, size, tags, type, vpcSettings);
        }
    }
}
