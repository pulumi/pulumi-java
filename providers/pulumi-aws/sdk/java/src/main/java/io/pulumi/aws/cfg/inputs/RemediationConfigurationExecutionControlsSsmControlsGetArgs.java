// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cfg.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RemediationConfigurationExecutionControlsSsmControlsGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final RemediationConfigurationExecutionControlsSsmControlsGetArgs Empty = new RemediationConfigurationExecutionControlsSsmControlsGetArgs();

    /**
     * Maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. The default value is 10%.
     * 
     */
    @InputImport(name="concurrentExecutionRatePercentage")
      private final @Nullable Input<Integer> concurrentExecutionRatePercentage;

    public Input<Integer> getConcurrentExecutionRatePercentage() {
        return this.concurrentExecutionRatePercentage == null ? Input.empty() : this.concurrentExecutionRatePercentage;
    }

    /**
     * Percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule. The default is 50%.
     * 
     */
    @InputImport(name="errorPercentage")
      private final @Nullable Input<Integer> errorPercentage;

    public Input<Integer> getErrorPercentage() {
        return this.errorPercentage == null ? Input.empty() : this.errorPercentage;
    }

    public RemediationConfigurationExecutionControlsSsmControlsGetArgs(
        @Nullable Input<Integer> concurrentExecutionRatePercentage,
        @Nullable Input<Integer> errorPercentage) {
        this.concurrentExecutionRatePercentage = concurrentExecutionRatePercentage;
        this.errorPercentage = errorPercentage;
    }

    private RemediationConfigurationExecutionControlsSsmControlsGetArgs() {
        this.concurrentExecutionRatePercentage = Input.empty();
        this.errorPercentage = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RemediationConfigurationExecutionControlsSsmControlsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> concurrentExecutionRatePercentage;
        private @Nullable Input<Integer> errorPercentage;

        public Builder() {
    	      // Empty
        }

        public Builder(RemediationConfigurationExecutionControlsSsmControlsGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.concurrentExecutionRatePercentage = defaults.concurrentExecutionRatePercentage;
    	      this.errorPercentage = defaults.errorPercentage;
        }

        public Builder setConcurrentExecutionRatePercentage(@Nullable Input<Integer> concurrentExecutionRatePercentage) {
            this.concurrentExecutionRatePercentage = concurrentExecutionRatePercentage;
            return this;
        }

        public Builder setConcurrentExecutionRatePercentage(@Nullable Integer concurrentExecutionRatePercentage) {
            this.concurrentExecutionRatePercentage = Input.ofNullable(concurrentExecutionRatePercentage);
            return this;
        }

        public Builder setErrorPercentage(@Nullable Input<Integer> errorPercentage) {
            this.errorPercentage = errorPercentage;
            return this;
        }

        public Builder setErrorPercentage(@Nullable Integer errorPercentage) {
            this.errorPercentage = Input.ofNullable(errorPercentage);
            return this;
        }
        public RemediationConfigurationExecutionControlsSsmControlsGetArgs build() {
            return new RemediationConfigurationExecutionControlsSsmControlsGetArgs(concurrentExecutionRatePercentage, errorPercentage);
        }
    }
}
