// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesisanalyticsv2.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnArgs Empty = new ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnArgs();

    /**
     * A reference to the data element in the streaming input or the reference data source.
     * 
     */
    @Import(name="mapping")
      private final @Nullable Output<String> mapping;

    public Output<String> mapping() {
        return this.mapping == null ? Codegen.empty() : this.mapping;
    }

    /**
     * The name of the column that is created in the in-application input stream or reference table.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The type of column created in the in-application input stream or reference table.
     * 
     */
    @Import(name="sqlType", required=true)
      private final Output<String> sqlType;

    public Output<String> sqlType() {
        return this.sqlType;
    }

    public ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnArgs(
        @Nullable Output<String> mapping,
        Output<String> name,
        Output<String> sqlType) {
        this.mapping = mapping;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.sqlType = Objects.requireNonNull(sqlType, "expected parameter 'sqlType' to be non-null");
    }

    private ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnArgs() {
        this.mapping = Codegen.empty();
        this.name = Codegen.empty();
        this.sqlType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> mapping;
        private Output<String> name;
        private Output<String> sqlType;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mapping = defaults.mapping;
    	      this.name = defaults.name;
    	      this.sqlType = defaults.sqlType;
        }

        public Builder mapping(@Nullable Output<String> mapping) {
            this.mapping = mapping;
            return this;
        }
        public Builder mapping(@Nullable String mapping) {
            this.mapping = Codegen.ofNullable(mapping);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder sqlType(Output<String> sqlType) {
            this.sqlType = Objects.requireNonNull(sqlType);
            return this;
        }
        public Builder sqlType(String sqlType) {
            this.sqlType = Output.of(Objects.requireNonNull(sqlType));
            return this;
        }        public ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnArgs build() {
            return new ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumnArgs(mapping, name, sqlType);
        }
    }
}
