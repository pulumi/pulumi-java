// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.athena.inputs;

import io.pulumi.aws.athena.inputs.DatabaseEncryptionConfigurationGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DatabaseState extends io.pulumi.resources.ResourceArgs {

    public static final DatabaseState Empty = new DatabaseState();

    /**
     * Name of s3 bucket to save the results of the query execution.
     * 
     */
    @Import(name="bucket")
      private final @Nullable Output<String> bucket;

    public Output<String> bucket() {
        return this.bucket == null ? Codegen.empty() : this.bucket;
    }

    /**
     * The encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. An `encryption_configuration` block is documented below.
     * 
     */
    @Import(name="encryptionConfiguration")
      private final @Nullable Output<DatabaseEncryptionConfigurationGetArgs> encryptionConfiguration;

    public Output<DatabaseEncryptionConfigurationGetArgs> encryptionConfiguration() {
        return this.encryptionConfiguration == null ? Codegen.empty() : this.encryptionConfiguration;
    }

    /**
     * A boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
     * 
     */
    @Import(name="forceDestroy")
      private final @Nullable Output<Boolean> forceDestroy;

    public Output<Boolean> forceDestroy() {
        return this.forceDestroy == null ? Codegen.empty() : this.forceDestroy;
    }

    /**
     * Name of the database to create.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    public DatabaseState(
        @Nullable Output<String> bucket,
        @Nullable Output<DatabaseEncryptionConfigurationGetArgs> encryptionConfiguration,
        @Nullable Output<Boolean> forceDestroy,
        @Nullable Output<String> name) {
        this.bucket = bucket;
        this.encryptionConfiguration = encryptionConfiguration;
        this.forceDestroy = forceDestroy;
        this.name = name;
    }

    private DatabaseState() {
        this.bucket = Codegen.empty();
        this.encryptionConfiguration = Codegen.empty();
        this.forceDestroy = Codegen.empty();
        this.name = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> bucket;
        private @Nullable Output<DatabaseEncryptionConfigurationGetArgs> encryptionConfiguration;
        private @Nullable Output<Boolean> forceDestroy;
        private @Nullable Output<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.encryptionConfiguration = defaults.encryptionConfiguration;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.name = defaults.name;
        }

        public Builder bucket(@Nullable Output<String> bucket) {
            this.bucket = bucket;
            return this;
        }
        public Builder bucket(@Nullable String bucket) {
            this.bucket = Codegen.ofNullable(bucket);
            return this;
        }
        public Builder encryptionConfiguration(@Nullable Output<DatabaseEncryptionConfigurationGetArgs> encryptionConfiguration) {
            this.encryptionConfiguration = encryptionConfiguration;
            return this;
        }
        public Builder encryptionConfiguration(@Nullable DatabaseEncryptionConfigurationGetArgs encryptionConfiguration) {
            this.encryptionConfiguration = Codegen.ofNullable(encryptionConfiguration);
            return this;
        }
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            this.forceDestroy = forceDestroy;
            return this;
        }
        public Builder forceDestroy(@Nullable Boolean forceDestroy) {
            this.forceDestroy = Codegen.ofNullable(forceDestroy);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }        public DatabaseState build() {
            return new DatabaseState(bucket, encryptionConfiguration, forceDestroy, name);
        }
    }
}
