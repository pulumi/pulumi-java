// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudtrail.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TrailAdvancedEventSelectorFieldSelectorGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final TrailAdvancedEventSelectorFieldSelectorGetArgs Empty = new TrailAdvancedEventSelectorFieldSelectorGetArgs();

    /**
     * A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
     * 
     */
    @Import(name="endsWiths")
      private final @Nullable Output<List<String>> endsWiths;

    public Output<List<String>> getEndsWiths() {
        return this.endsWiths == null ? Output.empty() : this.endsWiths;
    }

    /**
     * A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
     * 
     */
    @Import(name="equals")
      private final @Nullable Output<List<String>> equals;

    public Output<List<String>> getEquals() {
        return this.equals == null ? Output.empty() : this.equals;
    }

    /**
     * Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
     * 
     */
    @Import(name="field", required=true)
      private final Output<String> field;

    public Output<String> getField() {
        return this.field;
    }

    /**
     * A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
     * 
     */
    @Import(name="notEndsWiths")
      private final @Nullable Output<List<String>> notEndsWiths;

    public Output<List<String>> getNotEndsWiths() {
        return this.notEndsWiths == null ? Output.empty() : this.notEndsWiths;
    }

    /**
     * A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
     * 
     */
    @Import(name="notEquals")
      private final @Nullable Output<List<String>> notEquals;

    public Output<List<String>> getNotEquals() {
        return this.notEquals == null ? Output.empty() : this.notEquals;
    }

    /**
     * A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
     * 
     */
    @Import(name="notStartsWiths")
      private final @Nullable Output<List<String>> notStartsWiths;

    public Output<List<String>> getNotStartsWiths() {
        return this.notStartsWiths == null ? Output.empty() : this.notStartsWiths;
    }

    /**
     * A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
     * 
     */
    @Import(name="startsWiths")
      private final @Nullable Output<List<String>> startsWiths;

    public Output<List<String>> getStartsWiths() {
        return this.startsWiths == null ? Output.empty() : this.startsWiths;
    }

    public TrailAdvancedEventSelectorFieldSelectorGetArgs(
        @Nullable Output<List<String>> endsWiths,
        @Nullable Output<List<String>> equals,
        Output<String> field,
        @Nullable Output<List<String>> notEndsWiths,
        @Nullable Output<List<String>> notEquals,
        @Nullable Output<List<String>> notStartsWiths,
        @Nullable Output<List<String>> startsWiths) {
        this.endsWiths = endsWiths;
        this.equals = equals;
        this.field = Objects.requireNonNull(field, "expected parameter 'field' to be non-null");
        this.notEndsWiths = notEndsWiths;
        this.notEquals = notEquals;
        this.notStartsWiths = notStartsWiths;
        this.startsWiths = startsWiths;
    }

    private TrailAdvancedEventSelectorFieldSelectorGetArgs() {
        this.endsWiths = Output.empty();
        this.equals = Output.empty();
        this.field = Output.empty();
        this.notEndsWiths = Output.empty();
        this.notEquals = Output.empty();
        this.notStartsWiths = Output.empty();
        this.startsWiths = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrailAdvancedEventSelectorFieldSelectorGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> endsWiths;
        private @Nullable Output<List<String>> equals;
        private Output<String> field;
        private @Nullable Output<List<String>> notEndsWiths;
        private @Nullable Output<List<String>> notEquals;
        private @Nullable Output<List<String>> notStartsWiths;
        private @Nullable Output<List<String>> startsWiths;

        public Builder() {
    	      // Empty
        }

        public Builder(TrailAdvancedEventSelectorFieldSelectorGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endsWiths = defaults.endsWiths;
    	      this.equals = defaults.equals;
    	      this.field = defaults.field;
    	      this.notEndsWiths = defaults.notEndsWiths;
    	      this.notEquals = defaults.notEquals;
    	      this.notStartsWiths = defaults.notStartsWiths;
    	      this.startsWiths = defaults.startsWiths;
        }

        public Builder endsWiths(@Nullable Output<List<String>> endsWiths) {
            this.endsWiths = endsWiths;
            return this;
        }
        public Builder endsWiths(@Nullable List<String> endsWiths) {
            this.endsWiths = Output.ofNullable(endsWiths);
            return this;
        }
        public Builder endsWiths(String... endsWiths) {
            return endsWiths(List.of(endsWiths));
        }
        public Builder equals(@Nullable Output<List<String>> equals) {
            this.equals = equals;
            return this;
        }
        public Builder equals(@Nullable List<String> equals) {
            this.equals = Output.ofNullable(equals);
            return this;
        }
        public Builder equals(String... equals) {
            return equals(List.of(equals));
        }
        public Builder field(Output<String> field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }
        public Builder field(String field) {
            this.field = Output.of(Objects.requireNonNull(field));
            return this;
        }
        public Builder notEndsWiths(@Nullable Output<List<String>> notEndsWiths) {
            this.notEndsWiths = notEndsWiths;
            return this;
        }
        public Builder notEndsWiths(@Nullable List<String> notEndsWiths) {
            this.notEndsWiths = Output.ofNullable(notEndsWiths);
            return this;
        }
        public Builder notEndsWiths(String... notEndsWiths) {
            return notEndsWiths(List.of(notEndsWiths));
        }
        public Builder notEquals(@Nullable Output<List<String>> notEquals) {
            this.notEquals = notEquals;
            return this;
        }
        public Builder notEquals(@Nullable List<String> notEquals) {
            this.notEquals = Output.ofNullable(notEquals);
            return this;
        }
        public Builder notEquals(String... notEquals) {
            return notEquals(List.of(notEquals));
        }
        public Builder notStartsWiths(@Nullable Output<List<String>> notStartsWiths) {
            this.notStartsWiths = notStartsWiths;
            return this;
        }
        public Builder notStartsWiths(@Nullable List<String> notStartsWiths) {
            this.notStartsWiths = Output.ofNullable(notStartsWiths);
            return this;
        }
        public Builder notStartsWiths(String... notStartsWiths) {
            return notStartsWiths(List.of(notStartsWiths));
        }
        public Builder startsWiths(@Nullable Output<List<String>> startsWiths) {
            this.startsWiths = startsWiths;
            return this;
        }
        public Builder startsWiths(@Nullable List<String> startsWiths) {
            this.startsWiths = Output.ofNullable(startsWiths);
            return this;
        }
        public Builder startsWiths(String... startsWiths) {
            return startsWiths(List.of(startsWiths));
        }        public TrailAdvancedEventSelectorFieldSelectorGetArgs build() {
            return new TrailAdvancedEventSelectorFieldSelectorGetArgs(endsWiths, equals, field, notEndsWiths, notEquals, notStartsWiths, startsWiths);
        }
    }
}
