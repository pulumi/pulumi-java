// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lambda.outputs;

import io.pulumi.aws.lambda.outputs.GetFunctionDeadLetterConfig;
import io.pulumi.aws.lambda.outputs.GetFunctionEnvironment;
import io.pulumi.aws.lambda.outputs.GetFunctionFileSystemConfig;
import io.pulumi.aws.lambda.outputs.GetFunctionTracingConfig;
import io.pulumi.aws.lambda.outputs.GetFunctionVpcConfig;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetFunctionResult {
    /**
     * The instruction set architecture for the Lambda function.
     * 
     */
    private final List<String> architectures;
    /**
     * Unqualified (no `:QUALIFIER` or `:VERSION` suffix) Amazon Resource Name (ARN) identifying your Lambda Function. See also `qualified_arn`.
     * 
     */
    private final String arn;
    /**
     * Amazon Resource Name (ARN) for a Code Signing Configuration.
     * 
     */
    private final String codeSigningConfigArn;
    /**
     * Configure the function's *dead letter queue*.
     * 
     */
    private final GetFunctionDeadLetterConfig deadLetterConfig;
    /**
     * Description of what your Lambda Function does.
     * 
     */
    private final String description;
    /**
     * The Lambda environment's configuration settings.
     * 
     */
    private final GetFunctionEnvironment environment;
    /**
     * The connection settings for an Amazon EFS file system.
     * 
     */
    private final List<GetFunctionFileSystemConfig> fileSystemConfigs;
    private final String functionName;
    /**
     * The function entrypoint in your code.
     * 
     */
    private final String handler;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * The URI of the container image.
     * 
     */
    private final String imageUri;
    /**
     * The ARN to be used for invoking Lambda Function from API Gateway.
     * 
     */
    private final String invokeArn;
    /**
     * The ARN for the KMS encryption key.
     * 
     */
    private final String kmsKeyArn;
    /**
     * The date this resource was last modified.
     * 
     */
    private final String lastModified;
    /**
     * A list of Lambda Layer ARNs attached to your Lambda Function.
     * 
     */
    private final List<String> layers;
    /**
     * Amount of memory in MB your Lambda Function can use at runtime.
     * 
     */
    private final Integer memorySize;
    /**
     * Qualified (`:QUALIFIER` or `:VERSION` suffix) Amazon Resource Name (ARN) identifying your Lambda Function. See also `arn`.
     * 
     */
    private final String qualifiedArn;
    private final @Nullable String qualifier;
    /**
     * The amount of reserved concurrent executions for this lambda function or `-1` if unreserved.
     * 
     */
    private final Integer reservedConcurrentExecutions;
    /**
     * IAM role attached to the Lambda Function.
     * 
     */
    private final String role;
    /**
     * The runtime environment for the Lambda function.
     * 
     */
    private final String runtime;
    /**
     * The Amazon Resource Name (ARN) of a signing job.
     * 
     */
    private final String signingJobArn;
    /**
     * The Amazon Resource Name (ARN) for a signing profile version.
     * 
     */
    private final String signingProfileVersionArn;
    /**
     * Base64-encoded representation of raw SHA-256 sum of the zip file.
     * 
     */
    private final String sourceCodeHash;
    /**
     * The size in bytes of the function .zip file.
     * 
     */
    private final Integer sourceCodeSize;
    private final Map<String,String> tags;
    /**
     * The function execution time at which Lambda should terminate the function.
     * 
     */
    private final Integer timeout;
    /**
     * Tracing settings of the function.
     * 
     */
    private final GetFunctionTracingConfig tracingConfig;
    /**
     * The version of the Lambda function.
     * 
     */
    private final String version;
    /**
     * VPC configuration associated with your Lambda function.
     * 
     */
    private final GetFunctionVpcConfig vpcConfig;

    @OutputCustomType.Constructor
    private GetFunctionResult(
        @OutputCustomType.Parameter("architectures") List<String> architectures,
        @OutputCustomType.Parameter("arn") String arn,
        @OutputCustomType.Parameter("codeSigningConfigArn") String codeSigningConfigArn,
        @OutputCustomType.Parameter("deadLetterConfig") GetFunctionDeadLetterConfig deadLetterConfig,
        @OutputCustomType.Parameter("description") String description,
        @OutputCustomType.Parameter("environment") GetFunctionEnvironment environment,
        @OutputCustomType.Parameter("fileSystemConfigs") List<GetFunctionFileSystemConfig> fileSystemConfigs,
        @OutputCustomType.Parameter("functionName") String functionName,
        @OutputCustomType.Parameter("handler") String handler,
        @OutputCustomType.Parameter("id") String id,
        @OutputCustomType.Parameter("imageUri") String imageUri,
        @OutputCustomType.Parameter("invokeArn") String invokeArn,
        @OutputCustomType.Parameter("kmsKeyArn") String kmsKeyArn,
        @OutputCustomType.Parameter("lastModified") String lastModified,
        @OutputCustomType.Parameter("layers") List<String> layers,
        @OutputCustomType.Parameter("memorySize") Integer memorySize,
        @OutputCustomType.Parameter("qualifiedArn") String qualifiedArn,
        @OutputCustomType.Parameter("qualifier") @Nullable String qualifier,
        @OutputCustomType.Parameter("reservedConcurrentExecutions") Integer reservedConcurrentExecutions,
        @OutputCustomType.Parameter("role") String role,
        @OutputCustomType.Parameter("runtime") String runtime,
        @OutputCustomType.Parameter("signingJobArn") String signingJobArn,
        @OutputCustomType.Parameter("signingProfileVersionArn") String signingProfileVersionArn,
        @OutputCustomType.Parameter("sourceCodeHash") String sourceCodeHash,
        @OutputCustomType.Parameter("sourceCodeSize") Integer sourceCodeSize,
        @OutputCustomType.Parameter("tags") Map<String,String> tags,
        @OutputCustomType.Parameter("timeout") Integer timeout,
        @OutputCustomType.Parameter("tracingConfig") GetFunctionTracingConfig tracingConfig,
        @OutputCustomType.Parameter("version") String version,
        @OutputCustomType.Parameter("vpcConfig") GetFunctionVpcConfig vpcConfig) {
        this.architectures = architectures;
        this.arn = arn;
        this.codeSigningConfigArn = codeSigningConfigArn;
        this.deadLetterConfig = deadLetterConfig;
        this.description = description;
        this.environment = environment;
        this.fileSystemConfigs = fileSystemConfigs;
        this.functionName = functionName;
        this.handler = handler;
        this.id = id;
        this.imageUri = imageUri;
        this.invokeArn = invokeArn;
        this.kmsKeyArn = kmsKeyArn;
        this.lastModified = lastModified;
        this.layers = layers;
        this.memorySize = memorySize;
        this.qualifiedArn = qualifiedArn;
        this.qualifier = qualifier;
        this.reservedConcurrentExecutions = reservedConcurrentExecutions;
        this.role = role;
        this.runtime = runtime;
        this.signingJobArn = signingJobArn;
        this.signingProfileVersionArn = signingProfileVersionArn;
        this.sourceCodeHash = sourceCodeHash;
        this.sourceCodeSize = sourceCodeSize;
        this.tags = tags;
        this.timeout = timeout;
        this.tracingConfig = tracingConfig;
        this.version = version;
        this.vpcConfig = vpcConfig;
    }

    /**
     * The instruction set architecture for the Lambda function.
     * 
    */
    public List<String> getArchitectures() {
        return this.architectures;
    }
    /**
     * Unqualified (no `:QUALIFIER` or `:VERSION` suffix) Amazon Resource Name (ARN) identifying your Lambda Function. See also `qualified_arn`.
     * 
    */
    public String getArn() {
        return this.arn;
    }
    /**
     * Amazon Resource Name (ARN) for a Code Signing Configuration.
     * 
    */
    public String getCodeSigningConfigArn() {
        return this.codeSigningConfigArn;
    }
    /**
     * Configure the function's *dead letter queue*.
     * 
    */
    public GetFunctionDeadLetterConfig getDeadLetterConfig() {
        return this.deadLetterConfig;
    }
    /**
     * Description of what your Lambda Function does.
     * 
    */
    public String getDescription() {
        return this.description;
    }
    /**
     * The Lambda environment's configuration settings.
     * 
    */
    public GetFunctionEnvironment getEnvironment() {
        return this.environment;
    }
    /**
     * The connection settings for an Amazon EFS file system.
     * 
    */
    public List<GetFunctionFileSystemConfig> getFileSystemConfigs() {
        return this.fileSystemConfigs;
    }
    public String getFunctionName() {
        return this.functionName;
    }
    /**
     * The function entrypoint in your code.
     * 
    */
    public String getHandler() {
        return this.handler;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * The URI of the container image.
     * 
    */
    public String getImageUri() {
        return this.imageUri;
    }
    /**
     * The ARN to be used for invoking Lambda Function from API Gateway.
     * 
    */
    public String getInvokeArn() {
        return this.invokeArn;
    }
    /**
     * The ARN for the KMS encryption key.
     * 
    */
    public String getKmsKeyArn() {
        return this.kmsKeyArn;
    }
    /**
     * The date this resource was last modified.
     * 
    */
    public String getLastModified() {
        return this.lastModified;
    }
    /**
     * A list of Lambda Layer ARNs attached to your Lambda Function.
     * 
    */
    public List<String> getLayers() {
        return this.layers;
    }
    /**
     * Amount of memory in MB your Lambda Function can use at runtime.
     * 
    */
    public Integer getMemorySize() {
        return this.memorySize;
    }
    /**
     * Qualified (`:QUALIFIER` or `:VERSION` suffix) Amazon Resource Name (ARN) identifying your Lambda Function. See also `arn`.
     * 
    */
    public String getQualifiedArn() {
        return this.qualifiedArn;
    }
    public Optional<String> getQualifier() {
        return Optional.ofNullable(this.qualifier);
    }
    /**
     * The amount of reserved concurrent executions for this lambda function or `-1` if unreserved.
     * 
    */
    public Integer getReservedConcurrentExecutions() {
        return this.reservedConcurrentExecutions;
    }
    /**
     * IAM role attached to the Lambda Function.
     * 
    */
    public String getRole() {
        return this.role;
    }
    /**
     * The runtime environment for the Lambda function.
     * 
    */
    public String getRuntime() {
        return this.runtime;
    }
    /**
     * The Amazon Resource Name (ARN) of a signing job.
     * 
    */
    public String getSigningJobArn() {
        return this.signingJobArn;
    }
    /**
     * The Amazon Resource Name (ARN) for a signing profile version.
     * 
    */
    public String getSigningProfileVersionArn() {
        return this.signingProfileVersionArn;
    }
    /**
     * Base64-encoded representation of raw SHA-256 sum of the zip file.
     * 
    */
    public String getSourceCodeHash() {
        return this.sourceCodeHash;
    }
    /**
     * The size in bytes of the function .zip file.
     * 
    */
    public Integer getSourceCodeSize() {
        return this.sourceCodeSize;
    }
    public Map<String,String> getTags() {
        return this.tags;
    }
    /**
     * The function execution time at which Lambda should terminate the function.
     * 
    */
    public Integer getTimeout() {
        return this.timeout;
    }
    /**
     * Tracing settings of the function.
     * 
    */
    public GetFunctionTracingConfig getTracingConfig() {
        return this.tracingConfig;
    }
    /**
     * The version of the Lambda function.
     * 
    */
    public String getVersion() {
        return this.version;
    }
    /**
     * VPC configuration associated with your Lambda function.
     * 
    */
    public GetFunctionVpcConfig getVpcConfig() {
        return this.vpcConfig;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> architectures;
        private String arn;
        private String codeSigningConfigArn;
        private GetFunctionDeadLetterConfig deadLetterConfig;
        private String description;
        private GetFunctionEnvironment environment;
        private List<GetFunctionFileSystemConfig> fileSystemConfigs;
        private String functionName;
        private String handler;
        private String id;
        private String imageUri;
        private String invokeArn;
        private String kmsKeyArn;
        private String lastModified;
        private List<String> layers;
        private Integer memorySize;
        private String qualifiedArn;
        private @Nullable String qualifier;
        private Integer reservedConcurrentExecutions;
        private String role;
        private String runtime;
        private String signingJobArn;
        private String signingProfileVersionArn;
        private String sourceCodeHash;
        private Integer sourceCodeSize;
        private Map<String,String> tags;
        private Integer timeout;
        private GetFunctionTracingConfig tracingConfig;
        private String version;
        private GetFunctionVpcConfig vpcConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFunctionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architectures = defaults.architectures;
    	      this.arn = defaults.arn;
    	      this.codeSigningConfigArn = defaults.codeSigningConfigArn;
    	      this.deadLetterConfig = defaults.deadLetterConfig;
    	      this.description = defaults.description;
    	      this.environment = defaults.environment;
    	      this.fileSystemConfigs = defaults.fileSystemConfigs;
    	      this.functionName = defaults.functionName;
    	      this.handler = defaults.handler;
    	      this.id = defaults.id;
    	      this.imageUri = defaults.imageUri;
    	      this.invokeArn = defaults.invokeArn;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.lastModified = defaults.lastModified;
    	      this.layers = defaults.layers;
    	      this.memorySize = defaults.memorySize;
    	      this.qualifiedArn = defaults.qualifiedArn;
    	      this.qualifier = defaults.qualifier;
    	      this.reservedConcurrentExecutions = defaults.reservedConcurrentExecutions;
    	      this.role = defaults.role;
    	      this.runtime = defaults.runtime;
    	      this.signingJobArn = defaults.signingJobArn;
    	      this.signingProfileVersionArn = defaults.signingProfileVersionArn;
    	      this.sourceCodeHash = defaults.sourceCodeHash;
    	      this.sourceCodeSize = defaults.sourceCodeSize;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
    	      this.tracingConfig = defaults.tracingConfig;
    	      this.version = defaults.version;
    	      this.vpcConfig = defaults.vpcConfig;
        }

        public Builder architectures(List<String> architectures) {
            this.architectures = Objects.requireNonNull(architectures);
            return this;
        }

        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }

        public Builder codeSigningConfigArn(String codeSigningConfigArn) {
            this.codeSigningConfigArn = Objects.requireNonNull(codeSigningConfigArn);
            return this;
        }

        public Builder deadLetterConfig(GetFunctionDeadLetterConfig deadLetterConfig) {
            this.deadLetterConfig = Objects.requireNonNull(deadLetterConfig);
            return this;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder environment(GetFunctionEnvironment environment) {
            this.environment = Objects.requireNonNull(environment);
            return this;
        }

        public Builder fileSystemConfigs(List<GetFunctionFileSystemConfig> fileSystemConfigs) {
            this.fileSystemConfigs = Objects.requireNonNull(fileSystemConfigs);
            return this;
        }

        public Builder functionName(String functionName) {
            this.functionName = Objects.requireNonNull(functionName);
            return this;
        }

        public Builder handler(String handler) {
            this.handler = Objects.requireNonNull(handler);
            return this;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder imageUri(String imageUri) {
            this.imageUri = Objects.requireNonNull(imageUri);
            return this;
        }

        public Builder invokeArn(String invokeArn) {
            this.invokeArn = Objects.requireNonNull(invokeArn);
            return this;
        }

        public Builder kmsKeyArn(String kmsKeyArn) {
            this.kmsKeyArn = Objects.requireNonNull(kmsKeyArn);
            return this;
        }

        public Builder lastModified(String lastModified) {
            this.lastModified = Objects.requireNonNull(lastModified);
            return this;
        }

        public Builder layers(List<String> layers) {
            this.layers = Objects.requireNonNull(layers);
            return this;
        }

        public Builder memorySize(Integer memorySize) {
            this.memorySize = Objects.requireNonNull(memorySize);
            return this;
        }

        public Builder qualifiedArn(String qualifiedArn) {
            this.qualifiedArn = Objects.requireNonNull(qualifiedArn);
            return this;
        }

        public Builder qualifier(@Nullable String qualifier) {
            this.qualifier = qualifier;
            return this;
        }

        public Builder reservedConcurrentExecutions(Integer reservedConcurrentExecutions) {
            this.reservedConcurrentExecutions = Objects.requireNonNull(reservedConcurrentExecutions);
            return this;
        }

        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }

        public Builder runtime(String runtime) {
            this.runtime = Objects.requireNonNull(runtime);
            return this;
        }

        public Builder signingJobArn(String signingJobArn) {
            this.signingJobArn = Objects.requireNonNull(signingJobArn);
            return this;
        }

        public Builder signingProfileVersionArn(String signingProfileVersionArn) {
            this.signingProfileVersionArn = Objects.requireNonNull(signingProfileVersionArn);
            return this;
        }

        public Builder sourceCodeHash(String sourceCodeHash) {
            this.sourceCodeHash = Objects.requireNonNull(sourceCodeHash);
            return this;
        }

        public Builder sourceCodeSize(Integer sourceCodeSize) {
            this.sourceCodeSize = Objects.requireNonNull(sourceCodeSize);
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder timeout(Integer timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public Builder tracingConfig(GetFunctionTracingConfig tracingConfig) {
            this.tracingConfig = Objects.requireNonNull(tracingConfig);
            return this;
        }

        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public Builder vpcConfig(GetFunctionVpcConfig vpcConfig) {
            this.vpcConfig = Objects.requireNonNull(vpcConfig);
            return this;
        }
        public GetFunctionResult build() {
            return new GetFunctionResult(architectures, arn, codeSigningConfigArn, deadLetterConfig, description, environment, fileSystemConfigs, functionName, handler, id, imageUri, invokeArn, kmsKeyArn, lastModified, layers, memorySize, qualifiedArn, qualifier, reservedConcurrentExecutions, role, runtime, signingJobArn, signingProfileVersionArn, sourceCodeHash, sourceCodeSize, tags, timeout, tracingConfig, version, vpcConfig);
        }
    }
}
