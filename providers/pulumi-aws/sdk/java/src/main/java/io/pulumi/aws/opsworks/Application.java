// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.opsworks;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.opsworks.ApplicationArgs;
import io.pulumi.aws.opsworks.inputs.ApplicationState;
import io.pulumi.aws.opsworks.outputs.ApplicationAppSource;
import io.pulumi.aws.opsworks.outputs.ApplicationEnvironment;
import io.pulumi.aws.opsworks.outputs.ApplicationSslConfiguration;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Provides an OpsWorks application resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * from "fs";
 * 
 * const foo_app = new aws.opsworks.Application("foo-app", {
 *     shortName: "foobar",
 *     stackId: aws_opsworks_stack.main.id,
 *     type: "rails",
 *     description: "This is a Rails application",
 *     domains: [
 *         "example.com",
 *         "sub.example.com",
 *     ],
 *     environments: [{
 *         key: "key",
 *         value: "value",
 *         secure: false,
 *     }],
 *     appSources: [{
 *         type: "git",
 *         revision: "master",
 *         url: "https://github.com/example.git",
 *     }],
 *     enableSsl: true,
 *     sslConfigurations: [{
 *         privateKey: fs.readFileSync("./foobar.key"),
 *         certificate: fs.readFileSync("./foobar.crt"),
 *     }],
 *     documentRoot: "public",
 *     autoBundleOnDeploy: true,
 *     railsEnv: "staging",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * foo_app = aws.opsworks.Application("foo-app",
 *     short_name="foobar",
 *     stack_id=aws_opsworks_stack["main"]["id"],
 *     type="rails",
 *     description="This is a Rails application",
 *     domains=[
 *         "example.com",
 *         "sub.example.com",
 *     ],
 *     environments=[aws.opsworks.ApplicationEnvironmentArgs(
 *         key="key",
 *         value="value",
 *         secure=False,
 *     )],
 *     app_sources=[aws.opsworks.ApplicationAppSourceArgs(
 *         type="git",
 *         revision="master",
 *         url="https://github.com/example.git",
 *     )],
 *     enable_ssl=True,
 *     ssl_configurations=[aws.opsworks.ApplicationSslConfigurationArgs(
 *         private_key=(lambda path: open(path).read())("./foobar.key"),
 *         certificate=(lambda path: open(path).read())("./foobar.crt"),
 *     )],
 *     document_root="public",
 *     auto_bundle_on_deploy="true",
 *     rails_env="staging")
 * ```
 * ```csharp
 * using System.IO;
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var foo_app = new Aws.OpsWorks.Application("foo-app", new Aws.OpsWorks.ApplicationArgs
 *         {
 *             ShortName = "foobar",
 *             StackId = aws_opsworks_stack.Main.Id,
 *             Type = "rails",
 *             Description = "This is a Rails application",
 *             Domains = 
 *             {
 *                 "example.com",
 *                 "sub.example.com",
 *             },
 *             Environments = 
 *             {
 *                 new Aws.OpsWorks.Inputs.ApplicationEnvironmentArgs
 *                 {
 *                     Key = "key",
 *                     Value = "value",
 *                     Secure = false,
 *                 },
 *             },
 *             AppSources = 
 *             {
 *                 new Aws.OpsWorks.Inputs.ApplicationAppSourceArgs
 *                 {
 *                     Type = "git",
 *                     Revision = "master",
 *                     Url = "https://github.com/example.git",
 *                 },
 *             },
 *             EnableSsl = true,
 *             SslConfigurations = 
 *             {
 *                 new Aws.OpsWorks.Inputs.ApplicationSslConfigurationArgs
 *                 {
 *                     PrivateKey = File.ReadAllText("./foobar.key"),
 *                     Certificate = File.ReadAllText("./foobar.crt"),
 *                 },
 *             },
 *             DocumentRoot = "public",
 *             AutoBundleOnDeploy = "true",
 *             RailsEnv = "staging",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/opsworks"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func readFileOrPanic(path string) pulumi.StringPtrInput {
 * 	data, err := ioutil.ReadFile(path)
 * 	if err != nil {
 * 		panic(err.Error())
 * 	}
 * 	return pulumi.String(string(data))
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := opsworks.NewApplication(ctx, "foo-app", &opsworks.ApplicationArgs{
 * 			ShortName:   pulumi.String("foobar"),
 * 			StackId:     pulumi.Any(aws_opsworks_stack.Main.Id),
 * 			Type:        pulumi.String("rails"),
 * 			Description: pulumi.String("This is a Rails application"),
 * 			Domains: pulumi.StringArray{
 * 				pulumi.String("example.com"),
 * 				pulumi.String("sub.example.com"),
 * 			},
 * 			Environments: opsworks.ApplicationEnvironmentArray{
 * 				&opsworks.ApplicationEnvironmentArgs{
 * 					Key:    pulumi.String("key"),
 * 					Value:  pulumi.String("value"),
 * 					Secure: pulumi.Bool(false),
 * 				},
 * 			},
 * 			AppSources: opsworks.ApplicationAppSourceArray{
 * 				&opsworks.ApplicationAppSourceArgs{
 * 					Type:     pulumi.String("git"),
 * 					Revision: pulumi.String("master"),
 * 					Url:      pulumi.String("https://github.com/example.git"),
 * 				},
 * 			},
 * 			EnableSsl: pulumi.Bool(true),
 * 			SslConfigurations: opsworks.ApplicationSslConfigurationArray{
 * 				&opsworks.ApplicationSslConfigurationArgs{
 * 					PrivateKey:  readFileOrPanic("./foobar.key"),
 * 					Certificate: readFileOrPanic("./foobar.crt"),
 * 				},
 * 			},
 * 			DocumentRoot:       pulumi.String("public"),
 * 			AutoBundleOnDeploy: pulumi.String("true"),
 * 			RailsEnv:           pulumi.String("staging"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Opsworks Application can be imported using the `id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:opsworks/application:Application test <id>
 * ```
 * 
 *  
 */
@ResourceType(type="aws:opsworks/application:Application")
public class Application extends io.pulumi.resources.CustomResource {
    /**
     * SCM configuration of the app as described below.
     * 
     */
    @Export(name="appSources", type=List.class, parameters={ApplicationAppSource.class})
    private Output<List<ApplicationAppSource>> appSources;

    /**
     * @return SCM configuration of the app as described below.
     * 
     */
    public Output<List<ApplicationAppSource>> getAppSources() {
        return this.appSources;
    }
    /**
     * Run bundle install when deploying for application of type `rails`.
     * 
     */
    @Export(name="autoBundleOnDeploy", type=String.class, parameters={})
    private Output</* @Nullable */ String> autoBundleOnDeploy;

    /**
     * @return Run bundle install when deploying for application of type `rails`.
     * 
     */
    public Output</* @Nullable */ String> getAutoBundleOnDeploy() {
        return this.autoBundleOnDeploy;
    }
    /**
     * Specify activity and workflow workers for your app using the aws-flow gem.
     * 
     */
    @Export(name="awsFlowRubySettings", type=String.class, parameters={})
    private Output</* @Nullable */ String> awsFlowRubySettings;

    /**
     * @return Specify activity and workflow workers for your app using the aws-flow gem.
     * 
     */
    public Output</* @Nullable */ String> getAwsFlowRubySettings() {
        return this.awsFlowRubySettings;
    }
    /**
     * The data source's ARN.
     * 
     */
    @Export(name="dataSourceArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> dataSourceArn;

    /**
     * @return The data source's ARN.
     * 
     */
    public Output</* @Nullable */ String> getDataSourceArn() {
        return this.dataSourceArn;
    }
    /**
     * The database name.
     * 
     */
    @Export(name="dataSourceDatabaseName", type=String.class, parameters={})
    private Output</* @Nullable */ String> dataSourceDatabaseName;

    /**
     * @return The database name.
     * 
     */
    public Output</* @Nullable */ String> getDataSourceDatabaseName() {
        return this.dataSourceDatabaseName;
    }
    /**
     * The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
     * 
     */
    @Export(name="dataSourceType", type=String.class, parameters={})
    private Output</* @Nullable */ String> dataSourceType;

    /**
     * @return The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
     * 
     */
    public Output</* @Nullable */ String> getDataSourceType() {
        return this.dataSourceType;
    }
    /**
     * A description of the app.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A description of the app.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Subfolder for the document root for application of type `rails`.
     * 
     */
    @Export(name="documentRoot", type=String.class, parameters={})
    private Output</* @Nullable */ String> documentRoot;

    /**
     * @return Subfolder for the document root for application of type `rails`.
     * 
     */
    public Output</* @Nullable */ String> getDocumentRoot() {
        return this.documentRoot;
    }
    /**
     * A list of virtual host alias.
     * 
     */
    @Export(name="domains", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> domains;

    /**
     * @return A list of virtual host alias.
     * 
     */
    public Output</* @Nullable */ List<String>> getDomains() {
        return this.domains;
    }
    /**
     * Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
     * 
     */
    @Export(name="enableSsl", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableSsl;

    /**
     * @return Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnableSsl() {
        return this.enableSsl;
    }
    /**
     * Object to define environment variables.  Object is described below.
     * 
     */
    @Export(name="environments", type=List.class, parameters={ApplicationEnvironment.class})
    private Output</* @Nullable */ List<ApplicationEnvironment>> environments;

    /**
     * @return Object to define environment variables.  Object is described below.
     * 
     */
    public Output</* @Nullable */ List<ApplicationEnvironment>> getEnvironments() {
        return this.environments;
    }
    /**
     * A human-readable name for the application.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return A human-readable name for the application.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The name of the Rails environment for application of type `rails`.
     * 
     */
    @Export(name="railsEnv", type=String.class, parameters={})
    private Output</* @Nullable */ String> railsEnv;

    /**
     * @return The name of the Rails environment for application of type `rails`.
     * 
     */
    public Output</* @Nullable */ String> getRailsEnv() {
        return this.railsEnv;
    }
    /**
     * A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
     * 
     */
    @Export(name="shortName", type=String.class, parameters={})
    private Output<String> shortName;

    /**
     * @return A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
     * 
     */
    public Output<String> getShortName() {
        return this.shortName;
    }
    /**
     * The SSL configuration of the app. Object is described below.
     * 
     */
    @Export(name="sslConfigurations", type=List.class, parameters={ApplicationSslConfiguration.class})
    private Output</* @Nullable */ List<ApplicationSslConfiguration>> sslConfigurations;

    /**
     * @return The SSL configuration of the app. Object is described below.
     * 
     */
    public Output</* @Nullable */ List<ApplicationSslConfiguration>> getSslConfigurations() {
        return this.sslConfigurations;
    }
    /**
     * The id of the stack the application will belong to.
     * 
     */
    @Export(name="stackId", type=String.class, parameters={})
    private Output<String> stackId;

    /**
     * @return The id of the stack the application will belong to.
     * 
     */
    public Output<String> getStackId() {
        return this.stackId;
    }
    /**
     * Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Application(String name) {
        this(name, ApplicationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Application(String name, ApplicationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Application(String name, ApplicationArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:opsworks/application:Application", name, args == null ? ApplicationArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Application(String name, Output<String> id, @Nullable ApplicationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:opsworks/application:Application", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Application get(String name, Output<String> id, @Nullable ApplicationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Application(name, id, state, options);
    }
}
