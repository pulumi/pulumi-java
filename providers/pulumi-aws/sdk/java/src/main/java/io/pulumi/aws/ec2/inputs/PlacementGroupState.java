// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.enums.PlacementStrategy;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PlacementGroupState extends io.pulumi.resources.ResourceArgs {

    public static final PlacementGroupState Empty = new PlacementGroupState();

    /**
     * Amazon Resource Name (ARN) of the placement group.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The name of the placement group.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The number of partitions to create in the
     * placement group.  Can only be specified when the `strategy` is set to
     * `"partition"`.  Valid values are 1 - 7 (default is `2`).
     * 
     */
    @Import(name="partitionCount")
      private final @Nullable Output<Integer> partitionCount;

    public Output<Integer> getPartitionCount() {
        return this.partitionCount == null ? Codegen.empty() : this.partitionCount;
    }

    /**
     * The ID of the placement group.
     * 
     */
    @Import(name="placementGroupId")
      private final @Nullable Output<String> placementGroupId;

    public Output<String> getPlacementGroupId() {
        return this.placementGroupId == null ? Codegen.empty() : this.placementGroupId;
    }

    /**
     * The placement strategy. Can be `"cluster"`, `"partition"` or `"spread"`.
     * 
     */
    @Import(name="strategy")
      private final @Nullable Output<Either<String,PlacementStrategy>> strategy;

    public Output<Either<String,PlacementStrategy>> getStrategy() {
        return this.strategy == null ? Codegen.empty() : this.strategy;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    public PlacementGroupState(
        @Nullable Output<String> arn,
        @Nullable Output<String> name,
        @Nullable Output<Integer> partitionCount,
        @Nullable Output<String> placementGroupId,
        @Nullable Output<Either<String,PlacementStrategy>> strategy,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.name = name;
        this.partitionCount = partitionCount;
        this.placementGroupId = placementGroupId;
        this.strategy = strategy;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private PlacementGroupState() {
        this.arn = Codegen.empty();
        this.name = Codegen.empty();
        this.partitionCount = Codegen.empty();
        this.placementGroupId = Codegen.empty();
        this.strategy = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PlacementGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> partitionCount;
        private @Nullable Output<String> placementGroupId;
        private @Nullable Output<Either<String,PlacementStrategy>> strategy;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(PlacementGroupState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.name = defaults.name;
    	      this.partitionCount = defaults.partitionCount;
    	      this.placementGroupId = defaults.placementGroupId;
    	      this.strategy = defaults.strategy;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder partitionCount(@Nullable Output<Integer> partitionCount) {
            this.partitionCount = partitionCount;
            return this;
        }
        public Builder partitionCount(@Nullable Integer partitionCount) {
            this.partitionCount = Codegen.ofNullable(partitionCount);
            return this;
        }
        public Builder placementGroupId(@Nullable Output<String> placementGroupId) {
            this.placementGroupId = placementGroupId;
            return this;
        }
        public Builder placementGroupId(@Nullable String placementGroupId) {
            this.placementGroupId = Codegen.ofNullable(placementGroupId);
            return this;
        }
        public Builder strategy(@Nullable Output<Either<String,PlacementStrategy>> strategy) {
            this.strategy = strategy;
            return this;
        }
        public Builder strategy(@Nullable Either<String,PlacementStrategy> strategy) {
            this.strategy = Codegen.ofNullable(strategy);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }        public PlacementGroupState build() {
            return new PlacementGroupState(arn, name, partitionCount, placementGroupId, strategy, tags, tagsAll);
        }
    }
}
