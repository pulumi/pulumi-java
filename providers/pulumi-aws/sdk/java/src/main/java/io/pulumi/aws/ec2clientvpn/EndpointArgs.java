// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2clientvpn;

import io.pulumi.aws.ec2clientvpn.inputs.EndpointAuthenticationOptionArgs;
import io.pulumi.aws.ec2clientvpn.inputs.EndpointConnectionLogOptionsArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * Information about the authentication method to be used to authenticate clients.
     * 
     */
    @InputImport(name="authenticationOptions", required=true)
      private final Input<List<EndpointAuthenticationOptionArgs>> authenticationOptions;

    public Input<List<EndpointAuthenticationOptionArgs>> getAuthenticationOptions() {
        return this.authenticationOptions;
    }

    /**
     * The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
     * 
     */
    @InputImport(name="clientCidrBlock", required=true)
      private final Input<String> clientCidrBlock;

    public Input<String> getClientCidrBlock() {
        return this.clientCidrBlock;
    }

    /**
     * Information about the client connection logging options.
     * 
     */
    @InputImport(name="connectionLogOptions", required=true)
      private final Input<EndpointConnectionLogOptionsArgs> connectionLogOptions;

    public Input<EndpointConnectionLogOptionsArgs> getConnectionLogOptions() {
        return this.connectionLogOptions;
    }

    /**
     * A brief description of the Client VPN endpoint.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
     * 
     */
    @InputImport(name="dnsServers")
      private final @Nullable Input<List<String>> dnsServers;

    public Input<List<String>> getDnsServers() {
        return this.dnsServers == null ? Input.empty() : this.dnsServers;
    }

    /**
     * Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
     * 
     */
    @InputImport(name="selfServicePortal")
      private final @Nullable Input<String> selfServicePortal;

    public Input<String> getSelfServicePortal() {
        return this.selfServicePortal == null ? Input.empty() : this.selfServicePortal;
    }

    /**
     * The ARN of the ACM server certificate.
     * 
     */
    @InputImport(name="serverCertificateArn", required=true)
      private final Input<String> serverCertificateArn;

    public Input<String> getServerCertificateArn() {
        return this.serverCertificateArn;
    }

    /**
     * Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
     * 
     */
    @InputImport(name="splitTunnel")
      private final @Nullable Input<Boolean> splitTunnel;

    public Input<Boolean> getSplitTunnel() {
        return this.splitTunnel == null ? Input.empty() : this.splitTunnel;
    }

    /**
     * A mapping of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The transport protocol to be used by the VPN session. Default value is `udp`.
     * 
     */
    @InputImport(name="transportProtocol")
      private final @Nullable Input<String> transportProtocol;

    public Input<String> getTransportProtocol() {
        return this.transportProtocol == null ? Input.empty() : this.transportProtocol;
    }

    public EndpointArgs(
        Input<List<EndpointAuthenticationOptionArgs>> authenticationOptions,
        Input<String> clientCidrBlock,
        Input<EndpointConnectionLogOptionsArgs> connectionLogOptions,
        @Nullable Input<String> description,
        @Nullable Input<List<String>> dnsServers,
        @Nullable Input<String> selfServicePortal,
        Input<String> serverCertificateArn,
        @Nullable Input<Boolean> splitTunnel,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> transportProtocol) {
        this.authenticationOptions = Objects.requireNonNull(authenticationOptions, "expected parameter 'authenticationOptions' to be non-null");
        this.clientCidrBlock = Objects.requireNonNull(clientCidrBlock, "expected parameter 'clientCidrBlock' to be non-null");
        this.connectionLogOptions = Objects.requireNonNull(connectionLogOptions, "expected parameter 'connectionLogOptions' to be non-null");
        this.description = description;
        this.dnsServers = dnsServers;
        this.selfServicePortal = selfServicePortal;
        this.serverCertificateArn = Objects.requireNonNull(serverCertificateArn, "expected parameter 'serverCertificateArn' to be non-null");
        this.splitTunnel = splitTunnel;
        this.tags = tags;
        this.transportProtocol = transportProtocol;
    }

    private EndpointArgs() {
        this.authenticationOptions = Input.empty();
        this.clientCidrBlock = Input.empty();
        this.connectionLogOptions = Input.empty();
        this.description = Input.empty();
        this.dnsServers = Input.empty();
        this.selfServicePortal = Input.empty();
        this.serverCertificateArn = Input.empty();
        this.splitTunnel = Input.empty();
        this.tags = Input.empty();
        this.transportProtocol = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<EndpointAuthenticationOptionArgs>> authenticationOptions;
        private Input<String> clientCidrBlock;
        private Input<EndpointConnectionLogOptionsArgs> connectionLogOptions;
        private @Nullable Input<String> description;
        private @Nullable Input<List<String>> dnsServers;
        private @Nullable Input<String> selfServicePortal;
        private Input<String> serverCertificateArn;
        private @Nullable Input<Boolean> splitTunnel;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> transportProtocol;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationOptions = defaults.authenticationOptions;
    	      this.clientCidrBlock = defaults.clientCidrBlock;
    	      this.connectionLogOptions = defaults.connectionLogOptions;
    	      this.description = defaults.description;
    	      this.dnsServers = defaults.dnsServers;
    	      this.selfServicePortal = defaults.selfServicePortal;
    	      this.serverCertificateArn = defaults.serverCertificateArn;
    	      this.splitTunnel = defaults.splitTunnel;
    	      this.tags = defaults.tags;
    	      this.transportProtocol = defaults.transportProtocol;
        }

        public Builder setAuthenticationOptions(Input<List<EndpointAuthenticationOptionArgs>> authenticationOptions) {
            this.authenticationOptions = Objects.requireNonNull(authenticationOptions);
            return this;
        }

        public Builder setAuthenticationOptions(List<EndpointAuthenticationOptionArgs> authenticationOptions) {
            this.authenticationOptions = Input.of(Objects.requireNonNull(authenticationOptions));
            return this;
        }

        public Builder setClientCidrBlock(Input<String> clientCidrBlock) {
            this.clientCidrBlock = Objects.requireNonNull(clientCidrBlock);
            return this;
        }

        public Builder setClientCidrBlock(String clientCidrBlock) {
            this.clientCidrBlock = Input.of(Objects.requireNonNull(clientCidrBlock));
            return this;
        }

        public Builder setConnectionLogOptions(Input<EndpointConnectionLogOptionsArgs> connectionLogOptions) {
            this.connectionLogOptions = Objects.requireNonNull(connectionLogOptions);
            return this;
        }

        public Builder setConnectionLogOptions(EndpointConnectionLogOptionsArgs connectionLogOptions) {
            this.connectionLogOptions = Input.of(Objects.requireNonNull(connectionLogOptions));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDnsServers(@Nullable Input<List<String>> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }

        public Builder setDnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = Input.ofNullable(dnsServers);
            return this;
        }

        public Builder setSelfServicePortal(@Nullable Input<String> selfServicePortal) {
            this.selfServicePortal = selfServicePortal;
            return this;
        }

        public Builder setSelfServicePortal(@Nullable String selfServicePortal) {
            this.selfServicePortal = Input.ofNullable(selfServicePortal);
            return this;
        }

        public Builder setServerCertificateArn(Input<String> serverCertificateArn) {
            this.serverCertificateArn = Objects.requireNonNull(serverCertificateArn);
            return this;
        }

        public Builder setServerCertificateArn(String serverCertificateArn) {
            this.serverCertificateArn = Input.of(Objects.requireNonNull(serverCertificateArn));
            return this;
        }

        public Builder setSplitTunnel(@Nullable Input<Boolean> splitTunnel) {
            this.splitTunnel = splitTunnel;
            return this;
        }

        public Builder setSplitTunnel(@Nullable Boolean splitTunnel) {
            this.splitTunnel = Input.ofNullable(splitTunnel);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTransportProtocol(@Nullable Input<String> transportProtocol) {
            this.transportProtocol = transportProtocol;
            return this;
        }

        public Builder setTransportProtocol(@Nullable String transportProtocol) {
            this.transportProtocol = Input.ofNullable(transportProtocol);
            return this;
        }
        public EndpointArgs build() {
            return new EndpointArgs(authenticationOptions, clientCidrBlock, connectionLogOptions, description, dnsServers, selfServicePortal, serverCertificateArn, splitTunnel, tags, transportProtocol);
        }
    }
}
