// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesisanalyticsv2.inputs;

import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs;
import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs;
import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs Empty = new ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs();

    /**
     * Describes an application's checkpointing configuration.
     * 
     */
    @InputImport(name="checkpointConfiguration")
    private final @Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs> checkpointConfiguration;

    public Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs> getCheckpointConfiguration() {
        return this.checkpointConfiguration == null ? Input.empty() : this.checkpointConfiguration;
    }

    /**
     * Describes configuration parameters for CloudWatch logging for an application.
     * 
     */
    @InputImport(name="monitoringConfiguration")
    private final @Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs> monitoringConfiguration;

    public Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs> getMonitoringConfiguration() {
        return this.monitoringConfiguration == null ? Input.empty() : this.monitoringConfiguration;
    }

    /**
     * Describes parameters for how an application executes multiple tasks simultaneously.
     * 
     */
    @InputImport(name="parallelismConfiguration")
    private final @Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs> parallelismConfiguration;

    public Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs> getParallelismConfiguration() {
        return this.parallelismConfiguration == null ? Input.empty() : this.parallelismConfiguration;
    }

    public ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs(
        @Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs> checkpointConfiguration,
        @Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs> monitoringConfiguration,
        @Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs> parallelismConfiguration) {
        this.checkpointConfiguration = checkpointConfiguration;
        this.monitoringConfiguration = monitoringConfiguration;
        this.parallelismConfiguration = parallelismConfiguration;
    }

    private ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs() {
        this.checkpointConfiguration = Input.empty();
        this.monitoringConfiguration = Input.empty();
        this.parallelismConfiguration = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs> checkpointConfiguration;
        private @Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs> monitoringConfiguration;
        private @Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs> parallelismConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkpointConfiguration = defaults.checkpointConfiguration;
    	      this.monitoringConfiguration = defaults.monitoringConfiguration;
    	      this.parallelismConfiguration = defaults.parallelismConfiguration;
        }

        public Builder setCheckpointConfiguration(@Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs> checkpointConfiguration) {
            this.checkpointConfiguration = checkpointConfiguration;
            return this;
        }

        public Builder setCheckpointConfiguration(@Nullable ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs checkpointConfiguration) {
            this.checkpointConfiguration = Input.ofNullable(checkpointConfiguration);
            return this;
        }

        public Builder setMonitoringConfiguration(@Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs> monitoringConfiguration) {
            this.monitoringConfiguration = monitoringConfiguration;
            return this;
        }

        public Builder setMonitoringConfiguration(@Nullable ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs monitoringConfiguration) {
            this.monitoringConfiguration = Input.ofNullable(monitoringConfiguration);
            return this;
        }

        public Builder setParallelismConfiguration(@Nullable Input<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs> parallelismConfiguration) {
            this.parallelismConfiguration = parallelismConfiguration;
            return this;
        }

        public Builder setParallelismConfiguration(@Nullable ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs parallelismConfiguration) {
            this.parallelismConfiguration = Input.ofNullable(parallelismConfiguration);
            return this;
        }
        public ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs build() {
            return new ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs(checkpointConfiguration, monitoringConfiguration, parallelismConfiguration);
        }
    }
}
