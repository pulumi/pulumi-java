// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue.inputs;

import io.pulumi.aws.glue.inputs.PartitionStorageDescriptorColumnArgs;
import io.pulumi.aws.glue.inputs.PartitionStorageDescriptorSerDeInfoArgs;
import io.pulumi.aws.glue.inputs.PartitionStorageDescriptorSkewedInfoArgs;
import io.pulumi.aws.glue.inputs.PartitionStorageDescriptorSortColumnArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PartitionStorageDescriptorArgs extends io.pulumi.resources.ResourceArgs {

    public static final PartitionStorageDescriptorArgs Empty = new PartitionStorageDescriptorArgs();

    /**
     * A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
     * 
     */
    @InputImport(name="bucketColumns")
      private final @Nullable Input<List<String>> bucketColumns;

    public Input<List<String>> getBucketColumns() {
        return this.bucketColumns == null ? Input.empty() : this.bucketColumns;
    }

    /**
     * A list of the Columns in the table.
     * 
     */
    @InputImport(name="columns")
      private final @Nullable Input<List<PartitionStorageDescriptorColumnArgs>> columns;

    public Input<List<PartitionStorageDescriptorColumnArgs>> getColumns() {
        return this.columns == null ? Input.empty() : this.columns;
    }

    /**
     * True if the data in the table is compressed, or False if not.
     * 
     */
    @InputImport(name="compressed")
      private final @Nullable Input<Boolean> compressed;

    public Input<Boolean> getCompressed() {
        return this.compressed == null ? Input.empty() : this.compressed;
    }

    /**
     * The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
     * 
     */
    @InputImport(name="inputFormat")
      private final @Nullable Input<String> inputFormat;

    public Input<String> getInputFormat() {
        return this.inputFormat == null ? Input.empty() : this.inputFormat;
    }

    /**
     * The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
     * 
     */
    @InputImport(name="location")
      private final @Nullable Input<String> location;

    public Input<String> getLocation() {
        return this.location == null ? Input.empty() : this.location;
    }

    /**
     * Must be specified if the table contains any dimension columns.
     * 
     */
    @InputImport(name="numberOfBuckets")
      private final @Nullable Input<Integer> numberOfBuckets;

    public Input<Integer> getNumberOfBuckets() {
        return this.numberOfBuckets == null ? Input.empty() : this.numberOfBuckets;
    }

    /**
     * The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
     * 
     */
    @InputImport(name="outputFormat")
      private final @Nullable Input<String> outputFormat;

    public Input<String> getOutputFormat() {
        return this.outputFormat == null ? Input.empty() : this.outputFormat;
    }

    /**
     * A map of initialization parameters for the SerDe, in key-value form.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Input<Map<String,String>> parameters;

    public Input<Map<String,String>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * Serialization/deserialization (SerDe) information.
     * 
     */
    @InputImport(name="serDeInfo")
      private final @Nullable Input<PartitionStorageDescriptorSerDeInfoArgs> serDeInfo;

    public Input<PartitionStorageDescriptorSerDeInfoArgs> getSerDeInfo() {
        return this.serDeInfo == null ? Input.empty() : this.serDeInfo;
    }

    /**
     * Information about values that appear very frequently in a column (skewed values).
     * 
     */
    @InputImport(name="skewedInfo")
      private final @Nullable Input<PartitionStorageDescriptorSkewedInfoArgs> skewedInfo;

    public Input<PartitionStorageDescriptorSkewedInfoArgs> getSkewedInfo() {
        return this.skewedInfo == null ? Input.empty() : this.skewedInfo;
    }

    /**
     * A list of Order objects specifying the sort order of each bucket in the table.
     * 
     */
    @InputImport(name="sortColumns")
      private final @Nullable Input<List<PartitionStorageDescriptorSortColumnArgs>> sortColumns;

    public Input<List<PartitionStorageDescriptorSortColumnArgs>> getSortColumns() {
        return this.sortColumns == null ? Input.empty() : this.sortColumns;
    }

    /**
     * True if the table data is stored in subdirectories, or False if not.
     * 
     */
    @InputImport(name="storedAsSubDirectories")
      private final @Nullable Input<Boolean> storedAsSubDirectories;

    public Input<Boolean> getStoredAsSubDirectories() {
        return this.storedAsSubDirectories == null ? Input.empty() : this.storedAsSubDirectories;
    }

    public PartitionStorageDescriptorArgs(
        @Nullable Input<List<String>> bucketColumns,
        @Nullable Input<List<PartitionStorageDescriptorColumnArgs>> columns,
        @Nullable Input<Boolean> compressed,
        @Nullable Input<String> inputFormat,
        @Nullable Input<String> location,
        @Nullable Input<Integer> numberOfBuckets,
        @Nullable Input<String> outputFormat,
        @Nullable Input<Map<String,String>> parameters,
        @Nullable Input<PartitionStorageDescriptorSerDeInfoArgs> serDeInfo,
        @Nullable Input<PartitionStorageDescriptorSkewedInfoArgs> skewedInfo,
        @Nullable Input<List<PartitionStorageDescriptorSortColumnArgs>> sortColumns,
        @Nullable Input<Boolean> storedAsSubDirectories) {
        this.bucketColumns = bucketColumns;
        this.columns = columns;
        this.compressed = compressed;
        this.inputFormat = inputFormat;
        this.location = location;
        this.numberOfBuckets = numberOfBuckets;
        this.outputFormat = outputFormat;
        this.parameters = parameters;
        this.serDeInfo = serDeInfo;
        this.skewedInfo = skewedInfo;
        this.sortColumns = sortColumns;
        this.storedAsSubDirectories = storedAsSubDirectories;
    }

    private PartitionStorageDescriptorArgs() {
        this.bucketColumns = Input.empty();
        this.columns = Input.empty();
        this.compressed = Input.empty();
        this.inputFormat = Input.empty();
        this.location = Input.empty();
        this.numberOfBuckets = Input.empty();
        this.outputFormat = Input.empty();
        this.parameters = Input.empty();
        this.serDeInfo = Input.empty();
        this.skewedInfo = Input.empty();
        this.sortColumns = Input.empty();
        this.storedAsSubDirectories = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PartitionStorageDescriptorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> bucketColumns;
        private @Nullable Input<List<PartitionStorageDescriptorColumnArgs>> columns;
        private @Nullable Input<Boolean> compressed;
        private @Nullable Input<String> inputFormat;
        private @Nullable Input<String> location;
        private @Nullable Input<Integer> numberOfBuckets;
        private @Nullable Input<String> outputFormat;
        private @Nullable Input<Map<String,String>> parameters;
        private @Nullable Input<PartitionStorageDescriptorSerDeInfoArgs> serDeInfo;
        private @Nullable Input<PartitionStorageDescriptorSkewedInfoArgs> skewedInfo;
        private @Nullable Input<List<PartitionStorageDescriptorSortColumnArgs>> sortColumns;
        private @Nullable Input<Boolean> storedAsSubDirectories;

        public Builder() {
    	      // Empty
        }

        public Builder(PartitionStorageDescriptorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketColumns = defaults.bucketColumns;
    	      this.columns = defaults.columns;
    	      this.compressed = defaults.compressed;
    	      this.inputFormat = defaults.inputFormat;
    	      this.location = defaults.location;
    	      this.numberOfBuckets = defaults.numberOfBuckets;
    	      this.outputFormat = defaults.outputFormat;
    	      this.parameters = defaults.parameters;
    	      this.serDeInfo = defaults.serDeInfo;
    	      this.skewedInfo = defaults.skewedInfo;
    	      this.sortColumns = defaults.sortColumns;
    	      this.storedAsSubDirectories = defaults.storedAsSubDirectories;
        }

        public Builder setBucketColumns(@Nullable Input<List<String>> bucketColumns) {
            this.bucketColumns = bucketColumns;
            return this;
        }

        public Builder setBucketColumns(@Nullable List<String> bucketColumns) {
            this.bucketColumns = Input.ofNullable(bucketColumns);
            return this;
        }

        public Builder setColumns(@Nullable Input<List<PartitionStorageDescriptorColumnArgs>> columns) {
            this.columns = columns;
            return this;
        }

        public Builder setColumns(@Nullable List<PartitionStorageDescriptorColumnArgs> columns) {
            this.columns = Input.ofNullable(columns);
            return this;
        }

        public Builder setCompressed(@Nullable Input<Boolean> compressed) {
            this.compressed = compressed;
            return this;
        }

        public Builder setCompressed(@Nullable Boolean compressed) {
            this.compressed = Input.ofNullable(compressed);
            return this;
        }

        public Builder setInputFormat(@Nullable Input<String> inputFormat) {
            this.inputFormat = inputFormat;
            return this;
        }

        public Builder setInputFormat(@Nullable String inputFormat) {
            this.inputFormat = Input.ofNullable(inputFormat);
            return this;
        }

        public Builder setLocation(@Nullable Input<String> location) {
            this.location = location;
            return this;
        }

        public Builder setLocation(@Nullable String location) {
            this.location = Input.ofNullable(location);
            return this;
        }

        public Builder setNumberOfBuckets(@Nullable Input<Integer> numberOfBuckets) {
            this.numberOfBuckets = numberOfBuckets;
            return this;
        }

        public Builder setNumberOfBuckets(@Nullable Integer numberOfBuckets) {
            this.numberOfBuckets = Input.ofNullable(numberOfBuckets);
            return this;
        }

        public Builder setOutputFormat(@Nullable Input<String> outputFormat) {
            this.outputFormat = outputFormat;
            return this;
        }

        public Builder setOutputFormat(@Nullable String outputFormat) {
            this.outputFormat = Input.ofNullable(outputFormat);
            return this;
        }

        public Builder setParameters(@Nullable Input<Map<String,String>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setParameters(@Nullable Map<String,String> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder setSerDeInfo(@Nullable Input<PartitionStorageDescriptorSerDeInfoArgs> serDeInfo) {
            this.serDeInfo = serDeInfo;
            return this;
        }

        public Builder setSerDeInfo(@Nullable PartitionStorageDescriptorSerDeInfoArgs serDeInfo) {
            this.serDeInfo = Input.ofNullable(serDeInfo);
            return this;
        }

        public Builder setSkewedInfo(@Nullable Input<PartitionStorageDescriptorSkewedInfoArgs> skewedInfo) {
            this.skewedInfo = skewedInfo;
            return this;
        }

        public Builder setSkewedInfo(@Nullable PartitionStorageDescriptorSkewedInfoArgs skewedInfo) {
            this.skewedInfo = Input.ofNullable(skewedInfo);
            return this;
        }

        public Builder setSortColumns(@Nullable Input<List<PartitionStorageDescriptorSortColumnArgs>> sortColumns) {
            this.sortColumns = sortColumns;
            return this;
        }

        public Builder setSortColumns(@Nullable List<PartitionStorageDescriptorSortColumnArgs> sortColumns) {
            this.sortColumns = Input.ofNullable(sortColumns);
            return this;
        }

        public Builder setStoredAsSubDirectories(@Nullable Input<Boolean> storedAsSubDirectories) {
            this.storedAsSubDirectories = storedAsSubDirectories;
            return this;
        }

        public Builder setStoredAsSubDirectories(@Nullable Boolean storedAsSubDirectories) {
            this.storedAsSubDirectories = Input.ofNullable(storedAsSubDirectories);
            return this;
        }
        public PartitionStorageDescriptorArgs build() {
            return new PartitionStorageDescriptorArgs(bucketColumns, columns, compressed, inputFormat, location, numberOfBuckets, outputFormat, parameters, serDeInfo, skewedInfo, sortColumns, storedAsSubDirectories);
        }
    }
}
