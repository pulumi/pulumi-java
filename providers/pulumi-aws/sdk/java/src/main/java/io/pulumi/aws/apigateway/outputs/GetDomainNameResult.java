// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigateway.outputs;

import io.pulumi.aws.apigateway.outputs.GetDomainNameEndpointConfiguration;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@OutputCustomType
public final class GetDomainNameResult {
    /**
     * The ARN of the found custom domain name.
     * 
     */
    private final String arn;
    /**
     * The ARN for an AWS-managed certificate that is used by edge-optimized endpoint for this domain name.
     * 
     */
    private final String certificateArn;
    /**
     * The name of the certificate that is used by edge-optimized endpoint for this domain name.
     * 
     */
    private final String certificateName;
    /**
     * The upload date associated with the domain certificate.
     * 
     */
    private final String certificateUploadDate;
    /**
     * The hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
     * 
     */
    private final String cloudfrontDomainName;
    /**
     * For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
     * 
     */
    private final String cloudfrontZoneId;
    private final String domainName;
    /**
     * List of objects with the endpoint configuration of this domain name.
     * 
     */
    private final List<GetDomainNameEndpointConfiguration> endpointConfigurations;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * The ARN for an AWS-managed certificate that is used for validating the regional domain name.
     * 
     */
    private final String regionalCertificateArn;
    /**
     * The user-friendly name of the certificate that is used by regional endpoint for this domain name.
     * 
     */
    private final String regionalCertificateName;
    /**
     * The hostname for the custom domain's regional endpoint.
     * 
     */
    private final String regionalDomainName;
    /**
     * The hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
     * 
     */
    private final String regionalZoneId;
    /**
     * The security policy for the domain name.
     * 
     */
    private final String securityPolicy;
    /**
     * Key-value map of tags for the resource.
     * 
     */
    private final @Nullable Map<String,String> tags;

    @OutputCustomType.Constructor({"arn","certificateArn","certificateName","certificateUploadDate","cloudfrontDomainName","cloudfrontZoneId","domainName","endpointConfigurations","id","regionalCertificateArn","regionalCertificateName","regionalDomainName","regionalZoneId","securityPolicy","tags"})
    private GetDomainNameResult(
        String arn,
        String certificateArn,
        String certificateName,
        String certificateUploadDate,
        String cloudfrontDomainName,
        String cloudfrontZoneId,
        String domainName,
        List<GetDomainNameEndpointConfiguration> endpointConfigurations,
        String id,
        String regionalCertificateArn,
        String regionalCertificateName,
        String regionalDomainName,
        String regionalZoneId,
        String securityPolicy,
        @Nullable Map<String,String> tags) {
        this.arn = arn;
        this.certificateArn = certificateArn;
        this.certificateName = certificateName;
        this.certificateUploadDate = certificateUploadDate;
        this.cloudfrontDomainName = cloudfrontDomainName;
        this.cloudfrontZoneId = cloudfrontZoneId;
        this.domainName = domainName;
        this.endpointConfigurations = endpointConfigurations;
        this.id = id;
        this.regionalCertificateArn = regionalCertificateArn;
        this.regionalCertificateName = regionalCertificateName;
        this.regionalDomainName = regionalDomainName;
        this.regionalZoneId = regionalZoneId;
        this.securityPolicy = securityPolicy;
        this.tags = tags;
    }

    /**
     * The ARN of the found custom domain name.
     * 
    */
    public String getArn() {
        return this.arn;
    }
    /**
     * The ARN for an AWS-managed certificate that is used by edge-optimized endpoint for this domain name.
     * 
    */
    public String getCertificateArn() {
        return this.certificateArn;
    }
    /**
     * The name of the certificate that is used by edge-optimized endpoint for this domain name.
     * 
    */
    public String getCertificateName() {
        return this.certificateName;
    }
    /**
     * The upload date associated with the domain certificate.
     * 
    */
    public String getCertificateUploadDate() {
        return this.certificateUploadDate;
    }
    /**
     * The hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
     * 
    */
    public String getCloudfrontDomainName() {
        return this.cloudfrontDomainName;
    }
    /**
     * For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
     * 
    */
    public String getCloudfrontZoneId() {
        return this.cloudfrontZoneId;
    }
    public String getDomainName() {
        return this.domainName;
    }
    /**
     * List of objects with the endpoint configuration of this domain name.
     * 
    */
    public List<GetDomainNameEndpointConfiguration> getEndpointConfigurations() {
        return this.endpointConfigurations;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * The ARN for an AWS-managed certificate that is used for validating the regional domain name.
     * 
    */
    public String getRegionalCertificateArn() {
        return this.regionalCertificateArn;
    }
    /**
     * The user-friendly name of the certificate that is used by regional endpoint for this domain name.
     * 
    */
    public String getRegionalCertificateName() {
        return this.regionalCertificateName;
    }
    /**
     * The hostname for the custom domain's regional endpoint.
     * 
    */
    public String getRegionalDomainName() {
        return this.regionalDomainName;
    }
    /**
     * The hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
     * 
    */
    public String getRegionalZoneId() {
        return this.regionalZoneId;
    }
    /**
     * The security policy for the domain name.
     * 
    */
    public String getSecurityPolicy() {
        return this.securityPolicy;
    }
    /**
     * Key-value map of tags for the resource.
     * 
    */
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainNameResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String arn;
        private String certificateArn;
        private String certificateName;
        private String certificateUploadDate;
        private String cloudfrontDomainName;
        private String cloudfrontZoneId;
        private String domainName;
        private List<GetDomainNameEndpointConfiguration> endpointConfigurations;
        private String id;
        private String regionalCertificateArn;
        private String regionalCertificateName;
        private String regionalDomainName;
        private String regionalZoneId;
        private String securityPolicy;
        private @Nullable Map<String,String> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDomainNameResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.certificateArn = defaults.certificateArn;
    	      this.certificateName = defaults.certificateName;
    	      this.certificateUploadDate = defaults.certificateUploadDate;
    	      this.cloudfrontDomainName = defaults.cloudfrontDomainName;
    	      this.cloudfrontZoneId = defaults.cloudfrontZoneId;
    	      this.domainName = defaults.domainName;
    	      this.endpointConfigurations = defaults.endpointConfigurations;
    	      this.id = defaults.id;
    	      this.regionalCertificateArn = defaults.regionalCertificateArn;
    	      this.regionalCertificateName = defaults.regionalCertificateName;
    	      this.regionalDomainName = defaults.regionalDomainName;
    	      this.regionalZoneId = defaults.regionalZoneId;
    	      this.securityPolicy = defaults.securityPolicy;
    	      this.tags = defaults.tags;
        }

        public Builder setArn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }

        public Builder setCertificateArn(String certificateArn) {
            this.certificateArn = Objects.requireNonNull(certificateArn);
            return this;
        }

        public Builder setCertificateName(String certificateName) {
            this.certificateName = Objects.requireNonNull(certificateName);
            return this;
        }

        public Builder setCertificateUploadDate(String certificateUploadDate) {
            this.certificateUploadDate = Objects.requireNonNull(certificateUploadDate);
            return this;
        }

        public Builder setCloudfrontDomainName(String cloudfrontDomainName) {
            this.cloudfrontDomainName = Objects.requireNonNull(cloudfrontDomainName);
            return this;
        }

        public Builder setCloudfrontZoneId(String cloudfrontZoneId) {
            this.cloudfrontZoneId = Objects.requireNonNull(cloudfrontZoneId);
            return this;
        }

        public Builder setDomainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }

        public Builder setEndpointConfigurations(List<GetDomainNameEndpointConfiguration> endpointConfigurations) {
            this.endpointConfigurations = Objects.requireNonNull(endpointConfigurations);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setRegionalCertificateArn(String regionalCertificateArn) {
            this.regionalCertificateArn = Objects.requireNonNull(regionalCertificateArn);
            return this;
        }

        public Builder setRegionalCertificateName(String regionalCertificateName) {
            this.regionalCertificateName = Objects.requireNonNull(regionalCertificateName);
            return this;
        }

        public Builder setRegionalDomainName(String regionalDomainName) {
            this.regionalDomainName = Objects.requireNonNull(regionalDomainName);
            return this;
        }

        public Builder setRegionalZoneId(String regionalZoneId) {
            this.regionalZoneId = Objects.requireNonNull(regionalZoneId);
            return this;
        }

        public Builder setSecurityPolicy(String securityPolicy) {
            this.securityPolicy = Objects.requireNonNull(securityPolicy);
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public GetDomainNameResult build() {
            return new GetDomainNameResult(arn, certificateArn, certificateName, certificateUploadDate, cloudfrontDomainName, cloudfrontZoneId, domainName, endpointConfigurations, id, regionalCertificateArn, regionalCertificateName, regionalDomainName, regionalZoneId, securityPolicy, tags);
        }
    }
}
