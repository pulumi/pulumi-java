// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appstream;

import io.pulumi.aws.appstream.inputs.StackAccessEndpointArgs;
import io.pulumi.aws.appstream.inputs.StackApplicationSettingsArgs;
import io.pulumi.aws.appstream.inputs.StackStorageConnectorArgs;
import io.pulumi.aws.appstream.inputs.StackUserSettingArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StackArgs extends io.pulumi.resources.ResourceArgs {

    public static final StackArgs Empty = new StackArgs();

    @InputImport(name="accessEndpoints")
      private final @Nullable Input<List<StackAccessEndpointArgs>> accessEndpoints;

    public Input<List<StackAccessEndpointArgs>> getAccessEndpoints() {
        return this.accessEndpoints == null ? Input.empty() : this.accessEndpoints;
    }

    /**
     * Settings for application settings persistence.
     * 
     */
    @InputImport(name="applicationSettings")
      private final @Nullable Input<StackApplicationSettingsArgs> applicationSettings;

    public Input<StackApplicationSettingsArgs> getApplicationSettings() {
        return this.applicationSettings == null ? Input.empty() : this.applicationSettings;
    }

    /**
     * Description for the AppStream stack.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Stack name to display.
     * 
     */
    @InputImport(name="displayName")
      private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
     * 
     */
    @InputImport(name="embedHostDomains")
      private final @Nullable Input<List<String>> embedHostDomains;

    public Input<List<String>> getEmbedHostDomains() {
        return this.embedHostDomains == null ? Input.empty() : this.embedHostDomains;
    }

    /**
     * URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
     * 
     */
    @InputImport(name="feedbackUrl")
      private final @Nullable Input<String> feedbackUrl;

    public Input<String> getFeedbackUrl() {
        return this.feedbackUrl == null ? Input.empty() : this.feedbackUrl;
    }

    /**
     * Unique name for the AppStream stack.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * URL that users are redirected to after their streaming session ends.
     * 
     */
    @InputImport(name="redirectUrl")
      private final @Nullable Input<String> redirectUrl;

    public Input<String> getRedirectUrl() {
        return this.redirectUrl == null ? Input.empty() : this.redirectUrl;
    }

    /**
     * Configuration block for the storage connectors to enable. See below.
     * 
     */
    @InputImport(name="storageConnectors")
      private final @Nullable Input<List<StackStorageConnectorArgs>> storageConnectors;

    public Input<List<StackStorageConnectorArgs>> getStorageConnectors() {
        return this.storageConnectors == null ? Input.empty() : this.storageConnectors;
    }

    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Configuration block for the actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled. See below.
     * 
     */
    @InputImport(name="userSettings")
      private final @Nullable Input<List<StackUserSettingArgs>> userSettings;

    public Input<List<StackUserSettingArgs>> getUserSettings() {
        return this.userSettings == null ? Input.empty() : this.userSettings;
    }

    public StackArgs(
        @Nullable Input<List<StackAccessEndpointArgs>> accessEndpoints,
        @Nullable Input<StackApplicationSettingsArgs> applicationSettings,
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        @Nullable Input<List<String>> embedHostDomains,
        @Nullable Input<String> feedbackUrl,
        @Nullable Input<String> name,
        @Nullable Input<String> redirectUrl,
        @Nullable Input<List<StackStorageConnectorArgs>> storageConnectors,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<List<StackUserSettingArgs>> userSettings) {
        this.accessEndpoints = accessEndpoints;
        this.applicationSettings = applicationSettings;
        this.description = description;
        this.displayName = displayName;
        this.embedHostDomains = embedHostDomains;
        this.feedbackUrl = feedbackUrl;
        this.name = name;
        this.redirectUrl = redirectUrl;
        this.storageConnectors = storageConnectors;
        this.tags = tags;
        this.userSettings = userSettings;
    }

    private StackArgs() {
        this.accessEndpoints = Input.empty();
        this.applicationSettings = Input.empty();
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.embedHostDomains = Input.empty();
        this.feedbackUrl = Input.empty();
        this.name = Input.empty();
        this.redirectUrl = Input.empty();
        this.storageConnectors = Input.empty();
        this.tags = Input.empty();
        this.userSettings = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<StackAccessEndpointArgs>> accessEndpoints;
        private @Nullable Input<StackApplicationSettingsArgs> applicationSettings;
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private @Nullable Input<List<String>> embedHostDomains;
        private @Nullable Input<String> feedbackUrl;
        private @Nullable Input<String> name;
        private @Nullable Input<String> redirectUrl;
        private @Nullable Input<List<StackStorageConnectorArgs>> storageConnectors;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<List<StackUserSettingArgs>> userSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(StackArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessEndpoints = defaults.accessEndpoints;
    	      this.applicationSettings = defaults.applicationSettings;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.embedHostDomains = defaults.embedHostDomains;
    	      this.feedbackUrl = defaults.feedbackUrl;
    	      this.name = defaults.name;
    	      this.redirectUrl = defaults.redirectUrl;
    	      this.storageConnectors = defaults.storageConnectors;
    	      this.tags = defaults.tags;
    	      this.userSettings = defaults.userSettings;
        }

        public Builder setAccessEndpoints(@Nullable Input<List<StackAccessEndpointArgs>> accessEndpoints) {
            this.accessEndpoints = accessEndpoints;
            return this;
        }

        public Builder setAccessEndpoints(@Nullable List<StackAccessEndpointArgs> accessEndpoints) {
            this.accessEndpoints = Input.ofNullable(accessEndpoints);
            return this;
        }

        public Builder setApplicationSettings(@Nullable Input<StackApplicationSettingsArgs> applicationSettings) {
            this.applicationSettings = applicationSettings;
            return this;
        }

        public Builder setApplicationSettings(@Nullable StackApplicationSettingsArgs applicationSettings) {
            this.applicationSettings = Input.ofNullable(applicationSettings);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setEmbedHostDomains(@Nullable Input<List<String>> embedHostDomains) {
            this.embedHostDomains = embedHostDomains;
            return this;
        }

        public Builder setEmbedHostDomains(@Nullable List<String> embedHostDomains) {
            this.embedHostDomains = Input.ofNullable(embedHostDomains);
            return this;
        }

        public Builder setFeedbackUrl(@Nullable Input<String> feedbackUrl) {
            this.feedbackUrl = feedbackUrl;
            return this;
        }

        public Builder setFeedbackUrl(@Nullable String feedbackUrl) {
            this.feedbackUrl = Input.ofNullable(feedbackUrl);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setRedirectUrl(@Nullable Input<String> redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }

        public Builder setRedirectUrl(@Nullable String redirectUrl) {
            this.redirectUrl = Input.ofNullable(redirectUrl);
            return this;
        }

        public Builder setStorageConnectors(@Nullable Input<List<StackStorageConnectorArgs>> storageConnectors) {
            this.storageConnectors = storageConnectors;
            return this;
        }

        public Builder setStorageConnectors(@Nullable List<StackStorageConnectorArgs> storageConnectors) {
            this.storageConnectors = Input.ofNullable(storageConnectors);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setUserSettings(@Nullable Input<List<StackUserSettingArgs>> userSettings) {
            this.userSettings = userSettings;
            return this;
        }

        public Builder setUserSettings(@Nullable List<StackUserSettingArgs> userSettings) {
            this.userSettings = Input.ofNullable(userSettings);
            return this;
        }
        public StackArgs build() {
            return new StackArgs(accessEndpoints, applicationSettings, description, displayName, embedHostDomains, feedbackUrl, name, redirectUrl, storageConnectors, tags, userSettings);
        }
    }
}
