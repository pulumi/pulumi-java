// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesis.inputs;

import io.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsGetArgs;
import io.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamSplunkConfigurationGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final FirehoseDeliveryStreamSplunkConfigurationGetArgs Empty = new FirehoseDeliveryStreamSplunkConfigurationGetArgs();

    /**
     * The CloudWatch Logging Options for the delivery stream. More details are given below.
     * 
     */
    @InputImport(name="cloudwatchLoggingOptions")
    private final @Nullable Input<FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions;

    public Input<FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsGetArgs> getCloudwatchLoggingOptions() {
        return this.cloudwatchLoggingOptions == null ? Input.empty() : this.cloudwatchLoggingOptions;
    }

    /**
     * The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
     * 
     */
    @InputImport(name="hecAcknowledgmentTimeout")
    private final @Nullable Input<Integer> hecAcknowledgmentTimeout;

    public Input<Integer> getHecAcknowledgmentTimeout() {
        return this.hecAcknowledgmentTimeout == null ? Input.empty() : this.hecAcknowledgmentTimeout;
    }

    /**
     * The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
     * 
     */
    @InputImport(name="hecEndpoint", required=true)
    private final Input<String> hecEndpoint;

    public Input<String> getHecEndpoint() {
        return this.hecEndpoint;
    }

    /**
     * The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
     * 
     */
    @InputImport(name="hecEndpointType")
    private final @Nullable Input<String> hecEndpointType;

    public Input<String> getHecEndpointType() {
        return this.hecEndpointType == null ? Input.empty() : this.hecEndpointType;
    }

    /**
     * The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
     * 
     */
    @InputImport(name="hecToken", required=true)
    private final Input<String> hecToken;

    public Input<String> getHecToken() {
        return this.hecToken;
    }

    /**
     * The data processing configuration.  More details are given below.
     * 
     */
    @InputImport(name="processingConfiguration")
    private final @Nullable Input<FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationGetArgs> processingConfiguration;

    public Input<FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationGetArgs> getProcessingConfiguration() {
        return this.processingConfiguration == null ? Input.empty() : this.processingConfiguration;
    }

    /**
     * After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
     * 
     */
    @InputImport(name="retryDuration")
    private final @Nullable Input<Integer> retryDuration;

    public Input<Integer> getRetryDuration() {
        return this.retryDuration == null ? Input.empty() : this.retryDuration;
    }

    /**
     * Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
     * 
     */
    @InputImport(name="s3BackupMode")
    private final @Nullable Input<String> s3BackupMode;

    public Input<String> getS3BackupMode() {
        return this.s3BackupMode == null ? Input.empty() : this.s3BackupMode;
    }

    public FirehoseDeliveryStreamSplunkConfigurationGetArgs(
        @Nullable Input<FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions,
        @Nullable Input<Integer> hecAcknowledgmentTimeout,
        Input<String> hecEndpoint,
        @Nullable Input<String> hecEndpointType,
        Input<String> hecToken,
        @Nullable Input<FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationGetArgs> processingConfiguration,
        @Nullable Input<Integer> retryDuration,
        @Nullable Input<String> s3BackupMode) {
        this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
        this.hecAcknowledgmentTimeout = hecAcknowledgmentTimeout;
        this.hecEndpoint = Objects.requireNonNull(hecEndpoint, "expected parameter 'hecEndpoint' to be non-null");
        this.hecEndpointType = hecEndpointType;
        this.hecToken = Objects.requireNonNull(hecToken, "expected parameter 'hecToken' to be non-null");
        this.processingConfiguration = processingConfiguration;
        this.retryDuration = retryDuration;
        this.s3BackupMode = s3BackupMode;
    }

    private FirehoseDeliveryStreamSplunkConfigurationGetArgs() {
        this.cloudwatchLoggingOptions = Input.empty();
        this.hecAcknowledgmentTimeout = Input.empty();
        this.hecEndpoint = Input.empty();
        this.hecEndpointType = Input.empty();
        this.hecToken = Input.empty();
        this.processingConfiguration = Input.empty();
        this.retryDuration = Input.empty();
        this.s3BackupMode = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirehoseDeliveryStreamSplunkConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions;
        private @Nullable Input<Integer> hecAcknowledgmentTimeout;
        private Input<String> hecEndpoint;
        private @Nullable Input<String> hecEndpointType;
        private Input<String> hecToken;
        private @Nullable Input<FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationGetArgs> processingConfiguration;
        private @Nullable Input<Integer> retryDuration;
        private @Nullable Input<String> s3BackupMode;

        public Builder() {
    	      // Empty
        }

        public Builder(FirehoseDeliveryStreamSplunkConfigurationGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.hecAcknowledgmentTimeout = defaults.hecAcknowledgmentTimeout;
    	      this.hecEndpoint = defaults.hecEndpoint;
    	      this.hecEndpointType = defaults.hecEndpointType;
    	      this.hecToken = defaults.hecToken;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryDuration = defaults.retryDuration;
    	      this.s3BackupMode = defaults.s3BackupMode;
        }

        public Builder setCloudwatchLoggingOptions(@Nullable Input<FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }

        public Builder setCloudwatchLoggingOptions(@Nullable FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsGetArgs cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = Input.ofNullable(cloudwatchLoggingOptions);
            return this;
        }

        public Builder setHecAcknowledgmentTimeout(@Nullable Input<Integer> hecAcknowledgmentTimeout) {
            this.hecAcknowledgmentTimeout = hecAcknowledgmentTimeout;
            return this;
        }

        public Builder setHecAcknowledgmentTimeout(@Nullable Integer hecAcknowledgmentTimeout) {
            this.hecAcknowledgmentTimeout = Input.ofNullable(hecAcknowledgmentTimeout);
            return this;
        }

        public Builder setHecEndpoint(Input<String> hecEndpoint) {
            this.hecEndpoint = Objects.requireNonNull(hecEndpoint);
            return this;
        }

        public Builder setHecEndpoint(String hecEndpoint) {
            this.hecEndpoint = Input.of(Objects.requireNonNull(hecEndpoint));
            return this;
        }

        public Builder setHecEndpointType(@Nullable Input<String> hecEndpointType) {
            this.hecEndpointType = hecEndpointType;
            return this;
        }

        public Builder setHecEndpointType(@Nullable String hecEndpointType) {
            this.hecEndpointType = Input.ofNullable(hecEndpointType);
            return this;
        }

        public Builder setHecToken(Input<String> hecToken) {
            this.hecToken = Objects.requireNonNull(hecToken);
            return this;
        }

        public Builder setHecToken(String hecToken) {
            this.hecToken = Input.of(Objects.requireNonNull(hecToken));
            return this;
        }

        public Builder setProcessingConfiguration(@Nullable Input<FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationGetArgs> processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }

        public Builder setProcessingConfiguration(@Nullable FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationGetArgs processingConfiguration) {
            this.processingConfiguration = Input.ofNullable(processingConfiguration);
            return this;
        }

        public Builder setRetryDuration(@Nullable Input<Integer> retryDuration) {
            this.retryDuration = retryDuration;
            return this;
        }

        public Builder setRetryDuration(@Nullable Integer retryDuration) {
            this.retryDuration = Input.ofNullable(retryDuration);
            return this;
        }

        public Builder setS3BackupMode(@Nullable Input<String> s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }

        public Builder setS3BackupMode(@Nullable String s3BackupMode) {
            this.s3BackupMode = Input.ofNullable(s3BackupMode);
            return this;
        }
        public FirehoseDeliveryStreamSplunkConfigurationGetArgs build() {
            return new FirehoseDeliveryStreamSplunkConfigurationGetArgs(cloudwatchLoggingOptions, hecAcknowledgmentTimeout, hecEndpoint, hecEndpointType, hecToken, processingConfiguration, retryDuration, s3BackupMode);
        }
    }
}
