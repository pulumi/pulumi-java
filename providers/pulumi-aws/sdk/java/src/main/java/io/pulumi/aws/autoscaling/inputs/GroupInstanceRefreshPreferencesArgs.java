// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.autoscaling.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GroupInstanceRefreshPreferencesArgs extends io.pulumi.resources.ResourceArgs {

    public static final GroupInstanceRefreshPreferencesArgs Empty = new GroupInstanceRefreshPreferencesArgs();

    /**
     * The number of seconds to wait after a checkpoint. Defaults to `3600`.
     * 
     */
    @Import(name="checkpointDelay")
      private final @Nullable Output<String> checkpointDelay;

    public Output<String> getCheckpointDelay() {
        return this.checkpointDelay == null ? Codegen.empty() : this.checkpointDelay;
    }

    /**
     * List of percentages for each checkpoint. Values must be unique and in ascending order. To replace all instances, the final number must be `100`.
     * 
     */
    @Import(name="checkpointPercentages")
      private final @Nullable Output<List<Integer>> checkpointPercentages;

    public Output<List<Integer>> getCheckpointPercentages() {
        return this.checkpointPercentages == null ? Codegen.empty() : this.checkpointPercentages;
    }

    /**
     * The number of seconds until a newly launched instance is configured and ready to use. Default behavior is to use the Auto Scaling Group's health check grace period.
     * 
     */
    @Import(name="instanceWarmup")
      private final @Nullable Output<String> instanceWarmup;

    public Output<String> getInstanceWarmup() {
        return this.instanceWarmup == null ? Codegen.empty() : this.instanceWarmup;
    }

    /**
     * The amount of capacity in the Auto Scaling group that must remain healthy during an instance refresh to allow the operation to continue, as a percentage of the desired capacity of the Auto Scaling group. Defaults to `90`.
     * 
     */
    @Import(name="minHealthyPercentage")
      private final @Nullable Output<Integer> minHealthyPercentage;

    public Output<Integer> getMinHealthyPercentage() {
        return this.minHealthyPercentage == null ? Codegen.empty() : this.minHealthyPercentage;
    }

    public GroupInstanceRefreshPreferencesArgs(
        @Nullable Output<String> checkpointDelay,
        @Nullable Output<List<Integer>> checkpointPercentages,
        @Nullable Output<String> instanceWarmup,
        @Nullable Output<Integer> minHealthyPercentage) {
        this.checkpointDelay = checkpointDelay;
        this.checkpointPercentages = checkpointPercentages;
        this.instanceWarmup = instanceWarmup;
        this.minHealthyPercentage = minHealthyPercentage;
    }

    private GroupInstanceRefreshPreferencesArgs() {
        this.checkpointDelay = Codegen.empty();
        this.checkpointPercentages = Codegen.empty();
        this.instanceWarmup = Codegen.empty();
        this.minHealthyPercentage = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupInstanceRefreshPreferencesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> checkpointDelay;
        private @Nullable Output<List<Integer>> checkpointPercentages;
        private @Nullable Output<String> instanceWarmup;
        private @Nullable Output<Integer> minHealthyPercentage;

        public Builder() {
    	      // Empty
        }

        public Builder(GroupInstanceRefreshPreferencesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkpointDelay = defaults.checkpointDelay;
    	      this.checkpointPercentages = defaults.checkpointPercentages;
    	      this.instanceWarmup = defaults.instanceWarmup;
    	      this.minHealthyPercentage = defaults.minHealthyPercentage;
        }

        public Builder checkpointDelay(@Nullable Output<String> checkpointDelay) {
            this.checkpointDelay = checkpointDelay;
            return this;
        }
        public Builder checkpointDelay(@Nullable String checkpointDelay) {
            this.checkpointDelay = Codegen.ofNullable(checkpointDelay);
            return this;
        }
        public Builder checkpointPercentages(@Nullable Output<List<Integer>> checkpointPercentages) {
            this.checkpointPercentages = checkpointPercentages;
            return this;
        }
        public Builder checkpointPercentages(@Nullable List<Integer> checkpointPercentages) {
            this.checkpointPercentages = Codegen.ofNullable(checkpointPercentages);
            return this;
        }
        public Builder checkpointPercentages(Integer... checkpointPercentages) {
            return checkpointPercentages(List.of(checkpointPercentages));
        }
        public Builder instanceWarmup(@Nullable Output<String> instanceWarmup) {
            this.instanceWarmup = instanceWarmup;
            return this;
        }
        public Builder instanceWarmup(@Nullable String instanceWarmup) {
            this.instanceWarmup = Codegen.ofNullable(instanceWarmup);
            return this;
        }
        public Builder minHealthyPercentage(@Nullable Output<Integer> minHealthyPercentage) {
            this.minHealthyPercentage = minHealthyPercentage;
            return this;
        }
        public Builder minHealthyPercentage(@Nullable Integer minHealthyPercentage) {
            this.minHealthyPercentage = Codegen.ofNullable(minHealthyPercentage);
            return this;
        }        public GroupInstanceRefreshPreferencesArgs build() {
            return new GroupInstanceRefreshPreferencesArgs(checkpointDelay, checkpointPercentages, instanceWarmup, minHealthyPercentage);
        }
    }
}
