// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.ec2.inputs.ManagedPrefixListEntryArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ManagedPrefixListArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagedPrefixListArgs Empty = new ManagedPrefixListArgs();

    /**
     * Address family (`IPv4` or `IPv6`) of this prefix list.
     * 
     */
    @InputImport(name="addressFamily", required=true)
    private final Input<String> addressFamily;

    public Input<String> getAddressFamily() {
        return this.addressFamily;
    }

    /**
     * Configuration block for prefix list entry. Detailed below. Different entries may have overlapping CIDR blocks, but a particular CIDR should not be duplicated.
     * 
     */
    @InputImport(name="entries")
    private final @Nullable Input<List<ManagedPrefixListEntryArgs>> entries;

    public Input<List<ManagedPrefixListEntryArgs>> getEntries() {
        return this.entries == null ? Input.empty() : this.entries;
    }

    /**
     * Maximum number of entries that this prefix list can contain.
     * 
     */
    @InputImport(name="maxEntries", required=true)
    private final Input<Integer> maxEntries;

    public Input<Integer> getMaxEntries() {
        return this.maxEntries;
    }

    /**
     * Name of this resource. The name must not start with `com.amazonaws`.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ManagedPrefixListArgs(
        Input<String> addressFamily,
        @Nullable Input<List<ManagedPrefixListEntryArgs>> entries,
        Input<Integer> maxEntries,
        @Nullable Input<String> name,
        @Nullable Input<Map<String,String>> tags) {
        this.addressFamily = Objects.requireNonNull(addressFamily, "expected parameter 'addressFamily' to be non-null");
        this.entries = entries;
        this.maxEntries = Objects.requireNonNull(maxEntries, "expected parameter 'maxEntries' to be non-null");
        this.name = name;
        this.tags = tags;
    }

    private ManagedPrefixListArgs() {
        this.addressFamily = Input.empty();
        this.entries = Input.empty();
        this.maxEntries = Input.empty();
        this.name = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedPrefixListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> addressFamily;
        private @Nullable Input<List<ManagedPrefixListEntryArgs>> entries;
        private Input<Integer> maxEntries;
        private @Nullable Input<String> name;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedPrefixListArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressFamily = defaults.addressFamily;
    	      this.entries = defaults.entries;
    	      this.maxEntries = defaults.maxEntries;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
        }

        public Builder setAddressFamily(Input<String> addressFamily) {
            this.addressFamily = Objects.requireNonNull(addressFamily);
            return this;
        }

        public Builder setAddressFamily(String addressFamily) {
            this.addressFamily = Input.of(Objects.requireNonNull(addressFamily));
            return this;
        }

        public Builder setEntries(@Nullable Input<List<ManagedPrefixListEntryArgs>> entries) {
            this.entries = entries;
            return this;
        }

        public Builder setEntries(@Nullable List<ManagedPrefixListEntryArgs> entries) {
            this.entries = Input.ofNullable(entries);
            return this;
        }

        public Builder setMaxEntries(Input<Integer> maxEntries) {
            this.maxEntries = Objects.requireNonNull(maxEntries);
            return this;
        }

        public Builder setMaxEntries(Integer maxEntries) {
            this.maxEntries = Input.of(Objects.requireNonNull(maxEntries));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public ManagedPrefixListArgs build() {
            return new ManagedPrefixListArgs(addressFamily, entries, maxEntries, name, tags);
        }
    }
}
