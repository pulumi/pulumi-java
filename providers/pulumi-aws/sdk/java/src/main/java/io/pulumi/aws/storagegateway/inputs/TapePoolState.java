// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.storagegateway.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TapePoolState extends io.pulumi.resources.ResourceArgs {

    public static final TapePoolState Empty = new TapePoolState();

    /**
     * Volume Amazon Resource Name (ARN), e.g. `aws_storagegateway_tape_pool.example arn:aws:storagegateway:us-east-1:123456789012:tapepool/pool-12345678`.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The name of the new custom tape pool.
     * 
     */
    @InputImport(name="poolName")
      private final @Nullable Input<String> poolName;

    public Input<String> getPoolName() {
        return this.poolName == null ? Input.empty() : this.poolName;
    }

    /**
     * Tape retention lock time is set in days. Tape retention lock can be enabled for up to 100 years (36,500 days). Default value is 0.
     * 
     */
    @InputImport(name="retentionLockTimeInDays")
      private final @Nullable Input<Integer> retentionLockTimeInDays;

    public Input<Integer> getRetentionLockTimeInDays() {
        return this.retentionLockTimeInDays == null ? Input.empty() : this.retentionLockTimeInDays;
    }

    /**
     * Tape retention lock can be configured in two modes. When configured in governance mode, AWS accounts with specific IAM permissions are authorized to remove the tape retention lock from archived virtual tapes. When configured in compliance mode, the tape retention lock cannot be removed by any user, including the root AWS account. Possible values are `COMPLIANCE`, `GOVERNANCE`, and `NONE`. Default value is `NONE`.
     * 
     */
    @InputImport(name="retentionLockType")
      private final @Nullable Input<String> retentionLockType;

    public Input<String> getRetentionLockType() {
        return this.retentionLockType == null ? Input.empty() : this.retentionLockType;
    }

    /**
     * The storage class that is associated with the new custom pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class that corresponds to the pool. Possible values are `DEEP_ARCHIVE` or `GLACIER`.
     * 
     */
    @InputImport(name="storageClass")
      private final @Nullable Input<String> storageClass;

    public Input<String> getStorageClass() {
        return this.storageClass == null ? Input.empty() : this.storageClass;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public TapePoolState(
        @Nullable Input<String> arn,
        @Nullable Input<String> poolName,
        @Nullable Input<Integer> retentionLockTimeInDays,
        @Nullable Input<String> retentionLockType,
        @Nullable Input<String> storageClass,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.poolName = poolName;
        this.retentionLockTimeInDays = retentionLockTimeInDays;
        this.retentionLockType = retentionLockType;
        this.storageClass = storageClass;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private TapePoolState() {
        this.arn = Input.empty();
        this.poolName = Input.empty();
        this.retentionLockTimeInDays = Input.empty();
        this.retentionLockType = Input.empty();
        this.storageClass = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TapePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> poolName;
        private @Nullable Input<Integer> retentionLockTimeInDays;
        private @Nullable Input<String> retentionLockType;
        private @Nullable Input<String> storageClass;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(TapePoolState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.poolName = defaults.poolName;
    	      this.retentionLockTimeInDays = defaults.retentionLockTimeInDays;
    	      this.retentionLockType = defaults.retentionLockType;
    	      this.storageClass = defaults.storageClass;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder poolName(@Nullable Input<String> poolName) {
            this.poolName = poolName;
            return this;
        }

        public Builder poolName(@Nullable String poolName) {
            this.poolName = Input.ofNullable(poolName);
            return this;
        }

        public Builder retentionLockTimeInDays(@Nullable Input<Integer> retentionLockTimeInDays) {
            this.retentionLockTimeInDays = retentionLockTimeInDays;
            return this;
        }

        public Builder retentionLockTimeInDays(@Nullable Integer retentionLockTimeInDays) {
            this.retentionLockTimeInDays = Input.ofNullable(retentionLockTimeInDays);
            return this;
        }

        public Builder retentionLockType(@Nullable Input<String> retentionLockType) {
            this.retentionLockType = retentionLockType;
            return this;
        }

        public Builder retentionLockType(@Nullable String retentionLockType) {
            this.retentionLockType = Input.ofNullable(retentionLockType);
            return this;
        }

        public Builder storageClass(@Nullable Input<String> storageClass) {
            this.storageClass = storageClass;
            return this;
        }

        public Builder storageClass(@Nullable String storageClass) {
            this.storageClass = Input.ofNullable(storageClass);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public TapePoolState build() {
            return new TapePoolState(arn, poolName, retentionLockTimeInDays, retentionLockType, storageClass, tags, tagsAll);
        }
    }
}
