// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.pricing.inputs;

import io.pulumi.aws.pricing.inputs.GetProductFilter;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetProductArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetProductArgs Empty = new GetProductArgs();

    /**
     * A list of filters. Passed directly to the API (see GetProducts API reference). These filters must describe a single product, this resource will fail if more than one product is returned by the API.
     * 
     */
    @Import(name="filters", required=true)
      private final List<GetProductFilter> filters;

    public List<GetProductFilter> getFilters() {
        return this.filters;
    }

    /**
     * The code of the service. Available service codes can be fetched using the DescribeServices pricing API call.
     * 
     */
    @Import(name="serviceCode", required=true)
      private final String serviceCode;

    public String getServiceCode() {
        return this.serviceCode;
    }

    public GetProductArgs(
        List<GetProductFilter> filters,
        String serviceCode) {
        this.filters = Objects.requireNonNull(filters, "expected parameter 'filters' to be non-null");
        this.serviceCode = Objects.requireNonNull(serviceCode, "expected parameter 'serviceCode' to be non-null");
    }

    private GetProductArgs() {
        this.filters = List.of();
        this.serviceCode = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProductArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetProductFilter> filters;
        private String serviceCode;

        public Builder() {
    	      // Empty
        }

        public Builder(GetProductArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.serviceCode = defaults.serviceCode;
        }

        public Builder filters(List<GetProductFilter> filters) {
            this.filters = Objects.requireNonNull(filters);
            return this;
        }

        public Builder serviceCode(String serviceCode) {
            this.serviceCode = Objects.requireNonNull(serviceCode);
            return this;
        }
        public GetProductArgs build() {
            return new GetProductArgs(filters, serviceCode);
        }
    }
}
