// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.networkfirewall;

import io.pulumi.aws.networkfirewall.inputs.RuleGroupRuleGroupArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RuleGroupArgs extends io.pulumi.resources.ResourceArgs {

    public static final RuleGroupArgs Empty = new RuleGroupArgs();

    /**
     * The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
     * 
     */
    @Import(name="capacity", required=true)
      private final Output<Integer> capacity;

    public Output<Integer> getCapacity() {
        return this.capacity;
    }

    /**
     * A friendly description of the rule group.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * A friendly name of the rule group.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
     * 
     */
    @Import(name="ruleGroup")
      private final @Nullable Output<RuleGroupRuleGroupArgs> ruleGroup;

    public Output<RuleGroupRuleGroupArgs> getRuleGroup() {
        return this.ruleGroup == null ? Output.empty() : this.ruleGroup;
    }

    /**
     * The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `rule_group` is specified.
     * 
     */
    @Import(name="rules")
      private final @Nullable Output<String> rules;

    public Output<String> getRules() {
        return this.rules == null ? Output.empty() : this.rules;
    }

    /**
     * A map of key:value pairs to associate with the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public RuleGroupArgs(
        Output<Integer> capacity,
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        @Nullable Output<RuleGroupRuleGroupArgs> ruleGroup,
        @Nullable Output<String> rules,
        @Nullable Output<Map<String,String>> tags,
        Output<String> type) {
        this.capacity = Objects.requireNonNull(capacity, "expected parameter 'capacity' to be non-null");
        this.description = description;
        this.name = name;
        this.ruleGroup = ruleGroup;
        this.rules = rules;
        this.tags = tags;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private RuleGroupArgs() {
        this.capacity = Output.empty();
        this.description = Output.empty();
        this.name = Output.empty();
        this.ruleGroup = Output.empty();
        this.rules = Output.empty();
        this.tags = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> capacity;
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private @Nullable Output<RuleGroupRuleGroupArgs> ruleGroup;
        private @Nullable Output<String> rules;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacity = defaults.capacity;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.ruleGroup = defaults.ruleGroup;
    	      this.rules = defaults.rules;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder capacity(Output<Integer> capacity) {
            this.capacity = Objects.requireNonNull(capacity);
            return this;
        }

        public Builder capacity(Integer capacity) {
            this.capacity = Output.of(Objects.requireNonNull(capacity));
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder ruleGroup(@Nullable Output<RuleGroupRuleGroupArgs> ruleGroup) {
            this.ruleGroup = ruleGroup;
            return this;
        }

        public Builder ruleGroup(@Nullable RuleGroupRuleGroupArgs ruleGroup) {
            this.ruleGroup = Output.ofNullable(ruleGroup);
            return this;
        }

        public Builder rules(@Nullable Output<String> rules) {
            this.rules = rules;
            return this;
        }

        public Builder rules(@Nullable String rules) {
            this.rules = Output.ofNullable(rules);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public RuleGroupArgs build() {
            return new RuleGroupArgs(capacity, description, name, ruleGroup, rules, tags, type);
        }
    }
}
