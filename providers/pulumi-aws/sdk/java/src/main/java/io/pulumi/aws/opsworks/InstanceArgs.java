// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.opsworks;

import io.pulumi.aws.opsworks.inputs.InstanceEbsBlockDeviceArgs;
import io.pulumi.aws.opsworks.inputs.InstanceEphemeralBlockDeviceArgs;
import io.pulumi.aws.opsworks.inputs.InstanceRootBlockDeviceArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The AWS OpsWorks agent to install.  Defaults to `"INHERIT"`.
     * 
     */
    @InputImport(name="agentVersion")
      private final @Nullable Input<String> agentVersion;

    public Input<String> getAgentVersion() {
        return this.agentVersion == null ? Input.empty() : this.agentVersion;
    }

    /**
     * The AMI to use for the instance.  If an AMI is specified, `os` must be `"Custom"`.
     * 
     */
    @InputImport(name="amiId")
      private final @Nullable Input<String> amiId;

    public Input<String> getAmiId() {
        return this.amiId == null ? Input.empty() : this.amiId;
    }

    /**
     * Machine architecture for created instances.  Can be either `"x86_64"` (the default) or `"i386"`
     * 
     */
    @InputImport(name="architecture")
      private final @Nullable Input<String> architecture;

    public Input<String> getArchitecture() {
        return this.architecture == null ? Input.empty() : this.architecture;
    }

    /**
     * Creates load-based or time-based instances.  If set, can be either: `"load"` or `"timer"`.
     * 
     */
    @InputImport(name="autoScalingType")
      private final @Nullable Input<String> autoScalingType;

    public Input<String> getAutoScalingType() {
        return this.autoScalingType == null ? Input.empty() : this.autoScalingType;
    }

    /**
     * Name of the availability zone where instances will be created
     * by default.
     * 
     */
    @InputImport(name="availabilityZone")
      private final @Nullable Input<String> availabilityZone;

    public Input<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Input.empty() : this.availabilityZone;
    }

    @InputImport(name="createdAt")
      private final @Nullable Input<String> createdAt;

    public Input<String> getCreatedAt() {
        return this.createdAt == null ? Input.empty() : this.createdAt;
    }

    @InputImport(name="deleteEbs")
      private final @Nullable Input<Boolean> deleteEbs;

    public Input<Boolean> getDeleteEbs() {
        return this.deleteEbs == null ? Input.empty() : this.deleteEbs;
    }

    @InputImport(name="deleteEip")
      private final @Nullable Input<Boolean> deleteEip;

    public Input<Boolean> getDeleteEip() {
        return this.deleteEip == null ? Input.empty() : this.deleteEip;
    }

    /**
     * Additional EBS block devices to attach to the
     * instance.  See Block Devices below for details.
     * 
     */
    @InputImport(name="ebsBlockDevices")
      private final @Nullable Input<List<InstanceEbsBlockDeviceArgs>> ebsBlockDevices;

    public Input<List<InstanceEbsBlockDeviceArgs>> getEbsBlockDevices() {
        return this.ebsBlockDevices == null ? Input.empty() : this.ebsBlockDevices;
    }

    /**
     * If true, the launched EC2 instance will be EBS-optimized.
     * 
     */
    @InputImport(name="ebsOptimized")
      private final @Nullable Input<Boolean> ebsOptimized;

    public Input<Boolean> getEbsOptimized() {
        return this.ebsOptimized == null ? Input.empty() : this.ebsOptimized;
    }

    @InputImport(name="ecsClusterArn")
      private final @Nullable Input<String> ecsClusterArn;

    public Input<String> getEcsClusterArn() {
        return this.ecsClusterArn == null ? Input.empty() : this.ecsClusterArn;
    }

    @InputImport(name="elasticIp")
      private final @Nullable Input<String> elasticIp;

    public Input<String> getElasticIp() {
        return this.elasticIp == null ? Input.empty() : this.elasticIp;
    }

    /**
     * Customize Ephemeral (also known as
     * "Instance Store") volumes on the instance. See Block Devices below for details.
     * 
     */
    @InputImport(name="ephemeralBlockDevices")
      private final @Nullable Input<List<InstanceEphemeralBlockDeviceArgs>> ephemeralBlockDevices;

    public Input<List<InstanceEphemeralBlockDeviceArgs>> getEphemeralBlockDevices() {
        return this.ephemeralBlockDevices == null ? Input.empty() : this.ephemeralBlockDevices;
    }

    /**
     * The instance's host name.
     * 
     */
    @InputImport(name="hostname")
      private final @Nullable Input<String> hostname;

    public Input<String> getHostname() {
        return this.hostname == null ? Input.empty() : this.hostname;
    }

    @InputImport(name="infrastructureClass")
      private final @Nullable Input<String> infrastructureClass;

    public Input<String> getInfrastructureClass() {
        return this.infrastructureClass == null ? Input.empty() : this.infrastructureClass;
    }

    /**
     * Controls where to install OS and package updates when the instance boots.  Defaults to `true`.
     * 
     */
    @InputImport(name="installUpdatesOnBoot")
      private final @Nullable Input<Boolean> installUpdatesOnBoot;

    public Input<Boolean> getInstallUpdatesOnBoot() {
        return this.installUpdatesOnBoot == null ? Input.empty() : this.installUpdatesOnBoot;
    }

    @InputImport(name="instanceProfileArn")
      private final @Nullable Input<String> instanceProfileArn;

    public Input<String> getInstanceProfileArn() {
        return this.instanceProfileArn == null ? Input.empty() : this.instanceProfileArn;
    }

    /**
     * The type of instance to start
     * 
     */
    @InputImport(name="instanceType")
      private final @Nullable Input<String> instanceType;

    public Input<String> getInstanceType() {
        return this.instanceType == null ? Input.empty() : this.instanceType;
    }

    @InputImport(name="lastServiceErrorId")
      private final @Nullable Input<String> lastServiceErrorId;

    public Input<String> getLastServiceErrorId() {
        return this.lastServiceErrorId == null ? Input.empty() : this.lastServiceErrorId;
    }

    /**
     * The ids of the layers the instance will belong to.
     * 
     */
    @InputImport(name="layerIds", required=true)
      private final Input<List<String>> layerIds;

    public Input<List<String>> getLayerIds() {
        return this.layerIds;
    }

    /**
     * Name of operating system that will be installed.
     * 
     */
    @InputImport(name="os")
      private final @Nullable Input<String> os;

    public Input<String> getOs() {
        return this.os == null ? Input.empty() : this.os;
    }

    @InputImport(name="platform")
      private final @Nullable Input<String> platform;

    public Input<String> getPlatform() {
        return this.platform == null ? Input.empty() : this.platform;
    }

    /**
     * The private DNS name assigned to the instance. Can only be
     * used inside the Amazon EC2, and only available if you've enabled DNS hostnames
     * for your VPC
     * 
     */
    @InputImport(name="privateDns")
      private final @Nullable Input<String> privateDns;

    public Input<String> getPrivateDns() {
        return this.privateDns == null ? Input.empty() : this.privateDns;
    }

    /**
     * The private IP address assigned to the instance
     * 
     */
    @InputImport(name="privateIp")
      private final @Nullable Input<String> privateIp;

    public Input<String> getPrivateIp() {
        return this.privateIp == null ? Input.empty() : this.privateIp;
    }

    /**
     * The public DNS name assigned to the instance. For EC2-VPC, this
     * is only available if you've enabled DNS hostnames for your VPC
     * 
     */
    @InputImport(name="publicDns")
      private final @Nullable Input<String> publicDns;

    public Input<String> getPublicDns() {
        return this.publicDns == null ? Input.empty() : this.publicDns;
    }

    /**
     * The public IP address assigned to the instance, if applicable.
     * 
     */
    @InputImport(name="publicIp")
      private final @Nullable Input<String> publicIp;

    public Input<String> getPublicIp() {
        return this.publicIp == null ? Input.empty() : this.publicIp;
    }

    @InputImport(name="registeredBy")
      private final @Nullable Input<String> registeredBy;

    public Input<String> getRegisteredBy() {
        return this.registeredBy == null ? Input.empty() : this.registeredBy;
    }

    @InputImport(name="reportedAgentVersion")
      private final @Nullable Input<String> reportedAgentVersion;

    public Input<String> getReportedAgentVersion() {
        return this.reportedAgentVersion == null ? Input.empty() : this.reportedAgentVersion;
    }

    @InputImport(name="reportedOsFamily")
      private final @Nullable Input<String> reportedOsFamily;

    public Input<String> getReportedOsFamily() {
        return this.reportedOsFamily == null ? Input.empty() : this.reportedOsFamily;
    }

    @InputImport(name="reportedOsName")
      private final @Nullable Input<String> reportedOsName;

    public Input<String> getReportedOsName() {
        return this.reportedOsName == null ? Input.empty() : this.reportedOsName;
    }

    @InputImport(name="reportedOsVersion")
      private final @Nullable Input<String> reportedOsVersion;

    public Input<String> getReportedOsVersion() {
        return this.reportedOsVersion == null ? Input.empty() : this.reportedOsVersion;
    }

    /**
     * Customize details about the root block
     * device of the instance. See Block Devices below for details.
     * 
     */
    @InputImport(name="rootBlockDevices")
      private final @Nullable Input<List<InstanceRootBlockDeviceArgs>> rootBlockDevices;

    public Input<List<InstanceRootBlockDeviceArgs>> getRootBlockDevices() {
        return this.rootBlockDevices == null ? Input.empty() : this.rootBlockDevices;
    }

    /**
     * Name of the type of root device instances will have by default.  Can be either `"ebs"` or `"instance-store"`
     * 
     */
    @InputImport(name="rootDeviceType")
      private final @Nullable Input<String> rootDeviceType;

    public Input<String> getRootDeviceType() {
        return this.rootDeviceType == null ? Input.empty() : this.rootDeviceType;
    }

    @InputImport(name="rootDeviceVolumeId")
      private final @Nullable Input<String> rootDeviceVolumeId;

    public Input<String> getRootDeviceVolumeId() {
        return this.rootDeviceVolumeId == null ? Input.empty() : this.rootDeviceVolumeId;
    }

    /**
     * The associated security groups.
     * 
     */
    @InputImport(name="securityGroupIds")
      private final @Nullable Input<List<String>> securityGroupIds;

    public Input<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds == null ? Input.empty() : this.securityGroupIds;
    }

    @InputImport(name="sshHostDsaKeyFingerprint")
      private final @Nullable Input<String> sshHostDsaKeyFingerprint;

    public Input<String> getSshHostDsaKeyFingerprint() {
        return this.sshHostDsaKeyFingerprint == null ? Input.empty() : this.sshHostDsaKeyFingerprint;
    }

    @InputImport(name="sshHostRsaKeyFingerprint")
      private final @Nullable Input<String> sshHostRsaKeyFingerprint;

    public Input<String> getSshHostRsaKeyFingerprint() {
        return this.sshHostRsaKeyFingerprint == null ? Input.empty() : this.sshHostRsaKeyFingerprint;
    }

    /**
     * Name of the SSH keypair that instances will have by default.
     * 
     */
    @InputImport(name="sshKeyName")
      private final @Nullable Input<String> sshKeyName;

    public Input<String> getSshKeyName() {
        return this.sshKeyName == null ? Input.empty() : this.sshKeyName;
    }

    /**
     * The id of the stack the instance will belong to.
     * 
     */
    @InputImport(name="stackId", required=true)
      private final Input<String> stackId;

    public Input<String> getStackId() {
        return this.stackId;
    }

    /**
     * The desired state of the instance.  Can be either `"running"` or `"stopped"`.
     * 
     */
    @InputImport(name="state")
      private final @Nullable Input<String> state;

    public Input<String> getState() {
        return this.state == null ? Input.empty() : this.state;
    }

    @InputImport(name="status")
      private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * Subnet ID to attach to
     * 
     */
    @InputImport(name="subnetId")
      private final @Nullable Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId == null ? Input.empty() : this.subnetId;
    }

    /**
     * Instance tenancy to use. Can be one of `"default"`, `"dedicated"` or `"host"`
     * 
     */
    @InputImport(name="tenancy")
      private final @Nullable Input<String> tenancy;

    public Input<String> getTenancy() {
        return this.tenancy == null ? Input.empty() : this.tenancy;
    }

    /**
     * Keyword to choose what virtualization mode created instances
     * will use. Can be either `"paravirtual"` or `"hvm"`.
     * 
     */
    @InputImport(name="virtualizationType")
      private final @Nullable Input<String> virtualizationType;

    public Input<String> getVirtualizationType() {
        return this.virtualizationType == null ? Input.empty() : this.virtualizationType;
    }

    public InstanceArgs(
        @Nullable Input<String> agentVersion,
        @Nullable Input<String> amiId,
        @Nullable Input<String> architecture,
        @Nullable Input<String> autoScalingType,
        @Nullable Input<String> availabilityZone,
        @Nullable Input<String> createdAt,
        @Nullable Input<Boolean> deleteEbs,
        @Nullable Input<Boolean> deleteEip,
        @Nullable Input<List<InstanceEbsBlockDeviceArgs>> ebsBlockDevices,
        @Nullable Input<Boolean> ebsOptimized,
        @Nullable Input<String> ecsClusterArn,
        @Nullable Input<String> elasticIp,
        @Nullable Input<List<InstanceEphemeralBlockDeviceArgs>> ephemeralBlockDevices,
        @Nullable Input<String> hostname,
        @Nullable Input<String> infrastructureClass,
        @Nullable Input<Boolean> installUpdatesOnBoot,
        @Nullable Input<String> instanceProfileArn,
        @Nullable Input<String> instanceType,
        @Nullable Input<String> lastServiceErrorId,
        Input<List<String>> layerIds,
        @Nullable Input<String> os,
        @Nullable Input<String> platform,
        @Nullable Input<String> privateDns,
        @Nullable Input<String> privateIp,
        @Nullable Input<String> publicDns,
        @Nullable Input<String> publicIp,
        @Nullable Input<String> registeredBy,
        @Nullable Input<String> reportedAgentVersion,
        @Nullable Input<String> reportedOsFamily,
        @Nullable Input<String> reportedOsName,
        @Nullable Input<String> reportedOsVersion,
        @Nullable Input<List<InstanceRootBlockDeviceArgs>> rootBlockDevices,
        @Nullable Input<String> rootDeviceType,
        @Nullable Input<String> rootDeviceVolumeId,
        @Nullable Input<List<String>> securityGroupIds,
        @Nullable Input<String> sshHostDsaKeyFingerprint,
        @Nullable Input<String> sshHostRsaKeyFingerprint,
        @Nullable Input<String> sshKeyName,
        Input<String> stackId,
        @Nullable Input<String> state,
        @Nullable Input<String> status,
        @Nullable Input<String> subnetId,
        @Nullable Input<String> tenancy,
        @Nullable Input<String> virtualizationType) {
        this.agentVersion = agentVersion;
        this.amiId = amiId;
        this.architecture = architecture;
        this.autoScalingType = autoScalingType;
        this.availabilityZone = availabilityZone;
        this.createdAt = createdAt;
        this.deleteEbs = deleteEbs;
        this.deleteEip = deleteEip;
        this.ebsBlockDevices = ebsBlockDevices;
        this.ebsOptimized = ebsOptimized;
        this.ecsClusterArn = ecsClusterArn;
        this.elasticIp = elasticIp;
        this.ephemeralBlockDevices = ephemeralBlockDevices;
        this.hostname = hostname;
        this.infrastructureClass = infrastructureClass;
        this.installUpdatesOnBoot = installUpdatesOnBoot;
        this.instanceProfileArn = instanceProfileArn;
        this.instanceType = instanceType;
        this.lastServiceErrorId = lastServiceErrorId;
        this.layerIds = Objects.requireNonNull(layerIds, "expected parameter 'layerIds' to be non-null");
        this.os = os;
        this.platform = platform;
        this.privateDns = privateDns;
        this.privateIp = privateIp;
        this.publicDns = publicDns;
        this.publicIp = publicIp;
        this.registeredBy = registeredBy;
        this.reportedAgentVersion = reportedAgentVersion;
        this.reportedOsFamily = reportedOsFamily;
        this.reportedOsName = reportedOsName;
        this.reportedOsVersion = reportedOsVersion;
        this.rootBlockDevices = rootBlockDevices;
        this.rootDeviceType = rootDeviceType;
        this.rootDeviceVolumeId = rootDeviceVolumeId;
        this.securityGroupIds = securityGroupIds;
        this.sshHostDsaKeyFingerprint = sshHostDsaKeyFingerprint;
        this.sshHostRsaKeyFingerprint = sshHostRsaKeyFingerprint;
        this.sshKeyName = sshKeyName;
        this.stackId = Objects.requireNonNull(stackId, "expected parameter 'stackId' to be non-null");
        this.state = state;
        this.status = status;
        this.subnetId = subnetId;
        this.tenancy = tenancy;
        this.virtualizationType = virtualizationType;
    }

    private InstanceArgs() {
        this.agentVersion = Input.empty();
        this.amiId = Input.empty();
        this.architecture = Input.empty();
        this.autoScalingType = Input.empty();
        this.availabilityZone = Input.empty();
        this.createdAt = Input.empty();
        this.deleteEbs = Input.empty();
        this.deleteEip = Input.empty();
        this.ebsBlockDevices = Input.empty();
        this.ebsOptimized = Input.empty();
        this.ecsClusterArn = Input.empty();
        this.elasticIp = Input.empty();
        this.ephemeralBlockDevices = Input.empty();
        this.hostname = Input.empty();
        this.infrastructureClass = Input.empty();
        this.installUpdatesOnBoot = Input.empty();
        this.instanceProfileArn = Input.empty();
        this.instanceType = Input.empty();
        this.lastServiceErrorId = Input.empty();
        this.layerIds = Input.empty();
        this.os = Input.empty();
        this.platform = Input.empty();
        this.privateDns = Input.empty();
        this.privateIp = Input.empty();
        this.publicDns = Input.empty();
        this.publicIp = Input.empty();
        this.registeredBy = Input.empty();
        this.reportedAgentVersion = Input.empty();
        this.reportedOsFamily = Input.empty();
        this.reportedOsName = Input.empty();
        this.reportedOsVersion = Input.empty();
        this.rootBlockDevices = Input.empty();
        this.rootDeviceType = Input.empty();
        this.rootDeviceVolumeId = Input.empty();
        this.securityGroupIds = Input.empty();
        this.sshHostDsaKeyFingerprint = Input.empty();
        this.sshHostRsaKeyFingerprint = Input.empty();
        this.sshKeyName = Input.empty();
        this.stackId = Input.empty();
        this.state = Input.empty();
        this.status = Input.empty();
        this.subnetId = Input.empty();
        this.tenancy = Input.empty();
        this.virtualizationType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> agentVersion;
        private @Nullable Input<String> amiId;
        private @Nullable Input<String> architecture;
        private @Nullable Input<String> autoScalingType;
        private @Nullable Input<String> availabilityZone;
        private @Nullable Input<String> createdAt;
        private @Nullable Input<Boolean> deleteEbs;
        private @Nullable Input<Boolean> deleteEip;
        private @Nullable Input<List<InstanceEbsBlockDeviceArgs>> ebsBlockDevices;
        private @Nullable Input<Boolean> ebsOptimized;
        private @Nullable Input<String> ecsClusterArn;
        private @Nullable Input<String> elasticIp;
        private @Nullable Input<List<InstanceEphemeralBlockDeviceArgs>> ephemeralBlockDevices;
        private @Nullable Input<String> hostname;
        private @Nullable Input<String> infrastructureClass;
        private @Nullable Input<Boolean> installUpdatesOnBoot;
        private @Nullable Input<String> instanceProfileArn;
        private @Nullable Input<String> instanceType;
        private @Nullable Input<String> lastServiceErrorId;
        private Input<List<String>> layerIds;
        private @Nullable Input<String> os;
        private @Nullable Input<String> platform;
        private @Nullable Input<String> privateDns;
        private @Nullable Input<String> privateIp;
        private @Nullable Input<String> publicDns;
        private @Nullable Input<String> publicIp;
        private @Nullable Input<String> registeredBy;
        private @Nullable Input<String> reportedAgentVersion;
        private @Nullable Input<String> reportedOsFamily;
        private @Nullable Input<String> reportedOsName;
        private @Nullable Input<String> reportedOsVersion;
        private @Nullable Input<List<InstanceRootBlockDeviceArgs>> rootBlockDevices;
        private @Nullable Input<String> rootDeviceType;
        private @Nullable Input<String> rootDeviceVolumeId;
        private @Nullable Input<List<String>> securityGroupIds;
        private @Nullable Input<String> sshHostDsaKeyFingerprint;
        private @Nullable Input<String> sshHostRsaKeyFingerprint;
        private @Nullable Input<String> sshKeyName;
        private Input<String> stackId;
        private @Nullable Input<String> state;
        private @Nullable Input<String> status;
        private @Nullable Input<String> subnetId;
        private @Nullable Input<String> tenancy;
        private @Nullable Input<String> virtualizationType;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentVersion = defaults.agentVersion;
    	      this.amiId = defaults.amiId;
    	      this.architecture = defaults.architecture;
    	      this.autoScalingType = defaults.autoScalingType;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.createdAt = defaults.createdAt;
    	      this.deleteEbs = defaults.deleteEbs;
    	      this.deleteEip = defaults.deleteEip;
    	      this.ebsBlockDevices = defaults.ebsBlockDevices;
    	      this.ebsOptimized = defaults.ebsOptimized;
    	      this.ecsClusterArn = defaults.ecsClusterArn;
    	      this.elasticIp = defaults.elasticIp;
    	      this.ephemeralBlockDevices = defaults.ephemeralBlockDevices;
    	      this.hostname = defaults.hostname;
    	      this.infrastructureClass = defaults.infrastructureClass;
    	      this.installUpdatesOnBoot = defaults.installUpdatesOnBoot;
    	      this.instanceProfileArn = defaults.instanceProfileArn;
    	      this.instanceType = defaults.instanceType;
    	      this.lastServiceErrorId = defaults.lastServiceErrorId;
    	      this.layerIds = defaults.layerIds;
    	      this.os = defaults.os;
    	      this.platform = defaults.platform;
    	      this.privateDns = defaults.privateDns;
    	      this.privateIp = defaults.privateIp;
    	      this.publicDns = defaults.publicDns;
    	      this.publicIp = defaults.publicIp;
    	      this.registeredBy = defaults.registeredBy;
    	      this.reportedAgentVersion = defaults.reportedAgentVersion;
    	      this.reportedOsFamily = defaults.reportedOsFamily;
    	      this.reportedOsName = defaults.reportedOsName;
    	      this.reportedOsVersion = defaults.reportedOsVersion;
    	      this.rootBlockDevices = defaults.rootBlockDevices;
    	      this.rootDeviceType = defaults.rootDeviceType;
    	      this.rootDeviceVolumeId = defaults.rootDeviceVolumeId;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.sshHostDsaKeyFingerprint = defaults.sshHostDsaKeyFingerprint;
    	      this.sshHostRsaKeyFingerprint = defaults.sshHostRsaKeyFingerprint;
    	      this.sshKeyName = defaults.sshKeyName;
    	      this.stackId = defaults.stackId;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.subnetId = defaults.subnetId;
    	      this.tenancy = defaults.tenancy;
    	      this.virtualizationType = defaults.virtualizationType;
        }

        public Builder setAgentVersion(@Nullable Input<String> agentVersion) {
            this.agentVersion = agentVersion;
            return this;
        }

        public Builder setAgentVersion(@Nullable String agentVersion) {
            this.agentVersion = Input.ofNullable(agentVersion);
            return this;
        }

        public Builder setAmiId(@Nullable Input<String> amiId) {
            this.amiId = amiId;
            return this;
        }

        public Builder setAmiId(@Nullable String amiId) {
            this.amiId = Input.ofNullable(amiId);
            return this;
        }

        public Builder setArchitecture(@Nullable Input<String> architecture) {
            this.architecture = architecture;
            return this;
        }

        public Builder setArchitecture(@Nullable String architecture) {
            this.architecture = Input.ofNullable(architecture);
            return this;
        }

        public Builder setAutoScalingType(@Nullable Input<String> autoScalingType) {
            this.autoScalingType = autoScalingType;
            return this;
        }

        public Builder setAutoScalingType(@Nullable String autoScalingType) {
            this.autoScalingType = Input.ofNullable(autoScalingType);
            return this;
        }

        public Builder setAvailabilityZone(@Nullable Input<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder setAvailabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Input.ofNullable(availabilityZone);
            return this;
        }

        public Builder setCreatedAt(@Nullable Input<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder setCreatedAt(@Nullable String createdAt) {
            this.createdAt = Input.ofNullable(createdAt);
            return this;
        }

        public Builder setDeleteEbs(@Nullable Input<Boolean> deleteEbs) {
            this.deleteEbs = deleteEbs;
            return this;
        }

        public Builder setDeleteEbs(@Nullable Boolean deleteEbs) {
            this.deleteEbs = Input.ofNullable(deleteEbs);
            return this;
        }

        public Builder setDeleteEip(@Nullable Input<Boolean> deleteEip) {
            this.deleteEip = deleteEip;
            return this;
        }

        public Builder setDeleteEip(@Nullable Boolean deleteEip) {
            this.deleteEip = Input.ofNullable(deleteEip);
            return this;
        }

        public Builder setEbsBlockDevices(@Nullable Input<List<InstanceEbsBlockDeviceArgs>> ebsBlockDevices) {
            this.ebsBlockDevices = ebsBlockDevices;
            return this;
        }

        public Builder setEbsBlockDevices(@Nullable List<InstanceEbsBlockDeviceArgs> ebsBlockDevices) {
            this.ebsBlockDevices = Input.ofNullable(ebsBlockDevices);
            return this;
        }

        public Builder setEbsOptimized(@Nullable Input<Boolean> ebsOptimized) {
            this.ebsOptimized = ebsOptimized;
            return this;
        }

        public Builder setEbsOptimized(@Nullable Boolean ebsOptimized) {
            this.ebsOptimized = Input.ofNullable(ebsOptimized);
            return this;
        }

        public Builder setEcsClusterArn(@Nullable Input<String> ecsClusterArn) {
            this.ecsClusterArn = ecsClusterArn;
            return this;
        }

        public Builder setEcsClusterArn(@Nullable String ecsClusterArn) {
            this.ecsClusterArn = Input.ofNullable(ecsClusterArn);
            return this;
        }

        public Builder setElasticIp(@Nullable Input<String> elasticIp) {
            this.elasticIp = elasticIp;
            return this;
        }

        public Builder setElasticIp(@Nullable String elasticIp) {
            this.elasticIp = Input.ofNullable(elasticIp);
            return this;
        }

        public Builder setEphemeralBlockDevices(@Nullable Input<List<InstanceEphemeralBlockDeviceArgs>> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = ephemeralBlockDevices;
            return this;
        }

        public Builder setEphemeralBlockDevices(@Nullable List<InstanceEphemeralBlockDeviceArgs> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = Input.ofNullable(ephemeralBlockDevices);
            return this;
        }

        public Builder setHostname(@Nullable Input<String> hostname) {
            this.hostname = hostname;
            return this;
        }

        public Builder setHostname(@Nullable String hostname) {
            this.hostname = Input.ofNullable(hostname);
            return this;
        }

        public Builder setInfrastructureClass(@Nullable Input<String> infrastructureClass) {
            this.infrastructureClass = infrastructureClass;
            return this;
        }

        public Builder setInfrastructureClass(@Nullable String infrastructureClass) {
            this.infrastructureClass = Input.ofNullable(infrastructureClass);
            return this;
        }

        public Builder setInstallUpdatesOnBoot(@Nullable Input<Boolean> installUpdatesOnBoot) {
            this.installUpdatesOnBoot = installUpdatesOnBoot;
            return this;
        }

        public Builder setInstallUpdatesOnBoot(@Nullable Boolean installUpdatesOnBoot) {
            this.installUpdatesOnBoot = Input.ofNullable(installUpdatesOnBoot);
            return this;
        }

        public Builder setInstanceProfileArn(@Nullable Input<String> instanceProfileArn) {
            this.instanceProfileArn = instanceProfileArn;
            return this;
        }

        public Builder setInstanceProfileArn(@Nullable String instanceProfileArn) {
            this.instanceProfileArn = Input.ofNullable(instanceProfileArn);
            return this;
        }

        public Builder setInstanceType(@Nullable Input<String> instanceType) {
            this.instanceType = instanceType;
            return this;
        }

        public Builder setInstanceType(@Nullable String instanceType) {
            this.instanceType = Input.ofNullable(instanceType);
            return this;
        }

        public Builder setLastServiceErrorId(@Nullable Input<String> lastServiceErrorId) {
            this.lastServiceErrorId = lastServiceErrorId;
            return this;
        }

        public Builder setLastServiceErrorId(@Nullable String lastServiceErrorId) {
            this.lastServiceErrorId = Input.ofNullable(lastServiceErrorId);
            return this;
        }

        public Builder setLayerIds(Input<List<String>> layerIds) {
            this.layerIds = Objects.requireNonNull(layerIds);
            return this;
        }

        public Builder setLayerIds(List<String> layerIds) {
            this.layerIds = Input.of(Objects.requireNonNull(layerIds));
            return this;
        }

        public Builder setOs(@Nullable Input<String> os) {
            this.os = os;
            return this;
        }

        public Builder setOs(@Nullable String os) {
            this.os = Input.ofNullable(os);
            return this;
        }

        public Builder setPlatform(@Nullable Input<String> platform) {
            this.platform = platform;
            return this;
        }

        public Builder setPlatform(@Nullable String platform) {
            this.platform = Input.ofNullable(platform);
            return this;
        }

        public Builder setPrivateDns(@Nullable Input<String> privateDns) {
            this.privateDns = privateDns;
            return this;
        }

        public Builder setPrivateDns(@Nullable String privateDns) {
            this.privateDns = Input.ofNullable(privateDns);
            return this;
        }

        public Builder setPrivateIp(@Nullable Input<String> privateIp) {
            this.privateIp = privateIp;
            return this;
        }

        public Builder setPrivateIp(@Nullable String privateIp) {
            this.privateIp = Input.ofNullable(privateIp);
            return this;
        }

        public Builder setPublicDns(@Nullable Input<String> publicDns) {
            this.publicDns = publicDns;
            return this;
        }

        public Builder setPublicDns(@Nullable String publicDns) {
            this.publicDns = Input.ofNullable(publicDns);
            return this;
        }

        public Builder setPublicIp(@Nullable Input<String> publicIp) {
            this.publicIp = publicIp;
            return this;
        }

        public Builder setPublicIp(@Nullable String publicIp) {
            this.publicIp = Input.ofNullable(publicIp);
            return this;
        }

        public Builder setRegisteredBy(@Nullable Input<String> registeredBy) {
            this.registeredBy = registeredBy;
            return this;
        }

        public Builder setRegisteredBy(@Nullable String registeredBy) {
            this.registeredBy = Input.ofNullable(registeredBy);
            return this;
        }

        public Builder setReportedAgentVersion(@Nullable Input<String> reportedAgentVersion) {
            this.reportedAgentVersion = reportedAgentVersion;
            return this;
        }

        public Builder setReportedAgentVersion(@Nullable String reportedAgentVersion) {
            this.reportedAgentVersion = Input.ofNullable(reportedAgentVersion);
            return this;
        }

        public Builder setReportedOsFamily(@Nullable Input<String> reportedOsFamily) {
            this.reportedOsFamily = reportedOsFamily;
            return this;
        }

        public Builder setReportedOsFamily(@Nullable String reportedOsFamily) {
            this.reportedOsFamily = Input.ofNullable(reportedOsFamily);
            return this;
        }

        public Builder setReportedOsName(@Nullable Input<String> reportedOsName) {
            this.reportedOsName = reportedOsName;
            return this;
        }

        public Builder setReportedOsName(@Nullable String reportedOsName) {
            this.reportedOsName = Input.ofNullable(reportedOsName);
            return this;
        }

        public Builder setReportedOsVersion(@Nullable Input<String> reportedOsVersion) {
            this.reportedOsVersion = reportedOsVersion;
            return this;
        }

        public Builder setReportedOsVersion(@Nullable String reportedOsVersion) {
            this.reportedOsVersion = Input.ofNullable(reportedOsVersion);
            return this;
        }

        public Builder setRootBlockDevices(@Nullable Input<List<InstanceRootBlockDeviceArgs>> rootBlockDevices) {
            this.rootBlockDevices = rootBlockDevices;
            return this;
        }

        public Builder setRootBlockDevices(@Nullable List<InstanceRootBlockDeviceArgs> rootBlockDevices) {
            this.rootBlockDevices = Input.ofNullable(rootBlockDevices);
            return this;
        }

        public Builder setRootDeviceType(@Nullable Input<String> rootDeviceType) {
            this.rootDeviceType = rootDeviceType;
            return this;
        }

        public Builder setRootDeviceType(@Nullable String rootDeviceType) {
            this.rootDeviceType = Input.ofNullable(rootDeviceType);
            return this;
        }

        public Builder setRootDeviceVolumeId(@Nullable Input<String> rootDeviceVolumeId) {
            this.rootDeviceVolumeId = rootDeviceVolumeId;
            return this;
        }

        public Builder setRootDeviceVolumeId(@Nullable String rootDeviceVolumeId) {
            this.rootDeviceVolumeId = Input.ofNullable(rootDeviceVolumeId);
            return this;
        }

        public Builder setSecurityGroupIds(@Nullable Input<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder setSecurityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Input.ofNullable(securityGroupIds);
            return this;
        }

        public Builder setSshHostDsaKeyFingerprint(@Nullable Input<String> sshHostDsaKeyFingerprint) {
            this.sshHostDsaKeyFingerprint = sshHostDsaKeyFingerprint;
            return this;
        }

        public Builder setSshHostDsaKeyFingerprint(@Nullable String sshHostDsaKeyFingerprint) {
            this.sshHostDsaKeyFingerprint = Input.ofNullable(sshHostDsaKeyFingerprint);
            return this;
        }

        public Builder setSshHostRsaKeyFingerprint(@Nullable Input<String> sshHostRsaKeyFingerprint) {
            this.sshHostRsaKeyFingerprint = sshHostRsaKeyFingerprint;
            return this;
        }

        public Builder setSshHostRsaKeyFingerprint(@Nullable String sshHostRsaKeyFingerprint) {
            this.sshHostRsaKeyFingerprint = Input.ofNullable(sshHostRsaKeyFingerprint);
            return this;
        }

        public Builder setSshKeyName(@Nullable Input<String> sshKeyName) {
            this.sshKeyName = sshKeyName;
            return this;
        }

        public Builder setSshKeyName(@Nullable String sshKeyName) {
            this.sshKeyName = Input.ofNullable(sshKeyName);
            return this;
        }

        public Builder setStackId(Input<String> stackId) {
            this.stackId = Objects.requireNonNull(stackId);
            return this;
        }

        public Builder setStackId(String stackId) {
            this.stackId = Input.of(Objects.requireNonNull(stackId));
            return this;
        }

        public Builder setState(@Nullable Input<String> state) {
            this.state = state;
            return this;
        }

        public Builder setState(@Nullable String state) {
            this.state = Input.ofNullable(state);
            return this;
        }

        public Builder setStatus(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder setSubnetId(@Nullable Input<String> subnetId) {
            this.subnetId = subnetId;
            return this;
        }

        public Builder setSubnetId(@Nullable String subnetId) {
            this.subnetId = Input.ofNullable(subnetId);
            return this;
        }

        public Builder setTenancy(@Nullable Input<String> tenancy) {
            this.tenancy = tenancy;
            return this;
        }

        public Builder setTenancy(@Nullable String tenancy) {
            this.tenancy = Input.ofNullable(tenancy);
            return this;
        }

        public Builder setVirtualizationType(@Nullable Input<String> virtualizationType) {
            this.virtualizationType = virtualizationType;
            return this;
        }

        public Builder setVirtualizationType(@Nullable String virtualizationType) {
            this.virtualizationType = Input.ofNullable(virtualizationType);
            return this;
        }
        public InstanceArgs build() {
            return new InstanceArgs(agentVersion, amiId, architecture, autoScalingType, availabilityZone, createdAt, deleteEbs, deleteEip, ebsBlockDevices, ebsOptimized, ecsClusterArn, elasticIp, ephemeralBlockDevices, hostname, infrastructureClass, installUpdatesOnBoot, instanceProfileArn, instanceType, lastServiceErrorId, layerIds, os, platform, privateDns, privateIp, publicDns, publicIp, registeredBy, reportedAgentVersion, reportedOsFamily, reportedOsName, reportedOsVersion, rootBlockDevices, rootDeviceType, rootDeviceVolumeId, securityGroupIds, sshHostDsaKeyFingerprint, sshHostRsaKeyFingerprint, sshKeyName, stackId, state, status, subnetId, tenancy, virtualizationType);
        }
    }
}
