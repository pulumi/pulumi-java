// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apprunner;

import io.pulumi.aws.apprunner.inputs.ServiceEncryptionConfigurationArgs;
import io.pulumi.aws.apprunner.inputs.ServiceHealthCheckConfigurationArgs;
import io.pulumi.aws.apprunner.inputs.ServiceInstanceConfigurationArgs;
import io.pulumi.aws.apprunner.inputs.ServiceSourceConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.
     * 
     */
    @Import(name="autoScalingConfigurationArn")
      private final @Nullable Output<String> autoScalingConfigurationArn;

    public Output<String> getAutoScalingConfigurationArn() {
        return this.autoScalingConfigurationArn == null ? Output.empty() : this.autoScalingConfigurationArn;
    }

    /**
     * An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.
     * 
     */
    @Import(name="encryptionConfiguration")
      private final @Nullable Output<ServiceEncryptionConfigurationArgs> encryptionConfiguration;

    public Output<ServiceEncryptionConfigurationArgs> getEncryptionConfiguration() {
        return this.encryptionConfiguration == null ? Output.empty() : this.encryptionConfiguration;
    }

    /**
     * Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.
     * 
     */
    @Import(name="healthCheckConfiguration")
      private final @Nullable Output<ServiceHealthCheckConfigurationArgs> healthCheckConfiguration;

    public Output<ServiceHealthCheckConfigurationArgs> getHealthCheckConfiguration() {
        return this.healthCheckConfiguration == null ? Output.empty() : this.healthCheckConfiguration;
    }

    /**
     * The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.
     * 
     */
    @Import(name="instanceConfiguration")
      private final @Nullable Output<ServiceInstanceConfigurationArgs> instanceConfiguration;

    public Output<ServiceInstanceConfigurationArgs> getInstanceConfiguration() {
        return this.instanceConfiguration == null ? Output.empty() : this.instanceConfiguration;
    }

    /**
     * Name of the service.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> getServiceName() {
        return this.serviceName;
    }

    /**
     * The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.
     * 
     */
    @Import(name="sourceConfiguration", required=true)
      private final Output<ServiceSourceConfigurationArgs> sourceConfiguration;

    public Output<ServiceSourceConfigurationArgs> getSourceConfiguration() {
        return this.sourceConfiguration;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public ServiceArgs(
        @Nullable Output<String> autoScalingConfigurationArn,
        @Nullable Output<ServiceEncryptionConfigurationArgs> encryptionConfiguration,
        @Nullable Output<ServiceHealthCheckConfigurationArgs> healthCheckConfiguration,
        @Nullable Output<ServiceInstanceConfigurationArgs> instanceConfiguration,
        Output<String> serviceName,
        Output<ServiceSourceConfigurationArgs> sourceConfiguration,
        @Nullable Output<Map<String,String>> tags) {
        this.autoScalingConfigurationArn = autoScalingConfigurationArn;
        this.encryptionConfiguration = encryptionConfiguration;
        this.healthCheckConfiguration = healthCheckConfiguration;
        this.instanceConfiguration = instanceConfiguration;
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.sourceConfiguration = Objects.requireNonNull(sourceConfiguration, "expected parameter 'sourceConfiguration' to be non-null");
        this.tags = tags;
    }

    private ServiceArgs() {
        this.autoScalingConfigurationArn = Output.empty();
        this.encryptionConfiguration = Output.empty();
        this.healthCheckConfiguration = Output.empty();
        this.instanceConfiguration = Output.empty();
        this.serviceName = Output.empty();
        this.sourceConfiguration = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> autoScalingConfigurationArn;
        private @Nullable Output<ServiceEncryptionConfigurationArgs> encryptionConfiguration;
        private @Nullable Output<ServiceHealthCheckConfigurationArgs> healthCheckConfiguration;
        private @Nullable Output<ServiceInstanceConfigurationArgs> instanceConfiguration;
        private Output<String> serviceName;
        private Output<ServiceSourceConfigurationArgs> sourceConfiguration;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoScalingConfigurationArn = defaults.autoScalingConfigurationArn;
    	      this.encryptionConfiguration = defaults.encryptionConfiguration;
    	      this.healthCheckConfiguration = defaults.healthCheckConfiguration;
    	      this.instanceConfiguration = defaults.instanceConfiguration;
    	      this.serviceName = defaults.serviceName;
    	      this.sourceConfiguration = defaults.sourceConfiguration;
    	      this.tags = defaults.tags;
        }

        public Builder autoScalingConfigurationArn(@Nullable Output<String> autoScalingConfigurationArn) {
            this.autoScalingConfigurationArn = autoScalingConfigurationArn;
            return this;
        }
        public Builder autoScalingConfigurationArn(@Nullable String autoScalingConfigurationArn) {
            this.autoScalingConfigurationArn = Output.ofNullable(autoScalingConfigurationArn);
            return this;
        }
        public Builder encryptionConfiguration(@Nullable Output<ServiceEncryptionConfigurationArgs> encryptionConfiguration) {
            this.encryptionConfiguration = encryptionConfiguration;
            return this;
        }
        public Builder encryptionConfiguration(@Nullable ServiceEncryptionConfigurationArgs encryptionConfiguration) {
            this.encryptionConfiguration = Output.ofNullable(encryptionConfiguration);
            return this;
        }
        public Builder healthCheckConfiguration(@Nullable Output<ServiceHealthCheckConfigurationArgs> healthCheckConfiguration) {
            this.healthCheckConfiguration = healthCheckConfiguration;
            return this;
        }
        public Builder healthCheckConfiguration(@Nullable ServiceHealthCheckConfigurationArgs healthCheckConfiguration) {
            this.healthCheckConfiguration = Output.ofNullable(healthCheckConfiguration);
            return this;
        }
        public Builder instanceConfiguration(@Nullable Output<ServiceInstanceConfigurationArgs> instanceConfiguration) {
            this.instanceConfiguration = instanceConfiguration;
            return this;
        }
        public Builder instanceConfiguration(@Nullable ServiceInstanceConfigurationArgs instanceConfiguration) {
            this.instanceConfiguration = Output.ofNullable(instanceConfiguration);
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public Builder sourceConfiguration(Output<ServiceSourceConfigurationArgs> sourceConfiguration) {
            this.sourceConfiguration = Objects.requireNonNull(sourceConfiguration);
            return this;
        }
        public Builder sourceConfiguration(ServiceSourceConfigurationArgs sourceConfiguration) {
            this.sourceConfiguration = Output.of(Objects.requireNonNull(sourceConfiguration));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }        public ServiceArgs build() {
            return new ServiceArgs(autoScalingConfigurationArn, encryptionConfiguration, healthCheckConfiguration, instanceConfiguration, serviceName, sourceConfiguration, tags);
        }
    }
}
