// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.datasync.inputs;

import io.pulumi.aws.datasync.inputs.NfsLocationMountOptionsGetArgs;
import io.pulumi.aws.datasync.inputs.NfsLocationOnPremConfigGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NfsLocationState extends io.pulumi.resources.ResourceArgs {

    public static final NfsLocationState Empty = new NfsLocationState();

    /**
     * Amazon Resource Name (ARN) of the DataSync Location.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Configuration block containing mount options used by DataSync to access the NFS Server.
     * 
     */
    @InputImport(name="mountOptions")
      private final @Nullable Input<NfsLocationMountOptionsGetArgs> mountOptions;

    public Input<NfsLocationMountOptionsGetArgs> getMountOptions() {
        return this.mountOptions == null ? Input.empty() : this.mountOptions;
    }

    /**
     * Configuration block containing information for connecting to the NFS File System.
     * 
     */
    @InputImport(name="onPremConfig")
      private final @Nullable Input<NfsLocationOnPremConfigGetArgs> onPremConfig;

    public Input<NfsLocationOnPremConfigGetArgs> getOnPremConfig() {
        return this.onPremConfig == null ? Input.empty() : this.onPremConfig;
    }

    /**
     * Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
     * 
     */
    @InputImport(name="serverHostname")
      private final @Nullable Input<String> serverHostname;

    public Input<String> getServerHostname() {
        return this.serverHostname == null ? Input.empty() : this.serverHostname;
    }

    /**
     * Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
     * 
     */
    @InputImport(name="subdirectory")
      private final @Nullable Input<String> subdirectory;

    public Input<String> getSubdirectory() {
        return this.subdirectory == null ? Input.empty() : this.subdirectory;
    }

    /**
     * Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    @InputImport(name="uri")
      private final @Nullable Input<String> uri;

    public Input<String> getUri() {
        return this.uri == null ? Input.empty() : this.uri;
    }

    public NfsLocationState(
        @Nullable Input<String> arn,
        @Nullable Input<NfsLocationMountOptionsGetArgs> mountOptions,
        @Nullable Input<NfsLocationOnPremConfigGetArgs> onPremConfig,
        @Nullable Input<String> serverHostname,
        @Nullable Input<String> subdirectory,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> uri) {
        this.arn = arn;
        this.mountOptions = mountOptions;
        this.onPremConfig = onPremConfig;
        this.serverHostname = serverHostname;
        this.subdirectory = subdirectory;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.uri = uri;
    }

    private NfsLocationState() {
        this.arn = Input.empty();
        this.mountOptions = Input.empty();
        this.onPremConfig = Input.empty();
        this.serverHostname = Input.empty();
        this.subdirectory = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.uri = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NfsLocationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<NfsLocationMountOptionsGetArgs> mountOptions;
        private @Nullable Input<NfsLocationOnPremConfigGetArgs> onPremConfig;
        private @Nullable Input<String> serverHostname;
        private @Nullable Input<String> subdirectory;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(NfsLocationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.mountOptions = defaults.mountOptions;
    	      this.onPremConfig = defaults.onPremConfig;
    	      this.serverHostname = defaults.serverHostname;
    	      this.subdirectory = defaults.subdirectory;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.uri = defaults.uri;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setMountOptions(@Nullable Input<NfsLocationMountOptionsGetArgs> mountOptions) {
            this.mountOptions = mountOptions;
            return this;
        }

        public Builder setMountOptions(@Nullable NfsLocationMountOptionsGetArgs mountOptions) {
            this.mountOptions = Input.ofNullable(mountOptions);
            return this;
        }

        public Builder setOnPremConfig(@Nullable Input<NfsLocationOnPremConfigGetArgs> onPremConfig) {
            this.onPremConfig = onPremConfig;
            return this;
        }

        public Builder setOnPremConfig(@Nullable NfsLocationOnPremConfigGetArgs onPremConfig) {
            this.onPremConfig = Input.ofNullable(onPremConfig);
            return this;
        }

        public Builder setServerHostname(@Nullable Input<String> serverHostname) {
            this.serverHostname = serverHostname;
            return this;
        }

        public Builder setServerHostname(@Nullable String serverHostname) {
            this.serverHostname = Input.ofNullable(serverHostname);
            return this;
        }

        public Builder setSubdirectory(@Nullable Input<String> subdirectory) {
            this.subdirectory = subdirectory;
            return this;
        }

        public Builder setSubdirectory(@Nullable String subdirectory) {
            this.subdirectory = Input.ofNullable(subdirectory);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setUri(@Nullable Input<String> uri) {
            this.uri = uri;
            return this;
        }

        public Builder setUri(@Nullable String uri) {
            this.uri = Input.ofNullable(uri);
            return this;
        }
        public NfsLocationState build() {
            return new NfsLocationState(arn, mountOptions, onPremConfig, serverHostname, subdirectory, tags, tagsAll, uri);
        }
    }
}
