// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRouteArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetRouteArgs Empty = new GetRouteArgs();

    /**
     * EC2 Carrier Gateway ID of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="carrierGatewayId")
      private final @Nullable String carrierGatewayId;

    public Optional<String> getCarrierGatewayId() {
        return this.carrierGatewayId == null ? Optional.empty() : Optional.ofNullable(this.carrierGatewayId);
    }

    /**
     * CIDR block of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="destinationCidrBlock")
      private final @Nullable String destinationCidrBlock;

    public Optional<String> getDestinationCidrBlock() {
        return this.destinationCidrBlock == null ? Optional.empty() : Optional.ofNullable(this.destinationCidrBlock);
    }

    /**
     * IPv6 CIDR block of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="destinationIpv6CidrBlock")
      private final @Nullable String destinationIpv6CidrBlock;

    public Optional<String> getDestinationIpv6CidrBlock() {
        return this.destinationIpv6CidrBlock == null ? Optional.empty() : Optional.ofNullable(this.destinationIpv6CidrBlock);
    }

    /**
     * The ID of a managed prefix list destination of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="destinationPrefixListId")
      private final @Nullable String destinationPrefixListId;

    public Optional<String> getDestinationPrefixListId() {
        return this.destinationPrefixListId == null ? Optional.empty() : Optional.ofNullable(this.destinationPrefixListId);
    }

    /**
     * Egress Only Gateway ID of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="egressOnlyGatewayId")
      private final @Nullable String egressOnlyGatewayId;

    public Optional<String> getEgressOnlyGatewayId() {
        return this.egressOnlyGatewayId == null ? Optional.empty() : Optional.ofNullable(this.egressOnlyGatewayId);
    }

    /**
     * Gateway ID of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="gatewayId")
      private final @Nullable String gatewayId;

    public Optional<String> getGatewayId() {
        return this.gatewayId == null ? Optional.empty() : Optional.ofNullable(this.gatewayId);
    }

    /**
     * Instance ID of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="instanceId")
      private final @Nullable String instanceId;

    public Optional<String> getInstanceId() {
        return this.instanceId == null ? Optional.empty() : Optional.ofNullable(this.instanceId);
    }

    /**
     * Local Gateway ID of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="localGatewayId")
      private final @Nullable String localGatewayId;

    public Optional<String> getLocalGatewayId() {
        return this.localGatewayId == null ? Optional.empty() : Optional.ofNullable(this.localGatewayId);
    }

    /**
     * NAT Gateway ID of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="natGatewayId")
      private final @Nullable String natGatewayId;

    public Optional<String> getNatGatewayId() {
        return this.natGatewayId == null ? Optional.empty() : Optional.ofNullable(this.natGatewayId);
    }

    /**
     * Network Interface ID of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="networkInterfaceId")
      private final @Nullable String networkInterfaceId;

    public Optional<String> getNetworkInterfaceId() {
        return this.networkInterfaceId == null ? Optional.empty() : Optional.ofNullable(this.networkInterfaceId);
    }

    /**
     * The ID of the specific Route Table containing the Route entry.
     * 
     */
    @InputImport(name="routeTableId", required=true)
      private final String routeTableId;

    public String getRouteTableId() {
        return this.routeTableId;
    }

    /**
     * EC2 Transit Gateway ID of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="transitGatewayId")
      private final @Nullable String transitGatewayId;

    public Optional<String> getTransitGatewayId() {
        return this.transitGatewayId == null ? Optional.empty() : Optional.ofNullable(this.transitGatewayId);
    }

    /**
     * VPC Peering Connection ID of the Route belonging to the Route Table.
     * 
     */
    @InputImport(name="vpcPeeringConnectionId")
      private final @Nullable String vpcPeeringConnectionId;

    public Optional<String> getVpcPeeringConnectionId() {
        return this.vpcPeeringConnectionId == null ? Optional.empty() : Optional.ofNullable(this.vpcPeeringConnectionId);
    }

    public GetRouteArgs(
        @Nullable String carrierGatewayId,
        @Nullable String destinationCidrBlock,
        @Nullable String destinationIpv6CidrBlock,
        @Nullable String destinationPrefixListId,
        @Nullable String egressOnlyGatewayId,
        @Nullable String gatewayId,
        @Nullable String instanceId,
        @Nullable String localGatewayId,
        @Nullable String natGatewayId,
        @Nullable String networkInterfaceId,
        String routeTableId,
        @Nullable String transitGatewayId,
        @Nullable String vpcPeeringConnectionId) {
        this.carrierGatewayId = carrierGatewayId;
        this.destinationCidrBlock = destinationCidrBlock;
        this.destinationIpv6CidrBlock = destinationIpv6CidrBlock;
        this.destinationPrefixListId = destinationPrefixListId;
        this.egressOnlyGatewayId = egressOnlyGatewayId;
        this.gatewayId = gatewayId;
        this.instanceId = instanceId;
        this.localGatewayId = localGatewayId;
        this.natGatewayId = natGatewayId;
        this.networkInterfaceId = networkInterfaceId;
        this.routeTableId = Objects.requireNonNull(routeTableId, "expected parameter 'routeTableId' to be non-null");
        this.transitGatewayId = transitGatewayId;
        this.vpcPeeringConnectionId = vpcPeeringConnectionId;
    }

    private GetRouteArgs() {
        this.carrierGatewayId = null;
        this.destinationCidrBlock = null;
        this.destinationIpv6CidrBlock = null;
        this.destinationPrefixListId = null;
        this.egressOnlyGatewayId = null;
        this.gatewayId = null;
        this.instanceId = null;
        this.localGatewayId = null;
        this.natGatewayId = null;
        this.networkInterfaceId = null;
        this.routeTableId = null;
        this.transitGatewayId = null;
        this.vpcPeeringConnectionId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String carrierGatewayId;
        private @Nullable String destinationCidrBlock;
        private @Nullable String destinationIpv6CidrBlock;
        private @Nullable String destinationPrefixListId;
        private @Nullable String egressOnlyGatewayId;
        private @Nullable String gatewayId;
        private @Nullable String instanceId;
        private @Nullable String localGatewayId;
        private @Nullable String natGatewayId;
        private @Nullable String networkInterfaceId;
        private String routeTableId;
        private @Nullable String transitGatewayId;
        private @Nullable String vpcPeeringConnectionId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRouteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.carrierGatewayId = defaults.carrierGatewayId;
    	      this.destinationCidrBlock = defaults.destinationCidrBlock;
    	      this.destinationIpv6CidrBlock = defaults.destinationIpv6CidrBlock;
    	      this.destinationPrefixListId = defaults.destinationPrefixListId;
    	      this.egressOnlyGatewayId = defaults.egressOnlyGatewayId;
    	      this.gatewayId = defaults.gatewayId;
    	      this.instanceId = defaults.instanceId;
    	      this.localGatewayId = defaults.localGatewayId;
    	      this.natGatewayId = defaults.natGatewayId;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.routeTableId = defaults.routeTableId;
    	      this.transitGatewayId = defaults.transitGatewayId;
    	      this.vpcPeeringConnectionId = defaults.vpcPeeringConnectionId;
        }

        public Builder setCarrierGatewayId(@Nullable String carrierGatewayId) {
            this.carrierGatewayId = carrierGatewayId;
            return this;
        }

        public Builder setDestinationCidrBlock(@Nullable String destinationCidrBlock) {
            this.destinationCidrBlock = destinationCidrBlock;
            return this;
        }

        public Builder setDestinationIpv6CidrBlock(@Nullable String destinationIpv6CidrBlock) {
            this.destinationIpv6CidrBlock = destinationIpv6CidrBlock;
            return this;
        }

        public Builder setDestinationPrefixListId(@Nullable String destinationPrefixListId) {
            this.destinationPrefixListId = destinationPrefixListId;
            return this;
        }

        public Builder setEgressOnlyGatewayId(@Nullable String egressOnlyGatewayId) {
            this.egressOnlyGatewayId = egressOnlyGatewayId;
            return this;
        }

        public Builder setGatewayId(@Nullable String gatewayId) {
            this.gatewayId = gatewayId;
            return this;
        }

        public Builder setInstanceId(@Nullable String instanceId) {
            this.instanceId = instanceId;
            return this;
        }

        public Builder setLocalGatewayId(@Nullable String localGatewayId) {
            this.localGatewayId = localGatewayId;
            return this;
        }

        public Builder setNatGatewayId(@Nullable String natGatewayId) {
            this.natGatewayId = natGatewayId;
            return this;
        }

        public Builder setNetworkInterfaceId(@Nullable String networkInterfaceId) {
            this.networkInterfaceId = networkInterfaceId;
            return this;
        }

        public Builder setRouteTableId(String routeTableId) {
            this.routeTableId = Objects.requireNonNull(routeTableId);
            return this;
        }

        public Builder setTransitGatewayId(@Nullable String transitGatewayId) {
            this.transitGatewayId = transitGatewayId;
            return this;
        }

        public Builder setVpcPeeringConnectionId(@Nullable String vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = vpcPeeringConnectionId;
            return this;
        }
        public GetRouteArgs build() {
            return new GetRouteArgs(carrierGatewayId, destinationCidrBlock, destinationIpv6CidrBlock, destinationPrefixListId, egressOnlyGatewayId, gatewayId, instanceId, localGatewayId, natGatewayId, networkInterfaceId, routeTableId, transitGatewayId, vpcPeeringConnectionId);
        }
    }
}
