// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.gamelift;

import io.pulumi.aws.gamelift.inputs.BuildStorageLocationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BuildArgs extends io.pulumi.resources.ResourceArgs {

    public static final BuildArgs Empty = new BuildArgs();

    /**
     * Name of the build
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Operating system that the game server binaries are built to run onE.g., `WINDOWS_2012`, `AMAZON_LINUX` or `AMAZON_LINUX_2`.
     * 
     */
    @InputImport(name="operatingSystem", required=true)
      private final Input<String> operatingSystem;

    public Input<String> getOperatingSystem() {
        return this.operatingSystem;
    }

    /**
     * Information indicating where your game build files are stored. See below.
     * 
     */
    @InputImport(name="storageLocation", required=true)
      private final Input<BuildStorageLocationArgs> storageLocation;

    public Input<BuildStorageLocationArgs> getStorageLocation() {
        return this.storageLocation;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Version that is associated with this build.
     * 
     */
    @InputImport(name="version")
      private final @Nullable Input<String> version;

    public Input<String> getVersion() {
        return this.version == null ? Input.empty() : this.version;
    }

    public BuildArgs(
        @Nullable Input<String> name,
        Input<String> operatingSystem,
        Input<BuildStorageLocationArgs> storageLocation,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> version) {
        this.name = name;
        this.operatingSystem = Objects.requireNonNull(operatingSystem, "expected parameter 'operatingSystem' to be non-null");
        this.storageLocation = Objects.requireNonNull(storageLocation, "expected parameter 'storageLocation' to be non-null");
        this.tags = tags;
        this.version = version;
    }

    private BuildArgs() {
        this.name = Input.empty();
        this.operatingSystem = Input.empty();
        this.storageLocation = Input.empty();
        this.tags = Input.empty();
        this.version = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> name;
        private Input<String> operatingSystem;
        private Input<BuildStorageLocationArgs> storageLocation;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(BuildArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.storageLocation = defaults.storageLocation;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder operatingSystem(Input<String> operatingSystem) {
            this.operatingSystem = Objects.requireNonNull(operatingSystem);
            return this;
        }

        public Builder operatingSystem(String operatingSystem) {
            this.operatingSystem = Input.of(Objects.requireNonNull(operatingSystem));
            return this;
        }

        public Builder storageLocation(Input<BuildStorageLocationArgs> storageLocation) {
            this.storageLocation = Objects.requireNonNull(storageLocation);
            return this;
        }

        public Builder storageLocation(BuildStorageLocationArgs storageLocation) {
            this.storageLocation = Input.of(Objects.requireNonNull(storageLocation));
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder version(@Nullable Input<String> version) {
            this.version = version;
            return this;
        }

        public Builder version(@Nullable String version) {
            this.version = Input.ofNullable(version);
            return this;
        }
        public BuildArgs build() {
            return new BuildArgs(name, operatingSystem, storageLocation, tags, version);
        }
    }
}
