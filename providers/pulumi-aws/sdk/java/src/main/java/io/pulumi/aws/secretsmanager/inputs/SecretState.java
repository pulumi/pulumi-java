// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.secretsmanager.inputs;

import io.pulumi.aws.secretsmanager.inputs.SecretReplicaGetArgs;
import io.pulumi.aws.secretsmanager.inputs.SecretRotationRulesGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecretState extends io.pulumi.resources.ResourceArgs {

    public static final SecretState Empty = new SecretState();

    /**
     * ARN of the secret.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Description of the secret.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Accepts boolean value to specify whether to overwrite a secret with the same name in the destination Region.
     * 
     */
    @InputImport(name="forceOverwriteReplicaSecret")
    private final @Nullable Input<Boolean> forceOverwriteReplicaSecret;

    public Input<Boolean> getForceOverwriteReplicaSecret() {
        return this.forceOverwriteReplicaSecret == null ? Input.empty() : this.forceOverwriteReplicaSecret;
    }

    /**
     * ARN, Key ID, or Alias of the AWS KMS key within the region secret is replicated to. If one is not specified, then Secrets Manager defaults to using the AWS account's default KMS key (`aws/secretsmanager`) in the region or creates one for use if non-existent.
     * 
     */
    @InputImport(name="kmsKeyId")
    private final @Nullable Input<String> kmsKeyId;

    public Input<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Input.empty() : this.kmsKeyId;
    }

    /**
     * Friendly name of the new secret. The secret name can consist of uppercase letters, lowercase letters, digits, and any of the following characters: `/_+=.@-` Conflicts with `name_prefix`.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @InputImport(name="namePrefix")
    private final @Nullable Input<String> namePrefix;

    public Input<String> getNamePrefix() {
        return this.namePrefix == null ? Input.empty() : this.namePrefix;
    }

    /**
     * Valid JSON document representing a [resource policy](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-based-policies.html). Removing `policy` from your configuration or setting `policy` to null or an empty string (i.e., `policy = ""`) _will not_ delete the policy since it could have been set by `aws.secretsmanager.SecretPolicy`. To delete the `policy`, set it to `"{}"` (an empty JSON document).
     * 
     */
    @InputImport(name="policy")
    private final @Nullable Input<String> policy;

    public Input<String> getPolicy() {
        return this.policy == null ? Input.empty() : this.policy;
    }

    /**
     * Number of days that AWS Secrets Manager waits before it can delete the secret. This value can be `0` to force deletion without recovery or range from `7` to `30` days. The default value is `30`.
     * 
     */
    @InputImport(name="recoveryWindowInDays")
    private final @Nullable Input<Integer> recoveryWindowInDays;

    public Input<Integer> getRecoveryWindowInDays() {
        return this.recoveryWindowInDays == null ? Input.empty() : this.recoveryWindowInDays;
    }

    /**
     * Configuration block to support secret replication. See details below.
     * 
     */
    @InputImport(name="replicas")
    private final @Nullable Input<List<SecretReplicaGetArgs>> replicas;

    public Input<List<SecretReplicaGetArgs>> getReplicas() {
        return this.replicas == null ? Input.empty() : this.replicas;
    }

    /**
     * Whether automatic rotation is enabled for this secret.
     * 
     * @deprecated
     * Use the aws_secretsmanager_secret_rotation resource instead
     * 
     */
    @Deprecated /* Use the aws_secretsmanager_secret_rotation resource instead */
    @InputImport(name="rotationEnabled")
    private final @Nullable Input<Boolean> rotationEnabled;

    @Deprecated /* Use the aws_secretsmanager_secret_rotation resource instead */
    public Input<Boolean> getRotationEnabled() {
        return this.rotationEnabled == null ? Input.empty() : this.rotationEnabled;
    }

    /**
     * ARN of the Lambda function that can rotate the secret. Use the `aws.secretsmanager.SecretRotation` resource to manage this configuration instead. As of version 2.67.0, removal of this configuration will no longer remove rotation due to supporting the new resource. Either import the new resource and remove the configuration or manually remove rotation.
     * 
     * @deprecated
     * Use the aws_secretsmanager_secret_rotation resource instead
     * 
     */
    @Deprecated /* Use the aws_secretsmanager_secret_rotation resource instead */
    @InputImport(name="rotationLambdaArn")
    private final @Nullable Input<String> rotationLambdaArn;

    @Deprecated /* Use the aws_secretsmanager_secret_rotation resource instead */
    public Input<String> getRotationLambdaArn() {
        return this.rotationLambdaArn == null ? Input.empty() : this.rotationLambdaArn;
    }

    /**
     * Configuration block for the rotation configuration of this secret. Defined below. Use the `aws.secretsmanager.SecretRotation` resource to manage this configuration instead. As of version 2.67.0, removal of this configuration will no longer remove rotation due to supporting the new resource. Either import the new resource and remove the configuration or manually remove rotation.
     * 
     * @deprecated
     * Use the aws_secretsmanager_secret_rotation resource instead
     * 
     */
    @Deprecated /* Use the aws_secretsmanager_secret_rotation resource instead */
    @InputImport(name="rotationRules")
    private final @Nullable Input<SecretRotationRulesGetArgs> rotationRules;

    @Deprecated /* Use the aws_secretsmanager_secret_rotation resource instead */
    public Input<SecretRotationRulesGetArgs> getRotationRules() {
        return this.rotationRules == null ? Input.empty() : this.rotationRules;
    }

    /**
     * Key-value map of user-defined tags that are attached to the secret. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public SecretState(
        @Nullable Input<String> arn,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> forceOverwriteReplicaSecret,
        @Nullable Input<String> kmsKeyId,
        @Nullable Input<String> name,
        @Nullable Input<String> namePrefix,
        @Nullable Input<String> policy,
        @Nullable Input<Integer> recoveryWindowInDays,
        @Nullable Input<List<SecretReplicaGetArgs>> replicas,
        @Nullable Input<Boolean> rotationEnabled,
        @Nullable Input<String> rotationLambdaArn,
        @Nullable Input<SecretRotationRulesGetArgs> rotationRules,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.description = description;
        this.forceOverwriteReplicaSecret = forceOverwriteReplicaSecret;
        this.kmsKeyId = kmsKeyId;
        this.name = name;
        this.namePrefix = namePrefix;
        this.policy = policy;
        this.recoveryWindowInDays = recoveryWindowInDays;
        this.replicas = replicas;
        this.rotationEnabled = rotationEnabled;
        this.rotationLambdaArn = rotationLambdaArn;
        this.rotationRules = rotationRules;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private SecretState() {
        this.arn = Input.empty();
        this.description = Input.empty();
        this.forceOverwriteReplicaSecret = Input.empty();
        this.kmsKeyId = Input.empty();
        this.name = Input.empty();
        this.namePrefix = Input.empty();
        this.policy = Input.empty();
        this.recoveryWindowInDays = Input.empty();
        this.replicas = Input.empty();
        this.rotationEnabled = Input.empty();
        this.rotationLambdaArn = Input.empty();
        this.rotationRules = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> forceOverwriteReplicaSecret;
        private @Nullable Input<String> kmsKeyId;
        private @Nullable Input<String> name;
        private @Nullable Input<String> namePrefix;
        private @Nullable Input<String> policy;
        private @Nullable Input<Integer> recoveryWindowInDays;
        private @Nullable Input<List<SecretReplicaGetArgs>> replicas;
        private @Nullable Input<Boolean> rotationEnabled;
        private @Nullable Input<String> rotationLambdaArn;
        private @Nullable Input<SecretRotationRulesGetArgs> rotationRules;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.forceOverwriteReplicaSecret = defaults.forceOverwriteReplicaSecret;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.policy = defaults.policy;
    	      this.recoveryWindowInDays = defaults.recoveryWindowInDays;
    	      this.replicas = defaults.replicas;
    	      this.rotationEnabled = defaults.rotationEnabled;
    	      this.rotationLambdaArn = defaults.rotationLambdaArn;
    	      this.rotationRules = defaults.rotationRules;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setForceOverwriteReplicaSecret(@Nullable Input<Boolean> forceOverwriteReplicaSecret) {
            this.forceOverwriteReplicaSecret = forceOverwriteReplicaSecret;
            return this;
        }

        public Builder setForceOverwriteReplicaSecret(@Nullable Boolean forceOverwriteReplicaSecret) {
            this.forceOverwriteReplicaSecret = Input.ofNullable(forceOverwriteReplicaSecret);
            return this;
        }

        public Builder setKmsKeyId(@Nullable Input<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder setKmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Input.ofNullable(kmsKeyId);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNamePrefix(@Nullable Input<String> namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }

        public Builder setNamePrefix(@Nullable String namePrefix) {
            this.namePrefix = Input.ofNullable(namePrefix);
            return this;
        }

        public Builder setPolicy(@Nullable Input<String> policy) {
            this.policy = policy;
            return this;
        }

        public Builder setPolicy(@Nullable String policy) {
            this.policy = Input.ofNullable(policy);
            return this;
        }

        public Builder setRecoveryWindowInDays(@Nullable Input<Integer> recoveryWindowInDays) {
            this.recoveryWindowInDays = recoveryWindowInDays;
            return this;
        }

        public Builder setRecoveryWindowInDays(@Nullable Integer recoveryWindowInDays) {
            this.recoveryWindowInDays = Input.ofNullable(recoveryWindowInDays);
            return this;
        }

        public Builder setReplicas(@Nullable Input<List<SecretReplicaGetArgs>> replicas) {
            this.replicas = replicas;
            return this;
        }

        public Builder setReplicas(@Nullable List<SecretReplicaGetArgs> replicas) {
            this.replicas = Input.ofNullable(replicas);
            return this;
        }

        public Builder setRotationEnabled(@Nullable Input<Boolean> rotationEnabled) {
            this.rotationEnabled = rotationEnabled;
            return this;
        }

        public Builder setRotationEnabled(@Nullable Boolean rotationEnabled) {
            this.rotationEnabled = Input.ofNullable(rotationEnabled);
            return this;
        }

        public Builder setRotationLambdaArn(@Nullable Input<String> rotationLambdaArn) {
            this.rotationLambdaArn = rotationLambdaArn;
            return this;
        }

        public Builder setRotationLambdaArn(@Nullable String rotationLambdaArn) {
            this.rotationLambdaArn = Input.ofNullable(rotationLambdaArn);
            return this;
        }

        public Builder setRotationRules(@Nullable Input<SecretRotationRulesGetArgs> rotationRules) {
            this.rotationRules = rotationRules;
            return this;
        }

        public Builder setRotationRules(@Nullable SecretRotationRulesGetArgs rotationRules) {
            this.rotationRules = Input.ofNullable(rotationRules);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public SecretState build() {
            return new SecretState(arn, description, forceOverwriteReplicaSecret, kmsKeyId, name, namePrefix, policy, recoveryWindowInDays, replicas, rotationEnabled, rotationLambdaArn, rotationRules, tags, tagsAll);
        }
    }
}
