// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudfront;

import io.pulumi.aws.cloudfront.inputs.CachePolicyParametersInCacheKeyAndForwardedToOriginArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CachePolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final CachePolicyArgs Empty = new CachePolicyArgs();

    /**
     * A comment to describe the cache policy.
     * 
     */
    @Import(name="comment")
      private final @Nullable Output<String> comment;

    public Output<String> getComment() {
        return this.comment == null ? Codegen.empty() : this.comment;
    }

    /**
     * The default amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
     * 
     */
    @Import(name="defaultTtl")
      private final @Nullable Output<Integer> defaultTtl;

    public Output<Integer> getDefaultTtl() {
        return this.defaultTtl == null ? Codegen.empty() : this.defaultTtl;
    }

    /**
     * The maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
     * 
     */
    @Import(name="maxTtl")
      private final @Nullable Output<Integer> maxTtl;

    public Output<Integer> getMaxTtl() {
        return this.maxTtl == null ? Codegen.empty() : this.maxTtl;
    }

    /**
     * The minimum amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
     * 
     */
    @Import(name="minTtl")
      private final @Nullable Output<Integer> minTtl;

    public Output<Integer> getMinTtl() {
        return this.minTtl == null ? Codegen.empty() : this.minTtl;
    }

    /**
     * A unique name to identify the cache policy.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The HTTP headers, cookies, and URL query strings to include in the cache key. See Parameters In Cache Key And Forwarded To Origin for more information.
     * 
     */
    @Import(name="parametersInCacheKeyAndForwardedToOrigin", required=true)
      private final Output<CachePolicyParametersInCacheKeyAndForwardedToOriginArgs> parametersInCacheKeyAndForwardedToOrigin;

    public Output<CachePolicyParametersInCacheKeyAndForwardedToOriginArgs> getParametersInCacheKeyAndForwardedToOrigin() {
        return this.parametersInCacheKeyAndForwardedToOrigin;
    }

    public CachePolicyArgs(
        @Nullable Output<String> comment,
        @Nullable Output<Integer> defaultTtl,
        @Nullable Output<Integer> maxTtl,
        @Nullable Output<Integer> minTtl,
        @Nullable Output<String> name,
        Output<CachePolicyParametersInCacheKeyAndForwardedToOriginArgs> parametersInCacheKeyAndForwardedToOrigin) {
        this.comment = comment;
        this.defaultTtl = defaultTtl;
        this.maxTtl = maxTtl;
        this.minTtl = minTtl;
        this.name = name;
        this.parametersInCacheKeyAndForwardedToOrigin = Objects.requireNonNull(parametersInCacheKeyAndForwardedToOrigin, "expected parameter 'parametersInCacheKeyAndForwardedToOrigin' to be non-null");
    }

    private CachePolicyArgs() {
        this.comment = Codegen.empty();
        this.defaultTtl = Codegen.empty();
        this.maxTtl = Codegen.empty();
        this.minTtl = Codegen.empty();
        this.name = Codegen.empty();
        this.parametersInCacheKeyAndForwardedToOrigin = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CachePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> comment;
        private @Nullable Output<Integer> defaultTtl;
        private @Nullable Output<Integer> maxTtl;
        private @Nullable Output<Integer> minTtl;
        private @Nullable Output<String> name;
        private Output<CachePolicyParametersInCacheKeyAndForwardedToOriginArgs> parametersInCacheKeyAndForwardedToOrigin;

        public Builder() {
    	      // Empty
        }

        public Builder(CachePolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.defaultTtl = defaults.defaultTtl;
    	      this.maxTtl = defaults.maxTtl;
    	      this.minTtl = defaults.minTtl;
    	      this.name = defaults.name;
    	      this.parametersInCacheKeyAndForwardedToOrigin = defaults.parametersInCacheKeyAndForwardedToOrigin;
        }

        public Builder comment(@Nullable Output<String> comment) {
            this.comment = comment;
            return this;
        }
        public Builder comment(@Nullable String comment) {
            this.comment = Codegen.ofNullable(comment);
            return this;
        }
        public Builder defaultTtl(@Nullable Output<Integer> defaultTtl) {
            this.defaultTtl = defaultTtl;
            return this;
        }
        public Builder defaultTtl(@Nullable Integer defaultTtl) {
            this.defaultTtl = Codegen.ofNullable(defaultTtl);
            return this;
        }
        public Builder maxTtl(@Nullable Output<Integer> maxTtl) {
            this.maxTtl = maxTtl;
            return this;
        }
        public Builder maxTtl(@Nullable Integer maxTtl) {
            this.maxTtl = Codegen.ofNullable(maxTtl);
            return this;
        }
        public Builder minTtl(@Nullable Output<Integer> minTtl) {
            this.minTtl = minTtl;
            return this;
        }
        public Builder minTtl(@Nullable Integer minTtl) {
            this.minTtl = Codegen.ofNullable(minTtl);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder parametersInCacheKeyAndForwardedToOrigin(Output<CachePolicyParametersInCacheKeyAndForwardedToOriginArgs> parametersInCacheKeyAndForwardedToOrigin) {
            this.parametersInCacheKeyAndForwardedToOrigin = Objects.requireNonNull(parametersInCacheKeyAndForwardedToOrigin);
            return this;
        }
        public Builder parametersInCacheKeyAndForwardedToOrigin(CachePolicyParametersInCacheKeyAndForwardedToOriginArgs parametersInCacheKeyAndForwardedToOrigin) {
            this.parametersInCacheKeyAndForwardedToOrigin = Output.of(Objects.requireNonNull(parametersInCacheKeyAndForwardedToOrigin));
            return this;
        }        public CachePolicyArgs build() {
            return new CachePolicyArgs(comment, defaultTtl, maxTtl, minTtl, name, parametersInCacheKeyAndForwardedToOrigin);
        }
    }
}
