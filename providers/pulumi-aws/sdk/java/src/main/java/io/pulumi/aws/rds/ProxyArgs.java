// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds;

import io.pulumi.aws.rds.inputs.ProxyAuthArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProxyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProxyArgs Empty = new ProxyArgs();

    /**
     * Configuration block(s) with authorization mechanisms to connect to the associated instances or clusters. Described below.
     * 
     */
    @InputImport(name="auths", required=true)
    private final Input<List<ProxyAuthArgs>> auths;

    public Input<List<ProxyAuthArgs>> getAuths() {
        return this.auths;
    }

    /**
     * Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
     * 
     */
    @InputImport(name="debugLogging")
    private final @Nullable Input<Boolean> debugLogging;

    public Input<Boolean> getDebugLogging() {
        return this.debugLogging == null ? Input.empty() : this.debugLogging;
    }

    /**
     * The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. The engine family applies to MySQL and PostgreSQL for both RDS and Aurora. Valid values are `MYSQL` and `POSTGRESQL`.
     * 
     */
    @InputImport(name="engineFamily", required=true)
    private final Input<String> engineFamily;

    public Input<String> getEngineFamily() {
        return this.engineFamily;
    }

    /**
     * The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
     * 
     */
    @InputImport(name="idleClientTimeout")
    private final @Nullable Input<Integer> idleClientTimeout;

    public Input<Integer> getIdleClientTimeout() {
        return this.idleClientTimeout == null ? Input.empty() : this.idleClientTimeout;
    }

    /**
     * The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
     * 
     */
    @InputImport(name="requireTls")
    private final @Nullable Input<Boolean> requireTls;

    public Input<Boolean> getRequireTls() {
        return this.requireTls == null ? Input.empty() : this.requireTls;
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
     * 
     */
    @InputImport(name="roleArn", required=true)
    private final Input<String> roleArn;

    public Input<String> getRoleArn() {
        return this.roleArn;
    }

    /**
     * A mapping of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * One or more VPC security group IDs to associate with the new proxy.
     * 
     */
    @InputImport(name="vpcSecurityGroupIds")
    private final @Nullable Input<List<String>> vpcSecurityGroupIds;

    public Input<List<String>> getVpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Input.empty() : this.vpcSecurityGroupIds;
    }

    /**
     * One or more VPC subnet IDs to associate with the new proxy.
     * 
     */
    @InputImport(name="vpcSubnetIds", required=true)
    private final Input<List<String>> vpcSubnetIds;

    public Input<List<String>> getVpcSubnetIds() {
        return this.vpcSubnetIds;
    }

    public ProxyArgs(
        Input<List<ProxyAuthArgs>> auths,
        @Nullable Input<Boolean> debugLogging,
        Input<String> engineFamily,
        @Nullable Input<Integer> idleClientTimeout,
        @Nullable Input<String> name,
        @Nullable Input<Boolean> requireTls,
        Input<String> roleArn,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<List<String>> vpcSecurityGroupIds,
        Input<List<String>> vpcSubnetIds) {
        this.auths = Objects.requireNonNull(auths, "expected parameter 'auths' to be non-null");
        this.debugLogging = debugLogging;
        this.engineFamily = Objects.requireNonNull(engineFamily, "expected parameter 'engineFamily' to be non-null");
        this.idleClientTimeout = idleClientTimeout;
        this.name = name;
        this.requireTls = requireTls;
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.tags = tags;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
        this.vpcSubnetIds = Objects.requireNonNull(vpcSubnetIds, "expected parameter 'vpcSubnetIds' to be non-null");
    }

    private ProxyArgs() {
        this.auths = Input.empty();
        this.debugLogging = Input.empty();
        this.engineFamily = Input.empty();
        this.idleClientTimeout = Input.empty();
        this.name = Input.empty();
        this.requireTls = Input.empty();
        this.roleArn = Input.empty();
        this.tags = Input.empty();
        this.vpcSecurityGroupIds = Input.empty();
        this.vpcSubnetIds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProxyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<ProxyAuthArgs>> auths;
        private @Nullable Input<Boolean> debugLogging;
        private Input<String> engineFamily;
        private @Nullable Input<Integer> idleClientTimeout;
        private @Nullable Input<String> name;
        private @Nullable Input<Boolean> requireTls;
        private Input<String> roleArn;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<List<String>> vpcSecurityGroupIds;
        private Input<List<String>> vpcSubnetIds;

        public Builder() {
    	      // Empty
        }

        public Builder(ProxyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auths = defaults.auths;
    	      this.debugLogging = defaults.debugLogging;
    	      this.engineFamily = defaults.engineFamily;
    	      this.idleClientTimeout = defaults.idleClientTimeout;
    	      this.name = defaults.name;
    	      this.requireTls = defaults.requireTls;
    	      this.roleArn = defaults.roleArn;
    	      this.tags = defaults.tags;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
    	      this.vpcSubnetIds = defaults.vpcSubnetIds;
        }

        public Builder setAuths(Input<List<ProxyAuthArgs>> auths) {
            this.auths = Objects.requireNonNull(auths);
            return this;
        }

        public Builder setAuths(List<ProxyAuthArgs> auths) {
            this.auths = Input.of(Objects.requireNonNull(auths));
            return this;
        }

        public Builder setDebugLogging(@Nullable Input<Boolean> debugLogging) {
            this.debugLogging = debugLogging;
            return this;
        }

        public Builder setDebugLogging(@Nullable Boolean debugLogging) {
            this.debugLogging = Input.ofNullable(debugLogging);
            return this;
        }

        public Builder setEngineFamily(Input<String> engineFamily) {
            this.engineFamily = Objects.requireNonNull(engineFamily);
            return this;
        }

        public Builder setEngineFamily(String engineFamily) {
            this.engineFamily = Input.of(Objects.requireNonNull(engineFamily));
            return this;
        }

        public Builder setIdleClientTimeout(@Nullable Input<Integer> idleClientTimeout) {
            this.idleClientTimeout = idleClientTimeout;
            return this;
        }

        public Builder setIdleClientTimeout(@Nullable Integer idleClientTimeout) {
            this.idleClientTimeout = Input.ofNullable(idleClientTimeout);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setRequireTls(@Nullable Input<Boolean> requireTls) {
            this.requireTls = requireTls;
            return this;
        }

        public Builder setRequireTls(@Nullable Boolean requireTls) {
            this.requireTls = Input.ofNullable(requireTls);
            return this;
        }

        public Builder setRoleArn(Input<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }

        public Builder setRoleArn(String roleArn) {
            this.roleArn = Input.of(Objects.requireNonNull(roleArn));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVpcSecurityGroupIds(@Nullable Input<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        public Builder setVpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Input.ofNullable(vpcSecurityGroupIds);
            return this;
        }

        public Builder setVpcSubnetIds(Input<List<String>> vpcSubnetIds) {
            this.vpcSubnetIds = Objects.requireNonNull(vpcSubnetIds);
            return this;
        }

        public Builder setVpcSubnetIds(List<String> vpcSubnetIds) {
            this.vpcSubnetIds = Input.of(Objects.requireNonNull(vpcSubnetIds));
            return this;
        }
        public ProxyArgs build() {
            return new ProxyArgs(auths, debugLogging, engineFamily, idleClientTimeout, name, requireTls, roleArn, tags, vpcSecurityGroupIds, vpcSubnetIds);
        }
    }
}
