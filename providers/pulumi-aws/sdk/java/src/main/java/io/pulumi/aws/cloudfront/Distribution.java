// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudfront;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.cloudfront.DistributionArgs;
import io.pulumi.aws.cloudfront.inputs.DistributionState;
import io.pulumi.aws.cloudfront.outputs.DistributionCustomErrorResponse;
import io.pulumi.aws.cloudfront.outputs.DistributionDefaultCacheBehavior;
import io.pulumi.aws.cloudfront.outputs.DistributionLoggingConfig;
import io.pulumi.aws.cloudfront.outputs.DistributionOrderedCacheBehavior;
import io.pulumi.aws.cloudfront.outputs.DistributionOrigin;
import io.pulumi.aws.cloudfront.outputs.DistributionOriginGroup;
import io.pulumi.aws.cloudfront.outputs.DistributionRestrictions;
import io.pulumi.aws.cloudfront.outputs.DistributionTrustedKeyGroup;
import io.pulumi.aws.cloudfront.outputs.DistributionTrustedSigner;
import io.pulumi.aws.cloudfront.outputs.DistributionViewerCertificate;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Creates an Amazon CloudFront web distribution.
 * 
 * For information about CloudFront distributions, see the
 * [Amazon CloudFront Developer Guide](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html). For specific information about creating
 * CloudFront web distributions, see the [POST Distribution](https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html) page in the Amazon
 * CloudFront API Reference.
 * 
 * > **NOTE:** CloudFront distributions take about 15 minutes to a deployed state
 * after creation or modification. During this time, deletes to resources will be
 * blocked. If you need to delete a distribution that is enabled and you do not
 * want to wait, you need to use the `retain_on_delete` flag.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * The following example below creates a CloudFront distribution with an S3 origin.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const bucket = new aws.s3.Bucket("bucket", {
 *     acl: "private",
 *     tags: {
 *         Name: "My bucket",
 *     },
 * });
 * const s3OriginId = "myS3Origin";
 * const s3Distribution = new aws.cloudfront.Distribution("s3Distribution", {
 *     origins: [{
 *         domainName: bucket.bucketRegionalDomainName,
 *         originId: s3OriginId,
 *         s3OriginConfig: {
 *             originAccessIdentity: "origin-access-identity/cloudfront/ABCDEFG1234567",
 *         },
 *     }],
 *     enabled: true,
 *     isIpv6Enabled: true,
 *     comment: "Some comment",
 *     defaultRootObject: "index.html",
 *     loggingConfig: {
 *         includeCookies: false,
 *         bucket: "mylogs.s3.amazonaws.com",
 *         prefix: "myprefix",
 *     },
 *     aliases: [
 *         "mysite.example.com",
 *         "yoursite.example.com",
 *     ],
 *     defaultCacheBehavior: {
 *         allowedMethods: [
 *             "DELETE",
 *             "GET",
 *             "HEAD",
 *             "OPTIONS",
 *             "PATCH",
 *             "POST",
 *             "PUT",
 *         ],
 *         cachedMethods: [
 *             "GET",
 *             "HEAD",
 *         ],
 *         targetOriginId: s3OriginId,
 *         forwardedValues: {
 *             queryString: false,
 *             cookies: {
 *                 forward: "none",
 *             },
 *         },
 *         viewerProtocolPolicy: "allow-all",
 *         minTtl: 0,
 *         defaultTtl: 3600,
 *         maxTtl: 86400,
 *     },
 *     orderedCacheBehaviors: [
 *         {
 *             pathPattern: "/content/immutable/*",
 *             allowedMethods: [
 *                 "GET",
 *                 "HEAD",
 *                 "OPTIONS",
 *             ],
 *             cachedMethods: [
 *                 "GET",
 *                 "HEAD",
 *                 "OPTIONS",
 *             ],
 *             targetOriginId: s3OriginId,
 *             forwardedValues: {
 *                 queryString: false,
 *                 headers: ["Origin"],
 *                 cookies: {
 *                     forward: "none",
 *                 },
 *             },
 *             minTtl: 0,
 *             defaultTtl: 86400,
 *             maxTtl: 31536000,
 *             compress: true,
 *             viewerProtocolPolicy: "redirect-to-https",
 *         },
 *         {
 *             pathPattern: "/content/*",
 *             allowedMethods: [
 *                 "GET",
 *                 "HEAD",
 *                 "OPTIONS",
 *             ],
 *             cachedMethods: [
 *                 "GET",
 *                 "HEAD",
 *             ],
 *             targetOriginId: s3OriginId,
 *             forwardedValues: {
 *                 queryString: false,
 *                 cookies: {
 *                     forward: "none",
 *                 },
 *             },
 *             minTtl: 0,
 *             defaultTtl: 3600,
 *             maxTtl: 86400,
 *             compress: true,
 *             viewerProtocolPolicy: "redirect-to-https",
 *         },
 *     ],
 *     priceClass: "PriceClass_200",
 *     restrictions: {
 *         geoRestriction: {
 *             restrictionType: "whitelist",
 *             locations: [
 *                 "US",
 *                 "CA",
 *                 "GB",
 *                 "DE",
 *             ],
 *         },
 *     },
 *     tags: {
 *         Environment: "production",
 *     },
 *     viewerCertificate: {
 *         cloudfrontDefaultCertificate: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * bucket = aws.s3.Bucket("bucket",
 *     acl="private",
 *     tags={
 *         "Name": "My bucket",
 *     })
 * s3_origin_id = "myS3Origin"
 * s3_distribution = aws.cloudfront.Distribution("s3Distribution",
 *     origins=[aws.cloudfront.DistributionOriginArgs(
 *         domain_name=bucket.bucket_regional_domain_name,
 *         origin_id=s3_origin_id,
 *         s3_origin_config=aws.cloudfront.DistributionOriginS3OriginConfigArgs(
 *             origin_access_identity="origin-access-identity/cloudfront/ABCDEFG1234567",
 *         ),
 *     )],
 *     enabled=True,
 *     is_ipv6_enabled=True,
 *     comment="Some comment",
 *     default_root_object="index.html",
 *     logging_config=aws.cloudfront.DistributionLoggingConfigArgs(
 *         include_cookies=False,
 *         bucket="mylogs.s3.amazonaws.com",
 *         prefix="myprefix",
 *     ),
 *     aliases=[
 *         "mysite.example.com",
 *         "yoursite.example.com",
 *     ],
 *     default_cache_behavior=aws.cloudfront.DistributionDefaultCacheBehaviorArgs(
 *         allowed_methods=[
 *             "DELETE",
 *             "GET",
 *             "HEAD",
 *             "OPTIONS",
 *             "PATCH",
 *             "POST",
 *             "PUT",
 *         ],
 *         cached_methods=[
 *             "GET",
 *             "HEAD",
 *         ],
 *         target_origin_id=s3_origin_id,
 *         forwarded_values=aws.cloudfront.DistributionDefaultCacheBehaviorForwardedValuesArgs(
 *             query_string=False,
 *             cookies=aws.cloudfront.DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs(
 *                 forward="none",
 *             ),
 *         ),
 *         viewer_protocol_policy="allow-all",
 *         min_ttl=0,
 *         default_ttl=3600,
 *         max_ttl=86400,
 *     ),
 *     ordered_cache_behaviors=[
 *         aws.cloudfront.DistributionOrderedCacheBehaviorArgs(
 *             path_pattern="/content/immutable/*",
 *             allowed_methods=[
 *                 "GET",
 *                 "HEAD",
 *                 "OPTIONS",
 *             ],
 *             cached_methods=[
 *                 "GET",
 *                 "HEAD",
 *                 "OPTIONS",
 *             ],
 *             target_origin_id=s3_origin_id,
 *             forwarded_values=aws.cloudfront.DistributionOrderedCacheBehaviorForwardedValuesArgs(
 *                 query_string=False,
 *                 headers=["Origin"],
 *                 cookies=aws.cloudfront.DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs(
 *                     forward="none",
 *                 ),
 *             ),
 *             min_ttl=0,
 *             default_ttl=86400,
 *             max_ttl=31536000,
 *             compress=True,
 *             viewer_protocol_policy="redirect-to-https",
 *         ),
 *         aws.cloudfront.DistributionOrderedCacheBehaviorArgs(
 *             path_pattern="/content/*",
 *             allowed_methods=[
 *                 "GET",
 *                 "HEAD",
 *                 "OPTIONS",
 *             ],
 *             cached_methods=[
 *                 "GET",
 *                 "HEAD",
 *             ],
 *             target_origin_id=s3_origin_id,
 *             forwarded_values=aws.cloudfront.DistributionOrderedCacheBehaviorForwardedValuesArgs(
 *                 query_string=False,
 *                 cookies=aws.cloudfront.DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs(
 *                     forward="none",
 *                 ),
 *             ),
 *             min_ttl=0,
 *             default_ttl=3600,
 *             max_ttl=86400,
 *             compress=True,
 *             viewer_protocol_policy="redirect-to-https",
 *         ),
 *     ],
 *     price_class="PriceClass_200",
 *     restrictions=aws.cloudfront.DistributionRestrictionsArgs(
 *         geo_restriction=aws.cloudfront.DistributionRestrictionsGeoRestrictionArgs(
 *             restriction_type="whitelist",
 *             locations=[
 *                 "US",
 *                 "CA",
 *                 "GB",
 *                 "DE",
 *             ],
 *         ),
 *     ),
 *     tags={
 *         "Environment": "production",
 *     },
 *     viewer_certificate=aws.cloudfront.DistributionViewerCertificateArgs(
 *         cloudfront_default_certificate=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bucket = new Aws.S3.Bucket("bucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "private",
 *             Tags = 
 *             {
 *                 { "Name", "My bucket" },
 *             },
 *         });
 *         var s3OriginId = "myS3Origin";
 *         var s3Distribution = new Aws.CloudFront.Distribution("s3Distribution", new Aws.CloudFront.DistributionArgs
 *         {
 *             Origins = 
 *             {
 *                 new Aws.CloudFront.Inputs.DistributionOriginArgs
 *                 {
 *                     DomainName = bucket.BucketRegionalDomainName,
 *                     OriginId = s3OriginId,
 *                     S3OriginConfig = new Aws.CloudFront.Inputs.DistributionOriginS3OriginConfigArgs
 *                     {
 *                         OriginAccessIdentity = "origin-access-identity/cloudfront/ABCDEFG1234567",
 *                     },
 *                 },
 *             },
 *             Enabled = true,
 *             IsIpv6Enabled = true,
 *             Comment = "Some comment",
 *             DefaultRootObject = "index.html",
 *             LoggingConfig = new Aws.CloudFront.Inputs.DistributionLoggingConfigArgs
 *             {
 *                 IncludeCookies = false,
 *                 Bucket = "mylogs.s3.amazonaws.com",
 *                 Prefix = "myprefix",
 *             },
 *             Aliases = 
 *             {
 *                 "mysite.example.com",
 *                 "yoursite.example.com",
 *             },
 *             DefaultCacheBehavior = new Aws.CloudFront.Inputs.DistributionDefaultCacheBehaviorArgs
 *             {
 *                 AllowedMethods = 
 *                 {
 *                     "DELETE",
 *                     "GET",
 *                     "HEAD",
 *                     "OPTIONS",
 *                     "PATCH",
 *                     "POST",
 *                     "PUT",
 *                 },
 *                 CachedMethods = 
 *                 {
 *                     "GET",
 *                     "HEAD",
 *                 },
 *                 TargetOriginId = s3OriginId,
 *                 ForwardedValues = new Aws.CloudFront.Inputs.DistributionDefaultCacheBehaviorForwardedValuesArgs
 *                 {
 *                     QueryString = false,
 *                     Cookies = new Aws.CloudFront.Inputs.DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs
 *                     {
 *                         Forward = "none",
 *                     },
 *                 },
 *                 ViewerProtocolPolicy = "allow-all",
 *                 MinTtl = 0,
 *                 DefaultTtl = 3600,
 *                 MaxTtl = 86400,
 *             },
 *             OrderedCacheBehaviors = 
 *             {
 *                 new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorArgs
 *                 {
 *                     PathPattern = "/content/immutable/*",
 *                     AllowedMethods = 
 *                     {
 *                         "GET",
 *                         "HEAD",
 *                         "OPTIONS",
 *                     },
 *                     CachedMethods = 
 *                     {
 *                         "GET",
 *                         "HEAD",
 *                         "OPTIONS",
 *                     },
 *                     TargetOriginId = s3OriginId,
 *                     ForwardedValues = new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorForwardedValuesArgs
 *                     {
 *                         QueryString = false,
 *                         Headers = 
 *                         {
 *                             "Origin",
 *                         },
 *                         Cookies = new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs
 *                         {
 *                             Forward = "none",
 *                         },
 *                     },
 *                     MinTtl = 0,
 *                     DefaultTtl = 86400,
 *                     MaxTtl = 31536000,
 *                     Compress = true,
 *                     ViewerProtocolPolicy = "redirect-to-https",
 *                 },
 *                 new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorArgs
 *                 {
 *                     PathPattern = "/content/*",
 *                     AllowedMethods = 
 *                     {
 *                         "GET",
 *                         "HEAD",
 *                         "OPTIONS",
 *                     },
 *                     CachedMethods = 
 *                     {
 *                         "GET",
 *                         "HEAD",
 *                     },
 *                     TargetOriginId = s3OriginId,
 *                     ForwardedValues = new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorForwardedValuesArgs
 *                     {
 *                         QueryString = false,
 *                         Cookies = new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs
 *                         {
 *                             Forward = "none",
 *                         },
 *                     },
 *                     MinTtl = 0,
 *                     DefaultTtl = 3600,
 *                     MaxTtl = 86400,
 *                     Compress = true,
 *                     ViewerProtocolPolicy = "redirect-to-https",
 *                 },
 *             },
 *             PriceClass = "PriceClass_200",
 *             Restrictions = new Aws.CloudFront.Inputs.DistributionRestrictionsArgs
 *             {
 *                 GeoRestriction = new Aws.CloudFront.Inputs.DistributionRestrictionsGeoRestrictionArgs
 *                 {
 *                     RestrictionType = "whitelist",
 *                     Locations = 
 *                     {
 *                         "US",
 *                         "CA",
 *                         "GB",
 *                         "DE",
 *                     },
 *                 },
 *             },
 *             Tags = 
 *             {
 *                 { "Environment", "production" },
 *             },
 *             ViewerCertificate = new Aws.CloudFront.Inputs.DistributionViewerCertificateArgs
 *             {
 *                 CloudfrontDefaultCertificate = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudfront"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		bucket, err := s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
 * 			Acl: pulumi.String("private"),
 * 			Tags: pulumi.StringMap{
 * 				"Name": pulumi.String("My bucket"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		s3OriginId := "myS3Origin"
 * 		_, err = cloudfront.NewDistribution(ctx, "s3Distribution", &cloudfront.DistributionArgs{
 * 			Origins: cloudfront.DistributionOriginArray{
 * 				&cloudfront.DistributionOriginArgs{
 * 					DomainName: bucket.BucketRegionalDomainName,
 * 					OriginId:   pulumi.String(s3OriginId),
 * 					S3OriginConfig: &cloudfront.DistributionOriginS3OriginConfigArgs{
 * 						OriginAccessIdentity: pulumi.String("origin-access-identity/cloudfront/ABCDEFG1234567"),
 * 					},
 * 				},
 * 			},
 * 			Enabled:           pulumi.Bool(true),
 * 			IsIpv6Enabled:     pulumi.Bool(true),
 * 			Comment:           pulumi.String("Some comment"),
 * 			DefaultRootObject: pulumi.String("index.html"),
 * 			LoggingConfig: &cloudfront.DistributionLoggingConfigArgs{
 * 				IncludeCookies: pulumi.Bool(false),
 * 				Bucket:         pulumi.String("mylogs.s3.amazonaws.com"),
 * 				Prefix:         pulumi.String("myprefix"),
 * 			},
 * 			Aliases: pulumi.StringArray{
 * 				pulumi.String("mysite.example.com"),
 * 				pulumi.String("yoursite.example.com"),
 * 			},
 * 			DefaultCacheBehavior: &cloudfront.DistributionDefaultCacheBehaviorArgs{
 * 				AllowedMethods: pulumi.StringArray{
 * 					pulumi.String("DELETE"),
 * 					pulumi.String("GET"),
 * 					pulumi.String("HEAD"),
 * 					pulumi.String("OPTIONS"),
 * 					pulumi.String("PATCH"),
 * 					pulumi.String("POST"),
 * 					pulumi.String("PUT"),
 * 				},
 * 				CachedMethods: pulumi.StringArray{
 * 					pulumi.String("GET"),
 * 					pulumi.String("HEAD"),
 * 				},
 * 				TargetOriginId: pulumi.String(s3OriginId),
 * 				ForwardedValues: &cloudfront.DistributionDefaultCacheBehaviorForwardedValuesArgs{
 * 					QueryString: pulumi.Bool(false),
 * 					Cookies: &cloudfront.DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs{
 * 						Forward: pulumi.String("none"),
 * 					},
 * 				},
 * 				ViewerProtocolPolicy: pulumi.String("allow-all"),
 * 				MinTtl:               pulumi.Int(0),
 * 				DefaultTtl:           pulumi.Int(3600),
 * 				MaxTtl:               pulumi.Int(86400),
 * 			},
 * 			OrderedCacheBehaviors: cloudfront.DistributionOrderedCacheBehaviorArray{
 * 				&cloudfront.DistributionOrderedCacheBehaviorArgs{
 * 					PathPattern: pulumi.String("/content/immutable/*"),
 * 					AllowedMethods: pulumi.StringArray{
 * 						pulumi.String("GET"),
 * 						pulumi.String("HEAD"),
 * 						pulumi.String("OPTIONS"),
 * 					},
 * 					CachedMethods: pulumi.StringArray{
 * 						pulumi.String("GET"),
 * 						pulumi.String("HEAD"),
 * 						pulumi.String("OPTIONS"),
 * 					},
 * 					TargetOriginId: pulumi.String(s3OriginId),
 * 					ForwardedValues: &cloudfront.DistributionOrderedCacheBehaviorForwardedValuesArgs{
 * 						QueryString: pulumi.Bool(false),
 * 						Headers: pulumi.StringArray{
 * 							pulumi.String("Origin"),
 * 						},
 * 						Cookies: &cloudfront.DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs{
 * 							Forward: pulumi.String("none"),
 * 						},
 * 					},
 * 					MinTtl:               pulumi.Int(0),
 * 					DefaultTtl:           pulumi.Int(86400),
 * 					MaxTtl:               pulumi.Int(31536000),
 * 					Compress:             pulumi.Bool(true),
 * 					ViewerProtocolPolicy: pulumi.String("redirect-to-https"),
 * 				},
 * 				&cloudfront.DistributionOrderedCacheBehaviorArgs{
 * 					PathPattern: pulumi.String("/content/*"),
 * 					AllowedMethods: pulumi.StringArray{
 * 						pulumi.String("GET"),
 * 						pulumi.String("HEAD"),
 * 						pulumi.String("OPTIONS"),
 * 					},
 * 					CachedMethods: pulumi.StringArray{
 * 						pulumi.String("GET"),
 * 						pulumi.String("HEAD"),
 * 					},
 * 					TargetOriginId: pulumi.String(s3OriginId),
 * 					ForwardedValues: &cloudfront.DistributionOrderedCacheBehaviorForwardedValuesArgs{
 * 						QueryString: pulumi.Bool(false),
 * 						Cookies: &cloudfront.DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs{
 * 							Forward: pulumi.String("none"),
 * 						},
 * 					},
 * 					MinTtl:               pulumi.Int(0),
 * 					DefaultTtl:           pulumi.Int(3600),
 * 					MaxTtl:               pulumi.Int(86400),
 * 					Compress:             pulumi.Bool(true),
 * 					ViewerProtocolPolicy: pulumi.String("redirect-to-https"),
 * 				},
 * 			},
 * 			PriceClass: pulumi.String("PriceClass_200"),
 * 			Restrictions: &cloudfront.DistributionRestrictionsArgs{
 * 				GeoRestriction: &cloudfront.DistributionRestrictionsGeoRestrictionArgs{
 * 					RestrictionType: pulumi.String("whitelist"),
 * 					Locations: pulumi.StringArray{
 * 						pulumi.String("US"),
 * 						pulumi.String("CA"),
 * 						pulumi.String("GB"),
 * 						pulumi.String("DE"),
 * 					},
 * 				},
 * 			},
 * 			Tags: pulumi.StringMap{
 * 				"Environment": pulumi.String("production"),
 * 			},
 * 			ViewerCertificate: &cloudfront.DistributionViewerCertificateArgs{
 * 				CloudfrontDefaultCertificate: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * The following example below creates a Cloudfront distribution with an origin group for failover routing:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const s3Distribution = new aws.cloudfront.Distribution("s3Distribution", {
 *     originGroups: [{
 *         originId: "groupS3",
 *         failoverCriteria: {
 *             statusCodes: [
 *                 403,
 *                 404,
 *                 500,
 *                 502,
 *             ],
 *         },
 *         members: [
 *             {
 *                 originId: "primaryS3",
 *             },
 *             {
 *                 originId: "failoverS3",
 *             },
 *         ],
 *     }],
 *     origins: [
 *         {
 *             domainName: aws_s3_bucket.primary.bucket_regional_domain_name,
 *             originId: "primaryS3",
 *             s3OriginConfig: {
 *                 originAccessIdentity: aws_cloudfront_origin_access_identity["default"].cloudfront_access_identity_path,
 *             },
 *         },
 *         {
 *             domainName: aws_s3_bucket.failover.bucket_regional_domain_name,
 *             originId: "failoverS3",
 *             s3OriginConfig: {
 *                 originAccessIdentity: aws_cloudfront_origin_access_identity["default"].cloudfront_access_identity_path,
 *             },
 *         },
 *     ],
 *     defaultCacheBehavior: {
 *         targetOriginId: "groupS3",
 *     },
 * });
 * // ... other configuration ...
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * s3_distribution = aws.cloudfront.Distribution("s3Distribution",
 *     origin_groups=[aws.cloudfront.DistributionOriginGroupArgs(
 *         origin_id="groupS3",
 *         failover_criteria=aws.cloudfront.DistributionOriginGroupFailoverCriteriaArgs(
 *             status_codes=[
 *                 403,
 *                 404,
 *                 500,
 *                 502,
 *             ],
 *         ),
 *         members=[
 *             aws.cloudfront.DistributionOriginGroupMemberArgs(
 *                 origin_id="primaryS3",
 *             ),
 *             aws.cloudfront.DistributionOriginGroupMemberArgs(
 *                 origin_id="failoverS3",
 *             ),
 *         ],
 *     )],
 *     origins=[
 *         aws.cloudfront.DistributionOriginArgs(
 *             domain_name=aws_s3_bucket["primary"]["bucket_regional_domain_name"],
 *             origin_id="primaryS3",
 *             s3_origin_config=aws.cloudfront.DistributionOriginS3OriginConfigArgs(
 *                 origin_access_identity=aws_cloudfront_origin_access_identity["default"]["cloudfront_access_identity_path"],
 *             ),
 *         ),
 *         aws.cloudfront.DistributionOriginArgs(
 *             domain_name=aws_s3_bucket["failover"]["bucket_regional_domain_name"],
 *             origin_id="failoverS3",
 *             s3_origin_config=aws.cloudfront.DistributionOriginS3OriginConfigArgs(
 *                 origin_access_identity=aws_cloudfront_origin_access_identity["default"]["cloudfront_access_identity_path"],
 *             ),
 *         ),
 *     ],
 *     default_cache_behavior=aws.cloudfront.DistributionDefaultCacheBehaviorArgs(
 *         target_origin_id="groupS3",
 *     ))
 * # ... other configuration ...
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var s3Distribution = new Aws.CloudFront.Distribution("s3Distribution", new Aws.CloudFront.DistributionArgs
 *         {
 *             OriginGroups = 
 *             {
 *                 new Aws.CloudFront.Inputs.DistributionOriginGroupArgs
 *                 {
 *                     OriginId = "groupS3",
 *                     FailoverCriteria = new Aws.CloudFront.Inputs.DistributionOriginGroupFailoverCriteriaArgs
 *                     {
 *                         StatusCodes = 
 *                         {
 *                             403,
 *                             404,
 *                             500,
 *                             502,
 *                         },
 *                     },
 *                     Members = 
 *                     {
 *                         new Aws.CloudFront.Inputs.DistributionOriginGroupMemberArgs
 *                         {
 *                             OriginId = "primaryS3",
 *                         },
 *                         new Aws.CloudFront.Inputs.DistributionOriginGroupMemberArgs
 *                         {
 *                             OriginId = "failoverS3",
 *                         },
 *                     },
 *                 },
 *             },
 *             Origins = 
 *             {
 *                 new Aws.CloudFront.Inputs.DistributionOriginArgs
 *                 {
 *                     DomainName = aws_s3_bucket.Primary.Bucket_regional_domain_name,
 *                     OriginId = "primaryS3",
 *                     S3OriginConfig = new Aws.CloudFront.Inputs.DistributionOriginS3OriginConfigArgs
 *                     {
 *                         OriginAccessIdentity = aws_cloudfront_origin_access_identity.Default.Cloudfront_access_identity_path,
 *                     },
 *                 },
 *                 new Aws.CloudFront.Inputs.DistributionOriginArgs
 *                 {
 *                     DomainName = aws_s3_bucket.Failover.Bucket_regional_domain_name,
 *                     OriginId = "failoverS3",
 *                     S3OriginConfig = new Aws.CloudFront.Inputs.DistributionOriginS3OriginConfigArgs
 *                     {
 *                         OriginAccessIdentity = aws_cloudfront_origin_access_identity.Default.Cloudfront_access_identity_path,
 *                     },
 *                 },
 *             },
 *             DefaultCacheBehavior = new Aws.CloudFront.Inputs.DistributionDefaultCacheBehaviorArgs
 *             {
 *                 TargetOriginId = "groupS3",
 *             },
 *         });
 *         // ... other configuration ...
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudfront"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudfront.NewDistribution(ctx, "s3Distribution", &cloudfront.DistributionArgs{
 * 			OriginGroups: cloudfront.DistributionOriginGroupArray{
 * 				&cloudfront.DistributionOriginGroupArgs{
 * 					OriginId: pulumi.String("groupS3"),
 * 					FailoverCriteria: &cloudfront.DistributionOriginGroupFailoverCriteriaArgs{
 * 						StatusCodes: pulumi.IntArray{
 * 							pulumi.Int(403),
 * 							pulumi.Int(404),
 * 							pulumi.Int(500),
 * 							pulumi.Int(502),
 * 						},
 * 					},
 * 					Members: cloudfront.DistributionOriginGroupMemberArray{
 * 						&cloudfront.DistributionOriginGroupMemberArgs{
 * 							OriginId: pulumi.String("primaryS3"),
 * 						},
 * 						&cloudfront.DistributionOriginGroupMemberArgs{
 * 							OriginId: pulumi.String("failoverS3"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Origins: cloudfront.DistributionOriginArray{
 * 				&cloudfront.DistributionOriginArgs{
 * 					DomainName: pulumi.Any(aws_s3_bucket.Primary.Bucket_regional_domain_name),
 * 					OriginId:   pulumi.String("primaryS3"),
 * 					S3OriginConfig: &cloudfront.DistributionOriginS3OriginConfigArgs{
 * 						OriginAccessIdentity: pulumi.Any(aws_cloudfront_origin_access_identity.Default.Cloudfront_access_identity_path),
 * 					},
 * 				},
 * 				&cloudfront.DistributionOriginArgs{
 * 					DomainName: pulumi.Any(aws_s3_bucket.Failover.Bucket_regional_domain_name),
 * 					OriginId:   pulumi.String("failoverS3"),
 * 					S3OriginConfig: &cloudfront.DistributionOriginS3OriginConfigArgs{
 * 						OriginAccessIdentity: pulumi.Any(aws_cloudfront_origin_access_identity.Default.Cloudfront_access_identity_path),
 * 					},
 * 				},
 * 			},
 * 			DefaultCacheBehavior: &cloudfront.DistributionDefaultCacheBehaviorArgs{
 * 				TargetOriginId: pulumi.String("groupS3"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Cloudfront Distributions can be imported using the `id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:cloudfront/distribution:Distribution distribution E74FTE3EXAMPLE
 * ```
 * 
 *  
 */
@ResourceType(type="aws:cloudfront/distribution:Distribution")
public class Distribution extends io.pulumi.resources.CustomResource {
    /**
     * Extra CNAMEs (alternate domain names), if any, for
     * this distribution.
     * 
     */
    @Export(name="aliases", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> aliases;

    /**
     * @return Extra CNAMEs (alternate domain names), if any, for
     * this distribution.
     * 
     */
    public Output</* @Nullable */ List<String>> getAliases() {
        return this.aliases;
    }
    /**
     * The ARN (Amazon Resource Name) for the distribution. For example: `arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5`, where `123456789012` is your AWS account ID.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN (Amazon Resource Name) for the distribution. For example: `arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5`, where `123456789012` is your AWS account ID.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Internal value used by CloudFront to allow future
     * updates to the distribution configuration.
     * 
     */
    @Export(name="callerReference", type=String.class, parameters={})
    private Output<String> callerReference;

    /**
     * @return Internal value used by CloudFront to allow future
     * updates to the distribution configuration.
     * 
     */
    public Output<String> getCallerReference() {
        return this.callerReference;
    }
    /**
     * Any comments you want to include about the
     * distribution.
     * 
     */
    @Export(name="comment", type=String.class, parameters={})
    private Output</* @Nullable */ String> comment;

    /**
     * @return Any comments you want to include about the
     * distribution.
     * 
     */
    public Output</* @Nullable */ String> getComment() {
        return this.comment;
    }
    /**
     * One or more custom error response elements (multiples allowed).
     * 
     */
    @Export(name="customErrorResponses", type=List.class, parameters={DistributionCustomErrorResponse.class})
    private Output</* @Nullable */ List<DistributionCustomErrorResponse>> customErrorResponses;

    /**
     * @return One or more custom error response elements (multiples allowed).
     * 
     */
    public Output</* @Nullable */ List<DistributionCustomErrorResponse>> getCustomErrorResponses() {
        return this.customErrorResponses;
    }
    /**
     * The default cache behavior for this distribution (maximum
     * one).
     * 
     */
    @Export(name="defaultCacheBehavior", type=DistributionDefaultCacheBehavior.class, parameters={})
    private Output<DistributionDefaultCacheBehavior> defaultCacheBehavior;

    /**
     * @return The default cache behavior for this distribution (maximum
     * one).
     * 
     */
    public Output<DistributionDefaultCacheBehavior> getDefaultCacheBehavior() {
        return this.defaultCacheBehavior;
    }
    /**
     * The object that you want CloudFront to
     * return (for example, index.html) when an end user requests the root URL.
     * 
     */
    @Export(name="defaultRootObject", type=String.class, parameters={})
    private Output</* @Nullable */ String> defaultRootObject;

    /**
     * @return The object that you want CloudFront to
     * return (for example, index.html) when an end user requests the root URL.
     * 
     */
    public Output</* @Nullable */ String> getDefaultRootObject() {
        return this.defaultRootObject;
    }
    /**
     * The DNS domain name of either the S3 bucket, or
     * web site of your custom origin.
     * 
     */
    @Export(name="domainName", type=String.class, parameters={})
    private Output<String> domainName;

    /**
     * @return The DNS domain name of either the S3 bucket, or
     * web site of your custom origin.
     * 
     */
    public Output<String> getDomainName() {
        return this.domainName;
    }
    /**
     * A flag that specifies whether Origin Shield is enabled.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output<Boolean> enabled;

    /**
     * @return A flag that specifies whether Origin Shield is enabled.
     * 
     */
    public Output<Boolean> getEnabled() {
        return this.enabled;
    }
    /**
     * The current version of the distribution's information. For example:
     * `E2QWRUHAPOMQZL`.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return The current version of the distribution's information. For example:
     * `E2QWRUHAPOMQZL`.
     * 
     */
    public Output<String> getEtag() {
        return this.etag;
    }
    /**
     * The CloudFront Route 53 zone ID that can be used to
     * route an [Alias Resource Record Set](http://docs.aws.amazon.com/Route53/latest/APIReference/CreateAliasRRSAPI.html) to. This attribute is simply an
     * alias for the zone ID `Z2FDTNDATAQYW2`.
     * 
     */
    @Export(name="hostedZoneId", type=String.class, parameters={})
    private Output<String> hostedZoneId;

    /**
     * @return The CloudFront Route 53 zone ID that can be used to
     * route an [Alias Resource Record Set](http://docs.aws.amazon.com/Route53/latest/APIReference/CreateAliasRRSAPI.html) to. This attribute is simply an
     * alias for the zone ID `Z2FDTNDATAQYW2`.
     * 
     */
    public Output<String> getHostedZoneId() {
        return this.hostedZoneId;
    }
    /**
     * The maximum HTTP version to support on the
     * distribution. Allowed values are `http1.1` and `http2`. The default is
     * `http2`.
     * 
     */
    @Export(name="httpVersion", type=String.class, parameters={})
    private Output</* @Nullable */ String> httpVersion;

    /**
     * @return The maximum HTTP version to support on the
     * distribution. Allowed values are `http1.1` and `http2`. The default is
     * `http2`.
     * 
     */
    public Output</* @Nullable */ String> getHttpVersion() {
        return this.httpVersion;
    }
    /**
     * The number of invalidation batches
     * currently in progress.
     * 
     */
    @Export(name="inProgressValidationBatches", type=Integer.class, parameters={})
    private Output<Integer> inProgressValidationBatches;

    /**
     * @return The number of invalidation batches
     * currently in progress.
     * 
     */
    public Output<Integer> getInProgressValidationBatches() {
        return this.inProgressValidationBatches;
    }
    /**
     * Whether the IPv6 is enabled for the distribution.
     * 
     */
    @Export(name="isIpv6Enabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isIpv6Enabled;

    /**
     * @return Whether the IPv6 is enabled for the distribution.
     * 
     */
    public Output</* @Nullable */ Boolean> getIsIpv6Enabled() {
        return this.isIpv6Enabled;
    }
    /**
     * The date and time the distribution was last modified.
     * 
     */
    @Export(name="lastModifiedTime", type=String.class, parameters={})
    private Output<String> lastModifiedTime;

    /**
     * @return The date and time the distribution was last modified.
     * 
     */
    public Output<String> getLastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * The logging
     * configuration that controls how logs are written
     * to your distribution (maximum one).
     * 
     */
    @Export(name="loggingConfig", type=DistributionLoggingConfig.class, parameters={})
    private Output</* @Nullable */ DistributionLoggingConfig> loggingConfig;

    /**
     * @return The logging
     * configuration that controls how logs are written
     * to your distribution (maximum one).
     * 
     */
    public Output</* @Nullable */ DistributionLoggingConfig> getLoggingConfig() {
        return this.loggingConfig;
    }
    /**
     * An ordered list of cache behaviors
     * resource for this distribution. List from top to bottom
     * in order of precedence. The topmost cache behavior will have precedence 0.
     * 
     */
    @Export(name="orderedCacheBehaviors", type=List.class, parameters={DistributionOrderedCacheBehavior.class})
    private Output</* @Nullable */ List<DistributionOrderedCacheBehavior>> orderedCacheBehaviors;

    /**
     * @return An ordered list of cache behaviors
     * resource for this distribution. List from top to bottom
     * in order of precedence. The topmost cache behavior will have precedence 0.
     * 
     */
    public Output</* @Nullable */ List<DistributionOrderedCacheBehavior>> getOrderedCacheBehaviors() {
        return this.orderedCacheBehaviors;
    }
    /**
     * One or more origin_group for this
     * distribution (multiples allowed).
     * 
     */
    @Export(name="originGroups", type=List.class, parameters={DistributionOriginGroup.class})
    private Output</* @Nullable */ List<DistributionOriginGroup>> originGroups;

    /**
     * @return One or more origin_group for this
     * distribution (multiples allowed).
     * 
     */
    public Output</* @Nullable */ List<DistributionOriginGroup>> getOriginGroups() {
        return this.originGroups;
    }
    /**
     * One or more origins for this
     * distribution (multiples allowed).
     * 
     */
    @Export(name="origins", type=List.class, parameters={DistributionOrigin.class})
    private Output<List<DistributionOrigin>> origins;

    /**
     * @return One or more origins for this
     * distribution (multiples allowed).
     * 
     */
    public Output<List<DistributionOrigin>> getOrigins() {
        return this.origins;
    }
    /**
     * The price class for this distribution. One of
     * `PriceClass_All`, `PriceClass_200`, `PriceClass_100`
     * 
     */
    @Export(name="priceClass", type=String.class, parameters={})
    private Output</* @Nullable */ String> priceClass;

    /**
     * @return The price class for this distribution. One of
     * `PriceClass_All`, `PriceClass_200`, `PriceClass_100`
     * 
     */
    public Output</* @Nullable */ String> getPriceClass() {
        return this.priceClass;
    }
    /**
     * The restriction
     * configuration for this distribution (maximum one).
     * 
     */
    @Export(name="restrictions", type=DistributionRestrictions.class, parameters={})
    private Output<DistributionRestrictions> restrictions;

    /**
     * @return The restriction
     * configuration for this distribution (maximum one).
     * 
     */
    public Output<DistributionRestrictions> getRestrictions() {
        return this.restrictions;
    }
    /**
     * Disables the distribution instead of
     * deleting it when destroying the resource. If this is set,
     * the distribution needs to be deleted manually afterwards. Default: `false`.
     * 
     */
    @Export(name="retainOnDelete", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> retainOnDelete;

    /**
     * @return Disables the distribution instead of
     * deleting it when destroying the resource. If this is set,
     * the distribution needs to be deleted manually afterwards. Default: `false`.
     * 
     */
    public Output</* @Nullable */ Boolean> getRetainOnDelete() {
        return this.retainOnDelete;
    }
    /**
     * The current status of the distribution. `Deployed` if the
     * distribution's information is fully propagated throughout the Amazon
     * CloudFront system.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The current status of the distribution. `Deployed` if the
     * distribution's information is fully propagated throughout the Amazon
     * CloudFront system.
     * 
     */
    public Output<String> getStatus() {
        return this.status;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * A list of key group IDs that CloudFront can use to validate signed URLs or signed cookies.
     * See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
     * 
     */
    @Export(name="trustedKeyGroups", type=List.class, parameters={DistributionTrustedKeyGroup.class})
    private Output<List<DistributionTrustedKeyGroup>> trustedKeyGroups;

    /**
     * @return A list of key group IDs that CloudFront can use to validate signed URLs or signed cookies.
     * See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
     * 
     */
    public Output<List<DistributionTrustedKeyGroup>> getTrustedKeyGroups() {
        return this.trustedKeyGroups;
    }
    /**
     * List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content.
     * See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
     * 
     */
    @Export(name="trustedSigners", type=List.class, parameters={DistributionTrustedSigner.class})
    private Output<List<DistributionTrustedSigner>> trustedSigners;

    /**
     * @return List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content.
     * See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
     * 
     */
    public Output<List<DistributionTrustedSigner>> getTrustedSigners() {
        return this.trustedSigners;
    }
    /**
     * The SSL
     * configuration for this distribution (maximum
     * one).
     * 
     */
    @Export(name="viewerCertificate", type=DistributionViewerCertificate.class, parameters={})
    private Output<DistributionViewerCertificate> viewerCertificate;

    /**
     * @return The SSL
     * configuration for this distribution (maximum
     * one).
     * 
     */
    public Output<DistributionViewerCertificate> getViewerCertificate() {
        return this.viewerCertificate;
    }
    /**
     * If enabled, the resource will wait for
     * the distribution status to change from `InProgress` to `Deployed`. Setting
     * this to`false` will skip the process. Default: `true`.
     * 
     */
    @Export(name="waitForDeployment", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> waitForDeployment;

    /**
     * @return If enabled, the resource will wait for
     * the distribution status to change from `InProgress` to `Deployed`. Setting
     * this to`false` will skip the process. Default: `true`.
     * 
     */
    public Output</* @Nullable */ Boolean> getWaitForDeployment() {
        return this.waitForDeployment;
    }
    /**
     * A unique identifier that specifies the AWS WAF web ACL,
     * if any, to associate with this distribution.
     * To specify a web ACL created using the latest version of AWS WAF (WAFv2), use the ACL ARN,
     * for example `aws_wafv2_web_acl.example.arn`. To specify a web
     * ACL created using AWS WAF Classic, use the ACL ID, for example `aws_waf_web_acl.example.id`.
     * The WAF Web ACL must exist in the WAF Global (CloudFront) region and the
     * credentials configuring this argument must have `waf:GetWebACL` permissions assigned.
     * 
     */
    @Export(name="webAclId", type=String.class, parameters={})
    private Output</* @Nullable */ String> webAclId;

    /**
     * @return A unique identifier that specifies the AWS WAF web ACL,
     * if any, to associate with this distribution.
     * To specify a web ACL created using the latest version of AWS WAF (WAFv2), use the ACL ARN,
     * for example `aws_wafv2_web_acl.example.arn`. To specify a web
     * ACL created using AWS WAF Classic, use the ACL ID, for example `aws_waf_web_acl.example.id`.
     * The WAF Web ACL must exist in the WAF Global (CloudFront) region and the
     * credentials configuring this argument must have `waf:GetWebACL` permissions assigned.
     * 
     */
    public Output</* @Nullable */ String> getWebAclId() {
        return this.webAclId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Distribution(String name) {
        this(name, DistributionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Distribution(String name, DistributionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Distribution(String name, DistributionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudfront/distribution:Distribution", name, args == null ? DistributionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Distribution(String name, Output<String> id, @Nullable DistributionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudfront/distribution:Distribution", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Distribution get(String name, Output<String> id, @Nullable DistributionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Distribution(name, id, state, options);
    }
}
