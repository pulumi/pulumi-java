// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.fsx.OpenZfsSnapshotArgs;
import io.pulumi.aws.fsx.inputs.OpenZfsSnapshotState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Manages an Amazon FSx for OpenZFS volume.
 * See the [FSx OpenZFS User Guide](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/what-is-fsx.html) for more information.
 * 
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Root volume Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleOpenZfsFileSystem = new aws.fsx.OpenZfsFileSystem("exampleOpenZfsFileSystem", {
 *     storageCapacity: 64,
 *     subnetIds: [aws_subnet.example.id],
 *     deploymentType: "SINGLE_AZ_1",
 *     throughputCapacity: 64,
 * });
 * const exampleOpenZfsSnapshot = new aws.fsx.OpenZfsSnapshot("exampleOpenZfsSnapshot", {volumeId: exampleOpenZfsFileSystem.rootVolumeId});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_open_zfs_file_system = aws.fsx.OpenZfsFileSystem("exampleOpenZfsFileSystem",
 *     storage_capacity=64,
 *     subnet_ids=[aws_subnet["example"]["id"]],
 *     deployment_type="SINGLE_AZ_1",
 *     throughput_capacity=64)
 * example_open_zfs_snapshot = aws.fsx.OpenZfsSnapshot("exampleOpenZfsSnapshot", volume_id=example_open_zfs_file_system.root_volume_id)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleOpenZfsFileSystem = new Aws.Fsx.OpenZfsFileSystem("exampleOpenZfsFileSystem", new Aws.Fsx.OpenZfsFileSystemArgs
 *         {
 *             StorageCapacity = 64,
 *             SubnetIds = 
 *             {
 *                 aws_subnet.Example.Id,
 *             },
 *             DeploymentType = "SINGLE_AZ_1",
 *             ThroughputCapacity = 64,
 *         });
 *         var exampleOpenZfsSnapshot = new Aws.Fsx.OpenZfsSnapshot("exampleOpenZfsSnapshot", new Aws.Fsx.OpenZfsSnapshotArgs
 *         {
 *             VolumeId = exampleOpenZfsFileSystem.RootVolumeId,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/fsx"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleOpenZfsFileSystem, err := fsx.NewOpenZfsFileSystem(ctx, "exampleOpenZfsFileSystem", &fsx.OpenZfsFileSystemArgs{
 * 			StorageCapacity: pulumi.Int(64),
 * 			SubnetIds: pulumi.String{
 * 				aws_subnet.Example.Id,
 * 			},
 * 			DeploymentType:     pulumi.String("SINGLE_AZ_1"),
 * 			ThroughputCapacity: pulumi.Int(64),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = fsx.NewOpenZfsSnapshot(ctx, "exampleOpenZfsSnapshot", &fsx.OpenZfsSnapshotArgs{
 * 			VolumeId: exampleOpenZfsFileSystem.RootVolumeId,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Child volume Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleOpenZfsFileSystem = new aws.fsx.OpenZfsFileSystem("exampleOpenZfsFileSystem", {
 *     storageCapacity: 64,
 *     subnetIds: [aws_subnet.example.id],
 *     deploymentType: "SINGLE_AZ_1",
 *     throughputCapacity: 64,
 * });
 * const exampleOpenZfsVolume = new aws.fsx.OpenZfsVolume("exampleOpenZfsVolume", {parentVolumeId: exampleOpenZfsFileSystem.rootVolumeId});
 * const exampleOpenZfsSnapshot = new aws.fsx.OpenZfsSnapshot("exampleOpenZfsSnapshot", {volumeId: exampleOpenZfsVolume.id});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_open_zfs_file_system = aws.fsx.OpenZfsFileSystem("exampleOpenZfsFileSystem",
 *     storage_capacity=64,
 *     subnet_ids=[aws_subnet["example"]["id"]],
 *     deployment_type="SINGLE_AZ_1",
 *     throughput_capacity=64)
 * example_open_zfs_volume = aws.fsx.OpenZfsVolume("exampleOpenZfsVolume", parent_volume_id=example_open_zfs_file_system.root_volume_id)
 * example_open_zfs_snapshot = aws.fsx.OpenZfsSnapshot("exampleOpenZfsSnapshot", volume_id=example_open_zfs_volume.id)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleOpenZfsFileSystem = new Aws.Fsx.OpenZfsFileSystem("exampleOpenZfsFileSystem", new Aws.Fsx.OpenZfsFileSystemArgs
 *         {
 *             StorageCapacity = 64,
 *             SubnetIds = 
 *             {
 *                 aws_subnet.Example.Id,
 *             },
 *             DeploymentType = "SINGLE_AZ_1",
 *             ThroughputCapacity = 64,
 *         });
 *         var exampleOpenZfsVolume = new Aws.Fsx.OpenZfsVolume("exampleOpenZfsVolume", new Aws.Fsx.OpenZfsVolumeArgs
 *         {
 *             ParentVolumeId = exampleOpenZfsFileSystem.RootVolumeId,
 *         });
 *         var exampleOpenZfsSnapshot = new Aws.Fsx.OpenZfsSnapshot("exampleOpenZfsSnapshot", new Aws.Fsx.OpenZfsSnapshotArgs
 *         {
 *             VolumeId = exampleOpenZfsVolume.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/fsx"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleOpenZfsFileSystem, err := fsx.NewOpenZfsFileSystem(ctx, "exampleOpenZfsFileSystem", &fsx.OpenZfsFileSystemArgs{
 * 			StorageCapacity: pulumi.Int(64),
 * 			SubnetIds: pulumi.String{
 * 				aws_subnet.Example.Id,
 * 			},
 * 			DeploymentType:     pulumi.String("SINGLE_AZ_1"),
 * 			ThroughputCapacity: pulumi.Int(64),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleOpenZfsVolume, err := fsx.NewOpenZfsVolume(ctx, "exampleOpenZfsVolume", &fsx.OpenZfsVolumeArgs{
 * 			ParentVolumeId: exampleOpenZfsFileSystem.RootVolumeId,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = fsx.NewOpenZfsSnapshot(ctx, "exampleOpenZfsSnapshot", &fsx.OpenZfsSnapshotArgs{
 * 			VolumeId: exampleOpenZfsVolume.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * FSx OpenZFS snapshot can be imported using the `id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:fsx/openZfsSnapshot:OpenZfsSnapshot example fs-543ab12b1ca672f33
 * ```
 * 
 *  
 */
@ResourceType(type="aws:fsx/openZfsSnapshot:OpenZfsSnapshot")
public class OpenZfsSnapshot extends io.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name of the snapshot.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name of the snapshot.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    @Export(name="creationTime", type=String.class, parameters={})
    private Output<String> creationTime;

    public Output<String> getCreationTime() {
        return this.creationTime;
    }
    /**
     * The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * A map of tags to assign to the file system. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copy_tags_to_backups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the file system. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copy_tags_to_backups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
     * 
     */
    public Output<Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The ID of the volume to snapshot. This can be the root volume or a child volume.
     * 
     */
    @Export(name="volumeId", type=String.class, parameters={})
    private Output<String> volumeId;

    /**
     * @return The ID of the volume to snapshot. This can be the root volume or a child volume.
     * 
     */
    public Output<String> getVolumeId() {
        return this.volumeId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OpenZfsSnapshot(String name) {
        this(name, OpenZfsSnapshotArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OpenZfsSnapshot(String name, OpenZfsSnapshotArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OpenZfsSnapshot(String name, OpenZfsSnapshotArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:fsx/openZfsSnapshot:OpenZfsSnapshot", name, args == null ? OpenZfsSnapshotArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private OpenZfsSnapshot(String name, Output<String> id, @Nullable OpenZfsSnapshotState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:fsx/openZfsSnapshot:OpenZfsSnapshot", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OpenZfsSnapshot get(String name, Output<String> id, @Nullable OpenZfsSnapshotState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new OpenZfsSnapshot(name, id, state, options);
    }
}
