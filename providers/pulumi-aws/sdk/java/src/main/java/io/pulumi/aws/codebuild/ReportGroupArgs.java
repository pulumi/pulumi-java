// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codebuild;

import io.pulumi.aws.codebuild.inputs.ReportGroupExportConfigArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReportGroupArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReportGroupArgs Empty = new ReportGroupArgs();

    /**
     * If `true`, deletes any reports that belong to a report group before deleting the report group. If `false`, you must delete any reports in the report group before deleting it. Default value is `false`.
     * 
     */
    @Import(name="deleteReports")
      private final @Nullable Output<Boolean> deleteReports;

    public Output<Boolean> getDeleteReports() {
        return this.deleteReports == null ? Output.empty() : this.deleteReports;
    }

    /**
     * Information about the destination where the raw data of this Report Group is exported. see Export Config documented below.
     * 
     */
    @Import(name="exportConfig", required=true)
      private final Output<ReportGroupExportConfigArgs> exportConfig;

    public Output<ReportGroupExportConfigArgs> getExportConfig() {
        return this.exportConfig;
    }

    /**
     * The name of a Report Group.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Key-value mapping of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The export configuration type. Valid values are `S3` and `NO_EXPORT`.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public ReportGroupArgs(
        @Nullable Output<Boolean> deleteReports,
        Output<ReportGroupExportConfigArgs> exportConfig,
        @Nullable Output<String> name,
        @Nullable Output<Map<String,String>> tags,
        Output<String> type) {
        this.deleteReports = deleteReports;
        this.exportConfig = Objects.requireNonNull(exportConfig, "expected parameter 'exportConfig' to be non-null");
        this.name = name;
        this.tags = tags;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ReportGroupArgs() {
        this.deleteReports = Output.empty();
        this.exportConfig = Output.empty();
        this.name = Output.empty();
        this.tags = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> deleteReports;
        private Output<ReportGroupExportConfigArgs> exportConfig;
        private @Nullable Output<String> name;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ReportGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteReports = defaults.deleteReports;
    	      this.exportConfig = defaults.exportConfig;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder deleteReports(@Nullable Output<Boolean> deleteReports) {
            this.deleteReports = deleteReports;
            return this;
        }

        public Builder deleteReports(@Nullable Boolean deleteReports) {
            this.deleteReports = Output.ofNullable(deleteReports);
            return this;
        }

        public Builder exportConfig(Output<ReportGroupExportConfigArgs> exportConfig) {
            this.exportConfig = Objects.requireNonNull(exportConfig);
            return this;
        }

        public Builder exportConfig(ReportGroupExportConfigArgs exportConfig) {
            this.exportConfig = Output.of(Objects.requireNonNull(exportConfig));
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public ReportGroupArgs build() {
            return new ReportGroupArgs(deleteReports, exportConfig, name, tags, type);
        }
    }
}
