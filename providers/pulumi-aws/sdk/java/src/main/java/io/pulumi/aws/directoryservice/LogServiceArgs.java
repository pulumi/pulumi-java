// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.directoryservice;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class LogServiceArgs extends io.pulumi.resources.ResourceArgs {

    public static final LogServiceArgs Empty = new LogServiceArgs();

    /**
     * The id of directory.
     * 
     */
    @InputImport(name="directoryId", required=true)
    private final Input<String> directoryId;

    public Input<String> getDirectoryId() {
        return this.directoryId;
    }

    /**
     * Name of the cloudwatch log group to which the logs should be published. The log group should be already created and the directory service principal should be provided with required permission to create stream and publish logs. Changing this value would delete the current subscription and create a new one. A directory can only have one log subscription at a time.
     * 
     */
    @InputImport(name="logGroupName", required=true)
    private final Input<String> logGroupName;

    public Input<String> getLogGroupName() {
        return this.logGroupName;
    }

    public LogServiceArgs(
        Input<String> directoryId,
        Input<String> logGroupName) {
        this.directoryId = Objects.requireNonNull(directoryId, "expected parameter 'directoryId' to be non-null");
        this.logGroupName = Objects.requireNonNull(logGroupName, "expected parameter 'logGroupName' to be non-null");
    }

    private LogServiceArgs() {
        this.directoryId = Input.empty();
        this.logGroupName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> directoryId;
        private Input<String> logGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(LogServiceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.directoryId = defaults.directoryId;
    	      this.logGroupName = defaults.logGroupName;
        }

        public Builder setDirectoryId(Input<String> directoryId) {
            this.directoryId = Objects.requireNonNull(directoryId);
            return this;
        }

        public Builder setDirectoryId(String directoryId) {
            this.directoryId = Input.of(Objects.requireNonNull(directoryId));
            return this;
        }

        public Builder setLogGroupName(Input<String> logGroupName) {
            this.logGroupName = Objects.requireNonNull(logGroupName);
            return this;
        }

        public Builder setLogGroupName(String logGroupName) {
            this.logGroupName = Input.of(Objects.requireNonNull(logGroupName));
            return this;
        }
        public LogServiceArgs build() {
            return new LogServiceArgs(directoryId, logGroupName);
        }
    }
}
