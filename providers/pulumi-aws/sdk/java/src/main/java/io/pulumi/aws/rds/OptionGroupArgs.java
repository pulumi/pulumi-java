// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds;

import io.pulumi.aws.rds.inputs.OptionGroupOptionArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OptionGroupArgs extends io.pulumi.resources.ResourceArgs {

    public static final OptionGroupArgs Empty = new OptionGroupArgs();

    /**
     * Specifies the name of the engine that this option group should be associated with.
     * 
     */
    @InputImport(name="engineName", required=true)
      private final Output<String> engineName;

    public Output<String> getEngineName() {
        return this.engineName;
    }

    /**
     * Specifies the major version of the engine that this option group should be associated with.
     * 
     */
    @InputImport(name="majorEngineVersion", required=true)
      private final Output<String> majorEngineVersion;

    public Output<String> getMajorEngineVersion() {
        return this.majorEngineVersion;
    }

    /**
     * The Name of the setting.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`. Must be lowercase, to match as it is stored in AWS.
     * 
     */
    @InputImport(name="namePrefix")
      private final @Nullable Output<String> namePrefix;

    public Output<String> getNamePrefix() {
        return this.namePrefix == null ? Output.empty() : this.namePrefix;
    }

    /**
     * The description of the option group. Defaults to "Managed by Pulumi".
     * 
     */
    @InputImport(name="optionGroupDescription")
      private final @Nullable Output<String> optionGroupDescription;

    public Output<String> getOptionGroupDescription() {
        return this.optionGroupDescription == null ? Output.empty() : this.optionGroupDescription;
    }

    /**
     * A list of Options to apply.
     * 
     */
    @InputImport(name="options")
      private final @Nullable Output<List<OptionGroupOptionArgs>> options;

    public Output<List<OptionGroupOptionArgs>> getOptions() {
        return this.options == null ? Output.empty() : this.options;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public OptionGroupArgs(
        Output<String> engineName,
        Output<String> majorEngineVersion,
        @Nullable Output<String> name,
        @Nullable Output<String> namePrefix,
        @Nullable Output<String> optionGroupDescription,
        @Nullable Output<List<OptionGroupOptionArgs>> options,
        @Nullable Output<Map<String,String>> tags) {
        this.engineName = Objects.requireNonNull(engineName, "expected parameter 'engineName' to be non-null");
        this.majorEngineVersion = Objects.requireNonNull(majorEngineVersion, "expected parameter 'majorEngineVersion' to be non-null");
        this.name = name;
        this.namePrefix = namePrefix;
        this.optionGroupDescription = optionGroupDescription == null ? Output.ofNullable("Managed by Pulumi") : optionGroupDescription;
        this.options = options;
        this.tags = tags;
    }

    private OptionGroupArgs() {
        this.engineName = Output.empty();
        this.majorEngineVersion = Output.empty();
        this.name = Output.empty();
        this.namePrefix = Output.empty();
        this.optionGroupDescription = Output.empty();
        this.options = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OptionGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> engineName;
        private Output<String> majorEngineVersion;
        private @Nullable Output<String> name;
        private @Nullable Output<String> namePrefix;
        private @Nullable Output<String> optionGroupDescription;
        private @Nullable Output<List<OptionGroupOptionArgs>> options;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(OptionGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.engineName = defaults.engineName;
    	      this.majorEngineVersion = defaults.majorEngineVersion;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.optionGroupDescription = defaults.optionGroupDescription;
    	      this.options = defaults.options;
    	      this.tags = defaults.tags;
        }

        public Builder engineName(Output<String> engineName) {
            this.engineName = Objects.requireNonNull(engineName);
            return this;
        }

        public Builder engineName(String engineName) {
            this.engineName = Output.of(Objects.requireNonNull(engineName));
            return this;
        }

        public Builder majorEngineVersion(Output<String> majorEngineVersion) {
            this.majorEngineVersion = Objects.requireNonNull(majorEngineVersion);
            return this;
        }

        public Builder majorEngineVersion(String majorEngineVersion) {
            this.majorEngineVersion = Output.of(Objects.requireNonNull(majorEngineVersion));
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }

        public Builder namePrefix(@Nullable String namePrefix) {
            this.namePrefix = Output.ofNullable(namePrefix);
            return this;
        }

        public Builder optionGroupDescription(@Nullable Output<String> optionGroupDescription) {
            this.optionGroupDescription = optionGroupDescription;
            return this;
        }

        public Builder optionGroupDescription(@Nullable String optionGroupDescription) {
            this.optionGroupDescription = Output.ofNullable(optionGroupDescription);
            return this;
        }

        public Builder options(@Nullable Output<List<OptionGroupOptionArgs>> options) {
            this.options = options;
            return this;
        }

        public Builder options(@Nullable List<OptionGroupOptionArgs> options) {
            this.options = Output.ofNullable(options);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public OptionGroupArgs build() {
            return new OptionGroupArgs(engineName, majorEngineVersion, name, namePrefix, optionGroupDescription, options, tags);
        }
    }
}
