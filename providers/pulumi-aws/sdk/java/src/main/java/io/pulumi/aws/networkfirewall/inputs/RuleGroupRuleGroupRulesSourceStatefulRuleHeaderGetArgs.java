// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.networkfirewall.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class RuleGroupRuleGroupRulesSourceStatefulRuleHeaderGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final RuleGroupRuleGroupRulesSourceStatefulRuleHeaderGetArgs Empty = new RuleGroupRuleGroupRulesSourceStatefulRuleHeaderGetArgs();

    /**
     * The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify `ANY`.
     * 
     */
    @InputImport(name="destination", required=true)
      private final Input<String> destination;

    public Input<String> getDestination() {
        return this.destination;
    }

    /**
     * The destination port to inspect for. To match with any address, specify `ANY`.
     * 
     */
    @InputImport(name="destinationPort", required=true)
      private final Input<String> destinationPort;

    public Input<String> getDestinationPort() {
        return this.destinationPort;
    }

    /**
     * The direction of traffic flow to inspect. Valid values: `ANY` or `FORWARD`.
     * 
     */
    @InputImport(name="direction", required=true)
      private final Input<String> direction;

    public Input<String> getDirection() {
        return this.direction;
    }

    /**
     * The protocol to inspect. Valid values: `IP`, `TCP`, `UDP`, `ICMP`, `HTTP`, `FTP`, `TLS`, `SMB`, `DNS`, `DCERPC`, `SSH`, `SMTP`, `IMAP`, `MSN`, `KRB5`, `IKEV2`, `TFTP`, `NTP`, `DHCP`.
     * 
     */
    @InputImport(name="protocol", required=true)
      private final Input<String> protocol;

    public Input<String> getProtocol() {
        return this.protocol;
    }

    /**
     * The source IP address or address range for, in CIDR notation. To match with any address, specify `ANY`.
     * 
     */
    @InputImport(name="source", required=true)
      private final Input<String> source;

    public Input<String> getSource() {
        return this.source;
    }

    /**
     * The source port to inspect for. To match with any address, specify `ANY`.
     * 
     */
    @InputImport(name="sourcePort", required=true)
      private final Input<String> sourcePort;

    public Input<String> getSourcePort() {
        return this.sourcePort;
    }

    public RuleGroupRuleGroupRulesSourceStatefulRuleHeaderGetArgs(
        Input<String> destination,
        Input<String> destinationPort,
        Input<String> direction,
        Input<String> protocol,
        Input<String> source,
        Input<String> sourcePort) {
        this.destination = Objects.requireNonNull(destination, "expected parameter 'destination' to be non-null");
        this.destinationPort = Objects.requireNonNull(destinationPort, "expected parameter 'destinationPort' to be non-null");
        this.direction = Objects.requireNonNull(direction, "expected parameter 'direction' to be non-null");
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
        this.source = Objects.requireNonNull(source, "expected parameter 'source' to be non-null");
        this.sourcePort = Objects.requireNonNull(sourcePort, "expected parameter 'sourcePort' to be non-null");
    }

    private RuleGroupRuleGroupRulesSourceStatefulRuleHeaderGetArgs() {
        this.destination = Input.empty();
        this.destinationPort = Input.empty();
        this.direction = Input.empty();
        this.protocol = Input.empty();
        this.source = Input.empty();
        this.sourcePort = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleGroupRuleGroupRulesSourceStatefulRuleHeaderGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> destination;
        private Input<String> destinationPort;
        private Input<String> direction;
        private Input<String> protocol;
        private Input<String> source;
        private Input<String> sourcePort;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleGroupRuleGroupRulesSourceStatefulRuleHeaderGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destination = defaults.destination;
    	      this.destinationPort = defaults.destinationPort;
    	      this.direction = defaults.direction;
    	      this.protocol = defaults.protocol;
    	      this.source = defaults.source;
    	      this.sourcePort = defaults.sourcePort;
        }

        public Builder destination(Input<String> destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }

        public Builder destination(String destination) {
            this.destination = Input.of(Objects.requireNonNull(destination));
            return this;
        }

        public Builder destinationPort(Input<String> destinationPort) {
            this.destinationPort = Objects.requireNonNull(destinationPort);
            return this;
        }

        public Builder destinationPort(String destinationPort) {
            this.destinationPort = Input.of(Objects.requireNonNull(destinationPort));
            return this;
        }

        public Builder direction(Input<String> direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }

        public Builder direction(String direction) {
            this.direction = Input.of(Objects.requireNonNull(direction));
            return this;
        }

        public Builder protocol(Input<String> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }

        public Builder protocol(String protocol) {
            this.protocol = Input.of(Objects.requireNonNull(protocol));
            return this;
        }

        public Builder source(Input<String> source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }

        public Builder source(String source) {
            this.source = Input.of(Objects.requireNonNull(source));
            return this;
        }

        public Builder sourcePort(Input<String> sourcePort) {
            this.sourcePort = Objects.requireNonNull(sourcePort);
            return this;
        }

        public Builder sourcePort(String sourcePort) {
            this.sourcePort = Input.of(Objects.requireNonNull(sourcePort));
            return this;
        }
        public RuleGroupRuleGroupRulesSourceStatefulRuleHeaderGetArgs build() {
            return new RuleGroupRuleGroupRulesSourceStatefulRuleHeaderGetArgs(destination, destinationPort, direction, protocol, source, sourcePort);
        }
    }
}
