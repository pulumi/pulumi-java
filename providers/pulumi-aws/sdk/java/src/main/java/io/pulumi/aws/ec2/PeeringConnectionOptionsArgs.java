// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.ec2.inputs.PeeringConnectionOptionsAccepterArgs;
import io.pulumi.aws.ec2.inputs.PeeringConnectionOptionsRequesterArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PeeringConnectionOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final PeeringConnectionOptionsArgs Empty = new PeeringConnectionOptionsArgs();

    /**
     * An optional configuration block that allows for [VPC Peering Connection]
     * (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     * 
     */
    @InputImport(name="accepter")
      private final @Nullable Input<PeeringConnectionOptionsAccepterArgs> accepter;

    public Input<PeeringConnectionOptionsAccepterArgs> getAccepter() {
        return this.accepter == null ? Input.empty() : this.accepter;
    }

    /**
     * A optional configuration block that allows for [VPC Peering Connection]
     * (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     * 
     */
    @InputImport(name="requester")
      private final @Nullable Input<PeeringConnectionOptionsRequesterArgs> requester;

    public Input<PeeringConnectionOptionsRequesterArgs> getRequester() {
        return this.requester == null ? Input.empty() : this.requester;
    }

    /**
     * The ID of the requester VPC peering connection.
     * 
     */
    @InputImport(name="vpcPeeringConnectionId", required=true)
      private final Input<String> vpcPeeringConnectionId;

    public Input<String> getVpcPeeringConnectionId() {
        return this.vpcPeeringConnectionId;
    }

    public PeeringConnectionOptionsArgs(
        @Nullable Input<PeeringConnectionOptionsAccepterArgs> accepter,
        @Nullable Input<PeeringConnectionOptionsRequesterArgs> requester,
        Input<String> vpcPeeringConnectionId) {
        this.accepter = accepter;
        this.requester = requester;
        this.vpcPeeringConnectionId = Objects.requireNonNull(vpcPeeringConnectionId, "expected parameter 'vpcPeeringConnectionId' to be non-null");
    }

    private PeeringConnectionOptionsArgs() {
        this.accepter = Input.empty();
        this.requester = Input.empty();
        this.vpcPeeringConnectionId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PeeringConnectionOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<PeeringConnectionOptionsAccepterArgs> accepter;
        private @Nullable Input<PeeringConnectionOptionsRequesterArgs> requester;
        private Input<String> vpcPeeringConnectionId;

        public Builder() {
    	      // Empty
        }

        public Builder(PeeringConnectionOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepter = defaults.accepter;
    	      this.requester = defaults.requester;
    	      this.vpcPeeringConnectionId = defaults.vpcPeeringConnectionId;
        }

        public Builder accepter(@Nullable Input<PeeringConnectionOptionsAccepterArgs> accepter) {
            this.accepter = accepter;
            return this;
        }

        public Builder accepter(@Nullable PeeringConnectionOptionsAccepterArgs accepter) {
            this.accepter = Input.ofNullable(accepter);
            return this;
        }

        public Builder requester(@Nullable Input<PeeringConnectionOptionsRequesterArgs> requester) {
            this.requester = requester;
            return this;
        }

        public Builder requester(@Nullable PeeringConnectionOptionsRequesterArgs requester) {
            this.requester = Input.ofNullable(requester);
            return this;
        }

        public Builder vpcPeeringConnectionId(Input<String> vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = Objects.requireNonNull(vpcPeeringConnectionId);
            return this;
        }

        public Builder vpcPeeringConnectionId(String vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = Input.of(Objects.requireNonNull(vpcPeeringConnectionId));
            return this;
        }
        public PeeringConnectionOptionsArgs build() {
            return new PeeringConnectionOptionsArgs(accepter, requester, vpcPeeringConnectionId);
        }
    }
}
