// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.rds.GlobalClusterArgs;
import io.pulumi.aws.rds.inputs.GlobalClusterState;
import io.pulumi.aws.rds.outputs.GlobalClusterGlobalClusterMember;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Manages an RDS Global Cluster, which is an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem.
 * 
 * More information about Aurora global databases can be found in the [Aurora User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database-creating).
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### New MySQL Global Cluster
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.rds.GlobalCluster("example", {
 *     globalClusterIdentifier: "global-test",
 *     engine: "aurora",
 *     engineVersion: "5.6.mysql_aurora.1.22.2",
 *     databaseName: "example_db",
 * });
 * const primaryCluster = new aws.rds.Cluster("primaryCluster", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     clusterIdentifier: "test-primary-cluster",
 *     masterUsername: "username",
 *     masterPassword: "somepass123",
 *     databaseName: "example_db",
 *     globalClusterIdentifier: example.id,
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.primary,
 * });
 * const primaryClusterInstance = new aws.rds.ClusterInstance("primaryClusterInstance", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     identifier: "test-primary-cluster-instance",
 *     clusterIdentifier: primaryCluster.id,
 *     instanceClass: "db.r4.large",
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.primary,
 * });
 * const secondaryCluster = new aws.rds.Cluster("secondaryCluster", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     clusterIdentifier: "test-secondary-cluster",
 *     globalClusterIdentifier: example.id,
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.secondary,
 * });
 * const secondaryClusterInstance = new aws.rds.ClusterInstance("secondaryClusterInstance", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     identifier: "test-secondary-cluster-instance",
 *     clusterIdentifier: secondaryCluster.id,
 *     instanceClass: "db.r4.large",
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.secondary,
 *     dependsOn: [primaryClusterInstance],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.rds.GlobalCluster("example",
 *     global_cluster_identifier="global-test",
 *     engine="aurora",
 *     engine_version="5.6.mysql_aurora.1.22.2",
 *     database_name="example_db")
 * primary_cluster = aws.rds.Cluster("primaryCluster",
 *     engine=example.engine,
 *     engine_version=example.engine_version,
 *     cluster_identifier="test-primary-cluster",
 *     master_username="username",
 *     master_password="somepass123",
 *     database_name="example_db",
 *     global_cluster_identifier=example.id,
 *     db_subnet_group_name="default",
 *     opts=pulumi.ResourceOptions(provider=aws["primary"]))
 * primary_cluster_instance = aws.rds.ClusterInstance("primaryClusterInstance",
 *     engine=example.engine,
 *     engine_version=example.engine_version,
 *     identifier="test-primary-cluster-instance",
 *     cluster_identifier=primary_cluster.id,
 *     instance_class="db.r4.large",
 *     db_subnet_group_name="default",
 *     opts=pulumi.ResourceOptions(provider=aws["primary"]))
 * secondary_cluster = aws.rds.Cluster("secondaryCluster",
 *     engine=example.engine,
 *     engine_version=example.engine_version,
 *     cluster_identifier="test-secondary-cluster",
 *     global_cluster_identifier=example.id,
 *     db_subnet_group_name="default",
 *     opts=pulumi.ResourceOptions(provider=aws["secondary"]))
 * secondary_cluster_instance = aws.rds.ClusterInstance("secondaryClusterInstance",
 *     engine=example.engine,
 *     engine_version=example.engine_version,
 *     identifier="test-secondary-cluster-instance",
 *     cluster_identifier=secondary_cluster.id,
 *     instance_class="db.r4.large",
 *     db_subnet_group_name="default",
 *     opts=pulumi.ResourceOptions(provider=aws["secondary"],
 *         depends_on=[primary_cluster_instance]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Rds.GlobalCluster("example", new Aws.Rds.GlobalClusterArgs
 *         {
 *             GlobalClusterIdentifier = "global-test",
 *             Engine = "aurora",
 *             EngineVersion = "5.6.mysql_aurora.1.22.2",
 *             DatabaseName = "example_db",
 *         });
 *         var primaryCluster = new Aws.Rds.Cluster("primaryCluster", new Aws.Rds.ClusterArgs
 *         {
 *             Engine = example.Engine,
 *             EngineVersion = example.EngineVersion,
 *             ClusterIdentifier = "test-primary-cluster",
 *             MasterUsername = "username",
 *             MasterPassword = "somepass123",
 *             DatabaseName = "example_db",
 *             GlobalClusterIdentifier = example.Id,
 *             DbSubnetGroupName = "default",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Primary,
 *         });
 *         var primaryClusterInstance = new Aws.Rds.ClusterInstance("primaryClusterInstance", new Aws.Rds.ClusterInstanceArgs
 *         {
 *             Engine = example.Engine,
 *             EngineVersion = example.EngineVersion,
 *             Identifier = "test-primary-cluster-instance",
 *             ClusterIdentifier = primaryCluster.Id,
 *             InstanceClass = "db.r4.large",
 *             DbSubnetGroupName = "default",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Primary,
 *         });
 *         var secondaryCluster = new Aws.Rds.Cluster("secondaryCluster", new Aws.Rds.ClusterArgs
 *         {
 *             Engine = example.Engine,
 *             EngineVersion = example.EngineVersion,
 *             ClusterIdentifier = "test-secondary-cluster",
 *             GlobalClusterIdentifier = example.Id,
 *             DbSubnetGroupName = "default",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Secondary,
 *         });
 *         var secondaryClusterInstance = new Aws.Rds.ClusterInstance("secondaryClusterInstance", new Aws.Rds.ClusterInstanceArgs
 *         {
 *             Engine = example.Engine,
 *             EngineVersion = example.EngineVersion,
 *             Identifier = "test-secondary-cluster-instance",
 *             ClusterIdentifier = secondaryCluster.Id,
 *             InstanceClass = "db.r4.large",
 *             DbSubnetGroupName = "default",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Secondary,
 *             DependsOn = 
 *             {
 *                 primaryClusterInstance,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/rds"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		example, err := rds.NewGlobalCluster(ctx, "example", &rds.GlobalClusterArgs{
 * 			GlobalClusterIdentifier: pulumi.String("global-test"),
 * 			Engine:                  pulumi.String("aurora"),
 * 			EngineVersion:           pulumi.String("5.6.mysql_aurora.1.22.2"),
 * 			DatabaseName:            pulumi.String("example_db"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		primaryCluster, err := rds.NewCluster(ctx, "primaryCluster", &rds.ClusterArgs{
 * 			Engine:                  example.Engine,
 * 			EngineVersion:           example.EngineVersion,
 * 			ClusterIdentifier:       pulumi.String("test-primary-cluster"),
 * 			MasterUsername:          pulumi.String("username"),
 * 			MasterPassword:          pulumi.String("somepass123"),
 * 			DatabaseName:            pulumi.String("example_db"),
 * 			GlobalClusterIdentifier: example.ID(),
 * 			DbSubnetGroupName:       pulumi.String("default"),
 * 		}, pulumi.Provider(aws.Primary))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		primaryClusterInstance, err := rds.NewClusterInstance(ctx, "primaryClusterInstance", &rds.ClusterInstanceArgs{
 * 			Engine:            example.Engine,
 * 			EngineVersion:     example.EngineVersion,
 * 			Identifier:        pulumi.String("test-primary-cluster-instance"),
 * 			ClusterIdentifier: primaryCluster.ID(),
 * 			InstanceClass:     pulumi.String("db.r4.large"),
 * 			DbSubnetGroupName: pulumi.String("default"),
 * 		}, pulumi.Provider(aws.Primary))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		secondaryCluster, err := rds.NewCluster(ctx, "secondaryCluster", &rds.ClusterArgs{
 * 			Engine:                  example.Engine,
 * 			EngineVersion:           example.EngineVersion,
 * 			ClusterIdentifier:       pulumi.String("test-secondary-cluster"),
 * 			GlobalClusterIdentifier: example.ID(),
 * 			DbSubnetGroupName:       pulumi.String("default"),
 * 		}, pulumi.Provider(aws.Secondary))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = rds.NewClusterInstance(ctx, "secondaryClusterInstance", &rds.ClusterInstanceArgs{
 * 			Engine:            example.Engine,
 * 			EngineVersion:     example.EngineVersion,
 * 			Identifier:        pulumi.String("test-secondary-cluster-instance"),
 * 			ClusterIdentifier: secondaryCluster.ID(),
 * 			InstanceClass:     pulumi.String("db.r4.large"),
 * 			DbSubnetGroupName: pulumi.String("default"),
 * 		}, pulumi.Provider(aws.Secondary), pulumi.DependsOn([]pulumi.Resource{
 * 			primaryClusterInstance,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### New PostgreSQL Global Cluster
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const primary = new aws.Provider("primary", {region: "us-east-2"});
 * const secondary = new aws.Provider("secondary", {region: "us-east-1"});
 * const example = new aws.rds.GlobalCluster("example", {
 *     globalClusterIdentifier: "global-test",
 *     engine: "aurora-postgresql",
 *     engineVersion: "11.9",
 *     databaseName: "example_db",
 * });
 * const primaryCluster = new aws.rds.Cluster("primaryCluster", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     clusterIdentifier: "test-primary-cluster",
 *     masterUsername: "username",
 *     masterPassword: "somepass123",
 *     databaseName: "example_db",
 *     globalClusterIdentifier: example.id,
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.primary,
 * });
 * const primaryClusterInstance = new aws.rds.ClusterInstance("primaryClusterInstance", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     identifier: "test-primary-cluster-instance",
 *     clusterIdentifier: primaryCluster.id,
 *     instanceClass: "db.r4.large",
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.primary,
 * });
 * const secondaryCluster = new aws.rds.Cluster("secondaryCluster", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     clusterIdentifier: "test-secondary-cluster",
 *     globalClusterIdentifier: example.id,
 *     skipFinalSnapshot: true,
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.secondary,
 *     dependsOn: [primaryClusterInstance],
 * });
 * const secondaryClusterInstance = new aws.rds.ClusterInstance("secondaryClusterInstance", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     identifier: "test-secondary-cluster-instance",
 *     clusterIdentifier: secondaryCluster.id,
 *     instanceClass: "db.r4.large",
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.secondary,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * import pulumi_pulumi as pulumi
 * 
 * primary = pulumi.providers.Aws("primary", region="us-east-2")
 * secondary = pulumi.providers.Aws("secondary", region="us-east-1")
 * example = aws.rds.GlobalCluster("example",
 *     global_cluster_identifier="global-test",
 *     engine="aurora-postgresql",
 *     engine_version="11.9",
 *     database_name="example_db")
 * primary_cluster = aws.rds.Cluster("primaryCluster",
 *     engine=example.engine,
 *     engine_version=example.engine_version,
 *     cluster_identifier="test-primary-cluster",
 *     master_username="username",
 *     master_password="somepass123",
 *     database_name="example_db",
 *     global_cluster_identifier=example.id,
 *     db_subnet_group_name="default",
 *     opts=pulumi.ResourceOptions(provider=aws["primary"]))
 * primary_cluster_instance = aws.rds.ClusterInstance("primaryClusterInstance",
 *     engine=example.engine,
 *     engine_version=example.engine_version,
 *     identifier="test-primary-cluster-instance",
 *     cluster_identifier=primary_cluster.id,
 *     instance_class="db.r4.large",
 *     db_subnet_group_name="default",
 *     opts=pulumi.ResourceOptions(provider=aws["primary"]))
 * secondary_cluster = aws.rds.Cluster("secondaryCluster",
 *     engine=example.engine,
 *     engine_version=example.engine_version,
 *     cluster_identifier="test-secondary-cluster",
 *     global_cluster_identifier=example.id,
 *     skip_final_snapshot=True,
 *     db_subnet_group_name="default",
 *     opts=pulumi.ResourceOptions(provider=aws["secondary"],
 *         depends_on=[primary_cluster_instance]))
 * secondary_cluster_instance = aws.rds.ClusterInstance("secondaryClusterInstance",
 *     engine=example.engine,
 *     engine_version=example.engine_version,
 *     identifier="test-secondary-cluster-instance",
 *     cluster_identifier=secondary_cluster.id,
 *     instance_class="db.r4.large",
 *     db_subnet_group_name="default",
 *     opts=pulumi.ResourceOptions(provider=aws["secondary"]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var primary = new Aws.Provider("primary", new Aws.ProviderArgs
 *         {
 *             Region = "us-east-2",
 *         });
 *         var secondary = new Aws.Provider("secondary", new Aws.ProviderArgs
 *         {
 *             Region = "us-east-1",
 *         });
 *         var example = new Aws.Rds.GlobalCluster("example", new Aws.Rds.GlobalClusterArgs
 *         {
 *             GlobalClusterIdentifier = "global-test",
 *             Engine = "aurora-postgresql",
 *             EngineVersion = "11.9",
 *             DatabaseName = "example_db",
 *         });
 *         var primaryCluster = new Aws.Rds.Cluster("primaryCluster", new Aws.Rds.ClusterArgs
 *         {
 *             Engine = example.Engine,
 *             EngineVersion = example.EngineVersion,
 *             ClusterIdentifier = "test-primary-cluster",
 *             MasterUsername = "username",
 *             MasterPassword = "somepass123",
 *             DatabaseName = "example_db",
 *             GlobalClusterIdentifier = example.Id,
 *             DbSubnetGroupName = "default",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Primary,
 *         });
 *         var primaryClusterInstance = new Aws.Rds.ClusterInstance("primaryClusterInstance", new Aws.Rds.ClusterInstanceArgs
 *         {
 *             Engine = example.Engine,
 *             EngineVersion = example.EngineVersion,
 *             Identifier = "test-primary-cluster-instance",
 *             ClusterIdentifier = primaryCluster.Id,
 *             InstanceClass = "db.r4.large",
 *             DbSubnetGroupName = "default",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Primary,
 *         });
 *         var secondaryCluster = new Aws.Rds.Cluster("secondaryCluster", new Aws.Rds.ClusterArgs
 *         {
 *             Engine = example.Engine,
 *             EngineVersion = example.EngineVersion,
 *             ClusterIdentifier = "test-secondary-cluster",
 *             GlobalClusterIdentifier = example.Id,
 *             SkipFinalSnapshot = true,
 *             DbSubnetGroupName = "default",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Secondary,
 *             DependsOn = 
 *             {
 *                 primaryClusterInstance,
 *             },
 *         });
 *         var secondaryClusterInstance = new Aws.Rds.ClusterInstance("secondaryClusterInstance", new Aws.Rds.ClusterInstanceArgs
 *         {
 *             Engine = example.Engine,
 *             EngineVersion = example.EngineVersion,
 *             Identifier = "test-secondary-cluster-instance",
 *             ClusterIdentifier = secondaryCluster.Id,
 *             InstanceClass = "db.r4.large",
 *             DbSubnetGroupName = "default",
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Secondary,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/providers"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/rds"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := providers.Newaws(ctx, "primary", &providers.awsArgs{
 * 			Region: "us-east-2",
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = providers.Newaws(ctx, "secondary", &providers.awsArgs{
 * 			Region: "us-east-1",
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		example, err := rds.NewGlobalCluster(ctx, "example", &rds.GlobalClusterArgs{
 * 			GlobalClusterIdentifier: pulumi.String("global-test"),
 * 			Engine:                  pulumi.String("aurora-postgresql"),
 * 			EngineVersion:           pulumi.String("11.9"),
 * 			DatabaseName:            pulumi.String("example_db"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		primaryCluster, err := rds.NewCluster(ctx, "primaryCluster", &rds.ClusterArgs{
 * 			Engine:                  example.Engine,
 * 			EngineVersion:           example.EngineVersion,
 * 			ClusterIdentifier:       pulumi.String("test-primary-cluster"),
 * 			MasterUsername:          pulumi.String("username"),
 * 			MasterPassword:          pulumi.String("somepass123"),
 * 			DatabaseName:            pulumi.String("example_db"),
 * 			GlobalClusterIdentifier: example.ID(),
 * 			DbSubnetGroupName:       pulumi.String("default"),
 * 		}, pulumi.Provider(aws.Primary))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		primaryClusterInstance, err := rds.NewClusterInstance(ctx, "primaryClusterInstance", &rds.ClusterInstanceArgs{
 * 			Engine:            example.Engine,
 * 			EngineVersion:     example.EngineVersion,
 * 			Identifier:        pulumi.String("test-primary-cluster-instance"),
 * 			ClusterIdentifier: primaryCluster.ID(),
 * 			InstanceClass:     pulumi.String("db.r4.large"),
 * 			DbSubnetGroupName: pulumi.String("default"),
 * 		}, pulumi.Provider(aws.Primary))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		secondaryCluster, err := rds.NewCluster(ctx, "secondaryCluster", &rds.ClusterArgs{
 * 			Engine:                  example.Engine,
 * 			EngineVersion:           example.EngineVersion,
 * 			ClusterIdentifier:       pulumi.String("test-secondary-cluster"),
 * 			GlobalClusterIdentifier: example.ID(),
 * 			SkipFinalSnapshot:       pulumi.Bool(true),
 * 			DbSubnetGroupName:       pulumi.String("default"),
 * 		}, pulumi.Provider(aws.Secondary), pulumi.DependsOn([]pulumi.Resource{
 * 			primaryClusterInstance,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = rds.NewClusterInstance(ctx, "secondaryClusterInstance", &rds.ClusterInstanceArgs{
 * 			Engine:            example.Engine,
 * 			EngineVersion:     example.EngineVersion,
 * 			Identifier:        pulumi.String("test-secondary-cluster-instance"),
 * 			ClusterIdentifier: secondaryCluster.ID(),
 * 			InstanceClass:     pulumi.String("db.r4.large"),
 * 			DbSubnetGroupName: pulumi.String("default"),
 * 		}, pulumi.Provider(aws.Secondary))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### New Global Cluster From Existing DB Cluster
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * // ... other configuration ...
 * const exampleCluster = new aws.rds.Cluster("exampleCluster", {});
 * const exampleGlobalCluster = new aws.rds.GlobalCluster("exampleGlobalCluster", {
 *     forceDestroy: true,
 *     globalClusterIdentifier: "example",
 *     sourceDbClusterIdentifier: exampleCluster.arn,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * # ... other configuration ...
 * example_cluster = aws.rds.Cluster("exampleCluster")
 * example_global_cluster = aws.rds.GlobalCluster("exampleGlobalCluster",
 *     force_destroy=True,
 *     global_cluster_identifier="example",
 *     source_db_cluster_identifier=example_cluster.arn)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         // ... other configuration ...
 *         var exampleCluster = new Aws.Rds.Cluster("exampleCluster", new Aws.Rds.ClusterArgs
 *         {
 *         });
 *         var exampleGlobalCluster = new Aws.Rds.GlobalCluster("exampleGlobalCluster", new Aws.Rds.GlobalClusterArgs
 *         {
 *             ForceDestroy = true,
 *             GlobalClusterIdentifier = "example",
 *             SourceDbClusterIdentifier = exampleCluster.Arn,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/rds"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleCluster, err := rds.NewCluster(ctx, "exampleCluster", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = rds.NewGlobalCluster(ctx, "exampleGlobalCluster", &rds.GlobalClusterArgs{
 * 			ForceDestroy:              pulumi.Bool(true),
 * 			GlobalClusterIdentifier:   pulumi.String("example"),
 * 			SourceDbClusterIdentifier: exampleCluster.Arn,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * `aws_rds_global_cluster` can be imported by using the RDS Global Cluster identifier, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:rds/globalCluster:GlobalCluster example example
 * ```
 * 
 *  Certain resource arguments, like `force_destroy`, only exist within this provider. If the argument is set in the the provider configuration on an imported resource, This provider will show a difference on the first plan after import to update the state value. This change is safe to apply immediately so the state matches the desired configuration. Certain resource arguments, like `source_db_cluster_identifier`, do not have an API method for reading the information after creation. If the argument is set in the provider configuration on an imported resource, the provider will always show a difference. To workaround this behavior, either omit the argument from the the provider configuration or use `ignore_changes` to hide the difference, e.g. terraform resource "aws_rds_global_cluster" "example" {
 * 
 *  # ... other configuration ...
 * 
 *  # There is no API for reading source_db_cluster_identifier
 * 
 *  lifecycle {
 * 
 * 
 * 
 *  ignore_changes = [source_db_cluster_identifier]
 * 
 *  } } 
 */
@ResourceType(type="aws:rds/globalCluster:GlobalCluster")
public class GlobalCluster extends io.pulumi.resources.CustomResource {
    /**
     * RDS Global Cluster Amazon Resource Name (ARN)
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return RDS Global Cluster Amazon Resource Name (ARN)
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Name for an automatically created database on cluster creation.
     * 
     */
    @Export(name="databaseName", type=String.class, parameters={})
    private Output</* @Nullable */ String> databaseName;

    /**
     * @return Name for an automatically created database on cluster creation.
     * 
     */
    public Output</* @Nullable */ String> getDatabaseName() {
        return this.databaseName;
    }
    /**
     * If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
     * 
     */
    @Export(name="deletionProtection", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> deletionProtection;

    /**
     * @return If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
     * 
     */
    public Output</* @Nullable */ Boolean> getDeletionProtection() {
        return this.deletionProtection;
    }
    /**
     * Name of the database engine to be used for this DB cluster. The provider will only perform drift detection if a configuration value is provided. Valid values: `aurora`, `aurora-mysql`, `aurora-postgresql`. Defaults to `aurora`. Conflicts with `source_db_cluster_identifier`.
     * 
     */
    @Export(name="engine", type=String.class, parameters={})
    private Output<String> engine;

    /**
     * @return Name of the database engine to be used for this DB cluster. The provider will only perform drift detection if a configuration value is provided. Valid values: `aurora`, `aurora-mysql`, `aurora-postgresql`. Defaults to `aurora`. Conflicts with `source_db_cluster_identifier`.
     * 
     */
    public Output<String> getEngine() {
        return this.engine;
    }
    /**
     * Engine version of the Aurora global database.
     * * **NOTE:** When the engine is set to `aurora-mysql`, an engine version compatible with global database is required. The earliest available version is `5.7.mysql_aurora.2.06.0`.
     * 
     */
    @Export(name="engineVersion", type=String.class, parameters={})
    private Output<String> engineVersion;

    /**
     * @return Engine version of the Aurora global database.
     * * **NOTE:** When the engine is set to `aurora-mysql`, an engine version compatible with global database is required. The earliest available version is `5.7.mysql_aurora.2.06.0`.
     * 
     */
    public Output<String> getEngineVersion() {
        return this.engineVersion;
    }
    /**
     * Enable to remove DB Cluster members from Global Cluster on destroy. Required with `source_db_cluster_identifier`.
     * 
     */
    @Export(name="forceDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceDestroy;

    /**
     * @return Enable to remove DB Cluster members from Global Cluster on destroy. Required with `source_db_cluster_identifier`.
     * 
     */
    public Output</* @Nullable */ Boolean> getForceDestroy() {
        return this.forceDestroy;
    }
    /**
     * The global cluster identifier.
     * 
     */
    @Export(name="globalClusterIdentifier", type=String.class, parameters={})
    private Output<String> globalClusterIdentifier;

    /**
     * @return The global cluster identifier.
     * 
     */
    public Output<String> getGlobalClusterIdentifier() {
        return this.globalClusterIdentifier;
    }
    /**
     * Set of objects containing Global Cluster members.
     * 
     */
    @Export(name="globalClusterMembers", type=List.class, parameters={GlobalClusterGlobalClusterMember.class})
    private Output<List<GlobalClusterGlobalClusterMember>> globalClusterMembers;

    /**
     * @return Set of objects containing Global Cluster members.
     * 
     */
    public Output<List<GlobalClusterGlobalClusterMember>> getGlobalClusterMembers() {
        return this.globalClusterMembers;
    }
    /**
     * AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed
     * 
     */
    @Export(name="globalClusterResourceId", type=String.class, parameters={})
    private Output<String> globalClusterResourceId;

    /**
     * @return AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed
     * 
     */
    public Output<String> getGlobalClusterResourceId() {
        return this.globalClusterResourceId;
    }
    /**
     * Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. The provider cannot perform drift detection of this value.
     * 
     */
    @Export(name="sourceDbClusterIdentifier", type=String.class, parameters={})
    private Output<String> sourceDbClusterIdentifier;

    /**
     * @return Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. The provider cannot perform drift detection of this value.
     * 
     */
    public Output<String> getSourceDbClusterIdentifier() {
        return this.sourceDbClusterIdentifier;
    }
    /**
     * Specifies whether the DB cluster is encrypted. The default is `false` unless `source_db_cluster_identifier` is specified and encrypted. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @Export(name="storageEncrypted", type=Boolean.class, parameters={})
    private Output<Boolean> storageEncrypted;

    /**
     * @return Specifies whether the DB cluster is encrypted. The default is `false` unless `source_db_cluster_identifier` is specified and encrypted. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    public Output<Boolean> getStorageEncrypted() {
        return this.storageEncrypted;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GlobalCluster(String name) {
        this(name, GlobalClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GlobalCluster(String name, GlobalClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GlobalCluster(String name, GlobalClusterArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:rds/globalCluster:GlobalCluster", name, args == null ? GlobalClusterArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private GlobalCluster(String name, Output<String> id, @Nullable GlobalClusterState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:rds/globalCluster:GlobalCluster", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GlobalCluster get(String name, Output<String> id, @Nullable GlobalClusterState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new GlobalCluster(name, id, state, options);
    }
}
