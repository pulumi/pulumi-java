// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kms.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReplicaExternalKeyState extends io.pulumi.resources.ResourceArgs {

    public static final ReplicaExternalKeyState Empty = new ReplicaExternalKeyState();

    /**
     * The Amazon Resource Name (ARN) of the replica key. The key ARNs of related multi-Region keys differ only in the Region value.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * A flag to indicate whether to bypass the key policy lockout safety check.
     * Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately.
     * For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section in the _AWS Key Management Service Developer Guide_.
     * The default value is `false`.
     * 
     */
    @Import(name="bypassPolicyLockoutSafetyCheck")
      private final @Nullable Output<Boolean> bypassPolicyLockoutSafetyCheck;

    public Output<Boolean> getBypassPolicyLockoutSafetyCheck() {
        return this.bypassPolicyLockoutSafetyCheck == null ? Output.empty() : this.bypassPolicyLockoutSafetyCheck;
    }

    /**
     * The waiting period, specified in number of days. After the waiting period ends, AWS KMS deletes the KMS key.
     * If you specify a value, it must be between `7` and `30`, inclusive. If you do not specify a value, it defaults to `30`.
     * 
     */
    @Import(name="deletionWindowInDays")
      private final @Nullable Output<Integer> deletionWindowInDays;

    public Output<Integer> getDeletionWindowInDays() {
        return this.deletionWindowInDays == null ? Output.empty() : this.deletionWindowInDays;
    }

    /**
     * A description of the KMS key.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Specifies whether the replica key is enabled. Disabled KMS keys cannot be used in cryptographic operations. Keys pending import can only be `false`. Imported keys default to `true` unless expired.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * Whether the key material expires. Empty when pending key material import, otherwise `KEY_MATERIAL_EXPIRES` or `KEY_MATERIAL_DOES_NOT_EXPIRE`.
     * 
     */
    @Import(name="expirationModel")
      private final @Nullable Output<String> expirationModel;

    public Output<String> getExpirationModel() {
        return this.expirationModel == null ? Output.empty() : this.expirationModel;
    }

    /**
     * The key ID of the replica key. Related multi-Region keys have the same key ID.
     * 
     */
    @Import(name="keyId")
      private final @Nullable Output<String> keyId;

    public Output<String> getKeyId() {
        return this.keyId == null ? Output.empty() : this.keyId;
    }

    /**
     * Base64 encoded 256-bit symmetric encryption key material to import. The KMS key is permanently associated with this key material. The same key material can be [reimported](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#reimport-key-material), but you cannot import different key material.
     * 
     */
    @Import(name="keyMaterialBase64")
      private final @Nullable Output<String> keyMaterialBase64;

    public Output<String> getKeyMaterialBase64() {
        return this.keyMaterialBase64 == null ? Output.empty() : this.keyMaterialBase64;
    }

    /**
     * The state of the replica key.
     * 
     */
    @Import(name="keyState")
      private final @Nullable Output<String> keyState;

    public Output<String> getKeyState() {
        return this.keyState == null ? Output.empty() : this.keyState;
    }

    /**
     * The [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) for which you can use the KMS key. This is a shared property of multi-Region keys.
     * 
     */
    @Import(name="keyUsage")
      private final @Nullable Output<String> keyUsage;

    public Output<String> getKeyUsage() {
        return this.keyUsage == null ? Output.empty() : this.keyUsage;
    }

    @Import(name="policy")
      private final @Nullable Output<String> policy;

    public Output<String> getPolicy() {
        return this.policy == null ? Output.empty() : this.policy;
    }

    /**
     * The ARN of the multi-Region primary key to replicate. The primary key must be in a different AWS Region of the same AWS Partition. You can create only one replica of a given primary key in each AWS Region.
     * 
     */
    @Import(name="primaryKeyArn")
      private final @Nullable Output<String> primaryKeyArn;

    public Output<String> getPrimaryKeyArn() {
        return this.primaryKeyArn == null ? Output.empty() : this.primaryKeyArn;
    }

    /**
     * A map of tags to assign to the replica key. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * Time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the key becomes unusable. If not specified, key material does not expire. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
     * 
     */
    @Import(name="validTo")
      private final @Nullable Output<String> validTo;

    public Output<String> getValidTo() {
        return this.validTo == null ? Output.empty() : this.validTo;
    }

    public ReplicaExternalKeyState(
        @Nullable Output<String> arn,
        @Nullable Output<Boolean> bypassPolicyLockoutSafetyCheck,
        @Nullable Output<Integer> deletionWindowInDays,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<String> expirationModel,
        @Nullable Output<String> keyId,
        @Nullable Output<String> keyMaterialBase64,
        @Nullable Output<String> keyState,
        @Nullable Output<String> keyUsage,
        @Nullable Output<String> policy,
        @Nullable Output<String> primaryKeyArn,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> validTo) {
        this.arn = arn;
        this.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
        this.deletionWindowInDays = deletionWindowInDays;
        this.description = description;
        this.enabled = enabled;
        this.expirationModel = expirationModel;
        this.keyId = keyId;
        this.keyMaterialBase64 = keyMaterialBase64;
        this.keyState = keyState;
        this.keyUsage = keyUsage;
        this.policy = policy;
        this.primaryKeyArn = primaryKeyArn;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.validTo = validTo;
    }

    private ReplicaExternalKeyState() {
        this.arn = Output.empty();
        this.bypassPolicyLockoutSafetyCheck = Output.empty();
        this.deletionWindowInDays = Output.empty();
        this.description = Output.empty();
        this.enabled = Output.empty();
        this.expirationModel = Output.empty();
        this.keyId = Output.empty();
        this.keyMaterialBase64 = Output.empty();
        this.keyState = Output.empty();
        this.keyUsage = Output.empty();
        this.policy = Output.empty();
        this.primaryKeyArn = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.validTo = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicaExternalKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<Boolean> bypassPolicyLockoutSafetyCheck;
        private @Nullable Output<Integer> deletionWindowInDays;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<String> expirationModel;
        private @Nullable Output<String> keyId;
        private @Nullable Output<String> keyMaterialBase64;
        private @Nullable Output<String> keyState;
        private @Nullable Output<String> keyUsage;
        private @Nullable Output<String> policy;
        private @Nullable Output<String> primaryKeyArn;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> validTo;

        public Builder() {
    	      // Empty
        }

        public Builder(ReplicaExternalKeyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.bypassPolicyLockoutSafetyCheck = defaults.bypassPolicyLockoutSafetyCheck;
    	      this.deletionWindowInDays = defaults.deletionWindowInDays;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.expirationModel = defaults.expirationModel;
    	      this.keyId = defaults.keyId;
    	      this.keyMaterialBase64 = defaults.keyMaterialBase64;
    	      this.keyState = defaults.keyState;
    	      this.keyUsage = defaults.keyUsage;
    	      this.policy = defaults.policy;
    	      this.primaryKeyArn = defaults.primaryKeyArn;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.validTo = defaults.validTo;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }
        public Builder bypassPolicyLockoutSafetyCheck(@Nullable Output<Boolean> bypassPolicyLockoutSafetyCheck) {
            this.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
            return this;
        }
        public Builder bypassPolicyLockoutSafetyCheck(@Nullable Boolean bypassPolicyLockoutSafetyCheck) {
            this.bypassPolicyLockoutSafetyCheck = Output.ofNullable(bypassPolicyLockoutSafetyCheck);
            return this;
        }
        public Builder deletionWindowInDays(@Nullable Output<Integer> deletionWindowInDays) {
            this.deletionWindowInDays = deletionWindowInDays;
            return this;
        }
        public Builder deletionWindowInDays(@Nullable Integer deletionWindowInDays) {
            this.deletionWindowInDays = Output.ofNullable(deletionWindowInDays);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }
        public Builder expirationModel(@Nullable Output<String> expirationModel) {
            this.expirationModel = expirationModel;
            return this;
        }
        public Builder expirationModel(@Nullable String expirationModel) {
            this.expirationModel = Output.ofNullable(expirationModel);
            return this;
        }
        public Builder keyId(@Nullable Output<String> keyId) {
            this.keyId = keyId;
            return this;
        }
        public Builder keyId(@Nullable String keyId) {
            this.keyId = Output.ofNullable(keyId);
            return this;
        }
        public Builder keyMaterialBase64(@Nullable Output<String> keyMaterialBase64) {
            this.keyMaterialBase64 = keyMaterialBase64;
            return this;
        }
        public Builder keyMaterialBase64(@Nullable String keyMaterialBase64) {
            this.keyMaterialBase64 = Output.ofNullable(keyMaterialBase64);
            return this;
        }
        public Builder keyState(@Nullable Output<String> keyState) {
            this.keyState = keyState;
            return this;
        }
        public Builder keyState(@Nullable String keyState) {
            this.keyState = Output.ofNullable(keyState);
            return this;
        }
        public Builder keyUsage(@Nullable Output<String> keyUsage) {
            this.keyUsage = keyUsage;
            return this;
        }
        public Builder keyUsage(@Nullable String keyUsage) {
            this.keyUsage = Output.ofNullable(keyUsage);
            return this;
        }
        public Builder policy(@Nullable Output<String> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable String policy) {
            this.policy = Output.ofNullable(policy);
            return this;
        }
        public Builder primaryKeyArn(@Nullable Output<String> primaryKeyArn) {
            this.primaryKeyArn = primaryKeyArn;
            return this;
        }
        public Builder primaryKeyArn(@Nullable String primaryKeyArn) {
            this.primaryKeyArn = Output.ofNullable(primaryKeyArn);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }
        public Builder validTo(@Nullable Output<String> validTo) {
            this.validTo = validTo;
            return this;
        }
        public Builder validTo(@Nullable String validTo) {
            this.validTo = Output.ofNullable(validTo);
            return this;
        }        public ReplicaExternalKeyState build() {
            return new ReplicaExternalKeyState(arn, bypassPolicyLockoutSafetyCheck, deletionWindowInDays, description, enabled, expirationModel, keyId, keyMaterialBase64, keyState, keyUsage, policy, primaryKeyArn, tags, tagsAll, validTo);
        }
    }
}
