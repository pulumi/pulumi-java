// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appmesh.outputs;

import io.pulumi.aws.appmesh.outputs.VirtualNodeSpecBackend;
import io.pulumi.aws.appmesh.outputs.VirtualNodeSpecBackendDefaults;
import io.pulumi.aws.appmesh.outputs.VirtualNodeSpecListener;
import io.pulumi.aws.appmesh.outputs.VirtualNodeSpecLogging;
import io.pulumi.aws.appmesh.outputs.VirtualNodeSpecServiceDiscovery;
import io.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualNodeSpec {
    /**
     * The defaults for backends.
     * 
     */
    private final @Nullable VirtualNodeSpecBackendDefaults backendDefaults;
    /**
     * The backends to which the virtual node is expected to send outbound traffic.
     * 
     */
    private final @Nullable List<VirtualNodeSpecBackend> backends;
    /**
     * The listeners from which the virtual node is expected to receive inbound traffic.
     * 
     */
    private final @Nullable VirtualNodeSpecListener listener;
    /**
     * The inbound and outbound access logging information for the virtual node.
     * 
     */
    private final @Nullable VirtualNodeSpecLogging logging;
    /**
     * The service discovery information for the virtual node.
     * 
     */
    private final @Nullable VirtualNodeSpecServiceDiscovery serviceDiscovery;

    @CustomType.Constructor
    private VirtualNodeSpec(
        @CustomType.Parameter("backendDefaults") @Nullable VirtualNodeSpecBackendDefaults backendDefaults,
        @CustomType.Parameter("backends") @Nullable List<VirtualNodeSpecBackend> backends,
        @CustomType.Parameter("listener") @Nullable VirtualNodeSpecListener listener,
        @CustomType.Parameter("logging") @Nullable VirtualNodeSpecLogging logging,
        @CustomType.Parameter("serviceDiscovery") @Nullable VirtualNodeSpecServiceDiscovery serviceDiscovery) {
        this.backendDefaults = backendDefaults;
        this.backends = backends;
        this.listener = listener;
        this.logging = logging;
        this.serviceDiscovery = serviceDiscovery;
    }

    /**
     * The defaults for backends.
     * 
    */
    public Optional<VirtualNodeSpecBackendDefaults> getBackendDefaults() {
        return Optional.ofNullable(this.backendDefaults);
    }
    /**
     * The backends to which the virtual node is expected to send outbound traffic.
     * 
    */
    public List<VirtualNodeSpecBackend> getBackends() {
        return this.backends == null ? List.of() : this.backends;
    }
    /**
     * The listeners from which the virtual node is expected to receive inbound traffic.
     * 
    */
    public Optional<VirtualNodeSpecListener> getListener() {
        return Optional.ofNullable(this.listener);
    }
    /**
     * The inbound and outbound access logging information for the virtual node.
     * 
    */
    public Optional<VirtualNodeSpecLogging> getLogging() {
        return Optional.ofNullable(this.logging);
    }
    /**
     * The service discovery information for the virtual node.
     * 
    */
    public Optional<VirtualNodeSpecServiceDiscovery> getServiceDiscovery() {
        return Optional.ofNullable(this.serviceDiscovery);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNodeSpec defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable VirtualNodeSpecBackendDefaults backendDefaults;
        private @Nullable List<VirtualNodeSpecBackend> backends;
        private @Nullable VirtualNodeSpecListener listener;
        private @Nullable VirtualNodeSpecLogging logging;
        private @Nullable VirtualNodeSpecServiceDiscovery serviceDiscovery;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNodeSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendDefaults = defaults.backendDefaults;
    	      this.backends = defaults.backends;
    	      this.listener = defaults.listener;
    	      this.logging = defaults.logging;
    	      this.serviceDiscovery = defaults.serviceDiscovery;
        }

        public Builder backendDefaults(@Nullable VirtualNodeSpecBackendDefaults backendDefaults) {
            this.backendDefaults = backendDefaults;
            return this;
        }
        public Builder backends(@Nullable List<VirtualNodeSpecBackend> backends) {
            this.backends = backends;
            return this;
        }
        public Builder backends(VirtualNodeSpecBackend... backends) {
            return backends(List.of(backends));
        }
        public Builder listener(@Nullable VirtualNodeSpecListener listener) {
            this.listener = listener;
            return this;
        }
        public Builder logging(@Nullable VirtualNodeSpecLogging logging) {
            this.logging = logging;
            return this;
        }
        public Builder serviceDiscovery(@Nullable VirtualNodeSpecServiceDiscovery serviceDiscovery) {
            this.serviceDiscovery = serviceDiscovery;
            return this;
        }        public VirtualNodeSpec build() {
            return new VirtualNodeSpec(backendDefaults, backends, listener, logging, serviceDiscovery);
        }
    }
}
