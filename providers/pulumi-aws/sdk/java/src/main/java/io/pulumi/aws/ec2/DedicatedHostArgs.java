// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DedicatedHostArgs extends io.pulumi.resources.ResourceArgs {

    public static final DedicatedHostArgs Empty = new DedicatedHostArgs();

    /**
     * Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID. Valid values: `on`, `off`. Default: `on`.
     * 
     */
    @InputImport(name="autoPlacement")
      private final @Nullable Input<String> autoPlacement;

    public Input<String> getAutoPlacement() {
        return this.autoPlacement == null ? Input.empty() : this.autoPlacement;
    }

    /**
     * The Availability Zone in which to allocate the Dedicated Host.
     * 
     */
    @InputImport(name="availabilityZone", required=true)
      private final Input<String> availabilityZone;

    public Input<String> getAvailabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Indicates whether to enable or disable host recovery for the Dedicated Host. Valid values: `on`, `off`. Default: `off`.
     * 
     */
    @InputImport(name="hostRecovery")
      private final @Nullable Input<String> hostRecovery;

    public Input<String> getHostRecovery() {
        return this.hostRecovery == null ? Input.empty() : this.hostRecovery;
    }

    /**
     * Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family. Exactly one of `instance_family` or `instance_type` must be specified.
     * 
     */
    @InputImport(name="instanceFamily")
      private final @Nullable Input<String> instanceFamily;

    public Input<String> getInstanceFamily() {
        return this.instanceFamily == null ? Input.empty() : this.instanceFamily;
    }

    /**
     * Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.  Exactly one of `instance_family` or `instance_type` must be specified.
     * 
     */
    @InputImport(name="instanceType")
      private final @Nullable Input<String> instanceType;

    public Input<String> getInstanceType() {
        return this.instanceType == null ? Input.empty() : this.instanceType;
    }

    /**
     * Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public DedicatedHostArgs(
        @Nullable Input<String> autoPlacement,
        Input<String> availabilityZone,
        @Nullable Input<String> hostRecovery,
        @Nullable Input<String> instanceFamily,
        @Nullable Input<String> instanceType,
        @Nullable Input<Map<String,String>> tags) {
        this.autoPlacement = autoPlacement;
        this.availabilityZone = Objects.requireNonNull(availabilityZone, "expected parameter 'availabilityZone' to be non-null");
        this.hostRecovery = hostRecovery;
        this.instanceFamily = instanceFamily;
        this.instanceType = instanceType;
        this.tags = tags;
    }

    private DedicatedHostArgs() {
        this.autoPlacement = Input.empty();
        this.availabilityZone = Input.empty();
        this.hostRecovery = Input.empty();
        this.instanceFamily = Input.empty();
        this.instanceType = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DedicatedHostArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> autoPlacement;
        private Input<String> availabilityZone;
        private @Nullable Input<String> hostRecovery;
        private @Nullable Input<String> instanceFamily;
        private @Nullable Input<String> instanceType;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DedicatedHostArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoPlacement = defaults.autoPlacement;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.hostRecovery = defaults.hostRecovery;
    	      this.instanceFamily = defaults.instanceFamily;
    	      this.instanceType = defaults.instanceType;
    	      this.tags = defaults.tags;
        }

        public Builder setAutoPlacement(@Nullable Input<String> autoPlacement) {
            this.autoPlacement = autoPlacement;
            return this;
        }

        public Builder setAutoPlacement(@Nullable String autoPlacement) {
            this.autoPlacement = Input.ofNullable(autoPlacement);
            return this;
        }

        public Builder setAvailabilityZone(Input<String> availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }

        public Builder setAvailabilityZone(String availabilityZone) {
            this.availabilityZone = Input.of(Objects.requireNonNull(availabilityZone));
            return this;
        }

        public Builder setHostRecovery(@Nullable Input<String> hostRecovery) {
            this.hostRecovery = hostRecovery;
            return this;
        }

        public Builder setHostRecovery(@Nullable String hostRecovery) {
            this.hostRecovery = Input.ofNullable(hostRecovery);
            return this;
        }

        public Builder setInstanceFamily(@Nullable Input<String> instanceFamily) {
            this.instanceFamily = instanceFamily;
            return this;
        }

        public Builder setInstanceFamily(@Nullable String instanceFamily) {
            this.instanceFamily = Input.ofNullable(instanceFamily);
            return this;
        }

        public Builder setInstanceType(@Nullable Input<String> instanceType) {
            this.instanceType = instanceType;
            return this;
        }

        public Builder setInstanceType(@Nullable String instanceType) {
            this.instanceType = Input.ofNullable(instanceType);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public DedicatedHostArgs build() {
            return new DedicatedHostArgs(autoPlacement, availabilityZone, hostRecovery, instanceFamily, instanceType, tags);
        }
    }
}
