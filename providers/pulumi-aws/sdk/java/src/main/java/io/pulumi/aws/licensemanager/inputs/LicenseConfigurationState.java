// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.licensemanager.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LicenseConfigurationState extends io.pulumi.resources.ResourceArgs {

    public static final LicenseConfigurationState Empty = new LicenseConfigurationState();

    /**
     * The license configuration ARN.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Description of the license configuration.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Number of licenses managed by the license configuration.
     * 
     */
    @InputImport(name="licenseCount")
    private final @Nullable Input<Integer> licenseCount;

    public Input<Integer> getLicenseCount() {
        return this.licenseCount == null ? Input.empty() : this.licenseCount;
    }

    /**
     * Sets the number of available licenses as a hard limit.
     * 
     */
    @InputImport(name="licenseCountHardLimit")
    private final @Nullable Input<Boolean> licenseCountHardLimit;

    public Input<Boolean> getLicenseCountHardLimit() {
        return this.licenseCountHardLimit == null ? Input.empty() : this.licenseCountHardLimit;
    }

    /**
     * Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
     * 
     */
    @InputImport(name="licenseCountingType")
    private final @Nullable Input<String> licenseCountingType;

    public Input<String> getLicenseCountingType() {
        return this.licenseCountingType == null ? Input.empty() : this.licenseCountingType;
    }

    /**
     * Array of configured License Manager rules.
     * 
     */
    @InputImport(name="licenseRules")
    private final @Nullable Input<List<String>> licenseRules;

    public Input<List<String>> getLicenseRules() {
        return this.licenseRules == null ? Input.empty() : this.licenseRules;
    }

    /**
     * Name of the license configuration.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Account ID of the owner of the license configuration.
     * 
     */
    @InputImport(name="ownerAccountId")
    private final @Nullable Input<String> ownerAccountId;

    public Input<String> getOwnerAccountId() {
        return this.ownerAccountId == null ? Input.empty() : this.ownerAccountId;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public LicenseConfigurationState(
        @Nullable Input<String> arn,
        @Nullable Input<String> description,
        @Nullable Input<Integer> licenseCount,
        @Nullable Input<Boolean> licenseCountHardLimit,
        @Nullable Input<String> licenseCountingType,
        @Nullable Input<List<String>> licenseRules,
        @Nullable Input<String> name,
        @Nullable Input<String> ownerAccountId,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.description = description;
        this.licenseCount = licenseCount;
        this.licenseCountHardLimit = licenseCountHardLimit;
        this.licenseCountingType = licenseCountingType;
        this.licenseRules = licenseRules;
        this.name = name;
        this.ownerAccountId = ownerAccountId;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private LicenseConfigurationState() {
        this.arn = Input.empty();
        this.description = Input.empty();
        this.licenseCount = Input.empty();
        this.licenseCountHardLimit = Input.empty();
        this.licenseCountingType = Input.empty();
        this.licenseRules = Input.empty();
        this.name = Input.empty();
        this.ownerAccountId = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LicenseConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> description;
        private @Nullable Input<Integer> licenseCount;
        private @Nullable Input<Boolean> licenseCountHardLimit;
        private @Nullable Input<String> licenseCountingType;
        private @Nullable Input<List<String>> licenseRules;
        private @Nullable Input<String> name;
        private @Nullable Input<String> ownerAccountId;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(LicenseConfigurationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.licenseCount = defaults.licenseCount;
    	      this.licenseCountHardLimit = defaults.licenseCountHardLimit;
    	      this.licenseCountingType = defaults.licenseCountingType;
    	      this.licenseRules = defaults.licenseRules;
    	      this.name = defaults.name;
    	      this.ownerAccountId = defaults.ownerAccountId;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setLicenseCount(@Nullable Input<Integer> licenseCount) {
            this.licenseCount = licenseCount;
            return this;
        }

        public Builder setLicenseCount(@Nullable Integer licenseCount) {
            this.licenseCount = Input.ofNullable(licenseCount);
            return this;
        }

        public Builder setLicenseCountHardLimit(@Nullable Input<Boolean> licenseCountHardLimit) {
            this.licenseCountHardLimit = licenseCountHardLimit;
            return this;
        }

        public Builder setLicenseCountHardLimit(@Nullable Boolean licenseCountHardLimit) {
            this.licenseCountHardLimit = Input.ofNullable(licenseCountHardLimit);
            return this;
        }

        public Builder setLicenseCountingType(@Nullable Input<String> licenseCountingType) {
            this.licenseCountingType = licenseCountingType;
            return this;
        }

        public Builder setLicenseCountingType(@Nullable String licenseCountingType) {
            this.licenseCountingType = Input.ofNullable(licenseCountingType);
            return this;
        }

        public Builder setLicenseRules(@Nullable Input<List<String>> licenseRules) {
            this.licenseRules = licenseRules;
            return this;
        }

        public Builder setLicenseRules(@Nullable List<String> licenseRules) {
            this.licenseRules = Input.ofNullable(licenseRules);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setOwnerAccountId(@Nullable Input<String> ownerAccountId) {
            this.ownerAccountId = ownerAccountId;
            return this;
        }

        public Builder setOwnerAccountId(@Nullable String ownerAccountId) {
            this.ownerAccountId = Input.ofNullable(ownerAccountId);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public LicenseConfigurationState build() {
            return new LicenseConfigurationState(arn, description, licenseCount, licenseCountHardLimit, licenseCountingType, licenseRules, name, ownerAccountId, tags, tagsAll);
        }
    }
}
