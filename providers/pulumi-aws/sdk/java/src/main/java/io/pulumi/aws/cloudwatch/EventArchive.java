// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.cloudwatch.EventArchiveArgs;
import io.pulumi.aws.cloudwatch.inputs.EventArchiveState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides an EventBridge event archive resource.
 * 
 * > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
 * 
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const orderEventBus = new aws.cloudwatch.EventBus("orderEventBus", {});
 * const orderEventArchive = new aws.cloudwatch.EventArchive("orderEventArchive", {eventSourceArn: orderEventBus.arn});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * order_event_bus = aws.cloudwatch.EventBus("orderEventBus")
 * order_event_archive = aws.cloudwatch.EventArchive("orderEventArchive", event_source_arn=order_event_bus.arn)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var orderEventBus = new Aws.CloudWatch.EventBus("orderEventBus", new Aws.CloudWatch.EventBusArgs
 *         {
 *         });
 *         var orderEventArchive = new Aws.CloudWatch.EventArchive("orderEventArchive", new Aws.CloudWatch.EventArchiveArgs
 *         {
 *             EventSourceArn = orderEventBus.Arn,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		orderEventBus, err := cloudwatch.NewEventBus(ctx, "orderEventBus", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventArchive(ctx, "orderEventArchive", &cloudwatch.EventArchiveArgs{
 * 			EventSourceArn: orderEventBus.Arn,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * ## Example all optional arguments
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const orderEventBus = new aws.cloudwatch.EventBus("orderEventBus", {});
 * const orderEventArchive = new aws.cloudwatch.EventArchive("orderEventArchive", {
 *     description: "Archived events from order service",
 *     eventSourceArn: orderEventBus.arn,
 *     retentionDays: 7,
 *     eventPattern: `{
 *   "source": ["company.team.order"]
 * }
 * `,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * order_event_bus = aws.cloudwatch.EventBus("orderEventBus")
 * order_event_archive = aws.cloudwatch.EventArchive("orderEventArchive",
 *     description="Archived events from order service",
 *     event_source_arn=order_event_bus.arn,
 *     retention_days=7,
 *     event_pattern="""{
 *   "source": ["company.team.order"]
 * }
 * """)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var orderEventBus = new Aws.CloudWatch.EventBus("orderEventBus", new Aws.CloudWatch.EventBusArgs
 *         {
 *         });
 *         var orderEventArchive = new Aws.CloudWatch.EventArchive("orderEventArchive", new Aws.CloudWatch.EventArchiveArgs
 *         {
 *             Description = "Archived events from order service",
 *             EventSourceArn = orderEventBus.Arn,
 *             RetentionDays = 7,
 *             EventPattern = @"{
 *   ""source"": [""company.team.order""]
 * }
 * ",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		orderEventBus, err := cloudwatch.NewEventBus(ctx, "orderEventBus", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventArchive(ctx, "orderEventArchive", &cloudwatch.EventArchiveArgs{
 * 			Description:    pulumi.String("Archived events from order service"),
 * 			EventSourceArn: orderEventBus.Arn,
 * 			RetentionDays:  pulumi.Int(7),
 * 			EventPattern:   pulumi.String(fmt.Sprintf("%v%v%v", "{\n", "  \"source\": [\"company.team.order\"]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * 
 * ## Import
 * 
 * Event Archive can be imported using their name, for example bash
 * 
 * ```sh
 *  $ pulumi import aws:cloudwatch/eventArchive:EventArchive imported_event_archive order-archive
 * ```
 * 
 *  
 */
@ResourceType(type="aws:cloudwatch/eventArchive:EventArchive")
public class EventArchive extends io.pulumi.resources.CustomResource {
    /**
     * The Amazon Resource Name (ARN) of the event archive.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the event archive.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The description of the new event archive.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the new event archive.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * Instructs the new event archive to only capture events matched by this pattern. By default, it attempts to archive every event received in the `event_source_arn`.
     * 
     */
    @Export(name="eventPattern", type=String.class, parameters={})
    private Output</* @Nullable */ String> eventPattern;

    /**
     * @return Instructs the new event archive to only capture events matched by this pattern. By default, it attempts to archive every event received in the `event_source_arn`.
     * 
     */
    public Output</* @Nullable */ String> getEventPattern() {
        return this.eventPattern;
    }
    /**
     * Event bus source ARN from where these events should be archived.
     * 
     */
    @Export(name="eventSourceArn", type=String.class, parameters={})
    private Output<String> eventSourceArn;

    /**
     * @return Event bus source ARN from where these events should be archived.
     * 
     */
    public Output<String> getEventSourceArn() {
        return this.eventSourceArn;
    }
    /**
     * The name of the new event archive. The archive name cannot exceed 48 characters.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the new event archive. The archive name cannot exceed 48 characters.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
     * 
     */
    @Export(name="retentionDays", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> retentionDays;

    /**
     * @return The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
     * 
     */
    public Output</* @Nullable */ Integer> getRetentionDays() {
        return this.retentionDays;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventArchive(String name) {
        this(name, EventArchiveArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventArchive(String name, EventArchiveArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventArchive(String name, EventArchiveArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventArchive:EventArchive", name, args == null ? EventArchiveArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private EventArchive(String name, Output<String> id, @Nullable EventArchiveState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventArchive:EventArchive", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventArchive get(String name, Output<String> id, @Nullable EventArchiveState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new EventArchive(name, id, state, options);
    }
}
