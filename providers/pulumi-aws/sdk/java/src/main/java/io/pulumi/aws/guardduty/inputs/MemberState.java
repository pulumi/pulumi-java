// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.guardduty.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MemberState extends io.pulumi.resources.ResourceArgs {

    public static final MemberState Empty = new MemberState();

    /**
     * AWS account ID for member account.
     * 
     */
    @InputImport(name="accountId")
      private final @Nullable Input<String> accountId;

    public Input<String> getAccountId() {
        return this.accountId == null ? Input.empty() : this.accountId;
    }

    /**
     * The detector ID of the GuardDuty account where you want to create member accounts.
     * 
     */
    @InputImport(name="detectorId")
      private final @Nullable Input<String> detectorId;

    public Input<String> getDetectorId() {
        return this.detectorId == null ? Input.empty() : this.detectorId;
    }

    /**
     * Boolean whether an email notification is sent to the accounts. Defaults to `false`.
     * 
     */
    @InputImport(name="disableEmailNotification")
      private final @Nullable Input<Boolean> disableEmailNotification;

    public Input<Boolean> getDisableEmailNotification() {
        return this.disableEmailNotification == null ? Input.empty() : this.disableEmailNotification;
    }

    /**
     * Email address for member account.
     * 
     */
    @InputImport(name="email")
      private final @Nullable Input<String> email;

    public Input<String> getEmail() {
        return this.email == null ? Input.empty() : this.email;
    }

    /**
     * Message for invitation.
     * 
     */
    @InputImport(name="invitationMessage")
      private final @Nullable Input<String> invitationMessage;

    public Input<String> getInvitationMessage() {
        return this.invitationMessage == null ? Input.empty() : this.invitationMessage;
    }

    /**
     * Boolean whether to invite the account to GuardDuty as a member. Defaults to `false`. To detect if an invitation needs to be (re-)sent, the this provider state value is `true` based on a `relationship_status` of `Disabled`, `Enabled`, `Invited`, or `EmailVerificationInProgress`.
     * 
     */
    @InputImport(name="invite")
      private final @Nullable Input<Boolean> invite;

    public Input<Boolean> getInvite() {
        return this.invite == null ? Input.empty() : this.invite;
    }

    /**
     * The status of the relationship between the member account and its primary account. More information can be found in [Amazon GuardDuty API Reference](https://docs.aws.amazon.com/guardduty/latest/ug/get-members.html).
     * 
     */
    @InputImport(name="relationshipStatus")
      private final @Nullable Input<String> relationshipStatus;

    public Input<String> getRelationshipStatus() {
        return this.relationshipStatus == null ? Input.empty() : this.relationshipStatus;
    }

    public MemberState(
        @Nullable Input<String> accountId,
        @Nullable Input<String> detectorId,
        @Nullable Input<Boolean> disableEmailNotification,
        @Nullable Input<String> email,
        @Nullable Input<String> invitationMessage,
        @Nullable Input<Boolean> invite,
        @Nullable Input<String> relationshipStatus) {
        this.accountId = accountId;
        this.detectorId = detectorId;
        this.disableEmailNotification = disableEmailNotification;
        this.email = email;
        this.invitationMessage = invitationMessage;
        this.invite = invite;
        this.relationshipStatus = relationshipStatus;
    }

    private MemberState() {
        this.accountId = Input.empty();
        this.detectorId = Input.empty();
        this.disableEmailNotification = Input.empty();
        this.email = Input.empty();
        this.invitationMessage = Input.empty();
        this.invite = Input.empty();
        this.relationshipStatus = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MemberState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accountId;
        private @Nullable Input<String> detectorId;
        private @Nullable Input<Boolean> disableEmailNotification;
        private @Nullable Input<String> email;
        private @Nullable Input<String> invitationMessage;
        private @Nullable Input<Boolean> invite;
        private @Nullable Input<String> relationshipStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(MemberState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.detectorId = defaults.detectorId;
    	      this.disableEmailNotification = defaults.disableEmailNotification;
    	      this.email = defaults.email;
    	      this.invitationMessage = defaults.invitationMessage;
    	      this.invite = defaults.invite;
    	      this.relationshipStatus = defaults.relationshipStatus;
        }

        public Builder accountId(@Nullable Input<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(@Nullable String accountId) {
            this.accountId = Input.ofNullable(accountId);
            return this;
        }

        public Builder detectorId(@Nullable Input<String> detectorId) {
            this.detectorId = detectorId;
            return this;
        }

        public Builder detectorId(@Nullable String detectorId) {
            this.detectorId = Input.ofNullable(detectorId);
            return this;
        }

        public Builder disableEmailNotification(@Nullable Input<Boolean> disableEmailNotification) {
            this.disableEmailNotification = disableEmailNotification;
            return this;
        }

        public Builder disableEmailNotification(@Nullable Boolean disableEmailNotification) {
            this.disableEmailNotification = Input.ofNullable(disableEmailNotification);
            return this;
        }

        public Builder email(@Nullable Input<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(@Nullable String email) {
            this.email = Input.ofNullable(email);
            return this;
        }

        public Builder invitationMessage(@Nullable Input<String> invitationMessage) {
            this.invitationMessage = invitationMessage;
            return this;
        }

        public Builder invitationMessage(@Nullable String invitationMessage) {
            this.invitationMessage = Input.ofNullable(invitationMessage);
            return this;
        }

        public Builder invite(@Nullable Input<Boolean> invite) {
            this.invite = invite;
            return this;
        }

        public Builder invite(@Nullable Boolean invite) {
            this.invite = Input.ofNullable(invite);
            return this;
        }

        public Builder relationshipStatus(@Nullable Input<String> relationshipStatus) {
            this.relationshipStatus = relationshipStatus;
            return this;
        }

        public Builder relationshipStatus(@Nullable String relationshipStatus) {
            this.relationshipStatus = Input.ofNullable(relationshipStatus);
            return this;
        }
        public MemberState build() {
            return new MemberState(accountId, detectorId, disableEmailNotification, email, invitationMessage, invite, relationshipStatus);
        }
    }
}
