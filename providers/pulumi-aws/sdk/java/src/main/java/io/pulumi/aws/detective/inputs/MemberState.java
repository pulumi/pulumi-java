// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.detective.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MemberState extends io.pulumi.resources.ResourceArgs {

    public static final MemberState Empty = new MemberState();

    /**
     * AWS account ID for the account.
     * 
     */
    @InputImport(name="accountId")
      private final @Nullable Output<String> accountId;

    public Output<String> getAccountId() {
        return this.accountId == null ? Output.empty() : this.accountId;
    }

    /**
     * AWS account ID for the administrator account.
     * 
     */
    @InputImport(name="administratorId")
      private final @Nullable Output<String> administratorId;

    public Output<String> getAdministratorId() {
        return this.administratorId == null ? Output.empty() : this.administratorId;
    }

    /**
     * If set to true, then the root user of the invited account will _not_ receive an email notification. This notification is in addition to an alert that the root user receives in AWS Personal Health Dashboard. By default, this is set to `false`.
     * 
     */
    @InputImport(name="disableEmailNotification")
      private final @Nullable Output<Boolean> disableEmailNotification;

    public Output<Boolean> getDisableEmailNotification() {
        return this.disableEmailNotification == null ? Output.empty() : this.disableEmailNotification;
    }

    @InputImport(name="disabledReason")
      private final @Nullable Output<String> disabledReason;

    public Output<String> getDisabledReason() {
        return this.disabledReason == null ? Output.empty() : this.disabledReason;
    }

    /**
     * Email address for the account.
     * 
     */
    @InputImport(name="emailAddress")
      private final @Nullable Output<String> emailAddress;

    public Output<String> getEmailAddress() {
        return this.emailAddress == null ? Output.empty() : this.emailAddress;
    }

    /**
     * ARN of the behavior graph to invite the member accounts to contribute their data to.
     * 
     */
    @InputImport(name="graphArn")
      private final @Nullable Output<String> graphArn;

    public Output<String> getGraphArn() {
        return this.graphArn == null ? Output.empty() : this.graphArn;
    }

    /**
     * Date and time, in UTC and extended RFC 3339 format, when an Amazon Detective membership invitation was last sent to the account.
     * 
     */
    @InputImport(name="invitedTime")
      private final @Nullable Output<String> invitedTime;

    public Output<String> getInvitedTime() {
        return this.invitedTime == null ? Output.empty() : this.invitedTime;
    }

    /**
     * A custom message to include in the invitation. Amazon Detective adds this message to the standard content that it sends for an invitation.
     * 
     */
    @InputImport(name="message")
      private final @Nullable Output<String> message;

    public Output<String> getMessage() {
        return this.message == null ? Output.empty() : this.message;
    }

    /**
     * Current membership status of the member account.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Output<String> status;

    public Output<String> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * Date and time, in UTC and extended RFC 3339 format, of the most recent change to the member account's status.
     * 
     */
    @InputImport(name="updatedTime")
      private final @Nullable Output<String> updatedTime;

    public Output<String> getUpdatedTime() {
        return this.updatedTime == null ? Output.empty() : this.updatedTime;
    }

    /**
     * Data volume in bytes per day for the member account.
     * 
     */
    @InputImport(name="volumeUsageInBytes")
      private final @Nullable Output<String> volumeUsageInBytes;

    public Output<String> getVolumeUsageInBytes() {
        return this.volumeUsageInBytes == null ? Output.empty() : this.volumeUsageInBytes;
    }

    public MemberState(
        @Nullable Output<String> accountId,
        @Nullable Output<String> administratorId,
        @Nullable Output<Boolean> disableEmailNotification,
        @Nullable Output<String> disabledReason,
        @Nullable Output<String> emailAddress,
        @Nullable Output<String> graphArn,
        @Nullable Output<String> invitedTime,
        @Nullable Output<String> message,
        @Nullable Output<String> status,
        @Nullable Output<String> updatedTime,
        @Nullable Output<String> volumeUsageInBytes) {
        this.accountId = accountId;
        this.administratorId = administratorId;
        this.disableEmailNotification = disableEmailNotification;
        this.disabledReason = disabledReason;
        this.emailAddress = emailAddress;
        this.graphArn = graphArn;
        this.invitedTime = invitedTime;
        this.message = message;
        this.status = status;
        this.updatedTime = updatedTime;
        this.volumeUsageInBytes = volumeUsageInBytes;
    }

    private MemberState() {
        this.accountId = Output.empty();
        this.administratorId = Output.empty();
        this.disableEmailNotification = Output.empty();
        this.disabledReason = Output.empty();
        this.emailAddress = Output.empty();
        this.graphArn = Output.empty();
        this.invitedTime = Output.empty();
        this.message = Output.empty();
        this.status = Output.empty();
        this.updatedTime = Output.empty();
        this.volumeUsageInBytes = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MemberState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> accountId;
        private @Nullable Output<String> administratorId;
        private @Nullable Output<Boolean> disableEmailNotification;
        private @Nullable Output<String> disabledReason;
        private @Nullable Output<String> emailAddress;
        private @Nullable Output<String> graphArn;
        private @Nullable Output<String> invitedTime;
        private @Nullable Output<String> message;
        private @Nullable Output<String> status;
        private @Nullable Output<String> updatedTime;
        private @Nullable Output<String> volumeUsageInBytes;

        public Builder() {
    	      // Empty
        }

        public Builder(MemberState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.administratorId = defaults.administratorId;
    	      this.disableEmailNotification = defaults.disableEmailNotification;
    	      this.disabledReason = defaults.disabledReason;
    	      this.emailAddress = defaults.emailAddress;
    	      this.graphArn = defaults.graphArn;
    	      this.invitedTime = defaults.invitedTime;
    	      this.message = defaults.message;
    	      this.status = defaults.status;
    	      this.updatedTime = defaults.updatedTime;
    	      this.volumeUsageInBytes = defaults.volumeUsageInBytes;
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(@Nullable String accountId) {
            this.accountId = Output.ofNullable(accountId);
            return this;
        }

        public Builder administratorId(@Nullable Output<String> administratorId) {
            this.administratorId = administratorId;
            return this;
        }

        public Builder administratorId(@Nullable String administratorId) {
            this.administratorId = Output.ofNullable(administratorId);
            return this;
        }

        public Builder disableEmailNotification(@Nullable Output<Boolean> disableEmailNotification) {
            this.disableEmailNotification = disableEmailNotification;
            return this;
        }

        public Builder disableEmailNotification(@Nullable Boolean disableEmailNotification) {
            this.disableEmailNotification = Output.ofNullable(disableEmailNotification);
            return this;
        }

        public Builder disabledReason(@Nullable Output<String> disabledReason) {
            this.disabledReason = disabledReason;
            return this;
        }

        public Builder disabledReason(@Nullable String disabledReason) {
            this.disabledReason = Output.ofNullable(disabledReason);
            return this;
        }

        public Builder emailAddress(@Nullable Output<String> emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        public Builder emailAddress(@Nullable String emailAddress) {
            this.emailAddress = Output.ofNullable(emailAddress);
            return this;
        }

        public Builder graphArn(@Nullable Output<String> graphArn) {
            this.graphArn = graphArn;
            return this;
        }

        public Builder graphArn(@Nullable String graphArn) {
            this.graphArn = Output.ofNullable(graphArn);
            return this;
        }

        public Builder invitedTime(@Nullable Output<String> invitedTime) {
            this.invitedTime = invitedTime;
            return this;
        }

        public Builder invitedTime(@Nullable String invitedTime) {
            this.invitedTime = Output.ofNullable(invitedTime);
            return this;
        }

        public Builder message(@Nullable Output<String> message) {
            this.message = message;
            return this;
        }

        public Builder message(@Nullable String message) {
            this.message = Output.ofNullable(message);
            return this;
        }

        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Output.ofNullable(status);
            return this;
        }

        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            this.updatedTime = updatedTime;
            return this;
        }

        public Builder updatedTime(@Nullable String updatedTime) {
            this.updatedTime = Output.ofNullable(updatedTime);
            return this;
        }

        public Builder volumeUsageInBytes(@Nullable Output<String> volumeUsageInBytes) {
            this.volumeUsageInBytes = volumeUsageInBytes;
            return this;
        }

        public Builder volumeUsageInBytes(@Nullable String volumeUsageInBytes) {
            this.volumeUsageInBytes = Output.ofNullable(volumeUsageInBytes);
            return this;
        }
        public MemberState build() {
            return new MemberState(accountId, administratorId, disableEmailNotification, disabledReason, emailAddress, graphArn, invitedTime, message, status, updatedTime, volumeUsageInBytes);
        }
    }
}
