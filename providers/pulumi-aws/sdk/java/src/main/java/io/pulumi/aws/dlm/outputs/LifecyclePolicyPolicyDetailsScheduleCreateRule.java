// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.dlm.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class LifecyclePolicyPolicyDetailsScheduleCreateRule {
    /**
     * The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.
     * 
     */
    private final Integer interval;
    /**
     * The unit of time for time-based retention. Valid values: `DAYS`, `WEEKS`, `MONTHS`, or `YEARS`.
     * 
     */
    private final @Nullable String intervalUnit;
    /**
     * A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1.
     * 
     */
    private final @Nullable String times;

    @OutputCustomType.Constructor({"interval","intervalUnit","times"})
    private LifecyclePolicyPolicyDetailsScheduleCreateRule(
        Integer interval,
        @Nullable String intervalUnit,
        @Nullable String times) {
        this.interval = Objects.requireNonNull(interval);
        this.intervalUnit = intervalUnit;
        this.times = times;
    }

    /**
     * The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.
     * 
     */
    public Integer getInterval() {
        return this.interval;
    }
    /**
     * The unit of time for time-based retention. Valid values: `DAYS`, `WEEKS`, `MONTHS`, or `YEARS`.
     * 
     */
    public Optional<String> getIntervalUnit() {
        return Optional.ofNullable(this.intervalUnit);
    }
    /**
     * A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1.
     * 
     */
    public Optional<String> getTimes() {
        return Optional.ofNullable(this.times);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LifecyclePolicyPolicyDetailsScheduleCreateRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer interval;
        private @Nullable String intervalUnit;
        private @Nullable String times;

        public Builder() {
    	      // Empty
        }

        public Builder(LifecyclePolicyPolicyDetailsScheduleCreateRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interval = defaults.interval;
    	      this.intervalUnit = defaults.intervalUnit;
    	      this.times = defaults.times;
        }

        public Builder setInterval(Integer interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }

        public Builder setIntervalUnit(@Nullable String intervalUnit) {
            this.intervalUnit = intervalUnit;
            return this;
        }

        public Builder setTimes(@Nullable String times) {
            this.times = times;
            return this;
        }
        public LifecyclePolicyPolicyDetailsScheduleCreateRule build() {
            return new LifecyclePolicyPolicyDetailsScheduleCreateRule(interval, intervalUnit, times);
        }
    }
}
