// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.amplify.inputs;

import io.pulumi.aws.amplify.inputs.DomainAssociationSubDomainGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainAssociationState extends io.pulumi.resources.ResourceArgs {

    public static final DomainAssociationState Empty = new DomainAssociationState();

    /**
     * The unique ID for an Amplify app.
     * 
     */
    @Import(name="appId")
      private final @Nullable Output<String> appId;

    public Output<String> getAppId() {
        return this.appId == null ? Output.empty() : this.appId;
    }

    /**
     * The Amazon Resource Name (ARN) for the domain association.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * The DNS record for certificate verification.
     * 
     */
    @Import(name="certificateVerificationDnsRecord")
      private final @Nullable Output<String> certificateVerificationDnsRecord;

    public Output<String> getCertificateVerificationDnsRecord() {
        return this.certificateVerificationDnsRecord == null ? Output.empty() : this.certificateVerificationDnsRecord;
    }

    /**
     * The domain name for the domain association.
     * 
     */
    @Import(name="domainName")
      private final @Nullable Output<String> domainName;

    public Output<String> getDomainName() {
        return this.domainName == null ? Output.empty() : this.domainName;
    }

    /**
     * The setting for the subdomain. Documented below.
     * 
     */
    @Import(name="subDomains")
      private final @Nullable Output<List<DomainAssociationSubDomainGetArgs>> subDomains;

    public Output<List<DomainAssociationSubDomainGetArgs>> getSubDomains() {
        return this.subDomains == null ? Output.empty() : this.subDomains;
    }

    /**
     * If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
     * 
     */
    @Import(name="waitForVerification")
      private final @Nullable Output<Boolean> waitForVerification;

    public Output<Boolean> getWaitForVerification() {
        return this.waitForVerification == null ? Output.empty() : this.waitForVerification;
    }

    public DomainAssociationState(
        @Nullable Output<String> appId,
        @Nullable Output<String> arn,
        @Nullable Output<String> certificateVerificationDnsRecord,
        @Nullable Output<String> domainName,
        @Nullable Output<List<DomainAssociationSubDomainGetArgs>> subDomains,
        @Nullable Output<Boolean> waitForVerification) {
        this.appId = appId;
        this.arn = arn;
        this.certificateVerificationDnsRecord = certificateVerificationDnsRecord;
        this.domainName = domainName;
        this.subDomains = subDomains;
        this.waitForVerification = waitForVerification;
    }

    private DomainAssociationState() {
        this.appId = Output.empty();
        this.arn = Output.empty();
        this.certificateVerificationDnsRecord = Output.empty();
        this.domainName = Output.empty();
        this.subDomains = Output.empty();
        this.waitForVerification = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> appId;
        private @Nullable Output<String> arn;
        private @Nullable Output<String> certificateVerificationDnsRecord;
        private @Nullable Output<String> domainName;
        private @Nullable Output<List<DomainAssociationSubDomainGetArgs>> subDomains;
        private @Nullable Output<Boolean> waitForVerification;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainAssociationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.arn = defaults.arn;
    	      this.certificateVerificationDnsRecord = defaults.certificateVerificationDnsRecord;
    	      this.domainName = defaults.domainName;
    	      this.subDomains = defaults.subDomains;
    	      this.waitForVerification = defaults.waitForVerification;
        }

        public Builder appId(@Nullable Output<String> appId) {
            this.appId = appId;
            return this;
        }

        public Builder appId(@Nullable String appId) {
            this.appId = Output.ofNullable(appId);
            return this;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }

        public Builder certificateVerificationDnsRecord(@Nullable Output<String> certificateVerificationDnsRecord) {
            this.certificateVerificationDnsRecord = certificateVerificationDnsRecord;
            return this;
        }

        public Builder certificateVerificationDnsRecord(@Nullable String certificateVerificationDnsRecord) {
            this.certificateVerificationDnsRecord = Output.ofNullable(certificateVerificationDnsRecord);
            return this;
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            this.domainName = domainName;
            return this;
        }

        public Builder domainName(@Nullable String domainName) {
            this.domainName = Output.ofNullable(domainName);
            return this;
        }

        public Builder subDomains(@Nullable Output<List<DomainAssociationSubDomainGetArgs>> subDomains) {
            this.subDomains = subDomains;
            return this;
        }

        public Builder subDomains(@Nullable List<DomainAssociationSubDomainGetArgs> subDomains) {
            this.subDomains = Output.ofNullable(subDomains);
            return this;
        }

        public Builder waitForVerification(@Nullable Output<Boolean> waitForVerification) {
            this.waitForVerification = waitForVerification;
            return this;
        }

        public Builder waitForVerification(@Nullable Boolean waitForVerification) {
            this.waitForVerification = Output.ofNullable(waitForVerification);
            return this;
        }
        public DomainAssociationState build() {
            return new DomainAssociationState(appId, arn, certificateVerificationDnsRecord, domainName, subDomains, waitForVerification);
        }
    }
}
