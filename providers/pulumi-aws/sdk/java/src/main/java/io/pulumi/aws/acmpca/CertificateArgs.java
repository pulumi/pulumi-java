// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.acmpca;

import io.pulumi.aws.acmpca.inputs.CertificateValidityArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    /**
     * Amazon Resource Name (ARN) of the certificate authority.
     * 
     */
    @InputImport(name="certificateAuthorityArn", required=true)
      private final Input<String> certificateAuthorityArn;

    public Input<String> getCertificateAuthorityArn() {
        return this.certificateAuthorityArn;
    }

    /**
     * Certificate Signing Request in PEM format.
     * 
     */
    @InputImport(name="certificateSigningRequest", required=true)
      private final Input<String> certificateSigningRequest;

    public Input<String> getCertificateSigningRequest() {
        return this.certificateSigningRequest;
    }

    /**
     * Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`
     * 
     */
    @InputImport(name="signingAlgorithm", required=true)
      private final Input<String> signingAlgorithm;

    public Input<String> getSigningAlgorithm() {
        return this.signingAlgorithm;
    }

    /**
     * The template to use when issuing a certificate. See [ACM PCA Documentation](https://docs.aws.amazon.com/acm-pca/latest/userguide/UsingTemplates.html) for more information.
     * 
     */
    @InputImport(name="templateArn")
      private final @Nullable Input<String> templateArn;

    public Input<String> getTemplateArn() {
        return this.templateArn == null ? Input.empty() : this.templateArn;
    }

    /**
     * Configures end of the validity period for the certificate. See validity block below.
     * 
     */
    @InputImport(name="validity", required=true)
      private final Input<CertificateValidityArgs> validity;

    public Input<CertificateValidityArgs> getValidity() {
        return this.validity;
    }

    public CertificateArgs(
        Input<String> certificateAuthorityArn,
        Input<String> certificateSigningRequest,
        Input<String> signingAlgorithm,
        @Nullable Input<String> templateArn,
        Input<CertificateValidityArgs> validity) {
        this.certificateAuthorityArn = Objects.requireNonNull(certificateAuthorityArn, "expected parameter 'certificateAuthorityArn' to be non-null");
        this.certificateSigningRequest = Objects.requireNonNull(certificateSigningRequest, "expected parameter 'certificateSigningRequest' to be non-null");
        this.signingAlgorithm = Objects.requireNonNull(signingAlgorithm, "expected parameter 'signingAlgorithm' to be non-null");
        this.templateArn = templateArn;
        this.validity = Objects.requireNonNull(validity, "expected parameter 'validity' to be non-null");
    }

    private CertificateArgs() {
        this.certificateAuthorityArn = Input.empty();
        this.certificateSigningRequest = Input.empty();
        this.signingAlgorithm = Input.empty();
        this.templateArn = Input.empty();
        this.validity = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> certificateAuthorityArn;
        private Input<String> certificateSigningRequest;
        private Input<String> signingAlgorithm;
        private @Nullable Input<String> templateArn;
        private Input<CertificateValidityArgs> validity;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthorityArn = defaults.certificateAuthorityArn;
    	      this.certificateSigningRequest = defaults.certificateSigningRequest;
    	      this.signingAlgorithm = defaults.signingAlgorithm;
    	      this.templateArn = defaults.templateArn;
    	      this.validity = defaults.validity;
        }

        public Builder certificateAuthorityArn(Input<String> certificateAuthorityArn) {
            this.certificateAuthorityArn = Objects.requireNonNull(certificateAuthorityArn);
            return this;
        }

        public Builder certificateAuthorityArn(String certificateAuthorityArn) {
            this.certificateAuthorityArn = Input.of(Objects.requireNonNull(certificateAuthorityArn));
            return this;
        }

        public Builder certificateSigningRequest(Input<String> certificateSigningRequest) {
            this.certificateSigningRequest = Objects.requireNonNull(certificateSigningRequest);
            return this;
        }

        public Builder certificateSigningRequest(String certificateSigningRequest) {
            this.certificateSigningRequest = Input.of(Objects.requireNonNull(certificateSigningRequest));
            return this;
        }

        public Builder signingAlgorithm(Input<String> signingAlgorithm) {
            this.signingAlgorithm = Objects.requireNonNull(signingAlgorithm);
            return this;
        }

        public Builder signingAlgorithm(String signingAlgorithm) {
            this.signingAlgorithm = Input.of(Objects.requireNonNull(signingAlgorithm));
            return this;
        }

        public Builder templateArn(@Nullable Input<String> templateArn) {
            this.templateArn = templateArn;
            return this;
        }

        public Builder templateArn(@Nullable String templateArn) {
            this.templateArn = Input.ofNullable(templateArn);
            return this;
        }

        public Builder validity(Input<CertificateValidityArgs> validity) {
            this.validity = Objects.requireNonNull(validity);
            return this;
        }

        public Builder validity(CertificateValidityArgs validity) {
            this.validity = Input.of(Objects.requireNonNull(validity));
            return this;
        }
        public CertificateArgs build() {
            return new CertificateArgs(certificateAuthorityArn, certificateSigningRequest, signingAlgorithm, templateArn, validity);
        }
    }
}
