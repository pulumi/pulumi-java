// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.enums.InstanceType;
import io.pulumi.aws.ec2.enums.Tenancy;
import io.pulumi.aws.ec2.inputs.InstanceCapacityReservationSpecificationGetArgs;
import io.pulumi.aws.ec2.inputs.InstanceCreditSpecificationGetArgs;
import io.pulumi.aws.ec2.inputs.InstanceEbsBlockDeviceGetArgs;
import io.pulumi.aws.ec2.inputs.InstanceEnclaveOptionsGetArgs;
import io.pulumi.aws.ec2.inputs.InstanceEphemeralBlockDeviceGetArgs;
import io.pulumi.aws.ec2.inputs.InstanceLaunchTemplateGetArgs;
import io.pulumi.aws.ec2.inputs.InstanceMetadataOptionsGetArgs;
import io.pulumi.aws.ec2.inputs.InstanceNetworkInterfaceGetArgs;
import io.pulumi.aws.ec2.inputs.InstanceRootBlockDeviceGetArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceState extends io.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * AMI to use for the instance. Required unless `launch_template` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
     * 
     */
    @InputImport(name="ami")
    private final @Nullable Input<String> ami;

    public Input<String> getAmi() {
        return this.ami == null ? Input.empty() : this.ami;
    }

    /**
     * The ARN of the instance.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Whether to associate a public IP address with an instance in a VPC.
     * 
     */
    @InputImport(name="associatePublicIpAddress")
    private final @Nullable Input<Boolean> associatePublicIpAddress;

    public Input<Boolean> getAssociatePublicIpAddress() {
        return this.associatePublicIpAddress == null ? Input.empty() : this.associatePublicIpAddress;
    }

    /**
     * AZ to start the instance in.
     * 
     */
    @InputImport(name="availabilityZone")
    private final @Nullable Input<String> availabilityZone;

    public Input<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Input.empty() : this.availabilityZone;
    }

    /**
     * Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
     * 
     */
    @InputImport(name="capacityReservationSpecification")
    private final @Nullable Input<InstanceCapacityReservationSpecificationGetArgs> capacityReservationSpecification;

    public Input<InstanceCapacityReservationSpecificationGetArgs> getCapacityReservationSpecification() {
        return this.capacityReservationSpecification == null ? Input.empty() : this.capacityReservationSpecification;
    }

    /**
     * Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
     * 
     */
    @InputImport(name="cpuCoreCount")
    private final @Nullable Input<Integer> cpuCoreCount;

    public Input<Integer> getCpuCoreCount() {
        return this.cpuCoreCount == null ? Input.empty() : this.cpuCoreCount;
    }

    /**
     * If set to to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
     * 
     */
    @InputImport(name="cpuThreadsPerCore")
    private final @Nullable Input<Integer> cpuThreadsPerCore;

    public Input<Integer> getCpuThreadsPerCore() {
        return this.cpuThreadsPerCore == null ? Input.empty() : this.cpuThreadsPerCore;
    }

    /**
     * Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. the provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
     * 
     */
    @InputImport(name="creditSpecification")
    private final @Nullable Input<InstanceCreditSpecificationGetArgs> creditSpecification;

    public Input<InstanceCreditSpecificationGetArgs> getCreditSpecification() {
        return this.creditSpecification == null ? Input.empty() : this.creditSpecification;
    }

    /**
     * If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
     * 
     */
    @InputImport(name="disableApiTermination")
    private final @Nullable Input<Boolean> disableApiTermination;

    public Input<Boolean> getDisableApiTermination() {
        return this.disableApiTermination == null ? Input.empty() : this.disableApiTermination;
    }

    /**
     * One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
     * 
     */
    @InputImport(name="ebsBlockDevices")
    private final @Nullable Input<List<InstanceEbsBlockDeviceGetArgs>> ebsBlockDevices;

    public Input<List<InstanceEbsBlockDeviceGetArgs>> getEbsBlockDevices() {
        return this.ebsBlockDevices == null ? Input.empty() : this.ebsBlockDevices;
    }

    /**
     * If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
     * 
     */
    @InputImport(name="ebsOptimized")
    private final @Nullable Input<Boolean> ebsOptimized;

    public Input<Boolean> getEbsOptimized() {
        return this.ebsOptimized == null ? Input.empty() : this.ebsOptimized;
    }

    /**
     * Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
     * 
     */
    @InputImport(name="enclaveOptions")
    private final @Nullable Input<InstanceEnclaveOptionsGetArgs> enclaveOptions;

    public Input<InstanceEnclaveOptionsGetArgs> getEnclaveOptions() {
        return this.enclaveOptions == null ? Input.empty() : this.enclaveOptions;
    }

    /**
     * One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
     * 
     */
    @InputImport(name="ephemeralBlockDevices")
    private final @Nullable Input<List<InstanceEphemeralBlockDeviceGetArgs>> ephemeralBlockDevices;

    public Input<List<InstanceEphemeralBlockDeviceGetArgs>> getEphemeralBlockDevices() {
        return this.ephemeralBlockDevices == null ? Input.empty() : this.ephemeralBlockDevices;
    }

    /**
     * If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `password_data` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
     * 
     */
    @InputImport(name="getPasswordData")
    private final @Nullable Input<Boolean> getPasswordData;

    public Input<Boolean> getGetPasswordData() {
        return this.getPasswordData == null ? Input.empty() : this.getPasswordData;
    }

    /**
     * If true, the launched EC2 instance will support hibernation.
     * 
     */
    @InputImport(name="hibernation")
    private final @Nullable Input<Boolean> hibernation;

    public Input<Boolean> getHibernation() {
        return this.hibernation == null ? Input.empty() : this.hibernation;
    }

    /**
     * ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
     * 
     */
    @InputImport(name="hostId")
    private final @Nullable Input<String> hostId;

    public Input<String> getHostId() {
        return this.hostId == null ? Input.empty() : this.hostId;
    }

    /**
     * IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
     * 
     */
    @InputImport(name="iamInstanceProfile")
    private final @Nullable Input<String> iamInstanceProfile;

    public Input<String> getIamInstanceProfile() {
        return this.iamInstanceProfile == null ? Input.empty() : this.iamInstanceProfile;
    }

    /**
     * Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
     * 
     */
    @InputImport(name="instanceInitiatedShutdownBehavior")
    private final @Nullable Input<String> instanceInitiatedShutdownBehavior;

    public Input<String> getInstanceInitiatedShutdownBehavior() {
        return this.instanceInitiatedShutdownBehavior == null ? Input.empty() : this.instanceInitiatedShutdownBehavior;
    }

    /**
     * The state of the instance. One of: `pending`, `running`, `shutting-down`, `terminated`, `stopping`, `stopped`. See [Instance Lifecycle](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html) for more information.
     * 
     */
    @InputImport(name="instanceState")
    private final @Nullable Input<String> instanceState;

    public Input<String> getInstanceState() {
        return this.instanceState == null ? Input.empty() : this.instanceState;
    }

    /**
     * The instance type to use for the instance. Updates to this field will trigger a stop/start of the EC2 instance.
     * 
     */
    @InputImport(name="instanceType")
    private final @Nullable Input<Either<String,InstanceType>> instanceType;

    public Input<Either<String,InstanceType>> getInstanceType() {
        return this.instanceType == null ? Input.empty() : this.instanceType;
    }

    /**
     * A number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
     * 
     */
    @InputImport(name="ipv6AddressCount")
    private final @Nullable Input<Integer> ipv6AddressCount;

    public Input<Integer> getIpv6AddressCount() {
        return this.ipv6AddressCount == null ? Input.empty() : this.ipv6AddressCount;
    }

    /**
     * Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
     * 
     */
    @InputImport(name="ipv6Addresses")
    private final @Nullable Input<List<String>> ipv6Addresses;

    public Input<List<String>> getIpv6Addresses() {
        return this.ipv6Addresses == null ? Input.empty() : this.ipv6Addresses;
    }

    /**
     * Key name of the Key Pair to use for the instance; which can be managed using the `aws.ec2.KeyPair` resource.
     * 
     */
    @InputImport(name="keyName")
    private final @Nullable Input<String> keyName;

    public Input<String> getKeyName() {
        return this.keyName == null ? Input.empty() : this.keyName;
    }

    /**
     * Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template.
     * See Launch Template Specification below for more details.
     * 
     */
    @InputImport(name="launchTemplate")
    private final @Nullable Input<InstanceLaunchTemplateGetArgs> launchTemplate;

    public Input<InstanceLaunchTemplateGetArgs> getLaunchTemplate() {
        return this.launchTemplate == null ? Input.empty() : this.launchTemplate;
    }

    /**
     * Customize the metadata options of the instance. See Metadata Options below for more details.
     * 
     */
    @InputImport(name="metadataOptions")
    private final @Nullable Input<InstanceMetadataOptionsGetArgs> metadataOptions;

    public Input<InstanceMetadataOptionsGetArgs> getMetadataOptions() {
        return this.metadataOptions == null ? Input.empty() : this.metadataOptions;
    }

    /**
     * If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
     * 
     */
    @InputImport(name="monitoring")
    private final @Nullable Input<Boolean> monitoring;

    public Input<Boolean> getMonitoring() {
        return this.monitoring == null ? Input.empty() : this.monitoring;
    }

    /**
     * Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
     * 
     */
    @InputImport(name="networkInterfaces")
    private final @Nullable Input<List<InstanceNetworkInterfaceGetArgs>> networkInterfaces;

    public Input<List<InstanceNetworkInterfaceGetArgs>> getNetworkInterfaces() {
        return this.networkInterfaces == null ? Input.empty() : this.networkInterfaces;
    }

    /**
     * The ARN of the Outpost the instance is assigned to.
     * 
     */
    @InputImport(name="outpostArn")
    private final @Nullable Input<String> outpostArn;

    public Input<String> getOutpostArn() {
        return this.outpostArn == null ? Input.empty() : this.outpostArn;
    }

    /**
     * Base-64 encoded encrypted password data for the instance. Useful for getting the administrator password for instances running Microsoft Windows. This attribute is only exported if `get_password_data` is true. Note that this encrypted value will be stored in the state file, as with all exported attributes. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
     * 
     */
    @InputImport(name="passwordData")
    private final @Nullable Input<String> passwordData;

    public Input<String> getPasswordData() {
        return this.passwordData == null ? Input.empty() : this.passwordData;
    }

    /**
     * Placement Group to start the instance in.
     * 
     */
    @InputImport(name="placementGroup")
    private final @Nullable Input<String> placementGroup;

    public Input<String> getPlacementGroup() {
        return this.placementGroup == null ? Input.empty() : this.placementGroup;
    }

    /**
     * The number of the partition the instance is in. Valid only if the `aws.ec2.PlacementGroup` resource's `strategy` argument is set to `"partition"`.
     * 
     */
    @InputImport(name="placementPartitionNumber")
    private final @Nullable Input<Integer> placementPartitionNumber;

    public Input<Integer> getPlacementPartitionNumber() {
        return this.placementPartitionNumber == null ? Input.empty() : this.placementPartitionNumber;
    }

    /**
     * The ID of the instance's primary network interface.
     * 
     */
    @InputImport(name="primaryNetworkInterfaceId")
    private final @Nullable Input<String> primaryNetworkInterfaceId;

    public Input<String> getPrimaryNetworkInterfaceId() {
        return this.primaryNetworkInterfaceId == null ? Input.empty() : this.primaryNetworkInterfaceId;
    }

    /**
     * The private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
     * 
     */
    @InputImport(name="privateDns")
    private final @Nullable Input<String> privateDns;

    public Input<String> getPrivateDns() {
        return this.privateDns == null ? Input.empty() : this.privateDns;
    }

    /**
     * Private IP address to associate with the instance in a VPC.
     * 
     */
    @InputImport(name="privateIp")
    private final @Nullable Input<String> privateIp;

    public Input<String> getPrivateIp() {
        return this.privateIp == null ? Input.empty() : this.privateIp;
    }

    /**
     * The public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
     * 
     */
    @InputImport(name="publicDns")
    private final @Nullable Input<String> publicDns;

    public Input<String> getPublicDns() {
        return this.publicDns == null ? Input.empty() : this.publicDns;
    }

    /**
     * The public IP address assigned to the instance, if applicable. **NOTE**: If you are using an `aws.ec2.Eip` with your instance, you should refer to the EIP's address directly and not use `public_ip` as this field will change after the EIP is attached.
     * 
     */
    @InputImport(name="publicIp")
    private final @Nullable Input<String> publicIp;

    public Input<String> getPublicIp() {
        return this.publicIp == null ? Input.empty() : this.publicIp;
    }

    /**
     * Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
     * 
     */
    @InputImport(name="rootBlockDevice")
    private final @Nullable Input<InstanceRootBlockDeviceGetArgs> rootBlockDevice;

    public Input<InstanceRootBlockDeviceGetArgs> getRootBlockDevice() {
        return this.rootBlockDevice == null ? Input.empty() : this.rootBlockDevice;
    }

    /**
     * A list of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `network_interface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
     * 
     */
    @InputImport(name="secondaryPrivateIps")
    private final @Nullable Input<List<String>> secondaryPrivateIps;

    public Input<List<String>> getSecondaryPrivateIps() {
        return this.secondaryPrivateIps == null ? Input.empty() : this.secondaryPrivateIps;
    }

    /**
     * A list of security group names to associate with.
     * 
     * @deprecated
     * Use of `securityGroups` is discouraged as it does not allow for changes and will force your instance to be replaced if changes are made. To avoid this, use `vpcSecurityGroupIds` which allows for updates.
     * 
     */
    @Deprecated /* Use of `securityGroups` is discouraged as it does not allow for changes and will force your instance to be replaced if changes are made. To avoid this, use `vpcSecurityGroupIds` which allows for updates. */
    @InputImport(name="securityGroups")
    private final @Nullable Input<List<String>> securityGroups;

    @Deprecated /* Use of `securityGroups` is discouraged as it does not allow for changes and will force your instance to be replaced if changes are made. To avoid this, use `vpcSecurityGroupIds` which allows for updates. */
    public Input<List<String>> getSecurityGroups() {
        return this.securityGroups == null ? Input.empty() : this.securityGroups;
    }

    /**
     * Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
     * 
     */
    @InputImport(name="sourceDestCheck")
    private final @Nullable Input<Boolean> sourceDestCheck;

    public Input<Boolean> getSourceDestCheck() {
        return this.sourceDestCheck == null ? Input.empty() : this.sourceDestCheck;
    }

    /**
     * VPC Subnet ID to launch in.
     * 
     */
    @InputImport(name="subnetId")
    private final @Nullable Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId == null ? Input.empty() : this.subnetId;
    }

    /**
     * A map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the import-instance command.
     * 
     */
    @InputImport(name="tenancy")
    private final @Nullable Input<Either<String,Tenancy>> tenancy;

    public Input<Either<String,Tenancy>> getTenancy() {
        return this.tenancy == null ? Input.empty() : this.tenancy;
    }

    /**
     * User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `user_data_base64` instead.
     * 
     */
    @InputImport(name="userData")
    private final @Nullable Input<String> userData;

    public Input<String> getUserData() {
        return this.userData == null ? Input.empty() : this.userData;
    }

    /**
     * Can be used instead of `user_data` to pass base64-encoded binary data directly. Use this instead of `user_data` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
     * 
     */
    @InputImport(name="userDataBase64")
    private final @Nullable Input<String> userDataBase64;

    public Input<String> getUserDataBase64() {
        return this.userDataBase64 == null ? Input.empty() : this.userDataBase64;
    }

    /**
     * A map of tags to assign, at instance-creation time, to root and EBS volumes.
     * 
     */
    @InputImport(name="volumeTags")
    private final @Nullable Input<Map<String,String>> volumeTags;

    public Input<Map<String,String>> getVolumeTags() {
        return this.volumeTags == null ? Input.empty() : this.volumeTags;
    }

    /**
     * A list of security group IDs to associate with.
     * 
     */
    @InputImport(name="vpcSecurityGroupIds")
    private final @Nullable Input<List<String>> vpcSecurityGroupIds;

    public Input<List<String>> getVpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Input.empty() : this.vpcSecurityGroupIds;
    }

    public InstanceState(
        @Nullable Input<String> ami,
        @Nullable Input<String> arn,
        @Nullable Input<Boolean> associatePublicIpAddress,
        @Nullable Input<String> availabilityZone,
        @Nullable Input<InstanceCapacityReservationSpecificationGetArgs> capacityReservationSpecification,
        @Nullable Input<Integer> cpuCoreCount,
        @Nullable Input<Integer> cpuThreadsPerCore,
        @Nullable Input<InstanceCreditSpecificationGetArgs> creditSpecification,
        @Nullable Input<Boolean> disableApiTermination,
        @Nullable Input<List<InstanceEbsBlockDeviceGetArgs>> ebsBlockDevices,
        @Nullable Input<Boolean> ebsOptimized,
        @Nullable Input<InstanceEnclaveOptionsGetArgs> enclaveOptions,
        @Nullable Input<List<InstanceEphemeralBlockDeviceGetArgs>> ephemeralBlockDevices,
        @Nullable Input<Boolean> getPasswordData,
        @Nullable Input<Boolean> hibernation,
        @Nullable Input<String> hostId,
        @Nullable Input<String> iamInstanceProfile,
        @Nullable Input<String> instanceInitiatedShutdownBehavior,
        @Nullable Input<String> instanceState,
        @Nullable Input<Either<String,InstanceType>> instanceType,
        @Nullable Input<Integer> ipv6AddressCount,
        @Nullable Input<List<String>> ipv6Addresses,
        @Nullable Input<String> keyName,
        @Nullable Input<InstanceLaunchTemplateGetArgs> launchTemplate,
        @Nullable Input<InstanceMetadataOptionsGetArgs> metadataOptions,
        @Nullable Input<Boolean> monitoring,
        @Nullable Input<List<InstanceNetworkInterfaceGetArgs>> networkInterfaces,
        @Nullable Input<String> outpostArn,
        @Nullable Input<String> passwordData,
        @Nullable Input<String> placementGroup,
        @Nullable Input<Integer> placementPartitionNumber,
        @Nullable Input<String> primaryNetworkInterfaceId,
        @Nullable Input<String> privateDns,
        @Nullable Input<String> privateIp,
        @Nullable Input<String> publicDns,
        @Nullable Input<String> publicIp,
        @Nullable Input<InstanceRootBlockDeviceGetArgs> rootBlockDevice,
        @Nullable Input<List<String>> secondaryPrivateIps,
        @Nullable Input<List<String>> securityGroups,
        @Nullable Input<Boolean> sourceDestCheck,
        @Nullable Input<String> subnetId,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<Either<String,Tenancy>> tenancy,
        @Nullable Input<String> userData,
        @Nullable Input<String> userDataBase64,
        @Nullable Input<Map<String,String>> volumeTags,
        @Nullable Input<List<String>> vpcSecurityGroupIds) {
        this.ami = ami;
        this.arn = arn;
        this.associatePublicIpAddress = associatePublicIpAddress;
        this.availabilityZone = availabilityZone;
        this.capacityReservationSpecification = capacityReservationSpecification;
        this.cpuCoreCount = cpuCoreCount;
        this.cpuThreadsPerCore = cpuThreadsPerCore;
        this.creditSpecification = creditSpecification;
        this.disableApiTermination = disableApiTermination;
        this.ebsBlockDevices = ebsBlockDevices;
        this.ebsOptimized = ebsOptimized;
        this.enclaveOptions = enclaveOptions;
        this.ephemeralBlockDevices = ephemeralBlockDevices;
        this.getPasswordData = getPasswordData;
        this.hibernation = hibernation;
        this.hostId = hostId;
        this.iamInstanceProfile = iamInstanceProfile;
        this.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior;
        this.instanceState = instanceState;
        this.instanceType = instanceType;
        this.ipv6AddressCount = ipv6AddressCount;
        this.ipv6Addresses = ipv6Addresses;
        this.keyName = keyName;
        this.launchTemplate = launchTemplate;
        this.metadataOptions = metadataOptions;
        this.monitoring = monitoring;
        this.networkInterfaces = networkInterfaces;
        this.outpostArn = outpostArn;
        this.passwordData = passwordData;
        this.placementGroup = placementGroup;
        this.placementPartitionNumber = placementPartitionNumber;
        this.primaryNetworkInterfaceId = primaryNetworkInterfaceId;
        this.privateDns = privateDns;
        this.privateIp = privateIp;
        this.publicDns = publicDns;
        this.publicIp = publicIp;
        this.rootBlockDevice = rootBlockDevice;
        this.secondaryPrivateIps = secondaryPrivateIps;
        this.securityGroups = securityGroups;
        this.sourceDestCheck = sourceDestCheck;
        this.subnetId = subnetId;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.tenancy = tenancy;
        this.userData = userData;
        this.userDataBase64 = userDataBase64;
        this.volumeTags = volumeTags;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    }

    private InstanceState() {
        this.ami = Input.empty();
        this.arn = Input.empty();
        this.associatePublicIpAddress = Input.empty();
        this.availabilityZone = Input.empty();
        this.capacityReservationSpecification = Input.empty();
        this.cpuCoreCount = Input.empty();
        this.cpuThreadsPerCore = Input.empty();
        this.creditSpecification = Input.empty();
        this.disableApiTermination = Input.empty();
        this.ebsBlockDevices = Input.empty();
        this.ebsOptimized = Input.empty();
        this.enclaveOptions = Input.empty();
        this.ephemeralBlockDevices = Input.empty();
        this.getPasswordData = Input.empty();
        this.hibernation = Input.empty();
        this.hostId = Input.empty();
        this.iamInstanceProfile = Input.empty();
        this.instanceInitiatedShutdownBehavior = Input.empty();
        this.instanceState = Input.empty();
        this.instanceType = Input.empty();
        this.ipv6AddressCount = Input.empty();
        this.ipv6Addresses = Input.empty();
        this.keyName = Input.empty();
        this.launchTemplate = Input.empty();
        this.metadataOptions = Input.empty();
        this.monitoring = Input.empty();
        this.networkInterfaces = Input.empty();
        this.outpostArn = Input.empty();
        this.passwordData = Input.empty();
        this.placementGroup = Input.empty();
        this.placementPartitionNumber = Input.empty();
        this.primaryNetworkInterfaceId = Input.empty();
        this.privateDns = Input.empty();
        this.privateIp = Input.empty();
        this.publicDns = Input.empty();
        this.publicIp = Input.empty();
        this.rootBlockDevice = Input.empty();
        this.secondaryPrivateIps = Input.empty();
        this.securityGroups = Input.empty();
        this.sourceDestCheck = Input.empty();
        this.subnetId = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.tenancy = Input.empty();
        this.userData = Input.empty();
        this.userDataBase64 = Input.empty();
        this.volumeTags = Input.empty();
        this.vpcSecurityGroupIds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> ami;
        private @Nullable Input<String> arn;
        private @Nullable Input<Boolean> associatePublicIpAddress;
        private @Nullable Input<String> availabilityZone;
        private @Nullable Input<InstanceCapacityReservationSpecificationGetArgs> capacityReservationSpecification;
        private @Nullable Input<Integer> cpuCoreCount;
        private @Nullable Input<Integer> cpuThreadsPerCore;
        private @Nullable Input<InstanceCreditSpecificationGetArgs> creditSpecification;
        private @Nullable Input<Boolean> disableApiTermination;
        private @Nullable Input<List<InstanceEbsBlockDeviceGetArgs>> ebsBlockDevices;
        private @Nullable Input<Boolean> ebsOptimized;
        private @Nullable Input<InstanceEnclaveOptionsGetArgs> enclaveOptions;
        private @Nullable Input<List<InstanceEphemeralBlockDeviceGetArgs>> ephemeralBlockDevices;
        private @Nullable Input<Boolean> getPasswordData;
        private @Nullable Input<Boolean> hibernation;
        private @Nullable Input<String> hostId;
        private @Nullable Input<String> iamInstanceProfile;
        private @Nullable Input<String> instanceInitiatedShutdownBehavior;
        private @Nullable Input<String> instanceState;
        private @Nullable Input<Either<String,InstanceType>> instanceType;
        private @Nullable Input<Integer> ipv6AddressCount;
        private @Nullable Input<List<String>> ipv6Addresses;
        private @Nullable Input<String> keyName;
        private @Nullable Input<InstanceLaunchTemplateGetArgs> launchTemplate;
        private @Nullable Input<InstanceMetadataOptionsGetArgs> metadataOptions;
        private @Nullable Input<Boolean> monitoring;
        private @Nullable Input<List<InstanceNetworkInterfaceGetArgs>> networkInterfaces;
        private @Nullable Input<String> outpostArn;
        private @Nullable Input<String> passwordData;
        private @Nullable Input<String> placementGroup;
        private @Nullable Input<Integer> placementPartitionNumber;
        private @Nullable Input<String> primaryNetworkInterfaceId;
        private @Nullable Input<String> privateDns;
        private @Nullable Input<String> privateIp;
        private @Nullable Input<String> publicDns;
        private @Nullable Input<String> publicIp;
        private @Nullable Input<InstanceRootBlockDeviceGetArgs> rootBlockDevice;
        private @Nullable Input<List<String>> secondaryPrivateIps;
        private @Nullable Input<List<String>> securityGroups;
        private @Nullable Input<Boolean> sourceDestCheck;
        private @Nullable Input<String> subnetId;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<Either<String,Tenancy>> tenancy;
        private @Nullable Input<String> userData;
        private @Nullable Input<String> userDataBase64;
        private @Nullable Input<Map<String,String>> volumeTags;
        private @Nullable Input<List<String>> vpcSecurityGroupIds;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ami = defaults.ami;
    	      this.arn = defaults.arn;
    	      this.associatePublicIpAddress = defaults.associatePublicIpAddress;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.capacityReservationSpecification = defaults.capacityReservationSpecification;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.cpuThreadsPerCore = defaults.cpuThreadsPerCore;
    	      this.creditSpecification = defaults.creditSpecification;
    	      this.disableApiTermination = defaults.disableApiTermination;
    	      this.ebsBlockDevices = defaults.ebsBlockDevices;
    	      this.ebsOptimized = defaults.ebsOptimized;
    	      this.enclaveOptions = defaults.enclaveOptions;
    	      this.ephemeralBlockDevices = defaults.ephemeralBlockDevices;
    	      this.getPasswordData = defaults.getPasswordData;
    	      this.hibernation = defaults.hibernation;
    	      this.hostId = defaults.hostId;
    	      this.iamInstanceProfile = defaults.iamInstanceProfile;
    	      this.instanceInitiatedShutdownBehavior = defaults.instanceInitiatedShutdownBehavior;
    	      this.instanceState = defaults.instanceState;
    	      this.instanceType = defaults.instanceType;
    	      this.ipv6AddressCount = defaults.ipv6AddressCount;
    	      this.ipv6Addresses = defaults.ipv6Addresses;
    	      this.keyName = defaults.keyName;
    	      this.launchTemplate = defaults.launchTemplate;
    	      this.metadataOptions = defaults.metadataOptions;
    	      this.monitoring = defaults.monitoring;
    	      this.networkInterfaces = defaults.networkInterfaces;
    	      this.outpostArn = defaults.outpostArn;
    	      this.passwordData = defaults.passwordData;
    	      this.placementGroup = defaults.placementGroup;
    	      this.placementPartitionNumber = defaults.placementPartitionNumber;
    	      this.primaryNetworkInterfaceId = defaults.primaryNetworkInterfaceId;
    	      this.privateDns = defaults.privateDns;
    	      this.privateIp = defaults.privateIp;
    	      this.publicDns = defaults.publicDns;
    	      this.publicIp = defaults.publicIp;
    	      this.rootBlockDevice = defaults.rootBlockDevice;
    	      this.secondaryPrivateIps = defaults.secondaryPrivateIps;
    	      this.securityGroups = defaults.securityGroups;
    	      this.sourceDestCheck = defaults.sourceDestCheck;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.tenancy = defaults.tenancy;
    	      this.userData = defaults.userData;
    	      this.userDataBase64 = defaults.userDataBase64;
    	      this.volumeTags = defaults.volumeTags;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        public Builder setAmi(@Nullable Input<String> ami) {
            this.ami = ami;
            return this;
        }

        public Builder setAmi(@Nullable String ami) {
            this.ami = Input.ofNullable(ami);
            return this;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setAssociatePublicIpAddress(@Nullable Input<Boolean> associatePublicIpAddress) {
            this.associatePublicIpAddress = associatePublicIpAddress;
            return this;
        }

        public Builder setAssociatePublicIpAddress(@Nullable Boolean associatePublicIpAddress) {
            this.associatePublicIpAddress = Input.ofNullable(associatePublicIpAddress);
            return this;
        }

        public Builder setAvailabilityZone(@Nullable Input<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder setAvailabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Input.ofNullable(availabilityZone);
            return this;
        }

        public Builder setCapacityReservationSpecification(@Nullable Input<InstanceCapacityReservationSpecificationGetArgs> capacityReservationSpecification) {
            this.capacityReservationSpecification = capacityReservationSpecification;
            return this;
        }

        public Builder setCapacityReservationSpecification(@Nullable InstanceCapacityReservationSpecificationGetArgs capacityReservationSpecification) {
            this.capacityReservationSpecification = Input.ofNullable(capacityReservationSpecification);
            return this;
        }

        public Builder setCpuCoreCount(@Nullable Input<Integer> cpuCoreCount) {
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }

        public Builder setCpuCoreCount(@Nullable Integer cpuCoreCount) {
            this.cpuCoreCount = Input.ofNullable(cpuCoreCount);
            return this;
        }

        public Builder setCpuThreadsPerCore(@Nullable Input<Integer> cpuThreadsPerCore) {
            this.cpuThreadsPerCore = cpuThreadsPerCore;
            return this;
        }

        public Builder setCpuThreadsPerCore(@Nullable Integer cpuThreadsPerCore) {
            this.cpuThreadsPerCore = Input.ofNullable(cpuThreadsPerCore);
            return this;
        }

        public Builder setCreditSpecification(@Nullable Input<InstanceCreditSpecificationGetArgs> creditSpecification) {
            this.creditSpecification = creditSpecification;
            return this;
        }

        public Builder setCreditSpecification(@Nullable InstanceCreditSpecificationGetArgs creditSpecification) {
            this.creditSpecification = Input.ofNullable(creditSpecification);
            return this;
        }

        public Builder setDisableApiTermination(@Nullable Input<Boolean> disableApiTermination) {
            this.disableApiTermination = disableApiTermination;
            return this;
        }

        public Builder setDisableApiTermination(@Nullable Boolean disableApiTermination) {
            this.disableApiTermination = Input.ofNullable(disableApiTermination);
            return this;
        }

        public Builder setEbsBlockDevices(@Nullable Input<List<InstanceEbsBlockDeviceGetArgs>> ebsBlockDevices) {
            this.ebsBlockDevices = ebsBlockDevices;
            return this;
        }

        public Builder setEbsBlockDevices(@Nullable List<InstanceEbsBlockDeviceGetArgs> ebsBlockDevices) {
            this.ebsBlockDevices = Input.ofNullable(ebsBlockDevices);
            return this;
        }

        public Builder setEbsOptimized(@Nullable Input<Boolean> ebsOptimized) {
            this.ebsOptimized = ebsOptimized;
            return this;
        }

        public Builder setEbsOptimized(@Nullable Boolean ebsOptimized) {
            this.ebsOptimized = Input.ofNullable(ebsOptimized);
            return this;
        }

        public Builder setEnclaveOptions(@Nullable Input<InstanceEnclaveOptionsGetArgs> enclaveOptions) {
            this.enclaveOptions = enclaveOptions;
            return this;
        }

        public Builder setEnclaveOptions(@Nullable InstanceEnclaveOptionsGetArgs enclaveOptions) {
            this.enclaveOptions = Input.ofNullable(enclaveOptions);
            return this;
        }

        public Builder setEphemeralBlockDevices(@Nullable Input<List<InstanceEphemeralBlockDeviceGetArgs>> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = ephemeralBlockDevices;
            return this;
        }

        public Builder setEphemeralBlockDevices(@Nullable List<InstanceEphemeralBlockDeviceGetArgs> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = Input.ofNullable(ephemeralBlockDevices);
            return this;
        }

        public Builder setGetPasswordData(@Nullable Input<Boolean> getPasswordData) {
            this.getPasswordData = getPasswordData;
            return this;
        }

        public Builder setGetPasswordData(@Nullable Boolean getPasswordData) {
            this.getPasswordData = Input.ofNullable(getPasswordData);
            return this;
        }

        public Builder setHibernation(@Nullable Input<Boolean> hibernation) {
            this.hibernation = hibernation;
            return this;
        }

        public Builder setHibernation(@Nullable Boolean hibernation) {
            this.hibernation = Input.ofNullable(hibernation);
            return this;
        }

        public Builder setHostId(@Nullable Input<String> hostId) {
            this.hostId = hostId;
            return this;
        }

        public Builder setHostId(@Nullable String hostId) {
            this.hostId = Input.ofNullable(hostId);
            return this;
        }

        public Builder setIamInstanceProfile(@Nullable Input<String> iamInstanceProfile) {
            this.iamInstanceProfile = iamInstanceProfile;
            return this;
        }

        public Builder setInstanceInitiatedShutdownBehavior(@Nullable Input<String> instanceInitiatedShutdownBehavior) {
            this.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior;
            return this;
        }

        public Builder setInstanceInitiatedShutdownBehavior(@Nullable String instanceInitiatedShutdownBehavior) {
            this.instanceInitiatedShutdownBehavior = Input.ofNullable(instanceInitiatedShutdownBehavior);
            return this;
        }

        public Builder setInstanceState(@Nullable Input<String> instanceState) {
            this.instanceState = instanceState;
            return this;
        }

        public Builder setInstanceState(@Nullable String instanceState) {
            this.instanceState = Input.ofNullable(instanceState);
            return this;
        }

        public Builder setInstanceType(@Nullable Input<Either<String,InstanceType>> instanceType) {
            this.instanceType = instanceType;
            return this;
        }

        public Builder setInstanceType(@Nullable Either<String,InstanceType> instanceType) {
            this.instanceType = Input.ofNullable(instanceType);
            return this;
        }

        public Builder setIpv6AddressCount(@Nullable Input<Integer> ipv6AddressCount) {
            this.ipv6AddressCount = ipv6AddressCount;
            return this;
        }

        public Builder setIpv6AddressCount(@Nullable Integer ipv6AddressCount) {
            this.ipv6AddressCount = Input.ofNullable(ipv6AddressCount);
            return this;
        }

        public Builder setIpv6Addresses(@Nullable Input<List<String>> ipv6Addresses) {
            this.ipv6Addresses = ipv6Addresses;
            return this;
        }

        public Builder setIpv6Addresses(@Nullable List<String> ipv6Addresses) {
            this.ipv6Addresses = Input.ofNullable(ipv6Addresses);
            return this;
        }

        public Builder setKeyName(@Nullable Input<String> keyName) {
            this.keyName = keyName;
            return this;
        }

        public Builder setKeyName(@Nullable String keyName) {
            this.keyName = Input.ofNullable(keyName);
            return this;
        }

        public Builder setLaunchTemplate(@Nullable Input<InstanceLaunchTemplateGetArgs> launchTemplate) {
            this.launchTemplate = launchTemplate;
            return this;
        }

        public Builder setLaunchTemplate(@Nullable InstanceLaunchTemplateGetArgs launchTemplate) {
            this.launchTemplate = Input.ofNullable(launchTemplate);
            return this;
        }

        public Builder setMetadataOptions(@Nullable Input<InstanceMetadataOptionsGetArgs> metadataOptions) {
            this.metadataOptions = metadataOptions;
            return this;
        }

        public Builder setMetadataOptions(@Nullable InstanceMetadataOptionsGetArgs metadataOptions) {
            this.metadataOptions = Input.ofNullable(metadataOptions);
            return this;
        }

        public Builder setMonitoring(@Nullable Input<Boolean> monitoring) {
            this.monitoring = monitoring;
            return this;
        }

        public Builder setMonitoring(@Nullable Boolean monitoring) {
            this.monitoring = Input.ofNullable(monitoring);
            return this;
        }

        public Builder setNetworkInterfaces(@Nullable Input<List<InstanceNetworkInterfaceGetArgs>> networkInterfaces) {
            this.networkInterfaces = networkInterfaces;
            return this;
        }

        public Builder setNetworkInterfaces(@Nullable List<InstanceNetworkInterfaceGetArgs> networkInterfaces) {
            this.networkInterfaces = Input.ofNullable(networkInterfaces);
            return this;
        }

        public Builder setOutpostArn(@Nullable Input<String> outpostArn) {
            this.outpostArn = outpostArn;
            return this;
        }

        public Builder setOutpostArn(@Nullable String outpostArn) {
            this.outpostArn = Input.ofNullable(outpostArn);
            return this;
        }

        public Builder setPasswordData(@Nullable Input<String> passwordData) {
            this.passwordData = passwordData;
            return this;
        }

        public Builder setPasswordData(@Nullable String passwordData) {
            this.passwordData = Input.ofNullable(passwordData);
            return this;
        }

        public Builder setPlacementGroup(@Nullable Input<String> placementGroup) {
            this.placementGroup = placementGroup;
            return this;
        }

        public Builder setPlacementGroup(@Nullable String placementGroup) {
            this.placementGroup = Input.ofNullable(placementGroup);
            return this;
        }

        public Builder setPlacementPartitionNumber(@Nullable Input<Integer> placementPartitionNumber) {
            this.placementPartitionNumber = placementPartitionNumber;
            return this;
        }

        public Builder setPlacementPartitionNumber(@Nullable Integer placementPartitionNumber) {
            this.placementPartitionNumber = Input.ofNullable(placementPartitionNumber);
            return this;
        }

        public Builder setPrimaryNetworkInterfaceId(@Nullable Input<String> primaryNetworkInterfaceId) {
            this.primaryNetworkInterfaceId = primaryNetworkInterfaceId;
            return this;
        }

        public Builder setPrimaryNetworkInterfaceId(@Nullable String primaryNetworkInterfaceId) {
            this.primaryNetworkInterfaceId = Input.ofNullable(primaryNetworkInterfaceId);
            return this;
        }

        public Builder setPrivateDns(@Nullable Input<String> privateDns) {
            this.privateDns = privateDns;
            return this;
        }

        public Builder setPrivateDns(@Nullable String privateDns) {
            this.privateDns = Input.ofNullable(privateDns);
            return this;
        }

        public Builder setPrivateIp(@Nullable Input<String> privateIp) {
            this.privateIp = privateIp;
            return this;
        }

        public Builder setPrivateIp(@Nullable String privateIp) {
            this.privateIp = Input.ofNullable(privateIp);
            return this;
        }

        public Builder setPublicDns(@Nullable Input<String> publicDns) {
            this.publicDns = publicDns;
            return this;
        }

        public Builder setPublicDns(@Nullable String publicDns) {
            this.publicDns = Input.ofNullable(publicDns);
            return this;
        }

        public Builder setPublicIp(@Nullable Input<String> publicIp) {
            this.publicIp = publicIp;
            return this;
        }

        public Builder setPublicIp(@Nullable String publicIp) {
            this.publicIp = Input.ofNullable(publicIp);
            return this;
        }

        public Builder setRootBlockDevice(@Nullable Input<InstanceRootBlockDeviceGetArgs> rootBlockDevice) {
            this.rootBlockDevice = rootBlockDevice;
            return this;
        }

        public Builder setRootBlockDevice(@Nullable InstanceRootBlockDeviceGetArgs rootBlockDevice) {
            this.rootBlockDevice = Input.ofNullable(rootBlockDevice);
            return this;
        }

        public Builder setSecondaryPrivateIps(@Nullable Input<List<String>> secondaryPrivateIps) {
            this.secondaryPrivateIps = secondaryPrivateIps;
            return this;
        }

        public Builder setSecondaryPrivateIps(@Nullable List<String> secondaryPrivateIps) {
            this.secondaryPrivateIps = Input.ofNullable(secondaryPrivateIps);
            return this;
        }

        public Builder setSecurityGroups(@Nullable Input<List<String>> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }

        public Builder setSecurityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = Input.ofNullable(securityGroups);
            return this;
        }

        public Builder setSourceDestCheck(@Nullable Input<Boolean> sourceDestCheck) {
            this.sourceDestCheck = sourceDestCheck;
            return this;
        }

        public Builder setSourceDestCheck(@Nullable Boolean sourceDestCheck) {
            this.sourceDestCheck = Input.ofNullable(sourceDestCheck);
            return this;
        }

        public Builder setSubnetId(@Nullable Input<String> subnetId) {
            this.subnetId = subnetId;
            return this;
        }

        public Builder setSubnetId(@Nullable String subnetId) {
            this.subnetId = Input.ofNullable(subnetId);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setTenancy(@Nullable Input<Either<String,Tenancy>> tenancy) {
            this.tenancy = tenancy;
            return this;
        }

        public Builder setTenancy(@Nullable Either<String,Tenancy> tenancy) {
            this.tenancy = Input.ofNullable(tenancy);
            return this;
        }

        public Builder setUserData(@Nullable Input<String> userData) {
            this.userData = userData;
            return this;
        }

        public Builder setUserData(@Nullable String userData) {
            this.userData = Input.ofNullable(userData);
            return this;
        }

        public Builder setUserDataBase64(@Nullable Input<String> userDataBase64) {
            this.userDataBase64 = userDataBase64;
            return this;
        }

        public Builder setUserDataBase64(@Nullable String userDataBase64) {
            this.userDataBase64 = Input.ofNullable(userDataBase64);
            return this;
        }

        public Builder setVolumeTags(@Nullable Input<Map<String,String>> volumeTags) {
            this.volumeTags = volumeTags;
            return this;
        }

        public Builder setVolumeTags(@Nullable Map<String,String> volumeTags) {
            this.volumeTags = Input.ofNullable(volumeTags);
            return this;
        }

        public Builder setVpcSecurityGroupIds(@Nullable Input<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        public Builder setVpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Input.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public InstanceState build() {
            return new InstanceState(ami, arn, associatePublicIpAddress, availabilityZone, capacityReservationSpecification, cpuCoreCount, cpuThreadsPerCore, creditSpecification, disableApiTermination, ebsBlockDevices, ebsOptimized, enclaveOptions, ephemeralBlockDevices, getPasswordData, hibernation, hostId, iamInstanceProfile, instanceInitiatedShutdownBehavior, instanceState, instanceType, ipv6AddressCount, ipv6Addresses, keyName, launchTemplate, metadataOptions, monitoring, networkInterfaces, outpostArn, passwordData, placementGroup, placementPartitionNumber, primaryNetworkInterfaceId, privateDns, privateIp, publicDns, publicIp, rootBlockDevice, secondaryPrivateIps, securityGroups, sourceDestCheck, subnetId, tags, tagsAll, tenancy, userData, userDataBase64, volumeTags, vpcSecurityGroupIds);
        }
    }
}
