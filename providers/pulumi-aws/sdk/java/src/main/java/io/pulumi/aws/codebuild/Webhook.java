// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codebuild;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.codebuild.WebhookArgs;
import io.pulumi.aws.codebuild.inputs.WebhookState;
import io.pulumi.aws.codebuild.outputs.WebhookFilterGroup;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Manages a CodeBuild webhook, which is an endpoint accepted by the CodeBuild service to trigger builds from source code repositories. Depending on the source type of the CodeBuild project, the CodeBuild service may also automatically create and delete the actual repository webhook as well.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Bitbucket and GitHub
 * 
 * When working with [Bitbucket](https://bitbucket.org) and [GitHub](https://github.com) source CodeBuild webhooks, the CodeBuild service will automatically create (on `aws.codebuild.Webhook` resource creation) and delete (on `aws.codebuild.Webhook` resource deletion) the Bitbucket/GitHub repository webhook using its granted OAuth permissions. This behavior cannot be controlled by this provider.
 * 
 * > **Note:** The AWS account that this provider uses to create this resource *must* have authorized CodeBuild to access Bitbucket/GitHub's OAuth API in each applicable region. This is a manual step that must be done *before* creating webhooks with this resource. If OAuth is not configured, AWS will return an error similar to `ResourceNotFoundException: Could not find access token for server type github`. More information can be found in the CodeBuild User Guide for [Bitbucket](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-bitbucket-pull-request.html) and [GitHub](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-github-pull-request.html).
 * 
 * > **Note:** Further managing the automatically created Bitbucket/GitHub webhook with the `bitbucket_hook`/`github_repository_webhook` resource is only possible with importing that resource after creation of the `aws.codebuild.Webhook` resource. The CodeBuild API does not ever provide the `secret` attribute for the `aws.codebuild.Webhook` resource in this scenario.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.codebuild.Webhook("example", {
 *     projectName: aws_codebuild_project.example.name,
 *     buildType: "BUILD",
 *     filterGroups: [{
 *         filters: [
 *             {
 *                 type: "EVENT",
 *                 pattern: "PUSH",
 *             },
 *             {
 *                 type: "HEAD_REF",
 *                 pattern: "master",
 *             },
 *         ],
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.codebuild.Webhook("example",
 *     project_name=aws_codebuild_project["example"]["name"],
 *     build_type="BUILD",
 *     filter_groups=[aws.codebuild.WebhookFilterGroupArgs(
 *         filters=[
 *             aws.codebuild.WebhookFilterGroupFilterArgs(
 *                 type="EVENT",
 *                 pattern="PUSH",
 *             ),
 *             aws.codebuild.WebhookFilterGroupFilterArgs(
 *                 type="HEAD_REF",
 *                 pattern="master",
 *             ),
 *         ],
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.CodeBuild.Webhook("example", new Aws.CodeBuild.WebhookArgs
 *         {
 *             ProjectName = aws_codebuild_project.Example.Name,
 *             BuildType = "BUILD",
 *             FilterGroups = 
 *             {
 *                 new Aws.CodeBuild.Inputs.WebhookFilterGroupArgs
 *                 {
 *                     Filters = 
 *                     {
 *                         new Aws.CodeBuild.Inputs.WebhookFilterGroupFilterArgs
 *                         {
 *                             Type = "EVENT",
 *                             Pattern = "PUSH",
 *                         },
 *                         new Aws.CodeBuild.Inputs.WebhookFilterGroupFilterArgs
 *                         {
 *                             Type = "HEAD_REF",
 *                             Pattern = "master",
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codebuild"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := codebuild.NewWebhook(ctx, "example", &codebuild.WebhookArgs{
 * 			ProjectName: pulumi.Any(aws_codebuild_project.Example.Name),
 * 			BuildType:   pulumi.String("BUILD"),
 * 			FilterGroups: codebuild.WebhookFilterGroupArray{
 * 				&codebuild.WebhookFilterGroupArgs{
 * 					Filters: codebuild.WebhookFilterGroupFilterArray{
 * 						&codebuild.WebhookFilterGroupFilterArgs{
 * 							Type:    pulumi.String("EVENT"),
 * 							Pattern: pulumi.String("PUSH"),
 * 						},
 * 						&codebuild.WebhookFilterGroupFilterArgs{
 * 							Type:    pulumi.String("HEAD_REF"),
 * 							Pattern: pulumi.String("master"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### GitHub Enterprise
 * 
 * When working with [GitHub Enterprise](https://enterprise.github.com/) source CodeBuild webhooks, the GHE repository webhook must be separately managed (e.g., manually or with the `github_repository_webhook` resource).
 * 
 * More information creating webhooks with GitHub Enterprise can be found in the [CodeBuild User Guide](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-github-enterprise.html).
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as github from "@pulumi/github";
 * 
 * const exampleWebhook = new aws.codebuild.Webhook("exampleWebhook", {projectName: aws_codebuild_project.example.name});
 * const exampleRepositoryWebhook = new github.RepositoryWebhook("exampleRepositoryWebhook", {
 *     active: true,
 *     events: ["push"],
 *     repository: github_repository.example.name,
 *     configuration: {
 *         url: exampleWebhook.payloadUrl,
 *         secret: exampleWebhook.secret,
 *         contentType: "json",
 *         insecureSsl: false,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * import pulumi_github as github
 * 
 * example_webhook = aws.codebuild.Webhook("exampleWebhook", project_name=aws_codebuild_project["example"]["name"])
 * example_repository_webhook = github.RepositoryWebhook("exampleRepositoryWebhook",
 *     active=True,
 *     events=["push"],
 *     repository=github_repository["example"]["name"],
 *     configuration=github.RepositoryWebhookConfigurationArgs(
 *         url=example_webhook.payload_url,
 *         secret=example_webhook.secret,
 *         content_type="json",
 *         insecure_ssl=False,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * using Github = Pulumi.Github;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleWebhook = new Aws.CodeBuild.Webhook("exampleWebhook", new Aws.CodeBuild.WebhookArgs
 *         {
 *             ProjectName = aws_codebuild_project.Example.Name,
 *         });
 *         var exampleRepositoryWebhook = new Github.RepositoryWebhook("exampleRepositoryWebhook", new Github.RepositoryWebhookArgs
 *         {
 *             Active = true,
 *             Events = 
 *             {
 *                 "push",
 *             },
 *             Repository = github_repository.Example.Name,
 *             Configuration = new Github.Inputs.RepositoryWebhookConfigurationArgs
 *             {
 *                 Url = exampleWebhook.PayloadUrl,
 *                 Secret = exampleWebhook.Secret,
 *                 ContentType = "json",
 *                 InsecureSsl = false,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codebuild"
 * 	"github.com/pulumi/pulumi-github/sdk/v4/go/github"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleWebhook, err := codebuild.NewWebhook(ctx, "exampleWebhook", &codebuild.WebhookArgs{
 * 			ProjectName: pulumi.Any(aws_codebuild_project.Example.Name),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = github.NewRepositoryWebhook(ctx, "exampleRepositoryWebhook", &github.RepositoryWebhookArgs{
 * 			Active: pulumi.Bool(true),
 * 			Events: pulumi.StringArray{
 * 				pulumi.String("push"),
 * 			},
 * 			Repository: pulumi.Any(github_repository.Example.Name),
 * 			Configuration: &RepositoryWebhookConfigurationArgs{
 * 				Url:         exampleWebhook.PayloadUrl,
 * 				Secret:      exampleWebhook.Secret,
 * 				ContentType: pulumi.String("json"),
 * 				InsecureSsl: pulumi.Bool(false),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * CodeBuild Webhooks can be imported using the CodeBuild Project name, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:codebuild/webhook:Webhook example MyProjectName
 * ```
 * 
 *  
 */
@ResourceType(type="aws:codebuild/webhook:Webhook")
public class Webhook extends io.pulumi.resources.CustomResource {
    /**
     * A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filter_group` over `branch_filter`.
     * 
     */
    @Export(name="branchFilter", type=String.class, parameters={})
    private Output</* @Nullable */ String> branchFilter;

    /**
     * @return A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filter_group` over `branch_filter`.
     * 
     */
    public Output</* @Nullable */ String> getBranchFilter() {
        return this.branchFilter;
    }
    /**
     * The type of build this webhook will trigger. Valid values for this parameter are: `BUILD`, `BUILD_BATCH`.
     * 
     */
    @Export(name="buildType", type=String.class, parameters={})
    private Output</* @Nullable */ String> buildType;

    /**
     * @return The type of build this webhook will trigger. Valid values for this parameter are: `BUILD`, `BUILD_BATCH`.
     * 
     */
    public Output</* @Nullable */ String> getBuildType() {
        return this.buildType;
    }
    /**
     * Information about the webhook's trigger. Filter group blocks are documented below.
     * 
     */
    @Export(name="filterGroups", type=List.class, parameters={WebhookFilterGroup.class})
    private Output</* @Nullable */ List<WebhookFilterGroup>> filterGroups;

    /**
     * @return Information about the webhook's trigger. Filter group blocks are documented below.
     * 
     */
    public Output</* @Nullable */ List<WebhookFilterGroup>> getFilterGroups() {
        return this.filterGroups;
    }
    /**
     * The CodeBuild endpoint where webhook events are sent.
     * 
     */
    @Export(name="payloadUrl", type=String.class, parameters={})
    private Output<String> payloadUrl;

    /**
     * @return The CodeBuild endpoint where webhook events are sent.
     * 
     */
    public Output<String> getPayloadUrl() {
        return this.payloadUrl;
    }
    /**
     * The name of the build project.
     * 
     */
    @Export(name="projectName", type=String.class, parameters={})
    private Output<String> projectName;

    /**
     * @return The name of the build project.
     * 
     */
    public Output<String> getProjectName() {
        return this.projectName;
    }
    /**
     * The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
     * 
     */
    @Export(name="secret", type=String.class, parameters={})
    private Output<String> secret;

    /**
     * @return The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
     * 
     */
    public Output<String> getSecret() {
        return this.secret;
    }
    /**
     * The URL to the webhook.
     * 
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return The URL to the webhook.
     * 
     */
    public Output<String> getUrl() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Webhook(String name) {
        this(name, WebhookArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Webhook(String name, WebhookArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Webhook(String name, WebhookArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codebuild/webhook:Webhook", name, args == null ? WebhookArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Webhook(String name, Output<String> id, @Nullable WebhookState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codebuild/webhook:Webhook", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Webhook get(String name, Output<String> id, @Nullable WebhookState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Webhook(name, id, state, options);
    }
}
