// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.sagemaker;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.sagemaker.DomainArgs;
import io.pulumi.aws.sagemaker.inputs.DomainState;
import io.pulumi.aws.sagemaker.outputs.DomainDefaultUserSettings;
import io.pulumi.aws.sagemaker.outputs.DomainRetentionPolicy;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a Sagemaker Domain resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Basic usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleDomain = new aws.sagemaker.Domain("exampleDomain", {
 *     domainName: "example",
 *     authMode: "IAM",
 *     vpcId: aws_vpc.test.id,
 *     subnetIds: [aws_subnet.test.id],
 *     defaultUserSettings: {
 *         executionRole: aws_iam_role.test.arn,
 *     },
 * });
 * const examplePolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["sagemaker.amazonaws.com"],
 *         }],
 *     }],
 * });
 * const exampleRole = new aws.iam.Role("exampleRole", {
 *     path: "/",
 *     assumeRolePolicy: examplePolicyDocument.then(examplePolicyDocument => examplePolicyDocument.json),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_domain = aws.sagemaker.Domain("exampleDomain",
 *     domain_name="example",
 *     auth_mode="IAM",
 *     vpc_id=aws_vpc["test"]["id"],
 *     subnet_ids=[aws_subnet["test"]["id"]],
 *     default_user_settings=aws.sagemaker.DomainDefaultUserSettingsArgs(
 *         execution_role=aws_iam_role["test"]["arn"],
 *     ))
 * example_policy_document = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     actions=["sts:AssumeRole"],
 *     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *         type="Service",
 *         identifiers=["sagemaker.amazonaws.com"],
 *     )],
 * )])
 * example_role = aws.iam.Role("exampleRole",
 *     path="/",
 *     assume_role_policy=example_policy_document.json)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleDomain = new Aws.Sagemaker.Domain("exampleDomain", new Aws.Sagemaker.DomainArgs
 *         {
 *             DomainName = "example",
 *             AuthMode = "IAM",
 *             VpcId = aws_vpc.Test.Id,
 *             SubnetIds = 
 *             {
 *                 aws_subnet.Test.Id,
 *             },
 *             DefaultUserSettings = new Aws.Sagemaker.Inputs.DomainDefaultUserSettingsArgs
 *             {
 *                 ExecutionRole = aws_iam_role.Test.Arn,
 *             },
 *         });
 *         var examplePolicyDocument = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Actions = 
 *                     {
 *                         "sts:AssumeRole",
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                         {
 *                             Type = "Service",
 *                             Identifiers = 
 *                             {
 *                                 "sagemaker.amazonaws.com",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         }));
 *         var exampleRole = new Aws.Iam.Role("exampleRole", new Aws.Iam.RoleArgs
 *         {
 *             Path = "/",
 *             AssumeRolePolicy = examplePolicyDocument.Apply(examplePolicyDocument => examplePolicyDocument.Json),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sagemaker"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := sagemaker.NewDomain(ctx, "exampleDomain", &sagemaker.DomainArgs{
 * 			DomainName: pulumi.String("example"),
 * 			AuthMode:   pulumi.String("IAM"),
 * 			VpcId:      pulumi.Any(aws_vpc.Test.Id),
 * 			SubnetIds: pulumi.StringArray{
 * 				pulumi.Any(aws_subnet.Test.Id),
 * 			},
 * 			DefaultUserSettings: &sagemaker.DomainDefaultUserSettingsArgs{
 * 				ExecutionRole: pulumi.Any(aws_iam_role.Test.Arn),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		examplePolicyDocument, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Actions: []string{
 * 						"sts:AssumeRole",
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Type: "Service",
 * 							Identifiers: []string{
 * 								"sagemaker.amazonaws.com",
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRole(ctx, "exampleRole", &iam.RoleArgs{
 * 			Path:             pulumi.String("/"),
 * 			AssumeRolePolicy: pulumi.String(examplePolicyDocument.Json),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Using Custom Images
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testImage = new aws.sagemaker.Image("testImage", {
 *     imageName: "example",
 *     roleArn: aws_iam_role.test.arn,
 * });
 * const testAppImageConfig = new aws.sagemaker.AppImageConfig("testAppImageConfig", {
 *     appImageConfigName: "example",
 *     kernelGatewayImageConfig: {
 *         kernelSpec: {
 *             name: "example",
 *         },
 *     },
 * });
 * const testImageVersion = new aws.sagemaker.ImageVersion("testImageVersion", {
 *     imageName: testImage.id,
 *     baseImage: "base-image",
 * });
 * const testDomain = new aws.sagemaker.Domain("testDomain", {
 *     domainName: "example",
 *     authMode: "IAM",
 *     vpcId: aws_vpc.test.id,
 *     subnetIds: [aws_subnet.test.id],
 *     defaultUserSettings: {
 *         executionRole: aws_iam_role.test.arn,
 *         kernelGatewayAppSettings: {
 *             customImages: [{
 *                 appImageConfigName: testAppImageConfig.appImageConfigName,
 *                 imageName: testImageVersion.imageName,
 *             }],
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test_image = aws.sagemaker.Image("testImage",
 *     image_name="example",
 *     role_arn=aws_iam_role["test"]["arn"])
 * test_app_image_config = aws.sagemaker.AppImageConfig("testAppImageConfig",
 *     app_image_config_name="example",
 *     kernel_gateway_image_config=aws.sagemaker.AppImageConfigKernelGatewayImageConfigArgs(
 *         kernel_spec=aws.sagemaker.AppImageConfigKernelGatewayImageConfigKernelSpecArgs(
 *             name="example",
 *         ),
 *     ))
 * test_image_version = aws.sagemaker.ImageVersion("testImageVersion",
 *     image_name=test_image.id,
 *     base_image="base-image")
 * test_domain = aws.sagemaker.Domain("testDomain",
 *     domain_name="example",
 *     auth_mode="IAM",
 *     vpc_id=aws_vpc["test"]["id"],
 *     subnet_ids=[aws_subnet["test"]["id"]],
 *     default_user_settings=aws.sagemaker.DomainDefaultUserSettingsArgs(
 *         execution_role=aws_iam_role["test"]["arn"],
 *         kernel_gateway_app_settings=aws.sagemaker.DomainDefaultUserSettingsKernelGatewayAppSettingsArgs(
 *             custom_images=[aws.sagemaker.DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs(
 *                 app_image_config_name=test_app_image_config.app_image_config_name,
 *                 image_name=test_image_version.image_name,
 *             )],
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var testImage = new Aws.Sagemaker.Image("testImage", new Aws.Sagemaker.ImageArgs
 *         {
 *             ImageName = "example",
 *             RoleArn = aws_iam_role.Test.Arn,
 *         });
 *         var testAppImageConfig = new Aws.Sagemaker.AppImageConfig("testAppImageConfig", new Aws.Sagemaker.AppImageConfigArgs
 *         {
 *             AppImageConfigName = "example",
 *             KernelGatewayImageConfig = new Aws.Sagemaker.Inputs.AppImageConfigKernelGatewayImageConfigArgs
 *             {
 *                 KernelSpec = new Aws.Sagemaker.Inputs.AppImageConfigKernelGatewayImageConfigKernelSpecArgs
 *                 {
 *                     Name = "example",
 *                 },
 *             },
 *         });
 *         var testImageVersion = new Aws.Sagemaker.ImageVersion("testImageVersion", new Aws.Sagemaker.ImageVersionArgs
 *         {
 *             ImageName = testImage.Id,
 *             BaseImage = "base-image",
 *         });
 *         var testDomain = new Aws.Sagemaker.Domain("testDomain", new Aws.Sagemaker.DomainArgs
 *         {
 *             DomainName = "example",
 *             AuthMode = "IAM",
 *             VpcId = aws_vpc.Test.Id,
 *             SubnetIds = 
 *             {
 *                 aws_subnet.Test.Id,
 *             },
 *             DefaultUserSettings = new Aws.Sagemaker.Inputs.DomainDefaultUserSettingsArgs
 *             {
 *                 ExecutionRole = aws_iam_role.Test.Arn,
 *                 KernelGatewayAppSettings = new Aws.Sagemaker.Inputs.DomainDefaultUserSettingsKernelGatewayAppSettingsArgs
 *                 {
 *                     CustomImages = 
 *                     {
 *                         new Aws.Sagemaker.Inputs.DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs
 *                         {
 *                             AppImageConfigName = testAppImageConfig.AppImageConfigName,
 *                             ImageName = testImageVersion.ImageName,
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sagemaker"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		testImage, err := sagemaker.NewImage(ctx, "testImage", &sagemaker.ImageArgs{
 * 			ImageName: pulumi.String("example"),
 * 			RoleArn:   pulumi.Any(aws_iam_role.Test.Arn),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		testAppImageConfig, err := sagemaker.NewAppImageConfig(ctx, "testAppImageConfig", &sagemaker.AppImageConfigArgs{
 * 			AppImageConfigName: pulumi.String("example"),
 * 			KernelGatewayImageConfig: &sagemaker.AppImageConfigKernelGatewayImageConfigArgs{
 * 				KernelSpec: &sagemaker.AppImageConfigKernelGatewayImageConfigKernelSpecArgs{
 * 					Name: pulumi.String("example"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		testImageVersion, err := sagemaker.NewImageVersion(ctx, "testImageVersion", &sagemaker.ImageVersionArgs{
 * 			ImageName: testImage.ID(),
 * 			BaseImage: pulumi.String("base-image"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = sagemaker.NewDomain(ctx, "testDomain", &sagemaker.DomainArgs{
 * 			DomainName: pulumi.String("example"),
 * 			AuthMode:   pulumi.String("IAM"),
 * 			VpcId:      pulumi.Any(aws_vpc.Test.Id),
 * 			SubnetIds: pulumi.StringArray{
 * 				pulumi.Any(aws_subnet.Test.Id),
 * 			},
 * 			DefaultUserSettings: &sagemaker.DomainDefaultUserSettingsArgs{
 * 				ExecutionRole: pulumi.Any(aws_iam_role.Test.Arn),
 * 				KernelGatewayAppSettings: &sagemaker.DomainDefaultUserSettingsKernelGatewayAppSettingsArgs{
 * 					CustomImages: sagemaker.DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArray{
 * 						&sagemaker.DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs{
 * 							AppImageConfigName: testAppImageConfig.AppImageConfigName,
 * 							ImageName:          testImageVersion.ImageName,
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Sagemaker Code Domains can be imported using the `id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:sagemaker/domain:Domain test_domain d-8jgsjtilstu8
 * ```
 * 
 *  
 */
@ResourceType(type="aws:sagemaker/domain:Domain")
public class Domain extends io.pulumi.resources.CustomResource {
    /**
     * Specifies the VPC used for non-EFS traffic. The default value is `PublicInternetOnly`. Valid values are `PublicInternetOnly` and `VpcOnly`.
     * 
     */
    @Export(name="appNetworkAccessType", type=String.class, parameters={})
    private Output</* @Nullable */ String> appNetworkAccessType;

    /**
     * @return Specifies the VPC used for non-EFS traffic. The default value is `PublicInternetOnly`. Valid values are `PublicInternetOnly` and `VpcOnly`.
     * 
     */
    public Output</* @Nullable */ String> getAppNetworkAccessType() {
        return this.appNetworkAccessType;
    }
    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Domain.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) assigned by AWS to this Domain.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The mode of authentication that members use to access the domain. Valid values are `IAM` and `SSO`.
     * 
     */
    @Export(name="authMode", type=String.class, parameters={})
    private Output<String> authMode;

    /**
     * @return The mode of authentication that members use to access the domain. Valid values are `IAM` and `SSO`.
     * 
     */
    public Output<String> getAuthMode() {
        return this.authMode;
    }
    /**
     * The default user settings. See Default User Settings below.
     * 
     */
    @Export(name="defaultUserSettings", type=DomainDefaultUserSettings.class, parameters={})
    private Output<DomainDefaultUserSettings> defaultUserSettings;

    /**
     * @return The default user settings. See Default User Settings below.
     * 
     */
    public Output<DomainDefaultUserSettings> getDefaultUserSettings() {
        return this.defaultUserSettings;
    }
    /**
     * The domain name.
     * 
     */
    @Export(name="domainName", type=String.class, parameters={})
    private Output<String> domainName;

    /**
     * @return The domain name.
     * 
     */
    public Output<String> getDomainName() {
        return this.domainName;
    }
    /**
     * The ID of the Amazon Elastic File System (EFS) managed by this Domain.
     * 
     */
    @Export(name="homeEfsFileSystemId", type=String.class, parameters={})
    private Output<String> homeEfsFileSystemId;

    /**
     * @return The ID of the Amazon Elastic File System (EFS) managed by this Domain.
     * 
     */
    public Output<String> getHomeEfsFileSystemId() {
        return this.homeEfsFileSystemId;
    }
    /**
     * The AWS KMS customer managed CMK used to encrypt the EFS volume attached to the domain.
     * 
     */
    @Export(name="kmsKeyId", type=String.class, parameters={})
    private Output</* @Nullable */ String> kmsKeyId;

    /**
     * @return The AWS KMS customer managed CMK used to encrypt the EFS volume attached to the domain.
     * 
     */
    public Output</* @Nullable */ String> getKmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained. See Retention Policy below.
     * 
     */
    @Export(name="retentionPolicy", type=DomainRetentionPolicy.class, parameters={})
    private Output</* @Nullable */ DomainRetentionPolicy> retentionPolicy;

    /**
     * @return The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained. See Retention Policy below.
     * 
     */
    public Output</* @Nullable */ DomainRetentionPolicy> getRetentionPolicy() {
        return this.retentionPolicy;
    }
    /**
     * The SSO managed application instance ID.
     * 
     */
    @Export(name="singleSignOnManagedApplicationInstanceId", type=String.class, parameters={})
    private Output<String> singleSignOnManagedApplicationInstanceId;

    /**
     * @return The SSO managed application instance ID.
     * 
     */
    public Output<String> getSingleSignOnManagedApplicationInstanceId() {
        return this.singleSignOnManagedApplicationInstanceId;
    }
    /**
     * The VPC subnets that Studio uses for communication.
     * 
     */
    @Export(name="subnetIds", type=List.class, parameters={String.class})
    private Output<List<String>> subnetIds;

    /**
     * @return The VPC subnets that Studio uses for communication.
     * 
     */
    public Output<List<String>> getSubnetIds() {
        return this.subnetIds;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The domain's URL.
     * 
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return The domain's URL.
     * 
     */
    public Output<String> getUrl() {
        return this.url;
    }
    /**
     * The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
     * 
     */
    @Export(name="vpcId", type=String.class, parameters={})
    private Output<String> vpcId;

    /**
     * @return The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
     * 
     */
    public Output<String> getVpcId() {
        return this.vpcId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Domain(String name) {
        this(name, DomainArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Domain(String name, DomainArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Domain(String name, DomainArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:sagemaker/domain:Domain", name, args == null ? DomainArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Domain(String name, Output<String> id, @Nullable DomainState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:sagemaker/domain:Domain", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Domain get(String name, Output<String> id, @Nullable DomainState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Domain(name, id, state, options);
    }
}
