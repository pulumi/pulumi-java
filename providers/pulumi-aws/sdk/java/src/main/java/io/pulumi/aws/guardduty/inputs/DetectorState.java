// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.guardduty.inputs;

import io.pulumi.aws.guardduty.inputs.DetectorDatasourcesGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DetectorState extends io.pulumi.resources.ResourceArgs {

    public static final DetectorState Empty = new DetectorState();

    /**
     * The AWS account ID of the GuardDuty detector
     * 
     */
    @InputImport(name="accountId")
      private final @Nullable Input<String> accountId;

    public Input<String> getAccountId() {
        return this.accountId == null ? Input.empty() : this.accountId;
    }

    /**
     * Amazon Resource Name (ARN) of the GuardDuty detector
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Describes which data sources will be enabled for the detector. See Data Sources below for more details.
     * 
     */
    @InputImport(name="datasources")
      private final @Nullable Input<DetectorDatasourcesGetArgs> datasources;

    public Input<DetectorDatasourcesGetArgs> getDatasources() {
        return this.datasources == null ? Input.empty() : this.datasources;
    }

    /**
     * If true, enables [S3 Protection](https://docs.aws.amazon.com/guardduty/latest/ug/s3_detection.html). Defaults to `true`.
     * 
     */
    @InputImport(name="enable")
      private final @Nullable Input<Boolean> enable;

    public Input<Boolean> getEnable() {
        return this.enable == null ? Input.empty() : this.enable;
    }

    /**
     * Specifies the frequency of notifications sent for subsequent finding occurrences. If the detector is a GuardDuty member account, the value is determined by the GuardDuty primary account and cannot be modified, otherwise defaults to `SIX_HOURS`. For standalone and GuardDuty primary accounts, it must be configured in this provider to enable drift detection. Valid values for standalone and primary accounts: `FIFTEEN_MINUTES`, `ONE_HOUR`, `SIX_HOURS`. See [AWS Documentation](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_findings_cloudwatch.html#guardduty_findings_cloudwatch_notification_frequency) for more information.
     * 
     */
    @InputImport(name="findingPublishingFrequency")
      private final @Nullable Input<String> findingPublishingFrequency;

    public Input<String> getFindingPublishingFrequency() {
        return this.findingPublishingFrequency == null ? Input.empty() : this.findingPublishingFrequency;
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public DetectorState(
        @Nullable Input<String> accountId,
        @Nullable Input<String> arn,
        @Nullable Input<DetectorDatasourcesGetArgs> datasources,
        @Nullable Input<Boolean> enable,
        @Nullable Input<String> findingPublishingFrequency,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.accountId = accountId;
        this.arn = arn;
        this.datasources = datasources;
        this.enable = enable;
        this.findingPublishingFrequency = findingPublishingFrequency;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private DetectorState() {
        this.accountId = Input.empty();
        this.arn = Input.empty();
        this.datasources = Input.empty();
        this.enable = Input.empty();
        this.findingPublishingFrequency = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DetectorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accountId;
        private @Nullable Input<String> arn;
        private @Nullable Input<DetectorDatasourcesGetArgs> datasources;
        private @Nullable Input<Boolean> enable;
        private @Nullable Input<String> findingPublishingFrequency;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(DetectorState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.arn = defaults.arn;
    	      this.datasources = defaults.datasources;
    	      this.enable = defaults.enable;
    	      this.findingPublishingFrequency = defaults.findingPublishingFrequency;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder accountId(@Nullable Input<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(@Nullable String accountId) {
            this.accountId = Input.ofNullable(accountId);
            return this;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder datasources(@Nullable Input<DetectorDatasourcesGetArgs> datasources) {
            this.datasources = datasources;
            return this;
        }

        public Builder datasources(@Nullable DetectorDatasourcesGetArgs datasources) {
            this.datasources = Input.ofNullable(datasources);
            return this;
        }

        public Builder enable(@Nullable Input<Boolean> enable) {
            this.enable = enable;
            return this;
        }

        public Builder enable(@Nullable Boolean enable) {
            this.enable = Input.ofNullable(enable);
            return this;
        }

        public Builder findingPublishingFrequency(@Nullable Input<String> findingPublishingFrequency) {
            this.findingPublishingFrequency = findingPublishingFrequency;
            return this;
        }

        public Builder findingPublishingFrequency(@Nullable String findingPublishingFrequency) {
            this.findingPublishingFrequency = Input.ofNullable(findingPublishingFrequency);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public DetectorState build() {
            return new DetectorState(accountId, arn, datasources, enable, findingPublishingFrequency, tags, tagsAll);
        }
    }
}
