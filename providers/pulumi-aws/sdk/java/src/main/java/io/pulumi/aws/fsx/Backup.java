// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.fsx.BackupArgs;
import io.pulumi.aws.fsx.inputs.BackupState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a FSx Backup resource.
 * 
 * ## Lustre Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleLustreFileSystem = new aws.fsx.LustreFileSystem("exampleLustreFileSystem", {
 *     storageCapacity: 1200,
 *     subnetIds: [aws_subnet.example.id],
 *     deploymentType: "PERSISTENT_1",
 *     perUnitStorageThroughput: 50,
 * });
 * const exampleBackup = new aws.fsx.Backup("exampleBackup", {fileSystemId: exampleLustreFileSystem.id});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_lustre_file_system = aws.fsx.LustreFileSystem("exampleLustreFileSystem",
 *     storage_capacity=1200,
 *     subnet_ids=[aws_subnet["example"]["id"]],
 *     deployment_type="PERSISTENT_1",
 *     per_unit_storage_throughput=50)
 * example_backup = aws.fsx.Backup("exampleBackup", file_system_id=example_lustre_file_system.id)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleLustreFileSystem = new Aws.Fsx.LustreFileSystem("exampleLustreFileSystem", new Aws.Fsx.LustreFileSystemArgs
 *         {
 *             StorageCapacity = 1200,
 *             SubnetIds = 
 *             {
 *                 aws_subnet.Example.Id,
 *             },
 *             DeploymentType = "PERSISTENT_1",
 *             PerUnitStorageThroughput = 50,
 *         });
 *         var exampleBackup = new Aws.Fsx.Backup("exampleBackup", new Aws.Fsx.BackupArgs
 *         {
 *             FileSystemId = exampleLustreFileSystem.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/fsx"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleLustreFileSystem, err := fsx.NewLustreFileSystem(ctx, "exampleLustreFileSystem", &fsx.LustreFileSystemArgs{
 * 			StorageCapacity: pulumi.Int(1200),
 * 			SubnetIds: pulumi.String{
 * 				aws_subnet.Example.Id,
 * 			},
 * 			DeploymentType:           pulumi.String("PERSISTENT_1"),
 * 			PerUnitStorageThroughput: pulumi.Int(50),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = fsx.NewBackup(ctx, "exampleBackup", &fsx.BackupArgs{
 * 			FileSystemId: exampleLustreFileSystem.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ## Windows Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleWindowsFileSystem = new aws.fsx.WindowsFileSystem("exampleWindowsFileSystem", {
 *     activeDirectoryId: aws_directory_service_directory.eample.id,
 *     skipFinalBackup: true,
 *     storageCapacity: 32,
 *     subnetIds: [aws_subnet.example1.id],
 *     throughputCapacity: 8,
 * });
 * const exampleBackup = new aws.fsx.Backup("exampleBackup", {fileSystemId: exampleWindowsFileSystem.id});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_windows_file_system = aws.fsx.WindowsFileSystem("exampleWindowsFileSystem",
 *     active_directory_id=aws_directory_service_directory["eample"]["id"],
 *     skip_final_backup=True,
 *     storage_capacity=32,
 *     subnet_ids=[aws_subnet["example1"]["id"]],
 *     throughput_capacity=8)
 * example_backup = aws.fsx.Backup("exampleBackup", file_system_id=example_windows_file_system.id)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleWindowsFileSystem = new Aws.Fsx.WindowsFileSystem("exampleWindowsFileSystem", new Aws.Fsx.WindowsFileSystemArgs
 *         {
 *             ActiveDirectoryId = aws_directory_service_directory.Eample.Id,
 *             SkipFinalBackup = true,
 *             StorageCapacity = 32,
 *             SubnetIds = 
 *             {
 *                 aws_subnet.Example1.Id,
 *             },
 *             ThroughputCapacity = 8,
 *         });
 *         var exampleBackup = new Aws.Fsx.Backup("exampleBackup", new Aws.Fsx.BackupArgs
 *         {
 *             FileSystemId = exampleWindowsFileSystem.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/fsx"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleWindowsFileSystem, err := fsx.NewWindowsFileSystem(ctx, "exampleWindowsFileSystem", &fsx.WindowsFileSystemArgs{
 * 			ActiveDirectoryId: pulumi.Any(aws_directory_service_directory.Eample.Id),
 * 			SkipFinalBackup:   pulumi.Bool(true),
 * 			StorageCapacity:   pulumi.Int(32),
 * 			SubnetIds: pulumi.StringArray{
 * 				pulumi.Any(aws_subnet.Example1.Id),
 * 			},
 * 			ThroughputCapacity: pulumi.Int(8),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = fsx.NewBackup(ctx, "exampleBackup", &fsx.BackupArgs{
 * 			FileSystemId: exampleWindowsFileSystem.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ## ONTAP Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleOntapVolume = new aws.fsx.OntapVolume("exampleOntapVolume", {
 *     junctionPath: "/example",
 *     sizeInMegabytes: 1024,
 *     storageEfficiencyEnabled: true,
 *     storageVirtualMachineId: aws_fsx_ontap_storage_virtual_machine.test.id,
 * });
 * const exampleBackup = new aws.fsx.Backup("exampleBackup", {volumeId: exampleOntapVolume.id});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_ontap_volume = aws.fsx.OntapVolume("exampleOntapVolume",
 *     junction_path="/example",
 *     size_in_megabytes=1024,
 *     storage_efficiency_enabled=True,
 *     storage_virtual_machine_id=aws_fsx_ontap_storage_virtual_machine["test"]["id"])
 * example_backup = aws.fsx.Backup("exampleBackup", volume_id=example_ontap_volume.id)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleOntapVolume = new Aws.Fsx.OntapVolume("exampleOntapVolume", new Aws.Fsx.OntapVolumeArgs
 *         {
 *             JunctionPath = "/example",
 *             SizeInMegabytes = 1024,
 *             StorageEfficiencyEnabled = true,
 *             StorageVirtualMachineId = aws_fsx_ontap_storage_virtual_machine.Test.Id,
 *         });
 *         var exampleBackup = new Aws.Fsx.Backup("exampleBackup", new Aws.Fsx.BackupArgs
 *         {
 *             VolumeId = exampleOntapVolume.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/fsx"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleOntapVolume, err := fsx.NewOntapVolume(ctx, "exampleOntapVolume", &fsx.OntapVolumeArgs{
 * 			JunctionPath:             pulumi.String("/example"),
 * 			SizeInMegabytes:          pulumi.Int(1024),
 * 			StorageEfficiencyEnabled: pulumi.Bool(true),
 * 			StorageVirtualMachineId:  pulumi.Any(aws_fsx_ontap_storage_virtual_machine.Test.Id),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = fsx.NewBackup(ctx, "exampleBackup", &fsx.BackupArgs{
 * 			VolumeId: exampleOntapVolume.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ## OpenZFS Example
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleOpenZfsFileSystem = new aws.fsx.OpenZfsFileSystem("exampleOpenZfsFileSystem", {
 *     storageCapacity: 64,
 *     subnetIds: [aws_subnet.example.id],
 *     deploymentType: "SINGLE_AZ_1",
 *     throughputCapacity: 64,
 * });
 * const exampleBackup = new aws.fsx.Backup("exampleBackup", {fileSystemId: exampleOpenZfsFileSystem.id});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_open_zfs_file_system = aws.fsx.OpenZfsFileSystem("exampleOpenZfsFileSystem",
 *     storage_capacity=64,
 *     subnet_ids=[aws_subnet["example"]["id"]],
 *     deployment_type="SINGLE_AZ_1",
 *     throughput_capacity=64)
 * example_backup = aws.fsx.Backup("exampleBackup", file_system_id=example_open_zfs_file_system.id)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleOpenZfsFileSystem = new Aws.Fsx.OpenZfsFileSystem("exampleOpenZfsFileSystem", new Aws.Fsx.OpenZfsFileSystemArgs
 *         {
 *             StorageCapacity = 64,
 *             SubnetIds = 
 *             {
 *                 aws_subnet.Example.Id,
 *             },
 *             DeploymentType = "SINGLE_AZ_1",
 *             ThroughputCapacity = 64,
 *         });
 *         var exampleBackup = new Aws.Fsx.Backup("exampleBackup", new Aws.Fsx.BackupArgs
 *         {
 *             FileSystemId = exampleOpenZfsFileSystem.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/fsx"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleOpenZfsFileSystem, err := fsx.NewOpenZfsFileSystem(ctx, "exampleOpenZfsFileSystem", &fsx.OpenZfsFileSystemArgs{
 * 			StorageCapacity: pulumi.Int(64),
 * 			SubnetIds: pulumi.String{
 * 				aws_subnet.Example.Id,
 * 			},
 * 			DeploymentType:     pulumi.String("SINGLE_AZ_1"),
 * 			ThroughputCapacity: pulumi.Int(64),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = fsx.NewBackup(ctx, "exampleBackup", &fsx.BackupArgs{
 * 			FileSystemId: exampleOpenZfsFileSystem.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * 
 * ## Import
 * 
 * FSx Backups can be imported using the `id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:fsx/backup:Backup example fs-543ab12b1ca672f33
 * ```
 * 
 *  
 */
@ResourceType(type="aws:fsx/backup:Backup")
public class Backup extends io.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name of the backup.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name of the backup.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The ID of the file system to back up. Required if backing up Lustre or Windows file systems.
     * 
     */
    @Export(name="fileSystemId", type=String.class, parameters={})
    private Output</* @Nullable */ String> fileSystemId;

    /**
     * @return The ID of the file system to back up. Required if backing up Lustre or Windows file systems.
     * 
     */
    public Output</* @Nullable */ String> getFileSystemId() {
        return this.fileSystemId;
    }
    /**
     * The ID of the AWS Key Management Service (AWS KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest.
     * 
     */
    @Export(name="kmsKeyId", type=String.class, parameters={})
    private Output<String> kmsKeyId;

    /**
     * @return The ID of the AWS Key Management Service (AWS KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest.
     * 
     */
    public Output<String> getKmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * AWS account identifier that created the file system.
     * 
     */
    @Export(name="ownerId", type=String.class, parameters={})
    private Output<String> ownerId;

    /**
     * @return AWS account identifier that created the file system.
     * 
     */
    public Output<String> getOwnerId() {
        return this.ownerId;
    }
    /**
     * A map of tags to assign to the file system. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copy_tags_to_backups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the file system. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copy_tags_to_backups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
     * 
     */
    public Output<Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The type of the file system backup.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the file system backup.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * The ID of the volume to back up. Required if backing up a ONTAP Volume.
     * 
     */
    @Export(name="volumeId", type=String.class, parameters={})
    private Output</* @Nullable */ String> volumeId;

    /**
     * @return The ID of the volume to back up. Required if backing up a ONTAP Volume.
     * 
     */
    public Output</* @Nullable */ String> getVolumeId() {
        return this.volumeId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Backup(String name) {
        this(name, BackupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Backup(String name, @Nullable BackupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Backup(String name, @Nullable BackupArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:fsx/backup:Backup", name, args == null ? BackupArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Backup(String name, Output<String> id, @Nullable BackupState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:fsx/backup:Backup", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Backup get(String name, Output<String> id, @Nullable BackupState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Backup(name, id, state, options);
    }
}
