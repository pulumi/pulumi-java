// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lambda;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ProvisionedConcurrencyConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProvisionedConcurrencyConfigArgs Empty = new ProvisionedConcurrencyConfigArgs();

    /**
     * Name or Amazon Resource Name (ARN) of the Lambda Function.
     * 
     */
    @InputImport(name="functionName", required=true)
    private final Input<String> functionName;

    public Input<String> getFunctionName() {
        return this.functionName;
    }

    /**
     * Amount of capacity to allocate. Must be greater than or equal to `1`.
     * 
     */
    @InputImport(name="provisionedConcurrentExecutions", required=true)
    private final Input<Integer> provisionedConcurrentExecutions;

    public Input<Integer> getProvisionedConcurrentExecutions() {
        return this.provisionedConcurrentExecutions;
    }

    /**
     * Lambda Function version or Lambda Alias name.
     * 
     */
    @InputImport(name="qualifier", required=true)
    private final Input<String> qualifier;

    public Input<String> getQualifier() {
        return this.qualifier;
    }

    public ProvisionedConcurrencyConfigArgs(
        Input<String> functionName,
        Input<Integer> provisionedConcurrentExecutions,
        Input<String> qualifier) {
        this.functionName = Objects.requireNonNull(functionName, "expected parameter 'functionName' to be non-null");
        this.provisionedConcurrentExecutions = Objects.requireNonNull(provisionedConcurrentExecutions, "expected parameter 'provisionedConcurrentExecutions' to be non-null");
        this.qualifier = Objects.requireNonNull(qualifier, "expected parameter 'qualifier' to be non-null");
    }

    private ProvisionedConcurrencyConfigArgs() {
        this.functionName = Input.empty();
        this.provisionedConcurrentExecutions = Input.empty();
        this.qualifier = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProvisionedConcurrencyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> functionName;
        private Input<Integer> provisionedConcurrentExecutions;
        private Input<String> qualifier;

        public Builder() {
    	      // Empty
        }

        public Builder(ProvisionedConcurrencyConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.functionName = defaults.functionName;
    	      this.provisionedConcurrentExecutions = defaults.provisionedConcurrentExecutions;
    	      this.qualifier = defaults.qualifier;
        }

        public Builder setFunctionName(Input<String> functionName) {
            this.functionName = Objects.requireNonNull(functionName);
            return this;
        }

        public Builder setFunctionName(String functionName) {
            this.functionName = Input.of(Objects.requireNonNull(functionName));
            return this;
        }

        public Builder setProvisionedConcurrentExecutions(Input<Integer> provisionedConcurrentExecutions) {
            this.provisionedConcurrentExecutions = Objects.requireNonNull(provisionedConcurrentExecutions);
            return this;
        }

        public Builder setProvisionedConcurrentExecutions(Integer provisionedConcurrentExecutions) {
            this.provisionedConcurrentExecutions = Input.of(Objects.requireNonNull(provisionedConcurrentExecutions));
            return this;
        }

        public Builder setQualifier(Input<String> qualifier) {
            this.qualifier = Objects.requireNonNull(qualifier);
            return this;
        }

        public Builder setQualifier(String qualifier) {
            this.qualifier = Input.of(Objects.requireNonNull(qualifier));
            return this;
        }
        public ProvisionedConcurrencyConfigArgs build() {
            return new ProvisionedConcurrencyConfigArgs(functionName, provisionedConcurrentExecutions, qualifier);
        }
    }
}
