// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TrafficMirrorSessionState extends io.pulumi.resources.ResourceArgs {

    public static final TrafficMirrorSessionState Empty = new TrafficMirrorSessionState();

    /**
     * The ARN of the traffic mirror session.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * A description of the traffic mirror session.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * ID of the source network interface. Not all network interfaces are eligible as mirror sources. On EC2 instances only nitro based instances support mirroring.
     * 
     */
    @InputImport(name="networkInterfaceId")
    private final @Nullable Input<String> networkInterfaceId;

    public Input<String> getNetworkInterfaceId() {
        return this.networkInterfaceId == null ? Input.empty() : this.networkInterfaceId;
    }

    /**
     * The AWS account ID of the session owner.
     * 
     */
    @InputImport(name="ownerId")
    private final @Nullable Input<String> ownerId;

    public Input<String> getOwnerId() {
        return this.ownerId == null ? Input.empty() : this.ownerId;
    }

    /**
     * The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror.
     * 
     */
    @InputImport(name="packetLength")
    private final @Nullable Input<Integer> packetLength;

    public Input<Integer> getPacketLength() {
        return this.packetLength == null ? Input.empty() : this.packetLength;
    }

    /**
     * - The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
     * 
     */
    @InputImport(name="sessionNumber")
    private final @Nullable Input<Integer> sessionNumber;

    public Input<Integer> getSessionNumber() {
        return this.sessionNumber == null ? Input.empty() : this.sessionNumber;
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * ID of the traffic mirror filter to be used
     * 
     */
    @InputImport(name="trafficMirrorFilterId")
    private final @Nullable Input<String> trafficMirrorFilterId;

    public Input<String> getTrafficMirrorFilterId() {
        return this.trafficMirrorFilterId == null ? Input.empty() : this.trafficMirrorFilterId;
    }

    /**
     * ID of the traffic mirror target to be used
     * 
     */
    @InputImport(name="trafficMirrorTargetId")
    private final @Nullable Input<String> trafficMirrorTargetId;

    public Input<String> getTrafficMirrorTargetId() {
        return this.trafficMirrorTargetId == null ? Input.empty() : this.trafficMirrorTargetId;
    }

    /**
     * - The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
     * 
     */
    @InputImport(name="virtualNetworkId")
    private final @Nullable Input<Integer> virtualNetworkId;

    public Input<Integer> getVirtualNetworkId() {
        return this.virtualNetworkId == null ? Input.empty() : this.virtualNetworkId;
    }

    public TrafficMirrorSessionState(
        @Nullable Input<String> arn,
        @Nullable Input<String> description,
        @Nullable Input<String> networkInterfaceId,
        @Nullable Input<String> ownerId,
        @Nullable Input<Integer> packetLength,
        @Nullable Input<Integer> sessionNumber,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> trafficMirrorFilterId,
        @Nullable Input<String> trafficMirrorTargetId,
        @Nullable Input<Integer> virtualNetworkId) {
        this.arn = arn;
        this.description = description;
        this.networkInterfaceId = networkInterfaceId;
        this.ownerId = ownerId;
        this.packetLength = packetLength;
        this.sessionNumber = sessionNumber;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.trafficMirrorFilterId = trafficMirrorFilterId;
        this.trafficMirrorTargetId = trafficMirrorTargetId;
        this.virtualNetworkId = virtualNetworkId;
    }

    private TrafficMirrorSessionState() {
        this.arn = Input.empty();
        this.description = Input.empty();
        this.networkInterfaceId = Input.empty();
        this.ownerId = Input.empty();
        this.packetLength = Input.empty();
        this.sessionNumber = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.trafficMirrorFilterId = Input.empty();
        this.trafficMirrorTargetId = Input.empty();
        this.virtualNetworkId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrafficMirrorSessionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> description;
        private @Nullable Input<String> networkInterfaceId;
        private @Nullable Input<String> ownerId;
        private @Nullable Input<Integer> packetLength;
        private @Nullable Input<Integer> sessionNumber;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> trafficMirrorFilterId;
        private @Nullable Input<String> trafficMirrorTargetId;
        private @Nullable Input<Integer> virtualNetworkId;

        public Builder() {
    	      // Empty
        }

        public Builder(TrafficMirrorSessionState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.ownerId = defaults.ownerId;
    	      this.packetLength = defaults.packetLength;
    	      this.sessionNumber = defaults.sessionNumber;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.trafficMirrorFilterId = defaults.trafficMirrorFilterId;
    	      this.trafficMirrorTargetId = defaults.trafficMirrorTargetId;
    	      this.virtualNetworkId = defaults.virtualNetworkId;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setNetworkInterfaceId(@Nullable Input<String> networkInterfaceId) {
            this.networkInterfaceId = networkInterfaceId;
            return this;
        }

        public Builder setNetworkInterfaceId(@Nullable String networkInterfaceId) {
            this.networkInterfaceId = Input.ofNullable(networkInterfaceId);
            return this;
        }

        public Builder setOwnerId(@Nullable Input<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        public Builder setOwnerId(@Nullable String ownerId) {
            this.ownerId = Input.ofNullable(ownerId);
            return this;
        }

        public Builder setPacketLength(@Nullable Input<Integer> packetLength) {
            this.packetLength = packetLength;
            return this;
        }

        public Builder setPacketLength(@Nullable Integer packetLength) {
            this.packetLength = Input.ofNullable(packetLength);
            return this;
        }

        public Builder setSessionNumber(@Nullable Input<Integer> sessionNumber) {
            this.sessionNumber = sessionNumber;
            return this;
        }

        public Builder setSessionNumber(@Nullable Integer sessionNumber) {
            this.sessionNumber = Input.ofNullable(sessionNumber);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setTrafficMirrorFilterId(@Nullable Input<String> trafficMirrorFilterId) {
            this.trafficMirrorFilterId = trafficMirrorFilterId;
            return this;
        }

        public Builder setTrafficMirrorFilterId(@Nullable String trafficMirrorFilterId) {
            this.trafficMirrorFilterId = Input.ofNullable(trafficMirrorFilterId);
            return this;
        }

        public Builder setTrafficMirrorTargetId(@Nullable Input<String> trafficMirrorTargetId) {
            this.trafficMirrorTargetId = trafficMirrorTargetId;
            return this;
        }

        public Builder setTrafficMirrorTargetId(@Nullable String trafficMirrorTargetId) {
            this.trafficMirrorTargetId = Input.ofNullable(trafficMirrorTargetId);
            return this;
        }

        public Builder setVirtualNetworkId(@Nullable Input<Integer> virtualNetworkId) {
            this.virtualNetworkId = virtualNetworkId;
            return this;
        }

        public Builder setVirtualNetworkId(@Nullable Integer virtualNetworkId) {
            this.virtualNetworkId = Input.ofNullable(virtualNetworkId);
            return this;
        }
        public TrafficMirrorSessionState build() {
            return new TrafficMirrorSessionState(arn, description, networkInterfaceId, ownerId, packetLength, sessionNumber, tags, tagsAll, trafficMirrorFilterId, trafficMirrorTargetId, virtualNetworkId);
        }
    }
}
