// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.datapipeline;

import io.pulumi.aws.datapipeline.inputs.PipelineDefinitionParameterObjectArgs;
import io.pulumi.aws.datapipeline.inputs.PipelineDefinitionParameterValueArgs;
import io.pulumi.aws.datapipeline.inputs.PipelineDefinitionPipelineObjectArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PipelineDefinitionArgs extends io.pulumi.resources.ResourceArgs {

    public static final PipelineDefinitionArgs Empty = new PipelineDefinitionArgs();

    /**
     * Configuration block for the parameter objects used in the pipeline definition. See below
     * 
     */
    @InputImport(name="parameterObjects")
      private final @Nullable Output<List<PipelineDefinitionParameterObjectArgs>> parameterObjects;

    public Output<List<PipelineDefinitionParameterObjectArgs>> getParameterObjects() {
        return this.parameterObjects == null ? Output.empty() : this.parameterObjects;
    }

    /**
     * Configuration block for the parameter values used in the pipeline definition. See below
     * 
     */
    @InputImport(name="parameterValues")
      private final @Nullable Output<List<PipelineDefinitionParameterValueArgs>> parameterValues;

    public Output<List<PipelineDefinitionParameterValueArgs>> getParameterValues() {
        return this.parameterValues == null ? Output.empty() : this.parameterValues;
    }

    /**
     * ID of the pipeline.
     * 
     */
    @InputImport(name="pipelineId", required=true)
      private final Output<String> pipelineId;

    public Output<String> getPipelineId() {
        return this.pipelineId;
    }

    /**
     * Configuration block for the objects that define the pipeline. See below
     * 
     */
    @InputImport(name="pipelineObjects", required=true)
      private final Output<List<PipelineDefinitionPipelineObjectArgs>> pipelineObjects;

    public Output<List<PipelineDefinitionPipelineObjectArgs>> getPipelineObjects() {
        return this.pipelineObjects;
    }

    public PipelineDefinitionArgs(
        @Nullable Output<List<PipelineDefinitionParameterObjectArgs>> parameterObjects,
        @Nullable Output<List<PipelineDefinitionParameterValueArgs>> parameterValues,
        Output<String> pipelineId,
        Output<List<PipelineDefinitionPipelineObjectArgs>> pipelineObjects) {
        this.parameterObjects = parameterObjects;
        this.parameterValues = parameterValues;
        this.pipelineId = Objects.requireNonNull(pipelineId, "expected parameter 'pipelineId' to be non-null");
        this.pipelineObjects = Objects.requireNonNull(pipelineObjects, "expected parameter 'pipelineObjects' to be non-null");
    }

    private PipelineDefinitionArgs() {
        this.parameterObjects = Output.empty();
        this.parameterValues = Output.empty();
        this.pipelineId = Output.empty();
        this.pipelineObjects = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<PipelineDefinitionParameterObjectArgs>> parameterObjects;
        private @Nullable Output<List<PipelineDefinitionParameterValueArgs>> parameterValues;
        private Output<String> pipelineId;
        private Output<List<PipelineDefinitionPipelineObjectArgs>> pipelineObjects;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.parameterObjects = defaults.parameterObjects;
    	      this.parameterValues = defaults.parameterValues;
    	      this.pipelineId = defaults.pipelineId;
    	      this.pipelineObjects = defaults.pipelineObjects;
        }

        public Builder parameterObjects(@Nullable Output<List<PipelineDefinitionParameterObjectArgs>> parameterObjects) {
            this.parameterObjects = parameterObjects;
            return this;
        }

        public Builder parameterObjects(@Nullable List<PipelineDefinitionParameterObjectArgs> parameterObjects) {
            this.parameterObjects = Output.ofNullable(parameterObjects);
            return this;
        }

        public Builder parameterValues(@Nullable Output<List<PipelineDefinitionParameterValueArgs>> parameterValues) {
            this.parameterValues = parameterValues;
            return this;
        }

        public Builder parameterValues(@Nullable List<PipelineDefinitionParameterValueArgs> parameterValues) {
            this.parameterValues = Output.ofNullable(parameterValues);
            return this;
        }

        public Builder pipelineId(Output<String> pipelineId) {
            this.pipelineId = Objects.requireNonNull(pipelineId);
            return this;
        }

        public Builder pipelineId(String pipelineId) {
            this.pipelineId = Output.of(Objects.requireNonNull(pipelineId));
            return this;
        }

        public Builder pipelineObjects(Output<List<PipelineDefinitionPipelineObjectArgs>> pipelineObjects) {
            this.pipelineObjects = Objects.requireNonNull(pipelineObjects);
            return this;
        }

        public Builder pipelineObjects(List<PipelineDefinitionPipelineObjectArgs> pipelineObjects) {
            this.pipelineObjects = Output.of(Objects.requireNonNull(pipelineObjects));
            return this;
        }
        public PipelineDefinitionArgs build() {
            return new PipelineDefinitionArgs(parameterObjects, parameterValues, pipelineId, pipelineObjects);
        }
    }
}
