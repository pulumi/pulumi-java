// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appmesh;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.appmesh.VirtualNodeArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeState;
import io.pulumi.aws.appmesh.outputs.VirtualNodeSpec;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides an AWS App Mesh virtual node resource.
 * 
 * ## Breaking Changes
 * 
 * Because of backward incompatible API changes (read [here](https://github.com/awslabs/aws-app-mesh-examples/issues/92)), `aws.appmesh.VirtualNode` resource definitions created with provider versions earlier than v2.3.0 will need to be modified:
 * 
 * * Rename the `service_name` attribute of the `dns` object to `hostname`.
 * 
 * * Replace the `backends` attribute of the `spec` object with one or more `backend` configuration blocks,
 * setting `virtual_service_name` to the name of the service.
 * 
 * The state associated with existing resources will automatically be migrated.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Basic
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const serviceb1 = new aws.appmesh.VirtualNode("serviceb1", {
 *     meshName: aws_appmesh_mesh.simple.id,
 *     spec: {
 *         backends: [{
 *             virtualService: {
 *                 virtualServiceName: "servicea.simpleapp.local",
 *             },
 *         }],
 *         listener: {
 *             portMapping: {
 *                 port: 8080,
 *                 protocol: "http",
 *             },
 *         },
 *         serviceDiscovery: {
 *             dns: {
 *                 hostname: "serviceb.simpleapp.local",
 *             },
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * serviceb1 = aws.appmesh.VirtualNode("serviceb1",
 *     mesh_name=aws_appmesh_mesh["simple"]["id"],
 *     spec=aws.appmesh.VirtualNodeSpecArgs(
 *         backends=[aws.appmesh.VirtualNodeSpecBackendArgs(
 *             virtual_service=aws.appmesh.VirtualNodeSpecBackendVirtualServiceArgs(
 *                 virtual_service_name="servicea.simpleapp.local",
 *             ),
 *         )],
 *         listener=aws.appmesh.VirtualNodeSpecListenerArgs(
 *             port_mapping=aws.appmesh.VirtualNodeSpecListenerPortMappingArgs(
 *                 port=8080,
 *                 protocol="http",
 *             ),
 *         ),
 *         service_discovery=aws.appmesh.VirtualNodeSpecServiceDiscoveryArgs(
 *             dns=aws.appmesh.VirtualNodeSpecServiceDiscoveryDnsArgs(
 *                 hostname="serviceb.simpleapp.local",
 *             ),
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var serviceb1 = new Aws.AppMesh.VirtualNode("serviceb1", new Aws.AppMesh.VirtualNodeArgs
 *         {
 *             MeshName = aws_appmesh_mesh.Simple.Id,
 *             Spec = new Aws.AppMesh.Inputs.VirtualNodeSpecArgs
 *             {
 *                 Backends = 
 *                 {
 *                     new Aws.AppMesh.Inputs.VirtualNodeSpecBackendArgs
 *                     {
 *                         VirtualService = new Aws.AppMesh.Inputs.VirtualNodeSpecBackendVirtualServiceArgs
 *                         {
 *                             VirtualServiceName = "servicea.simpleapp.local",
 *                         },
 *                     },
 *                 },
 *                 Listener = new Aws.AppMesh.Inputs.VirtualNodeSpecListenerArgs
 *                 {
 *                     PortMapping = new Aws.AppMesh.Inputs.VirtualNodeSpecListenerPortMappingArgs
 *                     {
 *                         Port = 8080,
 *                         Protocol = "http",
 *                     },
 *                 },
 *                 ServiceDiscovery = new Aws.AppMesh.Inputs.VirtualNodeSpecServiceDiscoveryArgs
 *                 {
 *                     Dns = new Aws.AppMesh.Inputs.VirtualNodeSpecServiceDiscoveryDnsArgs
 *                     {
 *                         Hostname = "serviceb.simpleapp.local",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appmesh"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := appmesh.NewVirtualNode(ctx, "serviceb1", &appmesh.VirtualNodeArgs{
 * 			MeshName: pulumi.Any(aws_appmesh_mesh.Simple.Id),
 * 			Spec: &appmesh.VirtualNodeSpecArgs{
 * 				Backends: appmesh.VirtualNodeSpecBackendArray{
 * 					&appmesh.VirtualNodeSpecBackendArgs{
 * 						VirtualService: &appmesh.VirtualNodeSpecBackendVirtualServiceArgs{
 * 							VirtualServiceName: pulumi.String("servicea.simpleapp.local"),
 * 						},
 * 					},
 * 				},
 * 				Listener: &appmesh.VirtualNodeSpecListenerArgs{
 * 					PortMapping: &appmesh.VirtualNodeSpecListenerPortMappingArgs{
 * 						Port:     pulumi.Int(8080),
 * 						Protocol: pulumi.String("http"),
 * 					},
 * 				},
 * 				ServiceDiscovery: &appmesh.VirtualNodeSpecServiceDiscoveryArgs{
 * 					Dns: &appmesh.VirtualNodeSpecServiceDiscoveryDnsArgs{
 * 						Hostname: pulumi.String("serviceb.simpleapp.local"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### AWS Cloud Map Service Discovery
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.servicediscovery.HttpNamespace("example", {});
 * const serviceb1 = new aws.appmesh.VirtualNode("serviceb1", {
 *     meshName: aws_appmesh_mesh.simple.id,
 *     spec: {
 *         backends: [{
 *             virtualService: {
 *                 virtualServiceName: "servicea.simpleapp.local",
 *             },
 *         }],
 *         listener: {
 *             portMapping: {
 *                 port: 8080,
 *                 protocol: "http",
 *             },
 *         },
 *         serviceDiscovery: {
 *             awsCloudMap: {
 *                 attributes: {
 *                     stack: "blue",
 *                 },
 *                 serviceName: "serviceb1",
 *                 namespaceName: example.name,
 *             },
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.servicediscovery.HttpNamespace("example")
 * serviceb1 = aws.appmesh.VirtualNode("serviceb1",
 *     mesh_name=aws_appmesh_mesh["simple"]["id"],
 *     spec=aws.appmesh.VirtualNodeSpecArgs(
 *         backends=[aws.appmesh.VirtualNodeSpecBackendArgs(
 *             virtual_service=aws.appmesh.VirtualNodeSpecBackendVirtualServiceArgs(
 *                 virtual_service_name="servicea.simpleapp.local",
 *             ),
 *         )],
 *         listener=aws.appmesh.VirtualNodeSpecListenerArgs(
 *             port_mapping=aws.appmesh.VirtualNodeSpecListenerPortMappingArgs(
 *                 port=8080,
 *                 protocol="http",
 *             ),
 *         ),
 *         service_discovery=aws.appmesh.VirtualNodeSpecServiceDiscoveryArgs(
 *             aws_cloud_map=aws.appmesh.VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs(
 *                 attributes={
 *                     "stack": "blue",
 *                 },
 *                 service_name="serviceb1",
 *                 namespace_name=example.name,
 *             ),
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.ServiceDiscovery.HttpNamespace("example", new Aws.ServiceDiscovery.HttpNamespaceArgs
 *         {
 *         });
 *         var serviceb1 = new Aws.AppMesh.VirtualNode("serviceb1", new Aws.AppMesh.VirtualNodeArgs
 *         {
 *             MeshName = aws_appmesh_mesh.Simple.Id,
 *             Spec = new Aws.AppMesh.Inputs.VirtualNodeSpecArgs
 *             {
 *                 Backends = 
 *                 {
 *                     new Aws.AppMesh.Inputs.VirtualNodeSpecBackendArgs
 *                     {
 *                         VirtualService = new Aws.AppMesh.Inputs.VirtualNodeSpecBackendVirtualServiceArgs
 *                         {
 *                             VirtualServiceName = "servicea.simpleapp.local",
 *                         },
 *                     },
 *                 },
 *                 Listener = new Aws.AppMesh.Inputs.VirtualNodeSpecListenerArgs
 *                 {
 *                     PortMapping = new Aws.AppMesh.Inputs.VirtualNodeSpecListenerPortMappingArgs
 *                     {
 *                         Port = 8080,
 *                         Protocol = "http",
 *                     },
 *                 },
 *                 ServiceDiscovery = new Aws.AppMesh.Inputs.VirtualNodeSpecServiceDiscoveryArgs
 *                 {
 *                     AwsCloudMap = new Aws.AppMesh.Inputs.VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs
 *                     {
 *                         Attributes = 
 *                         {
 *                             { "stack", "blue" },
 *                         },
 *                         ServiceName = "serviceb1",
 *                         NamespaceName = example.Name,
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appmesh"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/servicediscovery"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		example, err := servicediscovery.NewHttpNamespace(ctx, "example", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = appmesh.NewVirtualNode(ctx, "serviceb1", &appmesh.VirtualNodeArgs{
 * 			MeshName: pulumi.Any(aws_appmesh_mesh.Simple.Id),
 * 			Spec: &appmesh.VirtualNodeSpecArgs{
 * 				Backends: appmesh.VirtualNodeSpecBackendArray{
 * 					&appmesh.VirtualNodeSpecBackendArgs{
 * 						VirtualService: &appmesh.VirtualNodeSpecBackendVirtualServiceArgs{
 * 							VirtualServiceName: pulumi.String("servicea.simpleapp.local"),
 * 						},
 * 					},
 * 				},
 * 				Listener: &appmesh.VirtualNodeSpecListenerArgs{
 * 					PortMapping: &appmesh.VirtualNodeSpecListenerPortMappingArgs{
 * 						Port:     pulumi.Int(8080),
 * 						Protocol: pulumi.String("http"),
 * 					},
 * 				},
 * 				ServiceDiscovery: &appmesh.VirtualNodeSpecServiceDiscoveryArgs{
 * 					AwsCloudMap: &appmesh.VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs{
 * 						Attributes: pulumi.StringMap{
 * 							"stack": pulumi.String("blue"),
 * 						},
 * 						ServiceName:   pulumi.String("serviceb1"),
 * 						NamespaceName: example.Name,
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Listener Health Check
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const serviceb1 = new aws.appmesh.VirtualNode("serviceb1", {
 *     meshName: aws_appmesh_mesh.simple.id,
 *     spec: {
 *         backends: [{
 *             virtualService: {
 *                 virtualServiceName: "servicea.simpleapp.local",
 *             },
 *         }],
 *         listener: {
 *             portMapping: {
 *                 port: 8080,
 *                 protocol: "http",
 *             },
 *             healthCheck: {
 *                 protocol: "http",
 *                 path: "/ping",
 *                 healthyThreshold: 2,
 *                 unhealthyThreshold: 2,
 *                 timeoutMillis: 2000,
 *                 intervalMillis: 5000,
 *             },
 *         },
 *         serviceDiscovery: {
 *             dns: {
 *                 hostname: "serviceb.simpleapp.local",
 *             },
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * serviceb1 = aws.appmesh.VirtualNode("serviceb1",
 *     mesh_name=aws_appmesh_mesh["simple"]["id"],
 *     spec=aws.appmesh.VirtualNodeSpecArgs(
 *         backends=[aws.appmesh.VirtualNodeSpecBackendArgs(
 *             virtual_service=aws.appmesh.VirtualNodeSpecBackendVirtualServiceArgs(
 *                 virtual_service_name="servicea.simpleapp.local",
 *             ),
 *         )],
 *         listener=aws.appmesh.VirtualNodeSpecListenerArgs(
 *             port_mapping=aws.appmesh.VirtualNodeSpecListenerPortMappingArgs(
 *                 port=8080,
 *                 protocol="http",
 *             ),
 *             health_check=aws.appmesh.VirtualNodeSpecListenerHealthCheckArgs(
 *                 protocol="http",
 *                 path="/ping",
 *                 healthy_threshold=2,
 *                 unhealthy_threshold=2,
 *                 timeout_millis=2000,
 *                 interval_millis=5000,
 *             ),
 *         ),
 *         service_discovery=aws.appmesh.VirtualNodeSpecServiceDiscoveryArgs(
 *             dns=aws.appmesh.VirtualNodeSpecServiceDiscoveryDnsArgs(
 *                 hostname="serviceb.simpleapp.local",
 *             ),
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var serviceb1 = new Aws.AppMesh.VirtualNode("serviceb1", new Aws.AppMesh.VirtualNodeArgs
 *         {
 *             MeshName = aws_appmesh_mesh.Simple.Id,
 *             Spec = new Aws.AppMesh.Inputs.VirtualNodeSpecArgs
 *             {
 *                 Backends = 
 *                 {
 *                     new Aws.AppMesh.Inputs.VirtualNodeSpecBackendArgs
 *                     {
 *                         VirtualService = new Aws.AppMesh.Inputs.VirtualNodeSpecBackendVirtualServiceArgs
 *                         {
 *                             VirtualServiceName = "servicea.simpleapp.local",
 *                         },
 *                     },
 *                 },
 *                 Listener = new Aws.AppMesh.Inputs.VirtualNodeSpecListenerArgs
 *                 {
 *                     PortMapping = new Aws.AppMesh.Inputs.VirtualNodeSpecListenerPortMappingArgs
 *                     {
 *                         Port = 8080,
 *                         Protocol = "http",
 *                     },
 *                     HealthCheck = new Aws.AppMesh.Inputs.VirtualNodeSpecListenerHealthCheckArgs
 *                     {
 *                         Protocol = "http",
 *                         Path = "/ping",
 *                         HealthyThreshold = 2,
 *                         UnhealthyThreshold = 2,
 *                         TimeoutMillis = 2000,
 *                         IntervalMillis = 5000,
 *                     },
 *                 },
 *                 ServiceDiscovery = new Aws.AppMesh.Inputs.VirtualNodeSpecServiceDiscoveryArgs
 *                 {
 *                     Dns = new Aws.AppMesh.Inputs.VirtualNodeSpecServiceDiscoveryDnsArgs
 *                     {
 *                         Hostname = "serviceb.simpleapp.local",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appmesh"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := appmesh.NewVirtualNode(ctx, "serviceb1", &appmesh.VirtualNodeArgs{
 * 			MeshName: pulumi.Any(aws_appmesh_mesh.Simple.Id),
 * 			Spec: &appmesh.VirtualNodeSpecArgs{
 * 				Backends: appmesh.VirtualNodeSpecBackendArray{
 * 					&appmesh.VirtualNodeSpecBackendArgs{
 * 						VirtualService: &appmesh.VirtualNodeSpecBackendVirtualServiceArgs{
 * 							VirtualServiceName: pulumi.String("servicea.simpleapp.local"),
 * 						},
 * 					},
 * 				},
 * 				Listener: &appmesh.VirtualNodeSpecListenerArgs{
 * 					PortMapping: &appmesh.VirtualNodeSpecListenerPortMappingArgs{
 * 						Port:     pulumi.Int(8080),
 * 						Protocol: pulumi.String("http"),
 * 					},
 * 					HealthCheck: &appmesh.VirtualNodeSpecListenerHealthCheckArgs{
 * 						Protocol:           pulumi.String("http"),
 * 						Path:               pulumi.String("/ping"),
 * 						HealthyThreshold:   pulumi.Int(2),
 * 						UnhealthyThreshold: pulumi.Int(2),
 * 						TimeoutMillis:      pulumi.Int(2000),
 * 						IntervalMillis:     pulumi.Int(5000),
 * 					},
 * 				},
 * 				ServiceDiscovery: &appmesh.VirtualNodeSpecServiceDiscoveryArgs{
 * 					Dns: &appmesh.VirtualNodeSpecServiceDiscoveryDnsArgs{
 * 						Hostname: pulumi.String("serviceb.simpleapp.local"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Logging
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const serviceb1 = new aws.appmesh.VirtualNode("serviceb1", {
 *     meshName: aws_appmesh_mesh.simple.id,
 *     spec: {
 *         backends: [{
 *             virtualService: {
 *                 virtualServiceName: "servicea.simpleapp.local",
 *             },
 *         }],
 *         listener: {
 *             portMapping: {
 *                 port: 8080,
 *                 protocol: "http",
 *             },
 *         },
 *         serviceDiscovery: {
 *             dns: {
 *                 hostname: "serviceb.simpleapp.local",
 *             },
 *         },
 *         logging: {
 *             accessLog: {
 *                 file: {
 *                     path: "/dev/stdout",
 *                 },
 *             },
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * serviceb1 = aws.appmesh.VirtualNode("serviceb1",
 *     mesh_name=aws_appmesh_mesh["simple"]["id"],
 *     spec=aws.appmesh.VirtualNodeSpecArgs(
 *         backends=[aws.appmesh.VirtualNodeSpecBackendArgs(
 *             virtual_service=aws.appmesh.VirtualNodeSpecBackendVirtualServiceArgs(
 *                 virtual_service_name="servicea.simpleapp.local",
 *             ),
 *         )],
 *         listener=aws.appmesh.VirtualNodeSpecListenerArgs(
 *             port_mapping=aws.appmesh.VirtualNodeSpecListenerPortMappingArgs(
 *                 port=8080,
 *                 protocol="http",
 *             ),
 *         ),
 *         service_discovery=aws.appmesh.VirtualNodeSpecServiceDiscoveryArgs(
 *             dns=aws.appmesh.VirtualNodeSpecServiceDiscoveryDnsArgs(
 *                 hostname="serviceb.simpleapp.local",
 *             ),
 *         ),
 *         logging=aws.appmesh.VirtualNodeSpecLoggingArgs(
 *             access_log=aws.appmesh.VirtualNodeSpecLoggingAccessLogArgs(
 *                 file=aws.appmesh.VirtualNodeSpecLoggingAccessLogFileArgs(
 *                     path="/dev/stdout",
 *                 ),
 *             ),
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var serviceb1 = new Aws.AppMesh.VirtualNode("serviceb1", new Aws.AppMesh.VirtualNodeArgs
 *         {
 *             MeshName = aws_appmesh_mesh.Simple.Id,
 *             Spec = new Aws.AppMesh.Inputs.VirtualNodeSpecArgs
 *             {
 *                 Backends = 
 *                 {
 *                     new Aws.AppMesh.Inputs.VirtualNodeSpecBackendArgs
 *                     {
 *                         VirtualService = new Aws.AppMesh.Inputs.VirtualNodeSpecBackendVirtualServiceArgs
 *                         {
 *                             VirtualServiceName = "servicea.simpleapp.local",
 *                         },
 *                     },
 *                 },
 *                 Listener = new Aws.AppMesh.Inputs.VirtualNodeSpecListenerArgs
 *                 {
 *                     PortMapping = new Aws.AppMesh.Inputs.VirtualNodeSpecListenerPortMappingArgs
 *                     {
 *                         Port = 8080,
 *                         Protocol = "http",
 *                     },
 *                 },
 *                 ServiceDiscovery = new Aws.AppMesh.Inputs.VirtualNodeSpecServiceDiscoveryArgs
 *                 {
 *                     Dns = new Aws.AppMesh.Inputs.VirtualNodeSpecServiceDiscoveryDnsArgs
 *                     {
 *                         Hostname = "serviceb.simpleapp.local",
 *                     },
 *                 },
 *                 Logging = new Aws.AppMesh.Inputs.VirtualNodeSpecLoggingArgs
 *                 {
 *                     AccessLog = new Aws.AppMesh.Inputs.VirtualNodeSpecLoggingAccessLogArgs
 *                     {
 *                         File = new Aws.AppMesh.Inputs.VirtualNodeSpecLoggingAccessLogFileArgs
 *                         {
 *                             Path = "/dev/stdout",
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appmesh"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := appmesh.NewVirtualNode(ctx, "serviceb1", &appmesh.VirtualNodeArgs{
 * 			MeshName: pulumi.Any(aws_appmesh_mesh.Simple.Id),
 * 			Spec: &appmesh.VirtualNodeSpecArgs{
 * 				Backends: appmesh.VirtualNodeSpecBackendArray{
 * 					&appmesh.VirtualNodeSpecBackendArgs{
 * 						VirtualService: &appmesh.VirtualNodeSpecBackendVirtualServiceArgs{
 * 							VirtualServiceName: pulumi.String("servicea.simpleapp.local"),
 * 						},
 * 					},
 * 				},
 * 				Listener: &appmesh.VirtualNodeSpecListenerArgs{
 * 					PortMapping: &appmesh.VirtualNodeSpecListenerPortMappingArgs{
 * 						Port:     pulumi.Int(8080),
 * 						Protocol: pulumi.String("http"),
 * 					},
 * 				},
 * 				ServiceDiscovery: &appmesh.VirtualNodeSpecServiceDiscoveryArgs{
 * 					Dns: &appmesh.VirtualNodeSpecServiceDiscoveryDnsArgs{
 * 						Hostname: pulumi.String("serviceb.simpleapp.local"),
 * 					},
 * 				},
 * 				Logging: &appmesh.VirtualNodeSpecLoggingArgs{
 * 					AccessLog: &appmesh.VirtualNodeSpecLoggingAccessLogArgs{
 * 						File: &appmesh.VirtualNodeSpecLoggingAccessLogFileArgs{
 * 							Path: pulumi.String("/dev/stdout"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * App Mesh virtual nodes can be imported using `mesh_name` together with the virtual node's `name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:appmesh/virtualNode:VirtualNode serviceb1 simpleapp/serviceBv1
 * ```
 * 
 *  [1]/docs/providers/aws/index.html 
 */
@ResourceType(type="aws:appmesh/virtualNode:VirtualNode")
public class VirtualNode extends io.pulumi.resources.CustomResource {
    /**
     * The ARN of the virtual node.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the virtual node.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The creation date of the virtual node.
     * 
     */
    @Export(name="createdDate", type=String.class, parameters={})
    private Output<String> createdDate;

    /**
     * @return The creation date of the virtual node.
     * 
     */
    public Output<String> getCreatedDate() {
        return this.createdDate;
    }
    /**
     * The last update date of the virtual node.
     * 
     */
    @Export(name="lastUpdatedDate", type=String.class, parameters={})
    private Output<String> lastUpdatedDate;

    /**
     * @return The last update date of the virtual node.
     * 
     */
    public Output<String> getLastUpdatedDate() {
        return this.lastUpdatedDate;
    }
    /**
     * The name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
     * 
     */
    @Export(name="meshName", type=String.class, parameters={})
    private Output<String> meshName;

    /**
     * @return The name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
     * 
     */
    public Output<String> getMeshName() {
        return this.meshName;
    }
    /**
     * The AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.
     * 
     */
    @Export(name="meshOwner", type=String.class, parameters={})
    private Output<String> meshOwner;

    /**
     * @return The AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.
     * 
     */
    public Output<String> getMeshOwner() {
        return this.meshOwner;
    }
    /**
     * The name to use for the virtual node. Must be between 1 and 255 characters in length.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name to use for the virtual node. Must be between 1 and 255 characters in length.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The resource owner's AWS account ID.
     * 
     */
    @Export(name="resourceOwner", type=String.class, parameters={})
    private Output<String> resourceOwner;

    /**
     * @return The resource owner's AWS account ID.
     * 
     */
    public Output<String> getResourceOwner() {
        return this.resourceOwner;
    }
    /**
     * The virtual node specification to apply.
     * 
     */
    @Export(name="spec", type=VirtualNodeSpec.class, parameters={})
    private Output<VirtualNodeSpec> spec;

    /**
     * @return The virtual node specification to apply.
     * 
     */
    public Output<VirtualNodeSpec> getSpec() {
        return this.spec;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VirtualNode(String name) {
        this(name, VirtualNodeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VirtualNode(String name, VirtualNodeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualNode(String name, VirtualNodeArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:appmesh/virtualNode:VirtualNode", name, args == null ? VirtualNodeArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private VirtualNode(String name, Output<String> id, @Nullable VirtualNodeState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:appmesh/virtualNode:VirtualNode", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualNode get(String name, Output<String> id, @Nullable VirtualNodeState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new VirtualNode(name, id, state, options);
    }
}
