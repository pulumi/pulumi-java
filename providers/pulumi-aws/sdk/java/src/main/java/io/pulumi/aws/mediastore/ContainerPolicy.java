// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.mediastore;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.mediastore.ContainerPolicyArgs;
import io.pulumi.aws.mediastore.inputs.ContainerPolicyState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a MediaStore Container Policy.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const currentRegion = aws.getRegion({});
 * const currentCallerIdentity = aws.getCallerIdentity({});
 * const exampleContainer = new aws.mediastore.Container("exampleContainer", {});
 * const exampleContainerPolicy = new aws.mediastore.ContainerPolicy("exampleContainerPolicy", {
 *     containerName: exampleContainer.name,
 *     policy: pulumi.all([currentCallerIdentity, currentRegion, currentCallerIdentity, exampleContainer.name]).apply(([currentCallerIdentity, currentRegion, currentCallerIdentity1, name]) => `{
 * 	"Version": "2012-10-17",
 * 	"Statement": [{
 * 		"Sid": "MediaStoreFullAccess",
 * 		"Action": [ "mediastore:*" ],
 * 		"Principal": {"AWS" : "arn:aws:iam::${currentCallerIdentity.accountId}:root"},
 * 		"Effect": "Allow",
 * 		"Resource": "arn:aws:mediastore:${currentRegion.name}:${currentCallerIdentity1.accountId}:container/${name}/*",
 * 		"Condition": {
 * 			"Bool": { "aws:SecureTransport": "true" }
 * 		}
 * 	}]
 * }
 * `),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * current_region = aws.get_region()
 * current_caller_identity = aws.get_caller_identity()
 * example_container = aws.mediastore.Container("exampleContainer")
 * example_container_policy = aws.mediastore.ContainerPolicy("exampleContainerPolicy",
 *     container_name=example_container.name,
 *     policy=example_container.name.apply(lambda name: f"""{{
 * 	"Version": "2012-10-17",
 * 	"Statement": [{{
 * 		"Sid": "MediaStoreFullAccess",
 * 		"Action": [ "mediastore:*" ],
 * 		"Principal": {{"AWS" : "arn:aws:iam::{current_caller_identity.account_id}:root"}},
 * 		"Effect": "Allow",
 * 		"Resource": "arn:aws:mediastore:{current_region.name}:{current_caller_identity.account_id}:container/{name}/*",
 * 		"Condition": {{
 * 			"Bool": {{ "aws:SecureTransport": "true" }}
 * 		}}
 * 	}}]
 * }}
 * """))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var currentRegion = Output.Create(Aws.GetRegion.InvokeAsync());
 *         var currentCallerIdentity = Output.Create(Aws.GetCallerIdentity.InvokeAsync());
 *         var exampleContainer = new Aws.MediaStore.Container("exampleContainer", new Aws.MediaStore.ContainerArgs
 *         {
 *         });
 *         var exampleContainerPolicy = new Aws.MediaStore.ContainerPolicy("exampleContainerPolicy", new Aws.MediaStore.ContainerPolicyArgs
 *         {
 *             ContainerName = exampleContainer.Name,
 *             Policy = Output.Tuple(currentCallerIdentity, currentRegion, currentCallerIdentity, exampleContainer.Name).Apply(values =>
 *             {
 *                 var currentCallerIdentity = values.Item1;
 *                 var currentRegion = values.Item2;
 *                 var currentCallerIdentity1 = values.Item3;
 *                 var name = values.Item4;
 *                 return @$"{{
 * 	""Version"": ""2012-10-17"",
 * 	""Statement"": [{{
 * 		""Sid"": ""MediaStoreFullAccess"",
 * 		""Action"": [ ""mediastore:*"" ],
 * 		""Principal"": {{""AWS"" : ""arn:aws:iam::{currentCallerIdentity.AccountId}:root""}},
 * 		""Effect"": ""Allow"",
 * 		""Resource"": ""arn:aws:mediastore:{currentRegion.Name}:{currentCallerIdentity1.AccountId}:container/{name}/*"",
 * 		""Condition"": {{
 * 			""Bool"": {{ ""aws:SecureTransport"": ""true"" }}
 * 		}}
 * 	}}]
 * }}
 * ";
 *             }),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/mediastore"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		currentRegion, err := aws.GetRegion(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		currentCallerIdentity, err := aws.GetCallerIdentity(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleContainer, err := mediastore.NewContainer(ctx, "exampleContainer", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = mediastore.NewContainerPolicy(ctx, "exampleContainerPolicy", &mediastore.ContainerPolicyArgs{
 * 			ContainerName: exampleContainer.Name,
 * 			Policy: exampleContainer.Name.ApplyT(func(name string) (string, error) {
 * 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "	\"Version\": \"2012-10-17\",\n", "	\"Statement\": [{\n", "		\"Sid\": \"MediaStoreFullAccess\",\n", "		\"Action\": [ \"mediastore:*\" ],\n", "		\"Principal\": {\"AWS\" : \"arn:aws:iam::", currentCallerIdentity.AccountId, ":root\"},\n", "		\"Effect\": \"Allow\",\n", "		\"Resource\": \"arn:aws:mediastore:", currentRegion.Name, ":", currentCallerIdentity.AccountId, ":container/", name, "/*\",\n", "		\"Condition\": {\n", "			\"Bool\": { \"aws:SecureTransport\": \"true\" }\n", "		}\n", "	}]\n", "}\n"), nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * MediaStore Container Policy can be imported using the MediaStore Container Name, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:mediastore/containerPolicy:ContainerPolicy example example
 * ```
 * 
 *  
 */
@ResourceType(type="aws:mediastore/containerPolicy:ContainerPolicy")
public class ContainerPolicy extends io.pulumi.resources.CustomResource {
    /**
     * The name of the container.
     * 
     */
    @Export(name="containerName", type=String.class, parameters={})
    private Output<String> containerName;

    /**
     * @return The name of the container.
     * 
     */
    public Output<String> getContainerName() {
        return this.containerName;
    }
    /**
     * The contents of the policy.
     * 
     */
    @Export(name="policy", type=String.class, parameters={})
    private Output<String> policy;

    /**
     * @return The contents of the policy.
     * 
     */
    public Output<String> getPolicy() {
        return this.policy;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ContainerPolicy(String name) {
        this(name, ContainerPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ContainerPolicy(String name, ContainerPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ContainerPolicy(String name, ContainerPolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:mediastore/containerPolicy:ContainerPolicy", name, args == null ? ContainerPolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ContainerPolicy(String name, Output<String> id, @Nullable ContainerPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:mediastore/containerPolicy:ContainerPolicy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ContainerPolicy get(String name, Output<String> id, @Nullable ContainerPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ContainerPolicy(name, id, state, options);
    }
}
