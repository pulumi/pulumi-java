// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.guardduty;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.guardduty.PublishingDestinationArgs;
import io.pulumi.aws.guardduty.inputs.PublishingDestinationState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a resource to manage a GuardDuty PublishingDestination. Requires an existing GuardDuty Detector.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const currentCallerIdentity = aws.getCallerIdentity({});
 * const currentRegion = aws.getRegion({});
 * const gdBucket = new aws.s3.Bucket("gdBucket", {
 *     acl: "private",
 *     forceDestroy: true,
 * });
 * const bucketPol = aws.iam.getPolicyDocumentOutput({
 *     statements: [
 *         {
 *             sid: "Allow PutObject",
 *             actions: ["s3:PutObject"],
 *             resources: [pulumi.interpolate`${gdBucket.arn}/*`],
 *             principals: [{
 *                 type: "Service",
 *                 identifiers: ["guardduty.amazonaws.com"],
 *             }],
 *         },
 *         {
 *             sid: "Allow GetBucketLocation",
 *             actions: ["s3:GetBucketLocation"],
 *             resources: [gdBucket.arn],
 *             principals: [{
 *                 type: "Service",
 *                 identifiers: ["guardduty.amazonaws.com"],
 *             }],
 *         },
 *     ],
 * });
 * const kmsPol = Promise.all([currentRegion, currentCallerIdentity, currentRegion, currentCallerIdentity, currentCallerIdentity]).then(([currentRegion, currentCallerIdentity, currentRegion1, currentCallerIdentity1, currentCallerIdentity2]) => aws.iam.getPolicyDocument({
 *     statements: [
 *         {
 *             sid: "Allow GuardDuty to encrypt findings",
 *             actions: ["kms:GenerateDataKey"],
 *             resources: [`arn:aws:kms:${currentRegion.name}:${currentCallerIdentity.accountId}:key/*`],
 *             principals: [{
 *                 type: "Service",
 *                 identifiers: ["guardduty.amazonaws.com"],
 *             }],
 *         },
 *         {
 *             sid: "Allow all users to modify/delete key (test only)",
 *             actions: ["kms:*"],
 *             resources: [`arn:aws:kms:${currentRegion1.name}:${currentCallerIdentity1.accountId}:key/*`],
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: [`arn:aws:iam::${currentCallerIdentity2.accountId}:root`],
 *             }],
 *         },
 *     ],
 * }));
 * const testGd = new aws.guardduty.Detector("testGd", {enable: true});
 * const gdBucketPolicy = new aws.s3.BucketPolicy("gdBucketPolicy", {
 *     bucket: gdBucket.id,
 *     policy: bucketPol.apply(bucketPol => bucketPol.json),
 * });
 * const gdKey = new aws.kms.Key("gdKey", {
 *     description: "Temporary key for AccTest of TF",
 *     deletionWindowInDays: 7,
 *     policy: kmsPol.then(kmsPol => kmsPol.json),
 * });
 * const test = new aws.guardduty.PublishingDestination("test", {
 *     detectorId: testGd.id,
 *     destinationArn: gdBucket.arn,
 *     kmsKeyArn: gdKey.arn,
 * }, {
 *     dependsOn: [gdBucketPolicy],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * current_caller_identity = aws.get_caller_identity()
 * current_region = aws.get_region()
 * gd_bucket = aws.s3.Bucket("gdBucket",
 *     acl="private",
 *     force_destroy=True)
 * bucket_pol = aws.iam.get_policy_document_output(statements=[
 *     aws.iam.GetPolicyDocumentStatementArgs(
 *         sid="Allow PutObject",
 *         actions=["s3:PutObject"],
 *         resources=[gd_bucket.arn.apply(lambda arn: f"{arn}/*")],
 *         principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *             type="Service",
 *             identifiers=["guardduty.amazonaws.com"],
 *         )],
 *     ),
 *     aws.iam.GetPolicyDocumentStatementArgs(
 *         sid="Allow GetBucketLocation",
 *         actions=["s3:GetBucketLocation"],
 *         resources=[gd_bucket.arn],
 *         principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *             type="Service",
 *             identifiers=["guardduty.amazonaws.com"],
 *         )],
 *     ),
 * ])
 * kms_pol = aws.iam.get_policy_document(statements=[
 *     aws.iam.GetPolicyDocumentStatementArgs(
 *         sid="Allow GuardDuty to encrypt findings",
 *         actions=["kms:GenerateDataKey"],
 *         resources=[f"arn:aws:kms:{current_region.name}:{current_caller_identity.account_id}:key/*"],
 *         principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *             type="Service",
 *             identifiers=["guardduty.amazonaws.com"],
 *         )],
 *     ),
 *     aws.iam.GetPolicyDocumentStatementArgs(
 *         sid="Allow all users to modify/delete key (test only)",
 *         actions=["kms:*"],
 *         resources=[f"arn:aws:kms:{current_region.name}:{current_caller_identity.account_id}:key/*"],
 *         principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *             type="AWS",
 *             identifiers=[f"arn:aws:iam::{current_caller_identity.account_id}:root"],
 *         )],
 *     ),
 * ])
 * test_gd = aws.guardduty.Detector("testGd", enable=True)
 * gd_bucket_policy = aws.s3.BucketPolicy("gdBucketPolicy",
 *     bucket=gd_bucket.id,
 *     policy=bucket_pol.json)
 * gd_key = aws.kms.Key("gdKey",
 *     description="Temporary key for AccTest of TF",
 *     deletion_window_in_days=7,
 *     policy=kms_pol.json)
 * test = aws.guardduty.PublishingDestination("test",
 *     detector_id=test_gd.id,
 *     destination_arn=gd_bucket.arn,
 *     kms_key_arn=gd_key.arn,
 *     opts=pulumi.ResourceOptions(depends_on=[gd_bucket_policy]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var currentCallerIdentity = Output.Create(Aws.GetCallerIdentity.InvokeAsync());
 *         var currentRegion = Output.Create(Aws.GetRegion.InvokeAsync());
 *         var gdBucket = new Aws.S3.Bucket("gdBucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "private",
 *             ForceDestroy = true,
 *         });
 *         var bucketPol = Aws.Iam.GetPolicyDocument.Invoke(new Aws.Iam.GetPolicyDocumentInvokeArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
 *                 {
 *                     Sid = "Allow PutObject",
 *                     Actions = 
 *                     {
 *                         "s3:PutObject",
 *                     },
 *                     Resources = 
 *                     {
 *                         gdBucket.Arn.Apply(arn => $"{arn}/*"),
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
 *                         {
 *                             Type = "Service",
 *                             Identifiers = 
 *                             {
 *                                 "guardduty.amazonaws.com",
 *                             },
 *                         },
 *                     },
 *                 },
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
 *                 {
 *                     Sid = "Allow GetBucketLocation",
 *                     Actions = 
 *                     {
 *                         "s3:GetBucketLocation",
 *                     },
 *                     Resources = 
 *                     {
 *                         gdBucket.Arn,
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
 *                         {
 *                             Type = "Service",
 *                             Identifiers = 
 *                             {
 *                                 "guardduty.amazonaws.com",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         var kmsPol = Output.Tuple(currentRegion, currentCallerIdentity, currentRegion, currentCallerIdentity, currentCallerIdentity).Apply(values =>
 *         {
 *             var currentRegion = values.Item1;
 *             var currentCallerIdentity = values.Item2;
 *             var currentRegion1 = values.Item3;
 *             var currentCallerIdentity1 = values.Item4;
 *             var currentCallerIdentity2 = values.Item5;
 *             return Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *             {
 *                 Statements = 
 *                 {
 *                     new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                     {
 *                         Sid = "Allow GuardDuty to encrypt findings",
 *                         Actions = 
 *                         {
 *                             "kms:GenerateDataKey",
 *                         },
 *                         Resources = 
 *                         {
 *                             $"arn:aws:kms:{currentRegion.Name}:{currentCallerIdentity.AccountId}:key/*",
 *                         },
 *                         Principals = 
 *                         {
 *                             new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                             {
 *                                 Type = "Service",
 *                                 Identifiers = 
 *                                 {
 *                                     "guardduty.amazonaws.com",
 *                                 },
 *                             },
 *                         },
 *                     },
 *                     new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                     {
 *                         Sid = "Allow all users to modify/delete key (test only)",
 *                         Actions = 
 *                         {
 *                             "kms:*",
 *                         },
 *                         Resources = 
 *                         {
 *                             $"arn:aws:kms:{currentRegion1.Name}:{currentCallerIdentity1.AccountId}:key/*",
 *                         },
 *                         Principals = 
 *                         {
 *                             new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                             {
 *                                 Type = "AWS",
 *                                 Identifiers = 
 *                                 {
 *                                     $"arn:aws:iam::{currentCallerIdentity2.AccountId}:root",
 *                                 },
 *                             },
 *                         },
 *                     },
 *                 },
 *             }));
 *         });
 *         var testGd = new Aws.GuardDuty.Detector("testGd", new Aws.GuardDuty.DetectorArgs
 *         {
 *             Enable = true,
 *         });
 *         var gdBucketPolicy = new Aws.S3.BucketPolicy("gdBucketPolicy", new Aws.S3.BucketPolicyArgs
 *         {
 *             Bucket = gdBucket.Id,
 *             Policy = bucketPol.Apply(bucketPol => bucketPol.Json),
 *         });
 *         var gdKey = new Aws.Kms.Key("gdKey", new Aws.Kms.KeyArgs
 *         {
 *             Description = "Temporary key for AccTest of TF",
 *             DeletionWindowInDays = 7,
 *             Policy = kmsPol.Apply(kmsPol => kmsPol.Json),
 *         });
 *         var test = new Aws.GuardDuty.PublishingDestination("test", new Aws.GuardDuty.PublishingDestinationArgs
 *         {
 *             DetectorId = testGd.Id,
 *             DestinationArn = gdBucket.Arn,
 *             KmsKeyArn = gdKey.Arn,
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 gdBucketPolicy,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/guardduty"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kms"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		currentCallerIdentity, err := aws.GetCallerIdentity(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		currentRegion, err := aws.GetRegion(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		gdBucket, err := s3.NewBucket(ctx, "gdBucket", &s3.BucketArgs{
 * 			Acl:          pulumi.String("private"),
 * 			ForceDestroy: pulumi.Bool(true),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		bucketPol := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
 * 			Statements: iam.GetPolicyDocumentStatementArray{
 * 				&iam.GetPolicyDocumentStatementArgs{
 * 					Sid: pulumi.String("Allow PutObject"),
 * 					Actions: pulumi.StringArray{
 * 						pulumi.String("s3:PutObject"),
 * 					},
 * 					Resources: pulumi.StringArray{
 * 						gdBucket.Arn.ApplyT(func(arn string) (string, error) {
 * 							return fmt.Sprintf("%v%v", arn, "/*"), nil
 * 						}).(pulumi.StringOutput),
 * 					},
 * 					Principals: iam.GetPolicyDocumentStatementPrincipalArray{
 * 						&iam.GetPolicyDocumentStatementPrincipalArgs{
 * 							Type: pulumi.String("Service"),
 * 							Identifiers: pulumi.StringArray{
 * 								pulumi.String("guardduty.amazonaws.com"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 				&iam.GetPolicyDocumentStatementArgs{
 * 					Sid: pulumi.String("Allow GetBucketLocation"),
 * 					Actions: pulumi.StringArray{
 * 						pulumi.String("s3:GetBucketLocation"),
 * 					},
 * 					Resources: pulumi.StringArray{
 * 						gdBucket.Arn,
 * 					},
 * 					Principals: iam.GetPolicyDocumentStatementPrincipalArray{
 * 						&iam.GetPolicyDocumentStatementPrincipalArgs{
 * 							Type: pulumi.String("Service"),
 * 							Identifiers: pulumi.StringArray{
 * 								pulumi.String("guardduty.amazonaws.com"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		kmsPol, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Sid: "Allow GuardDuty to encrypt findings",
 * 					Actions: []string{
 * 						"kms:GenerateDataKey",
 * 					},
 * 					Resources: []string{
 * 						fmt.Sprintf("%v%v%v%v%v", "arn:aws:kms:", currentRegion.Name, ":", currentCallerIdentity.AccountId, ":key/*"),
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Type: "Service",
 * 							Identifiers: []string{
 * 								"guardduty.amazonaws.com",
 * 							},
 * 						},
 * 					},
 * 				},
 * 				iam.GetPolicyDocumentStatement{
 * 					Sid: "Allow all users to modify/delete key (test only)",
 * 					Actions: []string{
 * 						"kms:*",
 * 					},
 * 					Resources: []string{
 * 						fmt.Sprintf("%v%v%v%v%v", "arn:aws:kms:", currentRegion.Name, ":", currentCallerIdentity.AccountId, ":key/*"),
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Type: "AWS",
 * 							Identifiers: []string{
 * 								fmt.Sprintf("%v%v%v", "arn:aws:iam::", currentCallerIdentity.AccountId, ":root"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		testGd, err := guardduty.NewDetector(ctx, "testGd", &guardduty.DetectorArgs{
 * 			Enable: pulumi.Bool(true),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		gdBucketPolicy, err := s3.NewBucketPolicy(ctx, "gdBucketPolicy", &s3.BucketPolicyArgs{
 * 			Bucket: gdBucket.ID(),
 * 			Policy: bucketPol.ApplyT(func(bucketPol iam.GetPolicyDocumentResult) (string, error) {
 * 				return bucketPol.Json, nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		gdKey, err := kms.NewKey(ctx, "gdKey", &kms.KeyArgs{
 * 			Description:          pulumi.String("Temporary key for AccTest of TF"),
 * 			DeletionWindowInDays: pulumi.Int(7),
 * 			Policy:               pulumi.String(kmsPol.Json),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = guardduty.NewPublishingDestination(ctx, "test", &guardduty.PublishingDestinationArgs{
 * 			DetectorId:     testGd.ID(),
 * 			DestinationArn: gdBucket.Arn,
 * 			KmsKeyArn:      gdKey.Arn,
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			gdBucketPolicy,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * > **Note:** Please do not use this simple example for Bucket-Policy and KMS Key Policy in a production environment. It is much too open for such a use-case. Refer to the AWS documentation here: https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_exportfindings.html
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * GuardDuty PublishingDestination can be imported using the the master GuardDuty detector ID and PublishingDestinationID, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:guardduty/publishingDestination:PublishingDestination test a4b86f26fa42e7e7cf0d1c333ea77777:a4b86f27a0e464e4a7e0516d242f1234
 * ```
 * 
 *  
 */
@ResourceType(type="aws:guardduty/publishingDestination:PublishingDestination")
public class PublishingDestination extends io.pulumi.resources.CustomResource {
    /**
     * The bucket arn and prefix under which the findings get exported. Bucket-ARN is required, the prefix is optional and will be `AWSLogs/[Account-ID]/GuardDuty/[Region]/` if not provided
     * 
     */
    @Export(name="destinationArn", type=String.class, parameters={})
    private Output<String> destinationArn;

    /**
     * @return The bucket arn and prefix under which the findings get exported. Bucket-ARN is required, the prefix is optional and will be `AWSLogs/[Account-ID]/GuardDuty/[Region]/` if not provided
     * 
     */
    public Output<String> getDestinationArn() {
        return this.destinationArn;
    }
    /**
     * Currently there is only "S3" available as destination type which is also the default value
     * 
     */
    @Export(name="destinationType", type=String.class, parameters={})
    private Output</* @Nullable */ String> destinationType;

    /**
     * @return Currently there is only "S3" available as destination type which is also the default value
     * 
     */
    public Output</* @Nullable */ String> getDestinationType() {
        return this.destinationType;
    }
    /**
     * The detector ID of the GuardDuty.
     * 
     */
    @Export(name="detectorId", type=String.class, parameters={})
    private Output<String> detectorId;

    /**
     * @return The detector ID of the GuardDuty.
     * 
     */
    public Output<String> getDetectorId() {
        return this.detectorId;
    }
    /**
     * The ARN of the KMS key used to encrypt GuardDuty findings. GuardDuty enforces this to be encrypted.
     * 
     */
    @Export(name="kmsKeyArn", type=String.class, parameters={})
    private Output<String> kmsKeyArn;

    /**
     * @return The ARN of the KMS key used to encrypt GuardDuty findings. GuardDuty enforces this to be encrypted.
     * 
     */
    public Output<String> getKmsKeyArn() {
        return this.kmsKeyArn;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PublishingDestination(String name) {
        this(name, PublishingDestinationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PublishingDestination(String name, PublishingDestinationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PublishingDestination(String name, PublishingDestinationArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:guardduty/publishingDestination:PublishingDestination", name, args == null ? PublishingDestinationArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private PublishingDestination(String name, Output<String> id, @Nullable PublishingDestinationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:guardduty/publishingDestination:PublishingDestination", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PublishingDestination get(String name, Output<String> id, @Nullable PublishingDestinationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new PublishingDestination(name, id, state, options);
    }
}
