// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.sns;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.sns.TopicPolicyArgs;
import io.pulumi.aws.sns.inputs.TopicPolicyState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides an SNS topic policy resource
 * 
 * > **NOTE:** If a Principal is specified as just an AWS account ID rather than an ARN, AWS silently converts it to the ARN for the root user, causing future deployments to differ. To avoid this problem, just specify the full ARN, e.g. `arn:aws:iam::123456789012:root`
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const test = new aws.sns.Topic("test", {});
 * const snsTopicPolicy = test.arn.apply(arn => aws.iam.getPolicyDocumentOutput({
 *     policyId: "__default_policy_ID",
 *     statements: [{
 *         actions: [
 *             "SNS:Subscribe",
 *             "SNS:SetTopicAttributes",
 *             "SNS:RemovePermission",
 *             "SNS:Receive",
 *             "SNS:Publish",
 *             "SNS:ListSubscriptionsByTopic",
 *             "SNS:GetTopicAttributes",
 *             "SNS:DeleteTopic",
 *             "SNS:AddPermission",
 *         ],
 *         conditions: [{
 *             test: "StringEquals",
 *             variable: "AWS:SourceOwner",
 *             values: [_var["account-id"]],
 *         }],
 *         effect: "Allow",
 *         principals: [{
 *             type: "AWS",
 *             identifiers: ["*"],
 *         }],
 *         resources: [arn],
 *         sid: "__default_statement_ID",
 *     }],
 * }));
 * const _default = new aws.sns.TopicPolicy("default", {
 *     arn: test.arn,
 *     policy: snsTopicPolicy.apply(snsTopicPolicy => snsTopicPolicy.json),
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test = aws.sns.Topic("test")
 * sns_topic_policy = test.arn.apply(lambda arn: aws.iam.get_policy_document_output(policy_id="__default_policy_ID",
 *     statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *         actions=[
 *             "SNS:Subscribe",
 *             "SNS:SetTopicAttributes",
 *             "SNS:RemovePermission",
 *             "SNS:Receive",
 *             "SNS:Publish",
 *             "SNS:ListSubscriptionsByTopic",
 *             "SNS:GetTopicAttributes",
 *             "SNS:DeleteTopic",
 *             "SNS:AddPermission",
 *         ],
 *         conditions=[aws.iam.GetPolicyDocumentStatementConditionArgs(
 *             test="StringEquals",
 *             variable="AWS:SourceOwner",
 *             values=[var["account-id"]],
 *         )],
 *         effect="Allow",
 *         principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *             type="AWS",
 *             identifiers=["*"],
 *         )],
 *         resources=[arn],
 *         sid="__default_statement_ID",
 *     )]))
 * default = aws.sns.TopicPolicy("default",
 *     arn=test.arn,
 *     policy=sns_topic_policy.json)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var test = new Aws.Sns.Topic("test", new Aws.Sns.TopicArgs
 *         {
 *         });
 *         var snsTopicPolicy = test.Arn.Apply(arn => Aws.Iam.GetPolicyDocument.Invoke(new Aws.Iam.GetPolicyDocumentInvokeArgs
 *         {
 *             PolicyId = "__default_policy_ID",
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
 *                 {
 *                     Actions = 
 *                     {
 *                         "SNS:Subscribe",
 *                         "SNS:SetTopicAttributes",
 *                         "SNS:RemovePermission",
 *                         "SNS:Receive",
 *                         "SNS:Publish",
 *                         "SNS:ListSubscriptionsByTopic",
 *                         "SNS:GetTopicAttributes",
 *                         "SNS:DeleteTopic",
 *                         "SNS:AddPermission",
 *                     },
 *                     Conditions = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
 *                         {
 *                             Test = "StringEquals",
 *                             Variable = "AWS:SourceOwner",
 *                             Values = 
 *                             {
 *                                 @var.Account_id,
 *                             },
 *                         },
 *                     },
 *                     Effect = "Allow",
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
 *                         {
 *                             Type = "AWS",
 *                             Identifiers = 
 *                             {
 *                                 "*",
 *                             },
 *                         },
 *                     },
 *                     Resources = 
 *                     {
 *                         arn,
 *                     },
 *                     Sid = "__default_statement_ID",
 *                 },
 *             },
 *         }));
 *         var @default = new Aws.Sns.TopicPolicy("default", new Aws.Sns.TopicPolicyArgs
 *         {
 *             Arn = test.Arn,
 *             Policy = snsTopicPolicy.Apply(snsTopicPolicy => snsTopicPolicy.Json),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sns"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		test, err := sns.NewTopic(ctx, "test", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = sns.NewTopicPolicy(ctx, "default", &sns.TopicPolicyArgs{
 * 			Arn: test.Arn,
 * 			Policy: snsTopicPolicy.ApplyT(func(snsTopicPolicy iam.GetPolicyDocumentResult) (string, error) {
 * 				return snsTopicPolicy.Json, nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * SNS Topic Policy can be imported using the topic ARN, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:sns/topicPolicy:TopicPolicy user_updates arn:aws:sns:us-west-2:0123456789012:my-topic
 * ```
 * 
 *  
 */
@ResourceType(type="aws:sns/topicPolicy:TopicPolicy")
public class TopicPolicy extends io.pulumi.resources.CustomResource {
    /**
     * The ARN of the SNS topic
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the SNS topic
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The AWS Account ID of the SNS topic owner
     * 
     */
    @Export(name="owner", type=String.class, parameters={})
    private Output<String> owner;

    /**
     * @return The AWS Account ID of the SNS topic owner
     * 
     */
    public Output<String> getOwner() {
        return this.owner;
    }
    /**
     * The fully-formed AWS policy as JSON.
     * 
     */
    @Export(name="policy", type=String.class, parameters={})
    private Output<String> policy;

    /**
     * @return The fully-formed AWS policy as JSON.
     * 
     */
    public Output<String> getPolicy() {
        return this.policy;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TopicPolicy(String name) {
        this(name, TopicPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TopicPolicy(String name, TopicPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TopicPolicy(String name, TopicPolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:sns/topicPolicy:TopicPolicy", name, args == null ? TopicPolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private TopicPolicy(String name, Output<String> id, @Nullable TopicPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:sns/topicPolicy:TopicPolicy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TopicPolicy get(String name, Output<String> id, @Nullable TopicPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new TopicPolicy(name, id, state, options);
    }
}
