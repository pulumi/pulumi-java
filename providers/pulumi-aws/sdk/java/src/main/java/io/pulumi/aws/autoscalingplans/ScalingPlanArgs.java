// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.autoscalingplans;

import io.pulumi.aws.autoscalingplans.inputs.ScalingPlanApplicationSourceArgs;
import io.pulumi.aws.autoscalingplans.inputs.ScalingPlanScalingInstructionArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScalingPlanArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScalingPlanArgs Empty = new ScalingPlanArgs();

    /**
     * A CloudFormation stack or set of tags. You can create one scaling plan per application source.
     * 
     */
    @InputImport(name="applicationSource", required=true)
      private final Input<ScalingPlanApplicationSourceArgs> applicationSource;

    public Input<ScalingPlanApplicationSourceArgs> getApplicationSource() {
        return this.applicationSource;
    }

    /**
     * The name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The scaling instructions. More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html).
     * 
     */
    @InputImport(name="scalingInstructions", required=true)
      private final Input<List<ScalingPlanScalingInstructionArgs>> scalingInstructions;

    public Input<List<ScalingPlanScalingInstructionArgs>> getScalingInstructions() {
        return this.scalingInstructions;
    }

    public ScalingPlanArgs(
        Input<ScalingPlanApplicationSourceArgs> applicationSource,
        @Nullable Input<String> name,
        Input<List<ScalingPlanScalingInstructionArgs>> scalingInstructions) {
        this.applicationSource = Objects.requireNonNull(applicationSource, "expected parameter 'applicationSource' to be non-null");
        this.name = name;
        this.scalingInstructions = Objects.requireNonNull(scalingInstructions, "expected parameter 'scalingInstructions' to be non-null");
    }

    private ScalingPlanArgs() {
        this.applicationSource = Input.empty();
        this.name = Input.empty();
        this.scalingInstructions = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScalingPlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<ScalingPlanApplicationSourceArgs> applicationSource;
        private @Nullable Input<String> name;
        private Input<List<ScalingPlanScalingInstructionArgs>> scalingInstructions;

        public Builder() {
    	      // Empty
        }

        public Builder(ScalingPlanArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationSource = defaults.applicationSource;
    	      this.name = defaults.name;
    	      this.scalingInstructions = defaults.scalingInstructions;
        }

        public Builder applicationSource(Input<ScalingPlanApplicationSourceArgs> applicationSource) {
            this.applicationSource = Objects.requireNonNull(applicationSource);
            return this;
        }

        public Builder applicationSource(ScalingPlanApplicationSourceArgs applicationSource) {
            this.applicationSource = Input.of(Objects.requireNonNull(applicationSource));
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder scalingInstructions(Input<List<ScalingPlanScalingInstructionArgs>> scalingInstructions) {
            this.scalingInstructions = Objects.requireNonNull(scalingInstructions);
            return this;
        }

        public Builder scalingInstructions(List<ScalingPlanScalingInstructionArgs> scalingInstructions) {
            this.scalingInstructions = Input.of(Objects.requireNonNull(scalingInstructions));
            return this;
        }
        public ScalingPlanArgs build() {
            return new ScalingPlanArgs(applicationSource, name, scalingInstructions);
        }
    }
}
