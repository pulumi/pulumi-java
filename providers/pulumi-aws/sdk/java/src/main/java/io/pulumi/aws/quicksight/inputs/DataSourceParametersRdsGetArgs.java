// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.quicksight.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;


public final class DataSourceParametersRdsGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataSourceParametersRdsGetArgs Empty = new DataSourceParametersRdsGetArgs();

    /**
     * The database to which to connect.
     * 
     */
    @InputImport(name="database", required=true)
      private final Input<String> database;

    public Input<String> getDatabase() {
        return this.database;
    }

    /**
     * The instance ID to which to connect.
     * 
     */
    @InputImport(name="instanceId", required=true)
      private final Input<String> instanceId;

    public Input<String> getInstanceId() {
        return this.instanceId;
    }

    public DataSourceParametersRdsGetArgs(
        Input<String> database,
        Input<String> instanceId) {
        this.database = Objects.requireNonNull(database, "expected parameter 'database' to be non-null");
        this.instanceId = Objects.requireNonNull(instanceId, "expected parameter 'instanceId' to be non-null");
    }

    private DataSourceParametersRdsGetArgs() {
        this.database = Input.empty();
        this.instanceId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceParametersRdsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> database;
        private Input<String> instanceId;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSourceParametersRdsGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.database = defaults.database;
    	      this.instanceId = defaults.instanceId;
        }

        public Builder database(Input<String> database) {
            this.database = Objects.requireNonNull(database);
            return this;
        }

        public Builder database(String database) {
            this.database = Input.of(Objects.requireNonNull(database));
            return this;
        }

        public Builder instanceId(Input<String> instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }

        public Builder instanceId(String instanceId) {
            this.instanceId = Input.of(Objects.requireNonNull(instanceId));
            return this;
        }
        public DataSourceParametersRdsGetArgs build() {
            return new DataSourceParametersRdsGetArgs(database, instanceId);
        }
    }
}
