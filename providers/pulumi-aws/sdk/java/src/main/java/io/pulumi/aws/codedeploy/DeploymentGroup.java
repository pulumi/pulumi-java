// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codedeploy;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.codedeploy.DeploymentGroupArgs;
import io.pulumi.aws.codedeploy.inputs.DeploymentGroupState;
import io.pulumi.aws.codedeploy.outputs.DeploymentGroupAlarmConfiguration;
import io.pulumi.aws.codedeploy.outputs.DeploymentGroupAutoRollbackConfiguration;
import io.pulumi.aws.codedeploy.outputs.DeploymentGroupBlueGreenDeploymentConfig;
import io.pulumi.aws.codedeploy.outputs.DeploymentGroupDeploymentStyle;
import io.pulumi.aws.codedeploy.outputs.DeploymentGroupEc2TagFilter;
import io.pulumi.aws.codedeploy.outputs.DeploymentGroupEc2TagSet;
import io.pulumi.aws.codedeploy.outputs.DeploymentGroupEcsService;
import io.pulumi.aws.codedeploy.outputs.DeploymentGroupLoadBalancerInfo;
import io.pulumi.aws.codedeploy.outputs.DeploymentGroupOnPremisesInstanceTagFilter;
import io.pulumi.aws.codedeploy.outputs.DeploymentGroupTriggerConfiguration;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a CodeDeploy Deployment Group for a CodeDeploy Application
 * 
 * > **NOTE on blue/green deployments:** When using `green_fleet_provisioning_option` with the `COPY_AUTO_SCALING_GROUP` action, CodeDeploy will create a new ASG with a different name. This ASG is _not_ managed by this provider and will conflict with existing configuration and state. You may want to use a different approach to managing deployments that involve multiple ASG, such as `DISCOVER_EXISTING` with separate blue and green ASG.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleRole = new aws.iam.Role("exampleRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "codedeploy.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `});
 * const aWSCodeDeployRole = new aws.iam.RolePolicyAttachment("aWSCodeDeployRole", {
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole",
 *     role: exampleRole.name,
 * });
 * const exampleApplication = new aws.codedeploy.Application("exampleApplication", {});
 * const exampleTopic = new aws.sns.Topic("exampleTopic", {});
 * const exampleDeploymentGroup = new aws.codedeploy.DeploymentGroup("exampleDeploymentGroup", {
 *     appName: exampleApplication.name,
 *     deploymentGroupName: "example-group",
 *     serviceRoleArn: exampleRole.arn,
 *     ec2TagSets: [{
 *         ec2TagFilters: [
 *             {
 *                 key: "filterkey1",
 *                 type: "KEY_AND_VALUE",
 *                 value: "filtervalue",
 *             },
 *             {
 *                 key: "filterkey2",
 *                 type: "KEY_AND_VALUE",
 *                 value: "filtervalue",
 *             },
 *         ],
 *     }],
 *     triggerConfigurations: [{
 *         triggerEvents: ["DeploymentFailure"],
 *         triggerName: "example-trigger",
 *         triggerTargetArn: exampleTopic.arn,
 *     }],
 *     autoRollbackConfiguration: {
 *         enabled: true,
 *         events: ["DEPLOYMENT_FAILURE"],
 *     },
 *     alarmConfiguration: {
 *         alarms: ["my-alarm-name"],
 *         enabled: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_role = aws.iam.Role("exampleRole", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "codedeploy.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * """)
 * a_ws_code_deploy_role = aws.iam.RolePolicyAttachment("aWSCodeDeployRole",
 *     policy_arn="arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole",
 *     role=example_role.name)
 * example_application = aws.codedeploy.Application("exampleApplication")
 * example_topic = aws.sns.Topic("exampleTopic")
 * example_deployment_group = aws.codedeploy.DeploymentGroup("exampleDeploymentGroup",
 *     app_name=example_application.name,
 *     deployment_group_name="example-group",
 *     service_role_arn=example_role.arn,
 *     ec2_tag_sets=[aws.codedeploy.DeploymentGroupEc2TagSetArgs(
 *         ec2_tag_filters=[
 *             aws.codedeploy.DeploymentGroupEc2TagSetEc2TagFilterArgs(
 *                 key="filterkey1",
 *                 type="KEY_AND_VALUE",
 *                 value="filtervalue",
 *             ),
 *             aws.codedeploy.DeploymentGroupEc2TagSetEc2TagFilterArgs(
 *                 key="filterkey2",
 *                 type="KEY_AND_VALUE",
 *                 value="filtervalue",
 *             ),
 *         ],
 *     )],
 *     trigger_configurations=[aws.codedeploy.DeploymentGroupTriggerConfigurationArgs(
 *         trigger_events=["DeploymentFailure"],
 *         trigger_name="example-trigger",
 *         trigger_target_arn=example_topic.arn,
 *     )],
 *     auto_rollback_configuration=aws.codedeploy.DeploymentGroupAutoRollbackConfigurationArgs(
 *         enabled=True,
 *         events=["DEPLOYMENT_FAILURE"],
 *     ),
 *     alarm_configuration=aws.codedeploy.DeploymentGroupAlarmConfigurationArgs(
 *         alarms=["my-alarm-name"],
 *         enabled=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleRole = new Aws.Iam.Role("exampleRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Sid"": """",
 *       ""Effect"": ""Allow"",
 *       ""Principal"": {
 *         ""Service"": ""codedeploy.amazonaws.com""
 *       },
 *       ""Action"": ""sts:AssumeRole""
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var aWSCodeDeployRole = new Aws.Iam.RolePolicyAttachment("aWSCodeDeployRole", new Aws.Iam.RolePolicyAttachmentArgs
 *         {
 *             PolicyArn = "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole",
 *             Role = exampleRole.Name,
 *         });
 *         var exampleApplication = new Aws.CodeDeploy.Application("exampleApplication", new Aws.CodeDeploy.ApplicationArgs
 *         {
 *         });
 *         var exampleTopic = new Aws.Sns.Topic("exampleTopic", new Aws.Sns.TopicArgs
 *         {
 *         });
 *         var exampleDeploymentGroup = new Aws.CodeDeploy.DeploymentGroup("exampleDeploymentGroup", new Aws.CodeDeploy.DeploymentGroupArgs
 *         {
 *             AppName = exampleApplication.Name,
 *             DeploymentGroupName = "example-group",
 *             ServiceRoleArn = exampleRole.Arn,
 *             Ec2TagSets = 
 *             {
 *                 new Aws.CodeDeploy.Inputs.DeploymentGroupEc2TagSetArgs
 *                 {
 *                     Ec2TagFilters = 
 *                     {
 *                         new Aws.CodeDeploy.Inputs.DeploymentGroupEc2TagSetEc2TagFilterArgs
 *                         {
 *                             Key = "filterkey1",
 *                             Type = "KEY_AND_VALUE",
 *                             Value = "filtervalue",
 *                         },
 *                         new Aws.CodeDeploy.Inputs.DeploymentGroupEc2TagSetEc2TagFilterArgs
 *                         {
 *                             Key = "filterkey2",
 *                             Type = "KEY_AND_VALUE",
 *                             Value = "filtervalue",
 *                         },
 *                     },
 *                 },
 *             },
 *             TriggerConfigurations = 
 *             {
 *                 new Aws.CodeDeploy.Inputs.DeploymentGroupTriggerConfigurationArgs
 *                 {
 *                     TriggerEvents = 
 *                     {
 *                         "DeploymentFailure",
 *                     },
 *                     TriggerName = "example-trigger",
 *                     TriggerTargetArn = exampleTopic.Arn,
 *                 },
 *             },
 *             AutoRollbackConfiguration = new Aws.CodeDeploy.Inputs.DeploymentGroupAutoRollbackConfigurationArgs
 *             {
 *                 Enabled = true,
 *                 Events = 
 *                 {
 *                     "DEPLOYMENT_FAILURE",
 *                 },
 *             },
 *             AlarmConfiguration = new Aws.CodeDeploy.Inputs.DeploymentGroupAlarmConfigurationArgs
 *             {
 *                 Alarms = 
 *                 {
 *                     "my-alarm-name",
 *                 },
 *                 Enabled = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codedeploy"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sns"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleRole, err := iam.NewRole(ctx, "exampleRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Sid\": \"\",\n", "      \"Effect\": \"Allow\",\n", "      \"Principal\": {\n", "        \"Service\": \"codedeploy.amazonaws.com\"\n", "      },\n", "      \"Action\": \"sts:AssumeRole\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicyAttachment(ctx, "aWSCodeDeployRole", &iam.RolePolicyAttachmentArgs{
 * 			PolicyArn: pulumi.String("arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"),
 * 			Role:      exampleRole.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleApplication, err := codedeploy.NewApplication(ctx, "exampleApplication", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleTopic, err := sns.NewTopic(ctx, "exampleTopic", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = codedeploy.NewDeploymentGroup(ctx, "exampleDeploymentGroup", &codedeploy.DeploymentGroupArgs{
 * 			AppName:             exampleApplication.Name,
 * 			DeploymentGroupName: pulumi.String("example-group"),
 * 			ServiceRoleArn:      exampleRole.Arn,
 * 			Ec2TagSets: codedeploy.DeploymentGroupEc2TagSetArray{
 * 				&codedeploy.DeploymentGroupEc2TagSetArgs{
 * 					Ec2TagFilters: codedeploy.DeploymentGroupEc2TagSetEc2TagFilterArray{
 * 						&codedeploy.DeploymentGroupEc2TagSetEc2TagFilterArgs{
 * 							Key:   pulumi.String("filterkey1"),
 * 							Type:  pulumi.String("KEY_AND_VALUE"),
 * 							Value: pulumi.String("filtervalue"),
 * 						},
 * 						&codedeploy.DeploymentGroupEc2TagSetEc2TagFilterArgs{
 * 							Key:   pulumi.String("filterkey2"),
 * 							Type:  pulumi.String("KEY_AND_VALUE"),
 * 							Value: pulumi.String("filtervalue"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			TriggerConfigurations: codedeploy.DeploymentGroupTriggerConfigurationArray{
 * 				&codedeploy.DeploymentGroupTriggerConfigurationArgs{
 * 					TriggerEvents: pulumi.StringArray{
 * 						pulumi.String("DeploymentFailure"),
 * 					},
 * 					TriggerName:      pulumi.String("example-trigger"),
 * 					TriggerTargetArn: exampleTopic.Arn,
 * 				},
 * 			},
 * 			AutoRollbackConfiguration: &codedeploy.DeploymentGroupAutoRollbackConfigurationArgs{
 * 				Enabled: pulumi.Bool(true),
 * 				Events: pulumi.StringArray{
 * 					pulumi.String("DEPLOYMENT_FAILURE"),
 * 				},
 * 			},
 * 			AlarmConfiguration: &codedeploy.DeploymentGroupAlarmConfigurationArgs{
 * 				Alarms: pulumi.StringArray{
 * 					pulumi.String("my-alarm-name"),
 * 				},
 * 				Enabled: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Blue Green Deployments with ECS
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleApplication = new aws.codedeploy.Application("exampleApplication", {computePlatform: "ECS"});
 * const exampleDeploymentGroup = new aws.codedeploy.DeploymentGroup("exampleDeploymentGroup", {
 *     appName: exampleApplication.name,
 *     deploymentConfigName: "CodeDeployDefault.ECSAllAtOnce",
 *     deploymentGroupName: "example",
 *     serviceRoleArn: aws_iam_role.example.arn,
 *     autoRollbackConfiguration: {
 *         enabled: true,
 *         events: ["DEPLOYMENT_FAILURE"],
 *     },
 *     blueGreenDeploymentConfig: {
 *         deploymentReadyOption: {
 *             actionOnTimeout: "CONTINUE_DEPLOYMENT",
 *         },
 *         terminateBlueInstancesOnDeploymentSuccess: {
 *             action: "TERMINATE",
 *             terminationWaitTimeInMinutes: 5,
 *         },
 *     },
 *     deploymentStyle: {
 *         deploymentOption: "WITH_TRAFFIC_CONTROL",
 *         deploymentType: "BLUE_GREEN",
 *     },
 *     ecsService: {
 *         clusterName: aws_ecs_cluster.example.name,
 *         serviceName: aws_ecs_service.example.name,
 *     },
 *     loadBalancerInfo: {
 *         targetGroupPairInfo: {
 *             prodTrafficRoute: {
 *                 listenerArns: [aws_lb_listener.example.arn],
 *             },
 *             targetGroups: [
 *                 {
 *                     name: aws_lb_target_group.blue.name,
 *                 },
 *                 {
 *                     name: aws_lb_target_group.green.name,
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_application = aws.codedeploy.Application("exampleApplication", compute_platform="ECS")
 * example_deployment_group = aws.codedeploy.DeploymentGroup("exampleDeploymentGroup",
 *     app_name=example_application.name,
 *     deployment_config_name="CodeDeployDefault.ECSAllAtOnce",
 *     deployment_group_name="example",
 *     service_role_arn=aws_iam_role["example"]["arn"],
 *     auto_rollback_configuration=aws.codedeploy.DeploymentGroupAutoRollbackConfigurationArgs(
 *         enabled=True,
 *         events=["DEPLOYMENT_FAILURE"],
 *     ),
 *     blue_green_deployment_config=aws.codedeploy.DeploymentGroupBlueGreenDeploymentConfigArgs(
 *         deployment_ready_option=aws.codedeploy.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs(
 *             action_on_timeout="CONTINUE_DEPLOYMENT",
 *         ),
 *         terminate_blue_instances_on_deployment_success=aws.codedeploy.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs(
 *             action="TERMINATE",
 *             termination_wait_time_in_minutes=5,
 *         ),
 *     ),
 *     deployment_style=aws.codedeploy.DeploymentGroupDeploymentStyleArgs(
 *         deployment_option="WITH_TRAFFIC_CONTROL",
 *         deployment_type="BLUE_GREEN",
 *     ),
 *     ecs_service=aws.codedeploy.DeploymentGroupEcsServiceArgs(
 *         cluster_name=aws_ecs_cluster["example"]["name"],
 *         service_name=aws_ecs_service["example"]["name"],
 *     ),
 *     load_balancer_info=aws.codedeploy.DeploymentGroupLoadBalancerInfoArgs(
 *         target_group_pair_info=aws.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs(
 *             prod_traffic_route=aws.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs(
 *                 listener_arns=[aws_lb_listener["example"]["arn"]],
 *             ),
 *             target_groups=[
 *                 aws.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs(
 *                     name=aws_lb_target_group["blue"]["name"],
 *                 ),
 *                 aws.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs(
 *                     name=aws_lb_target_group["green"]["name"],
 *                 ),
 *             ],
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleApplication = new Aws.CodeDeploy.Application("exampleApplication", new Aws.CodeDeploy.ApplicationArgs
 *         {
 *             ComputePlatform = "ECS",
 *         });
 *         var exampleDeploymentGroup = new Aws.CodeDeploy.DeploymentGroup("exampleDeploymentGroup", new Aws.CodeDeploy.DeploymentGroupArgs
 *         {
 *             AppName = exampleApplication.Name,
 *             DeploymentConfigName = "CodeDeployDefault.ECSAllAtOnce",
 *             DeploymentGroupName = "example",
 *             ServiceRoleArn = aws_iam_role.Example.Arn,
 *             AutoRollbackConfiguration = new Aws.CodeDeploy.Inputs.DeploymentGroupAutoRollbackConfigurationArgs
 *             {
 *                 Enabled = true,
 *                 Events = 
 *                 {
 *                     "DEPLOYMENT_FAILURE",
 *                 },
 *             },
 *             BlueGreenDeploymentConfig = new Aws.CodeDeploy.Inputs.DeploymentGroupBlueGreenDeploymentConfigArgs
 *             {
 *                 DeploymentReadyOption = new Aws.CodeDeploy.Inputs.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs
 *                 {
 *                     ActionOnTimeout = "CONTINUE_DEPLOYMENT",
 *                 },
 *                 TerminateBlueInstancesOnDeploymentSuccess = new Aws.CodeDeploy.Inputs.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs
 *                 {
 *                     Action = "TERMINATE",
 *                     TerminationWaitTimeInMinutes = 5,
 *                 },
 *             },
 *             DeploymentStyle = new Aws.CodeDeploy.Inputs.DeploymentGroupDeploymentStyleArgs
 *             {
 *                 DeploymentOption = "WITH_TRAFFIC_CONTROL",
 *                 DeploymentType = "BLUE_GREEN",
 *             },
 *             EcsService = new Aws.CodeDeploy.Inputs.DeploymentGroupEcsServiceArgs
 *             {
 *                 ClusterName = aws_ecs_cluster.Example.Name,
 *                 ServiceName = aws_ecs_service.Example.Name,
 *             },
 *             LoadBalancerInfo = new Aws.CodeDeploy.Inputs.DeploymentGroupLoadBalancerInfoArgs
 *             {
 *                 TargetGroupPairInfo = new Aws.CodeDeploy.Inputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs
 *                 {
 *                     ProdTrafficRoute = new Aws.CodeDeploy.Inputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs
 *                     {
 *                         ListenerArns = 
 *                         {
 *                             aws_lb_listener.Example.Arn,
 *                         },
 *                     },
 *                     TargetGroups = 
 *                     {
 *                         new Aws.CodeDeploy.Inputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs
 *                         {
 *                             Name = aws_lb_target_group.Blue.Name,
 *                         },
 *                         new Aws.CodeDeploy.Inputs.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs
 *                         {
 *                             Name = aws_lb_target_group.Green.Name,
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codedeploy"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleApplication, err := codedeploy.NewApplication(ctx, "exampleApplication", &codedeploy.ApplicationArgs{
 * 			ComputePlatform: pulumi.String("ECS"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = codedeploy.NewDeploymentGroup(ctx, "exampleDeploymentGroup", &codedeploy.DeploymentGroupArgs{
 * 			AppName:              exampleApplication.Name,
 * 			DeploymentConfigName: pulumi.String("CodeDeployDefault.ECSAllAtOnce"),
 * 			DeploymentGroupName:  pulumi.String("example"),
 * 			ServiceRoleArn:       pulumi.Any(aws_iam_role.Example.Arn),
 * 			AutoRollbackConfiguration: &codedeploy.DeploymentGroupAutoRollbackConfigurationArgs{
 * 				Enabled: pulumi.Bool(true),
 * 				Events: pulumi.StringArray{
 * 					pulumi.String("DEPLOYMENT_FAILURE"),
 * 				},
 * 			},
 * 			BlueGreenDeploymentConfig: &codedeploy.DeploymentGroupBlueGreenDeploymentConfigArgs{
 * 				DeploymentReadyOption: &codedeploy.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs{
 * 					ActionOnTimeout: pulumi.String("CONTINUE_DEPLOYMENT"),
 * 				},
 * 				TerminateBlueInstancesOnDeploymentSuccess: &codedeploy.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs{
 * 					Action:                       pulumi.String("TERMINATE"),
 * 					TerminationWaitTimeInMinutes: pulumi.Int(5),
 * 				},
 * 			},
 * 			DeploymentStyle: &codedeploy.DeploymentGroupDeploymentStyleArgs{
 * 				DeploymentOption: pulumi.String("WITH_TRAFFIC_CONTROL"),
 * 				DeploymentType:   pulumi.String("BLUE_GREEN"),
 * 			},
 * 			EcsService: &codedeploy.DeploymentGroupEcsServiceArgs{
 * 				ClusterName: pulumi.Any(aws_ecs_cluster.Example.Name),
 * 				ServiceName: pulumi.Any(aws_ecs_service.Example.Name),
 * 			},
 * 			LoadBalancerInfo: &codedeploy.DeploymentGroupLoadBalancerInfoArgs{
 * 				TargetGroupPairInfo: &codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs{
 * 					ProdTrafficRoute: &codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs{
 * 						ListenerArns: pulumi.StringArray{
 * 							pulumi.Any(aws_lb_listener.Example.Arn),
 * 						},
 * 					},
 * 					TargetGroups: codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArray{
 * 						&codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs{
 * 							Name: pulumi.Any(aws_lb_target_group.Blue.Name),
 * 						},
 * 						&codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs{
 * 							Name: pulumi.Any(aws_lb_target_group.Green.Name),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Blue Green Deployments with Servers and Classic ELB
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleApplication = new aws.codedeploy.Application("exampleApplication", {});
 * const exampleDeploymentGroup = new aws.codedeploy.DeploymentGroup("exampleDeploymentGroup", {
 *     appName: exampleApplication.name,
 *     deploymentGroupName: "example-group",
 *     serviceRoleArn: aws_iam_role.example.arn,
 *     deploymentStyle: {
 *         deploymentOption: "WITH_TRAFFIC_CONTROL",
 *         deploymentType: "BLUE_GREEN",
 *     },
 *     loadBalancerInfo: {
 *         elbInfos: [{
 *             name: aws_elb.example.name,
 *         }],
 *     },
 *     blueGreenDeploymentConfig: {
 *         deploymentReadyOption: {
 *             actionOnTimeout: "STOP_DEPLOYMENT",
 *             waitTimeInMinutes: 60,
 *         },
 *         greenFleetProvisioningOption: {
 *             action: "DISCOVER_EXISTING",
 *         },
 *         terminateBlueInstancesOnDeploymentSuccess: {
 *             action: "KEEP_ALIVE",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_application = aws.codedeploy.Application("exampleApplication")
 * example_deployment_group = aws.codedeploy.DeploymentGroup("exampleDeploymentGroup",
 *     app_name=example_application.name,
 *     deployment_group_name="example-group",
 *     service_role_arn=aws_iam_role["example"]["arn"],
 *     deployment_style=aws.codedeploy.DeploymentGroupDeploymentStyleArgs(
 *         deployment_option="WITH_TRAFFIC_CONTROL",
 *         deployment_type="BLUE_GREEN",
 *     ),
 *     load_balancer_info=aws.codedeploy.DeploymentGroupLoadBalancerInfoArgs(
 *         elb_infos=[aws.codedeploy.DeploymentGroupLoadBalancerInfoElbInfoArgs(
 *             name=aws_elb["example"]["name"],
 *         )],
 *     ),
 *     blue_green_deployment_config=aws.codedeploy.DeploymentGroupBlueGreenDeploymentConfigArgs(
 *         deployment_ready_option=aws.codedeploy.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs(
 *             action_on_timeout="STOP_DEPLOYMENT",
 *             wait_time_in_minutes=60,
 *         ),
 *         green_fleet_provisioning_option=aws.codedeploy.DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs(
 *             action="DISCOVER_EXISTING",
 *         ),
 *         terminate_blue_instances_on_deployment_success=aws.codedeploy.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs(
 *             action="KEEP_ALIVE",
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleApplication = new Aws.CodeDeploy.Application("exampleApplication", new Aws.CodeDeploy.ApplicationArgs
 *         {
 *         });
 *         var exampleDeploymentGroup = new Aws.CodeDeploy.DeploymentGroup("exampleDeploymentGroup", new Aws.CodeDeploy.DeploymentGroupArgs
 *         {
 *             AppName = exampleApplication.Name,
 *             DeploymentGroupName = "example-group",
 *             ServiceRoleArn = aws_iam_role.Example.Arn,
 *             DeploymentStyle = new Aws.CodeDeploy.Inputs.DeploymentGroupDeploymentStyleArgs
 *             {
 *                 DeploymentOption = "WITH_TRAFFIC_CONTROL",
 *                 DeploymentType = "BLUE_GREEN",
 *             },
 *             LoadBalancerInfo = new Aws.CodeDeploy.Inputs.DeploymentGroupLoadBalancerInfoArgs
 *             {
 *                 ElbInfos = 
 *                 {
 *                     new Aws.CodeDeploy.Inputs.DeploymentGroupLoadBalancerInfoElbInfoArgs
 *                     {
 *                         Name = aws_elb.Example.Name,
 *                     },
 *                 },
 *             },
 *             BlueGreenDeploymentConfig = new Aws.CodeDeploy.Inputs.DeploymentGroupBlueGreenDeploymentConfigArgs
 *             {
 *                 DeploymentReadyOption = new Aws.CodeDeploy.Inputs.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs
 *                 {
 *                     ActionOnTimeout = "STOP_DEPLOYMENT",
 *                     WaitTimeInMinutes = 60,
 *                 },
 *                 GreenFleetProvisioningOption = new Aws.CodeDeploy.Inputs.DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs
 *                 {
 *                     Action = "DISCOVER_EXISTING",
 *                 },
 *                 TerminateBlueInstancesOnDeploymentSuccess = new Aws.CodeDeploy.Inputs.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs
 *                 {
 *                     Action = "KEEP_ALIVE",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codedeploy"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleApplication, err := codedeploy.NewApplication(ctx, "exampleApplication", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = codedeploy.NewDeploymentGroup(ctx, "exampleDeploymentGroup", &codedeploy.DeploymentGroupArgs{
 * 			AppName:             exampleApplication.Name,
 * 			DeploymentGroupName: pulumi.String("example-group"),
 * 			ServiceRoleArn:      pulumi.Any(aws_iam_role.Example.Arn),
 * 			DeploymentStyle: &codedeploy.DeploymentGroupDeploymentStyleArgs{
 * 				DeploymentOption: pulumi.String("WITH_TRAFFIC_CONTROL"),
 * 				DeploymentType:   pulumi.String("BLUE_GREEN"),
 * 			},
 * 			LoadBalancerInfo: &codedeploy.DeploymentGroupLoadBalancerInfoArgs{
 * 				ElbInfos: codedeploy.DeploymentGroupLoadBalancerInfoElbInfoArray{
 * 					&codedeploy.DeploymentGroupLoadBalancerInfoElbInfoArgs{
 * 						Name: pulumi.Any(aws_elb.Example.Name),
 * 					},
 * 				},
 * 			},
 * 			BlueGreenDeploymentConfig: &codedeploy.DeploymentGroupBlueGreenDeploymentConfigArgs{
 * 				DeploymentReadyOption: &codedeploy.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs{
 * 					ActionOnTimeout:   pulumi.String("STOP_DEPLOYMENT"),
 * 					WaitTimeInMinutes: pulumi.Int(60),
 * 				},
 * 				GreenFleetProvisioningOption: &codedeploy.DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs{
 * 					Action: pulumi.String("DISCOVER_EXISTING"),
 * 				},
 * 				TerminateBlueInstancesOnDeploymentSuccess: &codedeploy.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs{
 * 					Action: pulumi.String("KEEP_ALIVE"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * CodeDeploy Deployment Groups can be imported by their `app_name`, a colon, and `deployment_group_name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:codedeploy/deploymentGroup:DeploymentGroup example my-application:my-deployment-group
 * ```
 * 
 *  [1]http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html 
 */
@ResourceType(type="aws:codedeploy/deploymentGroup:DeploymentGroup")
public class DeploymentGroup extends io.pulumi.resources.CustomResource {
    /**
     * Configuration block of alarms associated with the deployment group (documented below).
     * 
     */
    @Export(name="alarmConfiguration", type=DeploymentGroupAlarmConfiguration.class, parameters={})
    private Output</* @Nullable */ DeploymentGroupAlarmConfiguration> alarmConfiguration;

    /**
     * @return Configuration block of alarms associated with the deployment group (documented below).
     * 
     */
    public Output</* @Nullable */ DeploymentGroupAlarmConfiguration> getAlarmConfiguration() {
        return this.alarmConfiguration;
    }
    /**
     * The name of the application.
     * 
     */
    @Export(name="appName", type=String.class, parameters={})
    private Output<String> appName;

    /**
     * @return The name of the application.
     * 
     */
    public Output<String> getAppName() {
        return this.appName;
    }
    /**
     * The ARN of the CodeDeploy deployment group.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the CodeDeploy deployment group.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
     * 
     */
    @Export(name="autoRollbackConfiguration", type=DeploymentGroupAutoRollbackConfiguration.class, parameters={})
    private Output</* @Nullable */ DeploymentGroupAutoRollbackConfiguration> autoRollbackConfiguration;

    /**
     * @return Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
     * 
     */
    public Output</* @Nullable */ DeploymentGroupAutoRollbackConfiguration> getAutoRollbackConfiguration() {
        return this.autoRollbackConfiguration;
    }
    /**
     * Autoscaling groups associated with the deployment group.
     * 
     */
    @Export(name="autoscalingGroups", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> autoscalingGroups;

    /**
     * @return Autoscaling groups associated with the deployment group.
     * 
     */
    public Output</* @Nullable */ List<String>> getAutoscalingGroups() {
        return this.autoscalingGroups;
    }
    /**
     * Configuration block of the blue/green deployment options for a deployment group (documented below).
     * 
     */
    @Export(name="blueGreenDeploymentConfig", type=DeploymentGroupBlueGreenDeploymentConfig.class, parameters={})
    private Output<DeploymentGroupBlueGreenDeploymentConfig> blueGreenDeploymentConfig;

    /**
     * @return Configuration block of the blue/green deployment options for a deployment group (documented below).
     * 
     */
    public Output<DeploymentGroupBlueGreenDeploymentConfig> getBlueGreenDeploymentConfig() {
        return this.blueGreenDeploymentConfig;
    }
    /**
     * The destination platform type for the deployment.
     * 
     */
    @Export(name="computePlatform", type=String.class, parameters={})
    private Output<String> computePlatform;

    /**
     * @return The destination platform type for the deployment.
     * 
     */
    public Output<String> getComputePlatform() {
        return this.computePlatform;
    }
    /**
     * The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
     * 
     */
    @Export(name="deploymentConfigName", type=String.class, parameters={})
    private Output</* @Nullable */ String> deploymentConfigName;

    /**
     * @return The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
     * 
     */
    public Output</* @Nullable */ String> getDeploymentConfigName() {
        return this.deploymentConfigName;
    }
    /**
     * The ID of the CodeDeploy deployment group.
     * 
     */
    @Export(name="deploymentGroupId", type=String.class, parameters={})
    private Output<String> deploymentGroupId;

    /**
     * @return The ID of the CodeDeploy deployment group.
     * 
     */
    public Output<String> getDeploymentGroupId() {
        return this.deploymentGroupId;
    }
    /**
     * The name of the deployment group.
     * 
     */
    @Export(name="deploymentGroupName", type=String.class, parameters={})
    private Output<String> deploymentGroupName;

    /**
     * @return The name of the deployment group.
     * 
     */
    public Output<String> getDeploymentGroupName() {
        return this.deploymentGroupName;
    }
    /**
     * Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
     * 
     */
    @Export(name="deploymentStyle", type=DeploymentGroupDeploymentStyle.class, parameters={})
    private Output</* @Nullable */ DeploymentGroupDeploymentStyle> deploymentStyle;

    /**
     * @return Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
     * 
     */
    public Output</* @Nullable */ DeploymentGroupDeploymentStyle> getDeploymentStyle() {
        return this.deploymentStyle;
    }
    /**
     * Tag filters associated with the deployment group. See the AWS docs for details.
     * 
     */
    @Export(name="ec2TagFilters", type=List.class, parameters={DeploymentGroupEc2TagFilter.class})
    private Output</* @Nullable */ List<DeploymentGroupEc2TagFilter>> ec2TagFilters;

    /**
     * @return Tag filters associated with the deployment group. See the AWS docs for details.
     * 
     */
    public Output</* @Nullable */ List<DeploymentGroupEc2TagFilter>> getEc2TagFilters() {
        return this.ec2TagFilters;
    }
    /**
     * Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
     * 
     */
    @Export(name="ec2TagSets", type=List.class, parameters={DeploymentGroupEc2TagSet.class})
    private Output</* @Nullable */ List<DeploymentGroupEc2TagSet>> ec2TagSets;

    /**
     * @return Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
     * 
     */
    public Output</* @Nullable */ List<DeploymentGroupEc2TagSet>> getEc2TagSets() {
        return this.ec2TagSets;
    }
    /**
     * Configuration block(s) of the ECS services for a deployment group (documented below).
     * 
     */
    @Export(name="ecsService", type=DeploymentGroupEcsService.class, parameters={})
    private Output</* @Nullable */ DeploymentGroupEcsService> ecsService;

    /**
     * @return Configuration block(s) of the ECS services for a deployment group (documented below).
     * 
     */
    public Output</* @Nullable */ DeploymentGroupEcsService> getEcsService() {
        return this.ecsService;
    }
    /**
     * Single configuration block of the load balancer to use in a blue/green deployment (documented below).
     * 
     */
    @Export(name="loadBalancerInfo", type=DeploymentGroupLoadBalancerInfo.class, parameters={})
    private Output</* @Nullable */ DeploymentGroupLoadBalancerInfo> loadBalancerInfo;

    /**
     * @return Single configuration block of the load balancer to use in a blue/green deployment (documented below).
     * 
     */
    public Output</* @Nullable */ DeploymentGroupLoadBalancerInfo> getLoadBalancerInfo() {
        return this.loadBalancerInfo;
    }
    /**
     * On premise tag filters associated with the group. See the AWS docs for details.
     * 
     */
    @Export(name="onPremisesInstanceTagFilters", type=List.class, parameters={DeploymentGroupOnPremisesInstanceTagFilter.class})
    private Output</* @Nullable */ List<DeploymentGroupOnPremisesInstanceTagFilter>> onPremisesInstanceTagFilters;

    /**
     * @return On premise tag filters associated with the group. See the AWS docs for details.
     * 
     */
    public Output</* @Nullable */ List<DeploymentGroupOnPremisesInstanceTagFilter>> getOnPremisesInstanceTagFilters() {
        return this.onPremisesInstanceTagFilters;
    }
    /**
     * The service role ARN that allows deployments.
     * 
     */
    @Export(name="serviceRoleArn", type=String.class, parameters={})
    private Output<String> serviceRoleArn;

    /**
     * @return The service role ARN that allows deployments.
     * 
     */
    public Output<String> getServiceRoleArn() {
        return this.serviceRoleArn;
    }
    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * Configuration block(s) of the triggers for the deployment group (documented below).
     * 
     */
    @Export(name="triggerConfigurations", type=List.class, parameters={DeploymentGroupTriggerConfiguration.class})
    private Output</* @Nullable */ List<DeploymentGroupTriggerConfiguration>> triggerConfigurations;

    /**
     * @return Configuration block(s) of the triggers for the deployment group (documented below).
     * 
     */
    public Output</* @Nullable */ List<DeploymentGroupTriggerConfiguration>> getTriggerConfigurations() {
        return this.triggerConfigurations;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DeploymentGroup(String name) {
        this(name, DeploymentGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DeploymentGroup(String name, DeploymentGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DeploymentGroup(String name, DeploymentGroupArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codedeploy/deploymentGroup:DeploymentGroup", name, args == null ? DeploymentGroupArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private DeploymentGroup(String name, Output<String> id, @Nullable DeploymentGroupState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codedeploy/deploymentGroup:DeploymentGroup", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DeploymentGroup get(String name, Output<String> id, @Nullable DeploymentGroupState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new DeploymentGroup(name, id, state, options);
    }
}
