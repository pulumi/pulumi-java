// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apprunner;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * Name of the connection.
     * 
     */
    @InputImport(name="connectionName", required=true)
      private final Input<String> connectionName;

    public Input<String> getConnectionName() {
        return this.connectionName;
    }

    /**
     * The source repository provider. Valid values: `GITHUB`.
     * 
     */
    @InputImport(name="providerType", required=true)
      private final Input<String> providerType;

    public Input<String> getProviderType() {
        return this.providerType;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ConnectionArgs(
        Input<String> connectionName,
        Input<String> providerType,
        @Nullable Input<Map<String,String>> tags) {
        this.connectionName = Objects.requireNonNull(connectionName, "expected parameter 'connectionName' to be non-null");
        this.providerType = Objects.requireNonNull(providerType, "expected parameter 'providerType' to be non-null");
        this.tags = tags;
    }

    private ConnectionArgs() {
        this.connectionName = Input.empty();
        this.providerType = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> connectionName;
        private Input<String> providerType;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionName = defaults.connectionName;
    	      this.providerType = defaults.providerType;
    	      this.tags = defaults.tags;
        }

        public Builder setConnectionName(Input<String> connectionName) {
            this.connectionName = Objects.requireNonNull(connectionName);
            return this;
        }

        public Builder setConnectionName(String connectionName) {
            this.connectionName = Input.of(Objects.requireNonNull(connectionName));
            return this;
        }

        public Builder setProviderType(Input<String> providerType) {
            this.providerType = Objects.requireNonNull(providerType);
            return this;
        }

        public Builder setProviderType(String providerType) {
            this.providerType = Input.of(Objects.requireNonNull(providerType));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public ConnectionArgs build() {
            return new ConnectionArgs(connectionName, providerType, tags);
        }
    }
}
