// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.memorydb.inputs;

import io.pulumi.aws.memorydb.inputs.ClusterClusterEndpointGetArgs;
import io.pulumi.aws.memorydb.inputs.ClusterShardGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterState extends io.pulumi.resources.ResourceArgs {

    public static final ClusterState Empty = new ClusterState();

    /**
     * The name of the Access Control List to associate with the cluster.
     * 
     */
    @InputImport(name="aclName")
      private final @Nullable Output<String> aclName;

    public Output<String> getAclName() {
        return this.aclName == null ? Output.empty() : this.aclName;
    }

    /**
     * The ARN of the cluster.
     * * `cluster_endpoint`
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * When set to `true`, the cluster will automatically receive minor engine version upgrades after launch. Defaults to `true`.
     * 
     */
    @InputImport(name="autoMinorVersionUpgrade")
      private final @Nullable Output<Boolean> autoMinorVersionUpgrade;

    public Output<Boolean> getAutoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade == null ? Output.empty() : this.autoMinorVersionUpgrade;
    }

    @InputImport(name="clusterEndpoints")
      private final @Nullable Output<List<ClusterClusterEndpointGetArgs>> clusterEndpoints;

    public Output<List<ClusterClusterEndpointGetArgs>> getClusterEndpoints() {
        return this.clusterEndpoints == null ? Output.empty() : this.clusterEndpoints;
    }

    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Patch version number of the Redis engine used by the cluster.
     * 
     */
    @InputImport(name="enginePatchVersion")
      private final @Nullable Output<String> enginePatchVersion;

    public Output<String> getEnginePatchVersion() {
        return this.enginePatchVersion == null ? Output.empty() : this.enginePatchVersion;
    }

    /**
     * Version number of the Redis engine to be used for the cluster. Downgrades are not supported.
     * 
     */
    @InputImport(name="engineVersion")
      private final @Nullable Output<String> engineVersion;

    public Output<String> getEngineVersion() {
        return this.engineVersion == null ? Output.empty() : this.engineVersion;
    }

    /**
     * Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
     * 
     */
    @InputImport(name="finalSnapshotName")
      private final @Nullable Output<String> finalSnapshotName;

    public Output<String> getFinalSnapshotName() {
        return this.finalSnapshotName == null ? Output.empty() : this.finalSnapshotName;
    }

    /**
     * ARN of the KMS key used to encrypt the cluster at rest.
     * 
     */
    @InputImport(name="kmsKeyArn")
      private final @Nullable Output<String> kmsKeyArn;

    public Output<String> getKmsKeyArn() {
        return this.kmsKeyArn == null ? Output.empty() : this.kmsKeyArn;
    }

    /**
     * Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:23:00-mon:01:30`.
     * 
     */
    @InputImport(name="maintenanceWindow")
      private final @Nullable Output<String> maintenanceWindow;

    public Output<String> getMaintenanceWindow() {
        return this.maintenanceWindow == null ? Output.empty() : this.maintenanceWindow;
    }

    /**
     * Name of this node.
     * * `endpoint`
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @InputImport(name="namePrefix")
      private final @Nullable Output<String> namePrefix;

    public Output<String> getNamePrefix() {
        return this.namePrefix == null ? Output.empty() : this.namePrefix;
    }

    /**
     * The compute and memory capacity of the nodes in the cluster. See AWS documentation on [supported node types](https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.supportedtypes.html) as well as [vertical scaling](https://docs.aws.amazon.com/memorydb/latest/devguide/cluster-vertical-scaling.html).
     * 
     */
    @InputImport(name="nodeType")
      private final @Nullable Output<String> nodeType;

    public Output<String> getNodeType() {
        return this.nodeType == null ? Output.empty() : this.nodeType;
    }

    /**
     * The number of replicas to apply to each shard, up to a maximum of 5. Defaults to `1` (i.e. 2 nodes per shard).
     * 
     */
    @InputImport(name="numReplicasPerShard")
      private final @Nullable Output<Integer> numReplicasPerShard;

    public Output<Integer> getNumReplicasPerShard() {
        return this.numReplicasPerShard == null ? Output.empty() : this.numReplicasPerShard;
    }

    /**
     * The number of shards in the cluster. Defaults to `1`.
     * 
     */
    @InputImport(name="numShards")
      private final @Nullable Output<Integer> numShards;

    public Output<Integer> getNumShards() {
        return this.numShards == null ? Output.empty() : this.numShards;
    }

    /**
     * The name of the parameter group associated with the cluster.
     * 
     */
    @InputImport(name="parameterGroupName")
      private final @Nullable Output<String> parameterGroupName;

    public Output<String> getParameterGroupName() {
        return this.parameterGroupName == null ? Output.empty() : this.parameterGroupName;
    }

    /**
     * The port number on which each of the nodes accepts connections. Defaults to `6379`.
     * 
     */
    @InputImport(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    /**
     * Set of VPC Security Group ID-s to associate with this cluster.
     * 
     */
    @InputImport(name="securityGroupIds")
      private final @Nullable Output<List<String>> securityGroupIds;

    public Output<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds == null ? Output.empty() : this.securityGroupIds;
    }

    /**
     * Set of shards in this cluster.
     * 
     */
    @InputImport(name="shards")
      private final @Nullable Output<List<ClusterShardGetArgs>> shards;

    public Output<List<ClusterShardGetArgs>> getShards() {
        return this.shards == null ? Output.empty() : this.shards;
    }

    /**
     * List of ARN-s that uniquely identify RDB snapshot files stored in S3. The snapshot files will be used to populate the new cluster. Object names in the ARN-s cannot contain any commas.
     * 
     */
    @InputImport(name="snapshotArns")
      private final @Nullable Output<String> snapshotArns;

    public Output<String> getSnapshotArns() {
        return this.snapshotArns == null ? Output.empty() : this.snapshotArns;
    }

    /**
     * The name of a snapshot from which to restore data into the new cluster.
     * 
     */
    @InputImport(name="snapshotName")
      private final @Nullable Output<String> snapshotName;

    public Output<String> getSnapshotName() {
        return this.snapshotName == null ? Output.empty() : this.snapshotName;
    }

    /**
     * The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled. Defaults to `0`.
     * 
     */
    @InputImport(name="snapshotRetentionLimit")
      private final @Nullable Output<Integer> snapshotRetentionLimit;

    public Output<Integer> getSnapshotRetentionLimit() {
        return this.snapshotRetentionLimit == null ? Output.empty() : this.snapshotRetentionLimit;
    }

    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
     * 
     */
    @InputImport(name="snapshotWindow")
      private final @Nullable Output<String> snapshotWindow;

    public Output<String> getSnapshotWindow() {
        return this.snapshotWindow == null ? Output.empty() : this.snapshotWindow;
    }

    /**
     * ARN of the SNS topic to which cluster notifications are sent.
     * 
     */
    @InputImport(name="snsTopicArn")
      private final @Nullable Output<String> snsTopicArn;

    public Output<String> getSnsTopicArn() {
        return this.snsTopicArn == null ? Output.empty() : this.snsTopicArn;
    }

    /**
     * The name of the subnet group to be used for the cluster. Defaults to a subnet group consisting of default VPC subnets.
     * 
     */
    @InputImport(name="subnetGroupName")
      private final @Nullable Output<String> subnetGroupName;

    public Output<String> getSubnetGroupName() {
        return this.subnetGroupName == null ? Output.empty() : this.subnetGroupName;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * A flag to enable in-transit encryption on the cluster. When set to `false`, the `acl_name` must be `open-access`. Defaults to `true`.
     * 
     */
    @InputImport(name="tlsEnabled")
      private final @Nullable Output<Boolean> tlsEnabled;

    public Output<Boolean> getTlsEnabled() {
        return this.tlsEnabled == null ? Output.empty() : this.tlsEnabled;
    }

    public ClusterState(
        @Nullable Output<String> aclName,
        @Nullable Output<String> arn,
        @Nullable Output<Boolean> autoMinorVersionUpgrade,
        @Nullable Output<List<ClusterClusterEndpointGetArgs>> clusterEndpoints,
        @Nullable Output<String> description,
        @Nullable Output<String> enginePatchVersion,
        @Nullable Output<String> engineVersion,
        @Nullable Output<String> finalSnapshotName,
        @Nullable Output<String> kmsKeyArn,
        @Nullable Output<String> maintenanceWindow,
        @Nullable Output<String> name,
        @Nullable Output<String> namePrefix,
        @Nullable Output<String> nodeType,
        @Nullable Output<Integer> numReplicasPerShard,
        @Nullable Output<Integer> numShards,
        @Nullable Output<String> parameterGroupName,
        @Nullable Output<Integer> port,
        @Nullable Output<List<String>> securityGroupIds,
        @Nullable Output<List<ClusterShardGetArgs>> shards,
        @Nullable Output<String> snapshotArns,
        @Nullable Output<String> snapshotName,
        @Nullable Output<Integer> snapshotRetentionLimit,
        @Nullable Output<String> snapshotWindow,
        @Nullable Output<String> snsTopicArn,
        @Nullable Output<String> subnetGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<Boolean> tlsEnabled) {
        this.aclName = aclName;
        this.arn = arn;
        this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
        this.clusterEndpoints = clusterEndpoints;
        this.description = description;
        this.enginePatchVersion = enginePatchVersion;
        this.engineVersion = engineVersion;
        this.finalSnapshotName = finalSnapshotName;
        this.kmsKeyArn = kmsKeyArn;
        this.maintenanceWindow = maintenanceWindow;
        this.name = name;
        this.namePrefix = namePrefix;
        this.nodeType = nodeType;
        this.numReplicasPerShard = numReplicasPerShard;
        this.numShards = numShards;
        this.parameterGroupName = parameterGroupName;
        this.port = port;
        this.securityGroupIds = securityGroupIds;
        this.shards = shards;
        this.snapshotArns = snapshotArns;
        this.snapshotName = snapshotName;
        this.snapshotRetentionLimit = snapshotRetentionLimit;
        this.snapshotWindow = snapshotWindow;
        this.snsTopicArn = snsTopicArn;
        this.subnetGroupName = subnetGroupName;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.tlsEnabled = tlsEnabled;
    }

    private ClusterState() {
        this.aclName = Output.empty();
        this.arn = Output.empty();
        this.autoMinorVersionUpgrade = Output.empty();
        this.clusterEndpoints = Output.empty();
        this.description = Output.empty();
        this.enginePatchVersion = Output.empty();
        this.engineVersion = Output.empty();
        this.finalSnapshotName = Output.empty();
        this.kmsKeyArn = Output.empty();
        this.maintenanceWindow = Output.empty();
        this.name = Output.empty();
        this.namePrefix = Output.empty();
        this.nodeType = Output.empty();
        this.numReplicasPerShard = Output.empty();
        this.numShards = Output.empty();
        this.parameterGroupName = Output.empty();
        this.port = Output.empty();
        this.securityGroupIds = Output.empty();
        this.shards = Output.empty();
        this.snapshotArns = Output.empty();
        this.snapshotName = Output.empty();
        this.snapshotRetentionLimit = Output.empty();
        this.snapshotWindow = Output.empty();
        this.snsTopicArn = Output.empty();
        this.subnetGroupName = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.tlsEnabled = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> aclName;
        private @Nullable Output<String> arn;
        private @Nullable Output<Boolean> autoMinorVersionUpgrade;
        private @Nullable Output<List<ClusterClusterEndpointGetArgs>> clusterEndpoints;
        private @Nullable Output<String> description;
        private @Nullable Output<String> enginePatchVersion;
        private @Nullable Output<String> engineVersion;
        private @Nullable Output<String> finalSnapshotName;
        private @Nullable Output<String> kmsKeyArn;
        private @Nullable Output<String> maintenanceWindow;
        private @Nullable Output<String> name;
        private @Nullable Output<String> namePrefix;
        private @Nullable Output<String> nodeType;
        private @Nullable Output<Integer> numReplicasPerShard;
        private @Nullable Output<Integer> numShards;
        private @Nullable Output<String> parameterGroupName;
        private @Nullable Output<Integer> port;
        private @Nullable Output<List<String>> securityGroupIds;
        private @Nullable Output<List<ClusterShardGetArgs>> shards;
        private @Nullable Output<String> snapshotArns;
        private @Nullable Output<String> snapshotName;
        private @Nullable Output<Integer> snapshotRetentionLimit;
        private @Nullable Output<String> snapshotWindow;
        private @Nullable Output<String> snsTopicArn;
        private @Nullable Output<String> subnetGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<Boolean> tlsEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclName = defaults.aclName;
    	      this.arn = defaults.arn;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.clusterEndpoints = defaults.clusterEndpoints;
    	      this.description = defaults.description;
    	      this.enginePatchVersion = defaults.enginePatchVersion;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotName = defaults.finalSnapshotName;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.nodeType = defaults.nodeType;
    	      this.numReplicasPerShard = defaults.numReplicasPerShard;
    	      this.numShards = defaults.numShards;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.port = defaults.port;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.shards = defaults.shards;
    	      this.snapshotArns = defaults.snapshotArns;
    	      this.snapshotName = defaults.snapshotName;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
    	      this.snsTopicArn = defaults.snsTopicArn;
    	      this.subnetGroupName = defaults.subnetGroupName;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.tlsEnabled = defaults.tlsEnabled;
        }

        public Builder aclName(@Nullable Output<String> aclName) {
            this.aclName = aclName;
            return this;
        }

        public Builder aclName(@Nullable String aclName) {
            this.aclName = Output.ofNullable(aclName);
            return this;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }

        public Builder autoMinorVersionUpgrade(@Nullable Output<Boolean> autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }

        public Builder autoMinorVersionUpgrade(@Nullable Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Output.ofNullable(autoMinorVersionUpgrade);
            return this;
        }

        public Builder clusterEndpoints(@Nullable Output<List<ClusterClusterEndpointGetArgs>> clusterEndpoints) {
            this.clusterEndpoints = clusterEndpoints;
            return this;
        }

        public Builder clusterEndpoints(@Nullable List<ClusterClusterEndpointGetArgs> clusterEndpoints) {
            this.clusterEndpoints = Output.ofNullable(clusterEndpoints);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder enginePatchVersion(@Nullable Output<String> enginePatchVersion) {
            this.enginePatchVersion = enginePatchVersion;
            return this;
        }

        public Builder enginePatchVersion(@Nullable String enginePatchVersion) {
            this.enginePatchVersion = Output.ofNullable(enginePatchVersion);
            return this;
        }

        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = Output.ofNullable(engineVersion);
            return this;
        }

        public Builder finalSnapshotName(@Nullable Output<String> finalSnapshotName) {
            this.finalSnapshotName = finalSnapshotName;
            return this;
        }

        public Builder finalSnapshotName(@Nullable String finalSnapshotName) {
            this.finalSnapshotName = Output.ofNullable(finalSnapshotName);
            return this;
        }

        public Builder kmsKeyArn(@Nullable Output<String> kmsKeyArn) {
            this.kmsKeyArn = kmsKeyArn;
            return this;
        }

        public Builder kmsKeyArn(@Nullable String kmsKeyArn) {
            this.kmsKeyArn = Output.ofNullable(kmsKeyArn);
            return this;
        }

        public Builder maintenanceWindow(@Nullable Output<String> maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder maintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = Output.ofNullable(maintenanceWindow);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }

        public Builder namePrefix(@Nullable String namePrefix) {
            this.namePrefix = Output.ofNullable(namePrefix);
            return this;
        }

        public Builder nodeType(@Nullable Output<String> nodeType) {
            this.nodeType = nodeType;
            return this;
        }

        public Builder nodeType(@Nullable String nodeType) {
            this.nodeType = Output.ofNullable(nodeType);
            return this;
        }

        public Builder numReplicasPerShard(@Nullable Output<Integer> numReplicasPerShard) {
            this.numReplicasPerShard = numReplicasPerShard;
            return this;
        }

        public Builder numReplicasPerShard(@Nullable Integer numReplicasPerShard) {
            this.numReplicasPerShard = Output.ofNullable(numReplicasPerShard);
            return this;
        }

        public Builder numShards(@Nullable Output<Integer> numShards) {
            this.numShards = numShards;
            return this;
        }

        public Builder numShards(@Nullable Integer numShards) {
            this.numShards = Output.ofNullable(numShards);
            return this;
        }

        public Builder parameterGroupName(@Nullable Output<String> parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }

        public Builder parameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = Output.ofNullable(parameterGroupName);
            return this;
        }

        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }

        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Output.ofNullable(securityGroupIds);
            return this;
        }

        public Builder shards(@Nullable Output<List<ClusterShardGetArgs>> shards) {
            this.shards = shards;
            return this;
        }

        public Builder shards(@Nullable List<ClusterShardGetArgs> shards) {
            this.shards = Output.ofNullable(shards);
            return this;
        }

        public Builder snapshotArns(@Nullable Output<String> snapshotArns) {
            this.snapshotArns = snapshotArns;
            return this;
        }

        public Builder snapshotArns(@Nullable String snapshotArns) {
            this.snapshotArns = Output.ofNullable(snapshotArns);
            return this;
        }

        public Builder snapshotName(@Nullable Output<String> snapshotName) {
            this.snapshotName = snapshotName;
            return this;
        }

        public Builder snapshotName(@Nullable String snapshotName) {
            this.snapshotName = Output.ofNullable(snapshotName);
            return this;
        }

        public Builder snapshotRetentionLimit(@Nullable Output<Integer> snapshotRetentionLimit) {
            this.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }

        public Builder snapshotRetentionLimit(@Nullable Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = Output.ofNullable(snapshotRetentionLimit);
            return this;
        }

        public Builder snapshotWindow(@Nullable Output<String> snapshotWindow) {
            this.snapshotWindow = snapshotWindow;
            return this;
        }

        public Builder snapshotWindow(@Nullable String snapshotWindow) {
            this.snapshotWindow = Output.ofNullable(snapshotWindow);
            return this;
        }

        public Builder snsTopicArn(@Nullable Output<String> snsTopicArn) {
            this.snsTopicArn = snsTopicArn;
            return this;
        }

        public Builder snsTopicArn(@Nullable String snsTopicArn) {
            this.snsTopicArn = Output.ofNullable(snsTopicArn);
            return this;
        }

        public Builder subnetGroupName(@Nullable Output<String> subnetGroupName) {
            this.subnetGroupName = subnetGroupName;
            return this;
        }

        public Builder subnetGroupName(@Nullable String subnetGroupName) {
            this.subnetGroupName = Output.ofNullable(subnetGroupName);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }

        public Builder tlsEnabled(@Nullable Output<Boolean> tlsEnabled) {
            this.tlsEnabled = tlsEnabled;
            return this;
        }

        public Builder tlsEnabled(@Nullable Boolean tlsEnabled) {
            this.tlsEnabled = Output.ofNullable(tlsEnabled);
            return this;
        }
        public ClusterState build() {
            return new ClusterState(aclName, arn, autoMinorVersionUpgrade, clusterEndpoints, description, enginePatchVersion, engineVersion, finalSnapshotName, kmsKeyArn, maintenanceWindow, name, namePrefix, nodeType, numReplicasPerShard, numShards, parameterGroupName, port, securityGroupIds, shards, snapshotArns, snapshotName, snapshotRetentionLimit, snapshotWindow, snsTopicArn, subnetGroupName, tags, tagsAll, tlsEnabled);
        }
    }
}
