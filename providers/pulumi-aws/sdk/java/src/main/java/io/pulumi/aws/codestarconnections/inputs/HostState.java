// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codestarconnections.inputs;

import io.pulumi.aws.codestarconnections.inputs.HostVpcConfigurationGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HostState extends io.pulumi.resources.ResourceArgs {

    public static final HostState Empty = new HostState();

    /**
     * The CodeStar Host ARN.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The name of the host to be created. The name must be unique in the calling AWS account.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The endpoint of the infrastructure to be represented by the host after it is created.
     * 
     */
    @InputImport(name="providerEndpoint")
    private final @Nullable Input<String> providerEndpoint;

    public Input<String> getProviderEndpoint() {
        return this.providerEndpoint == null ? Input.empty() : this.providerEndpoint;
    }

    /**
     * The name of the external provider where your third-party code repository is configured.
     * 
     */
    @InputImport(name="providerType")
    private final @Nullable Input<String> providerType;

    public Input<String> getProviderType() {
        return this.providerType == null ? Input.empty() : this.providerType;
    }

    /**
     * The CodeStar Host status. Possible values are `PENDING`, `AVAILABLE`, `VPC_CONFIG_DELETING`, `VPC_CONFIG_INITIALIZING`, and `VPC_CONFIG_FAILED_INITIALIZATION`.
     * 
     */
    @InputImport(name="status")
    private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
     * 
     */
    @InputImport(name="vpcConfiguration")
    private final @Nullable Input<HostVpcConfigurationGetArgs> vpcConfiguration;

    public Input<HostVpcConfigurationGetArgs> getVpcConfiguration() {
        return this.vpcConfiguration == null ? Input.empty() : this.vpcConfiguration;
    }

    public HostState(
        @Nullable Input<String> arn,
        @Nullable Input<String> name,
        @Nullable Input<String> providerEndpoint,
        @Nullable Input<String> providerType,
        @Nullable Input<String> status,
        @Nullable Input<HostVpcConfigurationGetArgs> vpcConfiguration) {
        this.arn = arn;
        this.name = name;
        this.providerEndpoint = providerEndpoint;
        this.providerType = providerType;
        this.status = status;
        this.vpcConfiguration = vpcConfiguration;
    }

    private HostState() {
        this.arn = Input.empty();
        this.name = Input.empty();
        this.providerEndpoint = Input.empty();
        this.providerType = Input.empty();
        this.status = Input.empty();
        this.vpcConfiguration = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HostState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> name;
        private @Nullable Input<String> providerEndpoint;
        private @Nullable Input<String> providerType;
        private @Nullable Input<String> status;
        private @Nullable Input<HostVpcConfigurationGetArgs> vpcConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(HostState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.name = defaults.name;
    	      this.providerEndpoint = defaults.providerEndpoint;
    	      this.providerType = defaults.providerType;
    	      this.status = defaults.status;
    	      this.vpcConfiguration = defaults.vpcConfiguration;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setProviderEndpoint(@Nullable Input<String> providerEndpoint) {
            this.providerEndpoint = providerEndpoint;
            return this;
        }

        public Builder setProviderEndpoint(@Nullable String providerEndpoint) {
            this.providerEndpoint = Input.ofNullable(providerEndpoint);
            return this;
        }

        public Builder setProviderType(@Nullable Input<String> providerType) {
            this.providerType = providerType;
            return this;
        }

        public Builder setProviderType(@Nullable String providerType) {
            this.providerType = Input.ofNullable(providerType);
            return this;
        }

        public Builder setStatus(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder setVpcConfiguration(@Nullable Input<HostVpcConfigurationGetArgs> vpcConfiguration) {
            this.vpcConfiguration = vpcConfiguration;
            return this;
        }

        public Builder setVpcConfiguration(@Nullable HostVpcConfigurationGetArgs vpcConfiguration) {
            this.vpcConfiguration = Input.ofNullable(vpcConfiguration);
            return this;
        }
        public HostState build() {
            return new HostState(arn, name, providerEndpoint, providerType, status, vpcConfiguration);
        }
    }
}
