// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue.inputs;

import io.pulumi.aws.glue.inputs.TriggerActionGetArgs;
import io.pulumi.aws.glue.inputs.TriggerPredicateGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TriggerState extends io.pulumi.resources.ResourceArgs {

    public static final TriggerState Empty = new TriggerState();

    /**
     * List of actions initiated by this trigger when it fires. See Actions Below.
     * 
     */
    @InputImport(name="actions")
      private final @Nullable Input<List<TriggerActionGetArgs>> actions;

    public Input<List<TriggerActionGetArgs>> getActions() {
        return this.actions == null ? Input.empty() : this.actions;
    }

    /**
     * Amazon Resource Name (ARN) of Glue Trigger
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * A description of the new trigger.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Start the trigger. Defaults to `true`.
     * 
     */
    @InputImport(name="enabled")
      private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * The name of the trigger.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
     * 
     */
    @InputImport(name="predicate")
      private final @Nullable Input<TriggerPredicateGetArgs> predicate;

    public Input<TriggerPredicateGetArgs> getPredicate() {
        return this.predicate == null ? Input.empty() : this.predicate;
    }

    /**
     * A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
     * 
     */
    @InputImport(name="schedule")
      private final @Nullable Input<String> schedule;

    public Input<String> getSchedule() {
        return this.schedule == null ? Input.empty() : this.schedule;
    }

    /**
     * Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
     * 
     */
    @InputImport(name="startOnCreation")
      private final @Nullable Input<Boolean> startOnCreation;

    public Input<Boolean> getStartOnCreation() {
        return this.startOnCreation == null ? Input.empty() : this.startOnCreation;
    }

    /**
     * The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `job_name` must also be specified. Conflicts with `crawler_state`.
     * 
     */
    @InputImport(name="state")
      private final @Nullable Input<String> state;

    public Input<String> getState() {
        return this.state == null ? Input.empty() : this.state;
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
     * 
     */
    @InputImport(name="type")
      private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
     * 
     */
    @InputImport(name="workflowName")
      private final @Nullable Input<String> workflowName;

    public Input<String> getWorkflowName() {
        return this.workflowName == null ? Input.empty() : this.workflowName;
    }

    public TriggerState(
        @Nullable Input<List<TriggerActionGetArgs>> actions,
        @Nullable Input<String> arn,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> enabled,
        @Nullable Input<String> name,
        @Nullable Input<TriggerPredicateGetArgs> predicate,
        @Nullable Input<String> schedule,
        @Nullable Input<Boolean> startOnCreation,
        @Nullable Input<String> state,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> type,
        @Nullable Input<String> workflowName) {
        this.actions = actions;
        this.arn = arn;
        this.description = description;
        this.enabled = enabled;
        this.name = name;
        this.predicate = predicate;
        this.schedule = schedule;
        this.startOnCreation = startOnCreation;
        this.state = state;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.type = type;
        this.workflowName = workflowName;
    }

    private TriggerState() {
        this.actions = Input.empty();
        this.arn = Input.empty();
        this.description = Input.empty();
        this.enabled = Input.empty();
        this.name = Input.empty();
        this.predicate = Input.empty();
        this.schedule = Input.empty();
        this.startOnCreation = Input.empty();
        this.state = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.type = Input.empty();
        this.workflowName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<TriggerActionGetArgs>> actions;
        private @Nullable Input<String> arn;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> enabled;
        private @Nullable Input<String> name;
        private @Nullable Input<TriggerPredicateGetArgs> predicate;
        private @Nullable Input<String> schedule;
        private @Nullable Input<Boolean> startOnCreation;
        private @Nullable Input<String> state;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> type;
        private @Nullable Input<String> workflowName;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.name = defaults.name;
    	      this.predicate = defaults.predicate;
    	      this.schedule = defaults.schedule;
    	      this.startOnCreation = defaults.startOnCreation;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.type = defaults.type;
    	      this.workflowName = defaults.workflowName;
        }

        public Builder actions(@Nullable Input<List<TriggerActionGetArgs>> actions) {
            this.actions = actions;
            return this;
        }

        public Builder actions(@Nullable List<TriggerActionGetArgs> actions) {
            this.actions = Input.ofNullable(actions);
            return this;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder enabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder predicate(@Nullable Input<TriggerPredicateGetArgs> predicate) {
            this.predicate = predicate;
            return this;
        }

        public Builder predicate(@Nullable TriggerPredicateGetArgs predicate) {
            this.predicate = Input.ofNullable(predicate);
            return this;
        }

        public Builder schedule(@Nullable Input<String> schedule) {
            this.schedule = schedule;
            return this;
        }

        public Builder schedule(@Nullable String schedule) {
            this.schedule = Input.ofNullable(schedule);
            return this;
        }

        public Builder startOnCreation(@Nullable Input<Boolean> startOnCreation) {
            this.startOnCreation = startOnCreation;
            return this;
        }

        public Builder startOnCreation(@Nullable Boolean startOnCreation) {
            this.startOnCreation = Input.ofNullable(startOnCreation);
            return this;
        }

        public Builder state(@Nullable Input<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(@Nullable String state) {
            this.state = Input.ofNullable(state);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder type(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder workflowName(@Nullable Input<String> workflowName) {
            this.workflowName = workflowName;
            return this;
        }

        public Builder workflowName(@Nullable String workflowName) {
            this.workflowName = Input.ofNullable(workflowName);
            return this;
        }
        public TriggerState build() {
            return new TriggerState(actions, arn, description, enabled, name, predicate, schedule, startOnCreation, state, tags, tagsAll, type, workflowName);
        }
    }
}
