// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.dms.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointS3SettingsArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointS3SettingsArgs Empty = new EndpointS3SettingsArgs();

    /**
     * S3 Bucket Object prefix.
     * 
     */
    @Import(name="bucketFolder")
      private final @Nullable Output<String> bucketFolder;

    public Output<String> getBucketFolder() {
        return this.bucketFolder == null ? Codegen.empty() : this.bucketFolder;
    }

    /**
     * S3 Bucket name.
     * 
     */
    @Import(name="bucketName")
      private final @Nullable Output<String> bucketName;

    public Output<String> getBucketName() {
        return this.bucketName == null ? Codegen.empty() : this.bucketName;
    }

    /**
     * Set to compress target files. Defaults to `NONE`. Valid values are `GZIP` and `NONE`.
     * 
     */
    @Import(name="compressionType")
      private final @Nullable Output<String> compressionType;

    public Output<String> getCompressionType() {
        return this.compressionType == null ? Codegen.empty() : this.compressionType;
    }

    /**
     * Delimiter used to separate columns in the source files. Defaults to `,`.
     * 
     */
    @Import(name="csvDelimiter")
      private final @Nullable Output<String> csvDelimiter;

    public Output<String> getCsvDelimiter() {
        return this.csvDelimiter == null ? Codegen.empty() : this.csvDelimiter;
    }

    /**
     * Delimiter used to separate rows in the source files. Defaults to `\n`.
     * 
     */
    @Import(name="csvRowDelimiter")
      private final @Nullable Output<String> csvRowDelimiter;

    public Output<String> getCsvRowDelimiter() {
        return this.csvRowDelimiter == null ? Codegen.empty() : this.csvRowDelimiter;
    }

    /**
     * The output format for the files that AWS DMS uses to create S3 objects. Defaults to `csv`. Valid values are `csv` and `parquet`.
     * 
     */
    @Import(name="dataFormat")
      private final @Nullable Output<String> dataFormat;

    public Output<String> getDataFormat() {
        return this.dataFormat == null ? Codegen.empty() : this.dataFormat;
    }

    /**
     * Partition S3 bucket folders based on transaction commit dates. Defaults to `false`.
     * 
     */
    @Import(name="datePartitionEnabled")
      private final @Nullable Output<Boolean> datePartitionEnabled;

    public Output<Boolean> getDatePartitionEnabled() {
        return this.datePartitionEnabled == null ? Codegen.empty() : this.datePartitionEnabled;
    }

    /**
     * The server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Defaults to `SSE_S3`. Valid values are `SSE_S3` and `SSE_KMS`.
     * 
     */
    @Import(name="encryptionMode")
      private final @Nullable Output<String> encryptionMode;

    public Output<String> getEncryptionMode() {
        return this.encryptionMode == null ? Codegen.empty() : this.encryptionMode;
    }

    /**
     * JSON document that describes how AWS DMS should interpret the data.
     * 
     */
    @Import(name="externalTableDefinition")
      private final @Nullable Output<String> externalTableDefinition;

    public Output<String> getExternalTableDefinition() {
        return this.externalTableDefinition == null ? Codegen.empty() : this.externalTableDefinition;
    }

    /**
     * - Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Defaults to `false`.
     * 
     */
    @Import(name="parquetTimestampInMillisecond")
      private final @Nullable Output<Boolean> parquetTimestampInMillisecond;

    public Output<Boolean> getParquetTimestampInMillisecond() {
        return this.parquetTimestampInMillisecond == null ? Codegen.empty() : this.parquetTimestampInMillisecond;
    }

    /**
     * The version of the .parquet file format. Defaults to `parquet-1-0`. Valid values are `parquet-1-0` and `parquet-2-0`.
     * 
     */
    @Import(name="parquetVersion")
      private final @Nullable Output<String> parquetVersion;

    public Output<String> getParquetVersion() {
        return this.parquetVersion == null ? Codegen.empty() : this.parquetVersion;
    }

    /**
     * If you set encryptionMode to `SSE_KMS`, set this parameter to the Amazon Resource Name (ARN) for the AWS KMS key.
     * 
     */
    @Import(name="serverSideEncryptionKmsKeyId")
      private final @Nullable Output<String> serverSideEncryptionKmsKeyId;

    public Output<String> getServerSideEncryptionKmsKeyId() {
        return this.serverSideEncryptionKmsKeyId == null ? Codegen.empty() : this.serverSideEncryptionKmsKeyId;
    }

    /**
     * Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket.
     * 
     */
    @Import(name="serviceAccessRoleArn")
      private final @Nullable Output<String> serviceAccessRoleArn;

    public Output<String> getServiceAccessRoleArn() {
        return this.serviceAccessRoleArn == null ? Codegen.empty() : this.serviceAccessRoleArn;
    }

    public EndpointS3SettingsArgs(
        @Nullable Output<String> bucketFolder,
        @Nullable Output<String> bucketName,
        @Nullable Output<String> compressionType,
        @Nullable Output<String> csvDelimiter,
        @Nullable Output<String> csvRowDelimiter,
        @Nullable Output<String> dataFormat,
        @Nullable Output<Boolean> datePartitionEnabled,
        @Nullable Output<String> encryptionMode,
        @Nullable Output<String> externalTableDefinition,
        @Nullable Output<Boolean> parquetTimestampInMillisecond,
        @Nullable Output<String> parquetVersion,
        @Nullable Output<String> serverSideEncryptionKmsKeyId,
        @Nullable Output<String> serviceAccessRoleArn) {
        this.bucketFolder = bucketFolder;
        this.bucketName = bucketName;
        this.compressionType = compressionType;
        this.csvDelimiter = csvDelimiter;
        this.csvRowDelimiter = csvRowDelimiter;
        this.dataFormat = dataFormat;
        this.datePartitionEnabled = datePartitionEnabled;
        this.encryptionMode = encryptionMode;
        this.externalTableDefinition = externalTableDefinition;
        this.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
        this.parquetVersion = parquetVersion;
        this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
        this.serviceAccessRoleArn = serviceAccessRoleArn;
    }

    private EndpointS3SettingsArgs() {
        this.bucketFolder = Codegen.empty();
        this.bucketName = Codegen.empty();
        this.compressionType = Codegen.empty();
        this.csvDelimiter = Codegen.empty();
        this.csvRowDelimiter = Codegen.empty();
        this.dataFormat = Codegen.empty();
        this.datePartitionEnabled = Codegen.empty();
        this.encryptionMode = Codegen.empty();
        this.externalTableDefinition = Codegen.empty();
        this.parquetTimestampInMillisecond = Codegen.empty();
        this.parquetVersion = Codegen.empty();
        this.serverSideEncryptionKmsKeyId = Codegen.empty();
        this.serviceAccessRoleArn = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointS3SettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> bucketFolder;
        private @Nullable Output<String> bucketName;
        private @Nullable Output<String> compressionType;
        private @Nullable Output<String> csvDelimiter;
        private @Nullable Output<String> csvRowDelimiter;
        private @Nullable Output<String> dataFormat;
        private @Nullable Output<Boolean> datePartitionEnabled;
        private @Nullable Output<String> encryptionMode;
        private @Nullable Output<String> externalTableDefinition;
        private @Nullable Output<Boolean> parquetTimestampInMillisecond;
        private @Nullable Output<String> parquetVersion;
        private @Nullable Output<String> serverSideEncryptionKmsKeyId;
        private @Nullable Output<String> serviceAccessRoleArn;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointS3SettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketFolder = defaults.bucketFolder;
    	      this.bucketName = defaults.bucketName;
    	      this.compressionType = defaults.compressionType;
    	      this.csvDelimiter = defaults.csvDelimiter;
    	      this.csvRowDelimiter = defaults.csvRowDelimiter;
    	      this.dataFormat = defaults.dataFormat;
    	      this.datePartitionEnabled = defaults.datePartitionEnabled;
    	      this.encryptionMode = defaults.encryptionMode;
    	      this.externalTableDefinition = defaults.externalTableDefinition;
    	      this.parquetTimestampInMillisecond = defaults.parquetTimestampInMillisecond;
    	      this.parquetVersion = defaults.parquetVersion;
    	      this.serverSideEncryptionKmsKeyId = defaults.serverSideEncryptionKmsKeyId;
    	      this.serviceAccessRoleArn = defaults.serviceAccessRoleArn;
        }

        public Builder bucketFolder(@Nullable Output<String> bucketFolder) {
            this.bucketFolder = bucketFolder;
            return this;
        }
        public Builder bucketFolder(@Nullable String bucketFolder) {
            this.bucketFolder = Codegen.ofNullable(bucketFolder);
            return this;
        }
        public Builder bucketName(@Nullable Output<String> bucketName) {
            this.bucketName = bucketName;
            return this;
        }
        public Builder bucketName(@Nullable String bucketName) {
            this.bucketName = Codegen.ofNullable(bucketName);
            return this;
        }
        public Builder compressionType(@Nullable Output<String> compressionType) {
            this.compressionType = compressionType;
            return this;
        }
        public Builder compressionType(@Nullable String compressionType) {
            this.compressionType = Codegen.ofNullable(compressionType);
            return this;
        }
        public Builder csvDelimiter(@Nullable Output<String> csvDelimiter) {
            this.csvDelimiter = csvDelimiter;
            return this;
        }
        public Builder csvDelimiter(@Nullable String csvDelimiter) {
            this.csvDelimiter = Codegen.ofNullable(csvDelimiter);
            return this;
        }
        public Builder csvRowDelimiter(@Nullable Output<String> csvRowDelimiter) {
            this.csvRowDelimiter = csvRowDelimiter;
            return this;
        }
        public Builder csvRowDelimiter(@Nullable String csvRowDelimiter) {
            this.csvRowDelimiter = Codegen.ofNullable(csvRowDelimiter);
            return this;
        }
        public Builder dataFormat(@Nullable Output<String> dataFormat) {
            this.dataFormat = dataFormat;
            return this;
        }
        public Builder dataFormat(@Nullable String dataFormat) {
            this.dataFormat = Codegen.ofNullable(dataFormat);
            return this;
        }
        public Builder datePartitionEnabled(@Nullable Output<Boolean> datePartitionEnabled) {
            this.datePartitionEnabled = datePartitionEnabled;
            return this;
        }
        public Builder datePartitionEnabled(@Nullable Boolean datePartitionEnabled) {
            this.datePartitionEnabled = Codegen.ofNullable(datePartitionEnabled);
            return this;
        }
        public Builder encryptionMode(@Nullable Output<String> encryptionMode) {
            this.encryptionMode = encryptionMode;
            return this;
        }
        public Builder encryptionMode(@Nullable String encryptionMode) {
            this.encryptionMode = Codegen.ofNullable(encryptionMode);
            return this;
        }
        public Builder externalTableDefinition(@Nullable Output<String> externalTableDefinition) {
            this.externalTableDefinition = externalTableDefinition;
            return this;
        }
        public Builder externalTableDefinition(@Nullable String externalTableDefinition) {
            this.externalTableDefinition = Codegen.ofNullable(externalTableDefinition);
            return this;
        }
        public Builder parquetTimestampInMillisecond(@Nullable Output<Boolean> parquetTimestampInMillisecond) {
            this.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
            return this;
        }
        public Builder parquetTimestampInMillisecond(@Nullable Boolean parquetTimestampInMillisecond) {
            this.parquetTimestampInMillisecond = Codegen.ofNullable(parquetTimestampInMillisecond);
            return this;
        }
        public Builder parquetVersion(@Nullable Output<String> parquetVersion) {
            this.parquetVersion = parquetVersion;
            return this;
        }
        public Builder parquetVersion(@Nullable String parquetVersion) {
            this.parquetVersion = Codegen.ofNullable(parquetVersion);
            return this;
        }
        public Builder serverSideEncryptionKmsKeyId(@Nullable Output<String> serverSideEncryptionKmsKeyId) {
            this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            return this;
        }
        public Builder serverSideEncryptionKmsKeyId(@Nullable String serverSideEncryptionKmsKeyId) {
            this.serverSideEncryptionKmsKeyId = Codegen.ofNullable(serverSideEncryptionKmsKeyId);
            return this;
        }
        public Builder serviceAccessRoleArn(@Nullable Output<String> serviceAccessRoleArn) {
            this.serviceAccessRoleArn = serviceAccessRoleArn;
            return this;
        }
        public Builder serviceAccessRoleArn(@Nullable String serviceAccessRoleArn) {
            this.serviceAccessRoleArn = Codegen.ofNullable(serviceAccessRoleArn);
            return this;
        }        public EndpointS3SettingsArgs build() {
            return new EndpointS3SettingsArgs(bucketFolder, bucketName, compressionType, csvDelimiter, csvRowDelimiter, dataFormat, datePartitionEnabled, encryptionMode, externalTableDefinition, parquetTimestampInMillisecond, parquetVersion, serverSideEncryptionKmsKeyId, serviceAccessRoleArn);
        }
    }
}
