// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.FleetLaunchTemplateConfigGetArgs;
import io.pulumi.aws.ec2.inputs.FleetOnDemandOptionsGetArgs;
import io.pulumi.aws.ec2.inputs.FleetSpotOptionsGetArgs;
import io.pulumi.aws.ec2.inputs.FleetTargetCapacitySpecificationGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FleetState extends io.pulumi.resources.ResourceArgs {

    public static final FleetState Empty = new FleetState();

    /**
     * Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`.
     * 
     */
    @InputImport(name="excessCapacityTerminationPolicy")
      private final @Nullable Input<String> excessCapacityTerminationPolicy;

    public Input<String> getExcessCapacityTerminationPolicy() {
        return this.excessCapacityTerminationPolicy == null ? Input.empty() : this.excessCapacityTerminationPolicy;
    }

    /**
     * Nested argument containing EC2 Launch Template configurations. Defined below.
     * 
     */
    @InputImport(name="launchTemplateConfig")
      private final @Nullable Input<FleetLaunchTemplateConfigGetArgs> launchTemplateConfig;

    public Input<FleetLaunchTemplateConfigGetArgs> getLaunchTemplateConfig() {
        return this.launchTemplateConfig == null ? Input.empty() : this.launchTemplateConfig;
    }

    /**
     * Nested argument containing On-Demand configurations. Defined below.
     * 
     */
    @InputImport(name="onDemandOptions")
      private final @Nullable Input<FleetOnDemandOptionsGetArgs> onDemandOptions;

    public Input<FleetOnDemandOptionsGetArgs> getOnDemandOptions() {
        return this.onDemandOptions == null ? Input.empty() : this.onDemandOptions;
    }

    /**
     * Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`.
     * 
     */
    @InputImport(name="replaceUnhealthyInstances")
      private final @Nullable Input<Boolean> replaceUnhealthyInstances;

    public Input<Boolean> getReplaceUnhealthyInstances() {
        return this.replaceUnhealthyInstances == null ? Input.empty() : this.replaceUnhealthyInstances;
    }

    /**
     * Nested argument containing Spot configurations. Defined below.
     * 
     */
    @InputImport(name="spotOptions")
      private final @Nullable Input<FleetSpotOptionsGetArgs> spotOptions;

    public Input<FleetSpotOptionsGetArgs> getSpotOptions() {
        return this.spotOptions == null ? Input.empty() : this.spotOptions;
    }

    /**
     * Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Nested argument containing target capacity configurations. Defined below.
     * 
     */
    @InputImport(name="targetCapacitySpecification")
      private final @Nullable Input<FleetTargetCapacitySpecificationGetArgs> targetCapacitySpecification;

    public Input<FleetTargetCapacitySpecificationGetArgs> getTargetCapacitySpecification() {
        return this.targetCapacitySpecification == null ? Input.empty() : this.targetCapacitySpecification;
    }

    /**
     * Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
     * 
     */
    @InputImport(name="terminateInstances")
      private final @Nullable Input<Boolean> terminateInstances;

    public Input<Boolean> getTerminateInstances() {
        return this.terminateInstances == null ? Input.empty() : this.terminateInstances;
    }

    /**
     * Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
     * 
     */
    @InputImport(name="terminateInstancesWithExpiration")
      private final @Nullable Input<Boolean> terminateInstancesWithExpiration;

    public Input<Boolean> getTerminateInstancesWithExpiration() {
        return this.terminateInstancesWithExpiration == null ? Input.empty() : this.terminateInstancesWithExpiration;
    }

    /**
     * The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`. Defaults to `maintain`.
     * 
     */
    @InputImport(name="type")
      private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    public FleetState(
        @Nullable Input<String> excessCapacityTerminationPolicy,
        @Nullable Input<FleetLaunchTemplateConfigGetArgs> launchTemplateConfig,
        @Nullable Input<FleetOnDemandOptionsGetArgs> onDemandOptions,
        @Nullable Input<Boolean> replaceUnhealthyInstances,
        @Nullable Input<FleetSpotOptionsGetArgs> spotOptions,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<FleetTargetCapacitySpecificationGetArgs> targetCapacitySpecification,
        @Nullable Input<Boolean> terminateInstances,
        @Nullable Input<Boolean> terminateInstancesWithExpiration,
        @Nullable Input<String> type) {
        this.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
        this.launchTemplateConfig = launchTemplateConfig;
        this.onDemandOptions = onDemandOptions;
        this.replaceUnhealthyInstances = replaceUnhealthyInstances;
        this.spotOptions = spotOptions;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.targetCapacitySpecification = targetCapacitySpecification;
        this.terminateInstances = terminateInstances;
        this.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
        this.type = type;
    }

    private FleetState() {
        this.excessCapacityTerminationPolicy = Input.empty();
        this.launchTemplateConfig = Input.empty();
        this.onDemandOptions = Input.empty();
        this.replaceUnhealthyInstances = Input.empty();
        this.spotOptions = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.targetCapacitySpecification = Input.empty();
        this.terminateInstances = Input.empty();
        this.terminateInstancesWithExpiration = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FleetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> excessCapacityTerminationPolicy;
        private @Nullable Input<FleetLaunchTemplateConfigGetArgs> launchTemplateConfig;
        private @Nullable Input<FleetOnDemandOptionsGetArgs> onDemandOptions;
        private @Nullable Input<Boolean> replaceUnhealthyInstances;
        private @Nullable Input<FleetSpotOptionsGetArgs> spotOptions;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<FleetTargetCapacitySpecificationGetArgs> targetCapacitySpecification;
        private @Nullable Input<Boolean> terminateInstances;
        private @Nullable Input<Boolean> terminateInstancesWithExpiration;
        private @Nullable Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(FleetState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excessCapacityTerminationPolicy = defaults.excessCapacityTerminationPolicy;
    	      this.launchTemplateConfig = defaults.launchTemplateConfig;
    	      this.onDemandOptions = defaults.onDemandOptions;
    	      this.replaceUnhealthyInstances = defaults.replaceUnhealthyInstances;
    	      this.spotOptions = defaults.spotOptions;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.targetCapacitySpecification = defaults.targetCapacitySpecification;
    	      this.terminateInstances = defaults.terminateInstances;
    	      this.terminateInstancesWithExpiration = defaults.terminateInstancesWithExpiration;
    	      this.type = defaults.type;
        }

        public Builder setExcessCapacityTerminationPolicy(@Nullable Input<String> excessCapacityTerminationPolicy) {
            this.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
            return this;
        }

        public Builder setExcessCapacityTerminationPolicy(@Nullable String excessCapacityTerminationPolicy) {
            this.excessCapacityTerminationPolicy = Input.ofNullable(excessCapacityTerminationPolicy);
            return this;
        }

        public Builder setLaunchTemplateConfig(@Nullable Input<FleetLaunchTemplateConfigGetArgs> launchTemplateConfig) {
            this.launchTemplateConfig = launchTemplateConfig;
            return this;
        }

        public Builder setLaunchTemplateConfig(@Nullable FleetLaunchTemplateConfigGetArgs launchTemplateConfig) {
            this.launchTemplateConfig = Input.ofNullable(launchTemplateConfig);
            return this;
        }

        public Builder setOnDemandOptions(@Nullable Input<FleetOnDemandOptionsGetArgs> onDemandOptions) {
            this.onDemandOptions = onDemandOptions;
            return this;
        }

        public Builder setOnDemandOptions(@Nullable FleetOnDemandOptionsGetArgs onDemandOptions) {
            this.onDemandOptions = Input.ofNullable(onDemandOptions);
            return this;
        }

        public Builder setReplaceUnhealthyInstances(@Nullable Input<Boolean> replaceUnhealthyInstances) {
            this.replaceUnhealthyInstances = replaceUnhealthyInstances;
            return this;
        }

        public Builder setReplaceUnhealthyInstances(@Nullable Boolean replaceUnhealthyInstances) {
            this.replaceUnhealthyInstances = Input.ofNullable(replaceUnhealthyInstances);
            return this;
        }

        public Builder setSpotOptions(@Nullable Input<FleetSpotOptionsGetArgs> spotOptions) {
            this.spotOptions = spotOptions;
            return this;
        }

        public Builder setSpotOptions(@Nullable FleetSpotOptionsGetArgs spotOptions) {
            this.spotOptions = Input.ofNullable(spotOptions);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setTargetCapacitySpecification(@Nullable Input<FleetTargetCapacitySpecificationGetArgs> targetCapacitySpecification) {
            this.targetCapacitySpecification = targetCapacitySpecification;
            return this;
        }

        public Builder setTargetCapacitySpecification(@Nullable FleetTargetCapacitySpecificationGetArgs targetCapacitySpecification) {
            this.targetCapacitySpecification = Input.ofNullable(targetCapacitySpecification);
            return this;
        }

        public Builder setTerminateInstances(@Nullable Input<Boolean> terminateInstances) {
            this.terminateInstances = terminateInstances;
            return this;
        }

        public Builder setTerminateInstances(@Nullable Boolean terminateInstances) {
            this.terminateInstances = Input.ofNullable(terminateInstances);
            return this;
        }

        public Builder setTerminateInstancesWithExpiration(@Nullable Input<Boolean> terminateInstancesWithExpiration) {
            this.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
            return this;
        }

        public Builder setTerminateInstancesWithExpiration(@Nullable Boolean terminateInstancesWithExpiration) {
            this.terminateInstancesWithExpiration = Input.ofNullable(terminateInstancesWithExpiration);
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }
        public FleetState build() {
            return new FleetState(excessCapacityTerminationPolicy, launchTemplateConfig, onDemandOptions, replaceUnhealthyInstances, spotOptions, tags, tagsAll, targetCapacitySpecification, terminateInstances, terminateInstancesWithExpiration, type);
        }
    }
}
