// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lex;

import io.pulumi.aws.lex.inputs.BotAliasConversationLogsArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BotAliasArgs extends io.pulumi.resources.ResourceArgs {

    public static final BotAliasArgs Empty = new BotAliasArgs();

    /**
     * The name of the bot.
     * 
     */
    @Import(name="botName", required=true)
      private final Output<String> botName;

    public Output<String> getBotName() {
        return this.botName;
    }

    /**
     * The name of the bot.
     * 
     */
    @Import(name="botVersion", required=true)
      private final Output<String> botVersion;

    public Output<String> getBotVersion() {
        return this.botVersion;
    }

    /**
     * The settings that determine how Amazon Lex uses conversation logs for the alias. Attributes are documented under conversation_logs.
     * 
     */
    @Import(name="conversationLogs")
      private final @Nullable Output<BotAliasConversationLogsArgs> conversationLogs;

    public Output<BotAliasConversationLogsArgs> getConversationLogs() {
        return this.conversationLogs == null ? Output.empty() : this.conversationLogs;
    }

    /**
     * A description of the alias. Must be less than or equal to 200 characters in length.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The name of the alias. The name is not case sensitive. Must be less than or equal to 100 characters in length.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    public BotAliasArgs(
        Output<String> botName,
        Output<String> botVersion,
        @Nullable Output<BotAliasConversationLogsArgs> conversationLogs,
        @Nullable Output<String> description,
        @Nullable Output<String> name) {
        this.botName = Objects.requireNonNull(botName, "expected parameter 'botName' to be non-null");
        this.botVersion = Objects.requireNonNull(botVersion, "expected parameter 'botVersion' to be non-null");
        this.conversationLogs = conversationLogs;
        this.description = description;
        this.name = name;
    }

    private BotAliasArgs() {
        this.botName = Output.empty();
        this.botVersion = Output.empty();
        this.conversationLogs = Output.empty();
        this.description = Output.empty();
        this.name = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BotAliasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> botName;
        private Output<String> botVersion;
        private @Nullable Output<BotAliasConversationLogsArgs> conversationLogs;
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(BotAliasArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.botName = defaults.botName;
    	      this.botVersion = defaults.botVersion;
    	      this.conversationLogs = defaults.conversationLogs;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
        }

        public Builder botName(Output<String> botName) {
            this.botName = Objects.requireNonNull(botName);
            return this;
        }

        public Builder botName(String botName) {
            this.botName = Output.of(Objects.requireNonNull(botName));
            return this;
        }

        public Builder botVersion(Output<String> botVersion) {
            this.botVersion = Objects.requireNonNull(botVersion);
            return this;
        }

        public Builder botVersion(String botVersion) {
            this.botVersion = Output.of(Objects.requireNonNull(botVersion));
            return this;
        }

        public Builder conversationLogs(@Nullable Output<BotAliasConversationLogsArgs> conversationLogs) {
            this.conversationLogs = conversationLogs;
            return this;
        }

        public Builder conversationLogs(@Nullable BotAliasConversationLogsArgs conversationLogs) {
            this.conversationLogs = Output.ofNullable(conversationLogs);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public BotAliasArgs build() {
            return new BotAliasArgs(botName, botVersion, conversationLogs, description, name);
        }
    }
}
