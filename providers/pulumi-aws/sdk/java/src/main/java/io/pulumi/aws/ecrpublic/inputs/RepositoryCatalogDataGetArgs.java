// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecrpublic.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RepositoryCatalogDataGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final RepositoryCatalogDataGetArgs Empty = new RepositoryCatalogDataGetArgs();

    /**
     * A detailed description of the contents of the repository. It is publicly visible in the Amazon ECR Public Gallery. The text must be in markdown format.
     * 
     */
    @Import(name="aboutText")
      private final @Nullable Output<String> aboutText;

    public Output<String> getAboutText() {
        return this.aboutText == null ? Output.empty() : this.aboutText;
    }

    /**
     * The system architecture that the images in the repository are compatible with. On the Amazon ECR Public Gallery, the following supported architectures will appear as badges on the repository and are used as search filters: `ARM`, `ARM 64`, `x86`, `x86-64`
     * 
     */
    @Import(name="architectures")
      private final @Nullable Output<List<String>> architectures;

    public Output<List<String>> getArchitectures() {
        return this.architectures == null ? Output.empty() : this.architectures;
    }

    /**
     * A short description of the contents of the repository. This text appears in both the image details and also when searching for repositories on the Amazon ECR Public Gallery.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The base64-encoded repository logo payload. (Only visible for verified accounts) Note that drift detection is disabled for this attribute.
     * 
     */
    @Import(name="logoImageBlob")
      private final @Nullable Output<String> logoImageBlob;

    public Output<String> getLogoImageBlob() {
        return this.logoImageBlob == null ? Output.empty() : this.logoImageBlob;
    }

    /**
     * The operating systems that the images in the repository are compatible with. On the Amazon ECR Public Gallery, the following supported operating systems will appear as badges on the repository and are used as search filters: `Linux`, `Windows`
     * 
     */
    @Import(name="operatingSystems")
      private final @Nullable Output<List<String>> operatingSystems;

    public Output<List<String>> getOperatingSystems() {
        return this.operatingSystems == null ? Output.empty() : this.operatingSystems;
    }

    /**
     * Detailed information on how to use the contents of the repository. It is publicly visible in the Amazon ECR Public Gallery. The usage text provides context, support information, and additional usage details for users of the repository. The text must be in markdown format.
     * 
     */
    @Import(name="usageText")
      private final @Nullable Output<String> usageText;

    public Output<String> getUsageText() {
        return this.usageText == null ? Output.empty() : this.usageText;
    }

    public RepositoryCatalogDataGetArgs(
        @Nullable Output<String> aboutText,
        @Nullable Output<List<String>> architectures,
        @Nullable Output<String> description,
        @Nullable Output<String> logoImageBlob,
        @Nullable Output<List<String>> operatingSystems,
        @Nullable Output<String> usageText) {
        this.aboutText = aboutText;
        this.architectures = architectures;
        this.description = description;
        this.logoImageBlob = logoImageBlob;
        this.operatingSystems = operatingSystems;
        this.usageText = usageText;
    }

    private RepositoryCatalogDataGetArgs() {
        this.aboutText = Output.empty();
        this.architectures = Output.empty();
        this.description = Output.empty();
        this.logoImageBlob = Output.empty();
        this.operatingSystems = Output.empty();
        this.usageText = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryCatalogDataGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> aboutText;
        private @Nullable Output<List<String>> architectures;
        private @Nullable Output<String> description;
        private @Nullable Output<String> logoImageBlob;
        private @Nullable Output<List<String>> operatingSystems;
        private @Nullable Output<String> usageText;

        public Builder() {
    	      // Empty
        }

        public Builder(RepositoryCatalogDataGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aboutText = defaults.aboutText;
    	      this.architectures = defaults.architectures;
    	      this.description = defaults.description;
    	      this.logoImageBlob = defaults.logoImageBlob;
    	      this.operatingSystems = defaults.operatingSystems;
    	      this.usageText = defaults.usageText;
        }

        public Builder aboutText(@Nullable Output<String> aboutText) {
            this.aboutText = aboutText;
            return this;
        }

        public Builder aboutText(@Nullable String aboutText) {
            this.aboutText = Output.ofNullable(aboutText);
            return this;
        }

        public Builder architectures(@Nullable Output<List<String>> architectures) {
            this.architectures = architectures;
            return this;
        }

        public Builder architectures(@Nullable List<String> architectures) {
            this.architectures = Output.ofNullable(architectures);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder logoImageBlob(@Nullable Output<String> logoImageBlob) {
            this.logoImageBlob = logoImageBlob;
            return this;
        }

        public Builder logoImageBlob(@Nullable String logoImageBlob) {
            this.logoImageBlob = Output.ofNullable(logoImageBlob);
            return this;
        }

        public Builder operatingSystems(@Nullable Output<List<String>> operatingSystems) {
            this.operatingSystems = operatingSystems;
            return this;
        }

        public Builder operatingSystems(@Nullable List<String> operatingSystems) {
            this.operatingSystems = Output.ofNullable(operatingSystems);
            return this;
        }

        public Builder usageText(@Nullable Output<String> usageText) {
            this.usageText = usageText;
            return this;
        }

        public Builder usageText(@Nullable String usageText) {
            this.usageText = Output.ofNullable(usageText);
            return this;
        }
        public RepositoryCatalogDataGetArgs build() {
            return new RepositoryCatalogDataGetArgs(aboutText, architectures, description, logoImageBlob, operatingSystems, usageText);
        }
    }
}
