// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecs;

import io.pulumi.aws.ecs.inputs.TaskSetCapacityProviderStrategyArgs;
import io.pulumi.aws.ecs.inputs.TaskSetLoadBalancerArgs;
import io.pulumi.aws.ecs.inputs.TaskSetNetworkConfigurationArgs;
import io.pulumi.aws.ecs.inputs.TaskSetScaleArgs;
import io.pulumi.aws.ecs.inputs.TaskSetServiceRegistriesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TaskSetArgs extends io.pulumi.resources.ResourceArgs {

    public static final TaskSetArgs Empty = new TaskSetArgs();

    /**
     * The capacity provider strategy to use for the service. Can be one or more.  Defined below.
     * 
     */
    @InputImport(name="capacityProviderStrategies")
      private final @Nullable Input<List<TaskSetCapacityProviderStrategyArgs>> capacityProviderStrategies;

    public Input<List<TaskSetCapacityProviderStrategyArgs>> getCapacityProviderStrategies() {
        return this.capacityProviderStrategies == null ? Input.empty() : this.capacityProviderStrategies;
    }

    /**
     * The short name or ARN of the cluster that hosts the service to create the task set in.
     * 
     */
    @InputImport(name="cluster", required=true)
      private final Input<String> cluster;

    public Input<String> getCluster() {
        return this.cluster;
    }

    /**
     * The external ID associated with the task set.
     * 
     */
    @InputImport(name="externalId")
      private final @Nullable Input<String> externalId;

    public Input<String> getExternalId() {
        return this.externalId == null ? Input.empty() : this.externalId;
    }

    @InputImport(name="forceDelete")
      private final @Nullable Input<Boolean> forceDelete;

    public Input<Boolean> getForceDelete() {
        return this.forceDelete == null ? Input.empty() : this.forceDelete;
    }

    /**
     * The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
     * 
     */
    @InputImport(name="launchType")
      private final @Nullable Input<String> launchType;

    public Input<String> getLaunchType() {
        return this.launchType == null ? Input.empty() : this.launchType;
    }

    /**
     * Details on load balancers that are used with a task set. Detailed below.
     * 
     */
    @InputImport(name="loadBalancers")
      private final @Nullable Input<List<TaskSetLoadBalancerArgs>> loadBalancers;

    public Input<List<TaskSetLoadBalancerArgs>> getLoadBalancers() {
        return this.loadBalancers == null ? Input.empty() : this.loadBalancers;
    }

    /**
     * The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
     * 
     */
    @InputImport(name="networkConfiguration")
      private final @Nullable Input<TaskSetNetworkConfigurationArgs> networkConfiguration;

    public Input<TaskSetNetworkConfigurationArgs> getNetworkConfiguration() {
        return this.networkConfiguration == null ? Input.empty() : this.networkConfiguration;
    }

    /**
     * The platform version on which to run your service. Only applicable for `launch_type` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
     * 
     */
    @InputImport(name="platformVersion")
      private final @Nullable Input<String> platformVersion;

    public Input<String> getPlatformVersion() {
        return this.platformVersion == null ? Input.empty() : this.platformVersion;
    }

    /**
     * A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
     * 
     */
    @InputImport(name="scale")
      private final @Nullable Input<TaskSetScaleArgs> scale;

    public Input<TaskSetScaleArgs> getScale() {
        return this.scale == null ? Input.empty() : this.scale;
    }

    /**
     * The short name or ARN of the ECS service.
     * 
     */
    @InputImport(name="service", required=true)
      private final Input<String> service;

    public Input<String> getService() {
        return this.service;
    }

    /**
     * The service discovery registries for the service. The maximum number of `service_registries` blocks is `1`. Detailed below.
     * 
     */
    @InputImport(name="serviceRegistries")
      private final @Nullable Input<TaskSetServiceRegistriesArgs> serviceRegistries;

    public Input<TaskSetServiceRegistriesArgs> getServiceRegistries() {
        return this.serviceRegistries == null ? Input.empty() : this.serviceRegistries;
    }

    /**
     * A map of tags to assign to the file system. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copy_tags_to_backups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
     * 
     */
    @InputImport(name="taskDefinition", required=true)
      private final Input<String> taskDefinition;

    public Input<String> getTaskDefinition() {
        return this.taskDefinition;
    }

    @InputImport(name="waitUntilStable")
      private final @Nullable Input<Boolean> waitUntilStable;

    public Input<Boolean> getWaitUntilStable() {
        return this.waitUntilStable == null ? Input.empty() : this.waitUntilStable;
    }

    /**
     * Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `Âµs`), `ms`, `s`, `m`, and `h`. Default `10m`.
     * 
     */
    @InputImport(name="waitUntilStableTimeout")
      private final @Nullable Input<String> waitUntilStableTimeout;

    public Input<String> getWaitUntilStableTimeout() {
        return this.waitUntilStableTimeout == null ? Input.empty() : this.waitUntilStableTimeout;
    }

    public TaskSetArgs(
        @Nullable Input<List<TaskSetCapacityProviderStrategyArgs>> capacityProviderStrategies,
        Input<String> cluster,
        @Nullable Input<String> externalId,
        @Nullable Input<Boolean> forceDelete,
        @Nullable Input<String> launchType,
        @Nullable Input<List<TaskSetLoadBalancerArgs>> loadBalancers,
        @Nullable Input<TaskSetNetworkConfigurationArgs> networkConfiguration,
        @Nullable Input<String> platformVersion,
        @Nullable Input<TaskSetScaleArgs> scale,
        Input<String> service,
        @Nullable Input<TaskSetServiceRegistriesArgs> serviceRegistries,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        Input<String> taskDefinition,
        @Nullable Input<Boolean> waitUntilStable,
        @Nullable Input<String> waitUntilStableTimeout) {
        this.capacityProviderStrategies = capacityProviderStrategies;
        this.cluster = Objects.requireNonNull(cluster, "expected parameter 'cluster' to be non-null");
        this.externalId = externalId;
        this.forceDelete = forceDelete;
        this.launchType = launchType;
        this.loadBalancers = loadBalancers;
        this.networkConfiguration = networkConfiguration;
        this.platformVersion = platformVersion;
        this.scale = scale;
        this.service = Objects.requireNonNull(service, "expected parameter 'service' to be non-null");
        this.serviceRegistries = serviceRegistries;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.taskDefinition = Objects.requireNonNull(taskDefinition, "expected parameter 'taskDefinition' to be non-null");
        this.waitUntilStable = waitUntilStable;
        this.waitUntilStableTimeout = waitUntilStableTimeout;
    }

    private TaskSetArgs() {
        this.capacityProviderStrategies = Input.empty();
        this.cluster = Input.empty();
        this.externalId = Input.empty();
        this.forceDelete = Input.empty();
        this.launchType = Input.empty();
        this.loadBalancers = Input.empty();
        this.networkConfiguration = Input.empty();
        this.platformVersion = Input.empty();
        this.scale = Input.empty();
        this.service = Input.empty();
        this.serviceRegistries = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.taskDefinition = Input.empty();
        this.waitUntilStable = Input.empty();
        this.waitUntilStableTimeout = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<TaskSetCapacityProviderStrategyArgs>> capacityProviderStrategies;
        private Input<String> cluster;
        private @Nullable Input<String> externalId;
        private @Nullable Input<Boolean> forceDelete;
        private @Nullable Input<String> launchType;
        private @Nullable Input<List<TaskSetLoadBalancerArgs>> loadBalancers;
        private @Nullable Input<TaskSetNetworkConfigurationArgs> networkConfiguration;
        private @Nullable Input<String> platformVersion;
        private @Nullable Input<TaskSetScaleArgs> scale;
        private Input<String> service;
        private @Nullable Input<TaskSetServiceRegistriesArgs> serviceRegistries;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private Input<String> taskDefinition;
        private @Nullable Input<Boolean> waitUntilStable;
        private @Nullable Input<String> waitUntilStableTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskSetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityProviderStrategies = defaults.capacityProviderStrategies;
    	      this.cluster = defaults.cluster;
    	      this.externalId = defaults.externalId;
    	      this.forceDelete = defaults.forceDelete;
    	      this.launchType = defaults.launchType;
    	      this.loadBalancers = defaults.loadBalancers;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.platformVersion = defaults.platformVersion;
    	      this.scale = defaults.scale;
    	      this.service = defaults.service;
    	      this.serviceRegistries = defaults.serviceRegistries;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.taskDefinition = defaults.taskDefinition;
    	      this.waitUntilStable = defaults.waitUntilStable;
    	      this.waitUntilStableTimeout = defaults.waitUntilStableTimeout;
        }

        public Builder setCapacityProviderStrategies(@Nullable Input<List<TaskSetCapacityProviderStrategyArgs>> capacityProviderStrategies) {
            this.capacityProviderStrategies = capacityProviderStrategies;
            return this;
        }

        public Builder setCapacityProviderStrategies(@Nullable List<TaskSetCapacityProviderStrategyArgs> capacityProviderStrategies) {
            this.capacityProviderStrategies = Input.ofNullable(capacityProviderStrategies);
            return this;
        }

        public Builder setCluster(Input<String> cluster) {
            this.cluster = Objects.requireNonNull(cluster);
            return this;
        }

        public Builder setCluster(String cluster) {
            this.cluster = Input.of(Objects.requireNonNull(cluster));
            return this;
        }

        public Builder setExternalId(@Nullable Input<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        public Builder setExternalId(@Nullable String externalId) {
            this.externalId = Input.ofNullable(externalId);
            return this;
        }

        public Builder setForceDelete(@Nullable Input<Boolean> forceDelete) {
            this.forceDelete = forceDelete;
            return this;
        }

        public Builder setForceDelete(@Nullable Boolean forceDelete) {
            this.forceDelete = Input.ofNullable(forceDelete);
            return this;
        }

        public Builder setLaunchType(@Nullable Input<String> launchType) {
            this.launchType = launchType;
            return this;
        }

        public Builder setLaunchType(@Nullable String launchType) {
            this.launchType = Input.ofNullable(launchType);
            return this;
        }

        public Builder setLoadBalancers(@Nullable Input<List<TaskSetLoadBalancerArgs>> loadBalancers) {
            this.loadBalancers = loadBalancers;
            return this;
        }

        public Builder setLoadBalancers(@Nullable List<TaskSetLoadBalancerArgs> loadBalancers) {
            this.loadBalancers = Input.ofNullable(loadBalancers);
            return this;
        }

        public Builder setNetworkConfiguration(@Nullable Input<TaskSetNetworkConfigurationArgs> networkConfiguration) {
            this.networkConfiguration = networkConfiguration;
            return this;
        }

        public Builder setNetworkConfiguration(@Nullable TaskSetNetworkConfigurationArgs networkConfiguration) {
            this.networkConfiguration = Input.ofNullable(networkConfiguration);
            return this;
        }

        public Builder setPlatformVersion(@Nullable Input<String> platformVersion) {
            this.platformVersion = platformVersion;
            return this;
        }

        public Builder setPlatformVersion(@Nullable String platformVersion) {
            this.platformVersion = Input.ofNullable(platformVersion);
            return this;
        }

        public Builder setScale(@Nullable Input<TaskSetScaleArgs> scale) {
            this.scale = scale;
            return this;
        }

        public Builder setScale(@Nullable TaskSetScaleArgs scale) {
            this.scale = Input.ofNullable(scale);
            return this;
        }

        public Builder setService(Input<String> service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }

        public Builder setService(String service) {
            this.service = Input.of(Objects.requireNonNull(service));
            return this;
        }

        public Builder setServiceRegistries(@Nullable Input<TaskSetServiceRegistriesArgs> serviceRegistries) {
            this.serviceRegistries = serviceRegistries;
            return this;
        }

        public Builder setServiceRegistries(@Nullable TaskSetServiceRegistriesArgs serviceRegistries) {
            this.serviceRegistries = Input.ofNullable(serviceRegistries);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setTaskDefinition(Input<String> taskDefinition) {
            this.taskDefinition = Objects.requireNonNull(taskDefinition);
            return this;
        }

        public Builder setTaskDefinition(String taskDefinition) {
            this.taskDefinition = Input.of(Objects.requireNonNull(taskDefinition));
            return this;
        }

        public Builder setWaitUntilStable(@Nullable Input<Boolean> waitUntilStable) {
            this.waitUntilStable = waitUntilStable;
            return this;
        }

        public Builder setWaitUntilStable(@Nullable Boolean waitUntilStable) {
            this.waitUntilStable = Input.ofNullable(waitUntilStable);
            return this;
        }

        public Builder setWaitUntilStableTimeout(@Nullable Input<String> waitUntilStableTimeout) {
            this.waitUntilStableTimeout = waitUntilStableTimeout;
            return this;
        }

        public Builder setWaitUntilStableTimeout(@Nullable String waitUntilStableTimeout) {
            this.waitUntilStableTimeout = Input.ofNullable(waitUntilStableTimeout);
            return this;
        }
        public TaskSetArgs build() {
            return new TaskSetArgs(capacityProviderStrategies, cluster, externalId, forceDelete, launchType, loadBalancers, networkConfiguration, platformVersion, scale, service, serviceRegistries, tags, tagsAll, taskDefinition, waitUntilStable, waitUntilStableTimeout);
        }
    }
}
