// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ssm;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.ssm.MaintenanceWindowTaskArgs;
import io.pulumi.aws.ssm.inputs.MaintenanceWindowTaskState;
import io.pulumi.aws.ssm.outputs.MaintenanceWindowTaskTarget;
import io.pulumi.aws.ssm.outputs.MaintenanceWindowTaskTaskInvocationParameters;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Provides an SSM Maintenance Window Task resource
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Automation Tasks
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.ssm.MaintenanceWindowTask("example", {
 *     maxConcurrency: 2,
 *     maxErrors: 1,
 *     priority: 1,
 *     taskArn: "AWS-RestartEC2Instance",
 *     taskType: "AUTOMATION",
 *     windowId: aws_ssm_maintenance_window.example.id,
 *     targets: [{
 *         key: "InstanceIds",
 *         values: [aws_instance.example.id],
 *     }],
 *     taskInvocationParameters: {
 *         automationParameters: {
 *             documentVersion: `$LATEST`,
 *             parameters: [{
 *                 name: "InstanceId",
 *                 values: [aws_instance.example.id],
 *             }],
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.ssm.MaintenanceWindowTask("example",
 *     max_concurrency="2",
 *     max_errors="1",
 *     priority=1,
 *     task_arn="AWS-RestartEC2Instance",
 *     task_type="AUTOMATION",
 *     window_id=aws_ssm_maintenance_window["example"]["id"],
 *     targets=[aws.ssm.MaintenanceWindowTaskTargetArgs(
 *         key="InstanceIds",
 *         values=[aws_instance["example"]["id"]],
 *     )],
 *     task_invocation_parameters=aws.ssm.MaintenanceWindowTaskTaskInvocationParametersArgs(
 *         automation_parameters=aws.ssm.MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs(
 *             document_version="$LATEST",
 *             parameters=[aws.ssm.MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs(
 *                 name="InstanceId",
 *                 values=[aws_instance["example"]["id"]],
 *             )],
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Ssm.MaintenanceWindowTask("example", new Aws.Ssm.MaintenanceWindowTaskArgs
 *         {
 *             MaxConcurrency = "2",
 *             MaxErrors = "1",
 *             Priority = 1,
 *             TaskArn = "AWS-RestartEC2Instance",
 *             TaskType = "AUTOMATION",
 *             WindowId = aws_ssm_maintenance_window.Example.Id,
 *             Targets = 
 *             {
 *                 new Aws.Ssm.Inputs.MaintenanceWindowTaskTargetArgs
 *                 {
 *                     Key = "InstanceIds",
 *                     Values = 
 *                     {
 *                         aws_instance.Example.Id,
 *                     },
 *                 },
 *             },
 *             TaskInvocationParameters = new Aws.Ssm.Inputs.MaintenanceWindowTaskTaskInvocationParametersArgs
 *             {
 *                 AutomationParameters = new Aws.Ssm.Inputs.MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs
 *                 {
 *                     DocumentVersion = "$LATEST",
 *                     Parameters = 
 *                     {
 *                         new Aws.Ssm.Inputs.MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs
 *                         {
 *                             Name = "InstanceId",
 *                             Values = 
 *                             {
 *                                 aws_instance.Example.Id,
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ssm"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ssm.NewMaintenanceWindowTask(ctx, "example", &ssm.MaintenanceWindowTaskArgs{
 * 			MaxConcurrency: pulumi.String("2"),
 * 			MaxErrors:      pulumi.String("1"),
 * 			Priority:       pulumi.Int(1),
 * 			TaskArn:        pulumi.String("AWS-RestartEC2Instance"),
 * 			TaskType:       pulumi.String("AUTOMATION"),
 * 			WindowId:       pulumi.Any(aws_ssm_maintenance_window.Example.Id),
 * 			Targets: ssm.MaintenanceWindowTaskTargetArray{
 * 				&ssm.MaintenanceWindowTaskTargetArgs{
 * 					Key: pulumi.String("InstanceIds"),
 * 					Values: pulumi.StringArray{
 * 						pulumi.Any(aws_instance.Example.Id),
 * 					},
 * 				},
 * 			},
 * 			TaskInvocationParameters: &ssm.MaintenanceWindowTaskTaskInvocationParametersArgs{
 * 				AutomationParameters: &ssm.MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs{
 * 					DocumentVersion: pulumi.String(fmt.Sprintf("%v%v", "$", "LATEST")),
 * 					Parameters: ssm.MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArray{
 * 						&ssm.MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs{
 * 							Name: pulumi.String("InstanceId"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.Any(aws_instance.Example.Id),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Run Command Tasks
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.ssm.MaintenanceWindowTask("example", {
 *     maxConcurrency: 2,
 *     maxErrors: 1,
 *     priority: 1,
 *     taskArn: "AWS-RunShellScript",
 *     taskType: "RUN_COMMAND",
 *     windowId: aws_ssm_maintenance_window.example.id,
 *     targets: [{
 *         key: "InstanceIds",
 *         values: [aws_instance.example.id],
 *     }],
 *     taskInvocationParameters: {
 *         runCommandParameters: {
 *             outputS3Bucket: aws_s3_bucket.example.bucket,
 *             outputS3KeyPrefix: "output",
 *             serviceRoleArn: aws_iam_role.example.arn,
 *             timeoutSeconds: 600,
 *             notificationConfig: {
 *                 notificationArn: aws_sns_topic.example.arn,
 *                 notificationEvents: ["All"],
 *                 notificationType: "Command",
 *             },
 *             parameters: [{
 *                 name: "commands",
 *                 values: ["date"],
 *             }],
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.ssm.MaintenanceWindowTask("example",
 *     max_concurrency="2",
 *     max_errors="1",
 *     priority=1,
 *     task_arn="AWS-RunShellScript",
 *     task_type="RUN_COMMAND",
 *     window_id=aws_ssm_maintenance_window["example"]["id"],
 *     targets=[aws.ssm.MaintenanceWindowTaskTargetArgs(
 *         key="InstanceIds",
 *         values=[aws_instance["example"]["id"]],
 *     )],
 *     task_invocation_parameters=aws.ssm.MaintenanceWindowTaskTaskInvocationParametersArgs(
 *         run_command_parameters=aws.ssm.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs(
 *             output_s3_bucket=aws_s3_bucket["example"]["bucket"],
 *             output_s3_key_prefix="output",
 *             service_role_arn=aws_iam_role["example"]["arn"],
 *             timeout_seconds=600,
 *             notification_config=aws.ssm.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs(
 *                 notification_arn=aws_sns_topic["example"]["arn"],
 *                 notification_events=["All"],
 *                 notification_type="Command",
 *             ),
 *             parameters=[aws.ssm.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs(
 *                 name="commands",
 *                 values=["date"],
 *             )],
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Ssm.MaintenanceWindowTask("example", new Aws.Ssm.MaintenanceWindowTaskArgs
 *         {
 *             MaxConcurrency = "2",
 *             MaxErrors = "1",
 *             Priority = 1,
 *             TaskArn = "AWS-RunShellScript",
 *             TaskType = "RUN_COMMAND",
 *             WindowId = aws_ssm_maintenance_window.Example.Id,
 *             Targets = 
 *             {
 *                 new Aws.Ssm.Inputs.MaintenanceWindowTaskTargetArgs
 *                 {
 *                     Key = "InstanceIds",
 *                     Values = 
 *                     {
 *                         aws_instance.Example.Id,
 *                     },
 *                 },
 *             },
 *             TaskInvocationParameters = new Aws.Ssm.Inputs.MaintenanceWindowTaskTaskInvocationParametersArgs
 *             {
 *                 RunCommandParameters = new Aws.Ssm.Inputs.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs
 *                 {
 *                     OutputS3Bucket = aws_s3_bucket.Example.Bucket,
 *                     OutputS3KeyPrefix = "output",
 *                     ServiceRoleArn = aws_iam_role.Example.Arn,
 *                     TimeoutSeconds = 600,
 *                     NotificationConfig = new Aws.Ssm.Inputs.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs
 *                     {
 *                         NotificationArn = aws_sns_topic.Example.Arn,
 *                         NotificationEvents = 
 *                         {
 *                             "All",
 *                         },
 *                         NotificationType = "Command",
 *                     },
 *                     Parameters = 
 *                     {
 *                         new Aws.Ssm.Inputs.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs
 *                         {
 *                             Name = "commands",
 *                             Values = 
 *                             {
 *                                 "date",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ssm"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ssm.NewMaintenanceWindowTask(ctx, "example", &ssm.MaintenanceWindowTaskArgs{
 * 			MaxConcurrency: pulumi.String("2"),
 * 			MaxErrors:      pulumi.String("1"),
 * 			Priority:       pulumi.Int(1),
 * 			TaskArn:        pulumi.String("AWS-RunShellScript"),
 * 			TaskType:       pulumi.String("RUN_COMMAND"),
 * 			WindowId:       pulumi.Any(aws_ssm_maintenance_window.Example.Id),
 * 			Targets: ssm.MaintenanceWindowTaskTargetArray{
 * 				&ssm.MaintenanceWindowTaskTargetArgs{
 * 					Key: pulumi.String("InstanceIds"),
 * 					Values: pulumi.StringArray{
 * 						pulumi.Any(aws_instance.Example.Id),
 * 					},
 * 				},
 * 			},
 * 			TaskInvocationParameters: &ssm.MaintenanceWindowTaskTaskInvocationParametersArgs{
 * 				RunCommandParameters: &ssm.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs{
 * 					OutputS3Bucket:    pulumi.Any(aws_s3_bucket.Example.Bucket),
 * 					OutputS3KeyPrefix: pulumi.String("output"),
 * 					ServiceRoleArn:    pulumi.Any(aws_iam_role.Example.Arn),
 * 					TimeoutSeconds:    pulumi.Int(600),
 * 					NotificationConfig: &ssm.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs{
 * 						NotificationArn: pulumi.Any(aws_sns_topic.Example.Arn),
 * 						NotificationEvents: pulumi.StringArray{
 * 							pulumi.String("All"),
 * 						},
 * 						NotificationType: pulumi.String("Command"),
 * 					},
 * 					Parameters: ssm.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArray{
 * 						&ssm.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs{
 * 							Name: pulumi.String("commands"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.String("date"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Step Function Tasks
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.ssm.MaintenanceWindowTask("example", {
 *     maxConcurrency: 2,
 *     maxErrors: 1,
 *     priority: 1,
 *     taskArn: aws_sfn_activity.example.id,
 *     taskType: "STEP_FUNCTIONS",
 *     windowId: aws_ssm_maintenance_window.example.id,
 *     targets: [{
 *         key: "InstanceIds",
 *         values: [aws_instance.example.id],
 *     }],
 *     taskInvocationParameters: {
 *         stepFunctionsParameters: {
 *             input: "{\"key1\":\"value1\"}",
 *             name: "example",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.ssm.MaintenanceWindowTask("example",
 *     max_concurrency="2",
 *     max_errors="1",
 *     priority=1,
 *     task_arn=aws_sfn_activity["example"]["id"],
 *     task_type="STEP_FUNCTIONS",
 *     window_id=aws_ssm_maintenance_window["example"]["id"],
 *     targets=[aws.ssm.MaintenanceWindowTaskTargetArgs(
 *         key="InstanceIds",
 *         values=[aws_instance["example"]["id"]],
 *     )],
 *     task_invocation_parameters=aws.ssm.MaintenanceWindowTaskTaskInvocationParametersArgs(
 *         step_functions_parameters=aws.ssm.MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs(
 *             input="{\"key1\":\"value1\"}",
 *             name="example",
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Ssm.MaintenanceWindowTask("example", new Aws.Ssm.MaintenanceWindowTaskArgs
 *         {
 *             MaxConcurrency = "2",
 *             MaxErrors = "1",
 *             Priority = 1,
 *             TaskArn = aws_sfn_activity.Example.Id,
 *             TaskType = "STEP_FUNCTIONS",
 *             WindowId = aws_ssm_maintenance_window.Example.Id,
 *             Targets = 
 *             {
 *                 new Aws.Ssm.Inputs.MaintenanceWindowTaskTargetArgs
 *                 {
 *                     Key = "InstanceIds",
 *                     Values = 
 *                     {
 *                         aws_instance.Example.Id,
 *                     },
 *                 },
 *             },
 *             TaskInvocationParameters = new Aws.Ssm.Inputs.MaintenanceWindowTaskTaskInvocationParametersArgs
 *             {
 *                 StepFunctionsParameters = new Aws.Ssm.Inputs.MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs
 *                 {
 *                     Input = "{\"key1\":\"value1\"}",
 *                     Name = "example",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ssm"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ssm.NewMaintenanceWindowTask(ctx, "example", &ssm.MaintenanceWindowTaskArgs{
 * 			MaxConcurrency: pulumi.String("2"),
 * 			MaxErrors:      pulumi.String("1"),
 * 			Priority:       pulumi.Int(1),
 * 			TaskArn:        pulumi.Any(aws_sfn_activity.Example.Id),
 * 			TaskType:       pulumi.String("STEP_FUNCTIONS"),
 * 			WindowId:       pulumi.Any(aws_ssm_maintenance_window.Example.Id),
 * 			Targets: ssm.MaintenanceWindowTaskTargetArray{
 * 				&ssm.MaintenanceWindowTaskTargetArgs{
 * 					Key: pulumi.String("InstanceIds"),
 * 					Values: pulumi.StringArray{
 * 						pulumi.Any(aws_instance.Example.Id),
 * 					},
 * 				},
 * 			},
 * 			TaskInvocationParameters: &ssm.MaintenanceWindowTaskTaskInvocationParametersArgs{
 * 				StepFunctionsParameters: &ssm.MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs{
 * 					Input: pulumi.String("{\"key1\":\"value1\"}"),
 * 					Name:  pulumi.String("example"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * AWS Maintenance Window Task can be imported using the `window_id` and `window_task_id` separated by `/`.
 * 
 * ```sh
 *  $ pulumi import aws:ssm/maintenanceWindowTask:MaintenanceWindowTask task <window_id>/<window_task_id>
 * ```
 * 
 *  
 */
@ResourceType(type="aws:ssm/maintenanceWindowTask:MaintenanceWindowTask")
public class MaintenanceWindowTask extends io.pulumi.resources.CustomResource {
    /**
     * The description of the maintenance window task.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the maintenance window task.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The maximum number of targets this task can be run for in parallel.
     * 
     */
    @Export(name="maxConcurrency", type=String.class, parameters={})
    private Output<String> maxConcurrency;

    /**
     * @return The maximum number of targets this task can be run for in parallel.
     * 
     */
    public Output<String> getMaxConcurrency() {
        return this.maxConcurrency;
    }
    /**
     * The maximum number of errors allowed before this task stops being scheduled.
     * 
     */
    @Export(name="maxErrors", type=String.class, parameters={})
    private Output<String> maxErrors;

    /**
     * @return The maximum number of errors allowed before this task stops being scheduled.
     * 
     */
    public Output<String> getMaxErrors() {
        return this.maxErrors;
    }
    /**
     * The name of the maintenance window task.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the maintenance window task.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
     * 
     */
    @Export(name="priority", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> priority;

    /**
     * @return The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
     * 
     */
    public Output</* @Nullable */ Integer> getPriority() {
        return this.priority;
    }
    /**
     * The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
     * 
     */
    @Export(name="serviceRoleArn", type=String.class, parameters={})
    private Output<String> serviceRoleArn;

    /**
     * @return The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
     * 
     */
    public Output<String> getServiceRoleArn() {
        return this.serviceRoleArn;
    }
    /**
     * The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
     * 
     */
    @Export(name="targets", type=List.class, parameters={MaintenanceWindowTaskTarget.class})
    private Output</* @Nullable */ List<MaintenanceWindowTaskTarget>> targets;

    /**
     * @return The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
     * 
     */
    public Output</* @Nullable */ List<MaintenanceWindowTaskTarget>> getTargets() {
        return this.targets;
    }
    /**
     * The ARN of the task to execute.
     * 
     */
    @Export(name="taskArn", type=String.class, parameters={})
    private Output<String> taskArn;

    /**
     * @return The ARN of the task to execute.
     * 
     */
    public Output<String> getTaskArn() {
        return this.taskArn;
    }
    /**
     * Configuration block with parameters for task execution.
     * 
     */
    @Export(name="taskInvocationParameters", type=MaintenanceWindowTaskTaskInvocationParameters.class, parameters={})
    private Output</* @Nullable */ MaintenanceWindowTaskTaskInvocationParameters> taskInvocationParameters;

    /**
     * @return Configuration block with parameters for task execution.
     * 
     */
    public Output</* @Nullable */ MaintenanceWindowTaskTaskInvocationParameters> getTaskInvocationParameters() {
        return this.taskInvocationParameters;
    }
    /**
     * The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
     * 
     */
    @Export(name="taskType", type=String.class, parameters={})
    private Output<String> taskType;

    /**
     * @return The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
     * 
     */
    public Output<String> getTaskType() {
        return this.taskType;
    }
    /**
     * The Id of the maintenance window to register the task with.
     * 
     */
    @Export(name="windowId", type=String.class, parameters={})
    private Output<String> windowId;

    /**
     * @return The Id of the maintenance window to register the task with.
     * 
     */
    public Output<String> getWindowId() {
        return this.windowId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MaintenanceWindowTask(String name) {
        this(name, MaintenanceWindowTaskArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MaintenanceWindowTask(String name, MaintenanceWindowTaskArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MaintenanceWindowTask(String name, MaintenanceWindowTaskArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", name, args == null ? MaintenanceWindowTaskArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private MaintenanceWindowTask(String name, Output<String> id, @Nullable MaintenanceWindowTaskState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MaintenanceWindowTask get(String name, Output<String> id, @Nullable MaintenanceWindowTaskState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new MaintenanceWindowTask(name, id, state, options);
    }
}
