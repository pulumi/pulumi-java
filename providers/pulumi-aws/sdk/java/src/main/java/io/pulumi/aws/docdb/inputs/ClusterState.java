// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.docdb.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterState extends io.pulumi.resources.ResourceArgs {

    public static final ClusterState Empty = new ClusterState();

    /**
     * Specifies whether any cluster modifications
     * are applied immediately, or during the next maintenance window. Default is
     * `false`.
     * 
     */
    @InputImport(name="applyImmediately")
    private final @Nullable Input<Boolean> applyImmediately;

    public Input<Boolean> getApplyImmediately() {
        return this.applyImmediately == null ? Input.empty() : this.applyImmediately;
    }

    /**
     * Amazon Resource Name (ARN) of cluster
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * A list of EC2 Availability Zones that
     * instances in the DB cluster can be created in.
     * 
     */
    @InputImport(name="availabilityZones")
    private final @Nullable Input<List<String>> availabilityZones;

    public Input<List<String>> getAvailabilityZones() {
        return this.availabilityZones == null ? Input.empty() : this.availabilityZones;
    }

    /**
     * The days to retain backups for. Default `1`
     * 
     */
    @InputImport(name="backupRetentionPeriod")
    private final @Nullable Input<Integer> backupRetentionPeriod;

    public Input<Integer> getBackupRetentionPeriod() {
        return this.backupRetentionPeriod == null ? Input.empty() : this.backupRetentionPeriod;
    }

    /**
     * The cluster identifier. If omitted, this provider will assign a random, unique identifier.
     * 
     */
    @InputImport(name="clusterIdentifier")
    private final @Nullable Input<String> clusterIdentifier;

    public Input<String> getClusterIdentifier() {
        return this.clusterIdentifier == null ? Input.empty() : this.clusterIdentifier;
    }

    /**
     * Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `cluster_identifer`.
     * 
     */
    @InputImport(name="clusterIdentifierPrefix")
    private final @Nullable Input<String> clusterIdentifierPrefix;

    public Input<String> getClusterIdentifierPrefix() {
        return this.clusterIdentifierPrefix == null ? Input.empty() : this.clusterIdentifierPrefix;
    }

    /**
     * List of DocDB Instances that are a part of this cluster
     * 
     */
    @InputImport(name="clusterMembers")
    private final @Nullable Input<List<String>> clusterMembers;

    public Input<List<String>> getClusterMembers() {
        return this.clusterMembers == null ? Input.empty() : this.clusterMembers;
    }

    /**
     * The DocDB Cluster Resource ID
     * 
     */
    @InputImport(name="clusterResourceId")
    private final @Nullable Input<String> clusterResourceId;

    public Input<String> getClusterResourceId() {
        return this.clusterResourceId == null ? Input.empty() : this.clusterResourceId;
    }

    /**
     * A cluster parameter group to associate with the cluster.
     * 
     */
    @InputImport(name="dbClusterParameterGroupName")
    private final @Nullable Input<String> dbClusterParameterGroupName;

    public Input<String> getDbClusterParameterGroupName() {
        return this.dbClusterParameterGroupName == null ? Input.empty() : this.dbClusterParameterGroupName;
    }

    /**
     * A DB subnet group to associate with this DB instance.
     * 
     */
    @InputImport(name="dbSubnetGroupName")
    private final @Nullable Input<String> dbSubnetGroupName;

    public Input<String> getDbSubnetGroupName() {
        return this.dbSubnetGroupName == null ? Input.empty() : this.dbSubnetGroupName;
    }

    /**
     * A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
     * 
     */
    @InputImport(name="deletionProtection")
    private final @Nullable Input<Boolean> deletionProtection;

    public Input<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Input.empty() : this.deletionProtection;
    }

    /**
     * List of log types to export to cloudwatch. If omitted, no logs will be exported.
     * The following log types are supported: `audit`, `profiler`.
     * 
     */
    @InputImport(name="enabledCloudwatchLogsExports")
    private final @Nullable Input<List<String>> enabledCloudwatchLogsExports;

    public Input<List<String>> getEnabledCloudwatchLogsExports() {
        return this.enabledCloudwatchLogsExports == null ? Input.empty() : this.enabledCloudwatchLogsExports;
    }

    /**
     * The DNS address of the DocDB instance
     * 
     */
    @InputImport(name="endpoint")
    private final @Nullable Input<String> endpoint;

    public Input<String> getEndpoint() {
        return this.endpoint == null ? Input.empty() : this.endpoint;
    }

    /**
     * The name of the database engine to be used for this DB cluster. Defaults to `docdb`. Valid Values: `docdb`
     * 
     */
    @InputImport(name="engine")
    private final @Nullable Input<String> engine;

    public Input<String> getEngine() {
        return this.engine == null ? Input.empty() : this.engine;
    }

    /**
     * The database engine version. Updating this argument results in an outage.
     * 
     */
    @InputImport(name="engineVersion")
    private final @Nullable Input<String> engineVersion;

    public Input<String> getEngineVersion() {
        return this.engineVersion == null ? Input.empty() : this.engineVersion;
    }

    /**
     * The name of your final DB snapshot
     * when this DB cluster is deleted. If omitted, no final snapshot will be
     * made.
     * 
     */
    @InputImport(name="finalSnapshotIdentifier")
    private final @Nullable Input<String> finalSnapshotIdentifier;

    public Input<String> getFinalSnapshotIdentifier() {
        return this.finalSnapshotIdentifier == null ? Input.empty() : this.finalSnapshotIdentifier;
    }

    /**
     * The global cluster identifier specified on `aws.docdb.GlobalCluster`.
     * 
     */
    @InputImport(name="globalClusterIdentifier")
    private final @Nullable Input<String> globalClusterIdentifier;

    public Input<String> getGlobalClusterIdentifier() {
        return this.globalClusterIdentifier == null ? Input.empty() : this.globalClusterIdentifier;
    }

    /**
     * The Route53 Hosted Zone ID of the endpoint
     * 
     */
    @InputImport(name="hostedZoneId")
    private final @Nullable Input<String> hostedZoneId;

    public Input<String> getHostedZoneId() {
        return this.hostedZoneId == null ? Input.empty() : this.hostedZoneId;
    }

    /**
     * The ARN for the KMS encryption key. When specifying `kms_key_id`, `storage_encrypted` needs to be set to true.
     * 
     */
    @InputImport(name="kmsKeyId")
    private final @Nullable Input<String> kmsKeyId;

    public Input<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Input.empty() : this.kmsKeyId;
    }

    /**
     * Password for the master DB user. Note that this may
     * show up in logs, and it will be stored in the state file. Please refer to the DocDB Naming Constraints.
     * 
     */
    @InputImport(name="masterPassword")
    private final @Nullable Input<String> masterPassword;

    public Input<String> getMasterPassword() {
        return this.masterPassword == null ? Input.empty() : this.masterPassword;
    }

    /**
     * Username for the master DB user.
     * 
     */
    @InputImport(name="masterUsername")
    private final @Nullable Input<String> masterUsername;

    public Input<String> getMasterUsername() {
        return this.masterUsername == null ? Input.empty() : this.masterUsername;
    }

    /**
     * The port on which the DB accepts connections
     * 
     */
    @InputImport(name="port")
    private final @Nullable Input<Integer> port;

    public Input<Integer> getPort() {
        return this.port == null ? Input.empty() : this.port;
    }

    /**
     * The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC
     * Default: A 30-minute window selected at random from an 8-hour block of time per regionE.g., 04:00-09:00
     * 
     */
    @InputImport(name="preferredBackupWindow")
    private final @Nullable Input<String> preferredBackupWindow;

    public Input<String> getPreferredBackupWindow() {
        return this.preferredBackupWindow == null ? Input.empty() : this.preferredBackupWindow;
    }

    /**
     * The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
     * 
     */
    @InputImport(name="preferredMaintenanceWindow")
    private final @Nullable Input<String> preferredMaintenanceWindow;

    public Input<String> getPreferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow == null ? Input.empty() : this.preferredMaintenanceWindow;
    }

    /**
     * A read-only endpoint for the DocDB cluster, automatically load-balanced across replicas
     * 
     */
    @InputImport(name="readerEndpoint")
    private final @Nullable Input<String> readerEndpoint;

    public Input<String> getReaderEndpoint() {
        return this.readerEndpoint == null ? Input.empty() : this.readerEndpoint;
    }

    /**
     * Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `final_snapshot_identifier`. Default is `false`.
     * 
     */
    @InputImport(name="skipFinalSnapshot")
    private final @Nullable Input<Boolean> skipFinalSnapshot;

    public Input<Boolean> getSkipFinalSnapshot() {
        return this.skipFinalSnapshot == null ? Input.empty() : this.skipFinalSnapshot;
    }

    /**
     * Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot.
     * 
     */
    @InputImport(name="snapshotIdentifier")
    private final @Nullable Input<String> snapshotIdentifier;

    public Input<String> getSnapshotIdentifier() {
        return this.snapshotIdentifier == null ? Input.empty() : this.snapshotIdentifier;
    }

    /**
     * Specifies whether the DB cluster is encrypted. The default is `false`.
     * 
     */
    @InputImport(name="storageEncrypted")
    private final @Nullable Input<Boolean> storageEncrypted;

    public Input<Boolean> getStorageEncrypted() {
        return this.storageEncrypted == null ? Input.empty() : this.storageEncrypted;
    }

    /**
     * A map of tags to assign to the DB cluster. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * List of VPC security groups to associate
     * with the Cluster
     * 
     */
    @InputImport(name="vpcSecurityGroupIds")
    private final @Nullable Input<List<String>> vpcSecurityGroupIds;

    public Input<List<String>> getVpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Input.empty() : this.vpcSecurityGroupIds;
    }

    public ClusterState(
        @Nullable Input<Boolean> applyImmediately,
        @Nullable Input<String> arn,
        @Nullable Input<List<String>> availabilityZones,
        @Nullable Input<Integer> backupRetentionPeriod,
        @Nullable Input<String> clusterIdentifier,
        @Nullable Input<String> clusterIdentifierPrefix,
        @Nullable Input<List<String>> clusterMembers,
        @Nullable Input<String> clusterResourceId,
        @Nullable Input<String> dbClusterParameterGroupName,
        @Nullable Input<String> dbSubnetGroupName,
        @Nullable Input<Boolean> deletionProtection,
        @Nullable Input<List<String>> enabledCloudwatchLogsExports,
        @Nullable Input<String> endpoint,
        @Nullable Input<String> engine,
        @Nullable Input<String> engineVersion,
        @Nullable Input<String> finalSnapshotIdentifier,
        @Nullable Input<String> globalClusterIdentifier,
        @Nullable Input<String> hostedZoneId,
        @Nullable Input<String> kmsKeyId,
        @Nullable Input<String> masterPassword,
        @Nullable Input<String> masterUsername,
        @Nullable Input<Integer> port,
        @Nullable Input<String> preferredBackupWindow,
        @Nullable Input<String> preferredMaintenanceWindow,
        @Nullable Input<String> readerEndpoint,
        @Nullable Input<Boolean> skipFinalSnapshot,
        @Nullable Input<String> snapshotIdentifier,
        @Nullable Input<Boolean> storageEncrypted,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<List<String>> vpcSecurityGroupIds) {
        this.applyImmediately = applyImmediately;
        this.arn = arn;
        this.availabilityZones = availabilityZones;
        this.backupRetentionPeriod = backupRetentionPeriod;
        this.clusterIdentifier = clusterIdentifier;
        this.clusterIdentifierPrefix = clusterIdentifierPrefix;
        this.clusterMembers = clusterMembers;
        this.clusterResourceId = clusterResourceId;
        this.dbClusterParameterGroupName = dbClusterParameterGroupName;
        this.dbSubnetGroupName = dbSubnetGroupName;
        this.deletionProtection = deletionProtection;
        this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
        this.endpoint = endpoint;
        this.engine = engine;
        this.engineVersion = engineVersion;
        this.finalSnapshotIdentifier = finalSnapshotIdentifier;
        this.globalClusterIdentifier = globalClusterIdentifier;
        this.hostedZoneId = hostedZoneId;
        this.kmsKeyId = kmsKeyId;
        this.masterPassword = masterPassword;
        this.masterUsername = masterUsername;
        this.port = port;
        this.preferredBackupWindow = preferredBackupWindow;
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        this.readerEndpoint = readerEndpoint;
        this.skipFinalSnapshot = skipFinalSnapshot;
        this.snapshotIdentifier = snapshotIdentifier;
        this.storageEncrypted = storageEncrypted;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    }

    private ClusterState() {
        this.applyImmediately = Input.empty();
        this.arn = Input.empty();
        this.availabilityZones = Input.empty();
        this.backupRetentionPeriod = Input.empty();
        this.clusterIdentifier = Input.empty();
        this.clusterIdentifierPrefix = Input.empty();
        this.clusterMembers = Input.empty();
        this.clusterResourceId = Input.empty();
        this.dbClusterParameterGroupName = Input.empty();
        this.dbSubnetGroupName = Input.empty();
        this.deletionProtection = Input.empty();
        this.enabledCloudwatchLogsExports = Input.empty();
        this.endpoint = Input.empty();
        this.engine = Input.empty();
        this.engineVersion = Input.empty();
        this.finalSnapshotIdentifier = Input.empty();
        this.globalClusterIdentifier = Input.empty();
        this.hostedZoneId = Input.empty();
        this.kmsKeyId = Input.empty();
        this.masterPassword = Input.empty();
        this.masterUsername = Input.empty();
        this.port = Input.empty();
        this.preferredBackupWindow = Input.empty();
        this.preferredMaintenanceWindow = Input.empty();
        this.readerEndpoint = Input.empty();
        this.skipFinalSnapshot = Input.empty();
        this.snapshotIdentifier = Input.empty();
        this.storageEncrypted = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.vpcSecurityGroupIds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> applyImmediately;
        private @Nullable Input<String> arn;
        private @Nullable Input<List<String>> availabilityZones;
        private @Nullable Input<Integer> backupRetentionPeriod;
        private @Nullable Input<String> clusterIdentifier;
        private @Nullable Input<String> clusterIdentifierPrefix;
        private @Nullable Input<List<String>> clusterMembers;
        private @Nullable Input<String> clusterResourceId;
        private @Nullable Input<String> dbClusterParameterGroupName;
        private @Nullable Input<String> dbSubnetGroupName;
        private @Nullable Input<Boolean> deletionProtection;
        private @Nullable Input<List<String>> enabledCloudwatchLogsExports;
        private @Nullable Input<String> endpoint;
        private @Nullable Input<String> engine;
        private @Nullable Input<String> engineVersion;
        private @Nullable Input<String> finalSnapshotIdentifier;
        private @Nullable Input<String> globalClusterIdentifier;
        private @Nullable Input<String> hostedZoneId;
        private @Nullable Input<String> kmsKeyId;
        private @Nullable Input<String> masterPassword;
        private @Nullable Input<String> masterUsername;
        private @Nullable Input<Integer> port;
        private @Nullable Input<String> preferredBackupWindow;
        private @Nullable Input<String> preferredMaintenanceWindow;
        private @Nullable Input<String> readerEndpoint;
        private @Nullable Input<Boolean> skipFinalSnapshot;
        private @Nullable Input<String> snapshotIdentifier;
        private @Nullable Input<Boolean> storageEncrypted;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<List<String>> vpcSecurityGroupIds;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyImmediately = defaults.applyImmediately;
    	      this.arn = defaults.arn;
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.backupRetentionPeriod = defaults.backupRetentionPeriod;
    	      this.clusterIdentifier = defaults.clusterIdentifier;
    	      this.clusterIdentifierPrefix = defaults.clusterIdentifierPrefix;
    	      this.clusterMembers = defaults.clusterMembers;
    	      this.clusterResourceId = defaults.clusterResourceId;
    	      this.dbClusterParameterGroupName = defaults.dbClusterParameterGroupName;
    	      this.dbSubnetGroupName = defaults.dbSubnetGroupName;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.enabledCloudwatchLogsExports = defaults.enabledCloudwatchLogsExports;
    	      this.endpoint = defaults.endpoint;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotIdentifier = defaults.finalSnapshotIdentifier;
    	      this.globalClusterIdentifier = defaults.globalClusterIdentifier;
    	      this.hostedZoneId = defaults.hostedZoneId;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.masterPassword = defaults.masterPassword;
    	      this.masterUsername = defaults.masterUsername;
    	      this.port = defaults.port;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.readerEndpoint = defaults.readerEndpoint;
    	      this.skipFinalSnapshot = defaults.skipFinalSnapshot;
    	      this.snapshotIdentifier = defaults.snapshotIdentifier;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        public Builder setApplyImmediately(@Nullable Input<Boolean> applyImmediately) {
            this.applyImmediately = applyImmediately;
            return this;
        }

        public Builder setApplyImmediately(@Nullable Boolean applyImmediately) {
            this.applyImmediately = Input.ofNullable(applyImmediately);
            return this;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setAvailabilityZones(@Nullable Input<List<String>> availabilityZones) {
            this.availabilityZones = availabilityZones;
            return this;
        }

        public Builder setAvailabilityZones(@Nullable List<String> availabilityZones) {
            this.availabilityZones = Input.ofNullable(availabilityZones);
            return this;
        }

        public Builder setBackupRetentionPeriod(@Nullable Input<Integer> backupRetentionPeriod) {
            this.backupRetentionPeriod = backupRetentionPeriod;
            return this;
        }

        public Builder setBackupRetentionPeriod(@Nullable Integer backupRetentionPeriod) {
            this.backupRetentionPeriod = Input.ofNullable(backupRetentionPeriod);
            return this;
        }

        public Builder setClusterIdentifier(@Nullable Input<String> clusterIdentifier) {
            this.clusterIdentifier = clusterIdentifier;
            return this;
        }

        public Builder setClusterIdentifier(@Nullable String clusterIdentifier) {
            this.clusterIdentifier = Input.ofNullable(clusterIdentifier);
            return this;
        }

        public Builder setClusterIdentifierPrefix(@Nullable Input<String> clusterIdentifierPrefix) {
            this.clusterIdentifierPrefix = clusterIdentifierPrefix;
            return this;
        }

        public Builder setClusterIdentifierPrefix(@Nullable String clusterIdentifierPrefix) {
            this.clusterIdentifierPrefix = Input.ofNullable(clusterIdentifierPrefix);
            return this;
        }

        public Builder setClusterMembers(@Nullable Input<List<String>> clusterMembers) {
            this.clusterMembers = clusterMembers;
            return this;
        }

        public Builder setClusterMembers(@Nullable List<String> clusterMembers) {
            this.clusterMembers = Input.ofNullable(clusterMembers);
            return this;
        }

        public Builder setClusterResourceId(@Nullable Input<String> clusterResourceId) {
            this.clusterResourceId = clusterResourceId;
            return this;
        }

        public Builder setClusterResourceId(@Nullable String clusterResourceId) {
            this.clusterResourceId = Input.ofNullable(clusterResourceId);
            return this;
        }

        public Builder setDbClusterParameterGroupName(@Nullable Input<String> dbClusterParameterGroupName) {
            this.dbClusterParameterGroupName = dbClusterParameterGroupName;
            return this;
        }

        public Builder setDbClusterParameterGroupName(@Nullable String dbClusterParameterGroupName) {
            this.dbClusterParameterGroupName = Input.ofNullable(dbClusterParameterGroupName);
            return this;
        }

        public Builder setDbSubnetGroupName(@Nullable Input<String> dbSubnetGroupName) {
            this.dbSubnetGroupName = dbSubnetGroupName;
            return this;
        }

        public Builder setDbSubnetGroupName(@Nullable String dbSubnetGroupName) {
            this.dbSubnetGroupName = Input.ofNullable(dbSubnetGroupName);
            return this;
        }

        public Builder setDeletionProtection(@Nullable Input<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder setDeletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Input.ofNullable(deletionProtection);
            return this;
        }

        public Builder setEnabledCloudwatchLogsExports(@Nullable Input<List<String>> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            return this;
        }

        public Builder setEnabledCloudwatchLogsExports(@Nullable List<String> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = Input.ofNullable(enabledCloudwatchLogsExports);
            return this;
        }

        public Builder setEndpoint(@Nullable Input<String> endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder setEndpoint(@Nullable String endpoint) {
            this.endpoint = Input.ofNullable(endpoint);
            return this;
        }

        public Builder setEngine(@Nullable Input<String> engine) {
            this.engine = engine;
            return this;
        }

        public Builder setEngine(@Nullable String engine) {
            this.engine = Input.ofNullable(engine);
            return this;
        }

        public Builder setEngineVersion(@Nullable Input<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder setEngineVersion(@Nullable String engineVersion) {
            this.engineVersion = Input.ofNullable(engineVersion);
            return this;
        }

        public Builder setFinalSnapshotIdentifier(@Nullable Input<String> finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = finalSnapshotIdentifier;
            return this;
        }

        public Builder setFinalSnapshotIdentifier(@Nullable String finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = Input.ofNullable(finalSnapshotIdentifier);
            return this;
        }

        public Builder setGlobalClusterIdentifier(@Nullable Input<String> globalClusterIdentifier) {
            this.globalClusterIdentifier = globalClusterIdentifier;
            return this;
        }

        public Builder setGlobalClusterIdentifier(@Nullable String globalClusterIdentifier) {
            this.globalClusterIdentifier = Input.ofNullable(globalClusterIdentifier);
            return this;
        }

        public Builder setHostedZoneId(@Nullable Input<String> hostedZoneId) {
            this.hostedZoneId = hostedZoneId;
            return this;
        }

        public Builder setHostedZoneId(@Nullable String hostedZoneId) {
            this.hostedZoneId = Input.ofNullable(hostedZoneId);
            return this;
        }

        public Builder setKmsKeyId(@Nullable Input<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder setKmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Input.ofNullable(kmsKeyId);
            return this;
        }

        public Builder setMasterPassword(@Nullable Input<String> masterPassword) {
            this.masterPassword = masterPassword;
            return this;
        }

        public Builder setMasterPassword(@Nullable String masterPassword) {
            this.masterPassword = Input.ofNullable(masterPassword);
            return this;
        }

        public Builder setMasterUsername(@Nullable Input<String> masterUsername) {
            this.masterUsername = masterUsername;
            return this;
        }

        public Builder setMasterUsername(@Nullable String masterUsername) {
            this.masterUsername = Input.ofNullable(masterUsername);
            return this;
        }

        public Builder setPort(@Nullable Input<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder setPort(@Nullable Integer port) {
            this.port = Input.ofNullable(port);
            return this;
        }

        public Builder setPreferredBackupWindow(@Nullable Input<String> preferredBackupWindow) {
            this.preferredBackupWindow = preferredBackupWindow;
            return this;
        }

        public Builder setPreferredBackupWindow(@Nullable String preferredBackupWindow) {
            this.preferredBackupWindow = Input.ofNullable(preferredBackupWindow);
            return this;
        }

        public Builder setPreferredMaintenanceWindow(@Nullable Input<String> preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }

        public Builder setPreferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Input.ofNullable(preferredMaintenanceWindow);
            return this;
        }

        public Builder setReaderEndpoint(@Nullable Input<String> readerEndpoint) {
            this.readerEndpoint = readerEndpoint;
            return this;
        }

        public Builder setReaderEndpoint(@Nullable String readerEndpoint) {
            this.readerEndpoint = Input.ofNullable(readerEndpoint);
            return this;
        }

        public Builder setSkipFinalSnapshot(@Nullable Input<Boolean> skipFinalSnapshot) {
            this.skipFinalSnapshot = skipFinalSnapshot;
            return this;
        }

        public Builder setSkipFinalSnapshot(@Nullable Boolean skipFinalSnapshot) {
            this.skipFinalSnapshot = Input.ofNullable(skipFinalSnapshot);
            return this;
        }

        public Builder setSnapshotIdentifier(@Nullable Input<String> snapshotIdentifier) {
            this.snapshotIdentifier = snapshotIdentifier;
            return this;
        }

        public Builder setSnapshotIdentifier(@Nullable String snapshotIdentifier) {
            this.snapshotIdentifier = Input.ofNullable(snapshotIdentifier);
            return this;
        }

        public Builder setStorageEncrypted(@Nullable Input<Boolean> storageEncrypted) {
            this.storageEncrypted = storageEncrypted;
            return this;
        }

        public Builder setStorageEncrypted(@Nullable Boolean storageEncrypted) {
            this.storageEncrypted = Input.ofNullable(storageEncrypted);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setVpcSecurityGroupIds(@Nullable Input<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        public Builder setVpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Input.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public ClusterState build() {
            return new ClusterState(applyImmediately, arn, availabilityZones, backupRetentionPeriod, clusterIdentifier, clusterIdentifierPrefix, clusterMembers, clusterResourceId, dbClusterParameterGroupName, dbSubnetGroupName, deletionProtection, enabledCloudwatchLogsExports, endpoint, engine, engineVersion, finalSnapshotIdentifier, globalClusterIdentifier, hostedZoneId, kmsKeyId, masterPassword, masterUsername, port, preferredBackupWindow, preferredMaintenanceWindow, readerEndpoint, skipFinalSnapshot, snapshotIdentifier, storageEncrypted, tags, tagsAll, vpcSecurityGroupIds);
        }
    }
}
