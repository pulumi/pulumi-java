// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.ec2.inputs.VpcPeeringConnectionAccepterAccepterArgs;
import io.pulumi.aws.ec2.inputs.VpcPeeringConnectionAccepterRequesterArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpcPeeringConnectionAccepterArgs extends io.pulumi.resources.ResourceArgs {

    public static final VpcPeeringConnectionAccepterArgs Empty = new VpcPeeringConnectionAccepterArgs();

    /**
     * A configuration block that describes [VPC Peering Connection]
     * (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
     * 
     */
    @Import(name="accepter")
      private final @Nullable Output<VpcPeeringConnectionAccepterAccepterArgs> accepter;

    public Output<VpcPeeringConnectionAccepterAccepterArgs> accepter() {
        return this.accepter == null ? Codegen.empty() : this.accepter;
    }

    /**
     * Whether or not to accept the peering request. Defaults to `false`.
     * 
     */
    @Import(name="autoAccept")
      private final @Nullable Output<Boolean> autoAccept;

    public Output<Boolean> autoAccept() {
        return this.autoAccept == null ? Codegen.empty() : this.autoAccept;
    }

    /**
     * A configuration block that describes [VPC Peering Connection]
     * (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
     * 
     */
    @Import(name="requester")
      private final @Nullable Output<VpcPeeringConnectionAccepterRequesterArgs> requester;

    public Output<VpcPeeringConnectionAccepterRequesterArgs> requester() {
        return this.requester == null ? Codegen.empty() : this.requester;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The VPC Peering Connection ID to manage.
     * 
     */
    @Import(name="vpcPeeringConnectionId", required=true)
      private final Output<String> vpcPeeringConnectionId;

    public Output<String> vpcPeeringConnectionId() {
        return this.vpcPeeringConnectionId;
    }

    public VpcPeeringConnectionAccepterArgs(
        @Nullable Output<VpcPeeringConnectionAccepterAccepterArgs> accepter,
        @Nullable Output<Boolean> autoAccept,
        @Nullable Output<VpcPeeringConnectionAccepterRequesterArgs> requester,
        @Nullable Output<Map<String,String>> tags,
        Output<String> vpcPeeringConnectionId) {
        this.accepter = accepter;
        this.autoAccept = autoAccept;
        this.requester = requester;
        this.tags = tags;
        this.vpcPeeringConnectionId = Objects.requireNonNull(vpcPeeringConnectionId, "expected parameter 'vpcPeeringConnectionId' to be non-null");
    }

    private VpcPeeringConnectionAccepterArgs() {
        this.accepter = Codegen.empty();
        this.autoAccept = Codegen.empty();
        this.requester = Codegen.empty();
        this.tags = Codegen.empty();
        this.vpcPeeringConnectionId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpcPeeringConnectionAccepterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<VpcPeeringConnectionAccepterAccepterArgs> accepter;
        private @Nullable Output<Boolean> autoAccept;
        private @Nullable Output<VpcPeeringConnectionAccepterRequesterArgs> requester;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> vpcPeeringConnectionId;

        public Builder() {
    	      // Empty
        }

        public Builder(VpcPeeringConnectionAccepterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepter = defaults.accepter;
    	      this.autoAccept = defaults.autoAccept;
    	      this.requester = defaults.requester;
    	      this.tags = defaults.tags;
    	      this.vpcPeeringConnectionId = defaults.vpcPeeringConnectionId;
        }

        public Builder accepter(@Nullable Output<VpcPeeringConnectionAccepterAccepterArgs> accepter) {
            this.accepter = accepter;
            return this;
        }
        public Builder accepter(@Nullable VpcPeeringConnectionAccepterAccepterArgs accepter) {
            this.accepter = Codegen.ofNullable(accepter);
            return this;
        }
        public Builder autoAccept(@Nullable Output<Boolean> autoAccept) {
            this.autoAccept = autoAccept;
            return this;
        }
        public Builder autoAccept(@Nullable Boolean autoAccept) {
            this.autoAccept = Codegen.ofNullable(autoAccept);
            return this;
        }
        public Builder requester(@Nullable Output<VpcPeeringConnectionAccepterRequesterArgs> requester) {
            this.requester = requester;
            return this;
        }
        public Builder requester(@Nullable VpcPeeringConnectionAccepterRequesterArgs requester) {
            this.requester = Codegen.ofNullable(requester);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder vpcPeeringConnectionId(Output<String> vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = Objects.requireNonNull(vpcPeeringConnectionId);
            return this;
        }
        public Builder vpcPeeringConnectionId(String vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = Output.of(Objects.requireNonNull(vpcPeeringConnectionId));
            return this;
        }        public VpcPeeringConnectionAccepterArgs build() {
            return new VpcPeeringConnectionAccepterArgs(accepter, autoAccept, requester, tags, vpcPeeringConnectionId);
        }
    }
}
