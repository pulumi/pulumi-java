// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.storagegateway;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TapePoolArgs extends io.pulumi.resources.ResourceArgs {

    public static final TapePoolArgs Empty = new TapePoolArgs();

    /**
     * The name of the new custom tape pool.
     * 
     */
    @Import(name="poolName", required=true)
      private final Output<String> poolName;

    public Output<String> getPoolName() {
        return this.poolName;
    }

    /**
     * Tape retention lock time is set in days. Tape retention lock can be enabled for up to 100 years (36,500 days). Default value is 0.
     * 
     */
    @Import(name="retentionLockTimeInDays")
      private final @Nullable Output<Integer> retentionLockTimeInDays;

    public Output<Integer> getRetentionLockTimeInDays() {
        return this.retentionLockTimeInDays == null ? Output.empty() : this.retentionLockTimeInDays;
    }

    /**
     * Tape retention lock can be configured in two modes. When configured in governance mode, AWS accounts with specific IAM permissions are authorized to remove the tape retention lock from archived virtual tapes. When configured in compliance mode, the tape retention lock cannot be removed by any user, including the root AWS account. Possible values are `COMPLIANCE`, `GOVERNANCE`, and `NONE`. Default value is `NONE`.
     * 
     */
    @Import(name="retentionLockType")
      private final @Nullable Output<String> retentionLockType;

    public Output<String> getRetentionLockType() {
        return this.retentionLockType == null ? Output.empty() : this.retentionLockType;
    }

    /**
     * The storage class that is associated with the new custom pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class that corresponds to the pool. Possible values are `DEEP_ARCHIVE` or `GLACIER`.
     * 
     */
    @Import(name="storageClass", required=true)
      private final Output<String> storageClass;

    public Output<String> getStorageClass() {
        return this.storageClass;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public TapePoolArgs(
        Output<String> poolName,
        @Nullable Output<Integer> retentionLockTimeInDays,
        @Nullable Output<String> retentionLockType,
        Output<String> storageClass,
        @Nullable Output<Map<String,String>> tags) {
        this.poolName = Objects.requireNonNull(poolName, "expected parameter 'poolName' to be non-null");
        this.retentionLockTimeInDays = retentionLockTimeInDays;
        this.retentionLockType = retentionLockType;
        this.storageClass = Objects.requireNonNull(storageClass, "expected parameter 'storageClass' to be non-null");
        this.tags = tags;
    }

    private TapePoolArgs() {
        this.poolName = Output.empty();
        this.retentionLockTimeInDays = Output.empty();
        this.retentionLockType = Output.empty();
        this.storageClass = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TapePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> poolName;
        private @Nullable Output<Integer> retentionLockTimeInDays;
        private @Nullable Output<String> retentionLockType;
        private Output<String> storageClass;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(TapePoolArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.poolName = defaults.poolName;
    	      this.retentionLockTimeInDays = defaults.retentionLockTimeInDays;
    	      this.retentionLockType = defaults.retentionLockType;
    	      this.storageClass = defaults.storageClass;
    	      this.tags = defaults.tags;
        }

        public Builder poolName(Output<String> poolName) {
            this.poolName = Objects.requireNonNull(poolName);
            return this;
        }
        public Builder poolName(String poolName) {
            this.poolName = Output.of(Objects.requireNonNull(poolName));
            return this;
        }
        public Builder retentionLockTimeInDays(@Nullable Output<Integer> retentionLockTimeInDays) {
            this.retentionLockTimeInDays = retentionLockTimeInDays;
            return this;
        }
        public Builder retentionLockTimeInDays(@Nullable Integer retentionLockTimeInDays) {
            this.retentionLockTimeInDays = Output.ofNullable(retentionLockTimeInDays);
            return this;
        }
        public Builder retentionLockType(@Nullable Output<String> retentionLockType) {
            this.retentionLockType = retentionLockType;
            return this;
        }
        public Builder retentionLockType(@Nullable String retentionLockType) {
            this.retentionLockType = Output.ofNullable(retentionLockType);
            return this;
        }
        public Builder storageClass(Output<String> storageClass) {
            this.storageClass = Objects.requireNonNull(storageClass);
            return this;
        }
        public Builder storageClass(String storageClass) {
            this.storageClass = Output.of(Objects.requireNonNull(storageClass));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }        public TapePoolArgs build() {
            return new TapePoolArgs(poolName, retentionLockTimeInDays, retentionLockType, storageClass, tags);
        }
    }
}
