// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.directoryservice.inputs;

import io.pulumi.aws.directoryservice.inputs.DirectoryConnectSettingsGetArgs;
import io.pulumi.aws.directoryservice.inputs.DirectoryVpcSettingsGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DirectoryState extends io.pulumi.resources.ResourceArgs {

    public static final DirectoryState Empty = new DirectoryState();

    /**
     * The access URL for the directory, such as `http://alias.awsapps.com`.
     * 
     */
    @InputImport(name="accessUrl")
      private final @Nullable Input<String> accessUrl;

    public Input<String> getAccessUrl() {
        return this.accessUrl == null ? Input.empty() : this.accessUrl;
    }

    /**
     * The alias for the directory (must be unique amongst all aliases in AWS). Required for `enable_sso`.
     * 
     */
    @InputImport(name="alias")
      private final @Nullable Input<String> alias;

    public Input<String> getAlias() {
        return this.alias == null ? Input.empty() : this.alias;
    }

    /**
     * Connector related information about the directory. Fields documented below.
     * 
     */
    @InputImport(name="connectSettings")
      private final @Nullable Input<DirectoryConnectSettingsGetArgs> connectSettings;

    public Input<DirectoryConnectSettingsGetArgs> getConnectSettings() {
        return this.connectSettings == null ? Input.empty() : this.connectSettings;
    }

    /**
     * A textual description for the directory.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * A list of IP addresses of the DNS servers for the directory or connector.
     * 
     */
    @InputImport(name="dnsIpAddresses")
      private final @Nullable Input<List<String>> dnsIpAddresses;

    public Input<List<String>> getDnsIpAddresses() {
        return this.dnsIpAddresses == null ? Input.empty() : this.dnsIpAddresses;
    }

    /**
     * The MicrosoftAD edition (`Standard` or `Enterprise`). Defaults to `Enterprise` (applies to MicrosoftAD type only).
     * 
     */
    @InputImport(name="edition")
      private final @Nullable Input<String> edition;

    public Input<String> getEdition() {
        return this.edition == null ? Input.empty() : this.edition;
    }

    /**
     * Whether to enable single-sign on for the directory. Requires `alias`. Defaults to `false`.
     * 
     */
    @InputImport(name="enableSso")
      private final @Nullable Input<Boolean> enableSso;

    public Input<Boolean> getEnableSso() {
        return this.enableSso == null ? Input.empty() : this.enableSso;
    }

    /**
     * The fully qualified name for the directory, such as `corp.example.com`
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The password for the directory administrator or connector user.
     * 
     */
    @InputImport(name="password")
      private final @Nullable Input<String> password;

    public Input<String> getPassword() {
        return this.password == null ? Input.empty() : this.password;
    }

    /**
     * The ID of the security group created by the directory.
     * 
     */
    @InputImport(name="securityGroupId")
      private final @Nullable Input<String> securityGroupId;

    public Input<String> getSecurityGroupId() {
        return this.securityGroupId == null ? Input.empty() : this.securityGroupId;
    }

    /**
     * The short name of the directory, such as `CORP`.
     * 
     */
    @InputImport(name="shortName")
      private final @Nullable Input<String> shortName;

    public Input<String> getShortName() {
        return this.shortName == null ? Input.empty() : this.shortName;
    }

    /**
     * The size of the directory (`Small` or `Large` are accepted values).
     * 
     */
    @InputImport(name="size")
      private final @Nullable Input<String> size;

    public Input<String> getSize() {
        return this.size == null ? Input.empty() : this.size;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD` are accepted values). Defaults to `SimpleAD`.
     * 
     */
    @InputImport(name="type")
      private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * VPC related information about the directory. Fields documented below.
     * 
     */
    @InputImport(name="vpcSettings")
      private final @Nullable Input<DirectoryVpcSettingsGetArgs> vpcSettings;

    public Input<DirectoryVpcSettingsGetArgs> getVpcSettings() {
        return this.vpcSettings == null ? Input.empty() : this.vpcSettings;
    }

    public DirectoryState(
        @Nullable Input<String> accessUrl,
        @Nullable Input<String> alias,
        @Nullable Input<DirectoryConnectSettingsGetArgs> connectSettings,
        @Nullable Input<String> description,
        @Nullable Input<List<String>> dnsIpAddresses,
        @Nullable Input<String> edition,
        @Nullable Input<Boolean> enableSso,
        @Nullable Input<String> name,
        @Nullable Input<String> password,
        @Nullable Input<String> securityGroupId,
        @Nullable Input<String> shortName,
        @Nullable Input<String> size,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> type,
        @Nullable Input<DirectoryVpcSettingsGetArgs> vpcSettings) {
        this.accessUrl = accessUrl;
        this.alias = alias;
        this.connectSettings = connectSettings;
        this.description = description;
        this.dnsIpAddresses = dnsIpAddresses;
        this.edition = edition;
        this.enableSso = enableSso;
        this.name = name;
        this.password = password;
        this.securityGroupId = securityGroupId;
        this.shortName = shortName;
        this.size = size;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.type = type;
        this.vpcSettings = vpcSettings;
    }

    private DirectoryState() {
        this.accessUrl = Input.empty();
        this.alias = Input.empty();
        this.connectSettings = Input.empty();
        this.description = Input.empty();
        this.dnsIpAddresses = Input.empty();
        this.edition = Input.empty();
        this.enableSso = Input.empty();
        this.name = Input.empty();
        this.password = Input.empty();
        this.securityGroupId = Input.empty();
        this.shortName = Input.empty();
        this.size = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.type = Input.empty();
        this.vpcSettings = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DirectoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accessUrl;
        private @Nullable Input<String> alias;
        private @Nullable Input<DirectoryConnectSettingsGetArgs> connectSettings;
        private @Nullable Input<String> description;
        private @Nullable Input<List<String>> dnsIpAddresses;
        private @Nullable Input<String> edition;
        private @Nullable Input<Boolean> enableSso;
        private @Nullable Input<String> name;
        private @Nullable Input<String> password;
        private @Nullable Input<String> securityGroupId;
        private @Nullable Input<String> shortName;
        private @Nullable Input<String> size;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> type;
        private @Nullable Input<DirectoryVpcSettingsGetArgs> vpcSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(DirectoryState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessUrl = defaults.accessUrl;
    	      this.alias = defaults.alias;
    	      this.connectSettings = defaults.connectSettings;
    	      this.description = defaults.description;
    	      this.dnsIpAddresses = defaults.dnsIpAddresses;
    	      this.edition = defaults.edition;
    	      this.enableSso = defaults.enableSso;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.securityGroupId = defaults.securityGroupId;
    	      this.shortName = defaults.shortName;
    	      this.size = defaults.size;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.type = defaults.type;
    	      this.vpcSettings = defaults.vpcSettings;
        }

        public Builder setAccessUrl(@Nullable Input<String> accessUrl) {
            this.accessUrl = accessUrl;
            return this;
        }

        public Builder setAccessUrl(@Nullable String accessUrl) {
            this.accessUrl = Input.ofNullable(accessUrl);
            return this;
        }

        public Builder setAlias(@Nullable Input<String> alias) {
            this.alias = alias;
            return this;
        }

        public Builder setAlias(@Nullable String alias) {
            this.alias = Input.ofNullable(alias);
            return this;
        }

        public Builder setConnectSettings(@Nullable Input<DirectoryConnectSettingsGetArgs> connectSettings) {
            this.connectSettings = connectSettings;
            return this;
        }

        public Builder setConnectSettings(@Nullable DirectoryConnectSettingsGetArgs connectSettings) {
            this.connectSettings = Input.ofNullable(connectSettings);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDnsIpAddresses(@Nullable Input<List<String>> dnsIpAddresses) {
            this.dnsIpAddresses = dnsIpAddresses;
            return this;
        }

        public Builder setDnsIpAddresses(@Nullable List<String> dnsIpAddresses) {
            this.dnsIpAddresses = Input.ofNullable(dnsIpAddresses);
            return this;
        }

        public Builder setEdition(@Nullable Input<String> edition) {
            this.edition = edition;
            return this;
        }

        public Builder setEdition(@Nullable String edition) {
            this.edition = Input.ofNullable(edition);
            return this;
        }

        public Builder setEnableSso(@Nullable Input<Boolean> enableSso) {
            this.enableSso = enableSso;
            return this;
        }

        public Builder setEnableSso(@Nullable Boolean enableSso) {
            this.enableSso = Input.ofNullable(enableSso);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPassword(@Nullable Input<String> password) {
            this.password = password;
            return this;
        }

        public Builder setPassword(@Nullable String password) {
            this.password = Input.ofNullable(password);
            return this;
        }

        public Builder setSecurityGroupId(@Nullable Input<String> securityGroupId) {
            this.securityGroupId = securityGroupId;
            return this;
        }

        public Builder setSecurityGroupId(@Nullable String securityGroupId) {
            this.securityGroupId = Input.ofNullable(securityGroupId);
            return this;
        }

        public Builder setShortName(@Nullable Input<String> shortName) {
            this.shortName = shortName;
            return this;
        }

        public Builder setShortName(@Nullable String shortName) {
            this.shortName = Input.ofNullable(shortName);
            return this;
        }

        public Builder setSize(@Nullable Input<String> size) {
            this.size = size;
            return this;
        }

        public Builder setSize(@Nullable String size) {
            this.size = Input.ofNullable(size);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setVpcSettings(@Nullable Input<DirectoryVpcSettingsGetArgs> vpcSettings) {
            this.vpcSettings = vpcSettings;
            return this;
        }

        public Builder setVpcSettings(@Nullable DirectoryVpcSettingsGetArgs vpcSettings) {
            this.vpcSettings = Input.ofNullable(vpcSettings);
            return this;
        }
        public DirectoryState build() {
            return new DirectoryState(accessUrl, alias, connectSettings, description, dnsIpAddresses, edition, enableSso, name, password, securityGroupId, shortName, size, tags, tagsAll, type, vpcSettings);
        }
    }
}
