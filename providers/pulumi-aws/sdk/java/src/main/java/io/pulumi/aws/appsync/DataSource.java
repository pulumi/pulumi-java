// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appsync;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.appsync.DataSourceArgs;
import io.pulumi.aws.appsync.inputs.DataSourceState;
import io.pulumi.aws.appsync.outputs.DataSourceDynamodbConfig;
import io.pulumi.aws.appsync.outputs.DataSourceElasticsearchConfig;
import io.pulumi.aws.appsync.outputs.DataSourceHttpConfig;
import io.pulumi.aws.appsync.outputs.DataSourceLambdaConfig;
import io.pulumi.aws.appsync.outputs.DataSourceRelationalDatabaseConfig;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides an AppSync DataSource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleTable = new aws.dynamodb.Table("exampleTable", {
 *     readCapacity: 1,
 *     writeCapacity: 1,
 *     hashKey: "UserId",
 *     attributes: [{
 *         name: "UserId",
 *         type: "S",
 *     }],
 * });
 * const exampleRole = new aws.iam.Role("exampleRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "appsync.amazonaws.com"
 *       },
 *       "Effect": "Allow"
 *     }
 *   ]
 * }
 * `});
 * const exampleRolePolicy = new aws.iam.RolePolicy("exampleRolePolicy", {
 *     role: exampleRole.id,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "dynamodb:*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${exampleTable.arn}"
 *       ]
 *     }
 *   ]
 * }
 * `,
 * });
 * const exampleGraphQLApi = new aws.appsync.GraphQLApi("exampleGraphQLApi", {authenticationType: "API_KEY"});
 * const exampleDataSource = new aws.appsync.DataSource("exampleDataSource", {
 *     apiId: exampleGraphQLApi.id,
 *     name: "tf_appsync_example",
 *     serviceRoleArn: exampleRole.arn,
 *     type: "AMAZON_DYNAMODB",
 *     dynamodbConfig: {
 *         tableName: exampleTable.name,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_table = aws.dynamodb.Table("exampleTable",
 *     read_capacity=1,
 *     write_capacity=1,
 *     hash_key="UserId",
 *     attributes=[aws.dynamodb.TableAttributeArgs(
 *         name="UserId",
 *         type="S",
 *     )])
 * example_role = aws.iam.Role("exampleRole", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "appsync.amazonaws.com"
 *       },
 *       "Effect": "Allow"
 *     }
 *   ]
 * }
 * """)
 * example_role_policy = aws.iam.RolePolicy("exampleRolePolicy",
 *     role=example_role.id,
 *     policy=example_table.arn.apply(lambda arn: f"""{{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {{
 *       "Action": [
 *         "dynamodb:*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "{arn}"
 *       ]
 *     }}
 *   ]
 * }}
 * """))
 * example_graph_ql_api = aws.appsync.GraphQLApi("exampleGraphQLApi", authentication_type="API_KEY")
 * example_data_source = aws.appsync.DataSource("exampleDataSource",
 *     api_id=example_graph_ql_api.id,
 *     name="tf_appsync_example",
 *     service_role_arn=example_role.arn,
 *     type="AMAZON_DYNAMODB",
 *     dynamodb_config=aws.appsync.DataSourceDynamodbConfigArgs(
 *         table_name=example_table.name,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleTable = new Aws.DynamoDB.Table("exampleTable", new Aws.DynamoDB.TableArgs
 *         {
 *             ReadCapacity = 1,
 *             WriteCapacity = 1,
 *             HashKey = "UserId",
 *             Attributes = 
 *             {
 *                 new Aws.DynamoDB.Inputs.TableAttributeArgs
 *                 {
 *                     Name = "UserId",
 *                     Type = "S",
 *                 },
 *             },
 *         });
 *         var exampleRole = new Aws.Iam.Role("exampleRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": ""sts:AssumeRole"",
 *       ""Principal"": {
 *         ""Service"": ""appsync.amazonaws.com""
 *       },
 *       ""Effect"": ""Allow""
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var exampleRolePolicy = new Aws.Iam.RolePolicy("exampleRolePolicy", new Aws.Iam.RolePolicyArgs
 *         {
 *             Role = exampleRole.Id,
 *             Policy = exampleTable.Arn.Apply(arn => @$"{{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {{
 *       ""Action"": [
 *         ""dynamodb:*""
 *       ],
 *       ""Effect"": ""Allow"",
 *       ""Resource"": [
 *         ""{arn}""
 *       ]
 *     }}
 *   ]
 * }}
 * "),
 *         });
 *         var exampleGraphQLApi = new Aws.AppSync.GraphQLApi("exampleGraphQLApi", new Aws.AppSync.GraphQLApiArgs
 *         {
 *             AuthenticationType = "API_KEY",
 *         });
 *         var exampleDataSource = new Aws.AppSync.DataSource("exampleDataSource", new Aws.AppSync.DataSourceArgs
 *         {
 *             ApiId = exampleGraphQLApi.Id,
 *             Name = "tf_appsync_example",
 *             ServiceRoleArn = exampleRole.Arn,
 *             Type = "AMAZON_DYNAMODB",
 *             DynamodbConfig = new Aws.AppSync.Inputs.DataSourceDynamodbConfigArgs
 *             {
 *                 TableName = exampleTable.Name,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appsync"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/dynamodb"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleTable, err := dynamodb.NewTable(ctx, "exampleTable", &dynamodb.TableArgs{
 * 			ReadCapacity:  pulumi.Int(1),
 * 			WriteCapacity: pulumi.Int(1),
 * 			HashKey:       pulumi.String("UserId"),
 * 			Attributes: dynamodb.TableAttributeArray{
 * 				&dynamodb.TableAttributeArgs{
 * 					Name: pulumi.String("UserId"),
 * 					Type: pulumi.String("S"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleRole, err := iam.NewRole(ctx, "exampleRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"appsync.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicy(ctx, "exampleRolePolicy", &iam.RolePolicyArgs{
 * 			Role: exampleRole.ID(),
 * 			Policy: exampleTable.Arn.ApplyT(func(arn string) (string, error) {
 * 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": [\n", "        \"dynamodb:*\"\n", "      ],\n", "      \"Effect\": \"Allow\",\n", "      \"Resource\": [\n", "        \"", arn, "\"\n", "      ]\n", "    }\n", "  ]\n", "}\n"), nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleGraphQLApi, err := appsync.NewGraphQLApi(ctx, "exampleGraphQLApi", &appsync.GraphQLApiArgs{
 * 			AuthenticationType: pulumi.String("API_KEY"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = appsync.NewDataSource(ctx, "exampleDataSource", &appsync.DataSourceArgs{
 * 			ApiId:          exampleGraphQLApi.ID(),
 * 			Name:           pulumi.String("tf_appsync_example"),
 * 			ServiceRoleArn: exampleRole.Arn,
 * 			Type:           pulumi.String("AMAZON_DYNAMODB"),
 * 			DynamodbConfig: &appsync.DataSourceDynamodbConfigArgs{
 * 				TableName: exampleTable.Name,
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * `aws_appsync_datasource` can be imported with their `api_id`, a hyphen, and `name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:appsync/dataSource:DataSource example abcdef123456-example
 * ```
 * 
 *  
 */
@ResourceType(type="aws:appsync/dataSource:DataSource")
public class DataSource extends io.pulumi.resources.CustomResource {
    /**
     * The API ID for the GraphQL API for the DataSource.
     * 
     */
    @Export(name="apiId", type=String.class, parameters={})
    private Output<String> apiId;

    /**
     * @return The API ID for the GraphQL API for the DataSource.
     * 
     */
    public Output<String> getApiId() {
        return this.apiId;
    }
    /**
     * The ARN
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * A description of the DataSource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A description of the DataSource.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * DynamoDB settings. See below
     * 
     */
    @Export(name="dynamodbConfig", type=DataSourceDynamodbConfig.class, parameters={})
    private Output</* @Nullable */ DataSourceDynamodbConfig> dynamodbConfig;

    /**
     * @return DynamoDB settings. See below
     * 
     */
    public Output</* @Nullable */ DataSourceDynamodbConfig> getDynamodbConfig() {
        return this.dynamodbConfig;
    }
    /**
     * Amazon Elasticsearch settings. See below
     * 
     */
    @Export(name="elasticsearchConfig", type=DataSourceElasticsearchConfig.class, parameters={})
    private Output</* @Nullable */ DataSourceElasticsearchConfig> elasticsearchConfig;

    /**
     * @return Amazon Elasticsearch settings. See below
     * 
     */
    public Output</* @Nullable */ DataSourceElasticsearchConfig> getElasticsearchConfig() {
        return this.elasticsearchConfig;
    }
    /**
     * HTTP settings. See below
     * 
     */
    @Export(name="httpConfig", type=DataSourceHttpConfig.class, parameters={})
    private Output</* @Nullable */ DataSourceHttpConfig> httpConfig;

    /**
     * @return HTTP settings. See below
     * 
     */
    public Output</* @Nullable */ DataSourceHttpConfig> getHttpConfig() {
        return this.httpConfig;
    }
    /**
     * AWS Lambda settings. See below
     * 
     */
    @Export(name="lambdaConfig", type=DataSourceLambdaConfig.class, parameters={})
    private Output</* @Nullable */ DataSourceLambdaConfig> lambdaConfig;

    /**
     * @return AWS Lambda settings. See below
     * 
     */
    public Output</* @Nullable */ DataSourceLambdaConfig> getLambdaConfig() {
        return this.lambdaConfig;
    }
    /**
     * A user-supplied name for the DataSource.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return A user-supplied name for the DataSource.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * AWS RDS settings. See Relational Database Config
     * 
     */
    @Export(name="relationalDatabaseConfig", type=DataSourceRelationalDatabaseConfig.class, parameters={})
    private Output</* @Nullable */ DataSourceRelationalDatabaseConfig> relationalDatabaseConfig;

    /**
     * @return AWS RDS settings. See Relational Database Config
     * 
     */
    public Output</* @Nullable */ DataSourceRelationalDatabaseConfig> getRelationalDatabaseConfig() {
        return this.relationalDatabaseConfig;
    }
    /**
     * The IAM service role ARN for the data source.
     * 
     */
    @Export(name="serviceRoleArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> serviceRoleArn;

    /**
     * @return The IAM service role ARN for the data source.
     * 
     */
    public Output</* @Nullable */ String> getServiceRoleArn() {
        return this.serviceRoleArn;
    }
    /**
     * The type of the DataSource. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the DataSource. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DataSource(String name) {
        this(name, DataSourceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DataSource(String name, DataSourceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataSource(String name, DataSourceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:appsync/dataSource:DataSource", name, args == null ? DataSourceArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private DataSource(String name, Output<String> id, @Nullable DataSourceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:appsync/dataSource:DataSource", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataSource get(String name, Output<String> id, @Nullable DataSourceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new DataSource(name, id, state, options);
    }
}
