// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.macie.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FindingsFilterFindingCriteriaCriterionGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final FindingsFilterFindingCriteriaCriterionGetArgs Empty = new FindingsFilterFindingCriteriaCriterionGetArgs();

    /**
     * The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
     * 
     */
    @Import(name="eqExactMatches")
      private final @Nullable Output<List<String>> eqExactMatches;

    public Output<List<String>> getEqExactMatches() {
        return this.eqExactMatches == null ? Output.empty() : this.eqExactMatches;
    }

    /**
     * The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    @Import(name="eqs")
      private final @Nullable Output<List<String>> eqs;

    public Output<List<String>> getEqs() {
        return this.eqs == null ? Output.empty() : this.eqs;
    }

    /**
     * The name of the field to be evaluated.
     * 
     */
    @Import(name="field", required=true)
      private final Output<String> field;

    public Output<String> getField() {
        return this.field;
    }

    /**
     * The value for the property is greater than the specified value.
     * 
     */
    @Import(name="gt")
      private final @Nullable Output<String> gt;

    public Output<String> getGt() {
        return this.gt == null ? Output.empty() : this.gt;
    }

    /**
     * The value for the property is greater than or equal to the specified value.
     * 
     */
    @Import(name="gte")
      private final @Nullable Output<String> gte;

    public Output<String> getGte() {
        return this.gte == null ? Output.empty() : this.gte;
    }

    /**
     * The value for the property is less than the specified value.
     * 
     */
    @Import(name="lt")
      private final @Nullable Output<String> lt;

    public Output<String> getLt() {
        return this.lt == null ? Output.empty() : this.lt;
    }

    /**
     * The value for the property is less than or equal to the specified value.
     * 
     */
    @Import(name="lte")
      private final @Nullable Output<String> lte;

    public Output<String> getLte() {
        return this.lte == null ? Output.empty() : this.lte;
    }

    /**
     * The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    @Import(name="neqs")
      private final @Nullable Output<List<String>> neqs;

    public Output<List<String>> getNeqs() {
        return this.neqs == null ? Output.empty() : this.neqs;
    }

    public FindingsFilterFindingCriteriaCriterionGetArgs(
        @Nullable Output<List<String>> eqExactMatches,
        @Nullable Output<List<String>> eqs,
        Output<String> field,
        @Nullable Output<String> gt,
        @Nullable Output<String> gte,
        @Nullable Output<String> lt,
        @Nullable Output<String> lte,
        @Nullable Output<List<String>> neqs) {
        this.eqExactMatches = eqExactMatches;
        this.eqs = eqs;
        this.field = Objects.requireNonNull(field, "expected parameter 'field' to be non-null");
        this.gt = gt;
        this.gte = gte;
        this.lt = lt;
        this.lte = lte;
        this.neqs = neqs;
    }

    private FindingsFilterFindingCriteriaCriterionGetArgs() {
        this.eqExactMatches = Output.empty();
        this.eqs = Output.empty();
        this.field = Output.empty();
        this.gt = Output.empty();
        this.gte = Output.empty();
        this.lt = Output.empty();
        this.lte = Output.empty();
        this.neqs = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FindingsFilterFindingCriteriaCriterionGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> eqExactMatches;
        private @Nullable Output<List<String>> eqs;
        private Output<String> field;
        private @Nullable Output<String> gt;
        private @Nullable Output<String> gte;
        private @Nullable Output<String> lt;
        private @Nullable Output<String> lte;
        private @Nullable Output<List<String>> neqs;

        public Builder() {
    	      // Empty
        }

        public Builder(FindingsFilterFindingCriteriaCriterionGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eqExactMatches = defaults.eqExactMatches;
    	      this.eqs = defaults.eqs;
    	      this.field = defaults.field;
    	      this.gt = defaults.gt;
    	      this.gte = defaults.gte;
    	      this.lt = defaults.lt;
    	      this.lte = defaults.lte;
    	      this.neqs = defaults.neqs;
        }

        public Builder eqExactMatches(@Nullable Output<List<String>> eqExactMatches) {
            this.eqExactMatches = eqExactMatches;
            return this;
        }

        public Builder eqExactMatches(@Nullable List<String> eqExactMatches) {
            this.eqExactMatches = Output.ofNullable(eqExactMatches);
            return this;
        }

        public Builder eqs(@Nullable Output<List<String>> eqs) {
            this.eqs = eqs;
            return this;
        }

        public Builder eqs(@Nullable List<String> eqs) {
            this.eqs = Output.ofNullable(eqs);
            return this;
        }

        public Builder field(Output<String> field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }

        public Builder field(String field) {
            this.field = Output.of(Objects.requireNonNull(field));
            return this;
        }

        public Builder gt(@Nullable Output<String> gt) {
            this.gt = gt;
            return this;
        }

        public Builder gt(@Nullable String gt) {
            this.gt = Output.ofNullable(gt);
            return this;
        }

        public Builder gte(@Nullable Output<String> gte) {
            this.gte = gte;
            return this;
        }

        public Builder gte(@Nullable String gte) {
            this.gte = Output.ofNullable(gte);
            return this;
        }

        public Builder lt(@Nullable Output<String> lt) {
            this.lt = lt;
            return this;
        }

        public Builder lt(@Nullable String lt) {
            this.lt = Output.ofNullable(lt);
            return this;
        }

        public Builder lte(@Nullable Output<String> lte) {
            this.lte = lte;
            return this;
        }

        public Builder lte(@Nullable String lte) {
            this.lte = Output.ofNullable(lte);
            return this;
        }

        public Builder neqs(@Nullable Output<List<String>> neqs) {
            this.neqs = neqs;
            return this;
        }

        public Builder neqs(@Nullable List<String> neqs) {
            this.neqs = Output.ofNullable(neqs);
            return this;
        }
        public FindingsFilterFindingCriteriaCriterionGetArgs build() {
            return new FindingsFilterFindingCriteriaCriterionGetArgs(eqExactMatches, eqs, field, gt, gte, lt, lte, neqs);
        }
    }
}
