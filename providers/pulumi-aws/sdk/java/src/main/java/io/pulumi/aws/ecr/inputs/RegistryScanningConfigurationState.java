// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecr.inputs;

import io.pulumi.aws.ecr.inputs.RegistryScanningConfigurationRuleGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegistryScanningConfigurationState extends io.pulumi.resources.ResourceArgs {

    public static final RegistryScanningConfigurationState Empty = new RegistryScanningConfigurationState();

    /**
     * The registry ID the scanning configuration applies to.
     * 
     */
    @InputImport(name="registryId")
      private final @Nullable Output<String> registryId;

    public Output<String> getRegistryId() {
        return this.registryId == null ? Output.empty() : this.registryId;
    }

    /**
     * One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
     * 
     */
    @InputImport(name="rules")
      private final @Nullable Output<List<RegistryScanningConfigurationRuleGetArgs>> rules;

    public Output<List<RegistryScanningConfigurationRuleGetArgs>> getRules() {
        return this.rules == null ? Output.empty() : this.rules;
    }

    /**
     * the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
     * 
     */
    @InputImport(name="scanType")
      private final @Nullable Output<String> scanType;

    public Output<String> getScanType() {
        return this.scanType == null ? Output.empty() : this.scanType;
    }

    public RegistryScanningConfigurationState(
        @Nullable Output<String> registryId,
        @Nullable Output<List<RegistryScanningConfigurationRuleGetArgs>> rules,
        @Nullable Output<String> scanType) {
        this.registryId = registryId;
        this.rules = rules;
        this.scanType = scanType;
    }

    private RegistryScanningConfigurationState() {
        this.registryId = Output.empty();
        this.rules = Output.empty();
        this.scanType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryScanningConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> registryId;
        private @Nullable Output<List<RegistryScanningConfigurationRuleGetArgs>> rules;
        private @Nullable Output<String> scanType;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistryScanningConfigurationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.registryId = defaults.registryId;
    	      this.rules = defaults.rules;
    	      this.scanType = defaults.scanType;
        }

        public Builder registryId(@Nullable Output<String> registryId) {
            this.registryId = registryId;
            return this;
        }

        public Builder registryId(@Nullable String registryId) {
            this.registryId = Output.ofNullable(registryId);
            return this;
        }

        public Builder rules(@Nullable Output<List<RegistryScanningConfigurationRuleGetArgs>> rules) {
            this.rules = rules;
            return this;
        }

        public Builder rules(@Nullable List<RegistryScanningConfigurationRuleGetArgs> rules) {
            this.rules = Output.ofNullable(rules);
            return this;
        }

        public Builder scanType(@Nullable Output<String> scanType) {
            this.scanType = scanType;
            return this;
        }

        public Builder scanType(@Nullable String scanType) {
            this.scanType = Output.ofNullable(scanType);
            return this;
        }
        public RegistryScanningConfigurationState build() {
            return new RegistryScanningConfigurationState(registryId, rules, scanType);
        }
    }
}
