// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.directoryservice.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConditionalForwaderState extends io.pulumi.resources.ResourceArgs {

    public static final ConditionalForwaderState Empty = new ConditionalForwaderState();

    /**
     * The id of directory.
     * 
     */
    @Import(name="directoryId")
      private final @Nullable Output<String> directoryId;

    public Output<String> getDirectoryId() {
        return this.directoryId == null ? Output.empty() : this.directoryId;
    }

    /**
     * A list of forwarder IP addresses.
     * 
     */
    @Import(name="dnsIps")
      private final @Nullable Output<List<String>> dnsIps;

    public Output<List<String>> getDnsIps() {
        return this.dnsIps == null ? Output.empty() : this.dnsIps;
    }

    /**
     * The fully qualified domain name of the remote domain for which forwarders will be used.
     * 
     */
    @Import(name="remoteDomainName")
      private final @Nullable Output<String> remoteDomainName;

    public Output<String> getRemoteDomainName() {
        return this.remoteDomainName == null ? Output.empty() : this.remoteDomainName;
    }

    public ConditionalForwaderState(
        @Nullable Output<String> directoryId,
        @Nullable Output<List<String>> dnsIps,
        @Nullable Output<String> remoteDomainName) {
        this.directoryId = directoryId;
        this.dnsIps = dnsIps;
        this.remoteDomainName = remoteDomainName;
    }

    private ConditionalForwaderState() {
        this.directoryId = Output.empty();
        this.dnsIps = Output.empty();
        this.remoteDomainName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalForwaderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> directoryId;
        private @Nullable Output<List<String>> dnsIps;
        private @Nullable Output<String> remoteDomainName;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalForwaderState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.directoryId = defaults.directoryId;
    	      this.dnsIps = defaults.dnsIps;
    	      this.remoteDomainName = defaults.remoteDomainName;
        }

        public Builder directoryId(@Nullable Output<String> directoryId) {
            this.directoryId = directoryId;
            return this;
        }

        public Builder directoryId(@Nullable String directoryId) {
            this.directoryId = Output.ofNullable(directoryId);
            return this;
        }

        public Builder dnsIps(@Nullable Output<List<String>> dnsIps) {
            this.dnsIps = dnsIps;
            return this;
        }

        public Builder dnsIps(@Nullable List<String> dnsIps) {
            this.dnsIps = Output.ofNullable(dnsIps);
            return this;
        }

        public Builder remoteDomainName(@Nullable Output<String> remoteDomainName) {
            this.remoteDomainName = remoteDomainName;
            return this;
        }

        public Builder remoteDomainName(@Nullable String remoteDomainName) {
            this.remoteDomainName = Output.ofNullable(remoteDomainName);
            return this;
        }
        public ConditionalForwaderState build() {
            return new ConditionalForwaderState(directoryId, dnsIps, remoteDomainName);
        }
    }
}
