// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.batch;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.batch.JobDefinitionArgs;
import io.pulumi.aws.batch.inputs.JobDefinitionState;
import io.pulumi.aws.batch.outputs.JobDefinitionRetryStrategy;
import io.pulumi.aws.batch.outputs.JobDefinitionTimeout;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a Batch Job Definition resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const test = new aws.batch.JobDefinition("test", {
 *     containerProperties: `{
 * 	"command": ["ls", "-la"],
 * 	"image": "busybox",
 * 	"memory": 1024,
 * 	"vcpus": 1,
 * 	"volumes": [
 *       {
 *         "host": {
 *           "sourcePath": "/tmp"
 *         },
 *         "name": "tmp"
 *       }
 *     ],
 * 	"environment": [
 * 		{"name": "VARNAME", "value": "VARVAL"}
 * 	],
 * 	"mountPoints": [
 * 		{
 *           "sourceVolume": "tmp",
 *           "containerPath": "/tmp",
 *           "readOnly": false
 *         }
 * 	],
 *     "ulimits": [
 *       {
 *         "hardLimit": 1024,
 *         "name": "nofile",
 *         "softLimit": 1024
 *       }
 *     ]
 * }
 * `,
 *     type: "container",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test = aws.batch.JobDefinition("test",
 *     container_properties="""{
 * 	"command": ["ls", "-la"],
 * 	"image": "busybox",
 * 	"memory": 1024,
 * 	"vcpus": 1,
 * 	"volumes": [
 *       {
 *         "host": {
 *           "sourcePath": "/tmp"
 *         },
 *         "name": "tmp"
 *       }
 *     ],
 * 	"environment": [
 * 		{"name": "VARNAME", "value": "VARVAL"}
 * 	],
 * 	"mountPoints": [
 * 		{
 *           "sourceVolume": "tmp",
 *           "containerPath": "/tmp",
 *           "readOnly": false
 *         }
 * 	],
 *     "ulimits": [
 *       {
 *         "hardLimit": 1024,
 *         "name": "nofile",
 *         "softLimit": 1024
 *       }
 *     ]
 * }
 * 
 * """,
 *     type="container")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var test = new Aws.Batch.JobDefinition("test", new Aws.Batch.JobDefinitionArgs
 *         {
 *             ContainerProperties = @"{
 * 	""command"": [""ls"", ""-la""],
 * 	""image"": ""busybox"",
 * 	""memory"": 1024,
 * 	""vcpus"": 1,
 * 	""volumes"": [
 *       {
 *         ""host"": {
 *           ""sourcePath"": ""/tmp""
 *         },
 *         ""name"": ""tmp""
 *       }
 *     ],
 * 	""environment"": [
 * 		{""name"": ""VARNAME"", ""value"": ""VARVAL""}
 * 	],
 * 	""mountPoints"": [
 * 		{
 *           ""sourceVolume"": ""tmp"",
 *           ""containerPath"": ""/tmp"",
 *           ""readOnly"": false
 *         }
 * 	],
 *     ""ulimits"": [
 *       {
 *         ""hardLimit"": 1024,
 *         ""name"": ""nofile"",
 *         ""softLimit"": 1024
 *       }
 *     ]
 * }
 * 
 * ",
 *             Type = "container",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/batch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := batch.NewJobDefinition(ctx, "test", &batch.JobDefinitionArgs{
 * 			ContainerProperties: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "	\"command\": [\"ls\", \"-la\"],\n", "	\"image\": \"busybox\",\n", "	\"memory\": 1024,\n", "	\"vcpus\": 1,\n", "	\"volumes\": [\n", "      {\n", "        \"host\": {\n", "          \"sourcePath\": \"/tmp\"\n", "        },\n", "        \"name\": \"tmp\"\n", "      }\n", "    ],\n", "	\"environment\": [\n", "		{\"name\": \"VARNAME\", \"value\": \"VARVAL\"}\n", "	],\n", "	\"mountPoints\": [\n", "		{\n", "          \"sourceVolume\": \"tmp\",\n", "          \"containerPath\": \"/tmp\",\n", "          \"readOnly\": false\n", "        }\n", "	],\n", "    \"ulimits\": [\n", "      {\n", "        \"hardLimit\": 1024,\n", "        \"name\": \"nofile\",\n", "        \"softLimit\": 1024\n", "      }\n", "    ]\n", "}\n", "\n")),
 * 			Type: pulumi.String("container"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Fargate Platform Capability
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const assumeRolePolicy = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["ecs-tasks.amazonaws.com"],
 *         }],
 *     }],
 * });
 * const ecsTaskExecutionRole = new aws.iam.Role("ecsTaskExecutionRole", {assumeRolePolicy: assumeRolePolicy.then(assumeRolePolicy => assumeRolePolicy.json)});
 * const ecsTaskExecutionRolePolicy = new aws.iam.RolePolicyAttachment("ecsTaskExecutionRolePolicy", {
 *     role: ecsTaskExecutionRole.name,
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
 * });
 * const test = new aws.batch.JobDefinition("test", {
 *     type: "container",
 *     platformCapabilities: ["FARGATE"],
 *     containerProperties: pulumi.interpolate`{
 *   "command": ["echo", "test"],
 *   "image": "busybox",
 *   "fargatePlatformConfiguration": {
 *     "platformVersion": "LATEST"
 *   },
 *   "resourceRequirements": [
 *     {"type": "VCPU", "value": "0.25"},
 *     {"type": "MEMORY", "value": "512"}
 *   ],
 *   "executionRoleArn": "${ecsTaskExecutionRole.arn}"
 * }
 * `,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * assume_role_policy = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     actions=["sts:AssumeRole"],
 *     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *         type="Service",
 *         identifiers=["ecs-tasks.amazonaws.com"],
 *     )],
 * )])
 * ecs_task_execution_role = aws.iam.Role("ecsTaskExecutionRole", assume_role_policy=assume_role_policy.json)
 * ecs_task_execution_role_policy = aws.iam.RolePolicyAttachment("ecsTaskExecutionRolePolicy",
 *     role=ecs_task_execution_role.name,
 *     policy_arn="arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy")
 * test = aws.batch.JobDefinition("test",
 *     type="container",
 *     platform_capabilities=["FARGATE"],
 *     container_properties=ecs_task_execution_role.arn.apply(lambda arn: f"""{{
 *   "command": ["echo", "test"],
 *   "image": "busybox",
 *   "fargatePlatformConfiguration": {{
 *     "platformVersion": "LATEST"
 *   }},
 *   "resourceRequirements": [
 *     {{"type": "VCPU", "value": "0.25"}},
 *     {{"type": "MEMORY", "value": "512"}}
 *   ],
 *   "executionRoleArn": "{arn}"
 * }}
 * """))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var assumeRolePolicy = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Actions = 
 *                     {
 *                         "sts:AssumeRole",
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                         {
 *                             Type = "Service",
 *                             Identifiers = 
 *                             {
 *                                 "ecs-tasks.amazonaws.com",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         }));
 *         var ecsTaskExecutionRole = new Aws.Iam.Role("ecsTaskExecutionRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = assumeRolePolicy.Apply(assumeRolePolicy => assumeRolePolicy.Json),
 *         });
 *         var ecsTaskExecutionRolePolicy = new Aws.Iam.RolePolicyAttachment("ecsTaskExecutionRolePolicy", new Aws.Iam.RolePolicyAttachmentArgs
 *         {
 *             Role = ecsTaskExecutionRole.Name,
 *             PolicyArn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
 *         });
 *         var test = new Aws.Batch.JobDefinition("test", new Aws.Batch.JobDefinitionArgs
 *         {
 *             Type = "container",
 *             PlatformCapabilities = 
 *             {
 *                 "FARGATE",
 *             },
 *             ContainerProperties = ecsTaskExecutionRole.Arn.Apply(arn => @$"{{
 *   ""command"": [""echo"", ""test""],
 *   ""image"": ""busybox"",
 *   ""fargatePlatformConfiguration"": {{
 *     ""platformVersion"": ""LATEST""
 *   }},
 *   ""resourceRequirements"": [
 *     {{""type"": ""VCPU"", ""value"": ""0.25""}},
 *     {{""type"": ""MEMORY"", ""value"": ""512""}}
 *   ],
 *   ""executionRoleArn"": ""{arn}""
 * }}
 * "),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/batch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		assumeRolePolicy, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Actions: []string{
 * 						"sts:AssumeRole",
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Type: "Service",
 * 							Identifiers: []string{
 * 								"ecs-tasks.amazonaws.com",
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		ecsTaskExecutionRole, err := iam.NewRole(ctx, "ecsTaskExecutionRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.String(assumeRolePolicy.Json),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicyAttachment(ctx, "ecsTaskExecutionRolePolicy", &iam.RolePolicyAttachmentArgs{
 * 			Role:      ecsTaskExecutionRole.Name,
 * 			PolicyArn: pulumi.String("arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = batch.NewJobDefinition(ctx, "test", &batch.JobDefinitionArgs{
 * 			Type: pulumi.String("container"),
 * 			PlatformCapabilities: pulumi.StringArray{
 * 				pulumi.String("FARGATE"),
 * 			},
 * 			ContainerProperties: ecsTaskExecutionRole.Arn.ApplyT(func(arn string) (string, error) {
 * 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"command\": [\"echo\", \"test\"],\n", "  \"image\": \"busybox\",\n", "  \"fargatePlatformConfiguration\": {\n", "    \"platformVersion\": \"LATEST\"\n", "  },\n", "  \"resourceRequirements\": [\n", "    {\"type\": \"VCPU\", \"value\": \"0.25\"},\n", "    {\"type\": \"MEMORY\", \"value\": \"512\"}\n", "  ],\n", "  \"executionRoleArn\": \"", arn, "\"\n", "}\n"), nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Batch Job Definition can be imported using the `arn`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:batch/jobDefinition:JobDefinition test arn:aws:batch:us-east-1:123456789012:job-definition/sample
 * ```
 * 
 *  
 */
@ResourceType(type="aws:batch/jobDefinition:JobDefinition")
public class JobDefinition extends io.pulumi.resources.CustomResource {
    /**
     * The Amazon Resource Name of the job definition.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name of the job definition.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * A valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
     * provided as a single valid JSON document. This parameter is required if the `type` parameter is `container`.
     * 
     */
    @Export(name="containerProperties", type=String.class, parameters={})
    private Output</* @Nullable */ String> containerProperties;

    /**
     * @return A valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
     * provided as a single valid JSON document. This parameter is required if the `type` parameter is `container`.
     * 
     */
    public Output</* @Nullable */ String> getContainerProperties() {
        return this.containerProperties;
    }
    /**
     * Specifies the name of the job definition.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of the job definition.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Specifies the parameter substitution placeholders to set in the job definition.
     * 
     */
    @Export(name="parameters", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> parameters;

    /**
     * @return Specifies the parameter substitution placeholders to set in the job definition.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getParameters() {
        return this.parameters;
    }
    /**
     * The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
     * 
     */
    @Export(name="platformCapabilities", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> platformCapabilities;

    /**
     * @return The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
     * 
     */
    public Output</* @Nullable */ List<String>> getPlatformCapabilities() {
        return this.platformCapabilities;
    }
    /**
     * Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
     * 
     */
    @Export(name="propagateTags", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> propagateTags;

    /**
     * @return Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
     * 
     */
    public Output</* @Nullable */ Boolean> getPropagateTags() {
        return this.propagateTags;
    }
    /**
     * Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
     * Maximum number of `retry_strategy` is `1`.  Defined below.
     * 
     */
    @Export(name="retryStrategy", type=JobDefinitionRetryStrategy.class, parameters={})
    private Output</* @Nullable */ JobDefinitionRetryStrategy> retryStrategy;

    /**
     * @return Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
     * Maximum number of `retry_strategy` is `1`.  Defined below.
     * 
     */
    public Output</* @Nullable */ JobDefinitionRetryStrategy> getRetryStrategy() {
        return this.retryStrategy;
    }
    /**
     * The revision of the job definition.
     * 
     */
    @Export(name="revision", type=Integer.class, parameters={})
    private Output<Integer> revision;

    /**
     * @return The revision of the job definition.
     * 
     */
    public Output<Integer> getRevision() {
        return this.revision;
    }
    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
     * 
     */
    @Export(name="timeout", type=JobDefinitionTimeout.class, parameters={})
    private Output</* @Nullable */ JobDefinitionTimeout> timeout;

    /**
     * @return Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.
     * 
     */
    public Output</* @Nullable */ JobDefinitionTimeout> getTimeout() {
        return this.timeout;
    }
    /**
     * The type of job definition.  Must be `container`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of job definition.  Must be `container`.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public JobDefinition(String name) {
        this(name, JobDefinitionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public JobDefinition(String name, JobDefinitionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public JobDefinition(String name, JobDefinitionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:batch/jobDefinition:JobDefinition", name, args == null ? JobDefinitionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private JobDefinition(String name, Output<String> id, @Nullable JobDefinitionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:batch/jobDefinition:JobDefinition", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static JobDefinition get(String name, Output<String> id, @Nullable JobDefinitionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new JobDefinition(name, id, state, options);
    }
}
