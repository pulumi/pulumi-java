// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.devicefarm;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UploadArgs extends io.pulumi.resources.ResourceArgs {

    public static final UploadArgs Empty = new UploadArgs();

    /**
     * The upload's content type (for example, application/octet-stream).
     * 
     */
    @Import(name="contentType")
      private final @Nullable Output<String> contentType;

    public Output<String> getContentType() {
        return this.contentType == null ? Output.empty() : this.contentType;
    }

    /**
     * The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The ARN of the project for the upload.
     * 
     */
    @Import(name="projectArn", required=true)
      private final Output<String> projectArn;

    public Output<String> getProjectArn() {
        return this.projectArn;
    }

    /**
     * The upload's upload type. See [AWS Docs](https://docs.aws.amazon.com/devicefarm/latest/APIReference/API_CreateUpload.html#API_CreateUpload_RequestSyntax) for valid list of values.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    public UploadArgs(
        @Nullable Output<String> contentType,
        @Nullable Output<String> name,
        Output<String> projectArn,
        Output<String> type) {
        this.contentType = contentType;
        this.name = name;
        this.projectArn = Objects.requireNonNull(projectArn, "expected parameter 'projectArn' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private UploadArgs() {
        this.contentType = Output.empty();
        this.name = Output.empty();
        this.projectArn = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UploadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> contentType;
        private @Nullable Output<String> name;
        private Output<String> projectArn;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(UploadArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentType = defaults.contentType;
    	      this.name = defaults.name;
    	      this.projectArn = defaults.projectArn;
    	      this.type = defaults.type;
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            this.contentType = contentType;
            return this;
        }

        public Builder contentType(@Nullable String contentType) {
            this.contentType = Output.ofNullable(contentType);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder projectArn(Output<String> projectArn) {
            this.projectArn = Objects.requireNonNull(projectArn);
            return this;
        }

        public Builder projectArn(String projectArn) {
            this.projectArn = Output.of(Objects.requireNonNull(projectArn));
            return this;
        }

        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public UploadArgs build() {
            return new UploadArgs(contentType, name, projectArn, type);
        }
    }
}
