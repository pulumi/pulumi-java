// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.dms.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReplicationInstanceState extends io.pulumi.resources.ResourceArgs {

    public static final ReplicationInstanceState Empty = new ReplicationInstanceState();

    /**
     * The amount of storage (in gigabytes) to be initially allocated for the replication instance.
     * 
     */
    @InputImport(name="allocatedStorage")
      private final @Nullable Input<Integer> allocatedStorage;

    public Input<Integer> getAllocatedStorage() {
        return this.allocatedStorage == null ? Input.empty() : this.allocatedStorage;
    }

    /**
     * Indicates that major version upgrades are allowed.
     * 
     */
    @InputImport(name="allowMajorVersionUpgrade")
      private final @Nullable Input<Boolean> allowMajorVersionUpgrade;

    public Input<Boolean> getAllowMajorVersionUpgrade() {
        return this.allowMajorVersionUpgrade == null ? Input.empty() : this.allowMajorVersionUpgrade;
    }

    /**
     * Indicates whether the changes should be applied immediately or during the next maintenance window. Only used when updating an existing resource.
     * 
     */
    @InputImport(name="applyImmediately")
      private final @Nullable Input<Boolean> applyImmediately;

    public Input<Boolean> getApplyImmediately() {
        return this.applyImmediately == null ? Input.empty() : this.applyImmediately;
    }

    /**
     * Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window.
     * 
     */
    @InputImport(name="autoMinorVersionUpgrade")
      private final @Nullable Input<Boolean> autoMinorVersionUpgrade;

    public Input<Boolean> getAutoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade == null ? Input.empty() : this.autoMinorVersionUpgrade;
    }

    /**
     * The EC2 Availability Zone that the replication instance will be created in.
     * 
     */
    @InputImport(name="availabilityZone")
      private final @Nullable Input<String> availabilityZone;

    public Input<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Input.empty() : this.availabilityZone;
    }

    /**
     * The engine version number of the replication instance.
     * 
     */
    @InputImport(name="engineVersion")
      private final @Nullable Input<String> engineVersion;

    public Input<String> getEngineVersion() {
        return this.engineVersion == null ? Input.empty() : this.engineVersion;
    }

    /**
     * The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kms_key_arn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
     * 
     */
    @InputImport(name="kmsKeyArn")
      private final @Nullable Input<String> kmsKeyArn;

    public Input<String> getKmsKeyArn() {
        return this.kmsKeyArn == null ? Input.empty() : this.kmsKeyArn;
    }

    /**
     * Specifies if the replication instance is a multi-az deployment. You cannot set the `availability_zone` parameter if the `multi_az` parameter is set to `true`.
     * 
     */
    @InputImport(name="multiAz")
      private final @Nullable Input<Boolean> multiAz;

    public Input<Boolean> getMultiAz() {
        return this.multiAz == null ? Input.empty() : this.multiAz;
    }

    /**
     * The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
     * 
     */
    @InputImport(name="preferredMaintenanceWindow")
      private final @Nullable Input<String> preferredMaintenanceWindow;

    public Input<String> getPreferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow == null ? Input.empty() : this.preferredMaintenanceWindow;
    }

    /**
     * Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address.
     * 
     */
    @InputImport(name="publiclyAccessible")
      private final @Nullable Input<Boolean> publiclyAccessible;

    public Input<Boolean> getPubliclyAccessible() {
        return this.publiclyAccessible == null ? Input.empty() : this.publiclyAccessible;
    }

    /**
     * The Amazon Resource Name (ARN) of the replication instance.
     * 
     */
    @InputImport(name="replicationInstanceArn")
      private final @Nullable Input<String> replicationInstanceArn;

    public Input<String> getReplicationInstanceArn() {
        return this.replicationInstanceArn == null ? Input.empty() : this.replicationInstanceArn;
    }

    /**
     * The compute and memory capacity of the replication instance as specified by the replication instance class. See [AWS DMS User Guide](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.Types.html) for available instance sizes and advice on which one to choose.
     * 
     */
    @InputImport(name="replicationInstanceClass")
      private final @Nullable Input<String> replicationInstanceClass;

    public Input<String> getReplicationInstanceClass() {
        return this.replicationInstanceClass == null ? Input.empty() : this.replicationInstanceClass;
    }

    /**
     * The replication instance identifier. This parameter is stored as a lowercase string.
     * 
     */
    @InputImport(name="replicationInstanceId")
      private final @Nullable Input<String> replicationInstanceId;

    public Input<String> getReplicationInstanceId() {
        return this.replicationInstanceId == null ? Input.empty() : this.replicationInstanceId;
    }

    /**
     * A list of the private IP addresses of the replication instance.
     * 
     */
    @InputImport(name="replicationInstancePrivateIps")
      private final @Nullable Input<List<String>> replicationInstancePrivateIps;

    public Input<List<String>> getReplicationInstancePrivateIps() {
        return this.replicationInstancePrivateIps == null ? Input.empty() : this.replicationInstancePrivateIps;
    }

    /**
     * A list of the public IP addresses of the replication instance.
     * 
     */
    @InputImport(name="replicationInstancePublicIps")
      private final @Nullable Input<List<String>> replicationInstancePublicIps;

    public Input<List<String>> getReplicationInstancePublicIps() {
        return this.replicationInstancePublicIps == null ? Input.empty() : this.replicationInstancePublicIps;
    }

    /**
     * A subnet group to associate with the replication instance.
     * 
     */
    @InputImport(name="replicationSubnetGroupId")
      private final @Nullable Input<String> replicationSubnetGroupId;

    public Input<String> getReplicationSubnetGroupId() {
        return this.replicationSubnetGroupId == null ? Input.empty() : this.replicationSubnetGroupId;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * A list of VPC security group IDs to be used with the replication instance. The VPC security groups must work with the VPC containing the replication instance.
     * 
     */
    @InputImport(name="vpcSecurityGroupIds")
      private final @Nullable Input<List<String>> vpcSecurityGroupIds;

    public Input<List<String>> getVpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Input.empty() : this.vpcSecurityGroupIds;
    }

    public ReplicationInstanceState(
        @Nullable Input<Integer> allocatedStorage,
        @Nullable Input<Boolean> allowMajorVersionUpgrade,
        @Nullable Input<Boolean> applyImmediately,
        @Nullable Input<Boolean> autoMinorVersionUpgrade,
        @Nullable Input<String> availabilityZone,
        @Nullable Input<String> engineVersion,
        @Nullable Input<String> kmsKeyArn,
        @Nullable Input<Boolean> multiAz,
        @Nullable Input<String> preferredMaintenanceWindow,
        @Nullable Input<Boolean> publiclyAccessible,
        @Nullable Input<String> replicationInstanceArn,
        @Nullable Input<String> replicationInstanceClass,
        @Nullable Input<String> replicationInstanceId,
        @Nullable Input<List<String>> replicationInstancePrivateIps,
        @Nullable Input<List<String>> replicationInstancePublicIps,
        @Nullable Input<String> replicationSubnetGroupId,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<List<String>> vpcSecurityGroupIds) {
        this.allocatedStorage = allocatedStorage;
        this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
        this.applyImmediately = applyImmediately;
        this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
        this.availabilityZone = availabilityZone;
        this.engineVersion = engineVersion;
        this.kmsKeyArn = kmsKeyArn;
        this.multiAz = multiAz;
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        this.publiclyAccessible = publiclyAccessible;
        this.replicationInstanceArn = replicationInstanceArn;
        this.replicationInstanceClass = replicationInstanceClass;
        this.replicationInstanceId = replicationInstanceId;
        this.replicationInstancePrivateIps = replicationInstancePrivateIps;
        this.replicationInstancePublicIps = replicationInstancePublicIps;
        this.replicationSubnetGroupId = replicationSubnetGroupId;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    }

    private ReplicationInstanceState() {
        this.allocatedStorage = Input.empty();
        this.allowMajorVersionUpgrade = Input.empty();
        this.applyImmediately = Input.empty();
        this.autoMinorVersionUpgrade = Input.empty();
        this.availabilityZone = Input.empty();
        this.engineVersion = Input.empty();
        this.kmsKeyArn = Input.empty();
        this.multiAz = Input.empty();
        this.preferredMaintenanceWindow = Input.empty();
        this.publiclyAccessible = Input.empty();
        this.replicationInstanceArn = Input.empty();
        this.replicationInstanceClass = Input.empty();
        this.replicationInstanceId = Input.empty();
        this.replicationInstancePrivateIps = Input.empty();
        this.replicationInstancePublicIps = Input.empty();
        this.replicationSubnetGroupId = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.vpcSecurityGroupIds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicationInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> allocatedStorage;
        private @Nullable Input<Boolean> allowMajorVersionUpgrade;
        private @Nullable Input<Boolean> applyImmediately;
        private @Nullable Input<Boolean> autoMinorVersionUpgrade;
        private @Nullable Input<String> availabilityZone;
        private @Nullable Input<String> engineVersion;
        private @Nullable Input<String> kmsKeyArn;
        private @Nullable Input<Boolean> multiAz;
        private @Nullable Input<String> preferredMaintenanceWindow;
        private @Nullable Input<Boolean> publiclyAccessible;
        private @Nullable Input<String> replicationInstanceArn;
        private @Nullable Input<String> replicationInstanceClass;
        private @Nullable Input<String> replicationInstanceId;
        private @Nullable Input<List<String>> replicationInstancePrivateIps;
        private @Nullable Input<List<String>> replicationInstancePublicIps;
        private @Nullable Input<String> replicationSubnetGroupId;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<List<String>> vpcSecurityGroupIds;

        public Builder() {
    	      // Empty
        }

        public Builder(ReplicationInstanceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedStorage = defaults.allocatedStorage;
    	      this.allowMajorVersionUpgrade = defaults.allowMajorVersionUpgrade;
    	      this.applyImmediately = defaults.applyImmediately;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.engineVersion = defaults.engineVersion;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.multiAz = defaults.multiAz;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.replicationInstanceArn = defaults.replicationInstanceArn;
    	      this.replicationInstanceClass = defaults.replicationInstanceClass;
    	      this.replicationInstanceId = defaults.replicationInstanceId;
    	      this.replicationInstancePrivateIps = defaults.replicationInstancePrivateIps;
    	      this.replicationInstancePublicIps = defaults.replicationInstancePublicIps;
    	      this.replicationSubnetGroupId = defaults.replicationSubnetGroupId;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        public Builder allocatedStorage(@Nullable Input<Integer> allocatedStorage) {
            this.allocatedStorage = allocatedStorage;
            return this;
        }

        public Builder allocatedStorage(@Nullable Integer allocatedStorage) {
            this.allocatedStorage = Input.ofNullable(allocatedStorage);
            return this;
        }

        public Builder allowMajorVersionUpgrade(@Nullable Input<Boolean> allowMajorVersionUpgrade) {
            this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
            return this;
        }

        public Builder allowMajorVersionUpgrade(@Nullable Boolean allowMajorVersionUpgrade) {
            this.allowMajorVersionUpgrade = Input.ofNullable(allowMajorVersionUpgrade);
            return this;
        }

        public Builder applyImmediately(@Nullable Input<Boolean> applyImmediately) {
            this.applyImmediately = applyImmediately;
            return this;
        }

        public Builder applyImmediately(@Nullable Boolean applyImmediately) {
            this.applyImmediately = Input.ofNullable(applyImmediately);
            return this;
        }

        public Builder autoMinorVersionUpgrade(@Nullable Input<Boolean> autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }

        public Builder autoMinorVersionUpgrade(@Nullable Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Input.ofNullable(autoMinorVersionUpgrade);
            return this;
        }

        public Builder availabilityZone(@Nullable Input<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Input.ofNullable(availabilityZone);
            return this;
        }

        public Builder engineVersion(@Nullable Input<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = Input.ofNullable(engineVersion);
            return this;
        }

        public Builder kmsKeyArn(@Nullable Input<String> kmsKeyArn) {
            this.kmsKeyArn = kmsKeyArn;
            return this;
        }

        public Builder kmsKeyArn(@Nullable String kmsKeyArn) {
            this.kmsKeyArn = Input.ofNullable(kmsKeyArn);
            return this;
        }

        public Builder multiAz(@Nullable Input<Boolean> multiAz) {
            this.multiAz = multiAz;
            return this;
        }

        public Builder multiAz(@Nullable Boolean multiAz) {
            this.multiAz = Input.ofNullable(multiAz);
            return this;
        }

        public Builder preferredMaintenanceWindow(@Nullable Input<String> preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }

        public Builder preferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Input.ofNullable(preferredMaintenanceWindow);
            return this;
        }

        public Builder publiclyAccessible(@Nullable Input<Boolean> publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }

        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = Input.ofNullable(publiclyAccessible);
            return this;
        }

        public Builder replicationInstanceArn(@Nullable Input<String> replicationInstanceArn) {
            this.replicationInstanceArn = replicationInstanceArn;
            return this;
        }

        public Builder replicationInstanceArn(@Nullable String replicationInstanceArn) {
            this.replicationInstanceArn = Input.ofNullable(replicationInstanceArn);
            return this;
        }

        public Builder replicationInstanceClass(@Nullable Input<String> replicationInstanceClass) {
            this.replicationInstanceClass = replicationInstanceClass;
            return this;
        }

        public Builder replicationInstanceClass(@Nullable String replicationInstanceClass) {
            this.replicationInstanceClass = Input.ofNullable(replicationInstanceClass);
            return this;
        }

        public Builder replicationInstanceId(@Nullable Input<String> replicationInstanceId) {
            this.replicationInstanceId = replicationInstanceId;
            return this;
        }

        public Builder replicationInstanceId(@Nullable String replicationInstanceId) {
            this.replicationInstanceId = Input.ofNullable(replicationInstanceId);
            return this;
        }

        public Builder replicationInstancePrivateIps(@Nullable Input<List<String>> replicationInstancePrivateIps) {
            this.replicationInstancePrivateIps = replicationInstancePrivateIps;
            return this;
        }

        public Builder replicationInstancePrivateIps(@Nullable List<String> replicationInstancePrivateIps) {
            this.replicationInstancePrivateIps = Input.ofNullable(replicationInstancePrivateIps);
            return this;
        }

        public Builder replicationInstancePublicIps(@Nullable Input<List<String>> replicationInstancePublicIps) {
            this.replicationInstancePublicIps = replicationInstancePublicIps;
            return this;
        }

        public Builder replicationInstancePublicIps(@Nullable List<String> replicationInstancePublicIps) {
            this.replicationInstancePublicIps = Input.ofNullable(replicationInstancePublicIps);
            return this;
        }

        public Builder replicationSubnetGroupId(@Nullable Input<String> replicationSubnetGroupId) {
            this.replicationSubnetGroupId = replicationSubnetGroupId;
            return this;
        }

        public Builder replicationSubnetGroupId(@Nullable String replicationSubnetGroupId) {
            this.replicationSubnetGroupId = Input.ofNullable(replicationSubnetGroupId);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder vpcSecurityGroupIds(@Nullable Input<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        public Builder vpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Input.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public ReplicationInstanceState build() {
            return new ReplicationInstanceState(allocatedStorage, allowMajorVersionUpgrade, applyImmediately, autoMinorVersionUpgrade, availabilityZone, engineVersion, kmsKeyArn, multiAz, preferredMaintenanceWindow, publiclyAccessible, replicationInstanceArn, replicationInstanceClass, replicationInstanceId, replicationInstancePrivateIps, replicationInstancePublicIps, replicationSubnetGroupId, tags, tagsAll, vpcSecurityGroupIds);
        }
    }
}
