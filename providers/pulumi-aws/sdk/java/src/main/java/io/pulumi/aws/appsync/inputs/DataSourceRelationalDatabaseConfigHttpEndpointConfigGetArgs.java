// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appsync.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DataSourceRelationalDatabaseConfigHttpEndpointConfigGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DataSourceRelationalDatabaseConfigHttpEndpointConfigGetArgs Empty = new DataSourceRelationalDatabaseConfigHttpEndpointConfigGetArgs();

    /**
     * AWS secret store ARN for database credentials.
     * 
     */
    @InputImport(name="awsSecretStoreArn", required=true)
      private final Output<String> awsSecretStoreArn;

    public Output<String> getAwsSecretStoreArn() {
        return this.awsSecretStoreArn;
    }

    /**
     * Logical database name.
     * 
     */
    @InputImport(name="databaseName")
      private final @Nullable Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName == null ? Output.empty() : this.databaseName;
    }

    /**
     * Amazon RDS cluster identifier.
     * 
     */
    @InputImport(name="dbClusterIdentifier", required=true)
      private final Output<String> dbClusterIdentifier;

    public Output<String> getDbClusterIdentifier() {
        return this.dbClusterIdentifier;
    }

    /**
     * AWS Region for RDS HTTP endpoint. Defaults to current region.
     * 
     */
    @InputImport(name="region")
      private final @Nullable Output<String> region;

    public Output<String> getRegion() {
        return this.region == null ? Output.empty() : this.region;
    }

    /**
     * Logical schema name.
     * 
     */
    @InputImport(name="schema")
      private final @Nullable Output<String> schema;

    public Output<String> getSchema() {
        return this.schema == null ? Output.empty() : this.schema;
    }

    public DataSourceRelationalDatabaseConfigHttpEndpointConfigGetArgs(
        Output<String> awsSecretStoreArn,
        @Nullable Output<String> databaseName,
        Output<String> dbClusterIdentifier,
        @Nullable Output<String> region,
        @Nullable Output<String> schema) {
        this.awsSecretStoreArn = Objects.requireNonNull(awsSecretStoreArn, "expected parameter 'awsSecretStoreArn' to be non-null");
        this.databaseName = databaseName;
        this.dbClusterIdentifier = Objects.requireNonNull(dbClusterIdentifier, "expected parameter 'dbClusterIdentifier' to be non-null");
        this.region = region;
        this.schema = schema;
    }

    private DataSourceRelationalDatabaseConfigHttpEndpointConfigGetArgs() {
        this.awsSecretStoreArn = Output.empty();
        this.databaseName = Output.empty();
        this.dbClusterIdentifier = Output.empty();
        this.region = Output.empty();
        this.schema = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceRelationalDatabaseConfigHttpEndpointConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> awsSecretStoreArn;
        private @Nullable Output<String> databaseName;
        private Output<String> dbClusterIdentifier;
        private @Nullable Output<String> region;
        private @Nullable Output<String> schema;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSourceRelationalDatabaseConfigHttpEndpointConfigGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsSecretStoreArn = defaults.awsSecretStoreArn;
    	      this.databaseName = defaults.databaseName;
    	      this.dbClusterIdentifier = defaults.dbClusterIdentifier;
    	      this.region = defaults.region;
    	      this.schema = defaults.schema;
        }

        public Builder awsSecretStoreArn(Output<String> awsSecretStoreArn) {
            this.awsSecretStoreArn = Objects.requireNonNull(awsSecretStoreArn);
            return this;
        }

        public Builder awsSecretStoreArn(String awsSecretStoreArn) {
            this.awsSecretStoreArn = Output.of(Objects.requireNonNull(awsSecretStoreArn));
            return this;
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            this.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = Output.ofNullable(databaseName);
            return this;
        }

        public Builder dbClusterIdentifier(Output<String> dbClusterIdentifier) {
            this.dbClusterIdentifier = Objects.requireNonNull(dbClusterIdentifier);
            return this;
        }

        public Builder dbClusterIdentifier(String dbClusterIdentifier) {
            this.dbClusterIdentifier = Output.of(Objects.requireNonNull(dbClusterIdentifier));
            return this;
        }

        public Builder region(@Nullable Output<String> region) {
            this.region = region;
            return this;
        }

        public Builder region(@Nullable String region) {
            this.region = Output.ofNullable(region);
            return this;
        }

        public Builder schema(@Nullable Output<String> schema) {
            this.schema = schema;
            return this;
        }

        public Builder schema(@Nullable String schema) {
            this.schema = Output.ofNullable(schema);
            return this;
        }
        public DataSourceRelationalDatabaseConfigHttpEndpointConfigGetArgs build() {
            return new DataSourceRelationalDatabaseConfigHttpEndpointConfigGetArgs(awsSecretStoreArn, databaseName, dbClusterIdentifier, region, schema);
        }
    }
}
