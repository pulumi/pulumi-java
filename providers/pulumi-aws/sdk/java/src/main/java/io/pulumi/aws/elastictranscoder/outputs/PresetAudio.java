// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elastictranscoder.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PresetAudio {
    /**
     * The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
     * 
     */
    private final @Nullable String audioPackingMode;
    /**
     * The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
     * 
     */
    private final @Nullable String bitRate;
    /**
     * The number of audio channels in the output file
     * 
     */
    private final @Nullable String channels;
    /**
     * The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
     * 
     */
    private final @Nullable String codec;
    /**
     * The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
     * 
     */
    private final @Nullable String sampleRate;

    @CustomType.Constructor
    private PresetAudio(
        @CustomType.Parameter("audioPackingMode") @Nullable String audioPackingMode,
        @CustomType.Parameter("bitRate") @Nullable String bitRate,
        @CustomType.Parameter("channels") @Nullable String channels,
        @CustomType.Parameter("codec") @Nullable String codec,
        @CustomType.Parameter("sampleRate") @Nullable String sampleRate) {
        this.audioPackingMode = audioPackingMode;
        this.bitRate = bitRate;
        this.channels = channels;
        this.codec = codec;
        this.sampleRate = sampleRate;
    }

    /**
     * The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
     * 
    */
    public Optional<String> getAudioPackingMode() {
        return Optional.ofNullable(this.audioPackingMode);
    }
    /**
     * The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
     * 
    */
    public Optional<String> getBitRate() {
        return Optional.ofNullable(this.bitRate);
    }
    /**
     * The number of audio channels in the output file
     * 
    */
    public Optional<String> getChannels() {
        return Optional.ofNullable(this.channels);
    }
    /**
     * The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
     * 
    */
    public Optional<String> getCodec() {
        return Optional.ofNullable(this.codec);
    }
    /**
     * The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
     * 
    */
    public Optional<String> getSampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PresetAudio defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String audioPackingMode;
        private @Nullable String bitRate;
        private @Nullable String channels;
        private @Nullable String codec;
        private @Nullable String sampleRate;

        public Builder() {
    	      // Empty
        }

        public Builder(PresetAudio defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audioPackingMode = defaults.audioPackingMode;
    	      this.bitRate = defaults.bitRate;
    	      this.channels = defaults.channels;
    	      this.codec = defaults.codec;
    	      this.sampleRate = defaults.sampleRate;
        }

        public Builder audioPackingMode(@Nullable String audioPackingMode) {
            this.audioPackingMode = audioPackingMode;
            return this;
        }

        public Builder bitRate(@Nullable String bitRate) {
            this.bitRate = bitRate;
            return this;
        }

        public Builder channels(@Nullable String channels) {
            this.channels = channels;
            return this;
        }

        public Builder codec(@Nullable String codec) {
            this.codec = codec;
            return this;
        }

        public Builder sampleRate(@Nullable String sampleRate) {
            this.sampleRate = sampleRate;
            return this;
        }
        public PresetAudio build() {
            return new PresetAudio(audioPackingMode, bitRate, channels, codec, sampleRate);
        }
    }
}
