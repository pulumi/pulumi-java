// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.cloudwatch.EventConnectionArgs;
import io.pulumi.aws.cloudwatch.inputs.EventConnectionState;
import io.pulumi.aws.cloudwatch.outputs.EventConnectionAuthParameters;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides an EventBridge connection resource.
 * 
 * > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
 * 
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     authParameters: {
 *         apiKey: {
 *             key: "x-signature",
 *             value: "1234",
 *         },
 *     },
 *     authorizationType: "API_KEY",
 *     description: "A connection description",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test = aws.cloudwatch.EventConnection("test",
 *     auth_parameters=aws.cloudwatch.EventConnectionAuthParametersArgs(
 *         api_key=aws.cloudwatch.EventConnectionAuthParametersApiKeyArgs(
 *             key="x-signature",
 *             value="1234",
 *         ),
 *     ),
 *     authorization_type="API_KEY",
 *     description="A connection description")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var test = new Aws.CloudWatch.EventConnection("test", new Aws.CloudWatch.EventConnectionArgs
 *         {
 *             AuthParameters = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersArgs
 *             {
 *                 ApiKey = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersApiKeyArgs
 *                 {
 *                     Key = "x-signature",
 *                     Value = "1234",
 *                 },
 *             },
 *             AuthorizationType = "API_KEY",
 *             Description = "A connection description",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudwatch.NewEventConnection(ctx, "test", &cloudwatch.EventConnectionArgs{
 * 			AuthParameters: &cloudwatch.EventConnectionAuthParametersArgs{
 * 				ApiKey: &cloudwatch.EventConnectionAuthParametersApiKeyArgs{
 * 					Key:   pulumi.String("x-signature"),
 * 					Value: pulumi.String("1234"),
 * 				},
 * 			},
 * 			AuthorizationType: pulumi.String("API_KEY"),
 * 			Description:       pulumi.String("A connection description"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Basic Authorization
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     authParameters: {
 *         basic: {
 *             password: "Pass1234!",
 *             username: "user",
 *         },
 *     },
 *     authorizationType: "BASIC",
 *     description: "A connection description",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test = aws.cloudwatch.EventConnection("test",
 *     auth_parameters=aws.cloudwatch.EventConnectionAuthParametersArgs(
 *         basic=aws.cloudwatch.EventConnectionAuthParametersBasicArgs(
 *             password="Pass1234!",
 *             username="user",
 *         ),
 *     ),
 *     authorization_type="BASIC",
 *     description="A connection description")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var test = new Aws.CloudWatch.EventConnection("test", new Aws.CloudWatch.EventConnectionArgs
 *         {
 *             AuthParameters = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersArgs
 *             {
 *                 Basic = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersBasicArgs
 *                 {
 *                     Password = "Pass1234!",
 *                     Username = "user",
 *                 },
 *             },
 *             AuthorizationType = "BASIC",
 *             Description = "A connection description",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudwatch.NewEventConnection(ctx, "test", &cloudwatch.EventConnectionArgs{
 * 			AuthParameters: &cloudwatch.EventConnectionAuthParametersArgs{
 * 				Basic: &cloudwatch.EventConnectionAuthParametersBasicArgs{
 * 					Password: pulumi.String("Pass1234!"),
 * 					Username: pulumi.String("user"),
 * 				},
 * 			},
 * 			AuthorizationType: pulumi.String("BASIC"),
 * 			Description:       pulumi.String("A connection description"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### OAuth Authorization
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     authParameters: {
 *         oauth: {
 *             authorizationEndpoint: "https://auth.url.com/endpoint",
 *             clientParameters: {
 *                 clientId: "1234567890",
 *                 clientSecret: "Pass1234!",
 *             },
 *             httpMethod: "GET",
 *             oauthHttpParameters: {
 *                 bodies: [{
 *                     isValueSecret: false,
 *                     key: "body-parameter-key",
 *                     value: "body-parameter-value",
 *                 }],
 *                 headers: [{
 *                     isValueSecret: false,
 *                     key: "header-parameter-key",
 *                     value: "header-parameter-value",
 *                 }],
 *                 queryStrings: [{
 *                     isValueSecret: false,
 *                     key: "query-string-parameter-key",
 *                     value: "query-string-parameter-value",
 *                 }],
 *             },
 *         },
 *     },
 *     authorizationType: "OAUTH_CLIENT_CREDENTIALS",
 *     description: "A connection description",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test = aws.cloudwatch.EventConnection("test",
 *     auth_parameters=aws.cloudwatch.EventConnectionAuthParametersArgs(
 *         oauth=aws.cloudwatch.EventConnectionAuthParametersOauthArgs(
 *             authorization_endpoint="https://auth.url.com/endpoint",
 *             client_parameters=aws.cloudwatch.EventConnectionAuthParametersOauthClientParametersArgs(
 *                 client_id="1234567890",
 *                 client_secret="Pass1234!",
 *             ),
 *             http_method="GET",
 *             oauth_http_parameters=aws.cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersArgs(
 *                 body=[{
 *                     "isValueSecret": False,
 *                     "key": "body-parameter-key",
 *                     "value": "body-parameter-value",
 *                 }],
 *                 header=[{
 *                     "isValueSecret": False,
 *                     "key": "header-parameter-key",
 *                     "value": "header-parameter-value",
 *                 }],
 *                 query_string=[{
 *                     "isValueSecret": False,
 *                     "key": "query-string-parameter-key",
 *                     "value": "query-string-parameter-value",
 *                 }],
 *             ),
 *         ),
 *     ),
 *     authorization_type="OAUTH_CLIENT_CREDENTIALS",
 *     description="A connection description")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var test = new Aws.CloudWatch.EventConnection("test", new Aws.CloudWatch.EventConnectionArgs
 *         {
 *             AuthParameters = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersArgs
 *             {
 *                 Oauth = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersOauthArgs
 *                 {
 *                     AuthorizationEndpoint = "https://auth.url.com/endpoint",
 *                     ClientParameters = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersOauthClientParametersArgs
 *                     {
 *                         ClientId = "1234567890",
 *                         ClientSecret = "Pass1234!",
 *                     },
 *                     HttpMethod = "GET",
 *                     OauthHttpParameters = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersOauthOauthHttpParametersArgs
 *                     {
 *                         Body = 
 *                         {
 *                             
 *                             {
 *                                 { "isValueSecret", false },
 *                                 { "key", "body-parameter-key" },
 *                                 { "value", "body-parameter-value" },
 *                             },
 *                         },
 *                         Header = 
 *                         {
 *                             
 *                             {
 *                                 { "isValueSecret", false },
 *                                 { "key", "header-parameter-key" },
 *                                 { "value", "header-parameter-value" },
 *                             },
 *                         },
 *                         QueryString = 
 *                         {
 *                             
 *                             {
 *                                 { "isValueSecret", false },
 *                                 { "key", "query-string-parameter-key" },
 *                                 { "value", "query-string-parameter-value" },
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *             AuthorizationType = "OAUTH_CLIENT_CREDENTIALS",
 *             Description = "A connection description",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudwatch.NewEventConnection(ctx, "test", &cloudwatch.EventConnectionArgs{
 * 			AuthParameters: &cloudwatch.EventConnectionAuthParametersArgs{
 * 				Oauth: &cloudwatch.EventConnectionAuthParametersOauthArgs{
 * 					AuthorizationEndpoint: pulumi.String("https://auth.url.com/endpoint"),
 * 					ClientParameters: &cloudwatch.EventConnectionAuthParametersOauthClientParametersArgs{
 * 						ClientId:     pulumi.String("1234567890"),
 * 						ClientSecret: pulumi.String("Pass1234!"),
 * 					},
 * 					HttpMethod: pulumi.String("GET"),
 * 					OauthHttpParameters: &cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersArgs{
 * 						Body: []map[string]interface{}{
 * 							map[string]interface{}{
 * 								"isValueSecret": false,
 * 								"key":           "body-parameter-key",
 * 								"value":         "body-parameter-value",
 * 							},
 * 						},
 * 						Header: []map[string]interface{}{
 * 							map[string]interface{}{
 * 								"isValueSecret": false,
 * 								"key":           "header-parameter-key",
 * 								"value":         "header-parameter-value",
 * 							},
 * 						},
 * 						QueryString: []map[string]interface{}{
 * 							map[string]interface{}{
 * 								"isValueSecret": false,
 * 								"key":           "query-string-parameter-key",
 * 								"value":         "query-string-parameter-value",
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 			AuthorizationType: pulumi.String("OAUTH_CLIENT_CREDENTIALS"),
 * 			Description:       pulumi.String("A connection description"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * {{% /example %}}
 * {{% example %}}
 * ### Invocation Http Parameters
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const test = new aws.cloudwatch.EventConnection("test", {
 *     authParameters: {
 *         basic: {
 *             password: "Pass1234!",
 *             username: "user",
 *         },
 *         invocationHttpParameters: {
 *             bodies: [
 *                 {
 *                     isValueSecret: false,
 *                     key: "body-parameter-key",
 *                     value: "body-parameter-value",
 *                 },
 *                 {
 *                     isValueSecret: true,
 *                     key: "body-parameter-key2",
 *                     value: "body-parameter-value2",
 *                 },
 *             ],
 *             headers: [{
 *                 isValueSecret: false,
 *                 key: "header-parameter-key",
 *                 value: "header-parameter-value",
 *             }],
 *             queryStrings: [{
 *                 isValueSecret: false,
 *                 key: "query-string-parameter-key",
 *                 value: "query-string-parameter-value",
 *             }],
 *         },
 *     },
 *     authorizationType: "BASIC",
 *     description: "A connection description",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test = aws.cloudwatch.EventConnection("test",
 *     auth_parameters=aws.cloudwatch.EventConnectionAuthParametersArgs(
 *         basic=aws.cloudwatch.EventConnectionAuthParametersBasicArgs(
 *             password="Pass1234!",
 *             username="user",
 *         ),
 *         invocation_http_parameters=aws.cloudwatch.EventConnectionAuthParametersInvocationHttpParametersArgs(
 *             body=[
 *                 {
 *                     "isValueSecret": False,
 *                     "key": "body-parameter-key",
 *                     "value": "body-parameter-value",
 *                 },
 *                 {
 *                     "isValueSecret": True,
 *                     "key": "body-parameter-key2",
 *                     "value": "body-parameter-value2",
 *                 },
 *             ],
 *             header=[{
 *                 "isValueSecret": False,
 *                 "key": "header-parameter-key",
 *                 "value": "header-parameter-value",
 *             }],
 *             query_string=[{
 *                 "isValueSecret": False,
 *                 "key": "query-string-parameter-key",
 *                 "value": "query-string-parameter-value",
 *             }],
 *         ),
 *     ),
 *     authorization_type="BASIC",
 *     description="A connection description")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var test = new Aws.CloudWatch.EventConnection("test", new Aws.CloudWatch.EventConnectionArgs
 *         {
 *             AuthParameters = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersArgs
 *             {
 *                 Basic = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersBasicArgs
 *                 {
 *                     Password = "Pass1234!",
 *                     Username = "user",
 *                 },
 *                 InvocationHttpParameters = new Aws.CloudWatch.Inputs.EventConnectionAuthParametersInvocationHttpParametersArgs
 *                 {
 *                     Body = 
 *                     {
 *                         
 *                         {
 *                             { "isValueSecret", false },
 *                             { "key", "body-parameter-key" },
 *                             { "value", "body-parameter-value" },
 *                         },
 *                         
 *                         {
 *                             { "isValueSecret", true },
 *                             { "key", "body-parameter-key2" },
 *                             { "value", "body-parameter-value2" },
 *                         },
 *                     },
 *                     Header = 
 *                     {
 *                         
 *                         {
 *                             { "isValueSecret", false },
 *                             { "key", "header-parameter-key" },
 *                             { "value", "header-parameter-value" },
 *                         },
 *                     },
 *                     QueryString = 
 *                     {
 *                         
 *                         {
 *                             { "isValueSecret", false },
 *                             { "key", "query-string-parameter-key" },
 *                             { "value", "query-string-parameter-value" },
 *                         },
 *                     },
 *                 },
 *             },
 *             AuthorizationType = "BASIC",
 *             Description = "A connection description",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudwatch.NewEventConnection(ctx, "test", &cloudwatch.EventConnectionArgs{
 * 			AuthParameters: &cloudwatch.EventConnectionAuthParametersArgs{
 * 				Basic: &cloudwatch.EventConnectionAuthParametersBasicArgs{
 * 					Password: pulumi.String("Pass1234!"),
 * 					Username: pulumi.String("user"),
 * 				},
 * 				InvocationHttpParameters: &cloudwatch.EventConnectionAuthParametersInvocationHttpParametersArgs{
 * 					Body: []interface{}{
 * 						map[string]interface{}{
 * 							"isValueSecret": false,
 * 							"key":           "body-parameter-key",
 * 							"value":         "body-parameter-value",
 * 						},
 * 						map[string]interface{}{
 * 							"isValueSecret": true,
 * 							"key":           "body-parameter-key2",
 * 							"value":         "body-parameter-value2",
 * 						},
 * 					},
 * 					Header: []map[string]interface{}{
 * 						map[string]interface{}{
 * 							"isValueSecret": false,
 * 							"key":           "header-parameter-key",
 * 							"value":         "header-parameter-value",
 * 						},
 * 					},
 * 					QueryString: []map[string]interface{}{
 * 						map[string]interface{}{
 * 							"isValueSecret": false,
 * 							"key":           "query-string-parameter-key",
 * 							"value":         "query-string-parameter-value",
 * 						},
 * 					},
 * 				},
 * 			},
 * 			AuthorizationType: pulumi.String("BASIC"),
 * 			Description:       pulumi.String("A connection description"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * EventBridge Connection can be imported using the `name`, e.g., console
 * 
 * ```sh
 *  $ pulumi import aws:cloudwatch/eventConnection:EventConnection test ngrok-connection
 * ```
 * 
 *  
 */
@ResourceType(type="aws:cloudwatch/eventConnection:EventConnection")
public class EventConnection extends io.pulumi.resources.CustomResource {
    /**
     * The Amazon Resource Name (ARN) of the connection.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the connection.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Parameters used for authorization. A maximum of 1 are allowed. Documented below.
     * 
     */
    @Export(name="authParameters", type=EventConnectionAuthParameters.class, parameters={})
    private Output<EventConnectionAuthParameters> authParameters;

    /**
     * @return Parameters used for authorization. A maximum of 1 are allowed. Documented below.
     * 
     */
    public Output<EventConnectionAuthParameters> getAuthParameters() {
        return this.authParameters;
    }
    /**
     * Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
     * 
     */
    @Export(name="authorizationType", type=String.class, parameters={})
    private Output<String> authorizationType;

    /**
     * @return Choose the type of authorization to use for the connection. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
     * 
     */
    public Output<String> getAuthorizationType() {
        return this.authorizationType;
    }
    /**
     * Enter a description for the connection. Maximum of 512 characters.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Enter a description for the connection. Maximum of 512 characters.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the new connection. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The Amazon Resource Name (ARN) of the secret created from the authorization parameters specified for the connection.
     * 
     */
    @Export(name="secretArn", type=String.class, parameters={})
    private Output<String> secretArn;

    /**
     * @return The Amazon Resource Name (ARN) of the secret created from the authorization parameters specified for the connection.
     * 
     */
    public Output<String> getSecretArn() {
        return this.secretArn;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventConnection(String name) {
        this(name, EventConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventConnection(String name, EventConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventConnection(String name, EventConnectionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventConnection:EventConnection", name, args == null ? EventConnectionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private EventConnection(String name, Output<String> id, @Nullable EventConnectionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventConnection:EventConnection", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventConnection get(String name, Output<String> id, @Nullable EventConnectionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new EventConnection(name, id, state, options);
    }
}
