// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.glue.ConnectionArgs;
import io.pulumi.aws.glue.inputs.ConnectionState;
import io.pulumi.aws.glue.outputs.ConnectionPhysicalConnectionRequirements;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a Glue Connection resource.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Glue Connections can be imported using the `CATALOG-ID` (AWS account ID if not custom) and `NAME`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:glue/connection:Connection MyConnection 123456789012:MyConnection
 * ```
 * 
 */
@ResourceType(type="aws:glue/connection:Connection")
public class Connection extends io.pulumi.resources.CustomResource {
    /**
     * The ARN of the Glue Connection.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the Glue Connection.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
     * 
     */
    @Export(name="catalogId", type=String.class, parameters={})
    private Output<String> catalogId;

    /**
     * @return The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
     * 
     */
    public Output<String> getCatalogId() {
        return this.catalogId;
    }
    /**
     * A map of key-value pairs used as parameters for this connection.
     * 
     */
    @Export(name="connectionProperties", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> connectionProperties;

    /**
     * @return A map of key-value pairs used as parameters for this connection.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getConnectionProperties() {
        return this.connectionProperties;
    }
    /**
     * The type of the connection. Supported are: `JDBC`, `MONGODB`, `KAFKA`, and `NETWORK`. Defaults to `JBDC`.
     * 
     */
    @Export(name="connectionType", type=String.class, parameters={})
    private Output</* @Nullable */ String> connectionType;

    /**
     * @return The type of the connection. Supported are: `JDBC`, `MONGODB`, `KAFKA`, and `NETWORK`. Defaults to `JBDC`.
     * 
     */
    public Output</* @Nullable */ String> getConnectionType() {
        return this.connectionType;
    }
    /**
     * Description of the connection.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the connection.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * A list of criteria that can be used in selecting this connection.
     * 
     */
    @Export(name="matchCriterias", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> matchCriterias;

    /**
     * @return A list of criteria that can be used in selecting this connection.
     * 
     */
    public Output</* @Nullable */ List<String>> getMatchCriterias() {
        return this.matchCriterias;
    }
    /**
     * The name of the connection.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the connection.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
     * 
     */
    @Export(name="physicalConnectionRequirements", type=ConnectionPhysicalConnectionRequirements.class, parameters={})
    private Output</* @Nullable */ ConnectionPhysicalConnectionRequirements> physicalConnectionRequirements;

    /**
     * @return A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
     * 
     */
    public Output</* @Nullable */ ConnectionPhysicalConnectionRequirements> getPhysicalConnectionRequirements() {
        return this.physicalConnectionRequirements;
    }
    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Connection(String name) {
        this(name, ConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Connection(String name, @Nullable ConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Connection(String name, @Nullable ConnectionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/connection:Connection", name, args == null ? ConnectionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Connection(String name, Output<String> id, @Nullable ConnectionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/connection:Connection", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Connection get(String name, Output<String> id, @Nullable ConnectionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Connection(name, id, state, options);
    }
}
