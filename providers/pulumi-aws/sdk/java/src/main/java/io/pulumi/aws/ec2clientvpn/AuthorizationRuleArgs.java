// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2clientvpn;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AuthorizationRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final AuthorizationRuleArgs Empty = new AuthorizationRuleArgs();

    /**
     * The ID of the group to which the authorization rule grants access. One of `access_group_id` or `authorize_all_groups` must be set.
     * 
     */
    @Import(name="accessGroupId")
      private final @Nullable Output<String> accessGroupId;

    public Output<String> getAccessGroupId() {
        return this.accessGroupId == null ? Codegen.empty() : this.accessGroupId;
    }

    /**
     * Indicates whether the authorization rule grants access to all clients. One of `access_group_id` or `authorize_all_groups` must be set.
     * 
     */
    @Import(name="authorizeAllGroups")
      private final @Nullable Output<Boolean> authorizeAllGroups;

    public Output<Boolean> getAuthorizeAllGroups() {
        return this.authorizeAllGroups == null ? Codegen.empty() : this.authorizeAllGroups;
    }

    /**
     * The ID of the Client VPN endpoint.
     * 
     */
    @Import(name="clientVpnEndpointId", required=true)
      private final Output<String> clientVpnEndpointId;

    public Output<String> getClientVpnEndpointId() {
        return this.clientVpnEndpointId;
    }

    /**
     * A brief description of the authorization rule.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
     * 
     */
    @Import(name="targetNetworkCidr", required=true)
      private final Output<String> targetNetworkCidr;

    public Output<String> getTargetNetworkCidr() {
        return this.targetNetworkCidr;
    }

    public AuthorizationRuleArgs(
        @Nullable Output<String> accessGroupId,
        @Nullable Output<Boolean> authorizeAllGroups,
        Output<String> clientVpnEndpointId,
        @Nullable Output<String> description,
        Output<String> targetNetworkCidr) {
        this.accessGroupId = accessGroupId;
        this.authorizeAllGroups = authorizeAllGroups;
        this.clientVpnEndpointId = Objects.requireNonNull(clientVpnEndpointId, "expected parameter 'clientVpnEndpointId' to be non-null");
        this.description = description;
        this.targetNetworkCidr = Objects.requireNonNull(targetNetworkCidr, "expected parameter 'targetNetworkCidr' to be non-null");
    }

    private AuthorizationRuleArgs() {
        this.accessGroupId = Codegen.empty();
        this.authorizeAllGroups = Codegen.empty();
        this.clientVpnEndpointId = Codegen.empty();
        this.description = Codegen.empty();
        this.targetNetworkCidr = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorizationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> accessGroupId;
        private @Nullable Output<Boolean> authorizeAllGroups;
        private Output<String> clientVpnEndpointId;
        private @Nullable Output<String> description;
        private Output<String> targetNetworkCidr;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthorizationRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessGroupId = defaults.accessGroupId;
    	      this.authorizeAllGroups = defaults.authorizeAllGroups;
    	      this.clientVpnEndpointId = defaults.clientVpnEndpointId;
    	      this.description = defaults.description;
    	      this.targetNetworkCidr = defaults.targetNetworkCidr;
        }

        public Builder accessGroupId(@Nullable Output<String> accessGroupId) {
            this.accessGroupId = accessGroupId;
            return this;
        }
        public Builder accessGroupId(@Nullable String accessGroupId) {
            this.accessGroupId = Codegen.ofNullable(accessGroupId);
            return this;
        }
        public Builder authorizeAllGroups(@Nullable Output<Boolean> authorizeAllGroups) {
            this.authorizeAllGroups = authorizeAllGroups;
            return this;
        }
        public Builder authorizeAllGroups(@Nullable Boolean authorizeAllGroups) {
            this.authorizeAllGroups = Codegen.ofNullable(authorizeAllGroups);
            return this;
        }
        public Builder clientVpnEndpointId(Output<String> clientVpnEndpointId) {
            this.clientVpnEndpointId = Objects.requireNonNull(clientVpnEndpointId);
            return this;
        }
        public Builder clientVpnEndpointId(String clientVpnEndpointId) {
            this.clientVpnEndpointId = Output.of(Objects.requireNonNull(clientVpnEndpointId));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder targetNetworkCidr(Output<String> targetNetworkCidr) {
            this.targetNetworkCidr = Objects.requireNonNull(targetNetworkCidr);
            return this;
        }
        public Builder targetNetworkCidr(String targetNetworkCidr) {
            this.targetNetworkCidr = Output.of(Objects.requireNonNull(targetNetworkCidr));
            return this;
        }        public AuthorizationRuleArgs build() {
            return new AuthorizationRuleArgs(accessGroupId, authorizeAllGroups, clientVpnEndpointId, description, targetNetworkCidr);
        }
    }
}
