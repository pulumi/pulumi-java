// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue.inputs;

import io.pulumi.aws.glue.inputs.MLTransformInputRecordTableGetArgs;
import io.pulumi.aws.glue.inputs.MLTransformParametersGetArgs;
import io.pulumi.aws.glue.inputs.MLTransformSchemaGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MLTransformState extends io.pulumi.resources.ResourceArgs {

    public static final MLTransformState Empty = new MLTransformState();

    /**
     * Amazon Resource Name (ARN) of Glue ML Transform.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Description of the ML Transform.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The version of glue to use, for example "1.0". For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
     * 
     */
    @InputImport(name="glueVersion")
      private final @Nullable Input<String> glueVersion;

    public Input<String> getGlueVersion() {
        return this.glueVersion == null ? Input.empty() : this.glueVersion;
    }

    /**
     * A list of AWS Glue table definitions used by the transform. see Input Record Tables.
     * 
     */
    @InputImport(name="inputRecordTables")
      private final @Nullable Input<List<MLTransformInputRecordTableGetArgs>> inputRecordTables;

    public Input<List<MLTransformInputRecordTableGetArgs>> getInputRecordTables() {
        return this.inputRecordTables == null ? Input.empty() : this.inputRecordTables;
    }

    /**
     * The number of labels available for this transform.
     * 
     */
    @InputImport(name="labelCount")
      private final @Nullable Input<Integer> labelCount;

    public Input<Integer> getLabelCount() {
        return this.labelCount == null ? Input.empty() : this.labelCount;
    }

    /**
     * The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from `2` to `100` DPUs; the default is `10`. `max_capacity` is a mutually exclusive option with `number_of_workers` and `worker_type`.
     * 
     */
    @InputImport(name="maxCapacity")
      private final @Nullable Input<Double> maxCapacity;

    public Input<Double> getMaxCapacity() {
        return this.maxCapacity == null ? Input.empty() : this.maxCapacity;
    }

    /**
     * The maximum number of times to retry this ML Transform if it fails.
     * 
     */
    @InputImport(name="maxRetries")
      private final @Nullable Input<Integer> maxRetries;

    public Input<Integer> getMaxRetries() {
        return this.maxRetries == null ? Input.empty() : this.maxRetries;
    }

    /**
     * The name you assign to this ML Transform. It must be unique in your account.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The number of workers of a defined `worker_type` that are allocated when an ML Transform runs. Required with `worker_type`.
     * 
     */
    @InputImport(name="numberOfWorkers")
      private final @Nullable Input<Integer> numberOfWorkers;

    public Input<Integer> getNumberOfWorkers() {
        return this.numberOfWorkers == null ? Input.empty() : this.numberOfWorkers;
    }

    /**
     * The algorithmic parameters that are specific to the transform type used. Conditionally dependent on the transform type. see Parameters.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Input<MLTransformParametersGetArgs> parameters;

    public Input<MLTransformParametersGetArgs> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * The ARN of the IAM role associated with this ML Transform.
     * 
     */
    @InputImport(name="roleArn")
      private final @Nullable Input<String> roleArn;

    public Input<String> getRoleArn() {
        return this.roleArn == null ? Input.empty() : this.roleArn;
    }

    /**
     * The object that represents the schema that this transform accepts. see Schema.
     * 
     */
    @InputImport(name="schemas")
      private final @Nullable Input<List<MLTransformSchemaGetArgs>> schemas;

    public Input<List<MLTransformSchemaGetArgs>> getSchemas() {
        return this.schemas == null ? Input.empty() : this.schemas;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The ML Transform timeout in minutes. The default is 2880 minutes (48 hours).
     * 
     */
    @InputImport(name="timeout")
      private final @Nullable Input<Integer> timeout;

    public Input<Integer> getTimeout() {
        return this.timeout == null ? Input.empty() : this.timeout;
    }

    /**
     * The type of predefined worker that is allocated when an ML Transform runs. Accepts a value of `Standard`, `G.1X`, or `G.2X`. Required with `number_of_workers`.
     * 
     */
    @InputImport(name="workerType")
      private final @Nullable Input<String> workerType;

    public Input<String> getWorkerType() {
        return this.workerType == null ? Input.empty() : this.workerType;
    }

    public MLTransformState(
        @Nullable Input<String> arn,
        @Nullable Input<String> description,
        @Nullable Input<String> glueVersion,
        @Nullable Input<List<MLTransformInputRecordTableGetArgs>> inputRecordTables,
        @Nullable Input<Integer> labelCount,
        @Nullable Input<Double> maxCapacity,
        @Nullable Input<Integer> maxRetries,
        @Nullable Input<String> name,
        @Nullable Input<Integer> numberOfWorkers,
        @Nullable Input<MLTransformParametersGetArgs> parameters,
        @Nullable Input<String> roleArn,
        @Nullable Input<List<MLTransformSchemaGetArgs>> schemas,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<Integer> timeout,
        @Nullable Input<String> workerType) {
        this.arn = arn;
        this.description = description;
        this.glueVersion = glueVersion;
        this.inputRecordTables = inputRecordTables;
        this.labelCount = labelCount;
        this.maxCapacity = maxCapacity;
        this.maxRetries = maxRetries;
        this.name = name;
        this.numberOfWorkers = numberOfWorkers;
        this.parameters = parameters;
        this.roleArn = roleArn;
        this.schemas = schemas;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.timeout = timeout;
        this.workerType = workerType;
    }

    private MLTransformState() {
        this.arn = Input.empty();
        this.description = Input.empty();
        this.glueVersion = Input.empty();
        this.inputRecordTables = Input.empty();
        this.labelCount = Input.empty();
        this.maxCapacity = Input.empty();
        this.maxRetries = Input.empty();
        this.name = Input.empty();
        this.numberOfWorkers = Input.empty();
        this.parameters = Input.empty();
        this.roleArn = Input.empty();
        this.schemas = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.timeout = Input.empty();
        this.workerType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MLTransformState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> description;
        private @Nullable Input<String> glueVersion;
        private @Nullable Input<List<MLTransformInputRecordTableGetArgs>> inputRecordTables;
        private @Nullable Input<Integer> labelCount;
        private @Nullable Input<Double> maxCapacity;
        private @Nullable Input<Integer> maxRetries;
        private @Nullable Input<String> name;
        private @Nullable Input<Integer> numberOfWorkers;
        private @Nullable Input<MLTransformParametersGetArgs> parameters;
        private @Nullable Input<String> roleArn;
        private @Nullable Input<List<MLTransformSchemaGetArgs>> schemas;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<Integer> timeout;
        private @Nullable Input<String> workerType;

        public Builder() {
    	      // Empty
        }

        public Builder(MLTransformState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.glueVersion = defaults.glueVersion;
    	      this.inputRecordTables = defaults.inputRecordTables;
    	      this.labelCount = defaults.labelCount;
    	      this.maxCapacity = defaults.maxCapacity;
    	      this.maxRetries = defaults.maxRetries;
    	      this.name = defaults.name;
    	      this.numberOfWorkers = defaults.numberOfWorkers;
    	      this.parameters = defaults.parameters;
    	      this.roleArn = defaults.roleArn;
    	      this.schemas = defaults.schemas;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.timeout = defaults.timeout;
    	      this.workerType = defaults.workerType;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setGlueVersion(@Nullable Input<String> glueVersion) {
            this.glueVersion = glueVersion;
            return this;
        }

        public Builder setGlueVersion(@Nullable String glueVersion) {
            this.glueVersion = Input.ofNullable(glueVersion);
            return this;
        }

        public Builder setInputRecordTables(@Nullable Input<List<MLTransformInputRecordTableGetArgs>> inputRecordTables) {
            this.inputRecordTables = inputRecordTables;
            return this;
        }

        public Builder setInputRecordTables(@Nullable List<MLTransformInputRecordTableGetArgs> inputRecordTables) {
            this.inputRecordTables = Input.ofNullable(inputRecordTables);
            return this;
        }

        public Builder setLabelCount(@Nullable Input<Integer> labelCount) {
            this.labelCount = labelCount;
            return this;
        }

        public Builder setLabelCount(@Nullable Integer labelCount) {
            this.labelCount = Input.ofNullable(labelCount);
            return this;
        }

        public Builder setMaxCapacity(@Nullable Input<Double> maxCapacity) {
            this.maxCapacity = maxCapacity;
            return this;
        }

        public Builder setMaxCapacity(@Nullable Double maxCapacity) {
            this.maxCapacity = Input.ofNullable(maxCapacity);
            return this;
        }

        public Builder setMaxRetries(@Nullable Input<Integer> maxRetries) {
            this.maxRetries = maxRetries;
            return this;
        }

        public Builder setMaxRetries(@Nullable Integer maxRetries) {
            this.maxRetries = Input.ofNullable(maxRetries);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNumberOfWorkers(@Nullable Input<Integer> numberOfWorkers) {
            this.numberOfWorkers = numberOfWorkers;
            return this;
        }

        public Builder setNumberOfWorkers(@Nullable Integer numberOfWorkers) {
            this.numberOfWorkers = Input.ofNullable(numberOfWorkers);
            return this;
        }

        public Builder setParameters(@Nullable Input<MLTransformParametersGetArgs> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder setParameters(@Nullable MLTransformParametersGetArgs parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder setRoleArn(@Nullable Input<String> roleArn) {
            this.roleArn = roleArn;
            return this;
        }

        public Builder setRoleArn(@Nullable String roleArn) {
            this.roleArn = Input.ofNullable(roleArn);
            return this;
        }

        public Builder setSchemas(@Nullable Input<List<MLTransformSchemaGetArgs>> schemas) {
            this.schemas = schemas;
            return this;
        }

        public Builder setSchemas(@Nullable List<MLTransformSchemaGetArgs> schemas) {
            this.schemas = Input.ofNullable(schemas);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setTimeout(@Nullable Input<Integer> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder setTimeout(@Nullable Integer timeout) {
            this.timeout = Input.ofNullable(timeout);
            return this;
        }

        public Builder setWorkerType(@Nullable Input<String> workerType) {
            this.workerType = workerType;
            return this;
        }

        public Builder setWorkerType(@Nullable String workerType) {
            this.workerType = Input.ofNullable(workerType);
            return this;
        }
        public MLTransformState build() {
            return new MLTransformState(arn, description, glueVersion, inputRecordTables, labelCount, maxCapacity, maxRetries, name, numberOfWorkers, parameters, roleArn, schemas, tags, tagsAll, timeout, workerType);
        }
    }
}
