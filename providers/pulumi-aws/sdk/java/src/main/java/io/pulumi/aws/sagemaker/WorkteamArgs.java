// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.sagemaker;

import io.pulumi.aws.sagemaker.inputs.WorkteamMemberDefinitionArgs;
import io.pulumi.aws.sagemaker.inputs.WorkteamNotificationConfigurationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WorkteamArgs extends io.pulumi.resources.ResourceArgs {

    public static final WorkteamArgs Empty = new WorkteamArgs();

    /**
     * A description of the work team.
     * 
     */
    @InputImport(name="description", required=true)
      private final Input<String> description;

    public Input<String> getDescription() {
        return this.description;
    }

    /**
     * A list of Member Definitions that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use `cognito_member_definition`. For workforces created using your own OIDC identity provider (IdP) use `oidc_member_definition`. Do not provide input for both of these parameters in a single request. see Member Definition details below.
     * 
     */
    @InputImport(name="memberDefinitions", required=true)
      private final Input<List<WorkteamMemberDefinitionArgs>> memberDefinitions;

    public Input<List<WorkteamMemberDefinitionArgs>> getMemberDefinitions() {
        return this.memberDefinitions;
    }

    /**
     * Configures notification of workers regarding available or expiring work items. see Notification Configuration details below.
     * 
     */
    @InputImport(name="notificationConfiguration")
      private final @Nullable Input<WorkteamNotificationConfigurationArgs> notificationConfiguration;

    public Input<WorkteamNotificationConfigurationArgs> getNotificationConfiguration() {
        return this.notificationConfiguration == null ? Input.empty() : this.notificationConfiguration;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The name of the Workteam (must be unique).
     * 
     */
    @InputImport(name="workforceName", required=true)
      private final Input<String> workforceName;

    public Input<String> getWorkforceName() {
        return this.workforceName;
    }

    /**
     * The name of the workforce.
     * 
     */
    @InputImport(name="workteamName", required=true)
      private final Input<String> workteamName;

    public Input<String> getWorkteamName() {
        return this.workteamName;
    }

    public WorkteamArgs(
        Input<String> description,
        Input<List<WorkteamMemberDefinitionArgs>> memberDefinitions,
        @Nullable Input<WorkteamNotificationConfigurationArgs> notificationConfiguration,
        @Nullable Input<Map<String,String>> tags,
        Input<String> workforceName,
        Input<String> workteamName) {
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.memberDefinitions = Objects.requireNonNull(memberDefinitions, "expected parameter 'memberDefinitions' to be non-null");
        this.notificationConfiguration = notificationConfiguration;
        this.tags = tags;
        this.workforceName = Objects.requireNonNull(workforceName, "expected parameter 'workforceName' to be non-null");
        this.workteamName = Objects.requireNonNull(workteamName, "expected parameter 'workteamName' to be non-null");
    }

    private WorkteamArgs() {
        this.description = Input.empty();
        this.memberDefinitions = Input.empty();
        this.notificationConfiguration = Input.empty();
        this.tags = Input.empty();
        this.workforceName = Input.empty();
        this.workteamName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkteamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> description;
        private Input<List<WorkteamMemberDefinitionArgs>> memberDefinitions;
        private @Nullable Input<WorkteamNotificationConfigurationArgs> notificationConfiguration;
        private @Nullable Input<Map<String,String>> tags;
        private Input<String> workforceName;
        private Input<String> workteamName;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkteamArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.memberDefinitions = defaults.memberDefinitions;
    	      this.notificationConfiguration = defaults.notificationConfiguration;
    	      this.tags = defaults.tags;
    	      this.workforceName = defaults.workforceName;
    	      this.workteamName = defaults.workteamName;
        }

        public Builder setDescription(Input<String> description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }

        public Builder setDescription(String description) {
            this.description = Input.of(Objects.requireNonNull(description));
            return this;
        }

        public Builder setMemberDefinitions(Input<List<WorkteamMemberDefinitionArgs>> memberDefinitions) {
            this.memberDefinitions = Objects.requireNonNull(memberDefinitions);
            return this;
        }

        public Builder setMemberDefinitions(List<WorkteamMemberDefinitionArgs> memberDefinitions) {
            this.memberDefinitions = Input.of(Objects.requireNonNull(memberDefinitions));
            return this;
        }

        public Builder setNotificationConfiguration(@Nullable Input<WorkteamNotificationConfigurationArgs> notificationConfiguration) {
            this.notificationConfiguration = notificationConfiguration;
            return this;
        }

        public Builder setNotificationConfiguration(@Nullable WorkteamNotificationConfigurationArgs notificationConfiguration) {
            this.notificationConfiguration = Input.ofNullable(notificationConfiguration);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setWorkforceName(Input<String> workforceName) {
            this.workforceName = Objects.requireNonNull(workforceName);
            return this;
        }

        public Builder setWorkforceName(String workforceName) {
            this.workforceName = Input.of(Objects.requireNonNull(workforceName));
            return this;
        }

        public Builder setWorkteamName(Input<String> workteamName) {
            this.workteamName = Objects.requireNonNull(workteamName);
            return this;
        }

        public Builder setWorkteamName(String workteamName) {
            this.workteamName = Input.of(Objects.requireNonNull(workteamName));
            return this;
        }
        public WorkteamArgs build() {
            return new WorkteamArgs(description, memberDefinitions, notificationConfiguration, tags, workforceName, workteamName);
        }
    }
}
