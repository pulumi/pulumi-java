// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.sagemaker;

import io.pulumi.aws.sagemaker.inputs.WorkteamMemberDefinitionArgs;
import io.pulumi.aws.sagemaker.inputs.WorkteamNotificationConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WorkteamArgs extends io.pulumi.resources.ResourceArgs {

    public static final WorkteamArgs Empty = new WorkteamArgs();

    /**
     * A description of the work team.
     * 
     */
    @Import(name="description", required=true)
      private final Output<String> description;

    public Output<String> description() {
        return this.description;
    }

    /**
     * A list of Member Definitions that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use `cognito_member_definition`. For workforces created using your own OIDC identity provider (IdP) use `oidc_member_definition`. Do not provide input for both of these parameters in a single request. see Member Definition details below.
     * 
     */
    @Import(name="memberDefinitions", required=true)
      private final Output<List<WorkteamMemberDefinitionArgs>> memberDefinitions;

    public Output<List<WorkteamMemberDefinitionArgs>> memberDefinitions() {
        return this.memberDefinitions;
    }

    /**
     * Configures notification of workers regarding available or expiring work items. see Notification Configuration details below.
     * 
     */
    @Import(name="notificationConfiguration")
      private final @Nullable Output<WorkteamNotificationConfigurationArgs> notificationConfiguration;

    public Output<WorkteamNotificationConfigurationArgs> notificationConfiguration() {
        return this.notificationConfiguration == null ? Codegen.empty() : this.notificationConfiguration;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The name of the Workteam (must be unique).
     * 
     */
    @Import(name="workforceName", required=true)
      private final Output<String> workforceName;

    public Output<String> workforceName() {
        return this.workforceName;
    }

    /**
     * The name of the workforce.
     * 
     */
    @Import(name="workteamName", required=true)
      private final Output<String> workteamName;

    public Output<String> workteamName() {
        return this.workteamName;
    }

    public WorkteamArgs(
        Output<String> description,
        Output<List<WorkteamMemberDefinitionArgs>> memberDefinitions,
        @Nullable Output<WorkteamNotificationConfigurationArgs> notificationConfiguration,
        @Nullable Output<Map<String,String>> tags,
        Output<String> workforceName,
        Output<String> workteamName) {
        this.description = Objects.requireNonNull(description, "expected parameter 'description' to be non-null");
        this.memberDefinitions = Objects.requireNonNull(memberDefinitions, "expected parameter 'memberDefinitions' to be non-null");
        this.notificationConfiguration = notificationConfiguration;
        this.tags = tags;
        this.workforceName = Objects.requireNonNull(workforceName, "expected parameter 'workforceName' to be non-null");
        this.workteamName = Objects.requireNonNull(workteamName, "expected parameter 'workteamName' to be non-null");
    }

    private WorkteamArgs() {
        this.description = Codegen.empty();
        this.memberDefinitions = Codegen.empty();
        this.notificationConfiguration = Codegen.empty();
        this.tags = Codegen.empty();
        this.workforceName = Codegen.empty();
        this.workteamName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkteamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> description;
        private Output<List<WorkteamMemberDefinitionArgs>> memberDefinitions;
        private @Nullable Output<WorkteamNotificationConfigurationArgs> notificationConfiguration;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> workforceName;
        private Output<String> workteamName;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkteamArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.memberDefinitions = defaults.memberDefinitions;
    	      this.notificationConfiguration = defaults.notificationConfiguration;
    	      this.tags = defaults.tags;
    	      this.workforceName = defaults.workforceName;
    	      this.workteamName = defaults.workteamName;
        }

        public Builder description(Output<String> description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder description(String description) {
            this.description = Output.of(Objects.requireNonNull(description));
            return this;
        }
        public Builder memberDefinitions(Output<List<WorkteamMemberDefinitionArgs>> memberDefinitions) {
            this.memberDefinitions = Objects.requireNonNull(memberDefinitions);
            return this;
        }
        public Builder memberDefinitions(List<WorkteamMemberDefinitionArgs> memberDefinitions) {
            this.memberDefinitions = Output.of(Objects.requireNonNull(memberDefinitions));
            return this;
        }
        public Builder memberDefinitions(WorkteamMemberDefinitionArgs... memberDefinitions) {
            return memberDefinitions(List.of(memberDefinitions));
        }
        public Builder notificationConfiguration(@Nullable Output<WorkteamNotificationConfigurationArgs> notificationConfiguration) {
            this.notificationConfiguration = notificationConfiguration;
            return this;
        }
        public Builder notificationConfiguration(@Nullable WorkteamNotificationConfigurationArgs notificationConfiguration) {
            this.notificationConfiguration = Codegen.ofNullable(notificationConfiguration);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder workforceName(Output<String> workforceName) {
            this.workforceName = Objects.requireNonNull(workforceName);
            return this;
        }
        public Builder workforceName(String workforceName) {
            this.workforceName = Output.of(Objects.requireNonNull(workforceName));
            return this;
        }
        public Builder workteamName(Output<String> workteamName) {
            this.workteamName = Objects.requireNonNull(workteamName);
            return this;
        }
        public Builder workteamName(String workteamName) {
            this.workteamName = Output.of(Objects.requireNonNull(workteamName));
            return this;
        }        public WorkteamArgs build() {
            return new WorkteamArgs(description, memberDefinitions, notificationConfiguration, tags, workforceName, workteamName);
        }
    }
}
