// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.signer.inputs;

import io.pulumi.aws.signer.inputs.SigningProfileRevocationRecordGetArgs;
import io.pulumi.aws.signer.inputs.SigningProfileSignatureValidityPeriodGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SigningProfileState extends io.pulumi.resources.ResourceArgs {

    public static final SigningProfileState Empty = new SigningProfileState();

    /**
     * The Amazon Resource Name (ARN) for the signing profile.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * A unique signing profile name. By default generated by the provider. Signing profile names are immutable and cannot be reused after canceled.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A signing profile name prefix. The provider will generate a unique suffix. Conflicts with `name`.
     * 
     */
    @InputImport(name="namePrefix")
      private final @Nullable Input<String> namePrefix;

    public Input<String> getNamePrefix() {
        return this.namePrefix == null ? Input.empty() : this.namePrefix;
    }

    /**
     * A human-readable name for the signing platform associated with the signing profile.
     * 
     */
    @InputImport(name="platformDisplayName")
      private final @Nullable Input<String> platformDisplayName;

    public Input<String> getPlatformDisplayName() {
        return this.platformDisplayName == null ? Input.empty() : this.platformDisplayName;
    }

    /**
     * The ID of the platform that is used by the target signing profile.
     * 
     */
    @InputImport(name="platformId")
      private final @Nullable Input<String> platformId;

    public Input<String> getPlatformId() {
        return this.platformId == null ? Input.empty() : this.platformId;
    }

    /**
     * Revocation information for a signing profile.
     * 
     */
    @InputImport(name="revocationRecords")
      private final @Nullable Input<List<SigningProfileRevocationRecordGetArgs>> revocationRecords;

    public Input<List<SigningProfileRevocationRecordGetArgs>> getRevocationRecords() {
        return this.revocationRecords == null ? Input.empty() : this.revocationRecords;
    }

    /**
     * The validity period for a signing job.
     * 
     */
    @InputImport(name="signatureValidityPeriod")
      private final @Nullable Input<SigningProfileSignatureValidityPeriodGetArgs> signatureValidityPeriod;

    public Input<SigningProfileSignatureValidityPeriodGetArgs> getSignatureValidityPeriod() {
        return this.signatureValidityPeriod == null ? Input.empty() : this.signatureValidityPeriod;
    }

    /**
     * The status of the target signing profile.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * A list of tags associated with the signing profile. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The current version of the signing profile.
     * 
     */
    @InputImport(name="version")
      private final @Nullable Input<String> version;

    public Input<String> getVersion() {
        return this.version == null ? Input.empty() : this.version;
    }

    /**
     * The signing profile ARN, including the profile version.
     * 
     */
    @InputImport(name="versionArn")
      private final @Nullable Input<String> versionArn;

    public Input<String> getVersionArn() {
        return this.versionArn == null ? Input.empty() : this.versionArn;
    }

    public SigningProfileState(
        @Nullable Input<String> arn,
        @Nullable Input<String> name,
        @Nullable Input<String> namePrefix,
        @Nullable Input<String> platformDisplayName,
        @Nullable Input<String> platformId,
        @Nullable Input<List<SigningProfileRevocationRecordGetArgs>> revocationRecords,
        @Nullable Input<SigningProfileSignatureValidityPeriodGetArgs> signatureValidityPeriod,
        @Nullable Input<String> status,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> version,
        @Nullable Input<String> versionArn) {
        this.arn = arn;
        this.name = name;
        this.namePrefix = namePrefix;
        this.platformDisplayName = platformDisplayName;
        this.platformId = platformId;
        this.revocationRecords = revocationRecords;
        this.signatureValidityPeriod = signatureValidityPeriod;
        this.status = status;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.version = version;
        this.versionArn = versionArn;
    }

    private SigningProfileState() {
        this.arn = Input.empty();
        this.name = Input.empty();
        this.namePrefix = Input.empty();
        this.platformDisplayName = Input.empty();
        this.platformId = Input.empty();
        this.revocationRecords = Input.empty();
        this.signatureValidityPeriod = Input.empty();
        this.status = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.version = Input.empty();
        this.versionArn = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SigningProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> name;
        private @Nullable Input<String> namePrefix;
        private @Nullable Input<String> platformDisplayName;
        private @Nullable Input<String> platformId;
        private @Nullable Input<List<SigningProfileRevocationRecordGetArgs>> revocationRecords;
        private @Nullable Input<SigningProfileSignatureValidityPeriodGetArgs> signatureValidityPeriod;
        private @Nullable Input<String> status;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> version;
        private @Nullable Input<String> versionArn;

        public Builder() {
    	      // Empty
        }

        public Builder(SigningProfileState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.platformDisplayName = defaults.platformDisplayName;
    	      this.platformId = defaults.platformId;
    	      this.revocationRecords = defaults.revocationRecords;
    	      this.signatureValidityPeriod = defaults.signatureValidityPeriod;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.version = defaults.version;
    	      this.versionArn = defaults.versionArn;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNamePrefix(@Nullable Input<String> namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }

        public Builder setNamePrefix(@Nullable String namePrefix) {
            this.namePrefix = Input.ofNullable(namePrefix);
            return this;
        }

        public Builder setPlatformDisplayName(@Nullable Input<String> platformDisplayName) {
            this.platformDisplayName = platformDisplayName;
            return this;
        }

        public Builder setPlatformDisplayName(@Nullable String platformDisplayName) {
            this.platformDisplayName = Input.ofNullable(platformDisplayName);
            return this;
        }

        public Builder setPlatformId(@Nullable Input<String> platformId) {
            this.platformId = platformId;
            return this;
        }

        public Builder setPlatformId(@Nullable String platformId) {
            this.platformId = Input.ofNullable(platformId);
            return this;
        }

        public Builder setRevocationRecords(@Nullable Input<List<SigningProfileRevocationRecordGetArgs>> revocationRecords) {
            this.revocationRecords = revocationRecords;
            return this;
        }

        public Builder setRevocationRecords(@Nullable List<SigningProfileRevocationRecordGetArgs> revocationRecords) {
            this.revocationRecords = Input.ofNullable(revocationRecords);
            return this;
        }

        public Builder setSignatureValidityPeriod(@Nullable Input<SigningProfileSignatureValidityPeriodGetArgs> signatureValidityPeriod) {
            this.signatureValidityPeriod = signatureValidityPeriod;
            return this;
        }

        public Builder setSignatureValidityPeriod(@Nullable SigningProfileSignatureValidityPeriodGetArgs signatureValidityPeriod) {
            this.signatureValidityPeriod = Input.ofNullable(signatureValidityPeriod);
            return this;
        }

        public Builder setStatus(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setVersion(@Nullable Input<String> version) {
            this.version = version;
            return this;
        }

        public Builder setVersion(@Nullable String version) {
            this.version = Input.ofNullable(version);
            return this;
        }

        public Builder setVersionArn(@Nullable Input<String> versionArn) {
            this.versionArn = versionArn;
            return this;
        }

        public Builder setVersionArn(@Nullable String versionArn) {
            this.versionArn = Input.ofNullable(versionArn);
            return this;
        }
        public SigningProfileState build() {
            return new SigningProfileState(arn, name, namePrefix, platformDisplayName, platformId, revocationRecords, signatureValidityPeriod, status, tags, tagsAll, version, versionArn);
        }
    }
}
