// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecrpublic.inputs;

import io.pulumi.aws.ecrpublic.inputs.RepositoryCatalogDataGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RepositoryState extends io.pulumi.resources.ResourceArgs {

    public static final RepositoryState Empty = new RepositoryState();

    /**
     * Full ARN of the repository.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Catalog data configuration for the repository. See below for schema.
     * 
     */
    @InputImport(name="catalogData")
      private final @Nullable Input<RepositoryCatalogDataGetArgs> catalogData;

    public Input<RepositoryCatalogDataGetArgs> getCatalogData() {
        return this.catalogData == null ? Input.empty() : this.catalogData;
    }

    @InputImport(name="forceDestroy")
      private final @Nullable Input<Boolean> forceDestroy;

    public Input<Boolean> getForceDestroy() {
        return this.forceDestroy == null ? Input.empty() : this.forceDestroy;
    }

    /**
     * The registry ID where the repository was created.
     * 
     */
    @InputImport(name="registryId")
      private final @Nullable Input<String> registryId;

    public Input<String> getRegistryId() {
        return this.registryId == null ? Input.empty() : this.registryId;
    }

    /**
     * Name of the repository.
     * 
     */
    @InputImport(name="repositoryName")
      private final @Nullable Input<String> repositoryName;

    public Input<String> getRepositoryName() {
        return this.repositoryName == null ? Input.empty() : this.repositoryName;
    }

    /**
     * The URI of the repository.
     * 
     */
    @InputImport(name="repositoryUri")
      private final @Nullable Input<String> repositoryUri;

    public Input<String> getRepositoryUri() {
        return this.repositoryUri == null ? Input.empty() : this.repositoryUri;
    }

    public RepositoryState(
        @Nullable Input<String> arn,
        @Nullable Input<RepositoryCatalogDataGetArgs> catalogData,
        @Nullable Input<Boolean> forceDestroy,
        @Nullable Input<String> registryId,
        @Nullable Input<String> repositoryName,
        @Nullable Input<String> repositoryUri) {
        this.arn = arn;
        this.catalogData = catalogData;
        this.forceDestroy = forceDestroy;
        this.registryId = registryId;
        this.repositoryName = repositoryName;
        this.repositoryUri = repositoryUri;
    }

    private RepositoryState() {
        this.arn = Input.empty();
        this.catalogData = Input.empty();
        this.forceDestroy = Input.empty();
        this.registryId = Input.empty();
        this.repositoryName = Input.empty();
        this.repositoryUri = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<RepositoryCatalogDataGetArgs> catalogData;
        private @Nullable Input<Boolean> forceDestroy;
        private @Nullable Input<String> registryId;
        private @Nullable Input<String> repositoryName;
        private @Nullable Input<String> repositoryUri;

        public Builder() {
    	      // Empty
        }

        public Builder(RepositoryState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.catalogData = defaults.catalogData;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.registryId = defaults.registryId;
    	      this.repositoryName = defaults.repositoryName;
    	      this.repositoryUri = defaults.repositoryUri;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setCatalogData(@Nullable Input<RepositoryCatalogDataGetArgs> catalogData) {
            this.catalogData = catalogData;
            return this;
        }

        public Builder setCatalogData(@Nullable RepositoryCatalogDataGetArgs catalogData) {
            this.catalogData = Input.ofNullable(catalogData);
            return this;
        }

        public Builder setForceDestroy(@Nullable Input<Boolean> forceDestroy) {
            this.forceDestroy = forceDestroy;
            return this;
        }

        public Builder setForceDestroy(@Nullable Boolean forceDestroy) {
            this.forceDestroy = Input.ofNullable(forceDestroy);
            return this;
        }

        public Builder setRegistryId(@Nullable Input<String> registryId) {
            this.registryId = registryId;
            return this;
        }

        public Builder setRegistryId(@Nullable String registryId) {
            this.registryId = Input.ofNullable(registryId);
            return this;
        }

        public Builder setRepositoryName(@Nullable Input<String> repositoryName) {
            this.repositoryName = repositoryName;
            return this;
        }

        public Builder setRepositoryName(@Nullable String repositoryName) {
            this.repositoryName = Input.ofNullable(repositoryName);
            return this;
        }

        public Builder setRepositoryUri(@Nullable Input<String> repositoryUri) {
            this.repositoryUri = repositoryUri;
            return this;
        }

        public Builder setRepositoryUri(@Nullable String repositoryUri) {
            this.repositoryUri = Input.ofNullable(repositoryUri);
            return this;
        }
        public RepositoryState build() {
            return new RepositoryState(arn, catalogData, forceDestroy, registryId, repositoryName, repositoryUri);
        }
    }
}
