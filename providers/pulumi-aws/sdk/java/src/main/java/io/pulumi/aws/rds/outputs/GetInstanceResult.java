// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetInstanceResult {
    /**
     * The hostname of the RDS instance. See also `endpoint` and `port`.
     * 
     */
    private final String address;
    /**
     * Specifies the allocated storage size specified in gigabytes.
     * 
     */
    private final Integer allocatedStorage;
    /**
     * Indicates that minor version patches are applied automatically.
     * 
     */
    private final Boolean autoMinorVersionUpgrade;
    /**
     * Specifies the name of the Availability Zone the DB instance is located in.
     * 
     */
    private final String availabilityZone;
    /**
     * Specifies the number of days for which automatic DB snapshots are retained.
     * 
     */
    private final Integer backupRetentionPeriod;
    /**
     * Specifies the identifier of the CA certificate for the DB instance.
     * 
     */
    private final String caCertIdentifier;
    /**
     * If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
     * 
     */
    private final String dbClusterIdentifier;
    /**
     * The Amazon Resource Name (ARN) for the DB instance.
     * 
     */
    private final String dbInstanceArn;
    /**
     * Contains the name of the compute and memory capacity class of the DB instance.
     * 
     */
    private final String dbInstanceClass;
    private final String dbInstanceIdentifier;
    /**
     * Specifies the port that the DB instance listens on.
     * 
     */
    private final Integer dbInstancePort;
    /**
     * Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.
     * 
     */
    private final String dbName;
    /**
     * Provides the list of DB parameter groups applied to this DB instance.
     * 
     */
    private final List<String> dbParameterGroups;
    /**
     * Provides List of DB security groups associated to this DB instance.
     * 
     */
    private final List<String> dbSecurityGroups;
    /**
     * Specifies the name of the subnet group associated with the DB instance.
     * 
     */
    private final String dbSubnetGroup;
    /**
     * List of log types to export to cloudwatch.
     * 
     */
    private final List<String> enabledCloudwatchLogsExports;
    /**
     * The connection endpoint in `address:port` format.
     * 
     */
    private final String endpoint;
    /**
     * Provides the name of the database engine to be used for this DB instance.
     * 
     */
    private final String engine;
    /**
     * Indicates the database engine version.
     * 
     */
    private final String engineVersion;
    /**
     * The canonical hosted zone ID of the DB instance (to be used in a Route 53 Alias record).
     * 
     */
    private final String hostedZoneId;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * Specifies the Provisioned IOPS (I/O operations per second) value.
     * 
     */
    private final Integer iops;
    /**
     * If StorageEncrypted is true, the KMS key identifier for the encrypted DB instance.
     * 
     */
    private final String kmsKeyId;
    /**
     * License model information for this DB instance.
     * 
     */
    private final String licenseModel;
    /**
     * Contains the master username for the DB instance.
     * 
     */
    private final String masterUsername;
    /**
     * The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
     * 
     */
    private final Integer monitoringInterval;
    /**
     * The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to CloudWatch Logs.
     * 
     */
    private final String monitoringRoleArn;
    /**
     * Specifies if the DB instance is a Multi-AZ deployment.
     * 
     */
    private final Boolean multiAz;
    /**
     * Provides the list of option group memberships for this DB instance.
     * 
     */
    private final List<String> optionGroupMemberships;
    /**
     * The database port.
     * 
     */
    private final Integer port;
    /**
     * Specifies the daily time range during which automated backups are created.
     * 
     */
    private final String preferredBackupWindow;
    /**
     * Specifies the weekly time range during which system maintenance can occur in UTC.
     * 
     */
    private final String preferredMaintenanceWindow;
    /**
     * Specifies the accessibility options for the DB instance.
     * 
     */
    private final Boolean publiclyAccessible;
    /**
     * The identifier of the source DB that this is a replica of.
     * 
     */
    private final String replicateSourceDb;
    /**
     * The RDS Resource ID of this instance.
     * 
     */
    private final String resourceId;
    /**
     * Specifies whether the DB instance is encrypted.
     * 
     */
    private final Boolean storageEncrypted;
    /**
     * Specifies the storage type associated with DB instance.
     * 
     */
    private final String storageType;
    private final Map<String,String> tags;
    /**
     * The time zone of the DB instance.
     * 
     */
    private final String timezone;
    /**
     * Provides a list of VPC security group elements that the DB instance belongs to.
     * 
     */
    private final List<String> vpcSecurityGroups;

    @OutputCustomType.Constructor({"address","allocatedStorage","autoMinorVersionUpgrade","availabilityZone","backupRetentionPeriod","caCertIdentifier","dbClusterIdentifier","dbInstanceArn","dbInstanceClass","dbInstanceIdentifier","dbInstancePort","dbName","dbParameterGroups","dbSecurityGroups","dbSubnetGroup","enabledCloudwatchLogsExports","endpoint","engine","engineVersion","hostedZoneId","id","iops","kmsKeyId","licenseModel","masterUsername","monitoringInterval","monitoringRoleArn","multiAz","optionGroupMemberships","port","preferredBackupWindow","preferredMaintenanceWindow","publiclyAccessible","replicateSourceDb","resourceId","storageEncrypted","storageType","tags","timezone","vpcSecurityGroups"})
    private GetInstanceResult(
        String address,
        Integer allocatedStorage,
        Boolean autoMinorVersionUpgrade,
        String availabilityZone,
        Integer backupRetentionPeriod,
        String caCertIdentifier,
        String dbClusterIdentifier,
        String dbInstanceArn,
        String dbInstanceClass,
        String dbInstanceIdentifier,
        Integer dbInstancePort,
        String dbName,
        List<String> dbParameterGroups,
        List<String> dbSecurityGroups,
        String dbSubnetGroup,
        List<String> enabledCloudwatchLogsExports,
        String endpoint,
        String engine,
        String engineVersion,
        String hostedZoneId,
        String id,
        Integer iops,
        String kmsKeyId,
        String licenseModel,
        String masterUsername,
        Integer monitoringInterval,
        String monitoringRoleArn,
        Boolean multiAz,
        List<String> optionGroupMemberships,
        Integer port,
        String preferredBackupWindow,
        String preferredMaintenanceWindow,
        Boolean publiclyAccessible,
        String replicateSourceDb,
        String resourceId,
        Boolean storageEncrypted,
        String storageType,
        Map<String,String> tags,
        String timezone,
        List<String> vpcSecurityGroups) {
        this.address = Objects.requireNonNull(address);
        this.allocatedStorage = Objects.requireNonNull(allocatedStorage);
        this.autoMinorVersionUpgrade = Objects.requireNonNull(autoMinorVersionUpgrade);
        this.availabilityZone = Objects.requireNonNull(availabilityZone);
        this.backupRetentionPeriod = Objects.requireNonNull(backupRetentionPeriod);
        this.caCertIdentifier = Objects.requireNonNull(caCertIdentifier);
        this.dbClusterIdentifier = Objects.requireNonNull(dbClusterIdentifier);
        this.dbInstanceArn = Objects.requireNonNull(dbInstanceArn);
        this.dbInstanceClass = Objects.requireNonNull(dbInstanceClass);
        this.dbInstanceIdentifier = Objects.requireNonNull(dbInstanceIdentifier);
        this.dbInstancePort = Objects.requireNonNull(dbInstancePort);
        this.dbName = Objects.requireNonNull(dbName);
        this.dbParameterGroups = Objects.requireNonNull(dbParameterGroups);
        this.dbSecurityGroups = Objects.requireNonNull(dbSecurityGroups);
        this.dbSubnetGroup = Objects.requireNonNull(dbSubnetGroup);
        this.enabledCloudwatchLogsExports = Objects.requireNonNull(enabledCloudwatchLogsExports);
        this.endpoint = Objects.requireNonNull(endpoint);
        this.engine = Objects.requireNonNull(engine);
        this.engineVersion = Objects.requireNonNull(engineVersion);
        this.hostedZoneId = Objects.requireNonNull(hostedZoneId);
        this.id = Objects.requireNonNull(id);
        this.iops = Objects.requireNonNull(iops);
        this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
        this.licenseModel = Objects.requireNonNull(licenseModel);
        this.masterUsername = Objects.requireNonNull(masterUsername);
        this.monitoringInterval = Objects.requireNonNull(monitoringInterval);
        this.monitoringRoleArn = Objects.requireNonNull(monitoringRoleArn);
        this.multiAz = Objects.requireNonNull(multiAz);
        this.optionGroupMemberships = Objects.requireNonNull(optionGroupMemberships);
        this.port = Objects.requireNonNull(port);
        this.preferredBackupWindow = Objects.requireNonNull(preferredBackupWindow);
        this.preferredMaintenanceWindow = Objects.requireNonNull(preferredMaintenanceWindow);
        this.publiclyAccessible = Objects.requireNonNull(publiclyAccessible);
        this.replicateSourceDb = Objects.requireNonNull(replicateSourceDb);
        this.resourceId = Objects.requireNonNull(resourceId);
        this.storageEncrypted = Objects.requireNonNull(storageEncrypted);
        this.storageType = Objects.requireNonNull(storageType);
        this.tags = Objects.requireNonNull(tags);
        this.timezone = Objects.requireNonNull(timezone);
        this.vpcSecurityGroups = Objects.requireNonNull(vpcSecurityGroups);
    }

    /**
     * The hostname of the RDS instance. See also `endpoint` and `port`.
     * 
     */
    public String getAddress() {
        return this.address;
    }
    /**
     * Specifies the allocated storage size specified in gigabytes.
     * 
     */
    public Integer getAllocatedStorage() {
        return this.allocatedStorage;
    }
    /**
     * Indicates that minor version patches are applied automatically.
     * 
     */
    public Boolean getAutoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade;
    }
    /**
     * Specifies the name of the Availability Zone the DB instance is located in.
     * 
     */
    public String getAvailabilityZone() {
        return this.availabilityZone;
    }
    /**
     * Specifies the number of days for which automatic DB snapshots are retained.
     * 
     */
    public Integer getBackupRetentionPeriod() {
        return this.backupRetentionPeriod;
    }
    /**
     * Specifies the identifier of the CA certificate for the DB instance.
     * 
     */
    public String getCaCertIdentifier() {
        return this.caCertIdentifier;
    }
    /**
     * If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
     * 
     */
    public String getDbClusterIdentifier() {
        return this.dbClusterIdentifier;
    }
    /**
     * The Amazon Resource Name (ARN) for the DB instance.
     * 
     */
    public String getDbInstanceArn() {
        return this.dbInstanceArn;
    }
    /**
     * Contains the name of the compute and memory capacity class of the DB instance.
     * 
     */
    public String getDbInstanceClass() {
        return this.dbInstanceClass;
    }
    public String getDbInstanceIdentifier() {
        return this.dbInstanceIdentifier;
    }
    /**
     * Specifies the port that the DB instance listens on.
     * 
     */
    public Integer getDbInstancePort() {
        return this.dbInstancePort;
    }
    /**
     * Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.
     * 
     */
    public String getDbName() {
        return this.dbName;
    }
    /**
     * Provides the list of DB parameter groups applied to this DB instance.
     * 
     */
    public List<String> getDbParameterGroups() {
        return this.dbParameterGroups;
    }
    /**
     * Provides List of DB security groups associated to this DB instance.
     * 
     */
    public List<String> getDbSecurityGroups() {
        return this.dbSecurityGroups;
    }
    /**
     * Specifies the name of the subnet group associated with the DB instance.
     * 
     */
    public String getDbSubnetGroup() {
        return this.dbSubnetGroup;
    }
    /**
     * List of log types to export to cloudwatch.
     * 
     */
    public List<String> getEnabledCloudwatchLogsExports() {
        return this.enabledCloudwatchLogsExports;
    }
    /**
     * The connection endpoint in `address:port` format.
     * 
     */
    public String getEndpoint() {
        return this.endpoint;
    }
    /**
     * Provides the name of the database engine to be used for this DB instance.
     * 
     */
    public String getEngine() {
        return this.engine;
    }
    /**
     * Indicates the database engine version.
     * 
     */
    public String getEngineVersion() {
        return this.engineVersion;
    }
    /**
     * The canonical hosted zone ID of the DB instance (to be used in a Route 53 Alias record).
     * 
     */
    public String getHostedZoneId() {
        return this.hostedZoneId;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    public String getId() {
        return this.id;
    }
    /**
     * Specifies the Provisioned IOPS (I/O operations per second) value.
     * 
     */
    public Integer getIops() {
        return this.iops;
    }
    /**
     * If StorageEncrypted is true, the KMS key identifier for the encrypted DB instance.
     * 
     */
    public String getKmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * License model information for this DB instance.
     * 
     */
    public String getLicenseModel() {
        return this.licenseModel;
    }
    /**
     * Contains the master username for the DB instance.
     * 
     */
    public String getMasterUsername() {
        return this.masterUsername;
    }
    /**
     * The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
     * 
     */
    public Integer getMonitoringInterval() {
        return this.monitoringInterval;
    }
    /**
     * The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to CloudWatch Logs.
     * 
     */
    public String getMonitoringRoleArn() {
        return this.monitoringRoleArn;
    }
    /**
     * Specifies if the DB instance is a Multi-AZ deployment.
     * 
     */
    public Boolean getMultiAz() {
        return this.multiAz;
    }
    /**
     * Provides the list of option group memberships for this DB instance.
     * 
     */
    public List<String> getOptionGroupMemberships() {
        return this.optionGroupMemberships;
    }
    /**
     * The database port.
     * 
     */
    public Integer getPort() {
        return this.port;
    }
    /**
     * Specifies the daily time range during which automated backups are created.
     * 
     */
    public String getPreferredBackupWindow() {
        return this.preferredBackupWindow;
    }
    /**
     * Specifies the weekly time range during which system maintenance can occur in UTC.
     * 
     */
    public String getPreferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow;
    }
    /**
     * Specifies the accessibility options for the DB instance.
     * 
     */
    public Boolean getPubliclyAccessible() {
        return this.publiclyAccessible;
    }
    /**
     * The identifier of the source DB that this is a replica of.
     * 
     */
    public String getReplicateSourceDb() {
        return this.replicateSourceDb;
    }
    /**
     * The RDS Resource ID of this instance.
     * 
     */
    public String getResourceId() {
        return this.resourceId;
    }
    /**
     * Specifies whether the DB instance is encrypted.
     * 
     */
    public Boolean getStorageEncrypted() {
        return this.storageEncrypted;
    }
    /**
     * Specifies the storage type associated with DB instance.
     * 
     */
    public String getStorageType() {
        return this.storageType;
    }
    public Map<String,String> getTags() {
        return this.tags;
    }
    /**
     * The time zone of the DB instance.
     * 
     */
    public String getTimezone() {
        return this.timezone;
    }
    /**
     * Provides a list of VPC security group elements that the DB instance belongs to.
     * 
     */
    public List<String> getVpcSecurityGroups() {
        return this.vpcSecurityGroups;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String address;
        private Integer allocatedStorage;
        private Boolean autoMinorVersionUpgrade;
        private String availabilityZone;
        private Integer backupRetentionPeriod;
        private String caCertIdentifier;
        private String dbClusterIdentifier;
        private String dbInstanceArn;
        private String dbInstanceClass;
        private String dbInstanceIdentifier;
        private Integer dbInstancePort;
        private String dbName;
        private List<String> dbParameterGroups;
        private List<String> dbSecurityGroups;
        private String dbSubnetGroup;
        private List<String> enabledCloudwatchLogsExports;
        private String endpoint;
        private String engine;
        private String engineVersion;
        private String hostedZoneId;
        private String id;
        private Integer iops;
        private String kmsKeyId;
        private String licenseModel;
        private String masterUsername;
        private Integer monitoringInterval;
        private String monitoringRoleArn;
        private Boolean multiAz;
        private List<String> optionGroupMemberships;
        private Integer port;
        private String preferredBackupWindow;
        private String preferredMaintenanceWindow;
        private Boolean publiclyAccessible;
        private String replicateSourceDb;
        private String resourceId;
        private Boolean storageEncrypted;
        private String storageType;
        private Map<String,String> tags;
        private String timezone;
        private List<String> vpcSecurityGroups;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.allocatedStorage = defaults.allocatedStorage;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.backupRetentionPeriod = defaults.backupRetentionPeriod;
    	      this.caCertIdentifier = defaults.caCertIdentifier;
    	      this.dbClusterIdentifier = defaults.dbClusterIdentifier;
    	      this.dbInstanceArn = defaults.dbInstanceArn;
    	      this.dbInstanceClass = defaults.dbInstanceClass;
    	      this.dbInstanceIdentifier = defaults.dbInstanceIdentifier;
    	      this.dbInstancePort = defaults.dbInstancePort;
    	      this.dbName = defaults.dbName;
    	      this.dbParameterGroups = defaults.dbParameterGroups;
    	      this.dbSecurityGroups = defaults.dbSecurityGroups;
    	      this.dbSubnetGroup = defaults.dbSubnetGroup;
    	      this.enabledCloudwatchLogsExports = defaults.enabledCloudwatchLogsExports;
    	      this.endpoint = defaults.endpoint;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.hostedZoneId = defaults.hostedZoneId;
    	      this.id = defaults.id;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.masterUsername = defaults.masterUsername;
    	      this.monitoringInterval = defaults.monitoringInterval;
    	      this.monitoringRoleArn = defaults.monitoringRoleArn;
    	      this.multiAz = defaults.multiAz;
    	      this.optionGroupMemberships = defaults.optionGroupMemberships;
    	      this.port = defaults.port;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.replicateSourceDb = defaults.replicateSourceDb;
    	      this.resourceId = defaults.resourceId;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.timezone = defaults.timezone;
    	      this.vpcSecurityGroups = defaults.vpcSecurityGroups;
        }

        public Builder setAddress(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }

        public Builder setAllocatedStorage(Integer allocatedStorage) {
            this.allocatedStorage = Objects.requireNonNull(allocatedStorage);
            return this;
        }

        public Builder setAutoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Objects.requireNonNull(autoMinorVersionUpgrade);
            return this;
        }

        public Builder setAvailabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }

        public Builder setBackupRetentionPeriod(Integer backupRetentionPeriod) {
            this.backupRetentionPeriod = Objects.requireNonNull(backupRetentionPeriod);
            return this;
        }

        public Builder setCaCertIdentifier(String caCertIdentifier) {
            this.caCertIdentifier = Objects.requireNonNull(caCertIdentifier);
            return this;
        }

        public Builder setDbClusterIdentifier(String dbClusterIdentifier) {
            this.dbClusterIdentifier = Objects.requireNonNull(dbClusterIdentifier);
            return this;
        }

        public Builder setDbInstanceArn(String dbInstanceArn) {
            this.dbInstanceArn = Objects.requireNonNull(dbInstanceArn);
            return this;
        }

        public Builder setDbInstanceClass(String dbInstanceClass) {
            this.dbInstanceClass = Objects.requireNonNull(dbInstanceClass);
            return this;
        }

        public Builder setDbInstanceIdentifier(String dbInstanceIdentifier) {
            this.dbInstanceIdentifier = Objects.requireNonNull(dbInstanceIdentifier);
            return this;
        }

        public Builder setDbInstancePort(Integer dbInstancePort) {
            this.dbInstancePort = Objects.requireNonNull(dbInstancePort);
            return this;
        }

        public Builder setDbName(String dbName) {
            this.dbName = Objects.requireNonNull(dbName);
            return this;
        }

        public Builder setDbParameterGroups(List<String> dbParameterGroups) {
            this.dbParameterGroups = Objects.requireNonNull(dbParameterGroups);
            return this;
        }

        public Builder setDbSecurityGroups(List<String> dbSecurityGroups) {
            this.dbSecurityGroups = Objects.requireNonNull(dbSecurityGroups);
            return this;
        }

        public Builder setDbSubnetGroup(String dbSubnetGroup) {
            this.dbSubnetGroup = Objects.requireNonNull(dbSubnetGroup);
            return this;
        }

        public Builder setEnabledCloudwatchLogsExports(List<String> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = Objects.requireNonNull(enabledCloudwatchLogsExports);
            return this;
        }

        public Builder setEndpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }

        public Builder setEngine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }

        public Builder setEngineVersion(String engineVersion) {
            this.engineVersion = Objects.requireNonNull(engineVersion);
            return this;
        }

        public Builder setHostedZoneId(String hostedZoneId) {
            this.hostedZoneId = Objects.requireNonNull(hostedZoneId);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setIops(Integer iops) {
            this.iops = Objects.requireNonNull(iops);
            return this;
        }

        public Builder setKmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }

        public Builder setLicenseModel(String licenseModel) {
            this.licenseModel = Objects.requireNonNull(licenseModel);
            return this;
        }

        public Builder setMasterUsername(String masterUsername) {
            this.masterUsername = Objects.requireNonNull(masterUsername);
            return this;
        }

        public Builder setMonitoringInterval(Integer monitoringInterval) {
            this.monitoringInterval = Objects.requireNonNull(monitoringInterval);
            return this;
        }

        public Builder setMonitoringRoleArn(String monitoringRoleArn) {
            this.monitoringRoleArn = Objects.requireNonNull(monitoringRoleArn);
            return this;
        }

        public Builder setMultiAz(Boolean multiAz) {
            this.multiAz = Objects.requireNonNull(multiAz);
            return this;
        }

        public Builder setOptionGroupMemberships(List<String> optionGroupMemberships) {
            this.optionGroupMemberships = Objects.requireNonNull(optionGroupMemberships);
            return this;
        }

        public Builder setPort(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder setPreferredBackupWindow(String preferredBackupWindow) {
            this.preferredBackupWindow = Objects.requireNonNull(preferredBackupWindow);
            return this;
        }

        public Builder setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Objects.requireNonNull(preferredMaintenanceWindow);
            return this;
        }

        public Builder setPubliclyAccessible(Boolean publiclyAccessible) {
            this.publiclyAccessible = Objects.requireNonNull(publiclyAccessible);
            return this;
        }

        public Builder setReplicateSourceDb(String replicateSourceDb) {
            this.replicateSourceDb = Objects.requireNonNull(replicateSourceDb);
            return this;
        }

        public Builder setResourceId(String resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }

        public Builder setStorageEncrypted(Boolean storageEncrypted) {
            this.storageEncrypted = Objects.requireNonNull(storageEncrypted);
            return this;
        }

        public Builder setStorageType(String storageType) {
            this.storageType = Objects.requireNonNull(storageType);
            return this;
        }

        public Builder setTags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder setTimezone(String timezone) {
            this.timezone = Objects.requireNonNull(timezone);
            return this;
        }

        public Builder setVpcSecurityGroups(List<String> vpcSecurityGroups) {
            this.vpcSecurityGroups = Objects.requireNonNull(vpcSecurityGroups);
            return this;
        }
        public GetInstanceResult build() {
            return new GetInstanceResult(address, allocatedStorage, autoMinorVersionUpgrade, availabilityZone, backupRetentionPeriod, caCertIdentifier, dbClusterIdentifier, dbInstanceArn, dbInstanceClass, dbInstanceIdentifier, dbInstancePort, dbName, dbParameterGroups, dbSecurityGroups, dbSubnetGroup, enabledCloudwatchLogsExports, endpoint, engine, engineVersion, hostedZoneId, id, iops, kmsKeyId, licenseModel, masterUsername, monitoringInterval, monitoringRoleArn, multiAz, optionGroupMemberships, port, preferredBackupWindow, preferredMaintenanceWindow, publiclyAccessible, replicateSourceDb, resourceId, storageEncrypted, storageType, tags, timezone, vpcSecurityGroups);
        }
    }
}
