// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.pinpoint.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class AppLimits {
    /**
     * The maximum number of messages that the campaign can send daily.
     * 
     */
    private final @Nullable Integer daily;
    /**
     * The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
     * 
     */
    private final @Nullable Integer maximumDuration;
    /**
     * The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
     * 
     */
    private final @Nullable Integer messagesPerSecond;
    /**
     * The maximum total number of messages that the campaign can send.
     * 
     */
    private final @Nullable Integer total;

    @OutputCustomType.Constructor
    private AppLimits(
        @OutputCustomType.Parameter("daily") @Nullable Integer daily,
        @OutputCustomType.Parameter("maximumDuration") @Nullable Integer maximumDuration,
        @OutputCustomType.Parameter("messagesPerSecond") @Nullable Integer messagesPerSecond,
        @OutputCustomType.Parameter("total") @Nullable Integer total) {
        this.daily = daily;
        this.maximumDuration = maximumDuration;
        this.messagesPerSecond = messagesPerSecond;
        this.total = total;
    }

    /**
     * The maximum number of messages that the campaign can send daily.
     * 
    */
    public Optional<Integer> getDaily() {
        return Optional.ofNullable(this.daily);
    }
    /**
     * The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
     * 
    */
    public Optional<Integer> getMaximumDuration() {
        return Optional.ofNullable(this.maximumDuration);
    }
    /**
     * The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
     * 
    */
    public Optional<Integer> getMessagesPerSecond() {
        return Optional.ofNullable(this.messagesPerSecond);
    }
    /**
     * The maximum total number of messages that the campaign can send.
     * 
    */
    public Optional<Integer> getTotal() {
        return Optional.ofNullable(this.total);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppLimits defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer daily;
        private @Nullable Integer maximumDuration;
        private @Nullable Integer messagesPerSecond;
        private @Nullable Integer total;

        public Builder() {
    	      // Empty
        }

        public Builder(AppLimits defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.daily = defaults.daily;
    	      this.maximumDuration = defaults.maximumDuration;
    	      this.messagesPerSecond = defaults.messagesPerSecond;
    	      this.total = defaults.total;
        }

        public Builder setDaily(@Nullable Integer daily) {
            this.daily = daily;
            return this;
        }

        public Builder setMaximumDuration(@Nullable Integer maximumDuration) {
            this.maximumDuration = maximumDuration;
            return this;
        }

        public Builder setMessagesPerSecond(@Nullable Integer messagesPerSecond) {
            this.messagesPerSecond = messagesPerSecond;
            return this;
        }

        public Builder setTotal(@Nullable Integer total) {
            this.total = total;
            return this;
        }
        public AppLimits build() {
            return new AppLimits(daily, maximumDuration, messagesPerSecond, total);
        }
    }
}
