// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elasticloadbalancingv2;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.elasticloadbalancingv2.ListenerRuleArgs;
import io.pulumi.aws.elasticloadbalancingv2.inputs.ListenerRuleState;
import io.pulumi.aws.elasticloadbalancingv2.outputs.ListenerRuleAction;
import io.pulumi.aws.elasticloadbalancingv2.outputs.ListenerRuleCondition;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a Load Balancer Listener Rule resource.
 * 
 * > **Note:** `aws.alb.ListenerRule` is known as `aws.lb.ListenerRule`. The functionality is identical.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEndLoadBalancer", {});
 * // ...
 * const frontEndListener = new aws.lb.Listener("frontEndListener", {});
 * // Other parameters
 * const static = new aws.lb.ListenerRule("static", {
 *     listenerArn: frontEndListener.arn,
 *     priority: 100,
 *     actions: [{
 *         type: "forward",
 *         targetGroupArn: aws_lb_target_group.static.arn,
 *     }],
 *     conditions: [
 *         {
 *             pathPattern: {
 *                 values: ["/static/*"],
 *             },
 *         },
 *         {
 *             hostHeader: {
 *                 values: ["example.com"],
 *             },
 *         },
 *     ],
 * });
 * // Forward action
 * const hostBasedWeightedRouting = new aws.lb.ListenerRule("hostBasedWeightedRouting", {
 *     listenerArn: frontEndListener.arn,
 *     priority: 99,
 *     actions: [{
 *         type: "forward",
 *         targetGroupArn: aws_lb_target_group.static.arn,
 *     }],
 *     conditions: [{
 *         hostHeader: {
 *             values: ["my-service.*.mycompany.io"],
 *         },
 *     }],
 * });
 * // Weighted Forward action
 * const hostBasedRouting = new aws.lb.ListenerRule("hostBasedRouting", {
 *     listenerArn: frontEndListener.arn,
 *     priority: 99,
 *     actions: [{
 *         type: "forward",
 *         forward: {
 *             targetGroups: [
 *                 {
 *                     arn: aws_lb_target_group.main.arn,
 *                     weight: 80,
 *                 },
 *                 {
 *                     arn: aws_lb_target_group.canary.arn,
 *                     weight: 20,
 *                 },
 *             ],
 *             stickiness: {
 *                 enabled: true,
 *                 duration: 600,
 *             },
 *         },
 *     }],
 *     conditions: [{
 *         hostHeader: {
 *             values: ["my-service.*.mycompany.io"],
 *         },
 *     }],
 * });
 * // Redirect action
 * const redirectHttpToHttps = new aws.lb.ListenerRule("redirectHttpToHttps", {
 *     listenerArn: frontEndListener.arn,
 *     actions: [{
 *         type: "redirect",
 *         redirect: {
 *             port: "443",
 *             protocol: "HTTPS",
 *             statusCode: "HTTP_301",
 *         },
 *     }],
 *     conditions: [{
 *         httpHeader: {
 *             httpHeaderName: "X-Forwarded-For",
 *             values: ["192.168.1.*"],
 *         },
 *     }],
 * });
 * // Fixed-response action
 * const healthCheck = new aws.lb.ListenerRule("healthCheck", {
 *     listenerArn: frontEndListener.arn,
 *     actions: [{
 *         type: "fixed-response",
 *         fixedResponse: {
 *             contentType: "text/plain",
 *             messageBody: "HEALTHY",
 *             statusCode: "200",
 *         },
 *     }],
 *     conditions: [{
 *         queryStrings: [
 *             {
 *                 key: "health",
 *                 value: "check",
 *             },
 *             {
 *                 value: "bar",
 *             },
 *         ],
 *     }],
 * });
 * // Authenticate-cognito Action
 * const pool = new aws.cognito.UserPool("pool", {});
 * // ...
 * const client = new aws.cognito.UserPoolClient("client", {});
 * // ...
 * const domain = new aws.cognito.UserPoolDomain("domain", {});
 * // ...
 * const admin = new aws.lb.ListenerRule("admin", {
 *     listenerArn: frontEndListener.arn,
 *     actions: [
 *         {
 *             type: "authenticate-cognito",
 *             authenticateCognito: {
 *                 userPoolArn: pool.arn,
 *                 userPoolClientId: client.id,
 *                 userPoolDomain: domain.domain,
 *             },
 *         },
 *         {
 *             type: "forward",
 *             targetGroupArn: aws_lb_target_group.static.arn,
 *         },
 *     ],
 * });
 * // Authenticate-oidc Action
 * const oidc = new aws.lb.ListenerRule("oidc", {
 *     listenerArn: frontEndListener.arn,
 *     actions: [
 *         {
 *             type: "authenticate-oidc",
 *             authenticateOidc: {
 *                 authorizationEndpoint: "https://example.com/authorization_endpoint",
 *                 clientId: "client_id",
 *                 clientSecret: "client_secret",
 *                 issuer: "https://example.com",
 *                 tokenEndpoint: "https://example.com/token_endpoint",
 *                 userInfoEndpoint: "https://example.com/user_info_endpoint",
 *             },
 *         },
 *         {
 *             type: "forward",
 *             targetGroupArn: aws_lb_target_group.static.arn,
 *         },
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * front_end_load_balancer = aws.lb.LoadBalancer("frontEndLoadBalancer")
 * # ...
 * front_end_listener = aws.lb.Listener("frontEndListener")
 * # Other parameters
 * static = aws.lb.ListenerRule("static",
 *     listener_arn=front_end_listener.arn,
 *     priority=100,
 *     actions=[aws.lb.ListenerRuleActionArgs(
 *         type="forward",
 *         target_group_arn=aws_lb_target_group["static"]["arn"],
 *     )],
 *     conditions=[
 *         aws.lb.ListenerRuleConditionArgs(
 *             path_pattern=aws.lb.ListenerRuleConditionPathPatternArgs(
 *                 values=["/static/*"],
 *             ),
 *         ),
 *         aws.lb.ListenerRuleConditionArgs(
 *             host_header=aws.lb.ListenerRuleConditionHostHeaderArgs(
 *                 values=["example.com"],
 *             ),
 *         ),
 *     ])
 * # Forward action
 * host_based_weighted_routing = aws.lb.ListenerRule("hostBasedWeightedRouting",
 *     listener_arn=front_end_listener.arn,
 *     priority=99,
 *     actions=[aws.lb.ListenerRuleActionArgs(
 *         type="forward",
 *         target_group_arn=aws_lb_target_group["static"]["arn"],
 *     )],
 *     conditions=[aws.lb.ListenerRuleConditionArgs(
 *         host_header=aws.lb.ListenerRuleConditionHostHeaderArgs(
 *             values=["my-service.*.mycompany.io"],
 *         ),
 *     )])
 * # Weighted Forward action
 * host_based_routing = aws.lb.ListenerRule("hostBasedRouting",
 *     listener_arn=front_end_listener.arn,
 *     priority=99,
 *     actions=[aws.lb.ListenerRuleActionArgs(
 *         type="forward",
 *         forward=aws.lb.ListenerRuleActionForwardArgs(
 *             target_groups=[
 *                 aws.lb.ListenerRuleActionForwardTargetGroupArgs(
 *                     arn=aws_lb_target_group["main"]["arn"],
 *                     weight=80,
 *                 ),
 *                 aws.lb.ListenerRuleActionForwardTargetGroupArgs(
 *                     arn=aws_lb_target_group["canary"]["arn"],
 *                     weight=20,
 *                 ),
 *             ],
 *             stickiness=aws.lb.ListenerRuleActionForwardStickinessArgs(
 *                 enabled=True,
 *                 duration=600,
 *             ),
 *         ),
 *     )],
 *     conditions=[aws.lb.ListenerRuleConditionArgs(
 *         host_header=aws.lb.ListenerRuleConditionHostHeaderArgs(
 *             values=["my-service.*.mycompany.io"],
 *         ),
 *     )])
 * # Redirect action
 * redirect_http_to_https = aws.lb.ListenerRule("redirectHttpToHttps",
 *     listener_arn=front_end_listener.arn,
 *     actions=[aws.lb.ListenerRuleActionArgs(
 *         type="redirect",
 *         redirect=aws.lb.ListenerRuleActionRedirectArgs(
 *             port="443",
 *             protocol="HTTPS",
 *             status_code="HTTP_301",
 *         ),
 *     )],
 *     conditions=[aws.lb.ListenerRuleConditionArgs(
 *         http_header=aws.lb.ListenerRuleConditionHttpHeaderArgs(
 *             http_header_name="X-Forwarded-For",
 *             values=["192.168.1.*"],
 *         ),
 *     )])
 * # Fixed-response action
 * health_check = aws.lb.ListenerRule("healthCheck",
 *     listener_arn=front_end_listener.arn,
 *     actions=[aws.lb.ListenerRuleActionArgs(
 *         type="fixed-response",
 *         fixed_response=aws.lb.ListenerRuleActionFixedResponseArgs(
 *             content_type="text/plain",
 *             message_body="HEALTHY",
 *             status_code="200",
 *         ),
 *     )],
 *     conditions=[aws.lb.ListenerRuleConditionArgs(
 *         query_strings=[
 *             aws.lb.ListenerRuleConditionQueryStringArgs(
 *                 key="health",
 *                 value="check",
 *             ),
 *             aws.lb.ListenerRuleConditionQueryStringArgs(
 *                 value="bar",
 *             ),
 *         ],
 *     )])
 * # Authenticate-cognito Action
 * pool = aws.cognito.UserPool("pool")
 * # ...
 * client = aws.cognito.UserPoolClient("client")
 * # ...
 * domain = aws.cognito.UserPoolDomain("domain")
 * # ...
 * admin = aws.lb.ListenerRule("admin",
 *     listener_arn=front_end_listener.arn,
 *     actions=[
 *         aws.lb.ListenerRuleActionArgs(
 *             type="authenticate-cognito",
 *             authenticate_cognito=aws.lb.ListenerRuleActionAuthenticateCognitoArgs(
 *                 user_pool_arn=pool.arn,
 *                 user_pool_client_id=client.id,
 *                 user_pool_domain=domain.domain,
 *             ),
 *         ),
 *         aws.lb.ListenerRuleActionArgs(
 *             type="forward",
 *             target_group_arn=aws_lb_target_group["static"]["arn"],
 *         ),
 *     ])
 * # Authenticate-oidc Action
 * oidc = aws.lb.ListenerRule("oidc",
 *     listener_arn=front_end_listener.arn,
 *     actions=[
 *         aws.lb.ListenerRuleActionArgs(
 *             type="authenticate-oidc",
 *             authenticate_oidc=aws.lb.ListenerRuleActionAuthenticateOidcArgs(
 *                 authorization_endpoint="https://example.com/authorization_endpoint",
 *                 client_id="client_id",
 *                 client_secret="client_secret",
 *                 issuer="https://example.com",
 *                 token_endpoint="https://example.com/token_endpoint",
 *                 user_info_endpoint="https://example.com/user_info_endpoint",
 *             ),
 *         ),
 *         aws.lb.ListenerRuleActionArgs(
 *             type="forward",
 *             target_group_arn=aws_lb_target_group["static"]["arn"],
 *         ),
 *     ])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var frontEndLoadBalancer = new Aws.LB.LoadBalancer("frontEndLoadBalancer", new Aws.LB.LoadBalancerArgs
 *         {
 *         });
 *         // ...
 *         var frontEndListener = new Aws.LB.Listener("frontEndListener", new Aws.LB.ListenerArgs
 *         {
 *         });
 *         // Other parameters
 *         var @static = new Aws.LB.ListenerRule("static", new Aws.LB.ListenerRuleArgs
 *         {
 *             ListenerArn = frontEndListener.Arn,
 *             Priority = 100,
 *             Actions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleActionArgs
 *                 {
 *                     Type = "forward",
 *                     TargetGroupArn = aws_lb_target_group.Static.Arn,
 *                 },
 *             },
 *             Conditions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleConditionArgs
 *                 {
 *                     PathPattern = new Aws.LB.Inputs.ListenerRuleConditionPathPatternArgs
 *                     {
 *                         Values = 
 *                         {
 *                             "/static/*",
 *                         },
 *                     },
 *                 },
 *                 new Aws.LB.Inputs.ListenerRuleConditionArgs
 *                 {
 *                     HostHeader = new Aws.LB.Inputs.ListenerRuleConditionHostHeaderArgs
 *                     {
 *                         Values = 
 *                         {
 *                             "example.com",
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         // Forward action
 *         var hostBasedWeightedRouting = new Aws.LB.ListenerRule("hostBasedWeightedRouting", new Aws.LB.ListenerRuleArgs
 *         {
 *             ListenerArn = frontEndListener.Arn,
 *             Priority = 99,
 *             Actions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleActionArgs
 *                 {
 *                     Type = "forward",
 *                     TargetGroupArn = aws_lb_target_group.Static.Arn,
 *                 },
 *             },
 *             Conditions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleConditionArgs
 *                 {
 *                     HostHeader = new Aws.LB.Inputs.ListenerRuleConditionHostHeaderArgs
 *                     {
 *                         Values = 
 *                         {
 *                             "my-service.*.mycompany.io",
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         // Weighted Forward action
 *         var hostBasedRouting = new Aws.LB.ListenerRule("hostBasedRouting", new Aws.LB.ListenerRuleArgs
 *         {
 *             ListenerArn = frontEndListener.Arn,
 *             Priority = 99,
 *             Actions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleActionArgs
 *                 {
 *                     Type = "forward",
 *                     Forward = new Aws.LB.Inputs.ListenerRuleActionForwardArgs
 *                     {
 *                         TargetGroups = 
 *                         {
 *                             new Aws.LB.Inputs.ListenerRuleActionForwardTargetGroupArgs
 *                             {
 *                                 Arn = aws_lb_target_group.Main.Arn,
 *                                 Weight = 80,
 *                             },
 *                             new Aws.LB.Inputs.ListenerRuleActionForwardTargetGroupArgs
 *                             {
 *                                 Arn = aws_lb_target_group.Canary.Arn,
 *                                 Weight = 20,
 *                             },
 *                         },
 *                         Stickiness = new Aws.LB.Inputs.ListenerRuleActionForwardStickinessArgs
 *                         {
 *                             Enabled = true,
 *                             Duration = 600,
 *                         },
 *                     },
 *                 },
 *             },
 *             Conditions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleConditionArgs
 *                 {
 *                     HostHeader = new Aws.LB.Inputs.ListenerRuleConditionHostHeaderArgs
 *                     {
 *                         Values = 
 *                         {
 *                             "my-service.*.mycompany.io",
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         // Redirect action
 *         var redirectHttpToHttps = new Aws.LB.ListenerRule("redirectHttpToHttps", new Aws.LB.ListenerRuleArgs
 *         {
 *             ListenerArn = frontEndListener.Arn,
 *             Actions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleActionArgs
 *                 {
 *                     Type = "redirect",
 *                     Redirect = new Aws.LB.Inputs.ListenerRuleActionRedirectArgs
 *                     {
 *                         Port = "443",
 *                         Protocol = "HTTPS",
 *                         StatusCode = "HTTP_301",
 *                     },
 *                 },
 *             },
 *             Conditions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleConditionArgs
 *                 {
 *                     HttpHeader = new Aws.LB.Inputs.ListenerRuleConditionHttpHeaderArgs
 *                     {
 *                         HttpHeaderName = "X-Forwarded-For",
 *                         Values = 
 *                         {
 *                             "192.168.1.*",
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         // Fixed-response action
 *         var healthCheck = new Aws.LB.ListenerRule("healthCheck", new Aws.LB.ListenerRuleArgs
 *         {
 *             ListenerArn = frontEndListener.Arn,
 *             Actions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleActionArgs
 *                 {
 *                     Type = "fixed-response",
 *                     FixedResponse = new Aws.LB.Inputs.ListenerRuleActionFixedResponseArgs
 *                     {
 *                         ContentType = "text/plain",
 *                         MessageBody = "HEALTHY",
 *                         StatusCode = "200",
 *                     },
 *                 },
 *             },
 *             Conditions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleConditionArgs
 *                 {
 *                     QueryStrings = 
 *                     {
 *                         new Aws.LB.Inputs.ListenerRuleConditionQueryStringArgs
 *                         {
 *                             Key = "health",
 *                             Value = "check",
 *                         },
 *                         new Aws.LB.Inputs.ListenerRuleConditionQueryStringArgs
 *                         {
 *                             Value = "bar",
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         // Authenticate-cognito Action
 *         var pool = new Aws.Cognito.UserPool("pool", new Aws.Cognito.UserPoolArgs
 *         {
 *         });
 *         // ...
 *         var client = new Aws.Cognito.UserPoolClient("client", new Aws.Cognito.UserPoolClientArgs
 *         {
 *         });
 *         // ...
 *         var domain = new Aws.Cognito.UserPoolDomain("domain", new Aws.Cognito.UserPoolDomainArgs
 *         {
 *         });
 *         // ...
 *         var admin = new Aws.LB.ListenerRule("admin", new Aws.LB.ListenerRuleArgs
 *         {
 *             ListenerArn = frontEndListener.Arn,
 *             Actions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleActionArgs
 *                 {
 *                     Type = "authenticate-cognito",
 *                     AuthenticateCognito = new Aws.LB.Inputs.ListenerRuleActionAuthenticateCognitoArgs
 *                     {
 *                         UserPoolArn = pool.Arn,
 *                         UserPoolClientId = client.Id,
 *                         UserPoolDomain = domain.Domain,
 *                     },
 *                 },
 *                 new Aws.LB.Inputs.ListenerRuleActionArgs
 *                 {
 *                     Type = "forward",
 *                     TargetGroupArn = aws_lb_target_group.Static.Arn,
 *                 },
 *             },
 *         });
 *         // Authenticate-oidc Action
 *         var oidc = new Aws.LB.ListenerRule("oidc", new Aws.LB.ListenerRuleArgs
 *         {
 *             ListenerArn = frontEndListener.Arn,
 *             Actions = 
 *             {
 *                 new Aws.LB.Inputs.ListenerRuleActionArgs
 *                 {
 *                     Type = "authenticate-oidc",
 *                     AuthenticateOidc = new Aws.LB.Inputs.ListenerRuleActionAuthenticateOidcArgs
 *                     {
 *                         AuthorizationEndpoint = "https://example.com/authorization_endpoint",
 *                         ClientId = "client_id",
 *                         ClientSecret = "client_secret",
 *                         Issuer = "https://example.com",
 *                         TokenEndpoint = "https://example.com/token_endpoint",
 *                         UserInfoEndpoint = "https://example.com/user_info_endpoint",
 *                     },
 *                 },
 *                 new Aws.LB.Inputs.ListenerRuleActionArgs
 *                 {
 *                     Type = "forward",
 *                     TargetGroupArn = aws_lb_target_group.Static.Arn,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cognito"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/lb"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := lb.NewLoadBalancer(ctx, "frontEndLoadBalancer", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		frontEndListener, err := lb.NewListener(ctx, "frontEndListener", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = lb.NewListenerRule(ctx, "static", &lb.ListenerRuleArgs{
 * 			ListenerArn: frontEndListener.Arn,
 * 			Priority:    pulumi.Int(100),
 * 			Actions: lb.ListenerRuleActionArray{
 * 				&lb.ListenerRuleActionArgs{
 * 					Type:           pulumi.String("forward"),
 * 					TargetGroupArn: pulumi.Any(aws_lb_target_group.Static.Arn),
 * 				},
 * 			},
 * 			Conditions: lb.ListenerRuleConditionArray{
 * 				&lb.ListenerRuleConditionArgs{
 * 					PathPattern: &lb.ListenerRuleConditionPathPatternArgs{
 * 						Values: pulumi.StringArray{
 * 							pulumi.String("/static/*"),
 * 						},
 * 					},
 * 				},
 * 				&lb.ListenerRuleConditionArgs{
 * 					HostHeader: &lb.ListenerRuleConditionHostHeaderArgs{
 * 						Values: pulumi.StringArray{
 * 							pulumi.String("example.com"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = lb.NewListenerRule(ctx, "hostBasedWeightedRouting", &lb.ListenerRuleArgs{
 * 			ListenerArn: frontEndListener.Arn,
 * 			Priority:    pulumi.Int(99),
 * 			Actions: lb.ListenerRuleActionArray{
 * 				&lb.ListenerRuleActionArgs{
 * 					Type:           pulumi.String("forward"),
 * 					TargetGroupArn: pulumi.Any(aws_lb_target_group.Static.Arn),
 * 				},
 * 			},
 * 			Conditions: lb.ListenerRuleConditionArray{
 * 				&lb.ListenerRuleConditionArgs{
 * 					HostHeader: &lb.ListenerRuleConditionHostHeaderArgs{
 * 						Values: pulumi.StringArray{
 * 							pulumi.String("my-service.*.mycompany.io"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = lb.NewListenerRule(ctx, "hostBasedRouting", &lb.ListenerRuleArgs{
 * 			ListenerArn: frontEndListener.Arn,
 * 			Priority:    pulumi.Int(99),
 * 			Actions: lb.ListenerRuleActionArray{
 * 				&lb.ListenerRuleActionArgs{
 * 					Type: pulumi.String("forward"),
 * 					Forward: &lb.ListenerRuleActionForwardArgs{
 * 						TargetGroups: lb.ListenerRuleActionForwardTargetGroupArray{
 * 							&lb.ListenerRuleActionForwardTargetGroupArgs{
 * 								Arn:    pulumi.Any(aws_lb_target_group.Main.Arn),
 * 								Weight: pulumi.Int(80),
 * 							},
 * 							&lb.ListenerRuleActionForwardTargetGroupArgs{
 * 								Arn:    pulumi.Any(aws_lb_target_group.Canary.Arn),
 * 								Weight: pulumi.Int(20),
 * 							},
 * 						},
 * 						Stickiness: &lb.ListenerRuleActionForwardStickinessArgs{
 * 							Enabled:  pulumi.Bool(true),
 * 							Duration: pulumi.Int(600),
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Conditions: lb.ListenerRuleConditionArray{
 * 				&lb.ListenerRuleConditionArgs{
 * 					HostHeader: &lb.ListenerRuleConditionHostHeaderArgs{
 * 						Values: pulumi.StringArray{
 * 							pulumi.String("my-service.*.mycompany.io"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = lb.NewListenerRule(ctx, "redirectHttpToHttps", &lb.ListenerRuleArgs{
 * 			ListenerArn: frontEndListener.Arn,
 * 			Actions: lb.ListenerRuleActionArray{
 * 				&lb.ListenerRuleActionArgs{
 * 					Type: pulumi.String("redirect"),
 * 					Redirect: &lb.ListenerRuleActionRedirectArgs{
 * 						Port:       pulumi.String("443"),
 * 						Protocol:   pulumi.String("HTTPS"),
 * 						StatusCode: pulumi.String("HTTP_301"),
 * 					},
 * 				},
 * 			},
 * 			Conditions: lb.ListenerRuleConditionArray{
 * 				&lb.ListenerRuleConditionArgs{
 * 					HttpHeader: &lb.ListenerRuleConditionHttpHeaderArgs{
 * 						HttpHeaderName: pulumi.String("X-Forwarded-For"),
 * 						Values: pulumi.StringArray{
 * 							pulumi.String("192.168.1.*"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = lb.NewListenerRule(ctx, "healthCheck", &lb.ListenerRuleArgs{
 * 			ListenerArn: frontEndListener.Arn,
 * 			Actions: lb.ListenerRuleActionArray{
 * 				&lb.ListenerRuleActionArgs{
 * 					Type: pulumi.String("fixed-response"),
 * 					FixedResponse: &lb.ListenerRuleActionFixedResponseArgs{
 * 						ContentType: pulumi.String("text/plain"),
 * 						MessageBody: pulumi.String("HEALTHY"),
 * 						StatusCode:  pulumi.String("200"),
 * 					},
 * 				},
 * 			},
 * 			Conditions: lb.ListenerRuleConditionArray{
 * 				&lb.ListenerRuleConditionArgs{
 * 					QueryStrings: lb.ListenerRuleConditionQueryStringArray{
 * 						&lb.ListenerRuleConditionQueryStringArgs{
 * 							Key:   pulumi.String("health"),
 * 							Value: pulumi.String("check"),
 * 						},
 * 						&lb.ListenerRuleConditionQueryStringArgs{
 * 							Value: pulumi.String("bar"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		pool, err := cognito.NewUserPool(ctx, "pool", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		client, err := cognito.NewUserPoolClient(ctx, "client", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		domain, err := cognito.NewUserPoolDomain(ctx, "domain", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = lb.NewListenerRule(ctx, "admin", &lb.ListenerRuleArgs{
 * 			ListenerArn: frontEndListener.Arn,
 * 			Actions: lb.ListenerRuleActionArray{
 * 				&lb.ListenerRuleActionArgs{
 * 					Type: pulumi.String("authenticate-cognito"),
 * 					AuthenticateCognito: &lb.ListenerRuleActionAuthenticateCognitoArgs{
 * 						UserPoolArn:      pool.Arn,
 * 						UserPoolClientId: client.ID(),
 * 						UserPoolDomain:   domain.Domain,
 * 					},
 * 				},
 * 				&lb.ListenerRuleActionArgs{
 * 					Type:           pulumi.String("forward"),
 * 					TargetGroupArn: pulumi.Any(aws_lb_target_group.Static.Arn),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = lb.NewListenerRule(ctx, "oidc", &lb.ListenerRuleArgs{
 * 			ListenerArn: frontEndListener.Arn,
 * 			Actions: lb.ListenerRuleActionArray{
 * 				&lb.ListenerRuleActionArgs{
 * 					Type: pulumi.String("authenticate-oidc"),
 * 					AuthenticateOidc: &lb.ListenerRuleActionAuthenticateOidcArgs{
 * 						AuthorizationEndpoint: pulumi.String("https://example.com/authorization_endpoint"),
 * 						ClientId:              pulumi.String("client_id"),
 * 						ClientSecret:          pulumi.String("client_secret"),
 * 						Issuer:                pulumi.String("https://example.com"),
 * 						TokenEndpoint:         pulumi.String("https://example.com/token_endpoint"),
 * 						UserInfoEndpoint:      pulumi.String("https://example.com/user_info_endpoint"),
 * 					},
 * 				},
 * 				&lb.ListenerRuleActionArgs{
 * 					Type:           pulumi.String("forward"),
 * 					TargetGroupArn: pulumi.Any(aws_lb_target_group.Static.Arn),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Rules can be imported using their ARN, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:elasticloadbalancingv2/listenerRule:ListenerRule front_end arn:aws:elasticloadbalancing:us-west-2:187416307283:listener-rule/app/test/8e4497da625e2d8a/9ab28ade35828f96/67b3d2d36dd7c26b
 * ```
 * 
 *  
 * @Deprecated
 * aws.elasticloadbalancingv2.ListenerRule has been deprecated in favor of aws.lb.ListenerRule
 */
@Deprecated /* aws.elasticloadbalancingv2.ListenerRule has been deprecated in favor of aws.lb.ListenerRule */
@ResourceType(type="aws:elasticloadbalancingv2/listenerRule:ListenerRule")
public class ListenerRule extends io.pulumi.resources.CustomResource {
    /**
     * An Action block. Action blocks are documented below.
     * 
     */
    @Export(name="actions", type=List.class, parameters={ListenerRuleAction.class})
    private Output<List<ListenerRuleAction>> actions;

    /**
     * @return An Action block. Action blocks are documented below.
     * 
     */
    public Output<List<ListenerRuleAction>> getActions() {
        return this.actions;
    }
    /**
     * The Amazon Resource Name (ARN) of the target group.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the target group.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
     * 
     */
    @Export(name="conditions", type=List.class, parameters={ListenerRuleCondition.class})
    private Output<List<ListenerRuleCondition>> conditions;

    /**
     * @return A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
     * 
     */
    public Output<List<ListenerRuleCondition>> getConditions() {
        return this.conditions;
    }
    /**
     * The ARN of the listener to which to attach the rule.
     * 
     */
    @Export(name="listenerArn", type=String.class, parameters={})
    private Output<String> listenerArn;

    /**
     * @return The ARN of the listener to which to attach the rule.
     * 
     */
    public Output<String> getListenerArn() {
        return this.listenerArn;
    }
    /**
     * The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
     * 
     */
    @Export(name="priority", type=Integer.class, parameters={})
    private Output<Integer> priority;

    /**
     * @return The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
     * 
     */
    public Output<Integer> getPriority() {
        return this.priority;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ListenerRule(String name) {
        this(name, ListenerRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ListenerRule(String name, ListenerRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ListenerRule(String name, ListenerRuleArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:elasticloadbalancingv2/listenerRule:ListenerRule", name, args == null ? ListenerRuleArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ListenerRule(String name, Output<String> id, @Nullable ListenerRuleState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:elasticloadbalancingv2/listenerRule:ListenerRule", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ListenerRule get(String name, Output<String> id, @Nullable ListenerRuleState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ListenerRule(name, id, state, options);
    }
}
