// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.schemas;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SchemaArgs extends io.pulumi.resources.ResourceArgs {

    public static final SchemaArgs Empty = new SchemaArgs();

    /**
     * The schema specification. Must be a valid Open API 3.0 spec.
     * 
     */
    @InputImport(name="content", required=true)
      private final Input<String> content;

    public Input<String> getContent() {
        return this.content;
    }

    /**
     * The description of the schema. Maximum of 256 characters.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The name of the schema. Maximum of 385 characters consisting of lower case letters, upper case letters, ., -, _, @.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The name of the registry in which this schema belongs.
     * 
     */
    @InputImport(name="registryName", required=true)
      private final Input<String> registryName;

    public Input<String> getRegistryName() {
        return this.registryName;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The type of the schema. Valid values: `OpenApi3`.
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public SchemaArgs(
        Input<String> content,
        @Nullable Input<String> description,
        @Nullable Input<String> name,
        Input<String> registryName,
        @Nullable Input<Map<String,String>> tags,
        Input<String> type) {
        this.content = Objects.requireNonNull(content, "expected parameter 'content' to be non-null");
        this.description = description;
        this.name = name;
        this.registryName = Objects.requireNonNull(registryName, "expected parameter 'registryName' to be non-null");
        this.tags = tags;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private SchemaArgs() {
        this.content = Input.empty();
        this.description = Input.empty();
        this.name = Input.empty();
        this.registryName = Input.empty();
        this.tags = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> content;
        private @Nullable Input<String> description;
        private @Nullable Input<String> name;
        private Input<String> registryName;
        private @Nullable Input<Map<String,String>> tags;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(SchemaArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.registryName = defaults.registryName;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder content(Input<String> content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }

        public Builder content(String content) {
            this.content = Input.of(Objects.requireNonNull(content));
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder registryName(Input<String> registryName) {
            this.registryName = Objects.requireNonNull(registryName);
            return this;
        }

        public Builder registryName(String registryName) {
            this.registryName = Input.of(Objects.requireNonNull(registryName));
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder type(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }
        public SchemaArgs build() {
            return new SchemaArgs(content, description, name, registryName, tags, type);
        }
    }
}
