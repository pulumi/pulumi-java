// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx;

import io.pulumi.aws.fsx.inputs.OntapStorageVirtualMachineActiveDirectoryConfigurationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OntapStorageVirtualMachineArgs extends io.pulumi.resources.ResourceArgs {

    public static final OntapStorageVirtualMachineArgs Empty = new OntapStorageVirtualMachineArgs();

    /**
     * Configuration block that Amazon FSx uses to join the FSx ONTAP Storage Virtual Machine(SVM) to your Microsoft Active Directory (AD) directory. Detailed below.
     * 
     */
    @InputImport(name="activeDirectoryConfiguration")
    private final @Nullable Input<OntapStorageVirtualMachineActiveDirectoryConfigurationArgs> activeDirectoryConfiguration;

    public Input<OntapStorageVirtualMachineActiveDirectoryConfigurationArgs> getActiveDirectoryConfiguration() {
        return this.activeDirectoryConfiguration == null ? Input.empty() : this.activeDirectoryConfiguration;
    }

    /**
     * The ID of the Amazon FSx ONTAP File System that this SVM will be created on.
     * 
     */
    @InputImport(name="fileSystemId", required=true)
    private final Input<String> fileSystemId;

    public Input<String> getFileSystemId() {
        return this.fileSystemId;
    }

    /**
     * The name of the SVM. You can use a maximum of 47 alphanumeric characters, plus the underscore (_) special character.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Specifies the root volume security style, Valid values are `UNIX`, `NTFS`, and `MIXED`. All volumes created under this SVM will inherit the root security style unless the security style is specified on the volume. Default value is `UNIX`.
     * 
     */
    @InputImport(name="rootVolumeSecurityStyle")
    private final @Nullable Input<String> rootVolumeSecurityStyle;

    public Input<String> getRootVolumeSecurityStyle() {
        return this.rootVolumeSecurityStyle == null ? Input.empty() : this.rootVolumeSecurityStyle;
    }

    @InputImport(name="svmAdminPassword")
    private final @Nullable Input<String> svmAdminPassword;

    public Input<String> getSvmAdminPassword() {
        return this.svmAdminPassword == null ? Input.empty() : this.svmAdminPassword;
    }

    /**
     * A map of tags to assign to the storage virtual machine. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public OntapStorageVirtualMachineArgs(
        @Nullable Input<OntapStorageVirtualMachineActiveDirectoryConfigurationArgs> activeDirectoryConfiguration,
        Input<String> fileSystemId,
        @Nullable Input<String> name,
        @Nullable Input<String> rootVolumeSecurityStyle,
        @Nullable Input<String> svmAdminPassword,
        @Nullable Input<Map<String,String>> tags) {
        this.activeDirectoryConfiguration = activeDirectoryConfiguration;
        this.fileSystemId = Objects.requireNonNull(fileSystemId, "expected parameter 'fileSystemId' to be non-null");
        this.name = name;
        this.rootVolumeSecurityStyle = rootVolumeSecurityStyle;
        this.svmAdminPassword = svmAdminPassword;
        this.tags = tags;
    }

    private OntapStorageVirtualMachineArgs() {
        this.activeDirectoryConfiguration = Input.empty();
        this.fileSystemId = Input.empty();
        this.name = Input.empty();
        this.rootVolumeSecurityStyle = Input.empty();
        this.svmAdminPassword = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OntapStorageVirtualMachineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<OntapStorageVirtualMachineActiveDirectoryConfigurationArgs> activeDirectoryConfiguration;
        private Input<String> fileSystemId;
        private @Nullable Input<String> name;
        private @Nullable Input<String> rootVolumeSecurityStyle;
        private @Nullable Input<String> svmAdminPassword;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(OntapStorageVirtualMachineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDirectoryConfiguration = defaults.activeDirectoryConfiguration;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.name = defaults.name;
    	      this.rootVolumeSecurityStyle = defaults.rootVolumeSecurityStyle;
    	      this.svmAdminPassword = defaults.svmAdminPassword;
    	      this.tags = defaults.tags;
        }

        public Builder setActiveDirectoryConfiguration(@Nullable Input<OntapStorageVirtualMachineActiveDirectoryConfigurationArgs> activeDirectoryConfiguration) {
            this.activeDirectoryConfiguration = activeDirectoryConfiguration;
            return this;
        }

        public Builder setActiveDirectoryConfiguration(@Nullable OntapStorageVirtualMachineActiveDirectoryConfigurationArgs activeDirectoryConfiguration) {
            this.activeDirectoryConfiguration = Input.ofNullable(activeDirectoryConfiguration);
            return this;
        }

        public Builder setFileSystemId(Input<String> fileSystemId) {
            this.fileSystemId = Objects.requireNonNull(fileSystemId);
            return this;
        }

        public Builder setFileSystemId(String fileSystemId) {
            this.fileSystemId = Input.of(Objects.requireNonNull(fileSystemId));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setRootVolumeSecurityStyle(@Nullable Input<String> rootVolumeSecurityStyle) {
            this.rootVolumeSecurityStyle = rootVolumeSecurityStyle;
            return this;
        }

        public Builder setRootVolumeSecurityStyle(@Nullable String rootVolumeSecurityStyle) {
            this.rootVolumeSecurityStyle = Input.ofNullable(rootVolumeSecurityStyle);
            return this;
        }

        public Builder setSvmAdminPassword(@Nullable Input<String> svmAdminPassword) {
            this.svmAdminPassword = svmAdminPassword;
            return this;
        }

        public Builder setSvmAdminPassword(@Nullable String svmAdminPassword) {
            this.svmAdminPassword = Input.ofNullable(svmAdminPassword);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public OntapStorageVirtualMachineArgs build() {
            return new OntapStorageVirtualMachineArgs(activeDirectoryConfiguration, fileSystemId, name, rootVolumeSecurityStyle, svmAdminPassword, tags);
        }
    }
}
