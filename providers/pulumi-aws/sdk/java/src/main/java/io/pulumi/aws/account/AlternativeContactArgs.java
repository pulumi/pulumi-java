// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.account;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AlternativeContactArgs extends io.pulumi.resources.ResourceArgs {

    public static final AlternativeContactArgs Empty = new AlternativeContactArgs();

    /**
     * The ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
     * 
     */
    @InputImport(name="accountId")
      private final @Nullable Input<String> accountId;

    public Input<String> getAccountId() {
        return this.accountId == null ? Input.empty() : this.accountId;
    }

    /**
     * The type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
     * 
     */
    @InputImport(name="alternateContactType", required=true)
      private final Input<String> alternateContactType;

    public Input<String> getAlternateContactType() {
        return this.alternateContactType;
    }

    /**
     * An email address for the alternate contact.
     * 
     */
    @InputImport(name="emailAddress", required=true)
      private final Input<String> emailAddress;

    public Input<String> getEmailAddress() {
        return this.emailAddress;
    }

    /**
     * The name of the alternate contact.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A phone number for the alternate contact.
     * 
     */
    @InputImport(name="phoneNumber", required=true)
      private final Input<String> phoneNumber;

    public Input<String> getPhoneNumber() {
        return this.phoneNumber;
    }

    /**
     * A title for the alternate contact.
     * 
     */
    @InputImport(name="title", required=true)
      private final Input<String> title;

    public Input<String> getTitle() {
        return this.title;
    }

    public AlternativeContactArgs(
        @Nullable Input<String> accountId,
        Input<String> alternateContactType,
        Input<String> emailAddress,
        @Nullable Input<String> name,
        Input<String> phoneNumber,
        Input<String> title) {
        this.accountId = accountId;
        this.alternateContactType = Objects.requireNonNull(alternateContactType, "expected parameter 'alternateContactType' to be non-null");
        this.emailAddress = Objects.requireNonNull(emailAddress, "expected parameter 'emailAddress' to be non-null");
        this.name = name;
        this.phoneNumber = Objects.requireNonNull(phoneNumber, "expected parameter 'phoneNumber' to be non-null");
        this.title = Objects.requireNonNull(title, "expected parameter 'title' to be non-null");
    }

    private AlternativeContactArgs() {
        this.accountId = Input.empty();
        this.alternateContactType = Input.empty();
        this.emailAddress = Input.empty();
        this.name = Input.empty();
        this.phoneNumber = Input.empty();
        this.title = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlternativeContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accountId;
        private Input<String> alternateContactType;
        private Input<String> emailAddress;
        private @Nullable Input<String> name;
        private Input<String> phoneNumber;
        private Input<String> title;

        public Builder() {
    	      // Empty
        }

        public Builder(AlternativeContactArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.alternateContactType = defaults.alternateContactType;
    	      this.emailAddress = defaults.emailAddress;
    	      this.name = defaults.name;
    	      this.phoneNumber = defaults.phoneNumber;
    	      this.title = defaults.title;
        }

        public Builder accountId(@Nullable Input<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(@Nullable String accountId) {
            this.accountId = Input.ofNullable(accountId);
            return this;
        }

        public Builder alternateContactType(Input<String> alternateContactType) {
            this.alternateContactType = Objects.requireNonNull(alternateContactType);
            return this;
        }

        public Builder alternateContactType(String alternateContactType) {
            this.alternateContactType = Input.of(Objects.requireNonNull(alternateContactType));
            return this;
        }

        public Builder emailAddress(Input<String> emailAddress) {
            this.emailAddress = Objects.requireNonNull(emailAddress);
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            this.emailAddress = Input.of(Objects.requireNonNull(emailAddress));
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder phoneNumber(Input<String> phoneNumber) {
            this.phoneNumber = Objects.requireNonNull(phoneNumber);
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Input.of(Objects.requireNonNull(phoneNumber));
            return this;
        }

        public Builder title(Input<String> title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }

        public Builder title(String title) {
            this.title = Input.of(Objects.requireNonNull(title));
            return this;
        }
        public AlternativeContactArgs build() {
            return new AlternativeContactArgs(accountId, alternateContactType, emailAddress, name, phoneNumber, title);
        }
    }
}
