// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.macie.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class FindingsFilterFindingCriteriaCriterion {
    /**
     * The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
     * 
     */
    private final @Nullable List<String> eqExactMatches;
    /**
     * The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    private final @Nullable List<String> eqs;
    /**
     * The name of the field to be evaluated.
     * 
     */
    private final String field;
    /**
     * The value for the property is greater than the specified value.
     * 
     */
    private final @Nullable String gt;
    /**
     * The value for the property is greater than or equal to the specified value.
     * 
     */
    private final @Nullable String gte;
    /**
     * The value for the property is less than the specified value.
     * 
     */
    private final @Nullable String lt;
    /**
     * The value for the property is less than or equal to the specified value.
     * 
     */
    private final @Nullable String lte;
    /**
     * The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
     */
    private final @Nullable List<String> neqs;

    @OutputCustomType.Constructor({"eqExactMatches","eqs","field","gt","gte","lt","lte","neqs"})
    private FindingsFilterFindingCriteriaCriterion(
        @Nullable List<String> eqExactMatches,
        @Nullable List<String> eqs,
        String field,
        @Nullable String gt,
        @Nullable String gte,
        @Nullable String lt,
        @Nullable String lte,
        @Nullable List<String> neqs) {
        this.eqExactMatches = eqExactMatches;
        this.eqs = eqs;
        this.field = Objects.requireNonNull(field);
        this.gt = gt;
        this.gte = gte;
        this.lt = lt;
        this.lte = lte;
        this.neqs = neqs;
    }

    /**
     * The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
     * 
    */
    public List<String> getEqExactMatches() {
        return this.eqExactMatches == null ? List.of() : this.eqExactMatches;
    }
    /**
     * The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
    */
    public List<String> getEqs() {
        return this.eqs == null ? List.of() : this.eqs;
    }
    /**
     * The name of the field to be evaluated.
     * 
    */
    public String getField() {
        return this.field;
    }
    /**
     * The value for the property is greater than the specified value.
     * 
    */
    public Optional<String> getGt() {
        return Optional.ofNullable(this.gt);
    }
    /**
     * The value for the property is greater than or equal to the specified value.
     * 
    */
    public Optional<String> getGte() {
        return Optional.ofNullable(this.gte);
    }
    /**
     * The value for the property is less than the specified value.
     * 
    */
    public Optional<String> getLt() {
        return Optional.ofNullable(this.lt);
    }
    /**
     * The value for the property is less than or equal to the specified value.
     * 
    */
    public Optional<String> getLte() {
        return Optional.ofNullable(this.lte);
    }
    /**
     * The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
     * 
    */
    public List<String> getNeqs() {
        return this.neqs == null ? List.of() : this.neqs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FindingsFilterFindingCriteriaCriterion defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> eqExactMatches;
        private @Nullable List<String> eqs;
        private String field;
        private @Nullable String gt;
        private @Nullable String gte;
        private @Nullable String lt;
        private @Nullable String lte;
        private @Nullable List<String> neqs;

        public Builder() {
    	      // Empty
        }

        public Builder(FindingsFilterFindingCriteriaCriterion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eqExactMatches = defaults.eqExactMatches;
    	      this.eqs = defaults.eqs;
    	      this.field = defaults.field;
    	      this.gt = defaults.gt;
    	      this.gte = defaults.gte;
    	      this.lt = defaults.lt;
    	      this.lte = defaults.lte;
    	      this.neqs = defaults.neqs;
        }

        public Builder setEqExactMatches(@Nullable List<String> eqExactMatches) {
            this.eqExactMatches = eqExactMatches;
            return this;
        }

        public Builder setEqs(@Nullable List<String> eqs) {
            this.eqs = eqs;
            return this;
        }

        public Builder setField(String field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }

        public Builder setGt(@Nullable String gt) {
            this.gt = gt;
            return this;
        }

        public Builder setGte(@Nullable String gte) {
            this.gte = gte;
            return this;
        }

        public Builder setLt(@Nullable String lt) {
            this.lt = lt;
            return this;
        }

        public Builder setLte(@Nullable String lte) {
            this.lte = lte;
            return this;
        }

        public Builder setNeqs(@Nullable List<String> neqs) {
            this.neqs = neqs;
            return this;
        }
        public FindingsFilterFindingCriteriaCriterion build() {
            return new FindingsFilterFindingCriteriaCriterion(eqExactMatches, eqs, field, gt, gte, lt, lte, neqs);
        }
    }
}
