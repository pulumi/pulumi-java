// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ebs.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SnapshotCopyState extends io.pulumi.resources.ResourceArgs {

    public static final SnapshotCopyState Empty = new SnapshotCopyState();

    /**
     * Amazon Resource Name (ARN) of the EBS Snapshot.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The data encryption key identifier for the snapshot.
     * 
     */
    @InputImport(name="dataEncryptionKeyId")
      private final @Nullable Input<String> dataEncryptionKeyId;

    public Input<String> getDataEncryptionKeyId() {
        return this.dataEncryptionKeyId == null ? Input.empty() : this.dataEncryptionKeyId;
    }

    /**
     * A description of what the snapshot is.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Whether the snapshot is encrypted.
     * 
     */
    @InputImport(name="encrypted")
      private final @Nullable Input<Boolean> encrypted;

    public Input<Boolean> getEncrypted() {
        return this.encrypted == null ? Input.empty() : this.encrypted;
    }

    /**
     * The ARN for the KMS encryption key.
     * 
     */
    @InputImport(name="kmsKeyId")
      private final @Nullable Input<String> kmsKeyId;

    public Input<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Input.empty() : this.kmsKeyId;
    }

    @InputImport(name="outpostArn")
      private final @Nullable Input<String> outpostArn;

    public Input<String> getOutpostArn() {
        return this.outpostArn == null ? Input.empty() : this.outpostArn;
    }

    /**
     * Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
     * 
     */
    @InputImport(name="ownerAlias")
      private final @Nullable Input<String> ownerAlias;

    public Input<String> getOwnerAlias() {
        return this.ownerAlias == null ? Input.empty() : this.ownerAlias;
    }

    /**
     * The AWS account ID of the snapshot owner.
     * 
     */
    @InputImport(name="ownerId")
      private final @Nullable Input<String> ownerId;

    public Input<String> getOwnerId() {
        return this.ownerId == null ? Input.empty() : this.ownerId;
    }

    /**
     * Indicates whether to permanently restore an archived snapshot.
     * 
     */
    @InputImport(name="permanentRestore")
      private final @Nullable Input<Boolean> permanentRestore;

    public Input<Boolean> getPermanentRestore() {
        return this.permanentRestore == null ? Input.empty() : this.permanentRestore;
    }

    /**
     * The region of the source snapshot.
     * 
     */
    @InputImport(name="sourceRegion")
      private final @Nullable Input<String> sourceRegion;

    public Input<String> getSourceRegion() {
        return this.sourceRegion == null ? Input.empty() : this.sourceRegion;
    }

    /**
     * The ARN for the snapshot to be copied.
     * 
     */
    @InputImport(name="sourceSnapshotId")
      private final @Nullable Input<String> sourceSnapshotId;

    public Input<String> getSourceSnapshotId() {
        return this.sourceSnapshotId == null ? Input.empty() : this.sourceSnapshotId;
    }

    /**
     * The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
     * 
     */
    @InputImport(name="storageTier")
      private final @Nullable Input<String> storageTier;

    public Input<String> getStorageTier() {
        return this.storageTier == null ? Input.empty() : this.storageTier;
    }

    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
     * 
     */
    @InputImport(name="temporaryRestoreDays")
      private final @Nullable Input<Integer> temporaryRestoreDays;

    public Input<Integer> getTemporaryRestoreDays() {
        return this.temporaryRestoreDays == null ? Input.empty() : this.temporaryRestoreDays;
    }

    @InputImport(name="volumeId")
      private final @Nullable Input<String> volumeId;

    public Input<String> getVolumeId() {
        return this.volumeId == null ? Input.empty() : this.volumeId;
    }

    /**
     * The size of the drive in GiBs.
     * 
     */
    @InputImport(name="volumeSize")
      private final @Nullable Input<Integer> volumeSize;

    public Input<Integer> getVolumeSize() {
        return this.volumeSize == null ? Input.empty() : this.volumeSize;
    }

    public SnapshotCopyState(
        @Nullable Input<String> arn,
        @Nullable Input<String> dataEncryptionKeyId,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> encrypted,
        @Nullable Input<String> kmsKeyId,
        @Nullable Input<String> outpostArn,
        @Nullable Input<String> ownerAlias,
        @Nullable Input<String> ownerId,
        @Nullable Input<Boolean> permanentRestore,
        @Nullable Input<String> sourceRegion,
        @Nullable Input<String> sourceSnapshotId,
        @Nullable Input<String> storageTier,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<Integer> temporaryRestoreDays,
        @Nullable Input<String> volumeId,
        @Nullable Input<Integer> volumeSize) {
        this.arn = arn;
        this.dataEncryptionKeyId = dataEncryptionKeyId;
        this.description = description;
        this.encrypted = encrypted;
        this.kmsKeyId = kmsKeyId;
        this.outpostArn = outpostArn;
        this.ownerAlias = ownerAlias;
        this.ownerId = ownerId;
        this.permanentRestore = permanentRestore;
        this.sourceRegion = sourceRegion;
        this.sourceSnapshotId = sourceSnapshotId;
        this.storageTier = storageTier;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.temporaryRestoreDays = temporaryRestoreDays;
        this.volumeId = volumeId;
        this.volumeSize = volumeSize;
    }

    private SnapshotCopyState() {
        this.arn = Input.empty();
        this.dataEncryptionKeyId = Input.empty();
        this.description = Input.empty();
        this.encrypted = Input.empty();
        this.kmsKeyId = Input.empty();
        this.outpostArn = Input.empty();
        this.ownerAlias = Input.empty();
        this.ownerId = Input.empty();
        this.permanentRestore = Input.empty();
        this.sourceRegion = Input.empty();
        this.sourceSnapshotId = Input.empty();
        this.storageTier = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.temporaryRestoreDays = Input.empty();
        this.volumeId = Input.empty();
        this.volumeSize = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SnapshotCopyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> dataEncryptionKeyId;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> encrypted;
        private @Nullable Input<String> kmsKeyId;
        private @Nullable Input<String> outpostArn;
        private @Nullable Input<String> ownerAlias;
        private @Nullable Input<String> ownerId;
        private @Nullable Input<Boolean> permanentRestore;
        private @Nullable Input<String> sourceRegion;
        private @Nullable Input<String> sourceSnapshotId;
        private @Nullable Input<String> storageTier;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<Integer> temporaryRestoreDays;
        private @Nullable Input<String> volumeId;
        private @Nullable Input<Integer> volumeSize;

        public Builder() {
    	      // Empty
        }

        public Builder(SnapshotCopyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.dataEncryptionKeyId = defaults.dataEncryptionKeyId;
    	      this.description = defaults.description;
    	      this.encrypted = defaults.encrypted;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.outpostArn = defaults.outpostArn;
    	      this.ownerAlias = defaults.ownerAlias;
    	      this.ownerId = defaults.ownerId;
    	      this.permanentRestore = defaults.permanentRestore;
    	      this.sourceRegion = defaults.sourceRegion;
    	      this.sourceSnapshotId = defaults.sourceSnapshotId;
    	      this.storageTier = defaults.storageTier;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.temporaryRestoreDays = defaults.temporaryRestoreDays;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeSize = defaults.volumeSize;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder dataEncryptionKeyId(@Nullable Input<String> dataEncryptionKeyId) {
            this.dataEncryptionKeyId = dataEncryptionKeyId;
            return this;
        }

        public Builder dataEncryptionKeyId(@Nullable String dataEncryptionKeyId) {
            this.dataEncryptionKeyId = Input.ofNullable(dataEncryptionKeyId);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder encrypted(@Nullable Input<Boolean> encrypted) {
            this.encrypted = encrypted;
            return this;
        }

        public Builder encrypted(@Nullable Boolean encrypted) {
            this.encrypted = Input.ofNullable(encrypted);
            return this;
        }

        public Builder kmsKeyId(@Nullable Input<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Input.ofNullable(kmsKeyId);
            return this;
        }

        public Builder outpostArn(@Nullable Input<String> outpostArn) {
            this.outpostArn = outpostArn;
            return this;
        }

        public Builder outpostArn(@Nullable String outpostArn) {
            this.outpostArn = Input.ofNullable(outpostArn);
            return this;
        }

        public Builder ownerAlias(@Nullable Input<String> ownerAlias) {
            this.ownerAlias = ownerAlias;
            return this;
        }

        public Builder ownerAlias(@Nullable String ownerAlias) {
            this.ownerAlias = Input.ofNullable(ownerAlias);
            return this;
        }

        public Builder ownerId(@Nullable Input<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = Input.ofNullable(ownerId);
            return this;
        }

        public Builder permanentRestore(@Nullable Input<Boolean> permanentRestore) {
            this.permanentRestore = permanentRestore;
            return this;
        }

        public Builder permanentRestore(@Nullable Boolean permanentRestore) {
            this.permanentRestore = Input.ofNullable(permanentRestore);
            return this;
        }

        public Builder sourceRegion(@Nullable Input<String> sourceRegion) {
            this.sourceRegion = sourceRegion;
            return this;
        }

        public Builder sourceRegion(@Nullable String sourceRegion) {
            this.sourceRegion = Input.ofNullable(sourceRegion);
            return this;
        }

        public Builder sourceSnapshotId(@Nullable Input<String> sourceSnapshotId) {
            this.sourceSnapshotId = sourceSnapshotId;
            return this;
        }

        public Builder sourceSnapshotId(@Nullable String sourceSnapshotId) {
            this.sourceSnapshotId = Input.ofNullable(sourceSnapshotId);
            return this;
        }

        public Builder storageTier(@Nullable Input<String> storageTier) {
            this.storageTier = storageTier;
            return this;
        }

        public Builder storageTier(@Nullable String storageTier) {
            this.storageTier = Input.ofNullable(storageTier);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder temporaryRestoreDays(@Nullable Input<Integer> temporaryRestoreDays) {
            this.temporaryRestoreDays = temporaryRestoreDays;
            return this;
        }

        public Builder temporaryRestoreDays(@Nullable Integer temporaryRestoreDays) {
            this.temporaryRestoreDays = Input.ofNullable(temporaryRestoreDays);
            return this;
        }

        public Builder volumeId(@Nullable Input<String> volumeId) {
            this.volumeId = volumeId;
            return this;
        }

        public Builder volumeId(@Nullable String volumeId) {
            this.volumeId = Input.ofNullable(volumeId);
            return this;
        }

        public Builder volumeSize(@Nullable Input<Integer> volumeSize) {
            this.volumeSize = volumeSize;
            return this;
        }

        public Builder volumeSize(@Nullable Integer volumeSize) {
            this.volumeSize = Input.ofNullable(volumeSize);
            return this;
        }
        public SnapshotCopyState build() {
            return new SnapshotCopyState(arn, dataEncryptionKeyId, description, encrypted, kmsKeyId, outpostArn, ownerAlias, ownerId, permanentRestore, sourceRegion, sourceSnapshotId, storageTier, tags, tagsAll, temporaryRestoreDays, volumeId, volumeSize);
        }
    }
}
