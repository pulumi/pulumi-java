// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2clientvpn;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouteArgs extends io.pulumi.resources.ResourceArgs {

    public static final RouteArgs Empty = new RouteArgs();

    /**
     * The ID of the Client VPN endpoint.
     * 
     */
    @InputImport(name="clientVpnEndpointId", required=true)
      private final Input<String> clientVpnEndpointId;

    public Input<String> getClientVpnEndpointId() {
        return this.clientVpnEndpointId;
    }

    /**
     * A brief description of the authorization rule.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The IPv4 address range, in CIDR notation, of the route destination.
     * 
     */
    @InputImport(name="destinationCidrBlock", required=true)
      private final Input<String> destinationCidrBlock;

    public Input<String> getDestinationCidrBlock() {
        return this.destinationCidrBlock;
    }

    /**
     * The ID of the Subnet to route the traffic through. It must already be attached to the Client VPN.
     * 
     */
    @InputImport(name="targetVpcSubnetId", required=true)
      private final Input<String> targetVpcSubnetId;

    public Input<String> getTargetVpcSubnetId() {
        return this.targetVpcSubnetId;
    }

    public RouteArgs(
        Input<String> clientVpnEndpointId,
        @Nullable Input<String> description,
        Input<String> destinationCidrBlock,
        Input<String> targetVpcSubnetId) {
        this.clientVpnEndpointId = Objects.requireNonNull(clientVpnEndpointId, "expected parameter 'clientVpnEndpointId' to be non-null");
        this.description = description;
        this.destinationCidrBlock = Objects.requireNonNull(destinationCidrBlock, "expected parameter 'destinationCidrBlock' to be non-null");
        this.targetVpcSubnetId = Objects.requireNonNull(targetVpcSubnetId, "expected parameter 'targetVpcSubnetId' to be non-null");
    }

    private RouteArgs() {
        this.clientVpnEndpointId = Input.empty();
        this.description = Input.empty();
        this.destinationCidrBlock = Input.empty();
        this.targetVpcSubnetId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> clientVpnEndpointId;
        private @Nullable Input<String> description;
        private Input<String> destinationCidrBlock;
        private Input<String> targetVpcSubnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(RouteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientVpnEndpointId = defaults.clientVpnEndpointId;
    	      this.description = defaults.description;
    	      this.destinationCidrBlock = defaults.destinationCidrBlock;
    	      this.targetVpcSubnetId = defaults.targetVpcSubnetId;
        }

        public Builder clientVpnEndpointId(Input<String> clientVpnEndpointId) {
            this.clientVpnEndpointId = Objects.requireNonNull(clientVpnEndpointId);
            return this;
        }

        public Builder clientVpnEndpointId(String clientVpnEndpointId) {
            this.clientVpnEndpointId = Input.of(Objects.requireNonNull(clientVpnEndpointId));
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder destinationCidrBlock(Input<String> destinationCidrBlock) {
            this.destinationCidrBlock = Objects.requireNonNull(destinationCidrBlock);
            return this;
        }

        public Builder destinationCidrBlock(String destinationCidrBlock) {
            this.destinationCidrBlock = Input.of(Objects.requireNonNull(destinationCidrBlock));
            return this;
        }

        public Builder targetVpcSubnetId(Input<String> targetVpcSubnetId) {
            this.targetVpcSubnetId = Objects.requireNonNull(targetVpcSubnetId);
            return this;
        }

        public Builder targetVpcSubnetId(String targetVpcSubnetId) {
            this.targetVpcSubnetId = Input.of(Objects.requireNonNull(targetVpcSubnetId));
            return this;
        }
        public RouteArgs build() {
            return new RouteArgs(clientVpnEndpointId, description, destinationCidrBlock, targetVpcSubnetId);
        }
    }
}
