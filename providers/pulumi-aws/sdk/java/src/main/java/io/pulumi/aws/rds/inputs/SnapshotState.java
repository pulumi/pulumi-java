// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SnapshotState extends io.pulumi.resources.ResourceArgs {

    public static final SnapshotState Empty = new SnapshotState();

    /**
     * Specifies the allocated storage size in gigabytes (GB).
     * 
     */
    @InputImport(name="allocatedStorage")
      private final @Nullable Input<Integer> allocatedStorage;

    public Input<Integer> getAllocatedStorage() {
        return this.allocatedStorage == null ? Input.empty() : this.allocatedStorage;
    }

    /**
     * Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
     * 
     */
    @InputImport(name="availabilityZone")
      private final @Nullable Input<String> availabilityZone;

    public Input<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Input.empty() : this.availabilityZone;
    }

    /**
     * The DB Instance Identifier from which to take the snapshot.
     * 
     */
    @InputImport(name="dbInstanceIdentifier")
      private final @Nullable Input<String> dbInstanceIdentifier;

    public Input<String> getDbInstanceIdentifier() {
        return this.dbInstanceIdentifier == null ? Input.empty() : this.dbInstanceIdentifier;
    }

    /**
     * The Amazon Resource Name (ARN) for the DB snapshot.
     * 
     */
    @InputImport(name="dbSnapshotArn")
      private final @Nullable Input<String> dbSnapshotArn;

    public Input<String> getDbSnapshotArn() {
        return this.dbSnapshotArn == null ? Input.empty() : this.dbSnapshotArn;
    }

    /**
     * The Identifier for the snapshot.
     * 
     */
    @InputImport(name="dbSnapshotIdentifier")
      private final @Nullable Input<String> dbSnapshotIdentifier;

    public Input<String> getDbSnapshotIdentifier() {
        return this.dbSnapshotIdentifier == null ? Input.empty() : this.dbSnapshotIdentifier;
    }

    /**
     * Specifies whether the DB snapshot is encrypted.
     * 
     */
    @InputImport(name="encrypted")
      private final @Nullable Input<Boolean> encrypted;

    public Input<Boolean> getEncrypted() {
        return this.encrypted == null ? Input.empty() : this.encrypted;
    }

    /**
     * Specifies the name of the database engine.
     * 
     */
    @InputImport(name="engine")
      private final @Nullable Input<String> engine;

    public Input<String> getEngine() {
        return this.engine == null ? Input.empty() : this.engine;
    }

    /**
     * Specifies the version of the database engine.
     * 
     */
    @InputImport(name="engineVersion")
      private final @Nullable Input<String> engineVersion;

    public Input<String> getEngineVersion() {
        return this.engineVersion == null ? Input.empty() : this.engineVersion;
    }

    /**
     * Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
     * 
     */
    @InputImport(name="iops")
      private final @Nullable Input<Integer> iops;

    public Input<Integer> getIops() {
        return this.iops == null ? Input.empty() : this.iops;
    }

    /**
     * The ARN for the KMS encryption key.
     * 
     */
    @InputImport(name="kmsKeyId")
      private final @Nullable Input<String> kmsKeyId;

    public Input<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Input.empty() : this.kmsKeyId;
    }

    /**
     * License model information for the restored DB instance.
     * 
     */
    @InputImport(name="licenseModel")
      private final @Nullable Input<String> licenseModel;

    public Input<String> getLicenseModel() {
        return this.licenseModel == null ? Input.empty() : this.licenseModel;
    }

    /**
     * Provides the option group name for the DB snapshot.
     * 
     */
    @InputImport(name="optionGroupName")
      private final @Nullable Input<String> optionGroupName;

    public Input<String> getOptionGroupName() {
        return this.optionGroupName == null ? Input.empty() : this.optionGroupName;
    }

    @InputImport(name="port")
      private final @Nullable Input<Integer> port;

    public Input<Integer> getPort() {
        return this.port == null ? Input.empty() : this.port;
    }

    @InputImport(name="snapshotType")
      private final @Nullable Input<String> snapshotType;

    public Input<String> getSnapshotType() {
        return this.snapshotType == null ? Input.empty() : this.snapshotType;
    }

    /**
     * The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
     * 
     */
    @InputImport(name="sourceDbSnapshotIdentifier")
      private final @Nullable Input<String> sourceDbSnapshotIdentifier;

    public Input<String> getSourceDbSnapshotIdentifier() {
        return this.sourceDbSnapshotIdentifier == null ? Input.empty() : this.sourceDbSnapshotIdentifier;
    }

    /**
     * The region that the DB snapshot was created in or copied from.
     * 
     */
    @InputImport(name="sourceRegion")
      private final @Nullable Input<String> sourceRegion;

    public Input<String> getSourceRegion() {
        return this.sourceRegion == null ? Input.empty() : this.sourceRegion;
    }

    /**
     * Specifies the status of this DB snapshot.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * Specifies the storage type associated with DB snapshot.
     * 
     */
    @InputImport(name="storageType")
      private final @Nullable Input<String> storageType;

    public Input<String> getStorageType() {
        return this.storageType == null ? Input.empty() : this.storageType;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Provides the VPC ID associated with the DB snapshot.
     * 
     */
    @InputImport(name="vpcId")
      private final @Nullable Input<String> vpcId;

    public Input<String> getVpcId() {
        return this.vpcId == null ? Input.empty() : this.vpcId;
    }

    public SnapshotState(
        @Nullable Input<Integer> allocatedStorage,
        @Nullable Input<String> availabilityZone,
        @Nullable Input<String> dbInstanceIdentifier,
        @Nullable Input<String> dbSnapshotArn,
        @Nullable Input<String> dbSnapshotIdentifier,
        @Nullable Input<Boolean> encrypted,
        @Nullable Input<String> engine,
        @Nullable Input<String> engineVersion,
        @Nullable Input<Integer> iops,
        @Nullable Input<String> kmsKeyId,
        @Nullable Input<String> licenseModel,
        @Nullable Input<String> optionGroupName,
        @Nullable Input<Integer> port,
        @Nullable Input<String> snapshotType,
        @Nullable Input<String> sourceDbSnapshotIdentifier,
        @Nullable Input<String> sourceRegion,
        @Nullable Input<String> status,
        @Nullable Input<String> storageType,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> vpcId) {
        this.allocatedStorage = allocatedStorage;
        this.availabilityZone = availabilityZone;
        this.dbInstanceIdentifier = dbInstanceIdentifier;
        this.dbSnapshotArn = dbSnapshotArn;
        this.dbSnapshotIdentifier = dbSnapshotIdentifier;
        this.encrypted = encrypted;
        this.engine = engine;
        this.engineVersion = engineVersion;
        this.iops = iops;
        this.kmsKeyId = kmsKeyId;
        this.licenseModel = licenseModel;
        this.optionGroupName = optionGroupName;
        this.port = port;
        this.snapshotType = snapshotType;
        this.sourceDbSnapshotIdentifier = sourceDbSnapshotIdentifier;
        this.sourceRegion = sourceRegion;
        this.status = status;
        this.storageType = storageType;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcId = vpcId;
    }

    private SnapshotState() {
        this.allocatedStorage = Input.empty();
        this.availabilityZone = Input.empty();
        this.dbInstanceIdentifier = Input.empty();
        this.dbSnapshotArn = Input.empty();
        this.dbSnapshotIdentifier = Input.empty();
        this.encrypted = Input.empty();
        this.engine = Input.empty();
        this.engineVersion = Input.empty();
        this.iops = Input.empty();
        this.kmsKeyId = Input.empty();
        this.licenseModel = Input.empty();
        this.optionGroupName = Input.empty();
        this.port = Input.empty();
        this.snapshotType = Input.empty();
        this.sourceDbSnapshotIdentifier = Input.empty();
        this.sourceRegion = Input.empty();
        this.status = Input.empty();
        this.storageType = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.vpcId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SnapshotState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> allocatedStorage;
        private @Nullable Input<String> availabilityZone;
        private @Nullable Input<String> dbInstanceIdentifier;
        private @Nullable Input<String> dbSnapshotArn;
        private @Nullable Input<String> dbSnapshotIdentifier;
        private @Nullable Input<Boolean> encrypted;
        private @Nullable Input<String> engine;
        private @Nullable Input<String> engineVersion;
        private @Nullable Input<Integer> iops;
        private @Nullable Input<String> kmsKeyId;
        private @Nullable Input<String> licenseModel;
        private @Nullable Input<String> optionGroupName;
        private @Nullable Input<Integer> port;
        private @Nullable Input<String> snapshotType;
        private @Nullable Input<String> sourceDbSnapshotIdentifier;
        private @Nullable Input<String> sourceRegion;
        private @Nullable Input<String> status;
        private @Nullable Input<String> storageType;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(SnapshotState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedStorage = defaults.allocatedStorage;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.dbInstanceIdentifier = defaults.dbInstanceIdentifier;
    	      this.dbSnapshotArn = defaults.dbSnapshotArn;
    	      this.dbSnapshotIdentifier = defaults.dbSnapshotIdentifier;
    	      this.encrypted = defaults.encrypted;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.optionGroupName = defaults.optionGroupName;
    	      this.port = defaults.port;
    	      this.snapshotType = defaults.snapshotType;
    	      this.sourceDbSnapshotIdentifier = defaults.sourceDbSnapshotIdentifier;
    	      this.sourceRegion = defaults.sourceRegion;
    	      this.status = defaults.status;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder allocatedStorage(@Nullable Input<Integer> allocatedStorage) {
            this.allocatedStorage = allocatedStorage;
            return this;
        }

        public Builder allocatedStorage(@Nullable Integer allocatedStorage) {
            this.allocatedStorage = Input.ofNullable(allocatedStorage);
            return this;
        }

        public Builder availabilityZone(@Nullable Input<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Input.ofNullable(availabilityZone);
            return this;
        }

        public Builder dbInstanceIdentifier(@Nullable Input<String> dbInstanceIdentifier) {
            this.dbInstanceIdentifier = dbInstanceIdentifier;
            return this;
        }

        public Builder dbInstanceIdentifier(@Nullable String dbInstanceIdentifier) {
            this.dbInstanceIdentifier = Input.ofNullable(dbInstanceIdentifier);
            return this;
        }

        public Builder dbSnapshotArn(@Nullable Input<String> dbSnapshotArn) {
            this.dbSnapshotArn = dbSnapshotArn;
            return this;
        }

        public Builder dbSnapshotArn(@Nullable String dbSnapshotArn) {
            this.dbSnapshotArn = Input.ofNullable(dbSnapshotArn);
            return this;
        }

        public Builder dbSnapshotIdentifier(@Nullable Input<String> dbSnapshotIdentifier) {
            this.dbSnapshotIdentifier = dbSnapshotIdentifier;
            return this;
        }

        public Builder dbSnapshotIdentifier(@Nullable String dbSnapshotIdentifier) {
            this.dbSnapshotIdentifier = Input.ofNullable(dbSnapshotIdentifier);
            return this;
        }

        public Builder encrypted(@Nullable Input<Boolean> encrypted) {
            this.encrypted = encrypted;
            return this;
        }

        public Builder encrypted(@Nullable Boolean encrypted) {
            this.encrypted = Input.ofNullable(encrypted);
            return this;
        }

        public Builder engine(@Nullable Input<String> engine) {
            this.engine = engine;
            return this;
        }

        public Builder engine(@Nullable String engine) {
            this.engine = Input.ofNullable(engine);
            return this;
        }

        public Builder engineVersion(@Nullable Input<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = Input.ofNullable(engineVersion);
            return this;
        }

        public Builder iops(@Nullable Input<Integer> iops) {
            this.iops = iops;
            return this;
        }

        public Builder iops(@Nullable Integer iops) {
            this.iops = Input.ofNullable(iops);
            return this;
        }

        public Builder kmsKeyId(@Nullable Input<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Input.ofNullable(kmsKeyId);
            return this;
        }

        public Builder licenseModel(@Nullable Input<String> licenseModel) {
            this.licenseModel = licenseModel;
            return this;
        }

        public Builder licenseModel(@Nullable String licenseModel) {
            this.licenseModel = Input.ofNullable(licenseModel);
            return this;
        }

        public Builder optionGroupName(@Nullable Input<String> optionGroupName) {
            this.optionGroupName = optionGroupName;
            return this;
        }

        public Builder optionGroupName(@Nullable String optionGroupName) {
            this.optionGroupName = Input.ofNullable(optionGroupName);
            return this;
        }

        public Builder port(@Nullable Input<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder port(@Nullable Integer port) {
            this.port = Input.ofNullable(port);
            return this;
        }

        public Builder snapshotType(@Nullable Input<String> snapshotType) {
            this.snapshotType = snapshotType;
            return this;
        }

        public Builder snapshotType(@Nullable String snapshotType) {
            this.snapshotType = Input.ofNullable(snapshotType);
            return this;
        }

        public Builder sourceDbSnapshotIdentifier(@Nullable Input<String> sourceDbSnapshotIdentifier) {
            this.sourceDbSnapshotIdentifier = sourceDbSnapshotIdentifier;
            return this;
        }

        public Builder sourceDbSnapshotIdentifier(@Nullable String sourceDbSnapshotIdentifier) {
            this.sourceDbSnapshotIdentifier = Input.ofNullable(sourceDbSnapshotIdentifier);
            return this;
        }

        public Builder sourceRegion(@Nullable Input<String> sourceRegion) {
            this.sourceRegion = sourceRegion;
            return this;
        }

        public Builder sourceRegion(@Nullable String sourceRegion) {
            this.sourceRegion = Input.ofNullable(sourceRegion);
            return this;
        }

        public Builder status(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder storageType(@Nullable Input<String> storageType) {
            this.storageType = storageType;
            return this;
        }

        public Builder storageType(@Nullable String storageType) {
            this.storageType = Input.ofNullable(storageType);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder vpcId(@Nullable Input<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }

        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = Input.ofNullable(vpcId);
            return this;
        }
        public SnapshotState build() {
            return new SnapshotState(allocatedStorage, availabilityZone, dbInstanceIdentifier, dbSnapshotArn, dbSnapshotIdentifier, encrypted, engine, engineVersion, iops, kmsKeyId, licenseModel, optionGroupName, port, snapshotType, sourceDbSnapshotIdentifier, sourceRegion, status, storageType, tags, tagsAll, vpcId);
        }
    }
}
