// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.s3;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.s3.InventoryArgs;
import io.pulumi.aws.s3.inputs.InventoryState;
import io.pulumi.aws.s3.outputs.InventoryDestination;
import io.pulumi.aws.s3.outputs.InventoryFilter;
import io.pulumi.aws.s3.outputs.InventorySchedule;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Provides a S3 bucket [inventory configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html) resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Add inventory configuration
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testBucket = new aws.s3.Bucket("testBucket", {});
 * const inventory = new aws.s3.Bucket("inventory", {});
 * const testInventory = new aws.s3.Inventory("testInventory", {
 *     bucket: testBucket.id,
 *     includedObjectVersions: "All",
 *     schedule: {
 *         frequency: "Daily",
 *     },
 *     destination: {
 *         bucket: {
 *             format: "ORC",
 *             bucketArn: inventory.arn,
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test_bucket = aws.s3.Bucket("testBucket")
 * inventory = aws.s3.Bucket("inventory")
 * test_inventory = aws.s3.Inventory("testInventory",
 *     bucket=test_bucket.id,
 *     included_object_versions="All",
 *     schedule=aws.s3.InventoryScheduleArgs(
 *         frequency="Daily",
 *     ),
 *     destination=aws.s3.InventoryDestinationArgs(
 *         bucket=aws.s3.InventoryDestinationBucketArgs(
 *             format="ORC",
 *             bucket_arn=inventory.arn,
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var testBucket = new Aws.S3.Bucket("testBucket", new Aws.S3.BucketArgs
 *         {
 *         });
 *         var inventory = new Aws.S3.Bucket("inventory", new Aws.S3.BucketArgs
 *         {
 *         });
 *         var testInventory = new Aws.S3.Inventory("testInventory", new Aws.S3.InventoryArgs
 *         {
 *             Bucket = testBucket.Id,
 *             IncludedObjectVersions = "All",
 *             Schedule = new Aws.S3.Inputs.InventoryScheduleArgs
 *             {
 *                 Frequency = "Daily",
 *             },
 *             Destination = new Aws.S3.Inputs.InventoryDestinationArgs
 *             {
 *                 Bucket = new Aws.S3.Inputs.InventoryDestinationBucketArgs
 *                 {
 *                     Format = "ORC",
 *                     BucketArn = inventory.Arn,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		testBucket, err := s3.NewBucket(ctx, "testBucket", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		inventory, err := s3.NewBucket(ctx, "inventory", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = s3.NewInventory(ctx, "testInventory", &s3.InventoryArgs{
 * 			Bucket:                 testBucket.ID(),
 * 			IncludedObjectVersions: pulumi.String("All"),
 * 			Schedule: &s3.InventoryScheduleArgs{
 * 				Frequency: pulumi.String("Daily"),
 * 			},
 * 			Destination: &s3.InventoryDestinationArgs{
 * 				Bucket: &s3.InventoryDestinationBucketArgs{
 * 					Format:    pulumi.String("ORC"),
 * 					BucketArn: inventory.Arn,
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Add inventory configuration with S3 bucket object prefix
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const test = new aws.s3.Bucket("test", {});
 * const inventory = new aws.s3.Bucket("inventory", {});
 * const test_prefix = new aws.s3.Inventory("test-prefix", {
 *     bucket: test.id,
 *     includedObjectVersions: "All",
 *     schedule: {
 *         frequency: "Daily",
 *     },
 *     filter: {
 *         prefix: "documents/",
 *     },
 *     destination: {
 *         bucket: {
 *             format: "ORC",
 *             bucketArn: inventory.arn,
 *             prefix: "inventory",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test = aws.s3.Bucket("test")
 * inventory = aws.s3.Bucket("inventory")
 * test_prefix = aws.s3.Inventory("test-prefix",
 *     bucket=test.id,
 *     included_object_versions="All",
 *     schedule=aws.s3.InventoryScheduleArgs(
 *         frequency="Daily",
 *     ),
 *     filter=aws.s3.InventoryFilterArgs(
 *         prefix="documents/",
 *     ),
 *     destination=aws.s3.InventoryDestinationArgs(
 *         bucket=aws.s3.InventoryDestinationBucketArgs(
 *             format="ORC",
 *             bucket_arn=inventory.arn,
 *             prefix="inventory",
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var test = new Aws.S3.Bucket("test", new Aws.S3.BucketArgs
 *         {
 *         });
 *         var inventory = new Aws.S3.Bucket("inventory", new Aws.S3.BucketArgs
 *         {
 *         });
 *         var test_prefix = new Aws.S3.Inventory("test-prefix", new Aws.S3.InventoryArgs
 *         {
 *             Bucket = test.Id,
 *             IncludedObjectVersions = "All",
 *             Schedule = new Aws.S3.Inputs.InventoryScheduleArgs
 *             {
 *                 Frequency = "Daily",
 *             },
 *             Filter = new Aws.S3.Inputs.InventoryFilterArgs
 *             {
 *                 Prefix = "documents/",
 *             },
 *             Destination = new Aws.S3.Inputs.InventoryDestinationArgs
 *             {
 *                 Bucket = new Aws.S3.Inputs.InventoryDestinationBucketArgs
 *                 {
 *                     Format = "ORC",
 *                     BucketArn = inventory.Arn,
 *                     Prefix = "inventory",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		test, err := s3.NewBucket(ctx, "test", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		inventory, err := s3.NewBucket(ctx, "inventory", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = s3.NewInventory(ctx, "test-prefix", &s3.InventoryArgs{
 * 			Bucket:                 test.ID(),
 * 			IncludedObjectVersions: pulumi.String("All"),
 * 			Schedule: &s3.InventoryScheduleArgs{
 * 				Frequency: pulumi.String("Daily"),
 * 			},
 * 			Filter: &s3.InventoryFilterArgs{
 * 				Prefix: pulumi.String("documents/"),
 * 			},
 * 			Destination: &s3.InventoryDestinationArgs{
 * 				Bucket: &s3.InventoryDestinationBucketArgs{
 * 					Format:    pulumi.String("ORC"),
 * 					BucketArn: inventory.Arn,
 * 					Prefix:    pulumi.String("inventory"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * S3 bucket inventory configurations can be imported using `bucket:inventory`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:s3/inventory:Inventory my-bucket-entire-bucket my-bucket:EntireBucket
 * ```
 * 
 *  
 */
@ResourceType(type="aws:s3/inventory:Inventory")
public class Inventory extends io.pulumi.resources.CustomResource {
    /**
     * The name of the source bucket that inventory lists the objects for.
     * 
     */
    @Export(name="bucket", type=String.class, parameters={})
    private Output<String> bucket;

    /**
     * @return The name of the source bucket that inventory lists the objects for.
     * 
     */
    public Output<String> getBucket() {
        return this.bucket;
    }
    /**
     * Contains information about where to publish the inventory results (documented below).
     * 
     */
    @Export(name="destination", type=InventoryDestination.class, parameters={})
    private Output<InventoryDestination> destination;

    /**
     * @return Contains information about where to publish the inventory results (documented below).
     * 
     */
    public Output<InventoryDestination> getDestination() {
        return this.destination;
    }
    /**
     * Specifies whether the inventory is enabled or disabled.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Specifies whether the inventory is enabled or disabled.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnabled() {
        return this.enabled;
    }
    /**
     * Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
     * 
     */
    @Export(name="filter", type=InventoryFilter.class, parameters={})
    private Output</* @Nullable */ InventoryFilter> filter;

    /**
     * @return Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
     * 
     */
    public Output</* @Nullable */ InventoryFilter> getFilter() {
        return this.filter;
    }
    /**
     * Object versions to include in the inventory list. Valid values: `All`, `Current`.
     * 
     */
    @Export(name="includedObjectVersions", type=String.class, parameters={})
    private Output<String> includedObjectVersions;

    /**
     * @return Object versions to include in the inventory list. Valid values: `All`, `Current`.
     * 
     */
    public Output<String> getIncludedObjectVersions() {
        return this.includedObjectVersions;
    }
    /**
     * Unique identifier of the inventory configuration for the bucket.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Unique identifier of the inventory configuration for the bucket.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * List of optional fields that are included in the inventory results. Please refer to the S3 [documentation](https://docs.aws.amazon.com/AmazonS3/latest/API/API_InventoryConfiguration.html#AmazonS3-Type-InventoryConfiguration-OptionalFields) for more details.
     * 
     */
    @Export(name="optionalFields", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> optionalFields;

    /**
     * @return List of optional fields that are included in the inventory results. Please refer to the S3 [documentation](https://docs.aws.amazon.com/AmazonS3/latest/API/API_InventoryConfiguration.html#AmazonS3-Type-InventoryConfiguration-OptionalFields) for more details.
     * 
     */
    public Output</* @Nullable */ List<String>> getOptionalFields() {
        return this.optionalFields;
    }
    /**
     * Specifies the schedule for generating inventory results (documented below).
     * 
     */
    @Export(name="schedule", type=InventorySchedule.class, parameters={})
    private Output<InventorySchedule> schedule;

    /**
     * @return Specifies the schedule for generating inventory results (documented below).
     * 
     */
    public Output<InventorySchedule> getSchedule() {
        return this.schedule;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Inventory(String name) {
        this(name, InventoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Inventory(String name, InventoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Inventory(String name, InventoryArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:s3/inventory:Inventory", name, args == null ? InventoryArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Inventory(String name, Output<String> id, @Nullable InventoryState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:s3/inventory:Inventory", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Inventory get(String name, Output<String> id, @Nullable InventoryState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Inventory(name, id, state, options);
    }
}
