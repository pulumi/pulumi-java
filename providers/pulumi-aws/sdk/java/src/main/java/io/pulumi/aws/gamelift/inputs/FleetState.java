// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.gamelift.inputs;

import io.pulumi.aws.gamelift.inputs.FleetEc2InboundPermissionGetArgs;
import io.pulumi.aws.gamelift.inputs.FleetResourceCreationLimitPolicyGetArgs;
import io.pulumi.aws.gamelift.inputs.FleetRuntimeConfigurationGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FleetState extends io.pulumi.resources.ResourceArgs {

    public static final FleetState Empty = new FleetState();

    /**
     * Fleet ARN.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * ID of the Gamelift Build to be deployed on the fleet.
     * 
     */
    @InputImport(name="buildId")
    private final @Nullable Input<String> buildId;

    public Input<String> getBuildId() {
        return this.buildId == null ? Input.empty() : this.buildId;
    }

    /**
     * Human-readable description of the fleet.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
     * 
     */
    @InputImport(name="ec2InboundPermissions")
    private final @Nullable Input<List<FleetEc2InboundPermissionGetArgs>> ec2InboundPermissions;

    public Input<List<FleetEc2InboundPermissionGetArgs>> getEc2InboundPermissions() {
        return this.ec2InboundPermissions == null ? Input.empty() : this.ec2InboundPermissions;
    }

    /**
     * Name of an EC2 instance typeE.g., `t2.micro`
     * 
     */
    @InputImport(name="ec2InstanceType")
    private final @Nullable Input<String> ec2InstanceType;

    public Input<String> getEc2InstanceType() {
        return this.ec2InstanceType == null ? Input.empty() : this.ec2InstanceType;
    }

    /**
     * Type of fleet. This value must be `ON_DEMAND` or `SPOT`. Defaults to `ON_DEMAND`.
     * 
     */
    @InputImport(name="fleetType")
    private final @Nullable Input<String> fleetType;

    public Input<String> getFleetType() {
        return this.fleetType == null ? Input.empty() : this.fleetType;
    }

    /**
     * ARN of an IAM role that instances in the fleet can assume.
     * 
     */
    @InputImport(name="instanceRoleArn")
    private final @Nullable Input<String> instanceRoleArn;

    public Input<String> getInstanceRoleArn() {
        return this.instanceRoleArn == null ? Input.empty() : this.instanceRoleArn;
    }

    @InputImport(name="logPaths")
    private final @Nullable Input<List<String>> logPaths;

    public Input<List<String>> getLogPaths() {
        return this.logPaths == null ? Input.empty() : this.logPaths;
    }

    /**
     * List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
     * 
     */
    @InputImport(name="metricGroups")
    private final @Nullable Input<List<String>> metricGroups;

    public Input<List<String>> getMetricGroups() {
        return this.metricGroups == null ? Input.empty() : this.metricGroups;
    }

    /**
     * The name of the fleet.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Game session protection policy to apply to all instances in this fleetE.g., `FullProtection`. Defaults to `NoProtection`.
     * 
     */
    @InputImport(name="newGameSessionProtectionPolicy")
    private final @Nullable Input<String> newGameSessionProtectionPolicy;

    public Input<String> getNewGameSessionProtectionPolicy() {
        return this.newGameSessionProtectionPolicy == null ? Input.empty() : this.newGameSessionProtectionPolicy;
    }

    /**
     * Operating system of the fleet's computing resources.
     * 
     */
    @InputImport(name="operatingSystem")
    private final @Nullable Input<String> operatingSystem;

    public Input<String> getOperatingSystem() {
        return this.operatingSystem == null ? Input.empty() : this.operatingSystem;
    }

    /**
     * Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
     * 
     */
    @InputImport(name="resourceCreationLimitPolicy")
    private final @Nullable Input<FleetResourceCreationLimitPolicyGetArgs> resourceCreationLimitPolicy;

    public Input<FleetResourceCreationLimitPolicyGetArgs> getResourceCreationLimitPolicy() {
        return this.resourceCreationLimitPolicy == null ? Input.empty() : this.resourceCreationLimitPolicy;
    }

    /**
     * Instructions for launching server processes on each instance in the fleet. See below.
     * 
     */
    @InputImport(name="runtimeConfiguration")
    private final @Nullable Input<FleetRuntimeConfigurationGetArgs> runtimeConfiguration;

    public Input<FleetRuntimeConfigurationGetArgs> getRuntimeConfiguration() {
        return this.runtimeConfiguration == null ? Input.empty() : this.runtimeConfiguration;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public FleetState(
        @Nullable Input<String> arn,
        @Nullable Input<String> buildId,
        @Nullable Input<String> description,
        @Nullable Input<List<FleetEc2InboundPermissionGetArgs>> ec2InboundPermissions,
        @Nullable Input<String> ec2InstanceType,
        @Nullable Input<String> fleetType,
        @Nullable Input<String> instanceRoleArn,
        @Nullable Input<List<String>> logPaths,
        @Nullable Input<List<String>> metricGroups,
        @Nullable Input<String> name,
        @Nullable Input<String> newGameSessionProtectionPolicy,
        @Nullable Input<String> operatingSystem,
        @Nullable Input<FleetResourceCreationLimitPolicyGetArgs> resourceCreationLimitPolicy,
        @Nullable Input<FleetRuntimeConfigurationGetArgs> runtimeConfiguration,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.buildId = buildId;
        this.description = description;
        this.ec2InboundPermissions = ec2InboundPermissions;
        this.ec2InstanceType = ec2InstanceType;
        this.fleetType = fleetType;
        this.instanceRoleArn = instanceRoleArn;
        this.logPaths = logPaths;
        this.metricGroups = metricGroups;
        this.name = name;
        this.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy;
        this.operatingSystem = operatingSystem;
        this.resourceCreationLimitPolicy = resourceCreationLimitPolicy;
        this.runtimeConfiguration = runtimeConfiguration;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private FleetState() {
        this.arn = Input.empty();
        this.buildId = Input.empty();
        this.description = Input.empty();
        this.ec2InboundPermissions = Input.empty();
        this.ec2InstanceType = Input.empty();
        this.fleetType = Input.empty();
        this.instanceRoleArn = Input.empty();
        this.logPaths = Input.empty();
        this.metricGroups = Input.empty();
        this.name = Input.empty();
        this.newGameSessionProtectionPolicy = Input.empty();
        this.operatingSystem = Input.empty();
        this.resourceCreationLimitPolicy = Input.empty();
        this.runtimeConfiguration = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FleetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> buildId;
        private @Nullable Input<String> description;
        private @Nullable Input<List<FleetEc2InboundPermissionGetArgs>> ec2InboundPermissions;
        private @Nullable Input<String> ec2InstanceType;
        private @Nullable Input<String> fleetType;
        private @Nullable Input<String> instanceRoleArn;
        private @Nullable Input<List<String>> logPaths;
        private @Nullable Input<List<String>> metricGroups;
        private @Nullable Input<String> name;
        private @Nullable Input<String> newGameSessionProtectionPolicy;
        private @Nullable Input<String> operatingSystem;
        private @Nullable Input<FleetResourceCreationLimitPolicyGetArgs> resourceCreationLimitPolicy;
        private @Nullable Input<FleetRuntimeConfigurationGetArgs> runtimeConfiguration;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(FleetState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.buildId = defaults.buildId;
    	      this.description = defaults.description;
    	      this.ec2InboundPermissions = defaults.ec2InboundPermissions;
    	      this.ec2InstanceType = defaults.ec2InstanceType;
    	      this.fleetType = defaults.fleetType;
    	      this.instanceRoleArn = defaults.instanceRoleArn;
    	      this.logPaths = defaults.logPaths;
    	      this.metricGroups = defaults.metricGroups;
    	      this.name = defaults.name;
    	      this.newGameSessionProtectionPolicy = defaults.newGameSessionProtectionPolicy;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.resourceCreationLimitPolicy = defaults.resourceCreationLimitPolicy;
    	      this.runtimeConfiguration = defaults.runtimeConfiguration;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setBuildId(@Nullable Input<String> buildId) {
            this.buildId = buildId;
            return this;
        }

        public Builder setBuildId(@Nullable String buildId) {
            this.buildId = Input.ofNullable(buildId);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEc2InboundPermissions(@Nullable Input<List<FleetEc2InboundPermissionGetArgs>> ec2InboundPermissions) {
            this.ec2InboundPermissions = ec2InboundPermissions;
            return this;
        }

        public Builder setEc2InboundPermissions(@Nullable List<FleetEc2InboundPermissionGetArgs> ec2InboundPermissions) {
            this.ec2InboundPermissions = Input.ofNullable(ec2InboundPermissions);
            return this;
        }

        public Builder setEc2InstanceType(@Nullable Input<String> ec2InstanceType) {
            this.ec2InstanceType = ec2InstanceType;
            return this;
        }

        public Builder setEc2InstanceType(@Nullable String ec2InstanceType) {
            this.ec2InstanceType = Input.ofNullable(ec2InstanceType);
            return this;
        }

        public Builder setFleetType(@Nullable Input<String> fleetType) {
            this.fleetType = fleetType;
            return this;
        }

        public Builder setFleetType(@Nullable String fleetType) {
            this.fleetType = Input.ofNullable(fleetType);
            return this;
        }

        public Builder setInstanceRoleArn(@Nullable Input<String> instanceRoleArn) {
            this.instanceRoleArn = instanceRoleArn;
            return this;
        }

        public Builder setInstanceRoleArn(@Nullable String instanceRoleArn) {
            this.instanceRoleArn = Input.ofNullable(instanceRoleArn);
            return this;
        }

        public Builder setLogPaths(@Nullable Input<List<String>> logPaths) {
            this.logPaths = logPaths;
            return this;
        }

        public Builder setLogPaths(@Nullable List<String> logPaths) {
            this.logPaths = Input.ofNullable(logPaths);
            return this;
        }

        public Builder setMetricGroups(@Nullable Input<List<String>> metricGroups) {
            this.metricGroups = metricGroups;
            return this;
        }

        public Builder setMetricGroups(@Nullable List<String> metricGroups) {
            this.metricGroups = Input.ofNullable(metricGroups);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNewGameSessionProtectionPolicy(@Nullable Input<String> newGameSessionProtectionPolicy) {
            this.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy;
            return this;
        }

        public Builder setNewGameSessionProtectionPolicy(@Nullable String newGameSessionProtectionPolicy) {
            this.newGameSessionProtectionPolicy = Input.ofNullable(newGameSessionProtectionPolicy);
            return this;
        }

        public Builder setOperatingSystem(@Nullable Input<String> operatingSystem) {
            this.operatingSystem = operatingSystem;
            return this;
        }

        public Builder setOperatingSystem(@Nullable String operatingSystem) {
            this.operatingSystem = Input.ofNullable(operatingSystem);
            return this;
        }

        public Builder setResourceCreationLimitPolicy(@Nullable Input<FleetResourceCreationLimitPolicyGetArgs> resourceCreationLimitPolicy) {
            this.resourceCreationLimitPolicy = resourceCreationLimitPolicy;
            return this;
        }

        public Builder setResourceCreationLimitPolicy(@Nullable FleetResourceCreationLimitPolicyGetArgs resourceCreationLimitPolicy) {
            this.resourceCreationLimitPolicy = Input.ofNullable(resourceCreationLimitPolicy);
            return this;
        }

        public Builder setRuntimeConfiguration(@Nullable Input<FleetRuntimeConfigurationGetArgs> runtimeConfiguration) {
            this.runtimeConfiguration = runtimeConfiguration;
            return this;
        }

        public Builder setRuntimeConfiguration(@Nullable FleetRuntimeConfigurationGetArgs runtimeConfiguration) {
            this.runtimeConfiguration = Input.ofNullable(runtimeConfiguration);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public FleetState build() {
            return new FleetState(arn, buildId, description, ec2InboundPermissions, ec2InstanceType, fleetType, instanceRoleArn, logPaths, metricGroups, name, newGameSessionProtectionPolicy, operatingSystem, resourceCreationLimitPolicy, runtimeConfiguration, tags, tagsAll);
        }
    }
}
