// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.transfer;

import io.pulumi.aws.transfer.inputs.AccessHomeDirectoryMappingArgs;
import io.pulumi.aws.transfer.inputs.AccessPosixProfileArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccessArgs extends io.pulumi.resources.ResourceArgs {

    public static final AccessArgs Empty = new AccessArgs();

    /**
     * The SID of a group in the directory connected to the Transfer Server (e.g., `S-1-1-12-1234567890-123456789-1234567890-1234`)
     * 
     */
    @InputImport(name="externalId", required=true)
      private final Input<String> externalId;

    public Input<String> getExternalId() {
        return this.externalId;
    }

    /**
     * The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a `/`.  The first item in the path is the name of the home bucket (accessible as `${Transfer:HomeBucket}` in the policy) and the rest is the home directory (accessible as `${Transfer:HomeDirectory}` in the policy). For example, `/example-bucket-1234/username` would set the home bucket to `example-bucket-1234` and the home directory to `username`.
     * 
     */
    @InputImport(name="homeDirectory")
      private final @Nullable Input<String> homeDirectory;

    public Input<String> getHomeDirectory() {
        return this.homeDirectory == null ? Input.empty() : this.homeDirectory;
    }

    /**
     * Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
     * 
     */
    @InputImport(name="homeDirectoryMappings")
      private final @Nullable Input<List<AccessHomeDirectoryMappingArgs>> homeDirectoryMappings;

    public Input<List<AccessHomeDirectoryMappingArgs>> getHomeDirectoryMappings() {
        return this.homeDirectoryMappings == null ? Input.empty() : this.homeDirectoryMappings;
    }

    /**
     * The type of landing directory (folder) you mapped for your users' home directory. Valid values are `PATH` and `LOGICAL`.
     * 
     */
    @InputImport(name="homeDirectoryType")
      private final @Nullable Input<String> homeDirectoryType;

    public Input<String> getHomeDirectoryType() {
        return this.homeDirectoryType == null ? Input.empty() : this.homeDirectoryType;
    }

    @InputImport(name="policy")
      private final @Nullable Input<String> policy;

    public Input<String> getPolicy() {
        return this.policy == null ? Input.empty() : this.policy;
    }

    /**
     * Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See Posix Profile below.
     * 
     */
    @InputImport(name="posixProfile")
      private final @Nullable Input<AccessPosixProfileArgs> posixProfile;

    public Input<AccessPosixProfileArgs> getPosixProfile() {
        return this.posixProfile == null ? Input.empty() : this.posixProfile;
    }

    /**
     * Amazon Resource Name (ARN) of an IAM role that allows the service to controls your userâ€™s access to your Amazon S3 bucket.
     * 
     */
    @InputImport(name="role")
      private final @Nullable Input<String> role;

    public Input<String> getRole() {
        return this.role == null ? Input.empty() : this.role;
    }

    /**
     * The Server ID of the Transfer Server (e.g., `s-12345678`)
     * 
     */
    @InputImport(name="serverId", required=true)
      private final Input<String> serverId;

    public Input<String> getServerId() {
        return this.serverId;
    }

    public AccessArgs(
        Input<String> externalId,
        @Nullable Input<String> homeDirectory,
        @Nullable Input<List<AccessHomeDirectoryMappingArgs>> homeDirectoryMappings,
        @Nullable Input<String> homeDirectoryType,
        @Nullable Input<String> policy,
        @Nullable Input<AccessPosixProfileArgs> posixProfile,
        @Nullable Input<String> role,
        Input<String> serverId) {
        this.externalId = Objects.requireNonNull(externalId, "expected parameter 'externalId' to be non-null");
        this.homeDirectory = homeDirectory;
        this.homeDirectoryMappings = homeDirectoryMappings;
        this.homeDirectoryType = homeDirectoryType;
        this.policy = policy;
        this.posixProfile = posixProfile;
        this.role = role;
        this.serverId = Objects.requireNonNull(serverId, "expected parameter 'serverId' to be non-null");
    }

    private AccessArgs() {
        this.externalId = Input.empty();
        this.homeDirectory = Input.empty();
        this.homeDirectoryMappings = Input.empty();
        this.homeDirectoryType = Input.empty();
        this.policy = Input.empty();
        this.posixProfile = Input.empty();
        this.role = Input.empty();
        this.serverId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> externalId;
        private @Nullable Input<String> homeDirectory;
        private @Nullable Input<List<AccessHomeDirectoryMappingArgs>> homeDirectoryMappings;
        private @Nullable Input<String> homeDirectoryType;
        private @Nullable Input<String> policy;
        private @Nullable Input<AccessPosixProfileArgs> posixProfile;
        private @Nullable Input<String> role;
        private Input<String> serverId;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.externalId = defaults.externalId;
    	      this.homeDirectory = defaults.homeDirectory;
    	      this.homeDirectoryMappings = defaults.homeDirectoryMappings;
    	      this.homeDirectoryType = defaults.homeDirectoryType;
    	      this.policy = defaults.policy;
    	      this.posixProfile = defaults.posixProfile;
    	      this.role = defaults.role;
    	      this.serverId = defaults.serverId;
        }

        public Builder setExternalId(Input<String> externalId) {
            this.externalId = Objects.requireNonNull(externalId);
            return this;
        }

        public Builder setExternalId(String externalId) {
            this.externalId = Input.of(Objects.requireNonNull(externalId));
            return this;
        }

        public Builder setHomeDirectory(@Nullable Input<String> homeDirectory) {
            this.homeDirectory = homeDirectory;
            return this;
        }

        public Builder setHomeDirectory(@Nullable String homeDirectory) {
            this.homeDirectory = Input.ofNullable(homeDirectory);
            return this;
        }

        public Builder setHomeDirectoryMappings(@Nullable Input<List<AccessHomeDirectoryMappingArgs>> homeDirectoryMappings) {
            this.homeDirectoryMappings = homeDirectoryMappings;
            return this;
        }

        public Builder setHomeDirectoryMappings(@Nullable List<AccessHomeDirectoryMappingArgs> homeDirectoryMappings) {
            this.homeDirectoryMappings = Input.ofNullable(homeDirectoryMappings);
            return this;
        }

        public Builder setHomeDirectoryType(@Nullable Input<String> homeDirectoryType) {
            this.homeDirectoryType = homeDirectoryType;
            return this;
        }

        public Builder setHomeDirectoryType(@Nullable String homeDirectoryType) {
            this.homeDirectoryType = Input.ofNullable(homeDirectoryType);
            return this;
        }

        public Builder setPolicy(@Nullable Input<String> policy) {
            this.policy = policy;
            return this;
        }

        public Builder setPolicy(@Nullable String policy) {
            this.policy = Input.ofNullable(policy);
            return this;
        }

        public Builder setPosixProfile(@Nullable Input<AccessPosixProfileArgs> posixProfile) {
            this.posixProfile = posixProfile;
            return this;
        }

        public Builder setPosixProfile(@Nullable AccessPosixProfileArgs posixProfile) {
            this.posixProfile = Input.ofNullable(posixProfile);
            return this;
        }

        public Builder setRole(@Nullable Input<String> role) {
            this.role = role;
            return this;
        }

        public Builder setRole(@Nullable String role) {
            this.role = Input.ofNullable(role);
            return this;
        }

        public Builder setServerId(Input<String> serverId) {
            this.serverId = Objects.requireNonNull(serverId);
            return this;
        }

        public Builder setServerId(String serverId) {
            this.serverId = Input.of(Objects.requireNonNull(serverId));
            return this;
        }
        public AccessArgs build() {
            return new AccessArgs(externalId, homeDirectory, homeDirectoryMappings, homeDirectoryType, policy, posixProfile, role, serverId);
        }
    }
}
