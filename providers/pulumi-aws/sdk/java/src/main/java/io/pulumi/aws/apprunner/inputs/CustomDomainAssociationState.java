// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apprunner.inputs;

import io.pulumi.aws.apprunner.inputs.CustomDomainAssociationCertificateValidationRecordGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CustomDomainAssociationState extends io.pulumi.resources.ResourceArgs {

    public static final CustomDomainAssociationState Empty = new CustomDomainAssociationState();

    /**
     * A set of certificate CNAME records used for this domain name. See Certificate Validation Records below for more details.
     * 
     */
    @InputImport(name="certificateValidationRecords")
    private final @Nullable Input<List<CustomDomainAssociationCertificateValidationRecordGetArgs>> certificateValidationRecords;

    public Input<List<CustomDomainAssociationCertificateValidationRecordGetArgs>> getCertificateValidationRecords() {
        return this.certificateValidationRecords == null ? Input.empty() : this.certificateValidationRecords;
    }

    /**
     * The App Runner subdomain of the App Runner service. The custom domain name is mapped to this target name. Attribute only available if resource created (not imported) with this provider.
     * 
     */
    @InputImport(name="dnsTarget")
    private final @Nullable Input<String> dnsTarget;

    public Input<String> getDnsTarget() {
        return this.dnsTarget == null ? Input.empty() : this.dnsTarget;
    }

    /**
     * The custom domain endpoint to association. Specify a base domain e.g., `example.com` or a subdomain e.g., `subdomain.example.com`.
     * 
     */
    @InputImport(name="domainName")
    private final @Nullable Input<String> domainName;

    public Input<String> getDomainName() {
        return this.domainName == null ? Input.empty() : this.domainName;
    }

    /**
     * Whether to associate the subdomain with the App Runner service in addition to the base domain. Defaults to `true`.
     * 
     */
    @InputImport(name="enableWwwSubdomain")
    private final @Nullable Input<Boolean> enableWwwSubdomain;

    public Input<Boolean> getEnableWwwSubdomain() {
        return this.enableWwwSubdomain == null ? Input.empty() : this.enableWwwSubdomain;
    }

    /**
     * The ARN of the App Runner service.
     * 
     */
    @InputImport(name="serviceArn")
    private final @Nullable Input<String> serviceArn;

    public Input<String> getServiceArn() {
        return this.serviceArn == null ? Input.empty() : this.serviceArn;
    }

    /**
     * The current state of the certificate CNAME record validation. It should change to `SUCCESS` after App Runner completes validation with your DNS.
     * 
     */
    @InputImport(name="status")
    private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    public CustomDomainAssociationState(
        @Nullable Input<List<CustomDomainAssociationCertificateValidationRecordGetArgs>> certificateValidationRecords,
        @Nullable Input<String> dnsTarget,
        @Nullable Input<String> domainName,
        @Nullable Input<Boolean> enableWwwSubdomain,
        @Nullable Input<String> serviceArn,
        @Nullable Input<String> status) {
        this.certificateValidationRecords = certificateValidationRecords;
        this.dnsTarget = dnsTarget;
        this.domainName = domainName;
        this.enableWwwSubdomain = enableWwwSubdomain;
        this.serviceArn = serviceArn;
        this.status = status;
    }

    private CustomDomainAssociationState() {
        this.certificateValidationRecords = Input.empty();
        this.dnsTarget = Input.empty();
        this.domainName = Input.empty();
        this.enableWwwSubdomain = Input.empty();
        this.serviceArn = Input.empty();
        this.status = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomDomainAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<CustomDomainAssociationCertificateValidationRecordGetArgs>> certificateValidationRecords;
        private @Nullable Input<String> dnsTarget;
        private @Nullable Input<String> domainName;
        private @Nullable Input<Boolean> enableWwwSubdomain;
        private @Nullable Input<String> serviceArn;
        private @Nullable Input<String> status;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomDomainAssociationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateValidationRecords = defaults.certificateValidationRecords;
    	      this.dnsTarget = defaults.dnsTarget;
    	      this.domainName = defaults.domainName;
    	      this.enableWwwSubdomain = defaults.enableWwwSubdomain;
    	      this.serviceArn = defaults.serviceArn;
    	      this.status = defaults.status;
        }

        public Builder setCertificateValidationRecords(@Nullable Input<List<CustomDomainAssociationCertificateValidationRecordGetArgs>> certificateValidationRecords) {
            this.certificateValidationRecords = certificateValidationRecords;
            return this;
        }

        public Builder setCertificateValidationRecords(@Nullable List<CustomDomainAssociationCertificateValidationRecordGetArgs> certificateValidationRecords) {
            this.certificateValidationRecords = Input.ofNullable(certificateValidationRecords);
            return this;
        }

        public Builder setDnsTarget(@Nullable Input<String> dnsTarget) {
            this.dnsTarget = dnsTarget;
            return this;
        }

        public Builder setDnsTarget(@Nullable String dnsTarget) {
            this.dnsTarget = Input.ofNullable(dnsTarget);
            return this;
        }

        public Builder setDomainName(@Nullable Input<String> domainName) {
            this.domainName = domainName;
            return this;
        }

        public Builder setDomainName(@Nullable String domainName) {
            this.domainName = Input.ofNullable(domainName);
            return this;
        }

        public Builder setEnableWwwSubdomain(@Nullable Input<Boolean> enableWwwSubdomain) {
            this.enableWwwSubdomain = enableWwwSubdomain;
            return this;
        }

        public Builder setEnableWwwSubdomain(@Nullable Boolean enableWwwSubdomain) {
            this.enableWwwSubdomain = Input.ofNullable(enableWwwSubdomain);
            return this;
        }

        public Builder setServiceArn(@Nullable Input<String> serviceArn) {
            this.serviceArn = serviceArn;
            return this;
        }

        public Builder setServiceArn(@Nullable String serviceArn) {
            this.serviceArn = Input.ofNullable(serviceArn);
            return this;
        }

        public Builder setStatus(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }
        public CustomDomainAssociationState build() {
            return new CustomDomainAssociationState(certificateValidationRecords, dnsTarget, domainName, enableWwwSubdomain, serviceArn, status);
        }
    }
}
