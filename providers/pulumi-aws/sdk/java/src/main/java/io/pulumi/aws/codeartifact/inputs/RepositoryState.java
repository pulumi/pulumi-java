// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codeartifact.inputs;

import io.pulumi.aws.codeartifact.inputs.RepositoryExternalConnectionsGetArgs;
import io.pulumi.aws.codeartifact.inputs.RepositoryUpstreamGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RepositoryState extends io.pulumi.resources.ResourceArgs {

    public static final RepositoryState Empty = new RepositoryState();

    /**
     * The account number of the AWS account that manages the repository.
     * 
     */
    @Import(name="administratorAccount")
      private final @Nullable Output<String> administratorAccount;

    public Output<String> administratorAccount() {
        return this.administratorAccount == null ? Codegen.empty() : this.administratorAccount;
    }

    /**
     * The ARN of the repository.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The description of the repository.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The domain that contains the created repository.
     * 
     */
    @Import(name="domain")
      private final @Nullable Output<String> domain;

    public Output<String> domain() {
        return this.domain == null ? Codegen.empty() : this.domain;
    }

    /**
     * The account number of the AWS account that owns the domain.
     * 
     */
    @Import(name="domainOwner")
      private final @Nullable Output<String> domainOwner;

    public Output<String> domainOwner() {
        return this.domainOwner == null ? Codegen.empty() : this.domainOwner;
    }

    /**
     * An array of external connections associated with the repository. Only one external connection can be set per repository. see External Connections.
     * 
     */
    @Import(name="externalConnections")
      private final @Nullable Output<RepositoryExternalConnectionsGetArgs> externalConnections;

    public Output<RepositoryExternalConnectionsGetArgs> externalConnections() {
        return this.externalConnections == null ? Codegen.empty() : this.externalConnections;
    }

    /**
     * The name of the repository to create.
     * 
     */
    @Import(name="repository")
      private final @Nullable Output<String> repository;

    public Output<String> repository() {
        return this.repository == null ? Codegen.empty() : this.repository;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * A list of upstream repositories to associate with the repository. The order of the upstream repositories in the list determines their priority order when AWS CodeArtifact looks for a requested package version. see Upstream
     * 
     */
    @Import(name="upstreams")
      private final @Nullable Output<List<RepositoryUpstreamGetArgs>> upstreams;

    public Output<List<RepositoryUpstreamGetArgs>> upstreams() {
        return this.upstreams == null ? Codegen.empty() : this.upstreams;
    }

    public RepositoryState(
        @Nullable Output<String> administratorAccount,
        @Nullable Output<String> arn,
        @Nullable Output<String> description,
        @Nullable Output<String> domain,
        @Nullable Output<String> domainOwner,
        @Nullable Output<RepositoryExternalConnectionsGetArgs> externalConnections,
        @Nullable Output<String> repository,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<List<RepositoryUpstreamGetArgs>> upstreams) {
        this.administratorAccount = administratorAccount;
        this.arn = arn;
        this.description = description;
        this.domain = domain;
        this.domainOwner = domainOwner;
        this.externalConnections = externalConnections;
        this.repository = repository;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.upstreams = upstreams;
    }

    private RepositoryState() {
        this.administratorAccount = Codegen.empty();
        this.arn = Codegen.empty();
        this.description = Codegen.empty();
        this.domain = Codegen.empty();
        this.domainOwner = Codegen.empty();
        this.externalConnections = Codegen.empty();
        this.repository = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.upstreams = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> administratorAccount;
        private @Nullable Output<String> arn;
        private @Nullable Output<String> description;
        private @Nullable Output<String> domain;
        private @Nullable Output<String> domainOwner;
        private @Nullable Output<RepositoryExternalConnectionsGetArgs> externalConnections;
        private @Nullable Output<String> repository;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<List<RepositoryUpstreamGetArgs>> upstreams;

        public Builder() {
    	      // Empty
        }

        public Builder(RepositoryState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administratorAccount = defaults.administratorAccount;
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.domain = defaults.domain;
    	      this.domainOwner = defaults.domainOwner;
    	      this.externalConnections = defaults.externalConnections;
    	      this.repository = defaults.repository;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.upstreams = defaults.upstreams;
        }

        public Builder administratorAccount(@Nullable Output<String> administratorAccount) {
            this.administratorAccount = administratorAccount;
            return this;
        }
        public Builder administratorAccount(@Nullable String administratorAccount) {
            this.administratorAccount = Codegen.ofNullable(administratorAccount);
            return this;
        }
        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder domain(@Nullable Output<String> domain) {
            this.domain = domain;
            return this;
        }
        public Builder domain(@Nullable String domain) {
            this.domain = Codegen.ofNullable(domain);
            return this;
        }
        public Builder domainOwner(@Nullable Output<String> domainOwner) {
            this.domainOwner = domainOwner;
            return this;
        }
        public Builder domainOwner(@Nullable String domainOwner) {
            this.domainOwner = Codegen.ofNullable(domainOwner);
            return this;
        }
        public Builder externalConnections(@Nullable Output<RepositoryExternalConnectionsGetArgs> externalConnections) {
            this.externalConnections = externalConnections;
            return this;
        }
        public Builder externalConnections(@Nullable RepositoryExternalConnectionsGetArgs externalConnections) {
            this.externalConnections = Codegen.ofNullable(externalConnections);
            return this;
        }
        public Builder repository(@Nullable Output<String> repository) {
            this.repository = repository;
            return this;
        }
        public Builder repository(@Nullable String repository) {
            this.repository = Codegen.ofNullable(repository);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder upstreams(@Nullable Output<List<RepositoryUpstreamGetArgs>> upstreams) {
            this.upstreams = upstreams;
            return this;
        }
        public Builder upstreams(@Nullable List<RepositoryUpstreamGetArgs> upstreams) {
            this.upstreams = Codegen.ofNullable(upstreams);
            return this;
        }
        public Builder upstreams(RepositoryUpstreamGetArgs... upstreams) {
            return upstreams(List.of(upstreams));
        }        public RepositoryState build() {
            return new RepositoryState(administratorAccount, arn, description, domain, domainOwner, externalConnections, repository, tags, tagsAll, upstreams);
        }
    }
}
