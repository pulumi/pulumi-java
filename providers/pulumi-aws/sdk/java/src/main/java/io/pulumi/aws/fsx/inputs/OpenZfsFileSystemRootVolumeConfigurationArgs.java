// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx.inputs;

import io.pulumi.aws.fsx.inputs.OpenZfsFileSystemRootVolumeConfigurationNfsExportsArgs;
import io.pulumi.aws.fsx.inputs.OpenZfsFileSystemRootVolumeConfigurationUserAndGroupQuotaArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OpenZfsFileSystemRootVolumeConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final OpenZfsFileSystemRootVolumeConfigurationArgs Empty = new OpenZfsFileSystemRootVolumeConfigurationArgs();

    /**
     * - A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
     * 
     */
    @InputImport(name="copyTagsToSnapshots")
      private final @Nullable Input<Boolean> copyTagsToSnapshots;

    public Input<Boolean> getCopyTagsToSnapshots() {
        return this.copyTagsToSnapshots == null ? Input.empty() : this.copyTagsToSnapshots;
    }

    /**
     * - Method used to compress the data on the volume. Valid values are `NONE` or `ZSTD`. Child volumes that don't specify compression option will inherit from parent volume. This option on file system applies to the root volume.
     * 
     */
    @InputImport(name="dataCompressionType")
      private final @Nullable Input<String> dataCompressionType;

    public Input<String> getDataCompressionType() {
        return this.dataCompressionType == null ? Input.empty() : this.dataCompressionType;
    }

    /**
     * - NFS export configuration for the root volume. Exactly 1 item. See NFS Exports Below.
     * 
     */
    @InputImport(name="nfsExports")
      private final @Nullable Input<OpenZfsFileSystemRootVolumeConfigurationNfsExportsArgs> nfsExports;

    public Input<OpenZfsFileSystemRootVolumeConfigurationNfsExportsArgs> getNfsExports() {
        return this.nfsExports == null ? Input.empty() : this.nfsExports;
    }

    /**
     * - specifies whether the volume is read-only. Default is false.
     * 
     */
    @InputImport(name="readOnly")
      private final @Nullable Input<Boolean> readOnly;

    public Input<Boolean> getReadOnly() {
        return this.readOnly == null ? Input.empty() : this.readOnly;
    }

    /**
     * - Specify how much storage users or groups can use on the volume. Maximum of 100 items. See User and Group Quotas Below.
     * 
     */
    @InputImport(name="userAndGroupQuotas")
      private final @Nullable Input<List<OpenZfsFileSystemRootVolumeConfigurationUserAndGroupQuotaArgs>> userAndGroupQuotas;

    public Input<List<OpenZfsFileSystemRootVolumeConfigurationUserAndGroupQuotaArgs>> getUserAndGroupQuotas() {
        return this.userAndGroupQuotas == null ? Input.empty() : this.userAndGroupQuotas;
    }

    public OpenZfsFileSystemRootVolumeConfigurationArgs(
        @Nullable Input<Boolean> copyTagsToSnapshots,
        @Nullable Input<String> dataCompressionType,
        @Nullable Input<OpenZfsFileSystemRootVolumeConfigurationNfsExportsArgs> nfsExports,
        @Nullable Input<Boolean> readOnly,
        @Nullable Input<List<OpenZfsFileSystemRootVolumeConfigurationUserAndGroupQuotaArgs>> userAndGroupQuotas) {
        this.copyTagsToSnapshots = copyTagsToSnapshots;
        this.dataCompressionType = dataCompressionType;
        this.nfsExports = nfsExports;
        this.readOnly = readOnly;
        this.userAndGroupQuotas = userAndGroupQuotas;
    }

    private OpenZfsFileSystemRootVolumeConfigurationArgs() {
        this.copyTagsToSnapshots = Input.empty();
        this.dataCompressionType = Input.empty();
        this.nfsExports = Input.empty();
        this.readOnly = Input.empty();
        this.userAndGroupQuotas = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenZfsFileSystemRootVolumeConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> copyTagsToSnapshots;
        private @Nullable Input<String> dataCompressionType;
        private @Nullable Input<OpenZfsFileSystemRootVolumeConfigurationNfsExportsArgs> nfsExports;
        private @Nullable Input<Boolean> readOnly;
        private @Nullable Input<List<OpenZfsFileSystemRootVolumeConfigurationUserAndGroupQuotaArgs>> userAndGroupQuotas;

        public Builder() {
    	      // Empty
        }

        public Builder(OpenZfsFileSystemRootVolumeConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.copyTagsToSnapshots = defaults.copyTagsToSnapshots;
    	      this.dataCompressionType = defaults.dataCompressionType;
    	      this.nfsExports = defaults.nfsExports;
    	      this.readOnly = defaults.readOnly;
    	      this.userAndGroupQuotas = defaults.userAndGroupQuotas;
        }

        public Builder setCopyTagsToSnapshots(@Nullable Input<Boolean> copyTagsToSnapshots) {
            this.copyTagsToSnapshots = copyTagsToSnapshots;
            return this;
        }

        public Builder setCopyTagsToSnapshots(@Nullable Boolean copyTagsToSnapshots) {
            this.copyTagsToSnapshots = Input.ofNullable(copyTagsToSnapshots);
            return this;
        }

        public Builder setDataCompressionType(@Nullable Input<String> dataCompressionType) {
            this.dataCompressionType = dataCompressionType;
            return this;
        }

        public Builder setDataCompressionType(@Nullable String dataCompressionType) {
            this.dataCompressionType = Input.ofNullable(dataCompressionType);
            return this;
        }

        public Builder setNfsExports(@Nullable Input<OpenZfsFileSystemRootVolumeConfigurationNfsExportsArgs> nfsExports) {
            this.nfsExports = nfsExports;
            return this;
        }

        public Builder setNfsExports(@Nullable OpenZfsFileSystemRootVolumeConfigurationNfsExportsArgs nfsExports) {
            this.nfsExports = Input.ofNullable(nfsExports);
            return this;
        }

        public Builder setReadOnly(@Nullable Input<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder setReadOnly(@Nullable Boolean readOnly) {
            this.readOnly = Input.ofNullable(readOnly);
            return this;
        }

        public Builder setUserAndGroupQuotas(@Nullable Input<List<OpenZfsFileSystemRootVolumeConfigurationUserAndGroupQuotaArgs>> userAndGroupQuotas) {
            this.userAndGroupQuotas = userAndGroupQuotas;
            return this;
        }

        public Builder setUserAndGroupQuotas(@Nullable List<OpenZfsFileSystemRootVolumeConfigurationUserAndGroupQuotaArgs> userAndGroupQuotas) {
            this.userAndGroupQuotas = Input.ofNullable(userAndGroupQuotas);
            return this;
        }
        public OpenZfsFileSystemRootVolumeConfigurationArgs build() {
            return new OpenZfsFileSystemRootVolumeConfigurationArgs(copyTagsToSnapshots, dataCompressionType, nfsExports, readOnly, userAndGroupQuotas);
        }
    }
}
