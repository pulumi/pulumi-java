// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.TrafficMirrorFilterRuleDestinationPortRangeGetArgs;
import io.pulumi.aws.ec2.inputs.TrafficMirrorFilterRuleSourcePortRangeGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TrafficMirrorFilterRuleState extends io.pulumi.resources.ResourceArgs {

    public static final TrafficMirrorFilterRuleState Empty = new TrafficMirrorFilterRuleState();

    /**
     * ARN of the traffic mirror filter rule.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Description of the traffic mirror filter rule.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Destination CIDR block to assign to the Traffic Mirror rule.
     * 
     */
    @InputImport(name="destinationCidrBlock")
      private final @Nullable Input<String> destinationCidrBlock;

    public Input<String> getDestinationCidrBlock() {
        return this.destinationCidrBlock == null ? Input.empty() : this.destinationCidrBlock;
    }

    /**
     * Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
     * 
     */
    @InputImport(name="destinationPortRange")
      private final @Nullable Input<TrafficMirrorFilterRuleDestinationPortRangeGetArgs> destinationPortRange;

    public Input<TrafficMirrorFilterRuleDestinationPortRangeGetArgs> getDestinationPortRange() {
        return this.destinationPortRange == null ? Input.empty() : this.destinationPortRange;
    }

    /**
     * Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
     * 
     */
    @InputImport(name="protocol")
      private final @Nullable Input<Integer> protocol;

    public Input<Integer> getProtocol() {
        return this.protocol == null ? Input.empty() : this.protocol;
    }

    /**
     * Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
     * 
     */
    @InputImport(name="ruleAction")
      private final @Nullable Input<String> ruleAction;

    public Input<String> getRuleAction() {
        return this.ruleAction == null ? Input.empty() : this.ruleAction;
    }

    /**
     * Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
     * 
     */
    @InputImport(name="ruleNumber")
      private final @Nullable Input<Integer> ruleNumber;

    public Input<Integer> getRuleNumber() {
        return this.ruleNumber == null ? Input.empty() : this.ruleNumber;
    }

    /**
     * Source CIDR block to assign to the Traffic Mirror rule.
     * 
     */
    @InputImport(name="sourceCidrBlock")
      private final @Nullable Input<String> sourceCidrBlock;

    public Input<String> getSourceCidrBlock() {
        return this.sourceCidrBlock == null ? Input.empty() : this.sourceCidrBlock;
    }

    /**
     * Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
     * 
     */
    @InputImport(name="sourcePortRange")
      private final @Nullable Input<TrafficMirrorFilterRuleSourcePortRangeGetArgs> sourcePortRange;

    public Input<TrafficMirrorFilterRuleSourcePortRangeGetArgs> getSourcePortRange() {
        return this.sourcePortRange == null ? Input.empty() : this.sourcePortRange;
    }

    /**
     * Direction of traffic to be captured. Valid values are `ingress` and `egress`
     * 
     */
    @InputImport(name="trafficDirection")
      private final @Nullable Input<String> trafficDirection;

    public Input<String> getTrafficDirection() {
        return this.trafficDirection == null ? Input.empty() : this.trafficDirection;
    }

    /**
     * ID of the traffic mirror filter to which this rule should be added
     * 
     */
    @InputImport(name="trafficMirrorFilterId")
      private final @Nullable Input<String> trafficMirrorFilterId;

    public Input<String> getTrafficMirrorFilterId() {
        return this.trafficMirrorFilterId == null ? Input.empty() : this.trafficMirrorFilterId;
    }

    public TrafficMirrorFilterRuleState(
        @Nullable Input<String> arn,
        @Nullable Input<String> description,
        @Nullable Input<String> destinationCidrBlock,
        @Nullable Input<TrafficMirrorFilterRuleDestinationPortRangeGetArgs> destinationPortRange,
        @Nullable Input<Integer> protocol,
        @Nullable Input<String> ruleAction,
        @Nullable Input<Integer> ruleNumber,
        @Nullable Input<String> sourceCidrBlock,
        @Nullable Input<TrafficMirrorFilterRuleSourcePortRangeGetArgs> sourcePortRange,
        @Nullable Input<String> trafficDirection,
        @Nullable Input<String> trafficMirrorFilterId) {
        this.arn = arn;
        this.description = description;
        this.destinationCidrBlock = destinationCidrBlock;
        this.destinationPortRange = destinationPortRange;
        this.protocol = protocol;
        this.ruleAction = ruleAction;
        this.ruleNumber = ruleNumber;
        this.sourceCidrBlock = sourceCidrBlock;
        this.sourcePortRange = sourcePortRange;
        this.trafficDirection = trafficDirection;
        this.trafficMirrorFilterId = trafficMirrorFilterId;
    }

    private TrafficMirrorFilterRuleState() {
        this.arn = Input.empty();
        this.description = Input.empty();
        this.destinationCidrBlock = Input.empty();
        this.destinationPortRange = Input.empty();
        this.protocol = Input.empty();
        this.ruleAction = Input.empty();
        this.ruleNumber = Input.empty();
        this.sourceCidrBlock = Input.empty();
        this.sourcePortRange = Input.empty();
        this.trafficDirection = Input.empty();
        this.trafficMirrorFilterId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrafficMirrorFilterRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> description;
        private @Nullable Input<String> destinationCidrBlock;
        private @Nullable Input<TrafficMirrorFilterRuleDestinationPortRangeGetArgs> destinationPortRange;
        private @Nullable Input<Integer> protocol;
        private @Nullable Input<String> ruleAction;
        private @Nullable Input<Integer> ruleNumber;
        private @Nullable Input<String> sourceCidrBlock;
        private @Nullable Input<TrafficMirrorFilterRuleSourcePortRangeGetArgs> sourcePortRange;
        private @Nullable Input<String> trafficDirection;
        private @Nullable Input<String> trafficMirrorFilterId;

        public Builder() {
    	      // Empty
        }

        public Builder(TrafficMirrorFilterRuleState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.destinationCidrBlock = defaults.destinationCidrBlock;
    	      this.destinationPortRange = defaults.destinationPortRange;
    	      this.protocol = defaults.protocol;
    	      this.ruleAction = defaults.ruleAction;
    	      this.ruleNumber = defaults.ruleNumber;
    	      this.sourceCidrBlock = defaults.sourceCidrBlock;
    	      this.sourcePortRange = defaults.sourcePortRange;
    	      this.trafficDirection = defaults.trafficDirection;
    	      this.trafficMirrorFilterId = defaults.trafficMirrorFilterId;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDestinationCidrBlock(@Nullable Input<String> destinationCidrBlock) {
            this.destinationCidrBlock = destinationCidrBlock;
            return this;
        }

        public Builder setDestinationCidrBlock(@Nullable String destinationCidrBlock) {
            this.destinationCidrBlock = Input.ofNullable(destinationCidrBlock);
            return this;
        }

        public Builder setDestinationPortRange(@Nullable Input<TrafficMirrorFilterRuleDestinationPortRangeGetArgs> destinationPortRange) {
            this.destinationPortRange = destinationPortRange;
            return this;
        }

        public Builder setDestinationPortRange(@Nullable TrafficMirrorFilterRuleDestinationPortRangeGetArgs destinationPortRange) {
            this.destinationPortRange = Input.ofNullable(destinationPortRange);
            return this;
        }

        public Builder setProtocol(@Nullable Input<Integer> protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder setProtocol(@Nullable Integer protocol) {
            this.protocol = Input.ofNullable(protocol);
            return this;
        }

        public Builder setRuleAction(@Nullable Input<String> ruleAction) {
            this.ruleAction = ruleAction;
            return this;
        }

        public Builder setRuleAction(@Nullable String ruleAction) {
            this.ruleAction = Input.ofNullable(ruleAction);
            return this;
        }

        public Builder setRuleNumber(@Nullable Input<Integer> ruleNumber) {
            this.ruleNumber = ruleNumber;
            return this;
        }

        public Builder setRuleNumber(@Nullable Integer ruleNumber) {
            this.ruleNumber = Input.ofNullable(ruleNumber);
            return this;
        }

        public Builder setSourceCidrBlock(@Nullable Input<String> sourceCidrBlock) {
            this.sourceCidrBlock = sourceCidrBlock;
            return this;
        }

        public Builder setSourceCidrBlock(@Nullable String sourceCidrBlock) {
            this.sourceCidrBlock = Input.ofNullable(sourceCidrBlock);
            return this;
        }

        public Builder setSourcePortRange(@Nullable Input<TrafficMirrorFilterRuleSourcePortRangeGetArgs> sourcePortRange) {
            this.sourcePortRange = sourcePortRange;
            return this;
        }

        public Builder setSourcePortRange(@Nullable TrafficMirrorFilterRuleSourcePortRangeGetArgs sourcePortRange) {
            this.sourcePortRange = Input.ofNullable(sourcePortRange);
            return this;
        }

        public Builder setTrafficDirection(@Nullable Input<String> trafficDirection) {
            this.trafficDirection = trafficDirection;
            return this;
        }

        public Builder setTrafficDirection(@Nullable String trafficDirection) {
            this.trafficDirection = Input.ofNullable(trafficDirection);
            return this;
        }

        public Builder setTrafficMirrorFilterId(@Nullable Input<String> trafficMirrorFilterId) {
            this.trafficMirrorFilterId = trafficMirrorFilterId;
            return this;
        }

        public Builder setTrafficMirrorFilterId(@Nullable String trafficMirrorFilterId) {
            this.trafficMirrorFilterId = Input.ofNullable(trafficMirrorFilterId);
            return this;
        }
        public TrafficMirrorFilterRuleState build() {
            return new TrafficMirrorFilterRuleState(arn, description, destinationCidrBlock, destinationPortRange, protocol, ruleAction, ruleNumber, sourceCidrBlock, sourcePortRange, trafficDirection, trafficMirrorFilterId);
        }
    }
}
