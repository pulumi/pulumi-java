// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elasticloadbalancing;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AppCookieStickinessPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final AppCookieStickinessPolicyArgs Empty = new AppCookieStickinessPolicyArgs();

    /**
     * The application cookie whose lifetime the ELB's cookie should follow.
     * 
     */
    @InputImport(name="cookieName", required=true)
      private final Input<String> cookieName;

    public Input<String> getCookieName() {
        return this.cookieName;
    }

    /**
     * The load balancer port to which the policy
     * should be applied. This must be an active listener on the load
     * balancer.
     * 
     */
    @InputImport(name="lbPort", required=true)
      private final Input<Integer> lbPort;

    public Input<Integer> getLbPort() {
        return this.lbPort;
    }

    /**
     * The name of load balancer to which the policy
     * should be attached.
     * 
     */
    @InputImport(name="loadBalancer", required=true)
      private final Input<String> loadBalancer;

    public Input<String> getLoadBalancer() {
        return this.loadBalancer;
    }

    /**
     * The name of the stickiness policy.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    public AppCookieStickinessPolicyArgs(
        Input<String> cookieName,
        Input<Integer> lbPort,
        Input<String> loadBalancer,
        @Nullable Input<String> name) {
        this.cookieName = Objects.requireNonNull(cookieName, "expected parameter 'cookieName' to be non-null");
        this.lbPort = Objects.requireNonNull(lbPort, "expected parameter 'lbPort' to be non-null");
        this.loadBalancer = Objects.requireNonNull(loadBalancer, "expected parameter 'loadBalancer' to be non-null");
        this.name = name;
    }

    private AppCookieStickinessPolicyArgs() {
        this.cookieName = Input.empty();
        this.lbPort = Input.empty();
        this.loadBalancer = Input.empty();
        this.name = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppCookieStickinessPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> cookieName;
        private Input<Integer> lbPort;
        private Input<String> loadBalancer;
        private @Nullable Input<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(AppCookieStickinessPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cookieName = defaults.cookieName;
    	      this.lbPort = defaults.lbPort;
    	      this.loadBalancer = defaults.loadBalancer;
    	      this.name = defaults.name;
        }

        public Builder cookieName(Input<String> cookieName) {
            this.cookieName = Objects.requireNonNull(cookieName);
            return this;
        }

        public Builder cookieName(String cookieName) {
            this.cookieName = Input.of(Objects.requireNonNull(cookieName));
            return this;
        }

        public Builder lbPort(Input<Integer> lbPort) {
            this.lbPort = Objects.requireNonNull(lbPort);
            return this;
        }

        public Builder lbPort(Integer lbPort) {
            this.lbPort = Input.of(Objects.requireNonNull(lbPort));
            return this;
        }

        public Builder loadBalancer(Input<String> loadBalancer) {
            this.loadBalancer = Objects.requireNonNull(loadBalancer);
            return this;
        }

        public Builder loadBalancer(String loadBalancer) {
            this.loadBalancer = Input.of(Objects.requireNonNull(loadBalancer));
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }
        public AppCookieStickinessPolicyArgs build() {
            return new AppCookieStickinessPolicyArgs(cookieName, lbPort, loadBalancer, name);
        }
    }
}
