// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DefaultSubnetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DefaultSubnetArgs Empty = new DefaultSubnetArgs();

    /**
     * AZ for the subnet.
     * 
     */
    @InputImport(name="availabilityZone", required=true)
      private final Input<String> availabilityZone;

    public Input<String> getAvailabilityZone() {
        return this.availabilityZone;
    }

    @InputImport(name="customerOwnedIpv4Pool")
      private final @Nullable Input<String> customerOwnedIpv4Pool;

    public Input<String> getCustomerOwnedIpv4Pool() {
        return this.customerOwnedIpv4Pool == null ? Input.empty() : this.customerOwnedIpv4Pool;
    }

    @InputImport(name="enableDns64")
      private final @Nullable Input<Boolean> enableDns64;

    public Input<Boolean> getEnableDns64() {
        return this.enableDns64 == null ? Input.empty() : this.enableDns64;
    }

    @InputImport(name="enableResourceNameDnsARecordOnLaunch")
      private final @Nullable Input<Boolean> enableResourceNameDnsARecordOnLaunch;

    public Input<Boolean> getEnableResourceNameDnsARecordOnLaunch() {
        return this.enableResourceNameDnsARecordOnLaunch == null ? Input.empty() : this.enableResourceNameDnsARecordOnLaunch;
    }

    @InputImport(name="enableResourceNameDnsAaaaRecordOnLaunch")
      private final @Nullable Input<Boolean> enableResourceNameDnsAaaaRecordOnLaunch;

    public Input<Boolean> getEnableResourceNameDnsAaaaRecordOnLaunch() {
        return this.enableResourceNameDnsAaaaRecordOnLaunch == null ? Input.empty() : this.enableResourceNameDnsAaaaRecordOnLaunch;
    }

    @InputImport(name="ipv6Native")
      private final @Nullable Input<Boolean> ipv6Native;

    public Input<Boolean> getIpv6Native() {
        return this.ipv6Native == null ? Input.empty() : this.ipv6Native;
    }

    @InputImport(name="mapCustomerOwnedIpOnLaunch")
      private final @Nullable Input<Boolean> mapCustomerOwnedIpOnLaunch;

    public Input<Boolean> getMapCustomerOwnedIpOnLaunch() {
        return this.mapCustomerOwnedIpOnLaunch == null ? Input.empty() : this.mapCustomerOwnedIpOnLaunch;
    }

    /**
     * Whether instances launched into the subnet should be assigned a public IP address.
     * 
     */
    @InputImport(name="mapPublicIpOnLaunch")
      private final @Nullable Input<Boolean> mapPublicIpOnLaunch;

    public Input<Boolean> getMapPublicIpOnLaunch() {
        return this.mapPublicIpOnLaunch == null ? Input.empty() : this.mapPublicIpOnLaunch;
    }

    @InputImport(name="outpostArn")
      private final @Nullable Input<String> outpostArn;

    public Input<String> getOutpostArn() {
        return this.outpostArn == null ? Input.empty() : this.outpostArn;
    }

    @InputImport(name="privateDnsHostnameTypeOnLaunch")
      private final @Nullable Input<String> privateDnsHostnameTypeOnLaunch;

    public Input<String> getPrivateDnsHostnameTypeOnLaunch() {
        return this.privateDnsHostnameTypeOnLaunch == null ? Input.empty() : this.privateDnsHostnameTypeOnLaunch;
    }

    /**
     * Map of tags to assign to the resource.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public DefaultSubnetArgs(
        Input<String> availabilityZone,
        @Nullable Input<String> customerOwnedIpv4Pool,
        @Nullable Input<Boolean> enableDns64,
        @Nullable Input<Boolean> enableResourceNameDnsARecordOnLaunch,
        @Nullable Input<Boolean> enableResourceNameDnsAaaaRecordOnLaunch,
        @Nullable Input<Boolean> ipv6Native,
        @Nullable Input<Boolean> mapCustomerOwnedIpOnLaunch,
        @Nullable Input<Boolean> mapPublicIpOnLaunch,
        @Nullable Input<String> outpostArn,
        @Nullable Input<String> privateDnsHostnameTypeOnLaunch,
        @Nullable Input<Map<String,String>> tags) {
        this.availabilityZone = Objects.requireNonNull(availabilityZone, "expected parameter 'availabilityZone' to be non-null");
        this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
        this.enableDns64 = enableDns64;
        this.enableResourceNameDnsARecordOnLaunch = enableResourceNameDnsARecordOnLaunch;
        this.enableResourceNameDnsAaaaRecordOnLaunch = enableResourceNameDnsAaaaRecordOnLaunch;
        this.ipv6Native = ipv6Native;
        this.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch;
        this.mapPublicIpOnLaunch = mapPublicIpOnLaunch;
        this.outpostArn = outpostArn;
        this.privateDnsHostnameTypeOnLaunch = privateDnsHostnameTypeOnLaunch;
        this.tags = tags;
    }

    private DefaultSubnetArgs() {
        this.availabilityZone = Input.empty();
        this.customerOwnedIpv4Pool = Input.empty();
        this.enableDns64 = Input.empty();
        this.enableResourceNameDnsARecordOnLaunch = Input.empty();
        this.enableResourceNameDnsAaaaRecordOnLaunch = Input.empty();
        this.ipv6Native = Input.empty();
        this.mapCustomerOwnedIpOnLaunch = Input.empty();
        this.mapPublicIpOnLaunch = Input.empty();
        this.outpostArn = Input.empty();
        this.privateDnsHostnameTypeOnLaunch = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DefaultSubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> availabilityZone;
        private @Nullable Input<String> customerOwnedIpv4Pool;
        private @Nullable Input<Boolean> enableDns64;
        private @Nullable Input<Boolean> enableResourceNameDnsARecordOnLaunch;
        private @Nullable Input<Boolean> enableResourceNameDnsAaaaRecordOnLaunch;
        private @Nullable Input<Boolean> ipv6Native;
        private @Nullable Input<Boolean> mapCustomerOwnedIpOnLaunch;
        private @Nullable Input<Boolean> mapPublicIpOnLaunch;
        private @Nullable Input<String> outpostArn;
        private @Nullable Input<String> privateDnsHostnameTypeOnLaunch;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(DefaultSubnetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.customerOwnedIpv4Pool = defaults.customerOwnedIpv4Pool;
    	      this.enableDns64 = defaults.enableDns64;
    	      this.enableResourceNameDnsARecordOnLaunch = defaults.enableResourceNameDnsARecordOnLaunch;
    	      this.enableResourceNameDnsAaaaRecordOnLaunch = defaults.enableResourceNameDnsAaaaRecordOnLaunch;
    	      this.ipv6Native = defaults.ipv6Native;
    	      this.mapCustomerOwnedIpOnLaunch = defaults.mapCustomerOwnedIpOnLaunch;
    	      this.mapPublicIpOnLaunch = defaults.mapPublicIpOnLaunch;
    	      this.outpostArn = defaults.outpostArn;
    	      this.privateDnsHostnameTypeOnLaunch = defaults.privateDnsHostnameTypeOnLaunch;
    	      this.tags = defaults.tags;
        }

        public Builder availabilityZone(Input<String> availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }

        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Input.of(Objects.requireNonNull(availabilityZone));
            return this;
        }

        public Builder customerOwnedIpv4Pool(@Nullable Input<String> customerOwnedIpv4Pool) {
            this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
            return this;
        }

        public Builder customerOwnedIpv4Pool(@Nullable String customerOwnedIpv4Pool) {
            this.customerOwnedIpv4Pool = Input.ofNullable(customerOwnedIpv4Pool);
            return this;
        }

        public Builder enableDns64(@Nullable Input<Boolean> enableDns64) {
            this.enableDns64 = enableDns64;
            return this;
        }

        public Builder enableDns64(@Nullable Boolean enableDns64) {
            this.enableDns64 = Input.ofNullable(enableDns64);
            return this;
        }

        public Builder enableResourceNameDnsARecordOnLaunch(@Nullable Input<Boolean> enableResourceNameDnsARecordOnLaunch) {
            this.enableResourceNameDnsARecordOnLaunch = enableResourceNameDnsARecordOnLaunch;
            return this;
        }

        public Builder enableResourceNameDnsARecordOnLaunch(@Nullable Boolean enableResourceNameDnsARecordOnLaunch) {
            this.enableResourceNameDnsARecordOnLaunch = Input.ofNullable(enableResourceNameDnsARecordOnLaunch);
            return this;
        }

        public Builder enableResourceNameDnsAaaaRecordOnLaunch(@Nullable Input<Boolean> enableResourceNameDnsAaaaRecordOnLaunch) {
            this.enableResourceNameDnsAaaaRecordOnLaunch = enableResourceNameDnsAaaaRecordOnLaunch;
            return this;
        }

        public Builder enableResourceNameDnsAaaaRecordOnLaunch(@Nullable Boolean enableResourceNameDnsAaaaRecordOnLaunch) {
            this.enableResourceNameDnsAaaaRecordOnLaunch = Input.ofNullable(enableResourceNameDnsAaaaRecordOnLaunch);
            return this;
        }

        public Builder ipv6Native(@Nullable Input<Boolean> ipv6Native) {
            this.ipv6Native = ipv6Native;
            return this;
        }

        public Builder ipv6Native(@Nullable Boolean ipv6Native) {
            this.ipv6Native = Input.ofNullable(ipv6Native);
            return this;
        }

        public Builder mapCustomerOwnedIpOnLaunch(@Nullable Input<Boolean> mapCustomerOwnedIpOnLaunch) {
            this.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch;
            return this;
        }

        public Builder mapCustomerOwnedIpOnLaunch(@Nullable Boolean mapCustomerOwnedIpOnLaunch) {
            this.mapCustomerOwnedIpOnLaunch = Input.ofNullable(mapCustomerOwnedIpOnLaunch);
            return this;
        }

        public Builder mapPublicIpOnLaunch(@Nullable Input<Boolean> mapPublicIpOnLaunch) {
            this.mapPublicIpOnLaunch = mapPublicIpOnLaunch;
            return this;
        }

        public Builder mapPublicIpOnLaunch(@Nullable Boolean mapPublicIpOnLaunch) {
            this.mapPublicIpOnLaunch = Input.ofNullable(mapPublicIpOnLaunch);
            return this;
        }

        public Builder outpostArn(@Nullable Input<String> outpostArn) {
            this.outpostArn = outpostArn;
            return this;
        }

        public Builder outpostArn(@Nullable String outpostArn) {
            this.outpostArn = Input.ofNullable(outpostArn);
            return this;
        }

        public Builder privateDnsHostnameTypeOnLaunch(@Nullable Input<String> privateDnsHostnameTypeOnLaunch) {
            this.privateDnsHostnameTypeOnLaunch = privateDnsHostnameTypeOnLaunch;
            return this;
        }

        public Builder privateDnsHostnameTypeOnLaunch(@Nullable String privateDnsHostnameTypeOnLaunch) {
            this.privateDnsHostnameTypeOnLaunch = Input.ofNullable(privateDnsHostnameTypeOnLaunch);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public DefaultSubnetArgs build() {
            return new DefaultSubnetArgs(availabilityZone, customerOwnedIpv4Pool, enableDns64, enableResourceNameDnsARecordOnLaunch, enableResourceNameDnsAaaaRecordOnLaunch, ipv6Native, mapCustomerOwnedIpOnLaunch, mapPublicIpOnLaunch, outpostArn, privateDnsHostnameTypeOnLaunch, tags);
        }
    }
}
