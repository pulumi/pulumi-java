// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.budgets;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.budgets.BudgetActionArgs;
import io.pulumi.aws.budgets.inputs.BudgetActionState;
import io.pulumi.aws.budgets.outputs.BudgetActionActionThreshold;
import io.pulumi.aws.budgets.outputs.BudgetActionDefinition;
import io.pulumi.aws.budgets.outputs.BudgetActionSubscriber;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Provides a budget action resource. Budget actions are cost savings controls that run either automatically on your behalf or by using a workflow approval process.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const examplePolicy = new aws.iam.Policy("examplePolicy", {
 *     description: "My example policy",
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "ec2:Describe*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * `,
 * });
 * const current = aws.getPartition({});
 * const exampleRole = new aws.iam.Role("exampleRole", {assumeRolePolicy: current.then(current => `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": [
 *           "budgets.${current.dnsSuffix}"
 *         ]
 *       },
 *       "Action": [
 *         "sts:AssumeRole"
 *       ]
 *     }
 *   ]
 * }
 * `)});
 * const exampleBudget = new aws.budgets.Budget("exampleBudget", {
 *     budgetType: "USAGE",
 *     limitAmount: "10.0",
 *     limitUnit: "dollars",
 *     timePeriodStart: "2006-01-02_15:04",
 *     timeUnit: "MONTHLY",
 * });
 * const exampleBudgetAction = new aws.budgets.BudgetAction("exampleBudgetAction", {
 *     budgetName: exampleBudget.name,
 *     actionType: "APPLY_IAM_POLICY",
 *     approvalModel: "AUTOMATIC",
 *     notificationType: "ACTUAL",
 *     executionRoleArn: exampleRole.arn,
 *     actionThreshold: {
 *         actionThresholdType: "ABSOLUTE_VALUE",
 *         actionThresholdValue: 100,
 *     },
 *     definition: {
 *         iamActionDefinition: {
 *             policyArn: examplePolicy.arn,
 *             roles: [exampleRole.name],
 *         },
 *     },
 *     subscribers: [{
 *         address: "example@example.example",
 *         subscriptionType: "EMAIL",
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_policy = aws.iam.Policy("examplePolicy",
 *     description="My example policy",
 *     policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "ec2:Describe*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * """)
 * current = aws.get_partition()
 * example_role = aws.iam.Role("exampleRole", assume_role_policy=f"""{{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {{
 *       "Effect": "Allow",
 *       "Principal": {{
 *         "Service": [
 *           "budgets.{current.dns_suffix}"
 *         ]
 *       }},
 *       "Action": [
 *         "sts:AssumeRole"
 *       ]
 *     }}
 *   ]
 * }}
 * """)
 * example_budget = aws.budgets.Budget("exampleBudget",
 *     budget_type="USAGE",
 *     limit_amount="10.0",
 *     limit_unit="dollars",
 *     time_period_start="2006-01-02_15:04",
 *     time_unit="MONTHLY")
 * example_budget_action = aws.budgets.BudgetAction("exampleBudgetAction",
 *     budget_name=example_budget.name,
 *     action_type="APPLY_IAM_POLICY",
 *     approval_model="AUTOMATIC",
 *     notification_type="ACTUAL",
 *     execution_role_arn=example_role.arn,
 *     action_threshold=aws.budgets.BudgetActionActionThresholdArgs(
 *         action_threshold_type="ABSOLUTE_VALUE",
 *         action_threshold_value=100,
 *     ),
 *     definition=aws.budgets.BudgetActionDefinitionArgs(
 *         iam_action_definition=aws.budgets.BudgetActionDefinitionIamActionDefinitionArgs(
 *             policy_arn=example_policy.arn,
 *             roles=[example_role.name],
 *         ),
 *     ),
 *     subscribers=[aws.budgets.BudgetActionSubscriberArgs(
 *         address="example@example.example",
 *         subscription_type="EMAIL",
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var examplePolicy = new Aws.Iam.Policy("examplePolicy", new Aws.Iam.PolicyArgs
 *         {
 *             Description = "My example policy",
 *             Policy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": [
 *         ""ec2:Describe*""
 *       ],
 *       ""Effect"": ""Allow"",
 *       ""Resource"": ""*""
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var current = Output.Create(Aws.GetPartition.InvokeAsync());
 *         var exampleRole = new Aws.Iam.Role("exampleRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = current.Apply(current => @$"{{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {{
 *       ""Effect"": ""Allow"",
 *       ""Principal"": {{
 *         ""Service"": [
 *           ""budgets.{current.DnsSuffix}""
 *         ]
 *       }},
 *       ""Action"": [
 *         ""sts:AssumeRole""
 *       ]
 *     }}
 *   ]
 * }}
 * "),
 *         });
 *         var exampleBudget = new Aws.Budgets.Budget("exampleBudget", new Aws.Budgets.BudgetArgs
 *         {
 *             BudgetType = "USAGE",
 *             LimitAmount = "10.0",
 *             LimitUnit = "dollars",
 *             TimePeriodStart = "2006-01-02_15:04",
 *             TimeUnit = "MONTHLY",
 *         });
 *         var exampleBudgetAction = new Aws.Budgets.BudgetAction("exampleBudgetAction", new Aws.Budgets.BudgetActionArgs
 *         {
 *             BudgetName = exampleBudget.Name,
 *             ActionType = "APPLY_IAM_POLICY",
 *             ApprovalModel = "AUTOMATIC",
 *             NotificationType = "ACTUAL",
 *             ExecutionRoleArn = exampleRole.Arn,
 *             ActionThreshold = new Aws.Budgets.Inputs.BudgetActionActionThresholdArgs
 *             {
 *                 ActionThresholdType = "ABSOLUTE_VALUE",
 *                 ActionThresholdValue = 100,
 *             },
 *             Definition = new Aws.Budgets.Inputs.BudgetActionDefinitionArgs
 *             {
 *                 IamActionDefinition = new Aws.Budgets.Inputs.BudgetActionDefinitionIamActionDefinitionArgs
 *                 {
 *                     PolicyArn = examplePolicy.Arn,
 *                     Roles = 
 *                     {
 *                         exampleRole.Name,
 *                     },
 *                 },
 *             },
 *             Subscribers = 
 *             {
 *                 new Aws.Budgets.Inputs.BudgetActionSubscriberArgs
 *                 {
 *                     Address = "example@example.example",
 *                     SubscriptionType = "EMAIL",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/budgets"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		examplePolicy, err := iam.NewPolicy(ctx, "examplePolicy", &iam.PolicyArgs{
 * 			Description: pulumi.String("My example policy"),
 * 			Policy:      pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": [\n", "        \"ec2:Describe*\"\n", "      ],\n", "      \"Effect\": \"Allow\",\n", "      \"Resource\": \"*\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		current, err := aws.GetPartition(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleRole, err := iam.NewRole(ctx, "exampleRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Effect\": \"Allow\",\n", "      \"Principal\": {\n", "        \"Service\": [\n", "          \"budgets.", current.DnsSuffix, "\"\n", "        ]\n", "      },\n", "      \"Action\": [\n", "        \"sts:AssumeRole\"\n", "      ]\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleBudget, err := budgets.NewBudget(ctx, "exampleBudget", &budgets.BudgetArgs{
 * 			BudgetType:      pulumi.String("USAGE"),
 * 			LimitAmount:     pulumi.String("10.0"),
 * 			LimitUnit:       pulumi.String("dollars"),
 * 			TimePeriodStart: pulumi.String("2006-01-02_15:04"),
 * 			TimeUnit:        pulumi.String("MONTHLY"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = budgets.NewBudgetAction(ctx, "exampleBudgetAction", &budgets.BudgetActionArgs{
 * 			BudgetName:       exampleBudget.Name,
 * 			ActionType:       pulumi.String("APPLY_IAM_POLICY"),
 * 			ApprovalModel:    pulumi.String("AUTOMATIC"),
 * 			NotificationType: pulumi.String("ACTUAL"),
 * 			ExecutionRoleArn: exampleRole.Arn,
 * 			ActionThreshold: &budgets.BudgetActionActionThresholdArgs{
 * 				ActionThresholdType:  pulumi.String("ABSOLUTE_VALUE"),
 * 				ActionThresholdValue: pulumi.Float64(100),
 * 			},
 * 			Definition: &budgets.BudgetActionDefinitionArgs{
 * 				IamActionDefinition: &budgets.BudgetActionDefinitionIamActionDefinitionArgs{
 * 					PolicyArn: examplePolicy.Arn,
 * 					Roles: pulumi.StringArray{
 * 						exampleRole.Name,
 * 					},
 * 				},
 * 			},
 * 			Subscribers: budgets.BudgetActionSubscriberArray{
 * 				&budgets.BudgetActionSubscriberArgs{
 * 					Address:          pulumi.String("example@example.example"),
 * 					SubscriptionType: pulumi.String("EMAIL"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Budgets can be imported using `AccountID:ActionID:BudgetName`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:budgets/budgetAction:BudgetAction myBudget 123456789012:some-id:myBudget`
 * ```
 * 
 *  
 */
@ResourceType(type="aws:budgets/budgetAction:BudgetAction")
public class BudgetAction extends io.pulumi.resources.CustomResource {
    /**
     * The ID of the target account for budget. Will use current user's account_id by default if omitted.
     * 
     */
    @Export(name="accountId", type=String.class, parameters={})
    private Output<String> accountId;

    /**
     * @return The ID of the target account for budget. Will use current user's account_id by default if omitted.
     * 
     */
    public Output<String> getAccountId() {
        return this.accountId;
    }
    /**
     * The id of the budget action.
     * 
     */
    @Export(name="actionId", type=String.class, parameters={})
    private Output<String> actionId;

    /**
     * @return The id of the budget action.
     * 
     */
    public Output<String> getActionId() {
        return this.actionId;
    }
    /**
     * The trigger threshold of the action. See Action Threshold.
     * 
     */
    @Export(name="actionThreshold", type=BudgetActionActionThreshold.class, parameters={})
    private Output<BudgetActionActionThreshold> actionThreshold;

    /**
     * @return The trigger threshold of the action. See Action Threshold.
     * 
     */
    public Output<BudgetActionActionThreshold> getActionThreshold() {
        return this.actionThreshold;
    }
    /**
     * The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
     * 
     */
    @Export(name="actionType", type=String.class, parameters={})
    private Output<String> actionType;

    /**
     * @return The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
     * 
     */
    public Output<String> getActionType() {
        return this.actionType;
    }
    /**
     * This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
     * 
     */
    @Export(name="approvalModel", type=String.class, parameters={})
    private Output<String> approvalModel;

    /**
     * @return This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
     * 
     */
    public Output<String> getApprovalModel() {
        return this.approvalModel;
    }
    /**
     * The ARN of the budget action.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the budget action.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The name of a budget.
     * 
     */
    @Export(name="budgetName", type=String.class, parameters={})
    private Output<String> budgetName;

    /**
     * @return The name of a budget.
     * 
     */
    public Output<String> getBudgetName() {
        return this.budgetName;
    }
    /**
     * Specifies all of the type-specific parameters. See Definition.
     * 
     */
    @Export(name="definition", type=BudgetActionDefinition.class, parameters={})
    private Output<BudgetActionDefinition> definition;

    /**
     * @return Specifies all of the type-specific parameters. See Definition.
     * 
     */
    public Output<BudgetActionDefinition> getDefinition() {
        return this.definition;
    }
    /**
     * The role passed for action execution and reversion. Roles and actions must be in the same account.
     * 
     */
    @Export(name="executionRoleArn", type=String.class, parameters={})
    private Output<String> executionRoleArn;

    /**
     * @return The role passed for action execution and reversion. Roles and actions must be in the same account.
     * 
     */
    public Output<String> getExecutionRoleArn() {
        return this.executionRoleArn;
    }
    /**
     * The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
     * 
     */
    @Export(name="notificationType", type=String.class, parameters={})
    private Output<String> notificationType;

    /**
     * @return The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
     * 
     */
    public Output<String> getNotificationType() {
        return this.notificationType;
    }
    /**
     * The status of the budget action.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The status of the budget action.
     * 
     */
    public Output<String> getStatus() {
        return this.status;
    }
    /**
     * A list of subscribers. See Subscriber.
     * 
     */
    @Export(name="subscribers", type=List.class, parameters={BudgetActionSubscriber.class})
    private Output<List<BudgetActionSubscriber>> subscribers;

    /**
     * @return A list of subscribers. See Subscriber.
     * 
     */
    public Output<List<BudgetActionSubscriber>> getSubscribers() {
        return this.subscribers;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BudgetAction(String name) {
        this(name, BudgetActionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BudgetAction(String name, BudgetActionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BudgetAction(String name, BudgetActionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:budgets/budgetAction:BudgetAction", name, args == null ? BudgetActionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private BudgetAction(String name, Output<String> id, @Nullable BudgetActionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:budgets/budgetAction:BudgetAction", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BudgetAction get(String name, Output<String> id, @Nullable BudgetActionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new BudgetAction(name, id, state, options);
    }
}
