// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.mq;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConfigurationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConfigurationArgs Empty = new ConfigurationArgs();

    /**
     * Authentication strategy associated with the configuration. Valid values are `simple` and `ldap`. `ldap` is not supported for `engine_type` `RabbitMQ`.
     * 
     */
    @InputImport(name="authenticationStrategy")
    private final @Nullable Input<String> authenticationStrategy;

    public Input<String> getAuthenticationStrategy() {
        return this.authenticationStrategy == null ? Input.empty() : this.authenticationStrategy;
    }

    /**
     * Broker configuration in XML format. See [official docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html) for supported parameters and format of the XML.
     * 
     */
    @InputImport(name="data", required=true)
    private final Input<String> data;

    public Input<String> getData() {
        return this.data;
    }

    /**
     * Description of the configuration.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
     * 
     */
    @InputImport(name="engineType", required=true)
    private final Input<String> engineType;

    public Input<String> getEngineType() {
        return this.engineType;
    }

    /**
     * Version of the broker engine.
     * 
     */
    @InputImport(name="engineVersion", required=true)
    private final Input<String> engineVersion;

    public Input<String> getEngineVersion() {
        return this.engineVersion;
    }

    /**
     * Name of the configuration.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ConfigurationArgs(
        @Nullable Input<String> authenticationStrategy,
        Input<String> data,
        @Nullable Input<String> description,
        Input<String> engineType,
        Input<String> engineVersion,
        @Nullable Input<String> name,
        @Nullable Input<Map<String,String>> tags) {
        this.authenticationStrategy = authenticationStrategy;
        this.data = Objects.requireNonNull(data, "expected parameter 'data' to be non-null");
        this.description = description;
        this.engineType = Objects.requireNonNull(engineType, "expected parameter 'engineType' to be non-null");
        this.engineVersion = Objects.requireNonNull(engineVersion, "expected parameter 'engineVersion' to be non-null");
        this.name = name;
        this.tags = tags;
    }

    private ConfigurationArgs() {
        this.authenticationStrategy = Input.empty();
        this.data = Input.empty();
        this.description = Input.empty();
        this.engineType = Input.empty();
        this.engineVersion = Input.empty();
        this.name = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> authenticationStrategy;
        private Input<String> data;
        private @Nullable Input<String> description;
        private Input<String> engineType;
        private Input<String> engineVersion;
        private @Nullable Input<String> name;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationStrategy = defaults.authenticationStrategy;
    	      this.data = defaults.data;
    	      this.description = defaults.description;
    	      this.engineType = defaults.engineType;
    	      this.engineVersion = defaults.engineVersion;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
        }

        public Builder setAuthenticationStrategy(@Nullable Input<String> authenticationStrategy) {
            this.authenticationStrategy = authenticationStrategy;
            return this;
        }

        public Builder setAuthenticationStrategy(@Nullable String authenticationStrategy) {
            this.authenticationStrategy = Input.ofNullable(authenticationStrategy);
            return this;
        }

        public Builder setData(Input<String> data) {
            this.data = Objects.requireNonNull(data);
            return this;
        }

        public Builder setData(String data) {
            this.data = Input.of(Objects.requireNonNull(data));
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEngineType(Input<String> engineType) {
            this.engineType = Objects.requireNonNull(engineType);
            return this;
        }

        public Builder setEngineType(String engineType) {
            this.engineType = Input.of(Objects.requireNonNull(engineType));
            return this;
        }

        public Builder setEngineVersion(Input<String> engineVersion) {
            this.engineVersion = Objects.requireNonNull(engineVersion);
            return this;
        }

        public Builder setEngineVersion(String engineVersion) {
            this.engineVersion = Input.of(Objects.requireNonNull(engineVersion));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public ConfigurationArgs build() {
            return new ConfigurationArgs(authenticationStrategy, data, description, engineType, engineVersion, name, tags);
        }
    }
}
