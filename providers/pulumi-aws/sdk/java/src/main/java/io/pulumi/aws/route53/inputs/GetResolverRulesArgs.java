// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.route53.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetResolverRulesArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetResolverRulesArgs Empty = new GetResolverRulesArgs();

    /**
     * When the desired resolver rules are shared with another AWS account, the account ID of the account that the rules are shared with.
     * 
     */
    @Import(name="ownerId")
      private final @Nullable String ownerId;

    public Optional<String> ownerId() {
        return this.ownerId == null ? Optional.empty() : Optional.ofNullable(this.ownerId);
    }

    /**
     * The ID of the outbound resolver endpoint for the desired resolver rules.
     * 
     */
    @Import(name="resolverEndpointId")
      private final @Nullable String resolverEndpointId;

    public Optional<String> resolverEndpointId() {
        return this.resolverEndpointId == null ? Optional.empty() : Optional.ofNullable(this.resolverEndpointId);
    }

    /**
     * The rule type of the desired resolver rules. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
     * 
     */
    @Import(name="ruleType")
      private final @Nullable String ruleType;

    public Optional<String> ruleType() {
        return this.ruleType == null ? Optional.empty() : Optional.ofNullable(this.ruleType);
    }

    /**
     * Whether the desired resolver rules are shared and, if so, whether the current account is sharing the rules with another account, or another account is sharing the rules with the current account. Valid values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
     * 
     */
    @Import(name="shareStatus")
      private final @Nullable String shareStatus;

    public Optional<String> shareStatus() {
        return this.shareStatus == null ? Optional.empty() : Optional.ofNullable(this.shareStatus);
    }

    public GetResolverRulesArgs(
        @Nullable String ownerId,
        @Nullable String resolverEndpointId,
        @Nullable String ruleType,
        @Nullable String shareStatus) {
        this.ownerId = ownerId;
        this.resolverEndpointId = resolverEndpointId;
        this.ruleType = ruleType;
        this.shareStatus = shareStatus;
    }

    private GetResolverRulesArgs() {
        this.ownerId = null;
        this.resolverEndpointId = null;
        this.ruleType = null;
        this.shareStatus = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResolverRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String ownerId;
        private @Nullable String resolverEndpointId;
        private @Nullable String ruleType;
        private @Nullable String shareStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(GetResolverRulesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ownerId = defaults.ownerId;
    	      this.resolverEndpointId = defaults.resolverEndpointId;
    	      this.ruleType = defaults.ruleType;
    	      this.shareStatus = defaults.shareStatus;
        }

        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        public Builder resolverEndpointId(@Nullable String resolverEndpointId) {
            this.resolverEndpointId = resolverEndpointId;
            return this;
        }
        public Builder ruleType(@Nullable String ruleType) {
            this.ruleType = ruleType;
            return this;
        }
        public Builder shareStatus(@Nullable String shareStatus) {
            this.shareStatus = shareStatus;
            return this;
        }        public GetResolverRulesArgs build() {
            return new GetResolverRulesArgs(ownerId, resolverEndpointId, ruleType, shareStatus);
        }
    }
}
