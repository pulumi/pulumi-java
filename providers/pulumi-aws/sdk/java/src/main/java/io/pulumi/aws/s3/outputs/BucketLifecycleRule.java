// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.s3.outputs;

import io.pulumi.aws.s3.outputs.BucketLifecycleRuleExpiration;
import io.pulumi.aws.s3.outputs.BucketLifecycleRuleNoncurrentVersionExpiration;
import io.pulumi.aws.s3.outputs.BucketLifecycleRuleNoncurrentVersionTransition;
import io.pulumi.aws.s3.outputs.BucketLifecycleRuleTransition;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class BucketLifecycleRule {
    /**
     * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     */
    private final @Nullable Integer abortIncompleteMultipartUploadDays;
    /**
     * Specifies lifecycle rule status.
     * 
     */
    private final Boolean enabled;
    /**
     * Specifies a period in the object's expire (documented below).
     * 
     */
    private final @Nullable BucketLifecycleRuleExpiration expiration;
    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    private final @Nullable String id;
    /**
     * Specifies when noncurrent object versions expire (documented below).
     * 
     */
    private final @Nullable BucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration;
    /**
     * Specifies when noncurrent object versions transitions (documented below).
     * 
     */
    private final @Nullable List<BucketLifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions;
    /**
     * Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    private final @Nullable String prefix;
    /**
     * Specifies object tags key and value.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * Specifies a period in the object's transitions (documented below).
     * 
     */
    private final @Nullable List<BucketLifecycleRuleTransition> transitions;

    @OutputCustomType.Constructor({"abortIncompleteMultipartUploadDays","enabled","expiration","id","noncurrentVersionExpiration","noncurrentVersionTransitions","prefix","tags","transitions"})
    private BucketLifecycleRule(
        @Nullable Integer abortIncompleteMultipartUploadDays,
        Boolean enabled,
        @Nullable BucketLifecycleRuleExpiration expiration,
        @Nullable String id,
        @Nullable BucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration,
        @Nullable List<BucketLifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions,
        @Nullable String prefix,
        @Nullable Map<String,String> tags,
        @Nullable List<BucketLifecycleRuleTransition> transitions) {
        this.abortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
        this.enabled = Objects.requireNonNull(enabled);
        this.expiration = expiration;
        this.id = id;
        this.noncurrentVersionExpiration = noncurrentVersionExpiration;
        this.noncurrentVersionTransitions = noncurrentVersionTransitions;
        this.prefix = prefix;
        this.tags = tags;
        this.transitions = transitions;
    }

    /**
     * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     */
    public Optional<Integer> getAbortIncompleteMultipartUploadDays() {
        return Optional.ofNullable(this.abortIncompleteMultipartUploadDays);
    }
    /**
     * Specifies lifecycle rule status.
     * 
     */
    public Boolean getEnabled() {
        return this.enabled;
    }
    /**
     * Specifies a period in the object's expire (documented below).
     * 
     */
    public Optional<BucketLifecycleRuleExpiration> getExpiration() {
        return Optional.ofNullable(this.expiration);
    }
    /**
     * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
     * 
     */
    public Optional<String> getId() {
        return Optional.ofNullable(this.id);
    }
    /**
     * Specifies when noncurrent object versions expire (documented below).
     * 
     */
    public Optional<BucketLifecycleRuleNoncurrentVersionExpiration> getNoncurrentVersionExpiration() {
        return Optional.ofNullable(this.noncurrentVersionExpiration);
    }
    /**
     * Specifies when noncurrent object versions transitions (documented below).
     * 
     */
    public List<BucketLifecycleRuleNoncurrentVersionTransition> getNoncurrentVersionTransitions() {
        return this.noncurrentVersionTransitions == null ? List.of() : this.noncurrentVersionTransitions;
    }
    /**
     * Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    public Optional<String> getPrefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * Specifies object tags key and value.
     * 
     */
    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * Specifies a period in the object's transitions (documented below).
     * 
     */
    public List<BucketLifecycleRuleTransition> getTransitions() {
        return this.transitions == null ? List.of() : this.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer abortIncompleteMultipartUploadDays;
        private Boolean enabled;
        private @Nullable BucketLifecycleRuleExpiration expiration;
        private @Nullable String id;
        private @Nullable BucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration;
        private @Nullable List<BucketLifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions;
        private @Nullable String prefix;
        private @Nullable Map<String,String> tags;
        private @Nullable List<BucketLifecycleRuleTransition> transitions;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketLifecycleRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortIncompleteMultipartUploadDays = defaults.abortIncompleteMultipartUploadDays;
    	      this.enabled = defaults.enabled;
    	      this.expiration = defaults.expiration;
    	      this.id = defaults.id;
    	      this.noncurrentVersionExpiration = defaults.noncurrentVersionExpiration;
    	      this.noncurrentVersionTransitions = defaults.noncurrentVersionTransitions;
    	      this.prefix = defaults.prefix;
    	      this.tags = defaults.tags;
    	      this.transitions = defaults.transitions;
        }

        public Builder setAbortIncompleteMultipartUploadDays(@Nullable Integer abortIncompleteMultipartUploadDays) {
            this.abortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
            return this;
        }

        public Builder setEnabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }

        public Builder setExpiration(@Nullable BucketLifecycleRuleExpiration expiration) {
            this.expiration = expiration;
            return this;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setNoncurrentVersionExpiration(@Nullable BucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration) {
            this.noncurrentVersionExpiration = noncurrentVersionExpiration;
            return this;
        }

        public Builder setNoncurrentVersionTransitions(@Nullable List<BucketLifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions) {
            this.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }

        public Builder setPrefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTransitions(@Nullable List<BucketLifecycleRuleTransition> transitions) {
            this.transitions = transitions;
            return this;
        }
        public BucketLifecycleRule build() {
            return new BucketLifecycleRule(abortIncompleteMultipartUploadDays, enabled, expiration, id, noncurrentVersionExpiration, noncurrentVersionTransitions, prefix, tags, transitions);
        }
    }
}
