// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventApiDestinationState extends io.pulumi.resources.ResourceArgs {

    public static final EventApiDestinationState Empty = new EventApiDestinationState();

    /**
     * The Amazon Resource Name (ARN) of the event API Destination.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * ARN of the EventBridge Connection to use for the API Destination.
     * 
     */
    @InputImport(name="connectionArn")
    private final @Nullable Input<String> connectionArn;

    public Input<String> getConnectionArn() {
        return this.connectionArn == null ? Input.empty() : this.connectionArn;
    }

    /**
     * The description of the new API Destination. Maximum of 512 characters.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Select the HTTP method used for the invocation endpoint, such as GET, POST, PUT, etc.
     * 
     */
    @InputImport(name="httpMethod")
    private final @Nullable Input<String> httpMethod;

    public Input<String> getHttpMethod() {
        return this.httpMethod == null ? Input.empty() : this.httpMethod;
    }

    /**
     * URL endpoint to invoke as a target. This could be a valid endpoint generated by a partner service. You can include "*" as path parameters wildcards to be set from the Target HttpParameters.
     * 
     */
    @InputImport(name="invocationEndpoint")
    private final @Nullable Input<String> invocationEndpoint;

    public Input<String> getInvocationEndpoint() {
        return this.invocationEndpoint == null ? Input.empty() : this.invocationEndpoint;
    }

    /**
     * Enter the maximum number of invocations per second to allow for this destination. Enter a value greater than 0 (default 300).
     * 
     */
    @InputImport(name="invocationRateLimitPerSecond")
    private final @Nullable Input<Integer> invocationRateLimitPerSecond;

    public Input<Integer> getInvocationRateLimitPerSecond() {
        return this.invocationRateLimitPerSecond == null ? Input.empty() : this.invocationRateLimitPerSecond;
    }

    /**
     * The name of the new API Destination. The name must be unique for your account. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    public EventApiDestinationState(
        @Nullable Input<String> arn,
        @Nullable Input<String> connectionArn,
        @Nullable Input<String> description,
        @Nullable Input<String> httpMethod,
        @Nullable Input<String> invocationEndpoint,
        @Nullable Input<Integer> invocationRateLimitPerSecond,
        @Nullable Input<String> name) {
        this.arn = arn;
        this.connectionArn = connectionArn;
        this.description = description;
        this.httpMethod = httpMethod;
        this.invocationEndpoint = invocationEndpoint;
        this.invocationRateLimitPerSecond = invocationRateLimitPerSecond;
        this.name = name;
    }

    private EventApiDestinationState() {
        this.arn = Input.empty();
        this.connectionArn = Input.empty();
        this.description = Input.empty();
        this.httpMethod = Input.empty();
        this.invocationEndpoint = Input.empty();
        this.invocationRateLimitPerSecond = Input.empty();
        this.name = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventApiDestinationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> connectionArn;
        private @Nullable Input<String> description;
        private @Nullable Input<String> httpMethod;
        private @Nullable Input<String> invocationEndpoint;
        private @Nullable Input<Integer> invocationRateLimitPerSecond;
        private @Nullable Input<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(EventApiDestinationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.connectionArn = defaults.connectionArn;
    	      this.description = defaults.description;
    	      this.httpMethod = defaults.httpMethod;
    	      this.invocationEndpoint = defaults.invocationEndpoint;
    	      this.invocationRateLimitPerSecond = defaults.invocationRateLimitPerSecond;
    	      this.name = defaults.name;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setConnectionArn(@Nullable Input<String> connectionArn) {
            this.connectionArn = connectionArn;
            return this;
        }

        public Builder setConnectionArn(@Nullable String connectionArn) {
            this.connectionArn = Input.ofNullable(connectionArn);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setHttpMethod(@Nullable Input<String> httpMethod) {
            this.httpMethod = httpMethod;
            return this;
        }

        public Builder setHttpMethod(@Nullable String httpMethod) {
            this.httpMethod = Input.ofNullable(httpMethod);
            return this;
        }

        public Builder setInvocationEndpoint(@Nullable Input<String> invocationEndpoint) {
            this.invocationEndpoint = invocationEndpoint;
            return this;
        }

        public Builder setInvocationEndpoint(@Nullable String invocationEndpoint) {
            this.invocationEndpoint = Input.ofNullable(invocationEndpoint);
            return this;
        }

        public Builder setInvocationRateLimitPerSecond(@Nullable Input<Integer> invocationRateLimitPerSecond) {
            this.invocationRateLimitPerSecond = invocationRateLimitPerSecond;
            return this;
        }

        public Builder setInvocationRateLimitPerSecond(@Nullable Integer invocationRateLimitPerSecond) {
            this.invocationRateLimitPerSecond = Input.ofNullable(invocationRateLimitPerSecond);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }
        public EventApiDestinationState build() {
            return new EventApiDestinationState(arn, connectionArn, description, httpMethod, invocationEndpoint, invocationRateLimitPerSecond, name);
        }
    }
}
