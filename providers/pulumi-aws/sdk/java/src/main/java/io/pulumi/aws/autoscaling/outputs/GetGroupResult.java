// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.autoscaling.outputs;

import io.pulumi.aws.autoscaling.outputs.GetGroupLaunchTemplate;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@OutputCustomType
public final class GetGroupResult {
    /**
     * The Amazon Resource Name (ARN) of the Auto Scaling group.
     * 
     */
    private final String arn;
    /**
     * One or more Availability Zones for the group.
     * 
     */
    private final List<String> availabilityZones;
    private final Integer defaultCooldown;
    /**
     * The desired size of the group.
     * 
     */
    private final Integer desiredCapacity;
    /**
     * The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service.
     * 
     */
    private final Integer healthCheckGracePeriod;
    /**
     * The service to use for the health checks. The valid values are EC2 and ELB.
     * 
     */
    private final String healthCheckType;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * The name of the associated launch configuration.
     * 
     */
    private final String launchConfiguration;
    private final List<GetGroupLaunchTemplate> launchTemplates;
    /**
     * One or more load balancers associated with the group.
     * 
     */
    private final List<String> loadBalancers;
    /**
     * The maximum size of the group.
     * 
     */
    private final Integer maxSize;
    /**
     * The minimum size of the group.
     * 
     */
    private final Integer minSize;
    /**
     * Name of the Auto Scaling Group.
     * 
     */
    private final String name;
    private final Boolean newInstancesProtectedFromScaleIn;
    /**
     * The name of the placement group into which to launch your instances, if any. For more information, see Placement Groups (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon Elastic Compute Cloud User Guide.
     * 
     */
    private final String placementGroup;
    /**
     * The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf.
     * 
     */
    private final String serviceLinkedRoleArn;
    /**
     * The current state of the group when DeleteAutoScalingGroup is in progress.
     * 
     */
    private final String status;
    /**
     * The Amazon Resource Names (ARN) of the target groups for your load balancer.
     * 
     */
    private final List<String> targetGroupArns;
    /**
     * The termination policies for the group.
     * 
     */
    private final List<String> terminationPolicies;
    /**
     * VPC ID for the group.
     * 
     */
    private final String vpcZoneIdentifier;

    @OutputCustomType.Constructor({"arn","availabilityZones","defaultCooldown","desiredCapacity","healthCheckGracePeriod","healthCheckType","id","launchConfiguration","launchTemplates","loadBalancers","maxSize","minSize","name","newInstancesProtectedFromScaleIn","placementGroup","serviceLinkedRoleArn","status","targetGroupArns","terminationPolicies","vpcZoneIdentifier"})
    private GetGroupResult(
        String arn,
        List<String> availabilityZones,
        Integer defaultCooldown,
        Integer desiredCapacity,
        Integer healthCheckGracePeriod,
        String healthCheckType,
        String id,
        String launchConfiguration,
        List<GetGroupLaunchTemplate> launchTemplates,
        List<String> loadBalancers,
        Integer maxSize,
        Integer minSize,
        String name,
        Boolean newInstancesProtectedFromScaleIn,
        String placementGroup,
        String serviceLinkedRoleArn,
        String status,
        List<String> targetGroupArns,
        List<String> terminationPolicies,
        String vpcZoneIdentifier) {
        this.arn = Objects.requireNonNull(arn);
        this.availabilityZones = Objects.requireNonNull(availabilityZones);
        this.defaultCooldown = Objects.requireNonNull(defaultCooldown);
        this.desiredCapacity = Objects.requireNonNull(desiredCapacity);
        this.healthCheckGracePeriod = Objects.requireNonNull(healthCheckGracePeriod);
        this.healthCheckType = Objects.requireNonNull(healthCheckType);
        this.id = Objects.requireNonNull(id);
        this.launchConfiguration = Objects.requireNonNull(launchConfiguration);
        this.launchTemplates = Objects.requireNonNull(launchTemplates);
        this.loadBalancers = Objects.requireNonNull(loadBalancers);
        this.maxSize = Objects.requireNonNull(maxSize);
        this.minSize = Objects.requireNonNull(minSize);
        this.name = Objects.requireNonNull(name);
        this.newInstancesProtectedFromScaleIn = Objects.requireNonNull(newInstancesProtectedFromScaleIn);
        this.placementGroup = Objects.requireNonNull(placementGroup);
        this.serviceLinkedRoleArn = Objects.requireNonNull(serviceLinkedRoleArn);
        this.status = Objects.requireNonNull(status);
        this.targetGroupArns = Objects.requireNonNull(targetGroupArns);
        this.terminationPolicies = Objects.requireNonNull(terminationPolicies);
        this.vpcZoneIdentifier = Objects.requireNonNull(vpcZoneIdentifier);
    }

    /**
     * The Amazon Resource Name (ARN) of the Auto Scaling group.
     * 
    */
    public String getArn() {
        return this.arn;
    }
    /**
     * One or more Availability Zones for the group.
     * 
    */
    public List<String> getAvailabilityZones() {
        return this.availabilityZones;
    }
    public Integer getDefaultCooldown() {
        return this.defaultCooldown;
    }
    /**
     * The desired size of the group.
     * 
    */
    public Integer getDesiredCapacity() {
        return this.desiredCapacity;
    }
    /**
     * The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service.
     * 
    */
    public Integer getHealthCheckGracePeriod() {
        return this.healthCheckGracePeriod;
    }
    /**
     * The service to use for the health checks. The valid values are EC2 and ELB.
     * 
    */
    public String getHealthCheckType() {
        return this.healthCheckType;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * The name of the associated launch configuration.
     * 
    */
    public String getLaunchConfiguration() {
        return this.launchConfiguration;
    }
    public List<GetGroupLaunchTemplate> getLaunchTemplates() {
        return this.launchTemplates;
    }
    /**
     * One or more load balancers associated with the group.
     * 
    */
    public List<String> getLoadBalancers() {
        return this.loadBalancers;
    }
    /**
     * The maximum size of the group.
     * 
    */
    public Integer getMaxSize() {
        return this.maxSize;
    }
    /**
     * The minimum size of the group.
     * 
    */
    public Integer getMinSize() {
        return this.minSize;
    }
    /**
     * Name of the Auto Scaling Group.
     * 
    */
    public String getName() {
        return this.name;
    }
    public Boolean getNewInstancesProtectedFromScaleIn() {
        return this.newInstancesProtectedFromScaleIn;
    }
    /**
     * The name of the placement group into which to launch your instances, if any. For more information, see Placement Groups (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon Elastic Compute Cloud User Guide.
     * 
    */
    public String getPlacementGroup() {
        return this.placementGroup;
    }
    /**
     * The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf.
     * 
    */
    public String getServiceLinkedRoleArn() {
        return this.serviceLinkedRoleArn;
    }
    /**
     * The current state of the group when DeleteAutoScalingGroup is in progress.
     * 
    */
    public String getStatus() {
        return this.status;
    }
    /**
     * The Amazon Resource Names (ARN) of the target groups for your load balancer.
     * 
    */
    public List<String> getTargetGroupArns() {
        return this.targetGroupArns;
    }
    /**
     * The termination policies for the group.
     * 
    */
    public List<String> getTerminationPolicies() {
        return this.terminationPolicies;
    }
    /**
     * VPC ID for the group.
     * 
    */
    public String getVpcZoneIdentifier() {
        return this.vpcZoneIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String arn;
        private List<String> availabilityZones;
        private Integer defaultCooldown;
        private Integer desiredCapacity;
        private Integer healthCheckGracePeriod;
        private String healthCheckType;
        private String id;
        private String launchConfiguration;
        private List<GetGroupLaunchTemplate> launchTemplates;
        private List<String> loadBalancers;
        private Integer maxSize;
        private Integer minSize;
        private String name;
        private Boolean newInstancesProtectedFromScaleIn;
        private String placementGroup;
        private String serviceLinkedRoleArn;
        private String status;
        private List<String> targetGroupArns;
        private List<String> terminationPolicies;
        private String vpcZoneIdentifier;

        public Builder() {
    	      // Empty
        }

        public Builder(GetGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.defaultCooldown = defaults.defaultCooldown;
    	      this.desiredCapacity = defaults.desiredCapacity;
    	      this.healthCheckGracePeriod = defaults.healthCheckGracePeriod;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.id = defaults.id;
    	      this.launchConfiguration = defaults.launchConfiguration;
    	      this.launchTemplates = defaults.launchTemplates;
    	      this.loadBalancers = defaults.loadBalancers;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.name = defaults.name;
    	      this.newInstancesProtectedFromScaleIn = defaults.newInstancesProtectedFromScaleIn;
    	      this.placementGroup = defaults.placementGroup;
    	      this.serviceLinkedRoleArn = defaults.serviceLinkedRoleArn;
    	      this.status = defaults.status;
    	      this.targetGroupArns = defaults.targetGroupArns;
    	      this.terminationPolicies = defaults.terminationPolicies;
    	      this.vpcZoneIdentifier = defaults.vpcZoneIdentifier;
        }

        public Builder setArn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }

        public Builder setAvailabilityZones(List<String> availabilityZones) {
            this.availabilityZones = Objects.requireNonNull(availabilityZones);
            return this;
        }

        public Builder setDefaultCooldown(Integer defaultCooldown) {
            this.defaultCooldown = Objects.requireNonNull(defaultCooldown);
            return this;
        }

        public Builder setDesiredCapacity(Integer desiredCapacity) {
            this.desiredCapacity = Objects.requireNonNull(desiredCapacity);
            return this;
        }

        public Builder setHealthCheckGracePeriod(Integer healthCheckGracePeriod) {
            this.healthCheckGracePeriod = Objects.requireNonNull(healthCheckGracePeriod);
            return this;
        }

        public Builder setHealthCheckType(String healthCheckType) {
            this.healthCheckType = Objects.requireNonNull(healthCheckType);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setLaunchConfiguration(String launchConfiguration) {
            this.launchConfiguration = Objects.requireNonNull(launchConfiguration);
            return this;
        }

        public Builder setLaunchTemplates(List<GetGroupLaunchTemplate> launchTemplates) {
            this.launchTemplates = Objects.requireNonNull(launchTemplates);
            return this;
        }

        public Builder setLoadBalancers(List<String> loadBalancers) {
            this.loadBalancers = Objects.requireNonNull(loadBalancers);
            return this;
        }

        public Builder setMaxSize(Integer maxSize) {
            this.maxSize = Objects.requireNonNull(maxSize);
            return this;
        }

        public Builder setMinSize(Integer minSize) {
            this.minSize = Objects.requireNonNull(minSize);
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setNewInstancesProtectedFromScaleIn(Boolean newInstancesProtectedFromScaleIn) {
            this.newInstancesProtectedFromScaleIn = Objects.requireNonNull(newInstancesProtectedFromScaleIn);
            return this;
        }

        public Builder setPlacementGroup(String placementGroup) {
            this.placementGroup = Objects.requireNonNull(placementGroup);
            return this;
        }

        public Builder setServiceLinkedRoleArn(String serviceLinkedRoleArn) {
            this.serviceLinkedRoleArn = Objects.requireNonNull(serviceLinkedRoleArn);
            return this;
        }

        public Builder setStatus(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }

        public Builder setTargetGroupArns(List<String> targetGroupArns) {
            this.targetGroupArns = Objects.requireNonNull(targetGroupArns);
            return this;
        }

        public Builder setTerminationPolicies(List<String> terminationPolicies) {
            this.terminationPolicies = Objects.requireNonNull(terminationPolicies);
            return this;
        }

        public Builder setVpcZoneIdentifier(String vpcZoneIdentifier) {
            this.vpcZoneIdentifier = Objects.requireNonNull(vpcZoneIdentifier);
            return this;
        }
        public GetGroupResult build() {
            return new GetGroupResult(arn, availabilityZones, defaultCooldown, desiredCapacity, healthCheckGracePeriod, healthCheckType, id, launchConfiguration, launchTemplates, loadBalancers, maxSize, minSize, name, newInstancesProtectedFromScaleIn, placementGroup, serviceLinkedRoleArn, status, targetGroupArns, terminationPolicies, vpcZoneIdentifier);
        }
    }
}
