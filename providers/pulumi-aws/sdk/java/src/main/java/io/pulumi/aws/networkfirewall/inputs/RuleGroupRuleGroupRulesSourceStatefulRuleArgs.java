// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.networkfirewall.inputs;

import io.pulumi.aws.networkfirewall.inputs.RuleGroupRuleGroupRulesSourceStatefulRuleHeaderArgs;
import io.pulumi.aws.networkfirewall.inputs.RuleGroupRuleGroupRulesSourceStatefulRuleRuleOptionArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RuleGroupRuleGroupRulesSourceStatefulRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final RuleGroupRuleGroupRulesSourceStatefulRuleArgs Empty = new RuleGroupRuleGroupRulesSourceStatefulRuleArgs();

    /**
     * Action to take with packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, AWS Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. Valid values: `ALERT`, `DROP` or `PASS`.
     * 
     */
    @InputImport(name="action", required=true)
      private final Input<String> action;

    public Input<String> getAction() {
        return this.action;
    }

    /**
     * A configuration block containing the stateful 5-tuple inspection criteria for the rule, used to inspect traffic flows. See Header below for details.
     * 
     */
    @InputImport(name="header", required=true)
      private final Input<RuleGroupRuleGroupRulesSourceStatefulRuleHeaderArgs> header;

    public Input<RuleGroupRuleGroupRulesSourceStatefulRuleHeaderArgs> getHeader() {
        return this.header;
    }

    /**
     * Set of configuration blocks containing additional settings for a stateful rule. See Rule Option below for details.
     * 
     */
    @InputImport(name="ruleOptions", required=true)
      private final Input<List<RuleGroupRuleGroupRulesSourceStatefulRuleRuleOptionArgs>> ruleOptions;

    public Input<List<RuleGroupRuleGroupRulesSourceStatefulRuleRuleOptionArgs>> getRuleOptions() {
        return this.ruleOptions;
    }

    public RuleGroupRuleGroupRulesSourceStatefulRuleArgs(
        Input<String> action,
        Input<RuleGroupRuleGroupRulesSourceStatefulRuleHeaderArgs> header,
        Input<List<RuleGroupRuleGroupRulesSourceStatefulRuleRuleOptionArgs>> ruleOptions) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.header = Objects.requireNonNull(header, "expected parameter 'header' to be non-null");
        this.ruleOptions = Objects.requireNonNull(ruleOptions, "expected parameter 'ruleOptions' to be non-null");
    }

    private RuleGroupRuleGroupRulesSourceStatefulRuleArgs() {
        this.action = Input.empty();
        this.header = Input.empty();
        this.ruleOptions = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleGroupRuleGroupRulesSourceStatefulRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> action;
        private Input<RuleGroupRuleGroupRulesSourceStatefulRuleHeaderArgs> header;
        private Input<List<RuleGroupRuleGroupRulesSourceStatefulRuleRuleOptionArgs>> ruleOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleGroupRuleGroupRulesSourceStatefulRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.header = defaults.header;
    	      this.ruleOptions = defaults.ruleOptions;
        }

        public Builder setAction(Input<String> action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }

        public Builder setAction(String action) {
            this.action = Input.of(Objects.requireNonNull(action));
            return this;
        }

        public Builder setHeader(Input<RuleGroupRuleGroupRulesSourceStatefulRuleHeaderArgs> header) {
            this.header = Objects.requireNonNull(header);
            return this;
        }

        public Builder setHeader(RuleGroupRuleGroupRulesSourceStatefulRuleHeaderArgs header) {
            this.header = Input.of(Objects.requireNonNull(header));
            return this;
        }

        public Builder setRuleOptions(Input<List<RuleGroupRuleGroupRulesSourceStatefulRuleRuleOptionArgs>> ruleOptions) {
            this.ruleOptions = Objects.requireNonNull(ruleOptions);
            return this;
        }

        public Builder setRuleOptions(List<RuleGroupRuleGroupRulesSourceStatefulRuleRuleOptionArgs> ruleOptions) {
            this.ruleOptions = Input.of(Objects.requireNonNull(ruleOptions));
            return this;
        }
        public RuleGroupRuleGroupRulesSourceStatefulRuleArgs build() {
            return new RuleGroupRuleGroupRulesSourceStatefulRuleArgs(action, header, ruleOptions);
        }
    }
}
