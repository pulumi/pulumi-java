// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesis.outputs;

import io.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsKinesisFirehose;
import io.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsKinesisStream;
import io.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsParallelism;
import io.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsProcessingConfiguration;
import io.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsSchema;
import io.pulumi.aws.kinesis.outputs.AnalyticsApplicationInputsStartingPositionConfiguration;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class AnalyticsApplicationInputs {
    /**
     * The ARN of the Kinesis Analytics Application.
     * 
     */
    private final @Nullable String id;
    /**
     * The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesis_stream`.
     * See Kinesis Firehose below for more details.
     * 
     */
    private final @Nullable AnalyticsApplicationInputsKinesisFirehose kinesisFirehose;
    /**
     * The Kinesis Stream configuration for the streaming source. Conflicts with `kinesis_firehose`.
     * See Kinesis Stream below for more details.
     * 
     */
    private final @Nullable AnalyticsApplicationInputsKinesisStream kinesisStream;
    /**
     * The Name Prefix to use when creating an in-application stream.
     * 
     */
    private final String namePrefix;
    /**
     * The number of Parallel in-application streams to create.
     * See Parallelism below for more details.
     * 
     */
    private final @Nullable AnalyticsApplicationInputsParallelism parallelism;
    /**
     * The Processing Configuration to transform records as they are received from the stream.
     * See Processing Configuration below for more details.
     * 
     */
    private final @Nullable AnalyticsApplicationInputsProcessingConfiguration processingConfiguration;
    /**
     * The Schema format of the data in the streaming source. See Source Schema below for more details.
     * 
     */
    private final AnalyticsApplicationInputsSchema schema;
    /**
     * The point at which the application starts processing records from the streaming source.
     * See Starting Position Configuration below for more details.
     * 
     */
    private final @Nullable List<AnalyticsApplicationInputsStartingPositionConfiguration> startingPositionConfigurations;
    private final @Nullable List<String> streamNames;

    @OutputCustomType.Constructor({"id","kinesisFirehose","kinesisStream","namePrefix","parallelism","processingConfiguration","schema","startingPositionConfigurations","streamNames"})
    private AnalyticsApplicationInputs(
        @Nullable String id,
        @Nullable AnalyticsApplicationInputsKinesisFirehose kinesisFirehose,
        @Nullable AnalyticsApplicationInputsKinesisStream kinesisStream,
        String namePrefix,
        @Nullable AnalyticsApplicationInputsParallelism parallelism,
        @Nullable AnalyticsApplicationInputsProcessingConfiguration processingConfiguration,
        AnalyticsApplicationInputsSchema schema,
        @Nullable List<AnalyticsApplicationInputsStartingPositionConfiguration> startingPositionConfigurations,
        @Nullable List<String> streamNames) {
        this.id = id;
        this.kinesisFirehose = kinesisFirehose;
        this.kinesisStream = kinesisStream;
        this.namePrefix = Objects.requireNonNull(namePrefix);
        this.parallelism = parallelism;
        this.processingConfiguration = processingConfiguration;
        this.schema = Objects.requireNonNull(schema);
        this.startingPositionConfigurations = startingPositionConfigurations;
        this.streamNames = streamNames;
    }

    /**
     * The ARN of the Kinesis Analytics Application.
     * 
     */
    public Optional<String> getId() {
        return Optional.ofNullable(this.id);
    }
    /**
     * The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesis_stream`.
     * See Kinesis Firehose below for more details.
     * 
     */
    public Optional<AnalyticsApplicationInputsKinesisFirehose> getKinesisFirehose() {
        return Optional.ofNullable(this.kinesisFirehose);
    }
    /**
     * The Kinesis Stream configuration for the streaming source. Conflicts with `kinesis_firehose`.
     * See Kinesis Stream below for more details.
     * 
     */
    public Optional<AnalyticsApplicationInputsKinesisStream> getKinesisStream() {
        return Optional.ofNullable(this.kinesisStream);
    }
    /**
     * The Name Prefix to use when creating an in-application stream.
     * 
     */
    public String getNamePrefix() {
        return this.namePrefix;
    }
    /**
     * The number of Parallel in-application streams to create.
     * See Parallelism below for more details.
     * 
     */
    public Optional<AnalyticsApplicationInputsParallelism> getParallelism() {
        return Optional.ofNullable(this.parallelism);
    }
    /**
     * The Processing Configuration to transform records as they are received from the stream.
     * See Processing Configuration below for more details.
     * 
     */
    public Optional<AnalyticsApplicationInputsProcessingConfiguration> getProcessingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }
    /**
     * The Schema format of the data in the streaming source. See Source Schema below for more details.
     * 
     */
    public AnalyticsApplicationInputsSchema getSchema() {
        return this.schema;
    }
    /**
     * The point at which the application starts processing records from the streaming source.
     * See Starting Position Configuration below for more details.
     * 
     */
    public List<AnalyticsApplicationInputsStartingPositionConfiguration> getStartingPositionConfigurations() {
        return this.startingPositionConfigurations == null ? List.of() : this.startingPositionConfigurations;
    }
    public List<String> getStreamNames() {
        return this.streamNames == null ? List.of() : this.streamNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyticsApplicationInputs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String id;
        private @Nullable AnalyticsApplicationInputsKinesisFirehose kinesisFirehose;
        private @Nullable AnalyticsApplicationInputsKinesisStream kinesisStream;
        private String namePrefix;
        private @Nullable AnalyticsApplicationInputsParallelism parallelism;
        private @Nullable AnalyticsApplicationInputsProcessingConfiguration processingConfiguration;
        private AnalyticsApplicationInputsSchema schema;
        private @Nullable List<AnalyticsApplicationInputsStartingPositionConfiguration> startingPositionConfigurations;
        private @Nullable List<String> streamNames;

        public Builder() {
    	      // Empty
        }

        public Builder(AnalyticsApplicationInputs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.kinesisFirehose = defaults.kinesisFirehose;
    	      this.kinesisStream = defaults.kinesisStream;
    	      this.namePrefix = defaults.namePrefix;
    	      this.parallelism = defaults.parallelism;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.schema = defaults.schema;
    	      this.startingPositionConfigurations = defaults.startingPositionConfigurations;
    	      this.streamNames = defaults.streamNames;
        }

        public Builder setId(@Nullable String id) {
            this.id = id;
            return this;
        }

        public Builder setKinesisFirehose(@Nullable AnalyticsApplicationInputsKinesisFirehose kinesisFirehose) {
            this.kinesisFirehose = kinesisFirehose;
            return this;
        }

        public Builder setKinesisStream(@Nullable AnalyticsApplicationInputsKinesisStream kinesisStream) {
            this.kinesisStream = kinesisStream;
            return this;
        }

        public Builder setNamePrefix(String namePrefix) {
            this.namePrefix = Objects.requireNonNull(namePrefix);
            return this;
        }

        public Builder setParallelism(@Nullable AnalyticsApplicationInputsParallelism parallelism) {
            this.parallelism = parallelism;
            return this;
        }

        public Builder setProcessingConfiguration(@Nullable AnalyticsApplicationInputsProcessingConfiguration processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }

        public Builder setSchema(AnalyticsApplicationInputsSchema schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }

        public Builder setStartingPositionConfigurations(@Nullable List<AnalyticsApplicationInputsStartingPositionConfiguration> startingPositionConfigurations) {
            this.startingPositionConfigurations = startingPositionConfigurations;
            return this;
        }

        public Builder setStreamNames(@Nullable List<String> streamNames) {
            this.streamNames = streamNames;
            return this;
        }
        public AnalyticsApplicationInputs build() {
            return new AnalyticsApplicationInputs(id, kinesisFirehose, kinesisStream, namePrefix, parallelism, processingConfiguration, schema, startingPositionConfigurations, streamNames);
        }
    }
}
