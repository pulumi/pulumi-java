// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudsearch.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainIndexFieldArgs extends io.pulumi.resources.ResourceArgs {

    public static final DomainIndexFieldArgs Empty = new DomainIndexFieldArgs();

    /**
     * The analysis scheme you want to use for a `text` field. The analysis scheme specifies the language-specific text processing options that are used during indexing.
     * 
     */
    @InputImport(name="analysisScheme")
      private final @Nullable Input<String> analysisScheme;

    public Input<String> getAnalysisScheme() {
        return this.analysisScheme == null ? Input.empty() : this.analysisScheme;
    }

    /**
     * The default value for the field. This value is used when no value is specified for the field in the document data.
     * 
     */
    @InputImport(name="defaultValue")
      private final @Nullable Input<String> defaultValue;

    public Input<String> getDefaultValue() {
        return this.defaultValue == null ? Input.empty() : this.defaultValue;
    }

    /**
     * You can get facet information by enabling this.
     * 
     */
    @InputImport(name="facet")
      private final @Nullable Input<Boolean> facet;

    public Input<Boolean> getFacet() {
        return this.facet == null ? Input.empty() : this.facet;
    }

    /**
     * You can highlight information.
     * 
     */
    @InputImport(name="highlight")
      private final @Nullable Input<Boolean> highlight;

    public Input<Boolean> getHighlight() {
        return this.highlight == null ? Input.empty() : this.highlight;
    }

    /**
     * A unique name for the field. Field names must begin with a letter and be at least 3 and no more than 64 characters long. The allowed characters are: `a`-`z` (lower-case letters), `0`-`9`, and `_` (underscore). The name `score` is reserved and cannot be used as a field name.
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * You can enable returning the value of all searchable fields.
     * 
     */
    @InputImport(name="return")
      private final @Nullable Input<Boolean> $return;

    public Input<Boolean> get$return() {
        return this.$return == null ? Input.empty() : this.$return;
    }

    /**
     * You can set whether this index should be searchable or not.
     * 
     */
    @InputImport(name="search")
      private final @Nullable Input<Boolean> search;

    public Input<Boolean> getSearch() {
        return this.search == null ? Input.empty() : this.search;
    }

    /**
     * You can enable the property to be sortable.
     * 
     */
    @InputImport(name="sort")
      private final @Nullable Input<Boolean> sort;

    public Input<Boolean> getSort() {
        return this.sort == null ? Input.empty() : this.sort;
    }

    /**
     * The field type. Valid values: `date`, `date-array`, `double`, `double-array`, `int`, `int-array`, `literal`, `literal-array`, `text`, `text-array`.
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    public DomainIndexFieldArgs(
        @Nullable Input<String> analysisScheme,
        @Nullable Input<String> defaultValue,
        @Nullable Input<Boolean> facet,
        @Nullable Input<Boolean> highlight,
        Input<String> name,
        @Nullable Input<Boolean> $return,
        @Nullable Input<Boolean> search,
        @Nullable Input<Boolean> sort,
        Input<String> type) {
        this.analysisScheme = analysisScheme;
        this.defaultValue = defaultValue;
        this.facet = facet;
        this.highlight = highlight;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.$return = $return;
        this.search = search;
        this.sort = sort;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private DomainIndexFieldArgs() {
        this.analysisScheme = Input.empty();
        this.defaultValue = Input.empty();
        this.facet = Input.empty();
        this.highlight = Input.empty();
        this.name = Input.empty();
        this.$return = Input.empty();
        this.search = Input.empty();
        this.sort = Input.empty();
        this.type = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainIndexFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> analysisScheme;
        private @Nullable Input<String> defaultValue;
        private @Nullable Input<Boolean> facet;
        private @Nullable Input<Boolean> highlight;
        private Input<String> name;
        private @Nullable Input<Boolean> $return;
        private @Nullable Input<Boolean> search;
        private @Nullable Input<Boolean> sort;
        private Input<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainIndexFieldArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analysisScheme = defaults.analysisScheme;
    	      this.defaultValue = defaults.defaultValue;
    	      this.facet = defaults.facet;
    	      this.highlight = defaults.highlight;
    	      this.name = defaults.name;
    	      this.$return = defaults.$return;
    	      this.search = defaults.search;
    	      this.sort = defaults.sort;
    	      this.type = defaults.type;
        }

        public Builder analysisScheme(@Nullable Input<String> analysisScheme) {
            this.analysisScheme = analysisScheme;
            return this;
        }

        public Builder analysisScheme(@Nullable String analysisScheme) {
            this.analysisScheme = Input.ofNullable(analysisScheme);
            return this;
        }

        public Builder defaultValue(@Nullable Input<String> defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }

        public Builder defaultValue(@Nullable String defaultValue) {
            this.defaultValue = Input.ofNullable(defaultValue);
            return this;
        }

        public Builder facet(@Nullable Input<Boolean> facet) {
            this.facet = facet;
            return this;
        }

        public Builder facet(@Nullable Boolean facet) {
            this.facet = Input.ofNullable(facet);
            return this;
        }

        public Builder highlight(@Nullable Input<Boolean> highlight) {
            this.highlight = highlight;
            return this;
        }

        public Builder highlight(@Nullable Boolean highlight) {
            this.highlight = Input.ofNullable(highlight);
            return this;
        }

        public Builder name(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder $return(@Nullable Input<Boolean> $return) {
            this.$return = $return;
            return this;
        }

        public Builder $return(@Nullable Boolean $return) {
            this.$return = Input.ofNullable($return);
            return this;
        }

        public Builder search(@Nullable Input<Boolean> search) {
            this.search = search;
            return this;
        }

        public Builder search(@Nullable Boolean search) {
            this.search = Input.ofNullable(search);
            return this;
        }

        public Builder sort(@Nullable Input<Boolean> sort) {
            this.sort = sort;
            return this;
        }

        public Builder sort(@Nullable Boolean sort) {
            this.sort = Input.ofNullable(sort);
            return this;
        }

        public Builder type(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }
        public DomainIndexFieldArgs build() {
            return new DomainIndexFieldArgs(analysisScheme, defaultValue, facet, highlight, name, $return, search, sort, type);
        }
    }
}
