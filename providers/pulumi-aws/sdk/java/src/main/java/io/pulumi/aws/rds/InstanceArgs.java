// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds;

import io.pulumi.aws.rds.enums.InstanceType;
import io.pulumi.aws.rds.enums.StorageType;
import io.pulumi.aws.rds.inputs.InstanceRestoreToPointInTimeArgs;
import io.pulumi.aws.rds.inputs.InstanceS3ImportArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The allocated storage in gibibytes. If `max_allocated_storage` is configured, this argument represents the initial storage allocation and differences from the configuration will be ignored automatically when Storage Autoscaling occurs. If `replicate_source_db` is set, the value is ignored during the creation of the instance.
     * 
     */
    @InputImport(name="allocatedStorage")
      private final @Nullable Output<Integer> allocatedStorage;

    public Output<Integer> getAllocatedStorage() {
        return this.allocatedStorage == null ? Output.empty() : this.allocatedStorage;
    }

    /**
     * Indicates that major version
     * upgrades are allowed. Changing this parameter does not result in an outage and
     * the change is asynchronously applied as soon as possible.
     * 
     */
    @InputImport(name="allowMajorVersionUpgrade")
      private final @Nullable Output<Boolean> allowMajorVersionUpgrade;

    public Output<Boolean> getAllowMajorVersionUpgrade() {
        return this.allowMajorVersionUpgrade == null ? Output.empty() : this.allowMajorVersionUpgrade;
    }

    /**
     * Specifies whether any database modifications
     * are applied immediately, or during the next maintenance window. Default is
     * `false`. See [Amazon RDS Documentation for more
     * information.](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html)
     * 
     */
    @InputImport(name="applyImmediately")
      private final @Nullable Output<Boolean> applyImmediately;

    public Output<Boolean> getApplyImmediately() {
        return this.applyImmediately == null ? Output.empty() : this.applyImmediately;
    }

    /**
     * Indicates that minor engine upgrades
     * will be applied automatically to the DB instance during the maintenance window.
     * Defaults to true.
     * 
     */
    @InputImport(name="autoMinorVersionUpgrade")
      private final @Nullable Output<Boolean> autoMinorVersionUpgrade;

    public Output<Boolean> getAutoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade == null ? Output.empty() : this.autoMinorVersionUpgrade;
    }

    /**
     * The AZ for the RDS instance.
     * 
     */
    @InputImport(name="availabilityZone")
      private final @Nullable Output<String> availabilityZone;

    public Output<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Output.empty() : this.availabilityZone;
    }

    /**
     * The days to retain backups for. Must be
     * between `0` and `35`. Must be greater than `0` if the database is used as a source for a Read Replica. [See Read Replica][1].
     * 
     */
    @InputImport(name="backupRetentionPeriod")
      private final @Nullable Output<Integer> backupRetentionPeriod;

    public Output<Integer> getBackupRetentionPeriod() {
        return this.backupRetentionPeriod == null ? Output.empty() : this.backupRetentionPeriod;
    }

    /**
     * The daily time range (in UTC) during which
     * automated backups are created if they are enabled. Example: "09:46-10:16". Must
     * not overlap with `maintenance_window`.
     * 
     */
    @InputImport(name="backupWindow")
      private final @Nullable Output<String> backupWindow;

    public Output<String> getBackupWindow() {
        return this.backupWindow == null ? Output.empty() : this.backupWindow;
    }

    /**
     * The identifier of the CA certificate for the DB instance.
     * 
     */
    @InputImport(name="caCertIdentifier")
      private final @Nullable Output<String> caCertIdentifier;

    public Output<String> getCaCertIdentifier() {
        return this.caCertIdentifier == null ? Output.empty() : this.caCertIdentifier;
    }

    /**
     * The character set name to use for DB
     * encoding in Oracle and Microsoft SQL instances (collation). This can't be changed. See [Oracle Character Sets
     * Supported in Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.OracleCharacterSets.html)
     * or [Server-Level Collation for Microsoft SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.SQLServer.CommonDBATasks.Collation.html) for more information.
     * 
     */
    @InputImport(name="characterSetName")
      private final @Nullable Output<String> characterSetName;

    public Output<String> getCharacterSetName() {
        return this.characterSetName == null ? Output.empty() : this.characterSetName;
    }

    /**
     * Copy all Instance `tags` to snapshots. Default is `false`.
     * 
     */
    @InputImport(name="copyTagsToSnapshot")
      private final @Nullable Output<Boolean> copyTagsToSnapshot;

    public Output<Boolean> getCopyTagsToSnapshot() {
        return this.copyTagsToSnapshot == null ? Output.empty() : this.copyTagsToSnapshot;
    }

    /**
     * Indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. See [CoIP for RDS on Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html#rds-on-outposts.coip) for more information.
     * 
     */
    @InputImport(name="customerOwnedIpEnabled")
      private final @Nullable Output<Boolean> customerOwnedIpEnabled;

    public Output<Boolean> getCustomerOwnedIpEnabled() {
        return this.customerOwnedIpEnabled == null ? Output.empty() : this.customerOwnedIpEnabled;
    }

    /**
     * Name of `DB subnet group`. DB instance will
     * be created in the VPC associated with the DB subnet group. If unspecified, will
     * be created in the `default` VPC, or in EC2 Classic, if available. When working
     * with read replicas, it should be specified only if the source database
     * specifies an instance in another AWS Region. See [DBSubnetGroupName in API
     * action CreateDBInstanceReadReplica](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstanceReadReplica.html)
     * for additional read replica contraints.
     * 
     */
    @InputImport(name="dbSubnetGroupName")
      private final @Nullable Output<String> dbSubnetGroupName;

    public Output<String> getDbSubnetGroupName() {
        return this.dbSubnetGroupName == null ? Output.empty() : this.dbSubnetGroupName;
    }

    /**
     * Specifies whether to remove automated backups immediately after the DB instance is deleted. Default is `true`.
     * 
     */
    @InputImport(name="deleteAutomatedBackups")
      private final @Nullable Output<Boolean> deleteAutomatedBackups;

    public Output<Boolean> getDeleteAutomatedBackups() {
        return this.deleteAutomatedBackups == null ? Output.empty() : this.deleteAutomatedBackups;
    }

    /**
     * If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
     * 
     */
    @InputImport(name="deletionProtection")
      private final @Nullable Output<Boolean> deletionProtection;

    public Output<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Output.empty() : this.deletionProtection;
    }

    /**
     * The ID of the Directory Service Active Directory domain to create the instance in.
     * 
     */
    @InputImport(name="domain")
      private final @Nullable Output<String> domain;

    public Output<String> getDomain() {
        return this.domain == null ? Output.empty() : this.domain;
    }

    /**
     * The name of the IAM role to be used when making API calls to the Directory Service.
     * 
     */
    @InputImport(name="domainIamRoleName")
      private final @Nullable Output<String> domainIamRoleName;

    public Output<String> getDomainIamRoleName() {
        return this.domainIamRoleName == null ? Output.empty() : this.domainIamRoleName;
    }

    /**
     * Set of log types to enable for exporting to CloudWatch logs. If omitted, no logs will be exported. Valid values (depending on `engine`). MySQL and MariaDB: `audit`, `error`, `general`, `slowquery`. PostgreSQL: `postgresql`, `upgrade`. MSSQL: `agent` , `error`. Oracle: `alert`, `audit`, `listener`, `trace`.
     * 
     */
    @InputImport(name="enabledCloudwatchLogsExports")
      private final @Nullable Output<List<String>> enabledCloudwatchLogsExports;

    public Output<List<String>> getEnabledCloudwatchLogsExports() {
        return this.enabledCloudwatchLogsExports == null ? Output.empty() : this.enabledCloudwatchLogsExports;
    }

    /**
     * (Required unless a `snapshot_identifier` or `replicate_source_db`
     * is provided) The database engine to use.  For supported values, see the Engine parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html).
     * Note that for Amazon Aurora instances the engine must match the `DB cluster`'s engine'.
     * For information on the difference between the available Aurora MySQL engines
     * see [Comparison between Aurora MySQL 1 and Aurora MySQL 2](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AuroraMySQL.Updates.20180206.html)
     * in the Amazon RDS User Guide.
     * 
     */
    @InputImport(name="engine")
      private final @Nullable Output<String> engine;

    public Output<String> getEngine() {
        return this.engine == null ? Output.empty() : this.engine;
    }

    /**
     * The engine version to use. If `auto_minor_version_upgrade`
     * is enabled, you can provide a prefix of the version such as `5.7` (for `5.7.10`).
     * The actual engine version used is returned in the attribute `engine_version_actual`, defined below.
     * For supported values, see the EngineVersion parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html).
     * Note that for Amazon Aurora instances the engine version must match the `DB cluster`'s engine version'.
     * 
     */
    @InputImport(name="engineVersion")
      private final @Nullable Output<String> engineVersion;

    public Output<String> getEngineVersion() {
        return this.engineVersion == null ? Output.empty() : this.engineVersion;
    }

    /**
     * The name of your final DB snapshot
     * when this DB instance is deleted. Must be provided if `skip_final_snapshot` is
     * set to `false`. The value must begin with a letter, only contain alphanumeric characters and hyphens, and not end with a hyphen or contain two consecutive hyphens. Must not be provided when deleting a read replica.
     * 
     */
    @InputImport(name="finalSnapshotIdentifier")
      private final @Nullable Output<String> finalSnapshotIdentifier;

    public Output<String> getFinalSnapshotIdentifier() {
        return this.finalSnapshotIdentifier == null ? Output.empty() : this.finalSnapshotIdentifier;
    }

    /**
     * Specifies whether or
     * mappings of AWS Identity and Access Management (IAM) accounts to database
     * accounts is enabled.
     * 
     */
    @InputImport(name="iamDatabaseAuthenticationEnabled")
      private final @Nullable Output<Boolean> iamDatabaseAuthenticationEnabled;

    public Output<Boolean> getIamDatabaseAuthenticationEnabled() {
        return this.iamDatabaseAuthenticationEnabled == null ? Output.empty() : this.iamDatabaseAuthenticationEnabled;
    }

    /**
     * The name of the RDS instance,
     * if omitted, this provider will assign a random, unique identifier.
     * 
     */
    @InputImport(name="identifier")
      private final @Nullable Output<String> identifier;

    public Output<String> getIdentifier() {
        return this.identifier == null ? Output.empty() : this.identifier;
    }

    /**
     * Creates a unique
     * identifier beginning with the specified prefix. Conflicts with `identifier`.
     * 
     */
    @InputImport(name="identifierPrefix")
      private final @Nullable Output<String> identifierPrefix;

    public Output<String> getIdentifierPrefix() {
        return this.identifierPrefix == null ? Output.empty() : this.identifierPrefix;
    }

    /**
     * The instance type of the RDS instance.
     * 
     */
    @InputImport(name="instanceClass", required=true)
      private final Output<Either<String,InstanceType>> instanceClass;

    public Output<Either<String,InstanceType>> getInstanceClass() {
        return this.instanceClass;
    }

    /**
     * The amount of provisioned IOPS. Setting this implies a
     * storage_type of "io1".
     * 
     */
    @InputImport(name="iops")
      private final @Nullable Output<Integer> iops;

    public Output<Integer> getIops() {
        return this.iops == null ? Output.empty() : this.iops;
    }

    /**
     * The ARN for the KMS encryption key. If creating an
     * encrypted replica, set this to the destination KMS ARN.
     * 
     */
    @InputImport(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Output.empty() : this.kmsKeyId;
    }

    /**
     * (Optional, but required for some DB engines, i.e., Oracle
     * SE1) License model information for this DB instance.
     * 
     */
    @InputImport(name="licenseModel")
      private final @Nullable Output<String> licenseModel;

    public Output<String> getLicenseModel() {
        return this.licenseModel == null ? Output.empty() : this.licenseModel;
    }

    /**
     * The window to perform maintenance in.
     * Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00". See [RDS
     * Maintenance Window
     * docs](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow)
     * for more information.
     * 
     */
    @InputImport(name="maintenanceWindow")
      private final @Nullable Output<String> maintenanceWindow;

    public Output<String> getMaintenanceWindow() {
        return this.maintenanceWindow == null ? Output.empty() : this.maintenanceWindow;
    }

    /**
     * When configured, the upper limit to which Amazon RDS can automatically scale the storage of the DB instance. Configuring this will automatically ignore differences to `allocated_storage`. Must be greater than or equal to `allocated_storage` or `0` to disable Storage Autoscaling.
     * 
     */
    @InputImport(name="maxAllocatedStorage")
      private final @Nullable Output<Integer> maxAllocatedStorage;

    public Output<Integer> getMaxAllocatedStorage() {
        return this.maxAllocatedStorage == null ? Output.empty() : this.maxAllocatedStorage;
    }

    /**
     * The interval, in seconds, between points
     * when Enhanced Monitoring metrics are collected for the DB instance. To disable
     * collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid
     * Values: 0, 1, 5, 10, 15, 30, 60.
     * 
     */
    @InputImport(name="monitoringInterval")
      private final @Nullable Output<Integer> monitoringInterval;

    public Output<Integer> getMonitoringInterval() {
        return this.monitoringInterval == null ? Output.empty() : this.monitoringInterval;
    }

    /**
     * The ARN for the IAM role that permits RDS
     * to send enhanced monitoring metrics to CloudWatch Logs. You can find more
     * information on the [AWS
     * Documentation](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html)
     * what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances.
     * 
     */
    @InputImport(name="monitoringRoleArn")
      private final @Nullable Output<String> monitoringRoleArn;

    public Output<String> getMonitoringRoleArn() {
        return this.monitoringRoleArn == null ? Output.empty() : this.monitoringRoleArn;
    }

    /**
     * Specifies if the RDS instance is multi-AZ
     * 
     */
    @InputImport(name="multiAz")
      private final @Nullable Output<Boolean> multiAz;

    public Output<Boolean> getMultiAz() {
        return this.multiAz == null ? Output.empty() : this.multiAz;
    }

    /**
     * The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Note that this does not apply for Oracle or SQL Server engines. See the [AWS documentation](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/create-db-instance.html) for more details on what applies for those engines. If you are providing an Oracle db name, it needs to be in all upper case.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The national character set is used in the NCHAR, NVARCHAR2, and NCLOB data types for Oracle instances. This can't be changed. See [Oracle Character Sets
     * Supported in Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.OracleCharacterSets.html).
     * 
     */
    @InputImport(name="ncharCharacterSetName")
      private final @Nullable Output<String> ncharCharacterSetName;

    public Output<String> getNcharCharacterSetName() {
        return this.ncharCharacterSetName == null ? Output.empty() : this.ncharCharacterSetName;
    }

    /**
     * Name of the DB option group to associate.
     * 
     */
    @InputImport(name="optionGroupName")
      private final @Nullable Output<String> optionGroupName;

    public Output<String> getOptionGroupName() {
        return this.optionGroupName == null ? Output.empty() : this.optionGroupName;
    }

    /**
     * Name of the DB parameter group to
     * associate.
     * 
     */
    @InputImport(name="parameterGroupName")
      private final @Nullable Output<String> parameterGroupName;

    public Output<String> getParameterGroupName() {
        return this.parameterGroupName == null ? Output.empty() : this.parameterGroupName;
    }

    /**
     * (Required unless a `snapshot_identifier` or `replicate_source_db`
     * is provided) Password for the master DB user. Note that this may show up in
     * logs, and it will be stored in the state file.
     * 
     */
    @InputImport(name="password")
      private final @Nullable Output<String> password;

    public Output<String> getPassword() {
        return this.password == null ? Output.empty() : this.password;
    }

    /**
     * Specifies whether Performance Insights are enabled. Defaults to false.
     * 
     */
    @InputImport(name="performanceInsightsEnabled")
      private final @Nullable Output<Boolean> performanceInsightsEnabled;

    public Output<Boolean> getPerformanceInsightsEnabled() {
        return this.performanceInsightsEnabled == null ? Output.empty() : this.performanceInsightsEnabled;
    }

    /**
     * The ARN for the KMS key to encrypt Performance Insights data. When specifying `performance_insights_kms_key_id`, `performance_insights_enabled` needs to be set to true. Once KMS key is set, it can never be changed.
     * 
     */
    @InputImport(name="performanceInsightsKmsKeyId")
      private final @Nullable Output<String> performanceInsightsKmsKeyId;

    public Output<String> getPerformanceInsightsKmsKeyId() {
        return this.performanceInsightsKmsKeyId == null ? Output.empty() : this.performanceInsightsKmsKeyId;
    }

    /**
     * The amount of time in days to retain Performance Insights data. Either 7 (7 days) or 731 (2 years). When specifying `performance_insights_retention_period`, `performance_insights_enabled` needs to be set to true. Defaults to '7'.
     * 
     */
    @InputImport(name="performanceInsightsRetentionPeriod")
      private final @Nullable Output<Integer> performanceInsightsRetentionPeriod;

    public Output<Integer> getPerformanceInsightsRetentionPeriod() {
        return this.performanceInsightsRetentionPeriod == null ? Output.empty() : this.performanceInsightsRetentionPeriod;
    }

    /**
     * The port on which the DB accepts connections.
     * 
     */
    @InputImport(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    /**
     * Bool to control if instance is publicly
     * accessible. Default is `false`.
     * 
     */
    @InputImport(name="publiclyAccessible")
      private final @Nullable Output<Boolean> publiclyAccessible;

    public Output<Boolean> getPubliclyAccessible() {
        return this.publiclyAccessible == null ? Output.empty() : this.publiclyAccessible;
    }

    /**
     * Specifies whether the replica is in either `mounted` or `open-read-only` mode. This attribute
     * is only supported by Oracle instances. Oracle replicas operate in `open-read-only` mode unless otherwise specified. See [Working with Oracle Read Replicas](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html) for more information.
     * 
     */
    @InputImport(name="replicaMode")
      private final @Nullable Output<String> replicaMode;

    public Output<String> getReplicaMode() {
        return this.replicaMode == null ? Output.empty() : this.replicaMode;
    }

    /**
     * Specifies that this resource is a Replicate
     * database, and to use this value as the source database. This correlates to the
     * `identifier` of another Amazon RDS Database to replicate (if replicating within
     * a single region) or ARN of the Amazon RDS Database to replicate (if replicating
     * cross-region). Note that if you are
     * creating a cross-region replica of an encrypted database you will also need to
     * specify a `kms_key_id`. See [DB Instance Replication][1] and [Working with
     * PostgreSQL and MySQL Read Replicas](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html)
     * for more information on using Replication.
     * 
     */
    @InputImport(name="replicateSourceDb")
      private final @Nullable Output<String> replicateSourceDb;

    public Output<String> getReplicateSourceDb() {
        return this.replicateSourceDb == null ? Output.empty() : this.replicateSourceDb;
    }

    /**
     * A configuration block for restoring a DB instance to an arbitrary point in time. Requires the `identifier` argument to be set with the name of the new DB instance to be created. See Restore To Point In Time below for details.
     * 
     */
    @InputImport(name="restoreToPointInTime")
      private final @Nullable Output<InstanceRestoreToPointInTimeArgs> restoreToPointInTime;

    public Output<InstanceRestoreToPointInTimeArgs> getRestoreToPointInTime() {
        return this.restoreToPointInTime == null ? Output.empty() : this.restoreToPointInTime;
    }

    /**
     * Restore from a Percona Xtrabackup in S3.  See [Importing Data into an Amazon RDS MySQL DB Instance](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html)
     * 
     */
    @InputImport(name="s3Import")
      private final @Nullable Output<InstanceS3ImportArgs> s3Import;

    public Output<InstanceS3ImportArgs> getS3Import() {
        return this.s3Import == null ? Output.empty() : this.s3Import;
    }

    /**
     * List of DB Security Groups to
     * associate. Only used for [DB Instances on the _EC2-Classic_
     * Platform](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.html#USER_VPC.FindDefaultVPC).
     * 
     */
    @InputImport(name="securityGroupNames")
      private final @Nullable Output<List<String>> securityGroupNames;

    public Output<List<String>> getSecurityGroupNames() {
        return this.securityGroupNames == null ? Output.empty() : this.securityGroupNames;
    }

    /**
     * Determines whether a final DB snapshot is
     * created before the DB instance is deleted. If true is specified, no DBSnapshot
     * is created. If false is specified, a DB snapshot is created before the DB
     * instance is deleted, using the value from `final_snapshot_identifier`. Default
     * is `false`.
     * 
     */
    @InputImport(name="skipFinalSnapshot")
      private final @Nullable Output<Boolean> skipFinalSnapshot;

    public Output<Boolean> getSkipFinalSnapshot() {
        return this.skipFinalSnapshot == null ? Output.empty() : this.skipFinalSnapshot;
    }

    /**
     * Specifies whether or not to create this
     * database from a snapshot. This correlates to the snapshot ID you'd find in the
     * RDS console, e.g: rds:production-2015-06-26-06-05.
     * 
     */
    @InputImport(name="snapshotIdentifier")
      private final @Nullable Output<String> snapshotIdentifier;

    public Output<String> getSnapshotIdentifier() {
        return this.snapshotIdentifier == null ? Output.empty() : this.snapshotIdentifier;
    }

    /**
     * Specifies whether the DB instance is
     * encrypted. Note that if you are creating a cross-region read replica this field
     * is ignored and you should instead declare `kms_key_id` with a valid ARN. The
     * default is `false` if not specified.
     * 
     */
    @InputImport(name="storageEncrypted")
      private final @Nullable Output<Boolean> storageEncrypted;

    public Output<Boolean> getStorageEncrypted() {
        return this.storageEncrypted == null ? Output.empty() : this.storageEncrypted;
    }

    /**
     * One of "standard" (magnetic), "gp2" (general
     * purpose SSD), or "io1" (provisioned IOPS SSD). The default is "io1" if `iops` is
     * specified, "gp2" if not.
     * 
     */
    @InputImport(name="storageType")
      private final @Nullable Output<Either<String,StorageType>> storageType;

    public Output<Either<String,StorageType>> getStorageType() {
        return this.storageType == null ? Output.empty() : this.storageType;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Time zone of the DB instance. `timezone` is currently
     * only supported by Microsoft SQL Server. The `timezone` can only be set on
     * creation. See [MSSQL User
     * Guide](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone)
     * for more information.
     * 
     */
    @InputImport(name="timezone")
      private final @Nullable Output<String> timezone;

    public Output<String> getTimezone() {
        return this.timezone == null ? Output.empty() : this.timezone;
    }

    /**
     * (Required unless a `snapshot_identifier` or `replicate_source_db`
     * is provided) Username for the master DB user.
     * 
     */
    @InputImport(name="username")
      private final @Nullable Output<String> username;

    public Output<String> getUsername() {
        return this.username == null ? Output.empty() : this.username;
    }

    /**
     * List of VPC security groups to
     * associate.
     * 
     */
    @InputImport(name="vpcSecurityGroupIds")
      private final @Nullable Output<List<String>> vpcSecurityGroupIds;

    public Output<List<String>> getVpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Output.empty() : this.vpcSecurityGroupIds;
    }

    public InstanceArgs(
        @Nullable Output<Integer> allocatedStorage,
        @Nullable Output<Boolean> allowMajorVersionUpgrade,
        @Nullable Output<Boolean> applyImmediately,
        @Nullable Output<Boolean> autoMinorVersionUpgrade,
        @Nullable Output<String> availabilityZone,
        @Nullable Output<Integer> backupRetentionPeriod,
        @Nullable Output<String> backupWindow,
        @Nullable Output<String> caCertIdentifier,
        @Nullable Output<String> characterSetName,
        @Nullable Output<Boolean> copyTagsToSnapshot,
        @Nullable Output<Boolean> customerOwnedIpEnabled,
        @Nullable Output<String> dbSubnetGroupName,
        @Nullable Output<Boolean> deleteAutomatedBackups,
        @Nullable Output<Boolean> deletionProtection,
        @Nullable Output<String> domain,
        @Nullable Output<String> domainIamRoleName,
        @Nullable Output<List<String>> enabledCloudwatchLogsExports,
        @Nullable Output<String> engine,
        @Nullable Output<String> engineVersion,
        @Nullable Output<String> finalSnapshotIdentifier,
        @Nullable Output<Boolean> iamDatabaseAuthenticationEnabled,
        @Nullable Output<String> identifier,
        @Nullable Output<String> identifierPrefix,
        Output<Either<String,InstanceType>> instanceClass,
        @Nullable Output<Integer> iops,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<String> licenseModel,
        @Nullable Output<String> maintenanceWindow,
        @Nullable Output<Integer> maxAllocatedStorage,
        @Nullable Output<Integer> monitoringInterval,
        @Nullable Output<String> monitoringRoleArn,
        @Nullable Output<Boolean> multiAz,
        @Nullable Output<String> name,
        @Nullable Output<String> ncharCharacterSetName,
        @Nullable Output<String> optionGroupName,
        @Nullable Output<String> parameterGroupName,
        @Nullable Output<String> password,
        @Nullable Output<Boolean> performanceInsightsEnabled,
        @Nullable Output<String> performanceInsightsKmsKeyId,
        @Nullable Output<Integer> performanceInsightsRetentionPeriod,
        @Nullable Output<Integer> port,
        @Nullable Output<Boolean> publiclyAccessible,
        @Nullable Output<String> replicaMode,
        @Nullable Output<String> replicateSourceDb,
        @Nullable Output<InstanceRestoreToPointInTimeArgs> restoreToPointInTime,
        @Nullable Output<InstanceS3ImportArgs> s3Import,
        @Nullable Output<List<String>> securityGroupNames,
        @Nullable Output<Boolean> skipFinalSnapshot,
        @Nullable Output<String> snapshotIdentifier,
        @Nullable Output<Boolean> storageEncrypted,
        @Nullable Output<Either<String,StorageType>> storageType,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> timezone,
        @Nullable Output<String> username,
        @Nullable Output<List<String>> vpcSecurityGroupIds) {
        this.allocatedStorage = allocatedStorage;
        this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
        this.applyImmediately = applyImmediately;
        this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
        this.availabilityZone = availabilityZone;
        this.backupRetentionPeriod = backupRetentionPeriod;
        this.backupWindow = backupWindow;
        this.caCertIdentifier = caCertIdentifier;
        this.characterSetName = characterSetName;
        this.copyTagsToSnapshot = copyTagsToSnapshot;
        this.customerOwnedIpEnabled = customerOwnedIpEnabled;
        this.dbSubnetGroupName = dbSubnetGroupName;
        this.deleteAutomatedBackups = deleteAutomatedBackups;
        this.deletionProtection = deletionProtection;
        this.domain = domain;
        this.domainIamRoleName = domainIamRoleName;
        this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
        this.engine = engine;
        this.engineVersion = engineVersion;
        this.finalSnapshotIdentifier = finalSnapshotIdentifier;
        this.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
        this.identifier = identifier;
        this.identifierPrefix = identifierPrefix;
        this.instanceClass = Objects.requireNonNull(instanceClass, "expected parameter 'instanceClass' to be non-null");
        this.iops = iops;
        this.kmsKeyId = kmsKeyId;
        this.licenseModel = licenseModel;
        this.maintenanceWindow = maintenanceWindow;
        this.maxAllocatedStorage = maxAllocatedStorage;
        this.monitoringInterval = monitoringInterval;
        this.monitoringRoleArn = monitoringRoleArn;
        this.multiAz = multiAz;
        this.name = name;
        this.ncharCharacterSetName = ncharCharacterSetName;
        this.optionGroupName = optionGroupName;
        this.parameterGroupName = parameterGroupName;
        this.password = password;
        this.performanceInsightsEnabled = performanceInsightsEnabled;
        this.performanceInsightsKmsKeyId = performanceInsightsKmsKeyId;
        this.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod;
        this.port = port;
        this.publiclyAccessible = publiclyAccessible;
        this.replicaMode = replicaMode;
        this.replicateSourceDb = replicateSourceDb;
        this.restoreToPointInTime = restoreToPointInTime;
        this.s3Import = s3Import;
        this.securityGroupNames = securityGroupNames;
        this.skipFinalSnapshot = skipFinalSnapshot;
        this.snapshotIdentifier = snapshotIdentifier;
        this.storageEncrypted = storageEncrypted;
        this.storageType = storageType;
        this.tags = tags;
        this.timezone = timezone;
        this.username = username;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    }

    private InstanceArgs() {
        this.allocatedStorage = Output.empty();
        this.allowMajorVersionUpgrade = Output.empty();
        this.applyImmediately = Output.empty();
        this.autoMinorVersionUpgrade = Output.empty();
        this.availabilityZone = Output.empty();
        this.backupRetentionPeriod = Output.empty();
        this.backupWindow = Output.empty();
        this.caCertIdentifier = Output.empty();
        this.characterSetName = Output.empty();
        this.copyTagsToSnapshot = Output.empty();
        this.customerOwnedIpEnabled = Output.empty();
        this.dbSubnetGroupName = Output.empty();
        this.deleteAutomatedBackups = Output.empty();
        this.deletionProtection = Output.empty();
        this.domain = Output.empty();
        this.domainIamRoleName = Output.empty();
        this.enabledCloudwatchLogsExports = Output.empty();
        this.engine = Output.empty();
        this.engineVersion = Output.empty();
        this.finalSnapshotIdentifier = Output.empty();
        this.iamDatabaseAuthenticationEnabled = Output.empty();
        this.identifier = Output.empty();
        this.identifierPrefix = Output.empty();
        this.instanceClass = Output.empty();
        this.iops = Output.empty();
        this.kmsKeyId = Output.empty();
        this.licenseModel = Output.empty();
        this.maintenanceWindow = Output.empty();
        this.maxAllocatedStorage = Output.empty();
        this.monitoringInterval = Output.empty();
        this.monitoringRoleArn = Output.empty();
        this.multiAz = Output.empty();
        this.name = Output.empty();
        this.ncharCharacterSetName = Output.empty();
        this.optionGroupName = Output.empty();
        this.parameterGroupName = Output.empty();
        this.password = Output.empty();
        this.performanceInsightsEnabled = Output.empty();
        this.performanceInsightsKmsKeyId = Output.empty();
        this.performanceInsightsRetentionPeriod = Output.empty();
        this.port = Output.empty();
        this.publiclyAccessible = Output.empty();
        this.replicaMode = Output.empty();
        this.replicateSourceDb = Output.empty();
        this.restoreToPointInTime = Output.empty();
        this.s3Import = Output.empty();
        this.securityGroupNames = Output.empty();
        this.skipFinalSnapshot = Output.empty();
        this.snapshotIdentifier = Output.empty();
        this.storageEncrypted = Output.empty();
        this.storageType = Output.empty();
        this.tags = Output.empty();
        this.timezone = Output.empty();
        this.username = Output.empty();
        this.vpcSecurityGroupIds = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> allocatedStorage;
        private @Nullable Output<Boolean> allowMajorVersionUpgrade;
        private @Nullable Output<Boolean> applyImmediately;
        private @Nullable Output<Boolean> autoMinorVersionUpgrade;
        private @Nullable Output<String> availabilityZone;
        private @Nullable Output<Integer> backupRetentionPeriod;
        private @Nullable Output<String> backupWindow;
        private @Nullable Output<String> caCertIdentifier;
        private @Nullable Output<String> characterSetName;
        private @Nullable Output<Boolean> copyTagsToSnapshot;
        private @Nullable Output<Boolean> customerOwnedIpEnabled;
        private @Nullable Output<String> dbSubnetGroupName;
        private @Nullable Output<Boolean> deleteAutomatedBackups;
        private @Nullable Output<Boolean> deletionProtection;
        private @Nullable Output<String> domain;
        private @Nullable Output<String> domainIamRoleName;
        private @Nullable Output<List<String>> enabledCloudwatchLogsExports;
        private @Nullable Output<String> engine;
        private @Nullable Output<String> engineVersion;
        private @Nullable Output<String> finalSnapshotIdentifier;
        private @Nullable Output<Boolean> iamDatabaseAuthenticationEnabled;
        private @Nullable Output<String> identifier;
        private @Nullable Output<String> identifierPrefix;
        private Output<Either<String,InstanceType>> instanceClass;
        private @Nullable Output<Integer> iops;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<String> licenseModel;
        private @Nullable Output<String> maintenanceWindow;
        private @Nullable Output<Integer> maxAllocatedStorage;
        private @Nullable Output<Integer> monitoringInterval;
        private @Nullable Output<String> monitoringRoleArn;
        private @Nullable Output<Boolean> multiAz;
        private @Nullable Output<String> name;
        private @Nullable Output<String> ncharCharacterSetName;
        private @Nullable Output<String> optionGroupName;
        private @Nullable Output<String> parameterGroupName;
        private @Nullable Output<String> password;
        private @Nullable Output<Boolean> performanceInsightsEnabled;
        private @Nullable Output<String> performanceInsightsKmsKeyId;
        private @Nullable Output<Integer> performanceInsightsRetentionPeriod;
        private @Nullable Output<Integer> port;
        private @Nullable Output<Boolean> publiclyAccessible;
        private @Nullable Output<String> replicaMode;
        private @Nullable Output<String> replicateSourceDb;
        private @Nullable Output<InstanceRestoreToPointInTimeArgs> restoreToPointInTime;
        private @Nullable Output<InstanceS3ImportArgs> s3Import;
        private @Nullable Output<List<String>> securityGroupNames;
        private @Nullable Output<Boolean> skipFinalSnapshot;
        private @Nullable Output<String> snapshotIdentifier;
        private @Nullable Output<Boolean> storageEncrypted;
        private @Nullable Output<Either<String,StorageType>> storageType;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> timezone;
        private @Nullable Output<String> username;
        private @Nullable Output<List<String>> vpcSecurityGroupIds;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedStorage = defaults.allocatedStorage;
    	      this.allowMajorVersionUpgrade = defaults.allowMajorVersionUpgrade;
    	      this.applyImmediately = defaults.applyImmediately;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.backupRetentionPeriod = defaults.backupRetentionPeriod;
    	      this.backupWindow = defaults.backupWindow;
    	      this.caCertIdentifier = defaults.caCertIdentifier;
    	      this.characterSetName = defaults.characterSetName;
    	      this.copyTagsToSnapshot = defaults.copyTagsToSnapshot;
    	      this.customerOwnedIpEnabled = defaults.customerOwnedIpEnabled;
    	      this.dbSubnetGroupName = defaults.dbSubnetGroupName;
    	      this.deleteAutomatedBackups = defaults.deleteAutomatedBackups;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.domain = defaults.domain;
    	      this.domainIamRoleName = defaults.domainIamRoleName;
    	      this.enabledCloudwatchLogsExports = defaults.enabledCloudwatchLogsExports;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotIdentifier = defaults.finalSnapshotIdentifier;
    	      this.iamDatabaseAuthenticationEnabled = defaults.iamDatabaseAuthenticationEnabled;
    	      this.identifier = defaults.identifier;
    	      this.identifierPrefix = defaults.identifierPrefix;
    	      this.instanceClass = defaults.instanceClass;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.maxAllocatedStorage = defaults.maxAllocatedStorage;
    	      this.monitoringInterval = defaults.monitoringInterval;
    	      this.monitoringRoleArn = defaults.monitoringRoleArn;
    	      this.multiAz = defaults.multiAz;
    	      this.name = defaults.name;
    	      this.ncharCharacterSetName = defaults.ncharCharacterSetName;
    	      this.optionGroupName = defaults.optionGroupName;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.password = defaults.password;
    	      this.performanceInsightsEnabled = defaults.performanceInsightsEnabled;
    	      this.performanceInsightsKmsKeyId = defaults.performanceInsightsKmsKeyId;
    	      this.performanceInsightsRetentionPeriod = defaults.performanceInsightsRetentionPeriod;
    	      this.port = defaults.port;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.replicaMode = defaults.replicaMode;
    	      this.replicateSourceDb = defaults.replicateSourceDb;
    	      this.restoreToPointInTime = defaults.restoreToPointInTime;
    	      this.s3Import = defaults.s3Import;
    	      this.securityGroupNames = defaults.securityGroupNames;
    	      this.skipFinalSnapshot = defaults.skipFinalSnapshot;
    	      this.snapshotIdentifier = defaults.snapshotIdentifier;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.timezone = defaults.timezone;
    	      this.username = defaults.username;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        public Builder allocatedStorage(@Nullable Output<Integer> allocatedStorage) {
            this.allocatedStorage = allocatedStorage;
            return this;
        }

        public Builder allocatedStorage(@Nullable Integer allocatedStorage) {
            this.allocatedStorage = Output.ofNullable(allocatedStorage);
            return this;
        }

        public Builder allowMajorVersionUpgrade(@Nullable Output<Boolean> allowMajorVersionUpgrade) {
            this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
            return this;
        }

        public Builder allowMajorVersionUpgrade(@Nullable Boolean allowMajorVersionUpgrade) {
            this.allowMajorVersionUpgrade = Output.ofNullable(allowMajorVersionUpgrade);
            return this;
        }

        public Builder applyImmediately(@Nullable Output<Boolean> applyImmediately) {
            this.applyImmediately = applyImmediately;
            return this;
        }

        public Builder applyImmediately(@Nullable Boolean applyImmediately) {
            this.applyImmediately = Output.ofNullable(applyImmediately);
            return this;
        }

        public Builder autoMinorVersionUpgrade(@Nullable Output<Boolean> autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }

        public Builder autoMinorVersionUpgrade(@Nullable Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Output.ofNullable(autoMinorVersionUpgrade);
            return this;
        }

        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Output.ofNullable(availabilityZone);
            return this;
        }

        public Builder backupRetentionPeriod(@Nullable Output<Integer> backupRetentionPeriod) {
            this.backupRetentionPeriod = backupRetentionPeriod;
            return this;
        }

        public Builder backupRetentionPeriod(@Nullable Integer backupRetentionPeriod) {
            this.backupRetentionPeriod = Output.ofNullable(backupRetentionPeriod);
            return this;
        }

        public Builder backupWindow(@Nullable Output<String> backupWindow) {
            this.backupWindow = backupWindow;
            return this;
        }

        public Builder backupWindow(@Nullable String backupWindow) {
            this.backupWindow = Output.ofNullable(backupWindow);
            return this;
        }

        public Builder caCertIdentifier(@Nullable Output<String> caCertIdentifier) {
            this.caCertIdentifier = caCertIdentifier;
            return this;
        }

        public Builder caCertIdentifier(@Nullable String caCertIdentifier) {
            this.caCertIdentifier = Output.ofNullable(caCertIdentifier);
            return this;
        }

        public Builder characterSetName(@Nullable Output<String> characterSetName) {
            this.characterSetName = characterSetName;
            return this;
        }

        public Builder characterSetName(@Nullable String characterSetName) {
            this.characterSetName = Output.ofNullable(characterSetName);
            return this;
        }

        public Builder copyTagsToSnapshot(@Nullable Output<Boolean> copyTagsToSnapshot) {
            this.copyTagsToSnapshot = copyTagsToSnapshot;
            return this;
        }

        public Builder copyTagsToSnapshot(@Nullable Boolean copyTagsToSnapshot) {
            this.copyTagsToSnapshot = Output.ofNullable(copyTagsToSnapshot);
            return this;
        }

        public Builder customerOwnedIpEnabled(@Nullable Output<Boolean> customerOwnedIpEnabled) {
            this.customerOwnedIpEnabled = customerOwnedIpEnabled;
            return this;
        }

        public Builder customerOwnedIpEnabled(@Nullable Boolean customerOwnedIpEnabled) {
            this.customerOwnedIpEnabled = Output.ofNullable(customerOwnedIpEnabled);
            return this;
        }

        public Builder dbSubnetGroupName(@Nullable Output<String> dbSubnetGroupName) {
            this.dbSubnetGroupName = dbSubnetGroupName;
            return this;
        }

        public Builder dbSubnetGroupName(@Nullable String dbSubnetGroupName) {
            this.dbSubnetGroupName = Output.ofNullable(dbSubnetGroupName);
            return this;
        }

        public Builder deleteAutomatedBackups(@Nullable Output<Boolean> deleteAutomatedBackups) {
            this.deleteAutomatedBackups = deleteAutomatedBackups;
            return this;
        }

        public Builder deleteAutomatedBackups(@Nullable Boolean deleteAutomatedBackups) {
            this.deleteAutomatedBackups = Output.ofNullable(deleteAutomatedBackups);
            return this;
        }

        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder deletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Output.ofNullable(deletionProtection);
            return this;
        }

        public Builder domain(@Nullable Output<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder domain(@Nullable String domain) {
            this.domain = Output.ofNullable(domain);
            return this;
        }

        public Builder domainIamRoleName(@Nullable Output<String> domainIamRoleName) {
            this.domainIamRoleName = domainIamRoleName;
            return this;
        }

        public Builder domainIamRoleName(@Nullable String domainIamRoleName) {
            this.domainIamRoleName = Output.ofNullable(domainIamRoleName);
            return this;
        }

        public Builder enabledCloudwatchLogsExports(@Nullable Output<List<String>> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            return this;
        }

        public Builder enabledCloudwatchLogsExports(@Nullable List<String> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = Output.ofNullable(enabledCloudwatchLogsExports);
            return this;
        }

        public Builder engine(@Nullable Output<String> engine) {
            this.engine = engine;
            return this;
        }

        public Builder engine(@Nullable String engine) {
            this.engine = Output.ofNullable(engine);
            return this;
        }

        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = Output.ofNullable(engineVersion);
            return this;
        }

        public Builder finalSnapshotIdentifier(@Nullable Output<String> finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = finalSnapshotIdentifier;
            return this;
        }

        public Builder finalSnapshotIdentifier(@Nullable String finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = Output.ofNullable(finalSnapshotIdentifier);
            return this;
        }

        public Builder iamDatabaseAuthenticationEnabled(@Nullable Output<Boolean> iamDatabaseAuthenticationEnabled) {
            this.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
            return this;
        }

        public Builder iamDatabaseAuthenticationEnabled(@Nullable Boolean iamDatabaseAuthenticationEnabled) {
            this.iamDatabaseAuthenticationEnabled = Output.ofNullable(iamDatabaseAuthenticationEnabled);
            return this;
        }

        public Builder identifier(@Nullable Output<String> identifier) {
            this.identifier = identifier;
            return this;
        }

        public Builder identifier(@Nullable String identifier) {
            this.identifier = Output.ofNullable(identifier);
            return this;
        }

        public Builder identifierPrefix(@Nullable Output<String> identifierPrefix) {
            this.identifierPrefix = identifierPrefix;
            return this;
        }

        public Builder identifierPrefix(@Nullable String identifierPrefix) {
            this.identifierPrefix = Output.ofNullable(identifierPrefix);
            return this;
        }

        public Builder instanceClass(Output<Either<String,InstanceType>> instanceClass) {
            this.instanceClass = Objects.requireNonNull(instanceClass);
            return this;
        }

        public Builder instanceClass(Either<String,InstanceType> instanceClass) {
            this.instanceClass = Output.of(Objects.requireNonNull(instanceClass));
            return this;
        }

        public Builder iops(@Nullable Output<Integer> iops) {
            this.iops = iops;
            return this;
        }

        public Builder iops(@Nullable Integer iops) {
            this.iops = Output.ofNullable(iops);
            return this;
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Output.ofNullable(kmsKeyId);
            return this;
        }

        public Builder licenseModel(@Nullable Output<String> licenseModel) {
            this.licenseModel = licenseModel;
            return this;
        }

        public Builder licenseModel(@Nullable String licenseModel) {
            this.licenseModel = Output.ofNullable(licenseModel);
            return this;
        }

        public Builder maintenanceWindow(@Nullable Output<String> maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder maintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = Output.ofNullable(maintenanceWindow);
            return this;
        }

        public Builder maxAllocatedStorage(@Nullable Output<Integer> maxAllocatedStorage) {
            this.maxAllocatedStorage = maxAllocatedStorage;
            return this;
        }

        public Builder maxAllocatedStorage(@Nullable Integer maxAllocatedStorage) {
            this.maxAllocatedStorage = Output.ofNullable(maxAllocatedStorage);
            return this;
        }

        public Builder monitoringInterval(@Nullable Output<Integer> monitoringInterval) {
            this.monitoringInterval = monitoringInterval;
            return this;
        }

        public Builder monitoringInterval(@Nullable Integer monitoringInterval) {
            this.monitoringInterval = Output.ofNullable(monitoringInterval);
            return this;
        }

        public Builder monitoringRoleArn(@Nullable Output<String> monitoringRoleArn) {
            this.monitoringRoleArn = monitoringRoleArn;
            return this;
        }

        public Builder monitoringRoleArn(@Nullable String monitoringRoleArn) {
            this.monitoringRoleArn = Output.ofNullable(monitoringRoleArn);
            return this;
        }

        public Builder multiAz(@Nullable Output<Boolean> multiAz) {
            this.multiAz = multiAz;
            return this;
        }

        public Builder multiAz(@Nullable Boolean multiAz) {
            this.multiAz = Output.ofNullable(multiAz);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder ncharCharacterSetName(@Nullable Output<String> ncharCharacterSetName) {
            this.ncharCharacterSetName = ncharCharacterSetName;
            return this;
        }

        public Builder ncharCharacterSetName(@Nullable String ncharCharacterSetName) {
            this.ncharCharacterSetName = Output.ofNullable(ncharCharacterSetName);
            return this;
        }

        public Builder optionGroupName(@Nullable Output<String> optionGroupName) {
            this.optionGroupName = optionGroupName;
            return this;
        }

        public Builder optionGroupName(@Nullable String optionGroupName) {
            this.optionGroupName = Output.ofNullable(optionGroupName);
            return this;
        }

        public Builder parameterGroupName(@Nullable Output<String> parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }

        public Builder parameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = Output.ofNullable(parameterGroupName);
            return this;
        }

        public Builder password(@Nullable Output<String> password) {
            this.password = password;
            return this;
        }

        public Builder password(@Nullable String password) {
            this.password = Output.ofNullable(password);
            return this;
        }

        public Builder performanceInsightsEnabled(@Nullable Output<Boolean> performanceInsightsEnabled) {
            this.performanceInsightsEnabled = performanceInsightsEnabled;
            return this;
        }

        public Builder performanceInsightsEnabled(@Nullable Boolean performanceInsightsEnabled) {
            this.performanceInsightsEnabled = Output.ofNullable(performanceInsightsEnabled);
            return this;
        }

        public Builder performanceInsightsKmsKeyId(@Nullable Output<String> performanceInsightsKmsKeyId) {
            this.performanceInsightsKmsKeyId = performanceInsightsKmsKeyId;
            return this;
        }

        public Builder performanceInsightsKmsKeyId(@Nullable String performanceInsightsKmsKeyId) {
            this.performanceInsightsKmsKeyId = Output.ofNullable(performanceInsightsKmsKeyId);
            return this;
        }

        public Builder performanceInsightsRetentionPeriod(@Nullable Output<Integer> performanceInsightsRetentionPeriod) {
            this.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod;
            return this;
        }

        public Builder performanceInsightsRetentionPeriod(@Nullable Integer performanceInsightsRetentionPeriod) {
            this.performanceInsightsRetentionPeriod = Output.ofNullable(performanceInsightsRetentionPeriod);
            return this;
        }

        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }

        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }

        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = Output.ofNullable(publiclyAccessible);
            return this;
        }

        public Builder replicaMode(@Nullable Output<String> replicaMode) {
            this.replicaMode = replicaMode;
            return this;
        }

        public Builder replicaMode(@Nullable String replicaMode) {
            this.replicaMode = Output.ofNullable(replicaMode);
            return this;
        }

        public Builder replicateSourceDb(@Nullable Output<String> replicateSourceDb) {
            this.replicateSourceDb = replicateSourceDb;
            return this;
        }

        public Builder replicateSourceDb(@Nullable String replicateSourceDb) {
            this.replicateSourceDb = Output.ofNullable(replicateSourceDb);
            return this;
        }

        public Builder restoreToPointInTime(@Nullable Output<InstanceRestoreToPointInTimeArgs> restoreToPointInTime) {
            this.restoreToPointInTime = restoreToPointInTime;
            return this;
        }

        public Builder restoreToPointInTime(@Nullable InstanceRestoreToPointInTimeArgs restoreToPointInTime) {
            this.restoreToPointInTime = Output.ofNullable(restoreToPointInTime);
            return this;
        }

        public Builder s3Import(@Nullable Output<InstanceS3ImportArgs> s3Import) {
            this.s3Import = s3Import;
            return this;
        }

        public Builder s3Import(@Nullable InstanceS3ImportArgs s3Import) {
            this.s3Import = Output.ofNullable(s3Import);
            return this;
        }

        public Builder securityGroupNames(@Nullable Output<List<String>> securityGroupNames) {
            this.securityGroupNames = securityGroupNames;
            return this;
        }

        public Builder securityGroupNames(@Nullable List<String> securityGroupNames) {
            this.securityGroupNames = Output.ofNullable(securityGroupNames);
            return this;
        }

        public Builder skipFinalSnapshot(@Nullable Output<Boolean> skipFinalSnapshot) {
            this.skipFinalSnapshot = skipFinalSnapshot;
            return this;
        }

        public Builder skipFinalSnapshot(@Nullable Boolean skipFinalSnapshot) {
            this.skipFinalSnapshot = Output.ofNullable(skipFinalSnapshot);
            return this;
        }

        public Builder snapshotIdentifier(@Nullable Output<String> snapshotIdentifier) {
            this.snapshotIdentifier = snapshotIdentifier;
            return this;
        }

        public Builder snapshotIdentifier(@Nullable String snapshotIdentifier) {
            this.snapshotIdentifier = Output.ofNullable(snapshotIdentifier);
            return this;
        }

        public Builder storageEncrypted(@Nullable Output<Boolean> storageEncrypted) {
            this.storageEncrypted = storageEncrypted;
            return this;
        }

        public Builder storageEncrypted(@Nullable Boolean storageEncrypted) {
            this.storageEncrypted = Output.ofNullable(storageEncrypted);
            return this;
        }

        public Builder storageType(@Nullable Output<Either<String,StorageType>> storageType) {
            this.storageType = storageType;
            return this;
        }

        public Builder storageType(@Nullable Either<String,StorageType> storageType) {
            this.storageType = Output.ofNullable(storageType);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder timezone(@Nullable Output<String> timezone) {
            this.timezone = timezone;
            return this;
        }

        public Builder timezone(@Nullable String timezone) {
            this.timezone = Output.ofNullable(timezone);
            return this;
        }

        public Builder username(@Nullable Output<String> username) {
            this.username = username;
            return this;
        }

        public Builder username(@Nullable String username) {
            this.username = Output.ofNullable(username);
            return this;
        }

        public Builder vpcSecurityGroupIds(@Nullable Output<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        public Builder vpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Output.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public InstanceArgs build() {
            return new InstanceArgs(allocatedStorage, allowMajorVersionUpgrade, applyImmediately, autoMinorVersionUpgrade, availabilityZone, backupRetentionPeriod, backupWindow, caCertIdentifier, characterSetName, copyTagsToSnapshot, customerOwnedIpEnabled, dbSubnetGroupName, deleteAutomatedBackups, deletionProtection, domain, domainIamRoleName, enabledCloudwatchLogsExports, engine, engineVersion, finalSnapshotIdentifier, iamDatabaseAuthenticationEnabled, identifier, identifierPrefix, instanceClass, iops, kmsKeyId, licenseModel, maintenanceWindow, maxAllocatedStorage, monitoringInterval, monitoringRoleArn, multiAz, name, ncharCharacterSetName, optionGroupName, parameterGroupName, password, performanceInsightsEnabled, performanceInsightsKmsKeyId, performanceInsightsRetentionPeriod, port, publiclyAccessible, replicaMode, replicateSourceDb, restoreToPointInTime, s3Import, securityGroupNames, skipFinalSnapshot, snapshotIdentifier, storageEncrypted, storageType, tags, timezone, username, vpcSecurityGroupIds);
        }
    }
}
