// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codebuild.inputs;

import io.pulumi.aws.codebuild.inputs.WebhookFilterGroupGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WebhookState extends io.pulumi.resources.ResourceArgs {

    public static final WebhookState Empty = new WebhookState();

    /**
     * A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filter_group` over `branch_filter`.
     * 
     */
    @Import(name="branchFilter")
      private final @Nullable Output<String> branchFilter;

    public Output<String> getBranchFilter() {
        return this.branchFilter == null ? Output.empty() : this.branchFilter;
    }

    /**
     * The type of build this webhook will trigger. Valid values for this parameter are: `BUILD`, `BUILD_BATCH`.
     * 
     */
    @Import(name="buildType")
      private final @Nullable Output<String> buildType;

    public Output<String> getBuildType() {
        return this.buildType == null ? Output.empty() : this.buildType;
    }

    /**
     * Information about the webhook's trigger. Filter group blocks are documented below.
     * 
     */
    @Import(name="filterGroups")
      private final @Nullable Output<List<WebhookFilterGroupGetArgs>> filterGroups;

    public Output<List<WebhookFilterGroupGetArgs>> getFilterGroups() {
        return this.filterGroups == null ? Output.empty() : this.filterGroups;
    }

    /**
     * The CodeBuild endpoint where webhook events are sent.
     * 
     */
    @Import(name="payloadUrl")
      private final @Nullable Output<String> payloadUrl;

    public Output<String> getPayloadUrl() {
        return this.payloadUrl == null ? Output.empty() : this.payloadUrl;
    }

    /**
     * The name of the build project.
     * 
     */
    @Import(name="projectName")
      private final @Nullable Output<String> projectName;

    public Output<String> getProjectName() {
        return this.projectName == null ? Output.empty() : this.projectName;
    }

    /**
     * The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
     * 
     */
    @Import(name="secret")
      private final @Nullable Output<String> secret;

    public Output<String> getSecret() {
        return this.secret == null ? Output.empty() : this.secret;
    }

    /**
     * The URL to the webhook.
     * 
     */
    @Import(name="url")
      private final @Nullable Output<String> url;

    public Output<String> getUrl() {
        return this.url == null ? Output.empty() : this.url;
    }

    public WebhookState(
        @Nullable Output<String> branchFilter,
        @Nullable Output<String> buildType,
        @Nullable Output<List<WebhookFilterGroupGetArgs>> filterGroups,
        @Nullable Output<String> payloadUrl,
        @Nullable Output<String> projectName,
        @Nullable Output<String> secret,
        @Nullable Output<String> url) {
        this.branchFilter = branchFilter;
        this.buildType = buildType;
        this.filterGroups = filterGroups;
        this.payloadUrl = payloadUrl;
        this.projectName = projectName;
        this.secret = secret;
        this.url = url;
    }

    private WebhookState() {
        this.branchFilter = Output.empty();
        this.buildType = Output.empty();
        this.filterGroups = Output.empty();
        this.payloadUrl = Output.empty();
        this.projectName = Output.empty();
        this.secret = Output.empty();
        this.url = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebhookState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> branchFilter;
        private @Nullable Output<String> buildType;
        private @Nullable Output<List<WebhookFilterGroupGetArgs>> filterGroups;
        private @Nullable Output<String> payloadUrl;
        private @Nullable Output<String> projectName;
        private @Nullable Output<String> secret;
        private @Nullable Output<String> url;

        public Builder() {
    	      // Empty
        }

        public Builder(WebhookState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branchFilter = defaults.branchFilter;
    	      this.buildType = defaults.buildType;
    	      this.filterGroups = defaults.filterGroups;
    	      this.payloadUrl = defaults.payloadUrl;
    	      this.projectName = defaults.projectName;
    	      this.secret = defaults.secret;
    	      this.url = defaults.url;
        }

        public Builder branchFilter(@Nullable Output<String> branchFilter) {
            this.branchFilter = branchFilter;
            return this;
        }

        public Builder branchFilter(@Nullable String branchFilter) {
            this.branchFilter = Output.ofNullable(branchFilter);
            return this;
        }

        public Builder buildType(@Nullable Output<String> buildType) {
            this.buildType = buildType;
            return this;
        }

        public Builder buildType(@Nullable String buildType) {
            this.buildType = Output.ofNullable(buildType);
            return this;
        }

        public Builder filterGroups(@Nullable Output<List<WebhookFilterGroupGetArgs>> filterGroups) {
            this.filterGroups = filterGroups;
            return this;
        }

        public Builder filterGroups(@Nullable List<WebhookFilterGroupGetArgs> filterGroups) {
            this.filterGroups = Output.ofNullable(filterGroups);
            return this;
        }

        public Builder payloadUrl(@Nullable Output<String> payloadUrl) {
            this.payloadUrl = payloadUrl;
            return this;
        }

        public Builder payloadUrl(@Nullable String payloadUrl) {
            this.payloadUrl = Output.ofNullable(payloadUrl);
            return this;
        }

        public Builder projectName(@Nullable Output<String> projectName) {
            this.projectName = projectName;
            return this;
        }

        public Builder projectName(@Nullable String projectName) {
            this.projectName = Output.ofNullable(projectName);
            return this;
        }

        public Builder secret(@Nullable Output<String> secret) {
            this.secret = secret;
            return this;
        }

        public Builder secret(@Nullable String secret) {
            this.secret = Output.ofNullable(secret);
            return this;
        }

        public Builder url(@Nullable Output<String> url) {
            this.url = url;
            return this;
        }

        public Builder url(@Nullable String url) {
            this.url = Output.ofNullable(url);
            return this;
        }
        public WebhookState build() {
            return new WebhookState(branchFilter, buildType, filterGroups, payloadUrl, projectName, secret, url);
        }
    }
}
