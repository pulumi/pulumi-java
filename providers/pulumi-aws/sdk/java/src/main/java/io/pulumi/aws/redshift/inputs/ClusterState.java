// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.redshift.inputs;

import io.pulumi.aws.redshift.inputs.ClusterClusterNodeGetArgs;
import io.pulumi.aws.redshift.inputs.ClusterLoggingGetArgs;
import io.pulumi.aws.redshift.inputs.ClusterSnapshotCopyGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterState extends io.pulumi.resources.ResourceArgs {

    public static final ClusterState Empty = new ClusterState();

    /**
     * If true , major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default is true
     * 
     */
    @Import(name="allowVersionUpgrade")
      private final @Nullable Output<Boolean> allowVersionUpgrade;

    public Output<Boolean> allowVersionUpgrade() {
        return this.allowVersionUpgrade == null ? Codegen.empty() : this.allowVersionUpgrade;
    }

    /**
     * Amazon Resource Name (ARN) of cluster
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with create-cluster-snapshot. Default is 1.
     * 
     */
    @Import(name="automatedSnapshotRetentionPeriod")
      private final @Nullable Output<Integer> automatedSnapshotRetentionPeriod;

    public Output<Integer> automatedSnapshotRetentionPeriod() {
        return this.automatedSnapshotRetentionPeriod == null ? Codegen.empty() : this.automatedSnapshotRetentionPeriod;
    }

    /**
     * The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency.
     * 
     */
    @Import(name="availabilityZone")
      private final @Nullable Output<String> availabilityZone;

    public Output<String> availabilityZone() {
        return this.availabilityZone == null ? Codegen.empty() : this.availabilityZone;
    }

    /**
     * The Cluster Identifier. Must be a lower case
     * string.
     * 
     */
    @Import(name="clusterIdentifier")
      private final @Nullable Output<String> clusterIdentifier;

    public Output<String> clusterIdentifier() {
        return this.clusterIdentifier == null ? Codegen.empty() : this.clusterIdentifier;
    }

    /**
     * The nodes in the cluster. Cluster node blocks are documented below
     * 
     */
    @Import(name="clusterNodes")
      private final @Nullable Output<List<ClusterClusterNodeGetArgs>> clusterNodes;

    public Output<List<ClusterClusterNodeGetArgs>> clusterNodes() {
        return this.clusterNodes == null ? Codegen.empty() : this.clusterNodes;
    }

    /**
     * The name of the parameter group to be associated with this cluster.
     * 
     */
    @Import(name="clusterParameterGroupName")
      private final @Nullable Output<String> clusterParameterGroupName;

    public Output<String> clusterParameterGroupName() {
        return this.clusterParameterGroupName == null ? Codegen.empty() : this.clusterParameterGroupName;
    }

    /**
     * The public key for the cluster
     * 
     */
    @Import(name="clusterPublicKey")
      private final @Nullable Output<String> clusterPublicKey;

    public Output<String> clusterPublicKey() {
        return this.clusterPublicKey == null ? Codegen.empty() : this.clusterPublicKey;
    }

    /**
     * The specific revision number of the database in the cluster
     * 
     */
    @Import(name="clusterRevisionNumber")
      private final @Nullable Output<String> clusterRevisionNumber;

    public Output<String> clusterRevisionNumber() {
        return this.clusterRevisionNumber == null ? Codegen.empty() : this.clusterRevisionNumber;
    }

    /**
     * A list of security groups to be associated with this cluster.
     * 
     */
    @Import(name="clusterSecurityGroups")
      private final @Nullable Output<List<String>> clusterSecurityGroups;

    public Output<List<String>> clusterSecurityGroups() {
        return this.clusterSecurityGroups == null ? Codegen.empty() : this.clusterSecurityGroups;
    }

    /**
     * The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).
     * 
     */
    @Import(name="clusterSubnetGroupName")
      private final @Nullable Output<String> clusterSubnetGroupName;

    public Output<String> clusterSubnetGroupName() {
        return this.clusterSubnetGroupName == null ? Codegen.empty() : this.clusterSubnetGroupName;
    }

    /**
     * The cluster type to use. Either `single-node` or `multi-node`.
     * 
     */
    @Import(name="clusterType")
      private final @Nullable Output<String> clusterType;

    public Output<String> clusterType() {
        return this.clusterType == null ? Codegen.empty() : this.clusterType;
    }

    /**
     * The version of the Amazon Redshift engine software that you want to deploy on the cluster.
     * The version selected runs on all the nodes in the cluster.
     * 
     */
    @Import(name="clusterVersion")
      private final @Nullable Output<String> clusterVersion;

    public Output<String> clusterVersion() {
        return this.clusterVersion == null ? Codegen.empty() : this.clusterVersion;
    }

    /**
     * The name of the first database to be created when the cluster is created.
     * If you do not provide a name, Amazon Redshift will create a default database called `dev`.
     * 
     */
    @Import(name="databaseName")
      private final @Nullable Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName == null ? Codegen.empty() : this.databaseName;
    }

    /**
     * The DNS name of the cluster
     * 
     */
    @Import(name="dnsName")
      private final @Nullable Output<String> dnsName;

    public Output<String> dnsName() {
        return this.dnsName == null ? Codegen.empty() : this.dnsName;
    }

    /**
     * The Elastic IP (EIP) address for the cluster.
     * 
     */
    @Import(name="elasticIp")
      private final @Nullable Output<String> elasticIp;

    public Output<String> elasticIp() {
        return this.elasticIp == null ? Codegen.empty() : this.elasticIp;
    }

    /**
     * If true , the data in the cluster is encrypted at rest.
     * 
     */
    @Import(name="encrypted")
      private final @Nullable Output<Boolean> encrypted;

    public Output<Boolean> encrypted() {
        return this.encrypted == null ? Codegen.empty() : this.encrypted;
    }

    /**
     * The connection endpoint
     * 
     */
    @Import(name="endpoint")
      private final @Nullable Output<String> endpoint;

    public Output<String> endpoint() {
        return this.endpoint == null ? Codegen.empty() : this.endpoint;
    }

    /**
     * If true , enhanced VPC routing is enabled.
     * 
     */
    @Import(name="enhancedVpcRouting")
      private final @Nullable Output<Boolean> enhancedVpcRouting;

    public Output<Boolean> enhancedVpcRouting() {
        return this.enhancedVpcRouting == null ? Codegen.empty() : this.enhancedVpcRouting;
    }

    /**
     * The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, `skip_final_snapshot` must be false.
     * 
     */
    @Import(name="finalSnapshotIdentifier")
      private final @Nullable Output<String> finalSnapshotIdentifier;

    public Output<String> finalSnapshotIdentifier() {
        return this.finalSnapshotIdentifier == null ? Codegen.empty() : this.finalSnapshotIdentifier;
    }

    /**
     * A list of IAM Role ARNs to associate with the cluster. A Maximum of 10 can be associated to the cluster at any time.
     * 
     */
    @Import(name="iamRoles")
      private final @Nullable Output<List<String>> iamRoles;

    public Output<List<String>> iamRoles() {
        return this.iamRoles == null ? Codegen.empty() : this.iamRoles;
    }

    /**
     * The ARN for the KMS encryption key. When specifying `kms_key_id`, `encrypted` needs to be set to true.
     * 
     */
    @Import(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> kmsKeyId() {
        return this.kmsKeyId == null ? Codegen.empty() : this.kmsKeyId;
    }

    /**
     * Logging, documented below.
     * 
     */
    @Import(name="logging")
      private final @Nullable Output<ClusterLoggingGetArgs> logging;

    public Output<ClusterLoggingGetArgs> logging() {
        return this.logging == null ? Codegen.empty() : this.logging;
    }

    /**
     * Password for the master DB user.
     * Note that this may show up in logs, and it will be stored in the state file. Password must contain at least 8 chars and
     * contain at least one uppercase letter, one lowercase letter, and one number.
     * 
     */
    @Import(name="masterPassword")
      private final @Nullable Output<String> masterPassword;

    public Output<String> masterPassword() {
        return this.masterPassword == null ? Codegen.empty() : this.masterPassword;
    }

    /**
     * Username for the master DB user.
     * 
     */
    @Import(name="masterUsername")
      private final @Nullable Output<String> masterUsername;

    public Output<String> masterUsername() {
        return this.masterUsername == null ? Codegen.empty() : this.masterUsername;
    }

    /**
     * The node type to be provisioned for the cluster.
     * 
     */
    @Import(name="nodeType")
      private final @Nullable Output<String> nodeType;

    public Output<String> nodeType() {
        return this.nodeType == null ? Codegen.empty() : this.nodeType;
    }

    /**
     * The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. Default is 1.
     * 
     */
    @Import(name="numberOfNodes")
      private final @Nullable Output<Integer> numberOfNodes;

    public Output<Integer> numberOfNodes() {
        return this.numberOfNodes == null ? Codegen.empty() : this.numberOfNodes;
    }

    /**
     * The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
     * 
     */
    @Import(name="ownerAccount")
      private final @Nullable Output<String> ownerAccount;

    public Output<String> ownerAccount() {
        return this.ownerAccount == null ? Codegen.empty() : this.ownerAccount;
    }

    /**
     * The port number on which the cluster accepts incoming connections.
     * The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections. Default port is 5439.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    /**
     * The weekly time range (in UTC) during which automated cluster maintenance can occur.
     * Format: ddd:hh24:mi-ddd:hh24:mi
     * 
     */
    @Import(name="preferredMaintenanceWindow")
      private final @Nullable Output<String> preferredMaintenanceWindow;

    public Output<String> preferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow == null ? Codegen.empty() : this.preferredMaintenanceWindow;
    }

    /**
     * If true, the cluster can be accessed from a public network. Default is `true`.
     * 
     */
    @Import(name="publiclyAccessible")
      private final @Nullable Output<Boolean> publiclyAccessible;

    public Output<Boolean> publiclyAccessible() {
        return this.publiclyAccessible == null ? Codegen.empty() : this.publiclyAccessible;
    }

    /**
     * Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true , a final cluster snapshot is not created. If false , a final cluster snapshot is created before the cluster is deleted. Default is false.
     * 
     */
    @Import(name="skipFinalSnapshot")
      private final @Nullable Output<Boolean> skipFinalSnapshot;

    public Output<Boolean> skipFinalSnapshot() {
        return this.skipFinalSnapshot == null ? Codegen.empty() : this.skipFinalSnapshot;
    }

    /**
     * The name of the cluster the source snapshot was created from.
     * 
     */
    @Import(name="snapshotClusterIdentifier")
      private final @Nullable Output<String> snapshotClusterIdentifier;

    public Output<String> snapshotClusterIdentifier() {
        return this.snapshotClusterIdentifier == null ? Codegen.empty() : this.snapshotClusterIdentifier;
    }

    /**
     * Configuration of automatic copy of snapshots from one region to another. Documented below.
     * 
     */
    @Import(name="snapshotCopy")
      private final @Nullable Output<ClusterSnapshotCopyGetArgs> snapshotCopy;

    public Output<ClusterSnapshotCopyGetArgs> snapshotCopy() {
        return this.snapshotCopy == null ? Codegen.empty() : this.snapshotCopy;
    }

    /**
     * The name of the snapshot from which to create the new cluster.
     * 
     */
    @Import(name="snapshotIdentifier")
      private final @Nullable Output<String> snapshotIdentifier;

    public Output<String> snapshotIdentifier() {
        return this.snapshotIdentifier == null ? Codegen.empty() : this.snapshotIdentifier;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.
     * 
     */
    @Import(name="vpcSecurityGroupIds")
      private final @Nullable Output<List<String>> vpcSecurityGroupIds;

    public Output<List<String>> vpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Codegen.empty() : this.vpcSecurityGroupIds;
    }

    public ClusterState(
        @Nullable Output<Boolean> allowVersionUpgrade,
        @Nullable Output<String> arn,
        @Nullable Output<Integer> automatedSnapshotRetentionPeriod,
        @Nullable Output<String> availabilityZone,
        @Nullable Output<String> clusterIdentifier,
        @Nullable Output<List<ClusterClusterNodeGetArgs>> clusterNodes,
        @Nullable Output<String> clusterParameterGroupName,
        @Nullable Output<String> clusterPublicKey,
        @Nullable Output<String> clusterRevisionNumber,
        @Nullable Output<List<String>> clusterSecurityGroups,
        @Nullable Output<String> clusterSubnetGroupName,
        @Nullable Output<String> clusterType,
        @Nullable Output<String> clusterVersion,
        @Nullable Output<String> databaseName,
        @Nullable Output<String> dnsName,
        @Nullable Output<String> elasticIp,
        @Nullable Output<Boolean> encrypted,
        @Nullable Output<String> endpoint,
        @Nullable Output<Boolean> enhancedVpcRouting,
        @Nullable Output<String> finalSnapshotIdentifier,
        @Nullable Output<List<String>> iamRoles,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<ClusterLoggingGetArgs> logging,
        @Nullable Output<String> masterPassword,
        @Nullable Output<String> masterUsername,
        @Nullable Output<String> nodeType,
        @Nullable Output<Integer> numberOfNodes,
        @Nullable Output<String> ownerAccount,
        @Nullable Output<Integer> port,
        @Nullable Output<String> preferredMaintenanceWindow,
        @Nullable Output<Boolean> publiclyAccessible,
        @Nullable Output<Boolean> skipFinalSnapshot,
        @Nullable Output<String> snapshotClusterIdentifier,
        @Nullable Output<ClusterSnapshotCopyGetArgs> snapshotCopy,
        @Nullable Output<String> snapshotIdentifier,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<List<String>> vpcSecurityGroupIds) {
        this.allowVersionUpgrade = allowVersionUpgrade;
        this.arn = arn;
        this.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod;
        this.availabilityZone = availabilityZone;
        this.clusterIdentifier = clusterIdentifier;
        this.clusterNodes = clusterNodes;
        this.clusterParameterGroupName = clusterParameterGroupName;
        this.clusterPublicKey = clusterPublicKey;
        this.clusterRevisionNumber = clusterRevisionNumber;
        this.clusterSecurityGroups = clusterSecurityGroups;
        this.clusterSubnetGroupName = clusterSubnetGroupName;
        this.clusterType = clusterType;
        this.clusterVersion = clusterVersion;
        this.databaseName = databaseName;
        this.dnsName = dnsName;
        this.elasticIp = elasticIp;
        this.encrypted = encrypted;
        this.endpoint = endpoint;
        this.enhancedVpcRouting = enhancedVpcRouting;
        this.finalSnapshotIdentifier = finalSnapshotIdentifier;
        this.iamRoles = iamRoles;
        this.kmsKeyId = kmsKeyId;
        this.logging = logging;
        this.masterPassword = masterPassword;
        this.masterUsername = masterUsername;
        this.nodeType = nodeType;
        this.numberOfNodes = numberOfNodes;
        this.ownerAccount = ownerAccount;
        this.port = port;
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        this.publiclyAccessible = publiclyAccessible;
        this.skipFinalSnapshot = skipFinalSnapshot;
        this.snapshotClusterIdentifier = snapshotClusterIdentifier;
        this.snapshotCopy = snapshotCopy;
        this.snapshotIdentifier = snapshotIdentifier;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    }

    private ClusterState() {
        this.allowVersionUpgrade = Codegen.empty();
        this.arn = Codegen.empty();
        this.automatedSnapshotRetentionPeriod = Codegen.empty();
        this.availabilityZone = Codegen.empty();
        this.clusterIdentifier = Codegen.empty();
        this.clusterNodes = Codegen.empty();
        this.clusterParameterGroupName = Codegen.empty();
        this.clusterPublicKey = Codegen.empty();
        this.clusterRevisionNumber = Codegen.empty();
        this.clusterSecurityGroups = Codegen.empty();
        this.clusterSubnetGroupName = Codegen.empty();
        this.clusterType = Codegen.empty();
        this.clusterVersion = Codegen.empty();
        this.databaseName = Codegen.empty();
        this.dnsName = Codegen.empty();
        this.elasticIp = Codegen.empty();
        this.encrypted = Codegen.empty();
        this.endpoint = Codegen.empty();
        this.enhancedVpcRouting = Codegen.empty();
        this.finalSnapshotIdentifier = Codegen.empty();
        this.iamRoles = Codegen.empty();
        this.kmsKeyId = Codegen.empty();
        this.logging = Codegen.empty();
        this.masterPassword = Codegen.empty();
        this.masterUsername = Codegen.empty();
        this.nodeType = Codegen.empty();
        this.numberOfNodes = Codegen.empty();
        this.ownerAccount = Codegen.empty();
        this.port = Codegen.empty();
        this.preferredMaintenanceWindow = Codegen.empty();
        this.publiclyAccessible = Codegen.empty();
        this.skipFinalSnapshot = Codegen.empty();
        this.snapshotClusterIdentifier = Codegen.empty();
        this.snapshotCopy = Codegen.empty();
        this.snapshotIdentifier = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.vpcSecurityGroupIds = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowVersionUpgrade;
        private @Nullable Output<String> arn;
        private @Nullable Output<Integer> automatedSnapshotRetentionPeriod;
        private @Nullable Output<String> availabilityZone;
        private @Nullable Output<String> clusterIdentifier;
        private @Nullable Output<List<ClusterClusterNodeGetArgs>> clusterNodes;
        private @Nullable Output<String> clusterParameterGroupName;
        private @Nullable Output<String> clusterPublicKey;
        private @Nullable Output<String> clusterRevisionNumber;
        private @Nullable Output<List<String>> clusterSecurityGroups;
        private @Nullable Output<String> clusterSubnetGroupName;
        private @Nullable Output<String> clusterType;
        private @Nullable Output<String> clusterVersion;
        private @Nullable Output<String> databaseName;
        private @Nullable Output<String> dnsName;
        private @Nullable Output<String> elasticIp;
        private @Nullable Output<Boolean> encrypted;
        private @Nullable Output<String> endpoint;
        private @Nullable Output<Boolean> enhancedVpcRouting;
        private @Nullable Output<String> finalSnapshotIdentifier;
        private @Nullable Output<List<String>> iamRoles;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<ClusterLoggingGetArgs> logging;
        private @Nullable Output<String> masterPassword;
        private @Nullable Output<String> masterUsername;
        private @Nullable Output<String> nodeType;
        private @Nullable Output<Integer> numberOfNodes;
        private @Nullable Output<String> ownerAccount;
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> preferredMaintenanceWindow;
        private @Nullable Output<Boolean> publiclyAccessible;
        private @Nullable Output<Boolean> skipFinalSnapshot;
        private @Nullable Output<String> snapshotClusterIdentifier;
        private @Nullable Output<ClusterSnapshotCopyGetArgs> snapshotCopy;
        private @Nullable Output<String> snapshotIdentifier;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<List<String>> vpcSecurityGroupIds;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowVersionUpgrade = defaults.allowVersionUpgrade;
    	      this.arn = defaults.arn;
    	      this.automatedSnapshotRetentionPeriod = defaults.automatedSnapshotRetentionPeriod;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.clusterIdentifier = defaults.clusterIdentifier;
    	      this.clusterNodes = defaults.clusterNodes;
    	      this.clusterParameterGroupName = defaults.clusterParameterGroupName;
    	      this.clusterPublicKey = defaults.clusterPublicKey;
    	      this.clusterRevisionNumber = defaults.clusterRevisionNumber;
    	      this.clusterSecurityGroups = defaults.clusterSecurityGroups;
    	      this.clusterSubnetGroupName = defaults.clusterSubnetGroupName;
    	      this.clusterType = defaults.clusterType;
    	      this.clusterVersion = defaults.clusterVersion;
    	      this.databaseName = defaults.databaseName;
    	      this.dnsName = defaults.dnsName;
    	      this.elasticIp = defaults.elasticIp;
    	      this.encrypted = defaults.encrypted;
    	      this.endpoint = defaults.endpoint;
    	      this.enhancedVpcRouting = defaults.enhancedVpcRouting;
    	      this.finalSnapshotIdentifier = defaults.finalSnapshotIdentifier;
    	      this.iamRoles = defaults.iamRoles;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.logging = defaults.logging;
    	      this.masterPassword = defaults.masterPassword;
    	      this.masterUsername = defaults.masterUsername;
    	      this.nodeType = defaults.nodeType;
    	      this.numberOfNodes = defaults.numberOfNodes;
    	      this.ownerAccount = defaults.ownerAccount;
    	      this.port = defaults.port;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.skipFinalSnapshot = defaults.skipFinalSnapshot;
    	      this.snapshotClusterIdentifier = defaults.snapshotClusterIdentifier;
    	      this.snapshotCopy = defaults.snapshotCopy;
    	      this.snapshotIdentifier = defaults.snapshotIdentifier;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        public Builder allowVersionUpgrade(@Nullable Output<Boolean> allowVersionUpgrade) {
            this.allowVersionUpgrade = allowVersionUpgrade;
            return this;
        }
        public Builder allowVersionUpgrade(@Nullable Boolean allowVersionUpgrade) {
            this.allowVersionUpgrade = Codegen.ofNullable(allowVersionUpgrade);
            return this;
        }
        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder automatedSnapshotRetentionPeriod(@Nullable Output<Integer> automatedSnapshotRetentionPeriod) {
            this.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod;
            return this;
        }
        public Builder automatedSnapshotRetentionPeriod(@Nullable Integer automatedSnapshotRetentionPeriod) {
            this.automatedSnapshotRetentionPeriod = Codegen.ofNullable(automatedSnapshotRetentionPeriod);
            return this;
        }
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }
        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Codegen.ofNullable(availabilityZone);
            return this;
        }
        public Builder clusterIdentifier(@Nullable Output<String> clusterIdentifier) {
            this.clusterIdentifier = clusterIdentifier;
            return this;
        }
        public Builder clusterIdentifier(@Nullable String clusterIdentifier) {
            this.clusterIdentifier = Codegen.ofNullable(clusterIdentifier);
            return this;
        }
        public Builder clusterNodes(@Nullable Output<List<ClusterClusterNodeGetArgs>> clusterNodes) {
            this.clusterNodes = clusterNodes;
            return this;
        }
        public Builder clusterNodes(@Nullable List<ClusterClusterNodeGetArgs> clusterNodes) {
            this.clusterNodes = Codegen.ofNullable(clusterNodes);
            return this;
        }
        public Builder clusterNodes(ClusterClusterNodeGetArgs... clusterNodes) {
            return clusterNodes(List.of(clusterNodes));
        }
        public Builder clusterParameterGroupName(@Nullable Output<String> clusterParameterGroupName) {
            this.clusterParameterGroupName = clusterParameterGroupName;
            return this;
        }
        public Builder clusterParameterGroupName(@Nullable String clusterParameterGroupName) {
            this.clusterParameterGroupName = Codegen.ofNullable(clusterParameterGroupName);
            return this;
        }
        public Builder clusterPublicKey(@Nullable Output<String> clusterPublicKey) {
            this.clusterPublicKey = clusterPublicKey;
            return this;
        }
        public Builder clusterPublicKey(@Nullable String clusterPublicKey) {
            this.clusterPublicKey = Codegen.ofNullable(clusterPublicKey);
            return this;
        }
        public Builder clusterRevisionNumber(@Nullable Output<String> clusterRevisionNumber) {
            this.clusterRevisionNumber = clusterRevisionNumber;
            return this;
        }
        public Builder clusterRevisionNumber(@Nullable String clusterRevisionNumber) {
            this.clusterRevisionNumber = Codegen.ofNullable(clusterRevisionNumber);
            return this;
        }
        public Builder clusterSecurityGroups(@Nullable Output<List<String>> clusterSecurityGroups) {
            this.clusterSecurityGroups = clusterSecurityGroups;
            return this;
        }
        public Builder clusterSecurityGroups(@Nullable List<String> clusterSecurityGroups) {
            this.clusterSecurityGroups = Codegen.ofNullable(clusterSecurityGroups);
            return this;
        }
        public Builder clusterSecurityGroups(String... clusterSecurityGroups) {
            return clusterSecurityGroups(List.of(clusterSecurityGroups));
        }
        public Builder clusterSubnetGroupName(@Nullable Output<String> clusterSubnetGroupName) {
            this.clusterSubnetGroupName = clusterSubnetGroupName;
            return this;
        }
        public Builder clusterSubnetGroupName(@Nullable String clusterSubnetGroupName) {
            this.clusterSubnetGroupName = Codegen.ofNullable(clusterSubnetGroupName);
            return this;
        }
        public Builder clusterType(@Nullable Output<String> clusterType) {
            this.clusterType = clusterType;
            return this;
        }
        public Builder clusterType(@Nullable String clusterType) {
            this.clusterType = Codegen.ofNullable(clusterType);
            return this;
        }
        public Builder clusterVersion(@Nullable Output<String> clusterVersion) {
            this.clusterVersion = clusterVersion;
            return this;
        }
        public Builder clusterVersion(@Nullable String clusterVersion) {
            this.clusterVersion = Codegen.ofNullable(clusterVersion);
            return this;
        }
        public Builder databaseName(@Nullable Output<String> databaseName) {
            this.databaseName = databaseName;
            return this;
        }
        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = Codegen.ofNullable(databaseName);
            return this;
        }
        public Builder dnsName(@Nullable Output<String> dnsName) {
            this.dnsName = dnsName;
            return this;
        }
        public Builder dnsName(@Nullable String dnsName) {
            this.dnsName = Codegen.ofNullable(dnsName);
            return this;
        }
        public Builder elasticIp(@Nullable Output<String> elasticIp) {
            this.elasticIp = elasticIp;
            return this;
        }
        public Builder elasticIp(@Nullable String elasticIp) {
            this.elasticIp = Codegen.ofNullable(elasticIp);
            return this;
        }
        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            this.encrypted = encrypted;
            return this;
        }
        public Builder encrypted(@Nullable Boolean encrypted) {
            this.encrypted = Codegen.ofNullable(encrypted);
            return this;
        }
        public Builder endpoint(@Nullable Output<String> endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        public Builder endpoint(@Nullable String endpoint) {
            this.endpoint = Codegen.ofNullable(endpoint);
            return this;
        }
        public Builder enhancedVpcRouting(@Nullable Output<Boolean> enhancedVpcRouting) {
            this.enhancedVpcRouting = enhancedVpcRouting;
            return this;
        }
        public Builder enhancedVpcRouting(@Nullable Boolean enhancedVpcRouting) {
            this.enhancedVpcRouting = Codegen.ofNullable(enhancedVpcRouting);
            return this;
        }
        public Builder finalSnapshotIdentifier(@Nullable Output<String> finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = finalSnapshotIdentifier;
            return this;
        }
        public Builder finalSnapshotIdentifier(@Nullable String finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = Codegen.ofNullable(finalSnapshotIdentifier);
            return this;
        }
        public Builder iamRoles(@Nullable Output<List<String>> iamRoles) {
            this.iamRoles = iamRoles;
            return this;
        }
        public Builder iamRoles(@Nullable List<String> iamRoles) {
            this.iamRoles = Codegen.ofNullable(iamRoles);
            return this;
        }
        public Builder iamRoles(String... iamRoles) {
            return iamRoles(List.of(iamRoles));
        }
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Codegen.ofNullable(kmsKeyId);
            return this;
        }
        public Builder logging(@Nullable Output<ClusterLoggingGetArgs> logging) {
            this.logging = logging;
            return this;
        }
        public Builder logging(@Nullable ClusterLoggingGetArgs logging) {
            this.logging = Codegen.ofNullable(logging);
            return this;
        }
        public Builder masterPassword(@Nullable Output<String> masterPassword) {
            this.masterPassword = masterPassword;
            return this;
        }
        public Builder masterPassword(@Nullable String masterPassword) {
            this.masterPassword = Codegen.ofNullable(masterPassword);
            return this;
        }
        public Builder masterUsername(@Nullable Output<String> masterUsername) {
            this.masterUsername = masterUsername;
            return this;
        }
        public Builder masterUsername(@Nullable String masterUsername) {
            this.masterUsername = Codegen.ofNullable(masterUsername);
            return this;
        }
        public Builder nodeType(@Nullable Output<String> nodeType) {
            this.nodeType = nodeType;
            return this;
        }
        public Builder nodeType(@Nullable String nodeType) {
            this.nodeType = Codegen.ofNullable(nodeType);
            return this;
        }
        public Builder numberOfNodes(@Nullable Output<Integer> numberOfNodes) {
            this.numberOfNodes = numberOfNodes;
            return this;
        }
        public Builder numberOfNodes(@Nullable Integer numberOfNodes) {
            this.numberOfNodes = Codegen.ofNullable(numberOfNodes);
            return this;
        }
        public Builder ownerAccount(@Nullable Output<String> ownerAccount) {
            this.ownerAccount = ownerAccount;
            return this;
        }
        public Builder ownerAccount(@Nullable String ownerAccount) {
            this.ownerAccount = Codegen.ofNullable(ownerAccount);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }
        public Builder preferredMaintenanceWindow(@Nullable Output<String> preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }
        public Builder preferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Codegen.ofNullable(preferredMaintenanceWindow);
            return this;
        }
        public Builder publiclyAccessible(@Nullable Output<Boolean> publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }
        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = Codegen.ofNullable(publiclyAccessible);
            return this;
        }
        public Builder skipFinalSnapshot(@Nullable Output<Boolean> skipFinalSnapshot) {
            this.skipFinalSnapshot = skipFinalSnapshot;
            return this;
        }
        public Builder skipFinalSnapshot(@Nullable Boolean skipFinalSnapshot) {
            this.skipFinalSnapshot = Codegen.ofNullable(skipFinalSnapshot);
            return this;
        }
        public Builder snapshotClusterIdentifier(@Nullable Output<String> snapshotClusterIdentifier) {
            this.snapshotClusterIdentifier = snapshotClusterIdentifier;
            return this;
        }
        public Builder snapshotClusterIdentifier(@Nullable String snapshotClusterIdentifier) {
            this.snapshotClusterIdentifier = Codegen.ofNullable(snapshotClusterIdentifier);
            return this;
        }
        public Builder snapshotCopy(@Nullable Output<ClusterSnapshotCopyGetArgs> snapshotCopy) {
            this.snapshotCopy = snapshotCopy;
            return this;
        }
        public Builder snapshotCopy(@Nullable ClusterSnapshotCopyGetArgs snapshotCopy) {
            this.snapshotCopy = Codegen.ofNullable(snapshotCopy);
            return this;
        }
        public Builder snapshotIdentifier(@Nullable Output<String> snapshotIdentifier) {
            this.snapshotIdentifier = snapshotIdentifier;
            return this;
        }
        public Builder snapshotIdentifier(@Nullable String snapshotIdentifier) {
            this.snapshotIdentifier = Codegen.ofNullable(snapshotIdentifier);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder vpcSecurityGroupIds(@Nullable Output<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }
        public Builder vpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Codegen.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public Builder vpcSecurityGroupIds(String... vpcSecurityGroupIds) {
            return vpcSecurityGroupIds(List.of(vpcSecurityGroupIds));
        }        public ClusterState build() {
            return new ClusterState(allowVersionUpgrade, arn, automatedSnapshotRetentionPeriod, availabilityZone, clusterIdentifier, clusterNodes, clusterParameterGroupName, clusterPublicKey, clusterRevisionNumber, clusterSecurityGroups, clusterSubnetGroupName, clusterType, clusterVersion, databaseName, dnsName, elasticIp, encrypted, endpoint, enhancedVpcRouting, finalSnapshotIdentifier, iamRoles, kmsKeyId, logging, masterPassword, masterUsername, nodeType, numberOfNodes, ownerAccount, port, preferredMaintenanceWindow, publiclyAccessible, skipFinalSnapshot, snapshotClusterIdentifier, snapshotCopy, snapshotIdentifier, tags, tagsAll, vpcSecurityGroupIds);
        }
    }
}
