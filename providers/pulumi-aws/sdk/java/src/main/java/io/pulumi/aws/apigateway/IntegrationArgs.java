// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigateway;

import io.pulumi.aws.apigateway.inputs.IntegrationTlsConfigArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IntegrationArgs extends io.pulumi.resources.ResourceArgs {

    public static final IntegrationArgs Empty = new IntegrationArgs();

    /**
     * A list of cache key parameters for the integration.
     * 
     */
    @InputImport(name="cacheKeyParameters")
      private final @Nullable Input<List<String>> cacheKeyParameters;

    public Input<List<String>> getCacheKeyParameters() {
        return this.cacheKeyParameters == null ? Input.empty() : this.cacheKeyParameters;
    }

    /**
     * The integration's cache namespace.
     * 
     */
    @InputImport(name="cacheNamespace")
      private final @Nullable Input<String> cacheNamespace;

    public Input<String> getCacheNamespace() {
        return this.cacheNamespace == null ? Input.empty() : this.cacheNamespace;
    }

    /**
     * The id of the VpcLink used for the integration. **Required** if `connection_type` is `VPC_LINK`
     * 
     */
    @InputImport(name="connectionId")
      private final @Nullable Input<String> connectionId;

    public Input<String> getConnectionId() {
        return this.connectionId == null ? Input.empty() : this.connectionId;
    }

    /**
     * The integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
     * 
     */
    @InputImport(name="connectionType")
      private final @Nullable Input<String> connectionType;

    public Input<String> getConnectionType() {
        return this.connectionType == null ? Input.empty() : this.connectionType;
    }

    /**
     * Specifies how to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
     * 
     */
    @InputImport(name="contentHandling")
      private final @Nullable Input<String> contentHandling;

    public Input<String> getContentHandling() {
        return this.contentHandling == null ? Input.empty() : this.contentHandling;
    }

    /**
     * The credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
     * 
     */
    @InputImport(name="credentials")
      private final @Nullable Input<String> credentials;

    public Input<String> getCredentials() {
        return this.credentials == null ? Input.empty() : this.credentials;
    }

    /**
     * The HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
     * when calling the associated resource.
     * 
     */
    @InputImport(name="httpMethod", required=true)
      private final Input<String> httpMethod;

    public Input<String> getHttpMethod() {
        return this.httpMethod;
    }

    /**
     * The integration HTTP method
     * (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
     * **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
     * Not all methods are compatible with all `AWS` integrations.
     * e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
     * 
     */
    @InputImport(name="integrationHttpMethod")
      private final @Nullable Input<String> integrationHttpMethod;

    public Input<String> getIntegrationHttpMethod() {
        return this.integrationHttpMethod == null ? Input.empty() : this.integrationHttpMethod;
    }

    /**
     * The integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `request_templates` is used.
     * 
     */
    @InputImport(name="passthroughBehavior")
      private final @Nullable Input<String> passthroughBehavior;

    public Input<String> getPassthroughBehavior() {
        return this.passthroughBehavior == null ? Input.empty() : this.passthroughBehavior;
    }

    /**
     * A map of request query string parameters and headers that should be passed to the backend responder.
     * For example: `request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
     * 
     */
    @InputImport(name="requestParameters")
      private final @Nullable Input<Map<String,String>> requestParameters;

    public Input<Map<String,String>> getRequestParameters() {
        return this.requestParameters == null ? Input.empty() : this.requestParameters;
    }

    /**
     * A map of the integration's request templates.
     * 
     */
    @InputImport(name="requestTemplates")
      private final @Nullable Input<Map<String,String>> requestTemplates;

    public Input<Map<String,String>> getRequestTemplates() {
        return this.requestTemplates == null ? Input.empty() : this.requestTemplates;
    }

    /**
     * The API resource ID.
     * 
     */
    @InputImport(name="resourceId", required=true)
      private final Input<String> resourceId;

    public Input<String> getResourceId() {
        return this.resourceId;
    }

    /**
     * The ID of the associated REST API.
     * 
     */
    @InputImport(name="restApi", required=true)
      private final Input<String> restApi;

    public Input<String> getRestApi() {
        return this.restApi;
    }

    /**
     * Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
     * 
     */
    @InputImport(name="timeoutMilliseconds")
      private final @Nullable Input<Integer> timeoutMilliseconds;

    public Input<Integer> getTimeoutMilliseconds() {
        return this.timeoutMilliseconds == null ? Input.empty() : this.timeoutMilliseconds;
    }

    /**
     * Configuration block specifying the TLS configuration for an integration. Defined below.
     * 
     */
    @InputImport(name="tlsConfig")
      private final @Nullable Input<IntegrationTlsConfigArgs> tlsConfig;

    public Input<IntegrationTlsConfigArgs> getTlsConfig() {
        return this.tlsConfig == null ? Input.empty() : this.tlsConfig;
    }

    /**
     * The integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connection_type` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    /**
     * The input's URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
     * For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
     * e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
     * 
     */
    @InputImport(name="uri")
      private final @Nullable Input<String> uri;

    public Input<String> getUri() {
        return this.uri == null ? Input.empty() : this.uri;
    }

    public IntegrationArgs(
        @Nullable Input<List<String>> cacheKeyParameters,
        @Nullable Input<String> cacheNamespace,
        @Nullable Input<String> connectionId,
        @Nullable Input<String> connectionType,
        @Nullable Input<String> contentHandling,
        @Nullable Input<String> credentials,
        Input<String> httpMethod,
        @Nullable Input<String> integrationHttpMethod,
        @Nullable Input<String> passthroughBehavior,
        @Nullable Input<Map<String,String>> requestParameters,
        @Nullable Input<Map<String,String>> requestTemplates,
        Input<String> resourceId,
        Input<String> restApi,
        @Nullable Input<Integer> timeoutMilliseconds,
        @Nullable Input<IntegrationTlsConfigArgs> tlsConfig,
        Input<String> type,
        @Nullable Input<String> uri) {
        this.cacheKeyParameters = cacheKeyParameters;
        this.cacheNamespace = cacheNamespace;
        this.connectionId = connectionId;
        this.connectionType = connectionType;
        this.contentHandling = contentHandling;
        this.credentials = credentials;
        this.httpMethod = Objects.requireNonNull(httpMethod, "expected parameter 'httpMethod' to be non-null");
        this.integrationHttpMethod = integrationHttpMethod;
        this.passthroughBehavior = passthroughBehavior;
        this.requestParameters = requestParameters;
        this.requestTemplates = requestTemplates;
        this.resourceId = Objects.requireNonNull(resourceId, "expected parameter 'resourceId' to be non-null");
        this.restApi = Objects.requireNonNull(restApi, "expected parameter 'restApi' to be non-null");
        this.timeoutMilliseconds = timeoutMilliseconds;
        this.tlsConfig = tlsConfig;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.uri = uri;
    }

    private IntegrationArgs() {
        this.cacheKeyParameters = Input.empty();
        this.cacheNamespace = Input.empty();
        this.connectionId = Input.empty();
        this.connectionType = Input.empty();
        this.contentHandling = Input.empty();
        this.credentials = Input.empty();
        this.httpMethod = Input.empty();
        this.integrationHttpMethod = Input.empty();
        this.passthroughBehavior = Input.empty();
        this.requestParameters = Input.empty();
        this.requestTemplates = Input.empty();
        this.resourceId = Input.empty();
        this.restApi = Input.empty();
        this.timeoutMilliseconds = Input.empty();
        this.tlsConfig = Input.empty();
        this.type = Input.empty();
        this.uri = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> cacheKeyParameters;
        private @Nullable Input<String> cacheNamespace;
        private @Nullable Input<String> connectionId;
        private @Nullable Input<String> connectionType;
        private @Nullable Input<String> contentHandling;
        private @Nullable Input<String> credentials;
        private Input<String> httpMethod;
        private @Nullable Input<String> integrationHttpMethod;
        private @Nullable Input<String> passthroughBehavior;
        private @Nullable Input<Map<String,String>> requestParameters;
        private @Nullable Input<Map<String,String>> requestTemplates;
        private Input<String> resourceId;
        private Input<String> restApi;
        private @Nullable Input<Integer> timeoutMilliseconds;
        private @Nullable Input<IntegrationTlsConfigArgs> tlsConfig;
        private Input<String> type;
        private @Nullable Input<String> uri;

        public Builder() {
    	      // Empty
        }

        public Builder(IntegrationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheKeyParameters = defaults.cacheKeyParameters;
    	      this.cacheNamespace = defaults.cacheNamespace;
    	      this.connectionId = defaults.connectionId;
    	      this.connectionType = defaults.connectionType;
    	      this.contentHandling = defaults.contentHandling;
    	      this.credentials = defaults.credentials;
    	      this.httpMethod = defaults.httpMethod;
    	      this.integrationHttpMethod = defaults.integrationHttpMethod;
    	      this.passthroughBehavior = defaults.passthroughBehavior;
    	      this.requestParameters = defaults.requestParameters;
    	      this.requestTemplates = defaults.requestTemplates;
    	      this.resourceId = defaults.resourceId;
    	      this.restApi = defaults.restApi;
    	      this.timeoutMilliseconds = defaults.timeoutMilliseconds;
    	      this.tlsConfig = defaults.tlsConfig;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
        }

        public Builder setCacheKeyParameters(@Nullable Input<List<String>> cacheKeyParameters) {
            this.cacheKeyParameters = cacheKeyParameters;
            return this;
        }

        public Builder setCacheKeyParameters(@Nullable List<String> cacheKeyParameters) {
            this.cacheKeyParameters = Input.ofNullable(cacheKeyParameters);
            return this;
        }

        public Builder setCacheNamespace(@Nullable Input<String> cacheNamespace) {
            this.cacheNamespace = cacheNamespace;
            return this;
        }

        public Builder setCacheNamespace(@Nullable String cacheNamespace) {
            this.cacheNamespace = Input.ofNullable(cacheNamespace);
            return this;
        }

        public Builder setConnectionId(@Nullable Input<String> connectionId) {
            this.connectionId = connectionId;
            return this;
        }

        public Builder setConnectionId(@Nullable String connectionId) {
            this.connectionId = Input.ofNullable(connectionId);
            return this;
        }

        public Builder setConnectionType(@Nullable Input<String> connectionType) {
            this.connectionType = connectionType;
            return this;
        }

        public Builder setConnectionType(@Nullable String connectionType) {
            this.connectionType = Input.ofNullable(connectionType);
            return this;
        }

        public Builder setContentHandling(@Nullable Input<String> contentHandling) {
            this.contentHandling = contentHandling;
            return this;
        }

        public Builder setContentHandling(@Nullable String contentHandling) {
            this.contentHandling = Input.ofNullable(contentHandling);
            return this;
        }

        public Builder setCredentials(@Nullable Input<String> credentials) {
            this.credentials = credentials;
            return this;
        }

        public Builder setCredentials(@Nullable String credentials) {
            this.credentials = Input.ofNullable(credentials);
            return this;
        }

        public Builder setHttpMethod(Input<String> httpMethod) {
            this.httpMethod = Objects.requireNonNull(httpMethod);
            return this;
        }

        public Builder setHttpMethod(String httpMethod) {
            this.httpMethod = Input.of(Objects.requireNonNull(httpMethod));
            return this;
        }

        public Builder setIntegrationHttpMethod(@Nullable Input<String> integrationHttpMethod) {
            this.integrationHttpMethod = integrationHttpMethod;
            return this;
        }

        public Builder setIntegrationHttpMethod(@Nullable String integrationHttpMethod) {
            this.integrationHttpMethod = Input.ofNullable(integrationHttpMethod);
            return this;
        }

        public Builder setPassthroughBehavior(@Nullable Input<String> passthroughBehavior) {
            this.passthroughBehavior = passthroughBehavior;
            return this;
        }

        public Builder setPassthroughBehavior(@Nullable String passthroughBehavior) {
            this.passthroughBehavior = Input.ofNullable(passthroughBehavior);
            return this;
        }

        public Builder setRequestParameters(@Nullable Input<Map<String,String>> requestParameters) {
            this.requestParameters = requestParameters;
            return this;
        }

        public Builder setRequestParameters(@Nullable Map<String,String> requestParameters) {
            this.requestParameters = Input.ofNullable(requestParameters);
            return this;
        }

        public Builder setRequestTemplates(@Nullable Input<Map<String,String>> requestTemplates) {
            this.requestTemplates = requestTemplates;
            return this;
        }

        public Builder setRequestTemplates(@Nullable Map<String,String> requestTemplates) {
            this.requestTemplates = Input.ofNullable(requestTemplates);
            return this;
        }

        public Builder setResourceId(Input<String> resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }

        public Builder setResourceId(String resourceId) {
            this.resourceId = Input.of(Objects.requireNonNull(resourceId));
            return this;
        }

        public Builder setRestApi(Input<String> restApi) {
            this.restApi = Objects.requireNonNull(restApi);
            return this;
        }

        public Builder setTimeoutMilliseconds(@Nullable Input<Integer> timeoutMilliseconds) {
            this.timeoutMilliseconds = timeoutMilliseconds;
            return this;
        }

        public Builder setTimeoutMilliseconds(@Nullable Integer timeoutMilliseconds) {
            this.timeoutMilliseconds = Input.ofNullable(timeoutMilliseconds);
            return this;
        }

        public Builder setTlsConfig(@Nullable Input<IntegrationTlsConfigArgs> tlsConfig) {
            this.tlsConfig = tlsConfig;
            return this;
        }

        public Builder setTlsConfig(@Nullable IntegrationTlsConfigArgs tlsConfig) {
            this.tlsConfig = Input.ofNullable(tlsConfig);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder setUri(@Nullable Input<String> uri) {
            this.uri = uri;
            return this;
        }

        public Builder setUri(@Nullable String uri) {
            this.uri = Input.ofNullable(uri);
            return this;
        }
        public IntegrationArgs build() {
            return new IntegrationArgs(cacheKeyParameters, cacheNamespace, connectionId, connectionType, contentHandling, credentials, httpMethod, integrationHttpMethod, passthroughBehavior, requestParameters, requestTemplates, resourceId, restApi, timeoutMilliseconds, tlsConfig, type, uri);
        }
    }
}
