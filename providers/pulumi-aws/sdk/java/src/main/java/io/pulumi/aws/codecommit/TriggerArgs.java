// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codecommit;

import io.pulumi.aws.codecommit.inputs.TriggerTriggerArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class TriggerArgs extends io.pulumi.resources.ResourceArgs {

    public static final TriggerArgs Empty = new TriggerArgs();

    /**
     * The name for the repository. This needs to be less than 100 characters.
     * 
     */
    @InputImport(name="repositoryName", required=true)
      private final Input<String> repositoryName;

    public Input<String> getRepositoryName() {
        return this.repositoryName;
    }

    @InputImport(name="triggers", required=true)
      private final Input<List<TriggerTriggerArgs>> triggers;

    public Input<List<TriggerTriggerArgs>> getTriggers() {
        return this.triggers;
    }

    public TriggerArgs(
        Input<String> repositoryName,
        Input<List<TriggerTriggerArgs>> triggers) {
        this.repositoryName = Objects.requireNonNull(repositoryName, "expected parameter 'repositoryName' to be non-null");
        this.triggers = Objects.requireNonNull(triggers, "expected parameter 'triggers' to be non-null");
    }

    private TriggerArgs() {
        this.repositoryName = Input.empty();
        this.triggers = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> repositoryName;
        private Input<List<TriggerTriggerArgs>> triggers;

        public Builder() {
    	      // Empty
        }

        public Builder(TriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.repositoryName = defaults.repositoryName;
    	      this.triggers = defaults.triggers;
        }

        public Builder setRepositoryName(Input<String> repositoryName) {
            this.repositoryName = Objects.requireNonNull(repositoryName);
            return this;
        }

        public Builder setRepositoryName(String repositoryName) {
            this.repositoryName = Input.of(Objects.requireNonNull(repositoryName));
            return this;
        }

        public Builder setTriggers(Input<List<TriggerTriggerArgs>> triggers) {
            this.triggers = Objects.requireNonNull(triggers);
            return this;
        }

        public Builder setTriggers(List<TriggerTriggerArgs> triggers) {
            this.triggers = Input.of(Objects.requireNonNull(triggers));
            return this;
        }
        public TriggerArgs build() {
            return new TriggerArgs(repositoryName, triggers);
        }
    }
}
