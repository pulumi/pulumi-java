// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.cloudwatch.EventBusPolicyArgs;
import io.pulumi.aws.cloudwatch.inputs.EventBusPolicyState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a resource to create an EventBridge resource policy to support cross-account events.
 * 
 * > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
 * 
 * > **Note:** The EventBridge bus policy resource  (`aws.cloudwatch.EventBusPolicy`) is incompatible with the EventBridge permission resource (`aws.cloudwatch.EventPermission`) and will overwrite permissions.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Account Access
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testPolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         sid: "DevAccountAccess",
 *         effect: "Allow",
 *         actions: ["events:PutEvents"],
 *         resources: ["arn:aws:events:eu-west-1:123456789012:event-bus/default"],
 *         principals: [{
 *             type: "AWS",
 *             identifiers: ["123456789012"],
 *         }],
 *     }],
 * });
 * const testEventBusPolicy = new aws.cloudwatch.EventBusPolicy("testEventBusPolicy", {
 *     policy: testPolicyDocument.then(testPolicyDocument => testPolicyDocument.json),
 *     eventBusName: aws_cloudwatch_event_bus.test.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test_policy_document = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     sid="DevAccountAccess",
 *     effect="Allow",
 *     actions=["events:PutEvents"],
 *     resources=["arn:aws:events:eu-west-1:123456789012:event-bus/default"],
 *     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *         type="AWS",
 *         identifiers=["123456789012"],
 *     )],
 * )])
 * test_event_bus_policy = aws.cloudwatch.EventBusPolicy("testEventBusPolicy",
 *     policy=test_policy_document.json,
 *     event_bus_name=aws_cloudwatch_event_bus["test"]["name"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var testPolicyDocument = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Sid = "DevAccountAccess",
 *                     Effect = "Allow",
 *                     Actions = 
 *                     {
 *                         "events:PutEvents",
 *                     },
 *                     Resources = 
 *                     {
 *                         "arn:aws:events:eu-west-1:123456789012:event-bus/default",
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                         {
 *                             Type = "AWS",
 *                             Identifiers = 
 *                             {
 *                                 "123456789012",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         }));
 *         var testEventBusPolicy = new Aws.CloudWatch.EventBusPolicy("testEventBusPolicy", new Aws.CloudWatch.EventBusPolicyArgs
 *         {
 *             Policy = testPolicyDocument.Apply(testPolicyDocument => testPolicyDocument.Json),
 *             EventBusName = aws_cloudwatch_event_bus.Test.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		testPolicyDocument, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Sid:    "DevAccountAccess",
 * 					Effect: "Allow",
 * 					Actions: []string{
 * 						"events:PutEvents",
 * 					},
 * 					Resources: []string{
 * 						"arn:aws:events:eu-west-1:123456789012:event-bus/default",
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Type: "AWS",
 * 							Identifiers: []string{
 * 								"123456789012",
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventBusPolicy(ctx, "testEventBusPolicy", &cloudwatch.EventBusPolicyArgs{
 * 			Policy:       pulumi.String(testPolicyDocument.Json),
 * 			EventBusName: pulumi.Any(aws_cloudwatch_event_bus.Test.Name),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Organization Access
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testPolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         sid: "OrganizationAccess",
 *         effect: "Allow",
 *         actions: [
 *             "events:DescribeRule",
 *             "events:ListRules",
 *             "events:ListTargetsByRule",
 *             "events:ListTagsForResource",
 *         ],
 *         resources: [
 *             "arn:aws:events:eu-west-1:123456789012:rule/*",
 *             "arn:aws:events:eu-west-1:123456789012:event-bus/default",
 *         ],
 *         principals: [{
 *             type: "AWS",
 *             identifiers: ["*"],
 *         }],
 *         conditions: [{
 *             test: "StringEquals",
 *             variable: "aws:PrincipalOrgID",
 *             values: aws_organizations_organization.example.id,
 *         }],
 *     }],
 * });
 * const testEventBusPolicy = new aws.cloudwatch.EventBusPolicy("testEventBusPolicy", {
 *     policy: testPolicyDocument.then(testPolicyDocument => testPolicyDocument.json),
 *     eventBusName: aws_cloudwatch_event_bus.test.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test_policy_document = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     sid="OrganizationAccess",
 *     effect="Allow",
 *     actions=[
 *         "events:DescribeRule",
 *         "events:ListRules",
 *         "events:ListTargetsByRule",
 *         "events:ListTagsForResource",
 *     ],
 *     resources=[
 *         "arn:aws:events:eu-west-1:123456789012:rule/*",
 *         "arn:aws:events:eu-west-1:123456789012:event-bus/default",
 *     ],
 *     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *         type="AWS",
 *         identifiers=["*"],
 *     )],
 *     conditions=[aws.iam.GetPolicyDocumentStatementConditionArgs(
 *         test="StringEquals",
 *         variable="aws:PrincipalOrgID",
 *         values=aws_organizations_organization["example"]["id"],
 *     )],
 * )])
 * test_event_bus_policy = aws.cloudwatch.EventBusPolicy("testEventBusPolicy",
 *     policy=test_policy_document.json,
 *     event_bus_name=aws_cloudwatch_event_bus["test"]["name"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var testPolicyDocument = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Sid = "OrganizationAccess",
 *                     Effect = "Allow",
 *                     Actions = 
 *                     {
 *                         "events:DescribeRule",
 *                         "events:ListRules",
 *                         "events:ListTargetsByRule",
 *                         "events:ListTagsForResource",
 *                     },
 *                     Resources = 
 *                     {
 *                         "arn:aws:events:eu-west-1:123456789012:rule/*",
 *                         "arn:aws:events:eu-west-1:123456789012:event-bus/default",
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                         {
 *                             Type = "AWS",
 *                             Identifiers = 
 *                             {
 *                                 "*",
 *                             },
 *                         },
 *                     },
 *                     Conditions = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionArgs
 *                         {
 *                             Test = "StringEquals",
 *                             Variable = "aws:PrincipalOrgID",
 *                             Values = aws_organizations_organization.Example.Id,
 *                         },
 *                     },
 *                 },
 *             },
 *         }));
 *         var testEventBusPolicy = new Aws.CloudWatch.EventBusPolicy("testEventBusPolicy", new Aws.CloudWatch.EventBusPolicyArgs
 *         {
 *             Policy = testPolicyDocument.Apply(testPolicyDocument => testPolicyDocument.Json),
 *             EventBusName = aws_cloudwatch_event_bus.Test.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		testPolicyDocument, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Sid:    "OrganizationAccess",
 * 					Effect: "Allow",
 * 					Actions: []string{
 * 						"events:DescribeRule",
 * 						"events:ListRules",
 * 						"events:ListTargetsByRule",
 * 						"events:ListTagsForResource",
 * 					},
 * 					Resources: []string{
 * 						"arn:aws:events:eu-west-1:123456789012:rule/*",
 * 						"arn:aws:events:eu-west-1:123456789012:event-bus/default",
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Type: "AWS",
 * 							Identifiers: []string{
 * 								"*",
 * 							},
 * 						},
 * 					},
 * 					Conditions: []iam.GetPolicyDocumentStatementCondition{
 * 						iam.GetPolicyDocumentStatementCondition{
 * 							Test:     "StringEquals",
 * 							Variable: "aws:PrincipalOrgID",
 * 							Values:   aws_organizations_organization.Example.Id,
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventBusPolicy(ctx, "testEventBusPolicy", &cloudwatch.EventBusPolicyArgs{
 * 			Policy:       pulumi.String(testPolicyDocument.Json),
 * 			EventBusName: pulumi.Any(aws_cloudwatch_event_bus.Test.Name),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Multiple Statements
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testPolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [
 *         {
 *             sid: "DevAccountAccess",
 *             effect: "Allow",
 *             actions: ["events:PutEvents"],
 *             resources: ["arn:aws:events:eu-west-1:123456789012:event-bus/default"],
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: ["123456789012"],
 *             }],
 *         },
 *         {
 *             sid: "OrganizationAccess",
 *             effect: "Allow",
 *             actions: [
 *                 "events:DescribeRule",
 *                 "events:ListRules",
 *                 "events:ListTargetsByRule",
 *                 "events:ListTagsForResource",
 *             ],
 *             resources: [
 *                 "arn:aws:events:eu-west-1:123456789012:rule/*",
 *                 "arn:aws:events:eu-west-1:123456789012:event-bus/default",
 *             ],
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: ["*"],
 *             }],
 *             conditions: [{
 *                 test: "StringEquals",
 *                 variable: "aws:PrincipalOrgID",
 *                 values: aws_organizations_organization.example.id,
 *             }],
 *         },
 *     ],
 * });
 * const testEventBusPolicy = new aws.cloudwatch.EventBusPolicy("testEventBusPolicy", {
 *     policy: testPolicyDocument.then(testPolicyDocument => testPolicyDocument.json),
 *     eventBusName: aws_cloudwatch_event_bus.test.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test_policy_document = aws.iam.get_policy_document(statements=[
 *     aws.iam.GetPolicyDocumentStatementArgs(
 *         sid="DevAccountAccess",
 *         effect="Allow",
 *         actions=["events:PutEvents"],
 *         resources=["arn:aws:events:eu-west-1:123456789012:event-bus/default"],
 *         principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *             type="AWS",
 *             identifiers=["123456789012"],
 *         )],
 *     ),
 *     aws.iam.GetPolicyDocumentStatementArgs(
 *         sid="OrganizationAccess",
 *         effect="Allow",
 *         actions=[
 *             "events:DescribeRule",
 *             "events:ListRules",
 *             "events:ListTargetsByRule",
 *             "events:ListTagsForResource",
 *         ],
 *         resources=[
 *             "arn:aws:events:eu-west-1:123456789012:rule/*",
 *             "arn:aws:events:eu-west-1:123456789012:event-bus/default",
 *         ],
 *         principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *             type="AWS",
 *             identifiers=["*"],
 *         )],
 *         conditions=[aws.iam.GetPolicyDocumentStatementConditionArgs(
 *             test="StringEquals",
 *             variable="aws:PrincipalOrgID",
 *             values=aws_organizations_organization["example"]["id"],
 *         )],
 *     ),
 * ])
 * test_event_bus_policy = aws.cloudwatch.EventBusPolicy("testEventBusPolicy",
 *     policy=test_policy_document.json,
 *     event_bus_name=aws_cloudwatch_event_bus["test"]["name"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var testPolicyDocument = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Sid = "DevAccountAccess",
 *                     Effect = "Allow",
 *                     Actions = 
 *                     {
 *                         "events:PutEvents",
 *                     },
 *                     Resources = 
 *                     {
 *                         "arn:aws:events:eu-west-1:123456789012:event-bus/default",
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                         {
 *                             Type = "AWS",
 *                             Identifiers = 
 *                             {
 *                                 "123456789012",
 *                             },
 *                         },
 *                     },
 *                 },
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Sid = "OrganizationAccess",
 *                     Effect = "Allow",
 *                     Actions = 
 *                     {
 *                         "events:DescribeRule",
 *                         "events:ListRules",
 *                         "events:ListTargetsByRule",
 *                         "events:ListTagsForResource",
 *                     },
 *                     Resources = 
 *                     {
 *                         "arn:aws:events:eu-west-1:123456789012:rule/*",
 *                         "arn:aws:events:eu-west-1:123456789012:event-bus/default",
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                         {
 *                             Type = "AWS",
 *                             Identifiers = 
 *                             {
 *                                 "*",
 *                             },
 *                         },
 *                     },
 *                     Conditions = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionArgs
 *                         {
 *                             Test = "StringEquals",
 *                             Variable = "aws:PrincipalOrgID",
 *                             Values = aws_organizations_organization.Example.Id,
 *                         },
 *                     },
 *                 },
 *             },
 *         }));
 *         var testEventBusPolicy = new Aws.CloudWatch.EventBusPolicy("testEventBusPolicy", new Aws.CloudWatch.EventBusPolicyArgs
 *         {
 *             Policy = testPolicyDocument.Apply(testPolicyDocument => testPolicyDocument.Json),
 *             EventBusName = aws_cloudwatch_event_bus.Test.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		testPolicyDocument, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Sid:    "DevAccountAccess",
 * 					Effect: "Allow",
 * 					Actions: []string{
 * 						"events:PutEvents",
 * 					},
 * 					Resources: []string{
 * 						"arn:aws:events:eu-west-1:123456789012:event-bus/default",
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Type: "AWS",
 * 							Identifiers: []string{
 * 								"123456789012",
 * 							},
 * 						},
 * 					},
 * 				},
 * 				iam.GetPolicyDocumentStatement{
 * 					Sid:    "OrganizationAccess",
 * 					Effect: "Allow",
 * 					Actions: []string{
 * 						"events:DescribeRule",
 * 						"events:ListRules",
 * 						"events:ListTargetsByRule",
 * 						"events:ListTagsForResource",
 * 					},
 * 					Resources: []string{
 * 						"arn:aws:events:eu-west-1:123456789012:rule/*",
 * 						"arn:aws:events:eu-west-1:123456789012:event-bus/default",
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Type: "AWS",
 * 							Identifiers: []string{
 * 								"*",
 * 							},
 * 						},
 * 					},
 * 					Conditions: []iam.GetPolicyDocumentStatementCondition{
 * 						iam.GetPolicyDocumentStatementCondition{
 * 							Test:     "StringEquals",
 * 							Variable: "aws:PrincipalOrgID",
 * 							Values:   aws_organizations_organization.Example.Id,
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventBusPolicy(ctx, "testEventBusPolicy", &cloudwatch.EventBusPolicyArgs{
 * 			Policy:       pulumi.String(testPolicyDocument.Json),
 * 			EventBusName: pulumi.Any(aws_cloudwatch_event_bus.Test.Name),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * EventBridge permissions can be imported using the `event_bus_name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:cloudwatch/eventBusPolicy:EventBusPolicy DevAccountAccess example-event-bus
 * ```
 * 
 *  
 */
@ResourceType(type="aws:cloudwatch/eventBusPolicy:EventBusPolicy")
public class EventBusPolicy extends io.pulumi.resources.CustomResource {
    /**
     * The event bus to set the permissions on. If you omit this, the permissions are set on the `default` event bus.
     * 
     */
    @Export(name="eventBusName", type=String.class, parameters={})
    private Output</* @Nullable */ String> eventBusName;

    /**
     * @return The event bus to set the permissions on. If you omit this, the permissions are set on the `default` event bus.
     * 
     */
    public Output</* @Nullable */ String> getEventBusName() {
        return this.eventBusName;
    }
    @Export(name="policy", type=String.class, parameters={})
    private Output<String> policy;

    public Output<String> getPolicy() {
        return this.policy;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventBusPolicy(String name) {
        this(name, EventBusPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventBusPolicy(String name, EventBusPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventBusPolicy(String name, EventBusPolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventBusPolicy:EventBusPolicy", name, args == null ? EventBusPolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private EventBusPolicy(String name, Output<String> id, @Nullable EventBusPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventBusPolicy:EventBusPolicy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventBusPolicy get(String name, Output<String> id, @Nullable EventBusPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new EventBusPolicy(name, id, state, options);
    }
}
