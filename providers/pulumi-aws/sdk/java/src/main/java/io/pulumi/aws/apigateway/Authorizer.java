// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigateway;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.apigateway.AuthorizerArgs;
import io.pulumi.aws.apigateway.inputs.AuthorizerState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Provides an API Gateway Authorizer.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const demoRestApi = new aws.apigateway.RestApi("demoRestApi", {});
 * const invocationRole = new aws.iam.Role("invocationRole", {
 *     path: "/",
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "apigateway.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const lambda = new aws.iam.Role("lambda", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "lambda.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const authorizer = new aws.lambda.Function("authorizer", {
 *     code: new pulumi.asset.FileArchive("lambda-function.zip"),
 *     role: lambda.arn,
 *     handler: "exports.example",
 * });
 * const demoAuthorizer = new aws.apigateway.Authorizer("demoAuthorizer", {
 *     restApi: demoRestApi.id,
 *     authorizerUri: authorizer.invokeArn,
 *     authorizerCredentials: invocationRole.arn,
 * });
 * const invocationPolicy = new aws.iam.RolePolicy("invocationPolicy", {
 *     role: invocationRole.id,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "lambda:InvokeFunction",
 *       "Effect": "Allow",
 *       "Resource": "${authorizer.arn}"
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * demo_rest_api = aws.apigateway.RestApi("demoRestApi")
 * invocation_role = aws.iam.Role("invocationRole",
 *     path="/",
 *     assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "apigateway.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * """)
 * lambda_ = aws.iam.Role("lambda", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "lambda.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * """)
 * authorizer = aws.lambda_.Function("authorizer",
 *     code=pulumi.FileArchive("lambda-function.zip"),
 *     role=lambda_.arn,
 *     handler="exports.example")
 * demo_authorizer = aws.apigateway.Authorizer("demoAuthorizer",
 *     rest_api=demo_rest_api.id,
 *     authorizer_uri=authorizer.invoke_arn,
 *     authorizer_credentials=invocation_role.arn)
 * invocation_policy = aws.iam.RolePolicy("invocationPolicy",
 *     role=invocation_role.id,
 *     policy=authorizer.arn.apply(lambda arn: f"""{{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {{
 *       "Action": "lambda:InvokeFunction",
 *       "Effect": "Allow",
 *       "Resource": "{arn}"
 *     }}
 *   ]
 * }}
 * """))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var demoRestApi = new Aws.ApiGateway.RestApi("demoRestApi", new Aws.ApiGateway.RestApiArgs
 *         {
 *         });
 *         var invocationRole = new Aws.Iam.Role("invocationRole", new Aws.Iam.RoleArgs
 *         {
 *             Path = "/",
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": ""sts:AssumeRole"",
 *       ""Principal"": {
 *         ""Service"": ""apigateway.amazonaws.com""
 *       },
 *       ""Effect"": ""Allow"",
 *       ""Sid"": """"
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var lambda = new Aws.Iam.Role("lambda", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": ""sts:AssumeRole"",
 *       ""Principal"": {
 *         ""Service"": ""lambda.amazonaws.com""
 *       },
 *       ""Effect"": ""Allow"",
 *       ""Sid"": """"
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var authorizer = new Aws.Lambda.Function("authorizer", new Aws.Lambda.FunctionArgs
 *         {
 *             Code = new FileArchive("lambda-function.zip"),
 *             Role = lambda.Arn,
 *             Handler = "exports.example",
 *         });
 *         var demoAuthorizer = new Aws.ApiGateway.Authorizer("demoAuthorizer", new Aws.ApiGateway.AuthorizerArgs
 *         {
 *             RestApi = demoRestApi.Id,
 *             AuthorizerUri = authorizer.InvokeArn,
 *             AuthorizerCredentials = invocationRole.Arn,
 *         });
 *         var invocationPolicy = new Aws.Iam.RolePolicy("invocationPolicy", new Aws.Iam.RolePolicyArgs
 *         {
 *             Role = invocationRole.Id,
 *             Policy = authorizer.Arn.Apply(arn => @$"{{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {{
 *       ""Action"": ""lambda:InvokeFunction"",
 *       ""Effect"": ""Allow"",
 *       ""Resource"": ""{arn}""
 *     }}
 *   ]
 * }}
 * "),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/apigateway"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/lambda"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		demoRestApi, err := apigateway.NewRestApi(ctx, "demoRestApi", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		invocationRole, err := iam.NewRole(ctx, "invocationRole", &iam.RoleArgs{
 * 			Path:             pulumi.String("/"),
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"apigateway.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		lambda, err := iam.NewRole(ctx, "lambda", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"lambda.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		authorizer, err := lambda.NewFunction(ctx, "authorizer", &lambda.FunctionArgs{
 * 			Code:    pulumi.NewFileArchive("lambda-function.zip"),
 * 			Role:    lambda.Arn,
 * 			Handler: pulumi.String("exports.example"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = apigateway.NewAuthorizer(ctx, "demoAuthorizer", &apigateway.AuthorizerArgs{
 * 			RestApi:               demoRestApi.ID(),
 * 			AuthorizerUri:         authorizer.InvokeArn,
 * 			AuthorizerCredentials: invocationRole.Arn,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicy(ctx, "invocationPolicy", &iam.RolePolicyArgs{
 * 			Role: invocationRole.ID(),
 * 			Policy: authorizer.Arn.ApplyT(func(arn string) (string, error) {
 * 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"lambda:InvokeFunction\",\n", "      \"Effect\": \"Allow\",\n", "      \"Resource\": \"", arn, "\"\n", "    }\n", "  ]\n", "}\n"), nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * AWS API Gateway Authorizer can be imported using the `REST-API-ID/AUTHORIZER-ID`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:apigateway/authorizer:Authorizer authorizer 12345abcde/example
 * ```
 * 
 *  
 */
@ResourceType(type="aws:apigateway/authorizer:Authorizer")
public class Authorizer extends io.pulumi.resources.CustomResource {
    /**
     * The credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.
     * 
     */
    @Export(name="authorizerCredentials", type=String.class, parameters={})
    private Output</* @Nullable */ String> authorizerCredentials;

    /**
     * @return The credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.
     * 
     */
    public Output</* @Nullable */ String> getAuthorizerCredentials() {
        return this.authorizerCredentials;
    }
    /**
     * The TTL of cached authorizer results in seconds. Defaults to `300`.
     * 
     */
    @Export(name="authorizerResultTtlInSeconds", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> authorizerResultTtlInSeconds;

    /**
     * @return The TTL of cached authorizer results in seconds. Defaults to `300`.
     * 
     */
    public Output</* @Nullable */ Integer> getAuthorizerResultTtlInSeconds() {
        return this.authorizerResultTtlInSeconds;
    }
    /**
     * The authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of `arn:aws:apigateway:{region}:lambda:path/{service_api}`,
     * e.g., `arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations`
     * 
     */
    @Export(name="authorizerUri", type=String.class, parameters={})
    private Output</* @Nullable */ String> authorizerUri;

    /**
     * @return The authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of `arn:aws:apigateway:{region}:lambda:path/{service_api}`,
     * e.g., `arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations`
     * 
     */
    public Output</* @Nullable */ String> getAuthorizerUri() {
        return this.authorizerUri;
    }
    /**
     * The source of the identity in an incoming request. Defaults to `method.request.header.Authorization`. For `REQUEST` type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., `"method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"`
     * 
     */
    @Export(name="identitySource", type=String.class, parameters={})
    private Output</* @Nullable */ String> identitySource;

    /**
     * @return The source of the identity in an incoming request. Defaults to `method.request.header.Authorization`. For `REQUEST` type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., `"method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"`
     * 
     */
    public Output</* @Nullable */ String> getIdentitySource() {
        return this.identitySource;
    }
    /**
     * A validation expression for the incoming identity. For `TOKEN` type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.
     * 
     */
    @Export(name="identityValidationExpression", type=String.class, parameters={})
    private Output</* @Nullable */ String> identityValidationExpression;

    /**
     * @return A validation expression for the incoming identity. For `TOKEN` type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.
     * 
     */
    public Output</* @Nullable */ String> getIdentityValidationExpression() {
        return this.identityValidationExpression;
    }
    /**
     * The name of the authorizer
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the authorizer
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * A list of the Amazon Cognito user pool ARNs. Each element is of this format: `arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}`.
     * 
     */
    @Export(name="providerArns", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> providerArns;

    /**
     * @return A list of the Amazon Cognito user pool ARNs. Each element is of this format: `arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}`.
     * 
     */
    public Output</* @Nullable */ List<String>> getProviderArns() {
        return this.providerArns;
    }
    /**
     * The ID of the associated REST API
     * 
     */
    @Export(name="restApi", type=String.class, parameters={})
    private Output<String> restApi;

    /**
     * @return The ID of the associated REST API
     * 
     */
    public Output<String> getRestApi() {
        return this.restApi;
    }
    /**
     * The type of the authorizer. Possible values are `TOKEN` for a Lambda function using a single authorization token submitted in a custom header, `REQUEST` for a Lambda function using incoming request parameters, or `COGNITO_USER_POOLS` for using an Amazon Cognito user pool. Defaults to `TOKEN`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output</* @Nullable */ String> type;

    /**
     * @return The type of the authorizer. Possible values are `TOKEN` for a Lambda function using a single authorization token submitted in a custom header, `REQUEST` for a Lambda function using incoming request parameters, or `COGNITO_USER_POOLS` for using an Amazon Cognito user pool. Defaults to `TOKEN`.
     * 
     */
    public Output</* @Nullable */ String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Authorizer(String name) {
        this(name, AuthorizerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Authorizer(String name, AuthorizerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Authorizer(String name, AuthorizerArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:apigateway/authorizer:Authorizer", name, args == null ? AuthorizerArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Authorizer(String name, Output<String> id, @Nullable AuthorizerState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:apigateway/authorizer:Authorizer", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Authorizer get(String name, Output<String> id, @Nullable AuthorizerState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Authorizer(name, id, state, options);
    }
}
