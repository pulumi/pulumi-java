// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ssm;

import io.pulumi.aws.ssm.inputs.MaintenanceWindowTaskTargetArgs;
import io.pulumi.aws.ssm.inputs.MaintenanceWindowTaskTaskInvocationParametersArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MaintenanceWindowTaskArgs extends io.pulumi.resources.ResourceArgs {

    public static final MaintenanceWindowTaskArgs Empty = new MaintenanceWindowTaskArgs();

    /**
     * The description of the maintenance window task.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The maximum number of targets this task can be run for in parallel.
     * 
     */
    @InputImport(name="maxConcurrency", required=true)
      private final Input<String> maxConcurrency;

    public Input<String> getMaxConcurrency() {
        return this.maxConcurrency;
    }

    /**
     * The maximum number of errors allowed before this task stops being scheduled.
     * 
     */
    @InputImport(name="maxErrors", required=true)
      private final Input<String> maxErrors;

    public Input<String> getMaxErrors() {
        return this.maxErrors;
    }

    /**
     * The name of the maintenance window task.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
     * 
     */
    @InputImport(name="priority")
      private final @Nullable Input<Integer> priority;

    public Input<Integer> getPriority() {
        return this.priority == null ? Input.empty() : this.priority;
    }

    /**
     * The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
     * 
     */
    @InputImport(name="serviceRoleArn")
      private final @Nullable Input<String> serviceRoleArn;

    public Input<String> getServiceRoleArn() {
        return this.serviceRoleArn == null ? Input.empty() : this.serviceRoleArn;
    }

    /**
     * The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
     * 
     */
    @InputImport(name="targets")
      private final @Nullable Input<List<MaintenanceWindowTaskTargetArgs>> targets;

    public Input<List<MaintenanceWindowTaskTargetArgs>> getTargets() {
        return this.targets == null ? Input.empty() : this.targets;
    }

    /**
     * The ARN of the task to execute.
     * 
     */
    @InputImport(name="taskArn", required=true)
      private final Input<String> taskArn;

    public Input<String> getTaskArn() {
        return this.taskArn;
    }

    /**
     * Configuration block with parameters for task execution.
     * 
     */
    @InputImport(name="taskInvocationParameters")
      private final @Nullable Input<MaintenanceWindowTaskTaskInvocationParametersArgs> taskInvocationParameters;

    public Input<MaintenanceWindowTaskTaskInvocationParametersArgs> getTaskInvocationParameters() {
        return this.taskInvocationParameters == null ? Input.empty() : this.taskInvocationParameters;
    }

    /**
     * The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
     * 
     */
    @InputImport(name="taskType", required=true)
      private final Input<String> taskType;

    public Input<String> getTaskType() {
        return this.taskType;
    }

    /**
     * The Id of the maintenance window to register the task with.
     * 
     */
    @InputImport(name="windowId", required=true)
      private final Input<String> windowId;

    public Input<String> getWindowId() {
        return this.windowId;
    }

    public MaintenanceWindowTaskArgs(
        @Nullable Input<String> description,
        Input<String> maxConcurrency,
        Input<String> maxErrors,
        @Nullable Input<String> name,
        @Nullable Input<Integer> priority,
        @Nullable Input<String> serviceRoleArn,
        @Nullable Input<List<MaintenanceWindowTaskTargetArgs>> targets,
        Input<String> taskArn,
        @Nullable Input<MaintenanceWindowTaskTaskInvocationParametersArgs> taskInvocationParameters,
        Input<String> taskType,
        Input<String> windowId) {
        this.description = description;
        this.maxConcurrency = Objects.requireNonNull(maxConcurrency, "expected parameter 'maxConcurrency' to be non-null");
        this.maxErrors = Objects.requireNonNull(maxErrors, "expected parameter 'maxErrors' to be non-null");
        this.name = name;
        this.priority = priority;
        this.serviceRoleArn = serviceRoleArn;
        this.targets = targets;
        this.taskArn = Objects.requireNonNull(taskArn, "expected parameter 'taskArn' to be non-null");
        this.taskInvocationParameters = taskInvocationParameters;
        this.taskType = Objects.requireNonNull(taskType, "expected parameter 'taskType' to be non-null");
        this.windowId = Objects.requireNonNull(windowId, "expected parameter 'windowId' to be non-null");
    }

    private MaintenanceWindowTaskArgs() {
        this.description = Input.empty();
        this.maxConcurrency = Input.empty();
        this.maxErrors = Input.empty();
        this.name = Input.empty();
        this.priority = Input.empty();
        this.serviceRoleArn = Input.empty();
        this.targets = Input.empty();
        this.taskArn = Input.empty();
        this.taskInvocationParameters = Input.empty();
        this.taskType = Input.empty();
        this.windowId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MaintenanceWindowTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private Input<String> maxConcurrency;
        private Input<String> maxErrors;
        private @Nullable Input<String> name;
        private @Nullable Input<Integer> priority;
        private @Nullable Input<String> serviceRoleArn;
        private @Nullable Input<List<MaintenanceWindowTaskTargetArgs>> targets;
        private Input<String> taskArn;
        private @Nullable Input<MaintenanceWindowTaskTaskInvocationParametersArgs> taskInvocationParameters;
        private Input<String> taskType;
        private Input<String> windowId;

        public Builder() {
    	      // Empty
        }

        public Builder(MaintenanceWindowTaskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.maxConcurrency = defaults.maxConcurrency;
    	      this.maxErrors = defaults.maxErrors;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.serviceRoleArn = defaults.serviceRoleArn;
    	      this.targets = defaults.targets;
    	      this.taskArn = defaults.taskArn;
    	      this.taskInvocationParameters = defaults.taskInvocationParameters;
    	      this.taskType = defaults.taskType;
    	      this.windowId = defaults.windowId;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder maxConcurrency(Input<String> maxConcurrency) {
            this.maxConcurrency = Objects.requireNonNull(maxConcurrency);
            return this;
        }

        public Builder maxConcurrency(String maxConcurrency) {
            this.maxConcurrency = Input.of(Objects.requireNonNull(maxConcurrency));
            return this;
        }

        public Builder maxErrors(Input<String> maxErrors) {
            this.maxErrors = Objects.requireNonNull(maxErrors);
            return this;
        }

        public Builder maxErrors(String maxErrors) {
            this.maxErrors = Input.of(Objects.requireNonNull(maxErrors));
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder priority(@Nullable Input<Integer> priority) {
            this.priority = priority;
            return this;
        }

        public Builder priority(@Nullable Integer priority) {
            this.priority = Input.ofNullable(priority);
            return this;
        }

        public Builder serviceRoleArn(@Nullable Input<String> serviceRoleArn) {
            this.serviceRoleArn = serviceRoleArn;
            return this;
        }

        public Builder serviceRoleArn(@Nullable String serviceRoleArn) {
            this.serviceRoleArn = Input.ofNullable(serviceRoleArn);
            return this;
        }

        public Builder targets(@Nullable Input<List<MaintenanceWindowTaskTargetArgs>> targets) {
            this.targets = targets;
            return this;
        }

        public Builder targets(@Nullable List<MaintenanceWindowTaskTargetArgs> targets) {
            this.targets = Input.ofNullable(targets);
            return this;
        }

        public Builder taskArn(Input<String> taskArn) {
            this.taskArn = Objects.requireNonNull(taskArn);
            return this;
        }

        public Builder taskArn(String taskArn) {
            this.taskArn = Input.of(Objects.requireNonNull(taskArn));
            return this;
        }

        public Builder taskInvocationParameters(@Nullable Input<MaintenanceWindowTaskTaskInvocationParametersArgs> taskInvocationParameters) {
            this.taskInvocationParameters = taskInvocationParameters;
            return this;
        }

        public Builder taskInvocationParameters(@Nullable MaintenanceWindowTaskTaskInvocationParametersArgs taskInvocationParameters) {
            this.taskInvocationParameters = Input.ofNullable(taskInvocationParameters);
            return this;
        }

        public Builder taskType(Input<String> taskType) {
            this.taskType = Objects.requireNonNull(taskType);
            return this;
        }

        public Builder taskType(String taskType) {
            this.taskType = Input.of(Objects.requireNonNull(taskType));
            return this;
        }

        public Builder windowId(Input<String> windowId) {
            this.windowId = Objects.requireNonNull(windowId);
            return this;
        }

        public Builder windowId(String windowId) {
            this.windowId = Input.of(Objects.requireNonNull(windowId));
            return this;
        }
        public MaintenanceWindowTaskArgs build() {
            return new MaintenanceWindowTaskArgs(description, maxConcurrency, maxErrors, name, priority, serviceRoleArn, targets, taskArn, taskInvocationParameters, taskType, windowId);
        }
    }
}
