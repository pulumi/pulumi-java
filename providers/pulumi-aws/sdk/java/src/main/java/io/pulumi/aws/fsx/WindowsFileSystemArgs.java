// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx;

import io.pulumi.aws.fsx.inputs.WindowsFileSystemAuditLogConfigurationArgs;
import io.pulumi.aws.fsx.inputs.WindowsFileSystemSelfManagedActiveDirectoryArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WindowsFileSystemArgs extends io.pulumi.resources.ResourceArgs {

    public static final WindowsFileSystemArgs Empty = new WindowsFileSystemArgs();

    /**
     * The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `self_managed_active_directory`.
     * 
     */
    @InputImport(name="activeDirectoryId")
      private final @Nullable Input<String> activeDirectoryId;

    public Input<String> getActiveDirectoryId() {
        return this.activeDirectoryId == null ? Input.empty() : this.activeDirectoryId;
    }

    /**
     * An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
     * 
     */
    @InputImport(name="aliases")
      private final @Nullable Input<List<String>> aliases;

    public Input<List<String>> getAliases() {
        return this.aliases == null ? Input.empty() : this.aliases;
    }

    /**
     * The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See below.
     * 
     */
    @InputImport(name="auditLogConfiguration")
      private final @Nullable Input<WindowsFileSystemAuditLogConfigurationArgs> auditLogConfiguration;

    public Input<WindowsFileSystemAuditLogConfigurationArgs> getAuditLogConfiguration() {
        return this.auditLogConfiguration == null ? Input.empty() : this.auditLogConfiguration;
    }

    /**
     * The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
     * 
     */
    @InputImport(name="automaticBackupRetentionDays")
      private final @Nullable Input<Integer> automaticBackupRetentionDays;

    public Input<Integer> getAutomaticBackupRetentionDays() {
        return this.automaticBackupRetentionDays == null ? Input.empty() : this.automaticBackupRetentionDays;
    }

    /**
     * The ID of the source backup to create the filesystem from.
     * 
     */
    @InputImport(name="backupId")
      private final @Nullable Input<String> backupId;

    public Input<String> getBackupId() {
        return this.backupId == null ? Input.empty() : this.backupId;
    }

    /**
     * A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
     * 
     */
    @InputImport(name="copyTagsToBackups")
      private final @Nullable Input<Boolean> copyTagsToBackups;

    public Input<Boolean> getCopyTagsToBackups() {
        return this.copyTagsToBackups == null ? Input.empty() : this.copyTagsToBackups;
    }

    /**
     * The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
     * 
     */
    @InputImport(name="dailyAutomaticBackupStartTime")
      private final @Nullable Input<String> dailyAutomaticBackupStartTime;

    public Input<String> getDailyAutomaticBackupStartTime() {
        return this.dailyAutomaticBackupStartTime == null ? Input.empty() : this.dailyAutomaticBackupStartTime;
    }

    /**
     * Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
     * 
     */
    @InputImport(name="deploymentType")
      private final @Nullable Input<String> deploymentType;

    public Input<String> getDeploymentType() {
        return this.deploymentType == null ? Input.empty() : this.deploymentType;
    }

    /**
     * ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
     * 
     */
    @InputImport(name="kmsKeyId")
      private final @Nullable Input<String> kmsKeyId;

    public Input<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Input.empty() : this.kmsKeyId;
    }

    /**
     * Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
     * 
     */
    @InputImport(name="preferredSubnetId")
      private final @Nullable Input<String> preferredSubnetId;

    public Input<String> getPreferredSubnetId() {
        return this.preferredSubnetId == null ? Input.empty() : this.preferredSubnetId;
    }

    /**
     * A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
     * 
     */
    @InputImport(name="securityGroupIds")
      private final @Nullable Input<List<String>> securityGroupIds;

    public Input<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds == null ? Input.empty() : this.securityGroupIds;
    }

    /**
     * Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `active_directory_id`. Detailed below.
     * 
     */
    @InputImport(name="selfManagedActiveDirectory")
      private final @Nullable Input<WindowsFileSystemSelfManagedActiveDirectoryArgs> selfManagedActiveDirectory;

    public Input<WindowsFileSystemSelfManagedActiveDirectoryArgs> getSelfManagedActiveDirectory() {
        return this.selfManagedActiveDirectory == null ? Input.empty() : this.selfManagedActiveDirectory;
    }

    /**
     * When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
     * 
     */
    @InputImport(name="skipFinalBackup")
      private final @Nullable Input<Boolean> skipFinalBackup;

    public Input<Boolean> getSkipFinalBackup() {
        return this.skipFinalBackup == null ? Input.empty() : this.skipFinalBackup;
    }

    /**
     * Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
     * 
     */
    @InputImport(name="storageCapacity")
      private final @Nullable Input<Integer> storageCapacity;

    public Input<Integer> getStorageCapacity() {
        return this.storageCapacity == null ? Input.empty() : this.storageCapacity;
    }

    /**
     * Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
     * 
     */
    @InputImport(name="storageType")
      private final @Nullable Input<String> storageType;

    public Input<String> getStorageType() {
        return this.storageType == null ? Input.empty() : this.storageType;
    }

    /**
     * A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deployment_type` to `MULTI_AZ_1`.
     * 
     */
    @InputImport(name="subnetIds", required=true)
      private final Input<List<String>> subnetIds;

    public Input<List<String>> getSubnetIds() {
        return this.subnetIds;
    }

    /**
     * A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
     * 
     */
    @InputImport(name="throughputCapacity", required=true)
      private final Input<Integer> throughputCapacity;

    public Input<Integer> getThroughputCapacity() {
        return this.throughputCapacity;
    }

    /**
     * The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
     * 
     */
    @InputImport(name="weeklyMaintenanceStartTime")
      private final @Nullable Input<String> weeklyMaintenanceStartTime;

    public Input<String> getWeeklyMaintenanceStartTime() {
        return this.weeklyMaintenanceStartTime == null ? Input.empty() : this.weeklyMaintenanceStartTime;
    }

    public WindowsFileSystemArgs(
        @Nullable Input<String> activeDirectoryId,
        @Nullable Input<List<String>> aliases,
        @Nullable Input<WindowsFileSystemAuditLogConfigurationArgs> auditLogConfiguration,
        @Nullable Input<Integer> automaticBackupRetentionDays,
        @Nullable Input<String> backupId,
        @Nullable Input<Boolean> copyTagsToBackups,
        @Nullable Input<String> dailyAutomaticBackupStartTime,
        @Nullable Input<String> deploymentType,
        @Nullable Input<String> kmsKeyId,
        @Nullable Input<String> preferredSubnetId,
        @Nullable Input<List<String>> securityGroupIds,
        @Nullable Input<WindowsFileSystemSelfManagedActiveDirectoryArgs> selfManagedActiveDirectory,
        @Nullable Input<Boolean> skipFinalBackup,
        @Nullable Input<Integer> storageCapacity,
        @Nullable Input<String> storageType,
        Input<List<String>> subnetIds,
        @Nullable Input<Map<String,String>> tags,
        Input<Integer> throughputCapacity,
        @Nullable Input<String> weeklyMaintenanceStartTime) {
        this.activeDirectoryId = activeDirectoryId;
        this.aliases = aliases;
        this.auditLogConfiguration = auditLogConfiguration;
        this.automaticBackupRetentionDays = automaticBackupRetentionDays;
        this.backupId = backupId;
        this.copyTagsToBackups = copyTagsToBackups;
        this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
        this.deploymentType = deploymentType;
        this.kmsKeyId = kmsKeyId;
        this.preferredSubnetId = preferredSubnetId;
        this.securityGroupIds = securityGroupIds;
        this.selfManagedActiveDirectory = selfManagedActiveDirectory;
        this.skipFinalBackup = skipFinalBackup;
        this.storageCapacity = storageCapacity;
        this.storageType = storageType;
        this.subnetIds = Objects.requireNonNull(subnetIds, "expected parameter 'subnetIds' to be non-null");
        this.tags = tags;
        this.throughputCapacity = Objects.requireNonNull(throughputCapacity, "expected parameter 'throughputCapacity' to be non-null");
        this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
    }

    private WindowsFileSystemArgs() {
        this.activeDirectoryId = Input.empty();
        this.aliases = Input.empty();
        this.auditLogConfiguration = Input.empty();
        this.automaticBackupRetentionDays = Input.empty();
        this.backupId = Input.empty();
        this.copyTagsToBackups = Input.empty();
        this.dailyAutomaticBackupStartTime = Input.empty();
        this.deploymentType = Input.empty();
        this.kmsKeyId = Input.empty();
        this.preferredSubnetId = Input.empty();
        this.securityGroupIds = Input.empty();
        this.selfManagedActiveDirectory = Input.empty();
        this.skipFinalBackup = Input.empty();
        this.storageCapacity = Input.empty();
        this.storageType = Input.empty();
        this.subnetIds = Input.empty();
        this.tags = Input.empty();
        this.throughputCapacity = Input.empty();
        this.weeklyMaintenanceStartTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WindowsFileSystemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> activeDirectoryId;
        private @Nullable Input<List<String>> aliases;
        private @Nullable Input<WindowsFileSystemAuditLogConfigurationArgs> auditLogConfiguration;
        private @Nullable Input<Integer> automaticBackupRetentionDays;
        private @Nullable Input<String> backupId;
        private @Nullable Input<Boolean> copyTagsToBackups;
        private @Nullable Input<String> dailyAutomaticBackupStartTime;
        private @Nullable Input<String> deploymentType;
        private @Nullable Input<String> kmsKeyId;
        private @Nullable Input<String> preferredSubnetId;
        private @Nullable Input<List<String>> securityGroupIds;
        private @Nullable Input<WindowsFileSystemSelfManagedActiveDirectoryArgs> selfManagedActiveDirectory;
        private @Nullable Input<Boolean> skipFinalBackup;
        private @Nullable Input<Integer> storageCapacity;
        private @Nullable Input<String> storageType;
        private Input<List<String>> subnetIds;
        private @Nullable Input<Map<String,String>> tags;
        private Input<Integer> throughputCapacity;
        private @Nullable Input<String> weeklyMaintenanceStartTime;

        public Builder() {
    	      // Empty
        }

        public Builder(WindowsFileSystemArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDirectoryId = defaults.activeDirectoryId;
    	      this.aliases = defaults.aliases;
    	      this.auditLogConfiguration = defaults.auditLogConfiguration;
    	      this.automaticBackupRetentionDays = defaults.automaticBackupRetentionDays;
    	      this.backupId = defaults.backupId;
    	      this.copyTagsToBackups = defaults.copyTagsToBackups;
    	      this.dailyAutomaticBackupStartTime = defaults.dailyAutomaticBackupStartTime;
    	      this.deploymentType = defaults.deploymentType;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.preferredSubnetId = defaults.preferredSubnetId;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.selfManagedActiveDirectory = defaults.selfManagedActiveDirectory;
    	      this.skipFinalBackup = defaults.skipFinalBackup;
    	      this.storageCapacity = defaults.storageCapacity;
    	      this.storageType = defaults.storageType;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.throughputCapacity = defaults.throughputCapacity;
    	      this.weeklyMaintenanceStartTime = defaults.weeklyMaintenanceStartTime;
        }

        public Builder setActiveDirectoryId(@Nullable Input<String> activeDirectoryId) {
            this.activeDirectoryId = activeDirectoryId;
            return this;
        }

        public Builder setActiveDirectoryId(@Nullable String activeDirectoryId) {
            this.activeDirectoryId = Input.ofNullable(activeDirectoryId);
            return this;
        }

        public Builder setAliases(@Nullable Input<List<String>> aliases) {
            this.aliases = aliases;
            return this;
        }

        public Builder setAliases(@Nullable List<String> aliases) {
            this.aliases = Input.ofNullable(aliases);
            return this;
        }

        public Builder setAuditLogConfiguration(@Nullable Input<WindowsFileSystemAuditLogConfigurationArgs> auditLogConfiguration) {
            this.auditLogConfiguration = auditLogConfiguration;
            return this;
        }

        public Builder setAuditLogConfiguration(@Nullable WindowsFileSystemAuditLogConfigurationArgs auditLogConfiguration) {
            this.auditLogConfiguration = Input.ofNullable(auditLogConfiguration);
            return this;
        }

        public Builder setAutomaticBackupRetentionDays(@Nullable Input<Integer> automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = automaticBackupRetentionDays;
            return this;
        }

        public Builder setAutomaticBackupRetentionDays(@Nullable Integer automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = Input.ofNullable(automaticBackupRetentionDays);
            return this;
        }

        public Builder setBackupId(@Nullable Input<String> backupId) {
            this.backupId = backupId;
            return this;
        }

        public Builder setBackupId(@Nullable String backupId) {
            this.backupId = Input.ofNullable(backupId);
            return this;
        }

        public Builder setCopyTagsToBackups(@Nullable Input<Boolean> copyTagsToBackups) {
            this.copyTagsToBackups = copyTagsToBackups;
            return this;
        }

        public Builder setCopyTagsToBackups(@Nullable Boolean copyTagsToBackups) {
            this.copyTagsToBackups = Input.ofNullable(copyTagsToBackups);
            return this;
        }

        public Builder setDailyAutomaticBackupStartTime(@Nullable Input<String> dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
            return this;
        }

        public Builder setDailyAutomaticBackupStartTime(@Nullable String dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = Input.ofNullable(dailyAutomaticBackupStartTime);
            return this;
        }

        public Builder setDeploymentType(@Nullable Input<String> deploymentType) {
            this.deploymentType = deploymentType;
            return this;
        }

        public Builder setDeploymentType(@Nullable String deploymentType) {
            this.deploymentType = Input.ofNullable(deploymentType);
            return this;
        }

        public Builder setKmsKeyId(@Nullable Input<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder setKmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Input.ofNullable(kmsKeyId);
            return this;
        }

        public Builder setPreferredSubnetId(@Nullable Input<String> preferredSubnetId) {
            this.preferredSubnetId = preferredSubnetId;
            return this;
        }

        public Builder setPreferredSubnetId(@Nullable String preferredSubnetId) {
            this.preferredSubnetId = Input.ofNullable(preferredSubnetId);
            return this;
        }

        public Builder setSecurityGroupIds(@Nullable Input<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder setSecurityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Input.ofNullable(securityGroupIds);
            return this;
        }

        public Builder setSelfManagedActiveDirectory(@Nullable Input<WindowsFileSystemSelfManagedActiveDirectoryArgs> selfManagedActiveDirectory) {
            this.selfManagedActiveDirectory = selfManagedActiveDirectory;
            return this;
        }

        public Builder setSelfManagedActiveDirectory(@Nullable WindowsFileSystemSelfManagedActiveDirectoryArgs selfManagedActiveDirectory) {
            this.selfManagedActiveDirectory = Input.ofNullable(selfManagedActiveDirectory);
            return this;
        }

        public Builder setSkipFinalBackup(@Nullable Input<Boolean> skipFinalBackup) {
            this.skipFinalBackup = skipFinalBackup;
            return this;
        }

        public Builder setSkipFinalBackup(@Nullable Boolean skipFinalBackup) {
            this.skipFinalBackup = Input.ofNullable(skipFinalBackup);
            return this;
        }

        public Builder setStorageCapacity(@Nullable Input<Integer> storageCapacity) {
            this.storageCapacity = storageCapacity;
            return this;
        }

        public Builder setStorageCapacity(@Nullable Integer storageCapacity) {
            this.storageCapacity = Input.ofNullable(storageCapacity);
            return this;
        }

        public Builder setStorageType(@Nullable Input<String> storageType) {
            this.storageType = storageType;
            return this;
        }

        public Builder setStorageType(@Nullable String storageType) {
            this.storageType = Input.ofNullable(storageType);
            return this;
        }

        public Builder setSubnetIds(Input<List<String>> subnetIds) {
            this.subnetIds = Objects.requireNonNull(subnetIds);
            return this;
        }

        public Builder setSubnetIds(List<String> subnetIds) {
            this.subnetIds = Input.of(Objects.requireNonNull(subnetIds));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setThroughputCapacity(Input<Integer> throughputCapacity) {
            this.throughputCapacity = Objects.requireNonNull(throughputCapacity);
            return this;
        }

        public Builder setThroughputCapacity(Integer throughputCapacity) {
            this.throughputCapacity = Input.of(Objects.requireNonNull(throughputCapacity));
            return this;
        }

        public Builder setWeeklyMaintenanceStartTime(@Nullable Input<String> weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
            return this;
        }

        public Builder setWeeklyMaintenanceStartTime(@Nullable String weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = Input.ofNullable(weeklyMaintenanceStartTime);
            return this;
        }
        public WindowsFileSystemArgs build() {
            return new WindowsFileSystemArgs(activeDirectoryId, aliases, auditLogConfiguration, automaticBackupRetentionDays, backupId, copyTagsToBackups, dailyAutomaticBackupStartTime, deploymentType, kmsKeyId, preferredSubnetId, securityGroupIds, selfManagedActiveDirectory, skipFinalBackup, storageCapacity, storageType, subnetIds, tags, throughputCapacity, weeklyMaintenanceStartTime);
        }
    }
}
