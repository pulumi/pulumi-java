// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.glue.MLTransformArgs;
import io.pulumi.aws.glue.inputs.MLTransformState;
import io.pulumi.aws.glue.outputs.MLTransformInputRecordTable;
import io.pulumi.aws.glue.outputs.MLTransformParameters;
import io.pulumi.aws.glue.outputs.MLTransformSchema;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a Glue ML Transform resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testCatalogDatabase = new aws.glue.CatalogDatabase("testCatalogDatabase", {name: "example"});
 * const testCatalogTable = new aws.glue.CatalogTable("testCatalogTable", {
 *     name: "example",
 *     databaseName: testCatalogDatabase.name,
 *     owner: "my_owner",
 *     retention: 1,
 *     tableType: "VIRTUAL_VIEW",
 *     viewExpandedText: "view_expanded_text_1",
 *     viewOriginalText: "view_original_text_1",
 *     storageDescriptor: {
 *         bucketColumns: ["bucket_column_1"],
 *         compressed: false,
 *         inputFormat: "SequenceFileInputFormat",
 *         location: "my_location",
 *         numberOfBuckets: 1,
 *         outputFormat: "SequenceFileInputFormat",
 *         storedAsSubDirectories: false,
 *         parameters: {
 *             param1: "param1_val",
 *         },
 *         columns: [
 *             {
 *                 name: "my_column_1",
 *                 type: "int",
 *                 comment: "my_column1_comment",
 *             },
 *             {
 *                 name: "my_column_2",
 *                 type: "string",
 *                 comment: "my_column2_comment",
 *             },
 *         ],
 *         serDeInfo: {
 *             name: "ser_de_name",
 *             parameters: {
 *                 param1: "param_val_1",
 *             },
 *             serializationLibrary: "org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe",
 *         },
 *         sortColumns: [{
 *             column: "my_column_1",
 *             sortOrder: 1,
 *         }],
 *         skewedInfo: {
 *             skewedColumnNames: ["my_column_1"],
 *             skewedColumnValueLocationMaps: {
 *                 my_column_1: "my_column_1_val_loc_map",
 *             },
 *             skewedColumnValues: ["skewed_val_1"],
 *         },
 *     },
 *     partitionKeys: [
 *         {
 *             name: "my_column_1",
 *             type: "int",
 *             comment: "my_column_1_comment",
 *         },
 *         {
 *             name: "my_column_2",
 *             type: "string",
 *             comment: "my_column_2_comment",
 *         },
 *     ],
 *     parameters: {
 *         param1: "param1_val",
 *     },
 * });
 * const testMLTransform = new aws.glue.MLTransform("testMLTransform", {
 *     roleArn: aws_iam_role.test.arn,
 *     inputRecordTables: [{
 *         databaseName: testCatalogTable.databaseName,
 *         tableName: testCatalogTable.name,
 *     }],
 *     parameters: {
 *         transformType: "FIND_MATCHES",
 *         findMatchesParameters: {
 *             primaryKeyColumnName: "my_column_1",
 *         },
 *     },
 * }, {
 *     dependsOn: [aws_iam_role_policy_attachment.test],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test_catalog_database = aws.glue.CatalogDatabase("testCatalogDatabase", name="example")
 * test_catalog_table = aws.glue.CatalogTable("testCatalogTable",
 *     name="example",
 *     database_name=test_catalog_database.name,
 *     owner="my_owner",
 *     retention=1,
 *     table_type="VIRTUAL_VIEW",
 *     view_expanded_text="view_expanded_text_1",
 *     view_original_text="view_original_text_1",
 *     storage_descriptor=aws.glue.CatalogTableStorageDescriptorArgs(
 *         bucket_columns=["bucket_column_1"],
 *         compressed=False,
 *         input_format="SequenceFileInputFormat",
 *         location="my_location",
 *         number_of_buckets=1,
 *         output_format="SequenceFileInputFormat",
 *         stored_as_sub_directories=False,
 *         parameters={
 *             "param1": "param1_val",
 *         },
 *         columns=[
 *             aws.glue.CatalogTableStorageDescriptorColumnArgs(
 *                 name="my_column_1",
 *                 type="int",
 *                 comment="my_column1_comment",
 *             ),
 *             aws.glue.CatalogTableStorageDescriptorColumnArgs(
 *                 name="my_column_2",
 *                 type="string",
 *                 comment="my_column2_comment",
 *             ),
 *         ],
 *         ser_de_info=aws.glue.CatalogTableStorageDescriptorSerDeInfoArgs(
 *             name="ser_de_name",
 *             parameters={
 *                 "param1": "param_val_1",
 *             },
 *             serialization_library="org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe",
 *         ),
 *         sort_columns=[aws.glue.CatalogTableStorageDescriptorSortColumnArgs(
 *             column="my_column_1",
 *             sort_order=1,
 *         )],
 *         skewed_info=aws.glue.CatalogTableStorageDescriptorSkewedInfoArgs(
 *             skewed_column_names=["my_column_1"],
 *             skewed_column_value_location_maps={
 *                 "my_column_1": "my_column_1_val_loc_map",
 *             },
 *             skewed_column_values=["skewed_val_1"],
 *         ),
 *     ),
 *     partition_keys=[
 *         aws.glue.CatalogTablePartitionKeyArgs(
 *             name="my_column_1",
 *             type="int",
 *             comment="my_column_1_comment",
 *         ),
 *         aws.glue.CatalogTablePartitionKeyArgs(
 *             name="my_column_2",
 *             type="string",
 *             comment="my_column_2_comment",
 *         ),
 *     ],
 *     parameters={
 *         "param1": "param1_val",
 *     })
 * test_ml_transform = aws.glue.MLTransform("testMLTransform",
 *     role_arn=aws_iam_role["test"]["arn"],
 *     input_record_tables=[aws.glue.MLTransformInputRecordTableArgs(
 *         database_name=test_catalog_table.database_name,
 *         table_name=test_catalog_table.name,
 *     )],
 *     parameters=aws.glue.MLTransformParametersArgs(
 *         transform_type="FIND_MATCHES",
 *         find_matches_parameters=aws.glue.MLTransformParametersFindMatchesParametersArgs(
 *             primary_key_column_name="my_column_1",
 *         ),
 *     ),
 *     opts=pulumi.ResourceOptions(depends_on=[aws_iam_role_policy_attachment["test"]]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var testCatalogDatabase = new Aws.Glue.CatalogDatabase("testCatalogDatabase", new Aws.Glue.CatalogDatabaseArgs
 *         {
 *             Name = "example",
 *         });
 *         var testCatalogTable = new Aws.Glue.CatalogTable("testCatalogTable", new Aws.Glue.CatalogTableArgs
 *         {
 *             Name = "example",
 *             DatabaseName = testCatalogDatabase.Name,
 *             Owner = "my_owner",
 *             Retention = 1,
 *             TableType = "VIRTUAL_VIEW",
 *             ViewExpandedText = "view_expanded_text_1",
 *             ViewOriginalText = "view_original_text_1",
 *             StorageDescriptor = new Aws.Glue.Inputs.CatalogTableStorageDescriptorArgs
 *             {
 *                 BucketColumns = 
 *                 {
 *                     "bucket_column_1",
 *                 },
 *                 Compressed = false,
 *                 InputFormat = "SequenceFileInputFormat",
 *                 Location = "my_location",
 *                 NumberOfBuckets = 1,
 *                 OutputFormat = "SequenceFileInputFormat",
 *                 StoredAsSubDirectories = false,
 *                 Parameters = 
 *                 {
 *                     { "param1", "param1_val" },
 *                 },
 *                 Columns = 
 *                 {
 *                     new Aws.Glue.Inputs.CatalogTableStorageDescriptorColumnArgs
 *                     {
 *                         Name = "my_column_1",
 *                         Type = "int",
 *                         Comment = "my_column1_comment",
 *                     },
 *                     new Aws.Glue.Inputs.CatalogTableStorageDescriptorColumnArgs
 *                     {
 *                         Name = "my_column_2",
 *                         Type = "string",
 *                         Comment = "my_column2_comment",
 *                     },
 *                 },
 *                 SerDeInfo = new Aws.Glue.Inputs.CatalogTableStorageDescriptorSerDeInfoArgs
 *                 {
 *                     Name = "ser_de_name",
 *                     Parameters = 
 *                     {
 *                         { "param1", "param_val_1" },
 *                     },
 *                     SerializationLibrary = "org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe",
 *                 },
 *                 SortColumns = 
 *                 {
 *                     new Aws.Glue.Inputs.CatalogTableStorageDescriptorSortColumnArgs
 *                     {
 *                         Column = "my_column_1",
 *                         SortOrder = 1,
 *                     },
 *                 },
 *                 SkewedInfo = new Aws.Glue.Inputs.CatalogTableStorageDescriptorSkewedInfoArgs
 *                 {
 *                     SkewedColumnNames = 
 *                     {
 *                         "my_column_1",
 *                     },
 *                     SkewedColumnValueLocationMaps = 
 *                     {
 *                         { "my_column_1", "my_column_1_val_loc_map" },
 *                     },
 *                     SkewedColumnValues = 
 *                     {
 *                         "skewed_val_1",
 *                     },
 *                 },
 *             },
 *             PartitionKeys = 
 *             {
 *                 new Aws.Glue.Inputs.CatalogTablePartitionKeyArgs
 *                 {
 *                     Name = "my_column_1",
 *                     Type = "int",
 *                     Comment = "my_column_1_comment",
 *                 },
 *                 new Aws.Glue.Inputs.CatalogTablePartitionKeyArgs
 *                 {
 *                     Name = "my_column_2",
 *                     Type = "string",
 *                     Comment = "my_column_2_comment",
 *                 },
 *             },
 *             Parameters = 
 *             {
 *                 { "param1", "param1_val" },
 *             },
 *         });
 *         var testMLTransform = new Aws.Glue.MLTransform("testMLTransform", new Aws.Glue.MLTransformArgs
 *         {
 *             RoleArn = aws_iam_role.Test.Arn,
 *             InputRecordTables = 
 *             {
 *                 new Aws.Glue.Inputs.MLTransformInputRecordTableArgs
 *                 {
 *                     DatabaseName = testCatalogTable.DatabaseName,
 *                     TableName = testCatalogTable.Name,
 *                 },
 *             },
 *             Parameters = new Aws.Glue.Inputs.MLTransformParametersArgs
 *             {
 *                 TransformType = "FIND_MATCHES",
 *                 FindMatchesParameters = new Aws.Glue.Inputs.MLTransformParametersFindMatchesParametersArgs
 *                 {
 *                     PrimaryKeyColumnName = "my_column_1",
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 aws_iam_role_policy_attachment.Test,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/glue"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		testCatalogDatabase, err := glue.NewCatalogDatabase(ctx, "testCatalogDatabase", &glue.CatalogDatabaseArgs{
 * 			Name: pulumi.String("example"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		testCatalogTable, err := glue.NewCatalogTable(ctx, "testCatalogTable", &glue.CatalogTableArgs{
 * 			Name:             pulumi.String("example"),
 * 			DatabaseName:     testCatalogDatabase.Name,
 * 			Owner:            pulumi.String("my_owner"),
 * 			Retention:        pulumi.Int(1),
 * 			TableType:        pulumi.String("VIRTUAL_VIEW"),
 * 			ViewExpandedText: pulumi.String("view_expanded_text_1"),
 * 			ViewOriginalText: pulumi.String("view_original_text_1"),
 * 			StorageDescriptor: &glue.CatalogTableStorageDescriptorArgs{
 * 				BucketColumns: pulumi.StringArray{
 * 					pulumi.String("bucket_column_1"),
 * 				},
 * 				Compressed:             pulumi.Bool(false),
 * 				InputFormat:            pulumi.String("SequenceFileInputFormat"),
 * 				Location:               pulumi.String("my_location"),
 * 				NumberOfBuckets:        pulumi.Int(1),
 * 				OutputFormat:           pulumi.String("SequenceFileInputFormat"),
 * 				StoredAsSubDirectories: pulumi.Bool(false),
 * 				Parameters: pulumi.StringMap{
 * 					"param1": pulumi.String("param1_val"),
 * 				},
 * 				Columns: glue.CatalogTableStorageDescriptorColumnArray{
 * 					&glue.CatalogTableStorageDescriptorColumnArgs{
 * 						Name:    pulumi.String("my_column_1"),
 * 						Type:    pulumi.String("int"),
 * 						Comment: pulumi.String("my_column1_comment"),
 * 					},
 * 					&glue.CatalogTableStorageDescriptorColumnArgs{
 * 						Name:    pulumi.String("my_column_2"),
 * 						Type:    pulumi.String("string"),
 * 						Comment: pulumi.String("my_column2_comment"),
 * 					},
 * 				},
 * 				SerDeInfo: &glue.CatalogTableStorageDescriptorSerDeInfoArgs{
 * 					Name: pulumi.String("ser_de_name"),
 * 					Parameters: pulumi.StringMap{
 * 						"param1": pulumi.String("param_val_1"),
 * 					},
 * 					SerializationLibrary: pulumi.String("org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe"),
 * 				},
 * 				SortColumns: glue.CatalogTableStorageDescriptorSortColumnArray{
 * 					&glue.CatalogTableStorageDescriptorSortColumnArgs{
 * 						Column:    pulumi.String("my_column_1"),
 * 						SortOrder: pulumi.Int(1),
 * 					},
 * 				},
 * 				SkewedInfo: &glue.CatalogTableStorageDescriptorSkewedInfoArgs{
 * 					SkewedColumnNames: pulumi.StringArray{
 * 						pulumi.String("my_column_1"),
 * 					},
 * 					SkewedColumnValueLocationMaps: pulumi.StringMap{
 * 						"my_column_1": pulumi.String("my_column_1_val_loc_map"),
 * 					},
 * 					SkewedColumnValues: pulumi.StringArray{
 * 						pulumi.String("skewed_val_1"),
 * 					},
 * 				},
 * 			},
 * 			PartitionKeys: glue.CatalogTablePartitionKeyArray{
 * 				&glue.CatalogTablePartitionKeyArgs{
 * 					Name:    pulumi.String("my_column_1"),
 * 					Type:    pulumi.String("int"),
 * 					Comment: pulumi.String("my_column_1_comment"),
 * 				},
 * 				&glue.CatalogTablePartitionKeyArgs{
 * 					Name:    pulumi.String("my_column_2"),
 * 					Type:    pulumi.String("string"),
 * 					Comment: pulumi.String("my_column_2_comment"),
 * 				},
 * 			},
 * 			Parameters: pulumi.StringMap{
 * 				"param1": pulumi.String("param1_val"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = glue.NewMLTransform(ctx, "testMLTransform", &glue.MLTransformArgs{
 * 			RoleArn: pulumi.Any(aws_iam_role.Test.Arn),
 * 			InputRecordTables: glue.MLTransformInputRecordTableArray{
 * 				&glue.MLTransformInputRecordTableArgs{
 * 					DatabaseName: testCatalogTable.DatabaseName,
 * 					TableName:    testCatalogTable.Name,
 * 				},
 * 			},
 * 			Parameters: &glue.MLTransformParametersArgs{
 * 				TransformType: pulumi.String("FIND_MATCHES"),
 * 				FindMatchesParameters: &glue.MLTransformParametersFindMatchesParametersArgs{
 * 					PrimaryKeyColumnName: pulumi.String("my_column_1"),
 * 				},
 * 			},
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			aws_iam_role_policy_attachment.Test,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Glue ML Transforms can be imported using `id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:glue/mLTransform:MLTransform example tfm-c2cafbe83b1c575f49eaca9939220e2fcd58e2d5
 * ```
 * 
 *  
 */
@ResourceType(type="aws:glue/mLTransform:MLTransform")
public class MLTransform extends io.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name (ARN) of Glue ML Transform.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of Glue ML Transform.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Description of the ML Transform.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the ML Transform.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The version of glue to use, for example "1.0". For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
     * 
     */
    @Export(name="glueVersion", type=String.class, parameters={})
    private Output<String> glueVersion;

    /**
     * @return The version of glue to use, for example "1.0". For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
     * 
     */
    public Output<String> getGlueVersion() {
        return this.glueVersion;
    }
    /**
     * A list of AWS Glue table definitions used by the transform. see Input Record Tables.
     * 
     */
    @Export(name="inputRecordTables", type=List.class, parameters={MLTransformInputRecordTable.class})
    private Output<List<MLTransformInputRecordTable>> inputRecordTables;

    /**
     * @return A list of AWS Glue table definitions used by the transform. see Input Record Tables.
     * 
     */
    public Output<List<MLTransformInputRecordTable>> getInputRecordTables() {
        return this.inputRecordTables;
    }
    /**
     * The number of labels available for this transform.
     * 
     */
    @Export(name="labelCount", type=Integer.class, parameters={})
    private Output<Integer> labelCount;

    /**
     * @return The number of labels available for this transform.
     * 
     */
    public Output<Integer> getLabelCount() {
        return this.labelCount;
    }
    /**
     * The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from `2` to `100` DPUs; the default is `10`. `max_capacity` is a mutually exclusive option with `number_of_workers` and `worker_type`.
     * 
     */
    @Export(name="maxCapacity", type=Double.class, parameters={})
    private Output<Double> maxCapacity;

    /**
     * @return The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from `2` to `100` DPUs; the default is `10`. `max_capacity` is a mutually exclusive option with `number_of_workers` and `worker_type`.
     * 
     */
    public Output<Double> getMaxCapacity() {
        return this.maxCapacity;
    }
    /**
     * The maximum number of times to retry this ML Transform if it fails.
     * 
     */
    @Export(name="maxRetries", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> maxRetries;

    /**
     * @return The maximum number of times to retry this ML Transform if it fails.
     * 
     */
    public Output</* @Nullable */ Integer> getMaxRetries() {
        return this.maxRetries;
    }
    /**
     * The name you assign to this ML Transform. It must be unique in your account.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name you assign to this ML Transform. It must be unique in your account.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The number of workers of a defined `worker_type` that are allocated when an ML Transform runs. Required with `worker_type`.
     * 
     */
    @Export(name="numberOfWorkers", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> numberOfWorkers;

    /**
     * @return The number of workers of a defined `worker_type` that are allocated when an ML Transform runs. Required with `worker_type`.
     * 
     */
    public Output</* @Nullable */ Integer> getNumberOfWorkers() {
        return this.numberOfWorkers;
    }
    /**
     * The algorithmic parameters that are specific to the transform type used. Conditionally dependent on the transform type. see Parameters.
     * 
     */
    @Export(name="parameters", type=MLTransformParameters.class, parameters={})
    private Output<MLTransformParameters> parameters;

    /**
     * @return The algorithmic parameters that are specific to the transform type used. Conditionally dependent on the transform type. see Parameters.
     * 
     */
    public Output<MLTransformParameters> getParameters() {
        return this.parameters;
    }
    /**
     * The ARN of the IAM role associated with this ML Transform.
     * 
     */
    @Export(name="roleArn", type=String.class, parameters={})
    private Output<String> roleArn;

    /**
     * @return The ARN of the IAM role associated with this ML Transform.
     * 
     */
    public Output<String> getRoleArn() {
        return this.roleArn;
    }
    /**
     * The object that represents the schema that this transform accepts. see Schema.
     * 
     */
    @Export(name="schemas", type=List.class, parameters={MLTransformSchema.class})
    private Output<List<MLTransformSchema>> schemas;

    /**
     * @return The object that represents the schema that this transform accepts. see Schema.
     * 
     */
    public Output<List<MLTransformSchema>> getSchemas() {
        return this.schemas;
    }
    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The ML Transform timeout in minutes. The default is 2880 minutes (48 hours).
     * 
     */
    @Export(name="timeout", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> timeout;

    /**
     * @return The ML Transform timeout in minutes. The default is 2880 minutes (48 hours).
     * 
     */
    public Output</* @Nullable */ Integer> getTimeout() {
        return this.timeout;
    }
    /**
     * The type of predefined worker that is allocated when an ML Transform runs. Accepts a value of `Standard`, `G.1X`, or `G.2X`. Required with `number_of_workers`.
     * 
     */
    @Export(name="workerType", type=String.class, parameters={})
    private Output</* @Nullable */ String> workerType;

    /**
     * @return The type of predefined worker that is allocated when an ML Transform runs. Accepts a value of `Standard`, `G.1X`, or `G.2X`. Required with `number_of_workers`.
     * 
     */
    public Output</* @Nullable */ String> getWorkerType() {
        return this.workerType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MLTransform(String name) {
        this(name, MLTransformArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MLTransform(String name, MLTransformArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MLTransform(String name, MLTransformArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/mLTransform:MLTransform", name, args == null ? MLTransformArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private MLTransform(String name, Output<String> id, @Nullable MLTransformState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/mLTransform:MLTransform", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MLTransform get(String name, Output<String> id, @Nullable MLTransformState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new MLTransform(name, id, state, options);
    }
}
