// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ssm.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig {
    /**
     * An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
     * 
     */
    private final @Nullable String notificationArn;
    /**
     * The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
     * 
     */
    private final @Nullable List<String> notificationEvents;
    /**
     * When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
     * 
     */
    private final @Nullable String notificationType;

    @OutputCustomType.Constructor({"notificationArn","notificationEvents","notificationType"})
    private MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig(
        @Nullable String notificationArn,
        @Nullable List<String> notificationEvents,
        @Nullable String notificationType) {
        this.notificationArn = notificationArn;
        this.notificationEvents = notificationEvents;
        this.notificationType = notificationType;
    }

    /**
     * An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
     * 
     */
    public Optional<String> getNotificationArn() {
        return Optional.ofNullable(this.notificationArn);
    }
    /**
     * The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
     * 
     */
    public List<String> getNotificationEvents() {
        return this.notificationEvents == null ? List.of() : this.notificationEvents;
    }
    /**
     * When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
     * 
     */
    public Optional<String> getNotificationType() {
        return Optional.ofNullable(this.notificationType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String notificationArn;
        private @Nullable List<String> notificationEvents;
        private @Nullable String notificationType;

        public Builder() {
    	      // Empty
        }

        public Builder(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.notificationArn = defaults.notificationArn;
    	      this.notificationEvents = defaults.notificationEvents;
    	      this.notificationType = defaults.notificationType;
        }

        public Builder setNotificationArn(@Nullable String notificationArn) {
            this.notificationArn = notificationArn;
            return this;
        }

        public Builder setNotificationEvents(@Nullable List<String> notificationEvents) {
            this.notificationEvents = notificationEvents;
            return this;
        }

        public Builder setNotificationType(@Nullable String notificationType) {
            this.notificationType = notificationType;
            return this;
        }
        public MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig build() {
            return new MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig(notificationArn, notificationEvents, notificationType);
        }
    }
}
