// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elasticbeanstalk.inputs;

import io.pulumi.aws.elasticbeanstalk.inputs.EnvironmentAllSettingGetArgs;
import io.pulumi.aws.elasticbeanstalk.inputs.EnvironmentSettingGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EnvironmentState extends io.pulumi.resources.ResourceArgs {

    public static final EnvironmentState Empty = new EnvironmentState();

    /**
     * List of all option settings configured in this Environment. These
     * are a combination of default settings and their overrides from `setting` in
     * the configuration.
     * 
     */
    @Import(name="allSettings")
      private final @Nullable Output<List<EnvironmentAllSettingGetArgs>> allSettings;

    public Output<List<EnvironmentAllSettingGetArgs>> getAllSettings() {
        return this.allSettings == null ? Output.empty() : this.allSettings;
    }

    /**
     * Name of the application that contains the version
     * to be deployed
     * 
     */
    @Import(name="application")
      private final @Nullable Output<String> application;

    public Output<String> getApplication() {
        return this.application == null ? Output.empty() : this.application;
    }

    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * The autoscaling groups used by this Environment.
     * 
     */
    @Import(name="autoscalingGroups")
      private final @Nullable Output<List<String>> autoscalingGroups;

    public Output<List<String>> getAutoscalingGroups() {
        return this.autoscalingGroups == null ? Output.empty() : this.autoscalingGroups;
    }

    /**
     * Fully qualified DNS name for this Environment.
     * 
     */
    @Import(name="cname")
      private final @Nullable Output<String> cname;

    public Output<String> getCname() {
        return this.cname == null ? Output.empty() : this.cname;
    }

    /**
     * Prefix to use for the fully qualified DNS name of
     * the Environment.
     * 
     */
    @Import(name="cnamePrefix")
      private final @Nullable Output<String> cnamePrefix;

    public Output<String> getCnamePrefix() {
        return this.cnamePrefix == null ? Output.empty() : this.cnamePrefix;
    }

    /**
     * Short description of the Environment
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The URL to the Load Balancer for this Environment
     * 
     */
    @Import(name="endpointUrl")
      private final @Nullable Output<String> endpointUrl;

    public Output<String> getEndpointUrl() {
        return this.endpointUrl == null ? Output.empty() : this.endpointUrl;
    }

    /**
     * Instances used by this Environment.
     * 
     */
    @Import(name="instances")
      private final @Nullable Output<List<String>> instances;

    public Output<List<String>> getInstances() {
        return this.instances == null ? Output.empty() : this.instances;
    }

    /**
     * Launch configurations in use by this Environment.
     * 
     */
    @Import(name="launchConfigurations")
      private final @Nullable Output<List<String>> launchConfigurations;

    public Output<List<String>> getLaunchConfigurations() {
        return this.launchConfigurations == null ? Output.empty() : this.launchConfigurations;
    }

    /**
     * Elastic load balancers in use by this Environment.
     * 
     */
    @Import(name="loadBalancers")
      private final @Nullable Output<List<String>> loadBalancers;

    public Output<List<String>> getLoadBalancers() {
        return this.loadBalancers == null ? Output.empty() : this.loadBalancers;
    }

    /**
     * A unique name for this Environment. This name is used
     * in the application URL
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the Elastic Beanstalk [Platform](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html#cfn-beanstalk-environment-platformarn)
     * to use in deployment
     * 
     */
    @Import(name="platformArn")
      private final @Nullable Output<String> platformArn;

    public Output<String> getPlatformArn() {
        return this.platformArn == null ? Output.empty() : this.platformArn;
    }

    /**
     * The time between polling the AWS API to
     * check if changes have been applied. Use this to adjust the rate of API calls
     * for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
     * use the default behavior, which is an exponential backoff
     * 
     */
    @Import(name="pollInterval")
      private final @Nullable Output<String> pollInterval;

    public Output<String> getPollInterval() {
        return this.pollInterval == null ? Output.empty() : this.pollInterval;
    }

    /**
     * SQS queues in use by this Environment.
     * 
     */
    @Import(name="queues")
      private final @Nullable Output<List<String>> queues;

    public Output<List<String>> getQueues() {
        return this.queues == null ? Output.empty() : this.queues;
    }

    /**
     * Option settings to configure the new Environment. These
     * override specific values that are set as defaults. The format is detailed
     * below in Option Settings
     * 
     */
    @Import(name="settings")
      private final @Nullable Output<List<EnvironmentSettingGetArgs>> settings;

    public Output<List<EnvironmentSettingGetArgs>> getSettings() {
        return this.settings == null ? Output.empty() : this.settings;
    }

    /**
     * A solution stack to base your environment
     * off of. Example stacks can be found in the [Amazon API documentation](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)
     * 
     */
    @Import(name="solutionStackName")
      private final @Nullable Output<String> solutionStackName;

    public Output<String> getSolutionStackName() {
        return this.solutionStackName == null ? Output.empty() : this.solutionStackName;
    }

    /**
     * A set of tags to apply to the Environment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * The name of the Elastic Beanstalk Configuration
     * template to use in deployment
     * 
     */
    @Import(name="templateName")
      private final @Nullable Output<String> templateName;

    public Output<String> getTemplateName() {
        return this.templateName == null ? Output.empty() : this.templateName;
    }

    /**
     * Elastic Beanstalk Environment tier. Valid values are `Worker`
     * or `WebServer`. If tier is left blank `WebServer` will be used.
     * 
     */
    @Import(name="tier")
      private final @Nullable Output<String> tier;

    public Output<String> getTier() {
        return this.tier == null ? Output.empty() : this.tier;
    }

    /**
     * Autoscaling triggers in use by this Environment.
     * 
     */
    @Import(name="triggers")
      private final @Nullable Output<List<String>> triggers;

    public Output<List<String>> getTriggers() {
        return this.triggers == null ? Output.empty() : this.triggers;
    }

    /**
     * The name of the Elastic Beanstalk Application Version
     * to use in deployment.
     * 
     */
    @Import(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Output.empty() : this.version;
    }

    /**
     * The maximum
     * [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
     * wait for an Elastic Beanstalk Environment to be in a ready state before timing
     * out.
     * 
     */
    @Import(name="waitForReadyTimeout")
      private final @Nullable Output<String> waitForReadyTimeout;

    public Output<String> getWaitForReadyTimeout() {
        return this.waitForReadyTimeout == null ? Output.empty() : this.waitForReadyTimeout;
    }

    public EnvironmentState(
        @Nullable Output<List<EnvironmentAllSettingGetArgs>> allSettings,
        @Nullable Output<String> application,
        @Nullable Output<String> arn,
        @Nullable Output<List<String>> autoscalingGroups,
        @Nullable Output<String> cname,
        @Nullable Output<String> cnamePrefix,
        @Nullable Output<String> description,
        @Nullable Output<String> endpointUrl,
        @Nullable Output<List<String>> instances,
        @Nullable Output<List<String>> launchConfigurations,
        @Nullable Output<List<String>> loadBalancers,
        @Nullable Output<String> name,
        @Nullable Output<String> platformArn,
        @Nullable Output<String> pollInterval,
        @Nullable Output<List<String>> queues,
        @Nullable Output<List<EnvironmentSettingGetArgs>> settings,
        @Nullable Output<String> solutionStackName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> templateName,
        @Nullable Output<String> tier,
        @Nullable Output<List<String>> triggers,
        @Nullable Output<String> version,
        @Nullable Output<String> waitForReadyTimeout) {
        this.allSettings = allSettings;
        this.application = application;
        this.arn = arn;
        this.autoscalingGroups = autoscalingGroups;
        this.cname = cname;
        this.cnamePrefix = cnamePrefix;
        this.description = description;
        this.endpointUrl = endpointUrl;
        this.instances = instances;
        this.launchConfigurations = launchConfigurations;
        this.loadBalancers = loadBalancers;
        this.name = name;
        this.platformArn = platformArn;
        this.pollInterval = pollInterval;
        this.queues = queues;
        this.settings = settings;
        this.solutionStackName = solutionStackName;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.templateName = templateName;
        this.tier = tier;
        this.triggers = triggers;
        this.version = version;
        this.waitForReadyTimeout = waitForReadyTimeout;
    }

    private EnvironmentState() {
        this.allSettings = Output.empty();
        this.application = Output.empty();
        this.arn = Output.empty();
        this.autoscalingGroups = Output.empty();
        this.cname = Output.empty();
        this.cnamePrefix = Output.empty();
        this.description = Output.empty();
        this.endpointUrl = Output.empty();
        this.instances = Output.empty();
        this.launchConfigurations = Output.empty();
        this.loadBalancers = Output.empty();
        this.name = Output.empty();
        this.platformArn = Output.empty();
        this.pollInterval = Output.empty();
        this.queues = Output.empty();
        this.settings = Output.empty();
        this.solutionStackName = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.templateName = Output.empty();
        this.tier = Output.empty();
        this.triggers = Output.empty();
        this.version = Output.empty();
        this.waitForReadyTimeout = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<EnvironmentAllSettingGetArgs>> allSettings;
        private @Nullable Output<String> application;
        private @Nullable Output<String> arn;
        private @Nullable Output<List<String>> autoscalingGroups;
        private @Nullable Output<String> cname;
        private @Nullable Output<String> cnamePrefix;
        private @Nullable Output<String> description;
        private @Nullable Output<String> endpointUrl;
        private @Nullable Output<List<String>> instances;
        private @Nullable Output<List<String>> launchConfigurations;
        private @Nullable Output<List<String>> loadBalancers;
        private @Nullable Output<String> name;
        private @Nullable Output<String> platformArn;
        private @Nullable Output<String> pollInterval;
        private @Nullable Output<List<String>> queues;
        private @Nullable Output<List<EnvironmentSettingGetArgs>> settings;
        private @Nullable Output<String> solutionStackName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> templateName;
        private @Nullable Output<String> tier;
        private @Nullable Output<List<String>> triggers;
        private @Nullable Output<String> version;
        private @Nullable Output<String> waitForReadyTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allSettings = defaults.allSettings;
    	      this.application = defaults.application;
    	      this.arn = defaults.arn;
    	      this.autoscalingGroups = defaults.autoscalingGroups;
    	      this.cname = defaults.cname;
    	      this.cnamePrefix = defaults.cnamePrefix;
    	      this.description = defaults.description;
    	      this.endpointUrl = defaults.endpointUrl;
    	      this.instances = defaults.instances;
    	      this.launchConfigurations = defaults.launchConfigurations;
    	      this.loadBalancers = defaults.loadBalancers;
    	      this.name = defaults.name;
    	      this.platformArn = defaults.platformArn;
    	      this.pollInterval = defaults.pollInterval;
    	      this.queues = defaults.queues;
    	      this.settings = defaults.settings;
    	      this.solutionStackName = defaults.solutionStackName;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.templateName = defaults.templateName;
    	      this.tier = defaults.tier;
    	      this.triggers = defaults.triggers;
    	      this.version = defaults.version;
    	      this.waitForReadyTimeout = defaults.waitForReadyTimeout;
        }

        public Builder allSettings(@Nullable Output<List<EnvironmentAllSettingGetArgs>> allSettings) {
            this.allSettings = allSettings;
            return this;
        }
        public Builder allSettings(@Nullable List<EnvironmentAllSettingGetArgs> allSettings) {
            this.allSettings = Output.ofNullable(allSettings);
            return this;
        }
        public Builder allSettings(EnvironmentAllSettingGetArgs... allSettings) {
            return allSettings(List.of(allSettings));
        }
        public Builder application(@Nullable Output<String> application) {
            this.application = application;
            return this;
        }
        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }
        public Builder autoscalingGroups(@Nullable Output<List<String>> autoscalingGroups) {
            this.autoscalingGroups = autoscalingGroups;
            return this;
        }
        public Builder autoscalingGroups(@Nullable List<String> autoscalingGroups) {
            this.autoscalingGroups = Output.ofNullable(autoscalingGroups);
            return this;
        }
        public Builder autoscalingGroups(String... autoscalingGroups) {
            return autoscalingGroups(List.of(autoscalingGroups));
        }
        public Builder cname(@Nullable Output<String> cname) {
            this.cname = cname;
            return this;
        }
        public Builder cname(@Nullable String cname) {
            this.cname = Output.ofNullable(cname);
            return this;
        }
        public Builder cnamePrefix(@Nullable Output<String> cnamePrefix) {
            this.cnamePrefix = cnamePrefix;
            return this;
        }
        public Builder cnamePrefix(@Nullable String cnamePrefix) {
            this.cnamePrefix = Output.ofNullable(cnamePrefix);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder endpointUrl(@Nullable Output<String> endpointUrl) {
            this.endpointUrl = endpointUrl;
            return this;
        }
        public Builder endpointUrl(@Nullable String endpointUrl) {
            this.endpointUrl = Output.ofNullable(endpointUrl);
            return this;
        }
        public Builder instances(@Nullable Output<List<String>> instances) {
            this.instances = instances;
            return this;
        }
        public Builder instances(@Nullable List<String> instances) {
            this.instances = Output.ofNullable(instances);
            return this;
        }
        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }
        public Builder launchConfigurations(@Nullable Output<List<String>> launchConfigurations) {
            this.launchConfigurations = launchConfigurations;
            return this;
        }
        public Builder launchConfigurations(@Nullable List<String> launchConfigurations) {
            this.launchConfigurations = Output.ofNullable(launchConfigurations);
            return this;
        }
        public Builder launchConfigurations(String... launchConfigurations) {
            return launchConfigurations(List.of(launchConfigurations));
        }
        public Builder loadBalancers(@Nullable Output<List<String>> loadBalancers) {
            this.loadBalancers = loadBalancers;
            return this;
        }
        public Builder loadBalancers(@Nullable List<String> loadBalancers) {
            this.loadBalancers = Output.ofNullable(loadBalancers);
            return this;
        }
        public Builder loadBalancers(String... loadBalancers) {
            return loadBalancers(List.of(loadBalancers));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder platformArn(@Nullable Output<String> platformArn) {
            this.platformArn = platformArn;
            return this;
        }
        public Builder platformArn(@Nullable String platformArn) {
            this.platformArn = Output.ofNullable(platformArn);
            return this;
        }
        public Builder pollInterval(@Nullable Output<String> pollInterval) {
            this.pollInterval = pollInterval;
            return this;
        }
        public Builder pollInterval(@Nullable String pollInterval) {
            this.pollInterval = Output.ofNullable(pollInterval);
            return this;
        }
        public Builder queues(@Nullable Output<List<String>> queues) {
            this.queues = queues;
            return this;
        }
        public Builder queues(@Nullable List<String> queues) {
            this.queues = Output.ofNullable(queues);
            return this;
        }
        public Builder queues(String... queues) {
            return queues(List.of(queues));
        }
        public Builder settings(@Nullable Output<List<EnvironmentSettingGetArgs>> settings) {
            this.settings = settings;
            return this;
        }
        public Builder settings(@Nullable List<EnvironmentSettingGetArgs> settings) {
            this.settings = Output.ofNullable(settings);
            return this;
        }
        public Builder settings(EnvironmentSettingGetArgs... settings) {
            return settings(List.of(settings));
        }
        public Builder solutionStackName(@Nullable Output<String> solutionStackName) {
            this.solutionStackName = solutionStackName;
            return this;
        }
        public Builder solutionStackName(@Nullable String solutionStackName) {
            this.solutionStackName = Output.ofNullable(solutionStackName);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }
        public Builder templateName(@Nullable Output<String> templateName) {
            this.templateName = templateName;
            return this;
        }
        public Builder templateName(@Nullable String templateName) {
            this.templateName = Output.ofNullable(templateName);
            return this;
        }
        public Builder tier(@Nullable Output<String> tier) {
            this.tier = tier;
            return this;
        }
        public Builder tier(@Nullable String tier) {
            this.tier = Output.ofNullable(tier);
            return this;
        }
        public Builder triggers(@Nullable Output<List<String>> triggers) {
            this.triggers = triggers;
            return this;
        }
        public Builder triggers(@Nullable List<String> triggers) {
            this.triggers = Output.ofNullable(triggers);
            return this;
        }
        public Builder triggers(String... triggers) {
            return triggers(List.of(triggers));
        }
        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }
        public Builder version(@Nullable String version) {
            this.version = Output.ofNullable(version);
            return this;
        }
        public Builder waitForReadyTimeout(@Nullable Output<String> waitForReadyTimeout) {
            this.waitForReadyTimeout = waitForReadyTimeout;
            return this;
        }
        public Builder waitForReadyTimeout(@Nullable String waitForReadyTimeout) {
            this.waitForReadyTimeout = Output.ofNullable(waitForReadyTimeout);
            return this;
        }        public EnvironmentState build() {
            return new EnvironmentState(allSettings, application, arn, autoscalingGroups, cname, cnamePrefix, description, endpointUrl, instances, launchConfigurations, loadBalancers, name, platformArn, pollInterval, queues, settings, solutionStackName, tags, tagsAll, templateName, tier, triggers, version, waitForReadyTimeout);
        }
    }
}
