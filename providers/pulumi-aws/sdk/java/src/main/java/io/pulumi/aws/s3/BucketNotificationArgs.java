// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.s3;

import io.pulumi.aws.s3.inputs.BucketNotificationLambdaFunctionArgs;
import io.pulumi.aws.s3.inputs.BucketNotificationQueueArgs;
import io.pulumi.aws.s3.inputs.BucketNotificationTopicArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BucketNotificationArgs extends io.pulumi.resources.ResourceArgs {

    public static final BucketNotificationArgs Empty = new BucketNotificationArgs();

    /**
     * Name of the bucket for notification configuration.
     * 
     */
    @Import(name="bucket", required=true)
      private final Output<String> bucket;

    public Output<String> getBucket() {
        return this.bucket;
    }

    /**
     * Whether to enable Amazon EventBridge notifications.
     * 
     */
    @Import(name="eventbridge")
      private final @Nullable Output<Boolean> eventbridge;

    public Output<Boolean> getEventbridge() {
        return this.eventbridge == null ? Codegen.empty() : this.eventbridge;
    }

    /**
     * Used to configure notifications to a Lambda Function. See below.
     * 
     */
    @Import(name="lambdaFunctions")
      private final @Nullable Output<List<BucketNotificationLambdaFunctionArgs>> lambdaFunctions;

    public Output<List<BucketNotificationLambdaFunctionArgs>> getLambdaFunctions() {
        return this.lambdaFunctions == null ? Codegen.empty() : this.lambdaFunctions;
    }

    /**
     * Notification configuration to SQS Queue. See below.
     * 
     */
    @Import(name="queues")
      private final @Nullable Output<List<BucketNotificationQueueArgs>> queues;

    public Output<List<BucketNotificationQueueArgs>> getQueues() {
        return this.queues == null ? Codegen.empty() : this.queues;
    }

    /**
     * Notification configuration to SNS Topic. See below.
     * 
     */
    @Import(name="topics")
      private final @Nullable Output<List<BucketNotificationTopicArgs>> topics;

    public Output<List<BucketNotificationTopicArgs>> getTopics() {
        return this.topics == null ? Codegen.empty() : this.topics;
    }

    public BucketNotificationArgs(
        Output<String> bucket,
        @Nullable Output<Boolean> eventbridge,
        @Nullable Output<List<BucketNotificationLambdaFunctionArgs>> lambdaFunctions,
        @Nullable Output<List<BucketNotificationQueueArgs>> queues,
        @Nullable Output<List<BucketNotificationTopicArgs>> topics) {
        this.bucket = Objects.requireNonNull(bucket, "expected parameter 'bucket' to be non-null");
        this.eventbridge = eventbridge;
        this.lambdaFunctions = lambdaFunctions;
        this.queues = queues;
        this.topics = topics;
    }

    private BucketNotificationArgs() {
        this.bucket = Codegen.empty();
        this.eventbridge = Codegen.empty();
        this.lambdaFunctions = Codegen.empty();
        this.queues = Codegen.empty();
        this.topics = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketNotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> bucket;
        private @Nullable Output<Boolean> eventbridge;
        private @Nullable Output<List<BucketNotificationLambdaFunctionArgs>> lambdaFunctions;
        private @Nullable Output<List<BucketNotificationQueueArgs>> queues;
        private @Nullable Output<List<BucketNotificationTopicArgs>> topics;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketNotificationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.eventbridge = defaults.eventbridge;
    	      this.lambdaFunctions = defaults.lambdaFunctions;
    	      this.queues = defaults.queues;
    	      this.topics = defaults.topics;
        }

        public Builder bucket(Output<String> bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        public Builder bucket(String bucket) {
            this.bucket = Output.of(Objects.requireNonNull(bucket));
            return this;
        }
        public Builder eventbridge(@Nullable Output<Boolean> eventbridge) {
            this.eventbridge = eventbridge;
            return this;
        }
        public Builder eventbridge(@Nullable Boolean eventbridge) {
            this.eventbridge = Codegen.ofNullable(eventbridge);
            return this;
        }
        public Builder lambdaFunctions(@Nullable Output<List<BucketNotificationLambdaFunctionArgs>> lambdaFunctions) {
            this.lambdaFunctions = lambdaFunctions;
            return this;
        }
        public Builder lambdaFunctions(@Nullable List<BucketNotificationLambdaFunctionArgs> lambdaFunctions) {
            this.lambdaFunctions = Codegen.ofNullable(lambdaFunctions);
            return this;
        }
        public Builder lambdaFunctions(BucketNotificationLambdaFunctionArgs... lambdaFunctions) {
            return lambdaFunctions(List.of(lambdaFunctions));
        }
        public Builder queues(@Nullable Output<List<BucketNotificationQueueArgs>> queues) {
            this.queues = queues;
            return this;
        }
        public Builder queues(@Nullable List<BucketNotificationQueueArgs> queues) {
            this.queues = Codegen.ofNullable(queues);
            return this;
        }
        public Builder queues(BucketNotificationQueueArgs... queues) {
            return queues(List.of(queues));
        }
        public Builder topics(@Nullable Output<List<BucketNotificationTopicArgs>> topics) {
            this.topics = topics;
            return this;
        }
        public Builder topics(@Nullable List<BucketNotificationTopicArgs> topics) {
            this.topics = Codegen.ofNullable(topics);
            return this;
        }
        public Builder topics(BucketNotificationTopicArgs... topics) {
            return topics(List.of(topics));
        }        public BucketNotificationArgs build() {
            return new BucketNotificationArgs(bucket, eventbridge, lambdaFunctions, queues, topics);
        }
    }
}
