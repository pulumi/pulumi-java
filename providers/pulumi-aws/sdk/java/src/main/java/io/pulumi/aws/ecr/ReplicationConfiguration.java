// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecr;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.ecr.ReplicationConfigurationArgs;
import io.pulumi.aws.ecr.inputs.ReplicationConfigurationState;
import io.pulumi.aws.ecr.outputs.ReplicationConfigurationReplicationConfiguration;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides an Elastic Container Registry Replication Configuration.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const current = aws.getCallerIdentity({});
 * const exampleRegions = aws.getRegions({});
 * const exampleReplicationConfiguration = new aws.ecr.ReplicationConfiguration("exampleReplicationConfiguration", {replicationConfiguration: {
 *     rule: {
 *         destinations: [{
 *             region: exampleRegions.then(exampleRegions => exampleRegions.names?[0]),
 *             registryId: current.then(current => current.accountId),
 *         }],
 *     },
 * }});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * current = aws.get_caller_identity()
 * example_regions = aws.get_regions()
 * example_replication_configuration = aws.ecr.ReplicationConfiguration("exampleReplicationConfiguration", replication_configuration=aws.ecr.ReplicationConfigurationReplicationConfigurationArgs(
 *     rule=aws.ecr.ReplicationConfigurationReplicationConfigurationRuleArgs(
 *         destinations=[aws.ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs(
 *             region=example_regions.names[0],
 *             registry_id=current.account_id,
 *         )],
 *     ),
 * ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var current = Output.Create(Aws.GetCallerIdentity.InvokeAsync());
 *         var exampleRegions = Output.Create(Aws.GetRegions.InvokeAsync());
 *         var exampleReplicationConfiguration = new Aws.Ecr.ReplicationConfiguration("exampleReplicationConfiguration", new Aws.Ecr.ReplicationConfigurationArgs
 *         {
 *             ReplicationConfiguration = new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationArgs
 *             {
 *                 Rule = new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationRuleArgs
 *                 {
 *                     Destinations = 
 *                     {
 *                         new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs
 *                         {
 *                             Region = exampleRegions.Apply(exampleRegions => exampleRegions.Names?[0]),
 *                             RegistryId = current.Apply(current => current.AccountId),
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ecr"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		current, err := aws.GetCallerIdentity(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleRegions, err := aws.GetRegions(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = ecr.NewReplicationConfiguration(ctx, "exampleReplicationConfiguration", &ecr.ReplicationConfigurationArgs{
 * 			ReplicationConfiguration: &ecr.ReplicationConfigurationReplicationConfigurationArgs{
 * 				Rule: &ecr.ReplicationConfigurationReplicationConfigurationRuleArgs{
 * 					Destinations: ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArray{
 * 						&ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs{
 * 							Region:     pulumi.String(exampleRegions.Names[0]),
 * 							RegistryId: pulumi.String(current.AccountId),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * ## Multiple Region Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const current = aws.getCallerIdentity({});
 * const exampleRegions = aws.getRegions({});
 * const exampleReplicationConfiguration = new aws.ecr.ReplicationConfiguration("exampleReplicationConfiguration", {replicationConfiguration: {
 *     rule: {
 *         destinations: [
 *             {
 *                 region: exampleRegions.then(exampleRegions => exampleRegions.names?[0]),
 *                 registryId: current.then(current => current.accountId),
 *             },
 *             {
 *                 region: exampleRegions.then(exampleRegions => exampleRegions.names?[1]),
 *                 registryId: current.then(current => current.accountId),
 *             },
 *         ],
 *     },
 * }});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * current = aws.get_caller_identity()
 * example_regions = aws.get_regions()
 * example_replication_configuration = aws.ecr.ReplicationConfiguration("exampleReplicationConfiguration", replication_configuration=aws.ecr.ReplicationConfigurationReplicationConfigurationArgs(
 *     rule=aws.ecr.ReplicationConfigurationReplicationConfigurationRuleArgs(
 *         destinations=[
 *             aws.ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs(
 *                 region=example_regions.names[0],
 *                 registry_id=current.account_id,
 *             ),
 *             aws.ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs(
 *                 region=example_regions.names[1],
 *                 registry_id=current.account_id,
 *             ),
 *         ],
 *     ),
 * ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var current = Output.Create(Aws.GetCallerIdentity.InvokeAsync());
 *         var exampleRegions = Output.Create(Aws.GetRegions.InvokeAsync());
 *         var exampleReplicationConfiguration = new Aws.Ecr.ReplicationConfiguration("exampleReplicationConfiguration", new Aws.Ecr.ReplicationConfigurationArgs
 *         {
 *             ReplicationConfiguration = new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationArgs
 *             {
 *                 Rule = new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationRuleArgs
 *                 {
 *                     Destinations = 
 *                     {
 *                         new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs
 *                         {
 *                             Region = exampleRegions.Apply(exampleRegions => exampleRegions.Names?[0]),
 *                             RegistryId = current.Apply(current => current.AccountId),
 *                         },
 *                         new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs
 *                         {
 *                             Region = exampleRegions.Apply(exampleRegions => exampleRegions.Names?[1]),
 *                             RegistryId = current.Apply(current => current.AccountId),
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ecr"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		current, err := aws.GetCallerIdentity(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleRegions, err := aws.GetRegions(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = ecr.NewReplicationConfiguration(ctx, "exampleReplicationConfiguration", &ecr.ReplicationConfigurationArgs{
 * 			ReplicationConfiguration: &ecr.ReplicationConfigurationReplicationConfigurationArgs{
 * 				Rule: &ecr.ReplicationConfigurationReplicationConfigurationRuleArgs{
 * 					Destinations: ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArray{
 * 						&ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs{
 * 							Region:     pulumi.String(exampleRegions.Names[0]),
 * 							RegistryId: pulumi.String(current.AccountId),
 * 						},
 * 						&ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs{
 * 							Region:     pulumi.String(exampleRegions.Names[1]),
 * 							RegistryId: pulumi.String(current.AccountId),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ## Repository Filter Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const current = aws.getCallerIdentity({});
 * const exampleRegions = aws.getRegions({});
 * const exampleReplicationConfiguration = new aws.ecr.ReplicationConfiguration("exampleReplicationConfiguration", {replicationConfiguration: {
 *     rule: {
 *         destinations: [{
 *             region: exampleRegions.then(exampleRegions => exampleRegions.names?[0]),
 *             registryId: current.then(current => current.accountId),
 *         }],
 *         repositoryFilters: [{
 *             filter: "prod-microservice",
 *             filterType: "PREFIX_MATCH",
 *         }],
 *     },
 * }});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * current = aws.get_caller_identity()
 * example_regions = aws.get_regions()
 * example_replication_configuration = aws.ecr.ReplicationConfiguration("exampleReplicationConfiguration", replication_configuration=aws.ecr.ReplicationConfigurationReplicationConfigurationArgs(
 *     rule=aws.ecr.ReplicationConfigurationReplicationConfigurationRuleArgs(
 *         destinations=[aws.ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs(
 *             region=example_regions.names[0],
 *             registry_id=current.account_id,
 *         )],
 *         repository_filters=[aws.ecr.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs(
 *             filter="prod-microservice",
 *             filter_type="PREFIX_MATCH",
 *         )],
 *     ),
 * ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var current = Output.Create(Aws.GetCallerIdentity.InvokeAsync());
 *         var exampleRegions = Output.Create(Aws.GetRegions.InvokeAsync());
 *         var exampleReplicationConfiguration = new Aws.Ecr.ReplicationConfiguration("exampleReplicationConfiguration", new Aws.Ecr.ReplicationConfigurationArgs
 *         {
 *             ReplicationConfiguration = new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationArgs
 *             {
 *                 Rule = new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationRuleArgs
 *                 {
 *                     Destinations = 
 *                     {
 *                         new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs
 *                         {
 *                             Region = exampleRegions.Apply(exampleRegions => exampleRegions.Names?[0]),
 *                             RegistryId = current.Apply(current => current.AccountId),
 *                         },
 *                     },
 *                     RepositoryFilters = 
 *                     {
 *                         new Aws.Ecr.Inputs.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs
 *                         {
 *                             Filter = "prod-microservice",
 *                             FilterType = "PREFIX_MATCH",
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ecr"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		current, err := aws.GetCallerIdentity(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleRegions, err := aws.GetRegions(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = ecr.NewReplicationConfiguration(ctx, "exampleReplicationConfiguration", &ecr.ReplicationConfigurationArgs{
 * 			ReplicationConfiguration: &ecr.ReplicationConfigurationReplicationConfigurationArgs{
 * 				Rule: &ecr.ReplicationConfigurationReplicationConfigurationRuleArgs{
 * 					Destinations: ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArray{
 * 						&ecr.ReplicationConfigurationReplicationConfigurationRuleDestinationArgs{
 * 							Region:     pulumi.String(exampleRegions.Names[0]),
 * 							RegistryId: pulumi.String(current.AccountId),
 * 						},
 * 					},
 * 					RepositoryFilters: ecr.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArray{
 * 						&ecr.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs{
 * 							Filter:     pulumi.String("prod-microservice"),
 * 							FilterType: pulumi.String("PREFIX_MATCH"),
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * 
 * ## Import
 * 
 * ECR Replication Configuration can be imported using the `registry_id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:ecr/replicationConfiguration:ReplicationConfiguration service 012345678912
 * ```
 * 
 *  
 */
@ResourceType(type="aws:ecr/replicationConfiguration:ReplicationConfiguration")
public class ReplicationConfiguration extends io.pulumi.resources.CustomResource {
    /**
     * The account ID of the destination registry to replicate to.
     * 
     */
    @Export(name="registryId", type=String.class, parameters={})
    private Output<String> registryId;

    /**
     * @return The account ID of the destination registry to replicate to.
     * 
     */
    public Output<String> getRegistryId() {
        return this.registryId;
    }
    /**
     * Replication configuration for a registry. See Replication Configuration.
     * 
     */
    @Export(name="replicationConfiguration", type=ReplicationConfigurationReplicationConfiguration.class, parameters={})
    private Output</* @Nullable */ ReplicationConfigurationReplicationConfiguration> replicationConfiguration;

    /**
     * @return Replication configuration for a registry. See Replication Configuration.
     * 
     */
    public Output</* @Nullable */ ReplicationConfigurationReplicationConfiguration> getReplicationConfiguration() {
        return this.replicationConfiguration;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ReplicationConfiguration(String name) {
        this(name, ReplicationConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ReplicationConfiguration(String name, @Nullable ReplicationConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ReplicationConfiguration(String name, @Nullable ReplicationConfigurationArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ecr/replicationConfiguration:ReplicationConfiguration", name, args == null ? ReplicationConfigurationArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ReplicationConfiguration(String name, Output<String> id, @Nullable ReplicationConfigurationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ecr/replicationConfiguration:ReplicationConfiguration", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ReplicationConfiguration get(String name, Output<String> id, @Nullable ReplicationConfigurationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ReplicationConfiguration(name, id, state, options);
    }
}
