// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.mwaa;

import io.pulumi.aws.mwaa.inputs.EnvironmentLoggingConfigurationArgs;
import io.pulumi.aws.mwaa.inputs.EnvironmentNetworkConfigurationArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EnvironmentArgs extends io.pulumi.resources.ResourceArgs {

    public static final EnvironmentArgs Empty = new EnvironmentArgs();

    /**
     * The `airflow_configuration_options` parameter specifies airflow override options. Check the [Official documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-reference) for all possible configuration options.
     * 
     */
    @Import(name="airflowConfigurationOptions")
      private final @Nullable Output<Map<String,String>> airflowConfigurationOptions;

    public Output<Map<String,String>> getAirflowConfigurationOptions() {
        return this.airflowConfigurationOptions == null ? Output.empty() : this.airflowConfigurationOptions;
    }

    /**
     * Airflow version of your environment, will be set by default to the latest version that MWAA supports.
     * 
     */
    @Import(name="airflowVersion")
      private final @Nullable Output<String> airflowVersion;

    public Output<String> getAirflowVersion() {
        return this.airflowVersion == null ? Output.empty() : this.airflowVersion;
    }

    /**
     * The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
     * 
     */
    @Import(name="dagS3Path", required=true)
      private final Output<String> dagS3Path;

    public Output<String> getDagS3Path() {
        return this.dagS3Path;
    }

    /**
     * Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`. Will be set by default to `mw1.small`. Please check the [AWS Pricing](https://aws.amazon.com/de/managed-workflows-for-apache-airflow/pricing/) for more information about the environment classes.
     * 
     */
    @Import(name="environmentClass")
      private final @Nullable Output<String> environmentClass;

    public Output<String> getEnvironmentClass() {
        return this.environmentClass == null ? Output.empty() : this.environmentClass;
    }

    /**
     * The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the [official AWS documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html) for the detailed role specification.
     * 
     */
    @Import(name="executionRoleArn", required=true)
      private final Output<String> executionRoleArn;

    public Output<String> getExecutionRoleArn() {
        return this.executionRoleArn;
    }

    /**
     * The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key `aws/airflow` by default. Please check the [Official Documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/custom-keys-certs.html) for more information.
     * 
     */
    @Import(name="kmsKey")
      private final @Nullable Output<String> kmsKey;

    public Output<String> getKmsKey() {
        return this.kmsKey == null ? Output.empty() : this.kmsKey;
    }

    /**
     * The Apache Airflow logs you want to send to Amazon CloudWatch Logs.
     * 
     */
    @Import(name="loggingConfiguration")
      private final @Nullable Output<EnvironmentLoggingConfigurationArgs> loggingConfiguration;

    public Output<EnvironmentLoggingConfigurationArgs> getLoggingConfiguration() {
        return this.loggingConfiguration == null ? Output.empty() : this.loggingConfiguration;
    }

    /**
     * The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`. Will be `10` by default.
     * 
     */
    @Import(name="maxWorkers")
      private final @Nullable Output<Integer> maxWorkers;

    public Output<Integer> getMaxWorkers() {
        return this.maxWorkers == null ? Output.empty() : this.maxWorkers;
    }

    /**
     * The minimum number of workers that you want to run in your environment. Will be `1` by default.
     * 
     */
    @Import(name="minWorkers")
      private final @Nullable Output<Integer> minWorkers;

    public Output<Integer> getMinWorkers() {
        return this.minWorkers == null ? Output.empty() : this.minWorkers;
    }

    /**
     * The name of the Apache Airflow Environment
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See Network configuration below for details.
     * 
     */
    @Import(name="networkConfiguration", required=true)
      private final Output<EnvironmentNetworkConfigurationArgs> networkConfiguration;

    public Output<EnvironmentNetworkConfigurationArgs> getNetworkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * The plugins.zip file version you want to use.
     * 
     */
    @Import(name="pluginsS3ObjectVersion")
      private final @Nullable Output<String> pluginsS3ObjectVersion;

    public Output<String> getPluginsS3ObjectVersion() {
        return this.pluginsS3ObjectVersion == null ? Output.empty() : this.pluginsS3ObjectVersion;
    }

    /**
     * The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then plugins_s3_object_version is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
     * 
     */
    @Import(name="pluginsS3Path")
      private final @Nullable Output<String> pluginsS3Path;

    public Output<String> getPluginsS3Path() {
        return this.pluginsS3Path == null ? Output.empty() : this.pluginsS3Path;
    }

    /**
     * The requirements.txt file version you want to use.
     * 
     */
    @Import(name="requirementsS3ObjectVersion")
      private final @Nullable Output<String> requirementsS3ObjectVersion;

    public Output<String> getRequirementsS3ObjectVersion() {
        return this.requirementsS3ObjectVersion == null ? Output.empty() : this.requirementsS3ObjectVersion;
    }

    /**
     * The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements_s3_object_version is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
     * 
     */
    @Import(name="requirementsS3Path")
      private final @Nullable Output<String> requirementsS3Path;

    public Output<String> getRequirementsS3Path() {
        return this.requirementsS3Path == null ? Output.empty() : this.requirementsS3Path;
    }

    /**
     * The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
     * 
     */
    @Import(name="sourceBucketArn", required=true)
      private final Output<String> sourceBucketArn;

    public Output<String> getSourceBucketArn() {
        return this.sourceBucketArn;
    }

    /**
     * A map of resource tags to associate with the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: `PRIVATE_ONLY` (default) and `PUBLIC_ONLY`.
     * 
     */
    @Import(name="webserverAccessMode")
      private final @Nullable Output<String> webserverAccessMode;

    public Output<String> getWebserverAccessMode() {
        return this.webserverAccessMode == null ? Output.empty() : this.webserverAccessMode;
    }

    /**
     * Specifies the start date for the weekly maintenance window.
     * 
     */
    @Import(name="weeklyMaintenanceWindowStart")
      private final @Nullable Output<String> weeklyMaintenanceWindowStart;

    public Output<String> getWeeklyMaintenanceWindowStart() {
        return this.weeklyMaintenanceWindowStart == null ? Output.empty() : this.weeklyMaintenanceWindowStart;
    }

    public EnvironmentArgs(
        @Nullable Output<Map<String,String>> airflowConfigurationOptions,
        @Nullable Output<String> airflowVersion,
        Output<String> dagS3Path,
        @Nullable Output<String> environmentClass,
        Output<String> executionRoleArn,
        @Nullable Output<String> kmsKey,
        @Nullable Output<EnvironmentLoggingConfigurationArgs> loggingConfiguration,
        @Nullable Output<Integer> maxWorkers,
        @Nullable Output<Integer> minWorkers,
        @Nullable Output<String> name,
        Output<EnvironmentNetworkConfigurationArgs> networkConfiguration,
        @Nullable Output<String> pluginsS3ObjectVersion,
        @Nullable Output<String> pluginsS3Path,
        @Nullable Output<String> requirementsS3ObjectVersion,
        @Nullable Output<String> requirementsS3Path,
        Output<String> sourceBucketArn,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> webserverAccessMode,
        @Nullable Output<String> weeklyMaintenanceWindowStart) {
        this.airflowConfigurationOptions = airflowConfigurationOptions;
        this.airflowVersion = airflowVersion;
        this.dagS3Path = Objects.requireNonNull(dagS3Path, "expected parameter 'dagS3Path' to be non-null");
        this.environmentClass = environmentClass;
        this.executionRoleArn = Objects.requireNonNull(executionRoleArn, "expected parameter 'executionRoleArn' to be non-null");
        this.kmsKey = kmsKey;
        this.loggingConfiguration = loggingConfiguration;
        this.maxWorkers = maxWorkers;
        this.minWorkers = minWorkers;
        this.name = name;
        this.networkConfiguration = Objects.requireNonNull(networkConfiguration, "expected parameter 'networkConfiguration' to be non-null");
        this.pluginsS3ObjectVersion = pluginsS3ObjectVersion;
        this.pluginsS3Path = pluginsS3Path;
        this.requirementsS3ObjectVersion = requirementsS3ObjectVersion;
        this.requirementsS3Path = requirementsS3Path;
        this.sourceBucketArn = Objects.requireNonNull(sourceBucketArn, "expected parameter 'sourceBucketArn' to be non-null");
        this.tags = tags;
        this.webserverAccessMode = webserverAccessMode;
        this.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart;
    }

    private EnvironmentArgs() {
        this.airflowConfigurationOptions = Output.empty();
        this.airflowVersion = Output.empty();
        this.dagS3Path = Output.empty();
        this.environmentClass = Output.empty();
        this.executionRoleArn = Output.empty();
        this.kmsKey = Output.empty();
        this.loggingConfiguration = Output.empty();
        this.maxWorkers = Output.empty();
        this.minWorkers = Output.empty();
        this.name = Output.empty();
        this.networkConfiguration = Output.empty();
        this.pluginsS3ObjectVersion = Output.empty();
        this.pluginsS3Path = Output.empty();
        this.requirementsS3ObjectVersion = Output.empty();
        this.requirementsS3Path = Output.empty();
        this.sourceBucketArn = Output.empty();
        this.tags = Output.empty();
        this.webserverAccessMode = Output.empty();
        this.weeklyMaintenanceWindowStart = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> airflowConfigurationOptions;
        private @Nullable Output<String> airflowVersion;
        private Output<String> dagS3Path;
        private @Nullable Output<String> environmentClass;
        private Output<String> executionRoleArn;
        private @Nullable Output<String> kmsKey;
        private @Nullable Output<EnvironmentLoggingConfigurationArgs> loggingConfiguration;
        private @Nullable Output<Integer> maxWorkers;
        private @Nullable Output<Integer> minWorkers;
        private @Nullable Output<String> name;
        private Output<EnvironmentNetworkConfigurationArgs> networkConfiguration;
        private @Nullable Output<String> pluginsS3ObjectVersion;
        private @Nullable Output<String> pluginsS3Path;
        private @Nullable Output<String> requirementsS3ObjectVersion;
        private @Nullable Output<String> requirementsS3Path;
        private Output<String> sourceBucketArn;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> webserverAccessMode;
        private @Nullable Output<String> weeklyMaintenanceWindowStart;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.airflowConfigurationOptions = defaults.airflowConfigurationOptions;
    	      this.airflowVersion = defaults.airflowVersion;
    	      this.dagS3Path = defaults.dagS3Path;
    	      this.environmentClass = defaults.environmentClass;
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.kmsKey = defaults.kmsKey;
    	      this.loggingConfiguration = defaults.loggingConfiguration;
    	      this.maxWorkers = defaults.maxWorkers;
    	      this.minWorkers = defaults.minWorkers;
    	      this.name = defaults.name;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.pluginsS3ObjectVersion = defaults.pluginsS3ObjectVersion;
    	      this.pluginsS3Path = defaults.pluginsS3Path;
    	      this.requirementsS3ObjectVersion = defaults.requirementsS3ObjectVersion;
    	      this.requirementsS3Path = defaults.requirementsS3Path;
    	      this.sourceBucketArn = defaults.sourceBucketArn;
    	      this.tags = defaults.tags;
    	      this.webserverAccessMode = defaults.webserverAccessMode;
    	      this.weeklyMaintenanceWindowStart = defaults.weeklyMaintenanceWindowStart;
        }

        public Builder airflowConfigurationOptions(@Nullable Output<Map<String,String>> airflowConfigurationOptions) {
            this.airflowConfigurationOptions = airflowConfigurationOptions;
            return this;
        }
        public Builder airflowConfigurationOptions(@Nullable Map<String,String> airflowConfigurationOptions) {
            this.airflowConfigurationOptions = Output.ofNullable(airflowConfigurationOptions);
            return this;
        }
        public Builder airflowVersion(@Nullable Output<String> airflowVersion) {
            this.airflowVersion = airflowVersion;
            return this;
        }
        public Builder airflowVersion(@Nullable String airflowVersion) {
            this.airflowVersion = Output.ofNullable(airflowVersion);
            return this;
        }
        public Builder dagS3Path(Output<String> dagS3Path) {
            this.dagS3Path = Objects.requireNonNull(dagS3Path);
            return this;
        }
        public Builder dagS3Path(String dagS3Path) {
            this.dagS3Path = Output.of(Objects.requireNonNull(dagS3Path));
            return this;
        }
        public Builder environmentClass(@Nullable Output<String> environmentClass) {
            this.environmentClass = environmentClass;
            return this;
        }
        public Builder environmentClass(@Nullable String environmentClass) {
            this.environmentClass = Output.ofNullable(environmentClass);
            return this;
        }
        public Builder executionRoleArn(Output<String> executionRoleArn) {
            this.executionRoleArn = Objects.requireNonNull(executionRoleArn);
            return this;
        }
        public Builder executionRoleArn(String executionRoleArn) {
            this.executionRoleArn = Output.of(Objects.requireNonNull(executionRoleArn));
            return this;
        }
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            this.kmsKey = kmsKey;
            return this;
        }
        public Builder kmsKey(@Nullable String kmsKey) {
            this.kmsKey = Output.ofNullable(kmsKey);
            return this;
        }
        public Builder loggingConfiguration(@Nullable Output<EnvironmentLoggingConfigurationArgs> loggingConfiguration) {
            this.loggingConfiguration = loggingConfiguration;
            return this;
        }
        public Builder loggingConfiguration(@Nullable EnvironmentLoggingConfigurationArgs loggingConfiguration) {
            this.loggingConfiguration = Output.ofNullable(loggingConfiguration);
            return this;
        }
        public Builder maxWorkers(@Nullable Output<Integer> maxWorkers) {
            this.maxWorkers = maxWorkers;
            return this;
        }
        public Builder maxWorkers(@Nullable Integer maxWorkers) {
            this.maxWorkers = Output.ofNullable(maxWorkers);
            return this;
        }
        public Builder minWorkers(@Nullable Output<Integer> minWorkers) {
            this.minWorkers = minWorkers;
            return this;
        }
        public Builder minWorkers(@Nullable Integer minWorkers) {
            this.minWorkers = Output.ofNullable(minWorkers);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder networkConfiguration(Output<EnvironmentNetworkConfigurationArgs> networkConfiguration) {
            this.networkConfiguration = Objects.requireNonNull(networkConfiguration);
            return this;
        }
        public Builder networkConfiguration(EnvironmentNetworkConfigurationArgs networkConfiguration) {
            this.networkConfiguration = Output.of(Objects.requireNonNull(networkConfiguration));
            return this;
        }
        public Builder pluginsS3ObjectVersion(@Nullable Output<String> pluginsS3ObjectVersion) {
            this.pluginsS3ObjectVersion = pluginsS3ObjectVersion;
            return this;
        }
        public Builder pluginsS3ObjectVersion(@Nullable String pluginsS3ObjectVersion) {
            this.pluginsS3ObjectVersion = Output.ofNullable(pluginsS3ObjectVersion);
            return this;
        }
        public Builder pluginsS3Path(@Nullable Output<String> pluginsS3Path) {
            this.pluginsS3Path = pluginsS3Path;
            return this;
        }
        public Builder pluginsS3Path(@Nullable String pluginsS3Path) {
            this.pluginsS3Path = Output.ofNullable(pluginsS3Path);
            return this;
        }
        public Builder requirementsS3ObjectVersion(@Nullable Output<String> requirementsS3ObjectVersion) {
            this.requirementsS3ObjectVersion = requirementsS3ObjectVersion;
            return this;
        }
        public Builder requirementsS3ObjectVersion(@Nullable String requirementsS3ObjectVersion) {
            this.requirementsS3ObjectVersion = Output.ofNullable(requirementsS3ObjectVersion);
            return this;
        }
        public Builder requirementsS3Path(@Nullable Output<String> requirementsS3Path) {
            this.requirementsS3Path = requirementsS3Path;
            return this;
        }
        public Builder requirementsS3Path(@Nullable String requirementsS3Path) {
            this.requirementsS3Path = Output.ofNullable(requirementsS3Path);
            return this;
        }
        public Builder sourceBucketArn(Output<String> sourceBucketArn) {
            this.sourceBucketArn = Objects.requireNonNull(sourceBucketArn);
            return this;
        }
        public Builder sourceBucketArn(String sourceBucketArn) {
            this.sourceBucketArn = Output.of(Objects.requireNonNull(sourceBucketArn));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder webserverAccessMode(@Nullable Output<String> webserverAccessMode) {
            this.webserverAccessMode = webserverAccessMode;
            return this;
        }
        public Builder webserverAccessMode(@Nullable String webserverAccessMode) {
            this.webserverAccessMode = Output.ofNullable(webserverAccessMode);
            return this;
        }
        public Builder weeklyMaintenanceWindowStart(@Nullable Output<String> weeklyMaintenanceWindowStart) {
            this.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart;
            return this;
        }
        public Builder weeklyMaintenanceWindowStart(@Nullable String weeklyMaintenanceWindowStart) {
            this.weeklyMaintenanceWindowStart = Output.ofNullable(weeklyMaintenanceWindowStart);
            return this;
        }        public EnvironmentArgs build() {
            return new EnvironmentArgs(airflowConfigurationOptions, airflowVersion, dagS3Path, environmentClass, executionRoleArn, kmsKey, loggingConfiguration, maxWorkers, minWorkers, name, networkConfiguration, pluginsS3ObjectVersion, pluginsS3Path, requirementsS3ObjectVersion, requirementsS3Path, sourceBucketArn, tags, webserverAccessMode, weeklyMaintenanceWindowStart);
        }
    }
}
