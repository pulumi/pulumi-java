// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ssm.inputs;

import io.pulumi.aws.ssm.inputs.AssociationOutputLocationGetArgs;
import io.pulumi.aws.ssm.inputs.AssociationTargetGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AssociationState extends io.pulumi.resources.ResourceArgs {

    public static final AssociationState Empty = new AssociationState();

    /**
     * By default, when you create a new or update associations, the system runs it immediately and then according to the schedule you specified. Enable this option if you do not want an association to run immediately after you create or update it. This parameter is not supported for rate expressions. Default: `false`.
     * 
     */
    @InputImport(name="applyOnlyAtCronInterval")
      private final @Nullable Output<Boolean> applyOnlyAtCronInterval;

    public Output<Boolean> getApplyOnlyAtCronInterval() {
        return this.applyOnlyAtCronInterval == null ? Output.empty() : this.applyOnlyAtCronInterval;
    }

    /**
     * The ID of the SSM association.
     * 
     */
    @InputImport(name="associationId")
      private final @Nullable Output<String> associationId;

    public Output<String> getAssociationId() {
        return this.associationId == null ? Output.empty() : this.associationId;
    }

    /**
     * The descriptive name for the association.
     * 
     */
    @InputImport(name="associationName")
      private final @Nullable Output<String> associationName;

    public Output<String> getAssociationName() {
        return this.associationName == null ? Output.empty() : this.associationName;
    }

    /**
     * Specify the target for the association. This target is required for associations that use an `Automation` document and target resources by using rate controls. This should be set to the SSM document `parameter` that will define how your automation will branch out.
     * 
     */
    @InputImport(name="automationTargetParameterName")
      private final @Nullable Output<String> automationTargetParameterName;

    public Output<String> getAutomationTargetParameterName() {
        return this.automationTargetParameterName == null ? Output.empty() : this.automationTargetParameterName;
    }

    /**
     * The compliance severity for the association. Can be one of the following: `UNSPECIFIED`, `LOW`, `MEDIUM`, `HIGH` or `CRITICAL`
     * 
     */
    @InputImport(name="complianceSeverity")
      private final @Nullable Output<String> complianceSeverity;

    public Output<String> getComplianceSeverity() {
        return this.complianceSeverity == null ? Output.empty() : this.complianceSeverity;
    }

    /**
     * The document version you want to associate with the target(s). Can be a specific version or the default version.
     * 
     */
    @InputImport(name="documentVersion")
      private final @Nullable Output<String> documentVersion;

    public Output<String> getDocumentVersion() {
        return this.documentVersion == null ? Output.empty() : this.documentVersion;
    }

    /**
     * The instance ID to apply an SSM document to. Use `targets` with key `InstanceIds` for document schema versions 2.0 and above.
     * 
     */
    @InputImport(name="instanceId")
      private final @Nullable Output<String> instanceId;

    public Output<String> getInstanceId() {
        return this.instanceId == null ? Output.empty() : this.instanceId;
    }

    /**
     * The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
     * 
     */
    @InputImport(name="maxConcurrency")
      private final @Nullable Output<String> maxConcurrency;

    public Output<String> getMaxConcurrency() {
        return this.maxConcurrency == null ? Output.empty() : this.maxConcurrency;
    }

    /**
     * The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
     * 
     */
    @InputImport(name="maxErrors")
      private final @Nullable Output<String> maxErrors;

    public Output<String> getMaxErrors() {
        return this.maxErrors == null ? Output.empty() : this.maxErrors;
    }

    /**
     * The name of the SSM document to apply.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * An output location block. Output Location is documented below.
     * 
     */
    @InputImport(name="outputLocation")
      private final @Nullable Output<AssociationOutputLocationGetArgs> outputLocation;

    public Output<AssociationOutputLocationGetArgs> getOutputLocation() {
        return this.outputLocation == null ? Output.empty() : this.outputLocation;
    }

    /**
     * A block of arbitrary string parameters to pass to the SSM document.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Output<Map<String,String>> parameters;

    public Output<Map<String,String>> getParameters() {
        return this.parameters == null ? Output.empty() : this.parameters;
    }

    /**
     * A cron expression when the association will be applied to the target(s).
     * 
     */
    @InputImport(name="scheduleExpression")
      private final @Nullable Output<String> scheduleExpression;

    public Output<String> getScheduleExpression() {
        return this.scheduleExpression == null ? Output.empty() : this.scheduleExpression;
    }

    /**
     * A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
     * 
     */
    @InputImport(name="targets")
      private final @Nullable Output<List<AssociationTargetGetArgs>> targets;

    public Output<List<AssociationTargetGetArgs>> getTargets() {
        return this.targets == null ? Output.empty() : this.targets;
    }

    public AssociationState(
        @Nullable Output<Boolean> applyOnlyAtCronInterval,
        @Nullable Output<String> associationId,
        @Nullable Output<String> associationName,
        @Nullable Output<String> automationTargetParameterName,
        @Nullable Output<String> complianceSeverity,
        @Nullable Output<String> documentVersion,
        @Nullable Output<String> instanceId,
        @Nullable Output<String> maxConcurrency,
        @Nullable Output<String> maxErrors,
        @Nullable Output<String> name,
        @Nullable Output<AssociationOutputLocationGetArgs> outputLocation,
        @Nullable Output<Map<String,String>> parameters,
        @Nullable Output<String> scheduleExpression,
        @Nullable Output<List<AssociationTargetGetArgs>> targets) {
        this.applyOnlyAtCronInterval = applyOnlyAtCronInterval;
        this.associationId = associationId;
        this.associationName = associationName;
        this.automationTargetParameterName = automationTargetParameterName;
        this.complianceSeverity = complianceSeverity;
        this.documentVersion = documentVersion;
        this.instanceId = instanceId;
        this.maxConcurrency = maxConcurrency;
        this.maxErrors = maxErrors;
        this.name = name;
        this.outputLocation = outputLocation;
        this.parameters = parameters;
        this.scheduleExpression = scheduleExpression;
        this.targets = targets;
    }

    private AssociationState() {
        this.applyOnlyAtCronInterval = Output.empty();
        this.associationId = Output.empty();
        this.associationName = Output.empty();
        this.automationTargetParameterName = Output.empty();
        this.complianceSeverity = Output.empty();
        this.documentVersion = Output.empty();
        this.instanceId = Output.empty();
        this.maxConcurrency = Output.empty();
        this.maxErrors = Output.empty();
        this.name = Output.empty();
        this.outputLocation = Output.empty();
        this.parameters = Output.empty();
        this.scheduleExpression = Output.empty();
        this.targets = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> applyOnlyAtCronInterval;
        private @Nullable Output<String> associationId;
        private @Nullable Output<String> associationName;
        private @Nullable Output<String> automationTargetParameterName;
        private @Nullable Output<String> complianceSeverity;
        private @Nullable Output<String> documentVersion;
        private @Nullable Output<String> instanceId;
        private @Nullable Output<String> maxConcurrency;
        private @Nullable Output<String> maxErrors;
        private @Nullable Output<String> name;
        private @Nullable Output<AssociationOutputLocationGetArgs> outputLocation;
        private @Nullable Output<Map<String,String>> parameters;
        private @Nullable Output<String> scheduleExpression;
        private @Nullable Output<List<AssociationTargetGetArgs>> targets;

        public Builder() {
    	      // Empty
        }

        public Builder(AssociationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyOnlyAtCronInterval = defaults.applyOnlyAtCronInterval;
    	      this.associationId = defaults.associationId;
    	      this.associationName = defaults.associationName;
    	      this.automationTargetParameterName = defaults.automationTargetParameterName;
    	      this.complianceSeverity = defaults.complianceSeverity;
    	      this.documentVersion = defaults.documentVersion;
    	      this.instanceId = defaults.instanceId;
    	      this.maxConcurrency = defaults.maxConcurrency;
    	      this.maxErrors = defaults.maxErrors;
    	      this.name = defaults.name;
    	      this.outputLocation = defaults.outputLocation;
    	      this.parameters = defaults.parameters;
    	      this.scheduleExpression = defaults.scheduleExpression;
    	      this.targets = defaults.targets;
        }

        public Builder applyOnlyAtCronInterval(@Nullable Output<Boolean> applyOnlyAtCronInterval) {
            this.applyOnlyAtCronInterval = applyOnlyAtCronInterval;
            return this;
        }

        public Builder applyOnlyAtCronInterval(@Nullable Boolean applyOnlyAtCronInterval) {
            this.applyOnlyAtCronInterval = Output.ofNullable(applyOnlyAtCronInterval);
            return this;
        }

        public Builder associationId(@Nullable Output<String> associationId) {
            this.associationId = associationId;
            return this;
        }

        public Builder associationId(@Nullable String associationId) {
            this.associationId = Output.ofNullable(associationId);
            return this;
        }

        public Builder associationName(@Nullable Output<String> associationName) {
            this.associationName = associationName;
            return this;
        }

        public Builder associationName(@Nullable String associationName) {
            this.associationName = Output.ofNullable(associationName);
            return this;
        }

        public Builder automationTargetParameterName(@Nullable Output<String> automationTargetParameterName) {
            this.automationTargetParameterName = automationTargetParameterName;
            return this;
        }

        public Builder automationTargetParameterName(@Nullable String automationTargetParameterName) {
            this.automationTargetParameterName = Output.ofNullable(automationTargetParameterName);
            return this;
        }

        public Builder complianceSeverity(@Nullable Output<String> complianceSeverity) {
            this.complianceSeverity = complianceSeverity;
            return this;
        }

        public Builder complianceSeverity(@Nullable String complianceSeverity) {
            this.complianceSeverity = Output.ofNullable(complianceSeverity);
            return this;
        }

        public Builder documentVersion(@Nullable Output<String> documentVersion) {
            this.documentVersion = documentVersion;
            return this;
        }

        public Builder documentVersion(@Nullable String documentVersion) {
            this.documentVersion = Output.ofNullable(documentVersion);
            return this;
        }

        public Builder instanceId(@Nullable Output<String> instanceId) {
            this.instanceId = instanceId;
            return this;
        }

        public Builder instanceId(@Nullable String instanceId) {
            this.instanceId = Output.ofNullable(instanceId);
            return this;
        }

        public Builder maxConcurrency(@Nullable Output<String> maxConcurrency) {
            this.maxConcurrency = maxConcurrency;
            return this;
        }

        public Builder maxConcurrency(@Nullable String maxConcurrency) {
            this.maxConcurrency = Output.ofNullable(maxConcurrency);
            return this;
        }

        public Builder maxErrors(@Nullable Output<String> maxErrors) {
            this.maxErrors = maxErrors;
            return this;
        }

        public Builder maxErrors(@Nullable String maxErrors) {
            this.maxErrors = Output.ofNullable(maxErrors);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder outputLocation(@Nullable Output<AssociationOutputLocationGetArgs> outputLocation) {
            this.outputLocation = outputLocation;
            return this;
        }

        public Builder outputLocation(@Nullable AssociationOutputLocationGetArgs outputLocation) {
            this.outputLocation = Output.ofNullable(outputLocation);
            return this;
        }

        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = Output.ofNullable(parameters);
            return this;
        }

        public Builder scheduleExpression(@Nullable Output<String> scheduleExpression) {
            this.scheduleExpression = scheduleExpression;
            return this;
        }

        public Builder scheduleExpression(@Nullable String scheduleExpression) {
            this.scheduleExpression = Output.ofNullable(scheduleExpression);
            return this;
        }

        public Builder targets(@Nullable Output<List<AssociationTargetGetArgs>> targets) {
            this.targets = targets;
            return this;
        }

        public Builder targets(@Nullable List<AssociationTargetGetArgs> targets) {
            this.targets = Output.ofNullable(targets);
            return this;
        }
        public AssociationState build() {
            return new AssociationState(applyOnlyAtCronInterval, associationId, associationName, automationTargetParameterName, complianceSeverity, documentVersion, instanceId, maxConcurrency, maxErrors, name, outputLocation, parameters, scheduleExpression, targets);
        }
    }
}
