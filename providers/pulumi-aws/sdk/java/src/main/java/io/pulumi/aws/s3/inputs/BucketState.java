// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.s3.inputs;

import io.pulumi.aws.s3.enums.CannedAcl;
import io.pulumi.aws.s3.inputs.BucketCorsRuleGetArgs;
import io.pulumi.aws.s3.inputs.BucketGrantGetArgs;
import io.pulumi.aws.s3.inputs.BucketLifecycleRuleGetArgs;
import io.pulumi.aws.s3.inputs.BucketLoggingGetArgs;
import io.pulumi.aws.s3.inputs.BucketObjectLockConfigurationGetArgs;
import io.pulumi.aws.s3.inputs.BucketReplicationConfigurationGetArgs;
import io.pulumi.aws.s3.inputs.BucketServerSideEncryptionConfigurationGetArgs;
import io.pulumi.aws.s3.inputs.BucketVersioningGetArgs;
import io.pulumi.aws.s3.inputs.BucketWebsiteGetArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BucketState extends io.pulumi.resources.ResourceArgs {

    public static final BucketState Empty = new BucketState();

    /**
     * Sets the accelerate configuration of an existing bucket. Can be `Enabled` or `Suspended`.
     * 
     */
    @InputImport(name="accelerationStatus")
      private final @Nullable Input<String> accelerationStatus;

    public Input<String> getAccelerationStatus() {
        return this.accelerationStatus == null ? Input.empty() : this.accelerationStatus;
    }

    /**
     * The [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Valid values are `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, and `log-delivery-write`. Defaults to `private`.  Conflicts with `grant`.
     * 
     */
    @InputImport(name="acl")
      private final @Nullable Input<Either<String,CannedAcl>> acl;

    public Input<Either<String,CannedAcl>> getAcl() {
        return this.acl == null ? Input.empty() : this.acl;
    }

    /**
     * The ARN of the bucket. Will be of format `arn:aws:s3:::bucketname`.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The name of the bucket. If omitted, this provider will assign a random, unique name. Must be lowercase and less than or equal to 63 characters in length. A full list of bucket naming rules [may be found here](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
     * 
     */
    @InputImport(name="bucket")
      private final @Nullable Input<String> bucket;

    public Input<String> getBucket() {
        return this.bucket == null ? Input.empty() : this.bucket;
    }

    /**
     * The bucket domain name. Will be of format `bucketname.s3.amazonaws.com`.
     * 
     */
    @InputImport(name="bucketDomainName")
      private final @Nullable Input<String> bucketDomainName;

    public Input<String> getBucketDomainName() {
        return this.bucketDomainName == null ? Input.empty() : this.bucketDomainName;
    }

    /**
     * Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`. Must be lowercase and less than or equal to 37 characters in length. A full list of bucket naming rules [may be found here](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
     * 
     */
    @InputImport(name="bucketPrefix")
      private final @Nullable Input<String> bucketPrefix;

    public Input<String> getBucketPrefix() {
        return this.bucketPrefix == null ? Input.empty() : this.bucketPrefix;
    }

    /**
     * The bucket region-specific domain name. The bucket domain name including the region name, please refer [here](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for format. Note: The AWS CloudFront allows specifying S3 region-specific endpoint when creating S3 origin, it will prevent [redirect issues](https://forums.aws.amazon.com/thread.jspa?threadID=216814) from CloudFront to S3 Origin URL.
     * 
     */
    @InputImport(name="bucketRegionalDomainName")
      private final @Nullable Input<String> bucketRegionalDomainName;

    public Input<String> getBucketRegionalDomainName() {
        return this.bucketRegionalDomainName == null ? Input.empty() : this.bucketRegionalDomainName;
    }

    /**
     * A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).
     * 
     */
    @InputImport(name="corsRules")
      private final @Nullable Input<List<BucketCorsRuleGetArgs>> corsRules;

    public Input<List<BucketCorsRuleGetArgs>> getCorsRules() {
        return this.corsRules == null ? Input.empty() : this.corsRules;
    }

    /**
     * A boolean that indicates all objects (including any [locked objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html)) should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
     * 
     */
    @InputImport(name="forceDestroy")
      private final @Nullable Input<Boolean> forceDestroy;

    public Input<Boolean> getForceDestroy() {
        return this.forceDestroy == null ? Input.empty() : this.forceDestroy;
    }

    /**
     * An [ACL policy grant](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#sample-acl) (documented below). Conflicts with `acl`.
     * 
     */
    @InputImport(name="grants")
      private final @Nullable Input<List<BucketGrantGetArgs>> grants;

    public Input<List<BucketGrantGetArgs>> getGrants() {
        return this.grants == null ? Input.empty() : this.grants;
    }

    /**
     * The [Route 53 Hosted Zone ID](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints) for this bucket's region.
     * 
     */
    @InputImport(name="hostedZoneId")
      private final @Nullable Input<String> hostedZoneId;

    public Input<String> getHostedZoneId() {
        return this.hostedZoneId == null ? Input.empty() : this.hostedZoneId;
    }

    /**
     * A configuration of [object lifecycle management](http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) (documented below).
     * 
     */
    @InputImport(name="lifecycleRules")
      private final @Nullable Input<List<BucketLifecycleRuleGetArgs>> lifecycleRules;

    public Input<List<BucketLifecycleRuleGetArgs>> getLifecycleRules() {
        return this.lifecycleRules == null ? Input.empty() : this.lifecycleRules;
    }

    /**
     * A settings of [bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/UG/ManagingBucketLogging.html) (documented below).
     * 
     */
    @InputImport(name="loggings")
      private final @Nullable Input<List<BucketLoggingGetArgs>> loggings;

    public Input<List<BucketLoggingGetArgs>> getLoggings() {
        return this.loggings == null ? Input.empty() : this.loggings;
    }

    /**
     * A configuration of [S3 object locking](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html) (documented below)
     * 
     */
    @InputImport(name="objectLockConfiguration")
      private final @Nullable Input<BucketObjectLockConfigurationGetArgs> objectLockConfiguration;

    public Input<BucketObjectLockConfigurationGetArgs> getObjectLockConfiguration() {
        return this.objectLockConfiguration == null ? Input.empty() : this.objectLockConfiguration;
    }

    /**
     * A valid [bucket policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html) JSON document. Note that if the policy document is not specific enough (but still valid), the provider may view the policy as constantly changing in a `pulumi up / preview / update`. In this case, please make sure you use the verbose/specific version of the policy.
     * 
     */
    @InputImport(name="policy")
      private final @Nullable Input<String> policy;

    public Input<String> getPolicy() {
        return this.policy == null ? Input.empty() : this.policy;
    }

    /**
     * The AWS region this bucket resides in.
     * 
     */
    @InputImport(name="region")
      private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    /**
     * A configuration of [replication configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html) (documented below).
     * 
     */
    @InputImport(name="replicationConfiguration")
      private final @Nullable Input<BucketReplicationConfigurationGetArgs> replicationConfiguration;

    public Input<BucketReplicationConfigurationGetArgs> getReplicationConfiguration() {
        return this.replicationConfiguration == null ? Input.empty() : this.replicationConfiguration;
    }

    /**
     * Specifies who should bear the cost of Amazon S3 data transfer.
     * Can be either `BucketOwner` or `Requester`. By default, the owner of the S3 bucket would incur
     * the costs of any data transfer. See [Requester Pays Buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html)
     * developer guide for more information.
     * 
     */
    @InputImport(name="requestPayer")
      private final @Nullable Input<String> requestPayer;

    public Input<String> getRequestPayer() {
        return this.requestPayer == null ? Input.empty() : this.requestPayer;
    }

    /**
     * A configuration of [server-side encryption configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) (documented below)
     * 
     */
    @InputImport(name="serverSideEncryptionConfiguration")
      private final @Nullable Input<BucketServerSideEncryptionConfigurationGetArgs> serverSideEncryptionConfiguration;

    public Input<BucketServerSideEncryptionConfigurationGetArgs> getServerSideEncryptionConfiguration() {
        return this.serverSideEncryptionConfiguration == null ? Input.empty() : this.serverSideEncryptionConfiguration;
    }

    /**
     * A mapping of tags to assign to the bucket.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)
     * 
     */
    @InputImport(name="versioning")
      private final @Nullable Input<BucketVersioningGetArgs> versioning;

    public Input<BucketVersioningGetArgs> getVersioning() {
        return this.versioning == null ? Input.empty() : this.versioning;
    }

    /**
     * A website object (documented below).
     * 
     */
    @InputImport(name="website")
      private final @Nullable Input<BucketWebsiteGetArgs> website;

    public Input<BucketWebsiteGetArgs> getWebsite() {
        return this.website == null ? Input.empty() : this.website;
    }

    /**
     * The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records.
     * 
     */
    @InputImport(name="websiteDomain")
      private final @Nullable Input<String> websiteDomain;

    public Input<String> getWebsiteDomain() {
        return this.websiteDomain == null ? Input.empty() : this.websiteDomain;
    }

    /**
     * The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
     * 
     */
    @InputImport(name="websiteEndpoint")
      private final @Nullable Input<String> websiteEndpoint;

    public Input<String> getWebsiteEndpoint() {
        return this.websiteEndpoint == null ? Input.empty() : this.websiteEndpoint;
    }

    public BucketState(
        @Nullable Input<String> accelerationStatus,
        @Nullable Input<Either<String,CannedAcl>> acl,
        @Nullable Input<String> arn,
        @Nullable Input<String> bucket,
        @Nullable Input<String> bucketDomainName,
        @Nullable Input<String> bucketPrefix,
        @Nullable Input<String> bucketRegionalDomainName,
        @Nullable Input<List<BucketCorsRuleGetArgs>> corsRules,
        @Nullable Input<Boolean> forceDestroy,
        @Nullable Input<List<BucketGrantGetArgs>> grants,
        @Nullable Input<String> hostedZoneId,
        @Nullable Input<List<BucketLifecycleRuleGetArgs>> lifecycleRules,
        @Nullable Input<List<BucketLoggingGetArgs>> loggings,
        @Nullable Input<BucketObjectLockConfigurationGetArgs> objectLockConfiguration,
        @Nullable Input<String> policy,
        @Nullable Input<String> region,
        @Nullable Input<BucketReplicationConfigurationGetArgs> replicationConfiguration,
        @Nullable Input<String> requestPayer,
        @Nullable Input<BucketServerSideEncryptionConfigurationGetArgs> serverSideEncryptionConfiguration,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<BucketVersioningGetArgs> versioning,
        @Nullable Input<BucketWebsiteGetArgs> website,
        @Nullable Input<String> websiteDomain,
        @Nullable Input<String> websiteEndpoint) {
        this.accelerationStatus = accelerationStatus;
        this.acl = acl;
        this.arn = arn;
        this.bucket = bucket;
        this.bucketDomainName = bucketDomainName;
        this.bucketPrefix = bucketPrefix;
        this.bucketRegionalDomainName = bucketRegionalDomainName;
        this.corsRules = corsRules;
        this.forceDestroy = forceDestroy;
        this.grants = grants;
        this.hostedZoneId = hostedZoneId;
        this.lifecycleRules = lifecycleRules;
        this.loggings = loggings;
        this.objectLockConfiguration = objectLockConfiguration;
        this.policy = policy;
        this.region = region;
        this.replicationConfiguration = replicationConfiguration;
        this.requestPayer = requestPayer;
        this.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.versioning = versioning;
        this.website = website;
        this.websiteDomain = websiteDomain;
        this.websiteEndpoint = websiteEndpoint;
    }

    private BucketState() {
        this.accelerationStatus = Input.empty();
        this.acl = Input.empty();
        this.arn = Input.empty();
        this.bucket = Input.empty();
        this.bucketDomainName = Input.empty();
        this.bucketPrefix = Input.empty();
        this.bucketRegionalDomainName = Input.empty();
        this.corsRules = Input.empty();
        this.forceDestroy = Input.empty();
        this.grants = Input.empty();
        this.hostedZoneId = Input.empty();
        this.lifecycleRules = Input.empty();
        this.loggings = Input.empty();
        this.objectLockConfiguration = Input.empty();
        this.policy = Input.empty();
        this.region = Input.empty();
        this.replicationConfiguration = Input.empty();
        this.requestPayer = Input.empty();
        this.serverSideEncryptionConfiguration = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.versioning = Input.empty();
        this.website = Input.empty();
        this.websiteDomain = Input.empty();
        this.websiteEndpoint = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accelerationStatus;
        private @Nullable Input<Either<String,CannedAcl>> acl;
        private @Nullable Input<String> arn;
        private @Nullable Input<String> bucket;
        private @Nullable Input<String> bucketDomainName;
        private @Nullable Input<String> bucketPrefix;
        private @Nullable Input<String> bucketRegionalDomainName;
        private @Nullable Input<List<BucketCorsRuleGetArgs>> corsRules;
        private @Nullable Input<Boolean> forceDestroy;
        private @Nullable Input<List<BucketGrantGetArgs>> grants;
        private @Nullable Input<String> hostedZoneId;
        private @Nullable Input<List<BucketLifecycleRuleGetArgs>> lifecycleRules;
        private @Nullable Input<List<BucketLoggingGetArgs>> loggings;
        private @Nullable Input<BucketObjectLockConfigurationGetArgs> objectLockConfiguration;
        private @Nullable Input<String> policy;
        private @Nullable Input<String> region;
        private @Nullable Input<BucketReplicationConfigurationGetArgs> replicationConfiguration;
        private @Nullable Input<String> requestPayer;
        private @Nullable Input<BucketServerSideEncryptionConfigurationGetArgs> serverSideEncryptionConfiguration;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<BucketVersioningGetArgs> versioning;
        private @Nullable Input<BucketWebsiteGetArgs> website;
        private @Nullable Input<String> websiteDomain;
        private @Nullable Input<String> websiteEndpoint;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accelerationStatus = defaults.accelerationStatus;
    	      this.acl = defaults.acl;
    	      this.arn = defaults.arn;
    	      this.bucket = defaults.bucket;
    	      this.bucketDomainName = defaults.bucketDomainName;
    	      this.bucketPrefix = defaults.bucketPrefix;
    	      this.bucketRegionalDomainName = defaults.bucketRegionalDomainName;
    	      this.corsRules = defaults.corsRules;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.grants = defaults.grants;
    	      this.hostedZoneId = defaults.hostedZoneId;
    	      this.lifecycleRules = defaults.lifecycleRules;
    	      this.loggings = defaults.loggings;
    	      this.objectLockConfiguration = defaults.objectLockConfiguration;
    	      this.policy = defaults.policy;
    	      this.region = defaults.region;
    	      this.replicationConfiguration = defaults.replicationConfiguration;
    	      this.requestPayer = defaults.requestPayer;
    	      this.serverSideEncryptionConfiguration = defaults.serverSideEncryptionConfiguration;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.versioning = defaults.versioning;
    	      this.website = defaults.website;
    	      this.websiteDomain = defaults.websiteDomain;
    	      this.websiteEndpoint = defaults.websiteEndpoint;
        }

        public Builder accelerationStatus(@Nullable Input<String> accelerationStatus) {
            this.accelerationStatus = accelerationStatus;
            return this;
        }

        public Builder accelerationStatus(@Nullable String accelerationStatus) {
            this.accelerationStatus = Input.ofNullable(accelerationStatus);
            return this;
        }

        public Builder acl(@Nullable Input<Either<String,CannedAcl>> acl) {
            this.acl = acl;
            return this;
        }

        public Builder acl(@Nullable Either<String,CannedAcl> acl) {
            this.acl = Input.ofNullable(acl);
            return this;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder bucket(@Nullable Input<String> bucket) {
            this.bucket = bucket;
            return this;
        }

        public Builder bucket(@Nullable String bucket) {
            this.bucket = Input.ofNullable(bucket);
            return this;
        }

        public Builder bucketDomainName(@Nullable Input<String> bucketDomainName) {
            this.bucketDomainName = bucketDomainName;
            return this;
        }

        public Builder bucketDomainName(@Nullable String bucketDomainName) {
            this.bucketDomainName = Input.ofNullable(bucketDomainName);
            return this;
        }

        public Builder bucketPrefix(@Nullable Input<String> bucketPrefix) {
            this.bucketPrefix = bucketPrefix;
            return this;
        }

        public Builder bucketPrefix(@Nullable String bucketPrefix) {
            this.bucketPrefix = Input.ofNullable(bucketPrefix);
            return this;
        }

        public Builder bucketRegionalDomainName(@Nullable Input<String> bucketRegionalDomainName) {
            this.bucketRegionalDomainName = bucketRegionalDomainName;
            return this;
        }

        public Builder bucketRegionalDomainName(@Nullable String bucketRegionalDomainName) {
            this.bucketRegionalDomainName = Input.ofNullable(bucketRegionalDomainName);
            return this;
        }

        public Builder corsRules(@Nullable Input<List<BucketCorsRuleGetArgs>> corsRules) {
            this.corsRules = corsRules;
            return this;
        }

        public Builder corsRules(@Nullable List<BucketCorsRuleGetArgs> corsRules) {
            this.corsRules = Input.ofNullable(corsRules);
            return this;
        }

        public Builder forceDestroy(@Nullable Input<Boolean> forceDestroy) {
            this.forceDestroy = forceDestroy;
            return this;
        }

        public Builder forceDestroy(@Nullable Boolean forceDestroy) {
            this.forceDestroy = Input.ofNullable(forceDestroy);
            return this;
        }

        public Builder grants(@Nullable Input<List<BucketGrantGetArgs>> grants) {
            this.grants = grants;
            return this;
        }

        public Builder grants(@Nullable List<BucketGrantGetArgs> grants) {
            this.grants = Input.ofNullable(grants);
            return this;
        }

        public Builder hostedZoneId(@Nullable Input<String> hostedZoneId) {
            this.hostedZoneId = hostedZoneId;
            return this;
        }

        public Builder hostedZoneId(@Nullable String hostedZoneId) {
            this.hostedZoneId = Input.ofNullable(hostedZoneId);
            return this;
        }

        public Builder lifecycleRules(@Nullable Input<List<BucketLifecycleRuleGetArgs>> lifecycleRules) {
            this.lifecycleRules = lifecycleRules;
            return this;
        }

        public Builder lifecycleRules(@Nullable List<BucketLifecycleRuleGetArgs> lifecycleRules) {
            this.lifecycleRules = Input.ofNullable(lifecycleRules);
            return this;
        }

        public Builder loggings(@Nullable Input<List<BucketLoggingGetArgs>> loggings) {
            this.loggings = loggings;
            return this;
        }

        public Builder loggings(@Nullable List<BucketLoggingGetArgs> loggings) {
            this.loggings = Input.ofNullable(loggings);
            return this;
        }

        public Builder objectLockConfiguration(@Nullable Input<BucketObjectLockConfigurationGetArgs> objectLockConfiguration) {
            this.objectLockConfiguration = objectLockConfiguration;
            return this;
        }

        public Builder objectLockConfiguration(@Nullable BucketObjectLockConfigurationGetArgs objectLockConfiguration) {
            this.objectLockConfiguration = Input.ofNullable(objectLockConfiguration);
            return this;
        }

        public Builder policy(@Nullable Input<String> policy) {
            this.policy = policy;
            return this;
        }

        public Builder region(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder region(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder replicationConfiguration(@Nullable Input<BucketReplicationConfigurationGetArgs> replicationConfiguration) {
            this.replicationConfiguration = replicationConfiguration;
            return this;
        }

        public Builder replicationConfiguration(@Nullable BucketReplicationConfigurationGetArgs replicationConfiguration) {
            this.replicationConfiguration = Input.ofNullable(replicationConfiguration);
            return this;
        }

        public Builder requestPayer(@Nullable Input<String> requestPayer) {
            this.requestPayer = requestPayer;
            return this;
        }

        public Builder requestPayer(@Nullable String requestPayer) {
            this.requestPayer = Input.ofNullable(requestPayer);
            return this;
        }

        public Builder serverSideEncryptionConfiguration(@Nullable Input<BucketServerSideEncryptionConfigurationGetArgs> serverSideEncryptionConfiguration) {
            this.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration;
            return this;
        }

        public Builder serverSideEncryptionConfiguration(@Nullable BucketServerSideEncryptionConfigurationGetArgs serverSideEncryptionConfiguration) {
            this.serverSideEncryptionConfiguration = Input.ofNullable(serverSideEncryptionConfiguration);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder versioning(@Nullable Input<BucketVersioningGetArgs> versioning) {
            this.versioning = versioning;
            return this;
        }

        public Builder versioning(@Nullable BucketVersioningGetArgs versioning) {
            this.versioning = Input.ofNullable(versioning);
            return this;
        }

        public Builder website(@Nullable Input<BucketWebsiteGetArgs> website) {
            this.website = website;
            return this;
        }

        public Builder website(@Nullable BucketWebsiteGetArgs website) {
            this.website = Input.ofNullable(website);
            return this;
        }

        public Builder websiteDomain(@Nullable Input<String> websiteDomain) {
            this.websiteDomain = websiteDomain;
            return this;
        }

        public Builder websiteDomain(@Nullable String websiteDomain) {
            this.websiteDomain = Input.ofNullable(websiteDomain);
            return this;
        }

        public Builder websiteEndpoint(@Nullable Input<String> websiteEndpoint) {
            this.websiteEndpoint = websiteEndpoint;
            return this;
        }

        public Builder websiteEndpoint(@Nullable String websiteEndpoint) {
            this.websiteEndpoint = Input.ofNullable(websiteEndpoint);
            return this;
        }
        public BucketState build() {
            return new BucketState(accelerationStatus, acl, arn, bucket, bucketDomainName, bucketPrefix, bucketRegionalDomainName, corsRules, forceDestroy, grants, hostedZoneId, lifecycleRules, loggings, objectLockConfiguration, policy, region, replicationConfiguration, requestPayer, serverSideEncryptionConfiguration, tags, tagsAll, versioning, website, websiteDomain, websiteEndpoint);
        }
    }
}
