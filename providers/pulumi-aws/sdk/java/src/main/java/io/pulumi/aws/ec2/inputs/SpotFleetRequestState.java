// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.SpotFleetRequestLaunchSpecificationGetArgs;
import io.pulumi.aws.ec2.inputs.SpotFleetRequestLaunchTemplateConfigGetArgs;
import io.pulumi.aws.ec2.inputs.SpotFleetRequestSpotMaintenanceStrategiesGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SpotFleetRequestState extends io.pulumi.resources.ResourceArgs {

    public static final SpotFleetRequestState Empty = new SpotFleetRequestState();

    /**
     * Indicates how to allocate the target capacity across
     * the Spot pools specified by the Spot fleet request. The default is
     * `lowestPrice`.
     * 
     */
    @InputImport(name="allocationStrategy")
      private final @Nullable Output<String> allocationStrategy;

    public Output<String> getAllocationStrategy() {
        return this.allocationStrategy == null ? Output.empty() : this.allocationStrategy;
    }

    @InputImport(name="clientToken")
      private final @Nullable Output<String> clientToken;

    public Output<String> getClientToken() {
        return this.clientToken == null ? Output.empty() : this.clientToken;
    }

    /**
     * Indicates whether running Spot
     * instances should be terminated if the target capacity of the Spot fleet
     * request is decreased below the current size of the Spot fleet.
     * 
     */
    @InputImport(name="excessCapacityTerminationPolicy")
      private final @Nullable Output<String> excessCapacityTerminationPolicy;

    public Output<String> getExcessCapacityTerminationPolicy() {
        return this.excessCapacityTerminationPolicy == null ? Output.empty() : this.excessCapacityTerminationPolicy;
    }

    /**
     * The type of fleet request. Indicates whether the Spot Fleet only requests the target
     * capacity or also attempts to maintain it. Default is `maintain`.
     * 
     */
    @InputImport(name="fleetType")
      private final @Nullable Output<String> fleetType;

    public Output<String> getFleetType() {
        return this.fleetType == null ? Output.empty() : this.fleetType;
    }

    /**
     * Grants the Spot fleet permission to terminate
     * Spot instances on your behalf when you cancel its Spot fleet request using
     * CancelSpotFleetRequests or when the Spot fleet request expires, if you set
     * terminateInstancesWithExpiration.
     * 
     */
    @InputImport(name="iamFleetRole")
      private final @Nullable Output<String> iamFleetRole;

    public Output<String> getIamFleetRole() {
        return this.iamFleetRole == null ? Output.empty() : this.iamFleetRole;
    }

    /**
     * Indicates whether a Spot
     * instance stops or terminates when it is interrupted. Default is
     * `terminate`.
     * 
     */
    @InputImport(name="instanceInterruptionBehaviour")
      private final @Nullable Output<String> instanceInterruptionBehaviour;

    public Output<String> getInstanceInterruptionBehaviour() {
        return this.instanceInterruptionBehaviour == null ? Output.empty() : this.instanceInterruptionBehaviour;
    }

    /**
     * The number of Spot pools across which to allocate your target Spot capacity.
     * Valid only when `allocation_strategy` is set to `lowestPrice`. Spot Fleet selects
     * the cheapest Spot pools and evenly allocates your target Spot capacity across
     * the number of Spot pools that you specify.
     * 
     */
    @InputImport(name="instancePoolsToUseCount")
      private final @Nullable Output<Integer> instancePoolsToUseCount;

    public Output<Integer> getInstancePoolsToUseCount() {
        return this.instancePoolsToUseCount == null ? Output.empty() : this.instancePoolsToUseCount;
    }

    /**
     * Used to define the launch configuration of the
     * spot-fleet request. Can be specified multiple times to define different bids
     * across different markets and instance types. Conflicts with `launch_template_config`. At least one of `launch_specification` or `launch_template_config` is required.
     * 
     */
    @InputImport(name="launchSpecifications")
      private final @Nullable Output<List<SpotFleetRequestLaunchSpecificationGetArgs>> launchSpecifications;

    public Output<List<SpotFleetRequestLaunchSpecificationGetArgs>> getLaunchSpecifications() {
        return this.launchSpecifications == null ? Output.empty() : this.launchSpecifications;
    }

    /**
     * Launch template configuration block. See Launch Template Configs below for more details. Conflicts with `launch_specification`. At least one of `launch_specification` or `launch_template_config` is required.
     * 
     */
    @InputImport(name="launchTemplateConfigs")
      private final @Nullable Output<List<SpotFleetRequestLaunchTemplateConfigGetArgs>> launchTemplateConfigs;

    public Output<List<SpotFleetRequestLaunchTemplateConfigGetArgs>> getLaunchTemplateConfigs() {
        return this.launchTemplateConfigs == null ? Output.empty() : this.launchTemplateConfigs;
    }

    /**
     * A list of elastic load balancer names to add to the Spot fleet.
     * 
     */
    @InputImport(name="loadBalancers")
      private final @Nullable Output<List<String>> loadBalancers;

    public Output<List<String>> getLoadBalancers() {
        return this.loadBalancers == null ? Output.empty() : this.loadBalancers;
    }

    /**
     * The order of the launch template overrides to use in fulfilling On-Demand capacity. the possible values are: `lowestPrice` and `prioritized`. the default is `lowestPrice`.
     * 
     */
    @InputImport(name="onDemandAllocationStrategy")
      private final @Nullable Output<String> onDemandAllocationStrategy;

    public Output<String> getOnDemandAllocationStrategy() {
        return this.onDemandAllocationStrategy == null ? Output.empty() : this.onDemandAllocationStrategy;
    }

    /**
     * The maximum amount per hour for On-Demand Instances that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity.
     * 
     */
    @InputImport(name="onDemandMaxTotalPrice")
      private final @Nullable Output<String> onDemandMaxTotalPrice;

    public Output<String> getOnDemandMaxTotalPrice() {
        return this.onDemandMaxTotalPrice == null ? Output.empty() : this.onDemandMaxTotalPrice;
    }

    /**
     * The number of On-Demand units to request. If the request type is `maintain`, you can specify a target capacity of 0 and add capacity later.
     * 
     */
    @InputImport(name="onDemandTargetCapacity")
      private final @Nullable Output<Integer> onDemandTargetCapacity;

    public Output<Integer> getOnDemandTargetCapacity() {
        return this.onDemandTargetCapacity == null ? Output.empty() : this.onDemandTargetCapacity;
    }

    /**
     * Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
     * 
     */
    @InputImport(name="replaceUnhealthyInstances")
      private final @Nullable Output<Boolean> replaceUnhealthyInstances;

    public Output<Boolean> getReplaceUnhealthyInstances() {
        return this.replaceUnhealthyInstances == null ? Output.empty() : this.replaceUnhealthyInstances;
    }

    /**
     * Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
     * 
     */
    @InputImport(name="spotMaintenanceStrategies")
      private final @Nullable Output<SpotFleetRequestSpotMaintenanceStrategiesGetArgs> spotMaintenanceStrategies;

    public Output<SpotFleetRequestSpotMaintenanceStrategiesGetArgs> getSpotMaintenanceStrategies() {
        return this.spotMaintenanceStrategies == null ? Output.empty() : this.spotMaintenanceStrategies;
    }

    /**
     * The maximum spot bid for this override request.
     * 
     */
    @InputImport(name="spotPrice")
      private final @Nullable Output<String> spotPrice;

    public Output<String> getSpotPrice() {
        return this.spotPrice == null ? Output.empty() : this.spotPrice;
    }

    /**
     * The state of the Spot fleet request.
     * 
     */
    @InputImport(name="spotRequestState")
      private final @Nullable Output<String> spotRequestState;

    public Output<String> getSpotRequestState() {
        return this.spotRequestState == null ? Output.empty() : this.spotRequestState;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * The number of units to request. You can choose to set the
     * target capacity in terms of instances or a performance characteristic that is
     * important to your application workload, such as vCPUs, memory, or I/O.
     * 
     */
    @InputImport(name="targetCapacity")
      private final @Nullable Output<Integer> targetCapacity;

    public Output<Integer> getTargetCapacity() {
        return this.targetCapacity == null ? Output.empty() : this.targetCapacity;
    }

    /**
     * A list of `aws.alb.TargetGroup` ARNs, for use with Application Load Balancing.
     * 
     */
    @InputImport(name="targetGroupArns")
      private final @Nullable Output<List<String>> targetGroupArns;

    public Output<List<String>> getTargetGroupArns() {
        return this.targetGroupArns == null ? Output.empty() : this.targetGroupArns;
    }

    /**
     * Indicates whether running Spot
     * instances should be terminated when the Spot fleet request expires.
     * 
     */
    @InputImport(name="terminateInstancesWithExpiration")
      private final @Nullable Output<Boolean> terminateInstancesWithExpiration;

    public Output<Boolean> getTerminateInstancesWithExpiration() {
        return this.terminateInstancesWithExpiration == null ? Output.empty() : this.terminateInstancesWithExpiration;
    }

    /**
     * The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
     * 
     */
    @InputImport(name="validFrom")
      private final @Nullable Output<String> validFrom;

    public Output<String> getValidFrom() {
        return this.validFrom == null ? Output.empty() : this.validFrom;
    }

    /**
     * The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
     * 
     */
    @InputImport(name="validUntil")
      private final @Nullable Output<String> validUntil;

    public Output<String> getValidUntil() {
        return this.validUntil == null ? Output.empty() : this.validUntil;
    }

    /**
     * If set, this provider will
     * wait for the Spot Request to be fulfilled, and will throw an error if the
     * timeout of 10m is reached.
     * 
     */
    @InputImport(name="waitForFulfillment")
      private final @Nullable Output<Boolean> waitForFulfillment;

    public Output<Boolean> getWaitForFulfillment() {
        return this.waitForFulfillment == null ? Output.empty() : this.waitForFulfillment;
    }

    public SpotFleetRequestState(
        @Nullable Output<String> allocationStrategy,
        @Nullable Output<String> clientToken,
        @Nullable Output<String> excessCapacityTerminationPolicy,
        @Nullable Output<String> fleetType,
        @Nullable Output<String> iamFleetRole,
        @Nullable Output<String> instanceInterruptionBehaviour,
        @Nullable Output<Integer> instancePoolsToUseCount,
        @Nullable Output<List<SpotFleetRequestLaunchSpecificationGetArgs>> launchSpecifications,
        @Nullable Output<List<SpotFleetRequestLaunchTemplateConfigGetArgs>> launchTemplateConfigs,
        @Nullable Output<List<String>> loadBalancers,
        @Nullable Output<String> onDemandAllocationStrategy,
        @Nullable Output<String> onDemandMaxTotalPrice,
        @Nullable Output<Integer> onDemandTargetCapacity,
        @Nullable Output<Boolean> replaceUnhealthyInstances,
        @Nullable Output<SpotFleetRequestSpotMaintenanceStrategiesGetArgs> spotMaintenanceStrategies,
        @Nullable Output<String> spotPrice,
        @Nullable Output<String> spotRequestState,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<Integer> targetCapacity,
        @Nullable Output<List<String>> targetGroupArns,
        @Nullable Output<Boolean> terminateInstancesWithExpiration,
        @Nullable Output<String> validFrom,
        @Nullable Output<String> validUntil,
        @Nullable Output<Boolean> waitForFulfillment) {
        this.allocationStrategy = allocationStrategy;
        this.clientToken = clientToken;
        this.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
        this.fleetType = fleetType;
        this.iamFleetRole = iamFleetRole;
        this.instanceInterruptionBehaviour = instanceInterruptionBehaviour;
        this.instancePoolsToUseCount = instancePoolsToUseCount;
        this.launchSpecifications = launchSpecifications;
        this.launchTemplateConfigs = launchTemplateConfigs;
        this.loadBalancers = loadBalancers;
        this.onDemandAllocationStrategy = onDemandAllocationStrategy;
        this.onDemandMaxTotalPrice = onDemandMaxTotalPrice;
        this.onDemandTargetCapacity = onDemandTargetCapacity;
        this.replaceUnhealthyInstances = replaceUnhealthyInstances;
        this.spotMaintenanceStrategies = spotMaintenanceStrategies;
        this.spotPrice = spotPrice;
        this.spotRequestState = spotRequestState;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.targetCapacity = targetCapacity;
        this.targetGroupArns = targetGroupArns;
        this.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
        this.validFrom = validFrom;
        this.validUntil = validUntil;
        this.waitForFulfillment = waitForFulfillment;
    }

    private SpotFleetRequestState() {
        this.allocationStrategy = Output.empty();
        this.clientToken = Output.empty();
        this.excessCapacityTerminationPolicy = Output.empty();
        this.fleetType = Output.empty();
        this.iamFleetRole = Output.empty();
        this.instanceInterruptionBehaviour = Output.empty();
        this.instancePoolsToUseCount = Output.empty();
        this.launchSpecifications = Output.empty();
        this.launchTemplateConfigs = Output.empty();
        this.loadBalancers = Output.empty();
        this.onDemandAllocationStrategy = Output.empty();
        this.onDemandMaxTotalPrice = Output.empty();
        this.onDemandTargetCapacity = Output.empty();
        this.replaceUnhealthyInstances = Output.empty();
        this.spotMaintenanceStrategies = Output.empty();
        this.spotPrice = Output.empty();
        this.spotRequestState = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.targetCapacity = Output.empty();
        this.targetGroupArns = Output.empty();
        this.terminateInstancesWithExpiration = Output.empty();
        this.validFrom = Output.empty();
        this.validUntil = Output.empty();
        this.waitForFulfillment = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpotFleetRequestState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> allocationStrategy;
        private @Nullable Output<String> clientToken;
        private @Nullable Output<String> excessCapacityTerminationPolicy;
        private @Nullable Output<String> fleetType;
        private @Nullable Output<String> iamFleetRole;
        private @Nullable Output<String> instanceInterruptionBehaviour;
        private @Nullable Output<Integer> instancePoolsToUseCount;
        private @Nullable Output<List<SpotFleetRequestLaunchSpecificationGetArgs>> launchSpecifications;
        private @Nullable Output<List<SpotFleetRequestLaunchTemplateConfigGetArgs>> launchTemplateConfigs;
        private @Nullable Output<List<String>> loadBalancers;
        private @Nullable Output<String> onDemandAllocationStrategy;
        private @Nullable Output<String> onDemandMaxTotalPrice;
        private @Nullable Output<Integer> onDemandTargetCapacity;
        private @Nullable Output<Boolean> replaceUnhealthyInstances;
        private @Nullable Output<SpotFleetRequestSpotMaintenanceStrategiesGetArgs> spotMaintenanceStrategies;
        private @Nullable Output<String> spotPrice;
        private @Nullable Output<String> spotRequestState;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<Integer> targetCapacity;
        private @Nullable Output<List<String>> targetGroupArns;
        private @Nullable Output<Boolean> terminateInstancesWithExpiration;
        private @Nullable Output<String> validFrom;
        private @Nullable Output<String> validUntil;
        private @Nullable Output<Boolean> waitForFulfillment;

        public Builder() {
    	      // Empty
        }

        public Builder(SpotFleetRequestState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationStrategy = defaults.allocationStrategy;
    	      this.clientToken = defaults.clientToken;
    	      this.excessCapacityTerminationPolicy = defaults.excessCapacityTerminationPolicy;
    	      this.fleetType = defaults.fleetType;
    	      this.iamFleetRole = defaults.iamFleetRole;
    	      this.instanceInterruptionBehaviour = defaults.instanceInterruptionBehaviour;
    	      this.instancePoolsToUseCount = defaults.instancePoolsToUseCount;
    	      this.launchSpecifications = defaults.launchSpecifications;
    	      this.launchTemplateConfigs = defaults.launchTemplateConfigs;
    	      this.loadBalancers = defaults.loadBalancers;
    	      this.onDemandAllocationStrategy = defaults.onDemandAllocationStrategy;
    	      this.onDemandMaxTotalPrice = defaults.onDemandMaxTotalPrice;
    	      this.onDemandTargetCapacity = defaults.onDemandTargetCapacity;
    	      this.replaceUnhealthyInstances = defaults.replaceUnhealthyInstances;
    	      this.spotMaintenanceStrategies = defaults.spotMaintenanceStrategies;
    	      this.spotPrice = defaults.spotPrice;
    	      this.spotRequestState = defaults.spotRequestState;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.targetCapacity = defaults.targetCapacity;
    	      this.targetGroupArns = defaults.targetGroupArns;
    	      this.terminateInstancesWithExpiration = defaults.terminateInstancesWithExpiration;
    	      this.validFrom = defaults.validFrom;
    	      this.validUntil = defaults.validUntil;
    	      this.waitForFulfillment = defaults.waitForFulfillment;
        }

        public Builder allocationStrategy(@Nullable Output<String> allocationStrategy) {
            this.allocationStrategy = allocationStrategy;
            return this;
        }

        public Builder allocationStrategy(@Nullable String allocationStrategy) {
            this.allocationStrategy = Output.ofNullable(allocationStrategy);
            return this;
        }

        public Builder clientToken(@Nullable Output<String> clientToken) {
            this.clientToken = clientToken;
            return this;
        }

        public Builder clientToken(@Nullable String clientToken) {
            this.clientToken = Output.ofNullable(clientToken);
            return this;
        }

        public Builder excessCapacityTerminationPolicy(@Nullable Output<String> excessCapacityTerminationPolicy) {
            this.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
            return this;
        }

        public Builder excessCapacityTerminationPolicy(@Nullable String excessCapacityTerminationPolicy) {
            this.excessCapacityTerminationPolicy = Output.ofNullable(excessCapacityTerminationPolicy);
            return this;
        }

        public Builder fleetType(@Nullable Output<String> fleetType) {
            this.fleetType = fleetType;
            return this;
        }

        public Builder fleetType(@Nullable String fleetType) {
            this.fleetType = Output.ofNullable(fleetType);
            return this;
        }

        public Builder iamFleetRole(@Nullable Output<String> iamFleetRole) {
            this.iamFleetRole = iamFleetRole;
            return this;
        }

        public Builder iamFleetRole(@Nullable String iamFleetRole) {
            this.iamFleetRole = Output.ofNullable(iamFleetRole);
            return this;
        }

        public Builder instanceInterruptionBehaviour(@Nullable Output<String> instanceInterruptionBehaviour) {
            this.instanceInterruptionBehaviour = instanceInterruptionBehaviour;
            return this;
        }

        public Builder instanceInterruptionBehaviour(@Nullable String instanceInterruptionBehaviour) {
            this.instanceInterruptionBehaviour = Output.ofNullable(instanceInterruptionBehaviour);
            return this;
        }

        public Builder instancePoolsToUseCount(@Nullable Output<Integer> instancePoolsToUseCount) {
            this.instancePoolsToUseCount = instancePoolsToUseCount;
            return this;
        }

        public Builder instancePoolsToUseCount(@Nullable Integer instancePoolsToUseCount) {
            this.instancePoolsToUseCount = Output.ofNullable(instancePoolsToUseCount);
            return this;
        }

        public Builder launchSpecifications(@Nullable Output<List<SpotFleetRequestLaunchSpecificationGetArgs>> launchSpecifications) {
            this.launchSpecifications = launchSpecifications;
            return this;
        }

        public Builder launchSpecifications(@Nullable List<SpotFleetRequestLaunchSpecificationGetArgs> launchSpecifications) {
            this.launchSpecifications = Output.ofNullable(launchSpecifications);
            return this;
        }

        public Builder launchTemplateConfigs(@Nullable Output<List<SpotFleetRequestLaunchTemplateConfigGetArgs>> launchTemplateConfigs) {
            this.launchTemplateConfigs = launchTemplateConfigs;
            return this;
        }

        public Builder launchTemplateConfigs(@Nullable List<SpotFleetRequestLaunchTemplateConfigGetArgs> launchTemplateConfigs) {
            this.launchTemplateConfigs = Output.ofNullable(launchTemplateConfigs);
            return this;
        }

        public Builder loadBalancers(@Nullable Output<List<String>> loadBalancers) {
            this.loadBalancers = loadBalancers;
            return this;
        }

        public Builder loadBalancers(@Nullable List<String> loadBalancers) {
            this.loadBalancers = Output.ofNullable(loadBalancers);
            return this;
        }

        public Builder onDemandAllocationStrategy(@Nullable Output<String> onDemandAllocationStrategy) {
            this.onDemandAllocationStrategy = onDemandAllocationStrategy;
            return this;
        }

        public Builder onDemandAllocationStrategy(@Nullable String onDemandAllocationStrategy) {
            this.onDemandAllocationStrategy = Output.ofNullable(onDemandAllocationStrategy);
            return this;
        }

        public Builder onDemandMaxTotalPrice(@Nullable Output<String> onDemandMaxTotalPrice) {
            this.onDemandMaxTotalPrice = onDemandMaxTotalPrice;
            return this;
        }

        public Builder onDemandMaxTotalPrice(@Nullable String onDemandMaxTotalPrice) {
            this.onDemandMaxTotalPrice = Output.ofNullable(onDemandMaxTotalPrice);
            return this;
        }

        public Builder onDemandTargetCapacity(@Nullable Output<Integer> onDemandTargetCapacity) {
            this.onDemandTargetCapacity = onDemandTargetCapacity;
            return this;
        }

        public Builder onDemandTargetCapacity(@Nullable Integer onDemandTargetCapacity) {
            this.onDemandTargetCapacity = Output.ofNullable(onDemandTargetCapacity);
            return this;
        }

        public Builder replaceUnhealthyInstances(@Nullable Output<Boolean> replaceUnhealthyInstances) {
            this.replaceUnhealthyInstances = replaceUnhealthyInstances;
            return this;
        }

        public Builder replaceUnhealthyInstances(@Nullable Boolean replaceUnhealthyInstances) {
            this.replaceUnhealthyInstances = Output.ofNullable(replaceUnhealthyInstances);
            return this;
        }

        public Builder spotMaintenanceStrategies(@Nullable Output<SpotFleetRequestSpotMaintenanceStrategiesGetArgs> spotMaintenanceStrategies) {
            this.spotMaintenanceStrategies = spotMaintenanceStrategies;
            return this;
        }

        public Builder spotMaintenanceStrategies(@Nullable SpotFleetRequestSpotMaintenanceStrategiesGetArgs spotMaintenanceStrategies) {
            this.spotMaintenanceStrategies = Output.ofNullable(spotMaintenanceStrategies);
            return this;
        }

        public Builder spotPrice(@Nullable Output<String> spotPrice) {
            this.spotPrice = spotPrice;
            return this;
        }

        public Builder spotPrice(@Nullable String spotPrice) {
            this.spotPrice = Output.ofNullable(spotPrice);
            return this;
        }

        public Builder spotRequestState(@Nullable Output<String> spotRequestState) {
            this.spotRequestState = spotRequestState;
            return this;
        }

        public Builder spotRequestState(@Nullable String spotRequestState) {
            this.spotRequestState = Output.ofNullable(spotRequestState);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }

        public Builder targetCapacity(@Nullable Output<Integer> targetCapacity) {
            this.targetCapacity = targetCapacity;
            return this;
        }

        public Builder targetCapacity(@Nullable Integer targetCapacity) {
            this.targetCapacity = Output.ofNullable(targetCapacity);
            return this;
        }

        public Builder targetGroupArns(@Nullable Output<List<String>> targetGroupArns) {
            this.targetGroupArns = targetGroupArns;
            return this;
        }

        public Builder targetGroupArns(@Nullable List<String> targetGroupArns) {
            this.targetGroupArns = Output.ofNullable(targetGroupArns);
            return this;
        }

        public Builder terminateInstancesWithExpiration(@Nullable Output<Boolean> terminateInstancesWithExpiration) {
            this.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
            return this;
        }

        public Builder terminateInstancesWithExpiration(@Nullable Boolean terminateInstancesWithExpiration) {
            this.terminateInstancesWithExpiration = Output.ofNullable(terminateInstancesWithExpiration);
            return this;
        }

        public Builder validFrom(@Nullable Output<String> validFrom) {
            this.validFrom = validFrom;
            return this;
        }

        public Builder validFrom(@Nullable String validFrom) {
            this.validFrom = Output.ofNullable(validFrom);
            return this;
        }

        public Builder validUntil(@Nullable Output<String> validUntil) {
            this.validUntil = validUntil;
            return this;
        }

        public Builder validUntil(@Nullable String validUntil) {
            this.validUntil = Output.ofNullable(validUntil);
            return this;
        }

        public Builder waitForFulfillment(@Nullable Output<Boolean> waitForFulfillment) {
            this.waitForFulfillment = waitForFulfillment;
            return this;
        }

        public Builder waitForFulfillment(@Nullable Boolean waitForFulfillment) {
            this.waitForFulfillment = Output.ofNullable(waitForFulfillment);
            return this;
        }
        public SpotFleetRequestState build() {
            return new SpotFleetRequestState(allocationStrategy, clientToken, excessCapacityTerminationPolicy, fleetType, iamFleetRole, instanceInterruptionBehaviour, instancePoolsToUseCount, launchSpecifications, launchTemplateConfigs, loadBalancers, onDemandAllocationStrategy, onDemandMaxTotalPrice, onDemandTargetCapacity, replaceUnhealthyInstances, spotMaintenanceStrategies, spotPrice, spotRequestState, tags, tagsAll, targetCapacity, targetGroupArns, terminateInstancesWithExpiration, validFrom, validUntil, waitForFulfillment);
        }
    }
}
