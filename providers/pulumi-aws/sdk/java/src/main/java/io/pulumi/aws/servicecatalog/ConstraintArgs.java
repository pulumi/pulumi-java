// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.servicecatalog;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConstraintArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConstraintArgs Empty = new ConstraintArgs();

    /**
     * Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
     * 
     */
    @Import(name="acceptLanguage")
      private final @Nullable Output<String> acceptLanguage;

    public Output<String> acceptLanguage() {
        return this.acceptLanguage == null ? Codegen.empty() : this.acceptLanguage;
    }

    /**
     * Description of the constraint.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Constraint parameters in JSON format. The syntax depends on the constraint type. See details below.
     * 
     */
    @Import(name="parameters", required=true)
      private final Output<String> parameters;

    public Output<String> parameters() {
        return this.parameters;
    }

    /**
     * Portfolio identifier.
     * 
     */
    @Import(name="portfolioId", required=true)
      private final Output<String> portfolioId;

    public Output<String> portfolioId() {
        return this.portfolioId;
    }

    /**
     * Product identifier.
     * 
     */
    @Import(name="productId", required=true)
      private final Output<String> productId;

    public Output<String> productId() {
        return this.productId;
    }

    /**
     * Type of constraint. Valid values are `LAUNCH`, `NOTIFICATION`, `RESOURCE_UPDATE`, `STACKSET`, and `TEMPLATE`.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public ConstraintArgs(
        @Nullable Output<String> acceptLanguage,
        @Nullable Output<String> description,
        Output<String> parameters,
        Output<String> portfolioId,
        Output<String> productId,
        Output<String> type) {
        this.acceptLanguage = acceptLanguage;
        this.description = description;
        this.parameters = Objects.requireNonNull(parameters, "expected parameter 'parameters' to be non-null");
        this.portfolioId = Objects.requireNonNull(portfolioId, "expected parameter 'portfolioId' to be non-null");
        this.productId = Objects.requireNonNull(productId, "expected parameter 'productId' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ConstraintArgs() {
        this.acceptLanguage = Codegen.empty();
        this.description = Codegen.empty();
        this.parameters = Codegen.empty();
        this.portfolioId = Codegen.empty();
        this.productId = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConstraintArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> acceptLanguage;
        private @Nullable Output<String> description;
        private Output<String> parameters;
        private Output<String> portfolioId;
        private Output<String> productId;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ConstraintArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptLanguage = defaults.acceptLanguage;
    	      this.description = defaults.description;
    	      this.parameters = defaults.parameters;
    	      this.portfolioId = defaults.portfolioId;
    	      this.productId = defaults.productId;
    	      this.type = defaults.type;
        }

        public Builder acceptLanguage(@Nullable Output<String> acceptLanguage) {
            this.acceptLanguage = acceptLanguage;
            return this;
        }
        public Builder acceptLanguage(@Nullable String acceptLanguage) {
            this.acceptLanguage = Codegen.ofNullable(acceptLanguage);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder parameters(Output<String> parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        public Builder parameters(String parameters) {
            this.parameters = Output.of(Objects.requireNonNull(parameters));
            return this;
        }
        public Builder portfolioId(Output<String> portfolioId) {
            this.portfolioId = Objects.requireNonNull(portfolioId);
            return this;
        }
        public Builder portfolioId(String portfolioId) {
            this.portfolioId = Output.of(Objects.requireNonNull(portfolioId));
            return this;
        }
        public Builder productId(Output<String> productId) {
            this.productId = Objects.requireNonNull(productId);
            return this;
        }
        public Builder productId(String productId) {
            this.productId = Output.of(Objects.requireNonNull(productId));
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ConstraintArgs build() {
            return new ConstraintArgs(acceptLanguage, description, parameters, portfolioId, productId, type);
        }
    }
}
