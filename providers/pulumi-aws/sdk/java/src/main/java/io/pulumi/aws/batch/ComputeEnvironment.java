// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.batch;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.batch.ComputeEnvironmentArgs;
import io.pulumi.aws.batch.inputs.ComputeEnvironmentState;
import io.pulumi.aws.batch.outputs.ComputeEnvironmentComputeResources;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Creates a AWS Batch compute environment. Compute environments contain the Amazon ECS container instances that are used to run containerized batch jobs.
 * 
 * For information about AWS Batch, see [What is AWS Batch?](http://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html) .
 * For information about compute environment, see [Compute Environments](http://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) .
 * 
 * > **Note:** To prevent a race condition during environment deletion, make sure to set `depends_on` to the related `aws.iam.RolePolicyAttachment`;
 * otherwise, the policy may be destroyed too soon and the compute environment will then get stuck in the `DELETING` state, see [Troubleshooting AWS Batch](http://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html) .
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### EC2 Type
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const ecsInstanceRoleRole = new aws.iam.Role("ecsInstanceRoleRole", {assumeRolePolicy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [
 * 	{
 * 	    "Action": "sts:AssumeRole",
 * 	    "Effect": "Allow",
 * 	    "Principal": {
 * 	        "Service": "ec2.amazonaws.com"
 * 	    }
 * 	}
 *     ]
 * }
 * `});
 * const ecsInstanceRoleRolePolicyAttachment = new aws.iam.RolePolicyAttachment("ecsInstanceRoleRolePolicyAttachment", {
 *     role: ecsInstanceRoleRole.name,
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
 * });
 * const ecsInstanceRoleInstanceProfile = new aws.iam.InstanceProfile("ecsInstanceRoleInstanceProfile", {role: ecsInstanceRoleRole.name});
 * const awsBatchServiceRoleRole = new aws.iam.Role("awsBatchServiceRoleRole", {assumeRolePolicy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [
 * 	{
 * 	    "Action": "sts:AssumeRole",
 * 	    "Effect": "Allow",
 * 	    "Principal": {
 * 		"Service": "batch.amazonaws.com"
 * 	    }
 * 	}
 *     ]
 * }
 * `});
 * const awsBatchServiceRoleRolePolicyAttachment = new aws.iam.RolePolicyAttachment("awsBatchServiceRoleRolePolicyAttachment", {
 *     role: awsBatchServiceRoleRole.name,
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole",
 * });
 * const sampleVpc = new aws.ec2.Vpc("sampleVpc", {cidrBlock: "10.1.0.0/16"});
 * const sampleSecurityGroup = new aws.ec2.SecurityGroup("sampleSecurityGroup", {
 *     vpcId: sampleVpc.id,
 *     egress: [{
 *         fromPort: 0,
 *         toPort: 0,
 *         protocol: "-1",
 *         cidrBlocks: ["0.0.0.0/0"],
 *     }],
 * });
 * const sampleSubnet = new aws.ec2.Subnet("sampleSubnet", {
 *     vpcId: sampleVpc.id,
 *     cidrBlock: "10.1.1.0/24",
 * });
 * const sampleComputeEnvironment = new aws.batch.ComputeEnvironment("sampleComputeEnvironment", {
 *     computeEnvironmentName: "sample",
 *     computeResources: {
 *         instanceRole: ecsInstanceRoleInstanceProfile.arn,
 *         instanceTypes: ["c4.large"],
 *         maxVcpus: 16,
 *         minVcpus: 0,
 *         securityGroupIds: [sampleSecurityGroup.id],
 *         subnets: [sampleSubnet.id],
 *         type: "EC2",
 *     },
 *     serviceRole: awsBatchServiceRoleRole.arn,
 *     type: "MANAGED",
 * }, {
 *     dependsOn: [awsBatchServiceRoleRolePolicyAttachment],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * ecs_instance_role_role = aws.iam.Role("ecsInstanceRoleRole", assume_role_policy="""{
 *     "Version": "2012-10-17",
 *     "Statement": [
 * 	{
 * 	    "Action": "sts:AssumeRole",
 * 	    "Effect": "Allow",
 * 	    "Principal": {
 * 	        "Service": "ec2.amazonaws.com"
 * 	    }
 * 	}
 *     ]
 * }
 * """)
 * ecs_instance_role_role_policy_attachment = aws.iam.RolePolicyAttachment("ecsInstanceRoleRolePolicyAttachment",
 *     role=ecs_instance_role_role.name,
 *     policy_arn="arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role")
 * ecs_instance_role_instance_profile = aws.iam.InstanceProfile("ecsInstanceRoleInstanceProfile", role=ecs_instance_role_role.name)
 * aws_batch_service_role_role = aws.iam.Role("awsBatchServiceRoleRole", assume_role_policy="""{
 *     "Version": "2012-10-17",
 *     "Statement": [
 * 	{
 * 	    "Action": "sts:AssumeRole",
 * 	    "Effect": "Allow",
 * 	    "Principal": {
 * 		"Service": "batch.amazonaws.com"
 * 	    }
 * 	}
 *     ]
 * }
 * """)
 * aws_batch_service_role_role_policy_attachment = aws.iam.RolePolicyAttachment("awsBatchServiceRoleRolePolicyAttachment",
 *     role=aws_batch_service_role_role.name,
 *     policy_arn="arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole")
 * sample_vpc = aws.ec2.Vpc("sampleVpc", cidr_block="10.1.0.0/16")
 * sample_security_group = aws.ec2.SecurityGroup("sampleSecurityGroup",
 *     vpc_id=sample_vpc.id,
 *     egress=[aws.ec2.SecurityGroupEgressArgs(
 *         from_port=0,
 *         to_port=0,
 *         protocol="-1",
 *         cidr_blocks=["0.0.0.0/0"],
 *     )])
 * sample_subnet = aws.ec2.Subnet("sampleSubnet",
 *     vpc_id=sample_vpc.id,
 *     cidr_block="10.1.1.0/24")
 * sample_compute_environment = aws.batch.ComputeEnvironment("sampleComputeEnvironment",
 *     compute_environment_name="sample",
 *     compute_resources=aws.batch.ComputeEnvironmentComputeResourcesArgs(
 *         instance_role=ecs_instance_role_instance_profile.arn,
 *         instance_types=["c4.large"],
 *         max_vcpus=16,
 *         min_vcpus=0,
 *         security_group_ids=[sample_security_group.id],
 *         subnets=[sample_subnet.id],
 *         type="EC2",
 *     ),
 *     service_role=aws_batch_service_role_role.arn,
 *     type="MANAGED",
 *     opts=pulumi.ResourceOptions(depends_on=[aws_batch_service_role_role_policy_attachment]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var ecsInstanceRoleRole = new Aws.Iam.Role("ecsInstanceRoleRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *     ""Version"": ""2012-10-17"",
 *     ""Statement"": [
 * 	{
 * 	    ""Action"": ""sts:AssumeRole"",
 * 	    ""Effect"": ""Allow"",
 * 	    ""Principal"": {
 * 	        ""Service"": ""ec2.amazonaws.com""
 * 	    }
 * 	}
 *     ]
 * }
 * ",
 *         });
 *         var ecsInstanceRoleRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("ecsInstanceRoleRolePolicyAttachment", new Aws.Iam.RolePolicyAttachmentArgs
 *         {
 *             Role = ecsInstanceRoleRole.Name,
 *             PolicyArn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
 *         });
 *         var ecsInstanceRoleInstanceProfile = new Aws.Iam.InstanceProfile("ecsInstanceRoleInstanceProfile", new Aws.Iam.InstanceProfileArgs
 *         {
 *             Role = ecsInstanceRoleRole.Name,
 *         });
 *         var awsBatchServiceRoleRole = new Aws.Iam.Role("awsBatchServiceRoleRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *     ""Version"": ""2012-10-17"",
 *     ""Statement"": [
 * 	{
 * 	    ""Action"": ""sts:AssumeRole"",
 * 	    ""Effect"": ""Allow"",
 * 	    ""Principal"": {
 * 		""Service"": ""batch.amazonaws.com""
 * 	    }
 * 	}
 *     ]
 * }
 * ",
 *         });
 *         var awsBatchServiceRoleRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("awsBatchServiceRoleRolePolicyAttachment", new Aws.Iam.RolePolicyAttachmentArgs
 *         {
 *             Role = awsBatchServiceRoleRole.Name,
 *             PolicyArn = "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole",
 *         });
 *         var sampleVpc = new Aws.Ec2.Vpc("sampleVpc", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "10.1.0.0/16",
 *         });
 *         var sampleSecurityGroup = new Aws.Ec2.SecurityGroup("sampleSecurityGroup", new Aws.Ec2.SecurityGroupArgs
 *         {
 *             VpcId = sampleVpc.Id,
 *             Egress = 
 *             {
 *                 new Aws.Ec2.Inputs.SecurityGroupEgressArgs
 *                 {
 *                     FromPort = 0,
 *                     ToPort = 0,
 *                     Protocol = "-1",
 *                     CidrBlocks = 
 *                     {
 *                         "0.0.0.0/0",
 *                     },
 *                 },
 *             },
 *         });
 *         var sampleSubnet = new Aws.Ec2.Subnet("sampleSubnet", new Aws.Ec2.SubnetArgs
 *         {
 *             VpcId = sampleVpc.Id,
 *             CidrBlock = "10.1.1.0/24",
 *         });
 *         var sampleComputeEnvironment = new Aws.Batch.ComputeEnvironment("sampleComputeEnvironment", new Aws.Batch.ComputeEnvironmentArgs
 *         {
 *             ComputeEnvironmentName = "sample",
 *             ComputeResources = new Aws.Batch.Inputs.ComputeEnvironmentComputeResourcesArgs
 *             {
 *                 InstanceRole = ecsInstanceRoleInstanceProfile.Arn,
 *                 InstanceTypes = 
 *                 {
 *                     "c4.large",
 *                 },
 *                 MaxVcpus = 16,
 *                 MinVcpus = 0,
 *                 SecurityGroupIds = 
 *                 {
 *                     sampleSecurityGroup.Id,
 *                 },
 *                 Subnets = 
 *                 {
 *                     sampleSubnet.Id,
 *                 },
 *                 Type = "EC2",
 *             },
 *             ServiceRole = awsBatchServiceRoleRole.Arn,
 *             Type = "MANAGED",
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 awsBatchServiceRoleRolePolicyAttachment,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/batch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		ecsInstanceRoleRole, err := iam.NewRole(ctx, "ecsInstanceRoleRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "    \"Version\": \"2012-10-17\",\n", "    \"Statement\": [\n", "	{\n", "	    \"Action\": \"sts:AssumeRole\",\n", "	    \"Effect\": \"Allow\",\n", "	    \"Principal\": {\n", "	        \"Service\": \"ec2.amazonaws.com\"\n", "	    }\n", "	}\n", "    ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicyAttachment(ctx, "ecsInstanceRoleRolePolicyAttachment", &iam.RolePolicyAttachmentArgs{
 * 			Role:      ecsInstanceRoleRole.Name,
 * 			PolicyArn: pulumi.String("arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		ecsInstanceRoleInstanceProfile, err := iam.NewInstanceProfile(ctx, "ecsInstanceRoleInstanceProfile", &iam.InstanceProfileArgs{
 * 			Role: ecsInstanceRoleRole.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		awsBatchServiceRoleRole, err := iam.NewRole(ctx, "awsBatchServiceRoleRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "    \"Version\": \"2012-10-17\",\n", "    \"Statement\": [\n", "	{\n", "	    \"Action\": \"sts:AssumeRole\",\n", "	    \"Effect\": \"Allow\",\n", "	    \"Principal\": {\n", "		\"Service\": \"batch.amazonaws.com\"\n", "	    }\n", "	}\n", "    ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		awsBatchServiceRoleRolePolicyAttachment, err := iam.NewRolePolicyAttachment(ctx, "awsBatchServiceRoleRolePolicyAttachment", &iam.RolePolicyAttachmentArgs{
 * 			Role:      awsBatchServiceRoleRole.Name,
 * 			PolicyArn: pulumi.String("arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		sampleVpc, err := ec2.NewVpc(ctx, "sampleVpc", &ec2.VpcArgs{
 * 			CidrBlock: pulumi.String("10.1.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		sampleSecurityGroup, err := ec2.NewSecurityGroup(ctx, "sampleSecurityGroup", &ec2.SecurityGroupArgs{
 * 			VpcId: sampleVpc.ID(),
 * 			Egress: ec2.SecurityGroupEgressArray{
 * 				&ec2.SecurityGroupEgressArgs{
 * 					FromPort: pulumi.Int(0),
 * 					ToPort:   pulumi.Int(0),
 * 					Protocol: pulumi.String("-1"),
 * 					CidrBlocks: pulumi.StringArray{
 * 						pulumi.String("0.0.0.0/0"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		sampleSubnet, err := ec2.NewSubnet(ctx, "sampleSubnet", &ec2.SubnetArgs{
 * 			VpcId:     sampleVpc.ID(),
 * 			CidrBlock: pulumi.String("10.1.1.0/24"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = batch.NewComputeEnvironment(ctx, "sampleComputeEnvironment", &batch.ComputeEnvironmentArgs{
 * 			ComputeEnvironmentName: pulumi.String("sample"),
 * 			ComputeResources: &batch.ComputeEnvironmentComputeResourcesArgs{
 * 				InstanceRole: ecsInstanceRoleInstanceProfile.Arn,
 * 				InstanceTypes: pulumi.StringArray{
 * 					pulumi.String("c4.large"),
 * 				},
 * 				MaxVcpus: pulumi.Int(16),
 * 				MinVcpus: pulumi.Int(0),
 * 				SecurityGroupIds: pulumi.StringArray{
 * 					sampleSecurityGroup.ID(),
 * 				},
 * 				Subnets: pulumi.StringArray{
 * 					sampleSubnet.ID(),
 * 				},
 * 				Type: pulumi.String("EC2"),
 * 			},
 * 			ServiceRole: awsBatchServiceRoleRole.Arn,
 * 			Type:        pulumi.String("MANAGED"),
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			awsBatchServiceRoleRolePolicyAttachment,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Fargate Type
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const sample = new aws.batch.ComputeEnvironment("sample", {
 *     computeEnvironmentName: "sample",
 *     computeResources: {
 *         maxVcpus: 16,
 *         securityGroupIds: [aws_security_group.sample.id],
 *         subnets: [aws_subnet.sample.id],
 *         type: "FARGATE",
 *     },
 *     serviceRole: aws_iam_role.aws_batch_service_role.arn,
 *     type: "MANAGED",
 * }, {
 *     dependsOn: [aws_iam_role_policy_attachment.aws_batch_service_role],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * sample = aws.batch.ComputeEnvironment("sample",
 *     compute_environment_name="sample",
 *     compute_resources=aws.batch.ComputeEnvironmentComputeResourcesArgs(
 *         max_vcpus=16,
 *         security_group_ids=[aws_security_group["sample"]["id"]],
 *         subnets=[aws_subnet["sample"]["id"]],
 *         type="FARGATE",
 *     ),
 *     service_role=aws_iam_role["aws_batch_service_role"]["arn"],
 *     type="MANAGED",
 *     opts=pulumi.ResourceOptions(depends_on=[aws_iam_role_policy_attachment["aws_batch_service_role"]]))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var sample = new Aws.Batch.ComputeEnvironment("sample", new Aws.Batch.ComputeEnvironmentArgs
 *         {
 *             ComputeEnvironmentName = "sample",
 *             ComputeResources = new Aws.Batch.Inputs.ComputeEnvironmentComputeResourcesArgs
 *             {
 *                 MaxVcpus = 16,
 *                 SecurityGroupIds = 
 *                 {
 *                     aws_security_group.Sample.Id,
 *                 },
 *                 Subnets = 
 *                 {
 *                     aws_subnet.Sample.Id,
 *                 },
 *                 Type = "FARGATE",
 *             },
 *             ServiceRole = aws_iam_role.Aws_batch_service_role.Arn,
 *             Type = "MANAGED",
 *         }, new CustomResourceOptions
 *         {
 *             DependsOn = 
 *             {
 *                 aws_iam_role_policy_attachment.Aws_batch_service_role,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/batch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := batch.NewComputeEnvironment(ctx, "sample", &batch.ComputeEnvironmentArgs{
 * 			ComputeEnvironmentName: pulumi.String("sample"),
 * 			ComputeResources: &batch.ComputeEnvironmentComputeResourcesArgs{
 * 				MaxVcpus: pulumi.Int(16),
 * 				SecurityGroupIds: pulumi.StringArray{
 * 					pulumi.Any(aws_security_group.Sample.Id),
 * 				},
 * 				Subnets: pulumi.StringArray{
 * 					pulumi.Any(aws_subnet.Sample.Id),
 * 				},
 * 				Type: pulumi.String("FARGATE"),
 * 			},
 * 			ServiceRole: pulumi.Any(aws_iam_role.Aws_batch_service_role.Arn),
 * 			Type:        pulumi.String("MANAGED"),
 * 		}, pulumi.DependsOn([]pulumi.Resource{
 * 			aws_iam_role_policy_attachment.Aws_batch_service_role,
 * 		}))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * AWS Batch compute can be imported using the `compute_environment_name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:batch/computeEnvironment:ComputeEnvironment sample sample
 * ```
 * 
 *  [1]http://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html [2]http://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html [3]http://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html [4]https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html 
 */
@ResourceType(type="aws:batch/computeEnvironment:ComputeEnvironment")
public class ComputeEnvironment extends io.pulumi.resources.CustomResource {
    /**
     * The Amazon Resource Name (ARN) of the compute environment.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the compute environment.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, this provider will assign a random, unique name.
     * 
     */
    @Export(name="computeEnvironmentName", type=String.class, parameters={})
    private Output<String> computeEnvironmentName;

    /**
     * @return The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, this provider will assign a random, unique name.
     * 
     */
    public Output<String> getComputeEnvironmentName() {
        return this.computeEnvironmentName;
    }
    /**
     * Creates a unique compute environment name beginning with the specified prefix. Conflicts with `compute_environment_name`.
     * 
     */
    @Export(name="computeEnvironmentNamePrefix", type=String.class, parameters={})
    private Output<String> computeEnvironmentNamePrefix;

    /**
     * @return Creates a unique compute environment name beginning with the specified prefix. Conflicts with `compute_environment_name`.
     * 
     */
    public Output<String> getComputeEnvironmentNamePrefix() {
        return this.computeEnvironmentNamePrefix;
    }
    /**
     * Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
     * 
     */
    @Export(name="computeResources", type=ComputeEnvironmentComputeResources.class, parameters={})
    private Output</* @Nullable */ ComputeEnvironmentComputeResources> computeResources;

    /**
     * @return Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
     * 
     */
    public Output</* @Nullable */ ComputeEnvironmentComputeResources> getComputeResources() {
        return this.computeResources;
    }
    /**
     * The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
     * 
     */
    @Export(name="ecsClusterArn", type=String.class, parameters={})
    private Output<String> ecsClusterArn;

    /**
     * @return The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
     * 
     */
    public Output<String> getEcsClusterArn() {
        return this.ecsClusterArn;
    }
    /**
     * The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
     * 
     */
    @Export(name="serviceRole", type=String.class, parameters={})
    private Output<String> serviceRole;

    /**
     * @return The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
     * 
     */
    public Output<String> getServiceRole() {
        return this.serviceRole;
    }
    /**
     * The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output</* @Nullable */ String> state;

    /**
     * @return The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
     * 
     */
    public Output</* @Nullable */ String> getState() {
        return this.state;
    }
    /**
     * The current status of the compute environment (for example, CREATING or VALID).
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The current status of the compute environment (for example, CREATING or VALID).
     * 
     */
    public Output<String> getStatus() {
        return this.status;
    }
    /**
     * A short, human-readable string to provide additional details about the current status of the compute environment.
     * 
     */
    @Export(name="statusReason", type=String.class, parameters={})
    private Output<String> statusReason;

    /**
     * @return A short, human-readable string to provide additional details about the current status of the compute environment.
     * 
     */
    public Output<String> getStatusReason() {
        return this.statusReason;
    }
    /**
     * Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of compute environment. Valid items are `EC2`, `SPOT`, `FARGATE` or `FARGATE_SPOT`.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ComputeEnvironment(String name) {
        this(name, ComputeEnvironmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ComputeEnvironment(String name, ComputeEnvironmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ComputeEnvironment(String name, ComputeEnvironmentArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:batch/computeEnvironment:ComputeEnvironment", name, args == null ? ComputeEnvironmentArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private ComputeEnvironment(String name, Output<String> id, @Nullable ComputeEnvironmentState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:batch/computeEnvironment:ComputeEnvironment", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ComputeEnvironment get(String name, Output<String> id, @Nullable ComputeEnvironmentState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new ComputeEnvironment(name, id, state, options);
    }
}
