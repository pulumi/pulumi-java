// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.ec2.inputs.NetworkInterfaceAttachmentArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NetworkInterfaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final NetworkInterfaceArgs Empty = new NetworkInterfaceArgs();

    /**
     * Configuration block to define the attachment of the ENI. See below.
     * 
     */
    @InputImport(name="attachments")
      private final @Nullable Input<List<NetworkInterfaceAttachmentArgs>> attachments;

    public Input<List<NetworkInterfaceAttachmentArgs>> getAttachments() {
        return this.attachments == null ? Input.empty() : this.attachments;
    }

    /**
     * Description for the network interface.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Type of network interface to create. Set to `efa` for Elastic Fabric Adapter. Changing `interface_type` will cause the resource to be destroyed and re-created.
     * 
     */
    @InputImport(name="interfaceType")
      private final @Nullable Input<String> interfaceType;

    public Input<String> getInterfaceType() {
        return this.interfaceType == null ? Input.empty() : this.interfaceType;
    }

    /**
     * Number of IPv4 prefixes that AWS automatically assigns to the network interface.
     * 
     */
    @InputImport(name="ipv4PrefixCount")
      private final @Nullable Input<Integer> ipv4PrefixCount;

    public Input<Integer> getIpv4PrefixCount() {
        return this.ipv4PrefixCount == null ? Input.empty() : this.ipv4PrefixCount;
    }

    /**
     * One or more IPv4 prefixes assigned to the network interface.
     * 
     */
    @InputImport(name="ipv4Prefixes")
      private final @Nullable Input<List<String>> ipv4Prefixes;

    public Input<List<String>> getIpv4Prefixes() {
        return this.ipv4Prefixes == null ? Input.empty() : this.ipv4Prefixes;
    }

    /**
     * Number of IPv6 addresses to assign to a network interface. You can't use this option if specifying specific `ipv6_addresses`. If your subnet has the AssignIpv6AddressOnCreation attribute set to `true`, you can specify `0` to override this setting.
     * 
     */
    @InputImport(name="ipv6AddressCount")
      private final @Nullable Input<Integer> ipv6AddressCount;

    public Input<Integer> getIpv6AddressCount() {
        return this.ipv6AddressCount == null ? Input.empty() : this.ipv6AddressCount;
    }

    @InputImport(name="ipv6AddressListEnabled")
      private final @Nullable Input<Boolean> ipv6AddressListEnabled;

    public Input<Boolean> getIpv6AddressListEnabled() {
        return this.ipv6AddressListEnabled == null ? Input.empty() : this.ipv6AddressListEnabled;
    }

    /**
     * List of private IPs to assign to the ENI in sequential order.
     * 
     */
    @InputImport(name="ipv6AddressLists")
      private final @Nullable Input<List<String>> ipv6AddressLists;

    public Input<List<String>> getIpv6AddressLists() {
        return this.ipv6AddressLists == null ? Input.empty() : this.ipv6AddressLists;
    }

    /**
     * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can't use this option if you're specifying `ipv6_address_count`.
     * 
     */
    @InputImport(name="ipv6Addresses")
      private final @Nullable Input<List<String>> ipv6Addresses;

    public Input<List<String>> getIpv6Addresses() {
        return this.ipv6Addresses == null ? Input.empty() : this.ipv6Addresses;
    }

    /**
     * Number of IPv6 prefixes that AWS automatically assigns to the network interface.
     * 
     */
    @InputImport(name="ipv6PrefixCount")
      private final @Nullable Input<Integer> ipv6PrefixCount;

    public Input<Integer> getIpv6PrefixCount() {
        return this.ipv6PrefixCount == null ? Input.empty() : this.ipv6PrefixCount;
    }

    /**
     * One or more IPv6 prefixes assigned to the network interface.
     * 
     */
    @InputImport(name="ipv6Prefixes")
      private final @Nullable Input<List<String>> ipv6Prefixes;

    public Input<List<String>> getIpv6Prefixes() {
        return this.ipv6Prefixes == null ? Input.empty() : this.ipv6Prefixes;
    }

    @InputImport(name="privateIp")
      private final @Nullable Input<String> privateIp;

    public Input<String> getPrivateIp() {
        return this.privateIp == null ? Input.empty() : this.privateIp;
    }

    @InputImport(name="privateIpListEnabled")
      private final @Nullable Input<Boolean> privateIpListEnabled;

    public Input<Boolean> getPrivateIpListEnabled() {
        return this.privateIpListEnabled == null ? Input.empty() : this.privateIpListEnabled;
    }

    /**
     * List of private IPs to assign to the ENI in sequential order. Requires setting `private_ip_list_enable` to `true`.
     * 
     */
    @InputImport(name="privateIpLists")
      private final @Nullable Input<List<String>> privateIpLists;

    public Input<List<String>> getPrivateIpLists() {
        return this.privateIpLists == null ? Input.empty() : this.privateIpLists;
    }

    /**
     * List of private IPs to assign to the ENI without regard to order.
     * 
     */
    @InputImport(name="privateIps")
      private final @Nullable Input<List<String>> privateIps;

    public Input<List<String>> getPrivateIps() {
        return this.privateIps == null ? Input.empty() : this.privateIps;
    }

    /**
     * Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + `private_ips_count`, as a primary private IP will be assiged to an ENI by default.
     * 
     */
    @InputImport(name="privateIpsCount")
      private final @Nullable Input<Integer> privateIpsCount;

    public Input<Integer> getPrivateIpsCount() {
        return this.privateIpsCount == null ? Input.empty() : this.privateIpsCount;
    }

    /**
     * List of security group IDs to assign to the ENI.
     * 
     */
    @InputImport(name="securityGroups")
      private final @Nullable Input<List<String>> securityGroups;

    public Input<List<String>> getSecurityGroups() {
        return this.securityGroups == null ? Input.empty() : this.securityGroups;
    }

    /**
     * Whether to enable source destination checking for the ENI. Default true.
     * 
     */
    @InputImport(name="sourceDestCheck")
      private final @Nullable Input<Boolean> sourceDestCheck;

    public Input<Boolean> getSourceDestCheck() {
        return this.sourceDestCheck == null ? Input.empty() : this.sourceDestCheck;
    }

    /**
     * Subnet ID to create the ENI in.
     * 
     */
    @InputImport(name="subnetId", required=true)
      private final Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId;
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public NetworkInterfaceArgs(
        @Nullable Input<List<NetworkInterfaceAttachmentArgs>> attachments,
        @Nullable Input<String> description,
        @Nullable Input<String> interfaceType,
        @Nullable Input<Integer> ipv4PrefixCount,
        @Nullable Input<List<String>> ipv4Prefixes,
        @Nullable Input<Integer> ipv6AddressCount,
        @Nullable Input<Boolean> ipv6AddressListEnabled,
        @Nullable Input<List<String>> ipv6AddressLists,
        @Nullable Input<List<String>> ipv6Addresses,
        @Nullable Input<Integer> ipv6PrefixCount,
        @Nullable Input<List<String>> ipv6Prefixes,
        @Nullable Input<String> privateIp,
        @Nullable Input<Boolean> privateIpListEnabled,
        @Nullable Input<List<String>> privateIpLists,
        @Nullable Input<List<String>> privateIps,
        @Nullable Input<Integer> privateIpsCount,
        @Nullable Input<List<String>> securityGroups,
        @Nullable Input<Boolean> sourceDestCheck,
        Input<String> subnetId,
        @Nullable Input<Map<String,String>> tags) {
        this.attachments = attachments;
        this.description = description;
        this.interfaceType = interfaceType;
        this.ipv4PrefixCount = ipv4PrefixCount;
        this.ipv4Prefixes = ipv4Prefixes;
        this.ipv6AddressCount = ipv6AddressCount;
        this.ipv6AddressListEnabled = ipv6AddressListEnabled;
        this.ipv6AddressLists = ipv6AddressLists;
        this.ipv6Addresses = ipv6Addresses;
        this.ipv6PrefixCount = ipv6PrefixCount;
        this.ipv6Prefixes = ipv6Prefixes;
        this.privateIp = privateIp;
        this.privateIpListEnabled = privateIpListEnabled;
        this.privateIpLists = privateIpLists;
        this.privateIps = privateIps;
        this.privateIpsCount = privateIpsCount;
        this.securityGroups = securityGroups;
        this.sourceDestCheck = sourceDestCheck;
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
        this.tags = tags;
    }

    private NetworkInterfaceArgs() {
        this.attachments = Input.empty();
        this.description = Input.empty();
        this.interfaceType = Input.empty();
        this.ipv4PrefixCount = Input.empty();
        this.ipv4Prefixes = Input.empty();
        this.ipv6AddressCount = Input.empty();
        this.ipv6AddressListEnabled = Input.empty();
        this.ipv6AddressLists = Input.empty();
        this.ipv6Addresses = Input.empty();
        this.ipv6PrefixCount = Input.empty();
        this.ipv6Prefixes = Input.empty();
        this.privateIp = Input.empty();
        this.privateIpListEnabled = Input.empty();
        this.privateIpLists = Input.empty();
        this.privateIps = Input.empty();
        this.privateIpsCount = Input.empty();
        this.securityGroups = Input.empty();
        this.sourceDestCheck = Input.empty();
        this.subnetId = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<NetworkInterfaceAttachmentArgs>> attachments;
        private @Nullable Input<String> description;
        private @Nullable Input<String> interfaceType;
        private @Nullable Input<Integer> ipv4PrefixCount;
        private @Nullable Input<List<String>> ipv4Prefixes;
        private @Nullable Input<Integer> ipv6AddressCount;
        private @Nullable Input<Boolean> ipv6AddressListEnabled;
        private @Nullable Input<List<String>> ipv6AddressLists;
        private @Nullable Input<List<String>> ipv6Addresses;
        private @Nullable Input<Integer> ipv6PrefixCount;
        private @Nullable Input<List<String>> ipv6Prefixes;
        private @Nullable Input<String> privateIp;
        private @Nullable Input<Boolean> privateIpListEnabled;
        private @Nullable Input<List<String>> privateIpLists;
        private @Nullable Input<List<String>> privateIps;
        private @Nullable Input<Integer> privateIpsCount;
        private @Nullable Input<List<String>> securityGroups;
        private @Nullable Input<Boolean> sourceDestCheck;
        private Input<String> subnetId;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkInterfaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachments = defaults.attachments;
    	      this.description = defaults.description;
    	      this.interfaceType = defaults.interfaceType;
    	      this.ipv4PrefixCount = defaults.ipv4PrefixCount;
    	      this.ipv4Prefixes = defaults.ipv4Prefixes;
    	      this.ipv6AddressCount = defaults.ipv6AddressCount;
    	      this.ipv6AddressListEnabled = defaults.ipv6AddressListEnabled;
    	      this.ipv6AddressLists = defaults.ipv6AddressLists;
    	      this.ipv6Addresses = defaults.ipv6Addresses;
    	      this.ipv6PrefixCount = defaults.ipv6PrefixCount;
    	      this.ipv6Prefixes = defaults.ipv6Prefixes;
    	      this.privateIp = defaults.privateIp;
    	      this.privateIpListEnabled = defaults.privateIpListEnabled;
    	      this.privateIpLists = defaults.privateIpLists;
    	      this.privateIps = defaults.privateIps;
    	      this.privateIpsCount = defaults.privateIpsCount;
    	      this.securityGroups = defaults.securityGroups;
    	      this.sourceDestCheck = defaults.sourceDestCheck;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
        }

        public Builder attachments(@Nullable Input<List<NetworkInterfaceAttachmentArgs>> attachments) {
            this.attachments = attachments;
            return this;
        }

        public Builder attachments(@Nullable List<NetworkInterfaceAttachmentArgs> attachments) {
            this.attachments = Input.ofNullable(attachments);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder interfaceType(@Nullable Input<String> interfaceType) {
            this.interfaceType = interfaceType;
            return this;
        }

        public Builder interfaceType(@Nullable String interfaceType) {
            this.interfaceType = Input.ofNullable(interfaceType);
            return this;
        }

        public Builder ipv4PrefixCount(@Nullable Input<Integer> ipv4PrefixCount) {
            this.ipv4PrefixCount = ipv4PrefixCount;
            return this;
        }

        public Builder ipv4PrefixCount(@Nullable Integer ipv4PrefixCount) {
            this.ipv4PrefixCount = Input.ofNullable(ipv4PrefixCount);
            return this;
        }

        public Builder ipv4Prefixes(@Nullable Input<List<String>> ipv4Prefixes) {
            this.ipv4Prefixes = ipv4Prefixes;
            return this;
        }

        public Builder ipv4Prefixes(@Nullable List<String> ipv4Prefixes) {
            this.ipv4Prefixes = Input.ofNullable(ipv4Prefixes);
            return this;
        }

        public Builder ipv6AddressCount(@Nullable Input<Integer> ipv6AddressCount) {
            this.ipv6AddressCount = ipv6AddressCount;
            return this;
        }

        public Builder ipv6AddressCount(@Nullable Integer ipv6AddressCount) {
            this.ipv6AddressCount = Input.ofNullable(ipv6AddressCount);
            return this;
        }

        public Builder ipv6AddressListEnabled(@Nullable Input<Boolean> ipv6AddressListEnabled) {
            this.ipv6AddressListEnabled = ipv6AddressListEnabled;
            return this;
        }

        public Builder ipv6AddressListEnabled(@Nullable Boolean ipv6AddressListEnabled) {
            this.ipv6AddressListEnabled = Input.ofNullable(ipv6AddressListEnabled);
            return this;
        }

        public Builder ipv6AddressLists(@Nullable Input<List<String>> ipv6AddressLists) {
            this.ipv6AddressLists = ipv6AddressLists;
            return this;
        }

        public Builder ipv6AddressLists(@Nullable List<String> ipv6AddressLists) {
            this.ipv6AddressLists = Input.ofNullable(ipv6AddressLists);
            return this;
        }

        public Builder ipv6Addresses(@Nullable Input<List<String>> ipv6Addresses) {
            this.ipv6Addresses = ipv6Addresses;
            return this;
        }

        public Builder ipv6Addresses(@Nullable List<String> ipv6Addresses) {
            this.ipv6Addresses = Input.ofNullable(ipv6Addresses);
            return this;
        }

        public Builder ipv6PrefixCount(@Nullable Input<Integer> ipv6PrefixCount) {
            this.ipv6PrefixCount = ipv6PrefixCount;
            return this;
        }

        public Builder ipv6PrefixCount(@Nullable Integer ipv6PrefixCount) {
            this.ipv6PrefixCount = Input.ofNullable(ipv6PrefixCount);
            return this;
        }

        public Builder ipv6Prefixes(@Nullable Input<List<String>> ipv6Prefixes) {
            this.ipv6Prefixes = ipv6Prefixes;
            return this;
        }

        public Builder ipv6Prefixes(@Nullable List<String> ipv6Prefixes) {
            this.ipv6Prefixes = Input.ofNullable(ipv6Prefixes);
            return this;
        }

        public Builder privateIp(@Nullable Input<String> privateIp) {
            this.privateIp = privateIp;
            return this;
        }

        public Builder privateIp(@Nullable String privateIp) {
            this.privateIp = Input.ofNullable(privateIp);
            return this;
        }

        public Builder privateIpListEnabled(@Nullable Input<Boolean> privateIpListEnabled) {
            this.privateIpListEnabled = privateIpListEnabled;
            return this;
        }

        public Builder privateIpListEnabled(@Nullable Boolean privateIpListEnabled) {
            this.privateIpListEnabled = Input.ofNullable(privateIpListEnabled);
            return this;
        }

        public Builder privateIpLists(@Nullable Input<List<String>> privateIpLists) {
            this.privateIpLists = privateIpLists;
            return this;
        }

        public Builder privateIpLists(@Nullable List<String> privateIpLists) {
            this.privateIpLists = Input.ofNullable(privateIpLists);
            return this;
        }

        public Builder privateIps(@Nullable Input<List<String>> privateIps) {
            this.privateIps = privateIps;
            return this;
        }

        public Builder privateIps(@Nullable List<String> privateIps) {
            this.privateIps = Input.ofNullable(privateIps);
            return this;
        }

        public Builder privateIpsCount(@Nullable Input<Integer> privateIpsCount) {
            this.privateIpsCount = privateIpsCount;
            return this;
        }

        public Builder privateIpsCount(@Nullable Integer privateIpsCount) {
            this.privateIpsCount = Input.ofNullable(privateIpsCount);
            return this;
        }

        public Builder securityGroups(@Nullable Input<List<String>> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }

        public Builder securityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = Input.ofNullable(securityGroups);
            return this;
        }

        public Builder sourceDestCheck(@Nullable Input<Boolean> sourceDestCheck) {
            this.sourceDestCheck = sourceDestCheck;
            return this;
        }

        public Builder sourceDestCheck(@Nullable Boolean sourceDestCheck) {
            this.sourceDestCheck = Input.ofNullable(sourceDestCheck);
            return this;
        }

        public Builder subnetId(Input<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }

        public Builder subnetId(String subnetId) {
            this.subnetId = Input.of(Objects.requireNonNull(subnetId));
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public NetworkInterfaceArgs build() {
            return new NetworkInterfaceArgs(attachments, description, interfaceType, ipv4PrefixCount, ipv4Prefixes, ipv6AddressCount, ipv6AddressListEnabled, ipv6AddressLists, ipv6Addresses, ipv6PrefixCount, ipv6Prefixes, privateIp, privateIpListEnabled, privateIpLists, privateIps, privateIpsCount, securityGroups, sourceDestCheck, subnetId, tags);
        }
    }
}
