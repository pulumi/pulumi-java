// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codestarnotifications;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.codestarnotifications.NotificationRuleArgs;
import io.pulumi.aws.codestarnotifications.inputs.NotificationRuleState;
import io.pulumi.aws.codestarnotifications.outputs.NotificationRuleTarget;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a CodeStar Notifications Rule.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const code = new aws.codecommit.Repository("code", {repositoryName: "example-code-repo"});
 * const notif = new aws.sns.Topic("notif", {});
 * const notifAccess = notif.arn.apply(arn => aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         actions: ["sns:Publish"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["codestar-notifications.amazonaws.com"],
 *         }],
 *         resources: [arn],
 *     }],
 * }));
 * const _default = new aws.sns.TopicPolicy("default", {
 *     arn: notif.arn,
 *     policy: notifAccess.apply(notifAccess => notifAccess.json),
 * });
 * const commits = new aws.codestarnotifications.NotificationRule("commits", {
 *     detailType: "BASIC",
 *     eventTypeIds: ["codecommit-repository-comments-on-commits"],
 *     resource: code.arn,
 *     targets: [{
 *         address: notif.arn,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * code = aws.codecommit.Repository("code", repository_name="example-code-repo")
 * notif = aws.sns.Topic("notif")
 * notif_access = notif.arn.apply(lambda arn: aws.iam.get_policy_document_output(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     actions=["sns:Publish"],
 *     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *         type="Service",
 *         identifiers=["codestar-notifications.amazonaws.com"],
 *     )],
 *     resources=[arn],
 * )]))
 * default = aws.sns.TopicPolicy("default",
 *     arn=notif.arn,
 *     policy=notif_access.json)
 * commits = aws.codestarnotifications.NotificationRule("commits",
 *     detail_type="BASIC",
 *     event_type_ids=["codecommit-repository-comments-on-commits"],
 *     resource=code.arn,
 *     targets=[aws.codestarnotifications.NotificationRuleTargetArgs(
 *         address=notif.arn,
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var code = new Aws.CodeCommit.Repository("code", new Aws.CodeCommit.RepositoryArgs
 *         {
 *             RepositoryName = "example-code-repo",
 *         });
 *         var notif = new Aws.Sns.Topic("notif", new Aws.Sns.TopicArgs
 *         {
 *         });
 *         var notifAccess = notif.Arn.Apply(arn => Aws.Iam.GetPolicyDocument.Invoke(new Aws.Iam.GetPolicyDocumentInvokeArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
 *                 {
 *                     Actions = 
 *                     {
 *                         "sns:Publish",
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
 *                         {
 *                             Type = "Service",
 *                             Identifiers = 
 *                             {
 *                                 "codestar-notifications.amazonaws.com",
 *                             },
 *                         },
 *                     },
 *                     Resources = 
 *                     {
 *                         arn,
 *                     },
 *                 },
 *             },
 *         }));
 *         var @default = new Aws.Sns.TopicPolicy("default", new Aws.Sns.TopicPolicyArgs
 *         {
 *             Arn = notif.Arn,
 *             Policy = notifAccess.Apply(notifAccess => notifAccess.Json),
 *         });
 *         var commits = new Aws.CodeStarNotifications.NotificationRule("commits", new Aws.CodeStarNotifications.NotificationRuleArgs
 *         {
 *             DetailType = "BASIC",
 *             EventTypeIds = 
 *             {
 *                 "codecommit-repository-comments-on-commits",
 *             },
 *             Resource = code.Arn,
 *             Targets = 
 *             {
 *                 new Aws.CodeStarNotifications.Inputs.NotificationRuleTargetArgs
 *                 {
 *                     Address = notif.Arn,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codecommit"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codestarnotifications"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sns"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		code, err := codecommit.NewRepository(ctx, "code", &codecommit.RepositoryArgs{
 * 			RepositoryName: pulumi.String("example-code-repo"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		notif, err := sns.NewTopic(ctx, "notif", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = sns.NewTopicPolicy(ctx, "default", &sns.TopicPolicyArgs{
 * 			Arn: notif.Arn,
 * 			Policy: notifAccess.ApplyT(func(notifAccess iam.GetPolicyDocumentResult) (string, error) {
 * 				return notifAccess.Json, nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = codestarnotifications.NewNotificationRule(ctx, "commits", &codestarnotifications.NotificationRuleArgs{
 * 			DetailType: pulumi.String("BASIC"),
 * 			EventTypeIds: pulumi.StringArray{
 * 				pulumi.String("codecommit-repository-comments-on-commits"),
 * 			},
 * 			Resource: code.Arn,
 * 			Targets: codestarnotifications.NotificationRuleTargetArray{
 * 				&codestarnotifications.NotificationRuleTargetArgs{
 * 					Address: notif.Arn,
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * CodeStar notification rule can be imported using the ARN, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:codestarnotifications/notificationRule:NotificationRule foo arn:aws:codestar-notifications:us-west-1:0123456789:notificationrule/2cdc68a3-8f7c-4893-b6a5-45b362bd4f2b
 * ```
 * 
 *  
 */
@ResourceType(type="aws:codestarnotifications/notificationRule:NotificationRule")
public class NotificationRule extends io.pulumi.resources.CustomResource {
    /**
     * The codestar notification rule ARN.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The codestar notification rule ARN.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The level of detail to include in the notifications for this resource. Possible values are `BASIC` and `FULL`.
     * 
     */
    @Export(name="detailType", type=String.class, parameters={})
    private Output<String> detailType;

    /**
     * @return The level of detail to include in the notifications for this resource. Possible values are `BASIC` and `FULL`.
     * 
     */
    public Output<String> getDetailType() {
        return this.detailType;
    }
    /**
     * A list of event types associated with this notification rule.
     * For list of allowed events see [here](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api).
     * 
     */
    @Export(name="eventTypeIds", type=List.class, parameters={String.class})
    private Output<List<String>> eventTypeIds;

    /**
     * @return A list of event types associated with this notification rule.
     * For list of allowed events see [here](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api).
     * 
     */
    public Output<List<String>> getEventTypeIds() {
        return this.eventTypeIds;
    }
    /**
     * The name of notification rule.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of notification rule.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The ARN of the resource to associate with the notification rule.
     * 
     */
    @Export(name="resource", type=String.class, parameters={})
    private Output<String> resource;

    /**
     * @return The ARN of the resource to associate with the notification rule.
     * 
     */
    public Output<String> getResource() {
        return this.resource;
    }
    /**
     * The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output</* @Nullable */ String> status;

    /**
     * @return The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
     * 
     */
    public Output</* @Nullable */ String> getStatus() {
        return this.status;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
     * 
     */
    @Export(name="targets", type=List.class, parameters={NotificationRuleTarget.class})
    private Output</* @Nullable */ List<NotificationRuleTarget>> targets;

    /**
     * @return Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
     * 
     */
    public Output</* @Nullable */ List<NotificationRuleTarget>> getTargets() {
        return this.targets;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NotificationRule(String name) {
        this(name, NotificationRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NotificationRule(String name, NotificationRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NotificationRule(String name, NotificationRuleArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codestarnotifications/notificationRule:NotificationRule", name, args == null ? NotificationRuleArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private NotificationRule(String name, Output<String> id, @Nullable NotificationRuleState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codestarnotifications/notificationRule:NotificationRule", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NotificationRule get(String name, Output<String> id, @Nullable NotificationRuleState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new NotificationRule(name, id, state, options);
    }
}
