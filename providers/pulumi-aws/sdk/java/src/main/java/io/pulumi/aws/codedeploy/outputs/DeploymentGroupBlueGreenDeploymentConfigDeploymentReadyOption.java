// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codedeploy.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption {
    /**
     * When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
     * * `CONTINUE_DEPLOYMENT`: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
     * * `STOP_DEPLOYMENT`: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.
     * 
     */
    private final @Nullable String actionOnTimeout;
    /**
     * The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `action_on_timeout`.
     * 
     */
    private final @Nullable Integer waitTimeInMinutes;

    @OutputCustomType.Constructor({"actionOnTimeout","waitTimeInMinutes"})
    private DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption(
        @Nullable String actionOnTimeout,
        @Nullable Integer waitTimeInMinutes) {
        this.actionOnTimeout = actionOnTimeout;
        this.waitTimeInMinutes = waitTimeInMinutes;
    }

    /**
     * When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
     * * `CONTINUE_DEPLOYMENT`: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
     * * `STOP_DEPLOYMENT`: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.
     * 
     */
    public Optional<String> getActionOnTimeout() {
        return Optional.ofNullable(this.actionOnTimeout);
    }
    /**
     * The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `action_on_timeout`.
     * 
     */
    public Optional<Integer> getWaitTimeInMinutes() {
        return Optional.ofNullable(this.waitTimeInMinutes);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String actionOnTimeout;
        private @Nullable Integer waitTimeInMinutes;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionOnTimeout = defaults.actionOnTimeout;
    	      this.waitTimeInMinutes = defaults.waitTimeInMinutes;
        }

        public Builder setActionOnTimeout(@Nullable String actionOnTimeout) {
            this.actionOnTimeout = actionOnTimeout;
            return this;
        }

        public Builder setWaitTimeInMinutes(@Nullable Integer waitTimeInMinutes) {
            this.waitTimeInMinutes = waitTimeInMinutes;
            return this;
        }
        public DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption build() {
            return new DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption(actionOnTimeout, waitTimeInMinutes);
        }
    }
}
