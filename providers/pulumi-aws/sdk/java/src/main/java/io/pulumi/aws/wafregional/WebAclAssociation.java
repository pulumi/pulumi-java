// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.wafregional;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.wafregional.WebAclAssociationArgs;
import io.pulumi.aws.wafregional.inputs.WebAclAssociationState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages an association with WAF Regional Web ACL.
 * 
 * > **Note:** An Application Load Balancer can only be associated with one WAF Regional WebACL.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Application Load Balancer Association
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const ipset = new aws.wafregional.IpSet("ipset", {ipSetDescriptors: [{
 *     type: "IPV4",
 *     value: "192.0.7.0/24",
 * }]});
 * const fooRule = new aws.wafregional.Rule("fooRule", {
 *     metricName: "tfWAFRule",
 *     predicates: [{
 *         dataId: ipset.id,
 *         negated: false,
 *         type: "IPMatch",
 *     }],
 * });
 * const fooWebAcl = new aws.wafregional.WebAcl("fooWebAcl", {
 *     metricName: "foo",
 *     defaultAction: {
 *         type: "ALLOW",
 *     },
 *     rules: [{
 *         action: {
 *             type: "BLOCK",
 *         },
 *         priority: 1,
 *         ruleId: fooRule.id,
 *     }],
 * });
 * const fooVpc = new aws.ec2.Vpc("fooVpc", {cidrBlock: "10.1.0.0/16"});
 * const available = aws.getAvailabilityZones({});
 * const fooSubnet = new aws.ec2.Subnet("fooSubnet", {
 *     vpcId: fooVpc.id,
 *     cidrBlock: "10.1.1.0/24",
 *     availabilityZone: available.then(available => available.names?[0]),
 * });
 * const bar = new aws.ec2.Subnet("bar", {
 *     vpcId: fooVpc.id,
 *     cidrBlock: "10.1.2.0/24",
 *     availabilityZone: available.then(available => available.names?[1]),
 * });
 * const fooLoadBalancer = new aws.alb.LoadBalancer("fooLoadBalancer", {
 *     internal: true,
 *     subnets: [
 *         fooSubnet.id,
 *         bar.id,
 *     ],
 * });
 * const fooWebAclAssociation = new aws.wafregional.WebAclAssociation("fooWebAclAssociation", {
 *     resourceArn: fooLoadBalancer.arn,
 *     webAclId: fooWebAcl.id,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * ipset = aws.wafregional.IpSet("ipset", ip_set_descriptors=[aws.wafregional.IpSetIpSetDescriptorArgs(
 *     type="IPV4",
 *     value="192.0.7.0/24",
 * )])
 * foo_rule = aws.wafregional.Rule("fooRule",
 *     metric_name="tfWAFRule",
 *     predicates=[aws.wafregional.RulePredicateArgs(
 *         data_id=ipset.id,
 *         negated=False,
 *         type="IPMatch",
 *     )])
 * foo_web_acl = aws.wafregional.WebAcl("fooWebAcl",
 *     metric_name="foo",
 *     default_action=aws.wafregional.WebAclDefaultActionArgs(
 *         type="ALLOW",
 *     ),
 *     rules=[aws.wafregional.WebAclRuleArgs(
 *         action=aws.wafregional.WebAclRuleActionArgs(
 *             type="BLOCK",
 *         ),
 *         priority=1,
 *         rule_id=foo_rule.id,
 *     )])
 * foo_vpc = aws.ec2.Vpc("fooVpc", cidr_block="10.1.0.0/16")
 * available = aws.get_availability_zones()
 * foo_subnet = aws.ec2.Subnet("fooSubnet",
 *     vpc_id=foo_vpc.id,
 *     cidr_block="10.1.1.0/24",
 *     availability_zone=available.names[0])
 * bar = aws.ec2.Subnet("bar",
 *     vpc_id=foo_vpc.id,
 *     cidr_block="10.1.2.0/24",
 *     availability_zone=available.names[1])
 * foo_load_balancer = aws.alb.LoadBalancer("fooLoadBalancer",
 *     internal=True,
 *     subnets=[
 *         foo_subnet.id,
 *         bar.id,
 *     ])
 * foo_web_acl_association = aws.wafregional.WebAclAssociation("fooWebAclAssociation",
 *     resource_arn=foo_load_balancer.arn,
 *     web_acl_id=foo_web_acl.id)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var ipset = new Aws.WafRegional.IpSet("ipset", new Aws.WafRegional.IpSetArgs
 *         {
 *             IpSetDescriptors = 
 *             {
 *                 new Aws.WafRegional.Inputs.IpSetIpSetDescriptorArgs
 *                 {
 *                     Type = "IPV4",
 *                     Value = "192.0.7.0/24",
 *                 },
 *             },
 *         });
 *         var fooRule = new Aws.WafRegional.Rule("fooRule", new Aws.WafRegional.RuleArgs
 *         {
 *             MetricName = "tfWAFRule",
 *             Predicates = 
 *             {
 *                 new Aws.WafRegional.Inputs.RulePredicateArgs
 *                 {
 *                     DataId = ipset.Id,
 *                     Negated = false,
 *                     Type = "IPMatch",
 *                 },
 *             },
 *         });
 *         var fooWebAcl = new Aws.WafRegional.WebAcl("fooWebAcl", new Aws.WafRegional.WebAclArgs
 *         {
 *             MetricName = "foo",
 *             DefaultAction = new Aws.WafRegional.Inputs.WebAclDefaultActionArgs
 *             {
 *                 Type = "ALLOW",
 *             },
 *             Rules = 
 *             {
 *                 new Aws.WafRegional.Inputs.WebAclRuleArgs
 *                 {
 *                     Action = new Aws.WafRegional.Inputs.WebAclRuleActionArgs
 *                     {
 *                         Type = "BLOCK",
 *                     },
 *                     Priority = 1,
 *                     RuleId = fooRule.Id,
 *                 },
 *             },
 *         });
 *         var fooVpc = new Aws.Ec2.Vpc("fooVpc", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "10.1.0.0/16",
 *         });
 *         var available = Output.Create(Aws.GetAvailabilityZones.InvokeAsync());
 *         var fooSubnet = new Aws.Ec2.Subnet("fooSubnet", new Aws.Ec2.SubnetArgs
 *         {
 *             VpcId = fooVpc.Id,
 *             CidrBlock = "10.1.1.0/24",
 *             AvailabilityZone = available.Apply(available => available.Names?[0]),
 *         });
 *         var bar = new Aws.Ec2.Subnet("bar", new Aws.Ec2.SubnetArgs
 *         {
 *             VpcId = fooVpc.Id,
 *             CidrBlock = "10.1.2.0/24",
 *             AvailabilityZone = available.Apply(available => available.Names?[1]),
 *         });
 *         var fooLoadBalancer = new Aws.Alb.LoadBalancer("fooLoadBalancer", new Aws.Alb.LoadBalancerArgs
 *         {
 *             Internal = true,
 *             Subnets = 
 *             {
 *                 fooSubnet.Id,
 *                 bar.Id,
 *             },
 *         });
 *         var fooWebAclAssociation = new Aws.WafRegional.WebAclAssociation("fooWebAclAssociation", new Aws.WafRegional.WebAclAssociationArgs
 *         {
 *             ResourceArn = fooLoadBalancer.Arn,
 *             WebAclId = fooWebAcl.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/alb"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/wafregional"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		ipset, err := wafregional.NewIpSet(ctx, "ipset", &wafregional.IpSetArgs{
 * 			IpSetDescriptors: wafregional.IpSetIpSetDescriptorArray{
 * 				&wafregional.IpSetIpSetDescriptorArgs{
 * 					Type:  pulumi.String("IPV4"),
 * 					Value: pulumi.String("192.0.7.0/24"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		fooRule, err := wafregional.NewRule(ctx, "fooRule", &wafregional.RuleArgs{
 * 			MetricName: pulumi.String("tfWAFRule"),
 * 			Predicates: wafregional.RulePredicateArray{
 * 				&wafregional.RulePredicateArgs{
 * 					DataId:  ipset.ID(),
 * 					Negated: pulumi.Bool(false),
 * 					Type:    pulumi.String("IPMatch"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		fooWebAcl, err := wafregional.NewWebAcl(ctx, "fooWebAcl", &wafregional.WebAclArgs{
 * 			MetricName: pulumi.String("foo"),
 * 			DefaultAction: &wafregional.WebAclDefaultActionArgs{
 * 				Type: pulumi.String("ALLOW"),
 * 			},
 * 			Rules: wafregional.WebAclRuleArray{
 * 				&wafregional.WebAclRuleArgs{
 * 					Action: &wafregional.WebAclRuleActionArgs{
 * 						Type: pulumi.String("BLOCK"),
 * 					},
 * 					Priority: pulumi.Int(1),
 * 					RuleId:   fooRule.ID(),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		fooVpc, err := ec2.NewVpc(ctx, "fooVpc", &ec2.VpcArgs{
 * 			CidrBlock: pulumi.String("10.1.0.0/16"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		available, err := aws.GetAvailabilityZones(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		fooSubnet, err := ec2.NewSubnet(ctx, "fooSubnet", &ec2.SubnetArgs{
 * 			VpcId:            fooVpc.ID(),
 * 			CidrBlock:        pulumi.String("10.1.1.0/24"),
 * 			AvailabilityZone: pulumi.String(available.Names[0]),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		bar, err := ec2.NewSubnet(ctx, "bar", &ec2.SubnetArgs{
 * 			VpcId:            fooVpc.ID(),
 * 			CidrBlock:        pulumi.String("10.1.2.0/24"),
 * 			AvailabilityZone: pulumi.String(available.Names[1]),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		fooLoadBalancer, err := alb.NewLoadBalancer(ctx, "fooLoadBalancer", &alb.LoadBalancerArgs{
 * 			Internal: pulumi.Bool(true),
 * 			Subnets: pulumi.StringArray{
 * 				fooSubnet.ID(),
 * 				bar.ID(),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = wafregional.NewWebAclAssociation(ctx, "fooWebAclAssociation", &wafregional.WebAclAssociationArgs{
 * 			ResourceArn: fooLoadBalancer.Arn,
 * 			WebAclId:    fooWebAcl.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### API Gateway Association
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as crypto from "crypto";
 * 
 * const ipset = new aws.wafregional.IpSet("ipset", {ipSetDescriptors: [{
 *     type: "IPV4",
 *     value: "192.0.7.0/24",
 * }]});
 * const fooRule = new aws.wafregional.Rule("fooRule", {
 *     metricName: "tfWAFRule",
 *     predicates: [{
 *         dataId: ipset.id,
 *         negated: false,
 *         type: "IPMatch",
 *     }],
 * });
 * const fooWebAcl = new aws.wafregional.WebAcl("fooWebAcl", {
 *     metricName: "foo",
 *     defaultAction: {
 *         type: "ALLOW",
 *     },
 *     rules: [{
 *         action: {
 *             type: "BLOCK",
 *         },
 *         priority: 1,
 *         ruleId: fooRule.id,
 *     }],
 * });
 * const exampleRestApi = new aws.apigateway.RestApi("exampleRestApi", {body: JSON.stringify({
 *     openapi: "3.0.1",
 *     info: {
 *         title: "example",
 *         version: "1.0",
 *     },
 *     paths: {
 *         "/path1": {
 *             get: {
 *                 "x-amazon-apigateway-integration": {
 *                     httpMethod: "GET",
 *                     payloadFormatVersion: "1.0",
 *                     type: "HTTP_PROXY",
 *                     uri: "https://ip-ranges.amazonaws.com/ip-ranges.json",
 *                 },
 *             },
 *         },
 *     },
 * })});
 * const exampleDeployment = new aws.apigateway.Deployment("exampleDeployment", {
 *     restApi: exampleRestApi.id,
 *     triggers: {
 *         redeployment: exampleRestApi.body.apply(body => JSON.stringify(body)).apply(toJSON => crypto.createHash('sha1').update(toJSON).digest('hex')),
 *     },
 * });
 * const exampleStage = new aws.apigateway.Stage("exampleStage", {
 *     deployment: exampleDeployment.id,
 *     restApi: exampleRestApi.id,
 *     stageName: "example",
 * });
 * const association = new aws.wafregional.WebAclAssociation("association", {
 *     resourceArn: exampleStage.arn,
 *     webAclId: fooWebAcl.id,
 * });
 * ```
 * ```python
 * import pulumi
 * import hashlib
 * import json
 * import pulumi_aws as aws
 * 
 * ipset = aws.wafregional.IpSet("ipset", ip_set_descriptors=[aws.wafregional.IpSetIpSetDescriptorArgs(
 *     type="IPV4",
 *     value="192.0.7.0/24",
 * )])
 * foo_rule = aws.wafregional.Rule("fooRule",
 *     metric_name="tfWAFRule",
 *     predicates=[aws.wafregional.RulePredicateArgs(
 *         data_id=ipset.id,
 *         negated=False,
 *         type="IPMatch",
 *     )])
 * foo_web_acl = aws.wafregional.WebAcl("fooWebAcl",
 *     metric_name="foo",
 *     default_action=aws.wafregional.WebAclDefaultActionArgs(
 *         type="ALLOW",
 *     ),
 *     rules=[aws.wafregional.WebAclRuleArgs(
 *         action=aws.wafregional.WebAclRuleActionArgs(
 *             type="BLOCK",
 *         ),
 *         priority=1,
 *         rule_id=foo_rule.id,
 *     )])
 * example_rest_api = aws.apigateway.RestApi("exampleRestApi", body=json.dumps({
 *     "openapi": "3.0.1",
 *     "info": {
 *         "title": "example",
 *         "version": "1.0",
 *     },
 *     "paths": {
 *         "/path1": {
 *             "get": {
 *                 "x-amazon-apigateway-integration": {
 *                     "httpMethod": "GET",
 *                     "payloadFormatVersion": "1.0",
 *                     "type": "HTTP_PROXY",
 *                     "uri": "https://ip-ranges.amazonaws.com/ip-ranges.json",
 *                 },
 *             },
 *         },
 *     },
 * }))
 * example_deployment = aws.apigateway.Deployment("exampleDeployment",
 *     rest_api=example_rest_api.id,
 *     triggers={
 *         "redeployment": example_rest_api.body.apply(lambda body: json.dumps(body)).apply(lambda to_json: hashlib.sha1(to_json.encode()).hexdigest()),
 *     })
 * example_stage = aws.apigateway.Stage("exampleStage",
 *     deployment=example_deployment.id,
 *     rest_api=example_rest_api.id,
 *     stage_name="example")
 * association = aws.wafregional.WebAclAssociation("association",
 *     resource_arn=example_stage.arn,
 *     web_acl_id=foo_web_acl.id)
 * ```
 * ```csharp
 * using System.Collections.Generic;
 * using System.Security.Cryptography;
 * using System.Text;
 * using System.Text.Json;
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 * 	private static string ComputeSHA1(string input) {
 * 		return BitConverter.ToString(
 * 			SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(input))
 * 		).Replace("-","").ToLowerInvariant());
 * 	}
 * 
 *     public MyStack()
 *     {
 *         var ipset = new Aws.WafRegional.IpSet("ipset", new Aws.WafRegional.IpSetArgs
 *         {
 *             IpSetDescriptors = 
 *             {
 *                 new Aws.WafRegional.Inputs.IpSetIpSetDescriptorArgs
 *                 {
 *                     Type = "IPV4",
 *                     Value = "192.0.7.0/24",
 *                 },
 *             },
 *         });
 *         var fooRule = new Aws.WafRegional.Rule("fooRule", new Aws.WafRegional.RuleArgs
 *         {
 *             MetricName = "tfWAFRule",
 *             Predicates = 
 *             {
 *                 new Aws.WafRegional.Inputs.RulePredicateArgs
 *                 {
 *                     DataId = ipset.Id,
 *                     Negated = false,
 *                     Type = "IPMatch",
 *                 },
 *             },
 *         });
 *         var fooWebAcl = new Aws.WafRegional.WebAcl("fooWebAcl", new Aws.WafRegional.WebAclArgs
 *         {
 *             MetricName = "foo",
 *             DefaultAction = new Aws.WafRegional.Inputs.WebAclDefaultActionArgs
 *             {
 *                 Type = "ALLOW",
 *             },
 *             Rules = 
 *             {
 *                 new Aws.WafRegional.Inputs.WebAclRuleArgs
 *                 {
 *                     Action = new Aws.WafRegional.Inputs.WebAclRuleActionArgs
 *                     {
 *                         Type = "BLOCK",
 *                     },
 *                     Priority = 1,
 *                     RuleId = fooRule.Id,
 *                 },
 *             },
 *         });
 *         var exampleRestApi = new Aws.ApiGateway.RestApi("exampleRestApi", new Aws.ApiGateway.RestApiArgs
 *         {
 *             Body = JsonSerializer.Serialize(new Dictionary<string, object?>
 *             {
 *                 { "openapi", "3.0.1" },
 *                 { "info", new Dictionary<string, object?>
 *                 {
 *                     { "title", "example" },
 *                     { "version", "1.0" },
 *                 } },
 *                 { "paths", new Dictionary<string, object?>
 *                 {
 *                     { "/path1", new Dictionary<string, object?>
 *                     {
 *                         { "get", new Dictionary<string, object?>
 *                         {
 *                             { "x-amazon-apigateway-integration", new Dictionary<string, object?>
 *                             {
 *                                 { "httpMethod", "GET" },
 *                                 { "payloadFormatVersion", "1.0" },
 *                                 { "type", "HTTP_PROXY" },
 *                                 { "uri", "https://ip-ranges.amazonaws.com/ip-ranges.json" },
 *                             } },
 *                         } },
 *                     } },
 *                 } },
 *             }),
 *         });
 *         var exampleDeployment = new Aws.ApiGateway.Deployment("exampleDeployment", new Aws.ApiGateway.DeploymentArgs
 *         {
 *             RestApi = exampleRestApi.Id,
 *             Triggers = 
 *             {
 *                 { "redeployment", exampleRestApi.Body.Apply(body => JsonSerializer.Serialize(body)).Apply(toJSON => ComputeSHA1(toJSON)) },
 *             },
 *         });
 *         var exampleStage = new Aws.ApiGateway.Stage("exampleStage", new Aws.ApiGateway.StageArgs
 *         {
 *             Deployment = exampleDeployment.Id,
 *             RestApi = exampleRestApi.Id,
 *             StageName = "example",
 *         });
 *         var association = new Aws.WafRegional.WebAclAssociation("association", new Aws.WafRegional.WebAclAssociationArgs
 *         {
 *             ResourceArn = exampleStage.Arn,
 *             WebAclId = fooWebAcl.Id,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"crypto/sha1"
 * 	"encoding/json"
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/apigateway"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/wafregional"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func sha1Hash(input string) string {
 * 	hash := sha1.Sum([]byte(input))
 * 	return hex.EncodeToString(hash[:])
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		ipset, err := wafregional.NewIpSet(ctx, "ipset", &wafregional.IpSetArgs{
 * 			IpSetDescriptors: wafregional.IpSetIpSetDescriptorArray{
 * 				&wafregional.IpSetIpSetDescriptorArgs{
 * 					Type:  pulumi.String("IPV4"),
 * 					Value: pulumi.String("192.0.7.0/24"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		fooRule, err := wafregional.NewRule(ctx, "fooRule", &wafregional.RuleArgs{
 * 			MetricName: pulumi.String("tfWAFRule"),
 * 			Predicates: wafregional.RulePredicateArray{
 * 				&wafregional.RulePredicateArgs{
 * 					DataId:  ipset.ID(),
 * 					Negated: pulumi.Bool(false),
 * 					Type:    pulumi.String("IPMatch"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		fooWebAcl, err := wafregional.NewWebAcl(ctx, "fooWebAcl", &wafregional.WebAclArgs{
 * 			MetricName: pulumi.String("foo"),
 * 			DefaultAction: &wafregional.WebAclDefaultActionArgs{
 * 				Type: pulumi.String("ALLOW"),
 * 			},
 * 			Rules: wafregional.WebAclRuleArray{
 * 				&wafregional.WebAclRuleArgs{
 * 					Action: &wafregional.WebAclRuleActionArgs{
 * 						Type: pulumi.String("BLOCK"),
 * 					},
 * 					Priority: pulumi.Int(1),
 * 					RuleId:   fooRule.ID(),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		tmpJSON0, err := json.Marshal(map[string]interface{}{
 * 			"openapi": "3.0.1",
 * 			"info": map[string]interface{}{
 * 				"title":   "example",
 * 				"version": "1.0",
 * 			},
 * 			"paths": map[string]interface{}{
 * 				"/path1": map[string]interface{}{
 * 					"get": map[string]interface{}{
 * 						"x-amazon-apigateway-integration": map[string]interface{}{
 * 							"httpMethod":           "GET",
 * 							"payloadFormatVersion": "1.0",
 * 							"type":                 "HTTP_PROXY",
 * 							"uri":                  "https://ip-ranges.amazonaws.com/ip-ranges.json",
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		json0 := string(tmpJSON0)
 * 		exampleRestApi, err := apigateway.NewRestApi(ctx, "exampleRestApi", &apigateway.RestApiArgs{
 * 			Body: pulumi.String(json0),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleDeployment, err := apigateway.NewDeployment(ctx, "exampleDeployment", &apigateway.DeploymentArgs{
 * 			RestApi: exampleRestApi.ID(),
 * 			Triggers: pulumi.StringMap{
 * 				"redeployment": exampleRestApi.Body.ApplyT(func(body string) (pulumi.String, error) {
 * 					var _zero pulumi.String
 * 					tmpJSON1, err := json.Marshal(body)
 * 					if err != nil {
 * 						return _zero, err
 * 					}
 * 					json1 := string(tmpJSON1)
 * 					return json1, nil
 * 				}).(pulumi.StringOutput).ApplyT(func(toJSON string) (pulumi.String, error) {
 * 					return sha1Hash(toJSON), nil
 * 				}).(pulumi.StringOutput),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleStage, err := apigateway.NewStage(ctx, "exampleStage", &apigateway.StageArgs{
 * 			Deployment: exampleDeployment.ID(),
 * 			RestApi:    exampleRestApi.ID(),
 * 			StageName:  pulumi.String("example"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = wafregional.NewWebAclAssociation(ctx, "association", &wafregional.WebAclAssociationArgs{
 * 			ResourceArn: exampleStage.Arn,
 * 			WebAclId:    fooWebAcl.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * WAF Regional Web ACL Association can be imported using their `web_acl_id:resource_arn`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:wafregional/webAclAssociation:WebAclAssociation foo web_acl_id:resource_arn
 * ```
 * 
 *  
 */
@ResourceType(type="aws:wafregional/webAclAssociation:WebAclAssociation")
public class WebAclAssociation extends io.pulumi.resources.CustomResource {
    /**
     * ARN of the resource to associate with. For example, an Application Load Balancer or API Gateway Stage.
     * 
     */
    @Export(name="resourceArn", type=String.class, parameters={})
    private Output<String> resourceArn;

    /**
     * @return ARN of the resource to associate with. For example, an Application Load Balancer or API Gateway Stage.
     * 
     */
    public Output<String> getResourceArn() {
        return this.resourceArn;
    }
    /**
     * The ID of the WAF Regional WebACL to create an association.
     * 
     */
    @Export(name="webAclId", type=String.class, parameters={})
    private Output<String> webAclId;

    /**
     * @return The ID of the WAF Regional WebACL to create an association.
     * 
     */
    public Output<String> getWebAclId() {
        return this.webAclId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WebAclAssociation(String name) {
        this(name, WebAclAssociationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WebAclAssociation(String name, WebAclAssociationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WebAclAssociation(String name, WebAclAssociationArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:wafregional/webAclAssociation:WebAclAssociation", name, args == null ? WebAclAssociationArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private WebAclAssociation(String name, Output<String> id, @Nullable WebAclAssociationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:wafregional/webAclAssociation:WebAclAssociation", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WebAclAssociation get(String name, Output<String> id, @Nullable WebAclAssociationState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new WebAclAssociation(name, id, state, options);
    }
}
