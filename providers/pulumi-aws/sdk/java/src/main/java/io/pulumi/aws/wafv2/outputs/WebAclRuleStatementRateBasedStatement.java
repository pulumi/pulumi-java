// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.wafv2.outputs;

import io.pulumi.aws.wafv2.outputs.WebAclRuleStatementRateBasedStatementForwardedIpConfig;
import io.pulumi.aws.wafv2.outputs.WebAclRuleStatementRateBasedStatementScopeDownStatement;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class WebAclRuleStatementRateBasedStatement {
    /**
     * Setting that indicates how to aggregate the request counts. Valid values include: `FORWARDED_IP` or `IP`. Default: `IP`.
     * 
     */
    private final @Nullable String aggregateKeyType;
    /**
     * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. If `aggregate_key_type` is set to `FORWARDED_IP`, this block is required. See Forwarded IP Config below for details.
     * 
     */
    private final @Nullable WebAclRuleStatementRateBasedStatementForwardedIpConfig forwardedIpConfig;
    /**
     * The limit on requests per 5-minute period for a single originating IP address.
     * 
     */
    private final Integer limit;
    /**
     * An optional nested statement that narrows the scope of the rate-based statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement. See Statement above for details.
     * 
     */
    private final @Nullable WebAclRuleStatementRateBasedStatementScopeDownStatement scopeDownStatement;

    @OutputCustomType.Constructor({"aggregateKeyType","forwardedIpConfig","limit","scopeDownStatement"})
    private WebAclRuleStatementRateBasedStatement(
        @Nullable String aggregateKeyType,
        @Nullable WebAclRuleStatementRateBasedStatementForwardedIpConfig forwardedIpConfig,
        Integer limit,
        @Nullable WebAclRuleStatementRateBasedStatementScopeDownStatement scopeDownStatement) {
        this.aggregateKeyType = aggregateKeyType;
        this.forwardedIpConfig = forwardedIpConfig;
        this.limit = limit;
        this.scopeDownStatement = scopeDownStatement;
    }

    /**
     * Setting that indicates how to aggregate the request counts. Valid values include: `FORWARDED_IP` or `IP`. Default: `IP`.
     * 
    */
    public Optional<String> getAggregateKeyType() {
        return Optional.ofNullable(this.aggregateKeyType);
    }
    /**
     * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. If `aggregate_key_type` is set to `FORWARDED_IP`, this block is required. See Forwarded IP Config below for details.
     * 
    */
    public Optional<WebAclRuleStatementRateBasedStatementForwardedIpConfig> getForwardedIpConfig() {
        return Optional.ofNullable(this.forwardedIpConfig);
    }
    /**
     * The limit on requests per 5-minute period for a single originating IP address.
     * 
    */
    public Integer getLimit() {
        return this.limit;
    }
    /**
     * An optional nested statement that narrows the scope of the rate-based statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement. See Statement above for details.
     * 
    */
    public Optional<WebAclRuleStatementRateBasedStatementScopeDownStatement> getScopeDownStatement() {
        return Optional.ofNullable(this.scopeDownStatement);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAclRuleStatementRateBasedStatement defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String aggregateKeyType;
        private @Nullable WebAclRuleStatementRateBasedStatementForwardedIpConfig forwardedIpConfig;
        private Integer limit;
        private @Nullable WebAclRuleStatementRateBasedStatementScopeDownStatement scopeDownStatement;

        public Builder() {
    	      // Empty
        }

        public Builder(WebAclRuleStatementRateBasedStatement defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregateKeyType = defaults.aggregateKeyType;
    	      this.forwardedIpConfig = defaults.forwardedIpConfig;
    	      this.limit = defaults.limit;
    	      this.scopeDownStatement = defaults.scopeDownStatement;
        }

        public Builder setAggregateKeyType(@Nullable String aggregateKeyType) {
            this.aggregateKeyType = aggregateKeyType;
            return this;
        }

        public Builder setForwardedIpConfig(@Nullable WebAclRuleStatementRateBasedStatementForwardedIpConfig forwardedIpConfig) {
            this.forwardedIpConfig = forwardedIpConfig;
            return this;
        }

        public Builder setLimit(Integer limit) {
            this.limit = Objects.requireNonNull(limit);
            return this;
        }

        public Builder setScopeDownStatement(@Nullable WebAclRuleStatementRateBasedStatementScopeDownStatement scopeDownStatement) {
            this.scopeDownStatement = scopeDownStatement;
            return this;
        }
        public WebAclRuleStatementRateBasedStatement build() {
            return new WebAclRuleStatementRateBasedStatement(aggregateKeyType, forwardedIpConfig, limit, scopeDownStatement);
        }
    }
}
