// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigateway;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MethodResponseArgs extends io.pulumi.resources.ResourceArgs {

    public static final MethodResponseArgs Empty = new MethodResponseArgs();

    /**
     * The HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
     * 
     */
    @InputImport(name="httpMethod", required=true)
    private final Input<String> httpMethod;

    public Input<String> getHttpMethod() {
        return this.httpMethod;
    }

    /**
     * The API resource ID
     * 
     */
    @InputImport(name="resourceId", required=true)
    private final Input<String> resourceId;

    public Input<String> getResourceId() {
        return this.resourceId;
    }

    /**
     * A map of the API models used for the response's content type
     * 
     */
    @InputImport(name="responseModels")
    private final @Nullable Input<Map<String,String>> responseModels;

    public Input<Map<String,String>> getResponseModels() {
        return this.responseModels == null ? Input.empty() : this.responseModels;
    }

    /**
     * A map of response parameters that can be sent to the caller.
     * For example: `response_parameters = { "method.response.header.X-Some-Header" = true }`
     * would define that the header `X-Some-Header` can be provided on the response.
     * 
     */
    @InputImport(name="responseParameters")
    private final @Nullable Input<Map<String,Boolean>> responseParameters;

    public Input<Map<String,Boolean>> getResponseParameters() {
        return this.responseParameters == null ? Input.empty() : this.responseParameters;
    }

    /**
     * The ID of the associated REST API
     * 
     */
    @InputImport(name="restApi", required=true)
    private final Input<String> restApi;

    public Input<String> getRestApi() {
        return this.restApi;
    }

    /**
     * The HTTP status code
     * 
     */
    @InputImport(name="statusCode", required=true)
    private final Input<String> statusCode;

    public Input<String> getStatusCode() {
        return this.statusCode;
    }

    public MethodResponseArgs(
        Input<String> httpMethod,
        Input<String> resourceId,
        @Nullable Input<Map<String,String>> responseModels,
        @Nullable Input<Map<String,Boolean>> responseParameters,
        Input<String> restApi,
        Input<String> statusCode) {
        this.httpMethod = Objects.requireNonNull(httpMethod, "expected parameter 'httpMethod' to be non-null");
        this.resourceId = Objects.requireNonNull(resourceId, "expected parameter 'resourceId' to be non-null");
        this.responseModels = responseModels;
        this.responseParameters = responseParameters;
        this.restApi = Objects.requireNonNull(restApi, "expected parameter 'restApi' to be non-null");
        this.statusCode = Objects.requireNonNull(statusCode, "expected parameter 'statusCode' to be non-null");
    }

    private MethodResponseArgs() {
        this.httpMethod = Input.empty();
        this.resourceId = Input.empty();
        this.responseModels = Input.empty();
        this.responseParameters = Input.empty();
        this.restApi = Input.empty();
        this.statusCode = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MethodResponseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> httpMethod;
        private Input<String> resourceId;
        private @Nullable Input<Map<String,String>> responseModels;
        private @Nullable Input<Map<String,Boolean>> responseParameters;
        private Input<String> restApi;
        private Input<String> statusCode;

        public Builder() {
    	      // Empty
        }

        public Builder(MethodResponseArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpMethod = defaults.httpMethod;
    	      this.resourceId = defaults.resourceId;
    	      this.responseModels = defaults.responseModels;
    	      this.responseParameters = defaults.responseParameters;
    	      this.restApi = defaults.restApi;
    	      this.statusCode = defaults.statusCode;
        }

        public Builder setHttpMethod(Input<String> httpMethod) {
            this.httpMethod = Objects.requireNonNull(httpMethod);
            return this;
        }

        public Builder setHttpMethod(String httpMethod) {
            this.httpMethod = Input.of(Objects.requireNonNull(httpMethod));
            return this;
        }

        public Builder setResourceId(Input<String> resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }

        public Builder setResourceId(String resourceId) {
            this.resourceId = Input.of(Objects.requireNonNull(resourceId));
            return this;
        }

        public Builder setResponseModels(@Nullable Input<Map<String,String>> responseModels) {
            this.responseModels = responseModels;
            return this;
        }

        public Builder setResponseModels(@Nullable Map<String,String> responseModels) {
            this.responseModels = Input.ofNullable(responseModels);
            return this;
        }

        public Builder setResponseParameters(@Nullable Input<Map<String,Boolean>> responseParameters) {
            this.responseParameters = responseParameters;
            return this;
        }

        public Builder setResponseParameters(@Nullable Map<String,Boolean> responseParameters) {
            this.responseParameters = Input.ofNullable(responseParameters);
            return this;
        }

        public Builder setRestApi(Input<String> restApi) {
            this.restApi = Objects.requireNonNull(restApi);
            return this;
        }

        public Builder setStatusCode(Input<String> statusCode) {
            this.statusCode = Objects.requireNonNull(statusCode);
            return this;
        }

        public Builder setStatusCode(String statusCode) {
            this.statusCode = Input.of(Objects.requireNonNull(statusCode));
            return this;
        }
        public MethodResponseArgs build() {
            return new MethodResponseArgs(httpMethod, resourceId, responseModels, responseParameters, restApi, statusCode);
        }
    }
}
