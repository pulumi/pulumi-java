// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.amplify;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.amplify.BranchArgs;
import io.pulumi.aws.amplify.inputs.BranchState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides an Amplify Branch resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.amplify.App("example", {});
 * const master = new aws.amplify.Branch("master", {
 *     appId: example.id,
 *     branchName: "master",
 *     framework: "React",
 *     stage: "PRODUCTION",
 *     environmentVariables: {
 *         REACT_APP_API_SERVER: "https://api.example.com",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.amplify.App("example")
 * master = aws.amplify.Branch("master",
 *     app_id=example.id,
 *     branch_name="master",
 *     framework="React",
 *     stage="PRODUCTION",
 *     environment_variables={
 *         "REACT_APP_API_SERVER": "https://api.example.com",
 *     })
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Amplify.App("example", new Aws.Amplify.AppArgs
 *         {
 *         });
 *         var master = new Aws.Amplify.Branch("master", new Aws.Amplify.BranchArgs
 *         {
 *             AppId = example.Id,
 *             BranchName = "master",
 *             Framework = "React",
 *             Stage = "PRODUCTION",
 *             EnvironmentVariables = 
 *             {
 *                 { "REACT_APP_API_SERVER", "https://api.example.com" },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/amplify"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		example, err := amplify.NewApp(ctx, "example", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = amplify.NewBranch(ctx, "master", &amplify.BranchArgs{
 * 			AppId:      example.ID(),
 * 			BranchName: pulumi.String("master"),
 * 			Framework:  pulumi.String("React"),
 * 			Stage:      pulumi.String("PRODUCTION"),
 * 			EnvironmentVariables: pulumi.StringMap{
 * 				"REACT_APP_API_SERVER": pulumi.String("https://api.example.com"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Basic Authentication
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.amplify.App("example", {});
 * const master = new aws.amplify.Branch("master", {
 *     appId: example.id,
 *     branchName: "master",
 *     basicAuthConfig: [{
 *         enableBasicAuth: true,
 *         username: "username",
 *         password: "password",
 *     }],
 * });
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Notifications
 * 
 * Amplify Console uses EventBridge (formerly known as CloudWatch Events) and SNS for email notifications.  To implement the same functionality, you need to set `enable_notification` in a `aws.amplify.Branch` resource, as well as creating an EventBridge Rule, an SNS topic, and SNS subscriptions.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.amplify.App("example", {});
 * const master = new aws.amplify.Branch("master", {
 *     appId: example.id,
 *     branchName: "master",
 *     enableNotification: true,
 * });
 * // EventBridge Rule for Amplify notifications
 * const amplifyAppMasterEventRule = new aws.cloudwatch.EventRule("amplifyAppMasterEventRule", {
 *     description: pulumi.interpolate`AWS Amplify build notifications for :  App: ${aws_amplify_app.app.id} Branch: ${master.branchName}`,
 *     eventPattern: pulumi.all([example.id, master.branchName]).apply(([id, branchName]) => JSON.stringify({
 *         detail: {
 *             appId: [id],
 *             branchName: [branchName],
 *             jobStatus: [
 *                 "SUCCEED",
 *                 "FAILED",
 *                 "STARTED",
 *             ],
 *         },
 *         "detail-type": ["Amplify Deployment Status Change"],
 *         source: ["aws.amplify"],
 *     })),
 * });
 * const amplifyAppMasterTopic = new aws.sns.Topic("amplifyAppMasterTopic", {});
 * const amplifyAppMasterEventTarget = new aws.cloudwatch.EventTarget("amplifyAppMasterEventTarget", {
 *     rule: amplifyAppMasterEventRule.name,
 *     arn: amplifyAppMasterTopic.arn,
 *     inputTransformer: {
 *         inputPaths: {
 *             jobId: `$.detail.jobId`,
 *             appId: `$.detail.appId`,
 *             region: `$.region`,
 *             branch: `$.detail.branchName`,
 *             status: `$.detail.jobStatus`,
 *         },
 *         inputTemplate: "\"Build notification from the AWS Amplify Console for app: https://<branch>.<appId>.amplifyapp.com/. Your build status is <status>. Go to https://console.aws.amazon.com/amplify/home?region=<region>#<appId>/<branch>/<jobId> to view details on your build. \"",
 *     },
 * });
 * // SNS Topic for Amplify notifications
 * const amplifyAppMasterPolicyDocument = pulumi.all([master.arn, amplifyAppMasterTopic.arn]).apply(([masterArn, amplifyAppMasterTopicArn]) => aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         sid: `Allow_Publish_Events ${masterArn}`,
 *         effect: "Allow",
 *         actions: ["SNS:Publish"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["events.amazonaws.com"],
 *         }],
 *         resources: [amplifyAppMasterTopicArn],
 *     }],
 * }));
 * const amplifyAppMasterTopicPolicy = new aws.sns.TopicPolicy("amplifyAppMasterTopicPolicy", {
 *     arn: amplifyAppMasterTopic.arn,
 *     policy: amplifyAppMasterPolicyDocument.apply(amplifyAppMasterPolicyDocument => amplifyAppMasterPolicyDocument.json),
 * });
 * ```
 * ```python
 * import pulumi
 * import json
 * import pulumi_aws as aws
 * 
 * example = aws.amplify.App("example")
 * master = aws.amplify.Branch("master",
 *     app_id=example.id,
 *     branch_name="master",
 *     enable_notification=True)
 * # EventBridge Rule for Amplify notifications
 * amplify_app_master_event_rule = aws.cloudwatch.EventRule("amplifyAppMasterEventRule",
 *     description=master.branch_name.apply(lambda branch_name: f"AWS Amplify build notifications for :  App: {aws_amplify_app['app']['id']} Branch: {branch_name}"),
 *     event_pattern=pulumi.Output.all(example.id, master.branch_name).apply(lambda id, branch_name: json.dumps({
 *         "detail": {
 *             "appId": [id],
 *             "branchName": [branch_name],
 *             "jobStatus": [
 *                 "SUCCEED",
 *                 "FAILED",
 *                 "STARTED",
 *             ],
 *         },
 *         "detail-type": ["Amplify Deployment Status Change"],
 *         "source": ["aws.amplify"],
 *     })))
 * amplify_app_master_topic = aws.sns.Topic("amplifyAppMasterTopic")
 * amplify_app_master_event_target = aws.cloudwatch.EventTarget("amplifyAppMasterEventTarget",
 *     rule=amplify_app_master_event_rule.name,
 *     arn=amplify_app_master_topic.arn,
 *     input_transformer=aws.cloudwatch.EventTargetInputTransformerArgs(
 *         input_paths={
 *             "jobId": "$.detail.jobId",
 *             "appId": "$.detail.appId",
 *             "region": "$.region",
 *             "branch": "$.detail.branchName",
 *             "status": "$.detail.jobStatus",
 *         },
 *         input_template="\"Build notification from the AWS Amplify Console for app: https://<branch>.<appId>.amplifyapp.com/. Your build status is <status>. Go to https://console.aws.amazon.com/amplify/home?region=<region>#<appId>/<branch>/<jobId> to view details on your build. \"",
 *     ))
 * # SNS Topic for Amplify notifications
 * amplify_app_master_policy_document = pulumi.Output.all(master.arn, amplify_app_master_topic.arn).apply(lambda masterArn, amplifyAppMasterTopicArn: aws.iam.get_policy_document_output(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     sid=f"Allow_Publish_Events {master_arn}",
 *     effect="Allow",
 *     actions=["SNS:Publish"],
 *     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *         type="Service",
 *         identifiers=["events.amazonaws.com"],
 *     )],
 *     resources=[amplify_app_master_topic_arn],
 * )]))
 * amplify_app_master_topic_policy = aws.sns.TopicPolicy("amplifyAppMasterTopicPolicy",
 *     arn=amplify_app_master_topic.arn,
 *     policy=amplify_app_master_policy_document.json)
 * ```
 * ```csharp
 * using System.Collections.Generic;
 * using System.Text.Json;
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Amplify.App("example", new Aws.Amplify.AppArgs
 *         {
 *         });
 *         var master = new Aws.Amplify.Branch("master", new Aws.Amplify.BranchArgs
 *         {
 *             AppId = example.Id,
 *             BranchName = "master",
 *             EnableNotification = true,
 *         });
 *         // EventBridge Rule for Amplify notifications
 *         var amplifyAppMasterEventRule = new Aws.CloudWatch.EventRule("amplifyAppMasterEventRule", new Aws.CloudWatch.EventRuleArgs
 *         {
 *             Description = master.BranchName.Apply(branchName => $"AWS Amplify build notifications for :  App: {aws_amplify_app.App.Id} Branch: {branchName}"),
 *             EventPattern = Output.Tuple(example.Id, master.BranchName).Apply(values =>
 *             {
 *                 var id = values.Item1;
 *                 var branchName = values.Item2;
 *                 return JsonSerializer.Serialize(new Dictionary<string, object?>
 *                 {
 *                     { "detail", new Dictionary<string, object?>
 *                     {
 *                         { "appId", new[]
 *                             {
 *                                 id,
 *                             }
 *                          },
 *                         { "branchName", new[]
 *                             {
 *                                 branchName,
 *                             }
 *                          },
 *                         { "jobStatus", new[]
 *                             {
 *                                 "SUCCEED",
 *                                 "FAILED",
 *                                 "STARTED",
 *                             }
 *                          },
 *                     } },
 *                     { "detail-type", new[]
 *                         {
 *                             "Amplify Deployment Status Change",
 *                         }
 *                      },
 *                     { "source", new[]
 *                         {
 *                             "aws.amplify",
 *                         }
 *                      },
 *                 });
 *             }),
 *         });
 *         var amplifyAppMasterTopic = new Aws.Sns.Topic("amplifyAppMasterTopic", new Aws.Sns.TopicArgs
 *         {
 *         });
 *         var amplifyAppMasterEventTarget = new Aws.CloudWatch.EventTarget("amplifyAppMasterEventTarget", new Aws.CloudWatch.EventTargetArgs
 *         {
 *             Rule = amplifyAppMasterEventRule.Name,
 *             Arn = amplifyAppMasterTopic.Arn,
 *             InputTransformer = new Aws.CloudWatch.Inputs.EventTargetInputTransformerArgs
 *             {
 *                 InputPaths = 
 *                 {
 *                     { "jobId", "$.detail.jobId" },
 *                     { "appId", "$.detail.appId" },
 *                     { "region", "$.region" },
 *                     { "branch", "$.detail.branchName" },
 *                     { "status", "$.detail.jobStatus" },
 *                 },
 *                 InputTemplate = "\"Build notification from the AWS Amplify Console for app: https://<branch>.<appId>.amplifyapp.com/. Your build status is <status>. Go to https://console.aws.amazon.com/amplify/home?region=<region>#<appId>/<branch>/<jobId> to view details on your build. \"",
 *             },
 *         });
 *         // SNS Topic for Amplify notifications
 *         var amplifyAppMasterPolicyDocument = Output.Tuple(master.Arn, amplifyAppMasterTopic.Arn).Apply(values =>
 *         {
 *             var masterArn = values.Item1;
 *             var amplifyAppMasterTopicArn = values.Item2;
 *             return Aws.Iam.GetPolicyDocument.Invoke(new Aws.Iam.GetPolicyDocumentInvokeArgs
 *             {
 *                 Statements = 
 *                 {
 *                     new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
 *                     {
 *                         Sid = $"Allow_Publish_Events {masterArn}",
 *                         Effect = "Allow",
 *                         Actions = 
 *                         {
 *                             "SNS:Publish",
 *                         },
 *                         Principals = 
 *                         {
 *                             new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
 *                             {
 *                                 Type = "Service",
 *                                 Identifiers = 
 *                                 {
 *                                     "events.amazonaws.com",
 *                                 },
 *                             },
 *                         },
 *                         Resources = 
 *                         {
 *                             amplifyAppMasterTopicArn,
 *                         },
 *                     },
 *                 },
 *             });
 *         });
 *         var amplifyAppMasterTopicPolicy = new Aws.Sns.TopicPolicy("amplifyAppMasterTopicPolicy", new Aws.Sns.TopicPolicyArgs
 *         {
 *             Arn = amplifyAppMasterTopic.Arn,
 *             Policy = amplifyAppMasterPolicyDocument.Apply(amplifyAppMasterPolicyDocument => amplifyAppMasterPolicyDocument.Json),
 *         });
 *     }
 * 
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Amplify branch can be imported using `app_id` and `branch_name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:amplify/branch:Branch master d2ypk4k47z8u6/master
 * ```
 * 
 *  
 */
@ResourceType(type="aws:amplify/branch:Branch")
public class Branch extends io.pulumi.resources.CustomResource {
    /**
     * The unique ID for an Amplify app.
     * 
     */
    @Export(name="appId", type=String.class, parameters={})
    private Output<String> appId;

    /**
     * @return The unique ID for an Amplify app.
     * 
     */
    public Output<String> getAppId() {
        return this.appId;
    }
    /**
     * The Amazon Resource Name (ARN) for the branch.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) for the branch.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * A list of custom resources that are linked to this branch.
     * 
     */
    @Export(name="associatedResources", type=List.class, parameters={String.class})
    private Output<List<String>> associatedResources;

    /**
     * @return A list of custom resources that are linked to this branch.
     * 
     */
    public Output<List<String>> getAssociatedResources() {
        return this.associatedResources;
    }
    /**
     * The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app.
     * 
     */
    @Export(name="backendEnvironmentArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> backendEnvironmentArn;

    /**
     * @return The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app.
     * 
     */
    public Output</* @Nullable */ String> getBackendEnvironmentArn() {
        return this.backendEnvironmentArn;
    }
    /**
     * The basic authorization credentials for the branch.
     * 
     */
    @Export(name="basicAuthCredentials", type=String.class, parameters={})
    private Output</* @Nullable */ String> basicAuthCredentials;

    /**
     * @return The basic authorization credentials for the branch.
     * 
     */
    public Output</* @Nullable */ String> getBasicAuthCredentials() {
        return this.basicAuthCredentials;
    }
    /**
     * The name for the branch.
     * 
     */
    @Export(name="branchName", type=String.class, parameters={})
    private Output<String> branchName;

    /**
     * @return The name for the branch.
     * 
     */
    public Output<String> getBranchName() {
        return this.branchName;
    }
    /**
     * The custom domains for the branch.
     * 
     */
    @Export(name="customDomains", type=List.class, parameters={String.class})
    private Output<List<String>> customDomains;

    /**
     * @return The custom domains for the branch.
     * 
     */
    public Output<List<String>> getCustomDomains() {
        return this.customDomains;
    }
    /**
     * The description for the branch.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description for the branch.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * The destination branch if the branch is a pull request branch.
     * 
     */
    @Export(name="destinationBranch", type=String.class, parameters={})
    private Output<String> destinationBranch;

    /**
     * @return The destination branch if the branch is a pull request branch.
     * 
     */
    public Output<String> getDestinationBranch() {
        return this.destinationBranch;
    }
    /**
     * The display name for a branch. This is used as the default domain prefix.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The display name for a branch. This is used as the default domain prefix.
     * 
     */
    public Output<String> getDisplayName() {
        return this.displayName;
    }
    /**
     * Enables auto building for the branch.
     * 
     */
    @Export(name="enableAutoBuild", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableAutoBuild;

    /**
     * @return Enables auto building for the branch.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnableAutoBuild() {
        return this.enableAutoBuild;
    }
    /**
     * Enables basic authorization for the branch.
     * 
     */
    @Export(name="enableBasicAuth", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableBasicAuth;

    /**
     * @return Enables basic authorization for the branch.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnableBasicAuth() {
        return this.enableBasicAuth;
    }
    /**
     * Enables notifications for the branch.
     * 
     */
    @Export(name="enableNotification", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableNotification;

    /**
     * @return Enables notifications for the branch.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnableNotification() {
        return this.enableNotification;
    }
    /**
     * Enables performance mode for the branch.
     * 
     */
    @Export(name="enablePerformanceMode", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enablePerformanceMode;

    /**
     * @return Enables performance mode for the branch.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnablePerformanceMode() {
        return this.enablePerformanceMode;
    }
    /**
     * Enables pull request previews for this branch.
     * 
     */
    @Export(name="enablePullRequestPreview", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enablePullRequestPreview;

    /**
     * @return Enables pull request previews for this branch.
     * 
     */
    public Output</* @Nullable */ Boolean> getEnablePullRequestPreview() {
        return this.enablePullRequestPreview;
    }
    /**
     * The environment variables for the branch.
     * 
     */
    @Export(name="environmentVariables", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> environmentVariables;

    /**
     * @return The environment variables for the branch.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getEnvironmentVariables() {
        return this.environmentVariables;
    }
    /**
     * The framework for the branch.
     * 
     */
    @Export(name="framework", type=String.class, parameters={})
    private Output</* @Nullable */ String> framework;

    /**
     * @return The framework for the branch.
     * 
     */
    public Output</* @Nullable */ String> getFramework() {
        return this.framework;
    }
    /**
     * The Amplify environment name for the pull request.
     * 
     */
    @Export(name="pullRequestEnvironmentName", type=String.class, parameters={})
    private Output</* @Nullable */ String> pullRequestEnvironmentName;

    /**
     * @return The Amplify environment name for the pull request.
     * 
     */
    public Output</* @Nullable */ String> getPullRequestEnvironmentName() {
        return this.pullRequestEnvironmentName;
    }
    /**
     * The source branch if the branch is a pull request branch.
     * 
     */
    @Export(name="sourceBranch", type=String.class, parameters={})
    private Output<String> sourceBranch;

    /**
     * @return The source branch if the branch is a pull request branch.
     * 
     */
    public Output<String> getSourceBranch() {
        return this.sourceBranch;
    }
    /**
     * Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
     * 
     */
    @Export(name="stage", type=String.class, parameters={})
    private Output</* @Nullable */ String> stage;

    /**
     * @return Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
     * 
     */
    public Output</* @Nullable */ String> getStage() {
        return this.stage;
    }
    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The content Time To Live (TTL) for the website in seconds.
     * 
     */
    @Export(name="ttl", type=String.class, parameters={})
    private Output</* @Nullable */ String> ttl;

    /**
     * @return The content Time To Live (TTL) for the website in seconds.
     * 
     */
    public Output</* @Nullable */ String> getTtl() {
        return this.ttl;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Branch(String name) {
        this(name, BranchArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Branch(String name, BranchArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Branch(String name, BranchArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:amplify/branch:Branch", name, args == null ? BranchArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Branch(String name, Output<String> id, @Nullable BranchState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:amplify/branch:Branch", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Branch get(String name, Output<String> id, @Nullable BranchState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Branch(name, id, state, options);
    }
}
