// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ssm.inputs;

import io.pulumi.aws.ssm.inputs.DocumentAttachmentsSourceGetArgs;
import io.pulumi.aws.ssm.inputs.DocumentParameterGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DocumentState extends io.pulumi.resources.ResourceArgs {

    public static final DocumentState Empty = new DocumentState();

    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * One or more configuration blocks describing attachments sources to a version of a document. Defined below.
     * 
     */
    @Import(name="attachmentsSources")
      private final @Nullable Output<List<DocumentAttachmentsSourceGetArgs>> attachmentsSources;

    public Output<List<DocumentAttachmentsSourceGetArgs>> getAttachmentsSources() {
        return this.attachmentsSources == null ? Output.empty() : this.attachmentsSources;
    }

    /**
     * The JSON or YAML content of the document.
     * 
     */
    @Import(name="content")
      private final @Nullable Output<String> content;

    public Output<String> getContent() {
        return this.content == null ? Output.empty() : this.content;
    }

    /**
     * The date the document was created.
     * 
     */
    @Import(name="createdDate")
      private final @Nullable Output<String> createdDate;

    public Output<String> getCreatedDate() {
        return this.createdDate == null ? Output.empty() : this.createdDate;
    }

    /**
     * The default version of the document.
     * 
     */
    @Import(name="defaultVersion")
      private final @Nullable Output<String> defaultVersion;

    public Output<String> getDefaultVersion() {
        return this.defaultVersion == null ? Output.empty() : this.defaultVersion;
    }

    /**
     * The description of the document.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The format of the document. Valid document types include: `JSON` and `YAML`
     * 
     */
    @Import(name="documentFormat")
      private final @Nullable Output<String> documentFormat;

    public Output<String> getDocumentFormat() {
        return this.documentFormat == null ? Output.empty() : this.documentFormat;
    }

    /**
     * The type of the document. Valid document types include: `Automation`, `Command`, `Package`, `Policy`, and `Session`
     * 
     */
    @Import(name="documentType")
      private final @Nullable Output<String> documentType;

    public Output<String> getDocumentType() {
        return this.documentType == null ? Output.empty() : this.documentType;
    }

    /**
     * The document version.
     * 
     */
    @Import(name="documentVersion")
      private final @Nullable Output<String> documentVersion;

    public Output<String> getDocumentVersion() {
        return this.documentVersion == null ? Output.empty() : this.documentVersion;
    }

    /**
     * The sha1 or sha256 of the document content
     * 
     */
    @Import(name="hash")
      private final @Nullable Output<String> hash;

    public Output<String> getHash() {
        return this.hash == null ? Output.empty() : this.hash;
    }

    /**
     * "Sha1" "Sha256". The hashing algorithm used when hashing the content.
     * 
     */
    @Import(name="hashType")
      private final @Nullable Output<String> hashType;

    public Output<String> getHashType() {
        return this.hashType == null ? Output.empty() : this.hashType;
    }

    /**
     * The latest version of the document.
     * 
     */
    @Import(name="latestVersion")
      private final @Nullable Output<String> latestVersion;

    public Output<String> getLatestVersion() {
        return this.latestVersion == null ? Output.empty() : this.latestVersion;
    }

    /**
     * The name of the document.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The AWS user account of the person who created the document.
     * 
     */
    @Import(name="owner")
      private final @Nullable Output<String> owner;

    public Output<String> getOwner() {
        return this.owner == null ? Output.empty() : this.owner;
    }

    /**
     * The parameters that are available to this document.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<List<DocumentParameterGetArgs>> parameters;

    public Output<List<DocumentParameterGetArgs>> getParameters() {
        return this.parameters == null ? Output.empty() : this.parameters;
    }

    /**
     * Additional Permissions to attach to the document. See Permissions below for details.
     * 
     */
    @Import(name="permissions")
      private final @Nullable Output<Map<String,String>> permissions;

    public Output<Map<String,String>> getPermissions() {
        return this.permissions == null ? Output.empty() : this.permissions;
    }

    /**
     * A list of OS platforms compatible with this SSM document, either "Windows" or "Linux".
     * 
     */
    @Import(name="platformTypes")
      private final @Nullable Output<List<String>> platformTypes;

    public Output<List<String>> getPlatformTypes() {
        return this.platformTypes == null ? Output.empty() : this.platformTypes;
    }

    /**
     * The schema version of the document.
     * 
     */
    @Import(name="schemaVersion")
      private final @Nullable Output<String> schemaVersion;

    public Output<String> getSchemaVersion() {
        return this.schemaVersion == null ? Output.empty() : this.schemaVersion;
    }

    /**
     * "Creating", "Active" or "Deleting". The current status of the document.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * A map of tags to assign to the object. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see AWS Resource Types Reference (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
     * 
     */
    @Import(name="targetType")
      private final @Nullable Output<String> targetType;

    public Output<String> getTargetType() {
        return this.targetType == null ? Output.empty() : this.targetType;
    }

    /**
     * A field specifying the version of the artifact you are creating with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document and cannot be changed for an existing document version.
     * 
     */
    @Import(name="versionName")
      private final @Nullable Output<String> versionName;

    public Output<String> getVersionName() {
        return this.versionName == null ? Output.empty() : this.versionName;
    }

    public DocumentState(
        @Nullable Output<String> arn,
        @Nullable Output<List<DocumentAttachmentsSourceGetArgs>> attachmentsSources,
        @Nullable Output<String> content,
        @Nullable Output<String> createdDate,
        @Nullable Output<String> defaultVersion,
        @Nullable Output<String> description,
        @Nullable Output<String> documentFormat,
        @Nullable Output<String> documentType,
        @Nullable Output<String> documentVersion,
        @Nullable Output<String> hash,
        @Nullable Output<String> hashType,
        @Nullable Output<String> latestVersion,
        @Nullable Output<String> name,
        @Nullable Output<String> owner,
        @Nullable Output<List<DocumentParameterGetArgs>> parameters,
        @Nullable Output<Map<String,String>> permissions,
        @Nullable Output<List<String>> platformTypes,
        @Nullable Output<String> schemaVersion,
        @Nullable Output<String> status,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> targetType,
        @Nullable Output<String> versionName) {
        this.arn = arn;
        this.attachmentsSources = attachmentsSources;
        this.content = content;
        this.createdDate = createdDate;
        this.defaultVersion = defaultVersion;
        this.description = description;
        this.documentFormat = documentFormat;
        this.documentType = documentType;
        this.documentVersion = documentVersion;
        this.hash = hash;
        this.hashType = hashType;
        this.latestVersion = latestVersion;
        this.name = name;
        this.owner = owner;
        this.parameters = parameters;
        this.permissions = permissions;
        this.platformTypes = platformTypes;
        this.schemaVersion = schemaVersion;
        this.status = status;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.targetType = targetType;
        this.versionName = versionName;
    }

    private DocumentState() {
        this.arn = Output.empty();
        this.attachmentsSources = Output.empty();
        this.content = Output.empty();
        this.createdDate = Output.empty();
        this.defaultVersion = Output.empty();
        this.description = Output.empty();
        this.documentFormat = Output.empty();
        this.documentType = Output.empty();
        this.documentVersion = Output.empty();
        this.hash = Output.empty();
        this.hashType = Output.empty();
        this.latestVersion = Output.empty();
        this.name = Output.empty();
        this.owner = Output.empty();
        this.parameters = Output.empty();
        this.permissions = Output.empty();
        this.platformTypes = Output.empty();
        this.schemaVersion = Output.empty();
        this.status = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.targetType = Output.empty();
        this.versionName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<List<DocumentAttachmentsSourceGetArgs>> attachmentsSources;
        private @Nullable Output<String> content;
        private @Nullable Output<String> createdDate;
        private @Nullable Output<String> defaultVersion;
        private @Nullable Output<String> description;
        private @Nullable Output<String> documentFormat;
        private @Nullable Output<String> documentType;
        private @Nullable Output<String> documentVersion;
        private @Nullable Output<String> hash;
        private @Nullable Output<String> hashType;
        private @Nullable Output<String> latestVersion;
        private @Nullable Output<String> name;
        private @Nullable Output<String> owner;
        private @Nullable Output<List<DocumentParameterGetArgs>> parameters;
        private @Nullable Output<Map<String,String>> permissions;
        private @Nullable Output<List<String>> platformTypes;
        private @Nullable Output<String> schemaVersion;
        private @Nullable Output<String> status;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> targetType;
        private @Nullable Output<String> versionName;

        public Builder() {
    	      // Empty
        }

        public Builder(DocumentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.attachmentsSources = defaults.attachmentsSources;
    	      this.content = defaults.content;
    	      this.createdDate = defaults.createdDate;
    	      this.defaultVersion = defaults.defaultVersion;
    	      this.description = defaults.description;
    	      this.documentFormat = defaults.documentFormat;
    	      this.documentType = defaults.documentType;
    	      this.documentVersion = defaults.documentVersion;
    	      this.hash = defaults.hash;
    	      this.hashType = defaults.hashType;
    	      this.latestVersion = defaults.latestVersion;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.parameters = defaults.parameters;
    	      this.permissions = defaults.permissions;
    	      this.platformTypes = defaults.platformTypes;
    	      this.schemaVersion = defaults.schemaVersion;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.targetType = defaults.targetType;
    	      this.versionName = defaults.versionName;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }
        public Builder attachmentsSources(@Nullable Output<List<DocumentAttachmentsSourceGetArgs>> attachmentsSources) {
            this.attachmentsSources = attachmentsSources;
            return this;
        }
        public Builder attachmentsSources(@Nullable List<DocumentAttachmentsSourceGetArgs> attachmentsSources) {
            this.attachmentsSources = Output.ofNullable(attachmentsSources);
            return this;
        }
        public Builder attachmentsSources(DocumentAttachmentsSourceGetArgs... attachmentsSources) {
            return attachmentsSources(List.of(attachmentsSources));
        }
        public Builder content(@Nullable Output<String> content) {
            this.content = content;
            return this;
        }
        public Builder content(@Nullable String content) {
            this.content = Output.ofNullable(content);
            return this;
        }
        public Builder createdDate(@Nullable Output<String> createdDate) {
            this.createdDate = createdDate;
            return this;
        }
        public Builder createdDate(@Nullable String createdDate) {
            this.createdDate = Output.ofNullable(createdDate);
            return this;
        }
        public Builder defaultVersion(@Nullable Output<String> defaultVersion) {
            this.defaultVersion = defaultVersion;
            return this;
        }
        public Builder defaultVersion(@Nullable String defaultVersion) {
            this.defaultVersion = Output.ofNullable(defaultVersion);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder documentFormat(@Nullable Output<String> documentFormat) {
            this.documentFormat = documentFormat;
            return this;
        }
        public Builder documentFormat(@Nullable String documentFormat) {
            this.documentFormat = Output.ofNullable(documentFormat);
            return this;
        }
        public Builder documentType(@Nullable Output<String> documentType) {
            this.documentType = documentType;
            return this;
        }
        public Builder documentType(@Nullable String documentType) {
            this.documentType = Output.ofNullable(documentType);
            return this;
        }
        public Builder documentVersion(@Nullable Output<String> documentVersion) {
            this.documentVersion = documentVersion;
            return this;
        }
        public Builder documentVersion(@Nullable String documentVersion) {
            this.documentVersion = Output.ofNullable(documentVersion);
            return this;
        }
        public Builder hash(@Nullable Output<String> hash) {
            this.hash = hash;
            return this;
        }
        public Builder hash(@Nullable String hash) {
            this.hash = Output.ofNullable(hash);
            return this;
        }
        public Builder hashType(@Nullable Output<String> hashType) {
            this.hashType = hashType;
            return this;
        }
        public Builder hashType(@Nullable String hashType) {
            this.hashType = Output.ofNullable(hashType);
            return this;
        }
        public Builder latestVersion(@Nullable Output<String> latestVersion) {
            this.latestVersion = latestVersion;
            return this;
        }
        public Builder latestVersion(@Nullable String latestVersion) {
            this.latestVersion = Output.ofNullable(latestVersion);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder owner(@Nullable Output<String> owner) {
            this.owner = owner;
            return this;
        }
        public Builder owner(@Nullable String owner) {
            this.owner = Output.ofNullable(owner);
            return this;
        }
        public Builder parameters(@Nullable Output<List<DocumentParameterGetArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable List<DocumentParameterGetArgs> parameters) {
            this.parameters = Output.ofNullable(parameters);
            return this;
        }
        public Builder parameters(DocumentParameterGetArgs... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder permissions(@Nullable Output<Map<String,String>> permissions) {
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(@Nullable Map<String,String> permissions) {
            this.permissions = Output.ofNullable(permissions);
            return this;
        }
        public Builder platformTypes(@Nullable Output<List<String>> platformTypes) {
            this.platformTypes = platformTypes;
            return this;
        }
        public Builder platformTypes(@Nullable List<String> platformTypes) {
            this.platformTypes = Output.ofNullable(platformTypes);
            return this;
        }
        public Builder platformTypes(String... platformTypes) {
            return platformTypes(List.of(platformTypes));
        }
        public Builder schemaVersion(@Nullable Output<String> schemaVersion) {
            this.schemaVersion = schemaVersion;
            return this;
        }
        public Builder schemaVersion(@Nullable String schemaVersion) {
            this.schemaVersion = Output.ofNullable(schemaVersion);
            return this;
        }
        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = Output.ofNullable(status);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }
        public Builder targetType(@Nullable Output<String> targetType) {
            this.targetType = targetType;
            return this;
        }
        public Builder targetType(@Nullable String targetType) {
            this.targetType = Output.ofNullable(targetType);
            return this;
        }
        public Builder versionName(@Nullable Output<String> versionName) {
            this.versionName = versionName;
            return this;
        }
        public Builder versionName(@Nullable String versionName) {
            this.versionName = Output.ofNullable(versionName);
            return this;
        }        public DocumentState build() {
            return new DocumentState(arn, attachmentsSources, content, createdDate, defaultVersion, description, documentFormat, documentType, documentVersion, hash, hashType, latestVersion, name, owner, parameters, permissions, platformTypes, schemaVersion, status, tags, tagsAll, targetType, versionName);
        }
    }
}
