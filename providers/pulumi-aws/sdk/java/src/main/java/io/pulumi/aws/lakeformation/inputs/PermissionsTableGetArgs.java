// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lakeformation.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PermissionsTableGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final PermissionsTableGetArgs Empty = new PermissionsTableGetArgs();

    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     * 
     */
    @Import(name="catalogId")
      private final @Nullable Output<String> catalogId;

    public Output<String> catalogId() {
        return this.catalogId == null ? Codegen.empty() : this.catalogId;
    }

    /**
     * Name of the database for the table with columns resource. Unique to the Data Catalog.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * Name of the table resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    @Import(name="wildcard")
      private final @Nullable Output<Boolean> wildcard;

    public Output<Boolean> wildcard() {
        return this.wildcard == null ? Codegen.empty() : this.wildcard;
    }

    public PermissionsTableGetArgs(
        @Nullable Output<String> catalogId,
        Output<String> databaseName,
        @Nullable Output<String> name,
        @Nullable Output<Boolean> wildcard) {
        this.catalogId = catalogId;
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.name = name;
        this.wildcard = wildcard;
    }

    private PermissionsTableGetArgs() {
        this.catalogId = Codegen.empty();
        this.databaseName = Codegen.empty();
        this.name = Codegen.empty();
        this.wildcard = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PermissionsTableGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> catalogId;
        private Output<String> databaseName;
        private @Nullable Output<String> name;
        private @Nullable Output<Boolean> wildcard;

        public Builder() {
    	      // Empty
        }

        public Builder(PermissionsTableGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.databaseName = defaults.databaseName;
    	      this.name = defaults.name;
    	      this.wildcard = defaults.wildcard;
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            this.catalogId = catalogId;
            return this;
        }
        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = Codegen.ofNullable(catalogId);
            return this;
        }
        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder wildcard(@Nullable Output<Boolean> wildcard) {
            this.wildcard = wildcard;
            return this;
        }
        public Builder wildcard(@Nullable Boolean wildcard) {
            this.wildcard = Codegen.ofNullable(wildcard);
            return this;
        }        public PermissionsTableGetArgs build() {
            return new PermissionsTableGetArgs(catalogId, databaseName, name, wildcard);
        }
    }
}
