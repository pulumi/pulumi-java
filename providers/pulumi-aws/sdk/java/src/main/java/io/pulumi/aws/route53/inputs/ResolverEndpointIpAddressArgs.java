// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.route53.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ResolverEndpointIpAddressArgs extends io.pulumi.resources.ResourceArgs {

    public static final ResolverEndpointIpAddressArgs Empty = new ResolverEndpointIpAddressArgs();

    /**
     * The IP address in the subnet that you want to use for DNS queries.
     * 
     */
    @Import(name="ip")
      private final @Nullable Output<String> ip;

    public Output<String> getIp() {
        return this.ip == null ? Codegen.empty() : this.ip;
    }

    @Import(name="ipId")
      private final @Nullable Output<String> ipId;

    public Output<String> getIpId() {
        return this.ipId == null ? Codegen.empty() : this.ipId;
    }

    /**
     * The ID of the subnet that contains the IP address.
     * 
     */
    @Import(name="subnetId", required=true)
      private final Output<String> subnetId;

    public Output<String> getSubnetId() {
        return this.subnetId;
    }

    public ResolverEndpointIpAddressArgs(
        @Nullable Output<String> ip,
        @Nullable Output<String> ipId,
        Output<String> subnetId) {
        this.ip = ip;
        this.ipId = ipId;
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
    }

    private ResolverEndpointIpAddressArgs() {
        this.ip = Codegen.empty();
        this.ipId = Codegen.empty();
        this.subnetId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverEndpointIpAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> ip;
        private @Nullable Output<String> ipId;
        private Output<String> subnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(ResolverEndpointIpAddressArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ip = defaults.ip;
    	      this.ipId = defaults.ipId;
    	      this.subnetId = defaults.subnetId;
        }

        public Builder ip(@Nullable Output<String> ip) {
            this.ip = ip;
            return this;
        }
        public Builder ip(@Nullable String ip) {
            this.ip = Codegen.ofNullable(ip);
            return this;
        }
        public Builder ipId(@Nullable Output<String> ipId) {
            this.ipId = ipId;
            return this;
        }
        public Builder ipId(@Nullable String ipId) {
            this.ipId = Codegen.ofNullable(ipId);
            return this;
        }
        public Builder subnetId(Output<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Output.of(Objects.requireNonNull(subnetId));
            return this;
        }        public ResolverEndpointIpAddressArgs build() {
            return new ResolverEndpointIpAddressArgs(ip, ipId, subnetId);
        }
    }
}
