// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.signer;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.signer.SigningProfilePermissionArgs;
import io.pulumi.aws.signer.inputs.SigningProfilePermissionState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Creates a Signer Signing Profile Permission. That is, a cross-account permission for a signing profile.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const prodSp = new aws.signer.SigningProfile("prodSp", {
 *     platformId: "AWSLambda-SHA384-ECDSA",
 *     namePrefix: "prod_sp_",
 *     signatureValidityPeriod: {
 *         value: 5,
 *         type: "YEARS",
 *     },
 *     tags: {
 *         tag1: "value1",
 *         tag2: "value2",
 *     },
 * });
 * const spPermission1 = new aws.signer.SigningProfilePermission("spPermission1", {
 *     profileName: prodSp.name,
 *     action: "signer:StartSigningJob",
 *     principal: _var.aws_account,
 * });
 * const spPermission2 = new aws.signer.SigningProfilePermission("spPermission2", {
 *     profileName: prodSp.name,
 *     action: "signer:GetSigningProfile",
 *     principal: _var.aws_team_role_arn,
 *     statementId: "ProdAccountStartSigningJob_StatementId",
 * });
 * const spPermission3 = new aws.signer.SigningProfilePermission("spPermission3", {
 *     profileName: prodSp.name,
 *     action: "signer:RevokeSignature",
 *     principal: "123456789012",
 *     profileVersion: prodSp.version,
 *     statementIdPrefix: "version-permission-",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * prod_sp = aws.signer.SigningProfile("prodSp",
 *     platform_id="AWSLambda-SHA384-ECDSA",
 *     name_prefix="prod_sp_",
 *     signature_validity_period=aws.signer.SigningProfileSignatureValidityPeriodArgs(
 *         value=5,
 *         type="YEARS",
 *     ),
 *     tags={
 *         "tag1": "value1",
 *         "tag2": "value2",
 *     })
 * sp_permission1 = aws.signer.SigningProfilePermission("spPermission1",
 *     profile_name=prod_sp.name,
 *     action="signer:StartSigningJob",
 *     principal=var["aws_account"])
 * sp_permission2 = aws.signer.SigningProfilePermission("spPermission2",
 *     profile_name=prod_sp.name,
 *     action="signer:GetSigningProfile",
 *     principal=var["aws_team_role_arn"],
 *     statement_id="ProdAccountStartSigningJob_StatementId")
 * sp_permission3 = aws.signer.SigningProfilePermission("spPermission3",
 *     profile_name=prod_sp.name,
 *     action="signer:RevokeSignature",
 *     principal="123456789012",
 *     profile_version=prod_sp.version,
 *     statement_id_prefix="version-permission-")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var prodSp = new Aws.Signer.SigningProfile("prodSp", new Aws.Signer.SigningProfileArgs
 *         {
 *             PlatformId = "AWSLambda-SHA384-ECDSA",
 *             NamePrefix = "prod_sp_",
 *             SignatureValidityPeriod = new Aws.Signer.Inputs.SigningProfileSignatureValidityPeriodArgs
 *             {
 *                 Value = 5,
 *                 Type = "YEARS",
 *             },
 *             Tags = 
 *             {
 *                 { "tag1", "value1" },
 *                 { "tag2", "value2" },
 *             },
 *         });
 *         var spPermission1 = new Aws.Signer.SigningProfilePermission("spPermission1", new Aws.Signer.SigningProfilePermissionArgs
 *         {
 *             ProfileName = prodSp.Name,
 *             Action = "signer:StartSigningJob",
 *             Principal = @var.Aws_account,
 *         });
 *         var spPermission2 = new Aws.Signer.SigningProfilePermission("spPermission2", new Aws.Signer.SigningProfilePermissionArgs
 *         {
 *             ProfileName = prodSp.Name,
 *             Action = "signer:GetSigningProfile",
 *             Principal = @var.Aws_team_role_arn,
 *             StatementId = "ProdAccountStartSigningJob_StatementId",
 *         });
 *         var spPermission3 = new Aws.Signer.SigningProfilePermission("spPermission3", new Aws.Signer.SigningProfilePermissionArgs
 *         {
 *             ProfileName = prodSp.Name,
 *             Action = "signer:RevokeSignature",
 *             Principal = "123456789012",
 *             ProfileVersion = prodSp.Version,
 *             StatementIdPrefix = "version-permission-",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/signer"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		prodSp, err := signer.NewSigningProfile(ctx, "prodSp", &signer.SigningProfileArgs{
 * 			PlatformId: pulumi.String("AWSLambda-SHA384-ECDSA"),
 * 			NamePrefix: pulumi.String("prod_sp_"),
 * 			SignatureValidityPeriod: &signer.SigningProfileSignatureValidityPeriodArgs{
 * 				Value: pulumi.Int(5),
 * 				Type:  pulumi.String("YEARS"),
 * 			},
 * 			Tags: pulumi.StringMap{
 * 				"tag1": pulumi.String("value1"),
 * 				"tag2": pulumi.String("value2"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = signer.NewSigningProfilePermission(ctx, "spPermission1", &signer.SigningProfilePermissionArgs{
 * 			ProfileName: prodSp.Name,
 * 			Action:      pulumi.String("signer:StartSigningJob"),
 * 			Principal:   pulumi.Any(_var.Aws_account),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = signer.NewSigningProfilePermission(ctx, "spPermission2", &signer.SigningProfilePermissionArgs{
 * 			ProfileName: prodSp.Name,
 * 			Action:      pulumi.String("signer:GetSigningProfile"),
 * 			Principal:   pulumi.Any(_var.Aws_team_role_arn),
 * 			StatementId: pulumi.String("ProdAccountStartSigningJob_StatementId"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = signer.NewSigningProfilePermission(ctx, "spPermission3", &signer.SigningProfilePermissionArgs{
 * 			ProfileName:       prodSp.Name,
 * 			Action:            pulumi.String("signer:RevokeSignature"),
 * 			Principal:         pulumi.String("123456789012"),
 * 			ProfileVersion:    prodSp.Version,
 * 			StatementIdPrefix: pulumi.String("version-permission-"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Signer signing profile permission statements can be imported using profile_name/statement_id, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:signer/signingProfilePermission:SigningProfilePermission test_signer_signing_profile_permission prod_profile_DdW3Mk1foYL88fajut4mTVFGpuwfd4ACO6ANL0D1uIj7lrn8adK/ProdAccountStartSigningJobStatementId
 * ```
 * 
 *  
 */
@ResourceType(type="aws:signer/signingProfilePermission:SigningProfilePermission")
public class SigningProfilePermission extends io.pulumi.resources.CustomResource {
    /**
     * An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, or `signer:RevokeSignature`.
     * 
     */
    @Export(name="action", type=String.class, parameters={})
    private Output<String> action;

    /**
     * @return An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, or `signer:RevokeSignature`.
     * 
     */
    public Output<String> getAction() {
        return this.action;
    }
    /**
     * The AWS principal to be granted a cross-account permission.
     * 
     */
    @Export(name="principal", type=String.class, parameters={})
    private Output<String> principal;

    /**
     * @return The AWS principal to be granted a cross-account permission.
     * 
     */
    public Output<String> getPrincipal() {
        return this.principal;
    }
    /**
     * Name of the signing profile to add the cross-account permissions.
     * 
     */
    @Export(name="profileName", type=String.class, parameters={})
    private Output<String> profileName;

    /**
     * @return Name of the signing profile to add the cross-account permissions.
     * 
     */
    public Output<String> getProfileName() {
        return this.profileName;
    }
    /**
     * The signing profile version that a permission applies to.
     * 
     */
    @Export(name="profileVersion", type=String.class, parameters={})
    private Output<String> profileVersion;

    /**
     * @return The signing profile version that a permission applies to.
     * 
     */
    public Output<String> getProfileVersion() {
        return this.profileVersion;
    }
    /**
     * A unique statement identifier. By default generated by the provider.
     * 
     */
    @Export(name="statementId", type=String.class, parameters={})
    private Output<String> statementId;

    /**
     * @return A unique statement identifier. By default generated by the provider.
     * 
     */
    public Output<String> getStatementId() {
        return this.statementId;
    }
    /**
     * A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statement_id`.
     * 
     */
    @Export(name="statementIdPrefix", type=String.class, parameters={})
    private Output</* @Nullable */ String> statementIdPrefix;

    /**
     * @return A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statement_id`.
     * 
     */
    public Output</* @Nullable */ String> getStatementIdPrefix() {
        return this.statementIdPrefix;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SigningProfilePermission(String name) {
        this(name, SigningProfilePermissionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SigningProfilePermission(String name, SigningProfilePermissionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SigningProfilePermission(String name, SigningProfilePermissionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:signer/signingProfilePermission:SigningProfilePermission", name, args == null ? SigningProfilePermissionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private SigningProfilePermission(String name, Output<String> id, @Nullable SigningProfilePermissionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:signer/signingProfilePermission:SigningProfilePermission", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SigningProfilePermission get(String name, Output<String> id, @Nullable SigningProfilePermissionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new SigningProfilePermission(name, id, state, options);
    }
}
