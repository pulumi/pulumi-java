// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.securityhub.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StandardsControlState extends io.pulumi.resources.ResourceArgs {

    public static final StandardsControlState Empty = new StandardsControlState();

    /**
     * The identifier of the security standard control.
     * 
     */
    @Import(name="controlId")
      private final @Nullable Output<String> controlId;

    public Output<String> controlId() {
        return this.controlId == null ? Codegen.empty() : this.controlId;
    }

    /**
     * The control status could be `ENABLED` or `DISABLED`. You have to specify `disabled_reason` argument for `DISABLED` control status.
     * 
     */
    @Import(name="controlStatus")
      private final @Nullable Output<String> controlStatus;

    public Output<String> controlStatus() {
        return this.controlStatus == null ? Codegen.empty() : this.controlStatus;
    }

    /**
     * The date and time that the status of the security standard control was most recently updated.
     * 
     */
    @Import(name="controlStatusUpdatedAt")
      private final @Nullable Output<String> controlStatusUpdatedAt;

    public Output<String> controlStatusUpdatedAt() {
        return this.controlStatusUpdatedAt == null ? Codegen.empty() : this.controlStatusUpdatedAt;
    }

    /**
     * The standard control longer description. Provides information about what the control is checking for.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * A description of the reason why you are disabling a security standard control. If you specify this attribute, `control_status` will be set to `DISABLED` automatically.
     * 
     */
    @Import(name="disabledReason")
      private final @Nullable Output<String> disabledReason;

    public Output<String> disabledReason() {
        return this.disabledReason == null ? Codegen.empty() : this.disabledReason;
    }

    /**
     * The list of requirements that are related to this control.
     * 
     */
    @Import(name="relatedRequirements")
      private final @Nullable Output<List<String>> relatedRequirements;

    public Output<List<String>> relatedRequirements() {
        return this.relatedRequirements == null ? Codegen.empty() : this.relatedRequirements;
    }

    /**
     * A link to remediation information for the control in the Security Hub user documentation.
     * 
     */
    @Import(name="remediationUrl")
      private final @Nullable Output<String> remediationUrl;

    public Output<String> remediationUrl() {
        return this.remediationUrl == null ? Codegen.empty() : this.remediationUrl;
    }

    /**
     * The severity of findings generated from this security standard control.
     * 
     */
    @Import(name="severityRating")
      private final @Nullable Output<String> severityRating;

    public Output<String> severityRating() {
        return this.severityRating == null ? Codegen.empty() : this.severityRating;
    }

    /**
     * The standards control ARN.
     * 
     */
    @Import(name="standardsControlArn")
      private final @Nullable Output<String> standardsControlArn;

    public Output<String> standardsControlArn() {
        return this.standardsControlArn == null ? Codegen.empty() : this.standardsControlArn;
    }

    /**
     * The standard control title.
     * 
     */
    @Import(name="title")
      private final @Nullable Output<String> title;

    public Output<String> title() {
        return this.title == null ? Codegen.empty() : this.title;
    }

    public StandardsControlState(
        @Nullable Output<String> controlId,
        @Nullable Output<String> controlStatus,
        @Nullable Output<String> controlStatusUpdatedAt,
        @Nullable Output<String> description,
        @Nullable Output<String> disabledReason,
        @Nullable Output<List<String>> relatedRequirements,
        @Nullable Output<String> remediationUrl,
        @Nullable Output<String> severityRating,
        @Nullable Output<String> standardsControlArn,
        @Nullable Output<String> title) {
        this.controlId = controlId;
        this.controlStatus = controlStatus;
        this.controlStatusUpdatedAt = controlStatusUpdatedAt;
        this.description = description;
        this.disabledReason = disabledReason;
        this.relatedRequirements = relatedRequirements;
        this.remediationUrl = remediationUrl;
        this.severityRating = severityRating;
        this.standardsControlArn = standardsControlArn;
        this.title = title;
    }

    private StandardsControlState() {
        this.controlId = Codegen.empty();
        this.controlStatus = Codegen.empty();
        this.controlStatusUpdatedAt = Codegen.empty();
        this.description = Codegen.empty();
        this.disabledReason = Codegen.empty();
        this.relatedRequirements = Codegen.empty();
        this.remediationUrl = Codegen.empty();
        this.severityRating = Codegen.empty();
        this.standardsControlArn = Codegen.empty();
        this.title = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardsControlState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> controlId;
        private @Nullable Output<String> controlStatus;
        private @Nullable Output<String> controlStatusUpdatedAt;
        private @Nullable Output<String> description;
        private @Nullable Output<String> disabledReason;
        private @Nullable Output<List<String>> relatedRequirements;
        private @Nullable Output<String> remediationUrl;
        private @Nullable Output<String> severityRating;
        private @Nullable Output<String> standardsControlArn;
        private @Nullable Output<String> title;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardsControlState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controlId = defaults.controlId;
    	      this.controlStatus = defaults.controlStatus;
    	      this.controlStatusUpdatedAt = defaults.controlStatusUpdatedAt;
    	      this.description = defaults.description;
    	      this.disabledReason = defaults.disabledReason;
    	      this.relatedRequirements = defaults.relatedRequirements;
    	      this.remediationUrl = defaults.remediationUrl;
    	      this.severityRating = defaults.severityRating;
    	      this.standardsControlArn = defaults.standardsControlArn;
    	      this.title = defaults.title;
        }

        public Builder controlId(@Nullable Output<String> controlId) {
            this.controlId = controlId;
            return this;
        }
        public Builder controlId(@Nullable String controlId) {
            this.controlId = Codegen.ofNullable(controlId);
            return this;
        }
        public Builder controlStatus(@Nullable Output<String> controlStatus) {
            this.controlStatus = controlStatus;
            return this;
        }
        public Builder controlStatus(@Nullable String controlStatus) {
            this.controlStatus = Codegen.ofNullable(controlStatus);
            return this;
        }
        public Builder controlStatusUpdatedAt(@Nullable Output<String> controlStatusUpdatedAt) {
            this.controlStatusUpdatedAt = controlStatusUpdatedAt;
            return this;
        }
        public Builder controlStatusUpdatedAt(@Nullable String controlStatusUpdatedAt) {
            this.controlStatusUpdatedAt = Codegen.ofNullable(controlStatusUpdatedAt);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder disabledReason(@Nullable Output<String> disabledReason) {
            this.disabledReason = disabledReason;
            return this;
        }
        public Builder disabledReason(@Nullable String disabledReason) {
            this.disabledReason = Codegen.ofNullable(disabledReason);
            return this;
        }
        public Builder relatedRequirements(@Nullable Output<List<String>> relatedRequirements) {
            this.relatedRequirements = relatedRequirements;
            return this;
        }
        public Builder relatedRequirements(@Nullable List<String> relatedRequirements) {
            this.relatedRequirements = Codegen.ofNullable(relatedRequirements);
            return this;
        }
        public Builder relatedRequirements(String... relatedRequirements) {
            return relatedRequirements(List.of(relatedRequirements));
        }
        public Builder remediationUrl(@Nullable Output<String> remediationUrl) {
            this.remediationUrl = remediationUrl;
            return this;
        }
        public Builder remediationUrl(@Nullable String remediationUrl) {
            this.remediationUrl = Codegen.ofNullable(remediationUrl);
            return this;
        }
        public Builder severityRating(@Nullable Output<String> severityRating) {
            this.severityRating = severityRating;
            return this;
        }
        public Builder severityRating(@Nullable String severityRating) {
            this.severityRating = Codegen.ofNullable(severityRating);
            return this;
        }
        public Builder standardsControlArn(@Nullable Output<String> standardsControlArn) {
            this.standardsControlArn = standardsControlArn;
            return this;
        }
        public Builder standardsControlArn(@Nullable String standardsControlArn) {
            this.standardsControlArn = Codegen.ofNullable(standardsControlArn);
            return this;
        }
        public Builder title(@Nullable Output<String> title) {
            this.title = title;
            return this;
        }
        public Builder title(@Nullable String title) {
            this.title = Codegen.ofNullable(title);
            return this;
        }        public StandardsControlState build() {
            return new StandardsControlState(controlId, controlStatus, controlStatusUpdatedAt, description, disabledReason, relatedRequirements, remediationUrl, severityRating, standardsControlArn, title);
        }
    }
}
