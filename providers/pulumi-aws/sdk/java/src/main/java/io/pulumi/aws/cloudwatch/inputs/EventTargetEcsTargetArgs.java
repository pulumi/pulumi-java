// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch.inputs;

import io.pulumi.aws.cloudwatch.inputs.EventTargetEcsTargetNetworkConfigurationArgs;
import io.pulumi.aws.cloudwatch.inputs.EventTargetEcsTargetPlacementConstraintArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventTargetEcsTargetArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventTargetEcsTargetArgs Empty = new EventTargetEcsTargetArgs();

    /**
     * Specifies whether to enable Amazon ECS managed tags for the task.
     * 
     */
    @InputImport(name="enableEcsManagedTags")
    private final @Nullable Input<Boolean> enableEcsManagedTags;

    public Input<Boolean> getEnableEcsManagedTags() {
        return this.enableEcsManagedTags == null ? Input.empty() : this.enableEcsManagedTags;
    }

    /**
     * Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
     * 
     */
    @InputImport(name="enableExecuteCommand")
    private final @Nullable Input<Boolean> enableExecuteCommand;

    public Input<Boolean> getEnableExecuteCommand() {
        return this.enableExecuteCommand == null ? Input.empty() : this.enableExecuteCommand;
    }

    /**
     * Specifies an ECS task group for the task. The maximum length is 255 characters.
     * 
     */
    @InputImport(name="group")
    private final @Nullable Input<String> group;

    public Input<String> getGroup() {
        return this.group == null ? Input.empty() : this.group;
    }

    /**
     * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values include: an empty string `""` (to specify no launch type), `EC2`, or `FARGATE`.
     * 
     */
    @InputImport(name="launchType")
    private final @Nullable Input<String> launchType;

    public Input<String> getLaunchType() {
        return this.launchType == null ? Input.empty() : this.launchType;
    }

    /**
     * Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launch_type is FARGATE because the awsvpc mode is required for Fargate tasks.
     * 
     */
    @InputImport(name="networkConfiguration")
    private final @Nullable Input<EventTargetEcsTargetNetworkConfigurationArgs> networkConfiguration;

    public Input<EventTargetEcsTargetNetworkConfigurationArgs> getNetworkConfiguration() {
        return this.networkConfiguration == null ? Input.empty() : this.networkConfiguration;
    }

    /**
     * An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). See Below.
     * 
     */
    @InputImport(name="placementConstraints")
    private final @Nullable Input<List<EventTargetEcsTargetPlacementConstraintArgs>> placementConstraints;

    public Input<List<EventTargetEcsTargetPlacementConstraintArgs>> getPlacementConstraints() {
        return this.placementConstraints == null ? Input.empty() : this.placementConstraints;
    }

    /**
     * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
     * 
     */
    @InputImport(name="platformVersion")
    private final @Nullable Input<String> platformVersion;

    public Input<String> getPlatformVersion() {
        return this.platformVersion == null ? Input.empty() : this.platformVersion;
    }

    /**
     * Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation.
     * 
     */
    @InputImport(name="propagateTags")
    private final @Nullable Input<String> propagateTags;

    public Input<String> getPropagateTags() {
        return this.propagateTags == null ? Input.empty() : this.propagateTags;
    }

    /**
     * A map of tags to assign to ecs resources.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The number of tasks to create based on the TaskDefinition. The default is 1.
     * 
     */
    @InputImport(name="taskCount")
    private final @Nullable Input<Integer> taskCount;

    public Input<Integer> getTaskCount() {
        return this.taskCount == null ? Input.empty() : this.taskCount;
    }

    /**
     * The ARN of the task definition to use if the event target is an Amazon ECS cluster.
     * 
     */
    @InputImport(name="taskDefinitionArn", required=true)
    private final Input<String> taskDefinitionArn;

    public Input<String> getTaskDefinitionArn() {
        return this.taskDefinitionArn;
    }

    public EventTargetEcsTargetArgs(
        @Nullable Input<Boolean> enableEcsManagedTags,
        @Nullable Input<Boolean> enableExecuteCommand,
        @Nullable Input<String> group,
        @Nullable Input<String> launchType,
        @Nullable Input<EventTargetEcsTargetNetworkConfigurationArgs> networkConfiguration,
        @Nullable Input<List<EventTargetEcsTargetPlacementConstraintArgs>> placementConstraints,
        @Nullable Input<String> platformVersion,
        @Nullable Input<String> propagateTags,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Integer> taskCount,
        Input<String> taskDefinitionArn) {
        this.enableEcsManagedTags = enableEcsManagedTags;
        this.enableExecuteCommand = enableExecuteCommand;
        this.group = group;
        this.launchType = launchType;
        this.networkConfiguration = networkConfiguration;
        this.placementConstraints = placementConstraints;
        this.platformVersion = platformVersion;
        this.propagateTags = propagateTags;
        this.tags = tags;
        this.taskCount = taskCount;
        this.taskDefinitionArn = Objects.requireNonNull(taskDefinitionArn, "expected parameter 'taskDefinitionArn' to be non-null");
    }

    private EventTargetEcsTargetArgs() {
        this.enableEcsManagedTags = Input.empty();
        this.enableExecuteCommand = Input.empty();
        this.group = Input.empty();
        this.launchType = Input.empty();
        this.networkConfiguration = Input.empty();
        this.placementConstraints = Input.empty();
        this.platformVersion = Input.empty();
        this.propagateTags = Input.empty();
        this.tags = Input.empty();
        this.taskCount = Input.empty();
        this.taskDefinitionArn = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventTargetEcsTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> enableEcsManagedTags;
        private @Nullable Input<Boolean> enableExecuteCommand;
        private @Nullable Input<String> group;
        private @Nullable Input<String> launchType;
        private @Nullable Input<EventTargetEcsTargetNetworkConfigurationArgs> networkConfiguration;
        private @Nullable Input<List<EventTargetEcsTargetPlacementConstraintArgs>> placementConstraints;
        private @Nullable Input<String> platformVersion;
        private @Nullable Input<String> propagateTags;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Integer> taskCount;
        private Input<String> taskDefinitionArn;

        public Builder() {
    	      // Empty
        }

        public Builder(EventTargetEcsTargetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableEcsManagedTags = defaults.enableEcsManagedTags;
    	      this.enableExecuteCommand = defaults.enableExecuteCommand;
    	      this.group = defaults.group;
    	      this.launchType = defaults.launchType;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.placementConstraints = defaults.placementConstraints;
    	      this.platformVersion = defaults.platformVersion;
    	      this.propagateTags = defaults.propagateTags;
    	      this.tags = defaults.tags;
    	      this.taskCount = defaults.taskCount;
    	      this.taskDefinitionArn = defaults.taskDefinitionArn;
        }

        public Builder setEnableEcsManagedTags(@Nullable Input<Boolean> enableEcsManagedTags) {
            this.enableEcsManagedTags = enableEcsManagedTags;
            return this;
        }

        public Builder setEnableEcsManagedTags(@Nullable Boolean enableEcsManagedTags) {
            this.enableEcsManagedTags = Input.ofNullable(enableEcsManagedTags);
            return this;
        }

        public Builder setEnableExecuteCommand(@Nullable Input<Boolean> enableExecuteCommand) {
            this.enableExecuteCommand = enableExecuteCommand;
            return this;
        }

        public Builder setEnableExecuteCommand(@Nullable Boolean enableExecuteCommand) {
            this.enableExecuteCommand = Input.ofNullable(enableExecuteCommand);
            return this;
        }

        public Builder setGroup(@Nullable Input<String> group) {
            this.group = group;
            return this;
        }

        public Builder setGroup(@Nullable String group) {
            this.group = Input.ofNullable(group);
            return this;
        }

        public Builder setLaunchType(@Nullable Input<String> launchType) {
            this.launchType = launchType;
            return this;
        }

        public Builder setLaunchType(@Nullable String launchType) {
            this.launchType = Input.ofNullable(launchType);
            return this;
        }

        public Builder setNetworkConfiguration(@Nullable Input<EventTargetEcsTargetNetworkConfigurationArgs> networkConfiguration) {
            this.networkConfiguration = networkConfiguration;
            return this;
        }

        public Builder setNetworkConfiguration(@Nullable EventTargetEcsTargetNetworkConfigurationArgs networkConfiguration) {
            this.networkConfiguration = Input.ofNullable(networkConfiguration);
            return this;
        }

        public Builder setPlacementConstraints(@Nullable Input<List<EventTargetEcsTargetPlacementConstraintArgs>> placementConstraints) {
            this.placementConstraints = placementConstraints;
            return this;
        }

        public Builder setPlacementConstraints(@Nullable List<EventTargetEcsTargetPlacementConstraintArgs> placementConstraints) {
            this.placementConstraints = Input.ofNullable(placementConstraints);
            return this;
        }

        public Builder setPlatformVersion(@Nullable Input<String> platformVersion) {
            this.platformVersion = platformVersion;
            return this;
        }

        public Builder setPlatformVersion(@Nullable String platformVersion) {
            this.platformVersion = Input.ofNullable(platformVersion);
            return this;
        }

        public Builder setPropagateTags(@Nullable Input<String> propagateTags) {
            this.propagateTags = propagateTags;
            return this;
        }

        public Builder setPropagateTags(@Nullable String propagateTags) {
            this.propagateTags = Input.ofNullable(propagateTags);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTaskCount(@Nullable Input<Integer> taskCount) {
            this.taskCount = taskCount;
            return this;
        }

        public Builder setTaskCount(@Nullable Integer taskCount) {
            this.taskCount = Input.ofNullable(taskCount);
            return this;
        }

        public Builder setTaskDefinitionArn(Input<String> taskDefinitionArn) {
            this.taskDefinitionArn = Objects.requireNonNull(taskDefinitionArn);
            return this;
        }

        public Builder setTaskDefinitionArn(String taskDefinitionArn) {
            this.taskDefinitionArn = Input.of(Objects.requireNonNull(taskDefinitionArn));
            return this;
        }
        public EventTargetEcsTargetArgs build() {
            return new EventTargetEcsTargetArgs(enableEcsManagedTags, enableExecuteCommand, group, launchType, networkConfiguration, placementConstraints, platformVersion, propagateTags, tags, taskCount, taskDefinitionArn);
        }
    }
}
