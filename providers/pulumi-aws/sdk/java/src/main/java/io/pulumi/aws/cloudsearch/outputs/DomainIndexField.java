// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudsearch.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class DomainIndexField {
    /**
     * The analysis scheme you want to use for a `text` field. The analysis scheme specifies the language-specific text processing options that are used during indexing.
     * 
     */
    private final @Nullable String analysisScheme;
    /**
     * The default value for the field. This value is used when no value is specified for the field in the document data.
     * 
     */
    private final @Nullable String defaultValue;
    /**
     * You can get facet information by enabling this.
     * 
     */
    private final @Nullable Boolean facet;
    /**
     * You can highlight information.
     * 
     */
    private final @Nullable Boolean highlight;
    /**
     * A unique name for the field. Field names must begin with a letter and be at least 3 and no more than 64 characters long. The allowed characters are: `a`-`z` (lower-case letters), `0`-`9`, and `_` (underscore). The name `score` is reserved and cannot be used as a field name.
     * 
     */
    private final String name;
    /**
     * You can enable returning the value of all searchable fields.
     * 
     */
    private final @Nullable Boolean $return;
    /**
     * You can set whether this index should be searchable or not.
     * 
     */
    private final @Nullable Boolean search;
    /**
     * You can enable the property to be sortable.
     * 
     */
    private final @Nullable Boolean sort;
    /**
     * The field type. Valid values: `date`, `date-array`, `double`, `double-array`, `int`, `int-array`, `literal`, `literal-array`, `text`, `text-array`.
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"analysisScheme","defaultValue","facet","highlight","name","$return","search","sort","type"})
    private DomainIndexField(
        @Nullable String analysisScheme,
        @Nullable String defaultValue,
        @Nullable Boolean facet,
        @Nullable Boolean highlight,
        String name,
        @Nullable Boolean $return,
        @Nullable Boolean search,
        @Nullable Boolean sort,
        String type) {
        this.analysisScheme = analysisScheme;
        this.defaultValue = defaultValue;
        this.facet = facet;
        this.highlight = highlight;
        this.name = Objects.requireNonNull(name);
        this.$return = $return;
        this.search = search;
        this.sort = sort;
        this.type = Objects.requireNonNull(type);
    }

    /**
     * The analysis scheme you want to use for a `text` field. The analysis scheme specifies the language-specific text processing options that are used during indexing.
     * 
     */
    public Optional<String> getAnalysisScheme() {
        return Optional.ofNullable(this.analysisScheme);
    }
    /**
     * The default value for the field. This value is used when no value is specified for the field in the document data.
     * 
     */
    public Optional<String> getDefaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }
    /**
     * You can get facet information by enabling this.
     * 
     */
    public Optional<Boolean> getFacet() {
        return Optional.ofNullable(this.facet);
    }
    /**
     * You can highlight information.
     * 
     */
    public Optional<Boolean> getHighlight() {
        return Optional.ofNullable(this.highlight);
    }
    /**
     * A unique name for the field. Field names must begin with a letter and be at least 3 and no more than 64 characters long. The allowed characters are: `a`-`z` (lower-case letters), `0`-`9`, and `_` (underscore). The name `score` is reserved and cannot be used as a field name.
     * 
     */
    public String getName() {
        return this.name;
    }
    /**
     * You can enable returning the value of all searchable fields.
     * 
     */
    public Optional<Boolean> get$return() {
        return Optional.ofNullable(this.$return);
    }
    /**
     * You can set whether this index should be searchable or not.
     * 
     */
    public Optional<Boolean> getSearch() {
        return Optional.ofNullable(this.search);
    }
    /**
     * You can enable the property to be sortable.
     * 
     */
    public Optional<Boolean> getSort() {
        return Optional.ofNullable(this.sort);
    }
    /**
     * The field type. Valid values: `date`, `date-array`, `double`, `double-array`, `int`, `int-array`, `literal`, `literal-array`, `text`, `text-array`.
     * 
     */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainIndexField defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String analysisScheme;
        private @Nullable String defaultValue;
        private @Nullable Boolean facet;
        private @Nullable Boolean highlight;
        private String name;
        private @Nullable Boolean $return;
        private @Nullable Boolean search;
        private @Nullable Boolean sort;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainIndexField defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analysisScheme = defaults.analysisScheme;
    	      this.defaultValue = defaults.defaultValue;
    	      this.facet = defaults.facet;
    	      this.highlight = defaults.highlight;
    	      this.name = defaults.name;
    	      this.$return = defaults.$return;
    	      this.search = defaults.search;
    	      this.sort = defaults.sort;
    	      this.type = defaults.type;
        }

        public Builder setAnalysisScheme(@Nullable String analysisScheme) {
            this.analysisScheme = analysisScheme;
            return this;
        }

        public Builder setDefaultValue(@Nullable String defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }

        public Builder setFacet(@Nullable Boolean facet) {
            this.facet = facet;
            return this;
        }

        public Builder setHighlight(@Nullable Boolean highlight) {
            this.highlight = highlight;
            return this;
        }

        public Builder setName(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder set$return(@Nullable Boolean $return) {
            this.$return = $return;
            return this;
        }

        public Builder setSearch(@Nullable Boolean search) {
            this.search = search;
            return this;
        }

        public Builder setSort(@Nullable Boolean sort) {
            this.sort = sort;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public DomainIndexField build() {
            return new DomainIndexField(analysisScheme, defaultValue, facet, highlight, name, $return, search, sort, type);
        }
    }
}
