// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.macie2.inputs;

import io.pulumi.aws.macie2.inputs.ClassificationJobS3JobDefinitionGetArgs;
import io.pulumi.aws.macie2.inputs.ClassificationJobScheduleFrequencyGetArgs;
import io.pulumi.aws.macie2.inputs.ClassificationJobUserPausedDetailGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClassificationJobState extends io.pulumi.resources.ResourceArgs {

    public static final ClassificationJobState Empty = new ClassificationJobState();

    /**
     * The date and time, in UTC and extended RFC 3339 format, when the job was created.
     * 
     */
    @InputImport(name="createdAt")
      private final @Nullable Input<String> createdAt;

    public Input<String> getCreatedAt() {
        return this.createdAt == null ? Input.empty() : this.createdAt;
    }

    /**
     * The custom data identifiers to use for data analysis and classification.
     * 
     */
    @InputImport(name="customDataIdentifierIds")
      private final @Nullable Input<List<String>> customDataIdentifierIds;

    public Input<List<String>> getCustomDataIdentifierIds() {
        return this.customDataIdentifierIds == null ? Input.empty() : this.customDataIdentifierIds;
    }

    /**
     * A custom description of the job. The description can contain as many as 200 characters.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Specifies whether to analyze all existing, eligible objects immediately after the job is created.
     * 
     */
    @InputImport(name="initialRun")
      private final @Nullable Input<Boolean> initialRun;

    public Input<Boolean> getInitialRun() {
        return this.initialRun == null ? Input.empty() : this.initialRun;
    }

    @InputImport(name="jobArn")
      private final @Nullable Input<String> jobArn;

    public Input<String> getJobArn() {
        return this.jobArn == null ? Input.empty() : this.jobArn;
    }

    @InputImport(name="jobId")
      private final @Nullable Input<String> jobId;

    public Input<String> getJobId() {
        return this.jobId == null ? Input.empty() : this.jobId;
    }

    /**
     * The status for the job. Valid values are: `CANCELLED`, `RUNNING` and `USER_PAUSED`
     * 
     */
    @InputImport(name="jobStatus")
      private final @Nullable Input<String> jobStatus;

    public Input<String> getJobStatus() {
        return this.jobStatus == null ? Input.empty() : this.jobStatus;
    }

    /**
     * The schedule for running the job. Valid values are: `ONE_TIME` - Run the job only once. If you specify this value, don't specify a value for the `schedule_frequency` property. `SCHEDULED` - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the `schedule_frequency` property to define the recurrence pattern for the job.
     * 
     */
    @InputImport(name="jobType")
      private final @Nullable Input<String> jobType;

    public Input<String> getJobType() {
        return this.jobType == null ? Input.empty() : this.jobType;
    }

    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @InputImport(name="namePrefix")
      private final @Nullable Input<String> namePrefix;

    public Input<String> getNamePrefix() {
        return this.namePrefix == null ? Input.empty() : this.namePrefix;
    }

    /**
     * The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
     * 
     */
    @InputImport(name="s3JobDefinition")
      private final @Nullable Input<ClassificationJobS3JobDefinitionGetArgs> s3JobDefinition;

    public Input<ClassificationJobS3JobDefinitionGetArgs> getS3JobDefinition() {
        return this.s3JobDefinition == null ? Input.empty() : this.s3JobDefinition;
    }

    /**
     * The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
     * 
     */
    @InputImport(name="samplingPercentage")
      private final @Nullable Input<Integer> samplingPercentage;

    public Input<Integer> getSamplingPercentage() {
        return this.samplingPercentage == null ? Input.empty() : this.samplingPercentage;
    }

    /**
     * The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the `job_type` property to `ONE_TIME`. (documented below)
     * 
     */
    @InputImport(name="scheduleFrequency")
      private final @Nullable Input<ClassificationJobScheduleFrequencyGetArgs> scheduleFrequency;

    public Input<ClassificationJobScheduleFrequencyGetArgs> getScheduleFrequency() {
        return this.scheduleFrequency == null ? Input.empty() : this.scheduleFrequency;
    }

    /**
     * A map of key-value pairs that specifies the tags to associate with the job. A job can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * If the current status of the job is `USER_PAUSED`, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for `job-status` is `USER_PAUSED`.
     * 
     */
    @InputImport(name="userPausedDetails")
      private final @Nullable Input<List<ClassificationJobUserPausedDetailGetArgs>> userPausedDetails;

    public Input<List<ClassificationJobUserPausedDetailGetArgs>> getUserPausedDetails() {
        return this.userPausedDetails == null ? Input.empty() : this.userPausedDetails;
    }

    public ClassificationJobState(
        @Nullable Input<String> createdAt,
        @Nullable Input<List<String>> customDataIdentifierIds,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> initialRun,
        @Nullable Input<String> jobArn,
        @Nullable Input<String> jobId,
        @Nullable Input<String> jobStatus,
        @Nullable Input<String> jobType,
        @Nullable Input<String> name,
        @Nullable Input<String> namePrefix,
        @Nullable Input<ClassificationJobS3JobDefinitionGetArgs> s3JobDefinition,
        @Nullable Input<Integer> samplingPercentage,
        @Nullable Input<ClassificationJobScheduleFrequencyGetArgs> scheduleFrequency,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<List<ClassificationJobUserPausedDetailGetArgs>> userPausedDetails) {
        this.createdAt = createdAt;
        this.customDataIdentifierIds = customDataIdentifierIds;
        this.description = description;
        this.initialRun = initialRun;
        this.jobArn = jobArn;
        this.jobId = jobId;
        this.jobStatus = jobStatus;
        this.jobType = jobType;
        this.name = name;
        this.namePrefix = namePrefix;
        this.s3JobDefinition = s3JobDefinition;
        this.samplingPercentage = samplingPercentage;
        this.scheduleFrequency = scheduleFrequency;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.userPausedDetails = userPausedDetails;
    }

    private ClassificationJobState() {
        this.createdAt = Input.empty();
        this.customDataIdentifierIds = Input.empty();
        this.description = Input.empty();
        this.initialRun = Input.empty();
        this.jobArn = Input.empty();
        this.jobId = Input.empty();
        this.jobStatus = Input.empty();
        this.jobType = Input.empty();
        this.name = Input.empty();
        this.namePrefix = Input.empty();
        this.s3JobDefinition = Input.empty();
        this.samplingPercentage = Input.empty();
        this.scheduleFrequency = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.userPausedDetails = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClassificationJobState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> createdAt;
        private @Nullable Input<List<String>> customDataIdentifierIds;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> initialRun;
        private @Nullable Input<String> jobArn;
        private @Nullable Input<String> jobId;
        private @Nullable Input<String> jobStatus;
        private @Nullable Input<String> jobType;
        private @Nullable Input<String> name;
        private @Nullable Input<String> namePrefix;
        private @Nullable Input<ClassificationJobS3JobDefinitionGetArgs> s3JobDefinition;
        private @Nullable Input<Integer> samplingPercentage;
        private @Nullable Input<ClassificationJobScheduleFrequencyGetArgs> scheduleFrequency;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<List<ClassificationJobUserPausedDetailGetArgs>> userPausedDetails;

        public Builder() {
    	      // Empty
        }

        public Builder(ClassificationJobState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.customDataIdentifierIds = defaults.customDataIdentifierIds;
    	      this.description = defaults.description;
    	      this.initialRun = defaults.initialRun;
    	      this.jobArn = defaults.jobArn;
    	      this.jobId = defaults.jobId;
    	      this.jobStatus = defaults.jobStatus;
    	      this.jobType = defaults.jobType;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.s3JobDefinition = defaults.s3JobDefinition;
    	      this.samplingPercentage = defaults.samplingPercentage;
    	      this.scheduleFrequency = defaults.scheduleFrequency;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.userPausedDetails = defaults.userPausedDetails;
        }

        public Builder setCreatedAt(@Nullable Input<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder setCreatedAt(@Nullable String createdAt) {
            this.createdAt = Input.ofNullable(createdAt);
            return this;
        }

        public Builder setCustomDataIdentifierIds(@Nullable Input<List<String>> customDataIdentifierIds) {
            this.customDataIdentifierIds = customDataIdentifierIds;
            return this;
        }

        public Builder setCustomDataIdentifierIds(@Nullable List<String> customDataIdentifierIds) {
            this.customDataIdentifierIds = Input.ofNullable(customDataIdentifierIds);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setInitialRun(@Nullable Input<Boolean> initialRun) {
            this.initialRun = initialRun;
            return this;
        }

        public Builder setInitialRun(@Nullable Boolean initialRun) {
            this.initialRun = Input.ofNullable(initialRun);
            return this;
        }

        public Builder setJobArn(@Nullable Input<String> jobArn) {
            this.jobArn = jobArn;
            return this;
        }

        public Builder setJobArn(@Nullable String jobArn) {
            this.jobArn = Input.ofNullable(jobArn);
            return this;
        }

        public Builder setJobId(@Nullable Input<String> jobId) {
            this.jobId = jobId;
            return this;
        }

        public Builder setJobId(@Nullable String jobId) {
            this.jobId = Input.ofNullable(jobId);
            return this;
        }

        public Builder setJobStatus(@Nullable Input<String> jobStatus) {
            this.jobStatus = jobStatus;
            return this;
        }

        public Builder setJobStatus(@Nullable String jobStatus) {
            this.jobStatus = Input.ofNullable(jobStatus);
            return this;
        }

        public Builder setJobType(@Nullable Input<String> jobType) {
            this.jobType = jobType;
            return this;
        }

        public Builder setJobType(@Nullable String jobType) {
            this.jobType = Input.ofNullable(jobType);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNamePrefix(@Nullable Input<String> namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }

        public Builder setNamePrefix(@Nullable String namePrefix) {
            this.namePrefix = Input.ofNullable(namePrefix);
            return this;
        }

        public Builder setS3JobDefinition(@Nullable Input<ClassificationJobS3JobDefinitionGetArgs> s3JobDefinition) {
            this.s3JobDefinition = s3JobDefinition;
            return this;
        }

        public Builder setS3JobDefinition(@Nullable ClassificationJobS3JobDefinitionGetArgs s3JobDefinition) {
            this.s3JobDefinition = Input.ofNullable(s3JobDefinition);
            return this;
        }

        public Builder setSamplingPercentage(@Nullable Input<Integer> samplingPercentage) {
            this.samplingPercentage = samplingPercentage;
            return this;
        }

        public Builder setSamplingPercentage(@Nullable Integer samplingPercentage) {
            this.samplingPercentage = Input.ofNullable(samplingPercentage);
            return this;
        }

        public Builder setScheduleFrequency(@Nullable Input<ClassificationJobScheduleFrequencyGetArgs> scheduleFrequency) {
            this.scheduleFrequency = scheduleFrequency;
            return this;
        }

        public Builder setScheduleFrequency(@Nullable ClassificationJobScheduleFrequencyGetArgs scheduleFrequency) {
            this.scheduleFrequency = Input.ofNullable(scheduleFrequency);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setUserPausedDetails(@Nullable Input<List<ClassificationJobUserPausedDetailGetArgs>> userPausedDetails) {
            this.userPausedDetails = userPausedDetails;
            return this;
        }

        public Builder setUserPausedDetails(@Nullable List<ClassificationJobUserPausedDetailGetArgs> userPausedDetails) {
            this.userPausedDetails = Input.ofNullable(userPausedDetails);
            return this;
        }
        public ClassificationJobState build() {
            return new ClassificationJobState(createdAt, customDataIdentifierIds, description, initialRun, jobArn, jobId, jobStatus, jobType, name, namePrefix, s3JobDefinition, samplingPercentage, scheduleFrequency, tags, tagsAll, userPausedDetails);
        }
    }
}
