// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.cloudwatch.DashboardArgs;
import io.pulumi.aws.cloudwatch.inputs.DashboardState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a CloudWatch Dashboard resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const main = new aws.cloudwatch.Dashboard("main", {
 *     dashboardBody: `{
 *   "widgets": [
 *     {
 *       "type": "metric",
 *       "x": 0,
 *       "y": 0,
 *       "width": 12,
 *       "height": 6,
 *       "properties": {
 *         "metrics": [
 *           [
 *             "AWS/EC2",
 *             "CPUUtilization",
 *             "InstanceId",
 *             "i-012345"
 *           ]
 *         ],
 *         "period": 300,
 *         "stat": "Average",
 *         "region": "us-east-1",
 *         "title": "EC2 Instance CPU"
 *       }
 *     },
 *     {
 *       "type": "text",
 *       "x": 0,
 *       "y": 7,
 *       "width": 3,
 *       "height": 3,
 *       "properties": {
 *         "markdown": "Hello world"
 *       }
 *     }
 *   ]
 * }
 * `,
 *     dashboardName: "my-dashboard",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * main = aws.cloudwatch.Dashboard("main",
 *     dashboard_body="""{
 *   "widgets": [
 *     {
 *       "type": "metric",
 *       "x": 0,
 *       "y": 0,
 *       "width": 12,
 *       "height": 6,
 *       "properties": {
 *         "metrics": [
 *           [
 *             "AWS/EC2",
 *             "CPUUtilization",
 *             "InstanceId",
 *             "i-012345"
 *           ]
 *         ],
 *         "period": 300,
 *         "stat": "Average",
 *         "region": "us-east-1",
 *         "title": "EC2 Instance CPU"
 *       }
 *     },
 *     {
 *       "type": "text",
 *       "x": 0,
 *       "y": 7,
 *       "width": 3,
 *       "height": 3,
 *       "properties": {
 *         "markdown": "Hello world"
 *       }
 *     }
 *   ]
 * }
 * 
 * """,
 *     dashboard_name="my-dashboard")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var main = new Aws.CloudWatch.Dashboard("main", new Aws.CloudWatch.DashboardArgs
 *         {
 *             DashboardBody = @"{
 *   ""widgets"": [
 *     {
 *       ""type"": ""metric"",
 *       ""x"": 0,
 *       ""y"": 0,
 *       ""width"": 12,
 *       ""height"": 6,
 *       ""properties"": {
 *         ""metrics"": [
 *           [
 *             ""AWS/EC2"",
 *             ""CPUUtilization"",
 *             ""InstanceId"",
 *             ""i-012345""
 *           ]
 *         ],
 *         ""period"": 300,
 *         ""stat"": ""Average"",
 *         ""region"": ""us-east-1"",
 *         ""title"": ""EC2 Instance CPU""
 *       }
 *     },
 *     {
 *       ""type"": ""text"",
 *       ""x"": 0,
 *       ""y"": 7,
 *       ""width"": 3,
 *       ""height"": 3,
 *       ""properties"": {
 *         ""markdown"": ""Hello world""
 *       }
 *     }
 *   ]
 * }
 * 
 * ",
 *             DashboardName = "my-dashboard",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudwatch.NewDashboard(ctx, "main", &cloudwatch.DashboardArgs{
 * 			DashboardBody: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"widgets\": [\n", "    {\n", "      \"type\": \"metric\",\n", "      \"x\": 0,\n", "      \"y\": 0,\n", "      \"width\": 12,\n", "      \"height\": 6,\n", "      \"properties\": {\n", "        \"metrics\": [\n", "          [\n", "            \"AWS/EC2\",\n", "            \"CPUUtilization\",\n", "            \"InstanceId\",\n", "            \"i-012345\"\n", "          ]\n", "        ],\n", "        \"period\": 300,\n", "        \"stat\": \"Average\",\n", "        \"region\": \"us-east-1\",\n", "        \"title\": \"EC2 Instance CPU\"\n", "      }\n", "    },\n", "    {\n", "      \"type\": \"text\",\n", "      \"x\": 0,\n", "      \"y\": 7,\n", "      \"width\": 3,\n", "      \"height\": 3,\n", "      \"properties\": {\n", "        \"markdown\": \"Hello world\"\n", "      }\n", "    }\n", "  ]\n", "}\n", "\n")),
 * 			DashboardName: pulumi.String("my-dashboard"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * CloudWatch dashboards can be imported using the `dashboard_name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:cloudwatch/dashboard:Dashboard sample <dashboard_name>
 * ```
 * 
 *  
 */
@ResourceType(type="aws:cloudwatch/dashboard:Dashboard")
public class Dashboard extends io.pulumi.resources.CustomResource {
    /**
     * The Amazon Resource Name (ARN) of the dashboard.
     * 
     */
    @Export(name="dashboardArn", type=String.class, parameters={})
    private Output<String> dashboardArn;

    /**
     * @return The Amazon Resource Name (ARN) of the dashboard.
     * 
     */
    public Output<String> getDashboardArn() {
        return this.dashboardArn;
    }
    /**
     * The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     * 
     */
    @Export(name="dashboardBody", type=String.class, parameters={})
    private Output<String> dashboardBody;

    /**
     * @return The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     * 
     */
    public Output<String> getDashboardBody() {
        return this.dashboardBody;
    }
    /**
     * The name of the dashboard.
     * 
     */
    @Export(name="dashboardName", type=String.class, parameters={})
    private Output<String> dashboardName;

    /**
     * @return The name of the dashboard.
     * 
     */
    public Output<String> getDashboardName() {
        return this.dashboardName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(String name, DashboardArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/dashboard:Dashboard", name, args == null ? DashboardArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Dashboard(String name, Output<String> id, @Nullable DashboardState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/dashboard:Dashboard", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(String name, Output<String> id, @Nullable DashboardState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
