// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudformation;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.cloudformation.StackSetInstanceArgs;
import io.pulumi.aws.cloudformation.inputs.StackSetInstanceState;
import io.pulumi.aws.cloudformation.outputs.StackSetInstanceDeploymentTargets;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Manages a CloudFormation StackSet Instance. Instances are managed in the account and region of the StackSet after the target account permissions have been configured. Additional information about StackSets can be found in the [AWS CloudFormation User Guide](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/what-is-cfnstacksets.html).
 * 
 * > **NOTE:** All target accounts must have an IAM Role created that matches the name of the execution role configured in the StackSet (the `execution_role_name` argument in the `aws.cloudformation.StackSet` resource) in a trust relationship with the administrative account or administration IAM Role. The execution role must have appropriate permissions to manage resources defined in the template along with those required for StackSets to operate. See the [AWS CloudFormation User Guide](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html) for more details.
 * 
 * > **NOTE:** To retain the Stack during resource destroy, ensure `retain_stack` has been set to `true` in the state first. This must be completed _before_ a deployment that would destroy the resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.cloudformation.StackSetInstance("example", {
 *     accountId: "123456789012",
 *     region: "us-east-1",
 *     stackSetName: aws_cloudformation_stack_set.example.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.cloudformation.StackSetInstance("example",
 *     account_id="123456789012",
 *     region="us-east-1",
 *     stack_set_name=aws_cloudformation_stack_set["example"]["name"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.CloudFormation.StackSetInstance("example", new Aws.CloudFormation.StackSetInstanceArgs
 *         {
 *             AccountId = "123456789012",
 *             Region = "us-east-1",
 *             StackSetName = aws_cloudformation_stack_set.Example.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudformation"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudformation.NewStackSetInstance(ctx, "example", &cloudformation.StackSetInstanceArgs{
 * 			AccountId:    pulumi.String("123456789012"),
 * 			Region:       pulumi.String("us-east-1"),
 * 			StackSetName: pulumi.Any(aws_cloudformation_stack_set.Example.Name),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example IAM Setup in Target Account
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         effect: "Allow",
 *         principals: [{
 *             identifiers: [aws_iam_role.AWSCloudFormationStackSetAdministrationRole.arn],
 *             type: "AWS",
 *         }],
 *     }],
 * });
 * const aWSCloudFormationStackSetExecutionRole = new aws.iam.Role("aWSCloudFormationStackSetExecutionRole", {assumeRolePolicy: aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy.then(aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy => aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy.json)});
 * const aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyPolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: [
 *             "cloudformation:*",
 *             "s3:*",
 *             "sns:*",
 *         ],
 *         effect: "Allow",
 *         resources: ["*"],
 *     }],
 * });
 * const aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyRolePolicy = new aws.iam.RolePolicy("aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyRolePolicy", {
 *     policy: aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyPolicyDocument.then(aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyPolicyDocument => aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyPolicyDocument.json),
 *     role: aWSCloudFormationStackSetExecutionRole.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * a_ws_cloud_formation_stack_set_execution_role_assume_role_policy = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     actions=["sts:AssumeRole"],
 *     effect="Allow",
 *     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *         identifiers=[aws_iam_role["AWSCloudFormationStackSetAdministrationRole"]["arn"]],
 *         type="AWS",
 *     )],
 * )])
 * a_ws_cloud_formation_stack_set_execution_role = aws.iam.Role("aWSCloudFormationStackSetExecutionRole", assume_role_policy=a_ws_cloud_formation_stack_set_execution_role_assume_role_policy.json)
 * a_ws_cloud_formation_stack_set_execution_role_minimum_execution_policy_policy_document = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     actions=[
 *         "cloudformation:*",
 *         "s3:*",
 *         "sns:*",
 *     ],
 *     effect="Allow",
 *     resources=["*"],
 * )])
 * a_ws_cloud_formation_stack_set_execution_role_minimum_execution_policy_role_policy = aws.iam.RolePolicy("aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyRolePolicy",
 *     policy=a_ws_cloud_formation_stack_set_execution_role_minimum_execution_policy_policy_document.json,
 *     role=a_ws_cloud_formation_stack_set_execution_role.name)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Actions = 
 *                     {
 *                         "sts:AssumeRole",
 *                     },
 *                     Effect = "Allow",
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                         {
 *                             Identifiers = 
 *                             {
 *                                 aws_iam_role.AWSCloudFormationStackSetAdministrationRole.Arn,
 *                             },
 *                             Type = "AWS",
 *                         },
 *                     },
 *                 },
 *             },
 *         }));
 *         var aWSCloudFormationStackSetExecutionRole = new Aws.Iam.Role("aWSCloudFormationStackSetExecutionRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy.Apply(aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy => aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy.Json),
 *         });
 *         var aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyPolicyDocument = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Actions = 
 *                     {
 *                         "cloudformation:*",
 *                         "s3:*",
 *                         "sns:*",
 *                     },
 *                     Effect = "Allow",
 *                     Resources = 
 *                     {
 *                         "*",
 *                     },
 *                 },
 *             },
 *         }));
 *         var aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyRolePolicy = new Aws.Iam.RolePolicy("aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyRolePolicy", new Aws.Iam.RolePolicyArgs
 *         {
 *             Policy = aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyPolicyDocument.Apply(aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyPolicyDocument => aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyPolicyDocument.Json),
 *             Role = aWSCloudFormationStackSetExecutionRole.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Example Deployment across Organizations account
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.cloudformation.StackSetInstance("example", {
 *     deploymentTargets: {
 *         organizationalUnitIds: [aws_organizations_organization.example.roots[0].id],
 *     },
 *     region: "us-east-1",
 *     stackSetName: aws_cloudformation_stack_set.example.name,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.cloudformation.StackSetInstance("example",
 *     deployment_targets=aws.cloudformation.StackSetInstanceDeploymentTargetsArgs(
 *         organizational_unit_ids=[aws_organizations_organization["example"]["roots"][0]["id"]],
 *     ),
 *     region="us-east-1",
 *     stack_set_name=aws_cloudformation_stack_set["example"]["name"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.CloudFormation.StackSetInstance("example", new Aws.CloudFormation.StackSetInstanceArgs
 *         {
 *             DeploymentTargets = new Aws.CloudFormation.Inputs.StackSetInstanceDeploymentTargetsArgs
 *             {
 *                 OrganizationalUnitIds = 
 *                 {
 *                     aws_organizations_organization.Example.Roots[0].Id,
 *                 },
 *             },
 *             Region = "us-east-1",
 *             StackSetName = aws_cloudformation_stack_set.Example.Name,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudformation"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := cloudformation.NewStackSetInstance(ctx, "example", &cloudformation.StackSetInstanceArgs{
 * 			DeploymentTargets: &cloudformation.StackSetInstanceDeploymentTargetsArgs{
 * 				OrganizationalUnitIds: pulumi.StringArray{
 * 					pulumi.Any(aws_organizations_organization.Example.Roots[0].Id),
 * 				},
 * 			},
 * 			Region:       pulumi.String("us-east-1"),
 * 			StackSetName: pulumi.Any(aws_cloudformation_stack_set.Example.Name),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * CloudFormation StackSet Instances can be imported using the StackSet name, target AWS account ID, and target AWS region separated by commas (`,`) e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:cloudformation/stackSetInstance:StackSetInstance example example,123456789012,us-east-1
 * ```
 * 
 *  
 */
@ResourceType(type="aws:cloudformation/stackSetInstance:StackSetInstance")
public class StackSetInstance extends io.pulumi.resources.CustomResource {
    /**
     * Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
     * 
     */
    @Export(name="accountId", type=String.class, parameters={})
    private Output<String> accountId;

    /**
     * @return Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
     * 
     */
    public Output<String> getAccountId() {
        return this.accountId;
    }
    /**
     * The AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.
     * 
     */
    @Export(name="deploymentTargets", type=StackSetInstanceDeploymentTargets.class, parameters={})
    private Output</* @Nullable */ StackSetInstanceDeploymentTargets> deploymentTargets;

    /**
     * @return The AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.
     * 
     */
    public Output</* @Nullable */ StackSetInstanceDeploymentTargets> getDeploymentTargets() {
        return this.deploymentTargets;
    }
    /**
     * The organization root ID or organizational unit (OU) IDs specified for `deployment_targets`.
     * 
     */
    @Export(name="organizationalUnitId", type=String.class, parameters={})
    private Output<String> organizationalUnitId;

    /**
     * @return The organization root ID or organizational unit (OU) IDs specified for `deployment_targets`.
     * 
     */
    public Output<String> getOrganizationalUnitId() {
        return this.organizationalUnitId;
    }
    /**
     * Key-value map of input parameters to override from the StackSet for this Instance.
     * 
     */
    @Export(name="parameterOverrides", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> parameterOverrides;

    /**
     * @return Key-value map of input parameters to override from the StackSet for this Instance.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getParameterOverrides() {
        return this.parameterOverrides;
    }
    /**
     * Target AWS Region to create a Stack based on the StackSet. Defaults to current region.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return Target AWS Region to create a Stack based on the StackSet. Defaults to current region.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * During resource destroy, remove Instance from StackSet while keeping the Stack and its associated resources. Must be enabled in the state _before_ destroy operation to take effect. You cannot reassociate a retained Stack or add an existing, saved Stack to a new StackSet. Defaults to `false`.
     * 
     */
    @Export(name="retainStack", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> retainStack;

    /**
     * @return During resource destroy, remove Instance from StackSet while keeping the Stack and its associated resources. Must be enabled in the state _before_ destroy operation to take effect. You cannot reassociate a retained Stack or add an existing, saved Stack to a new StackSet. Defaults to `false`.
     * 
     */
    public Output</* @Nullable */ Boolean> getRetainStack() {
        return this.retainStack;
    }
    /**
     * Stack identifier
     * 
     */
    @Export(name="stackId", type=String.class, parameters={})
    private Output<String> stackId;

    /**
     * @return Stack identifier
     * 
     */
    public Output<String> getStackId() {
        return this.stackId;
    }
    /**
     * Name of the StackSet.
     * 
     */
    @Export(name="stackSetName", type=String.class, parameters={})
    private Output<String> stackSetName;

    /**
     * @return Name of the StackSet.
     * 
     */
    public Output<String> getStackSetName() {
        return this.stackSetName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public StackSetInstance(String name) {
        this(name, StackSetInstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public StackSetInstance(String name, StackSetInstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public StackSetInstance(String name, StackSetInstanceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudformation/stackSetInstance:StackSetInstance", name, args == null ? StackSetInstanceArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private StackSetInstance(String name, Output<String> id, @Nullable StackSetInstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudformation/stackSetInstance:StackSetInstance", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static StackSetInstance get(String name, Output<String> id, @Nullable StackSetInstanceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new StackSetInstance(name, id, state, options);
    }
}
