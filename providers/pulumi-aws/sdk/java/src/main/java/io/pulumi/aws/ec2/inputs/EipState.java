// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EipState extends io.pulumi.resources.ResourceArgs {

    public static final EipState Empty = new EipState();

    /**
     * IP address from an EC2 BYOIP pool. This option is only available for VPC EIPs.
     * 
     */
    @InputImport(name="address")
      private final @Nullable Input<String> address;

    public Input<String> getAddress() {
        return this.address == null ? Input.empty() : this.address;
    }

    /**
     * ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.
     * 
     */
    @InputImport(name="allocationId")
      private final @Nullable Input<String> allocationId;

    public Input<String> getAllocationId() {
        return this.allocationId == null ? Input.empty() : this.allocationId;
    }

    /**
     * User-specified primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
     * 
     */
    @InputImport(name="associateWithPrivateIp")
      private final @Nullable Input<String> associateWithPrivateIp;

    public Input<String> getAssociateWithPrivateIp() {
        return this.associateWithPrivateIp == null ? Input.empty() : this.associateWithPrivateIp;
    }

    /**
     * ID representing the association of the address with an instance in a VPC.
     * 
     */
    @InputImport(name="associationId")
      private final @Nullable Input<String> associationId;

    public Input<String> getAssociationId() {
        return this.associationId == null ? Input.empty() : this.associationId;
    }

    /**
     * Carrier IP address.
     * 
     */
    @InputImport(name="carrierIp")
      private final @Nullable Input<String> carrierIp;

    public Input<String> getCarrierIp() {
        return this.carrierIp == null ? Input.empty() : this.carrierIp;
    }

    /**
     * Customer owned IP.
     * 
     */
    @InputImport(name="customerOwnedIp")
      private final @Nullable Input<String> customerOwnedIp;

    public Input<String> getCustomerOwnedIp() {
        return this.customerOwnedIp == null ? Input.empty() : this.customerOwnedIp;
    }

    /**
     * ID  of a customer-owned address pool. For more on customer owned IP addressed check out [Customer-owned IP addresses guide](https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing).
     * 
     */
    @InputImport(name="customerOwnedIpv4Pool")
      private final @Nullable Input<String> customerOwnedIpv4Pool;

    public Input<String> getCustomerOwnedIpv4Pool() {
        return this.customerOwnedIpv4Pool == null ? Input.empty() : this.customerOwnedIpv4Pool;
    }

    /**
     * Indicates if this EIP is for use in VPC (`vpc`) or EC2 Classic (`standard`).
     * 
     */
    @InputImport(name="domain")
      private final @Nullable Input<String> domain;

    public Input<String> getDomain() {
        return this.domain == null ? Input.empty() : this.domain;
    }

    /**
     * EC2 instance ID.
     * 
     */
    @InputImport(name="instance")
      private final @Nullable Input<String> instance;

    public Input<String> getInstance() {
        return this.instance == null ? Input.empty() : this.instance;
    }

    /**
     * Location from which the IP address is advertised. Use this parameter to limit the address to this location.
     * 
     */
    @InputImport(name="networkBorderGroup")
      private final @Nullable Input<String> networkBorderGroup;

    public Input<String> getNetworkBorderGroup() {
        return this.networkBorderGroup == null ? Input.empty() : this.networkBorderGroup;
    }

    /**
     * Network interface ID to associate with.
     * 
     */
    @InputImport(name="networkInterface")
      private final @Nullable Input<String> networkInterface;

    public Input<String> getNetworkInterface() {
        return this.networkInterface == null ? Input.empty() : this.networkInterface;
    }

    /**
     * The Private DNS associated with the Elastic IP address (if in VPC).
     * 
     */
    @InputImport(name="privateDns")
      private final @Nullable Input<String> privateDns;

    public Input<String> getPrivateDns() {
        return this.privateDns == null ? Input.empty() : this.privateDns;
    }

    /**
     * Contains the private IP address (if in VPC).
     * 
     */
    @InputImport(name="privateIp")
      private final @Nullable Input<String> privateIp;

    public Input<String> getPrivateIp() {
        return this.privateIp == null ? Input.empty() : this.privateIp;
    }

    /**
     * Public DNS associated with the Elastic IP address.
     * 
     */
    @InputImport(name="publicDns")
      private final @Nullable Input<String> publicDns;

    public Input<String> getPublicDns() {
        return this.publicDns == null ? Input.empty() : this.publicDns;
    }

    /**
     * Contains the public IP address.
     * 
     */
    @InputImport(name="publicIp")
      private final @Nullable Input<String> publicIp;

    public Input<String> getPublicIp() {
        return this.publicIp == null ? Input.empty() : this.publicIp;
    }

    /**
     * EC2 IPv4 address pool identifier or `amazon`. This option is only available for VPC EIPs.
     * 
     */
    @InputImport(name="publicIpv4Pool")
      private final @Nullable Input<String> publicIpv4Pool;

    public Input<String> getPublicIpv4Pool() {
        return this.publicIpv4Pool == null ? Input.empty() : this.publicIpv4Pool;
    }

    /**
     * Map of tags to assign to the resource. Tags can only be applied to EIPs in a VPC. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Boolean if the EIP is in a VPC or not.
     * 
     */
    @InputImport(name="vpc")
      private final @Nullable Input<Boolean> vpc;

    public Input<Boolean> getVpc() {
        return this.vpc == null ? Input.empty() : this.vpc;
    }

    public EipState(
        @Nullable Input<String> address,
        @Nullable Input<String> allocationId,
        @Nullable Input<String> associateWithPrivateIp,
        @Nullable Input<String> associationId,
        @Nullable Input<String> carrierIp,
        @Nullable Input<String> customerOwnedIp,
        @Nullable Input<String> customerOwnedIpv4Pool,
        @Nullable Input<String> domain,
        @Nullable Input<String> instance,
        @Nullable Input<String> networkBorderGroup,
        @Nullable Input<String> networkInterface,
        @Nullable Input<String> privateDns,
        @Nullable Input<String> privateIp,
        @Nullable Input<String> publicDns,
        @Nullable Input<String> publicIp,
        @Nullable Input<String> publicIpv4Pool,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<Boolean> vpc) {
        this.address = address;
        this.allocationId = allocationId;
        this.associateWithPrivateIp = associateWithPrivateIp;
        this.associationId = associationId;
        this.carrierIp = carrierIp;
        this.customerOwnedIp = customerOwnedIp;
        this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
        this.domain = domain;
        this.instance = instance;
        this.networkBorderGroup = networkBorderGroup;
        this.networkInterface = networkInterface;
        this.privateDns = privateDns;
        this.privateIp = privateIp;
        this.publicDns = publicDns;
        this.publicIp = publicIp;
        this.publicIpv4Pool = publicIpv4Pool;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpc = vpc;
    }

    private EipState() {
        this.address = Input.empty();
        this.allocationId = Input.empty();
        this.associateWithPrivateIp = Input.empty();
        this.associationId = Input.empty();
        this.carrierIp = Input.empty();
        this.customerOwnedIp = Input.empty();
        this.customerOwnedIpv4Pool = Input.empty();
        this.domain = Input.empty();
        this.instance = Input.empty();
        this.networkBorderGroup = Input.empty();
        this.networkInterface = Input.empty();
        this.privateDns = Input.empty();
        this.privateIp = Input.empty();
        this.publicDns = Input.empty();
        this.publicIp = Input.empty();
        this.publicIpv4Pool = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.vpc = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EipState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> address;
        private @Nullable Input<String> allocationId;
        private @Nullable Input<String> associateWithPrivateIp;
        private @Nullable Input<String> associationId;
        private @Nullable Input<String> carrierIp;
        private @Nullable Input<String> customerOwnedIp;
        private @Nullable Input<String> customerOwnedIpv4Pool;
        private @Nullable Input<String> domain;
        private @Nullable Input<String> instance;
        private @Nullable Input<String> networkBorderGroup;
        private @Nullable Input<String> networkInterface;
        private @Nullable Input<String> privateDns;
        private @Nullable Input<String> privateIp;
        private @Nullable Input<String> publicDns;
        private @Nullable Input<String> publicIp;
        private @Nullable Input<String> publicIpv4Pool;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<Boolean> vpc;

        public Builder() {
    	      // Empty
        }

        public Builder(EipState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.allocationId = defaults.allocationId;
    	      this.associateWithPrivateIp = defaults.associateWithPrivateIp;
    	      this.associationId = defaults.associationId;
    	      this.carrierIp = defaults.carrierIp;
    	      this.customerOwnedIp = defaults.customerOwnedIp;
    	      this.customerOwnedIpv4Pool = defaults.customerOwnedIpv4Pool;
    	      this.domain = defaults.domain;
    	      this.instance = defaults.instance;
    	      this.networkBorderGroup = defaults.networkBorderGroup;
    	      this.networkInterface = defaults.networkInterface;
    	      this.privateDns = defaults.privateDns;
    	      this.privateIp = defaults.privateIp;
    	      this.publicDns = defaults.publicDns;
    	      this.publicIp = defaults.publicIp;
    	      this.publicIpv4Pool = defaults.publicIpv4Pool;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpc = defaults.vpc;
        }

        public Builder setAddress(@Nullable Input<String> address) {
            this.address = address;
            return this;
        }

        public Builder setAddress(@Nullable String address) {
            this.address = Input.ofNullable(address);
            return this;
        }

        public Builder setAllocationId(@Nullable Input<String> allocationId) {
            this.allocationId = allocationId;
            return this;
        }

        public Builder setAllocationId(@Nullable String allocationId) {
            this.allocationId = Input.ofNullable(allocationId);
            return this;
        }

        public Builder setAssociateWithPrivateIp(@Nullable Input<String> associateWithPrivateIp) {
            this.associateWithPrivateIp = associateWithPrivateIp;
            return this;
        }

        public Builder setAssociateWithPrivateIp(@Nullable String associateWithPrivateIp) {
            this.associateWithPrivateIp = Input.ofNullable(associateWithPrivateIp);
            return this;
        }

        public Builder setAssociationId(@Nullable Input<String> associationId) {
            this.associationId = associationId;
            return this;
        }

        public Builder setAssociationId(@Nullable String associationId) {
            this.associationId = Input.ofNullable(associationId);
            return this;
        }

        public Builder setCarrierIp(@Nullable Input<String> carrierIp) {
            this.carrierIp = carrierIp;
            return this;
        }

        public Builder setCarrierIp(@Nullable String carrierIp) {
            this.carrierIp = Input.ofNullable(carrierIp);
            return this;
        }

        public Builder setCustomerOwnedIp(@Nullable Input<String> customerOwnedIp) {
            this.customerOwnedIp = customerOwnedIp;
            return this;
        }

        public Builder setCustomerOwnedIp(@Nullable String customerOwnedIp) {
            this.customerOwnedIp = Input.ofNullable(customerOwnedIp);
            return this;
        }

        public Builder setCustomerOwnedIpv4Pool(@Nullable Input<String> customerOwnedIpv4Pool) {
            this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
            return this;
        }

        public Builder setCustomerOwnedIpv4Pool(@Nullable String customerOwnedIpv4Pool) {
            this.customerOwnedIpv4Pool = Input.ofNullable(customerOwnedIpv4Pool);
            return this;
        }

        public Builder setDomain(@Nullable Input<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder setDomain(@Nullable String domain) {
            this.domain = Input.ofNullable(domain);
            return this;
        }

        public Builder setInstance(@Nullable Input<String> instance) {
            this.instance = instance;
            return this;
        }

        public Builder setInstance(@Nullable String instance) {
            this.instance = Input.ofNullable(instance);
            return this;
        }

        public Builder setNetworkBorderGroup(@Nullable Input<String> networkBorderGroup) {
            this.networkBorderGroup = networkBorderGroup;
            return this;
        }

        public Builder setNetworkBorderGroup(@Nullable String networkBorderGroup) {
            this.networkBorderGroup = Input.ofNullable(networkBorderGroup);
            return this;
        }

        public Builder setNetworkInterface(@Nullable Input<String> networkInterface) {
            this.networkInterface = networkInterface;
            return this;
        }

        public Builder setNetworkInterface(@Nullable String networkInterface) {
            this.networkInterface = Input.ofNullable(networkInterface);
            return this;
        }

        public Builder setPrivateDns(@Nullable Input<String> privateDns) {
            this.privateDns = privateDns;
            return this;
        }

        public Builder setPrivateDns(@Nullable String privateDns) {
            this.privateDns = Input.ofNullable(privateDns);
            return this;
        }

        public Builder setPrivateIp(@Nullable Input<String> privateIp) {
            this.privateIp = privateIp;
            return this;
        }

        public Builder setPrivateIp(@Nullable String privateIp) {
            this.privateIp = Input.ofNullable(privateIp);
            return this;
        }

        public Builder setPublicDns(@Nullable Input<String> publicDns) {
            this.publicDns = publicDns;
            return this;
        }

        public Builder setPublicDns(@Nullable String publicDns) {
            this.publicDns = Input.ofNullable(publicDns);
            return this;
        }

        public Builder setPublicIp(@Nullable Input<String> publicIp) {
            this.publicIp = publicIp;
            return this;
        }

        public Builder setPublicIp(@Nullable String publicIp) {
            this.publicIp = Input.ofNullable(publicIp);
            return this;
        }

        public Builder setPublicIpv4Pool(@Nullable Input<String> publicIpv4Pool) {
            this.publicIpv4Pool = publicIpv4Pool;
            return this;
        }

        public Builder setPublicIpv4Pool(@Nullable String publicIpv4Pool) {
            this.publicIpv4Pool = Input.ofNullable(publicIpv4Pool);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setVpc(@Nullable Input<Boolean> vpc) {
            this.vpc = vpc;
            return this;
        }

        public Builder setVpc(@Nullable Boolean vpc) {
            this.vpc = Input.ofNullable(vpc);
            return this;
        }
        public EipState build() {
            return new EipState(address, allocationId, associateWithPrivateIp, associationId, carrierIp, customerOwnedIp, customerOwnedIpv4Pool, domain, instance, networkBorderGroup, networkInterface, privateDns, privateIp, publicDns, publicIp, publicIpv4Pool, tags, tagsAll, vpc);
        }
    }
}
