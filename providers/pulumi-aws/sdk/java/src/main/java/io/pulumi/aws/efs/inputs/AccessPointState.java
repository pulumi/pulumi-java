// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.efs.inputs;

import io.pulumi.aws.efs.inputs.AccessPointPosixUserGetArgs;
import io.pulumi.aws.efs.inputs.AccessPointRootDirectoryGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AccessPointState extends io.pulumi.resources.ResourceArgs {

    public static final AccessPointState Empty = new AccessPointState();

    /**
     * ARN of the access point.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * ARN of the file system.
     * 
     */
    @InputImport(name="fileSystemArn")
      private final @Nullable Output<String> fileSystemArn;

    public Output<String> getFileSystemArn() {
        return this.fileSystemArn == null ? Output.empty() : this.fileSystemArn;
    }

    /**
     * ID of the file system for which the access point is intended.
     * 
     */
    @InputImport(name="fileSystemId")
      private final @Nullable Output<String> fileSystemId;

    public Output<String> getFileSystemId() {
        return this.fileSystemId == null ? Output.empty() : this.fileSystemId;
    }

    @InputImport(name="ownerId")
      private final @Nullable Output<String> ownerId;

    public Output<String> getOwnerId() {
        return this.ownerId == null ? Output.empty() : this.ownerId;
    }

    /**
     * Operating system user and group applied to all file system requests made using the access point. Detailed below.
     * 
     */
    @InputImport(name="posixUser")
      private final @Nullable Output<AccessPointPosixUserGetArgs> posixUser;

    public Output<AccessPointPosixUserGetArgs> getPosixUser() {
        return this.posixUser == null ? Output.empty() : this.posixUser;
    }

    /**
     * Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
     * 
     */
    @InputImport(name="rootDirectory")
      private final @Nullable Output<AccessPointRootDirectoryGetArgs> rootDirectory;

    public Output<AccessPointRootDirectoryGetArgs> getRootDirectory() {
        return this.rootDirectory == null ? Output.empty() : this.rootDirectory;
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    @InputImport(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    public AccessPointState(
        @Nullable Output<String> arn,
        @Nullable Output<String> fileSystemArn,
        @Nullable Output<String> fileSystemId,
        @Nullable Output<String> ownerId,
        @Nullable Output<AccessPointPosixUserGetArgs> posixUser,
        @Nullable Output<AccessPointRootDirectoryGetArgs> rootDirectory,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.fileSystemArn = fileSystemArn;
        this.fileSystemId = fileSystemId;
        this.ownerId = ownerId;
        this.posixUser = posixUser;
        this.rootDirectory = rootDirectory;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private AccessPointState() {
        this.arn = Output.empty();
        this.fileSystemArn = Output.empty();
        this.fileSystemId = Output.empty();
        this.ownerId = Output.empty();
        this.posixUser = Output.empty();
        this.rootDirectory = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessPointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> fileSystemArn;
        private @Nullable Output<String> fileSystemId;
        private @Nullable Output<String> ownerId;
        private @Nullable Output<AccessPointPosixUserGetArgs> posixUser;
        private @Nullable Output<AccessPointRootDirectoryGetArgs> rootDirectory;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(AccessPointState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.fileSystemArn = defaults.fileSystemArn;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.ownerId = defaults.ownerId;
    	      this.posixUser = defaults.posixUser;
    	      this.rootDirectory = defaults.rootDirectory;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }

        public Builder fileSystemArn(@Nullable Output<String> fileSystemArn) {
            this.fileSystemArn = fileSystemArn;
            return this;
        }

        public Builder fileSystemArn(@Nullable String fileSystemArn) {
            this.fileSystemArn = Output.ofNullable(fileSystemArn);
            return this;
        }

        public Builder fileSystemId(@Nullable Output<String> fileSystemId) {
            this.fileSystemId = fileSystemId;
            return this;
        }

        public Builder fileSystemId(@Nullable String fileSystemId) {
            this.fileSystemId = Output.ofNullable(fileSystemId);
            return this;
        }

        public Builder ownerId(@Nullable Output<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = Output.ofNullable(ownerId);
            return this;
        }

        public Builder posixUser(@Nullable Output<AccessPointPosixUserGetArgs> posixUser) {
            this.posixUser = posixUser;
            return this;
        }

        public Builder posixUser(@Nullable AccessPointPosixUserGetArgs posixUser) {
            this.posixUser = Output.ofNullable(posixUser);
            return this;
        }

        public Builder rootDirectory(@Nullable Output<AccessPointRootDirectoryGetArgs> rootDirectory) {
            this.rootDirectory = rootDirectory;
            return this;
        }

        public Builder rootDirectory(@Nullable AccessPointRootDirectoryGetArgs rootDirectory) {
            this.rootDirectory = Output.ofNullable(rootDirectory);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }
        public AccessPointState build() {
            return new AccessPointState(arn, fileSystemArn, fileSystemId, ownerId, posixUser, rootDirectory, tags, tagsAll);
        }
    }
}
