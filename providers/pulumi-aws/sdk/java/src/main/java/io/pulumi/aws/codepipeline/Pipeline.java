// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codepipeline;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.codepipeline.PipelineArgs;
import io.pulumi.aws.codepipeline.inputs.PipelineState;
import io.pulumi.aws.codepipeline.outputs.PipelineArtifactStore;
import io.pulumi.aws.codepipeline.outputs.PipelineStage;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a CodePipeline.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.codestarconnections.Connection("example", {providerType: "GitHub"});
 * const codepipelineBucket = new aws.s3.Bucket("codepipelineBucket", {acl: "private"});
 * const codepipelineRole = new aws.iam.Role("codepipelineRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "codepipeline.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `});
 * const s3kmskey = aws.kms.getAlias({
 *     name: "alias/myKmsKey",
 * });
 * const codepipeline = new aws.codepipeline.Pipeline("codepipeline", {
 *     roleArn: codepipelineRole.arn,
 *     artifactStore: {
 *         location: codepipelineBucket.bucket,
 *         type: "S3",
 *         encryptionKey: {
 *             id: s3kmskey.then(s3kmskey => s3kmskey.arn),
 *             type: "KMS",
 *         },
 *     },
 *     stages: [
 *         {
 *             name: "Source",
 *             actions: [{
 *                 name: "Source",
 *                 category: "Source",
 *                 owner: "AWS",
 *                 provider: "CodeStarSourceConnection",
 *                 version: "1",
 *                 outputArtifacts: ["source_output"],
 *                 configuration: {
 *                     ConnectionArn: example.arn,
 *                     FullRepositoryId: "my-organization/example",
 *                     BranchName: "main",
 *                 },
 *             }],
 *         },
 *         {
 *             name: "Build",
 *             actions: [{
 *                 name: "Build",
 *                 category: "Build",
 *                 owner: "AWS",
 *                 provider: "CodeBuild",
 *                 inputArtifacts: ["source_output"],
 *                 outputArtifacts: ["build_output"],
 *                 version: "1",
 *                 configuration: {
 *                     ProjectName: "test",
 *                 },
 *             }],
 *         },
 *         {
 *             name: "Deploy",
 *             actions: [{
 *                 name: "Deploy",
 *                 category: "Deploy",
 *                 owner: "AWS",
 *                 provider: "CloudFormation",
 *                 inputArtifacts: ["build_output"],
 *                 version: "1",
 *                 configuration: {
 *                     ActionMode: "REPLACE_ON_FAILURE",
 *                     Capabilities: "CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM",
 *                     OutputFileName: "CreateStackOutput.json",
 *                     StackName: "MyStack",
 *                     TemplatePath: "build_output::sam-templated.yaml",
 *                 },
 *             }],
 *         },
 *     ],
 * });
 * const codepipelinePolicy = new aws.iam.RolePolicy("codepipelinePolicy", {
 *     role: codepipelineRole.id,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect":"Allow",
 *       "Action": [
 *         "s3:GetObject",
 *         "s3:GetObjectVersion",
 *         "s3:GetBucketVersioning",
 *         "s3:PutObjectAcl",
 *         "s3:PutObject"
 *       ],
 *       "Resource": [
 *         "${codepipelineBucket.arn}",
 *         "${codepipelineBucket.arn}/*"
 *       ]
 *     },
 *     {
 *       "Effect": "Allow",
 *       "Action": [
 *         "codestar-connections:UseConnection"
 *       ],
 *       "Resource": "${example.arn}"
 *     },
 *     {
 *       "Effect": "Allow",
 *       "Action": [
 *         "codebuild:BatchGetBuilds",
 *         "codebuild:StartBuild"
 *       ],
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.codestarconnections.Connection("example", provider_type="GitHub")
 * codepipeline_bucket = aws.s3.Bucket("codepipelineBucket", acl="private")
 * codepipeline_role = aws.iam.Role("codepipelineRole", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "codepipeline.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * """)
 * s3kmskey = aws.kms.get_alias(name="alias/myKmsKey")
 * codepipeline = aws.codepipeline.Pipeline("codepipeline",
 *     role_arn=codepipeline_role.arn,
 *     artifact_store=aws.codepipeline.PipelineArtifactStoreArgs(
 *         location=codepipeline_bucket.bucket,
 *         type="S3",
 *         encryption_key=aws.codepipeline.PipelineArtifactStoreEncryptionKeyArgs(
 *             id=s3kmskey.arn,
 *             type="KMS",
 *         ),
 *     ),
 *     stages=[
 *         aws.codepipeline.PipelineStageArgs(
 *             name="Source",
 *             actions=[aws.codepipeline.PipelineStageActionArgs(
 *                 name="Source",
 *                 category="Source",
 *                 owner="AWS",
 *                 provider="CodeStarSourceConnection",
 *                 version="1",
 *                 output_artifacts=["source_output"],
 *                 configuration={
 *                     "ConnectionArn": example.arn,
 *                     "FullRepositoryId": "my-organization/example",
 *                     "BranchName": "main",
 *                 },
 *             )],
 *         ),
 *         aws.codepipeline.PipelineStageArgs(
 *             name="Build",
 *             actions=[aws.codepipeline.PipelineStageActionArgs(
 *                 name="Build",
 *                 category="Build",
 *                 owner="AWS",
 *                 provider="CodeBuild",
 *                 input_artifacts=["source_output"],
 *                 output_artifacts=["build_output"],
 *                 version="1",
 *                 configuration={
 *                     "ProjectName": "test",
 *                 },
 *             )],
 *         ),
 *         aws.codepipeline.PipelineStageArgs(
 *             name="Deploy",
 *             actions=[aws.codepipeline.PipelineStageActionArgs(
 *                 name="Deploy",
 *                 category="Deploy",
 *                 owner="AWS",
 *                 provider="CloudFormation",
 *                 input_artifacts=["build_output"],
 *                 version="1",
 *                 configuration={
 *                     "ActionMode": "REPLACE_ON_FAILURE",
 *                     "Capabilities": "CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM",
 *                     "OutputFileName": "CreateStackOutput.json",
 *                     "StackName": "MyStack",
 *                     "TemplatePath": "build_output::sam-templated.yaml",
 *                 },
 *             )],
 *         ),
 *     ])
 * codepipeline_policy = aws.iam.RolePolicy("codepipelinePolicy",
 *     role=codepipeline_role.id,
 *     policy=pulumi.Output.all(codepipeline_bucket.arn, codepipeline_bucket.arn, example.arn).apply(lambda codepipelineBucketArn, codepipelineBucketArn1, exampleArn: f"""{{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {{
 *       "Effect":"Allow",
 *       "Action": [
 *         "s3:GetObject",
 *         "s3:GetObjectVersion",
 *         "s3:GetBucketVersioning",
 *         "s3:PutObjectAcl",
 *         "s3:PutObject"
 *       ],
 *       "Resource": [
 *         "{codepipeline_bucket_arn}",
 *         "{codepipeline_bucket_arn1}/*"
 *       ]
 *     }},
 *     {{
 *       "Effect": "Allow",
 *       "Action": [
 *         "codestar-connections:UseConnection"
 *       ],
 *       "Resource": "{example_arn}"
 *     }},
 *     {{
 *       "Effect": "Allow",
 *       "Action": [
 *         "codebuild:BatchGetBuilds",
 *         "codebuild:StartBuild"
 *       ],
 *       "Resource": "*"
 *     }}
 *   ]
 * }}
 * """))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.CodeStarConnections.Connection("example", new Aws.CodeStarConnections.ConnectionArgs
 *         {
 *             ProviderType = "GitHub",
 *         });
 *         var codepipelineBucket = new Aws.S3.Bucket("codepipelineBucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "private",
 *         });
 *         var codepipelineRole = new Aws.Iam.Role("codepipelineRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Effect"": ""Allow"",
 *       ""Principal"": {
 *         ""Service"": ""codepipeline.amazonaws.com""
 *       },
 *       ""Action"": ""sts:AssumeRole""
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var s3kmskey = Output.Create(Aws.Kms.GetAlias.InvokeAsync(new Aws.Kms.GetAliasArgs
 *         {
 *             Name = "alias/myKmsKey",
 *         }));
 *         var codepipeline = new Aws.CodePipeline.Pipeline("codepipeline", new Aws.CodePipeline.PipelineArgs
 *         {
 *             RoleArn = codepipelineRole.Arn,
 *             ArtifactStore = new Aws.CodePipeline.Inputs.PipelineArtifactStoreArgs
 *             {
 *                 Location = codepipelineBucket.BucketName,
 *                 Type = "S3",
 *                 EncryptionKey = new Aws.CodePipeline.Inputs.PipelineArtifactStoreEncryptionKeyArgs
 *                 {
 *                     Id = s3kmskey.Apply(s3kmskey => s3kmskey.Arn),
 *                     Type = "KMS",
 *                 },
 *             },
 *             Stages = 
 *             {
 *                 new Aws.CodePipeline.Inputs.PipelineStageArgs
 *                 {
 *                     Name = "Source",
 *                     Actions = 
 *                     {
 *                         new Aws.CodePipeline.Inputs.PipelineStageActionArgs
 *                         {
 *                             Name = "Source",
 *                             Category = "Source",
 *                             Owner = "AWS",
 *                             Provider = "CodeStarSourceConnection",
 *                             Version = "1",
 *                             OutputArtifacts = 
 *                             {
 *                                 "source_output",
 *                             },
 *                             Configuration = 
 *                             {
 *                                 { "ConnectionArn", example.Arn },
 *                                 { "FullRepositoryId", "my-organization/example" },
 *                                 { "BranchName", "main" },
 *                             },
 *                         },
 *                     },
 *                 },
 *                 new Aws.CodePipeline.Inputs.PipelineStageArgs
 *                 {
 *                     Name = "Build",
 *                     Actions = 
 *                     {
 *                         new Aws.CodePipeline.Inputs.PipelineStageActionArgs
 *                         {
 *                             Name = "Build",
 *                             Category = "Build",
 *                             Owner = "AWS",
 *                             Provider = "CodeBuild",
 *                             InputArtifacts = 
 *                             {
 *                                 "source_output",
 *                             },
 *                             OutputArtifacts = 
 *                             {
 *                                 "build_output",
 *                             },
 *                             Version = "1",
 *                             Configuration = 
 *                             {
 *                                 { "ProjectName", "test" },
 *                             },
 *                         },
 *                     },
 *                 },
 *                 new Aws.CodePipeline.Inputs.PipelineStageArgs
 *                 {
 *                     Name = "Deploy",
 *                     Actions = 
 *                     {
 *                         new Aws.CodePipeline.Inputs.PipelineStageActionArgs
 *                         {
 *                             Name = "Deploy",
 *                             Category = "Deploy",
 *                             Owner = "AWS",
 *                             Provider = "CloudFormation",
 *                             InputArtifacts = 
 *                             {
 *                                 "build_output",
 *                             },
 *                             Version = "1",
 *                             Configuration = 
 *                             {
 *                                 { "ActionMode", "REPLACE_ON_FAILURE" },
 *                                 { "Capabilities", "CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM" },
 *                                 { "OutputFileName", "CreateStackOutput.json" },
 *                                 { "StackName", "MyStack" },
 *                                 { "TemplatePath", "build_output::sam-templated.yaml" },
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         var codepipelinePolicy = new Aws.Iam.RolePolicy("codepipelinePolicy", new Aws.Iam.RolePolicyArgs
 *         {
 *             Role = codepipelineRole.Id,
 *             Policy = Output.Tuple(codepipelineBucket.Arn, codepipelineBucket.Arn, example.Arn).Apply(values =>
 *             {
 *                 var codepipelineBucketArn = values.Item1;
 *                 var codepipelineBucketArn1 = values.Item2;
 *                 var exampleArn = values.Item3;
 *                 return @$"{{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {{
 *       ""Effect"":""Allow"",
 *       ""Action"": [
 *         ""s3:GetObject"",
 *         ""s3:GetObjectVersion"",
 *         ""s3:GetBucketVersioning"",
 *         ""s3:PutObjectAcl"",
 *         ""s3:PutObject""
 *       ],
 *       ""Resource"": [
 *         ""{codepipelineBucketArn}"",
 *         ""{codepipelineBucketArn1}/*""
 *       ]
 *     }},
 *     {{
 *       ""Effect"": ""Allow"",
 *       ""Action"": [
 *         ""codestar-connections:UseConnection""
 *       ],
 *       ""Resource"": ""{exampleArn}""
 *     }},
 *     {{
 *       ""Effect"": ""Allow"",
 *       ""Action"": [
 *         ""codebuild:BatchGetBuilds"",
 *         ""codebuild:StartBuild""
 *       ],
 *       ""Resource"": ""*""
 *     }}
 *   ]
 * }}
 * ";
 *             }),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codepipeline"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codestarconnections"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kms"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		example, err := codestarconnections.NewConnection(ctx, "example", &codestarconnections.ConnectionArgs{
 * 			ProviderType: pulumi.String("GitHub"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		codepipelineBucket, err := s3.NewBucket(ctx, "codepipelineBucket", &s3.BucketArgs{
 * 			Acl: pulumi.String("private"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		codepipelineRole, err := iam.NewRole(ctx, "codepipelineRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Effect\": \"Allow\",\n", "      \"Principal\": {\n", "        \"Service\": \"codepipeline.amazonaws.com\"\n", "      },\n", "      \"Action\": \"sts:AssumeRole\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		s3kmskey, err := kms.LookupAlias(ctx, &kms.LookupAliasArgs{
 * 			Name: "alias/myKmsKey",
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = codepipeline.NewPipeline(ctx, "codepipeline", &codepipeline.PipelineArgs{
 * 			RoleArn: codepipelineRole.Arn,
 * 			ArtifactStore: &codepipeline.PipelineArtifactStoreArgs{
 * 				Location: codepipelineBucket.Bucket,
 * 				Type:     pulumi.String("S3"),
 * 				EncryptionKey: &codepipeline.PipelineArtifactStoreEncryptionKeyArgs{
 * 					Id:   pulumi.String(s3kmskey.Arn),
 * 					Type: pulumi.String("KMS"),
 * 				},
 * 			},
 * 			Stages: codepipeline.PipelineStageArray{
 * 				&codepipeline.PipelineStageArgs{
 * 					Name: pulumi.String("Source"),
 * 					Actions: codepipeline.PipelineStageActionArray{
 * 						&codepipeline.PipelineStageActionArgs{
 * 							Name:     pulumi.String("Source"),
 * 							Category: pulumi.String("Source"),
 * 							Owner:    pulumi.String("AWS"),
 * 							Provider: pulumi.String("CodeStarSourceConnection"),
 * 							Version:  pulumi.String("1"),
 * 							OutputArtifacts: pulumi.StringArray{
 * 								pulumi.String("source_output"),
 * 							},
 * 							Configuration: pulumi.StringMap{
 * 								"ConnectionArn":    example.Arn,
 * 								"FullRepositoryId": pulumi.String("my-organization/example"),
 * 								"BranchName":       pulumi.String("main"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 				&codepipeline.PipelineStageArgs{
 * 					Name: pulumi.String("Build"),
 * 					Actions: codepipeline.PipelineStageActionArray{
 * 						&codepipeline.PipelineStageActionArgs{
 * 							Name:     pulumi.String("Build"),
 * 							Category: pulumi.String("Build"),
 * 							Owner:    pulumi.String("AWS"),
 * 							Provider: pulumi.String("CodeBuild"),
 * 							InputArtifacts: pulumi.StringArray{
 * 								pulumi.String("source_output"),
 * 							},
 * 							OutputArtifacts: pulumi.StringArray{
 * 								pulumi.String("build_output"),
 * 							},
 * 							Version: pulumi.String("1"),
 * 							Configuration: pulumi.StringMap{
 * 								"ProjectName": pulumi.String("test"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 				&codepipeline.PipelineStageArgs{
 * 					Name: pulumi.String("Deploy"),
 * 					Actions: codepipeline.PipelineStageActionArray{
 * 						&codepipeline.PipelineStageActionArgs{
 * 							Name:     pulumi.String("Deploy"),
 * 							Category: pulumi.String("Deploy"),
 * 							Owner:    pulumi.String("AWS"),
 * 							Provider: pulumi.String("CloudFormation"),
 * 							InputArtifacts: pulumi.StringArray{
 * 								pulumi.String("build_output"),
 * 							},
 * 							Version: pulumi.String("1"),
 * 							Configuration: pulumi.StringMap{
 * 								"ActionMode":     pulumi.String("REPLACE_ON_FAILURE"),
 * 								"Capabilities":   pulumi.String("CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM"),
 * 								"OutputFileName": pulumi.String("CreateStackOutput.json"),
 * 								"StackName":      pulumi.String("MyStack"),
 * 								"TemplatePath":   pulumi.String("build_output::sam-templated.yaml"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicy(ctx, "codepipelinePolicy", &iam.RolePolicyArgs{
 * 			Role: codepipelineRole.ID(),
 * 			Policy: pulumi.All(codepipelineBucket.Arn, codepipelineBucket.Arn, example.Arn).ApplyT(func(_args []interface{}) (string, error) {
 * 				codepipelineBucketArn := _args[0].(string)
 * 				codepipelineBucketArn1 := _args[1].(string)
 * 				exampleArn := _args[2].(string)
 * 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Effect\":\"Allow\",\n", "      \"Action\": [\n", "        \"s3:GetObject\",\n", "        \"s3:GetObjectVersion\",\n", "        \"s3:GetBucketVersioning\",\n", "        \"s3:PutObjectAcl\",\n", "        \"s3:PutObject\"\n", "      ],\n", "      \"Resource\": [\n", "        \"", codepipelineBucketArn, "\",\n", "        \"", codepipelineBucketArn1, "/*\"\n", "      ]\n", "    },\n", "    {\n", "      \"Effect\": \"Allow\",\n", "      \"Action\": [\n", "        \"codestar-connections:UseConnection\"\n", "      ],\n", "      \"Resource\": \"", exampleArn, "\"\n", "    },\n", "    {\n", "      \"Effect\": \"Allow\",\n", "      \"Action\": [\n", "        \"codebuild:BatchGetBuilds\",\n", "        \"codebuild:StartBuild\"\n", "      ],\n", "      \"Resource\": \"*\"\n", "    }\n", "  ]\n", "}\n"), nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * CodePipelines can be imported using the name, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:codepipeline/pipeline:Pipeline foo example
 * ```
 * 
 *  
 */
@ResourceType(type="aws:codepipeline/pipeline:Pipeline")
public class Pipeline extends io.pulumi.resources.CustomResource {
    /**
     * The codepipeline ARN.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The codepipeline ARN.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * One or more artifact_store blocks. Artifact stores are documented below.
     * 
     */
    @Export(name="artifactStore", type=PipelineArtifactStore.class, parameters={})
    private Output<PipelineArtifactStore> artifactStore;

    /**
     * @return One or more artifact_store blocks. Artifact stores are documented below.
     * 
     */
    public Output<PipelineArtifactStore> getArtifactStore() {
        return this.artifactStore;
    }
    /**
     * The name of the pipeline.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the pipeline.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
     * 
     */
    @Export(name="roleArn", type=String.class, parameters={})
    private Output<String> roleArn;

    /**
     * @return A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
     * 
     */
    public Output<String> getRoleArn() {
        return this.roleArn;
    }
    /**
     * A stage block. Stages are documented below.
     * 
     */
    @Export(name="stages", type=List.class, parameters={PipelineStage.class})
    private Output<List<PipelineStage>> stages;

    /**
     * @return A stage block. Stages are documented below.
     * 
     */
    public Output<List<PipelineStage>> getStages() {
        return this.stages;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Pipeline(String name) {
        this(name, PipelineArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Pipeline(String name, PipelineArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Pipeline(String name, PipelineArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codepipeline/pipeline:Pipeline", name, args == null ? PipelineArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Pipeline(String name, Output<String> id, @Nullable PipelineState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codepipeline/pipeline:Pipeline", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Pipeline get(String name, Output<String> id, @Nullable PipelineState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Pipeline(name, id, state, options);
    }
}
