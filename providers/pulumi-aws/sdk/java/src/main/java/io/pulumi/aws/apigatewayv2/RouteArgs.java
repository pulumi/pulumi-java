// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigatewayv2;

import io.pulumi.aws.apigatewayv2.inputs.RouteRequestParameterArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouteArgs extends io.pulumi.resources.ResourceArgs {

    public static final RouteArgs Empty = new RouteArgs();

    /**
     * The API identifier.
     * 
     */
    @Import(name="apiId", required=true)
      private final Output<String> apiId;

    public Output<String> apiId() {
        return this.apiId;
    }

    /**
     * Boolean whether an API key is required for the route. Defaults to `false`. Supported only for WebSocket APIs.
     * 
     */
    @Import(name="apiKeyRequired")
      private final @Nullable Output<Boolean> apiKeyRequired;

    public Output<Boolean> apiKeyRequired() {
        return this.apiKeyRequired == null ? Codegen.empty() : this.apiKeyRequired;
    }

    /**
     * The authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
     * 
     */
    @Import(name="authorizationScopes")
      private final @Nullable Output<List<String>> authorizationScopes;

    public Output<List<String>> authorizationScopes() {
        return this.authorizationScopes == null ? Codegen.empty() : this.authorizationScopes;
    }

    /**
     * The authorization type for the route.
     * For WebSocket APIs, valid values are `NONE` for open access, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.
     * For HTTP APIs, valid values are `NONE` for open access, `JWT` for using JSON Web Tokens, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.
     * Defaults to `NONE`.
     * 
     */
    @Import(name="authorizationType")
      private final @Nullable Output<String> authorizationType;

    public Output<String> authorizationType() {
        return this.authorizationType == null ? Codegen.empty() : this.authorizationType;
    }

    /**
     * The identifier of the `aws.apigatewayv2.Authorizer` resource to be associated with this route.
     * 
     */
    @Import(name="authorizerId")
      private final @Nullable Output<String> authorizerId;

    public Output<String> authorizerId() {
        return this.authorizerId == null ? Codegen.empty() : this.authorizerId;
    }

    /**
     * The [model selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-model-selection-expressions) for the route. Supported only for WebSocket APIs.
     * 
     */
    @Import(name="modelSelectionExpression")
      private final @Nullable Output<String> modelSelectionExpression;

    public Output<String> modelSelectionExpression() {
        return this.modelSelectionExpression == null ? Codegen.empty() : this.modelSelectionExpression;
    }

    /**
     * The operation name for the route. Must be between 1 and 64 characters in length.
     * 
     */
    @Import(name="operationName")
      private final @Nullable Output<String> operationName;

    public Output<String> operationName() {
        return this.operationName == null ? Codegen.empty() : this.operationName;
    }

    /**
     * The request models for the route. Supported only for WebSocket APIs.
     * 
     */
    @Import(name="requestModels")
      private final @Nullable Output<Map<String,String>> requestModels;

    public Output<Map<String,String>> requestModels() {
        return this.requestModels == null ? Codegen.empty() : this.requestModels;
    }

    /**
     * The request parameters for the route. Supported only for WebSocket APIs.
     * 
     */
    @Import(name="requestParameters")
      private final @Nullable Output<List<RouteRequestParameterArgs>> requestParameters;

    public Output<List<RouteRequestParameterArgs>> requestParameters() {
        return this.requestParameters == null ? Codegen.empty() : this.requestParameters;
    }

    /**
     * The route key for the route. For HTTP APIs, the route key can be either `$default`, or a combination of an HTTP method and resource path, for example, `GET /pets`.
     * 
     */
    @Import(name="routeKey", required=true)
      private final Output<String> routeKey;

    public Output<String> routeKey() {
        return this.routeKey;
    }

    /**
     * The [route response selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-route-response-selection-expressions) for the route. Supported only for WebSocket APIs.
     * 
     */
    @Import(name="routeResponseSelectionExpression")
      private final @Nullable Output<String> routeResponseSelectionExpression;

    public Output<String> routeResponseSelectionExpression() {
        return this.routeResponseSelectionExpression == null ? Codegen.empty() : this.routeResponseSelectionExpression;
    }

    /**
     * The target for the route, of the form `integrations/`*`IntegrationID`*, where *`IntegrationID`* is the identifier of an `aws.apigatewayv2.Integration` resource.
     * 
     */
    @Import(name="target")
      private final @Nullable Output<String> target;

    public Output<String> target() {
        return this.target == null ? Codegen.empty() : this.target;
    }

    public RouteArgs(
        Output<String> apiId,
        @Nullable Output<Boolean> apiKeyRequired,
        @Nullable Output<List<String>> authorizationScopes,
        @Nullable Output<String> authorizationType,
        @Nullable Output<String> authorizerId,
        @Nullable Output<String> modelSelectionExpression,
        @Nullable Output<String> operationName,
        @Nullable Output<Map<String,String>> requestModels,
        @Nullable Output<List<RouteRequestParameterArgs>> requestParameters,
        Output<String> routeKey,
        @Nullable Output<String> routeResponseSelectionExpression,
        @Nullable Output<String> target) {
        this.apiId = Objects.requireNonNull(apiId, "expected parameter 'apiId' to be non-null");
        this.apiKeyRequired = apiKeyRequired;
        this.authorizationScopes = authorizationScopes;
        this.authorizationType = authorizationType;
        this.authorizerId = authorizerId;
        this.modelSelectionExpression = modelSelectionExpression;
        this.operationName = operationName;
        this.requestModels = requestModels;
        this.requestParameters = requestParameters;
        this.routeKey = Objects.requireNonNull(routeKey, "expected parameter 'routeKey' to be non-null");
        this.routeResponseSelectionExpression = routeResponseSelectionExpression;
        this.target = target;
    }

    private RouteArgs() {
        this.apiId = Codegen.empty();
        this.apiKeyRequired = Codegen.empty();
        this.authorizationScopes = Codegen.empty();
        this.authorizationType = Codegen.empty();
        this.authorizerId = Codegen.empty();
        this.modelSelectionExpression = Codegen.empty();
        this.operationName = Codegen.empty();
        this.requestModels = Codegen.empty();
        this.requestParameters = Codegen.empty();
        this.routeKey = Codegen.empty();
        this.routeResponseSelectionExpression = Codegen.empty();
        this.target = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> apiId;
        private @Nullable Output<Boolean> apiKeyRequired;
        private @Nullable Output<List<String>> authorizationScopes;
        private @Nullable Output<String> authorizationType;
        private @Nullable Output<String> authorizerId;
        private @Nullable Output<String> modelSelectionExpression;
        private @Nullable Output<String> operationName;
        private @Nullable Output<Map<String,String>> requestModels;
        private @Nullable Output<List<RouteRequestParameterArgs>> requestParameters;
        private Output<String> routeKey;
        private @Nullable Output<String> routeResponseSelectionExpression;
        private @Nullable Output<String> target;

        public Builder() {
    	      // Empty
        }

        public Builder(RouteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiId = defaults.apiId;
    	      this.apiKeyRequired = defaults.apiKeyRequired;
    	      this.authorizationScopes = defaults.authorizationScopes;
    	      this.authorizationType = defaults.authorizationType;
    	      this.authorizerId = defaults.authorizerId;
    	      this.modelSelectionExpression = defaults.modelSelectionExpression;
    	      this.operationName = defaults.operationName;
    	      this.requestModels = defaults.requestModels;
    	      this.requestParameters = defaults.requestParameters;
    	      this.routeKey = defaults.routeKey;
    	      this.routeResponseSelectionExpression = defaults.routeResponseSelectionExpression;
    	      this.target = defaults.target;
        }

        public Builder apiId(Output<String> apiId) {
            this.apiId = Objects.requireNonNull(apiId);
            return this;
        }
        public Builder apiId(String apiId) {
            this.apiId = Output.of(Objects.requireNonNull(apiId));
            return this;
        }
        public Builder apiKeyRequired(@Nullable Output<Boolean> apiKeyRequired) {
            this.apiKeyRequired = apiKeyRequired;
            return this;
        }
        public Builder apiKeyRequired(@Nullable Boolean apiKeyRequired) {
            this.apiKeyRequired = Codegen.ofNullable(apiKeyRequired);
            return this;
        }
        public Builder authorizationScopes(@Nullable Output<List<String>> authorizationScopes) {
            this.authorizationScopes = authorizationScopes;
            return this;
        }
        public Builder authorizationScopes(@Nullable List<String> authorizationScopes) {
            this.authorizationScopes = Codegen.ofNullable(authorizationScopes);
            return this;
        }
        public Builder authorizationScopes(String... authorizationScopes) {
            return authorizationScopes(List.of(authorizationScopes));
        }
        public Builder authorizationType(@Nullable Output<String> authorizationType) {
            this.authorizationType = authorizationType;
            return this;
        }
        public Builder authorizationType(@Nullable String authorizationType) {
            this.authorizationType = Codegen.ofNullable(authorizationType);
            return this;
        }
        public Builder authorizerId(@Nullable Output<String> authorizerId) {
            this.authorizerId = authorizerId;
            return this;
        }
        public Builder authorizerId(@Nullable String authorizerId) {
            this.authorizerId = Codegen.ofNullable(authorizerId);
            return this;
        }
        public Builder modelSelectionExpression(@Nullable Output<String> modelSelectionExpression) {
            this.modelSelectionExpression = modelSelectionExpression;
            return this;
        }
        public Builder modelSelectionExpression(@Nullable String modelSelectionExpression) {
            this.modelSelectionExpression = Codegen.ofNullable(modelSelectionExpression);
            return this;
        }
        public Builder operationName(@Nullable Output<String> operationName) {
            this.operationName = operationName;
            return this;
        }
        public Builder operationName(@Nullable String operationName) {
            this.operationName = Codegen.ofNullable(operationName);
            return this;
        }
        public Builder requestModels(@Nullable Output<Map<String,String>> requestModels) {
            this.requestModels = requestModels;
            return this;
        }
        public Builder requestModels(@Nullable Map<String,String> requestModels) {
            this.requestModels = Codegen.ofNullable(requestModels);
            return this;
        }
        public Builder requestParameters(@Nullable Output<List<RouteRequestParameterArgs>> requestParameters) {
            this.requestParameters = requestParameters;
            return this;
        }
        public Builder requestParameters(@Nullable List<RouteRequestParameterArgs> requestParameters) {
            this.requestParameters = Codegen.ofNullable(requestParameters);
            return this;
        }
        public Builder requestParameters(RouteRequestParameterArgs... requestParameters) {
            return requestParameters(List.of(requestParameters));
        }
        public Builder routeKey(Output<String> routeKey) {
            this.routeKey = Objects.requireNonNull(routeKey);
            return this;
        }
        public Builder routeKey(String routeKey) {
            this.routeKey = Output.of(Objects.requireNonNull(routeKey));
            return this;
        }
        public Builder routeResponseSelectionExpression(@Nullable Output<String> routeResponseSelectionExpression) {
            this.routeResponseSelectionExpression = routeResponseSelectionExpression;
            return this;
        }
        public Builder routeResponseSelectionExpression(@Nullable String routeResponseSelectionExpression) {
            this.routeResponseSelectionExpression = Codegen.ofNullable(routeResponseSelectionExpression);
            return this;
        }
        public Builder target(@Nullable Output<String> target) {
            this.target = target;
            return this;
        }
        public Builder target(@Nullable String target) {
            this.target = Codegen.ofNullable(target);
            return this;
        }        public RouteArgs build() {
            return new RouteArgs(apiId, apiKeyRequired, authorizationScopes, authorizationType, authorizerId, modelSelectionExpression, operationName, requestModels, requestParameters, routeKey, routeResponseSelectionExpression, target);
        }
    }
}
