// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elastictranscoder;

import io.pulumi.aws.elastictranscoder.inputs.PipelineContentConfigArgs;
import io.pulumi.aws.elastictranscoder.inputs.PipelineContentConfigPermissionArgs;
import io.pulumi.aws.elastictranscoder.inputs.PipelineNotificationsArgs;
import io.pulumi.aws.elastictranscoder.inputs.PipelineThumbnailConfigArgs;
import io.pulumi.aws.elastictranscoder.inputs.PipelineThumbnailConfigPermissionArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PipelineArgs extends io.pulumi.resources.ResourceArgs {

    public static final PipelineArgs Empty = new PipelineArgs();

    /**
     * The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
     * 
     */
    @Import(name="awsKmsKeyArn")
      private final @Nullable Output<String> awsKmsKeyArn;

    public Output<String> awsKmsKeyArn() {
        return this.awsKmsKeyArn == null ? Codegen.empty() : this.awsKmsKeyArn;
    }

    /**
     * The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
     * 
     */
    @Import(name="contentConfig")
      private final @Nullable Output<PipelineContentConfigArgs> contentConfig;

    public Output<PipelineContentConfigArgs> contentConfig() {
        return this.contentConfig == null ? Codegen.empty() : this.contentConfig;
    }

    /**
     * The permissions for the `content_config` object. (documented below)
     * 
     */
    @Import(name="contentConfigPermissions")
      private final @Nullable Output<List<PipelineContentConfigPermissionArgs>> contentConfigPermissions;

    public Output<List<PipelineContentConfigPermissionArgs>> contentConfigPermissions() {
        return this.contentConfigPermissions == null ? Codegen.empty() : this.contentConfigPermissions;
    }

    /**
     * The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
     * 
     */
    @Import(name="inputBucket", required=true)
      private final Output<String> inputBucket;

    public Output<String> inputBucket() {
        return this.inputBucket;
    }

    /**
     * The name of the pipeline. Maximum 40 characters
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
     * 
     */
    @Import(name="notifications")
      private final @Nullable Output<PipelineNotificationsArgs> notifications;

    public Output<PipelineNotificationsArgs> notifications() {
        return this.notifications == null ? Codegen.empty() : this.notifications;
    }

    /**
     * The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
     * 
     */
    @Import(name="outputBucket")
      private final @Nullable Output<String> outputBucket;

    public Output<String> outputBucket() {
        return this.outputBucket == null ? Codegen.empty() : this.outputBucket;
    }

    /**
     * The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
     * 
     */
    @Import(name="role", required=true)
      private final Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    /**
     * The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
     * 
     */
    @Import(name="thumbnailConfig")
      private final @Nullable Output<PipelineThumbnailConfigArgs> thumbnailConfig;

    public Output<PipelineThumbnailConfigArgs> thumbnailConfig() {
        return this.thumbnailConfig == null ? Codegen.empty() : this.thumbnailConfig;
    }

    /**
     * The permissions for the `thumbnail_config` object. (documented below)
     * 
     */
    @Import(name="thumbnailConfigPermissions")
      private final @Nullable Output<List<PipelineThumbnailConfigPermissionArgs>> thumbnailConfigPermissions;

    public Output<List<PipelineThumbnailConfigPermissionArgs>> thumbnailConfigPermissions() {
        return this.thumbnailConfigPermissions == null ? Codegen.empty() : this.thumbnailConfigPermissions;
    }

    public PipelineArgs(
        @Nullable Output<String> awsKmsKeyArn,
        @Nullable Output<PipelineContentConfigArgs> contentConfig,
        @Nullable Output<List<PipelineContentConfigPermissionArgs>> contentConfigPermissions,
        Output<String> inputBucket,
        @Nullable Output<String> name,
        @Nullable Output<PipelineNotificationsArgs> notifications,
        @Nullable Output<String> outputBucket,
        Output<String> role,
        @Nullable Output<PipelineThumbnailConfigArgs> thumbnailConfig,
        @Nullable Output<List<PipelineThumbnailConfigPermissionArgs>> thumbnailConfigPermissions) {
        this.awsKmsKeyArn = awsKmsKeyArn;
        this.contentConfig = contentConfig;
        this.contentConfigPermissions = contentConfigPermissions;
        this.inputBucket = Objects.requireNonNull(inputBucket, "expected parameter 'inputBucket' to be non-null");
        this.name = name;
        this.notifications = notifications;
        this.outputBucket = outputBucket;
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
        this.thumbnailConfig = thumbnailConfig;
        this.thumbnailConfigPermissions = thumbnailConfigPermissions;
    }

    private PipelineArgs() {
        this.awsKmsKeyArn = Codegen.empty();
        this.contentConfig = Codegen.empty();
        this.contentConfigPermissions = Codegen.empty();
        this.inputBucket = Codegen.empty();
        this.name = Codegen.empty();
        this.notifications = Codegen.empty();
        this.outputBucket = Codegen.empty();
        this.role = Codegen.empty();
        this.thumbnailConfig = Codegen.empty();
        this.thumbnailConfigPermissions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> awsKmsKeyArn;
        private @Nullable Output<PipelineContentConfigArgs> contentConfig;
        private @Nullable Output<List<PipelineContentConfigPermissionArgs>> contentConfigPermissions;
        private Output<String> inputBucket;
        private @Nullable Output<String> name;
        private @Nullable Output<PipelineNotificationsArgs> notifications;
        private @Nullable Output<String> outputBucket;
        private Output<String> role;
        private @Nullable Output<PipelineThumbnailConfigArgs> thumbnailConfig;
        private @Nullable Output<List<PipelineThumbnailConfigPermissionArgs>> thumbnailConfigPermissions;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsKmsKeyArn = defaults.awsKmsKeyArn;
    	      this.contentConfig = defaults.contentConfig;
    	      this.contentConfigPermissions = defaults.contentConfigPermissions;
    	      this.inputBucket = defaults.inputBucket;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.outputBucket = defaults.outputBucket;
    	      this.role = defaults.role;
    	      this.thumbnailConfig = defaults.thumbnailConfig;
    	      this.thumbnailConfigPermissions = defaults.thumbnailConfigPermissions;
        }

        public Builder awsKmsKeyArn(@Nullable Output<String> awsKmsKeyArn) {
            this.awsKmsKeyArn = awsKmsKeyArn;
            return this;
        }
        public Builder awsKmsKeyArn(@Nullable String awsKmsKeyArn) {
            this.awsKmsKeyArn = Codegen.ofNullable(awsKmsKeyArn);
            return this;
        }
        public Builder contentConfig(@Nullable Output<PipelineContentConfigArgs> contentConfig) {
            this.contentConfig = contentConfig;
            return this;
        }
        public Builder contentConfig(@Nullable PipelineContentConfigArgs contentConfig) {
            this.contentConfig = Codegen.ofNullable(contentConfig);
            return this;
        }
        public Builder contentConfigPermissions(@Nullable Output<List<PipelineContentConfigPermissionArgs>> contentConfigPermissions) {
            this.contentConfigPermissions = contentConfigPermissions;
            return this;
        }
        public Builder contentConfigPermissions(@Nullable List<PipelineContentConfigPermissionArgs> contentConfigPermissions) {
            this.contentConfigPermissions = Codegen.ofNullable(contentConfigPermissions);
            return this;
        }
        public Builder contentConfigPermissions(PipelineContentConfigPermissionArgs... contentConfigPermissions) {
            return contentConfigPermissions(List.of(contentConfigPermissions));
        }
        public Builder inputBucket(Output<String> inputBucket) {
            this.inputBucket = Objects.requireNonNull(inputBucket);
            return this;
        }
        public Builder inputBucket(String inputBucket) {
            this.inputBucket = Output.of(Objects.requireNonNull(inputBucket));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder notifications(@Nullable Output<PipelineNotificationsArgs> notifications) {
            this.notifications = notifications;
            return this;
        }
        public Builder notifications(@Nullable PipelineNotificationsArgs notifications) {
            this.notifications = Codegen.ofNullable(notifications);
            return this;
        }
        public Builder outputBucket(@Nullable Output<String> outputBucket) {
            this.outputBucket = outputBucket;
            return this;
        }
        public Builder outputBucket(@Nullable String outputBucket) {
            this.outputBucket = Codegen.ofNullable(outputBucket);
            return this;
        }
        public Builder role(Output<String> role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder role(String role) {
            this.role = Output.of(Objects.requireNonNull(role));
            return this;
        }
        public Builder thumbnailConfig(@Nullable Output<PipelineThumbnailConfigArgs> thumbnailConfig) {
            this.thumbnailConfig = thumbnailConfig;
            return this;
        }
        public Builder thumbnailConfig(@Nullable PipelineThumbnailConfigArgs thumbnailConfig) {
            this.thumbnailConfig = Codegen.ofNullable(thumbnailConfig);
            return this;
        }
        public Builder thumbnailConfigPermissions(@Nullable Output<List<PipelineThumbnailConfigPermissionArgs>> thumbnailConfigPermissions) {
            this.thumbnailConfigPermissions = thumbnailConfigPermissions;
            return this;
        }
        public Builder thumbnailConfigPermissions(@Nullable List<PipelineThumbnailConfigPermissionArgs> thumbnailConfigPermissions) {
            this.thumbnailConfigPermissions = Codegen.ofNullable(thumbnailConfigPermissions);
            return this;
        }
        public Builder thumbnailConfigPermissions(PipelineThumbnailConfigPermissionArgs... thumbnailConfigPermissions) {
            return thumbnailConfigPermissions(List.of(thumbnailConfigPermissions));
        }        public PipelineArgs build() {
            return new PipelineArgs(awsKmsKeyArn, contentConfig, contentConfigPermissions, inputBucket, name, notifications, outputBucket, role, thumbnailConfig, thumbnailConfigPermissions);
        }
    }
}
