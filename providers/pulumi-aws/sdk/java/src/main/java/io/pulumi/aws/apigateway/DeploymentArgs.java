// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigateway;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeploymentArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeploymentArgs Empty = new DeploymentArgs();

    /**
     * Description of the deployment
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * REST API identifier.
     * 
     */
    @InputImport(name="restApi", required=true)
      private final Input<String> restApi;

    public Input<String> getRestApi() {
        return this.restApi;
    }

    /**
     * Description to set on the stage managed by the `stage_name` argument.
     * 
     */
    @InputImport(name="stageDescription")
      private final @Nullable Input<String> stageDescription;

    public Input<String> getStageDescription() {
        return this.stageDescription == null ? Input.empty() : this.stageDescription;
    }

    /**
     * Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. It is recommended to use the `aws.apigateway.Stage` resource instead to manage stages.
     * 
     */
    @InputImport(name="stageName")
      private final @Nullable Input<String> stageName;

    public Input<String> getStageName() {
        return this.stageName == null ? Input.empty() : this.stageName;
    }

    /**
     * Map of arbitrary keys and values that, when changed, will trigger a redeployment.
     * 
     */
    @InputImport(name="triggers")
      private final @Nullable Input<Map<String,String>> triggers;

    public Input<Map<String,String>> getTriggers() {
        return this.triggers == null ? Input.empty() : this.triggers;
    }

    /**
     * Map to set on the stage managed by the `stage_name` argument.
     * 
     */
    @InputImport(name="variables")
      private final @Nullable Input<Map<String,String>> variables;

    public Input<Map<String,String>> getVariables() {
        return this.variables == null ? Input.empty() : this.variables;
    }

    public DeploymentArgs(
        @Nullable Input<String> description,
        Input<String> restApi,
        @Nullable Input<String> stageDescription,
        @Nullable Input<String> stageName,
        @Nullable Input<Map<String,String>> triggers,
        @Nullable Input<Map<String,String>> variables) {
        this.description = description;
        this.restApi = Objects.requireNonNull(restApi, "expected parameter 'restApi' to be non-null");
        this.stageDescription = stageDescription;
        this.stageName = stageName;
        this.triggers = triggers;
        this.variables = variables;
    }

    private DeploymentArgs() {
        this.description = Input.empty();
        this.restApi = Input.empty();
        this.stageDescription = Input.empty();
        this.stageName = Input.empty();
        this.triggers = Input.empty();
        this.variables = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> description;
        private Input<String> restApi;
        private @Nullable Input<String> stageDescription;
        private @Nullable Input<String> stageName;
        private @Nullable Input<Map<String,String>> triggers;
        private @Nullable Input<Map<String,String>> variables;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.restApi = defaults.restApi;
    	      this.stageDescription = defaults.stageDescription;
    	      this.stageName = defaults.stageName;
    	      this.triggers = defaults.triggers;
    	      this.variables = defaults.variables;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setRestApi(Input<String> restApi) {
            this.restApi = Objects.requireNonNull(restApi);
            return this;
        }

        public Builder setStageDescription(@Nullable Input<String> stageDescription) {
            this.stageDescription = stageDescription;
            return this;
        }

        public Builder setStageDescription(@Nullable String stageDescription) {
            this.stageDescription = Input.ofNullable(stageDescription);
            return this;
        }

        public Builder setStageName(@Nullable Input<String> stageName) {
            this.stageName = stageName;
            return this;
        }

        public Builder setStageName(@Nullable String stageName) {
            this.stageName = Input.ofNullable(stageName);
            return this;
        }

        public Builder setTriggers(@Nullable Input<Map<String,String>> triggers) {
            this.triggers = triggers;
            return this;
        }

        public Builder setTriggers(@Nullable Map<String,String> triggers) {
            this.triggers = Input.ofNullable(triggers);
            return this;
        }

        public Builder setVariables(@Nullable Input<Map<String,String>> variables) {
            this.variables = variables;
            return this;
        }

        public Builder setVariables(@Nullable Map<String,String> variables) {
            this.variables = Input.ofNullable(variables);
            return this;
        }
        public DeploymentArgs build() {
            return new DeploymentArgs(description, restApi, stageDescription, stageName, triggers, variables);
        }
    }
}
