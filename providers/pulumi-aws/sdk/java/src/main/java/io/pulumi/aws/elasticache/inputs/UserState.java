// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elasticache.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserState extends io.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * Access permissions string used for this user. See [Specifying Permissions Using an Access String](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html#Access-string) for more details.
     * 
     */
    @InputImport(name="accessString")
      private final @Nullable Input<String> accessString;

    public Input<String> getAccessString() {
        return this.accessString == null ? Input.empty() : this.accessString;
    }

    /**
     * The ARN of the created ElastiCache User.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The current supported value is `REDIS`.
     * 
     */
    @InputImport(name="engine")
      private final @Nullable Input<String> engine;

    public Input<String> getEngine() {
        return this.engine == null ? Input.empty() : this.engine;
    }

    /**
     * Indicates a password is not required for this user.
     * 
     */
    @InputImport(name="noPasswordRequired")
      private final @Nullable Input<Boolean> noPasswordRequired;

    public Input<Boolean> getNoPasswordRequired() {
        return this.noPasswordRequired == null ? Input.empty() : this.noPasswordRequired;
    }

    /**
     * Passwords used for this user. You can create up to two passwords for each user.
     * 
     */
    @InputImport(name="passwords")
      private final @Nullable Input<List<String>> passwords;

    public Input<List<String>> getPasswords() {
        return this.passwords == null ? Input.empty() : this.passwords;
    }

    /**
     * A list of tags to be added to this resource. A tag is a key-value pair.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The ID of the user.
     * 
     */
    @InputImport(name="userId")
      private final @Nullable Input<String> userId;

    public Input<String> getUserId() {
        return this.userId == null ? Input.empty() : this.userId;
    }

    /**
     * The username of the user.
     * 
     */
    @InputImport(name="userName")
      private final @Nullable Input<String> userName;

    public Input<String> getUserName() {
        return this.userName == null ? Input.empty() : this.userName;
    }

    public UserState(
        @Nullable Input<String> accessString,
        @Nullable Input<String> arn,
        @Nullable Input<String> engine,
        @Nullable Input<Boolean> noPasswordRequired,
        @Nullable Input<List<String>> passwords,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> userId,
        @Nullable Input<String> userName) {
        this.accessString = accessString;
        this.arn = arn;
        this.engine = engine;
        this.noPasswordRequired = noPasswordRequired;
        this.passwords = passwords;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.userId = userId;
        this.userName = userName;
    }

    private UserState() {
        this.accessString = Input.empty();
        this.arn = Input.empty();
        this.engine = Input.empty();
        this.noPasswordRequired = Input.empty();
        this.passwords = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.userId = Input.empty();
        this.userName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accessString;
        private @Nullable Input<String> arn;
        private @Nullable Input<String> engine;
        private @Nullable Input<Boolean> noPasswordRequired;
        private @Nullable Input<List<String>> passwords;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> userId;
        private @Nullable Input<String> userName;

        public Builder() {
    	      // Empty
        }

        public Builder(UserState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessString = defaults.accessString;
    	      this.arn = defaults.arn;
    	      this.engine = defaults.engine;
    	      this.noPasswordRequired = defaults.noPasswordRequired;
    	      this.passwords = defaults.passwords;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.userId = defaults.userId;
    	      this.userName = defaults.userName;
        }

        public Builder accessString(@Nullable Input<String> accessString) {
            this.accessString = accessString;
            return this;
        }

        public Builder accessString(@Nullable String accessString) {
            this.accessString = Input.ofNullable(accessString);
            return this;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder engine(@Nullable Input<String> engine) {
            this.engine = engine;
            return this;
        }

        public Builder engine(@Nullable String engine) {
            this.engine = Input.ofNullable(engine);
            return this;
        }

        public Builder noPasswordRequired(@Nullable Input<Boolean> noPasswordRequired) {
            this.noPasswordRequired = noPasswordRequired;
            return this;
        }

        public Builder noPasswordRequired(@Nullable Boolean noPasswordRequired) {
            this.noPasswordRequired = Input.ofNullable(noPasswordRequired);
            return this;
        }

        public Builder passwords(@Nullable Input<List<String>> passwords) {
            this.passwords = passwords;
            return this;
        }

        public Builder passwords(@Nullable List<String> passwords) {
            this.passwords = Input.ofNullable(passwords);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder userId(@Nullable Input<String> userId) {
            this.userId = userId;
            return this;
        }

        public Builder userId(@Nullable String userId) {
            this.userId = Input.ofNullable(userId);
            return this;
        }

        public Builder userName(@Nullable Input<String> userName) {
            this.userName = userName;
            return this;
        }

        public Builder userName(@Nullable String userName) {
            this.userName = Input.ofNullable(userName);
            return this;
        }
        public UserState build() {
            return new UserState(accessString, arn, engine, noPasswordRequired, passwords, tags, tagsAll, userId, userName);
        }
    }
}
