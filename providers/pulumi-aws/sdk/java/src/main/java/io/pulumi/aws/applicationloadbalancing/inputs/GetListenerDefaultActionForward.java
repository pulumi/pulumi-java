// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.applicationloadbalancing.inputs;

import io.pulumi.aws.applicationloadbalancing.inputs.GetListenerDefaultActionForwardStickiness;
import io.pulumi.aws.applicationloadbalancing.inputs.GetListenerDefaultActionForwardTargetGroup;
import io.pulumi.core.internal.annotations.InputImport;
import java.util.List;
import java.util.Objects;


public final class GetListenerDefaultActionForward extends io.pulumi.resources.InvokeArgs {

    public static final GetListenerDefaultActionForward Empty = new GetListenerDefaultActionForward();

    @InputImport(name="stickinesses", required=true)
    private final List<GetListenerDefaultActionForwardStickiness> stickinesses;

    public List<GetListenerDefaultActionForwardStickiness> getStickinesses() {
        return this.stickinesses;
    }

    @InputImport(name="targetGroups", required=true)
    private final List<GetListenerDefaultActionForwardTargetGroup> targetGroups;

    public List<GetListenerDefaultActionForwardTargetGroup> getTargetGroups() {
        return this.targetGroups;
    }

    public GetListenerDefaultActionForward(
        List<GetListenerDefaultActionForwardStickiness> stickinesses,
        List<GetListenerDefaultActionForwardTargetGroup> targetGroups) {
        this.stickinesses = Objects.requireNonNull(stickinesses, "expected parameter 'stickinesses' to be non-null");
        this.targetGroups = Objects.requireNonNull(targetGroups, "expected parameter 'targetGroups' to be non-null");
    }

    private GetListenerDefaultActionForward() {
        this.stickinesses = List.of();
        this.targetGroups = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListenerDefaultActionForward defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetListenerDefaultActionForwardStickiness> stickinesses;
        private List<GetListenerDefaultActionForwardTargetGroup> targetGroups;

        public Builder() {
    	      // Empty
        }

        public Builder(GetListenerDefaultActionForward defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.stickinesses = defaults.stickinesses;
    	      this.targetGroups = defaults.targetGroups;
        }

        public Builder setStickinesses(List<GetListenerDefaultActionForwardStickiness> stickinesses) {
            this.stickinesses = Objects.requireNonNull(stickinesses);
            return this;
        }

        public Builder setTargetGroups(List<GetListenerDefaultActionForwardTargetGroup> targetGroups) {
            this.targetGroups = Objects.requireNonNull(targetGroups);
            return this;
        }
        public GetListenerDefaultActionForward build() {
            return new GetListenerDefaultActionForward(stickinesses, targetGroups);
        }
    }
}
