// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DevEndpointState extends io.pulumi.resources.ResourceArgs {

    public static final DevEndpointState Empty = new DevEndpointState();

    /**
     * A map of arguments used to configure the endpoint.
     * 
     */
    @InputImport(name="arguments")
      private final @Nullable Input<Map<String,Object>> arguments;

    public Input<Map<String,Object>> getArguments() {
        return this.arguments == null ? Input.empty() : this.arguments;
    }

    /**
     * The ARN of the endpoint.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The AWS availability zone where this endpoint is located.
     * 
     */
    @InputImport(name="availabilityZone")
      private final @Nullable Input<String> availabilityZone;

    public Input<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Input.empty() : this.availabilityZone;
    }

    /**
     * Path to one or more Java Jars in an S3 bucket that should be loaded in this endpoint.
     * 
     */
    @InputImport(name="extraJarsS3Path")
      private final @Nullable Input<String> extraJarsS3Path;

    public Input<String> getExtraJarsS3Path() {
        return this.extraJarsS3Path == null ? Input.empty() : this.extraJarsS3Path;
    }

    /**
     * Path(s) to one or more Python libraries in an S3 bucket that should be loaded in this endpoint. Multiple values must be complete paths separated by a comma.
     * 
     */
    @InputImport(name="extraPythonLibsS3Path")
      private final @Nullable Input<String> extraPythonLibsS3Path;

    public Input<String> getExtraPythonLibsS3Path() {
        return this.extraPythonLibsS3Path == null ? Input.empty() : this.extraPythonLibsS3Path;
    }

    /**
     * The reason for a current failure in this endpoint.
     * 
     */
    @InputImport(name="failureReason")
      private final @Nullable Input<String> failureReason;

    public Input<String> getFailureReason() {
        return this.failureReason == null ? Input.empty() : this.failureReason;
    }

    /**
     * -  Specifies the versions of Python and Apache Spark to use. Defaults to AWS Glue version 0.9.
     * 
     */
    @InputImport(name="glueVersion")
      private final @Nullable Input<String> glueVersion;

    public Input<String> getGlueVersion() {
        return this.glueVersion == null ? Input.empty() : this.glueVersion;
    }

    /**
     * The name of this endpoint. It must be unique in your account.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The number of AWS Glue Data Processing Units (DPUs) to allocate to this endpoint. Conflicts with `worker_type`.
     * 
     */
    @InputImport(name="numberOfNodes")
      private final @Nullable Input<Integer> numberOfNodes;

    public Input<Integer> getNumberOfNodes() {
        return this.numberOfNodes == null ? Input.empty() : this.numberOfNodes;
    }

    /**
     * The number of workers of a defined worker type that are allocated to this endpoint. This field is available only when you choose worker type G.1X or G.2X.
     * 
     */
    @InputImport(name="numberOfWorkers")
      private final @Nullable Input<Integer> numberOfWorkers;

    public Input<Integer> getNumberOfWorkers() {
        return this.numberOfWorkers == null ? Input.empty() : this.numberOfWorkers;
    }

    /**
     * A private IP address to access the endpoint within a VPC, if this endpoint is created within one.
     * 
     */
    @InputImport(name="privateAddress")
      private final @Nullable Input<String> privateAddress;

    public Input<String> getPrivateAddress() {
        return this.privateAddress == null ? Input.empty() : this.privateAddress;
    }

    /**
     * The public IP address used by this endpoint. The PublicAddress field is present only when you create a non-VPC endpoint.
     * 
     */
    @InputImport(name="publicAddress")
      private final @Nullable Input<String> publicAddress;

    public Input<String> getPublicAddress() {
        return this.publicAddress == null ? Input.empty() : this.publicAddress;
    }

    /**
     * The public key to be used by this endpoint for authentication.
     * 
     */
    @InputImport(name="publicKey")
      private final @Nullable Input<String> publicKey;

    public Input<String> getPublicKey() {
        return this.publicKey == null ? Input.empty() : this.publicKey;
    }

    /**
     * A list of public keys to be used by this endpoint for authentication.
     * 
     */
    @InputImport(name="publicKeys")
      private final @Nullable Input<List<String>> publicKeys;

    public Input<List<String>> getPublicKeys() {
        return this.publicKeys == null ? Input.empty() : this.publicKeys;
    }

    /**
     * The IAM role for this endpoint.
     * 
     */
    @InputImport(name="roleArn")
      private final @Nullable Input<String> roleArn;

    public Input<String> getRoleArn() {
        return this.roleArn == null ? Input.empty() : this.roleArn;
    }

    /**
     * The name of the Security Configuration structure to be used with this endpoint.
     * 
     */
    @InputImport(name="securityConfiguration")
      private final @Nullable Input<String> securityConfiguration;

    public Input<String> getSecurityConfiguration() {
        return this.securityConfiguration == null ? Input.empty() : this.securityConfiguration;
    }

    /**
     * Security group IDs for the security groups to be used by this endpoint.
     * 
     */
    @InputImport(name="securityGroupIds")
      private final @Nullable Input<List<String>> securityGroupIds;

    public Input<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds == null ? Input.empty() : this.securityGroupIds;
    }

    /**
     * The current status of this endpoint.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * The subnet ID for the new endpoint to use.
     * 
     */
    @InputImport(name="subnetId")
      private final @Nullable Input<String> subnetId;

    public Input<String> getSubnetId() {
        return this.subnetId == null ? Input.empty() : this.subnetId;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * he ID of the VPC used by this endpoint.
     * 
     */
    @InputImport(name="vpcId")
      private final @Nullable Input<String> vpcId;

    public Input<String> getVpcId() {
        return this.vpcId == null ? Input.empty() : this.vpcId;
    }

    /**
     * The type of predefined worker that is allocated to this endpoint. Accepts a value of Standard, G.1X, or G.2X.
     * 
     */
    @InputImport(name="workerType")
      private final @Nullable Input<String> workerType;

    public Input<String> getWorkerType() {
        return this.workerType == null ? Input.empty() : this.workerType;
    }

    /**
     * The YARN endpoint address used by this endpoint.
     * 
     */
    @InputImport(name="yarnEndpointAddress")
      private final @Nullable Input<String> yarnEndpointAddress;

    public Input<String> getYarnEndpointAddress() {
        return this.yarnEndpointAddress == null ? Input.empty() : this.yarnEndpointAddress;
    }

    /**
     * The Apache Zeppelin port for the remote Apache Spark interpreter.
     * 
     */
    @InputImport(name="zeppelinRemoteSparkInterpreterPort")
      private final @Nullable Input<Integer> zeppelinRemoteSparkInterpreterPort;

    public Input<Integer> getZeppelinRemoteSparkInterpreterPort() {
        return this.zeppelinRemoteSparkInterpreterPort == null ? Input.empty() : this.zeppelinRemoteSparkInterpreterPort;
    }

    public DevEndpointState(
        @Nullable Input<Map<String,Object>> arguments,
        @Nullable Input<String> arn,
        @Nullable Input<String> availabilityZone,
        @Nullable Input<String> extraJarsS3Path,
        @Nullable Input<String> extraPythonLibsS3Path,
        @Nullable Input<String> failureReason,
        @Nullable Input<String> glueVersion,
        @Nullable Input<String> name,
        @Nullable Input<Integer> numberOfNodes,
        @Nullable Input<Integer> numberOfWorkers,
        @Nullable Input<String> privateAddress,
        @Nullable Input<String> publicAddress,
        @Nullable Input<String> publicKey,
        @Nullable Input<List<String>> publicKeys,
        @Nullable Input<String> roleArn,
        @Nullable Input<String> securityConfiguration,
        @Nullable Input<List<String>> securityGroupIds,
        @Nullable Input<String> status,
        @Nullable Input<String> subnetId,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> vpcId,
        @Nullable Input<String> workerType,
        @Nullable Input<String> yarnEndpointAddress,
        @Nullable Input<Integer> zeppelinRemoteSparkInterpreterPort) {
        this.arguments = arguments;
        this.arn = arn;
        this.availabilityZone = availabilityZone;
        this.extraJarsS3Path = extraJarsS3Path;
        this.extraPythonLibsS3Path = extraPythonLibsS3Path;
        this.failureReason = failureReason;
        this.glueVersion = glueVersion;
        this.name = name;
        this.numberOfNodes = numberOfNodes;
        this.numberOfWorkers = numberOfWorkers;
        this.privateAddress = privateAddress;
        this.publicAddress = publicAddress;
        this.publicKey = publicKey;
        this.publicKeys = publicKeys;
        this.roleArn = roleArn;
        this.securityConfiguration = securityConfiguration;
        this.securityGroupIds = securityGroupIds;
        this.status = status;
        this.subnetId = subnetId;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcId = vpcId;
        this.workerType = workerType;
        this.yarnEndpointAddress = yarnEndpointAddress;
        this.zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPort;
    }

    private DevEndpointState() {
        this.arguments = Input.empty();
        this.arn = Input.empty();
        this.availabilityZone = Input.empty();
        this.extraJarsS3Path = Input.empty();
        this.extraPythonLibsS3Path = Input.empty();
        this.failureReason = Input.empty();
        this.glueVersion = Input.empty();
        this.name = Input.empty();
        this.numberOfNodes = Input.empty();
        this.numberOfWorkers = Input.empty();
        this.privateAddress = Input.empty();
        this.publicAddress = Input.empty();
        this.publicKey = Input.empty();
        this.publicKeys = Input.empty();
        this.roleArn = Input.empty();
        this.securityConfiguration = Input.empty();
        this.securityGroupIds = Input.empty();
        this.status = Input.empty();
        this.subnetId = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.vpcId = Input.empty();
        this.workerType = Input.empty();
        this.yarnEndpointAddress = Input.empty();
        this.zeppelinRemoteSparkInterpreterPort = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DevEndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Map<String,Object>> arguments;
        private @Nullable Input<String> arn;
        private @Nullable Input<String> availabilityZone;
        private @Nullable Input<String> extraJarsS3Path;
        private @Nullable Input<String> extraPythonLibsS3Path;
        private @Nullable Input<String> failureReason;
        private @Nullable Input<String> glueVersion;
        private @Nullable Input<String> name;
        private @Nullable Input<Integer> numberOfNodes;
        private @Nullable Input<Integer> numberOfWorkers;
        private @Nullable Input<String> privateAddress;
        private @Nullable Input<String> publicAddress;
        private @Nullable Input<String> publicKey;
        private @Nullable Input<List<String>> publicKeys;
        private @Nullable Input<String> roleArn;
        private @Nullable Input<String> securityConfiguration;
        private @Nullable Input<List<String>> securityGroupIds;
        private @Nullable Input<String> status;
        private @Nullable Input<String> subnetId;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> vpcId;
        private @Nullable Input<String> workerType;
        private @Nullable Input<String> yarnEndpointAddress;
        private @Nullable Input<Integer> zeppelinRemoteSparkInterpreterPort;

        public Builder() {
    	      // Empty
        }

        public Builder(DevEndpointState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.arn = defaults.arn;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.extraJarsS3Path = defaults.extraJarsS3Path;
    	      this.extraPythonLibsS3Path = defaults.extraPythonLibsS3Path;
    	      this.failureReason = defaults.failureReason;
    	      this.glueVersion = defaults.glueVersion;
    	      this.name = defaults.name;
    	      this.numberOfNodes = defaults.numberOfNodes;
    	      this.numberOfWorkers = defaults.numberOfWorkers;
    	      this.privateAddress = defaults.privateAddress;
    	      this.publicAddress = defaults.publicAddress;
    	      this.publicKey = defaults.publicKey;
    	      this.publicKeys = defaults.publicKeys;
    	      this.roleArn = defaults.roleArn;
    	      this.securityConfiguration = defaults.securityConfiguration;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.status = defaults.status;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcId = defaults.vpcId;
    	      this.workerType = defaults.workerType;
    	      this.yarnEndpointAddress = defaults.yarnEndpointAddress;
    	      this.zeppelinRemoteSparkInterpreterPort = defaults.zeppelinRemoteSparkInterpreterPort;
        }

        public Builder arguments(@Nullable Input<Map<String,Object>> arguments) {
            this.arguments = arguments;
            return this;
        }

        public Builder arguments(@Nullable Map<String,Object> arguments) {
            this.arguments = Input.ofNullable(arguments);
            return this;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder availabilityZone(@Nullable Input<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Input.ofNullable(availabilityZone);
            return this;
        }

        public Builder extraJarsS3Path(@Nullable Input<String> extraJarsS3Path) {
            this.extraJarsS3Path = extraJarsS3Path;
            return this;
        }

        public Builder extraJarsS3Path(@Nullable String extraJarsS3Path) {
            this.extraJarsS3Path = Input.ofNullable(extraJarsS3Path);
            return this;
        }

        public Builder extraPythonLibsS3Path(@Nullable Input<String> extraPythonLibsS3Path) {
            this.extraPythonLibsS3Path = extraPythonLibsS3Path;
            return this;
        }

        public Builder extraPythonLibsS3Path(@Nullable String extraPythonLibsS3Path) {
            this.extraPythonLibsS3Path = Input.ofNullable(extraPythonLibsS3Path);
            return this;
        }

        public Builder failureReason(@Nullable Input<String> failureReason) {
            this.failureReason = failureReason;
            return this;
        }

        public Builder failureReason(@Nullable String failureReason) {
            this.failureReason = Input.ofNullable(failureReason);
            return this;
        }

        public Builder glueVersion(@Nullable Input<String> glueVersion) {
            this.glueVersion = glueVersion;
            return this;
        }

        public Builder glueVersion(@Nullable String glueVersion) {
            this.glueVersion = Input.ofNullable(glueVersion);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder numberOfNodes(@Nullable Input<Integer> numberOfNodes) {
            this.numberOfNodes = numberOfNodes;
            return this;
        }

        public Builder numberOfNodes(@Nullable Integer numberOfNodes) {
            this.numberOfNodes = Input.ofNullable(numberOfNodes);
            return this;
        }

        public Builder numberOfWorkers(@Nullable Input<Integer> numberOfWorkers) {
            this.numberOfWorkers = numberOfWorkers;
            return this;
        }

        public Builder numberOfWorkers(@Nullable Integer numberOfWorkers) {
            this.numberOfWorkers = Input.ofNullable(numberOfWorkers);
            return this;
        }

        public Builder privateAddress(@Nullable Input<String> privateAddress) {
            this.privateAddress = privateAddress;
            return this;
        }

        public Builder privateAddress(@Nullable String privateAddress) {
            this.privateAddress = Input.ofNullable(privateAddress);
            return this;
        }

        public Builder publicAddress(@Nullable Input<String> publicAddress) {
            this.publicAddress = publicAddress;
            return this;
        }

        public Builder publicAddress(@Nullable String publicAddress) {
            this.publicAddress = Input.ofNullable(publicAddress);
            return this;
        }

        public Builder publicKey(@Nullable Input<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public Builder publicKey(@Nullable String publicKey) {
            this.publicKey = Input.ofNullable(publicKey);
            return this;
        }

        public Builder publicKeys(@Nullable Input<List<String>> publicKeys) {
            this.publicKeys = publicKeys;
            return this;
        }

        public Builder publicKeys(@Nullable List<String> publicKeys) {
            this.publicKeys = Input.ofNullable(publicKeys);
            return this;
        }

        public Builder roleArn(@Nullable Input<String> roleArn) {
            this.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(@Nullable String roleArn) {
            this.roleArn = Input.ofNullable(roleArn);
            return this;
        }

        public Builder securityConfiguration(@Nullable Input<String> securityConfiguration) {
            this.securityConfiguration = securityConfiguration;
            return this;
        }

        public Builder securityConfiguration(@Nullable String securityConfiguration) {
            this.securityConfiguration = Input.ofNullable(securityConfiguration);
            return this;
        }

        public Builder securityGroupIds(@Nullable Input<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Input.ofNullable(securityGroupIds);
            return this;
        }

        public Builder status(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder subnetId(@Nullable Input<String> subnetId) {
            this.subnetId = subnetId;
            return this;
        }

        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = Input.ofNullable(subnetId);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder vpcId(@Nullable Input<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }

        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = Input.ofNullable(vpcId);
            return this;
        }

        public Builder workerType(@Nullable Input<String> workerType) {
            this.workerType = workerType;
            return this;
        }

        public Builder workerType(@Nullable String workerType) {
            this.workerType = Input.ofNullable(workerType);
            return this;
        }

        public Builder yarnEndpointAddress(@Nullable Input<String> yarnEndpointAddress) {
            this.yarnEndpointAddress = yarnEndpointAddress;
            return this;
        }

        public Builder yarnEndpointAddress(@Nullable String yarnEndpointAddress) {
            this.yarnEndpointAddress = Input.ofNullable(yarnEndpointAddress);
            return this;
        }

        public Builder zeppelinRemoteSparkInterpreterPort(@Nullable Input<Integer> zeppelinRemoteSparkInterpreterPort) {
            this.zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPort;
            return this;
        }

        public Builder zeppelinRemoteSparkInterpreterPort(@Nullable Integer zeppelinRemoteSparkInterpreterPort) {
            this.zeppelinRemoteSparkInterpreterPort = Input.ofNullable(zeppelinRemoteSparkInterpreterPort);
            return this;
        }
        public DevEndpointState build() {
            return new DevEndpointState(arguments, arn, availabilityZone, extraJarsS3Path, extraPythonLibsS3Path, failureReason, glueVersion, name, numberOfNodes, numberOfWorkers, privateAddress, publicAddress, publicKey, publicKeys, roleArn, securityConfiguration, securityGroupIds, status, subnetId, tags, tagsAll, vpcId, workerType, yarnEndpointAddress, zeppelinRemoteSparkInterpreterPort);
        }
    }
}
