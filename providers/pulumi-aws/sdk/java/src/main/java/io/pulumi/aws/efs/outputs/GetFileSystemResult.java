// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.efs.outputs;

import io.pulumi.aws.efs.outputs.GetFileSystemLifecyclePolicy;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@OutputCustomType
public final class GetFileSystemResult {
    /**
     * Amazon Resource Name of the file system.
     * 
     */
    private final String arn;
    /**
     * The identifier of the Availability Zone in which the file system's One Zone storage classes exist.
     * 
     */
    private final String availabilityZoneId;
    /**
     * The Availability Zone name in which the file system's One Zone storage classes exist.
     * 
     */
    private final String availabilityZoneName;
    private final String creationToken;
    /**
     * The DNS name for the filesystem per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
     * 
     */
    private final String dnsName;
    /**
     * Whether EFS is encrypted.
     * 
     */
    private final Boolean encrypted;
    private final String fileSystemId;
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * The ARN for the KMS encryption key.
     * 
     */
    private final String kmsKeyId;
    /**
     * A file system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object.
     * 
     */
    private final GetFileSystemLifecyclePolicy lifecyclePolicy;
    /**
     * The file system performance mode.
     * 
     */
    private final String performanceMode;
    /**
     * The throughput, measured in MiB/s, that you want to provision for the file system.
     * * `tags` -A map of tags to assign to the file system.
     * 
     */
    private final Double provisionedThroughputInMibps;
    /**
     * The current byte count used by the file system.
     * 
     */
    private final Integer sizeInBytes;
    private final Map<String,String> tags;
    /**
     * Throughput mode for the file system.
     * 
     */
    private final String throughputMode;

    @OutputCustomType.Constructor
    private GetFileSystemResult(
        @OutputCustomType.Parameter("arn") String arn,
        @OutputCustomType.Parameter("availabilityZoneId") String availabilityZoneId,
        @OutputCustomType.Parameter("availabilityZoneName") String availabilityZoneName,
        @OutputCustomType.Parameter("creationToken") String creationToken,
        @OutputCustomType.Parameter("dnsName") String dnsName,
        @OutputCustomType.Parameter("encrypted") Boolean encrypted,
        @OutputCustomType.Parameter("fileSystemId") String fileSystemId,
        @OutputCustomType.Parameter("id") String id,
        @OutputCustomType.Parameter("kmsKeyId") String kmsKeyId,
        @OutputCustomType.Parameter("lifecyclePolicy") GetFileSystemLifecyclePolicy lifecyclePolicy,
        @OutputCustomType.Parameter("performanceMode") String performanceMode,
        @OutputCustomType.Parameter("provisionedThroughputInMibps") Double provisionedThroughputInMibps,
        @OutputCustomType.Parameter("sizeInBytes") Integer sizeInBytes,
        @OutputCustomType.Parameter("tags") Map<String,String> tags,
        @OutputCustomType.Parameter("throughputMode") String throughputMode) {
        this.arn = arn;
        this.availabilityZoneId = availabilityZoneId;
        this.availabilityZoneName = availabilityZoneName;
        this.creationToken = creationToken;
        this.dnsName = dnsName;
        this.encrypted = encrypted;
        this.fileSystemId = fileSystemId;
        this.id = id;
        this.kmsKeyId = kmsKeyId;
        this.lifecyclePolicy = lifecyclePolicy;
        this.performanceMode = performanceMode;
        this.provisionedThroughputInMibps = provisionedThroughputInMibps;
        this.sizeInBytes = sizeInBytes;
        this.tags = tags;
        this.throughputMode = throughputMode;
    }

    /**
     * Amazon Resource Name of the file system.
     * 
    */
    public String getArn() {
        return this.arn;
    }
    /**
     * The identifier of the Availability Zone in which the file system's One Zone storage classes exist.
     * 
    */
    public String getAvailabilityZoneId() {
        return this.availabilityZoneId;
    }
    /**
     * The Availability Zone name in which the file system's One Zone storage classes exist.
     * 
    */
    public String getAvailabilityZoneName() {
        return this.availabilityZoneName;
    }
    public String getCreationToken() {
        return this.creationToken;
    }
    /**
     * The DNS name for the filesystem per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
     * 
    */
    public String getDnsName() {
        return this.dnsName;
    }
    /**
     * Whether EFS is encrypted.
     * 
    */
    public Boolean getEncrypted() {
        return this.encrypted;
    }
    public String getFileSystemId() {
        return this.fileSystemId;
    }
    /**
     * The provider-assigned unique ID for this managed resource.
     * 
    */
    public String getId() {
        return this.id;
    }
    /**
     * The ARN for the KMS encryption key.
     * 
    */
    public String getKmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * A file system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object.
     * 
    */
    public GetFileSystemLifecyclePolicy getLifecyclePolicy() {
        return this.lifecyclePolicy;
    }
    /**
     * The file system performance mode.
     * 
    */
    public String getPerformanceMode() {
        return this.performanceMode;
    }
    /**
     * The throughput, measured in MiB/s, that you want to provision for the file system.
     * * `tags` -A map of tags to assign to the file system.
     * 
    */
    public Double getProvisionedThroughputInMibps() {
        return this.provisionedThroughputInMibps;
    }
    /**
     * The current byte count used by the file system.
     * 
    */
    public Integer getSizeInBytes() {
        return this.sizeInBytes;
    }
    public Map<String,String> getTags() {
        return this.tags;
    }
    /**
     * Throughput mode for the file system.
     * 
    */
    public String getThroughputMode() {
        return this.throughputMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFileSystemResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String arn;
        private String availabilityZoneId;
        private String availabilityZoneName;
        private String creationToken;
        private String dnsName;
        private Boolean encrypted;
        private String fileSystemId;
        private String id;
        private String kmsKeyId;
        private GetFileSystemLifecyclePolicy lifecyclePolicy;
        private String performanceMode;
        private Double provisionedThroughputInMibps;
        private Integer sizeInBytes;
        private Map<String,String> tags;
        private String throughputMode;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFileSystemResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.availabilityZoneId = defaults.availabilityZoneId;
    	      this.availabilityZoneName = defaults.availabilityZoneName;
    	      this.creationToken = defaults.creationToken;
    	      this.dnsName = defaults.dnsName;
    	      this.encrypted = defaults.encrypted;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.lifecyclePolicy = defaults.lifecyclePolicy;
    	      this.performanceMode = defaults.performanceMode;
    	      this.provisionedThroughputInMibps = defaults.provisionedThroughputInMibps;
    	      this.sizeInBytes = defaults.sizeInBytes;
    	      this.tags = defaults.tags;
    	      this.throughputMode = defaults.throughputMode;
        }

        public Builder setArn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }

        public Builder setAvailabilityZoneId(String availabilityZoneId) {
            this.availabilityZoneId = Objects.requireNonNull(availabilityZoneId);
            return this;
        }

        public Builder setAvailabilityZoneName(String availabilityZoneName) {
            this.availabilityZoneName = Objects.requireNonNull(availabilityZoneName);
            return this;
        }

        public Builder setCreationToken(String creationToken) {
            this.creationToken = Objects.requireNonNull(creationToken);
            return this;
        }

        public Builder setDnsName(String dnsName) {
            this.dnsName = Objects.requireNonNull(dnsName);
            return this;
        }

        public Builder setEncrypted(Boolean encrypted) {
            this.encrypted = Objects.requireNonNull(encrypted);
            return this;
        }

        public Builder setFileSystemId(String fileSystemId) {
            this.fileSystemId = Objects.requireNonNull(fileSystemId);
            return this;
        }

        public Builder setId(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }

        public Builder setKmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }

        public Builder setLifecyclePolicy(GetFileSystemLifecyclePolicy lifecyclePolicy) {
            this.lifecyclePolicy = Objects.requireNonNull(lifecyclePolicy);
            return this;
        }

        public Builder setPerformanceMode(String performanceMode) {
            this.performanceMode = Objects.requireNonNull(performanceMode);
            return this;
        }

        public Builder setProvisionedThroughputInMibps(Double provisionedThroughputInMibps) {
            this.provisionedThroughputInMibps = Objects.requireNonNull(provisionedThroughputInMibps);
            return this;
        }

        public Builder setSizeInBytes(Integer sizeInBytes) {
            this.sizeInBytes = Objects.requireNonNull(sizeInBytes);
            return this;
        }

        public Builder setTags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }

        public Builder setThroughputMode(String throughputMode) {
            this.throughputMode = Objects.requireNonNull(throughputMode);
            return this;
        }
        public GetFileSystemResult build() {
            return new GetFileSystemResult(arn, availabilityZoneId, availabilityZoneName, creationToken, dnsName, encrypted, fileSystemId, id, kmsKeyId, lifecyclePolicy, performanceMode, provisionedThroughputInMibps, sizeInBytes, tags, throughputMode);
        }
    }
}
