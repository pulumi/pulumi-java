// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apprunner.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServiceSourceConfigurationImageRepositoryImageConfigurationGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceSourceConfigurationImageRepositoryImageConfigurationGetArgs Empty = new ServiceSourceConfigurationImageRepositoryImageConfigurationGetArgs();

    /**
     * The port that your application listens to in the container. Defaults to `"8080"`.
     * 
     */
    @InputImport(name="port")
    private final @Nullable Input<String> port;

    public Input<String> getPort() {
        return this.port == null ? Input.empty() : this.port;
    }

    /**
     * Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.
     * 
     */
    @InputImport(name="runtimeEnvironmentVariables")
    private final @Nullable Input<Map<String,String>> runtimeEnvironmentVariables;

    public Input<Map<String,String>> getRuntimeEnvironmentVariables() {
        return this.runtimeEnvironmentVariables == null ? Input.empty() : this.runtimeEnvironmentVariables;
    }

    /**
     * A command App Runner runs to start the application in the source image. If specified, this command overrides the Docker imageâ€™s default start command.
     * 
     */
    @InputImport(name="startCommand")
    private final @Nullable Input<String> startCommand;

    public Input<String> getStartCommand() {
        return this.startCommand == null ? Input.empty() : this.startCommand;
    }

    public ServiceSourceConfigurationImageRepositoryImageConfigurationGetArgs(
        @Nullable Input<String> port,
        @Nullable Input<Map<String,String>> runtimeEnvironmentVariables,
        @Nullable Input<String> startCommand) {
        this.port = port;
        this.runtimeEnvironmentVariables = runtimeEnvironmentVariables;
        this.startCommand = startCommand;
    }

    private ServiceSourceConfigurationImageRepositoryImageConfigurationGetArgs() {
        this.port = Input.empty();
        this.runtimeEnvironmentVariables = Input.empty();
        this.startCommand = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceSourceConfigurationImageRepositoryImageConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> port;
        private @Nullable Input<Map<String,String>> runtimeEnvironmentVariables;
        private @Nullable Input<String> startCommand;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceSourceConfigurationImageRepositoryImageConfigurationGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.port = defaults.port;
    	      this.runtimeEnvironmentVariables = defaults.runtimeEnvironmentVariables;
    	      this.startCommand = defaults.startCommand;
        }

        public Builder setPort(@Nullable Input<String> port) {
            this.port = port;
            return this;
        }

        public Builder setPort(@Nullable String port) {
            this.port = Input.ofNullable(port);
            return this;
        }

        public Builder setRuntimeEnvironmentVariables(@Nullable Input<Map<String,String>> runtimeEnvironmentVariables) {
            this.runtimeEnvironmentVariables = runtimeEnvironmentVariables;
            return this;
        }

        public Builder setRuntimeEnvironmentVariables(@Nullable Map<String,String> runtimeEnvironmentVariables) {
            this.runtimeEnvironmentVariables = Input.ofNullable(runtimeEnvironmentVariables);
            return this;
        }

        public Builder setStartCommand(@Nullable Input<String> startCommand) {
            this.startCommand = startCommand;
            return this;
        }

        public Builder setStartCommand(@Nullable String startCommand) {
            this.startCommand = Input.ofNullable(startCommand);
            return this;
        }
        public ServiceSourceConfigurationImageRepositoryImageConfigurationGetArgs build() {
            return new ServiceSourceConfigurationImageRepositoryImageConfigurationGetArgs(port, runtimeEnvironmentVariables, startCommand);
        }
    }
}
