// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elastictranscoder;

import io.pulumi.aws.elastictranscoder.inputs.PresetAudioArgs;
import io.pulumi.aws.elastictranscoder.inputs.PresetAudioCodecOptionsArgs;
import io.pulumi.aws.elastictranscoder.inputs.PresetThumbnailsArgs;
import io.pulumi.aws.elastictranscoder.inputs.PresetVideoArgs;
import io.pulumi.aws.elastictranscoder.inputs.PresetVideoWatermarkArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PresetArgs extends io.pulumi.resources.ResourceArgs {

    public static final PresetArgs Empty = new PresetArgs();

    /**
     * Audio parameters object (documented below).
     * 
     */
    @Import(name="audio")
      private final @Nullable Output<PresetAudioArgs> audio;

    public Output<PresetAudioArgs> getAudio() {
        return this.audio == null ? Output.empty() : this.audio;
    }

    /**
     * Codec options for the audio parameters (documented below)
     * 
     */
    @Import(name="audioCodecOptions")
      private final @Nullable Output<PresetAudioCodecOptionsArgs> audioCodecOptions;

    public Output<PresetAudioCodecOptionsArgs> getAudioCodecOptions() {
        return this.audioCodecOptions == null ? Output.empty() : this.audioCodecOptions;
    }

    /**
     * The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
     * 
     */
    @Import(name="container", required=true)
      private final Output<String> container;

    public Output<String> getContainer() {
        return this.container;
    }

    /**
     * A description of the preset (maximum 255 characters)
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * The name of the preset. (maximum 40 characters)
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Thumbnail parameters object (documented below)
     * 
     */
    @Import(name="thumbnails")
      private final @Nullable Output<PresetThumbnailsArgs> thumbnails;

    public Output<PresetThumbnailsArgs> getThumbnails() {
        return this.thumbnails == null ? Output.empty() : this.thumbnails;
    }

    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    /**
     * Video parameters object (documented below)
     * 
     */
    @Import(name="video")
      private final @Nullable Output<PresetVideoArgs> video;

    public Output<PresetVideoArgs> getVideo() {
        return this.video == null ? Output.empty() : this.video;
    }

    /**
     * Codec options for the video parameters
     * 
     */
    @Import(name="videoCodecOptions")
      private final @Nullable Output<Map<String,String>> videoCodecOptions;

    public Output<Map<String,String>> getVideoCodecOptions() {
        return this.videoCodecOptions == null ? Output.empty() : this.videoCodecOptions;
    }

    /**
     * Watermark parameters for the video parameters (documented below)
     * 
     */
    @Import(name="videoWatermarks")
      private final @Nullable Output<List<PresetVideoWatermarkArgs>> videoWatermarks;

    public Output<List<PresetVideoWatermarkArgs>> getVideoWatermarks() {
        return this.videoWatermarks == null ? Output.empty() : this.videoWatermarks;
    }

    public PresetArgs(
        @Nullable Output<PresetAudioArgs> audio,
        @Nullable Output<PresetAudioCodecOptionsArgs> audioCodecOptions,
        Output<String> container,
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        @Nullable Output<PresetThumbnailsArgs> thumbnails,
        @Nullable Output<String> type,
        @Nullable Output<PresetVideoArgs> video,
        @Nullable Output<Map<String,String>> videoCodecOptions,
        @Nullable Output<List<PresetVideoWatermarkArgs>> videoWatermarks) {
        this.audio = audio;
        this.audioCodecOptions = audioCodecOptions;
        this.container = Objects.requireNonNull(container, "expected parameter 'container' to be non-null");
        this.description = description;
        this.name = name;
        this.thumbnails = thumbnails;
        this.type = type;
        this.video = video;
        this.videoCodecOptions = videoCodecOptions;
        this.videoWatermarks = videoWatermarks;
    }

    private PresetArgs() {
        this.audio = Output.empty();
        this.audioCodecOptions = Output.empty();
        this.container = Output.empty();
        this.description = Output.empty();
        this.name = Output.empty();
        this.thumbnails = Output.empty();
        this.type = Output.empty();
        this.video = Output.empty();
        this.videoCodecOptions = Output.empty();
        this.videoWatermarks = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PresetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<PresetAudioArgs> audio;
        private @Nullable Output<PresetAudioCodecOptionsArgs> audioCodecOptions;
        private Output<String> container;
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private @Nullable Output<PresetThumbnailsArgs> thumbnails;
        private @Nullable Output<String> type;
        private @Nullable Output<PresetVideoArgs> video;
        private @Nullable Output<Map<String,String>> videoCodecOptions;
        private @Nullable Output<List<PresetVideoWatermarkArgs>> videoWatermarks;

        public Builder() {
    	      // Empty
        }

        public Builder(PresetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audio = defaults.audio;
    	      this.audioCodecOptions = defaults.audioCodecOptions;
    	      this.container = defaults.container;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.thumbnails = defaults.thumbnails;
    	      this.type = defaults.type;
    	      this.video = defaults.video;
    	      this.videoCodecOptions = defaults.videoCodecOptions;
    	      this.videoWatermarks = defaults.videoWatermarks;
        }

        public Builder audio(@Nullable Output<PresetAudioArgs> audio) {
            this.audio = audio;
            return this;
        }

        public Builder audio(@Nullable PresetAudioArgs audio) {
            this.audio = Output.ofNullable(audio);
            return this;
        }

        public Builder audioCodecOptions(@Nullable Output<PresetAudioCodecOptionsArgs> audioCodecOptions) {
            this.audioCodecOptions = audioCodecOptions;
            return this;
        }

        public Builder audioCodecOptions(@Nullable PresetAudioCodecOptionsArgs audioCodecOptions) {
            this.audioCodecOptions = Output.ofNullable(audioCodecOptions);
            return this;
        }

        public Builder container(Output<String> container) {
            this.container = Objects.requireNonNull(container);
            return this;
        }

        public Builder container(String container) {
            this.container = Output.of(Objects.requireNonNull(container));
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder thumbnails(@Nullable Output<PresetThumbnailsArgs> thumbnails) {
            this.thumbnails = thumbnails;
            return this;
        }

        public Builder thumbnails(@Nullable PresetThumbnailsArgs thumbnails) {
            this.thumbnails = Output.ofNullable(thumbnails);
            return this;
        }

        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }

        public Builder video(@Nullable Output<PresetVideoArgs> video) {
            this.video = video;
            return this;
        }

        public Builder video(@Nullable PresetVideoArgs video) {
            this.video = Output.ofNullable(video);
            return this;
        }

        public Builder videoCodecOptions(@Nullable Output<Map<String,String>> videoCodecOptions) {
            this.videoCodecOptions = videoCodecOptions;
            return this;
        }

        public Builder videoCodecOptions(@Nullable Map<String,String> videoCodecOptions) {
            this.videoCodecOptions = Output.ofNullable(videoCodecOptions);
            return this;
        }

        public Builder videoWatermarks(@Nullable Output<List<PresetVideoWatermarkArgs>> videoWatermarks) {
            this.videoWatermarks = videoWatermarks;
            return this;
        }

        public Builder videoWatermarks(@Nullable List<PresetVideoWatermarkArgs> videoWatermarks) {
            this.videoWatermarks = Output.ofNullable(videoWatermarks);
            return this;
        }
        public PresetArgs build() {
            return new PresetArgs(audio, audioCodecOptions, container, description, name, thumbnails, type, video, videoCodecOptions, videoWatermarks);
        }
    }
}
