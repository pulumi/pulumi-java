// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.dynamodb;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TableItemArgs extends io.pulumi.resources.ResourceArgs {

    public static final TableItemArgs Empty = new TableItemArgs();

    /**
     * Hash key to use for lookups and identification of the item
     * 
     */
    @Import(name="hashKey", required=true)
      private final Output<String> hashKey;

    public Output<String> getHashKey() {
        return this.hashKey;
    }

    /**
     * JSON representation of a map of attribute name/value pairs, one for each attribute.
     * Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
     * 
     */
    @Import(name="item", required=true)
      private final Output<String> item;

    public Output<String> getItem() {
        return this.item;
    }

    /**
     * Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
     * 
     */
    @Import(name="rangeKey")
      private final @Nullable Output<String> rangeKey;

    public Output<String> getRangeKey() {
        return this.rangeKey == null ? Output.empty() : this.rangeKey;
    }

    /**
     * The name of the table to contain the item.
     * 
     */
    @Import(name="tableName", required=true)
      private final Output<String> tableName;

    public Output<String> getTableName() {
        return this.tableName;
    }

    public TableItemArgs(
        Output<String> hashKey,
        Output<String> item,
        @Nullable Output<String> rangeKey,
        Output<String> tableName) {
        this.hashKey = Objects.requireNonNull(hashKey, "expected parameter 'hashKey' to be non-null");
        this.item = Objects.requireNonNull(item, "expected parameter 'item' to be non-null");
        this.rangeKey = rangeKey;
        this.tableName = Objects.requireNonNull(tableName, "expected parameter 'tableName' to be non-null");
    }

    private TableItemArgs() {
        this.hashKey = Output.empty();
        this.item = Output.empty();
        this.rangeKey = Output.empty();
        this.tableName = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> hashKey;
        private Output<String> item;
        private @Nullable Output<String> rangeKey;
        private Output<String> tableName;

        public Builder() {
    	      // Empty
        }

        public Builder(TableItemArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hashKey = defaults.hashKey;
    	      this.item = defaults.item;
    	      this.rangeKey = defaults.rangeKey;
    	      this.tableName = defaults.tableName;
        }

        public Builder hashKey(Output<String> hashKey) {
            this.hashKey = Objects.requireNonNull(hashKey);
            return this;
        }
        public Builder hashKey(String hashKey) {
            this.hashKey = Output.of(Objects.requireNonNull(hashKey));
            return this;
        }
        public Builder item(Output<String> item) {
            this.item = Objects.requireNonNull(item);
            return this;
        }
        public Builder item(String item) {
            this.item = Output.of(Objects.requireNonNull(item));
            return this;
        }
        public Builder rangeKey(@Nullable Output<String> rangeKey) {
            this.rangeKey = rangeKey;
            return this;
        }
        public Builder rangeKey(@Nullable String rangeKey) {
            this.rangeKey = Output.ofNullable(rangeKey);
            return this;
        }
        public Builder tableName(Output<String> tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }
        public Builder tableName(String tableName) {
            this.tableName = Output.of(Objects.requireNonNull(tableName));
            return this;
        }        public TableItemArgs build() {
            return new TableItemArgs(hashKey, item, rangeKey, tableName);
        }
    }
}
