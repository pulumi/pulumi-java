// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.datasync;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LocationFsxWindowsArgs extends io.pulumi.resources.ResourceArgs {

    public static final LocationFsxWindowsArgs Empty = new LocationFsxWindowsArgs();

    /**
     * The name of the Windows domain that the FSx for Windows server belongs to.
     * 
     */
    @Import(name="domain")
      private final @Nullable Output<String> domain;

    public Output<String> getDomain() {
        return this.domain == null ? Output.empty() : this.domain;
    }

    /**
     * The Amazon Resource Name (ARN) for the FSx for Windows file system.
     * 
     */
    @Import(name="fsxFilesystemArn", required=true)
      private final Output<String> fsxFilesystemArn;

    public Output<String> getFsxFilesystemArn() {
        return this.fsxFilesystemArn;
    }

    /**
     * The password of the user who has the permissions to access files and folders in the FSx for Windows file system.
     * 
     */
    @Import(name="password", required=true)
      private final Output<String> password;

    public Output<String> getPassword() {
        return this.password;
    }

    /**
     * The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Windows file system.
     * 
     */
    @Import(name="securityGroupArns", required=true)
      private final Output<List<String>> securityGroupArns;

    public Output<List<String>> getSecurityGroupArns() {
        return this.securityGroupArns;
    }

    /**
     * Subdirectory to perform actions as source or destination.
     * 
     */
    @Import(name="subdirectory")
      private final @Nullable Output<String> subdirectory;

    public Output<String> getSubdirectory() {
        return this.subdirectory == null ? Output.empty() : this.subdirectory;
    }

    /**
     * Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The user who has the permissions to access files and folders in the FSx for Windows file system.
     * 
     */
    @Import(name="user", required=true)
      private final Output<String> user;

    public Output<String> getUser() {
        return this.user;
    }

    public LocationFsxWindowsArgs(
        @Nullable Output<String> domain,
        Output<String> fsxFilesystemArn,
        Output<String> password,
        Output<List<String>> securityGroupArns,
        @Nullable Output<String> subdirectory,
        @Nullable Output<Map<String,String>> tags,
        Output<String> user) {
        this.domain = domain;
        this.fsxFilesystemArn = Objects.requireNonNull(fsxFilesystemArn, "expected parameter 'fsxFilesystemArn' to be non-null");
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.securityGroupArns = Objects.requireNonNull(securityGroupArns, "expected parameter 'securityGroupArns' to be non-null");
        this.subdirectory = subdirectory;
        this.tags = tags;
        this.user = Objects.requireNonNull(user, "expected parameter 'user' to be non-null");
    }

    private LocationFsxWindowsArgs() {
        this.domain = Output.empty();
        this.fsxFilesystemArn = Output.empty();
        this.password = Output.empty();
        this.securityGroupArns = Output.empty();
        this.subdirectory = Output.empty();
        this.tags = Output.empty();
        this.user = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocationFsxWindowsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> domain;
        private Output<String> fsxFilesystemArn;
        private Output<String> password;
        private Output<List<String>> securityGroupArns;
        private @Nullable Output<String> subdirectory;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> user;

        public Builder() {
    	      // Empty
        }

        public Builder(LocationFsxWindowsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.fsxFilesystemArn = defaults.fsxFilesystemArn;
    	      this.password = defaults.password;
    	      this.securityGroupArns = defaults.securityGroupArns;
    	      this.subdirectory = defaults.subdirectory;
    	      this.tags = defaults.tags;
    	      this.user = defaults.user;
        }

        public Builder domain(@Nullable Output<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder domain(@Nullable String domain) {
            this.domain = Output.ofNullable(domain);
            return this;
        }

        public Builder fsxFilesystemArn(Output<String> fsxFilesystemArn) {
            this.fsxFilesystemArn = Objects.requireNonNull(fsxFilesystemArn);
            return this;
        }

        public Builder fsxFilesystemArn(String fsxFilesystemArn) {
            this.fsxFilesystemArn = Output.of(Objects.requireNonNull(fsxFilesystemArn));
            return this;
        }

        public Builder password(Output<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }

        public Builder password(String password) {
            this.password = Output.of(Objects.requireNonNull(password));
            return this;
        }

        public Builder securityGroupArns(Output<List<String>> securityGroupArns) {
            this.securityGroupArns = Objects.requireNonNull(securityGroupArns);
            return this;
        }

        public Builder securityGroupArns(List<String> securityGroupArns) {
            this.securityGroupArns = Output.of(Objects.requireNonNull(securityGroupArns));
            return this;
        }

        public Builder subdirectory(@Nullable Output<String> subdirectory) {
            this.subdirectory = subdirectory;
            return this;
        }

        public Builder subdirectory(@Nullable String subdirectory) {
            this.subdirectory = Output.ofNullable(subdirectory);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder user(Output<String> user) {
            this.user = Objects.requireNonNull(user);
            return this;
        }

        public Builder user(String user) {
            this.user = Output.of(Objects.requireNonNull(user));
            return this;
        }
        public LocationFsxWindowsArgs build() {
            return new LocationFsxWindowsArgs(domain, fsxFilesystemArn, password, securityGroupArns, subdirectory, tags, user);
        }
    }
}
