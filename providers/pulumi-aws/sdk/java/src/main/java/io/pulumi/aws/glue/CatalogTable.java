// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.glue.CatalogTableArgs;
import io.pulumi.aws.glue.inputs.CatalogTableState;
import io.pulumi.aws.glue.outputs.CatalogTablePartitionIndex;
import io.pulumi.aws.glue.outputs.CatalogTablePartitionKey;
import io.pulumi.aws.glue.outputs.CatalogTableStorageDescriptor;
import io.pulumi.aws.glue.outputs.CatalogTableTargetTable;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a Glue Catalog Table Resource. You can refer to the [Glue Developer Guide](http://docs.aws.amazon.com/glue/latest/dg/populate-data-catalog.html) for a full explanation of the Glue Data Catalog functionality.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Glue Tables can be imported with their catalog ID (usually AWS account ID), database name, and table name, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:glue/catalogTable:CatalogTable MyTable 123456789012:MyDatabase:MyTable
 * ```
 * 
 */
@ResourceType(type="aws:glue/catalogTable:CatalogTable")
public class CatalogTable extends io.pulumi.resources.CustomResource {
    /**
     * The ARN of the Glue Table.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the Glue Table.
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * ID of the Data Catalog in which the table resides.
     * 
     */
    @Export(name="catalogId", type=String.class, parameters={})
    private Output<String> catalogId;

    /**
     * @return ID of the Data Catalog in which the table resides.
     * 
     */
    public Output<String> catalogId() {
        return this.catalogId;
    }
    /**
     * Name of the catalog database that contains the target table.
     * 
     */
    @Export(name="databaseName", type=String.class, parameters={})
    private Output<String> databaseName;

    /**
     * @return Name of the catalog database that contains the target table.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }
    /**
     * Description of the table.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the table.
     * 
     */
    public Output</* @Nullable */ String> description() {
        return this.description;
    }
    /**
     * Name of the target table.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the target table.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Owner of the table.
     * 
     */
    @Export(name="owner", type=String.class, parameters={})
    private Output</* @Nullable */ String> owner;

    /**
     * @return Owner of the table.
     * 
     */
    public Output</* @Nullable */ String> owner() {
        return this.owner;
    }
    /**
     * Map of initialization parameters for the SerDe, in key-value form.
     * 
     */
    @Export(name="parameters", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> parameters;

    /**
     * @return Map of initialization parameters for the SerDe, in key-value form.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> parameters() {
        return this.parameters;
    }
    /**
     * Configuration block for a maximum of 3 partition indexes. See `partition_index` below.
     * 
     */
    @Export(name="partitionIndices", type=List.class, parameters={CatalogTablePartitionIndex.class})
    private Output<List<CatalogTablePartitionIndex>> partitionIndices;

    /**
     * @return Configuration block for a maximum of 3 partition indexes. See `partition_index` below.
     * 
     */
    public Output<List<CatalogTablePartitionIndex>> partitionIndices() {
        return this.partitionIndices;
    }
    /**
     * Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partition_keys` below.
     * 
     */
    @Export(name="partitionKeys", type=List.class, parameters={CatalogTablePartitionKey.class})
    private Output</* @Nullable */ List<CatalogTablePartitionKey>> partitionKeys;

    /**
     * @return Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partition_keys` below.
     * 
     */
    public Output</* @Nullable */ List<CatalogTablePartitionKey>> partitionKeys() {
        return this.partitionKeys;
    }
    /**
     * Retention time for this table.
     * 
     */
    @Export(name="retention", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> retention;

    /**
     * @return Retention time for this table.
     * 
     */
    public Output</* @Nullable */ Integer> retention() {
        return this.retention;
    }
    /**
     * Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storage_descriptor` below.
     * 
     */
    @Export(name="storageDescriptor", type=CatalogTableStorageDescriptor.class, parameters={})
    private Output</* @Nullable */ CatalogTableStorageDescriptor> storageDescriptor;

    /**
     * @return Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storage_descriptor` below.
     * 
     */
    public Output</* @Nullable */ CatalogTableStorageDescriptor> storageDescriptor() {
        return this.storageDescriptor;
    }
    /**
     * Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
     * 
     */
    @Export(name="tableType", type=String.class, parameters={})
    private Output</* @Nullable */ String> tableType;

    /**
     * @return Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
     * 
     */
    public Output</* @Nullable */ String> tableType() {
        return this.tableType;
    }
    /**
     * Configuration block of a target table for resource linking. See `target_table` below.
     * 
     */
    @Export(name="targetTable", type=CatalogTableTargetTable.class, parameters={})
    private Output</* @Nullable */ CatalogTableTargetTable> targetTable;

    /**
     * @return Configuration block of a target table for resource linking. See `target_table` below.
     * 
     */
    public Output</* @Nullable */ CatalogTableTargetTable> targetTable() {
        return this.targetTable;
    }
    /**
     * If the table is a view, the expanded text of the view; otherwise null.
     * 
     */
    @Export(name="viewExpandedText", type=String.class, parameters={})
    private Output</* @Nullable */ String> viewExpandedText;

    /**
     * @return If the table is a view, the expanded text of the view; otherwise null.
     * 
     */
    public Output</* @Nullable */ String> viewExpandedText() {
        return this.viewExpandedText;
    }
    /**
     * If the table is a view, the original text of the view; otherwise null.
     * 
     */
    @Export(name="viewOriginalText", type=String.class, parameters={})
    private Output</* @Nullable */ String> viewOriginalText;

    /**
     * @return If the table is a view, the original text of the view; otherwise null.
     * 
     */
    public Output</* @Nullable */ String> viewOriginalText() {
        return this.viewOriginalText;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CatalogTable(String name) {
        this(name, CatalogTableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CatalogTable(String name, CatalogTableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CatalogTable(String name, CatalogTableArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/catalogTable:CatalogTable", name, args == null ? CatalogTableArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CatalogTable(String name, Output<String> id, @Nullable CatalogTableState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:glue/catalogTable:CatalogTable", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CatalogTable get(String name, Output<String> id, @Nullable CatalogTableState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new CatalogTable(name, id, state, options);
    }
}
