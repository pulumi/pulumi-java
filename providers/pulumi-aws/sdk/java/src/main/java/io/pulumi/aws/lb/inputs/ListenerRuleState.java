// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lb.inputs;

import io.pulumi.aws.lb.inputs.ListenerRuleActionGetArgs;
import io.pulumi.aws.lb.inputs.ListenerRuleConditionGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ListenerRuleState extends io.pulumi.resources.ResourceArgs {

    public static final ListenerRuleState Empty = new ListenerRuleState();

    /**
     * An Action block. Action blocks are documented below.
     * 
     */
    @InputImport(name="actions")
    private final @Nullable Input<List<ListenerRuleActionGetArgs>> actions;

    public Input<List<ListenerRuleActionGetArgs>> getActions() {
        return this.actions == null ? Input.empty() : this.actions;
    }

    /**
     * The Amazon Resource Name (ARN) of the target group.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
     * 
     */
    @InputImport(name="conditions")
    private final @Nullable Input<List<ListenerRuleConditionGetArgs>> conditions;

    public Input<List<ListenerRuleConditionGetArgs>> getConditions() {
        return this.conditions == null ? Input.empty() : this.conditions;
    }

    /**
     * The ARN of the listener to which to attach the rule.
     * 
     */
    @InputImport(name="listenerArn")
    private final @Nullable Input<String> listenerArn;

    public Input<String> getListenerArn() {
        return this.listenerArn == null ? Input.empty() : this.listenerArn;
    }

    /**
     * The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
     * 
     */
    @InputImport(name="priority")
    private final @Nullable Input<Integer> priority;

    public Input<Integer> getPriority() {
        return this.priority == null ? Input.empty() : this.priority;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public ListenerRuleState(
        @Nullable Input<List<ListenerRuleActionGetArgs>> actions,
        @Nullable Input<String> arn,
        @Nullable Input<List<ListenerRuleConditionGetArgs>> conditions,
        @Nullable Input<String> listenerArn,
        @Nullable Input<Integer> priority,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.actions = actions;
        this.arn = arn;
        this.conditions = conditions;
        this.listenerArn = listenerArn;
        this.priority = priority;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private ListenerRuleState() {
        this.actions = Input.empty();
        this.arn = Input.empty();
        this.conditions = Input.empty();
        this.listenerArn = Input.empty();
        this.priority = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<ListenerRuleActionGetArgs>> actions;
        private @Nullable Input<String> arn;
        private @Nullable Input<List<ListenerRuleConditionGetArgs>> conditions;
        private @Nullable Input<String> listenerArn;
        private @Nullable Input<Integer> priority;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(ListenerRuleState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.arn = defaults.arn;
    	      this.conditions = defaults.conditions;
    	      this.listenerArn = defaults.listenerArn;
    	      this.priority = defaults.priority;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setActions(@Nullable Input<List<ListenerRuleActionGetArgs>> actions) {
            this.actions = actions;
            return this;
        }

        public Builder setActions(@Nullable List<ListenerRuleActionGetArgs> actions) {
            this.actions = Input.ofNullable(actions);
            return this;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setConditions(@Nullable Input<List<ListenerRuleConditionGetArgs>> conditions) {
            this.conditions = conditions;
            return this;
        }

        public Builder setConditions(@Nullable List<ListenerRuleConditionGetArgs> conditions) {
            this.conditions = Input.ofNullable(conditions);
            return this;
        }

        public Builder setListenerArn(@Nullable Input<String> listenerArn) {
            this.listenerArn = listenerArn;
            return this;
        }

        public Builder setListenerArn(@Nullable String listenerArn) {
            this.listenerArn = Input.ofNullable(listenerArn);
            return this;
        }

        public Builder setPriority(@Nullable Input<Integer> priority) {
            this.priority = priority;
            return this;
        }

        public Builder setPriority(@Nullable Integer priority) {
            this.priority = Input.ofNullable(priority);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public ListenerRuleState build() {
            return new ListenerRuleState(actions, arn, conditions, listenerArn, priority, tags, tagsAll);
        }
    }
}
