// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class CatalogTableTargetTableGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final CatalogTableTargetTableGetArgs Empty = new CatalogTableTargetTableGetArgs();

    /**
     * ID of the Data Catalog in which the table resides.
     * 
     */
    @Import(name="catalogId", required=true)
      private final Output<String> catalogId;

    public Output<String> getCatalogId() {
        return this.catalogId;
    }

    /**
     * Name of the catalog database that contains the target table.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName;
    }

    /**
     * Name of the target table.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    public CatalogTableTargetTableGetArgs(
        Output<String> catalogId,
        Output<String> databaseName,
        Output<String> name) {
        this.catalogId = Objects.requireNonNull(catalogId, "expected parameter 'catalogId' to be non-null");
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
    }

    private CatalogTableTargetTableGetArgs() {
        this.catalogId = Output.empty();
        this.databaseName = Output.empty();
        this.name = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CatalogTableTargetTableGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> catalogId;
        private Output<String> databaseName;
        private Output<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(CatalogTableTargetTableGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.databaseName = defaults.databaseName;
    	      this.name = defaults.name;
        }

        public Builder catalogId(Output<String> catalogId) {
            this.catalogId = Objects.requireNonNull(catalogId);
            return this;
        }
        public Builder catalogId(String catalogId) {
            this.catalogId = Output.of(Objects.requireNonNull(catalogId));
            return this;
        }
        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }        public CatalogTableTargetTableGetArgs build() {
            return new CatalogTableTargetTableGetArgs(catalogId, databaseName, name);
        }
    }
}
