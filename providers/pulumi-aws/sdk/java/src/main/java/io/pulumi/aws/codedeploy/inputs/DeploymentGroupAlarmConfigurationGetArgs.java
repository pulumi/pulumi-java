// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codedeploy.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DeploymentGroupAlarmConfigurationGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DeploymentGroupAlarmConfigurationGetArgs Empty = new DeploymentGroupAlarmConfigurationGetArgs();

    /**
     * A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
     * 
     */
    @InputImport(name="alarms")
    private final @Nullable Input<List<String>> alarms;

    public Input<List<String>> getAlarms() {
        return this.alarms == null ? Input.empty() : this.alarms;
    }

    /**
     * Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
     * 
     */
    @InputImport(name="enabled")
    private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
     * * `true`: The deployment will proceed even if alarm status information can't be retrieved.
     * * `false`: The deployment will stop if alarm status information can't be retrieved.
     * 
     */
    @InputImport(name="ignorePollAlarmFailure")
    private final @Nullable Input<Boolean> ignorePollAlarmFailure;

    public Input<Boolean> getIgnorePollAlarmFailure() {
        return this.ignorePollAlarmFailure == null ? Input.empty() : this.ignorePollAlarmFailure;
    }

    public DeploymentGroupAlarmConfigurationGetArgs(
        @Nullable Input<List<String>> alarms,
        @Nullable Input<Boolean> enabled,
        @Nullable Input<Boolean> ignorePollAlarmFailure) {
        this.alarms = alarms;
        this.enabled = enabled;
        this.ignorePollAlarmFailure = ignorePollAlarmFailure;
    }

    private DeploymentGroupAlarmConfigurationGetArgs() {
        this.alarms = Input.empty();
        this.enabled = Input.empty();
        this.ignorePollAlarmFailure = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentGroupAlarmConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> alarms;
        private @Nullable Input<Boolean> enabled;
        private @Nullable Input<Boolean> ignorePollAlarmFailure;

        public Builder() {
    	      // Empty
        }

        public Builder(DeploymentGroupAlarmConfigurationGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alarms = defaults.alarms;
    	      this.enabled = defaults.enabled;
    	      this.ignorePollAlarmFailure = defaults.ignorePollAlarmFailure;
        }

        public Builder setAlarms(@Nullable Input<List<String>> alarms) {
            this.alarms = alarms;
            return this;
        }

        public Builder setAlarms(@Nullable List<String> alarms) {
            this.alarms = Input.ofNullable(alarms);
            return this;
        }

        public Builder setEnabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder setEnabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder setIgnorePollAlarmFailure(@Nullable Input<Boolean> ignorePollAlarmFailure) {
            this.ignorePollAlarmFailure = ignorePollAlarmFailure;
            return this;
        }

        public Builder setIgnorePollAlarmFailure(@Nullable Boolean ignorePollAlarmFailure) {
            this.ignorePollAlarmFailure = Input.ofNullable(ignorePollAlarmFailure);
            return this;
        }
        public DeploymentGroupAlarmConfigurationGetArgs build() {
            return new DeploymentGroupAlarmConfigurationGetArgs(alarms, enabled, ignorePollAlarmFailure);
        }
    }
}
