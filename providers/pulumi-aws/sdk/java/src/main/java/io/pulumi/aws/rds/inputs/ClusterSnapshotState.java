// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterSnapshotState extends io.pulumi.resources.ResourceArgs {

    public static final ClusterSnapshotState Empty = new ClusterSnapshotState();

    /**
     * Specifies the allocated storage size in gigabytes (GB).
     * 
     */
    @InputImport(name="allocatedStorage")
      private final @Nullable Output<Integer> allocatedStorage;

    public Output<Integer> getAllocatedStorage() {
        return this.allocatedStorage == null ? Output.empty() : this.allocatedStorage;
    }

    /**
     * List of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
     * 
     */
    @InputImport(name="availabilityZones")
      private final @Nullable Output<List<String>> availabilityZones;

    public Output<List<String>> getAvailabilityZones() {
        return this.availabilityZones == null ? Output.empty() : this.availabilityZones;
    }

    /**
     * The DB Cluster Identifier from which to take the snapshot.
     * 
     */
    @InputImport(name="dbClusterIdentifier")
      private final @Nullable Output<String> dbClusterIdentifier;

    public Output<String> getDbClusterIdentifier() {
        return this.dbClusterIdentifier == null ? Output.empty() : this.dbClusterIdentifier;
    }

    /**
     * The Amazon Resource Name (ARN) for the DB Cluster Snapshot.
     * 
     */
    @InputImport(name="dbClusterSnapshotArn")
      private final @Nullable Output<String> dbClusterSnapshotArn;

    public Output<String> getDbClusterSnapshotArn() {
        return this.dbClusterSnapshotArn == null ? Output.empty() : this.dbClusterSnapshotArn;
    }

    /**
     * The Identifier for the snapshot.
     * 
     */
    @InputImport(name="dbClusterSnapshotIdentifier")
      private final @Nullable Output<String> dbClusterSnapshotIdentifier;

    public Output<String> getDbClusterSnapshotIdentifier() {
        return this.dbClusterSnapshotIdentifier == null ? Output.empty() : this.dbClusterSnapshotIdentifier;
    }

    /**
     * Specifies the name of the database engine.
     * 
     */
    @InputImport(name="engine")
      private final @Nullable Output<String> engine;

    public Output<String> getEngine() {
        return this.engine == null ? Output.empty() : this.engine;
    }

    /**
     * Version of the database engine for this DB cluster snapshot.
     * 
     */
    @InputImport(name="engineVersion")
      private final @Nullable Output<String> engineVersion;

    public Output<String> getEngineVersion() {
        return this.engineVersion == null ? Output.empty() : this.engineVersion;
    }

    /**
     * If storage_encrypted is true, the AWS KMS key identifier for the encrypted DB cluster snapshot.
     * 
     */
    @InputImport(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Output.empty() : this.kmsKeyId;
    }

    /**
     * License model information for the restored DB cluster.
     * 
     */
    @InputImport(name="licenseModel")
      private final @Nullable Output<String> licenseModel;

    public Output<String> getLicenseModel() {
        return this.licenseModel == null ? Output.empty() : this.licenseModel;
    }

    /**
     * Port that the DB cluster was listening on at the time of the snapshot.
     * 
     */
    @InputImport(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    @InputImport(name="snapshotType")
      private final @Nullable Output<String> snapshotType;

    public Output<String> getSnapshotType() {
        return this.snapshotType == null ? Output.empty() : this.snapshotType;
    }

    @InputImport(name="sourceDbClusterSnapshotArn")
      private final @Nullable Output<String> sourceDbClusterSnapshotArn;

    public Output<String> getSourceDbClusterSnapshotArn() {
        return this.sourceDbClusterSnapshotArn == null ? Output.empty() : this.sourceDbClusterSnapshotArn;
    }

    /**
     * The status of this DB Cluster Snapshot.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Output<String> status;

    public Output<String> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * Specifies whether the DB cluster snapshot is encrypted.
     * 
     */
    @InputImport(name="storageEncrypted")
      private final @Nullable Output<Boolean> storageEncrypted;

    public Output<Boolean> getStorageEncrypted() {
        return this.storageEncrypted == null ? Output.empty() : this.storageEncrypted;
    }

    /**
     * A map of tags to assign to the DB cluster. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * The VPC ID associated with the DB cluster snapshot.
     * 
     */
    @InputImport(name="vpcId")
      private final @Nullable Output<String> vpcId;

    public Output<String> getVpcId() {
        return this.vpcId == null ? Output.empty() : this.vpcId;
    }

    public ClusterSnapshotState(
        @Nullable Output<Integer> allocatedStorage,
        @Nullable Output<List<String>> availabilityZones,
        @Nullable Output<String> dbClusterIdentifier,
        @Nullable Output<String> dbClusterSnapshotArn,
        @Nullable Output<String> dbClusterSnapshotIdentifier,
        @Nullable Output<String> engine,
        @Nullable Output<String> engineVersion,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<String> licenseModel,
        @Nullable Output<Integer> port,
        @Nullable Output<String> snapshotType,
        @Nullable Output<String> sourceDbClusterSnapshotArn,
        @Nullable Output<String> status,
        @Nullable Output<Boolean> storageEncrypted,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> vpcId) {
        this.allocatedStorage = allocatedStorage;
        this.availabilityZones = availabilityZones;
        this.dbClusterIdentifier = dbClusterIdentifier;
        this.dbClusterSnapshotArn = dbClusterSnapshotArn;
        this.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier;
        this.engine = engine;
        this.engineVersion = engineVersion;
        this.kmsKeyId = kmsKeyId;
        this.licenseModel = licenseModel;
        this.port = port;
        this.snapshotType = snapshotType;
        this.sourceDbClusterSnapshotArn = sourceDbClusterSnapshotArn;
        this.status = status;
        this.storageEncrypted = storageEncrypted;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcId = vpcId;
    }

    private ClusterSnapshotState() {
        this.allocatedStorage = Output.empty();
        this.availabilityZones = Output.empty();
        this.dbClusterIdentifier = Output.empty();
        this.dbClusterSnapshotArn = Output.empty();
        this.dbClusterSnapshotIdentifier = Output.empty();
        this.engine = Output.empty();
        this.engineVersion = Output.empty();
        this.kmsKeyId = Output.empty();
        this.licenseModel = Output.empty();
        this.port = Output.empty();
        this.snapshotType = Output.empty();
        this.sourceDbClusterSnapshotArn = Output.empty();
        this.status = Output.empty();
        this.storageEncrypted = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.vpcId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterSnapshotState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> allocatedStorage;
        private @Nullable Output<List<String>> availabilityZones;
        private @Nullable Output<String> dbClusterIdentifier;
        private @Nullable Output<String> dbClusterSnapshotArn;
        private @Nullable Output<String> dbClusterSnapshotIdentifier;
        private @Nullable Output<String> engine;
        private @Nullable Output<String> engineVersion;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<String> licenseModel;
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> snapshotType;
        private @Nullable Output<String> sourceDbClusterSnapshotArn;
        private @Nullable Output<String> status;
        private @Nullable Output<Boolean> storageEncrypted;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterSnapshotState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedStorage = defaults.allocatedStorage;
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.dbClusterIdentifier = defaults.dbClusterIdentifier;
    	      this.dbClusterSnapshotArn = defaults.dbClusterSnapshotArn;
    	      this.dbClusterSnapshotIdentifier = defaults.dbClusterSnapshotIdentifier;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.port = defaults.port;
    	      this.snapshotType = defaults.snapshotType;
    	      this.sourceDbClusterSnapshotArn = defaults.sourceDbClusterSnapshotArn;
    	      this.status = defaults.status;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder allocatedStorage(@Nullable Output<Integer> allocatedStorage) {
            this.allocatedStorage = allocatedStorage;
            return this;
        }

        public Builder allocatedStorage(@Nullable Integer allocatedStorage) {
            this.allocatedStorage = Output.ofNullable(allocatedStorage);
            return this;
        }

        public Builder availabilityZones(@Nullable Output<List<String>> availabilityZones) {
            this.availabilityZones = availabilityZones;
            return this;
        }

        public Builder availabilityZones(@Nullable List<String> availabilityZones) {
            this.availabilityZones = Output.ofNullable(availabilityZones);
            return this;
        }

        public Builder dbClusterIdentifier(@Nullable Output<String> dbClusterIdentifier) {
            this.dbClusterIdentifier = dbClusterIdentifier;
            return this;
        }

        public Builder dbClusterIdentifier(@Nullable String dbClusterIdentifier) {
            this.dbClusterIdentifier = Output.ofNullable(dbClusterIdentifier);
            return this;
        }

        public Builder dbClusterSnapshotArn(@Nullable Output<String> dbClusterSnapshotArn) {
            this.dbClusterSnapshotArn = dbClusterSnapshotArn;
            return this;
        }

        public Builder dbClusterSnapshotArn(@Nullable String dbClusterSnapshotArn) {
            this.dbClusterSnapshotArn = Output.ofNullable(dbClusterSnapshotArn);
            return this;
        }

        public Builder dbClusterSnapshotIdentifier(@Nullable Output<String> dbClusterSnapshotIdentifier) {
            this.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier;
            return this;
        }

        public Builder dbClusterSnapshotIdentifier(@Nullable String dbClusterSnapshotIdentifier) {
            this.dbClusterSnapshotIdentifier = Output.ofNullable(dbClusterSnapshotIdentifier);
            return this;
        }

        public Builder engine(@Nullable Output<String> engine) {
            this.engine = engine;
            return this;
        }

        public Builder engine(@Nullable String engine) {
            this.engine = Output.ofNullable(engine);
            return this;
        }

        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = Output.ofNullable(engineVersion);
            return this;
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Output.ofNullable(kmsKeyId);
            return this;
        }

        public Builder licenseModel(@Nullable Output<String> licenseModel) {
            this.licenseModel = licenseModel;
            return this;
        }

        public Builder licenseModel(@Nullable String licenseModel) {
            this.licenseModel = Output.ofNullable(licenseModel);
            return this;
        }

        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }

        public Builder snapshotType(@Nullable Output<String> snapshotType) {
            this.snapshotType = snapshotType;
            return this;
        }

        public Builder snapshotType(@Nullable String snapshotType) {
            this.snapshotType = Output.ofNullable(snapshotType);
            return this;
        }

        public Builder sourceDbClusterSnapshotArn(@Nullable Output<String> sourceDbClusterSnapshotArn) {
            this.sourceDbClusterSnapshotArn = sourceDbClusterSnapshotArn;
            return this;
        }

        public Builder sourceDbClusterSnapshotArn(@Nullable String sourceDbClusterSnapshotArn) {
            this.sourceDbClusterSnapshotArn = Output.ofNullable(sourceDbClusterSnapshotArn);
            return this;
        }

        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Output.ofNullable(status);
            return this;
        }

        public Builder storageEncrypted(@Nullable Output<Boolean> storageEncrypted) {
            this.storageEncrypted = storageEncrypted;
            return this;
        }

        public Builder storageEncrypted(@Nullable Boolean storageEncrypted) {
            this.storageEncrypted = Output.ofNullable(storageEncrypted);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }

        public Builder vpcId(@Nullable Output<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }

        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = Output.ofNullable(vpcId);
            return this;
        }
        public ClusterSnapshotState build() {
            return new ClusterSnapshotState(allocatedStorage, availabilityZones, dbClusterIdentifier, dbClusterSnapshotArn, dbClusterSnapshotIdentifier, engine, engineVersion, kmsKeyId, licenseModel, port, snapshotType, sourceDbClusterSnapshotArn, status, storageEncrypted, tags, tagsAll, vpcId);
        }
    }
}
