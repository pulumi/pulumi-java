// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elastictranscoder.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PresetThumbnailsArgs extends io.pulumi.resources.ResourceArgs {

    public static final PresetThumbnailsArgs Empty = new PresetThumbnailsArgs();

    /**
     * The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
     * 
     */
    @InputImport(name="aspectRatio")
      private final @Nullable Input<String> aspectRatio;

    public Input<String> getAspectRatio() {
        return this.aspectRatio == null ? Input.empty() : this.aspectRatio;
    }

    /**
     * The format of thumbnails, if any. Valid formats are jpg and png.
     * 
     */
    @InputImport(name="format")
      private final @Nullable Input<String> format;

    public Input<String> getFormat() {
        return this.format == null ? Input.empty() : this.format;
    }

    /**
     * The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
     * 
     */
    @InputImport(name="interval")
      private final @Nullable Input<String> interval;

    public Input<String> getInterval() {
        return this.interval == null ? Input.empty() : this.interval;
    }

    /**
     * The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
     * 
     */
    @InputImport(name="maxHeight")
      private final @Nullable Input<String> maxHeight;

    public Input<String> getMaxHeight() {
        return this.maxHeight == null ? Input.empty() : this.maxHeight;
    }

    /**
     * The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
     * 
     */
    @InputImport(name="maxWidth")
      private final @Nullable Input<String> maxWidth;

    public Input<String> getMaxWidth() {
        return this.maxWidth == null ? Input.empty() : this.maxWidth;
    }

    /**
     * When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
     * 
     */
    @InputImport(name="paddingPolicy")
      private final @Nullable Input<String> paddingPolicy;

    public Input<String> getPaddingPolicy() {
        return this.paddingPolicy == null ? Input.empty() : this.paddingPolicy;
    }

    /**
     * The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `max_width`, `max_height`, `sizing_policy`, and `padding_policy` instead of `resolution` and `aspect_ratio`. The two groups of settings are mutually exclusive. Do not use them together)
     * 
     */
    @InputImport(name="resolution")
      private final @Nullable Input<String> resolution;

    public Input<String> getResolution() {
        return this.resolution == null ? Input.empty() : this.resolution;
    }

    /**
     * A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
     * 
     */
    @InputImport(name="sizingPolicy")
      private final @Nullable Input<String> sizingPolicy;

    public Input<String> getSizingPolicy() {
        return this.sizingPolicy == null ? Input.empty() : this.sizingPolicy;
    }

    public PresetThumbnailsArgs(
        @Nullable Input<String> aspectRatio,
        @Nullable Input<String> format,
        @Nullable Input<String> interval,
        @Nullable Input<String> maxHeight,
        @Nullable Input<String> maxWidth,
        @Nullable Input<String> paddingPolicy,
        @Nullable Input<String> resolution,
        @Nullable Input<String> sizingPolicy) {
        this.aspectRatio = aspectRatio;
        this.format = format;
        this.interval = interval;
        this.maxHeight = maxHeight;
        this.maxWidth = maxWidth;
        this.paddingPolicy = paddingPolicy;
        this.resolution = resolution;
        this.sizingPolicy = sizingPolicy;
    }

    private PresetThumbnailsArgs() {
        this.aspectRatio = Input.empty();
        this.format = Input.empty();
        this.interval = Input.empty();
        this.maxHeight = Input.empty();
        this.maxWidth = Input.empty();
        this.paddingPolicy = Input.empty();
        this.resolution = Input.empty();
        this.sizingPolicy = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PresetThumbnailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> aspectRatio;
        private @Nullable Input<String> format;
        private @Nullable Input<String> interval;
        private @Nullable Input<String> maxHeight;
        private @Nullable Input<String> maxWidth;
        private @Nullable Input<String> paddingPolicy;
        private @Nullable Input<String> resolution;
        private @Nullable Input<String> sizingPolicy;

        public Builder() {
    	      // Empty
        }

        public Builder(PresetThumbnailsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aspectRatio = defaults.aspectRatio;
    	      this.format = defaults.format;
    	      this.interval = defaults.interval;
    	      this.maxHeight = defaults.maxHeight;
    	      this.maxWidth = defaults.maxWidth;
    	      this.paddingPolicy = defaults.paddingPolicy;
    	      this.resolution = defaults.resolution;
    	      this.sizingPolicy = defaults.sizingPolicy;
        }

        public Builder setAspectRatio(@Nullable Input<String> aspectRatio) {
            this.aspectRatio = aspectRatio;
            return this;
        }

        public Builder setAspectRatio(@Nullable String aspectRatio) {
            this.aspectRatio = Input.ofNullable(aspectRatio);
            return this;
        }

        public Builder setFormat(@Nullable Input<String> format) {
            this.format = format;
            return this;
        }

        public Builder setFormat(@Nullable String format) {
            this.format = Input.ofNullable(format);
            return this;
        }

        public Builder setInterval(@Nullable Input<String> interval) {
            this.interval = interval;
            return this;
        }

        public Builder setInterval(@Nullable String interval) {
            this.interval = Input.ofNullable(interval);
            return this;
        }

        public Builder setMaxHeight(@Nullable Input<String> maxHeight) {
            this.maxHeight = maxHeight;
            return this;
        }

        public Builder setMaxHeight(@Nullable String maxHeight) {
            this.maxHeight = Input.ofNullable(maxHeight);
            return this;
        }

        public Builder setMaxWidth(@Nullable Input<String> maxWidth) {
            this.maxWidth = maxWidth;
            return this;
        }

        public Builder setMaxWidth(@Nullable String maxWidth) {
            this.maxWidth = Input.ofNullable(maxWidth);
            return this;
        }

        public Builder setPaddingPolicy(@Nullable Input<String> paddingPolicy) {
            this.paddingPolicy = paddingPolicy;
            return this;
        }

        public Builder setPaddingPolicy(@Nullable String paddingPolicy) {
            this.paddingPolicy = Input.ofNullable(paddingPolicy);
            return this;
        }

        public Builder setResolution(@Nullable Input<String> resolution) {
            this.resolution = resolution;
            return this;
        }

        public Builder setResolution(@Nullable String resolution) {
            this.resolution = Input.ofNullable(resolution);
            return this;
        }

        public Builder setSizingPolicy(@Nullable Input<String> sizingPolicy) {
            this.sizingPolicy = sizingPolicy;
            return this;
        }

        public Builder setSizingPolicy(@Nullable String sizingPolicy) {
            this.sizingPolicy = Input.ofNullable(sizingPolicy);
            return this;
        }
        public PresetThumbnailsArgs build() {
            return new PresetThumbnailsArgs(aspectRatio, format, interval, maxHeight, maxWidth, paddingPolicy, resolution, sizingPolicy);
        }
    }
}
