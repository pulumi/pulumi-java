// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.dms.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CertificateState extends io.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * The Amazon Resource Name (ARN) for the certificate.
     * 
     */
    @InputImport(name="certificateArn")
      private final @Nullable Input<String> certificateArn;

    public Input<String> getCertificateArn() {
        return this.certificateArn == null ? Input.empty() : this.certificateArn;
    }

    /**
     * The certificate identifier.
     * 
     */
    @InputImport(name="certificateId")
      private final @Nullable Input<String> certificateId;

    public Input<String> getCertificateId() {
        return this.certificateId == null ? Input.empty() : this.certificateId;
    }

    /**
     * The contents of the .pem X.509 certificate file for the certificate. Either `certificate_pem` or `certificate_wallet` must be set.
     * 
     */
    @InputImport(name="certificatePem")
      private final @Nullable Input<String> certificatePem;

    public Input<String> getCertificatePem() {
        return this.certificatePem == null ? Input.empty() : this.certificatePem;
    }

    /**
     * The contents of the Oracle Wallet certificate for use with SSL, provided as a base64-encoded String. Either `certificate_pem` or `certificate_wallet` must be set.
     * 
     */
    @InputImport(name="certificateWallet")
      private final @Nullable Input<String> certificateWallet;

    public Input<String> getCertificateWallet() {
        return this.certificateWallet == null ? Input.empty() : this.certificateWallet;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public CertificateState(
        @Nullable Input<String> certificateArn,
        @Nullable Input<String> certificateId,
        @Nullable Input<String> certificatePem,
        @Nullable Input<String> certificateWallet,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.certificateArn = certificateArn;
        this.certificateId = certificateId;
        this.certificatePem = certificatePem;
        this.certificateWallet = certificateWallet;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private CertificateState() {
        this.certificateArn = Input.empty();
        this.certificateId = Input.empty();
        this.certificatePem = Input.empty();
        this.certificateWallet = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> certificateArn;
        private @Nullable Input<String> certificateId;
        private @Nullable Input<String> certificatePem;
        private @Nullable Input<String> certificateWallet;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateArn = defaults.certificateArn;
    	      this.certificateId = defaults.certificateId;
    	      this.certificatePem = defaults.certificatePem;
    	      this.certificateWallet = defaults.certificateWallet;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder certificateArn(@Nullable Input<String> certificateArn) {
            this.certificateArn = certificateArn;
            return this;
        }

        public Builder certificateArn(@Nullable String certificateArn) {
            this.certificateArn = Input.ofNullable(certificateArn);
            return this;
        }

        public Builder certificateId(@Nullable Input<String> certificateId) {
            this.certificateId = certificateId;
            return this;
        }

        public Builder certificateId(@Nullable String certificateId) {
            this.certificateId = Input.ofNullable(certificateId);
            return this;
        }

        public Builder certificatePem(@Nullable Input<String> certificatePem) {
            this.certificatePem = certificatePem;
            return this;
        }

        public Builder certificatePem(@Nullable String certificatePem) {
            this.certificatePem = Input.ofNullable(certificatePem);
            return this;
        }

        public Builder certificateWallet(@Nullable Input<String> certificateWallet) {
            this.certificateWallet = certificateWallet;
            return this;
        }

        public Builder certificateWallet(@Nullable String certificateWallet) {
            this.certificateWallet = Input.ofNullable(certificateWallet);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public CertificateState build() {
            return new CertificateState(certificateArn, certificateId, certificatePem, certificateWallet, tags, tagsAll);
        }
    }
}
