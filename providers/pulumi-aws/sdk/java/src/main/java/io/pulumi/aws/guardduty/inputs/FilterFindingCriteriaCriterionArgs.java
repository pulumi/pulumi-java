// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.guardduty.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FilterFindingCriteriaCriterionArgs extends io.pulumi.resources.ResourceArgs {

    public static final FilterFindingCriteriaCriterionArgs Empty = new FilterFindingCriteriaCriterionArgs();

    /**
     * List of string values to be evaluated.
     * 
     */
    @InputImport(name="equals")
      private final @Nullable Input<List<String>> equals;

    public Input<List<String>> getEquals() {
        return this.equals == null ? Input.empty() : this.equals;
    }

    /**
     * The name of the field to be evaluated. The full list of field names can be found in [AWS documentation](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_filter-findings.html#filter_criteria).
     * 
     */
    @InputImport(name="field", required=true)
      private final Input<String> field;

    public Input<String> getField() {
        return this.field;
    }

    /**
     * A value to be evaluated. Accepts either an integer or a date in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    @InputImport(name="greaterThan")
      private final @Nullable Input<String> greaterThan;

    public Input<String> getGreaterThan() {
        return this.greaterThan == null ? Input.empty() : this.greaterThan;
    }

    /**
     * A value to be evaluated. Accepts either an integer or a date in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    @InputImport(name="greaterThanOrEqual")
      private final @Nullable Input<String> greaterThanOrEqual;

    public Input<String> getGreaterThanOrEqual() {
        return this.greaterThanOrEqual == null ? Input.empty() : this.greaterThanOrEqual;
    }

    /**
     * A value to be evaluated. Accepts either an integer or a date in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    @InputImport(name="lessThan")
      private final @Nullable Input<String> lessThan;

    public Input<String> getLessThan() {
        return this.lessThan == null ? Input.empty() : this.lessThan;
    }

    /**
     * A value to be evaluated. Accepts either an integer or a date in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    @InputImport(name="lessThanOrEqual")
      private final @Nullable Input<String> lessThanOrEqual;

    public Input<String> getLessThanOrEqual() {
        return this.lessThanOrEqual == null ? Input.empty() : this.lessThanOrEqual;
    }

    /**
     * List of string values to be evaluated.
     * 
     */
    @InputImport(name="notEquals")
      private final @Nullable Input<List<String>> notEquals;

    public Input<List<String>> getNotEquals() {
        return this.notEquals == null ? Input.empty() : this.notEquals;
    }

    public FilterFindingCriteriaCriterionArgs(
        @Nullable Input<List<String>> equals,
        Input<String> field,
        @Nullable Input<String> greaterThan,
        @Nullable Input<String> greaterThanOrEqual,
        @Nullable Input<String> lessThan,
        @Nullable Input<String> lessThanOrEqual,
        @Nullable Input<List<String>> notEquals) {
        this.equals = equals;
        this.field = Objects.requireNonNull(field, "expected parameter 'field' to be non-null");
        this.greaterThan = greaterThan;
        this.greaterThanOrEqual = greaterThanOrEqual;
        this.lessThan = lessThan;
        this.lessThanOrEqual = lessThanOrEqual;
        this.notEquals = notEquals;
    }

    private FilterFindingCriteriaCriterionArgs() {
        this.equals = Input.empty();
        this.field = Input.empty();
        this.greaterThan = Input.empty();
        this.greaterThanOrEqual = Input.empty();
        this.lessThan = Input.empty();
        this.lessThanOrEqual = Input.empty();
        this.notEquals = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FilterFindingCriteriaCriterionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> equals;
        private Input<String> field;
        private @Nullable Input<String> greaterThan;
        private @Nullable Input<String> greaterThanOrEqual;
        private @Nullable Input<String> lessThan;
        private @Nullable Input<String> lessThanOrEqual;
        private @Nullable Input<List<String>> notEquals;

        public Builder() {
    	      // Empty
        }

        public Builder(FilterFindingCriteriaCriterionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.equals = defaults.equals;
    	      this.field = defaults.field;
    	      this.greaterThan = defaults.greaterThan;
    	      this.greaterThanOrEqual = defaults.greaterThanOrEqual;
    	      this.lessThan = defaults.lessThan;
    	      this.lessThanOrEqual = defaults.lessThanOrEqual;
    	      this.notEquals = defaults.notEquals;
        }

        public Builder setEquals(@Nullable Input<List<String>> equals) {
            this.equals = equals;
            return this;
        }

        public Builder setEquals(@Nullable List<String> equals) {
            this.equals = Input.ofNullable(equals);
            return this;
        }

        public Builder setField(Input<String> field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }

        public Builder setField(String field) {
            this.field = Input.of(Objects.requireNonNull(field));
            return this;
        }

        public Builder setGreaterThan(@Nullable Input<String> greaterThan) {
            this.greaterThan = greaterThan;
            return this;
        }

        public Builder setGreaterThan(@Nullable String greaterThan) {
            this.greaterThan = Input.ofNullable(greaterThan);
            return this;
        }

        public Builder setGreaterThanOrEqual(@Nullable Input<String> greaterThanOrEqual) {
            this.greaterThanOrEqual = greaterThanOrEqual;
            return this;
        }

        public Builder setGreaterThanOrEqual(@Nullable String greaterThanOrEqual) {
            this.greaterThanOrEqual = Input.ofNullable(greaterThanOrEqual);
            return this;
        }

        public Builder setLessThan(@Nullable Input<String> lessThan) {
            this.lessThan = lessThan;
            return this;
        }

        public Builder setLessThan(@Nullable String lessThan) {
            this.lessThan = Input.ofNullable(lessThan);
            return this;
        }

        public Builder setLessThanOrEqual(@Nullable Input<String> lessThanOrEqual) {
            this.lessThanOrEqual = lessThanOrEqual;
            return this;
        }

        public Builder setLessThanOrEqual(@Nullable String lessThanOrEqual) {
            this.lessThanOrEqual = Input.ofNullable(lessThanOrEqual);
            return this;
        }

        public Builder setNotEquals(@Nullable Input<List<String>> notEquals) {
            this.notEquals = notEquals;
            return this;
        }

        public Builder setNotEquals(@Nullable List<String> notEquals) {
            this.notEquals = Input.ofNullable(notEquals);
            return this;
        }
        public FilterFindingCriteriaCriterionArgs build() {
            return new FilterFindingCriteriaCriterionArgs(equals, field, greaterThan, greaterThanOrEqual, lessThan, lessThanOrEqual, notEquals);
        }
    }
}
