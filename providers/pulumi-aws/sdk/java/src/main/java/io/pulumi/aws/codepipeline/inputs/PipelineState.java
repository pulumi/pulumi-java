// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codepipeline.inputs;

import io.pulumi.aws.codepipeline.inputs.PipelineArtifactStoreGetArgs;
import io.pulumi.aws.codepipeline.inputs.PipelineStageGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PipelineState extends io.pulumi.resources.ResourceArgs {

    public static final PipelineState Empty = new PipelineState();

    /**
     * The codepipeline ARN.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * One or more artifact_store blocks. Artifact stores are documented below.
     * 
     */
    @InputImport(name="artifactStore")
      private final @Nullable Input<PipelineArtifactStoreGetArgs> artifactStore;

    public Input<PipelineArtifactStoreGetArgs> getArtifactStore() {
        return this.artifactStore == null ? Input.empty() : this.artifactStore;
    }

    /**
     * The name of the pipeline.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
     * 
     */
    @InputImport(name="roleArn")
      private final @Nullable Input<String> roleArn;

    public Input<String> getRoleArn() {
        return this.roleArn == null ? Input.empty() : this.roleArn;
    }

    /**
     * A stage block. Stages are documented below.
     * 
     */
    @InputImport(name="stages")
      private final @Nullable Input<List<PipelineStageGetArgs>> stages;

    public Input<List<PipelineStageGetArgs>> getStages() {
        return this.stages == null ? Input.empty() : this.stages;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public PipelineState(
        @Nullable Input<String> arn,
        @Nullable Input<PipelineArtifactStoreGetArgs> artifactStore,
        @Nullable Input<String> name,
        @Nullable Input<String> roleArn,
        @Nullable Input<List<PipelineStageGetArgs>> stages,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.artifactStore = artifactStore;
        this.name = name;
        this.roleArn = roleArn;
        this.stages = stages;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private PipelineState() {
        this.arn = Input.empty();
        this.artifactStore = Input.empty();
        this.name = Input.empty();
        this.roleArn = Input.empty();
        this.stages = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<PipelineArtifactStoreGetArgs> artifactStore;
        private @Nullable Input<String> name;
        private @Nullable Input<String> roleArn;
        private @Nullable Input<List<PipelineStageGetArgs>> stages;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.artifactStore = defaults.artifactStore;
    	      this.name = defaults.name;
    	      this.roleArn = defaults.roleArn;
    	      this.stages = defaults.stages;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder artifactStore(@Nullable Input<PipelineArtifactStoreGetArgs> artifactStore) {
            this.artifactStore = artifactStore;
            return this;
        }

        public Builder artifactStore(@Nullable PipelineArtifactStoreGetArgs artifactStore) {
            this.artifactStore = Input.ofNullable(artifactStore);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder roleArn(@Nullable Input<String> roleArn) {
            this.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(@Nullable String roleArn) {
            this.roleArn = Input.ofNullable(roleArn);
            return this;
        }

        public Builder stages(@Nullable Input<List<PipelineStageGetArgs>> stages) {
            this.stages = stages;
            return this;
        }

        public Builder stages(@Nullable List<PipelineStageGetArgs> stages) {
            this.stages = Input.ofNullable(stages);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public PipelineState build() {
            return new PipelineState(arn, artifactStore, name, roleArn, stages, tags, tagsAll);
        }
    }
}
