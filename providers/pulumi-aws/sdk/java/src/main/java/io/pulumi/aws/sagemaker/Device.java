// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.sagemaker;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.sagemaker.DeviceArgs;
import io.pulumi.aws.sagemaker.inputs.DeviceState;
import io.pulumi.aws.sagemaker.outputs.DeviceDevice;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a Sagemaker Device resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Basic usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const example = new aws.sagemaker.Device("example", {
 *     deviceFleetName: aws_sagemaker_device_fleet.example.device_fleet_name,
 *     device: {
 *         deviceName: "example",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example = aws.sagemaker.Device("example",
 *     device_fleet_name=aws_sagemaker_device_fleet["example"]["device_fleet_name"],
 *     device=aws.sagemaker.DeviceDeviceArgs(
 *         device_name="example",
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var example = new Aws.Sagemaker.Device("example", new Aws.Sagemaker.DeviceArgs
 *         {
 *             DeviceFleetName = aws_sagemaker_device_fleet.Example.Device_fleet_name,
 *             Device = new Aws.Sagemaker.Inputs.DeviceDeviceArgs
 *             {
 *                 DeviceName = "example",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/sagemaker"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := sagemaker.NewDevice(ctx, "example", &sagemaker.DeviceArgs{
 * 			DeviceFleetName: pulumi.Any(aws_sagemaker_device_fleet.Example.Device_fleet_name),
 * 			Device: &sagemaker.DeviceDeviceArgs{
 * 				DeviceName: pulumi.String("example"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Sagemaker Devices can be imported using the `device-fleet-name/device-name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:sagemaker/device:Device example my-fleet/my-device
 * ```
 * 
 *  
 */
@ResourceType(type="aws:sagemaker/device:Device")
public class Device extends io.pulumi.resources.CustomResource {
    @Export(name="agentVersion", type=String.class, parameters={})
    private Output<String> agentVersion;

    public Output<String> getAgentVersion() {
        return this.agentVersion;
    }
    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this Device.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) assigned by AWS to this Device.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The device to register with SageMaker Edge Manager. See Device details below.
     * 
     */
    @Export(name="device", type=DeviceDevice.class, parameters={})
    private Output<DeviceDevice> device;

    /**
     * @return The device to register with SageMaker Edge Manager. See Device details below.
     * 
     */
    public Output<DeviceDevice> getDevice() {
        return this.device;
    }
    /**
     * The name of the Device Fleet.
     * 
     */
    @Export(name="deviceFleetName", type=String.class, parameters={})
    private Output<String> deviceFleetName;

    /**
     * @return The name of the Device Fleet.
     * 
     */
    public Output<String> getDeviceFleetName() {
        return this.deviceFleetName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Device(String name) {
        this(name, DeviceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Device(String name, DeviceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Device(String name, DeviceArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:sagemaker/device:Device", name, args == null ? DeviceArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Device(String name, Output<String> id, @Nullable DeviceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:sagemaker/device:Device", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Device get(String name, Output<String> id, @Nullable DeviceState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Device(name, id, state, options);
    }
}
