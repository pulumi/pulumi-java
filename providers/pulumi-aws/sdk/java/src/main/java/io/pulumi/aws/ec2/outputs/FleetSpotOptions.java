// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.outputs;

import io.pulumi.aws.ec2.outputs.FleetSpotOptionsMaintenanceStrategies;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class FleetSpotOptions {
    /**
     * How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`. Default: `lowestPrice`.
     * 
     */
    private final @Nullable String allocationStrategy;
    /**
     * Behavior when a Spot Instance is interrupted. Valid values: `hibernate`, `stop`, `terminate`. Default: `terminate`.
     * 
     */
    private final @Nullable String instanceInterruptionBehavior;
    /**
     * Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot `allocation_strategy` is set to `lowestPrice`. Default: `1`.
     * 
     */
    private final @Nullable Integer instancePoolsToUseCount;
    /**
     * Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
     * 
     */
    private final @Nullable FleetSpotOptionsMaintenanceStrategies maintenanceStrategies;

    @OutputCustomType.Constructor
    private FleetSpotOptions(
        @OutputCustomType.Parameter("allocationStrategy") @Nullable String allocationStrategy,
        @OutputCustomType.Parameter("instanceInterruptionBehavior") @Nullable String instanceInterruptionBehavior,
        @OutputCustomType.Parameter("instancePoolsToUseCount") @Nullable Integer instancePoolsToUseCount,
        @OutputCustomType.Parameter("maintenanceStrategies") @Nullable FleetSpotOptionsMaintenanceStrategies maintenanceStrategies) {
        this.allocationStrategy = allocationStrategy;
        this.instanceInterruptionBehavior = instanceInterruptionBehavior;
        this.instancePoolsToUseCount = instancePoolsToUseCount;
        this.maintenanceStrategies = maintenanceStrategies;
    }

    /**
     * How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`. Default: `lowestPrice`.
     * 
    */
    public Optional<String> getAllocationStrategy() {
        return Optional.ofNullable(this.allocationStrategy);
    }
    /**
     * Behavior when a Spot Instance is interrupted. Valid values: `hibernate`, `stop`, `terminate`. Default: `terminate`.
     * 
    */
    public Optional<String> getInstanceInterruptionBehavior() {
        return Optional.ofNullable(this.instanceInterruptionBehavior);
    }
    /**
     * Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot `allocation_strategy` is set to `lowestPrice`. Default: `1`.
     * 
    */
    public Optional<Integer> getInstancePoolsToUseCount() {
        return Optional.ofNullable(this.instancePoolsToUseCount);
    }
    /**
     * Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
     * 
    */
    public Optional<FleetSpotOptionsMaintenanceStrategies> getMaintenanceStrategies() {
        return Optional.ofNullable(this.maintenanceStrategies);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FleetSpotOptions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String allocationStrategy;
        private @Nullable String instanceInterruptionBehavior;
        private @Nullable Integer instancePoolsToUseCount;
        private @Nullable FleetSpotOptionsMaintenanceStrategies maintenanceStrategies;

        public Builder() {
    	      // Empty
        }

        public Builder(FleetSpotOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationStrategy = defaults.allocationStrategy;
    	      this.instanceInterruptionBehavior = defaults.instanceInterruptionBehavior;
    	      this.instancePoolsToUseCount = defaults.instancePoolsToUseCount;
    	      this.maintenanceStrategies = defaults.maintenanceStrategies;
        }

        public Builder allocationStrategy(@Nullable String allocationStrategy) {
            this.allocationStrategy = allocationStrategy;
            return this;
        }

        public Builder instanceInterruptionBehavior(@Nullable String instanceInterruptionBehavior) {
            this.instanceInterruptionBehavior = instanceInterruptionBehavior;
            return this;
        }

        public Builder instancePoolsToUseCount(@Nullable Integer instancePoolsToUseCount) {
            this.instancePoolsToUseCount = instancePoolsToUseCount;
            return this;
        }

        public Builder maintenanceStrategies(@Nullable FleetSpotOptionsMaintenanceStrategies maintenanceStrategies) {
            this.maintenanceStrategies = maintenanceStrategies;
            return this;
        }
        public FleetSpotOptions build() {
            return new FleetSpotOptions(allocationStrategy, instanceInterruptionBehavior, instancePoolsToUseCount, maintenanceStrategies);
        }
    }
}
