// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lightsail.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstancePublicPortsPortInfoArgs extends io.pulumi.resources.ResourceArgs {

    public static final InstancePublicPortsPortInfoArgs Empty = new InstancePublicPortsPortInfoArgs();

    /**
     * Set of CIDR blocks.
     * 
     */
    @Import(name="cidrs")
      private final @Nullable Output<List<String>> cidrs;

    public Output<List<String>> getCidrs() {
        return this.cidrs == null ? Output.empty() : this.cidrs;
    }

    /**
     * First port in a range of open ports on an instance.
     * 
     */
    @Import(name="fromPort", required=true)
      private final Output<Integer> fromPort;

    public Output<Integer> getFromPort() {
        return this.fromPort;
    }

    /**
     * IP protocol name. Valid values are `tcp`, `all`, `udp`, and `icmp`.
     * 
     */
    @Import(name="protocol", required=true)
      private final Output<String> protocol;

    public Output<String> getProtocol() {
        return this.protocol;
    }

    /**
     * Last port in a range of open ports on an instance.
     * 
     */
    @Import(name="toPort", required=true)
      private final Output<Integer> toPort;

    public Output<Integer> getToPort() {
        return this.toPort;
    }

    public InstancePublicPortsPortInfoArgs(
        @Nullable Output<List<String>> cidrs,
        Output<Integer> fromPort,
        Output<String> protocol,
        Output<Integer> toPort) {
        this.cidrs = cidrs;
        this.fromPort = Objects.requireNonNull(fromPort, "expected parameter 'fromPort' to be non-null");
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
        this.toPort = Objects.requireNonNull(toPort, "expected parameter 'toPort' to be non-null");
    }

    private InstancePublicPortsPortInfoArgs() {
        this.cidrs = Output.empty();
        this.fromPort = Output.empty();
        this.protocol = Output.empty();
        this.toPort = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstancePublicPortsPortInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> cidrs;
        private Output<Integer> fromPort;
        private Output<String> protocol;
        private Output<Integer> toPort;

        public Builder() {
    	      // Empty
        }

        public Builder(InstancePublicPortsPortInfoArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidrs = defaults.cidrs;
    	      this.fromPort = defaults.fromPort;
    	      this.protocol = defaults.protocol;
    	      this.toPort = defaults.toPort;
        }

        public Builder cidrs(@Nullable Output<List<String>> cidrs) {
            this.cidrs = cidrs;
            return this;
        }
        public Builder cidrs(@Nullable List<String> cidrs) {
            this.cidrs = Output.ofNullable(cidrs);
            return this;
        }
        public Builder cidrs(String... cidrs) {
            return cidrs(List.of(cidrs));
        }
        public Builder fromPort(Output<Integer> fromPort) {
            this.fromPort = Objects.requireNonNull(fromPort);
            return this;
        }
        public Builder fromPort(Integer fromPort) {
            this.fromPort = Output.of(Objects.requireNonNull(fromPort));
            return this;
        }
        public Builder protocol(Output<String> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Output.of(Objects.requireNonNull(protocol));
            return this;
        }
        public Builder toPort(Output<Integer> toPort) {
            this.toPort = Objects.requireNonNull(toPort);
            return this;
        }
        public Builder toPort(Integer toPort) {
            this.toPort = Output.of(Objects.requireNonNull(toPort));
            return this;
        }        public InstancePublicPortsPortInfoArgs build() {
            return new InstancePublicPortsPortInfoArgs(cidrs, fromPort, protocol, toPort);
        }
    }
}
