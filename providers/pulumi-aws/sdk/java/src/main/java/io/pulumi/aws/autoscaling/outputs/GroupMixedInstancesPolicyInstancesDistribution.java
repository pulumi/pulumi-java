// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.autoscaling.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class GroupMixedInstancesPolicyInstancesDistribution {
    /**
     * Strategy to use when launching on-demand instances. Valid values: `prioritized`. Default: `prioritized`.
     * 
     */
    private final @Nullable String onDemandAllocationStrategy;
    /**
     * Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
     * 
     */
    private final @Nullable Integer onDemandBaseCapacity;
    /**
     * Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `100`.
     * 
     */
    private final @Nullable Integer onDemandPercentageAboveBaseCapacity;
    /**
     * How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`, `capacity-optimized-prioritized`. Default: `lowest-price`.
     * 
     */
    private final @Nullable String spotAllocationStrategy;
    /**
     * Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Only available with `spot_allocation_strategy` set to `lowest-price`. Otherwise it must be set to `0`, if it has been defined before. Default: `2`.
     * 
     */
    private final @Nullable Integer spotInstancePools;
    /**
     * Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
     * 
     */
    private final @Nullable String spotMaxPrice;

    @OutputCustomType.Constructor({"onDemandAllocationStrategy","onDemandBaseCapacity","onDemandPercentageAboveBaseCapacity","spotAllocationStrategy","spotInstancePools","spotMaxPrice"})
    private GroupMixedInstancesPolicyInstancesDistribution(
        @Nullable String onDemandAllocationStrategy,
        @Nullable Integer onDemandBaseCapacity,
        @Nullable Integer onDemandPercentageAboveBaseCapacity,
        @Nullable String spotAllocationStrategy,
        @Nullable Integer spotInstancePools,
        @Nullable String spotMaxPrice) {
        this.onDemandAllocationStrategy = onDemandAllocationStrategy;
        this.onDemandBaseCapacity = onDemandBaseCapacity;
        this.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity;
        this.spotAllocationStrategy = spotAllocationStrategy;
        this.spotInstancePools = spotInstancePools;
        this.spotMaxPrice = spotMaxPrice;
    }

    /**
     * Strategy to use when launching on-demand instances. Valid values: `prioritized`. Default: `prioritized`.
     * 
     */
    public Optional<String> getOnDemandAllocationStrategy() {
        return Optional.ofNullable(this.onDemandAllocationStrategy);
    }
    /**
     * Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
     * 
     */
    public Optional<Integer> getOnDemandBaseCapacity() {
        return Optional.ofNullable(this.onDemandBaseCapacity);
    }
    /**
     * Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `100`.
     * 
     */
    public Optional<Integer> getOnDemandPercentageAboveBaseCapacity() {
        return Optional.ofNullable(this.onDemandPercentageAboveBaseCapacity);
    }
    /**
     * How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`, `capacity-optimized-prioritized`. Default: `lowest-price`.
     * 
     */
    public Optional<String> getSpotAllocationStrategy() {
        return Optional.ofNullable(this.spotAllocationStrategy);
    }
    /**
     * Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Only available with `spot_allocation_strategy` set to `lowest-price`. Otherwise it must be set to `0`, if it has been defined before. Default: `2`.
     * 
     */
    public Optional<Integer> getSpotInstancePools() {
        return Optional.ofNullable(this.spotInstancePools);
    }
    /**
     * Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
     * 
     */
    public Optional<String> getSpotMaxPrice() {
        return Optional.ofNullable(this.spotMaxPrice);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupMixedInstancesPolicyInstancesDistribution defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String onDemandAllocationStrategy;
        private @Nullable Integer onDemandBaseCapacity;
        private @Nullable Integer onDemandPercentageAboveBaseCapacity;
        private @Nullable String spotAllocationStrategy;
        private @Nullable Integer spotInstancePools;
        private @Nullable String spotMaxPrice;

        public Builder() {
    	      // Empty
        }

        public Builder(GroupMixedInstancesPolicyInstancesDistribution defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.onDemandAllocationStrategy = defaults.onDemandAllocationStrategy;
    	      this.onDemandBaseCapacity = defaults.onDemandBaseCapacity;
    	      this.onDemandPercentageAboveBaseCapacity = defaults.onDemandPercentageAboveBaseCapacity;
    	      this.spotAllocationStrategy = defaults.spotAllocationStrategy;
    	      this.spotInstancePools = defaults.spotInstancePools;
    	      this.spotMaxPrice = defaults.spotMaxPrice;
        }

        public Builder setOnDemandAllocationStrategy(@Nullable String onDemandAllocationStrategy) {
            this.onDemandAllocationStrategy = onDemandAllocationStrategy;
            return this;
        }

        public Builder setOnDemandBaseCapacity(@Nullable Integer onDemandBaseCapacity) {
            this.onDemandBaseCapacity = onDemandBaseCapacity;
            return this;
        }

        public Builder setOnDemandPercentageAboveBaseCapacity(@Nullable Integer onDemandPercentageAboveBaseCapacity) {
            this.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity;
            return this;
        }

        public Builder setSpotAllocationStrategy(@Nullable String spotAllocationStrategy) {
            this.spotAllocationStrategy = spotAllocationStrategy;
            return this;
        }

        public Builder setSpotInstancePools(@Nullable Integer spotInstancePools) {
            this.spotInstancePools = spotInstancePools;
            return this;
        }

        public Builder setSpotMaxPrice(@Nullable String spotMaxPrice) {
            this.spotMaxPrice = spotMaxPrice;
            return this;
        }
        public GroupMixedInstancesPolicyInstancesDistribution build() {
            return new GroupMixedInstancesPolicyInstancesDistribution(onDemandAllocationStrategy, onDemandBaseCapacity, onDemandPercentageAboveBaseCapacity, spotAllocationStrategy, spotInstancePools, spotMaxPrice);
        }
    }
}
