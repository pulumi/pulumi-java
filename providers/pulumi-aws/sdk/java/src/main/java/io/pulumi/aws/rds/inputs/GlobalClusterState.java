// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds.inputs;

import io.pulumi.aws.rds.inputs.GlobalClusterGlobalClusterMemberGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GlobalClusterState extends io.pulumi.resources.ResourceArgs {

    public static final GlobalClusterState Empty = new GlobalClusterState();

    /**
     * RDS Global Cluster Amazon Resource Name (ARN)
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Name for an automatically created database on cluster creation.
     * 
     */
    @InputImport(name="databaseName")
      private final @Nullable Input<String> databaseName;

    public Input<String> getDatabaseName() {
        return this.databaseName == null ? Input.empty() : this.databaseName;
    }

    /**
     * If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
     * 
     */
    @InputImport(name="deletionProtection")
      private final @Nullable Input<Boolean> deletionProtection;

    public Input<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Input.empty() : this.deletionProtection;
    }

    /**
     * Name of the database engine to be used for this DB cluster. The provider will only perform drift detection if a configuration value is provided. Valid values: `aurora`, `aurora-mysql`, `aurora-postgresql`. Defaults to `aurora`. Conflicts with `source_db_cluster_identifier`.
     * 
     */
    @InputImport(name="engine")
      private final @Nullable Input<String> engine;

    public Input<String> getEngine() {
        return this.engine == null ? Input.empty() : this.engine;
    }

    /**
     * Engine version of the Aurora global database.
     * * **NOTE:** When the engine is set to `aurora-mysql`, an engine version compatible with global database is required. The earliest available version is `5.7.mysql_aurora.2.06.0`.
     * 
     */
    @InputImport(name="engineVersion")
      private final @Nullable Input<String> engineVersion;

    public Input<String> getEngineVersion() {
        return this.engineVersion == null ? Input.empty() : this.engineVersion;
    }

    /**
     * Enable to remove DB Cluster members from Global Cluster on destroy. Required with `source_db_cluster_identifier`.
     * 
     */
    @InputImport(name="forceDestroy")
      private final @Nullable Input<Boolean> forceDestroy;

    public Input<Boolean> getForceDestroy() {
        return this.forceDestroy == null ? Input.empty() : this.forceDestroy;
    }

    /**
     * The global cluster identifier.
     * 
     */
    @InputImport(name="globalClusterIdentifier")
      private final @Nullable Input<String> globalClusterIdentifier;

    public Input<String> getGlobalClusterIdentifier() {
        return this.globalClusterIdentifier == null ? Input.empty() : this.globalClusterIdentifier;
    }

    /**
     * Set of objects containing Global Cluster members.
     * 
     */
    @InputImport(name="globalClusterMembers")
      private final @Nullable Input<List<GlobalClusterGlobalClusterMemberGetArgs>> globalClusterMembers;

    public Input<List<GlobalClusterGlobalClusterMemberGetArgs>> getGlobalClusterMembers() {
        return this.globalClusterMembers == null ? Input.empty() : this.globalClusterMembers;
    }

    /**
     * AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed
     * 
     */
    @InputImport(name="globalClusterResourceId")
      private final @Nullable Input<String> globalClusterResourceId;

    public Input<String> getGlobalClusterResourceId() {
        return this.globalClusterResourceId == null ? Input.empty() : this.globalClusterResourceId;
    }

    /**
     * Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. The provider cannot perform drift detection of this value.
     * 
     */
    @InputImport(name="sourceDbClusterIdentifier")
      private final @Nullable Input<String> sourceDbClusterIdentifier;

    public Input<String> getSourceDbClusterIdentifier() {
        return this.sourceDbClusterIdentifier == null ? Input.empty() : this.sourceDbClusterIdentifier;
    }

    /**
     * Specifies whether the DB cluster is encrypted. The default is `false` unless `source_db_cluster_identifier` is specified and encrypted. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @InputImport(name="storageEncrypted")
      private final @Nullable Input<Boolean> storageEncrypted;

    public Input<Boolean> getStorageEncrypted() {
        return this.storageEncrypted == null ? Input.empty() : this.storageEncrypted;
    }

    public GlobalClusterState(
        @Nullable Input<String> arn,
        @Nullable Input<String> databaseName,
        @Nullable Input<Boolean> deletionProtection,
        @Nullable Input<String> engine,
        @Nullable Input<String> engineVersion,
        @Nullable Input<Boolean> forceDestroy,
        @Nullable Input<String> globalClusterIdentifier,
        @Nullable Input<List<GlobalClusterGlobalClusterMemberGetArgs>> globalClusterMembers,
        @Nullable Input<String> globalClusterResourceId,
        @Nullable Input<String> sourceDbClusterIdentifier,
        @Nullable Input<Boolean> storageEncrypted) {
        this.arn = arn;
        this.databaseName = databaseName;
        this.deletionProtection = deletionProtection;
        this.engine = engine;
        this.engineVersion = engineVersion;
        this.forceDestroy = forceDestroy;
        this.globalClusterIdentifier = globalClusterIdentifier;
        this.globalClusterMembers = globalClusterMembers;
        this.globalClusterResourceId = globalClusterResourceId;
        this.sourceDbClusterIdentifier = sourceDbClusterIdentifier;
        this.storageEncrypted = storageEncrypted;
    }

    private GlobalClusterState() {
        this.arn = Input.empty();
        this.databaseName = Input.empty();
        this.deletionProtection = Input.empty();
        this.engine = Input.empty();
        this.engineVersion = Input.empty();
        this.forceDestroy = Input.empty();
        this.globalClusterIdentifier = Input.empty();
        this.globalClusterMembers = Input.empty();
        this.globalClusterResourceId = Input.empty();
        this.sourceDbClusterIdentifier = Input.empty();
        this.storageEncrypted = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GlobalClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> databaseName;
        private @Nullable Input<Boolean> deletionProtection;
        private @Nullable Input<String> engine;
        private @Nullable Input<String> engineVersion;
        private @Nullable Input<Boolean> forceDestroy;
        private @Nullable Input<String> globalClusterIdentifier;
        private @Nullable Input<List<GlobalClusterGlobalClusterMemberGetArgs>> globalClusterMembers;
        private @Nullable Input<String> globalClusterResourceId;
        private @Nullable Input<String> sourceDbClusterIdentifier;
        private @Nullable Input<Boolean> storageEncrypted;

        public Builder() {
    	      // Empty
        }

        public Builder(GlobalClusterState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.databaseName = defaults.databaseName;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.globalClusterIdentifier = defaults.globalClusterIdentifier;
    	      this.globalClusterMembers = defaults.globalClusterMembers;
    	      this.globalClusterResourceId = defaults.globalClusterResourceId;
    	      this.sourceDbClusterIdentifier = defaults.sourceDbClusterIdentifier;
    	      this.storageEncrypted = defaults.storageEncrypted;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder databaseName(@Nullable Input<String> databaseName) {
            this.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = Input.ofNullable(databaseName);
            return this;
        }

        public Builder deletionProtection(@Nullable Input<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder deletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Input.ofNullable(deletionProtection);
            return this;
        }

        public Builder engine(@Nullable Input<String> engine) {
            this.engine = engine;
            return this;
        }

        public Builder engine(@Nullable String engine) {
            this.engine = Input.ofNullable(engine);
            return this;
        }

        public Builder engineVersion(@Nullable Input<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = Input.ofNullable(engineVersion);
            return this;
        }

        public Builder forceDestroy(@Nullable Input<Boolean> forceDestroy) {
            this.forceDestroy = forceDestroy;
            return this;
        }

        public Builder forceDestroy(@Nullable Boolean forceDestroy) {
            this.forceDestroy = Input.ofNullable(forceDestroy);
            return this;
        }

        public Builder globalClusterIdentifier(@Nullable Input<String> globalClusterIdentifier) {
            this.globalClusterIdentifier = globalClusterIdentifier;
            return this;
        }

        public Builder globalClusterIdentifier(@Nullable String globalClusterIdentifier) {
            this.globalClusterIdentifier = Input.ofNullable(globalClusterIdentifier);
            return this;
        }

        public Builder globalClusterMembers(@Nullable Input<List<GlobalClusterGlobalClusterMemberGetArgs>> globalClusterMembers) {
            this.globalClusterMembers = globalClusterMembers;
            return this;
        }

        public Builder globalClusterMembers(@Nullable List<GlobalClusterGlobalClusterMemberGetArgs> globalClusterMembers) {
            this.globalClusterMembers = Input.ofNullable(globalClusterMembers);
            return this;
        }

        public Builder globalClusterResourceId(@Nullable Input<String> globalClusterResourceId) {
            this.globalClusterResourceId = globalClusterResourceId;
            return this;
        }

        public Builder globalClusterResourceId(@Nullable String globalClusterResourceId) {
            this.globalClusterResourceId = Input.ofNullable(globalClusterResourceId);
            return this;
        }

        public Builder sourceDbClusterIdentifier(@Nullable Input<String> sourceDbClusterIdentifier) {
            this.sourceDbClusterIdentifier = sourceDbClusterIdentifier;
            return this;
        }

        public Builder sourceDbClusterIdentifier(@Nullable String sourceDbClusterIdentifier) {
            this.sourceDbClusterIdentifier = Input.ofNullable(sourceDbClusterIdentifier);
            return this;
        }

        public Builder storageEncrypted(@Nullable Input<Boolean> storageEncrypted) {
            this.storageEncrypted = storageEncrypted;
            return this;
        }

        public Builder storageEncrypted(@Nullable Boolean storageEncrypted) {
            this.storageEncrypted = Input.ofNullable(storageEncrypted);
            return this;
        }
        public GlobalClusterState build() {
            return new GlobalClusterState(arn, databaseName, deletionProtection, engine, engineVersion, forceDestroy, globalClusterIdentifier, globalClusterMembers, globalClusterResourceId, sourceDbClusterIdentifier, storageEncrypted);
        }
    }
}
