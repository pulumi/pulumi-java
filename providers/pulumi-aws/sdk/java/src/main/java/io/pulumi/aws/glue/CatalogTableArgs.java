// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.aws.glue.inputs.CatalogTablePartitionIndexArgs;
import io.pulumi.aws.glue.inputs.CatalogTablePartitionKeyArgs;
import io.pulumi.aws.glue.inputs.CatalogTableStorageDescriptorArgs;
import io.pulumi.aws.glue.inputs.CatalogTableTargetTableArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CatalogTableArgs extends io.pulumi.resources.ResourceArgs {

    public static final CatalogTableArgs Empty = new CatalogTableArgs();

    /**
     * ID of the Data Catalog in which the table resides.
     * 
     */
    @Import(name="catalogId")
      private final @Nullable Output<String> catalogId;

    public Output<String> getCatalogId() {
        return this.catalogId == null ? Codegen.empty() : this.catalogId;
    }

    /**
     * Name of the catalog database that contains the target table.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName;
    }

    /**
     * Description of the table.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Name of the target table.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Owner of the table.
     * 
     */
    @Import(name="owner")
      private final @Nullable Output<String> owner;

    public Output<String> getOwner() {
        return this.owner == null ? Codegen.empty() : this.owner;
    }

    /**
     * Map of initialization parameters for the SerDe, in key-value form.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Map<String,String>> parameters;

    public Output<Map<String,String>> getParameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * Configuration block for a maximum of 3 partition indexes. See `partition_index` below.
     * 
     */
    @Import(name="partitionIndices")
      private final @Nullable Output<List<CatalogTablePartitionIndexArgs>> partitionIndices;

    public Output<List<CatalogTablePartitionIndexArgs>> getPartitionIndices() {
        return this.partitionIndices == null ? Codegen.empty() : this.partitionIndices;
    }

    /**
     * Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partition_keys` below.
     * 
     */
    @Import(name="partitionKeys")
      private final @Nullable Output<List<CatalogTablePartitionKeyArgs>> partitionKeys;

    public Output<List<CatalogTablePartitionKeyArgs>> getPartitionKeys() {
        return this.partitionKeys == null ? Codegen.empty() : this.partitionKeys;
    }

    /**
     * Retention time for this table.
     * 
     */
    @Import(name="retention")
      private final @Nullable Output<Integer> retention;

    public Output<Integer> getRetention() {
        return this.retention == null ? Codegen.empty() : this.retention;
    }

    /**
     * Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storage_descriptor` below.
     * 
     */
    @Import(name="storageDescriptor")
      private final @Nullable Output<CatalogTableStorageDescriptorArgs> storageDescriptor;

    public Output<CatalogTableStorageDescriptorArgs> getStorageDescriptor() {
        return this.storageDescriptor == null ? Codegen.empty() : this.storageDescriptor;
    }

    /**
     * Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
     * 
     */
    @Import(name="tableType")
      private final @Nullable Output<String> tableType;

    public Output<String> getTableType() {
        return this.tableType == null ? Codegen.empty() : this.tableType;
    }

    /**
     * Configuration block of a target table for resource linking. See `target_table` below.
     * 
     */
    @Import(name="targetTable")
      private final @Nullable Output<CatalogTableTargetTableArgs> targetTable;

    public Output<CatalogTableTargetTableArgs> getTargetTable() {
        return this.targetTable == null ? Codegen.empty() : this.targetTable;
    }

    /**
     * If the table is a view, the expanded text of the view; otherwise null.
     * 
     */
    @Import(name="viewExpandedText")
      private final @Nullable Output<String> viewExpandedText;

    public Output<String> getViewExpandedText() {
        return this.viewExpandedText == null ? Codegen.empty() : this.viewExpandedText;
    }

    /**
     * If the table is a view, the original text of the view; otherwise null.
     * 
     */
    @Import(name="viewOriginalText")
      private final @Nullable Output<String> viewOriginalText;

    public Output<String> getViewOriginalText() {
        return this.viewOriginalText == null ? Codegen.empty() : this.viewOriginalText;
    }

    public CatalogTableArgs(
        @Nullable Output<String> catalogId,
        Output<String> databaseName,
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        @Nullable Output<String> owner,
        @Nullable Output<Map<String,String>> parameters,
        @Nullable Output<List<CatalogTablePartitionIndexArgs>> partitionIndices,
        @Nullable Output<List<CatalogTablePartitionKeyArgs>> partitionKeys,
        @Nullable Output<Integer> retention,
        @Nullable Output<CatalogTableStorageDescriptorArgs> storageDescriptor,
        @Nullable Output<String> tableType,
        @Nullable Output<CatalogTableTargetTableArgs> targetTable,
        @Nullable Output<String> viewExpandedText,
        @Nullable Output<String> viewOriginalText) {
        this.catalogId = catalogId;
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.description = description;
        this.name = name;
        this.owner = owner;
        this.parameters = parameters;
        this.partitionIndices = partitionIndices;
        this.partitionKeys = partitionKeys;
        this.retention = retention;
        this.storageDescriptor = storageDescriptor;
        this.tableType = tableType;
        this.targetTable = targetTable;
        this.viewExpandedText = viewExpandedText;
        this.viewOriginalText = viewOriginalText;
    }

    private CatalogTableArgs() {
        this.catalogId = Codegen.empty();
        this.databaseName = Codegen.empty();
        this.description = Codegen.empty();
        this.name = Codegen.empty();
        this.owner = Codegen.empty();
        this.parameters = Codegen.empty();
        this.partitionIndices = Codegen.empty();
        this.partitionKeys = Codegen.empty();
        this.retention = Codegen.empty();
        this.storageDescriptor = Codegen.empty();
        this.tableType = Codegen.empty();
        this.targetTable = Codegen.empty();
        this.viewExpandedText = Codegen.empty();
        this.viewOriginalText = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CatalogTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> catalogId;
        private Output<String> databaseName;
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private @Nullable Output<String> owner;
        private @Nullable Output<Map<String,String>> parameters;
        private @Nullable Output<List<CatalogTablePartitionIndexArgs>> partitionIndices;
        private @Nullable Output<List<CatalogTablePartitionKeyArgs>> partitionKeys;
        private @Nullable Output<Integer> retention;
        private @Nullable Output<CatalogTableStorageDescriptorArgs> storageDescriptor;
        private @Nullable Output<String> tableType;
        private @Nullable Output<CatalogTableTargetTableArgs> targetTable;
        private @Nullable Output<String> viewExpandedText;
        private @Nullable Output<String> viewOriginalText;

        public Builder() {
    	      // Empty
        }

        public Builder(CatalogTableArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.databaseName = defaults.databaseName;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.parameters = defaults.parameters;
    	      this.partitionIndices = defaults.partitionIndices;
    	      this.partitionKeys = defaults.partitionKeys;
    	      this.retention = defaults.retention;
    	      this.storageDescriptor = defaults.storageDescriptor;
    	      this.tableType = defaults.tableType;
    	      this.targetTable = defaults.targetTable;
    	      this.viewExpandedText = defaults.viewExpandedText;
    	      this.viewOriginalText = defaults.viewOriginalText;
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            this.catalogId = catalogId;
            return this;
        }
        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = Codegen.ofNullable(catalogId);
            return this;
        }
        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder owner(@Nullable Output<String> owner) {
            this.owner = owner;
            return this;
        }
        public Builder owner(@Nullable String owner) {
            this.owner = Codegen.ofNullable(owner);
            return this;
        }
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder partitionIndices(@Nullable Output<List<CatalogTablePartitionIndexArgs>> partitionIndices) {
            this.partitionIndices = partitionIndices;
            return this;
        }
        public Builder partitionIndices(@Nullable List<CatalogTablePartitionIndexArgs> partitionIndices) {
            this.partitionIndices = Codegen.ofNullable(partitionIndices);
            return this;
        }
        public Builder partitionIndices(CatalogTablePartitionIndexArgs... partitionIndices) {
            return partitionIndices(List.of(partitionIndices));
        }
        public Builder partitionKeys(@Nullable Output<List<CatalogTablePartitionKeyArgs>> partitionKeys) {
            this.partitionKeys = partitionKeys;
            return this;
        }
        public Builder partitionKeys(@Nullable List<CatalogTablePartitionKeyArgs> partitionKeys) {
            this.partitionKeys = Codegen.ofNullable(partitionKeys);
            return this;
        }
        public Builder partitionKeys(CatalogTablePartitionKeyArgs... partitionKeys) {
            return partitionKeys(List.of(partitionKeys));
        }
        public Builder retention(@Nullable Output<Integer> retention) {
            this.retention = retention;
            return this;
        }
        public Builder retention(@Nullable Integer retention) {
            this.retention = Codegen.ofNullable(retention);
            return this;
        }
        public Builder storageDescriptor(@Nullable Output<CatalogTableStorageDescriptorArgs> storageDescriptor) {
            this.storageDescriptor = storageDescriptor;
            return this;
        }
        public Builder storageDescriptor(@Nullable CatalogTableStorageDescriptorArgs storageDescriptor) {
            this.storageDescriptor = Codegen.ofNullable(storageDescriptor);
            return this;
        }
        public Builder tableType(@Nullable Output<String> tableType) {
            this.tableType = tableType;
            return this;
        }
        public Builder tableType(@Nullable String tableType) {
            this.tableType = Codegen.ofNullable(tableType);
            return this;
        }
        public Builder targetTable(@Nullable Output<CatalogTableTargetTableArgs> targetTable) {
            this.targetTable = targetTable;
            return this;
        }
        public Builder targetTable(@Nullable CatalogTableTargetTableArgs targetTable) {
            this.targetTable = Codegen.ofNullable(targetTable);
            return this;
        }
        public Builder viewExpandedText(@Nullable Output<String> viewExpandedText) {
            this.viewExpandedText = viewExpandedText;
            return this;
        }
        public Builder viewExpandedText(@Nullable String viewExpandedText) {
            this.viewExpandedText = Codegen.ofNullable(viewExpandedText);
            return this;
        }
        public Builder viewOriginalText(@Nullable Output<String> viewOriginalText) {
            this.viewOriginalText = viewOriginalText;
            return this;
        }
        public Builder viewOriginalText(@Nullable String viewOriginalText) {
            this.viewOriginalText = Codegen.ofNullable(viewOriginalText);
            return this;
        }        public CatalogTableArgs build() {
            return new CatalogTableArgs(catalogId, databaseName, description, name, owner, parameters, partitionIndices, partitionKeys, retention, storageDescriptor, tableType, targetTable, viewExpandedText, viewOriginalText);
        }
    }
}
