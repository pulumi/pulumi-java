// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SchemaArgs extends io.pulumi.resources.ResourceArgs {

    public static final SchemaArgs Empty = new SchemaArgs();

    /**
     * The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
     * 
     */
    @InputImport(name="compatibility", required=true)
      private final Input<String> compatibility;

    public Input<String> getCompatibility() {
        return this.compatibility;
    }

    /**
     * The data format of the schema definition. Valid values are `AVRO` and `JSON`.
     * 
     */
    @InputImport(name="dataFormat", required=true)
      private final Input<String> dataFormat;

    public Input<String> getDataFormat() {
        return this.dataFormat;
    }

    /**
     * A description of the schema.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The ARN of the Glue Registry to create the schema in.
     * 
     */
    @InputImport(name="registryArn")
      private final @Nullable Input<String> registryArn;

    public Input<String> getRegistryArn() {
        return this.registryArn == null ? Input.empty() : this.registryArn;
    }

    /**
     * The schema definition using the `data_format` setting for `schema_name`.
     * 
     */
    @InputImport(name="schemaDefinition", required=true)
      private final Input<String> schemaDefinition;

    public Input<String> getSchemaDefinition() {
        return this.schemaDefinition;
    }

    /**
     * The Name of the schema.
     * 
     */
    @InputImport(name="schemaName", required=true)
      private final Input<String> schemaName;

    public Input<String> getSchemaName() {
        return this.schemaName;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public SchemaArgs(
        Input<String> compatibility,
        Input<String> dataFormat,
        @Nullable Input<String> description,
        @Nullable Input<String> registryArn,
        Input<String> schemaDefinition,
        Input<String> schemaName,
        @Nullable Input<Map<String,String>> tags) {
        this.compatibility = Objects.requireNonNull(compatibility, "expected parameter 'compatibility' to be non-null");
        this.dataFormat = Objects.requireNonNull(dataFormat, "expected parameter 'dataFormat' to be non-null");
        this.description = description;
        this.registryArn = registryArn;
        this.schemaDefinition = Objects.requireNonNull(schemaDefinition, "expected parameter 'schemaDefinition' to be non-null");
        this.schemaName = Objects.requireNonNull(schemaName, "expected parameter 'schemaName' to be non-null");
        this.tags = tags;
    }

    private SchemaArgs() {
        this.compatibility = Input.empty();
        this.dataFormat = Input.empty();
        this.description = Input.empty();
        this.registryArn = Input.empty();
        this.schemaDefinition = Input.empty();
        this.schemaName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> compatibility;
        private Input<String> dataFormat;
        private @Nullable Input<String> description;
        private @Nullable Input<String> registryArn;
        private Input<String> schemaDefinition;
        private Input<String> schemaName;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(SchemaArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compatibility = defaults.compatibility;
    	      this.dataFormat = defaults.dataFormat;
    	      this.description = defaults.description;
    	      this.registryArn = defaults.registryArn;
    	      this.schemaDefinition = defaults.schemaDefinition;
    	      this.schemaName = defaults.schemaName;
    	      this.tags = defaults.tags;
        }

        public Builder compatibility(Input<String> compatibility) {
            this.compatibility = Objects.requireNonNull(compatibility);
            return this;
        }

        public Builder compatibility(String compatibility) {
            this.compatibility = Input.of(Objects.requireNonNull(compatibility));
            return this;
        }

        public Builder dataFormat(Input<String> dataFormat) {
            this.dataFormat = Objects.requireNonNull(dataFormat);
            return this;
        }

        public Builder dataFormat(String dataFormat) {
            this.dataFormat = Input.of(Objects.requireNonNull(dataFormat));
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder registryArn(@Nullable Input<String> registryArn) {
            this.registryArn = registryArn;
            return this;
        }

        public Builder registryArn(@Nullable String registryArn) {
            this.registryArn = Input.ofNullable(registryArn);
            return this;
        }

        public Builder schemaDefinition(Input<String> schemaDefinition) {
            this.schemaDefinition = Objects.requireNonNull(schemaDefinition);
            return this;
        }

        public Builder schemaDefinition(String schemaDefinition) {
            this.schemaDefinition = Input.of(Objects.requireNonNull(schemaDefinition));
            return this;
        }

        public Builder schemaName(Input<String> schemaName) {
            this.schemaName = Objects.requireNonNull(schemaName);
            return this;
        }

        public Builder schemaName(String schemaName) {
            this.schemaName = Input.of(Objects.requireNonNull(schemaName));
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public SchemaArgs build() {
            return new SchemaArgs(compatibility, dataFormat, description, registryArn, schemaDefinition, schemaName, tags);
        }
    }
}
