// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpnConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final VpnConnectionArgs Empty = new VpnConnectionArgs();

    /**
     * The ID of the customer gateway.
     * 
     */
    @Import(name="customerGatewayId", required=true)
      private final Output<String> customerGatewayId;

    public Output<String> getCustomerGatewayId() {
        return this.customerGatewayId;
    }

    /**
     * Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
     * 
     */
    @Import(name="enableAcceleration")
      private final @Nullable Output<Boolean> enableAcceleration;

    public Output<Boolean> getEnableAcceleration() {
        return this.enableAcceleration == null ? Output.empty() : this.enableAcceleration;
    }

    /**
     * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @Import(name="localIpv4NetworkCidr")
      private final @Nullable Output<String> localIpv4NetworkCidr;

    public Output<String> getLocalIpv4NetworkCidr() {
        return this.localIpv4NetworkCidr == null ? Output.empty() : this.localIpv4NetworkCidr;
    }

    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @Import(name="localIpv6NetworkCidr")
      private final @Nullable Output<String> localIpv6NetworkCidr;

    public Output<String> getLocalIpv6NetworkCidr() {
        return this.localIpv6NetworkCidr == null ? Output.empty() : this.localIpv6NetworkCidr;
    }

    /**
     * The IPv4 CIDR on the AWS side of the VPN connection.
     * 
     */
    @Import(name="remoteIpv4NetworkCidr")
      private final @Nullable Output<String> remoteIpv4NetworkCidr;

    public Output<String> getRemoteIpv4NetworkCidr() {
        return this.remoteIpv4NetworkCidr == null ? Output.empty() : this.remoteIpv4NetworkCidr;
    }

    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @Import(name="remoteIpv6NetworkCidr")
      private final @Nullable Output<String> remoteIpv6NetworkCidr;

    public Output<String> getRemoteIpv6NetworkCidr() {
        return this.remoteIpv6NetworkCidr == null ? Output.empty() : this.remoteIpv6NetworkCidr;
    }

    /**
     * Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
     * 
     */
    @Import(name="staticRoutesOnly")
      private final @Nullable Output<Boolean> staticRoutesOnly;

    public Output<Boolean> getStaticRoutesOnly() {
        return this.staticRoutesOnly == null ? Output.empty() : this.staticRoutesOnly;
    }

    /**
     * Tags to apply to the connection. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The ID of the EC2 Transit Gateway.
     * 
     */
    @Import(name="transitGatewayId")
      private final @Nullable Output<String> transitGatewayId;

    public Output<String> getTransitGatewayId() {
        return this.transitGatewayId == null ? Output.empty() : this.transitGatewayId;
    }

    /**
     * The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    @Import(name="tunnel1DpdTimeoutAction")
      private final @Nullable Output<String> tunnel1DpdTimeoutAction;

    public Output<String> getTunnel1DpdTimeoutAction() {
        return this.tunnel1DpdTimeoutAction == null ? Output.empty() : this.tunnel1DpdTimeoutAction;
    }

    /**
     * The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    @Import(name="tunnel1DpdTimeoutSeconds")
      private final @Nullable Output<Integer> tunnel1DpdTimeoutSeconds;

    public Output<Integer> getTunnel1DpdTimeoutSeconds() {
        return this.tunnel1DpdTimeoutSeconds == null ? Output.empty() : this.tunnel1DpdTimeoutSeconds;
    }

    /**
     * The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    @Import(name="tunnel1IkeVersions")
      private final @Nullable Output<List<String>> tunnel1IkeVersions;

    public Output<List<String>> getTunnel1IkeVersions() {
        return this.tunnel1IkeVersions == null ? Output.empty() : this.tunnel1IkeVersions;
    }

    /**
     * The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    @Import(name="tunnel1InsideCidr")
      private final @Nullable Output<String> tunnel1InsideCidr;

    public Output<String> getTunnel1InsideCidr() {
        return this.tunnel1InsideCidr == null ? Output.empty() : this.tunnel1InsideCidr;
    }

    /**
     * The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    @Import(name="tunnel1InsideIpv6Cidr")
      private final @Nullable Output<String> tunnel1InsideIpv6Cidr;

    public Output<String> getTunnel1InsideIpv6Cidr() {
        return this.tunnel1InsideIpv6Cidr == null ? Output.empty() : this.tunnel1InsideIpv6Cidr;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    @Import(name="tunnel1Phase1DhGroupNumbers")
      private final @Nullable Output<List<Integer>> tunnel1Phase1DhGroupNumbers;

    public Output<List<Integer>> getTunnel1Phase1DhGroupNumbers() {
        return this.tunnel1Phase1DhGroupNumbers == null ? Output.empty() : this.tunnel1Phase1DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Import(name="tunnel1Phase1EncryptionAlgorithms")
      private final @Nullable Output<List<String>> tunnel1Phase1EncryptionAlgorithms;

    public Output<List<String>> getTunnel1Phase1EncryptionAlgorithms() {
        return this.tunnel1Phase1EncryptionAlgorithms == null ? Output.empty() : this.tunnel1Phase1EncryptionAlgorithms;
    }

    /**
     * One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Import(name="tunnel1Phase1IntegrityAlgorithms")
      private final @Nullable Output<List<String>> tunnel1Phase1IntegrityAlgorithms;

    public Output<List<String>> getTunnel1Phase1IntegrityAlgorithms() {
        return this.tunnel1Phase1IntegrityAlgorithms == null ? Output.empty() : this.tunnel1Phase1IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    @Import(name="tunnel1Phase1LifetimeSeconds")
      private final @Nullable Output<Integer> tunnel1Phase1LifetimeSeconds;

    public Output<Integer> getTunnel1Phase1LifetimeSeconds() {
        return this.tunnel1Phase1LifetimeSeconds == null ? Output.empty() : this.tunnel1Phase1LifetimeSeconds;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    @Import(name="tunnel1Phase2DhGroupNumbers")
      private final @Nullable Output<List<Integer>> tunnel1Phase2DhGroupNumbers;

    public Output<List<Integer>> getTunnel1Phase2DhGroupNumbers() {
        return this.tunnel1Phase2DhGroupNumbers == null ? Output.empty() : this.tunnel1Phase2DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Import(name="tunnel1Phase2EncryptionAlgorithms")
      private final @Nullable Output<List<String>> tunnel1Phase2EncryptionAlgorithms;

    public Output<List<String>> getTunnel1Phase2EncryptionAlgorithms() {
        return this.tunnel1Phase2EncryptionAlgorithms == null ? Output.empty() : this.tunnel1Phase2EncryptionAlgorithms;
    }

    /**
     * List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Import(name="tunnel1Phase2IntegrityAlgorithms")
      private final @Nullable Output<List<String>> tunnel1Phase2IntegrityAlgorithms;

    public Output<List<String>> getTunnel1Phase2IntegrityAlgorithms() {
        return this.tunnel1Phase2IntegrityAlgorithms == null ? Output.empty() : this.tunnel1Phase2IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    @Import(name="tunnel1Phase2LifetimeSeconds")
      private final @Nullable Output<Integer> tunnel1Phase2LifetimeSeconds;

    public Output<Integer> getTunnel1Phase2LifetimeSeconds() {
        return this.tunnel1Phase2LifetimeSeconds == null ? Output.empty() : this.tunnel1Phase2LifetimeSeconds;
    }

    /**
     * The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    @Import(name="tunnel1PresharedKey")
      private final @Nullable Output<String> tunnel1PresharedKey;

    public Output<String> getTunnel1PresharedKey() {
        return this.tunnel1PresharedKey == null ? Output.empty() : this.tunnel1PresharedKey;
    }

    /**
     * The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    @Import(name="tunnel1RekeyFuzzPercentage")
      private final @Nullable Output<Integer> tunnel1RekeyFuzzPercentage;

    public Output<Integer> getTunnel1RekeyFuzzPercentage() {
        return this.tunnel1RekeyFuzzPercentage == null ? Output.empty() : this.tunnel1RekeyFuzzPercentage;
    }

    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel1_phase2_lifetime_seconds`.
     * 
     */
    @Import(name="tunnel1RekeyMarginTimeSeconds")
      private final @Nullable Output<Integer> tunnel1RekeyMarginTimeSeconds;

    public Output<Integer> getTunnel1RekeyMarginTimeSeconds() {
        return this.tunnel1RekeyMarginTimeSeconds == null ? Output.empty() : this.tunnel1RekeyMarginTimeSeconds;
    }

    /**
     * The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    @Import(name="tunnel1ReplayWindowSize")
      private final @Nullable Output<Integer> tunnel1ReplayWindowSize;

    public Output<Integer> getTunnel1ReplayWindowSize() {
        return this.tunnel1ReplayWindowSize == null ? Output.empty() : this.tunnel1ReplayWindowSize;
    }

    /**
     * The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    @Import(name="tunnel1StartupAction")
      private final @Nullable Output<String> tunnel1StartupAction;

    public Output<String> getTunnel1StartupAction() {
        return this.tunnel1StartupAction == null ? Output.empty() : this.tunnel1StartupAction;
    }

    /**
     * The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    @Import(name="tunnel2DpdTimeoutAction")
      private final @Nullable Output<String> tunnel2DpdTimeoutAction;

    public Output<String> getTunnel2DpdTimeoutAction() {
        return this.tunnel2DpdTimeoutAction == null ? Output.empty() : this.tunnel2DpdTimeoutAction;
    }

    /**
     * The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    @Import(name="tunnel2DpdTimeoutSeconds")
      private final @Nullable Output<Integer> tunnel2DpdTimeoutSeconds;

    public Output<Integer> getTunnel2DpdTimeoutSeconds() {
        return this.tunnel2DpdTimeoutSeconds == null ? Output.empty() : this.tunnel2DpdTimeoutSeconds;
    }

    /**
     * The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    @Import(name="tunnel2IkeVersions")
      private final @Nullable Output<List<String>> tunnel2IkeVersions;

    public Output<List<String>> getTunnel2IkeVersions() {
        return this.tunnel2IkeVersions == null ? Output.empty() : this.tunnel2IkeVersions;
    }

    /**
     * The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    @Import(name="tunnel2InsideCidr")
      private final @Nullable Output<String> tunnel2InsideCidr;

    public Output<String> getTunnel2InsideCidr() {
        return this.tunnel2InsideCidr == null ? Output.empty() : this.tunnel2InsideCidr;
    }

    /**
     * The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    @Import(name="tunnel2InsideIpv6Cidr")
      private final @Nullable Output<String> tunnel2InsideIpv6Cidr;

    public Output<String> getTunnel2InsideIpv6Cidr() {
        return this.tunnel2InsideIpv6Cidr == null ? Output.empty() : this.tunnel2InsideIpv6Cidr;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    @Import(name="tunnel2Phase1DhGroupNumbers")
      private final @Nullable Output<List<Integer>> tunnel2Phase1DhGroupNumbers;

    public Output<List<Integer>> getTunnel2Phase1DhGroupNumbers() {
        return this.tunnel2Phase1DhGroupNumbers == null ? Output.empty() : this.tunnel2Phase1DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Import(name="tunnel2Phase1EncryptionAlgorithms")
      private final @Nullable Output<List<String>> tunnel2Phase1EncryptionAlgorithms;

    public Output<List<String>> getTunnel2Phase1EncryptionAlgorithms() {
        return this.tunnel2Phase1EncryptionAlgorithms == null ? Output.empty() : this.tunnel2Phase1EncryptionAlgorithms;
    }

    /**
     * One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Import(name="tunnel2Phase1IntegrityAlgorithms")
      private final @Nullable Output<List<String>> tunnel2Phase1IntegrityAlgorithms;

    public Output<List<String>> getTunnel2Phase1IntegrityAlgorithms() {
        return this.tunnel2Phase1IntegrityAlgorithms == null ? Output.empty() : this.tunnel2Phase1IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    @Import(name="tunnel2Phase1LifetimeSeconds")
      private final @Nullable Output<Integer> tunnel2Phase1LifetimeSeconds;

    public Output<Integer> getTunnel2Phase1LifetimeSeconds() {
        return this.tunnel2Phase1LifetimeSeconds == null ? Output.empty() : this.tunnel2Phase1LifetimeSeconds;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    @Import(name="tunnel2Phase2DhGroupNumbers")
      private final @Nullable Output<List<Integer>> tunnel2Phase2DhGroupNumbers;

    public Output<List<Integer>> getTunnel2Phase2DhGroupNumbers() {
        return this.tunnel2Phase2DhGroupNumbers == null ? Output.empty() : this.tunnel2Phase2DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Import(name="tunnel2Phase2EncryptionAlgorithms")
      private final @Nullable Output<List<String>> tunnel2Phase2EncryptionAlgorithms;

    public Output<List<String>> getTunnel2Phase2EncryptionAlgorithms() {
        return this.tunnel2Phase2EncryptionAlgorithms == null ? Output.empty() : this.tunnel2Phase2EncryptionAlgorithms;
    }

    /**
     * List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Import(name="tunnel2Phase2IntegrityAlgorithms")
      private final @Nullable Output<List<String>> tunnel2Phase2IntegrityAlgorithms;

    public Output<List<String>> getTunnel2Phase2IntegrityAlgorithms() {
        return this.tunnel2Phase2IntegrityAlgorithms == null ? Output.empty() : this.tunnel2Phase2IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    @Import(name="tunnel2Phase2LifetimeSeconds")
      private final @Nullable Output<Integer> tunnel2Phase2LifetimeSeconds;

    public Output<Integer> getTunnel2Phase2LifetimeSeconds() {
        return this.tunnel2Phase2LifetimeSeconds == null ? Output.empty() : this.tunnel2Phase2LifetimeSeconds;
    }

    /**
     * The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    @Import(name="tunnel2PresharedKey")
      private final @Nullable Output<String> tunnel2PresharedKey;

    public Output<String> getTunnel2PresharedKey() {
        return this.tunnel2PresharedKey == null ? Output.empty() : this.tunnel2PresharedKey;
    }

    /**
     * The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    @Import(name="tunnel2RekeyFuzzPercentage")
      private final @Nullable Output<Integer> tunnel2RekeyFuzzPercentage;

    public Output<Integer> getTunnel2RekeyFuzzPercentage() {
        return this.tunnel2RekeyFuzzPercentage == null ? Output.empty() : this.tunnel2RekeyFuzzPercentage;
    }

    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel2_phase2_lifetime_seconds`.
     * 
     */
    @Import(name="tunnel2RekeyMarginTimeSeconds")
      private final @Nullable Output<Integer> tunnel2RekeyMarginTimeSeconds;

    public Output<Integer> getTunnel2RekeyMarginTimeSeconds() {
        return this.tunnel2RekeyMarginTimeSeconds == null ? Output.empty() : this.tunnel2RekeyMarginTimeSeconds;
    }

    /**
     * The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    @Import(name="tunnel2ReplayWindowSize")
      private final @Nullable Output<Integer> tunnel2ReplayWindowSize;

    public Output<Integer> getTunnel2ReplayWindowSize() {
        return this.tunnel2ReplayWindowSize == null ? Output.empty() : this.tunnel2ReplayWindowSize;
    }

    /**
     * The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    @Import(name="tunnel2StartupAction")
      private final @Nullable Output<String> tunnel2StartupAction;

    public Output<String> getTunnel2StartupAction() {
        return this.tunnel2StartupAction == null ? Output.empty() : this.tunnel2StartupAction;
    }

    /**
     * Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
     * 
     */
    @Import(name="tunnelInsideIpVersion")
      private final @Nullable Output<String> tunnelInsideIpVersion;

    public Output<String> getTunnelInsideIpVersion() {
        return this.tunnelInsideIpVersion == null ? Output.empty() : this.tunnelInsideIpVersion;
    }

    /**
     * The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> getType() {
        return this.type;
    }

    /**
     * The ID of the Virtual Private Gateway.
     * 
     */
    @Import(name="vpnGatewayId")
      private final @Nullable Output<String> vpnGatewayId;

    public Output<String> getVpnGatewayId() {
        return this.vpnGatewayId == null ? Output.empty() : this.vpnGatewayId;
    }

    public VpnConnectionArgs(
        Output<String> customerGatewayId,
        @Nullable Output<Boolean> enableAcceleration,
        @Nullable Output<String> localIpv4NetworkCidr,
        @Nullable Output<String> localIpv6NetworkCidr,
        @Nullable Output<String> remoteIpv4NetworkCidr,
        @Nullable Output<String> remoteIpv6NetworkCidr,
        @Nullable Output<Boolean> staticRoutesOnly,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> transitGatewayId,
        @Nullable Output<String> tunnel1DpdTimeoutAction,
        @Nullable Output<Integer> tunnel1DpdTimeoutSeconds,
        @Nullable Output<List<String>> tunnel1IkeVersions,
        @Nullable Output<String> tunnel1InsideCidr,
        @Nullable Output<String> tunnel1InsideIpv6Cidr,
        @Nullable Output<List<Integer>> tunnel1Phase1DhGroupNumbers,
        @Nullable Output<List<String>> tunnel1Phase1EncryptionAlgorithms,
        @Nullable Output<List<String>> tunnel1Phase1IntegrityAlgorithms,
        @Nullable Output<Integer> tunnel1Phase1LifetimeSeconds,
        @Nullable Output<List<Integer>> tunnel1Phase2DhGroupNumbers,
        @Nullable Output<List<String>> tunnel1Phase2EncryptionAlgorithms,
        @Nullable Output<List<String>> tunnel1Phase2IntegrityAlgorithms,
        @Nullable Output<Integer> tunnel1Phase2LifetimeSeconds,
        @Nullable Output<String> tunnel1PresharedKey,
        @Nullable Output<Integer> tunnel1RekeyFuzzPercentage,
        @Nullable Output<Integer> tunnel1RekeyMarginTimeSeconds,
        @Nullable Output<Integer> tunnel1ReplayWindowSize,
        @Nullable Output<String> tunnel1StartupAction,
        @Nullable Output<String> tunnel2DpdTimeoutAction,
        @Nullable Output<Integer> tunnel2DpdTimeoutSeconds,
        @Nullable Output<List<String>> tunnel2IkeVersions,
        @Nullable Output<String> tunnel2InsideCidr,
        @Nullable Output<String> tunnel2InsideIpv6Cidr,
        @Nullable Output<List<Integer>> tunnel2Phase1DhGroupNumbers,
        @Nullable Output<List<String>> tunnel2Phase1EncryptionAlgorithms,
        @Nullable Output<List<String>> tunnel2Phase1IntegrityAlgorithms,
        @Nullable Output<Integer> tunnel2Phase1LifetimeSeconds,
        @Nullable Output<List<Integer>> tunnel2Phase2DhGroupNumbers,
        @Nullable Output<List<String>> tunnel2Phase2EncryptionAlgorithms,
        @Nullable Output<List<String>> tunnel2Phase2IntegrityAlgorithms,
        @Nullable Output<Integer> tunnel2Phase2LifetimeSeconds,
        @Nullable Output<String> tunnel2PresharedKey,
        @Nullable Output<Integer> tunnel2RekeyFuzzPercentage,
        @Nullable Output<Integer> tunnel2RekeyMarginTimeSeconds,
        @Nullable Output<Integer> tunnel2ReplayWindowSize,
        @Nullable Output<String> tunnel2StartupAction,
        @Nullable Output<String> tunnelInsideIpVersion,
        Output<String> type,
        @Nullable Output<String> vpnGatewayId) {
        this.customerGatewayId = Objects.requireNonNull(customerGatewayId, "expected parameter 'customerGatewayId' to be non-null");
        this.enableAcceleration = enableAcceleration;
        this.localIpv4NetworkCidr = localIpv4NetworkCidr;
        this.localIpv6NetworkCidr = localIpv6NetworkCidr;
        this.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr;
        this.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr;
        this.staticRoutesOnly = staticRoutesOnly;
        this.tags = tags;
        this.transitGatewayId = transitGatewayId;
        this.tunnel1DpdTimeoutAction = tunnel1DpdTimeoutAction;
        this.tunnel1DpdTimeoutSeconds = tunnel1DpdTimeoutSeconds;
        this.tunnel1IkeVersions = tunnel1IkeVersions;
        this.tunnel1InsideCidr = tunnel1InsideCidr;
        this.tunnel1InsideIpv6Cidr = tunnel1InsideIpv6Cidr;
        this.tunnel1Phase1DhGroupNumbers = tunnel1Phase1DhGroupNumbers;
        this.tunnel1Phase1EncryptionAlgorithms = tunnel1Phase1EncryptionAlgorithms;
        this.tunnel1Phase1IntegrityAlgorithms = tunnel1Phase1IntegrityAlgorithms;
        this.tunnel1Phase1LifetimeSeconds = tunnel1Phase1LifetimeSeconds;
        this.tunnel1Phase2DhGroupNumbers = tunnel1Phase2DhGroupNumbers;
        this.tunnel1Phase2EncryptionAlgorithms = tunnel1Phase2EncryptionAlgorithms;
        this.tunnel1Phase2IntegrityAlgorithms = tunnel1Phase2IntegrityAlgorithms;
        this.tunnel1Phase2LifetimeSeconds = tunnel1Phase2LifetimeSeconds;
        this.tunnel1PresharedKey = tunnel1PresharedKey;
        this.tunnel1RekeyFuzzPercentage = tunnel1RekeyFuzzPercentage;
        this.tunnel1RekeyMarginTimeSeconds = tunnel1RekeyMarginTimeSeconds;
        this.tunnel1ReplayWindowSize = tunnel1ReplayWindowSize;
        this.tunnel1StartupAction = tunnel1StartupAction;
        this.tunnel2DpdTimeoutAction = tunnel2DpdTimeoutAction;
        this.tunnel2DpdTimeoutSeconds = tunnel2DpdTimeoutSeconds;
        this.tunnel2IkeVersions = tunnel2IkeVersions;
        this.tunnel2InsideCidr = tunnel2InsideCidr;
        this.tunnel2InsideIpv6Cidr = tunnel2InsideIpv6Cidr;
        this.tunnel2Phase1DhGroupNumbers = tunnel2Phase1DhGroupNumbers;
        this.tunnel2Phase1EncryptionAlgorithms = tunnel2Phase1EncryptionAlgorithms;
        this.tunnel2Phase1IntegrityAlgorithms = tunnel2Phase1IntegrityAlgorithms;
        this.tunnel2Phase1LifetimeSeconds = tunnel2Phase1LifetimeSeconds;
        this.tunnel2Phase2DhGroupNumbers = tunnel2Phase2DhGroupNumbers;
        this.tunnel2Phase2EncryptionAlgorithms = tunnel2Phase2EncryptionAlgorithms;
        this.tunnel2Phase2IntegrityAlgorithms = tunnel2Phase2IntegrityAlgorithms;
        this.tunnel2Phase2LifetimeSeconds = tunnel2Phase2LifetimeSeconds;
        this.tunnel2PresharedKey = tunnel2PresharedKey;
        this.tunnel2RekeyFuzzPercentage = tunnel2RekeyFuzzPercentage;
        this.tunnel2RekeyMarginTimeSeconds = tunnel2RekeyMarginTimeSeconds;
        this.tunnel2ReplayWindowSize = tunnel2ReplayWindowSize;
        this.tunnel2StartupAction = tunnel2StartupAction;
        this.tunnelInsideIpVersion = tunnelInsideIpVersion;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.vpnGatewayId = vpnGatewayId;
    }

    private VpnConnectionArgs() {
        this.customerGatewayId = Output.empty();
        this.enableAcceleration = Output.empty();
        this.localIpv4NetworkCidr = Output.empty();
        this.localIpv6NetworkCidr = Output.empty();
        this.remoteIpv4NetworkCidr = Output.empty();
        this.remoteIpv6NetworkCidr = Output.empty();
        this.staticRoutesOnly = Output.empty();
        this.tags = Output.empty();
        this.transitGatewayId = Output.empty();
        this.tunnel1DpdTimeoutAction = Output.empty();
        this.tunnel1DpdTimeoutSeconds = Output.empty();
        this.tunnel1IkeVersions = Output.empty();
        this.tunnel1InsideCidr = Output.empty();
        this.tunnel1InsideIpv6Cidr = Output.empty();
        this.tunnel1Phase1DhGroupNumbers = Output.empty();
        this.tunnel1Phase1EncryptionAlgorithms = Output.empty();
        this.tunnel1Phase1IntegrityAlgorithms = Output.empty();
        this.tunnel1Phase1LifetimeSeconds = Output.empty();
        this.tunnel1Phase2DhGroupNumbers = Output.empty();
        this.tunnel1Phase2EncryptionAlgorithms = Output.empty();
        this.tunnel1Phase2IntegrityAlgorithms = Output.empty();
        this.tunnel1Phase2LifetimeSeconds = Output.empty();
        this.tunnel1PresharedKey = Output.empty();
        this.tunnel1RekeyFuzzPercentage = Output.empty();
        this.tunnel1RekeyMarginTimeSeconds = Output.empty();
        this.tunnel1ReplayWindowSize = Output.empty();
        this.tunnel1StartupAction = Output.empty();
        this.tunnel2DpdTimeoutAction = Output.empty();
        this.tunnel2DpdTimeoutSeconds = Output.empty();
        this.tunnel2IkeVersions = Output.empty();
        this.tunnel2InsideCidr = Output.empty();
        this.tunnel2InsideIpv6Cidr = Output.empty();
        this.tunnel2Phase1DhGroupNumbers = Output.empty();
        this.tunnel2Phase1EncryptionAlgorithms = Output.empty();
        this.tunnel2Phase1IntegrityAlgorithms = Output.empty();
        this.tunnel2Phase1LifetimeSeconds = Output.empty();
        this.tunnel2Phase2DhGroupNumbers = Output.empty();
        this.tunnel2Phase2EncryptionAlgorithms = Output.empty();
        this.tunnel2Phase2IntegrityAlgorithms = Output.empty();
        this.tunnel2Phase2LifetimeSeconds = Output.empty();
        this.tunnel2PresharedKey = Output.empty();
        this.tunnel2RekeyFuzzPercentage = Output.empty();
        this.tunnel2RekeyMarginTimeSeconds = Output.empty();
        this.tunnel2ReplayWindowSize = Output.empty();
        this.tunnel2StartupAction = Output.empty();
        this.tunnelInsideIpVersion = Output.empty();
        this.type = Output.empty();
        this.vpnGatewayId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> customerGatewayId;
        private @Nullable Output<Boolean> enableAcceleration;
        private @Nullable Output<String> localIpv4NetworkCidr;
        private @Nullable Output<String> localIpv6NetworkCidr;
        private @Nullable Output<String> remoteIpv4NetworkCidr;
        private @Nullable Output<String> remoteIpv6NetworkCidr;
        private @Nullable Output<Boolean> staticRoutesOnly;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> transitGatewayId;
        private @Nullable Output<String> tunnel1DpdTimeoutAction;
        private @Nullable Output<Integer> tunnel1DpdTimeoutSeconds;
        private @Nullable Output<List<String>> tunnel1IkeVersions;
        private @Nullable Output<String> tunnel1InsideCidr;
        private @Nullable Output<String> tunnel1InsideIpv6Cidr;
        private @Nullable Output<List<Integer>> tunnel1Phase1DhGroupNumbers;
        private @Nullable Output<List<String>> tunnel1Phase1EncryptionAlgorithms;
        private @Nullable Output<List<String>> tunnel1Phase1IntegrityAlgorithms;
        private @Nullable Output<Integer> tunnel1Phase1LifetimeSeconds;
        private @Nullable Output<List<Integer>> tunnel1Phase2DhGroupNumbers;
        private @Nullable Output<List<String>> tunnel1Phase2EncryptionAlgorithms;
        private @Nullable Output<List<String>> tunnel1Phase2IntegrityAlgorithms;
        private @Nullable Output<Integer> tunnel1Phase2LifetimeSeconds;
        private @Nullable Output<String> tunnel1PresharedKey;
        private @Nullable Output<Integer> tunnel1RekeyFuzzPercentage;
        private @Nullable Output<Integer> tunnel1RekeyMarginTimeSeconds;
        private @Nullable Output<Integer> tunnel1ReplayWindowSize;
        private @Nullable Output<String> tunnel1StartupAction;
        private @Nullable Output<String> tunnel2DpdTimeoutAction;
        private @Nullable Output<Integer> tunnel2DpdTimeoutSeconds;
        private @Nullable Output<List<String>> tunnel2IkeVersions;
        private @Nullable Output<String> tunnel2InsideCidr;
        private @Nullable Output<String> tunnel2InsideIpv6Cidr;
        private @Nullable Output<List<Integer>> tunnel2Phase1DhGroupNumbers;
        private @Nullable Output<List<String>> tunnel2Phase1EncryptionAlgorithms;
        private @Nullable Output<List<String>> tunnel2Phase1IntegrityAlgorithms;
        private @Nullable Output<Integer> tunnel2Phase1LifetimeSeconds;
        private @Nullable Output<List<Integer>> tunnel2Phase2DhGroupNumbers;
        private @Nullable Output<List<String>> tunnel2Phase2EncryptionAlgorithms;
        private @Nullable Output<List<String>> tunnel2Phase2IntegrityAlgorithms;
        private @Nullable Output<Integer> tunnel2Phase2LifetimeSeconds;
        private @Nullable Output<String> tunnel2PresharedKey;
        private @Nullable Output<Integer> tunnel2RekeyFuzzPercentage;
        private @Nullable Output<Integer> tunnel2RekeyMarginTimeSeconds;
        private @Nullable Output<Integer> tunnel2ReplayWindowSize;
        private @Nullable Output<String> tunnel2StartupAction;
        private @Nullable Output<String> tunnelInsideIpVersion;
        private Output<String> type;
        private @Nullable Output<String> vpnGatewayId;

        public Builder() {
    	      // Empty
        }

        public Builder(VpnConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customerGatewayId = defaults.customerGatewayId;
    	      this.enableAcceleration = defaults.enableAcceleration;
    	      this.localIpv4NetworkCidr = defaults.localIpv4NetworkCidr;
    	      this.localIpv6NetworkCidr = defaults.localIpv6NetworkCidr;
    	      this.remoteIpv4NetworkCidr = defaults.remoteIpv4NetworkCidr;
    	      this.remoteIpv6NetworkCidr = defaults.remoteIpv6NetworkCidr;
    	      this.staticRoutesOnly = defaults.staticRoutesOnly;
    	      this.tags = defaults.tags;
    	      this.transitGatewayId = defaults.transitGatewayId;
    	      this.tunnel1DpdTimeoutAction = defaults.tunnel1DpdTimeoutAction;
    	      this.tunnel1DpdTimeoutSeconds = defaults.tunnel1DpdTimeoutSeconds;
    	      this.tunnel1IkeVersions = defaults.tunnel1IkeVersions;
    	      this.tunnel1InsideCidr = defaults.tunnel1InsideCidr;
    	      this.tunnel1InsideIpv6Cidr = defaults.tunnel1InsideIpv6Cidr;
    	      this.tunnel1Phase1DhGroupNumbers = defaults.tunnel1Phase1DhGroupNumbers;
    	      this.tunnel1Phase1EncryptionAlgorithms = defaults.tunnel1Phase1EncryptionAlgorithms;
    	      this.tunnel1Phase1IntegrityAlgorithms = defaults.tunnel1Phase1IntegrityAlgorithms;
    	      this.tunnel1Phase1LifetimeSeconds = defaults.tunnel1Phase1LifetimeSeconds;
    	      this.tunnel1Phase2DhGroupNumbers = defaults.tunnel1Phase2DhGroupNumbers;
    	      this.tunnel1Phase2EncryptionAlgorithms = defaults.tunnel1Phase2EncryptionAlgorithms;
    	      this.tunnel1Phase2IntegrityAlgorithms = defaults.tunnel1Phase2IntegrityAlgorithms;
    	      this.tunnel1Phase2LifetimeSeconds = defaults.tunnel1Phase2LifetimeSeconds;
    	      this.tunnel1PresharedKey = defaults.tunnel1PresharedKey;
    	      this.tunnel1RekeyFuzzPercentage = defaults.tunnel1RekeyFuzzPercentage;
    	      this.tunnel1RekeyMarginTimeSeconds = defaults.tunnel1RekeyMarginTimeSeconds;
    	      this.tunnel1ReplayWindowSize = defaults.tunnel1ReplayWindowSize;
    	      this.tunnel1StartupAction = defaults.tunnel1StartupAction;
    	      this.tunnel2DpdTimeoutAction = defaults.tunnel2DpdTimeoutAction;
    	      this.tunnel2DpdTimeoutSeconds = defaults.tunnel2DpdTimeoutSeconds;
    	      this.tunnel2IkeVersions = defaults.tunnel2IkeVersions;
    	      this.tunnel2InsideCidr = defaults.tunnel2InsideCidr;
    	      this.tunnel2InsideIpv6Cidr = defaults.tunnel2InsideIpv6Cidr;
    	      this.tunnel2Phase1DhGroupNumbers = defaults.tunnel2Phase1DhGroupNumbers;
    	      this.tunnel2Phase1EncryptionAlgorithms = defaults.tunnel2Phase1EncryptionAlgorithms;
    	      this.tunnel2Phase1IntegrityAlgorithms = defaults.tunnel2Phase1IntegrityAlgorithms;
    	      this.tunnel2Phase1LifetimeSeconds = defaults.tunnel2Phase1LifetimeSeconds;
    	      this.tunnel2Phase2DhGroupNumbers = defaults.tunnel2Phase2DhGroupNumbers;
    	      this.tunnel2Phase2EncryptionAlgorithms = defaults.tunnel2Phase2EncryptionAlgorithms;
    	      this.tunnel2Phase2IntegrityAlgorithms = defaults.tunnel2Phase2IntegrityAlgorithms;
    	      this.tunnel2Phase2LifetimeSeconds = defaults.tunnel2Phase2LifetimeSeconds;
    	      this.tunnel2PresharedKey = defaults.tunnel2PresharedKey;
    	      this.tunnel2RekeyFuzzPercentage = defaults.tunnel2RekeyFuzzPercentage;
    	      this.tunnel2RekeyMarginTimeSeconds = defaults.tunnel2RekeyMarginTimeSeconds;
    	      this.tunnel2ReplayWindowSize = defaults.tunnel2ReplayWindowSize;
    	      this.tunnel2StartupAction = defaults.tunnel2StartupAction;
    	      this.tunnelInsideIpVersion = defaults.tunnelInsideIpVersion;
    	      this.type = defaults.type;
    	      this.vpnGatewayId = defaults.vpnGatewayId;
        }

        public Builder customerGatewayId(Output<String> customerGatewayId) {
            this.customerGatewayId = Objects.requireNonNull(customerGatewayId);
            return this;
        }
        public Builder customerGatewayId(String customerGatewayId) {
            this.customerGatewayId = Output.of(Objects.requireNonNull(customerGatewayId));
            return this;
        }
        public Builder enableAcceleration(@Nullable Output<Boolean> enableAcceleration) {
            this.enableAcceleration = enableAcceleration;
            return this;
        }
        public Builder enableAcceleration(@Nullable Boolean enableAcceleration) {
            this.enableAcceleration = Output.ofNullable(enableAcceleration);
            return this;
        }
        public Builder localIpv4NetworkCidr(@Nullable Output<String> localIpv4NetworkCidr) {
            this.localIpv4NetworkCidr = localIpv4NetworkCidr;
            return this;
        }
        public Builder localIpv4NetworkCidr(@Nullable String localIpv4NetworkCidr) {
            this.localIpv4NetworkCidr = Output.ofNullable(localIpv4NetworkCidr);
            return this;
        }
        public Builder localIpv6NetworkCidr(@Nullable Output<String> localIpv6NetworkCidr) {
            this.localIpv6NetworkCidr = localIpv6NetworkCidr;
            return this;
        }
        public Builder localIpv6NetworkCidr(@Nullable String localIpv6NetworkCidr) {
            this.localIpv6NetworkCidr = Output.ofNullable(localIpv6NetworkCidr);
            return this;
        }
        public Builder remoteIpv4NetworkCidr(@Nullable Output<String> remoteIpv4NetworkCidr) {
            this.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr;
            return this;
        }
        public Builder remoteIpv4NetworkCidr(@Nullable String remoteIpv4NetworkCidr) {
            this.remoteIpv4NetworkCidr = Output.ofNullable(remoteIpv4NetworkCidr);
            return this;
        }
        public Builder remoteIpv6NetworkCidr(@Nullable Output<String> remoteIpv6NetworkCidr) {
            this.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr;
            return this;
        }
        public Builder remoteIpv6NetworkCidr(@Nullable String remoteIpv6NetworkCidr) {
            this.remoteIpv6NetworkCidr = Output.ofNullable(remoteIpv6NetworkCidr);
            return this;
        }
        public Builder staticRoutesOnly(@Nullable Output<Boolean> staticRoutesOnly) {
            this.staticRoutesOnly = staticRoutesOnly;
            return this;
        }
        public Builder staticRoutesOnly(@Nullable Boolean staticRoutesOnly) {
            this.staticRoutesOnly = Output.ofNullable(staticRoutesOnly);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder transitGatewayId(@Nullable Output<String> transitGatewayId) {
            this.transitGatewayId = transitGatewayId;
            return this;
        }
        public Builder transitGatewayId(@Nullable String transitGatewayId) {
            this.transitGatewayId = Output.ofNullable(transitGatewayId);
            return this;
        }
        public Builder tunnel1DpdTimeoutAction(@Nullable Output<String> tunnel1DpdTimeoutAction) {
            this.tunnel1DpdTimeoutAction = tunnel1DpdTimeoutAction;
            return this;
        }
        public Builder tunnel1DpdTimeoutAction(@Nullable String tunnel1DpdTimeoutAction) {
            this.tunnel1DpdTimeoutAction = Output.ofNullable(tunnel1DpdTimeoutAction);
            return this;
        }
        public Builder tunnel1DpdTimeoutSeconds(@Nullable Output<Integer> tunnel1DpdTimeoutSeconds) {
            this.tunnel1DpdTimeoutSeconds = tunnel1DpdTimeoutSeconds;
            return this;
        }
        public Builder tunnel1DpdTimeoutSeconds(@Nullable Integer tunnel1DpdTimeoutSeconds) {
            this.tunnel1DpdTimeoutSeconds = Output.ofNullable(tunnel1DpdTimeoutSeconds);
            return this;
        }
        public Builder tunnel1IkeVersions(@Nullable Output<List<String>> tunnel1IkeVersions) {
            this.tunnel1IkeVersions = tunnel1IkeVersions;
            return this;
        }
        public Builder tunnel1IkeVersions(@Nullable List<String> tunnel1IkeVersions) {
            this.tunnel1IkeVersions = Output.ofNullable(tunnel1IkeVersions);
            return this;
        }
        public Builder tunnel1IkeVersions(String... tunnel1IkeVersions) {
            return tunnel1IkeVersions(List.of(tunnel1IkeVersions));
        }
        public Builder tunnel1InsideCidr(@Nullable Output<String> tunnel1InsideCidr) {
            this.tunnel1InsideCidr = tunnel1InsideCidr;
            return this;
        }
        public Builder tunnel1InsideCidr(@Nullable String tunnel1InsideCidr) {
            this.tunnel1InsideCidr = Output.ofNullable(tunnel1InsideCidr);
            return this;
        }
        public Builder tunnel1InsideIpv6Cidr(@Nullable Output<String> tunnel1InsideIpv6Cidr) {
            this.tunnel1InsideIpv6Cidr = tunnel1InsideIpv6Cidr;
            return this;
        }
        public Builder tunnel1InsideIpv6Cidr(@Nullable String tunnel1InsideIpv6Cidr) {
            this.tunnel1InsideIpv6Cidr = Output.ofNullable(tunnel1InsideIpv6Cidr);
            return this;
        }
        public Builder tunnel1Phase1DhGroupNumbers(@Nullable Output<List<Integer>> tunnel1Phase1DhGroupNumbers) {
            this.tunnel1Phase1DhGroupNumbers = tunnel1Phase1DhGroupNumbers;
            return this;
        }
        public Builder tunnel1Phase1DhGroupNumbers(@Nullable List<Integer> tunnel1Phase1DhGroupNumbers) {
            this.tunnel1Phase1DhGroupNumbers = Output.ofNullable(tunnel1Phase1DhGroupNumbers);
            return this;
        }
        public Builder tunnel1Phase1DhGroupNumbers(Integer... tunnel1Phase1DhGroupNumbers) {
            return tunnel1Phase1DhGroupNumbers(List.of(tunnel1Phase1DhGroupNumbers));
        }
        public Builder tunnel1Phase1EncryptionAlgorithms(@Nullable Output<List<String>> tunnel1Phase1EncryptionAlgorithms) {
            this.tunnel1Phase1EncryptionAlgorithms = tunnel1Phase1EncryptionAlgorithms;
            return this;
        }
        public Builder tunnel1Phase1EncryptionAlgorithms(@Nullable List<String> tunnel1Phase1EncryptionAlgorithms) {
            this.tunnel1Phase1EncryptionAlgorithms = Output.ofNullable(tunnel1Phase1EncryptionAlgorithms);
            return this;
        }
        public Builder tunnel1Phase1EncryptionAlgorithms(String... tunnel1Phase1EncryptionAlgorithms) {
            return tunnel1Phase1EncryptionAlgorithms(List.of(tunnel1Phase1EncryptionAlgorithms));
        }
        public Builder tunnel1Phase1IntegrityAlgorithms(@Nullable Output<List<String>> tunnel1Phase1IntegrityAlgorithms) {
            this.tunnel1Phase1IntegrityAlgorithms = tunnel1Phase1IntegrityAlgorithms;
            return this;
        }
        public Builder tunnel1Phase1IntegrityAlgorithms(@Nullable List<String> tunnel1Phase1IntegrityAlgorithms) {
            this.tunnel1Phase1IntegrityAlgorithms = Output.ofNullable(tunnel1Phase1IntegrityAlgorithms);
            return this;
        }
        public Builder tunnel1Phase1IntegrityAlgorithms(String... tunnel1Phase1IntegrityAlgorithms) {
            return tunnel1Phase1IntegrityAlgorithms(List.of(tunnel1Phase1IntegrityAlgorithms));
        }
        public Builder tunnel1Phase1LifetimeSeconds(@Nullable Output<Integer> tunnel1Phase1LifetimeSeconds) {
            this.tunnel1Phase1LifetimeSeconds = tunnel1Phase1LifetimeSeconds;
            return this;
        }
        public Builder tunnel1Phase1LifetimeSeconds(@Nullable Integer tunnel1Phase1LifetimeSeconds) {
            this.tunnel1Phase1LifetimeSeconds = Output.ofNullable(tunnel1Phase1LifetimeSeconds);
            return this;
        }
        public Builder tunnel1Phase2DhGroupNumbers(@Nullable Output<List<Integer>> tunnel1Phase2DhGroupNumbers) {
            this.tunnel1Phase2DhGroupNumbers = tunnel1Phase2DhGroupNumbers;
            return this;
        }
        public Builder tunnel1Phase2DhGroupNumbers(@Nullable List<Integer> tunnel1Phase2DhGroupNumbers) {
            this.tunnel1Phase2DhGroupNumbers = Output.ofNullable(tunnel1Phase2DhGroupNumbers);
            return this;
        }
        public Builder tunnel1Phase2DhGroupNumbers(Integer... tunnel1Phase2DhGroupNumbers) {
            return tunnel1Phase2DhGroupNumbers(List.of(tunnel1Phase2DhGroupNumbers));
        }
        public Builder tunnel1Phase2EncryptionAlgorithms(@Nullable Output<List<String>> tunnel1Phase2EncryptionAlgorithms) {
            this.tunnel1Phase2EncryptionAlgorithms = tunnel1Phase2EncryptionAlgorithms;
            return this;
        }
        public Builder tunnel1Phase2EncryptionAlgorithms(@Nullable List<String> tunnel1Phase2EncryptionAlgorithms) {
            this.tunnel1Phase2EncryptionAlgorithms = Output.ofNullable(tunnel1Phase2EncryptionAlgorithms);
            return this;
        }
        public Builder tunnel1Phase2EncryptionAlgorithms(String... tunnel1Phase2EncryptionAlgorithms) {
            return tunnel1Phase2EncryptionAlgorithms(List.of(tunnel1Phase2EncryptionAlgorithms));
        }
        public Builder tunnel1Phase2IntegrityAlgorithms(@Nullable Output<List<String>> tunnel1Phase2IntegrityAlgorithms) {
            this.tunnel1Phase2IntegrityAlgorithms = tunnel1Phase2IntegrityAlgorithms;
            return this;
        }
        public Builder tunnel1Phase2IntegrityAlgorithms(@Nullable List<String> tunnel1Phase2IntegrityAlgorithms) {
            this.tunnel1Phase2IntegrityAlgorithms = Output.ofNullable(tunnel1Phase2IntegrityAlgorithms);
            return this;
        }
        public Builder tunnel1Phase2IntegrityAlgorithms(String... tunnel1Phase2IntegrityAlgorithms) {
            return tunnel1Phase2IntegrityAlgorithms(List.of(tunnel1Phase2IntegrityAlgorithms));
        }
        public Builder tunnel1Phase2LifetimeSeconds(@Nullable Output<Integer> tunnel1Phase2LifetimeSeconds) {
            this.tunnel1Phase2LifetimeSeconds = tunnel1Phase2LifetimeSeconds;
            return this;
        }
        public Builder tunnel1Phase2LifetimeSeconds(@Nullable Integer tunnel1Phase2LifetimeSeconds) {
            this.tunnel1Phase2LifetimeSeconds = Output.ofNullable(tunnel1Phase2LifetimeSeconds);
            return this;
        }
        public Builder tunnel1PresharedKey(@Nullable Output<String> tunnel1PresharedKey) {
            this.tunnel1PresharedKey = tunnel1PresharedKey;
            return this;
        }
        public Builder tunnel1PresharedKey(@Nullable String tunnel1PresharedKey) {
            this.tunnel1PresharedKey = Output.ofNullable(tunnel1PresharedKey);
            return this;
        }
        public Builder tunnel1RekeyFuzzPercentage(@Nullable Output<Integer> tunnel1RekeyFuzzPercentage) {
            this.tunnel1RekeyFuzzPercentage = tunnel1RekeyFuzzPercentage;
            return this;
        }
        public Builder tunnel1RekeyFuzzPercentage(@Nullable Integer tunnel1RekeyFuzzPercentage) {
            this.tunnel1RekeyFuzzPercentage = Output.ofNullable(tunnel1RekeyFuzzPercentage);
            return this;
        }
        public Builder tunnel1RekeyMarginTimeSeconds(@Nullable Output<Integer> tunnel1RekeyMarginTimeSeconds) {
            this.tunnel1RekeyMarginTimeSeconds = tunnel1RekeyMarginTimeSeconds;
            return this;
        }
        public Builder tunnel1RekeyMarginTimeSeconds(@Nullable Integer tunnel1RekeyMarginTimeSeconds) {
            this.tunnel1RekeyMarginTimeSeconds = Output.ofNullable(tunnel1RekeyMarginTimeSeconds);
            return this;
        }
        public Builder tunnel1ReplayWindowSize(@Nullable Output<Integer> tunnel1ReplayWindowSize) {
            this.tunnel1ReplayWindowSize = tunnel1ReplayWindowSize;
            return this;
        }
        public Builder tunnel1ReplayWindowSize(@Nullable Integer tunnel1ReplayWindowSize) {
            this.tunnel1ReplayWindowSize = Output.ofNullable(tunnel1ReplayWindowSize);
            return this;
        }
        public Builder tunnel1StartupAction(@Nullable Output<String> tunnel1StartupAction) {
            this.tunnel1StartupAction = tunnel1StartupAction;
            return this;
        }
        public Builder tunnel1StartupAction(@Nullable String tunnel1StartupAction) {
            this.tunnel1StartupAction = Output.ofNullable(tunnel1StartupAction);
            return this;
        }
        public Builder tunnel2DpdTimeoutAction(@Nullable Output<String> tunnel2DpdTimeoutAction) {
            this.tunnel2DpdTimeoutAction = tunnel2DpdTimeoutAction;
            return this;
        }
        public Builder tunnel2DpdTimeoutAction(@Nullable String tunnel2DpdTimeoutAction) {
            this.tunnel2DpdTimeoutAction = Output.ofNullable(tunnel2DpdTimeoutAction);
            return this;
        }
        public Builder tunnel2DpdTimeoutSeconds(@Nullable Output<Integer> tunnel2DpdTimeoutSeconds) {
            this.tunnel2DpdTimeoutSeconds = tunnel2DpdTimeoutSeconds;
            return this;
        }
        public Builder tunnel2DpdTimeoutSeconds(@Nullable Integer tunnel2DpdTimeoutSeconds) {
            this.tunnel2DpdTimeoutSeconds = Output.ofNullable(tunnel2DpdTimeoutSeconds);
            return this;
        }
        public Builder tunnel2IkeVersions(@Nullable Output<List<String>> tunnel2IkeVersions) {
            this.tunnel2IkeVersions = tunnel2IkeVersions;
            return this;
        }
        public Builder tunnel2IkeVersions(@Nullable List<String> tunnel2IkeVersions) {
            this.tunnel2IkeVersions = Output.ofNullable(tunnel2IkeVersions);
            return this;
        }
        public Builder tunnel2IkeVersions(String... tunnel2IkeVersions) {
            return tunnel2IkeVersions(List.of(tunnel2IkeVersions));
        }
        public Builder tunnel2InsideCidr(@Nullable Output<String> tunnel2InsideCidr) {
            this.tunnel2InsideCidr = tunnel2InsideCidr;
            return this;
        }
        public Builder tunnel2InsideCidr(@Nullable String tunnel2InsideCidr) {
            this.tunnel2InsideCidr = Output.ofNullable(tunnel2InsideCidr);
            return this;
        }
        public Builder tunnel2InsideIpv6Cidr(@Nullable Output<String> tunnel2InsideIpv6Cidr) {
            this.tunnel2InsideIpv6Cidr = tunnel2InsideIpv6Cidr;
            return this;
        }
        public Builder tunnel2InsideIpv6Cidr(@Nullable String tunnel2InsideIpv6Cidr) {
            this.tunnel2InsideIpv6Cidr = Output.ofNullable(tunnel2InsideIpv6Cidr);
            return this;
        }
        public Builder tunnel2Phase1DhGroupNumbers(@Nullable Output<List<Integer>> tunnel2Phase1DhGroupNumbers) {
            this.tunnel2Phase1DhGroupNumbers = tunnel2Phase1DhGroupNumbers;
            return this;
        }
        public Builder tunnel2Phase1DhGroupNumbers(@Nullable List<Integer> tunnel2Phase1DhGroupNumbers) {
            this.tunnel2Phase1DhGroupNumbers = Output.ofNullable(tunnel2Phase1DhGroupNumbers);
            return this;
        }
        public Builder tunnel2Phase1DhGroupNumbers(Integer... tunnel2Phase1DhGroupNumbers) {
            return tunnel2Phase1DhGroupNumbers(List.of(tunnel2Phase1DhGroupNumbers));
        }
        public Builder tunnel2Phase1EncryptionAlgorithms(@Nullable Output<List<String>> tunnel2Phase1EncryptionAlgorithms) {
            this.tunnel2Phase1EncryptionAlgorithms = tunnel2Phase1EncryptionAlgorithms;
            return this;
        }
        public Builder tunnel2Phase1EncryptionAlgorithms(@Nullable List<String> tunnel2Phase1EncryptionAlgorithms) {
            this.tunnel2Phase1EncryptionAlgorithms = Output.ofNullable(tunnel2Phase1EncryptionAlgorithms);
            return this;
        }
        public Builder tunnel2Phase1EncryptionAlgorithms(String... tunnel2Phase1EncryptionAlgorithms) {
            return tunnel2Phase1EncryptionAlgorithms(List.of(tunnel2Phase1EncryptionAlgorithms));
        }
        public Builder tunnel2Phase1IntegrityAlgorithms(@Nullable Output<List<String>> tunnel2Phase1IntegrityAlgorithms) {
            this.tunnel2Phase1IntegrityAlgorithms = tunnel2Phase1IntegrityAlgorithms;
            return this;
        }
        public Builder tunnel2Phase1IntegrityAlgorithms(@Nullable List<String> tunnel2Phase1IntegrityAlgorithms) {
            this.tunnel2Phase1IntegrityAlgorithms = Output.ofNullable(tunnel2Phase1IntegrityAlgorithms);
            return this;
        }
        public Builder tunnel2Phase1IntegrityAlgorithms(String... tunnel2Phase1IntegrityAlgorithms) {
            return tunnel2Phase1IntegrityAlgorithms(List.of(tunnel2Phase1IntegrityAlgorithms));
        }
        public Builder tunnel2Phase1LifetimeSeconds(@Nullable Output<Integer> tunnel2Phase1LifetimeSeconds) {
            this.tunnel2Phase1LifetimeSeconds = tunnel2Phase1LifetimeSeconds;
            return this;
        }
        public Builder tunnel2Phase1LifetimeSeconds(@Nullable Integer tunnel2Phase1LifetimeSeconds) {
            this.tunnel2Phase1LifetimeSeconds = Output.ofNullable(tunnel2Phase1LifetimeSeconds);
            return this;
        }
        public Builder tunnel2Phase2DhGroupNumbers(@Nullable Output<List<Integer>> tunnel2Phase2DhGroupNumbers) {
            this.tunnel2Phase2DhGroupNumbers = tunnel2Phase2DhGroupNumbers;
            return this;
        }
        public Builder tunnel2Phase2DhGroupNumbers(@Nullable List<Integer> tunnel2Phase2DhGroupNumbers) {
            this.tunnel2Phase2DhGroupNumbers = Output.ofNullable(tunnel2Phase2DhGroupNumbers);
            return this;
        }
        public Builder tunnel2Phase2DhGroupNumbers(Integer... tunnel2Phase2DhGroupNumbers) {
            return tunnel2Phase2DhGroupNumbers(List.of(tunnel2Phase2DhGroupNumbers));
        }
        public Builder tunnel2Phase2EncryptionAlgorithms(@Nullable Output<List<String>> tunnel2Phase2EncryptionAlgorithms) {
            this.tunnel2Phase2EncryptionAlgorithms = tunnel2Phase2EncryptionAlgorithms;
            return this;
        }
        public Builder tunnel2Phase2EncryptionAlgorithms(@Nullable List<String> tunnel2Phase2EncryptionAlgorithms) {
            this.tunnel2Phase2EncryptionAlgorithms = Output.ofNullable(tunnel2Phase2EncryptionAlgorithms);
            return this;
        }
        public Builder tunnel2Phase2EncryptionAlgorithms(String... tunnel2Phase2EncryptionAlgorithms) {
            return tunnel2Phase2EncryptionAlgorithms(List.of(tunnel2Phase2EncryptionAlgorithms));
        }
        public Builder tunnel2Phase2IntegrityAlgorithms(@Nullable Output<List<String>> tunnel2Phase2IntegrityAlgorithms) {
            this.tunnel2Phase2IntegrityAlgorithms = tunnel2Phase2IntegrityAlgorithms;
            return this;
        }
        public Builder tunnel2Phase2IntegrityAlgorithms(@Nullable List<String> tunnel2Phase2IntegrityAlgorithms) {
            this.tunnel2Phase2IntegrityAlgorithms = Output.ofNullable(tunnel2Phase2IntegrityAlgorithms);
            return this;
        }
        public Builder tunnel2Phase2IntegrityAlgorithms(String... tunnel2Phase2IntegrityAlgorithms) {
            return tunnel2Phase2IntegrityAlgorithms(List.of(tunnel2Phase2IntegrityAlgorithms));
        }
        public Builder tunnel2Phase2LifetimeSeconds(@Nullable Output<Integer> tunnel2Phase2LifetimeSeconds) {
            this.tunnel2Phase2LifetimeSeconds = tunnel2Phase2LifetimeSeconds;
            return this;
        }
        public Builder tunnel2Phase2LifetimeSeconds(@Nullable Integer tunnel2Phase2LifetimeSeconds) {
            this.tunnel2Phase2LifetimeSeconds = Output.ofNullable(tunnel2Phase2LifetimeSeconds);
            return this;
        }
        public Builder tunnel2PresharedKey(@Nullable Output<String> tunnel2PresharedKey) {
            this.tunnel2PresharedKey = tunnel2PresharedKey;
            return this;
        }
        public Builder tunnel2PresharedKey(@Nullable String tunnel2PresharedKey) {
            this.tunnel2PresharedKey = Output.ofNullable(tunnel2PresharedKey);
            return this;
        }
        public Builder tunnel2RekeyFuzzPercentage(@Nullable Output<Integer> tunnel2RekeyFuzzPercentage) {
            this.tunnel2RekeyFuzzPercentage = tunnel2RekeyFuzzPercentage;
            return this;
        }
        public Builder tunnel2RekeyFuzzPercentage(@Nullable Integer tunnel2RekeyFuzzPercentage) {
            this.tunnel2RekeyFuzzPercentage = Output.ofNullable(tunnel2RekeyFuzzPercentage);
            return this;
        }
        public Builder tunnel2RekeyMarginTimeSeconds(@Nullable Output<Integer> tunnel2RekeyMarginTimeSeconds) {
            this.tunnel2RekeyMarginTimeSeconds = tunnel2RekeyMarginTimeSeconds;
            return this;
        }
        public Builder tunnel2RekeyMarginTimeSeconds(@Nullable Integer tunnel2RekeyMarginTimeSeconds) {
            this.tunnel2RekeyMarginTimeSeconds = Output.ofNullable(tunnel2RekeyMarginTimeSeconds);
            return this;
        }
        public Builder tunnel2ReplayWindowSize(@Nullable Output<Integer> tunnel2ReplayWindowSize) {
            this.tunnel2ReplayWindowSize = tunnel2ReplayWindowSize;
            return this;
        }
        public Builder tunnel2ReplayWindowSize(@Nullable Integer tunnel2ReplayWindowSize) {
            this.tunnel2ReplayWindowSize = Output.ofNullable(tunnel2ReplayWindowSize);
            return this;
        }
        public Builder tunnel2StartupAction(@Nullable Output<String> tunnel2StartupAction) {
            this.tunnel2StartupAction = tunnel2StartupAction;
            return this;
        }
        public Builder tunnel2StartupAction(@Nullable String tunnel2StartupAction) {
            this.tunnel2StartupAction = Output.ofNullable(tunnel2StartupAction);
            return this;
        }
        public Builder tunnelInsideIpVersion(@Nullable Output<String> tunnelInsideIpVersion) {
            this.tunnelInsideIpVersion = tunnelInsideIpVersion;
            return this;
        }
        public Builder tunnelInsideIpVersion(@Nullable String tunnelInsideIpVersion) {
            this.tunnelInsideIpVersion = Output.ofNullable(tunnelInsideIpVersion);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public Builder vpnGatewayId(@Nullable Output<String> vpnGatewayId) {
            this.vpnGatewayId = vpnGatewayId;
            return this;
        }
        public Builder vpnGatewayId(@Nullable String vpnGatewayId) {
            this.vpnGatewayId = Output.ofNullable(vpnGatewayId);
            return this;
        }        public VpnConnectionArgs build() {
            return new VpnConnectionArgs(customerGatewayId, enableAcceleration, localIpv4NetworkCidr, localIpv6NetworkCidr, remoteIpv4NetworkCidr, remoteIpv6NetworkCidr, staticRoutesOnly, tags, transitGatewayId, tunnel1DpdTimeoutAction, tunnel1DpdTimeoutSeconds, tunnel1IkeVersions, tunnel1InsideCidr, tunnel1InsideIpv6Cidr, tunnel1Phase1DhGroupNumbers, tunnel1Phase1EncryptionAlgorithms, tunnel1Phase1IntegrityAlgorithms, tunnel1Phase1LifetimeSeconds, tunnel1Phase2DhGroupNumbers, tunnel1Phase2EncryptionAlgorithms, tunnel1Phase2IntegrityAlgorithms, tunnel1Phase2LifetimeSeconds, tunnel1PresharedKey, tunnel1RekeyFuzzPercentage, tunnel1RekeyMarginTimeSeconds, tunnel1ReplayWindowSize, tunnel1StartupAction, tunnel2DpdTimeoutAction, tunnel2DpdTimeoutSeconds, tunnel2IkeVersions, tunnel2InsideCidr, tunnel2InsideIpv6Cidr, tunnel2Phase1DhGroupNumbers, tunnel2Phase1EncryptionAlgorithms, tunnel2Phase1IntegrityAlgorithms, tunnel2Phase1LifetimeSeconds, tunnel2Phase2DhGroupNumbers, tunnel2Phase2EncryptionAlgorithms, tunnel2Phase2IntegrityAlgorithms, tunnel2Phase2LifetimeSeconds, tunnel2PresharedKey, tunnel2RekeyFuzzPercentage, tunnel2RekeyMarginTimeSeconds, tunnel2ReplayWindowSize, tunnel2StartupAction, tunnelInsideIpVersion, type, vpnGatewayId);
        }
    }
}
