// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpnConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final VpnConnectionArgs Empty = new VpnConnectionArgs();

    /**
     * The ID of the customer gateway.
     * 
     */
    @InputImport(name="customerGatewayId", required=true)
    private final Input<String> customerGatewayId;

    public Input<String> getCustomerGatewayId() {
        return this.customerGatewayId;
    }

    /**
     * Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
     * 
     */
    @InputImport(name="enableAcceleration")
    private final @Nullable Input<Boolean> enableAcceleration;

    public Input<Boolean> getEnableAcceleration() {
        return this.enableAcceleration == null ? Input.empty() : this.enableAcceleration;
    }

    /**
     * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @InputImport(name="localIpv4NetworkCidr")
    private final @Nullable Input<String> localIpv4NetworkCidr;

    public Input<String> getLocalIpv4NetworkCidr() {
        return this.localIpv4NetworkCidr == null ? Input.empty() : this.localIpv4NetworkCidr;
    }

    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @InputImport(name="localIpv6NetworkCidr")
    private final @Nullable Input<String> localIpv6NetworkCidr;

    public Input<String> getLocalIpv6NetworkCidr() {
        return this.localIpv6NetworkCidr == null ? Input.empty() : this.localIpv6NetworkCidr;
    }

    /**
     * The IPv4 CIDR on the AWS side of the VPN connection.
     * 
     */
    @InputImport(name="remoteIpv4NetworkCidr")
    private final @Nullable Input<String> remoteIpv4NetworkCidr;

    public Input<String> getRemoteIpv4NetworkCidr() {
        return this.remoteIpv4NetworkCidr == null ? Input.empty() : this.remoteIpv4NetworkCidr;
    }

    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @InputImport(name="remoteIpv6NetworkCidr")
    private final @Nullable Input<String> remoteIpv6NetworkCidr;

    public Input<String> getRemoteIpv6NetworkCidr() {
        return this.remoteIpv6NetworkCidr == null ? Input.empty() : this.remoteIpv6NetworkCidr;
    }

    /**
     * Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
     * 
     */
    @InputImport(name="staticRoutesOnly")
    private final @Nullable Input<Boolean> staticRoutesOnly;

    public Input<Boolean> getStaticRoutesOnly() {
        return this.staticRoutesOnly == null ? Input.empty() : this.staticRoutesOnly;
    }

    /**
     * Tags to apply to the connection. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The ID of the EC2 Transit Gateway.
     * 
     */
    @InputImport(name="transitGatewayId")
    private final @Nullable Input<String> transitGatewayId;

    public Input<String> getTransitGatewayId() {
        return this.transitGatewayId == null ? Input.empty() : this.transitGatewayId;
    }

    /**
     * The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    @InputImport(name="tunnel1DpdTimeoutAction")
    private final @Nullable Input<String> tunnel1DpdTimeoutAction;

    public Input<String> getTunnel1DpdTimeoutAction() {
        return this.tunnel1DpdTimeoutAction == null ? Input.empty() : this.tunnel1DpdTimeoutAction;
    }

    /**
     * The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    @InputImport(name="tunnel1DpdTimeoutSeconds")
    private final @Nullable Input<Integer> tunnel1DpdTimeoutSeconds;

    public Input<Integer> getTunnel1DpdTimeoutSeconds() {
        return this.tunnel1DpdTimeoutSeconds == null ? Input.empty() : this.tunnel1DpdTimeoutSeconds;
    }

    /**
     * The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    @InputImport(name="tunnel1IkeVersions")
    private final @Nullable Input<List<String>> tunnel1IkeVersions;

    public Input<List<String>> getTunnel1IkeVersions() {
        return this.tunnel1IkeVersions == null ? Input.empty() : this.tunnel1IkeVersions;
    }

    /**
     * The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    @InputImport(name="tunnel1InsideCidr")
    private final @Nullable Input<String> tunnel1InsideCidr;

    public Input<String> getTunnel1InsideCidr() {
        return this.tunnel1InsideCidr == null ? Input.empty() : this.tunnel1InsideCidr;
    }

    /**
     * The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    @InputImport(name="tunnel1InsideIpv6Cidr")
    private final @Nullable Input<String> tunnel1InsideIpv6Cidr;

    public Input<String> getTunnel1InsideIpv6Cidr() {
        return this.tunnel1InsideIpv6Cidr == null ? Input.empty() : this.tunnel1InsideIpv6Cidr;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    @InputImport(name="tunnel1Phase1DhGroupNumbers")
    private final @Nullable Input<List<Integer>> tunnel1Phase1DhGroupNumbers;

    public Input<List<Integer>> getTunnel1Phase1DhGroupNumbers() {
        return this.tunnel1Phase1DhGroupNumbers == null ? Input.empty() : this.tunnel1Phase1DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @InputImport(name="tunnel1Phase1EncryptionAlgorithms")
    private final @Nullable Input<List<String>> tunnel1Phase1EncryptionAlgorithms;

    public Input<List<String>> getTunnel1Phase1EncryptionAlgorithms() {
        return this.tunnel1Phase1EncryptionAlgorithms == null ? Input.empty() : this.tunnel1Phase1EncryptionAlgorithms;
    }

    /**
     * One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @InputImport(name="tunnel1Phase1IntegrityAlgorithms")
    private final @Nullable Input<List<String>> tunnel1Phase1IntegrityAlgorithms;

    public Input<List<String>> getTunnel1Phase1IntegrityAlgorithms() {
        return this.tunnel1Phase1IntegrityAlgorithms == null ? Input.empty() : this.tunnel1Phase1IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    @InputImport(name="tunnel1Phase1LifetimeSeconds")
    private final @Nullable Input<Integer> tunnel1Phase1LifetimeSeconds;

    public Input<Integer> getTunnel1Phase1LifetimeSeconds() {
        return this.tunnel1Phase1LifetimeSeconds == null ? Input.empty() : this.tunnel1Phase1LifetimeSeconds;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    @InputImport(name="tunnel1Phase2DhGroupNumbers")
    private final @Nullable Input<List<Integer>> tunnel1Phase2DhGroupNumbers;

    public Input<List<Integer>> getTunnel1Phase2DhGroupNumbers() {
        return this.tunnel1Phase2DhGroupNumbers == null ? Input.empty() : this.tunnel1Phase2DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @InputImport(name="tunnel1Phase2EncryptionAlgorithms")
    private final @Nullable Input<List<String>> tunnel1Phase2EncryptionAlgorithms;

    public Input<List<String>> getTunnel1Phase2EncryptionAlgorithms() {
        return this.tunnel1Phase2EncryptionAlgorithms == null ? Input.empty() : this.tunnel1Phase2EncryptionAlgorithms;
    }

    /**
     * List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @InputImport(name="tunnel1Phase2IntegrityAlgorithms")
    private final @Nullable Input<List<String>> tunnel1Phase2IntegrityAlgorithms;

    public Input<List<String>> getTunnel1Phase2IntegrityAlgorithms() {
        return this.tunnel1Phase2IntegrityAlgorithms == null ? Input.empty() : this.tunnel1Phase2IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    @InputImport(name="tunnel1Phase2LifetimeSeconds")
    private final @Nullable Input<Integer> tunnel1Phase2LifetimeSeconds;

    public Input<Integer> getTunnel1Phase2LifetimeSeconds() {
        return this.tunnel1Phase2LifetimeSeconds == null ? Input.empty() : this.tunnel1Phase2LifetimeSeconds;
    }

    /**
     * The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    @InputImport(name="tunnel1PresharedKey")
    private final @Nullable Input<String> tunnel1PresharedKey;

    public Input<String> getTunnel1PresharedKey() {
        return this.tunnel1PresharedKey == null ? Input.empty() : this.tunnel1PresharedKey;
    }

    /**
     * The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    @InputImport(name="tunnel1RekeyFuzzPercentage")
    private final @Nullable Input<Integer> tunnel1RekeyFuzzPercentage;

    public Input<Integer> getTunnel1RekeyFuzzPercentage() {
        return this.tunnel1RekeyFuzzPercentage == null ? Input.empty() : this.tunnel1RekeyFuzzPercentage;
    }

    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel1_phase2_lifetime_seconds`.
     * 
     */
    @InputImport(name="tunnel1RekeyMarginTimeSeconds")
    private final @Nullable Input<Integer> tunnel1RekeyMarginTimeSeconds;

    public Input<Integer> getTunnel1RekeyMarginTimeSeconds() {
        return this.tunnel1RekeyMarginTimeSeconds == null ? Input.empty() : this.tunnel1RekeyMarginTimeSeconds;
    }

    /**
     * The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    @InputImport(name="tunnel1ReplayWindowSize")
    private final @Nullable Input<Integer> tunnel1ReplayWindowSize;

    public Input<Integer> getTunnel1ReplayWindowSize() {
        return this.tunnel1ReplayWindowSize == null ? Input.empty() : this.tunnel1ReplayWindowSize;
    }

    /**
     * The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    @InputImport(name="tunnel1StartupAction")
    private final @Nullable Input<String> tunnel1StartupAction;

    public Input<String> getTunnel1StartupAction() {
        return this.tunnel1StartupAction == null ? Input.empty() : this.tunnel1StartupAction;
    }

    /**
     * The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    @InputImport(name="tunnel2DpdTimeoutAction")
    private final @Nullable Input<String> tunnel2DpdTimeoutAction;

    public Input<String> getTunnel2DpdTimeoutAction() {
        return this.tunnel2DpdTimeoutAction == null ? Input.empty() : this.tunnel2DpdTimeoutAction;
    }

    /**
     * The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    @InputImport(name="tunnel2DpdTimeoutSeconds")
    private final @Nullable Input<Integer> tunnel2DpdTimeoutSeconds;

    public Input<Integer> getTunnel2DpdTimeoutSeconds() {
        return this.tunnel2DpdTimeoutSeconds == null ? Input.empty() : this.tunnel2DpdTimeoutSeconds;
    }

    /**
     * The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    @InputImport(name="tunnel2IkeVersions")
    private final @Nullable Input<List<String>> tunnel2IkeVersions;

    public Input<List<String>> getTunnel2IkeVersions() {
        return this.tunnel2IkeVersions == null ? Input.empty() : this.tunnel2IkeVersions;
    }

    /**
     * The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    @InputImport(name="tunnel2InsideCidr")
    private final @Nullable Input<String> tunnel2InsideCidr;

    public Input<String> getTunnel2InsideCidr() {
        return this.tunnel2InsideCidr == null ? Input.empty() : this.tunnel2InsideCidr;
    }

    /**
     * The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    @InputImport(name="tunnel2InsideIpv6Cidr")
    private final @Nullable Input<String> tunnel2InsideIpv6Cidr;

    public Input<String> getTunnel2InsideIpv6Cidr() {
        return this.tunnel2InsideIpv6Cidr == null ? Input.empty() : this.tunnel2InsideIpv6Cidr;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    @InputImport(name="tunnel2Phase1DhGroupNumbers")
    private final @Nullable Input<List<Integer>> tunnel2Phase1DhGroupNumbers;

    public Input<List<Integer>> getTunnel2Phase1DhGroupNumbers() {
        return this.tunnel2Phase1DhGroupNumbers == null ? Input.empty() : this.tunnel2Phase1DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @InputImport(name="tunnel2Phase1EncryptionAlgorithms")
    private final @Nullable Input<List<String>> tunnel2Phase1EncryptionAlgorithms;

    public Input<List<String>> getTunnel2Phase1EncryptionAlgorithms() {
        return this.tunnel2Phase1EncryptionAlgorithms == null ? Input.empty() : this.tunnel2Phase1EncryptionAlgorithms;
    }

    /**
     * One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @InputImport(name="tunnel2Phase1IntegrityAlgorithms")
    private final @Nullable Input<List<String>> tunnel2Phase1IntegrityAlgorithms;

    public Input<List<String>> getTunnel2Phase1IntegrityAlgorithms() {
        return this.tunnel2Phase1IntegrityAlgorithms == null ? Input.empty() : this.tunnel2Phase1IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    @InputImport(name="tunnel2Phase1LifetimeSeconds")
    private final @Nullable Input<Integer> tunnel2Phase1LifetimeSeconds;

    public Input<Integer> getTunnel2Phase1LifetimeSeconds() {
        return this.tunnel2Phase1LifetimeSeconds == null ? Input.empty() : this.tunnel2Phase1LifetimeSeconds;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    @InputImport(name="tunnel2Phase2DhGroupNumbers")
    private final @Nullable Input<List<Integer>> tunnel2Phase2DhGroupNumbers;

    public Input<List<Integer>> getTunnel2Phase2DhGroupNumbers() {
        return this.tunnel2Phase2DhGroupNumbers == null ? Input.empty() : this.tunnel2Phase2DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @InputImport(name="tunnel2Phase2EncryptionAlgorithms")
    private final @Nullable Input<List<String>> tunnel2Phase2EncryptionAlgorithms;

    public Input<List<String>> getTunnel2Phase2EncryptionAlgorithms() {
        return this.tunnel2Phase2EncryptionAlgorithms == null ? Input.empty() : this.tunnel2Phase2EncryptionAlgorithms;
    }

    /**
     * List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @InputImport(name="tunnel2Phase2IntegrityAlgorithms")
    private final @Nullable Input<List<String>> tunnel2Phase2IntegrityAlgorithms;

    public Input<List<String>> getTunnel2Phase2IntegrityAlgorithms() {
        return this.tunnel2Phase2IntegrityAlgorithms == null ? Input.empty() : this.tunnel2Phase2IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    @InputImport(name="tunnel2Phase2LifetimeSeconds")
    private final @Nullable Input<Integer> tunnel2Phase2LifetimeSeconds;

    public Input<Integer> getTunnel2Phase2LifetimeSeconds() {
        return this.tunnel2Phase2LifetimeSeconds == null ? Input.empty() : this.tunnel2Phase2LifetimeSeconds;
    }

    /**
     * The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    @InputImport(name="tunnel2PresharedKey")
    private final @Nullable Input<String> tunnel2PresharedKey;

    public Input<String> getTunnel2PresharedKey() {
        return this.tunnel2PresharedKey == null ? Input.empty() : this.tunnel2PresharedKey;
    }

    /**
     * The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    @InputImport(name="tunnel2RekeyFuzzPercentage")
    private final @Nullable Input<Integer> tunnel2RekeyFuzzPercentage;

    public Input<Integer> getTunnel2RekeyFuzzPercentage() {
        return this.tunnel2RekeyFuzzPercentage == null ? Input.empty() : this.tunnel2RekeyFuzzPercentage;
    }

    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel2_phase2_lifetime_seconds`.
     * 
     */
    @InputImport(name="tunnel2RekeyMarginTimeSeconds")
    private final @Nullable Input<Integer> tunnel2RekeyMarginTimeSeconds;

    public Input<Integer> getTunnel2RekeyMarginTimeSeconds() {
        return this.tunnel2RekeyMarginTimeSeconds == null ? Input.empty() : this.tunnel2RekeyMarginTimeSeconds;
    }

    /**
     * The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    @InputImport(name="tunnel2ReplayWindowSize")
    private final @Nullable Input<Integer> tunnel2ReplayWindowSize;

    public Input<Integer> getTunnel2ReplayWindowSize() {
        return this.tunnel2ReplayWindowSize == null ? Input.empty() : this.tunnel2ReplayWindowSize;
    }

    /**
     * The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    @InputImport(name="tunnel2StartupAction")
    private final @Nullable Input<String> tunnel2StartupAction;

    public Input<String> getTunnel2StartupAction() {
        return this.tunnel2StartupAction == null ? Input.empty() : this.tunnel2StartupAction;
    }

    /**
     * Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
     * 
     */
    @InputImport(name="tunnelInsideIpVersion")
    private final @Nullable Input<String> tunnelInsideIpVersion;

    public Input<String> getTunnelInsideIpVersion() {
        return this.tunnelInsideIpVersion == null ? Input.empty() : this.tunnelInsideIpVersion;
    }

    /**
     * The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
     * 
     */
    @InputImport(name="type", required=true)
    private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    /**
     * The ID of the Virtual Private Gateway.
     * 
     */
    @InputImport(name="vpnGatewayId")
    private final @Nullable Input<String> vpnGatewayId;

    public Input<String> getVpnGatewayId() {
        return this.vpnGatewayId == null ? Input.empty() : this.vpnGatewayId;
    }

    public VpnConnectionArgs(
        Input<String> customerGatewayId,
        @Nullable Input<Boolean> enableAcceleration,
        @Nullable Input<String> localIpv4NetworkCidr,
        @Nullable Input<String> localIpv6NetworkCidr,
        @Nullable Input<String> remoteIpv4NetworkCidr,
        @Nullable Input<String> remoteIpv6NetworkCidr,
        @Nullable Input<Boolean> staticRoutesOnly,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<String> transitGatewayId,
        @Nullable Input<String> tunnel1DpdTimeoutAction,
        @Nullable Input<Integer> tunnel1DpdTimeoutSeconds,
        @Nullable Input<List<String>> tunnel1IkeVersions,
        @Nullable Input<String> tunnel1InsideCidr,
        @Nullable Input<String> tunnel1InsideIpv6Cidr,
        @Nullable Input<List<Integer>> tunnel1Phase1DhGroupNumbers,
        @Nullable Input<List<String>> tunnel1Phase1EncryptionAlgorithms,
        @Nullable Input<List<String>> tunnel1Phase1IntegrityAlgorithms,
        @Nullable Input<Integer> tunnel1Phase1LifetimeSeconds,
        @Nullable Input<List<Integer>> tunnel1Phase2DhGroupNumbers,
        @Nullable Input<List<String>> tunnel1Phase2EncryptionAlgorithms,
        @Nullable Input<List<String>> tunnel1Phase2IntegrityAlgorithms,
        @Nullable Input<Integer> tunnel1Phase2LifetimeSeconds,
        @Nullable Input<String> tunnel1PresharedKey,
        @Nullable Input<Integer> tunnel1RekeyFuzzPercentage,
        @Nullable Input<Integer> tunnel1RekeyMarginTimeSeconds,
        @Nullable Input<Integer> tunnel1ReplayWindowSize,
        @Nullable Input<String> tunnel1StartupAction,
        @Nullable Input<String> tunnel2DpdTimeoutAction,
        @Nullable Input<Integer> tunnel2DpdTimeoutSeconds,
        @Nullable Input<List<String>> tunnel2IkeVersions,
        @Nullable Input<String> tunnel2InsideCidr,
        @Nullable Input<String> tunnel2InsideIpv6Cidr,
        @Nullable Input<List<Integer>> tunnel2Phase1DhGroupNumbers,
        @Nullable Input<List<String>> tunnel2Phase1EncryptionAlgorithms,
        @Nullable Input<List<String>> tunnel2Phase1IntegrityAlgorithms,
        @Nullable Input<Integer> tunnel2Phase1LifetimeSeconds,
        @Nullable Input<List<Integer>> tunnel2Phase2DhGroupNumbers,
        @Nullable Input<List<String>> tunnel2Phase2EncryptionAlgorithms,
        @Nullable Input<List<String>> tunnel2Phase2IntegrityAlgorithms,
        @Nullable Input<Integer> tunnel2Phase2LifetimeSeconds,
        @Nullable Input<String> tunnel2PresharedKey,
        @Nullable Input<Integer> tunnel2RekeyFuzzPercentage,
        @Nullable Input<Integer> tunnel2RekeyMarginTimeSeconds,
        @Nullable Input<Integer> tunnel2ReplayWindowSize,
        @Nullable Input<String> tunnel2StartupAction,
        @Nullable Input<String> tunnelInsideIpVersion,
        Input<String> type,
        @Nullable Input<String> vpnGatewayId) {
        this.customerGatewayId = Objects.requireNonNull(customerGatewayId, "expected parameter 'customerGatewayId' to be non-null");
        this.enableAcceleration = enableAcceleration;
        this.localIpv4NetworkCidr = localIpv4NetworkCidr;
        this.localIpv6NetworkCidr = localIpv6NetworkCidr;
        this.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr;
        this.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr;
        this.staticRoutesOnly = staticRoutesOnly;
        this.tags = tags;
        this.transitGatewayId = transitGatewayId;
        this.tunnel1DpdTimeoutAction = tunnel1DpdTimeoutAction;
        this.tunnel1DpdTimeoutSeconds = tunnel1DpdTimeoutSeconds;
        this.tunnel1IkeVersions = tunnel1IkeVersions;
        this.tunnel1InsideCidr = tunnel1InsideCidr;
        this.tunnel1InsideIpv6Cidr = tunnel1InsideIpv6Cidr;
        this.tunnel1Phase1DhGroupNumbers = tunnel1Phase1DhGroupNumbers;
        this.tunnel1Phase1EncryptionAlgorithms = tunnel1Phase1EncryptionAlgorithms;
        this.tunnel1Phase1IntegrityAlgorithms = tunnel1Phase1IntegrityAlgorithms;
        this.tunnel1Phase1LifetimeSeconds = tunnel1Phase1LifetimeSeconds;
        this.tunnel1Phase2DhGroupNumbers = tunnel1Phase2DhGroupNumbers;
        this.tunnel1Phase2EncryptionAlgorithms = tunnel1Phase2EncryptionAlgorithms;
        this.tunnel1Phase2IntegrityAlgorithms = tunnel1Phase2IntegrityAlgorithms;
        this.tunnel1Phase2LifetimeSeconds = tunnel1Phase2LifetimeSeconds;
        this.tunnel1PresharedKey = tunnel1PresharedKey;
        this.tunnel1RekeyFuzzPercentage = tunnel1RekeyFuzzPercentage;
        this.tunnel1RekeyMarginTimeSeconds = tunnel1RekeyMarginTimeSeconds;
        this.tunnel1ReplayWindowSize = tunnel1ReplayWindowSize;
        this.tunnel1StartupAction = tunnel1StartupAction;
        this.tunnel2DpdTimeoutAction = tunnel2DpdTimeoutAction;
        this.tunnel2DpdTimeoutSeconds = tunnel2DpdTimeoutSeconds;
        this.tunnel2IkeVersions = tunnel2IkeVersions;
        this.tunnel2InsideCidr = tunnel2InsideCidr;
        this.tunnel2InsideIpv6Cidr = tunnel2InsideIpv6Cidr;
        this.tunnel2Phase1DhGroupNumbers = tunnel2Phase1DhGroupNumbers;
        this.tunnel2Phase1EncryptionAlgorithms = tunnel2Phase1EncryptionAlgorithms;
        this.tunnel2Phase1IntegrityAlgorithms = tunnel2Phase1IntegrityAlgorithms;
        this.tunnel2Phase1LifetimeSeconds = tunnel2Phase1LifetimeSeconds;
        this.tunnel2Phase2DhGroupNumbers = tunnel2Phase2DhGroupNumbers;
        this.tunnel2Phase2EncryptionAlgorithms = tunnel2Phase2EncryptionAlgorithms;
        this.tunnel2Phase2IntegrityAlgorithms = tunnel2Phase2IntegrityAlgorithms;
        this.tunnel2Phase2LifetimeSeconds = tunnel2Phase2LifetimeSeconds;
        this.tunnel2PresharedKey = tunnel2PresharedKey;
        this.tunnel2RekeyFuzzPercentage = tunnel2RekeyFuzzPercentage;
        this.tunnel2RekeyMarginTimeSeconds = tunnel2RekeyMarginTimeSeconds;
        this.tunnel2ReplayWindowSize = tunnel2ReplayWindowSize;
        this.tunnel2StartupAction = tunnel2StartupAction;
        this.tunnelInsideIpVersion = tunnelInsideIpVersion;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.vpnGatewayId = vpnGatewayId;
    }

    private VpnConnectionArgs() {
        this.customerGatewayId = Input.empty();
        this.enableAcceleration = Input.empty();
        this.localIpv4NetworkCidr = Input.empty();
        this.localIpv6NetworkCidr = Input.empty();
        this.remoteIpv4NetworkCidr = Input.empty();
        this.remoteIpv6NetworkCidr = Input.empty();
        this.staticRoutesOnly = Input.empty();
        this.tags = Input.empty();
        this.transitGatewayId = Input.empty();
        this.tunnel1DpdTimeoutAction = Input.empty();
        this.tunnel1DpdTimeoutSeconds = Input.empty();
        this.tunnel1IkeVersions = Input.empty();
        this.tunnel1InsideCidr = Input.empty();
        this.tunnel1InsideIpv6Cidr = Input.empty();
        this.tunnel1Phase1DhGroupNumbers = Input.empty();
        this.tunnel1Phase1EncryptionAlgorithms = Input.empty();
        this.tunnel1Phase1IntegrityAlgorithms = Input.empty();
        this.tunnel1Phase1LifetimeSeconds = Input.empty();
        this.tunnel1Phase2DhGroupNumbers = Input.empty();
        this.tunnel1Phase2EncryptionAlgorithms = Input.empty();
        this.tunnel1Phase2IntegrityAlgorithms = Input.empty();
        this.tunnel1Phase2LifetimeSeconds = Input.empty();
        this.tunnel1PresharedKey = Input.empty();
        this.tunnel1RekeyFuzzPercentage = Input.empty();
        this.tunnel1RekeyMarginTimeSeconds = Input.empty();
        this.tunnel1ReplayWindowSize = Input.empty();
        this.tunnel1StartupAction = Input.empty();
        this.tunnel2DpdTimeoutAction = Input.empty();
        this.tunnel2DpdTimeoutSeconds = Input.empty();
        this.tunnel2IkeVersions = Input.empty();
        this.tunnel2InsideCidr = Input.empty();
        this.tunnel2InsideIpv6Cidr = Input.empty();
        this.tunnel2Phase1DhGroupNumbers = Input.empty();
        this.tunnel2Phase1EncryptionAlgorithms = Input.empty();
        this.tunnel2Phase1IntegrityAlgorithms = Input.empty();
        this.tunnel2Phase1LifetimeSeconds = Input.empty();
        this.tunnel2Phase2DhGroupNumbers = Input.empty();
        this.tunnel2Phase2EncryptionAlgorithms = Input.empty();
        this.tunnel2Phase2IntegrityAlgorithms = Input.empty();
        this.tunnel2Phase2LifetimeSeconds = Input.empty();
        this.tunnel2PresharedKey = Input.empty();
        this.tunnel2RekeyFuzzPercentage = Input.empty();
        this.tunnel2RekeyMarginTimeSeconds = Input.empty();
        this.tunnel2ReplayWindowSize = Input.empty();
        this.tunnel2StartupAction = Input.empty();
        this.tunnelInsideIpVersion = Input.empty();
        this.type = Input.empty();
        this.vpnGatewayId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> customerGatewayId;
        private @Nullable Input<Boolean> enableAcceleration;
        private @Nullable Input<String> localIpv4NetworkCidr;
        private @Nullable Input<String> localIpv6NetworkCidr;
        private @Nullable Input<String> remoteIpv4NetworkCidr;
        private @Nullable Input<String> remoteIpv6NetworkCidr;
        private @Nullable Input<Boolean> staticRoutesOnly;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<String> transitGatewayId;
        private @Nullable Input<String> tunnel1DpdTimeoutAction;
        private @Nullable Input<Integer> tunnel1DpdTimeoutSeconds;
        private @Nullable Input<List<String>> tunnel1IkeVersions;
        private @Nullable Input<String> tunnel1InsideCidr;
        private @Nullable Input<String> tunnel1InsideIpv6Cidr;
        private @Nullable Input<List<Integer>> tunnel1Phase1DhGroupNumbers;
        private @Nullable Input<List<String>> tunnel1Phase1EncryptionAlgorithms;
        private @Nullable Input<List<String>> tunnel1Phase1IntegrityAlgorithms;
        private @Nullable Input<Integer> tunnel1Phase1LifetimeSeconds;
        private @Nullable Input<List<Integer>> tunnel1Phase2DhGroupNumbers;
        private @Nullable Input<List<String>> tunnel1Phase2EncryptionAlgorithms;
        private @Nullable Input<List<String>> tunnel1Phase2IntegrityAlgorithms;
        private @Nullable Input<Integer> tunnel1Phase2LifetimeSeconds;
        private @Nullable Input<String> tunnel1PresharedKey;
        private @Nullable Input<Integer> tunnel1RekeyFuzzPercentage;
        private @Nullable Input<Integer> tunnel1RekeyMarginTimeSeconds;
        private @Nullable Input<Integer> tunnel1ReplayWindowSize;
        private @Nullable Input<String> tunnel1StartupAction;
        private @Nullable Input<String> tunnel2DpdTimeoutAction;
        private @Nullable Input<Integer> tunnel2DpdTimeoutSeconds;
        private @Nullable Input<List<String>> tunnel2IkeVersions;
        private @Nullable Input<String> tunnel2InsideCidr;
        private @Nullable Input<String> tunnel2InsideIpv6Cidr;
        private @Nullable Input<List<Integer>> tunnel2Phase1DhGroupNumbers;
        private @Nullable Input<List<String>> tunnel2Phase1EncryptionAlgorithms;
        private @Nullable Input<List<String>> tunnel2Phase1IntegrityAlgorithms;
        private @Nullable Input<Integer> tunnel2Phase1LifetimeSeconds;
        private @Nullable Input<List<Integer>> tunnel2Phase2DhGroupNumbers;
        private @Nullable Input<List<String>> tunnel2Phase2EncryptionAlgorithms;
        private @Nullable Input<List<String>> tunnel2Phase2IntegrityAlgorithms;
        private @Nullable Input<Integer> tunnel2Phase2LifetimeSeconds;
        private @Nullable Input<String> tunnel2PresharedKey;
        private @Nullable Input<Integer> tunnel2RekeyFuzzPercentage;
        private @Nullable Input<Integer> tunnel2RekeyMarginTimeSeconds;
        private @Nullable Input<Integer> tunnel2ReplayWindowSize;
        private @Nullable Input<String> tunnel2StartupAction;
        private @Nullable Input<String> tunnelInsideIpVersion;
        private Input<String> type;
        private @Nullable Input<String> vpnGatewayId;

        public Builder() {
    	      // Empty
        }

        public Builder(VpnConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customerGatewayId = defaults.customerGatewayId;
    	      this.enableAcceleration = defaults.enableAcceleration;
    	      this.localIpv4NetworkCidr = defaults.localIpv4NetworkCidr;
    	      this.localIpv6NetworkCidr = defaults.localIpv6NetworkCidr;
    	      this.remoteIpv4NetworkCidr = defaults.remoteIpv4NetworkCidr;
    	      this.remoteIpv6NetworkCidr = defaults.remoteIpv6NetworkCidr;
    	      this.staticRoutesOnly = defaults.staticRoutesOnly;
    	      this.tags = defaults.tags;
    	      this.transitGatewayId = defaults.transitGatewayId;
    	      this.tunnel1DpdTimeoutAction = defaults.tunnel1DpdTimeoutAction;
    	      this.tunnel1DpdTimeoutSeconds = defaults.tunnel1DpdTimeoutSeconds;
    	      this.tunnel1IkeVersions = defaults.tunnel1IkeVersions;
    	      this.tunnel1InsideCidr = defaults.tunnel1InsideCidr;
    	      this.tunnel1InsideIpv6Cidr = defaults.tunnel1InsideIpv6Cidr;
    	      this.tunnel1Phase1DhGroupNumbers = defaults.tunnel1Phase1DhGroupNumbers;
    	      this.tunnel1Phase1EncryptionAlgorithms = defaults.tunnel1Phase1EncryptionAlgorithms;
    	      this.tunnel1Phase1IntegrityAlgorithms = defaults.tunnel1Phase1IntegrityAlgorithms;
    	      this.tunnel1Phase1LifetimeSeconds = defaults.tunnel1Phase1LifetimeSeconds;
    	      this.tunnel1Phase2DhGroupNumbers = defaults.tunnel1Phase2DhGroupNumbers;
    	      this.tunnel1Phase2EncryptionAlgorithms = defaults.tunnel1Phase2EncryptionAlgorithms;
    	      this.tunnel1Phase2IntegrityAlgorithms = defaults.tunnel1Phase2IntegrityAlgorithms;
    	      this.tunnel1Phase2LifetimeSeconds = defaults.tunnel1Phase2LifetimeSeconds;
    	      this.tunnel1PresharedKey = defaults.tunnel1PresharedKey;
    	      this.tunnel1RekeyFuzzPercentage = defaults.tunnel1RekeyFuzzPercentage;
    	      this.tunnel1RekeyMarginTimeSeconds = defaults.tunnel1RekeyMarginTimeSeconds;
    	      this.tunnel1ReplayWindowSize = defaults.tunnel1ReplayWindowSize;
    	      this.tunnel1StartupAction = defaults.tunnel1StartupAction;
    	      this.tunnel2DpdTimeoutAction = defaults.tunnel2DpdTimeoutAction;
    	      this.tunnel2DpdTimeoutSeconds = defaults.tunnel2DpdTimeoutSeconds;
    	      this.tunnel2IkeVersions = defaults.tunnel2IkeVersions;
    	      this.tunnel2InsideCidr = defaults.tunnel2InsideCidr;
    	      this.tunnel2InsideIpv6Cidr = defaults.tunnel2InsideIpv6Cidr;
    	      this.tunnel2Phase1DhGroupNumbers = defaults.tunnel2Phase1DhGroupNumbers;
    	      this.tunnel2Phase1EncryptionAlgorithms = defaults.tunnel2Phase1EncryptionAlgorithms;
    	      this.tunnel2Phase1IntegrityAlgorithms = defaults.tunnel2Phase1IntegrityAlgorithms;
    	      this.tunnel2Phase1LifetimeSeconds = defaults.tunnel2Phase1LifetimeSeconds;
    	      this.tunnel2Phase2DhGroupNumbers = defaults.tunnel2Phase2DhGroupNumbers;
    	      this.tunnel2Phase2EncryptionAlgorithms = defaults.tunnel2Phase2EncryptionAlgorithms;
    	      this.tunnel2Phase2IntegrityAlgorithms = defaults.tunnel2Phase2IntegrityAlgorithms;
    	      this.tunnel2Phase2LifetimeSeconds = defaults.tunnel2Phase2LifetimeSeconds;
    	      this.tunnel2PresharedKey = defaults.tunnel2PresharedKey;
    	      this.tunnel2RekeyFuzzPercentage = defaults.tunnel2RekeyFuzzPercentage;
    	      this.tunnel2RekeyMarginTimeSeconds = defaults.tunnel2RekeyMarginTimeSeconds;
    	      this.tunnel2ReplayWindowSize = defaults.tunnel2ReplayWindowSize;
    	      this.tunnel2StartupAction = defaults.tunnel2StartupAction;
    	      this.tunnelInsideIpVersion = defaults.tunnelInsideIpVersion;
    	      this.type = defaults.type;
    	      this.vpnGatewayId = defaults.vpnGatewayId;
        }

        public Builder setCustomerGatewayId(Input<String> customerGatewayId) {
            this.customerGatewayId = Objects.requireNonNull(customerGatewayId);
            return this;
        }

        public Builder setCustomerGatewayId(String customerGatewayId) {
            this.customerGatewayId = Input.of(Objects.requireNonNull(customerGatewayId));
            return this;
        }

        public Builder setEnableAcceleration(@Nullable Input<Boolean> enableAcceleration) {
            this.enableAcceleration = enableAcceleration;
            return this;
        }

        public Builder setEnableAcceleration(@Nullable Boolean enableAcceleration) {
            this.enableAcceleration = Input.ofNullable(enableAcceleration);
            return this;
        }

        public Builder setLocalIpv4NetworkCidr(@Nullable Input<String> localIpv4NetworkCidr) {
            this.localIpv4NetworkCidr = localIpv4NetworkCidr;
            return this;
        }

        public Builder setLocalIpv4NetworkCidr(@Nullable String localIpv4NetworkCidr) {
            this.localIpv4NetworkCidr = Input.ofNullable(localIpv4NetworkCidr);
            return this;
        }

        public Builder setLocalIpv6NetworkCidr(@Nullable Input<String> localIpv6NetworkCidr) {
            this.localIpv6NetworkCidr = localIpv6NetworkCidr;
            return this;
        }

        public Builder setLocalIpv6NetworkCidr(@Nullable String localIpv6NetworkCidr) {
            this.localIpv6NetworkCidr = Input.ofNullable(localIpv6NetworkCidr);
            return this;
        }

        public Builder setRemoteIpv4NetworkCidr(@Nullable Input<String> remoteIpv4NetworkCidr) {
            this.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr;
            return this;
        }

        public Builder setRemoteIpv4NetworkCidr(@Nullable String remoteIpv4NetworkCidr) {
            this.remoteIpv4NetworkCidr = Input.ofNullable(remoteIpv4NetworkCidr);
            return this;
        }

        public Builder setRemoteIpv6NetworkCidr(@Nullable Input<String> remoteIpv6NetworkCidr) {
            this.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr;
            return this;
        }

        public Builder setRemoteIpv6NetworkCidr(@Nullable String remoteIpv6NetworkCidr) {
            this.remoteIpv6NetworkCidr = Input.ofNullable(remoteIpv6NetworkCidr);
            return this;
        }

        public Builder setStaticRoutesOnly(@Nullable Input<Boolean> staticRoutesOnly) {
            this.staticRoutesOnly = staticRoutesOnly;
            return this;
        }

        public Builder setStaticRoutesOnly(@Nullable Boolean staticRoutesOnly) {
            this.staticRoutesOnly = Input.ofNullable(staticRoutesOnly);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTransitGatewayId(@Nullable Input<String> transitGatewayId) {
            this.transitGatewayId = transitGatewayId;
            return this;
        }

        public Builder setTransitGatewayId(@Nullable String transitGatewayId) {
            this.transitGatewayId = Input.ofNullable(transitGatewayId);
            return this;
        }

        public Builder setTunnel1DpdTimeoutAction(@Nullable Input<String> tunnel1DpdTimeoutAction) {
            this.tunnel1DpdTimeoutAction = tunnel1DpdTimeoutAction;
            return this;
        }

        public Builder setTunnel1DpdTimeoutAction(@Nullable String tunnel1DpdTimeoutAction) {
            this.tunnel1DpdTimeoutAction = Input.ofNullable(tunnel1DpdTimeoutAction);
            return this;
        }

        public Builder setTunnel1DpdTimeoutSeconds(@Nullable Input<Integer> tunnel1DpdTimeoutSeconds) {
            this.tunnel1DpdTimeoutSeconds = tunnel1DpdTimeoutSeconds;
            return this;
        }

        public Builder setTunnel1DpdTimeoutSeconds(@Nullable Integer tunnel1DpdTimeoutSeconds) {
            this.tunnel1DpdTimeoutSeconds = Input.ofNullable(tunnel1DpdTimeoutSeconds);
            return this;
        }

        public Builder setTunnel1IkeVersions(@Nullable Input<List<String>> tunnel1IkeVersions) {
            this.tunnel1IkeVersions = tunnel1IkeVersions;
            return this;
        }

        public Builder setTunnel1IkeVersions(@Nullable List<String> tunnel1IkeVersions) {
            this.tunnel1IkeVersions = Input.ofNullable(tunnel1IkeVersions);
            return this;
        }

        public Builder setTunnel1InsideCidr(@Nullable Input<String> tunnel1InsideCidr) {
            this.tunnel1InsideCidr = tunnel1InsideCidr;
            return this;
        }

        public Builder setTunnel1InsideCidr(@Nullable String tunnel1InsideCidr) {
            this.tunnel1InsideCidr = Input.ofNullable(tunnel1InsideCidr);
            return this;
        }

        public Builder setTunnel1InsideIpv6Cidr(@Nullable Input<String> tunnel1InsideIpv6Cidr) {
            this.tunnel1InsideIpv6Cidr = tunnel1InsideIpv6Cidr;
            return this;
        }

        public Builder setTunnel1InsideIpv6Cidr(@Nullable String tunnel1InsideIpv6Cidr) {
            this.tunnel1InsideIpv6Cidr = Input.ofNullable(tunnel1InsideIpv6Cidr);
            return this;
        }

        public Builder setTunnel1Phase1DhGroupNumbers(@Nullable Input<List<Integer>> tunnel1Phase1DhGroupNumbers) {
            this.tunnel1Phase1DhGroupNumbers = tunnel1Phase1DhGroupNumbers;
            return this;
        }

        public Builder setTunnel1Phase1DhGroupNumbers(@Nullable List<Integer> tunnel1Phase1DhGroupNumbers) {
            this.tunnel1Phase1DhGroupNumbers = Input.ofNullable(tunnel1Phase1DhGroupNumbers);
            return this;
        }

        public Builder setTunnel1Phase1EncryptionAlgorithms(@Nullable Input<List<String>> tunnel1Phase1EncryptionAlgorithms) {
            this.tunnel1Phase1EncryptionAlgorithms = tunnel1Phase1EncryptionAlgorithms;
            return this;
        }

        public Builder setTunnel1Phase1EncryptionAlgorithms(@Nullable List<String> tunnel1Phase1EncryptionAlgorithms) {
            this.tunnel1Phase1EncryptionAlgorithms = Input.ofNullable(tunnel1Phase1EncryptionAlgorithms);
            return this;
        }

        public Builder setTunnel1Phase1IntegrityAlgorithms(@Nullable Input<List<String>> tunnel1Phase1IntegrityAlgorithms) {
            this.tunnel1Phase1IntegrityAlgorithms = tunnel1Phase1IntegrityAlgorithms;
            return this;
        }

        public Builder setTunnel1Phase1IntegrityAlgorithms(@Nullable List<String> tunnel1Phase1IntegrityAlgorithms) {
            this.tunnel1Phase1IntegrityAlgorithms = Input.ofNullable(tunnel1Phase1IntegrityAlgorithms);
            return this;
        }

        public Builder setTunnel1Phase1LifetimeSeconds(@Nullable Input<Integer> tunnel1Phase1LifetimeSeconds) {
            this.tunnel1Phase1LifetimeSeconds = tunnel1Phase1LifetimeSeconds;
            return this;
        }

        public Builder setTunnel1Phase1LifetimeSeconds(@Nullable Integer tunnel1Phase1LifetimeSeconds) {
            this.tunnel1Phase1LifetimeSeconds = Input.ofNullable(tunnel1Phase1LifetimeSeconds);
            return this;
        }

        public Builder setTunnel1Phase2DhGroupNumbers(@Nullable Input<List<Integer>> tunnel1Phase2DhGroupNumbers) {
            this.tunnel1Phase2DhGroupNumbers = tunnel1Phase2DhGroupNumbers;
            return this;
        }

        public Builder setTunnel1Phase2DhGroupNumbers(@Nullable List<Integer> tunnel1Phase2DhGroupNumbers) {
            this.tunnel1Phase2DhGroupNumbers = Input.ofNullable(tunnel1Phase2DhGroupNumbers);
            return this;
        }

        public Builder setTunnel1Phase2EncryptionAlgorithms(@Nullable Input<List<String>> tunnel1Phase2EncryptionAlgorithms) {
            this.tunnel1Phase2EncryptionAlgorithms = tunnel1Phase2EncryptionAlgorithms;
            return this;
        }

        public Builder setTunnel1Phase2EncryptionAlgorithms(@Nullable List<String> tunnel1Phase2EncryptionAlgorithms) {
            this.tunnel1Phase2EncryptionAlgorithms = Input.ofNullable(tunnel1Phase2EncryptionAlgorithms);
            return this;
        }

        public Builder setTunnel1Phase2IntegrityAlgorithms(@Nullable Input<List<String>> tunnel1Phase2IntegrityAlgorithms) {
            this.tunnel1Phase2IntegrityAlgorithms = tunnel1Phase2IntegrityAlgorithms;
            return this;
        }

        public Builder setTunnel1Phase2IntegrityAlgorithms(@Nullable List<String> tunnel1Phase2IntegrityAlgorithms) {
            this.tunnel1Phase2IntegrityAlgorithms = Input.ofNullable(tunnel1Phase2IntegrityAlgorithms);
            return this;
        }

        public Builder setTunnel1Phase2LifetimeSeconds(@Nullable Input<Integer> tunnel1Phase2LifetimeSeconds) {
            this.tunnel1Phase2LifetimeSeconds = tunnel1Phase2LifetimeSeconds;
            return this;
        }

        public Builder setTunnel1Phase2LifetimeSeconds(@Nullable Integer tunnel1Phase2LifetimeSeconds) {
            this.tunnel1Phase2LifetimeSeconds = Input.ofNullable(tunnel1Phase2LifetimeSeconds);
            return this;
        }

        public Builder setTunnel1PresharedKey(@Nullable Input<String> tunnel1PresharedKey) {
            this.tunnel1PresharedKey = tunnel1PresharedKey;
            return this;
        }

        public Builder setTunnel1PresharedKey(@Nullable String tunnel1PresharedKey) {
            this.tunnel1PresharedKey = Input.ofNullable(tunnel1PresharedKey);
            return this;
        }

        public Builder setTunnel1RekeyFuzzPercentage(@Nullable Input<Integer> tunnel1RekeyFuzzPercentage) {
            this.tunnel1RekeyFuzzPercentage = tunnel1RekeyFuzzPercentage;
            return this;
        }

        public Builder setTunnel1RekeyFuzzPercentage(@Nullable Integer tunnel1RekeyFuzzPercentage) {
            this.tunnel1RekeyFuzzPercentage = Input.ofNullable(tunnel1RekeyFuzzPercentage);
            return this;
        }

        public Builder setTunnel1RekeyMarginTimeSeconds(@Nullable Input<Integer> tunnel1RekeyMarginTimeSeconds) {
            this.tunnel1RekeyMarginTimeSeconds = tunnel1RekeyMarginTimeSeconds;
            return this;
        }

        public Builder setTunnel1RekeyMarginTimeSeconds(@Nullable Integer tunnel1RekeyMarginTimeSeconds) {
            this.tunnel1RekeyMarginTimeSeconds = Input.ofNullable(tunnel1RekeyMarginTimeSeconds);
            return this;
        }

        public Builder setTunnel1ReplayWindowSize(@Nullable Input<Integer> tunnel1ReplayWindowSize) {
            this.tunnel1ReplayWindowSize = tunnel1ReplayWindowSize;
            return this;
        }

        public Builder setTunnel1ReplayWindowSize(@Nullable Integer tunnel1ReplayWindowSize) {
            this.tunnel1ReplayWindowSize = Input.ofNullable(tunnel1ReplayWindowSize);
            return this;
        }

        public Builder setTunnel1StartupAction(@Nullable Input<String> tunnel1StartupAction) {
            this.tunnel1StartupAction = tunnel1StartupAction;
            return this;
        }

        public Builder setTunnel1StartupAction(@Nullable String tunnel1StartupAction) {
            this.tunnel1StartupAction = Input.ofNullable(tunnel1StartupAction);
            return this;
        }

        public Builder setTunnel2DpdTimeoutAction(@Nullable Input<String> tunnel2DpdTimeoutAction) {
            this.tunnel2DpdTimeoutAction = tunnel2DpdTimeoutAction;
            return this;
        }

        public Builder setTunnel2DpdTimeoutAction(@Nullable String tunnel2DpdTimeoutAction) {
            this.tunnel2DpdTimeoutAction = Input.ofNullable(tunnel2DpdTimeoutAction);
            return this;
        }

        public Builder setTunnel2DpdTimeoutSeconds(@Nullable Input<Integer> tunnel2DpdTimeoutSeconds) {
            this.tunnel2DpdTimeoutSeconds = tunnel2DpdTimeoutSeconds;
            return this;
        }

        public Builder setTunnel2DpdTimeoutSeconds(@Nullable Integer tunnel2DpdTimeoutSeconds) {
            this.tunnel2DpdTimeoutSeconds = Input.ofNullable(tunnel2DpdTimeoutSeconds);
            return this;
        }

        public Builder setTunnel2IkeVersions(@Nullable Input<List<String>> tunnel2IkeVersions) {
            this.tunnel2IkeVersions = tunnel2IkeVersions;
            return this;
        }

        public Builder setTunnel2IkeVersions(@Nullable List<String> tunnel2IkeVersions) {
            this.tunnel2IkeVersions = Input.ofNullable(tunnel2IkeVersions);
            return this;
        }

        public Builder setTunnel2InsideCidr(@Nullable Input<String> tunnel2InsideCidr) {
            this.tunnel2InsideCidr = tunnel2InsideCidr;
            return this;
        }

        public Builder setTunnel2InsideCidr(@Nullable String tunnel2InsideCidr) {
            this.tunnel2InsideCidr = Input.ofNullable(tunnel2InsideCidr);
            return this;
        }

        public Builder setTunnel2InsideIpv6Cidr(@Nullable Input<String> tunnel2InsideIpv6Cidr) {
            this.tunnel2InsideIpv6Cidr = tunnel2InsideIpv6Cidr;
            return this;
        }

        public Builder setTunnel2InsideIpv6Cidr(@Nullable String tunnel2InsideIpv6Cidr) {
            this.tunnel2InsideIpv6Cidr = Input.ofNullable(tunnel2InsideIpv6Cidr);
            return this;
        }

        public Builder setTunnel2Phase1DhGroupNumbers(@Nullable Input<List<Integer>> tunnel2Phase1DhGroupNumbers) {
            this.tunnel2Phase1DhGroupNumbers = tunnel2Phase1DhGroupNumbers;
            return this;
        }

        public Builder setTunnel2Phase1DhGroupNumbers(@Nullable List<Integer> tunnel2Phase1DhGroupNumbers) {
            this.tunnel2Phase1DhGroupNumbers = Input.ofNullable(tunnel2Phase1DhGroupNumbers);
            return this;
        }

        public Builder setTunnel2Phase1EncryptionAlgorithms(@Nullable Input<List<String>> tunnel2Phase1EncryptionAlgorithms) {
            this.tunnel2Phase1EncryptionAlgorithms = tunnel2Phase1EncryptionAlgorithms;
            return this;
        }

        public Builder setTunnel2Phase1EncryptionAlgorithms(@Nullable List<String> tunnel2Phase1EncryptionAlgorithms) {
            this.tunnel2Phase1EncryptionAlgorithms = Input.ofNullable(tunnel2Phase1EncryptionAlgorithms);
            return this;
        }

        public Builder setTunnel2Phase1IntegrityAlgorithms(@Nullable Input<List<String>> tunnel2Phase1IntegrityAlgorithms) {
            this.tunnel2Phase1IntegrityAlgorithms = tunnel2Phase1IntegrityAlgorithms;
            return this;
        }

        public Builder setTunnel2Phase1IntegrityAlgorithms(@Nullable List<String> tunnel2Phase1IntegrityAlgorithms) {
            this.tunnel2Phase1IntegrityAlgorithms = Input.ofNullable(tunnel2Phase1IntegrityAlgorithms);
            return this;
        }

        public Builder setTunnel2Phase1LifetimeSeconds(@Nullable Input<Integer> tunnel2Phase1LifetimeSeconds) {
            this.tunnel2Phase1LifetimeSeconds = tunnel2Phase1LifetimeSeconds;
            return this;
        }

        public Builder setTunnel2Phase1LifetimeSeconds(@Nullable Integer tunnel2Phase1LifetimeSeconds) {
            this.tunnel2Phase1LifetimeSeconds = Input.ofNullable(tunnel2Phase1LifetimeSeconds);
            return this;
        }

        public Builder setTunnel2Phase2DhGroupNumbers(@Nullable Input<List<Integer>> tunnel2Phase2DhGroupNumbers) {
            this.tunnel2Phase2DhGroupNumbers = tunnel2Phase2DhGroupNumbers;
            return this;
        }

        public Builder setTunnel2Phase2DhGroupNumbers(@Nullable List<Integer> tunnel2Phase2DhGroupNumbers) {
            this.tunnel2Phase2DhGroupNumbers = Input.ofNullable(tunnel2Phase2DhGroupNumbers);
            return this;
        }

        public Builder setTunnel2Phase2EncryptionAlgorithms(@Nullable Input<List<String>> tunnel2Phase2EncryptionAlgorithms) {
            this.tunnel2Phase2EncryptionAlgorithms = tunnel2Phase2EncryptionAlgorithms;
            return this;
        }

        public Builder setTunnel2Phase2EncryptionAlgorithms(@Nullable List<String> tunnel2Phase2EncryptionAlgorithms) {
            this.tunnel2Phase2EncryptionAlgorithms = Input.ofNullable(tunnel2Phase2EncryptionAlgorithms);
            return this;
        }

        public Builder setTunnel2Phase2IntegrityAlgorithms(@Nullable Input<List<String>> tunnel2Phase2IntegrityAlgorithms) {
            this.tunnel2Phase2IntegrityAlgorithms = tunnel2Phase2IntegrityAlgorithms;
            return this;
        }

        public Builder setTunnel2Phase2IntegrityAlgorithms(@Nullable List<String> tunnel2Phase2IntegrityAlgorithms) {
            this.tunnel2Phase2IntegrityAlgorithms = Input.ofNullable(tunnel2Phase2IntegrityAlgorithms);
            return this;
        }

        public Builder setTunnel2Phase2LifetimeSeconds(@Nullable Input<Integer> tunnel2Phase2LifetimeSeconds) {
            this.tunnel2Phase2LifetimeSeconds = tunnel2Phase2LifetimeSeconds;
            return this;
        }

        public Builder setTunnel2Phase2LifetimeSeconds(@Nullable Integer tunnel2Phase2LifetimeSeconds) {
            this.tunnel2Phase2LifetimeSeconds = Input.ofNullable(tunnel2Phase2LifetimeSeconds);
            return this;
        }

        public Builder setTunnel2PresharedKey(@Nullable Input<String> tunnel2PresharedKey) {
            this.tunnel2PresharedKey = tunnel2PresharedKey;
            return this;
        }

        public Builder setTunnel2PresharedKey(@Nullable String tunnel2PresharedKey) {
            this.tunnel2PresharedKey = Input.ofNullable(tunnel2PresharedKey);
            return this;
        }

        public Builder setTunnel2RekeyFuzzPercentage(@Nullable Input<Integer> tunnel2RekeyFuzzPercentage) {
            this.tunnel2RekeyFuzzPercentage = tunnel2RekeyFuzzPercentage;
            return this;
        }

        public Builder setTunnel2RekeyFuzzPercentage(@Nullable Integer tunnel2RekeyFuzzPercentage) {
            this.tunnel2RekeyFuzzPercentage = Input.ofNullable(tunnel2RekeyFuzzPercentage);
            return this;
        }

        public Builder setTunnel2RekeyMarginTimeSeconds(@Nullable Input<Integer> tunnel2RekeyMarginTimeSeconds) {
            this.tunnel2RekeyMarginTimeSeconds = tunnel2RekeyMarginTimeSeconds;
            return this;
        }

        public Builder setTunnel2RekeyMarginTimeSeconds(@Nullable Integer tunnel2RekeyMarginTimeSeconds) {
            this.tunnel2RekeyMarginTimeSeconds = Input.ofNullable(tunnel2RekeyMarginTimeSeconds);
            return this;
        }

        public Builder setTunnel2ReplayWindowSize(@Nullable Input<Integer> tunnel2ReplayWindowSize) {
            this.tunnel2ReplayWindowSize = tunnel2ReplayWindowSize;
            return this;
        }

        public Builder setTunnel2ReplayWindowSize(@Nullable Integer tunnel2ReplayWindowSize) {
            this.tunnel2ReplayWindowSize = Input.ofNullable(tunnel2ReplayWindowSize);
            return this;
        }

        public Builder setTunnel2StartupAction(@Nullable Input<String> tunnel2StartupAction) {
            this.tunnel2StartupAction = tunnel2StartupAction;
            return this;
        }

        public Builder setTunnel2StartupAction(@Nullable String tunnel2StartupAction) {
            this.tunnel2StartupAction = Input.ofNullable(tunnel2StartupAction);
            return this;
        }

        public Builder setTunnelInsideIpVersion(@Nullable Input<String> tunnelInsideIpVersion) {
            this.tunnelInsideIpVersion = tunnelInsideIpVersion;
            return this;
        }

        public Builder setTunnelInsideIpVersion(@Nullable String tunnelInsideIpVersion) {
            this.tunnelInsideIpVersion = Input.ofNullable(tunnelInsideIpVersion);
            return this;
        }

        public Builder setType(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder setVpnGatewayId(@Nullable Input<String> vpnGatewayId) {
            this.vpnGatewayId = vpnGatewayId;
            return this;
        }

        public Builder setVpnGatewayId(@Nullable String vpnGatewayId) {
            this.vpnGatewayId = Input.ofNullable(vpnGatewayId);
            return this;
        }
        public VpnConnectionArgs build() {
            return new VpnConnectionArgs(customerGatewayId, enableAcceleration, localIpv4NetworkCidr, localIpv6NetworkCidr, remoteIpv4NetworkCidr, remoteIpv6NetworkCidr, staticRoutesOnly, tags, transitGatewayId, tunnel1DpdTimeoutAction, tunnel1DpdTimeoutSeconds, tunnel1IkeVersions, tunnel1InsideCidr, tunnel1InsideIpv6Cidr, tunnel1Phase1DhGroupNumbers, tunnel1Phase1EncryptionAlgorithms, tunnel1Phase1IntegrityAlgorithms, tunnel1Phase1LifetimeSeconds, tunnel1Phase2DhGroupNumbers, tunnel1Phase2EncryptionAlgorithms, tunnel1Phase2IntegrityAlgorithms, tunnel1Phase2LifetimeSeconds, tunnel1PresharedKey, tunnel1RekeyFuzzPercentage, tunnel1RekeyMarginTimeSeconds, tunnel1ReplayWindowSize, tunnel1StartupAction, tunnel2DpdTimeoutAction, tunnel2DpdTimeoutSeconds, tunnel2IkeVersions, tunnel2InsideCidr, tunnel2InsideIpv6Cidr, tunnel2Phase1DhGroupNumbers, tunnel2Phase1EncryptionAlgorithms, tunnel2Phase1IntegrityAlgorithms, tunnel2Phase1LifetimeSeconds, tunnel2Phase2DhGroupNumbers, tunnel2Phase2EncryptionAlgorithms, tunnel2Phase2IntegrityAlgorithms, tunnel2Phase2LifetimeSeconds, tunnel2PresharedKey, tunnel2RekeyFuzzPercentage, tunnel2RekeyMarginTimeSeconds, tunnel2ReplayWindowSize, tunnel2StartupAction, tunnelInsideIpVersion, type, vpnGatewayId);
        }
    }
}
