// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.autoscaling.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GroupMixedInstancesPolicyInstancesDistributionArgs extends io.pulumi.resources.ResourceArgs {

    public static final GroupMixedInstancesPolicyInstancesDistributionArgs Empty = new GroupMixedInstancesPolicyInstancesDistributionArgs();

    /**
     * Strategy to use when launching on-demand instances. Valid values: `prioritized`. Default: `prioritized`.
     * 
     */
    @InputImport(name="onDemandAllocationStrategy")
      private final @Nullable Input<String> onDemandAllocationStrategy;

    public Input<String> getOnDemandAllocationStrategy() {
        return this.onDemandAllocationStrategy == null ? Input.empty() : this.onDemandAllocationStrategy;
    }

    /**
     * Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
     * 
     */
    @InputImport(name="onDemandBaseCapacity")
      private final @Nullable Input<Integer> onDemandBaseCapacity;

    public Input<Integer> getOnDemandBaseCapacity() {
        return this.onDemandBaseCapacity == null ? Input.empty() : this.onDemandBaseCapacity;
    }

    /**
     * Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `100`.
     * 
     */
    @InputImport(name="onDemandPercentageAboveBaseCapacity")
      private final @Nullable Input<Integer> onDemandPercentageAboveBaseCapacity;

    public Input<Integer> getOnDemandPercentageAboveBaseCapacity() {
        return this.onDemandPercentageAboveBaseCapacity == null ? Input.empty() : this.onDemandPercentageAboveBaseCapacity;
    }

    /**
     * How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`, `capacity-optimized-prioritized`. Default: `lowest-price`.
     * 
     */
    @InputImport(name="spotAllocationStrategy")
      private final @Nullable Input<String> spotAllocationStrategy;

    public Input<String> getSpotAllocationStrategy() {
        return this.spotAllocationStrategy == null ? Input.empty() : this.spotAllocationStrategy;
    }

    /**
     * Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Only available with `spot_allocation_strategy` set to `lowest-price`. Otherwise it must be set to `0`, if it has been defined before. Default: `2`.
     * 
     */
    @InputImport(name="spotInstancePools")
      private final @Nullable Input<Integer> spotInstancePools;

    public Input<Integer> getSpotInstancePools() {
        return this.spotInstancePools == null ? Input.empty() : this.spotInstancePools;
    }

    /**
     * Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
     * 
     */
    @InputImport(name="spotMaxPrice")
      private final @Nullable Input<String> spotMaxPrice;

    public Input<String> getSpotMaxPrice() {
        return this.spotMaxPrice == null ? Input.empty() : this.spotMaxPrice;
    }

    public GroupMixedInstancesPolicyInstancesDistributionArgs(
        @Nullable Input<String> onDemandAllocationStrategy,
        @Nullable Input<Integer> onDemandBaseCapacity,
        @Nullable Input<Integer> onDemandPercentageAboveBaseCapacity,
        @Nullable Input<String> spotAllocationStrategy,
        @Nullable Input<Integer> spotInstancePools,
        @Nullable Input<String> spotMaxPrice) {
        this.onDemandAllocationStrategy = onDemandAllocationStrategy;
        this.onDemandBaseCapacity = onDemandBaseCapacity;
        this.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity;
        this.spotAllocationStrategy = spotAllocationStrategy;
        this.spotInstancePools = spotInstancePools;
        this.spotMaxPrice = spotMaxPrice;
    }

    private GroupMixedInstancesPolicyInstancesDistributionArgs() {
        this.onDemandAllocationStrategy = Input.empty();
        this.onDemandBaseCapacity = Input.empty();
        this.onDemandPercentageAboveBaseCapacity = Input.empty();
        this.spotAllocationStrategy = Input.empty();
        this.spotInstancePools = Input.empty();
        this.spotMaxPrice = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupMixedInstancesPolicyInstancesDistributionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> onDemandAllocationStrategy;
        private @Nullable Input<Integer> onDemandBaseCapacity;
        private @Nullable Input<Integer> onDemandPercentageAboveBaseCapacity;
        private @Nullable Input<String> spotAllocationStrategy;
        private @Nullable Input<Integer> spotInstancePools;
        private @Nullable Input<String> spotMaxPrice;

        public Builder() {
    	      // Empty
        }

        public Builder(GroupMixedInstancesPolicyInstancesDistributionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.onDemandAllocationStrategy = defaults.onDemandAllocationStrategy;
    	      this.onDemandBaseCapacity = defaults.onDemandBaseCapacity;
    	      this.onDemandPercentageAboveBaseCapacity = defaults.onDemandPercentageAboveBaseCapacity;
    	      this.spotAllocationStrategy = defaults.spotAllocationStrategy;
    	      this.spotInstancePools = defaults.spotInstancePools;
    	      this.spotMaxPrice = defaults.spotMaxPrice;
        }

        public Builder setOnDemandAllocationStrategy(@Nullable Input<String> onDemandAllocationStrategy) {
            this.onDemandAllocationStrategy = onDemandAllocationStrategy;
            return this;
        }

        public Builder setOnDemandAllocationStrategy(@Nullable String onDemandAllocationStrategy) {
            this.onDemandAllocationStrategy = Input.ofNullable(onDemandAllocationStrategy);
            return this;
        }

        public Builder setOnDemandBaseCapacity(@Nullable Input<Integer> onDemandBaseCapacity) {
            this.onDemandBaseCapacity = onDemandBaseCapacity;
            return this;
        }

        public Builder setOnDemandBaseCapacity(@Nullable Integer onDemandBaseCapacity) {
            this.onDemandBaseCapacity = Input.ofNullable(onDemandBaseCapacity);
            return this;
        }

        public Builder setOnDemandPercentageAboveBaseCapacity(@Nullable Input<Integer> onDemandPercentageAboveBaseCapacity) {
            this.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity;
            return this;
        }

        public Builder setOnDemandPercentageAboveBaseCapacity(@Nullable Integer onDemandPercentageAboveBaseCapacity) {
            this.onDemandPercentageAboveBaseCapacity = Input.ofNullable(onDemandPercentageAboveBaseCapacity);
            return this;
        }

        public Builder setSpotAllocationStrategy(@Nullable Input<String> spotAllocationStrategy) {
            this.spotAllocationStrategy = spotAllocationStrategy;
            return this;
        }

        public Builder setSpotAllocationStrategy(@Nullable String spotAllocationStrategy) {
            this.spotAllocationStrategy = Input.ofNullable(spotAllocationStrategy);
            return this;
        }

        public Builder setSpotInstancePools(@Nullable Input<Integer> spotInstancePools) {
            this.spotInstancePools = spotInstancePools;
            return this;
        }

        public Builder setSpotInstancePools(@Nullable Integer spotInstancePools) {
            this.spotInstancePools = Input.ofNullable(spotInstancePools);
            return this;
        }

        public Builder setSpotMaxPrice(@Nullable Input<String> spotMaxPrice) {
            this.spotMaxPrice = spotMaxPrice;
            return this;
        }

        public Builder setSpotMaxPrice(@Nullable String spotMaxPrice) {
            this.spotMaxPrice = Input.ofNullable(spotMaxPrice);
            return this;
        }
        public GroupMixedInstancesPolicyInstancesDistributionArgs build() {
            return new GroupMixedInstancesPolicyInstancesDistributionArgs(onDemandAllocationStrategy, onDemandBaseCapacity, onDemandPercentageAboveBaseCapacity, spotAllocationStrategy, spotInstancePools, spotMaxPrice);
        }
    }
}
