// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecr.inputs;

import io.pulumi.aws.ecr.inputs.RepositoryEncryptionConfigurationGetArgs;
import io.pulumi.aws.ecr.inputs.RepositoryImageScanningConfigurationGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RepositoryState extends io.pulumi.resources.ResourceArgs {

    public static final RepositoryState Empty = new RepositoryState();

    /**
     * Full ARN of the repository.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * Encryption configuration for the repository. See below for schema.
     * 
     */
    @Import(name="encryptionConfigurations")
      private final @Nullable Output<List<RepositoryEncryptionConfigurationGetArgs>> encryptionConfigurations;

    public Output<List<RepositoryEncryptionConfigurationGetArgs>> getEncryptionConfigurations() {
        return this.encryptionConfigurations == null ? Codegen.empty() : this.encryptionConfigurations;
    }

    /**
     * Configuration block that defines image scanning configuration for the repository. By default, image scanning must be manually triggered. See the [ECR User Guide](https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html) for more information about image scanning.
     * 
     */
    @Import(name="imageScanningConfiguration")
      private final @Nullable Output<RepositoryImageScanningConfigurationGetArgs> imageScanningConfiguration;

    public Output<RepositoryImageScanningConfigurationGetArgs> getImageScanningConfiguration() {
        return this.imageScanningConfiguration == null ? Codegen.empty() : this.imageScanningConfiguration;
    }

    /**
     * The tag mutability setting for the repository. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
     * 
     */
    @Import(name="imageTagMutability")
      private final @Nullable Output<String> imageTagMutability;

    public Output<String> getImageTagMutability() {
        return this.imageTagMutability == null ? Codegen.empty() : this.imageTagMutability;
    }

    /**
     * Name of the repository.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The registry ID where the repository was created.
     * 
     */
    @Import(name="registryId")
      private final @Nullable Output<String> registryId;

    public Output<String> getRegistryId() {
        return this.registryId == null ? Codegen.empty() : this.registryId;
    }

    /**
     * The URL of the repository (in the form `aws_account_id.dkr.ecr.region.amazonaws.com/repositoryName`).
     * 
     */
    @Import(name="repositoryUrl")
      private final @Nullable Output<String> repositoryUrl;

    public Output<String> getRepositoryUrl() {
        return this.repositoryUrl == null ? Codegen.empty() : this.repositoryUrl;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    public RepositoryState(
        @Nullable Output<String> arn,
        @Nullable Output<List<RepositoryEncryptionConfigurationGetArgs>> encryptionConfigurations,
        @Nullable Output<RepositoryImageScanningConfigurationGetArgs> imageScanningConfiguration,
        @Nullable Output<String> imageTagMutability,
        @Nullable Output<String> name,
        @Nullable Output<String> registryId,
        @Nullable Output<String> repositoryUrl,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.encryptionConfigurations = encryptionConfigurations;
        this.imageScanningConfiguration = imageScanningConfiguration;
        this.imageTagMutability = imageTagMutability;
        this.name = name;
        this.registryId = registryId;
        this.repositoryUrl = repositoryUrl;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private RepositoryState() {
        this.arn = Codegen.empty();
        this.encryptionConfigurations = Codegen.empty();
        this.imageScanningConfiguration = Codegen.empty();
        this.imageTagMutability = Codegen.empty();
        this.name = Codegen.empty();
        this.registryId = Codegen.empty();
        this.repositoryUrl = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<List<RepositoryEncryptionConfigurationGetArgs>> encryptionConfigurations;
        private @Nullable Output<RepositoryImageScanningConfigurationGetArgs> imageScanningConfiguration;
        private @Nullable Output<String> imageTagMutability;
        private @Nullable Output<String> name;
        private @Nullable Output<String> registryId;
        private @Nullable Output<String> repositoryUrl;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(RepositoryState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.encryptionConfigurations = defaults.encryptionConfigurations;
    	      this.imageScanningConfiguration = defaults.imageScanningConfiguration;
    	      this.imageTagMutability = defaults.imageTagMutability;
    	      this.name = defaults.name;
    	      this.registryId = defaults.registryId;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder encryptionConfigurations(@Nullable Output<List<RepositoryEncryptionConfigurationGetArgs>> encryptionConfigurations) {
            this.encryptionConfigurations = encryptionConfigurations;
            return this;
        }
        public Builder encryptionConfigurations(@Nullable List<RepositoryEncryptionConfigurationGetArgs> encryptionConfigurations) {
            this.encryptionConfigurations = Codegen.ofNullable(encryptionConfigurations);
            return this;
        }
        public Builder encryptionConfigurations(RepositoryEncryptionConfigurationGetArgs... encryptionConfigurations) {
            return encryptionConfigurations(List.of(encryptionConfigurations));
        }
        public Builder imageScanningConfiguration(@Nullable Output<RepositoryImageScanningConfigurationGetArgs> imageScanningConfiguration) {
            this.imageScanningConfiguration = imageScanningConfiguration;
            return this;
        }
        public Builder imageScanningConfiguration(@Nullable RepositoryImageScanningConfigurationGetArgs imageScanningConfiguration) {
            this.imageScanningConfiguration = Codegen.ofNullable(imageScanningConfiguration);
            return this;
        }
        public Builder imageTagMutability(@Nullable Output<String> imageTagMutability) {
            this.imageTagMutability = imageTagMutability;
            return this;
        }
        public Builder imageTagMutability(@Nullable String imageTagMutability) {
            this.imageTagMutability = Codegen.ofNullable(imageTagMutability);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder registryId(@Nullable Output<String> registryId) {
            this.registryId = registryId;
            return this;
        }
        public Builder registryId(@Nullable String registryId) {
            this.registryId = Codegen.ofNullable(registryId);
            return this;
        }
        public Builder repositoryUrl(@Nullable Output<String> repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }
        public Builder repositoryUrl(@Nullable String repositoryUrl) {
            this.repositoryUrl = Codegen.ofNullable(repositoryUrl);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }        public RepositoryState build() {
            return new RepositoryState(arn, encryptionConfigurations, imageScanningConfiguration, imageTagMutability, name, registryId, repositoryUrl, tags, tagsAll);
        }
    }
}
