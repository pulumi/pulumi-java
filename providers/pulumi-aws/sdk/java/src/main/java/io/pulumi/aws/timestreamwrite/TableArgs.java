// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.timestreamwrite;

import io.pulumi.aws.timestreamwrite.inputs.TableMagneticStoreWritePropertiesArgs;
import io.pulumi.aws.timestreamwrite.inputs.TableRetentionPropertiesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TableArgs extends io.pulumi.resources.ResourceArgs {

    public static final TableArgs Empty = new TableArgs();

    /**
     * The name of the Timestream database.
     * 
     */
    @InputImport(name="databaseName", required=true)
      private final Input<String> databaseName;

    public Input<String> getDatabaseName() {
        return this.databaseName;
    }

    /**
     * Contains properties to set on the table when enabling magnetic store writes. See Magnetic Store Write Properties below for more details.
     * 
     */
    @InputImport(name="magneticStoreWriteProperties")
      private final @Nullable Input<TableMagneticStoreWritePropertiesArgs> magneticStoreWriteProperties;

    public Input<TableMagneticStoreWritePropertiesArgs> getMagneticStoreWriteProperties() {
        return this.magneticStoreWriteProperties == null ? Input.empty() : this.magneticStoreWriteProperties;
    }

    /**
     * The retention duration for the memory store and magnetic store. See Retention Properties below for more details. If not provided, `magnetic_store_retention_period_in_days` default to 73000 and `memory_store_retention_period_in_hours` defaults to 6.
     * 
     */
    @InputImport(name="retentionProperties")
      private final @Nullable Input<TableRetentionPropertiesArgs> retentionProperties;

    public Input<TableRetentionPropertiesArgs> getRetentionProperties() {
        return this.retentionProperties == null ? Input.empty() : this.retentionProperties;
    }

    /**
     * The name of the Timestream table.
     * 
     */
    @InputImport(name="tableName", required=true)
      private final Input<String> tableName;

    public Input<String> getTableName() {
        return this.tableName;
    }

    /**
     * Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public TableArgs(
        Input<String> databaseName,
        @Nullable Input<TableMagneticStoreWritePropertiesArgs> magneticStoreWriteProperties,
        @Nullable Input<TableRetentionPropertiesArgs> retentionProperties,
        Input<String> tableName,
        @Nullable Input<Map<String,String>> tags) {
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.magneticStoreWriteProperties = magneticStoreWriteProperties;
        this.retentionProperties = retentionProperties;
        this.tableName = Objects.requireNonNull(tableName, "expected parameter 'tableName' to be non-null");
        this.tags = tags;
    }

    private TableArgs() {
        this.databaseName = Input.empty();
        this.magneticStoreWriteProperties = Input.empty();
        this.retentionProperties = Input.empty();
        this.tableName = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> databaseName;
        private @Nullable Input<TableMagneticStoreWritePropertiesArgs> magneticStoreWriteProperties;
        private @Nullable Input<TableRetentionPropertiesArgs> retentionProperties;
        private Input<String> tableName;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(TableArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.magneticStoreWriteProperties = defaults.magneticStoreWriteProperties;
    	      this.retentionProperties = defaults.retentionProperties;
    	      this.tableName = defaults.tableName;
    	      this.tags = defaults.tags;
        }

        public Builder databaseName(Input<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }

        public Builder databaseName(String databaseName) {
            this.databaseName = Input.of(Objects.requireNonNull(databaseName));
            return this;
        }

        public Builder magneticStoreWriteProperties(@Nullable Input<TableMagneticStoreWritePropertiesArgs> magneticStoreWriteProperties) {
            this.magneticStoreWriteProperties = magneticStoreWriteProperties;
            return this;
        }

        public Builder magneticStoreWriteProperties(@Nullable TableMagneticStoreWritePropertiesArgs magneticStoreWriteProperties) {
            this.magneticStoreWriteProperties = Input.ofNullable(magneticStoreWriteProperties);
            return this;
        }

        public Builder retentionProperties(@Nullable Input<TableRetentionPropertiesArgs> retentionProperties) {
            this.retentionProperties = retentionProperties;
            return this;
        }

        public Builder retentionProperties(@Nullable TableRetentionPropertiesArgs retentionProperties) {
            this.retentionProperties = Input.ofNullable(retentionProperties);
            return this;
        }

        public Builder tableName(Input<String> tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }

        public Builder tableName(String tableName) {
            this.tableName = Input.of(Objects.requireNonNull(tableName));
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public TableArgs build() {
            return new TableArgs(databaseName, magneticStoreWriteProperties, retentionProperties, tableName, tags);
        }
    }
}
