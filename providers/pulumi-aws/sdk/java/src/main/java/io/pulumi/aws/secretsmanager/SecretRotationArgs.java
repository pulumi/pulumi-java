// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.secretsmanager;

import io.pulumi.aws.secretsmanager.inputs.SecretRotationRotationRulesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecretRotationArgs extends io.pulumi.resources.ResourceArgs {

    public static final SecretRotationArgs Empty = new SecretRotationArgs();

    /**
     * Specifies the ARN of the Lambda function that can rotate the secret.
     * 
     */
    @InputImport(name="rotationLambdaArn", required=true)
      private final Input<String> rotationLambdaArn;

    public Input<String> getRotationLambdaArn() {
        return this.rotationLambdaArn;
    }

    /**
     * A structure that defines the rotation configuration for this secret. Defined below.
     * 
     */
    @InputImport(name="rotationRules", required=true)
      private final Input<SecretRotationRotationRulesArgs> rotationRules;

    public Input<SecretRotationRotationRulesArgs> getRotationRules() {
        return this.rotationRules;
    }

    /**
     * Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
     * 
     */
    @InputImport(name="secretId", required=true)
      private final Input<String> secretId;

    public Input<String> getSecretId() {
        return this.secretId;
    }

    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public SecretRotationArgs(
        Input<String> rotationLambdaArn,
        Input<SecretRotationRotationRulesArgs> rotationRules,
        Input<String> secretId,
        @Nullable Input<Map<String,String>> tags) {
        this.rotationLambdaArn = Objects.requireNonNull(rotationLambdaArn, "expected parameter 'rotationLambdaArn' to be non-null");
        this.rotationRules = Objects.requireNonNull(rotationRules, "expected parameter 'rotationRules' to be non-null");
        this.secretId = Objects.requireNonNull(secretId, "expected parameter 'secretId' to be non-null");
        this.tags = tags;
    }

    private SecretRotationArgs() {
        this.rotationLambdaArn = Input.empty();
        this.rotationRules = Input.empty();
        this.secretId = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretRotationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> rotationLambdaArn;
        private Input<SecretRotationRotationRulesArgs> rotationRules;
        private Input<String> secretId;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretRotationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.rotationLambdaArn = defaults.rotationLambdaArn;
    	      this.rotationRules = defaults.rotationRules;
    	      this.secretId = defaults.secretId;
    	      this.tags = defaults.tags;
        }

        public Builder setRotationLambdaArn(Input<String> rotationLambdaArn) {
            this.rotationLambdaArn = Objects.requireNonNull(rotationLambdaArn);
            return this;
        }

        public Builder setRotationLambdaArn(String rotationLambdaArn) {
            this.rotationLambdaArn = Input.of(Objects.requireNonNull(rotationLambdaArn));
            return this;
        }

        public Builder setRotationRules(Input<SecretRotationRotationRulesArgs> rotationRules) {
            this.rotationRules = Objects.requireNonNull(rotationRules);
            return this;
        }

        public Builder setRotationRules(SecretRotationRotationRulesArgs rotationRules) {
            this.rotationRules = Input.of(Objects.requireNonNull(rotationRules));
            return this;
        }

        public Builder setSecretId(Input<String> secretId) {
            this.secretId = Objects.requireNonNull(secretId);
            return this;
        }

        public Builder setSecretId(String secretId) {
            this.secretId = Input.of(Objects.requireNonNull(secretId));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public SecretRotationArgs build() {
            return new SecretRotationArgs(rotationLambdaArn, rotationRules, secretId, tags);
        }
    }
}
