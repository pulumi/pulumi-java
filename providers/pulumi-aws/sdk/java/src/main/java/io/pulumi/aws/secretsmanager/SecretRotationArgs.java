// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.secretsmanager;

import io.pulumi.aws.secretsmanager.inputs.SecretRotationRotationRulesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecretRotationArgs extends io.pulumi.resources.ResourceArgs {

    public static final SecretRotationArgs Empty = new SecretRotationArgs();

    /**
     * Specifies the ARN of the Lambda function that can rotate the secret.
     * 
     */
    @Import(name="rotationLambdaArn", required=true)
      private final Output<String> rotationLambdaArn;

    public Output<String> getRotationLambdaArn() {
        return this.rotationLambdaArn;
    }

    /**
     * A structure that defines the rotation configuration for this secret. Defined below.
     * 
     */
    @Import(name="rotationRules", required=true)
      private final Output<SecretRotationRotationRulesArgs> rotationRules;

    public Output<SecretRotationRotationRulesArgs> getRotationRules() {
        return this.rotationRules;
    }

    /**
     * Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
     * 
     */
    @Import(name="secretId", required=true)
      private final Output<String> secretId;

    public Output<String> getSecretId() {
        return this.secretId;
    }

    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public SecretRotationArgs(
        Output<String> rotationLambdaArn,
        Output<SecretRotationRotationRulesArgs> rotationRules,
        Output<String> secretId,
        @Nullable Output<Map<String,String>> tags) {
        this.rotationLambdaArn = Objects.requireNonNull(rotationLambdaArn, "expected parameter 'rotationLambdaArn' to be non-null");
        this.rotationRules = Objects.requireNonNull(rotationRules, "expected parameter 'rotationRules' to be non-null");
        this.secretId = Objects.requireNonNull(secretId, "expected parameter 'secretId' to be non-null");
        this.tags = tags;
    }

    private SecretRotationArgs() {
        this.rotationLambdaArn = Codegen.empty();
        this.rotationRules = Codegen.empty();
        this.secretId = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretRotationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> rotationLambdaArn;
        private Output<SecretRotationRotationRulesArgs> rotationRules;
        private Output<String> secretId;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretRotationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.rotationLambdaArn = defaults.rotationLambdaArn;
    	      this.rotationRules = defaults.rotationRules;
    	      this.secretId = defaults.secretId;
    	      this.tags = defaults.tags;
        }

        public Builder rotationLambdaArn(Output<String> rotationLambdaArn) {
            this.rotationLambdaArn = Objects.requireNonNull(rotationLambdaArn);
            return this;
        }
        public Builder rotationLambdaArn(String rotationLambdaArn) {
            this.rotationLambdaArn = Output.of(Objects.requireNonNull(rotationLambdaArn));
            return this;
        }
        public Builder rotationRules(Output<SecretRotationRotationRulesArgs> rotationRules) {
            this.rotationRules = Objects.requireNonNull(rotationRules);
            return this;
        }
        public Builder rotationRules(SecretRotationRotationRulesArgs rotationRules) {
            this.rotationRules = Output.of(Objects.requireNonNull(rotationRules));
            return this;
        }
        public Builder secretId(Output<String> secretId) {
            this.secretId = Objects.requireNonNull(secretId);
            return this;
        }
        public Builder secretId(String secretId) {
            this.secretId = Output.of(Objects.requireNonNull(secretId));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public SecretRotationArgs build() {
            return new SecretRotationArgs(rotationLambdaArn, rotationRules, secretId, tags);
        }
    }
}
