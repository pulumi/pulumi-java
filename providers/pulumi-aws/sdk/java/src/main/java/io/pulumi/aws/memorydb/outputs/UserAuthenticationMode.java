// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.memorydb.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class UserAuthenticationMode {
    /**
     * The number of passwords belonging to the user.
     * 
     */
    private final @Nullable Integer passwordCount;
    /**
     * The set of passwords used for authentication. You can create up to two passwords for each user.
     * 
     */
    private final List<String> passwords;
    /**
     * Indicates whether the user requires a password to authenticate. Must be set to `password`.
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"passwordCount","passwords","type"})
    private UserAuthenticationMode(
        @Nullable Integer passwordCount,
        List<String> passwords,
        String type) {
        this.passwordCount = passwordCount;
        this.passwords = Objects.requireNonNull(passwords);
        this.type = Objects.requireNonNull(type);
    }

    /**
     * The number of passwords belonging to the user.
     * 
     */
    public Optional<Integer> getPasswordCount() {
        return Optional.ofNullable(this.passwordCount);
    }
    /**
     * The set of passwords used for authentication. You can create up to two passwords for each user.
     * 
     */
    public List<String> getPasswords() {
        return this.passwords;
    }
    /**
     * Indicates whether the user requires a password to authenticate. Must be set to `password`.
     * 
     */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserAuthenticationMode defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer passwordCount;
        private List<String> passwords;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(UserAuthenticationMode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.passwordCount = defaults.passwordCount;
    	      this.passwords = defaults.passwords;
    	      this.type = defaults.type;
        }

        public Builder setPasswordCount(@Nullable Integer passwordCount) {
            this.passwordCount = passwordCount;
            return this;
        }

        public Builder setPasswords(List<String> passwords) {
            this.passwords = Objects.requireNonNull(passwords);
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public UserAuthenticationMode build() {
            return new UserAuthenticationMode(passwordCount, passwords, type);
        }
    }
}
