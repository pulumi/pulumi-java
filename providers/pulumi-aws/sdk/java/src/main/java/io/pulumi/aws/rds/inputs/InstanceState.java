// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds.inputs;

import io.pulumi.aws.rds.enums.InstanceType;
import io.pulumi.aws.rds.enums.StorageType;
import io.pulumi.aws.rds.inputs.InstanceRestoreToPointInTimeGetArgs;
import io.pulumi.aws.rds.inputs.InstanceS3ImportGetArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceState extends io.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * The hostname of the RDS instance. See also `endpoint` and `port`.
     * 
     */
    @InputImport(name="address")
    private final @Nullable Input<String> address;

    public Input<String> getAddress() {
        return this.address == null ? Input.empty() : this.address;
    }

    /**
     * The allocated storage in gibibytes. If `max_allocated_storage` is configured, this argument represents the initial storage allocation and differences from the configuration will be ignored automatically when Storage Autoscaling occurs. If `replicate_source_db` is set, the value is ignored during the creation of the instance.
     * 
     */
    @InputImport(name="allocatedStorage")
    private final @Nullable Input<Integer> allocatedStorage;

    public Input<Integer> getAllocatedStorage() {
        return this.allocatedStorage == null ? Input.empty() : this.allocatedStorage;
    }

    /**
     * Indicates that major version
     * upgrades are allowed. Changing this parameter does not result in an outage and
     * the change is asynchronously applied as soon as possible.
     * 
     */
    @InputImport(name="allowMajorVersionUpgrade")
    private final @Nullable Input<Boolean> allowMajorVersionUpgrade;

    public Input<Boolean> getAllowMajorVersionUpgrade() {
        return this.allowMajorVersionUpgrade == null ? Input.empty() : this.allowMajorVersionUpgrade;
    }

    /**
     * Specifies whether any database modifications
     * are applied immediately, or during the next maintenance window. Default is
     * `false`. See [Amazon RDS Documentation for more
     * information.](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html)
     * 
     */
    @InputImport(name="applyImmediately")
    private final @Nullable Input<Boolean> applyImmediately;

    public Input<Boolean> getApplyImmediately() {
        return this.applyImmediately == null ? Input.empty() : this.applyImmediately;
    }

    /**
     * The ARN of the RDS instance.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Indicates that minor engine upgrades
     * will be applied automatically to the DB instance during the maintenance window.
     * Defaults to true.
     * 
     */
    @InputImport(name="autoMinorVersionUpgrade")
    private final @Nullable Input<Boolean> autoMinorVersionUpgrade;

    public Input<Boolean> getAutoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade == null ? Input.empty() : this.autoMinorVersionUpgrade;
    }

    /**
     * The AZ for the RDS instance.
     * 
     */
    @InputImport(name="availabilityZone")
    private final @Nullable Input<String> availabilityZone;

    public Input<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Input.empty() : this.availabilityZone;
    }

    /**
     * The days to retain backups for. Must be
     * between `0` and `35`. Must be greater than `0` if the database is used as a source for a Read Replica. [See Read Replica][1].
     * 
     */
    @InputImport(name="backupRetentionPeriod")
    private final @Nullable Input<Integer> backupRetentionPeriod;

    public Input<Integer> getBackupRetentionPeriod() {
        return this.backupRetentionPeriod == null ? Input.empty() : this.backupRetentionPeriod;
    }

    /**
     * The daily time range (in UTC) during which
     * automated backups are created if they are enabled. Example: "09:46-10:16". Must
     * not overlap with `maintenance_window`.
     * 
     */
    @InputImport(name="backupWindow")
    private final @Nullable Input<String> backupWindow;

    public Input<String> getBackupWindow() {
        return this.backupWindow == null ? Input.empty() : this.backupWindow;
    }

    /**
     * The identifier of the CA certificate for the DB instance.
     * 
     */
    @InputImport(name="caCertIdentifier")
    private final @Nullable Input<String> caCertIdentifier;

    public Input<String> getCaCertIdentifier() {
        return this.caCertIdentifier == null ? Input.empty() : this.caCertIdentifier;
    }

    /**
     * The character set name to use for DB
     * encoding in Oracle and Microsoft SQL instances (collation). This can't be changed. See [Oracle Character Sets
     * Supported in Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.OracleCharacterSets.html)
     * or [Server-Level Collation for Microsoft SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.SQLServer.CommonDBATasks.Collation.html) for more information.
     * 
     */
    @InputImport(name="characterSetName")
    private final @Nullable Input<String> characterSetName;

    public Input<String> getCharacterSetName() {
        return this.characterSetName == null ? Input.empty() : this.characterSetName;
    }

    /**
     * Copy all Instance `tags` to snapshots. Default is `false`.
     * 
     */
    @InputImport(name="copyTagsToSnapshot")
    private final @Nullable Input<Boolean> copyTagsToSnapshot;

    public Input<Boolean> getCopyTagsToSnapshot() {
        return this.copyTagsToSnapshot == null ? Input.empty() : this.copyTagsToSnapshot;
    }

    /**
     * Indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. See [CoIP for RDS on Outposts](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html#rds-on-outposts.coip) for more information.
     * 
     */
    @InputImport(name="customerOwnedIpEnabled")
    private final @Nullable Input<Boolean> customerOwnedIpEnabled;

    public Input<Boolean> getCustomerOwnedIpEnabled() {
        return this.customerOwnedIpEnabled == null ? Input.empty() : this.customerOwnedIpEnabled;
    }

    /**
     * Name of `DB subnet group`. DB instance will
     * be created in the VPC associated with the DB subnet group. If unspecified, will
     * be created in the `default` VPC, or in EC2 Classic, if available. When working
     * with read replicas, it should be specified only if the source database
     * specifies an instance in another AWS Region. See [DBSubnetGroupName in API
     * action CreateDBInstanceReadReplica](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstanceReadReplica.html)
     * for additional read replica contraints.
     * 
     */
    @InputImport(name="dbSubnetGroupName")
    private final @Nullable Input<String> dbSubnetGroupName;

    public Input<String> getDbSubnetGroupName() {
        return this.dbSubnetGroupName == null ? Input.empty() : this.dbSubnetGroupName;
    }

    /**
     * Specifies whether to remove automated backups immediately after the DB instance is deleted. Default is `true`.
     * 
     */
    @InputImport(name="deleteAutomatedBackups")
    private final @Nullable Input<Boolean> deleteAutomatedBackups;

    public Input<Boolean> getDeleteAutomatedBackups() {
        return this.deleteAutomatedBackups == null ? Input.empty() : this.deleteAutomatedBackups;
    }

    /**
     * If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
     * 
     */
    @InputImport(name="deletionProtection")
    private final @Nullable Input<Boolean> deletionProtection;

    public Input<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Input.empty() : this.deletionProtection;
    }

    /**
     * The ID of the Directory Service Active Directory domain to create the instance in.
     * 
     */
    @InputImport(name="domain")
    private final @Nullable Input<String> domain;

    public Input<String> getDomain() {
        return this.domain == null ? Input.empty() : this.domain;
    }

    /**
     * The name of the IAM role to be used when making API calls to the Directory Service.
     * 
     */
    @InputImport(name="domainIamRoleName")
    private final @Nullable Input<String> domainIamRoleName;

    public Input<String> getDomainIamRoleName() {
        return this.domainIamRoleName == null ? Input.empty() : this.domainIamRoleName;
    }

    /**
     * Set of log types to enable for exporting to CloudWatch logs. If omitted, no logs will be exported. Valid values (depending on `engine`). MySQL and MariaDB: `audit`, `error`, `general`, `slowquery`. PostgreSQL: `postgresql`, `upgrade`. MSSQL: `agent` , `error`. Oracle: `alert`, `audit`, `listener`, `trace`.
     * 
     */
    @InputImport(name="enabledCloudwatchLogsExports")
    private final @Nullable Input<List<String>> enabledCloudwatchLogsExports;

    public Input<List<String>> getEnabledCloudwatchLogsExports() {
        return this.enabledCloudwatchLogsExports == null ? Input.empty() : this.enabledCloudwatchLogsExports;
    }

    /**
     * The connection endpoint in `address:port` format.
     * 
     */
    @InputImport(name="endpoint")
    private final @Nullable Input<String> endpoint;

    public Input<String> getEndpoint() {
        return this.endpoint == null ? Input.empty() : this.endpoint;
    }

    /**
     * (Required unless a `snapshot_identifier` or `replicate_source_db`
     * is provided) The database engine to use.  For supported values, see the Engine parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html).
     * Note that for Amazon Aurora instances the engine must match the `DB cluster`'s engine'.
     * For information on the difference between the available Aurora MySQL engines
     * see [Comparison between Aurora MySQL 1 and Aurora MySQL 2](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AuroraMySQL.Updates.20180206.html)
     * in the Amazon RDS User Guide.
     * 
     */
    @InputImport(name="engine")
    private final @Nullable Input<String> engine;

    public Input<String> getEngine() {
        return this.engine == null ? Input.empty() : this.engine;
    }

    /**
     * The engine version to use. If `auto_minor_version_upgrade`
     * is enabled, you can provide a prefix of the version such as `5.7` (for `5.7.10`).
     * The actual engine version used is returned in the attribute `engine_version_actual`, defined below.
     * For supported values, see the EngineVersion parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html).
     * Note that for Amazon Aurora instances the engine version must match the `DB cluster`'s engine version'.
     * 
     */
    @InputImport(name="engineVersion")
    private final @Nullable Input<String> engineVersion;

    public Input<String> getEngineVersion() {
        return this.engineVersion == null ? Input.empty() : this.engineVersion;
    }

    /**
     * The running version of the database.
     * 
     */
    @InputImport(name="engineVersionActual")
    private final @Nullable Input<String> engineVersionActual;

    public Input<String> getEngineVersionActual() {
        return this.engineVersionActual == null ? Input.empty() : this.engineVersionActual;
    }

    /**
     * The name of your final DB snapshot
     * when this DB instance is deleted. Must be provided if `skip_final_snapshot` is
     * set to `false`. The value must begin with a letter, only contain alphanumeric characters and hyphens, and not end with a hyphen or contain two consecutive hyphens. Must not be provided when deleting a read replica.
     * 
     */
    @InputImport(name="finalSnapshotIdentifier")
    private final @Nullable Input<String> finalSnapshotIdentifier;

    public Input<String> getFinalSnapshotIdentifier() {
        return this.finalSnapshotIdentifier == null ? Input.empty() : this.finalSnapshotIdentifier;
    }

    /**
     * The canonical hosted zone ID of the DB instance (to be used
     * in a Route 53 Alias record).
     * 
     */
    @InputImport(name="hostedZoneId")
    private final @Nullable Input<String> hostedZoneId;

    public Input<String> getHostedZoneId() {
        return this.hostedZoneId == null ? Input.empty() : this.hostedZoneId;
    }

    /**
     * Specifies whether or
     * mappings of AWS Identity and Access Management (IAM) accounts to database
     * accounts is enabled.
     * 
     */
    @InputImport(name="iamDatabaseAuthenticationEnabled")
    private final @Nullable Input<Boolean> iamDatabaseAuthenticationEnabled;

    public Input<Boolean> getIamDatabaseAuthenticationEnabled() {
        return this.iamDatabaseAuthenticationEnabled == null ? Input.empty() : this.iamDatabaseAuthenticationEnabled;
    }

    /**
     * The name of the RDS instance,
     * if omitted, this provider will assign a random, unique identifier.
     * 
     */
    @InputImport(name="identifier")
    private final @Nullable Input<String> identifier;

    public Input<String> getIdentifier() {
        return this.identifier == null ? Input.empty() : this.identifier;
    }

    /**
     * Creates a unique
     * identifier beginning with the specified prefix. Conflicts with `identifier`.
     * 
     */
    @InputImport(name="identifierPrefix")
    private final @Nullable Input<String> identifierPrefix;

    public Input<String> getIdentifierPrefix() {
        return this.identifierPrefix == null ? Input.empty() : this.identifierPrefix;
    }

    /**
     * The instance type of the RDS instance.
     * 
     */
    @InputImport(name="instanceClass")
    private final @Nullable Input<Either<String,InstanceType>> instanceClass;

    public Input<Either<String,InstanceType>> getInstanceClass() {
        return this.instanceClass == null ? Input.empty() : this.instanceClass;
    }

    /**
     * The amount of provisioned IOPS. Setting this implies a
     * storage_type of "io1".
     * 
     */
    @InputImport(name="iops")
    private final @Nullable Input<Integer> iops;

    public Input<Integer> getIops() {
        return this.iops == null ? Input.empty() : this.iops;
    }

    /**
     * The ARN for the KMS encryption key. If creating an
     * encrypted replica, set this to the destination KMS ARN.
     * 
     */
    @InputImport(name="kmsKeyId")
    private final @Nullable Input<String> kmsKeyId;

    public Input<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Input.empty() : this.kmsKeyId;
    }

    /**
     * The latest time, in UTC [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8), to which a database can be restored with point-in-time restore.
     * 
     */
    @InputImport(name="latestRestorableTime")
    private final @Nullable Input<String> latestRestorableTime;

    public Input<String> getLatestRestorableTime() {
        return this.latestRestorableTime == null ? Input.empty() : this.latestRestorableTime;
    }

    /**
     * (Optional, but required for some DB engines, i.e., Oracle
     * SE1) License model information for this DB instance.
     * 
     */
    @InputImport(name="licenseModel")
    private final @Nullable Input<String> licenseModel;

    public Input<String> getLicenseModel() {
        return this.licenseModel == null ? Input.empty() : this.licenseModel;
    }

    /**
     * The window to perform maintenance in.
     * Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00". See [RDS
     * Maintenance Window
     * docs](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow)
     * for more information.
     * 
     */
    @InputImport(name="maintenanceWindow")
    private final @Nullable Input<String> maintenanceWindow;

    public Input<String> getMaintenanceWindow() {
        return this.maintenanceWindow == null ? Input.empty() : this.maintenanceWindow;
    }

    /**
     * When configured, the upper limit to which Amazon RDS can automatically scale the storage of the DB instance. Configuring this will automatically ignore differences to `allocated_storage`. Must be greater than or equal to `allocated_storage` or `0` to disable Storage Autoscaling.
     * 
     */
    @InputImport(name="maxAllocatedStorage")
    private final @Nullable Input<Integer> maxAllocatedStorage;

    public Input<Integer> getMaxAllocatedStorage() {
        return this.maxAllocatedStorage == null ? Input.empty() : this.maxAllocatedStorage;
    }

    /**
     * The interval, in seconds, between points
     * when Enhanced Monitoring metrics are collected for the DB instance. To disable
     * collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid
     * Values: 0, 1, 5, 10, 15, 30, 60.
     * 
     */
    @InputImport(name="monitoringInterval")
    private final @Nullable Input<Integer> monitoringInterval;

    public Input<Integer> getMonitoringInterval() {
        return this.monitoringInterval == null ? Input.empty() : this.monitoringInterval;
    }

    /**
     * The ARN for the IAM role that permits RDS
     * to send enhanced monitoring metrics to CloudWatch Logs. You can find more
     * information on the [AWS
     * Documentation](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html)
     * what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances.
     * 
     */
    @InputImport(name="monitoringRoleArn")
    private final @Nullable Input<String> monitoringRoleArn;

    public Input<String> getMonitoringRoleArn() {
        return this.monitoringRoleArn == null ? Input.empty() : this.monitoringRoleArn;
    }

    /**
     * Specifies if the RDS instance is multi-AZ
     * 
     */
    @InputImport(name="multiAz")
    private final @Nullable Input<Boolean> multiAz;

    public Input<Boolean> getMultiAz() {
        return this.multiAz == null ? Input.empty() : this.multiAz;
    }

    /**
     * The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Note that this does not apply for Oracle or SQL Server engines. See the [AWS documentation](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/create-db-instance.html) for more details on what applies for those engines. If you are providing an Oracle db name, it needs to be in all upper case.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The national character set is used in the NCHAR, NVARCHAR2, and NCLOB data types for Oracle instances. This can't be changed. See [Oracle Character Sets
     * Supported in Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.OracleCharacterSets.html).
     * 
     */
    @InputImport(name="ncharCharacterSetName")
    private final @Nullable Input<String> ncharCharacterSetName;

    public Input<String> getNcharCharacterSetName() {
        return this.ncharCharacterSetName == null ? Input.empty() : this.ncharCharacterSetName;
    }

    /**
     * Name of the DB option group to associate.
     * 
     */
    @InputImport(name="optionGroupName")
    private final @Nullable Input<String> optionGroupName;

    public Input<String> getOptionGroupName() {
        return this.optionGroupName == null ? Input.empty() : this.optionGroupName;
    }

    /**
     * Name of the DB parameter group to
     * associate.
     * 
     */
    @InputImport(name="parameterGroupName")
    private final @Nullable Input<String> parameterGroupName;

    public Input<String> getParameterGroupName() {
        return this.parameterGroupName == null ? Input.empty() : this.parameterGroupName;
    }

    /**
     * (Required unless a `snapshot_identifier` or `replicate_source_db`
     * is provided) Password for the master DB user. Note that this may show up in
     * logs, and it will be stored in the state file.
     * 
     */
    @InputImport(name="password")
    private final @Nullable Input<String> password;

    public Input<String> getPassword() {
        return this.password == null ? Input.empty() : this.password;
    }

    /**
     * Specifies whether Performance Insights are enabled. Defaults to false.
     * 
     */
    @InputImport(name="performanceInsightsEnabled")
    private final @Nullable Input<Boolean> performanceInsightsEnabled;

    public Input<Boolean> getPerformanceInsightsEnabled() {
        return this.performanceInsightsEnabled == null ? Input.empty() : this.performanceInsightsEnabled;
    }

    /**
     * The ARN for the KMS key to encrypt Performance Insights data. When specifying `performance_insights_kms_key_id`, `performance_insights_enabled` needs to be set to true. Once KMS key is set, it can never be changed.
     * 
     */
    @InputImport(name="performanceInsightsKmsKeyId")
    private final @Nullable Input<String> performanceInsightsKmsKeyId;

    public Input<String> getPerformanceInsightsKmsKeyId() {
        return this.performanceInsightsKmsKeyId == null ? Input.empty() : this.performanceInsightsKmsKeyId;
    }

    /**
     * The amount of time in days to retain Performance Insights data. Either 7 (7 days) or 731 (2 years). When specifying `performance_insights_retention_period`, `performance_insights_enabled` needs to be set to true. Defaults to '7'.
     * 
     */
    @InputImport(name="performanceInsightsRetentionPeriod")
    private final @Nullable Input<Integer> performanceInsightsRetentionPeriod;

    public Input<Integer> getPerformanceInsightsRetentionPeriod() {
        return this.performanceInsightsRetentionPeriod == null ? Input.empty() : this.performanceInsightsRetentionPeriod;
    }

    /**
     * The port on which the DB accepts connections.
     * 
     */
    @InputImport(name="port")
    private final @Nullable Input<Integer> port;

    public Input<Integer> getPort() {
        return this.port == null ? Input.empty() : this.port;
    }

    /**
     * Bool to control if instance is publicly
     * accessible. Default is `false`.
     * 
     */
    @InputImport(name="publiclyAccessible")
    private final @Nullable Input<Boolean> publiclyAccessible;

    public Input<Boolean> getPubliclyAccessible() {
        return this.publiclyAccessible == null ? Input.empty() : this.publiclyAccessible;
    }

    /**
     * Specifies whether the replica is in either `mounted` or `open-read-only` mode. This attribute
     * is only supported by Oracle instances. Oracle replicas operate in `open-read-only` mode unless otherwise specified. See [Working with Oracle Read Replicas](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html) for more information.
     * 
     */
    @InputImport(name="replicaMode")
    private final @Nullable Input<String> replicaMode;

    public Input<String> getReplicaMode() {
        return this.replicaMode == null ? Input.empty() : this.replicaMode;
    }

    @InputImport(name="replicas")
    private final @Nullable Input<List<String>> replicas;

    public Input<List<String>> getReplicas() {
        return this.replicas == null ? Input.empty() : this.replicas;
    }

    /**
     * Specifies that this resource is a Replicate
     * database, and to use this value as the source database. This correlates to the
     * `identifier` of another Amazon RDS Database to replicate (if replicating within
     * a single region) or ARN of the Amazon RDS Database to replicate (if replicating
     * cross-region). Note that if you are
     * creating a cross-region replica of an encrypted database you will also need to
     * specify a `kms_key_id`. See [DB Instance Replication][1] and [Working with
     * PostgreSQL and MySQL Read Replicas](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html)
     * for more information on using Replication.
     * 
     */
    @InputImport(name="replicateSourceDb")
    private final @Nullable Input<String> replicateSourceDb;

    public Input<String> getReplicateSourceDb() {
        return this.replicateSourceDb == null ? Input.empty() : this.replicateSourceDb;
    }

    /**
     * The RDS Resource ID of this instance.
     * 
     */
    @InputImport(name="resourceId")
    private final @Nullable Input<String> resourceId;

    public Input<String> getResourceId() {
        return this.resourceId == null ? Input.empty() : this.resourceId;
    }

    /**
     * A configuration block for restoring a DB instance to an arbitrary point in time. Requires the `identifier` argument to be set with the name of the new DB instance to be created. See Restore To Point In Time below for details.
     * 
     */
    @InputImport(name="restoreToPointInTime")
    private final @Nullable Input<InstanceRestoreToPointInTimeGetArgs> restoreToPointInTime;

    public Input<InstanceRestoreToPointInTimeGetArgs> getRestoreToPointInTime() {
        return this.restoreToPointInTime == null ? Input.empty() : this.restoreToPointInTime;
    }

    /**
     * Restore from a Percona Xtrabackup in S3.  See [Importing Data into an Amazon RDS MySQL DB Instance](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html)
     * 
     */
    @InputImport(name="s3Import")
    private final @Nullable Input<InstanceS3ImportGetArgs> s3Import;

    public Input<InstanceS3ImportGetArgs> getS3Import() {
        return this.s3Import == null ? Input.empty() : this.s3Import;
    }

    /**
     * List of DB Security Groups to
     * associate. Only used for [DB Instances on the _EC2-Classic_
     * Platform](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.html#USER_VPC.FindDefaultVPC).
     * 
     */
    @InputImport(name="securityGroupNames")
    private final @Nullable Input<List<String>> securityGroupNames;

    public Input<List<String>> getSecurityGroupNames() {
        return this.securityGroupNames == null ? Input.empty() : this.securityGroupNames;
    }

    /**
     * Determines whether a final DB snapshot is
     * created before the DB instance is deleted. If true is specified, no DBSnapshot
     * is created. If false is specified, a DB snapshot is created before the DB
     * instance is deleted, using the value from `final_snapshot_identifier`. Default
     * is `false`.
     * 
     */
    @InputImport(name="skipFinalSnapshot")
    private final @Nullable Input<Boolean> skipFinalSnapshot;

    public Input<Boolean> getSkipFinalSnapshot() {
        return this.skipFinalSnapshot == null ? Input.empty() : this.skipFinalSnapshot;
    }

    /**
     * Specifies whether or not to create this
     * database from a snapshot. This correlates to the snapshot ID you'd find in the
     * RDS console, e.g: rds:production-2015-06-26-06-05.
     * 
     */
    @InputImport(name="snapshotIdentifier")
    private final @Nullable Input<String> snapshotIdentifier;

    public Input<String> getSnapshotIdentifier() {
        return this.snapshotIdentifier == null ? Input.empty() : this.snapshotIdentifier;
    }

    /**
     * The RDS instance status.
     * 
     */
    @InputImport(name="status")
    private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * Specifies whether the DB instance is
     * encrypted. Note that if you are creating a cross-region read replica this field
     * is ignored and you should instead declare `kms_key_id` with a valid ARN. The
     * default is `false` if not specified.
     * 
     */
    @InputImport(name="storageEncrypted")
    private final @Nullable Input<Boolean> storageEncrypted;

    public Input<Boolean> getStorageEncrypted() {
        return this.storageEncrypted == null ? Input.empty() : this.storageEncrypted;
    }

    /**
     * One of "standard" (magnetic), "gp2" (general
     * purpose SSD), or "io1" (provisioned IOPS SSD). The default is "io1" if `iops` is
     * specified, "gp2" if not.
     * 
     */
    @InputImport(name="storageType")
    private final @Nullable Input<Either<String,StorageType>> storageType;

    public Input<Either<String,StorageType>> getStorageType() {
        return this.storageType == null ? Input.empty() : this.storageType;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Time zone of the DB instance. `timezone` is currently
     * only supported by Microsoft SQL Server. The `timezone` can only be set on
     * creation. See [MSSQL User
     * Guide](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone)
     * for more information.
     * 
     */
    @InputImport(name="timezone")
    private final @Nullable Input<String> timezone;

    public Input<String> getTimezone() {
        return this.timezone == null ? Input.empty() : this.timezone;
    }

    /**
     * (Required unless a `snapshot_identifier` or `replicate_source_db`
     * is provided) Username for the master DB user.
     * 
     */
    @InputImport(name="username")
    private final @Nullable Input<String> username;

    public Input<String> getUsername() {
        return this.username == null ? Input.empty() : this.username;
    }

    /**
     * List of VPC security groups to
     * associate.
     * 
     */
    @InputImport(name="vpcSecurityGroupIds")
    private final @Nullable Input<List<String>> vpcSecurityGroupIds;

    public Input<List<String>> getVpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Input.empty() : this.vpcSecurityGroupIds;
    }

    public InstanceState(
        @Nullable Input<String> address,
        @Nullable Input<Integer> allocatedStorage,
        @Nullable Input<Boolean> allowMajorVersionUpgrade,
        @Nullable Input<Boolean> applyImmediately,
        @Nullable Input<String> arn,
        @Nullable Input<Boolean> autoMinorVersionUpgrade,
        @Nullable Input<String> availabilityZone,
        @Nullable Input<Integer> backupRetentionPeriod,
        @Nullable Input<String> backupWindow,
        @Nullable Input<String> caCertIdentifier,
        @Nullable Input<String> characterSetName,
        @Nullable Input<Boolean> copyTagsToSnapshot,
        @Nullable Input<Boolean> customerOwnedIpEnabled,
        @Nullable Input<String> dbSubnetGroupName,
        @Nullable Input<Boolean> deleteAutomatedBackups,
        @Nullable Input<Boolean> deletionProtection,
        @Nullable Input<String> domain,
        @Nullable Input<String> domainIamRoleName,
        @Nullable Input<List<String>> enabledCloudwatchLogsExports,
        @Nullable Input<String> endpoint,
        @Nullable Input<String> engine,
        @Nullable Input<String> engineVersion,
        @Nullable Input<String> engineVersionActual,
        @Nullable Input<String> finalSnapshotIdentifier,
        @Nullable Input<String> hostedZoneId,
        @Nullable Input<Boolean> iamDatabaseAuthenticationEnabled,
        @Nullable Input<String> identifier,
        @Nullable Input<String> identifierPrefix,
        @Nullable Input<Either<String,InstanceType>> instanceClass,
        @Nullable Input<Integer> iops,
        @Nullable Input<String> kmsKeyId,
        @Nullable Input<String> latestRestorableTime,
        @Nullable Input<String> licenseModel,
        @Nullable Input<String> maintenanceWindow,
        @Nullable Input<Integer> maxAllocatedStorage,
        @Nullable Input<Integer> monitoringInterval,
        @Nullable Input<String> monitoringRoleArn,
        @Nullable Input<Boolean> multiAz,
        @Nullable Input<String> name,
        @Nullable Input<String> ncharCharacterSetName,
        @Nullable Input<String> optionGroupName,
        @Nullable Input<String> parameterGroupName,
        @Nullable Input<String> password,
        @Nullable Input<Boolean> performanceInsightsEnabled,
        @Nullable Input<String> performanceInsightsKmsKeyId,
        @Nullable Input<Integer> performanceInsightsRetentionPeriod,
        @Nullable Input<Integer> port,
        @Nullable Input<Boolean> publiclyAccessible,
        @Nullable Input<String> replicaMode,
        @Nullable Input<List<String>> replicas,
        @Nullable Input<String> replicateSourceDb,
        @Nullable Input<String> resourceId,
        @Nullable Input<InstanceRestoreToPointInTimeGetArgs> restoreToPointInTime,
        @Nullable Input<InstanceS3ImportGetArgs> s3Import,
        @Nullable Input<List<String>> securityGroupNames,
        @Nullable Input<Boolean> skipFinalSnapshot,
        @Nullable Input<String> snapshotIdentifier,
        @Nullable Input<String> status,
        @Nullable Input<Boolean> storageEncrypted,
        @Nullable Input<Either<String,StorageType>> storageType,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> timezone,
        @Nullable Input<String> username,
        @Nullable Input<List<String>> vpcSecurityGroupIds) {
        this.address = address;
        this.allocatedStorage = allocatedStorage;
        this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
        this.applyImmediately = applyImmediately;
        this.arn = arn;
        this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
        this.availabilityZone = availabilityZone;
        this.backupRetentionPeriod = backupRetentionPeriod;
        this.backupWindow = backupWindow;
        this.caCertIdentifier = caCertIdentifier;
        this.characterSetName = characterSetName;
        this.copyTagsToSnapshot = copyTagsToSnapshot;
        this.customerOwnedIpEnabled = customerOwnedIpEnabled;
        this.dbSubnetGroupName = dbSubnetGroupName;
        this.deleteAutomatedBackups = deleteAutomatedBackups;
        this.deletionProtection = deletionProtection;
        this.domain = domain;
        this.domainIamRoleName = domainIamRoleName;
        this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
        this.endpoint = endpoint;
        this.engine = engine;
        this.engineVersion = engineVersion;
        this.engineVersionActual = engineVersionActual;
        this.finalSnapshotIdentifier = finalSnapshotIdentifier;
        this.hostedZoneId = hostedZoneId;
        this.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
        this.identifier = identifier;
        this.identifierPrefix = identifierPrefix;
        this.instanceClass = instanceClass;
        this.iops = iops;
        this.kmsKeyId = kmsKeyId;
        this.latestRestorableTime = latestRestorableTime;
        this.licenseModel = licenseModel;
        this.maintenanceWindow = maintenanceWindow;
        this.maxAllocatedStorage = maxAllocatedStorage;
        this.monitoringInterval = monitoringInterval;
        this.monitoringRoleArn = monitoringRoleArn;
        this.multiAz = multiAz;
        this.name = name;
        this.ncharCharacterSetName = ncharCharacterSetName;
        this.optionGroupName = optionGroupName;
        this.parameterGroupName = parameterGroupName;
        this.password = password;
        this.performanceInsightsEnabled = performanceInsightsEnabled;
        this.performanceInsightsKmsKeyId = performanceInsightsKmsKeyId;
        this.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod;
        this.port = port;
        this.publiclyAccessible = publiclyAccessible;
        this.replicaMode = replicaMode;
        this.replicas = replicas;
        this.replicateSourceDb = replicateSourceDb;
        this.resourceId = resourceId;
        this.restoreToPointInTime = restoreToPointInTime;
        this.s3Import = s3Import;
        this.securityGroupNames = securityGroupNames;
        this.skipFinalSnapshot = skipFinalSnapshot;
        this.snapshotIdentifier = snapshotIdentifier;
        this.status = status;
        this.storageEncrypted = storageEncrypted;
        this.storageType = storageType;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.timezone = timezone;
        this.username = username;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    }

    private InstanceState() {
        this.address = Input.empty();
        this.allocatedStorage = Input.empty();
        this.allowMajorVersionUpgrade = Input.empty();
        this.applyImmediately = Input.empty();
        this.arn = Input.empty();
        this.autoMinorVersionUpgrade = Input.empty();
        this.availabilityZone = Input.empty();
        this.backupRetentionPeriod = Input.empty();
        this.backupWindow = Input.empty();
        this.caCertIdentifier = Input.empty();
        this.characterSetName = Input.empty();
        this.copyTagsToSnapshot = Input.empty();
        this.customerOwnedIpEnabled = Input.empty();
        this.dbSubnetGroupName = Input.empty();
        this.deleteAutomatedBackups = Input.empty();
        this.deletionProtection = Input.empty();
        this.domain = Input.empty();
        this.domainIamRoleName = Input.empty();
        this.enabledCloudwatchLogsExports = Input.empty();
        this.endpoint = Input.empty();
        this.engine = Input.empty();
        this.engineVersion = Input.empty();
        this.engineVersionActual = Input.empty();
        this.finalSnapshotIdentifier = Input.empty();
        this.hostedZoneId = Input.empty();
        this.iamDatabaseAuthenticationEnabled = Input.empty();
        this.identifier = Input.empty();
        this.identifierPrefix = Input.empty();
        this.instanceClass = Input.empty();
        this.iops = Input.empty();
        this.kmsKeyId = Input.empty();
        this.latestRestorableTime = Input.empty();
        this.licenseModel = Input.empty();
        this.maintenanceWindow = Input.empty();
        this.maxAllocatedStorage = Input.empty();
        this.monitoringInterval = Input.empty();
        this.monitoringRoleArn = Input.empty();
        this.multiAz = Input.empty();
        this.name = Input.empty();
        this.ncharCharacterSetName = Input.empty();
        this.optionGroupName = Input.empty();
        this.parameterGroupName = Input.empty();
        this.password = Input.empty();
        this.performanceInsightsEnabled = Input.empty();
        this.performanceInsightsKmsKeyId = Input.empty();
        this.performanceInsightsRetentionPeriod = Input.empty();
        this.port = Input.empty();
        this.publiclyAccessible = Input.empty();
        this.replicaMode = Input.empty();
        this.replicas = Input.empty();
        this.replicateSourceDb = Input.empty();
        this.resourceId = Input.empty();
        this.restoreToPointInTime = Input.empty();
        this.s3Import = Input.empty();
        this.securityGroupNames = Input.empty();
        this.skipFinalSnapshot = Input.empty();
        this.snapshotIdentifier = Input.empty();
        this.status = Input.empty();
        this.storageEncrypted = Input.empty();
        this.storageType = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.timezone = Input.empty();
        this.username = Input.empty();
        this.vpcSecurityGroupIds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> address;
        private @Nullable Input<Integer> allocatedStorage;
        private @Nullable Input<Boolean> allowMajorVersionUpgrade;
        private @Nullable Input<Boolean> applyImmediately;
        private @Nullable Input<String> arn;
        private @Nullable Input<Boolean> autoMinorVersionUpgrade;
        private @Nullable Input<String> availabilityZone;
        private @Nullable Input<Integer> backupRetentionPeriod;
        private @Nullable Input<String> backupWindow;
        private @Nullable Input<String> caCertIdentifier;
        private @Nullable Input<String> characterSetName;
        private @Nullable Input<Boolean> copyTagsToSnapshot;
        private @Nullable Input<Boolean> customerOwnedIpEnabled;
        private @Nullable Input<String> dbSubnetGroupName;
        private @Nullable Input<Boolean> deleteAutomatedBackups;
        private @Nullable Input<Boolean> deletionProtection;
        private @Nullable Input<String> domain;
        private @Nullable Input<String> domainIamRoleName;
        private @Nullable Input<List<String>> enabledCloudwatchLogsExports;
        private @Nullable Input<String> endpoint;
        private @Nullable Input<String> engine;
        private @Nullable Input<String> engineVersion;
        private @Nullable Input<String> engineVersionActual;
        private @Nullable Input<String> finalSnapshotIdentifier;
        private @Nullable Input<String> hostedZoneId;
        private @Nullable Input<Boolean> iamDatabaseAuthenticationEnabled;
        private @Nullable Input<String> identifier;
        private @Nullable Input<String> identifierPrefix;
        private @Nullable Input<Either<String,InstanceType>> instanceClass;
        private @Nullable Input<Integer> iops;
        private @Nullable Input<String> kmsKeyId;
        private @Nullable Input<String> latestRestorableTime;
        private @Nullable Input<String> licenseModel;
        private @Nullable Input<String> maintenanceWindow;
        private @Nullable Input<Integer> maxAllocatedStorage;
        private @Nullable Input<Integer> monitoringInterval;
        private @Nullable Input<String> monitoringRoleArn;
        private @Nullable Input<Boolean> multiAz;
        private @Nullable Input<String> name;
        private @Nullable Input<String> ncharCharacterSetName;
        private @Nullable Input<String> optionGroupName;
        private @Nullable Input<String> parameterGroupName;
        private @Nullable Input<String> password;
        private @Nullable Input<Boolean> performanceInsightsEnabled;
        private @Nullable Input<String> performanceInsightsKmsKeyId;
        private @Nullable Input<Integer> performanceInsightsRetentionPeriod;
        private @Nullable Input<Integer> port;
        private @Nullable Input<Boolean> publiclyAccessible;
        private @Nullable Input<String> replicaMode;
        private @Nullable Input<List<String>> replicas;
        private @Nullable Input<String> replicateSourceDb;
        private @Nullable Input<String> resourceId;
        private @Nullable Input<InstanceRestoreToPointInTimeGetArgs> restoreToPointInTime;
        private @Nullable Input<InstanceS3ImportGetArgs> s3Import;
        private @Nullable Input<List<String>> securityGroupNames;
        private @Nullable Input<Boolean> skipFinalSnapshot;
        private @Nullable Input<String> snapshotIdentifier;
        private @Nullable Input<String> status;
        private @Nullable Input<Boolean> storageEncrypted;
        private @Nullable Input<Either<String,StorageType>> storageType;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> timezone;
        private @Nullable Input<String> username;
        private @Nullable Input<List<String>> vpcSecurityGroupIds;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.allocatedStorage = defaults.allocatedStorage;
    	      this.allowMajorVersionUpgrade = defaults.allowMajorVersionUpgrade;
    	      this.applyImmediately = defaults.applyImmediately;
    	      this.arn = defaults.arn;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.backupRetentionPeriod = defaults.backupRetentionPeriod;
    	      this.backupWindow = defaults.backupWindow;
    	      this.caCertIdentifier = defaults.caCertIdentifier;
    	      this.characterSetName = defaults.characterSetName;
    	      this.copyTagsToSnapshot = defaults.copyTagsToSnapshot;
    	      this.customerOwnedIpEnabled = defaults.customerOwnedIpEnabled;
    	      this.dbSubnetGroupName = defaults.dbSubnetGroupName;
    	      this.deleteAutomatedBackups = defaults.deleteAutomatedBackups;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.domain = defaults.domain;
    	      this.domainIamRoleName = defaults.domainIamRoleName;
    	      this.enabledCloudwatchLogsExports = defaults.enabledCloudwatchLogsExports;
    	      this.endpoint = defaults.endpoint;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.engineVersionActual = defaults.engineVersionActual;
    	      this.finalSnapshotIdentifier = defaults.finalSnapshotIdentifier;
    	      this.hostedZoneId = defaults.hostedZoneId;
    	      this.iamDatabaseAuthenticationEnabled = defaults.iamDatabaseAuthenticationEnabled;
    	      this.identifier = defaults.identifier;
    	      this.identifierPrefix = defaults.identifierPrefix;
    	      this.instanceClass = defaults.instanceClass;
    	      this.iops = defaults.iops;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.latestRestorableTime = defaults.latestRestorableTime;
    	      this.licenseModel = defaults.licenseModel;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.maxAllocatedStorage = defaults.maxAllocatedStorage;
    	      this.monitoringInterval = defaults.monitoringInterval;
    	      this.monitoringRoleArn = defaults.monitoringRoleArn;
    	      this.multiAz = defaults.multiAz;
    	      this.name = defaults.name;
    	      this.ncharCharacterSetName = defaults.ncharCharacterSetName;
    	      this.optionGroupName = defaults.optionGroupName;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.password = defaults.password;
    	      this.performanceInsightsEnabled = defaults.performanceInsightsEnabled;
    	      this.performanceInsightsKmsKeyId = defaults.performanceInsightsKmsKeyId;
    	      this.performanceInsightsRetentionPeriod = defaults.performanceInsightsRetentionPeriod;
    	      this.port = defaults.port;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.replicaMode = defaults.replicaMode;
    	      this.replicas = defaults.replicas;
    	      this.replicateSourceDb = defaults.replicateSourceDb;
    	      this.resourceId = defaults.resourceId;
    	      this.restoreToPointInTime = defaults.restoreToPointInTime;
    	      this.s3Import = defaults.s3Import;
    	      this.securityGroupNames = defaults.securityGroupNames;
    	      this.skipFinalSnapshot = defaults.skipFinalSnapshot;
    	      this.snapshotIdentifier = defaults.snapshotIdentifier;
    	      this.status = defaults.status;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.timezone = defaults.timezone;
    	      this.username = defaults.username;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        public Builder setAddress(@Nullable Input<String> address) {
            this.address = address;
            return this;
        }

        public Builder setAddress(@Nullable String address) {
            this.address = Input.ofNullable(address);
            return this;
        }

        public Builder setAllocatedStorage(@Nullable Input<Integer> allocatedStorage) {
            this.allocatedStorage = allocatedStorage;
            return this;
        }

        public Builder setAllocatedStorage(@Nullable Integer allocatedStorage) {
            this.allocatedStorage = Input.ofNullable(allocatedStorage);
            return this;
        }

        public Builder setAllowMajorVersionUpgrade(@Nullable Input<Boolean> allowMajorVersionUpgrade) {
            this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
            return this;
        }

        public Builder setAllowMajorVersionUpgrade(@Nullable Boolean allowMajorVersionUpgrade) {
            this.allowMajorVersionUpgrade = Input.ofNullable(allowMajorVersionUpgrade);
            return this;
        }

        public Builder setApplyImmediately(@Nullable Input<Boolean> applyImmediately) {
            this.applyImmediately = applyImmediately;
            return this;
        }

        public Builder setApplyImmediately(@Nullable Boolean applyImmediately) {
            this.applyImmediately = Input.ofNullable(applyImmediately);
            return this;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setAutoMinorVersionUpgrade(@Nullable Input<Boolean> autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }

        public Builder setAutoMinorVersionUpgrade(@Nullable Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Input.ofNullable(autoMinorVersionUpgrade);
            return this;
        }

        public Builder setAvailabilityZone(@Nullable Input<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder setAvailabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Input.ofNullable(availabilityZone);
            return this;
        }

        public Builder setBackupRetentionPeriod(@Nullable Input<Integer> backupRetentionPeriod) {
            this.backupRetentionPeriod = backupRetentionPeriod;
            return this;
        }

        public Builder setBackupRetentionPeriod(@Nullable Integer backupRetentionPeriod) {
            this.backupRetentionPeriod = Input.ofNullable(backupRetentionPeriod);
            return this;
        }

        public Builder setBackupWindow(@Nullable Input<String> backupWindow) {
            this.backupWindow = backupWindow;
            return this;
        }

        public Builder setBackupWindow(@Nullable String backupWindow) {
            this.backupWindow = Input.ofNullable(backupWindow);
            return this;
        }

        public Builder setCaCertIdentifier(@Nullable Input<String> caCertIdentifier) {
            this.caCertIdentifier = caCertIdentifier;
            return this;
        }

        public Builder setCaCertIdentifier(@Nullable String caCertIdentifier) {
            this.caCertIdentifier = Input.ofNullable(caCertIdentifier);
            return this;
        }

        public Builder setCharacterSetName(@Nullable Input<String> characterSetName) {
            this.characterSetName = characterSetName;
            return this;
        }

        public Builder setCharacterSetName(@Nullable String characterSetName) {
            this.characterSetName = Input.ofNullable(characterSetName);
            return this;
        }

        public Builder setCopyTagsToSnapshot(@Nullable Input<Boolean> copyTagsToSnapshot) {
            this.copyTagsToSnapshot = copyTagsToSnapshot;
            return this;
        }

        public Builder setCopyTagsToSnapshot(@Nullable Boolean copyTagsToSnapshot) {
            this.copyTagsToSnapshot = Input.ofNullable(copyTagsToSnapshot);
            return this;
        }

        public Builder setCustomerOwnedIpEnabled(@Nullable Input<Boolean> customerOwnedIpEnabled) {
            this.customerOwnedIpEnabled = customerOwnedIpEnabled;
            return this;
        }

        public Builder setCustomerOwnedIpEnabled(@Nullable Boolean customerOwnedIpEnabled) {
            this.customerOwnedIpEnabled = Input.ofNullable(customerOwnedIpEnabled);
            return this;
        }

        public Builder setDbSubnetGroupName(@Nullable Input<String> dbSubnetGroupName) {
            this.dbSubnetGroupName = dbSubnetGroupName;
            return this;
        }

        public Builder setDbSubnetGroupName(@Nullable String dbSubnetGroupName) {
            this.dbSubnetGroupName = Input.ofNullable(dbSubnetGroupName);
            return this;
        }

        public Builder setDeleteAutomatedBackups(@Nullable Input<Boolean> deleteAutomatedBackups) {
            this.deleteAutomatedBackups = deleteAutomatedBackups;
            return this;
        }

        public Builder setDeleteAutomatedBackups(@Nullable Boolean deleteAutomatedBackups) {
            this.deleteAutomatedBackups = Input.ofNullable(deleteAutomatedBackups);
            return this;
        }

        public Builder setDeletionProtection(@Nullable Input<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder setDeletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Input.ofNullable(deletionProtection);
            return this;
        }

        public Builder setDomain(@Nullable Input<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder setDomain(@Nullable String domain) {
            this.domain = Input.ofNullable(domain);
            return this;
        }

        public Builder setDomainIamRoleName(@Nullable Input<String> domainIamRoleName) {
            this.domainIamRoleName = domainIamRoleName;
            return this;
        }

        public Builder setDomainIamRoleName(@Nullable String domainIamRoleName) {
            this.domainIamRoleName = Input.ofNullable(domainIamRoleName);
            return this;
        }

        public Builder setEnabledCloudwatchLogsExports(@Nullable Input<List<String>> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            return this;
        }

        public Builder setEnabledCloudwatchLogsExports(@Nullable List<String> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = Input.ofNullable(enabledCloudwatchLogsExports);
            return this;
        }

        public Builder setEndpoint(@Nullable Input<String> endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder setEndpoint(@Nullable String endpoint) {
            this.endpoint = Input.ofNullable(endpoint);
            return this;
        }

        public Builder setEngine(@Nullable Input<String> engine) {
            this.engine = engine;
            return this;
        }

        public Builder setEngine(@Nullable String engine) {
            this.engine = Input.ofNullable(engine);
            return this;
        }

        public Builder setEngineVersion(@Nullable Input<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder setEngineVersion(@Nullable String engineVersion) {
            this.engineVersion = Input.ofNullable(engineVersion);
            return this;
        }

        public Builder setEngineVersionActual(@Nullable Input<String> engineVersionActual) {
            this.engineVersionActual = engineVersionActual;
            return this;
        }

        public Builder setEngineVersionActual(@Nullable String engineVersionActual) {
            this.engineVersionActual = Input.ofNullable(engineVersionActual);
            return this;
        }

        public Builder setFinalSnapshotIdentifier(@Nullable Input<String> finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = finalSnapshotIdentifier;
            return this;
        }

        public Builder setFinalSnapshotIdentifier(@Nullable String finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = Input.ofNullable(finalSnapshotIdentifier);
            return this;
        }

        public Builder setHostedZoneId(@Nullable Input<String> hostedZoneId) {
            this.hostedZoneId = hostedZoneId;
            return this;
        }

        public Builder setHostedZoneId(@Nullable String hostedZoneId) {
            this.hostedZoneId = Input.ofNullable(hostedZoneId);
            return this;
        }

        public Builder setIamDatabaseAuthenticationEnabled(@Nullable Input<Boolean> iamDatabaseAuthenticationEnabled) {
            this.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
            return this;
        }

        public Builder setIamDatabaseAuthenticationEnabled(@Nullable Boolean iamDatabaseAuthenticationEnabled) {
            this.iamDatabaseAuthenticationEnabled = Input.ofNullable(iamDatabaseAuthenticationEnabled);
            return this;
        }

        public Builder setIdentifier(@Nullable Input<String> identifier) {
            this.identifier = identifier;
            return this;
        }

        public Builder setIdentifier(@Nullable String identifier) {
            this.identifier = Input.ofNullable(identifier);
            return this;
        }

        public Builder setIdentifierPrefix(@Nullable Input<String> identifierPrefix) {
            this.identifierPrefix = identifierPrefix;
            return this;
        }

        public Builder setIdentifierPrefix(@Nullable String identifierPrefix) {
            this.identifierPrefix = Input.ofNullable(identifierPrefix);
            return this;
        }

        public Builder setInstanceClass(@Nullable Input<Either<String,InstanceType>> instanceClass) {
            this.instanceClass = instanceClass;
            return this;
        }

        public Builder setInstanceClass(@Nullable Either<String,InstanceType> instanceClass) {
            this.instanceClass = Input.ofNullable(instanceClass);
            return this;
        }

        public Builder setIops(@Nullable Input<Integer> iops) {
            this.iops = iops;
            return this;
        }

        public Builder setIops(@Nullable Integer iops) {
            this.iops = Input.ofNullable(iops);
            return this;
        }

        public Builder setKmsKeyId(@Nullable Input<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder setKmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Input.ofNullable(kmsKeyId);
            return this;
        }

        public Builder setLatestRestorableTime(@Nullable Input<String> latestRestorableTime) {
            this.latestRestorableTime = latestRestorableTime;
            return this;
        }

        public Builder setLatestRestorableTime(@Nullable String latestRestorableTime) {
            this.latestRestorableTime = Input.ofNullable(latestRestorableTime);
            return this;
        }

        public Builder setLicenseModel(@Nullable Input<String> licenseModel) {
            this.licenseModel = licenseModel;
            return this;
        }

        public Builder setLicenseModel(@Nullable String licenseModel) {
            this.licenseModel = Input.ofNullable(licenseModel);
            return this;
        }

        public Builder setMaintenanceWindow(@Nullable Input<String> maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder setMaintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = Input.ofNullable(maintenanceWindow);
            return this;
        }

        public Builder setMaxAllocatedStorage(@Nullable Input<Integer> maxAllocatedStorage) {
            this.maxAllocatedStorage = maxAllocatedStorage;
            return this;
        }

        public Builder setMaxAllocatedStorage(@Nullable Integer maxAllocatedStorage) {
            this.maxAllocatedStorage = Input.ofNullable(maxAllocatedStorage);
            return this;
        }

        public Builder setMonitoringInterval(@Nullable Input<Integer> monitoringInterval) {
            this.monitoringInterval = monitoringInterval;
            return this;
        }

        public Builder setMonitoringInterval(@Nullable Integer monitoringInterval) {
            this.monitoringInterval = Input.ofNullable(monitoringInterval);
            return this;
        }

        public Builder setMonitoringRoleArn(@Nullable Input<String> monitoringRoleArn) {
            this.monitoringRoleArn = monitoringRoleArn;
            return this;
        }

        public Builder setMonitoringRoleArn(@Nullable String monitoringRoleArn) {
            this.monitoringRoleArn = Input.ofNullable(monitoringRoleArn);
            return this;
        }

        public Builder setMultiAz(@Nullable Input<Boolean> multiAz) {
            this.multiAz = multiAz;
            return this;
        }

        public Builder setMultiAz(@Nullable Boolean multiAz) {
            this.multiAz = Input.ofNullable(multiAz);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNcharCharacterSetName(@Nullable Input<String> ncharCharacterSetName) {
            this.ncharCharacterSetName = ncharCharacterSetName;
            return this;
        }

        public Builder setNcharCharacterSetName(@Nullable String ncharCharacterSetName) {
            this.ncharCharacterSetName = Input.ofNullable(ncharCharacterSetName);
            return this;
        }

        public Builder setOptionGroupName(@Nullable Input<String> optionGroupName) {
            this.optionGroupName = optionGroupName;
            return this;
        }

        public Builder setOptionGroupName(@Nullable String optionGroupName) {
            this.optionGroupName = Input.ofNullable(optionGroupName);
            return this;
        }

        public Builder setParameterGroupName(@Nullable Input<String> parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }

        public Builder setParameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = Input.ofNullable(parameterGroupName);
            return this;
        }

        public Builder setPassword(@Nullable Input<String> password) {
            this.password = password;
            return this;
        }

        public Builder setPassword(@Nullable String password) {
            this.password = Input.ofNullable(password);
            return this;
        }

        public Builder setPerformanceInsightsEnabled(@Nullable Input<Boolean> performanceInsightsEnabled) {
            this.performanceInsightsEnabled = performanceInsightsEnabled;
            return this;
        }

        public Builder setPerformanceInsightsEnabled(@Nullable Boolean performanceInsightsEnabled) {
            this.performanceInsightsEnabled = Input.ofNullable(performanceInsightsEnabled);
            return this;
        }

        public Builder setPerformanceInsightsKmsKeyId(@Nullable Input<String> performanceInsightsKmsKeyId) {
            this.performanceInsightsKmsKeyId = performanceInsightsKmsKeyId;
            return this;
        }

        public Builder setPerformanceInsightsKmsKeyId(@Nullable String performanceInsightsKmsKeyId) {
            this.performanceInsightsKmsKeyId = Input.ofNullable(performanceInsightsKmsKeyId);
            return this;
        }

        public Builder setPerformanceInsightsRetentionPeriod(@Nullable Input<Integer> performanceInsightsRetentionPeriod) {
            this.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod;
            return this;
        }

        public Builder setPerformanceInsightsRetentionPeriod(@Nullable Integer performanceInsightsRetentionPeriod) {
            this.performanceInsightsRetentionPeriod = Input.ofNullable(performanceInsightsRetentionPeriod);
            return this;
        }

        public Builder setPort(@Nullable Input<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder setPort(@Nullable Integer port) {
            this.port = Input.ofNullable(port);
            return this;
        }

        public Builder setPubliclyAccessible(@Nullable Input<Boolean> publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }

        public Builder setPubliclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = Input.ofNullable(publiclyAccessible);
            return this;
        }

        public Builder setReplicaMode(@Nullable Input<String> replicaMode) {
            this.replicaMode = replicaMode;
            return this;
        }

        public Builder setReplicaMode(@Nullable String replicaMode) {
            this.replicaMode = Input.ofNullable(replicaMode);
            return this;
        }

        public Builder setReplicas(@Nullable Input<List<String>> replicas) {
            this.replicas = replicas;
            return this;
        }

        public Builder setReplicas(@Nullable List<String> replicas) {
            this.replicas = Input.ofNullable(replicas);
            return this;
        }

        public Builder setReplicateSourceDb(@Nullable Input<String> replicateSourceDb) {
            this.replicateSourceDb = replicateSourceDb;
            return this;
        }

        public Builder setReplicateSourceDb(@Nullable String replicateSourceDb) {
            this.replicateSourceDb = Input.ofNullable(replicateSourceDb);
            return this;
        }

        public Builder setResourceId(@Nullable Input<String> resourceId) {
            this.resourceId = resourceId;
            return this;
        }

        public Builder setResourceId(@Nullable String resourceId) {
            this.resourceId = Input.ofNullable(resourceId);
            return this;
        }

        public Builder setRestoreToPointInTime(@Nullable Input<InstanceRestoreToPointInTimeGetArgs> restoreToPointInTime) {
            this.restoreToPointInTime = restoreToPointInTime;
            return this;
        }

        public Builder setRestoreToPointInTime(@Nullable InstanceRestoreToPointInTimeGetArgs restoreToPointInTime) {
            this.restoreToPointInTime = Input.ofNullable(restoreToPointInTime);
            return this;
        }

        public Builder setS3Import(@Nullable Input<InstanceS3ImportGetArgs> s3Import) {
            this.s3Import = s3Import;
            return this;
        }

        public Builder setS3Import(@Nullable InstanceS3ImportGetArgs s3Import) {
            this.s3Import = Input.ofNullable(s3Import);
            return this;
        }

        public Builder setSecurityGroupNames(@Nullable Input<List<String>> securityGroupNames) {
            this.securityGroupNames = securityGroupNames;
            return this;
        }

        public Builder setSecurityGroupNames(@Nullable List<String> securityGroupNames) {
            this.securityGroupNames = Input.ofNullable(securityGroupNames);
            return this;
        }

        public Builder setSkipFinalSnapshot(@Nullable Input<Boolean> skipFinalSnapshot) {
            this.skipFinalSnapshot = skipFinalSnapshot;
            return this;
        }

        public Builder setSkipFinalSnapshot(@Nullable Boolean skipFinalSnapshot) {
            this.skipFinalSnapshot = Input.ofNullable(skipFinalSnapshot);
            return this;
        }

        public Builder setSnapshotIdentifier(@Nullable Input<String> snapshotIdentifier) {
            this.snapshotIdentifier = snapshotIdentifier;
            return this;
        }

        public Builder setSnapshotIdentifier(@Nullable String snapshotIdentifier) {
            this.snapshotIdentifier = Input.ofNullable(snapshotIdentifier);
            return this;
        }

        public Builder setStatus(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder setStorageEncrypted(@Nullable Input<Boolean> storageEncrypted) {
            this.storageEncrypted = storageEncrypted;
            return this;
        }

        public Builder setStorageEncrypted(@Nullable Boolean storageEncrypted) {
            this.storageEncrypted = Input.ofNullable(storageEncrypted);
            return this;
        }

        public Builder setStorageType(@Nullable Input<Either<String,StorageType>> storageType) {
            this.storageType = storageType;
            return this;
        }

        public Builder setStorageType(@Nullable Either<String,StorageType> storageType) {
            this.storageType = Input.ofNullable(storageType);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setTimezone(@Nullable Input<String> timezone) {
            this.timezone = timezone;
            return this;
        }

        public Builder setTimezone(@Nullable String timezone) {
            this.timezone = Input.ofNullable(timezone);
            return this;
        }

        public Builder setUsername(@Nullable Input<String> username) {
            this.username = username;
            return this;
        }

        public Builder setUsername(@Nullable String username) {
            this.username = Input.ofNullable(username);
            return this;
        }

        public Builder setVpcSecurityGroupIds(@Nullable Input<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        public Builder setVpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Input.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public InstanceState build() {
            return new InstanceState(address, allocatedStorage, allowMajorVersionUpgrade, applyImmediately, arn, autoMinorVersionUpgrade, availabilityZone, backupRetentionPeriod, backupWindow, caCertIdentifier, characterSetName, copyTagsToSnapshot, customerOwnedIpEnabled, dbSubnetGroupName, deleteAutomatedBackups, deletionProtection, domain, domainIamRoleName, enabledCloudwatchLogsExports, endpoint, engine, engineVersion, engineVersionActual, finalSnapshotIdentifier, hostedZoneId, iamDatabaseAuthenticationEnabled, identifier, identifierPrefix, instanceClass, iops, kmsKeyId, latestRestorableTime, licenseModel, maintenanceWindow, maxAllocatedStorage, monitoringInterval, monitoringRoleArn, multiAz, name, ncharCharacterSetName, optionGroupName, parameterGroupName, password, performanceInsightsEnabled, performanceInsightsKmsKeyId, performanceInsightsRetentionPeriod, port, publiclyAccessible, replicaMode, replicas, replicateSourceDb, resourceId, restoreToPointInTime, s3Import, securityGroupNames, skipFinalSnapshot, snapshotIdentifier, status, storageEncrypted, storageType, tags, tagsAll, timezone, username, vpcSecurityGroupIds);
        }
    }
}
