// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.storagegateway.inputs;

import io.pulumi.aws.storagegateway.inputs.NfsFileShareCacheAttributesGetArgs;
import io.pulumi.aws.storagegateway.inputs.NfsFileShareNfsFileShareDefaultsGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NfsFileShareState extends io.pulumi.resources.ResourceArgs {

    public static final NfsFileShareState Empty = new NfsFileShareState();

    /**
     * Amazon Resource Name (ARN) of the NFS File Share.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The Amazon Resource Name (ARN) of the storage used for audit logs.
     * 
     */
    @Import(name="auditDestinationArn")
      private final @Nullable Output<String> auditDestinationArn;

    public Output<String> auditDestinationArn() {
        return this.auditDestinationArn == null ? Codegen.empty() : this.auditDestinationArn;
    }

    /**
     * Refresh cache information. see Cache Attributes for more details.
     * 
     */
    @Import(name="cacheAttributes")
      private final @Nullable Output<NfsFileShareCacheAttributesGetArgs> cacheAttributes;

    public Output<NfsFileShareCacheAttributesGetArgs> cacheAttributes() {
        return this.cacheAttributes == null ? Codegen.empty() : this.cacheAttributes;
    }

    /**
     * The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks. Set to `["0.0.0.0/0"]` to not limit access. Minimum 1 item. Maximum 100 items.
     * 
     */
    @Import(name="clientLists")
      private final @Nullable Output<List<String>> clientLists;

    public Output<List<String>> clientLists() {
        return this.clientLists == null ? Codegen.empty() : this.clientLists;
    }

    /**
     * The default [storage class](https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_CreateNFSFileShare.html#StorageGateway-CreateNFSFileShare-request-DefaultStorageClass) for objects put into an Amazon S3 bucket by the file gateway. Defaults to `S3_STANDARD`.
     * 
     */
    @Import(name="defaultStorageClass")
      private final @Nullable Output<String> defaultStorageClass;

    public Output<String> defaultStorageClass() {
        return this.defaultStorageClass == null ? Codegen.empty() : this.defaultStorageClass;
    }

    /**
     * The name of the file share. Must be set if an S3 prefix name is set in `location_arn`.
     * 
     */
    @Import(name="fileShareName")
      private final @Nullable Output<String> fileShareName;

    public Output<String> fileShareName() {
        return this.fileShareName == null ? Codegen.empty() : this.fileShareName;
    }

    /**
     * ID of the NFS File Share.
     * 
     */
    @Import(name="fileshareId")
      private final @Nullable Output<String> fileshareId;

    public Output<String> fileshareId() {
        return this.fileshareId == null ? Codegen.empty() : this.fileshareId;
    }

    /**
     * Amazon Resource Name (ARN) of the file gateway.
     * 
     */
    @Import(name="gatewayArn")
      private final @Nullable Output<String> gatewayArn;

    public Output<String> gatewayArn() {
        return this.gatewayArn == null ? Codegen.empty() : this.gatewayArn;
    }

    /**
     * Boolean value that enables guessing of the MIME type for uploaded objects based on file extensions. Defaults to `true`.
     * 
     */
    @Import(name="guessMimeTypeEnabled")
      private final @Nullable Output<Boolean> guessMimeTypeEnabled;

    public Output<Boolean> guessMimeTypeEnabled() {
        return this.guessMimeTypeEnabled == null ? Codegen.empty() : this.guessMimeTypeEnabled;
    }

    /**
     * Boolean value if `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3. Defaults to `false`.
     * 
     */
    @Import(name="kmsEncrypted")
      private final @Nullable Output<Boolean> kmsEncrypted;

    public Output<Boolean> kmsEncrypted() {
        return this.kmsEncrypted == null ? Codegen.empty() : this.kmsEncrypted;
    }

    /**
     * Amazon Resource Name (ARN) for KMS key used for Amazon S3 server side encryption. This value can only be set when `kms_encrypted` is true.
     * 
     */
    @Import(name="kmsKeyArn")
      private final @Nullable Output<String> kmsKeyArn;

    public Output<String> kmsKeyArn() {
        return this.kmsKeyArn == null ? Codegen.empty() : this.kmsKeyArn;
    }

    /**
     * The ARN of the backed storage used for storing file data.
     * 
     */
    @Import(name="locationArn")
      private final @Nullable Output<String> locationArn;

    public Output<String> locationArn() {
        return this.locationArn == null ? Codegen.empty() : this.locationArn;
    }

    /**
     * Nested argument with file share default values. More information below. see NFS File Share Defaults for more details.
     * 
     */
    @Import(name="nfsFileShareDefaults")
      private final @Nullable Output<NfsFileShareNfsFileShareDefaultsGetArgs> nfsFileShareDefaults;

    public Output<NfsFileShareNfsFileShareDefaultsGetArgs> nfsFileShareDefaults() {
        return this.nfsFileShareDefaults == null ? Codegen.empty() : this.nfsFileShareDefaults;
    }

    /**
     * The notification policy of the file share. For more information see the [AWS Documentation](https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_CreateNFSFileShare.html#StorageGateway-CreateNFSFileShare-request-NotificationPolicy). Default value is `{}`.
     * 
     */
    @Import(name="notificationPolicy")
      private final @Nullable Output<String> notificationPolicy;

    public Output<String> notificationPolicy() {
        return this.notificationPolicy == null ? Codegen.empty() : this.notificationPolicy;
    }

    /**
     * Access Control List permission for S3 bucket objects. Defaults to `private`.
     * 
     */
    @Import(name="objectAcl")
      private final @Nullable Output<String> objectAcl;

    public Output<String> objectAcl() {
        return this.objectAcl == null ? Codegen.empty() : this.objectAcl;
    }

    /**
     * File share path used by the NFS client to identify the mount point.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> path() {
        return this.path == null ? Codegen.empty() : this.path;
    }

    /**
     * Boolean to indicate write status of file share. File share does not accept writes if `true`. Defaults to `false`.
     * 
     */
    @Import(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> readOnly() {
        return this.readOnly == null ? Codegen.empty() : this.readOnly;
    }

    /**
     * Boolean who pays the cost of the request and the data download from the Amazon S3 bucket. Set this value to `true` if you want the requester to pay instead of the bucket owner. Defaults to `false`.
     * 
     */
    @Import(name="requesterPays")
      private final @Nullable Output<Boolean> requesterPays;

    public Output<Boolean> requesterPays() {
        return this.requesterPays == null ? Codegen.empty() : this.requesterPays;
    }

    /**
     * The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage.
     * 
     */
    @Import(name="roleArn")
      private final @Nullable Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn == null ? Codegen.empty() : this.roleArn;
    }

    /**
     * Maps a user to anonymous user. Defaults to `RootSquash`. Valid values: `RootSquash` (only root is mapped to anonymous user), `NoSquash` (no one is mapped to anonymous user), `AllSquash` (everyone is mapped to anonymous user)
     * 
     */
    @Import(name="squash")
      private final @Nullable Output<String> squash;

    public Output<String> squash() {
        return this.squash == null ? Codegen.empty() : this.squash;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    public NfsFileShareState(
        @Nullable Output<String> arn,
        @Nullable Output<String> auditDestinationArn,
        @Nullable Output<NfsFileShareCacheAttributesGetArgs> cacheAttributes,
        @Nullable Output<List<String>> clientLists,
        @Nullable Output<String> defaultStorageClass,
        @Nullable Output<String> fileShareName,
        @Nullable Output<String> fileshareId,
        @Nullable Output<String> gatewayArn,
        @Nullable Output<Boolean> guessMimeTypeEnabled,
        @Nullable Output<Boolean> kmsEncrypted,
        @Nullable Output<String> kmsKeyArn,
        @Nullable Output<String> locationArn,
        @Nullable Output<NfsFileShareNfsFileShareDefaultsGetArgs> nfsFileShareDefaults,
        @Nullable Output<String> notificationPolicy,
        @Nullable Output<String> objectAcl,
        @Nullable Output<String> path,
        @Nullable Output<Boolean> readOnly,
        @Nullable Output<Boolean> requesterPays,
        @Nullable Output<String> roleArn,
        @Nullable Output<String> squash,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.auditDestinationArn = auditDestinationArn;
        this.cacheAttributes = cacheAttributes;
        this.clientLists = clientLists;
        this.defaultStorageClass = defaultStorageClass;
        this.fileShareName = fileShareName;
        this.fileshareId = fileshareId;
        this.gatewayArn = gatewayArn;
        this.guessMimeTypeEnabled = guessMimeTypeEnabled;
        this.kmsEncrypted = kmsEncrypted;
        this.kmsKeyArn = kmsKeyArn;
        this.locationArn = locationArn;
        this.nfsFileShareDefaults = nfsFileShareDefaults;
        this.notificationPolicy = notificationPolicy;
        this.objectAcl = objectAcl;
        this.path = path;
        this.readOnly = readOnly;
        this.requesterPays = requesterPays;
        this.roleArn = roleArn;
        this.squash = squash;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private NfsFileShareState() {
        this.arn = Codegen.empty();
        this.auditDestinationArn = Codegen.empty();
        this.cacheAttributes = Codegen.empty();
        this.clientLists = Codegen.empty();
        this.defaultStorageClass = Codegen.empty();
        this.fileShareName = Codegen.empty();
        this.fileshareId = Codegen.empty();
        this.gatewayArn = Codegen.empty();
        this.guessMimeTypeEnabled = Codegen.empty();
        this.kmsEncrypted = Codegen.empty();
        this.kmsKeyArn = Codegen.empty();
        this.locationArn = Codegen.empty();
        this.nfsFileShareDefaults = Codegen.empty();
        this.notificationPolicy = Codegen.empty();
        this.objectAcl = Codegen.empty();
        this.path = Codegen.empty();
        this.readOnly = Codegen.empty();
        this.requesterPays = Codegen.empty();
        this.roleArn = Codegen.empty();
        this.squash = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NfsFileShareState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> auditDestinationArn;
        private @Nullable Output<NfsFileShareCacheAttributesGetArgs> cacheAttributes;
        private @Nullable Output<List<String>> clientLists;
        private @Nullable Output<String> defaultStorageClass;
        private @Nullable Output<String> fileShareName;
        private @Nullable Output<String> fileshareId;
        private @Nullable Output<String> gatewayArn;
        private @Nullable Output<Boolean> guessMimeTypeEnabled;
        private @Nullable Output<Boolean> kmsEncrypted;
        private @Nullable Output<String> kmsKeyArn;
        private @Nullable Output<String> locationArn;
        private @Nullable Output<NfsFileShareNfsFileShareDefaultsGetArgs> nfsFileShareDefaults;
        private @Nullable Output<String> notificationPolicy;
        private @Nullable Output<String> objectAcl;
        private @Nullable Output<String> path;
        private @Nullable Output<Boolean> readOnly;
        private @Nullable Output<Boolean> requesterPays;
        private @Nullable Output<String> roleArn;
        private @Nullable Output<String> squash;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(NfsFileShareState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.auditDestinationArn = defaults.auditDestinationArn;
    	      this.cacheAttributes = defaults.cacheAttributes;
    	      this.clientLists = defaults.clientLists;
    	      this.defaultStorageClass = defaults.defaultStorageClass;
    	      this.fileShareName = defaults.fileShareName;
    	      this.fileshareId = defaults.fileshareId;
    	      this.gatewayArn = defaults.gatewayArn;
    	      this.guessMimeTypeEnabled = defaults.guessMimeTypeEnabled;
    	      this.kmsEncrypted = defaults.kmsEncrypted;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.locationArn = defaults.locationArn;
    	      this.nfsFileShareDefaults = defaults.nfsFileShareDefaults;
    	      this.notificationPolicy = defaults.notificationPolicy;
    	      this.objectAcl = defaults.objectAcl;
    	      this.path = defaults.path;
    	      this.readOnly = defaults.readOnly;
    	      this.requesterPays = defaults.requesterPays;
    	      this.roleArn = defaults.roleArn;
    	      this.squash = defaults.squash;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder auditDestinationArn(@Nullable Output<String> auditDestinationArn) {
            this.auditDestinationArn = auditDestinationArn;
            return this;
        }
        public Builder auditDestinationArn(@Nullable String auditDestinationArn) {
            this.auditDestinationArn = Codegen.ofNullable(auditDestinationArn);
            return this;
        }
        public Builder cacheAttributes(@Nullable Output<NfsFileShareCacheAttributesGetArgs> cacheAttributes) {
            this.cacheAttributes = cacheAttributes;
            return this;
        }
        public Builder cacheAttributes(@Nullable NfsFileShareCacheAttributesGetArgs cacheAttributes) {
            this.cacheAttributes = Codegen.ofNullable(cacheAttributes);
            return this;
        }
        public Builder clientLists(@Nullable Output<List<String>> clientLists) {
            this.clientLists = clientLists;
            return this;
        }
        public Builder clientLists(@Nullable List<String> clientLists) {
            this.clientLists = Codegen.ofNullable(clientLists);
            return this;
        }
        public Builder clientLists(String... clientLists) {
            return clientLists(List.of(clientLists));
        }
        public Builder defaultStorageClass(@Nullable Output<String> defaultStorageClass) {
            this.defaultStorageClass = defaultStorageClass;
            return this;
        }
        public Builder defaultStorageClass(@Nullable String defaultStorageClass) {
            this.defaultStorageClass = Codegen.ofNullable(defaultStorageClass);
            return this;
        }
        public Builder fileShareName(@Nullable Output<String> fileShareName) {
            this.fileShareName = fileShareName;
            return this;
        }
        public Builder fileShareName(@Nullable String fileShareName) {
            this.fileShareName = Codegen.ofNullable(fileShareName);
            return this;
        }
        public Builder fileshareId(@Nullable Output<String> fileshareId) {
            this.fileshareId = fileshareId;
            return this;
        }
        public Builder fileshareId(@Nullable String fileshareId) {
            this.fileshareId = Codegen.ofNullable(fileshareId);
            return this;
        }
        public Builder gatewayArn(@Nullable Output<String> gatewayArn) {
            this.gatewayArn = gatewayArn;
            return this;
        }
        public Builder gatewayArn(@Nullable String gatewayArn) {
            this.gatewayArn = Codegen.ofNullable(gatewayArn);
            return this;
        }
        public Builder guessMimeTypeEnabled(@Nullable Output<Boolean> guessMimeTypeEnabled) {
            this.guessMimeTypeEnabled = guessMimeTypeEnabled;
            return this;
        }
        public Builder guessMimeTypeEnabled(@Nullable Boolean guessMimeTypeEnabled) {
            this.guessMimeTypeEnabled = Codegen.ofNullable(guessMimeTypeEnabled);
            return this;
        }
        public Builder kmsEncrypted(@Nullable Output<Boolean> kmsEncrypted) {
            this.kmsEncrypted = kmsEncrypted;
            return this;
        }
        public Builder kmsEncrypted(@Nullable Boolean kmsEncrypted) {
            this.kmsEncrypted = Codegen.ofNullable(kmsEncrypted);
            return this;
        }
        public Builder kmsKeyArn(@Nullable Output<String> kmsKeyArn) {
            this.kmsKeyArn = kmsKeyArn;
            return this;
        }
        public Builder kmsKeyArn(@Nullable String kmsKeyArn) {
            this.kmsKeyArn = Codegen.ofNullable(kmsKeyArn);
            return this;
        }
        public Builder locationArn(@Nullable Output<String> locationArn) {
            this.locationArn = locationArn;
            return this;
        }
        public Builder locationArn(@Nullable String locationArn) {
            this.locationArn = Codegen.ofNullable(locationArn);
            return this;
        }
        public Builder nfsFileShareDefaults(@Nullable Output<NfsFileShareNfsFileShareDefaultsGetArgs> nfsFileShareDefaults) {
            this.nfsFileShareDefaults = nfsFileShareDefaults;
            return this;
        }
        public Builder nfsFileShareDefaults(@Nullable NfsFileShareNfsFileShareDefaultsGetArgs nfsFileShareDefaults) {
            this.nfsFileShareDefaults = Codegen.ofNullable(nfsFileShareDefaults);
            return this;
        }
        public Builder notificationPolicy(@Nullable Output<String> notificationPolicy) {
            this.notificationPolicy = notificationPolicy;
            return this;
        }
        public Builder notificationPolicy(@Nullable String notificationPolicy) {
            this.notificationPolicy = Codegen.ofNullable(notificationPolicy);
            return this;
        }
        public Builder objectAcl(@Nullable Output<String> objectAcl) {
            this.objectAcl = objectAcl;
            return this;
        }
        public Builder objectAcl(@Nullable String objectAcl) {
            this.objectAcl = Codegen.ofNullable(objectAcl);
            return this;
        }
        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = Codegen.ofNullable(path);
            return this;
        }
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Codegen.ofNullable(readOnly);
            return this;
        }
        public Builder requesterPays(@Nullable Output<Boolean> requesterPays) {
            this.requesterPays = requesterPays;
            return this;
        }
        public Builder requesterPays(@Nullable Boolean requesterPays) {
            this.requesterPays = Codegen.ofNullable(requesterPays);
            return this;
        }
        public Builder roleArn(@Nullable Output<String> roleArn) {
            this.roleArn = roleArn;
            return this;
        }
        public Builder roleArn(@Nullable String roleArn) {
            this.roleArn = Codegen.ofNullable(roleArn);
            return this;
        }
        public Builder squash(@Nullable Output<String> squash) {
            this.squash = squash;
            return this;
        }
        public Builder squash(@Nullable String squash) {
            this.squash = Codegen.ofNullable(squash);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }        public NfsFileShareState build() {
            return new NfsFileShareState(arn, auditDestinationArn, cacheAttributes, clientLists, defaultStorageClass, fileShareName, fileshareId, gatewayArn, guessMimeTypeEnabled, kmsEncrypted, kmsKeyArn, locationArn, nfsFileShareDefaults, notificationPolicy, objectAcl, path, readOnly, requesterPays, roleArn, squash, tags, tagsAll);
        }
    }
}
