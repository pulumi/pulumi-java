// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudfront.inputs;

import io.pulumi.aws.cloudfront.inputs.DistributionDefaultCacheBehaviorForwardedValuesGetArgs;
import io.pulumi.aws.cloudfront.inputs.DistributionDefaultCacheBehaviorFunctionAssociationGetArgs;
import io.pulumi.aws.cloudfront.inputs.DistributionDefaultCacheBehaviorLambdaFunctionAssociationGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DistributionDefaultCacheBehaviorGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final DistributionDefaultCacheBehaviorGetArgs Empty = new DistributionDefaultCacheBehaviorGetArgs();

    /**
     * Controls which HTTP methods CloudFront
     * processes and forwards to your Amazon S3 bucket or your custom origin.
     * 
     */
    @InputImport(name="allowedMethods", required=true)
      private final Input<List<String>> allowedMethods;

    public Input<List<String>> getAllowedMethods() {
        return this.allowedMethods;
    }

    /**
     * The unique identifier of the cache policy that
     * is attached to the cache behavior.
     * 
     */
    @InputImport(name="cachePolicyId")
      private final @Nullable Input<String> cachePolicyId;

    public Input<String> getCachePolicyId() {
        return this.cachePolicyId == null ? Input.empty() : this.cachePolicyId;
    }

    /**
     * Controls whether CloudFront caches the
     * response to requests using the specified HTTP methods.
     * 
     */
    @InputImport(name="cachedMethods", required=true)
      private final Input<List<String>> cachedMethods;

    public Input<List<String>> getCachedMethods() {
        return this.cachedMethods;
    }

    /**
     * Whether you want CloudFront to automatically
     * compress content for web requests that include `Accept-Encoding: gzip` in
     * the request header (default: `false`).
     * 
     */
    @InputImport(name="compress")
      private final @Nullable Input<Boolean> compress;

    public Input<Boolean> getCompress() {
        return this.compress == null ? Input.empty() : this.compress;
    }

    /**
     * The default amount of time (in seconds) that an
     * object is in a CloudFront cache before CloudFront forwards another request
     * in the absence of an `Cache-Control max-age` or `Expires` header.
     * 
     */
    @InputImport(name="defaultTtl")
      private final @Nullable Input<Integer> defaultTtl;

    public Input<Integer> getDefaultTtl() {
        return this.defaultTtl == null ? Input.empty() : this.defaultTtl;
    }

    /**
     * Field level encryption configuration ID
     * 
     */
    @InputImport(name="fieldLevelEncryptionId")
      private final @Nullable Input<String> fieldLevelEncryptionId;

    public Input<String> getFieldLevelEncryptionId() {
        return this.fieldLevelEncryptionId == null ? Input.empty() : this.fieldLevelEncryptionId;
    }

    /**
     * The forwarded values configuration that specifies how CloudFront
     * handles query strings, cookies and headers (maximum one).
     * 
     */
    @InputImport(name="forwardedValues")
      private final @Nullable Input<DistributionDefaultCacheBehaviorForwardedValuesGetArgs> forwardedValues;

    public Input<DistributionDefaultCacheBehaviorForwardedValuesGetArgs> getForwardedValues() {
        return this.forwardedValues == null ? Input.empty() : this.forwardedValues;
    }

    /**
     * A config block that triggers a cloudfront
     * function with specific actions (maximum 2).
     * 
     */
    @InputImport(name="functionAssociations")
      private final @Nullable Input<List<DistributionDefaultCacheBehaviorFunctionAssociationGetArgs>> functionAssociations;

    public Input<List<DistributionDefaultCacheBehaviorFunctionAssociationGetArgs>> getFunctionAssociations() {
        return this.functionAssociations == null ? Input.empty() : this.functionAssociations;
    }

    /**
     * A config block that triggers a lambda
     * function with specific actions (maximum 4).
     * 
     */
    @InputImport(name="lambdaFunctionAssociations")
      private final @Nullable Input<List<DistributionDefaultCacheBehaviorLambdaFunctionAssociationGetArgs>> lambdaFunctionAssociations;

    public Input<List<DistributionDefaultCacheBehaviorLambdaFunctionAssociationGetArgs>> getLambdaFunctionAssociations() {
        return this.lambdaFunctionAssociations == null ? Input.empty() : this.lambdaFunctionAssociations;
    }

    /**
     * The maximum amount of time (in seconds) that an
     * object is in a CloudFront cache before CloudFront forwards another request
     * to your origin to determine whether the object has been updated. Only
     * effective in the presence of `Cache-Control max-age`, `Cache-Control
     * s-maxage`, and `Expires` headers.
     * 
     */
    @InputImport(name="maxTtl")
      private final @Nullable Input<Integer> maxTtl;

    public Input<Integer> getMaxTtl() {
        return this.maxTtl == null ? Input.empty() : this.maxTtl;
    }

    /**
     * The minimum amount of time that you want objects to
     * stay in CloudFront caches before CloudFront queries your origin to see
     * whether the object has been updated. Defaults to 0 seconds.
     * 
     */
    @InputImport(name="minTtl")
      private final @Nullable Input<Integer> minTtl;

    public Input<Integer> getMinTtl() {
        return this.minTtl == null ? Input.empty() : this.minTtl;
    }

    /**
     * The unique identifier of the origin request policy
     * that is attached to the behavior.
     * 
     */
    @InputImport(name="originRequestPolicyId")
      private final @Nullable Input<String> originRequestPolicyId;

    public Input<String> getOriginRequestPolicyId() {
        return this.originRequestPolicyId == null ? Input.empty() : this.originRequestPolicyId;
    }

    /**
     * The ARN of the real-time log configuration
     * that is attached to this cache behavior.
     * 
     */
    @InputImport(name="realtimeLogConfigArn")
      private final @Nullable Input<String> realtimeLogConfigArn;

    public Input<String> getRealtimeLogConfigArn() {
        return this.realtimeLogConfigArn == null ? Input.empty() : this.realtimeLogConfigArn;
    }

    /**
     * The identifier for a response headers policy.
     * 
     */
    @InputImport(name="responseHeadersPolicyId")
      private final @Nullable Input<String> responseHeadersPolicyId;

    public Input<String> getResponseHeadersPolicyId() {
        return this.responseHeadersPolicyId == null ? Input.empty() : this.responseHeadersPolicyId;
    }

    /**
     * Indicates whether you want to distribute
     * media files in Microsoft Smooth Streaming format using the origin that is
     * associated with this cache behavior.
     * 
     */
    @InputImport(name="smoothStreaming")
      private final @Nullable Input<Boolean> smoothStreaming;

    public Input<Boolean> getSmoothStreaming() {
        return this.smoothStreaming == null ? Input.empty() : this.smoothStreaming;
    }

    /**
     * The value of ID for the origin that you want
     * CloudFront to route requests to when a request matches the path pattern
     * either for a cache behavior or for the default cache behavior.
     * 
     */
    @InputImport(name="targetOriginId", required=true)
      private final Input<String> targetOriginId;

    public Input<String> getTargetOriginId() {
        return this.targetOriginId;
    }

    /**
     * A list of key group IDs that CloudFront can use to validate signed URLs or signed cookies.
     * See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
     * 
     */
    @InputImport(name="trustedKeyGroups")
      private final @Nullable Input<List<String>> trustedKeyGroups;

    public Input<List<String>> getTrustedKeyGroups() {
        return this.trustedKeyGroups == null ? Input.empty() : this.trustedKeyGroups;
    }

    /**
     * List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content.
     * See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
     * 
     */
    @InputImport(name="trustedSigners")
      private final @Nullable Input<List<String>> trustedSigners;

    public Input<List<String>> getTrustedSigners() {
        return this.trustedSigners == null ? Input.empty() : this.trustedSigners;
    }

    /**
     * Use this element to specify the
     * protocol that users can use to access the files in the origin specified by
     * TargetOriginId when a request matches the path pattern in PathPattern. One
     * of `allow-all`, `https-only`, or `redirect-to-https`.
     * 
     */
    @InputImport(name="viewerProtocolPolicy", required=true)
      private final Input<String> viewerProtocolPolicy;

    public Input<String> getViewerProtocolPolicy() {
        return this.viewerProtocolPolicy;
    }

    public DistributionDefaultCacheBehaviorGetArgs(
        Input<List<String>> allowedMethods,
        @Nullable Input<String> cachePolicyId,
        Input<List<String>> cachedMethods,
        @Nullable Input<Boolean> compress,
        @Nullable Input<Integer> defaultTtl,
        @Nullable Input<String> fieldLevelEncryptionId,
        @Nullable Input<DistributionDefaultCacheBehaviorForwardedValuesGetArgs> forwardedValues,
        @Nullable Input<List<DistributionDefaultCacheBehaviorFunctionAssociationGetArgs>> functionAssociations,
        @Nullable Input<List<DistributionDefaultCacheBehaviorLambdaFunctionAssociationGetArgs>> lambdaFunctionAssociations,
        @Nullable Input<Integer> maxTtl,
        @Nullable Input<Integer> minTtl,
        @Nullable Input<String> originRequestPolicyId,
        @Nullable Input<String> realtimeLogConfigArn,
        @Nullable Input<String> responseHeadersPolicyId,
        @Nullable Input<Boolean> smoothStreaming,
        Input<String> targetOriginId,
        @Nullable Input<List<String>> trustedKeyGroups,
        @Nullable Input<List<String>> trustedSigners,
        Input<String> viewerProtocolPolicy) {
        this.allowedMethods = Objects.requireNonNull(allowedMethods, "expected parameter 'allowedMethods' to be non-null");
        this.cachePolicyId = cachePolicyId;
        this.cachedMethods = Objects.requireNonNull(cachedMethods, "expected parameter 'cachedMethods' to be non-null");
        this.compress = compress;
        this.defaultTtl = defaultTtl;
        this.fieldLevelEncryptionId = fieldLevelEncryptionId;
        this.forwardedValues = forwardedValues;
        this.functionAssociations = functionAssociations;
        this.lambdaFunctionAssociations = lambdaFunctionAssociations;
        this.maxTtl = maxTtl;
        this.minTtl = minTtl;
        this.originRequestPolicyId = originRequestPolicyId;
        this.realtimeLogConfigArn = realtimeLogConfigArn;
        this.responseHeadersPolicyId = responseHeadersPolicyId;
        this.smoothStreaming = smoothStreaming;
        this.targetOriginId = Objects.requireNonNull(targetOriginId, "expected parameter 'targetOriginId' to be non-null");
        this.trustedKeyGroups = trustedKeyGroups;
        this.trustedSigners = trustedSigners;
        this.viewerProtocolPolicy = Objects.requireNonNull(viewerProtocolPolicy, "expected parameter 'viewerProtocolPolicy' to be non-null");
    }

    private DistributionDefaultCacheBehaviorGetArgs() {
        this.allowedMethods = Input.empty();
        this.cachePolicyId = Input.empty();
        this.cachedMethods = Input.empty();
        this.compress = Input.empty();
        this.defaultTtl = Input.empty();
        this.fieldLevelEncryptionId = Input.empty();
        this.forwardedValues = Input.empty();
        this.functionAssociations = Input.empty();
        this.lambdaFunctionAssociations = Input.empty();
        this.maxTtl = Input.empty();
        this.minTtl = Input.empty();
        this.originRequestPolicyId = Input.empty();
        this.realtimeLogConfigArn = Input.empty();
        this.responseHeadersPolicyId = Input.empty();
        this.smoothStreaming = Input.empty();
        this.targetOriginId = Input.empty();
        this.trustedKeyGroups = Input.empty();
        this.trustedSigners = Input.empty();
        this.viewerProtocolPolicy = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DistributionDefaultCacheBehaviorGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> allowedMethods;
        private @Nullable Input<String> cachePolicyId;
        private Input<List<String>> cachedMethods;
        private @Nullable Input<Boolean> compress;
        private @Nullable Input<Integer> defaultTtl;
        private @Nullable Input<String> fieldLevelEncryptionId;
        private @Nullable Input<DistributionDefaultCacheBehaviorForwardedValuesGetArgs> forwardedValues;
        private @Nullable Input<List<DistributionDefaultCacheBehaviorFunctionAssociationGetArgs>> functionAssociations;
        private @Nullable Input<List<DistributionDefaultCacheBehaviorLambdaFunctionAssociationGetArgs>> lambdaFunctionAssociations;
        private @Nullable Input<Integer> maxTtl;
        private @Nullable Input<Integer> minTtl;
        private @Nullable Input<String> originRequestPolicyId;
        private @Nullable Input<String> realtimeLogConfigArn;
        private @Nullable Input<String> responseHeadersPolicyId;
        private @Nullable Input<Boolean> smoothStreaming;
        private Input<String> targetOriginId;
        private @Nullable Input<List<String>> trustedKeyGroups;
        private @Nullable Input<List<String>> trustedSigners;
        private Input<String> viewerProtocolPolicy;

        public Builder() {
    	      // Empty
        }

        public Builder(DistributionDefaultCacheBehaviorGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedMethods = defaults.allowedMethods;
    	      this.cachePolicyId = defaults.cachePolicyId;
    	      this.cachedMethods = defaults.cachedMethods;
    	      this.compress = defaults.compress;
    	      this.defaultTtl = defaults.defaultTtl;
    	      this.fieldLevelEncryptionId = defaults.fieldLevelEncryptionId;
    	      this.forwardedValues = defaults.forwardedValues;
    	      this.functionAssociations = defaults.functionAssociations;
    	      this.lambdaFunctionAssociations = defaults.lambdaFunctionAssociations;
    	      this.maxTtl = defaults.maxTtl;
    	      this.minTtl = defaults.minTtl;
    	      this.originRequestPolicyId = defaults.originRequestPolicyId;
    	      this.realtimeLogConfigArn = defaults.realtimeLogConfigArn;
    	      this.responseHeadersPolicyId = defaults.responseHeadersPolicyId;
    	      this.smoothStreaming = defaults.smoothStreaming;
    	      this.targetOriginId = defaults.targetOriginId;
    	      this.trustedKeyGroups = defaults.trustedKeyGroups;
    	      this.trustedSigners = defaults.trustedSigners;
    	      this.viewerProtocolPolicy = defaults.viewerProtocolPolicy;
        }

        public Builder setAllowedMethods(Input<List<String>> allowedMethods) {
            this.allowedMethods = Objects.requireNonNull(allowedMethods);
            return this;
        }

        public Builder setAllowedMethods(List<String> allowedMethods) {
            this.allowedMethods = Input.of(Objects.requireNonNull(allowedMethods));
            return this;
        }

        public Builder setCachePolicyId(@Nullable Input<String> cachePolicyId) {
            this.cachePolicyId = cachePolicyId;
            return this;
        }

        public Builder setCachePolicyId(@Nullable String cachePolicyId) {
            this.cachePolicyId = Input.ofNullable(cachePolicyId);
            return this;
        }

        public Builder setCachedMethods(Input<List<String>> cachedMethods) {
            this.cachedMethods = Objects.requireNonNull(cachedMethods);
            return this;
        }

        public Builder setCachedMethods(List<String> cachedMethods) {
            this.cachedMethods = Input.of(Objects.requireNonNull(cachedMethods));
            return this;
        }

        public Builder setCompress(@Nullable Input<Boolean> compress) {
            this.compress = compress;
            return this;
        }

        public Builder setCompress(@Nullable Boolean compress) {
            this.compress = Input.ofNullable(compress);
            return this;
        }

        public Builder setDefaultTtl(@Nullable Input<Integer> defaultTtl) {
            this.defaultTtl = defaultTtl;
            return this;
        }

        public Builder setDefaultTtl(@Nullable Integer defaultTtl) {
            this.defaultTtl = Input.ofNullable(defaultTtl);
            return this;
        }

        public Builder setFieldLevelEncryptionId(@Nullable Input<String> fieldLevelEncryptionId) {
            this.fieldLevelEncryptionId = fieldLevelEncryptionId;
            return this;
        }

        public Builder setFieldLevelEncryptionId(@Nullable String fieldLevelEncryptionId) {
            this.fieldLevelEncryptionId = Input.ofNullable(fieldLevelEncryptionId);
            return this;
        }

        public Builder setForwardedValues(@Nullable Input<DistributionDefaultCacheBehaviorForwardedValuesGetArgs> forwardedValues) {
            this.forwardedValues = forwardedValues;
            return this;
        }

        public Builder setForwardedValues(@Nullable DistributionDefaultCacheBehaviorForwardedValuesGetArgs forwardedValues) {
            this.forwardedValues = Input.ofNullable(forwardedValues);
            return this;
        }

        public Builder setFunctionAssociations(@Nullable Input<List<DistributionDefaultCacheBehaviorFunctionAssociationGetArgs>> functionAssociations) {
            this.functionAssociations = functionAssociations;
            return this;
        }

        public Builder setFunctionAssociations(@Nullable List<DistributionDefaultCacheBehaviorFunctionAssociationGetArgs> functionAssociations) {
            this.functionAssociations = Input.ofNullable(functionAssociations);
            return this;
        }

        public Builder setLambdaFunctionAssociations(@Nullable Input<List<DistributionDefaultCacheBehaviorLambdaFunctionAssociationGetArgs>> lambdaFunctionAssociations) {
            this.lambdaFunctionAssociations = lambdaFunctionAssociations;
            return this;
        }

        public Builder setLambdaFunctionAssociations(@Nullable List<DistributionDefaultCacheBehaviorLambdaFunctionAssociationGetArgs> lambdaFunctionAssociations) {
            this.lambdaFunctionAssociations = Input.ofNullable(lambdaFunctionAssociations);
            return this;
        }

        public Builder setMaxTtl(@Nullable Input<Integer> maxTtl) {
            this.maxTtl = maxTtl;
            return this;
        }

        public Builder setMaxTtl(@Nullable Integer maxTtl) {
            this.maxTtl = Input.ofNullable(maxTtl);
            return this;
        }

        public Builder setMinTtl(@Nullable Input<Integer> minTtl) {
            this.minTtl = minTtl;
            return this;
        }

        public Builder setMinTtl(@Nullable Integer minTtl) {
            this.minTtl = Input.ofNullable(minTtl);
            return this;
        }

        public Builder setOriginRequestPolicyId(@Nullable Input<String> originRequestPolicyId) {
            this.originRequestPolicyId = originRequestPolicyId;
            return this;
        }

        public Builder setOriginRequestPolicyId(@Nullable String originRequestPolicyId) {
            this.originRequestPolicyId = Input.ofNullable(originRequestPolicyId);
            return this;
        }

        public Builder setRealtimeLogConfigArn(@Nullable Input<String> realtimeLogConfigArn) {
            this.realtimeLogConfigArn = realtimeLogConfigArn;
            return this;
        }

        public Builder setRealtimeLogConfigArn(@Nullable String realtimeLogConfigArn) {
            this.realtimeLogConfigArn = Input.ofNullable(realtimeLogConfigArn);
            return this;
        }

        public Builder setResponseHeadersPolicyId(@Nullable Input<String> responseHeadersPolicyId) {
            this.responseHeadersPolicyId = responseHeadersPolicyId;
            return this;
        }

        public Builder setResponseHeadersPolicyId(@Nullable String responseHeadersPolicyId) {
            this.responseHeadersPolicyId = Input.ofNullable(responseHeadersPolicyId);
            return this;
        }

        public Builder setSmoothStreaming(@Nullable Input<Boolean> smoothStreaming) {
            this.smoothStreaming = smoothStreaming;
            return this;
        }

        public Builder setSmoothStreaming(@Nullable Boolean smoothStreaming) {
            this.smoothStreaming = Input.ofNullable(smoothStreaming);
            return this;
        }

        public Builder setTargetOriginId(Input<String> targetOriginId) {
            this.targetOriginId = Objects.requireNonNull(targetOriginId);
            return this;
        }

        public Builder setTargetOriginId(String targetOriginId) {
            this.targetOriginId = Input.of(Objects.requireNonNull(targetOriginId));
            return this;
        }

        public Builder setTrustedKeyGroups(@Nullable Input<List<String>> trustedKeyGroups) {
            this.trustedKeyGroups = trustedKeyGroups;
            return this;
        }

        public Builder setTrustedKeyGroups(@Nullable List<String> trustedKeyGroups) {
            this.trustedKeyGroups = Input.ofNullable(trustedKeyGroups);
            return this;
        }

        public Builder setTrustedSigners(@Nullable Input<List<String>> trustedSigners) {
            this.trustedSigners = trustedSigners;
            return this;
        }

        public Builder setTrustedSigners(@Nullable List<String> trustedSigners) {
            this.trustedSigners = Input.ofNullable(trustedSigners);
            return this;
        }

        public Builder setViewerProtocolPolicy(Input<String> viewerProtocolPolicy) {
            this.viewerProtocolPolicy = Objects.requireNonNull(viewerProtocolPolicy);
            return this;
        }

        public Builder setViewerProtocolPolicy(String viewerProtocolPolicy) {
            this.viewerProtocolPolicy = Input.of(Objects.requireNonNull(viewerProtocolPolicy));
            return this;
        }
        public DistributionDefaultCacheBehaviorGetArgs build() {
            return new DistributionDefaultCacheBehaviorGetArgs(allowedMethods, cachePolicyId, cachedMethods, compress, defaultTtl, fieldLevelEncryptionId, forwardedValues, functionAssociations, lambdaFunctionAssociations, maxTtl, minTtl, originRequestPolicyId, realtimeLogConfigArn, responseHeadersPolicyId, smoothStreaming, targetOriginId, trustedKeyGroups, trustedSigners, viewerProtocolPolicy);
        }
    }
}
