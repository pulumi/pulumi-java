// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appsync;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.appsync.ResolverArgs;
import io.pulumi.aws.appsync.inputs.ResolverState;
import io.pulumi.aws.appsync.outputs.ResolverCachingConfig;
import io.pulumi.aws.appsync.outputs.ResolverPipelineConfig;
import io.pulumi.aws.appsync.outputs.ResolverSyncConfig;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides an AppSync Resolver.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testGraphQLApi = new aws.appsync.GraphQLApi("testGraphQLApi", {
 *     authenticationType: "API_KEY",
 *     schema: `type Mutation {
 * 	putPost(id: ID!, title: String!): Post
 * }
 * 
 * type Post {
 * 	id: ID!
 * 	title: String!
 * }
 * 
 * type Query {
 * 	singlePost(id: ID!): Post
 * }
 * 
 * schema {
 * 	query: Query
 * 	mutation: Mutation
 * }
 * `,
 * });
 * const testDataSource = new aws.appsync.DataSource("testDataSource", {
 *     apiId: testGraphQLApi.id,
 *     name: "tf_example",
 *     type: "HTTP",
 *     httpConfig: {
 *         endpoint: "http://example.com",
 *     },
 * });
 * // UNIT type resolver (default)
 * const testResolver = new aws.appsync.Resolver("testResolver", {
 *     apiId: testGraphQLApi.id,
 *     field: "singlePost",
 *     type: "Query",
 *     dataSource: testDataSource.name,
 *     requestTemplate: `{
 *     "version": "2018-05-29",
 *     "method": "GET",
 *     "resourcePath": "/",
 *     "params":{
 *         "headers": $utils.http.copyheaders($ctx.request.headers)
 *     }
 * }
 * `,
 *     responseTemplate: `#if($ctx.result.statusCode == 200)
 *     $ctx.result.body
 * #else
 *     $utils.appendError($ctx.result.body, $ctx.result.statusCode)
 * #end
 * `,
 *     cachingConfig: {
 *         cachingKeys: [
 *             `$context.identity.sub`,
 *             `$context.arguments.id`,
 *         ],
 *         ttl: 60,
 *     },
 * });
 * // PIPELINE type resolver
 * const mutationPipelineTest = new aws.appsync.Resolver("mutationPipelineTest", {
 *     type: "Mutation",
 *     apiId: testGraphQLApi.id,
 *     field: "pipelineTest",
 *     requestTemplate: "{}",
 *     responseTemplate: `$util.toJson($ctx.result)`,
 *     kind: "PIPELINE",
 *     pipelineConfig: {
 *         functions: [
 *             aws_appsync_function.test1.function_id,
 *             aws_appsync_function.test2.function_id,
 *             aws_appsync_function.test3.function_id,
 *         ],
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * test_graph_ql_api = aws.appsync.GraphQLApi("testGraphQLApi",
 *     authentication_type="API_KEY",
 *     schema="""type Mutation {
 * 	putPost(id: ID!, title: String!): Post
 * }
 * 
 * type Post {
 * 	id: ID!
 * 	title: String!
 * }
 * 
 * type Query {
 * 	singlePost(id: ID!): Post
 * }
 * 
 * schema {
 * 	query: Query
 * 	mutation: Mutation
 * }
 * """)
 * test_data_source = aws.appsync.DataSource("testDataSource",
 *     api_id=test_graph_ql_api.id,
 *     name="tf_example",
 *     type="HTTP",
 *     http_config=aws.appsync.DataSourceHttpConfigArgs(
 *         endpoint="http://example.com",
 *     ))
 * # UNIT type resolver (default)
 * test_resolver = aws.appsync.Resolver("testResolver",
 *     api_id=test_graph_ql_api.id,
 *     field="singlePost",
 *     type="Query",
 *     data_source=test_data_source.name,
 *     request_template="""{
 *     "version": "2018-05-29",
 *     "method": "GET",
 *     "resourcePath": "/",
 *     "params":{
 *         "headers": $utils.http.copyheaders($ctx.request.headers)
 *     }
 * }
 * """,
 *     response_template="""#if($ctx.result.statusCode == 200)
 *     $ctx.result.body
 * #else
 *     $utils.appendError($ctx.result.body, $ctx.result.statusCode)
 * #end
 * """,
 *     caching_config=aws.appsync.ResolverCachingConfigArgs(
 *         caching_keys=[
 *             "$context.identity.sub",
 *             "$context.arguments.id",
 *         ],
 *         ttl=60,
 *     ))
 * # PIPELINE type resolver
 * mutation_pipeline_test = aws.appsync.Resolver("mutationPipelineTest",
 *     type="Mutation",
 *     api_id=test_graph_ql_api.id,
 *     field="pipelineTest",
 *     request_template="{}",
 *     response_template="$util.toJson($ctx.result)",
 *     kind="PIPELINE",
 *     pipeline_config=aws.appsync.ResolverPipelineConfigArgs(
 *         functions=[
 *             aws_appsync_function["test1"]["function_id"],
 *             aws_appsync_function["test2"]["function_id"],
 *             aws_appsync_function["test3"]["function_id"],
 *         ],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var testGraphQLApi = new Aws.AppSync.GraphQLApi("testGraphQLApi", new Aws.AppSync.GraphQLApiArgs
 *         {
 *             AuthenticationType = "API_KEY",
 *             Schema = @"type Mutation {
 * 	putPost(id: ID!, title: String!): Post
 * }
 * 
 * type Post {
 * 	id: ID!
 * 	title: String!
 * }
 * 
 * type Query {
 * 	singlePost(id: ID!): Post
 * }
 * 
 * schema {
 * 	query: Query
 * 	mutation: Mutation
 * }
 * ",
 *         });
 *         var testDataSource = new Aws.AppSync.DataSource("testDataSource", new Aws.AppSync.DataSourceArgs
 *         {
 *             ApiId = testGraphQLApi.Id,
 *             Name = "tf_example",
 *             Type = "HTTP",
 *             HttpConfig = new Aws.AppSync.Inputs.DataSourceHttpConfigArgs
 *             {
 *                 Endpoint = "http://example.com",
 *             },
 *         });
 *         // UNIT type resolver (default)
 *         var testResolver = new Aws.AppSync.Resolver("testResolver", new Aws.AppSync.ResolverArgs
 *         {
 *             ApiId = testGraphQLApi.Id,
 *             Field = "singlePost",
 *             Type = "Query",
 *             DataSource = testDataSource.Name,
 *             RequestTemplate = @"{
 *     ""version"": ""2018-05-29"",
 *     ""method"": ""GET"",
 *     ""resourcePath"": ""/"",
 *     ""params"":{
 *         ""headers"": $utils.http.copyheaders($ctx.request.headers)
 *     }
 * }
 * ",
 *             ResponseTemplate = @"#if($ctx.result.statusCode == 200)
 *     $ctx.result.body
 * #else
 *     $utils.appendError($ctx.result.body, $ctx.result.statusCode)
 * #end
 * ",
 *             CachingConfig = new Aws.AppSync.Inputs.ResolverCachingConfigArgs
 *             {
 *                 CachingKeys = 
 *                 {
 *                     "$context.identity.sub",
 *                     "$context.arguments.id",
 *                 },
 *                 Ttl = 60,
 *             },
 *         });
 *         // PIPELINE type resolver
 *         var mutationPipelineTest = new Aws.AppSync.Resolver("mutationPipelineTest", new Aws.AppSync.ResolverArgs
 *         {
 *             Type = "Mutation",
 *             ApiId = testGraphQLApi.Id,
 *             Field = "pipelineTest",
 *             RequestTemplate = "{}",
 *             ResponseTemplate = "$util.toJson($ctx.result)",
 *             Kind = "PIPELINE",
 *             PipelineConfig = new Aws.AppSync.Inputs.ResolverPipelineConfigArgs
 *             {
 *                 Functions = 
 *                 {
 *                     aws_appsync_function.Test1.Function_id,
 *                     aws_appsync_function.Test2.Function_id,
 *                     aws_appsync_function.Test3.Function_id,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appsync"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		testGraphQLApi, err := appsync.NewGraphQLApi(ctx, "testGraphQLApi", &appsync.GraphQLApiArgs{
 * 			AuthenticationType: pulumi.String("API_KEY"),
 * 			Schema: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "type Mutation {\n", "	putPost(id: ID!, title: String!): Post\n", "}\n", "\n", "type Post {\n", "	id: ID!\n", "	title: String!\n", "}\n", "\n", "type Query {\n", "	singlePost(id: ID!): Post\n", "}\n", "\n", "schema {\n", "	query: Query\n", "	mutation: Mutation\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		testDataSource, err := appsync.NewDataSource(ctx, "testDataSource", &appsync.DataSourceArgs{
 * 			ApiId: testGraphQLApi.ID(),
 * 			Name:  pulumi.String("tf_example"),
 * 			Type:  pulumi.String("HTTP"),
 * 			HttpConfig: &appsync.DataSourceHttpConfigArgs{
 * 				Endpoint: pulumi.String("http://example.com"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = appsync.NewResolver(ctx, "testResolver", &appsync.ResolverArgs{
 * 			ApiId:            testGraphQLApi.ID(),
 * 			Field:            pulumi.String("singlePost"),
 * 			Type:             pulumi.String("Query"),
 * 			DataSource:       testDataSource.Name,
 * 			RequestTemplate:  pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "    \"version\": \"2018-05-29\",\n", "    \"method\": \"GET\",\n", "    \"resourcePath\": \"/\",\n", "    \"params\":{\n", "        \"headers\": ", "$", "utils.http.copyheaders(", "$", "ctx.request.headers)\n", "    }\n", "}\n")),
 * 			ResponseTemplate: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "#if(", "$", "ctx.result.statusCode == 200)\n", "    ", "$", "ctx.result.body\n", "#else\n", "    ", "$", "utils.appendError(", "$", "ctx.result.body, ", "$", "ctx.result.statusCode)\n", "#end\n")),
 * 			CachingConfig: &appsync.ResolverCachingConfigArgs{
 * 				CachingKeys: pulumi.StringArray{
 * 					pulumi.String(fmt.Sprintf("%v%v", "$", "context.identity.sub")),
 * 					pulumi.String(fmt.Sprintf("%v%v", "$", "context.arguments.id")),
 * 				},
 * 				Ttl: pulumi.Int(60),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = appsync.NewResolver(ctx, "mutationPipelineTest", &appsync.ResolverArgs{
 * 			Type:             pulumi.String("Mutation"),
 * 			ApiId:            testGraphQLApi.ID(),
 * 			Field:            pulumi.String("pipelineTest"),
 * 			RequestTemplate:  pulumi.String("{}"),
 * 			ResponseTemplate: pulumi.String(fmt.Sprintf("%v%v%v%v", "$", "util.toJson(", "$", "ctx.result)")),
 * 			Kind:             pulumi.String("PIPELINE"),
 * 			PipelineConfig: &appsync.ResolverPipelineConfigArgs{
 * 				Functions: pulumi.StringArray{
 * 					pulumi.Any(aws_appsync_function.Test1.Function_id),
 * 					pulumi.Any(aws_appsync_function.Test2.Function_id),
 * 					pulumi.Any(aws_appsync_function.Test3.Function_id),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * `aws_appsync_resolver` can be imported with their `api_id`, a hyphen, `type`, a hypen and `field` e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:appsync/resolver:Resolver example abcdef123456-exampleType-exampleField
 * ```
 * 
 *  
 */
@ResourceType(type="aws:appsync/resolver:Resolver")
public class Resolver extends io.pulumi.resources.CustomResource {
    /**
     * The API ID for the GraphQL API.
     * 
     */
    @Export(name="apiId", type=String.class, parameters={})
    private Output<String> apiId;

    /**
     * @return The API ID for the GraphQL API.
     * 
     */
    public Output<String> getApiId() {
        return this.apiId;
    }
    /**
     * The ARN
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The CachingConfig.
     * 
     */
    @Export(name="cachingConfig", type=ResolverCachingConfig.class, parameters={})
    private Output</* @Nullable */ ResolverCachingConfig> cachingConfig;

    /**
     * @return The CachingConfig.
     * 
     */
    public Output</* @Nullable */ ResolverCachingConfig> getCachingConfig() {
        return this.cachingConfig;
    }
    /**
     * The DataSource name.
     * 
     */
    @Export(name="dataSource", type=String.class, parameters={})
    private Output</* @Nullable */ String> dataSource;

    /**
     * @return The DataSource name.
     * 
     */
    public Output</* @Nullable */ String> getDataSource() {
        return this.dataSource;
    }
    /**
     * The field name from the schema defined in the GraphQL API.
     * 
     */
    @Export(name="field", type=String.class, parameters={})
    private Output<String> field;

    /**
     * @return The field name from the schema defined in the GraphQL API.
     * 
     */
    public Output<String> getField() {
        return this.field;
    }
    /**
     * The resolver type. Valid values are `UNIT` and `PIPELINE`.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output</* @Nullable */ String> kind;

    /**
     * @return The resolver type. Valid values are `UNIT` and `PIPELINE`.
     * 
     */
    public Output</* @Nullable */ String> getKind() {
        return this.kind;
    }
    /**
     * The maximum batching size for a resolver. Valid values are between `0` and `2000`.
     * 
     */
    @Export(name="maxBatchSize", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> maxBatchSize;

    /**
     * @return The maximum batching size for a resolver. Valid values are between `0` and `2000`.
     * 
     */
    public Output</* @Nullable */ Integer> getMaxBatchSize() {
        return this.maxBatchSize;
    }
    /**
     * The PipelineConfig.
     * 
     */
    @Export(name="pipelineConfig", type=ResolverPipelineConfig.class, parameters={})
    private Output</* @Nullable */ ResolverPipelineConfig> pipelineConfig;

    /**
     * @return The PipelineConfig.
     * 
     */
    public Output</* @Nullable */ ResolverPipelineConfig> getPipelineConfig() {
        return this.pipelineConfig;
    }
    /**
     * The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    @Export(name="requestTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> requestTemplate;

    /**
     * @return The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    public Output</* @Nullable */ String> getRequestTemplate() {
        return this.requestTemplate;
    }
    /**
     * The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    @Export(name="responseTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> responseTemplate;

    /**
     * @return The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    public Output</* @Nullable */ String> getResponseTemplate() {
        return this.responseTemplate;
    }
    /**
     * Describes a Sync configuration for a resolver. See Sync Config.
     * 
     */
    @Export(name="syncConfig", type=ResolverSyncConfig.class, parameters={})
    private Output</* @Nullable */ ResolverSyncConfig> syncConfig;

    /**
     * @return Describes a Sync configuration for a resolver. See Sync Config.
     * 
     */
    public Output</* @Nullable */ ResolverSyncConfig> getSyncConfig() {
        return this.syncConfig;
    }
    /**
     * The type name from the schema defined in the GraphQL API.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type name from the schema defined in the GraphQL API.
     * 
     */
    public Output<String> getType() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Resolver(String name) {
        this(name, ResolverArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Resolver(String name, ResolverArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Resolver(String name, ResolverArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:appsync/resolver:Resolver", name, args == null ? ResolverArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Resolver(String name, Output<String> id, @Nullable ResolverState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:appsync/resolver:Resolver", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Resolver get(String name, Output<String> id, @Nullable ResolverState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Resolver(name, id, state, options);
    }
}
