// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesisanalyticsv2;

import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationArgs;
import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationCloudwatchLoggingOptionsArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    /**
     * The application's configuration
     * 
     */
    @InputImport(name="applicationConfiguration")
      private final @Nullable Input<ApplicationApplicationConfigurationArgs> applicationConfiguration;

    public Input<ApplicationApplicationConfigurationArgs> getApplicationConfiguration() {
        return this.applicationConfiguration == null ? Input.empty() : this.applicationConfiguration;
    }

    /**
     * A CloudWatch log stream to monitor application configuration errors.
     * 
     */
    @InputImport(name="cloudwatchLoggingOptions")
      private final @Nullable Input<ApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    public Input<ApplicationCloudwatchLoggingOptionsArgs> getCloudwatchLoggingOptions() {
        return this.cloudwatchLoggingOptions == null ? Input.empty() : this.cloudwatchLoggingOptions;
    }

    /**
     * A summary description of the application.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Whether to force stop an unresponsive Flink-based application.
     * 
     */
    @InputImport(name="forceStop")
      private final @Nullable Input<Boolean> forceStop;

    public Input<Boolean> getForceStop() {
        return this.forceStop == null ? Input.empty() : this.forceStop;
    }

    /**
     * The name of the application.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The runtime environment for the application. Valid values: `SQL-1_0`, `FLINK-1_6`, `FLINK-1_8`, `FLINK-1_11`.
     * 
     */
    @InputImport(name="runtimeEnvironment", required=true)
      private final Input<String> runtimeEnvironment;

    public Input<String> getRuntimeEnvironment() {
        return this.runtimeEnvironment;
    }

    /**
     * The ARN of the IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.
     * 
     */
    @InputImport(name="serviceExecutionRole", required=true)
      private final Input<String> serviceExecutionRole;

    public Input<String> getServiceExecutionRole() {
        return this.serviceExecutionRole;
    }

    /**
     * Whether to start or stop the application.
     * 
     */
    @InputImport(name="startApplication")
      private final @Nullable Input<Boolean> startApplication;

    public Input<Boolean> getStartApplication() {
        return this.startApplication == null ? Input.empty() : this.startApplication;
    }

    /**
     * A map of tags to assign to the application. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public ApplicationArgs(
        @Nullable Input<ApplicationApplicationConfigurationArgs> applicationConfiguration,
        @Nullable Input<ApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> forceStop,
        @Nullable Input<String> name,
        Input<String> runtimeEnvironment,
        Input<String> serviceExecutionRole,
        @Nullable Input<Boolean> startApplication,
        @Nullable Input<Map<String,String>> tags) {
        this.applicationConfiguration = applicationConfiguration;
        this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
        this.description = description;
        this.forceStop = forceStop;
        this.name = name;
        this.runtimeEnvironment = Objects.requireNonNull(runtimeEnvironment, "expected parameter 'runtimeEnvironment' to be non-null");
        this.serviceExecutionRole = Objects.requireNonNull(serviceExecutionRole, "expected parameter 'serviceExecutionRole' to be non-null");
        this.startApplication = startApplication;
        this.tags = tags;
    }

    private ApplicationArgs() {
        this.applicationConfiguration = Input.empty();
        this.cloudwatchLoggingOptions = Input.empty();
        this.description = Input.empty();
        this.forceStop = Input.empty();
        this.name = Input.empty();
        this.runtimeEnvironment = Input.empty();
        this.serviceExecutionRole = Input.empty();
        this.startApplication = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ApplicationApplicationConfigurationArgs> applicationConfiguration;
        private @Nullable Input<ApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> forceStop;
        private @Nullable Input<String> name;
        private Input<String> runtimeEnvironment;
        private Input<String> serviceExecutionRole;
        private @Nullable Input<Boolean> startApplication;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationConfiguration = defaults.applicationConfiguration;
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.description = defaults.description;
    	      this.forceStop = defaults.forceStop;
    	      this.name = defaults.name;
    	      this.runtimeEnvironment = defaults.runtimeEnvironment;
    	      this.serviceExecutionRole = defaults.serviceExecutionRole;
    	      this.startApplication = defaults.startApplication;
    	      this.tags = defaults.tags;
        }

        public Builder applicationConfiguration(@Nullable Input<ApplicationApplicationConfigurationArgs> applicationConfiguration) {
            this.applicationConfiguration = applicationConfiguration;
            return this;
        }

        public Builder applicationConfiguration(@Nullable ApplicationApplicationConfigurationArgs applicationConfiguration) {
            this.applicationConfiguration = Input.ofNullable(applicationConfiguration);
            return this;
        }

        public Builder cloudwatchLoggingOptions(@Nullable Input<ApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }

        public Builder cloudwatchLoggingOptions(@Nullable ApplicationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = Input.ofNullable(cloudwatchLoggingOptions);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder forceStop(@Nullable Input<Boolean> forceStop) {
            this.forceStop = forceStop;
            return this;
        }

        public Builder forceStop(@Nullable Boolean forceStop) {
            this.forceStop = Input.ofNullable(forceStop);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder runtimeEnvironment(Input<String> runtimeEnvironment) {
            this.runtimeEnvironment = Objects.requireNonNull(runtimeEnvironment);
            return this;
        }

        public Builder runtimeEnvironment(String runtimeEnvironment) {
            this.runtimeEnvironment = Input.of(Objects.requireNonNull(runtimeEnvironment));
            return this;
        }

        public Builder serviceExecutionRole(Input<String> serviceExecutionRole) {
            this.serviceExecutionRole = Objects.requireNonNull(serviceExecutionRole);
            return this;
        }

        public Builder serviceExecutionRole(String serviceExecutionRole) {
            this.serviceExecutionRole = Input.of(Objects.requireNonNull(serviceExecutionRole));
            return this;
        }

        public Builder startApplication(@Nullable Input<Boolean> startApplication) {
            this.startApplication = startApplication;
            return this;
        }

        public Builder startApplication(@Nullable Boolean startApplication) {
            this.startApplication = Input.ofNullable(startApplication);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public ApplicationArgs build() {
            return new ApplicationArgs(applicationConfiguration, cloudwatchLoggingOptions, description, forceStop, name, runtimeEnvironment, serviceExecutionRole, startApplication, tags);
        }
    }
}
