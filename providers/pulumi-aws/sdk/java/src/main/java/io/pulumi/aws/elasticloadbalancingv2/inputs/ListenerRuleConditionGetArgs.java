// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elasticloadbalancingv2.inputs;

import io.pulumi.aws.elasticloadbalancingv2.inputs.ListenerRuleConditionHostHeaderGetArgs;
import io.pulumi.aws.elasticloadbalancingv2.inputs.ListenerRuleConditionHttpHeaderGetArgs;
import io.pulumi.aws.elasticloadbalancingv2.inputs.ListenerRuleConditionHttpRequestMethodGetArgs;
import io.pulumi.aws.elasticloadbalancingv2.inputs.ListenerRuleConditionPathPatternGetArgs;
import io.pulumi.aws.elasticloadbalancingv2.inputs.ListenerRuleConditionQueryStringGetArgs;
import io.pulumi.aws.elasticloadbalancingv2.inputs.ListenerRuleConditionSourceIpGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ListenerRuleConditionGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ListenerRuleConditionGetArgs Empty = new ListenerRuleConditionGetArgs();

    /**
     * Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
     * 
     */
    @InputImport(name="hostHeader")
      private final @Nullable Output<ListenerRuleConditionHostHeaderGetArgs> hostHeader;

    public Output<ListenerRuleConditionHostHeaderGetArgs> getHostHeader() {
        return this.hostHeader == null ? Output.empty() : this.hostHeader;
    }

    /**
     * HTTP headers to match. HTTP Header block fields documented below.
     * 
     */
    @InputImport(name="httpHeader")
      private final @Nullable Output<ListenerRuleConditionHttpHeaderGetArgs> httpHeader;

    public Output<ListenerRuleConditionHttpHeaderGetArgs> getHttpHeader() {
        return this.httpHeader == null ? Output.empty() : this.httpHeader;
    }

    /**
     * Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
     * 
     */
    @InputImport(name="httpRequestMethod")
      private final @Nullable Output<ListenerRuleConditionHttpRequestMethodGetArgs> httpRequestMethod;

    public Output<ListenerRuleConditionHttpRequestMethodGetArgs> getHttpRequestMethod() {
        return this.httpRequestMethod == null ? Output.empty() : this.httpRequestMethod;
    }

    /**
     * Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
     * 
     */
    @InputImport(name="pathPattern")
      private final @Nullable Output<ListenerRuleConditionPathPatternGetArgs> pathPattern;

    public Output<ListenerRuleConditionPathPatternGetArgs> getPathPattern() {
        return this.pathPattern == null ? Output.empty() : this.pathPattern;
    }

    /**
     * Query strings to match. Query String block fields documented below.
     * 
     */
    @InputImport(name="queryStrings")
      private final @Nullable Output<List<ListenerRuleConditionQueryStringGetArgs>> queryStrings;

    public Output<List<ListenerRuleConditionQueryStringGetArgs>> getQueryStrings() {
        return this.queryStrings == null ? Output.empty() : this.queryStrings;
    }

    /**
     * Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.
     * 
     */
    @InputImport(name="sourceIp")
      private final @Nullable Output<ListenerRuleConditionSourceIpGetArgs> sourceIp;

    public Output<ListenerRuleConditionSourceIpGetArgs> getSourceIp() {
        return this.sourceIp == null ? Output.empty() : this.sourceIp;
    }

    public ListenerRuleConditionGetArgs(
        @Nullable Output<ListenerRuleConditionHostHeaderGetArgs> hostHeader,
        @Nullable Output<ListenerRuleConditionHttpHeaderGetArgs> httpHeader,
        @Nullable Output<ListenerRuleConditionHttpRequestMethodGetArgs> httpRequestMethod,
        @Nullable Output<ListenerRuleConditionPathPatternGetArgs> pathPattern,
        @Nullable Output<List<ListenerRuleConditionQueryStringGetArgs>> queryStrings,
        @Nullable Output<ListenerRuleConditionSourceIpGetArgs> sourceIp) {
        this.hostHeader = hostHeader;
        this.httpHeader = httpHeader;
        this.httpRequestMethod = httpRequestMethod;
        this.pathPattern = pathPattern;
        this.queryStrings = queryStrings;
        this.sourceIp = sourceIp;
    }

    private ListenerRuleConditionGetArgs() {
        this.hostHeader = Output.empty();
        this.httpHeader = Output.empty();
        this.httpRequestMethod = Output.empty();
        this.pathPattern = Output.empty();
        this.queryStrings = Output.empty();
        this.sourceIp = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerRuleConditionGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ListenerRuleConditionHostHeaderGetArgs> hostHeader;
        private @Nullable Output<ListenerRuleConditionHttpHeaderGetArgs> httpHeader;
        private @Nullable Output<ListenerRuleConditionHttpRequestMethodGetArgs> httpRequestMethod;
        private @Nullable Output<ListenerRuleConditionPathPatternGetArgs> pathPattern;
        private @Nullable Output<List<ListenerRuleConditionQueryStringGetArgs>> queryStrings;
        private @Nullable Output<ListenerRuleConditionSourceIpGetArgs> sourceIp;

        public Builder() {
    	      // Empty
        }

        public Builder(ListenerRuleConditionGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostHeader = defaults.hostHeader;
    	      this.httpHeader = defaults.httpHeader;
    	      this.httpRequestMethod = defaults.httpRequestMethod;
    	      this.pathPattern = defaults.pathPattern;
    	      this.queryStrings = defaults.queryStrings;
    	      this.sourceIp = defaults.sourceIp;
        }

        public Builder hostHeader(@Nullable Output<ListenerRuleConditionHostHeaderGetArgs> hostHeader) {
            this.hostHeader = hostHeader;
            return this;
        }

        public Builder hostHeader(@Nullable ListenerRuleConditionHostHeaderGetArgs hostHeader) {
            this.hostHeader = Output.ofNullable(hostHeader);
            return this;
        }

        public Builder httpHeader(@Nullable Output<ListenerRuleConditionHttpHeaderGetArgs> httpHeader) {
            this.httpHeader = httpHeader;
            return this;
        }

        public Builder httpHeader(@Nullable ListenerRuleConditionHttpHeaderGetArgs httpHeader) {
            this.httpHeader = Output.ofNullable(httpHeader);
            return this;
        }

        public Builder httpRequestMethod(@Nullable Output<ListenerRuleConditionHttpRequestMethodGetArgs> httpRequestMethod) {
            this.httpRequestMethod = httpRequestMethod;
            return this;
        }

        public Builder httpRequestMethod(@Nullable ListenerRuleConditionHttpRequestMethodGetArgs httpRequestMethod) {
            this.httpRequestMethod = Output.ofNullable(httpRequestMethod);
            return this;
        }

        public Builder pathPattern(@Nullable Output<ListenerRuleConditionPathPatternGetArgs> pathPattern) {
            this.pathPattern = pathPattern;
            return this;
        }

        public Builder pathPattern(@Nullable ListenerRuleConditionPathPatternGetArgs pathPattern) {
            this.pathPattern = Output.ofNullable(pathPattern);
            return this;
        }

        public Builder queryStrings(@Nullable Output<List<ListenerRuleConditionQueryStringGetArgs>> queryStrings) {
            this.queryStrings = queryStrings;
            return this;
        }

        public Builder queryStrings(@Nullable List<ListenerRuleConditionQueryStringGetArgs> queryStrings) {
            this.queryStrings = Output.ofNullable(queryStrings);
            return this;
        }

        public Builder sourceIp(@Nullable Output<ListenerRuleConditionSourceIpGetArgs> sourceIp) {
            this.sourceIp = sourceIp;
            return this;
        }

        public Builder sourceIp(@Nullable ListenerRuleConditionSourceIpGetArgs sourceIp) {
            this.sourceIp = Output.ofNullable(sourceIp);
            return this;
        }
        public ListenerRuleConditionGetArgs build() {
            return new ListenerRuleConditionGetArgs(hostHeader, httpHeader, httpRequestMethod, pathPattern, queryStrings, sourceIp);
        }
    }
}
