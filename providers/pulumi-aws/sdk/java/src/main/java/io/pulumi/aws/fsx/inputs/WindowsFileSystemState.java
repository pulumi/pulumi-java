// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx.inputs;

import io.pulumi.aws.fsx.inputs.WindowsFileSystemAuditLogConfigurationGetArgs;
import io.pulumi.aws.fsx.inputs.WindowsFileSystemSelfManagedActiveDirectoryGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WindowsFileSystemState extends io.pulumi.resources.ResourceArgs {

    public static final WindowsFileSystemState Empty = new WindowsFileSystemState();

    /**
     * The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `self_managed_active_directory`.
     * 
     */
    @InputImport(name="activeDirectoryId")
      private final @Nullable Input<String> activeDirectoryId;

    public Input<String> getActiveDirectoryId() {
        return this.activeDirectoryId == null ? Input.empty() : this.activeDirectoryId;
    }

    /**
     * An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
     * 
     */
    @InputImport(name="aliases")
      private final @Nullable Input<List<String>> aliases;

    public Input<List<String>> getAliases() {
        return this.aliases == null ? Input.empty() : this.aliases;
    }

    /**
     * Amazon Resource Name of the file system.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See below.
     * 
     */
    @InputImport(name="auditLogConfiguration")
      private final @Nullable Input<WindowsFileSystemAuditLogConfigurationGetArgs> auditLogConfiguration;

    public Input<WindowsFileSystemAuditLogConfigurationGetArgs> getAuditLogConfiguration() {
        return this.auditLogConfiguration == null ? Input.empty() : this.auditLogConfiguration;
    }

    /**
     * The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
     * 
     */
    @InputImport(name="automaticBackupRetentionDays")
      private final @Nullable Input<Integer> automaticBackupRetentionDays;

    public Input<Integer> getAutomaticBackupRetentionDays() {
        return this.automaticBackupRetentionDays == null ? Input.empty() : this.automaticBackupRetentionDays;
    }

    /**
     * The ID of the source backup to create the filesystem from.
     * 
     */
    @InputImport(name="backupId")
      private final @Nullable Input<String> backupId;

    public Input<String> getBackupId() {
        return this.backupId == null ? Input.empty() : this.backupId;
    }

    /**
     * A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
     * 
     */
    @InputImport(name="copyTagsToBackups")
      private final @Nullable Input<Boolean> copyTagsToBackups;

    public Input<Boolean> getCopyTagsToBackups() {
        return this.copyTagsToBackups == null ? Input.empty() : this.copyTagsToBackups;
    }

    /**
     * The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
     * 
     */
    @InputImport(name="dailyAutomaticBackupStartTime")
      private final @Nullable Input<String> dailyAutomaticBackupStartTime;

    public Input<String> getDailyAutomaticBackupStartTime() {
        return this.dailyAutomaticBackupStartTime == null ? Input.empty() : this.dailyAutomaticBackupStartTime;
    }

    /**
     * Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
     * 
     */
    @InputImport(name="deploymentType")
      private final @Nullable Input<String> deploymentType;

    public Input<String> getDeploymentType() {
        return this.deploymentType == null ? Input.empty() : this.deploymentType;
    }

    /**
     * DNS name for the file system, e.g., `fs-12345678.corp.example.com` (domain name matching the Active Directory domain name)
     * 
     */
    @InputImport(name="dnsName")
      private final @Nullable Input<String> dnsName;

    public Input<String> getDnsName() {
        return this.dnsName == null ? Input.empty() : this.dnsName;
    }

    /**
     * ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
     * 
     */
    @InputImport(name="kmsKeyId")
      private final @Nullable Input<String> kmsKeyId;

    public Input<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Input.empty() : this.kmsKeyId;
    }

    /**
     * Set of Elastic Network Interface identifiers from which the file system is accessible.
     * 
     */
    @InputImport(name="networkInterfaceIds")
      private final @Nullable Input<List<String>> networkInterfaceIds;

    public Input<List<String>> getNetworkInterfaceIds() {
        return this.networkInterfaceIds == null ? Input.empty() : this.networkInterfaceIds;
    }

    /**
     * AWS account identifier that created the file system.
     * 
     */
    @InputImport(name="ownerId")
      private final @Nullable Input<String> ownerId;

    public Input<String> getOwnerId() {
        return this.ownerId == null ? Input.empty() : this.ownerId;
    }

    /**
     * The IP address of the primary, or preferred, file server.
     * 
     */
    @InputImport(name="preferredFileServerIp")
      private final @Nullable Input<String> preferredFileServerIp;

    public Input<String> getPreferredFileServerIp() {
        return this.preferredFileServerIp == null ? Input.empty() : this.preferredFileServerIp;
    }

    /**
     * Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
     * 
     */
    @InputImport(name="preferredSubnetId")
      private final @Nullable Input<String> preferredSubnetId;

    public Input<String> getPreferredSubnetId() {
        return this.preferredSubnetId == null ? Input.empty() : this.preferredSubnetId;
    }

    /**
     * For `MULTI_AZ_1` deployment types, use this endpoint when performing administrative tasks on the file system using Amazon FSx Remote PowerShell. For `SINGLE_AZ_1` deployment types, this is the DNS name of the file system.
     * 
     */
    @InputImport(name="remoteAdministrationEndpoint")
      private final @Nullable Input<String> remoteAdministrationEndpoint;

    public Input<String> getRemoteAdministrationEndpoint() {
        return this.remoteAdministrationEndpoint == null ? Input.empty() : this.remoteAdministrationEndpoint;
    }

    /**
     * A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
     * 
     */
    @InputImport(name="securityGroupIds")
      private final @Nullable Input<List<String>> securityGroupIds;

    public Input<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds == null ? Input.empty() : this.securityGroupIds;
    }

    /**
     * Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `active_directory_id`. Detailed below.
     * 
     */
    @InputImport(name="selfManagedActiveDirectory")
      private final @Nullable Input<WindowsFileSystemSelfManagedActiveDirectoryGetArgs> selfManagedActiveDirectory;

    public Input<WindowsFileSystemSelfManagedActiveDirectoryGetArgs> getSelfManagedActiveDirectory() {
        return this.selfManagedActiveDirectory == null ? Input.empty() : this.selfManagedActiveDirectory;
    }

    /**
     * When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
     * 
     */
    @InputImport(name="skipFinalBackup")
      private final @Nullable Input<Boolean> skipFinalBackup;

    public Input<Boolean> getSkipFinalBackup() {
        return this.skipFinalBackup == null ? Input.empty() : this.skipFinalBackup;
    }

    /**
     * Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
     * 
     */
    @InputImport(name="storageCapacity")
      private final @Nullable Input<Integer> storageCapacity;

    public Input<Integer> getStorageCapacity() {
        return this.storageCapacity == null ? Input.empty() : this.storageCapacity;
    }

    /**
     * Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
     * 
     */
    @InputImport(name="storageType")
      private final @Nullable Input<String> storageType;

    public Input<String> getStorageType() {
        return this.storageType == null ? Input.empty() : this.storageType;
    }

    /**
     * A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deployment_type` to `MULTI_AZ_1`.
     * 
     */
    @InputImport(name="subnetIds")
      private final @Nullable Input<List<String>> subnetIds;

    public Input<List<String>> getSubnetIds() {
        return this.subnetIds == null ? Input.empty() : this.subnetIds;
    }

    /**
     * A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
     * 
     */
    @InputImport(name="throughputCapacity")
      private final @Nullable Input<Integer> throughputCapacity;

    public Input<Integer> getThroughputCapacity() {
        return this.throughputCapacity == null ? Input.empty() : this.throughputCapacity;
    }

    /**
     * Identifier of the Virtual Private Cloud for the file system.
     * 
     */
    @InputImport(name="vpcId")
      private final @Nullable Input<String> vpcId;

    public Input<String> getVpcId() {
        return this.vpcId == null ? Input.empty() : this.vpcId;
    }

    /**
     * The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
     * 
     */
    @InputImport(name="weeklyMaintenanceStartTime")
      private final @Nullable Input<String> weeklyMaintenanceStartTime;

    public Input<String> getWeeklyMaintenanceStartTime() {
        return this.weeklyMaintenanceStartTime == null ? Input.empty() : this.weeklyMaintenanceStartTime;
    }

    public WindowsFileSystemState(
        @Nullable Input<String> activeDirectoryId,
        @Nullable Input<List<String>> aliases,
        @Nullable Input<String> arn,
        @Nullable Input<WindowsFileSystemAuditLogConfigurationGetArgs> auditLogConfiguration,
        @Nullable Input<Integer> automaticBackupRetentionDays,
        @Nullable Input<String> backupId,
        @Nullable Input<Boolean> copyTagsToBackups,
        @Nullable Input<String> dailyAutomaticBackupStartTime,
        @Nullable Input<String> deploymentType,
        @Nullable Input<String> dnsName,
        @Nullable Input<String> kmsKeyId,
        @Nullable Input<List<String>> networkInterfaceIds,
        @Nullable Input<String> ownerId,
        @Nullable Input<String> preferredFileServerIp,
        @Nullable Input<String> preferredSubnetId,
        @Nullable Input<String> remoteAdministrationEndpoint,
        @Nullable Input<List<String>> securityGroupIds,
        @Nullable Input<WindowsFileSystemSelfManagedActiveDirectoryGetArgs> selfManagedActiveDirectory,
        @Nullable Input<Boolean> skipFinalBackup,
        @Nullable Input<Integer> storageCapacity,
        @Nullable Input<String> storageType,
        @Nullable Input<List<String>> subnetIds,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<Integer> throughputCapacity,
        @Nullable Input<String> vpcId,
        @Nullable Input<String> weeklyMaintenanceStartTime) {
        this.activeDirectoryId = activeDirectoryId;
        this.aliases = aliases;
        this.arn = arn;
        this.auditLogConfiguration = auditLogConfiguration;
        this.automaticBackupRetentionDays = automaticBackupRetentionDays;
        this.backupId = backupId;
        this.copyTagsToBackups = copyTagsToBackups;
        this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
        this.deploymentType = deploymentType;
        this.dnsName = dnsName;
        this.kmsKeyId = kmsKeyId;
        this.networkInterfaceIds = networkInterfaceIds;
        this.ownerId = ownerId;
        this.preferredFileServerIp = preferredFileServerIp;
        this.preferredSubnetId = preferredSubnetId;
        this.remoteAdministrationEndpoint = remoteAdministrationEndpoint;
        this.securityGroupIds = securityGroupIds;
        this.selfManagedActiveDirectory = selfManagedActiveDirectory;
        this.skipFinalBackup = skipFinalBackup;
        this.storageCapacity = storageCapacity;
        this.storageType = storageType;
        this.subnetIds = subnetIds;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.throughputCapacity = throughputCapacity;
        this.vpcId = vpcId;
        this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
    }

    private WindowsFileSystemState() {
        this.activeDirectoryId = Input.empty();
        this.aliases = Input.empty();
        this.arn = Input.empty();
        this.auditLogConfiguration = Input.empty();
        this.automaticBackupRetentionDays = Input.empty();
        this.backupId = Input.empty();
        this.copyTagsToBackups = Input.empty();
        this.dailyAutomaticBackupStartTime = Input.empty();
        this.deploymentType = Input.empty();
        this.dnsName = Input.empty();
        this.kmsKeyId = Input.empty();
        this.networkInterfaceIds = Input.empty();
        this.ownerId = Input.empty();
        this.preferredFileServerIp = Input.empty();
        this.preferredSubnetId = Input.empty();
        this.remoteAdministrationEndpoint = Input.empty();
        this.securityGroupIds = Input.empty();
        this.selfManagedActiveDirectory = Input.empty();
        this.skipFinalBackup = Input.empty();
        this.storageCapacity = Input.empty();
        this.storageType = Input.empty();
        this.subnetIds = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.throughputCapacity = Input.empty();
        this.vpcId = Input.empty();
        this.weeklyMaintenanceStartTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WindowsFileSystemState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> activeDirectoryId;
        private @Nullable Input<List<String>> aliases;
        private @Nullable Input<String> arn;
        private @Nullable Input<WindowsFileSystemAuditLogConfigurationGetArgs> auditLogConfiguration;
        private @Nullable Input<Integer> automaticBackupRetentionDays;
        private @Nullable Input<String> backupId;
        private @Nullable Input<Boolean> copyTagsToBackups;
        private @Nullable Input<String> dailyAutomaticBackupStartTime;
        private @Nullable Input<String> deploymentType;
        private @Nullable Input<String> dnsName;
        private @Nullable Input<String> kmsKeyId;
        private @Nullable Input<List<String>> networkInterfaceIds;
        private @Nullable Input<String> ownerId;
        private @Nullable Input<String> preferredFileServerIp;
        private @Nullable Input<String> preferredSubnetId;
        private @Nullable Input<String> remoteAdministrationEndpoint;
        private @Nullable Input<List<String>> securityGroupIds;
        private @Nullable Input<WindowsFileSystemSelfManagedActiveDirectoryGetArgs> selfManagedActiveDirectory;
        private @Nullable Input<Boolean> skipFinalBackup;
        private @Nullable Input<Integer> storageCapacity;
        private @Nullable Input<String> storageType;
        private @Nullable Input<List<String>> subnetIds;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<Integer> throughputCapacity;
        private @Nullable Input<String> vpcId;
        private @Nullable Input<String> weeklyMaintenanceStartTime;

        public Builder() {
    	      // Empty
        }

        public Builder(WindowsFileSystemState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDirectoryId = defaults.activeDirectoryId;
    	      this.aliases = defaults.aliases;
    	      this.arn = defaults.arn;
    	      this.auditLogConfiguration = defaults.auditLogConfiguration;
    	      this.automaticBackupRetentionDays = defaults.automaticBackupRetentionDays;
    	      this.backupId = defaults.backupId;
    	      this.copyTagsToBackups = defaults.copyTagsToBackups;
    	      this.dailyAutomaticBackupStartTime = defaults.dailyAutomaticBackupStartTime;
    	      this.deploymentType = defaults.deploymentType;
    	      this.dnsName = defaults.dnsName;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.networkInterfaceIds = defaults.networkInterfaceIds;
    	      this.ownerId = defaults.ownerId;
    	      this.preferredFileServerIp = defaults.preferredFileServerIp;
    	      this.preferredSubnetId = defaults.preferredSubnetId;
    	      this.remoteAdministrationEndpoint = defaults.remoteAdministrationEndpoint;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.selfManagedActiveDirectory = defaults.selfManagedActiveDirectory;
    	      this.skipFinalBackup = defaults.skipFinalBackup;
    	      this.storageCapacity = defaults.storageCapacity;
    	      this.storageType = defaults.storageType;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.throughputCapacity = defaults.throughputCapacity;
    	      this.vpcId = defaults.vpcId;
    	      this.weeklyMaintenanceStartTime = defaults.weeklyMaintenanceStartTime;
        }

        public Builder activeDirectoryId(@Nullable Input<String> activeDirectoryId) {
            this.activeDirectoryId = activeDirectoryId;
            return this;
        }

        public Builder activeDirectoryId(@Nullable String activeDirectoryId) {
            this.activeDirectoryId = Input.ofNullable(activeDirectoryId);
            return this;
        }

        public Builder aliases(@Nullable Input<List<String>> aliases) {
            this.aliases = aliases;
            return this;
        }

        public Builder aliases(@Nullable List<String> aliases) {
            this.aliases = Input.ofNullable(aliases);
            return this;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder auditLogConfiguration(@Nullable Input<WindowsFileSystemAuditLogConfigurationGetArgs> auditLogConfiguration) {
            this.auditLogConfiguration = auditLogConfiguration;
            return this;
        }

        public Builder auditLogConfiguration(@Nullable WindowsFileSystemAuditLogConfigurationGetArgs auditLogConfiguration) {
            this.auditLogConfiguration = Input.ofNullable(auditLogConfiguration);
            return this;
        }

        public Builder automaticBackupRetentionDays(@Nullable Input<Integer> automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = automaticBackupRetentionDays;
            return this;
        }

        public Builder automaticBackupRetentionDays(@Nullable Integer automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = Input.ofNullable(automaticBackupRetentionDays);
            return this;
        }

        public Builder backupId(@Nullable Input<String> backupId) {
            this.backupId = backupId;
            return this;
        }

        public Builder backupId(@Nullable String backupId) {
            this.backupId = Input.ofNullable(backupId);
            return this;
        }

        public Builder copyTagsToBackups(@Nullable Input<Boolean> copyTagsToBackups) {
            this.copyTagsToBackups = copyTagsToBackups;
            return this;
        }

        public Builder copyTagsToBackups(@Nullable Boolean copyTagsToBackups) {
            this.copyTagsToBackups = Input.ofNullable(copyTagsToBackups);
            return this;
        }

        public Builder dailyAutomaticBackupStartTime(@Nullable Input<String> dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
            return this;
        }

        public Builder dailyAutomaticBackupStartTime(@Nullable String dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = Input.ofNullable(dailyAutomaticBackupStartTime);
            return this;
        }

        public Builder deploymentType(@Nullable Input<String> deploymentType) {
            this.deploymentType = deploymentType;
            return this;
        }

        public Builder deploymentType(@Nullable String deploymentType) {
            this.deploymentType = Input.ofNullable(deploymentType);
            return this;
        }

        public Builder dnsName(@Nullable Input<String> dnsName) {
            this.dnsName = dnsName;
            return this;
        }

        public Builder dnsName(@Nullable String dnsName) {
            this.dnsName = Input.ofNullable(dnsName);
            return this;
        }

        public Builder kmsKeyId(@Nullable Input<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Input.ofNullable(kmsKeyId);
            return this;
        }

        public Builder networkInterfaceIds(@Nullable Input<List<String>> networkInterfaceIds) {
            this.networkInterfaceIds = networkInterfaceIds;
            return this;
        }

        public Builder networkInterfaceIds(@Nullable List<String> networkInterfaceIds) {
            this.networkInterfaceIds = Input.ofNullable(networkInterfaceIds);
            return this;
        }

        public Builder ownerId(@Nullable Input<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = Input.ofNullable(ownerId);
            return this;
        }

        public Builder preferredFileServerIp(@Nullable Input<String> preferredFileServerIp) {
            this.preferredFileServerIp = preferredFileServerIp;
            return this;
        }

        public Builder preferredFileServerIp(@Nullable String preferredFileServerIp) {
            this.preferredFileServerIp = Input.ofNullable(preferredFileServerIp);
            return this;
        }

        public Builder preferredSubnetId(@Nullable Input<String> preferredSubnetId) {
            this.preferredSubnetId = preferredSubnetId;
            return this;
        }

        public Builder preferredSubnetId(@Nullable String preferredSubnetId) {
            this.preferredSubnetId = Input.ofNullable(preferredSubnetId);
            return this;
        }

        public Builder remoteAdministrationEndpoint(@Nullable Input<String> remoteAdministrationEndpoint) {
            this.remoteAdministrationEndpoint = remoteAdministrationEndpoint;
            return this;
        }

        public Builder remoteAdministrationEndpoint(@Nullable String remoteAdministrationEndpoint) {
            this.remoteAdministrationEndpoint = Input.ofNullable(remoteAdministrationEndpoint);
            return this;
        }

        public Builder securityGroupIds(@Nullable Input<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Input.ofNullable(securityGroupIds);
            return this;
        }

        public Builder selfManagedActiveDirectory(@Nullable Input<WindowsFileSystemSelfManagedActiveDirectoryGetArgs> selfManagedActiveDirectory) {
            this.selfManagedActiveDirectory = selfManagedActiveDirectory;
            return this;
        }

        public Builder selfManagedActiveDirectory(@Nullable WindowsFileSystemSelfManagedActiveDirectoryGetArgs selfManagedActiveDirectory) {
            this.selfManagedActiveDirectory = Input.ofNullable(selfManagedActiveDirectory);
            return this;
        }

        public Builder skipFinalBackup(@Nullable Input<Boolean> skipFinalBackup) {
            this.skipFinalBackup = skipFinalBackup;
            return this;
        }

        public Builder skipFinalBackup(@Nullable Boolean skipFinalBackup) {
            this.skipFinalBackup = Input.ofNullable(skipFinalBackup);
            return this;
        }

        public Builder storageCapacity(@Nullable Input<Integer> storageCapacity) {
            this.storageCapacity = storageCapacity;
            return this;
        }

        public Builder storageCapacity(@Nullable Integer storageCapacity) {
            this.storageCapacity = Input.ofNullable(storageCapacity);
            return this;
        }

        public Builder storageType(@Nullable Input<String> storageType) {
            this.storageType = storageType;
            return this;
        }

        public Builder storageType(@Nullable String storageType) {
            this.storageType = Input.ofNullable(storageType);
            return this;
        }

        public Builder subnetIds(@Nullable Input<List<String>> subnetIds) {
            this.subnetIds = subnetIds;
            return this;
        }

        public Builder subnetIds(@Nullable List<String> subnetIds) {
            this.subnetIds = Input.ofNullable(subnetIds);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder throughputCapacity(@Nullable Input<Integer> throughputCapacity) {
            this.throughputCapacity = throughputCapacity;
            return this;
        }

        public Builder throughputCapacity(@Nullable Integer throughputCapacity) {
            this.throughputCapacity = Input.ofNullable(throughputCapacity);
            return this;
        }

        public Builder vpcId(@Nullable Input<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }

        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = Input.ofNullable(vpcId);
            return this;
        }

        public Builder weeklyMaintenanceStartTime(@Nullable Input<String> weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
            return this;
        }

        public Builder weeklyMaintenanceStartTime(@Nullable String weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = Input.ofNullable(weeklyMaintenanceStartTime);
            return this;
        }
        public WindowsFileSystemState build() {
            return new WindowsFileSystemState(activeDirectoryId, aliases, arn, auditLogConfiguration, automaticBackupRetentionDays, backupId, copyTagsToBackups, dailyAutomaticBackupStartTime, deploymentType, dnsName, kmsKeyId, networkInterfaceIds, ownerId, preferredFileServerIp, preferredSubnetId, remoteAdministrationEndpoint, securityGroupIds, selfManagedActiveDirectory, skipFinalBackup, storageCapacity, storageType, subnetIds, tags, tagsAll, throughputCapacity, vpcId, weeklyMaintenanceStartTime);
        }
    }
}
