// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesis;

import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationCloudwatchLoggingOptionsArgs;
import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsArgs;
import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationOutputArgs;
import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationReferenceDataSourcesArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AnalyticsApplicationArgs extends io.pulumi.resources.ResourceArgs {

    public static final AnalyticsApplicationArgs Empty = new AnalyticsApplicationArgs();

    /**
     * The CloudWatch log stream options to monitor application errors.
     * See CloudWatch Logging Options below for more details.
     * 
     */
    @InputImport(name="cloudwatchLoggingOptions")
      private final @Nullable Input<AnalyticsApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    public Input<AnalyticsApplicationCloudwatchLoggingOptionsArgs> getCloudwatchLoggingOptions() {
        return this.cloudwatchLoggingOptions == null ? Input.empty() : this.cloudwatchLoggingOptions;
    }

    /**
     * SQL Code to transform input data, and generate output.
     * 
     */
    @InputImport(name="code")
      private final @Nullable Input<String> code;

    public Input<String> getCode() {
        return this.code == null ? Input.empty() : this.code;
    }

    /**
     * Description of the application.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Input configuration of the application. See Inputs below for more details.
     * 
     */
    @InputImport(name="inputs")
      private final @Nullable Input<AnalyticsApplicationInputsArgs> inputs;

    public Input<AnalyticsApplicationInputsArgs> getInputs() {
        return this.inputs == null ? Input.empty() : this.inputs;
    }

    /**
     * Name of the Kinesis Analytics Application.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Output destination configuration of the application. See Outputs below for more details.
     * 
     */
    @InputImport(name="outputs")
      private final @Nullable Input<List<AnalyticsApplicationOutputArgs>> outputs;

    public Input<List<AnalyticsApplicationOutputArgs>> getOutputs() {
        return this.outputs == null ? Input.empty() : this.outputs;
    }

    /**
     * An S3 Reference Data Source for the application.
     * See Reference Data Sources below for more details.
     * 
     */
    @InputImport(name="referenceDataSources")
      private final @Nullable Input<AnalyticsApplicationReferenceDataSourcesArgs> referenceDataSources;

    public Input<AnalyticsApplicationReferenceDataSourcesArgs> getReferenceDataSources() {
        return this.referenceDataSources == null ? Input.empty() : this.referenceDataSources;
    }

    /**
     * Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `starting_position` must be configured.
     * To modify an application's starting position, first stop the application by setting `start_application = false`, then update `starting_position` and set `start_application = true`.
     * 
     */
    @InputImport(name="startApplication")
      private final @Nullable Input<Boolean> startApplication;

    public Input<Boolean> getStartApplication() {
        return this.startApplication == null ? Input.empty() : this.startApplication;
    }

    /**
     * Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public AnalyticsApplicationArgs(
        @Nullable Input<AnalyticsApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions,
        @Nullable Input<String> code,
        @Nullable Input<String> description,
        @Nullable Input<AnalyticsApplicationInputsArgs> inputs,
        @Nullable Input<String> name,
        @Nullable Input<List<AnalyticsApplicationOutputArgs>> outputs,
        @Nullable Input<AnalyticsApplicationReferenceDataSourcesArgs> referenceDataSources,
        @Nullable Input<Boolean> startApplication,
        @Nullable Input<Map<String,String>> tags) {
        this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
        this.code = code;
        this.description = description;
        this.inputs = inputs;
        this.name = name;
        this.outputs = outputs;
        this.referenceDataSources = referenceDataSources;
        this.startApplication = startApplication;
        this.tags = tags;
    }

    private AnalyticsApplicationArgs() {
        this.cloudwatchLoggingOptions = Input.empty();
        this.code = Input.empty();
        this.description = Input.empty();
        this.inputs = Input.empty();
        this.name = Input.empty();
        this.outputs = Input.empty();
        this.referenceDataSources = Input.empty();
        this.startApplication = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyticsApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<AnalyticsApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;
        private @Nullable Input<String> code;
        private @Nullable Input<String> description;
        private @Nullable Input<AnalyticsApplicationInputsArgs> inputs;
        private @Nullable Input<String> name;
        private @Nullable Input<List<AnalyticsApplicationOutputArgs>> outputs;
        private @Nullable Input<AnalyticsApplicationReferenceDataSourcesArgs> referenceDataSources;
        private @Nullable Input<Boolean> startApplication;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(AnalyticsApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.code = defaults.code;
    	      this.description = defaults.description;
    	      this.inputs = defaults.inputs;
    	      this.name = defaults.name;
    	      this.outputs = defaults.outputs;
    	      this.referenceDataSources = defaults.referenceDataSources;
    	      this.startApplication = defaults.startApplication;
    	      this.tags = defaults.tags;
        }

        public Builder setCloudwatchLoggingOptions(@Nullable Input<AnalyticsApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }

        public Builder setCloudwatchLoggingOptions(@Nullable AnalyticsApplicationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = Input.ofNullable(cloudwatchLoggingOptions);
            return this;
        }

        public Builder setCode(@Nullable Input<String> code) {
            this.code = code;
            return this;
        }

        public Builder setCode(@Nullable String code) {
            this.code = Input.ofNullable(code);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setInputs(@Nullable Input<AnalyticsApplicationInputsArgs> inputs) {
            this.inputs = inputs;
            return this;
        }

        public Builder setInputs(@Nullable AnalyticsApplicationInputsArgs inputs) {
            this.inputs = Input.ofNullable(inputs);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setOutputs(@Nullable Input<List<AnalyticsApplicationOutputArgs>> outputs) {
            this.outputs = outputs;
            return this;
        }

        public Builder setOutputs(@Nullable List<AnalyticsApplicationOutputArgs> outputs) {
            this.outputs = Input.ofNullable(outputs);
            return this;
        }

        public Builder setReferenceDataSources(@Nullable Input<AnalyticsApplicationReferenceDataSourcesArgs> referenceDataSources) {
            this.referenceDataSources = referenceDataSources;
            return this;
        }

        public Builder setReferenceDataSources(@Nullable AnalyticsApplicationReferenceDataSourcesArgs referenceDataSources) {
            this.referenceDataSources = Input.ofNullable(referenceDataSources);
            return this;
        }

        public Builder setStartApplication(@Nullable Input<Boolean> startApplication) {
            this.startApplication = startApplication;
            return this;
        }

        public Builder setStartApplication(@Nullable Boolean startApplication) {
            this.startApplication = Input.ofNullable(startApplication);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public AnalyticsApplicationArgs build() {
            return new AnalyticsApplicationArgs(cloudwatchLoggingOptions, code, description, inputs, name, outputs, referenceDataSources, startApplication, tags);
        }
    }
}
