// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesis;

import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationCloudwatchLoggingOptionsArgs;
import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsArgs;
import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationOutputArgs;
import io.pulumi.aws.kinesis.inputs.AnalyticsApplicationReferenceDataSourcesArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AnalyticsApplicationArgs extends io.pulumi.resources.ResourceArgs {

    public static final AnalyticsApplicationArgs Empty = new AnalyticsApplicationArgs();

    /**
     * The CloudWatch log stream options to monitor application errors.
     * See CloudWatch Logging Options below for more details.
     * 
     */
    @Import(name="cloudwatchLoggingOptions")
      private final @Nullable Output<AnalyticsApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    public Output<AnalyticsApplicationCloudwatchLoggingOptionsArgs> getCloudwatchLoggingOptions() {
        return this.cloudwatchLoggingOptions == null ? Output.empty() : this.cloudwatchLoggingOptions;
    }

    /**
     * SQL Code to transform input data, and generate output.
     * 
     */
    @Import(name="code")
      private final @Nullable Output<String> code;

    public Output<String> getCode() {
        return this.code == null ? Output.empty() : this.code;
    }

    /**
     * Description of the application.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Input configuration of the application. See Inputs below for more details.
     * 
     */
    @Import(name="inputs")
      private final @Nullable Output<AnalyticsApplicationInputsArgs> inputs;

    public Output<AnalyticsApplicationInputsArgs> getInputs() {
        return this.inputs == null ? Output.empty() : this.inputs;
    }

    /**
     * Name of the Kinesis Analytics Application.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Output destination configuration of the application. See Outputs below for more details.
     * 
     */
    @Import(name="outputs")
      private final @Nullable Output<List<AnalyticsApplicationOutputArgs>> outputs;

    public Output<List<AnalyticsApplicationOutputArgs>> getOutputs() {
        return this.outputs == null ? Output.empty() : this.outputs;
    }

    /**
     * An S3 Reference Data Source for the application.
     * See Reference Data Sources below for more details.
     * 
     */
    @Import(name="referenceDataSources")
      private final @Nullable Output<AnalyticsApplicationReferenceDataSourcesArgs> referenceDataSources;

    public Output<AnalyticsApplicationReferenceDataSourcesArgs> getReferenceDataSources() {
        return this.referenceDataSources == null ? Output.empty() : this.referenceDataSources;
    }

    /**
     * Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `starting_position` must be configured.
     * To modify an application's starting position, first stop the application by setting `start_application = false`, then update `starting_position` and set `start_application = true`.
     * 
     */
    @Import(name="startApplication")
      private final @Nullable Output<Boolean> startApplication;

    public Output<Boolean> getStartApplication() {
        return this.startApplication == null ? Output.empty() : this.startApplication;
    }

    /**
     * Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public AnalyticsApplicationArgs(
        @Nullable Output<AnalyticsApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions,
        @Nullable Output<String> code,
        @Nullable Output<String> description,
        @Nullable Output<AnalyticsApplicationInputsArgs> inputs,
        @Nullable Output<String> name,
        @Nullable Output<List<AnalyticsApplicationOutputArgs>> outputs,
        @Nullable Output<AnalyticsApplicationReferenceDataSourcesArgs> referenceDataSources,
        @Nullable Output<Boolean> startApplication,
        @Nullable Output<Map<String,String>> tags) {
        this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
        this.code = code;
        this.description = description;
        this.inputs = inputs;
        this.name = name;
        this.outputs = outputs;
        this.referenceDataSources = referenceDataSources;
        this.startApplication = startApplication;
        this.tags = tags;
    }

    private AnalyticsApplicationArgs() {
        this.cloudwatchLoggingOptions = Output.empty();
        this.code = Output.empty();
        this.description = Output.empty();
        this.inputs = Output.empty();
        this.name = Output.empty();
        this.outputs = Output.empty();
        this.referenceDataSources = Output.empty();
        this.startApplication = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyticsApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AnalyticsApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;
        private @Nullable Output<String> code;
        private @Nullable Output<String> description;
        private @Nullable Output<AnalyticsApplicationInputsArgs> inputs;
        private @Nullable Output<String> name;
        private @Nullable Output<List<AnalyticsApplicationOutputArgs>> outputs;
        private @Nullable Output<AnalyticsApplicationReferenceDataSourcesArgs> referenceDataSources;
        private @Nullable Output<Boolean> startApplication;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(AnalyticsApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.code = defaults.code;
    	      this.description = defaults.description;
    	      this.inputs = defaults.inputs;
    	      this.name = defaults.name;
    	      this.outputs = defaults.outputs;
    	      this.referenceDataSources = defaults.referenceDataSources;
    	      this.startApplication = defaults.startApplication;
    	      this.tags = defaults.tags;
        }

        public Builder cloudwatchLoggingOptions(@Nullable Output<AnalyticsApplicationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }
        public Builder cloudwatchLoggingOptions(@Nullable AnalyticsApplicationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = Output.ofNullable(cloudwatchLoggingOptions);
            return this;
        }
        public Builder code(@Nullable Output<String> code) {
            this.code = code;
            return this;
        }
        public Builder code(@Nullable String code) {
            this.code = Output.ofNullable(code);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder inputs(@Nullable Output<AnalyticsApplicationInputsArgs> inputs) {
            this.inputs = inputs;
            return this;
        }
        public Builder inputs(@Nullable AnalyticsApplicationInputsArgs inputs) {
            this.inputs = Output.ofNullable(inputs);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder outputs(@Nullable Output<List<AnalyticsApplicationOutputArgs>> outputs) {
            this.outputs = outputs;
            return this;
        }
        public Builder outputs(@Nullable List<AnalyticsApplicationOutputArgs> outputs) {
            this.outputs = Output.ofNullable(outputs);
            return this;
        }
        public Builder outputs(AnalyticsApplicationOutputArgs... outputs) {
            return outputs(List.of(outputs));
        }
        public Builder referenceDataSources(@Nullable Output<AnalyticsApplicationReferenceDataSourcesArgs> referenceDataSources) {
            this.referenceDataSources = referenceDataSources;
            return this;
        }
        public Builder referenceDataSources(@Nullable AnalyticsApplicationReferenceDataSourcesArgs referenceDataSources) {
            this.referenceDataSources = Output.ofNullable(referenceDataSources);
            return this;
        }
        public Builder startApplication(@Nullable Output<Boolean> startApplication) {
            this.startApplication = startApplication;
            return this;
        }
        public Builder startApplication(@Nullable Boolean startApplication) {
            this.startApplication = Output.ofNullable(startApplication);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }        public AnalyticsApplicationArgs build() {
            return new AnalyticsApplicationArgs(cloudwatchLoggingOptions, code, description, inputs, name, outputs, referenceDataSources, startApplication, tags);
        }
    }
}
