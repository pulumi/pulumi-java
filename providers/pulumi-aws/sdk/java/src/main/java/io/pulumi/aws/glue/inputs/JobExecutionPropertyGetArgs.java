// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


public final class JobExecutionPropertyGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobExecutionPropertyGetArgs Empty = new JobExecutionPropertyGetArgs();

    /**
     * The maximum number of concurrent runs allowed for a job. The default is 1.
     * 
     */
    @InputImport(name="maxConcurrentRuns")
    private final @Nullable Input<Integer> maxConcurrentRuns;

    public Input<Integer> getMaxConcurrentRuns() {
        return this.maxConcurrentRuns == null ? Input.empty() : this.maxConcurrentRuns;
    }

    public JobExecutionPropertyGetArgs(@Nullable Input<Integer> maxConcurrentRuns) {
        this.maxConcurrentRuns = maxConcurrentRuns;
    }

    private JobExecutionPropertyGetArgs() {
        this.maxConcurrentRuns = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobExecutionPropertyGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> maxConcurrentRuns;

        public Builder() {
    	      // Empty
        }

        public Builder(JobExecutionPropertyGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxConcurrentRuns = defaults.maxConcurrentRuns;
        }

        public Builder setMaxConcurrentRuns(@Nullable Input<Integer> maxConcurrentRuns) {
            this.maxConcurrentRuns = maxConcurrentRuns;
            return this;
        }

        public Builder setMaxConcurrentRuns(@Nullable Integer maxConcurrentRuns) {
            this.maxConcurrentRuns = Input.ofNullable(maxConcurrentRuns);
            return this;
        }
        public JobExecutionPropertyGetArgs build() {
            return new JobExecutionPropertyGetArgs(maxConcurrentRuns);
        }
    }
}
