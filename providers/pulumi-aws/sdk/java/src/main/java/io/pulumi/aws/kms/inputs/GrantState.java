// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kms.inputs;

import io.pulumi.aws.kms.inputs.GrantConstraintGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GrantState extends io.pulumi.resources.ResourceArgs {

    public static final GrantState Empty = new GrantState();

    /**
     * A structure that you can use to allow certain operations in the grant only when the desired encryption context is present. For more information about encryption context, see [Encryption Context](http://docs.aws.amazon.com/kms/latest/developerguide/encryption-context.html).
     * 
     */
    @Import(name="constraints")
      private final @Nullable Output<List<GrantConstraintGetArgs>> constraints;

    public Output<List<GrantConstraintGetArgs>> getConstraints() {
        return this.constraints == null ? Codegen.empty() : this.constraints;
    }

    /**
     * A list of grant tokens to be used when creating the grant. See [Grant Tokens](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token) for more information about grant tokens.
     * 
     */
    @Import(name="grantCreationTokens")
      private final @Nullable Output<List<String>> grantCreationTokens;

    public Output<List<String>> getGrantCreationTokens() {
        return this.grantCreationTokens == null ? Codegen.empty() : this.grantCreationTokens;
    }

    /**
     * The unique identifier for the grant.
     * 
     */
    @Import(name="grantId")
      private final @Nullable Output<String> grantId;

    public Output<String> getGrantId() {
        return this.grantId == null ? Codegen.empty() : this.grantId;
    }

    /**
     * The grant token for the created grant. For more information, see [Grant Tokens](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token).
     * 
     */
    @Import(name="grantToken")
      private final @Nullable Output<String> grantToken;

    public Output<String> getGrantToken() {
        return this.grantToken == null ? Codegen.empty() : this.grantToken;
    }

    /**
     * The principal that is given permission to perform the operations that the grant permits in ARN format. Note that due to eventual consistency issues around IAM principals, the providers's state may not always be refreshed to reflect what is true in AWS.
     * 
     */
    @Import(name="granteePrincipal")
      private final @Nullable Output<String> granteePrincipal;

    public Output<String> getGranteePrincipal() {
        return this.granteePrincipal == null ? Codegen.empty() : this.granteePrincipal;
    }

    /**
     * The unique identifier for the customer master key (CMK) that the grant applies to. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN.
     * 
     */
    @Import(name="keyId")
      private final @Nullable Output<String> keyId;

    public Output<String> getKeyId() {
        return this.keyId == null ? Codegen.empty() : this.keyId;
    }

    /**
     * A friendly name for identifying the grant.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * A list of operations that the grant permits. The permitted values are: `Decrypt`, `Encrypt`, `GenerateDataKey`, `GenerateDataKeyWithoutPlaintext`, `ReEncryptFrom`, `ReEncryptTo`, `Sign`, `Verify`, `GetPublicKey`, `CreateGrant`, `RetireGrant`, `DescribeKey`, `GenerateDataKeyPair`, or `GenerateDataKeyPairWithoutPlaintext`.
     * 
     */
    @Import(name="operations")
      private final @Nullable Output<List<String>> operations;

    public Output<List<String>> getOperations() {
        return this.operations == null ? Codegen.empty() : this.operations;
    }

    /**
     * -(Defaults to false, Forces new resources) If set to false (the default) the grants will be revoked upon deletion, and if set to true the grants will try to be retired upon deletion. Note that retiring grants requires special permissions, hence why we default to revoking grants.
     * See [RetireGrant](https://docs.aws.amazon.com/kms/latest/APIReference/API_RetireGrant.html) for more information.
     * 
     */
    @Import(name="retireOnDelete")
      private final @Nullable Output<Boolean> retireOnDelete;

    public Output<Boolean> getRetireOnDelete() {
        return this.retireOnDelete == null ? Codegen.empty() : this.retireOnDelete;
    }

    /**
     * The principal that is given permission to retire the grant by using RetireGrant operation in ARN format. Note that due to eventual consistency issues around IAM principals, the providers's state may not always be refreshed to reflect what is true in AWS.
     * 
     */
    @Import(name="retiringPrincipal")
      private final @Nullable Output<String> retiringPrincipal;

    public Output<String> getRetiringPrincipal() {
        return this.retiringPrincipal == null ? Codegen.empty() : this.retiringPrincipal;
    }

    public GrantState(
        @Nullable Output<List<GrantConstraintGetArgs>> constraints,
        @Nullable Output<List<String>> grantCreationTokens,
        @Nullable Output<String> grantId,
        @Nullable Output<String> grantToken,
        @Nullable Output<String> granteePrincipal,
        @Nullable Output<String> keyId,
        @Nullable Output<String> name,
        @Nullable Output<List<String>> operations,
        @Nullable Output<Boolean> retireOnDelete,
        @Nullable Output<String> retiringPrincipal) {
        this.constraints = constraints;
        this.grantCreationTokens = grantCreationTokens;
        this.grantId = grantId;
        this.grantToken = grantToken;
        this.granteePrincipal = granteePrincipal;
        this.keyId = keyId;
        this.name = name;
        this.operations = operations;
        this.retireOnDelete = retireOnDelete;
        this.retiringPrincipal = retiringPrincipal;
    }

    private GrantState() {
        this.constraints = Codegen.empty();
        this.grantCreationTokens = Codegen.empty();
        this.grantId = Codegen.empty();
        this.grantToken = Codegen.empty();
        this.granteePrincipal = Codegen.empty();
        this.keyId = Codegen.empty();
        this.name = Codegen.empty();
        this.operations = Codegen.empty();
        this.retireOnDelete = Codegen.empty();
        this.retiringPrincipal = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GrantState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<GrantConstraintGetArgs>> constraints;
        private @Nullable Output<List<String>> grantCreationTokens;
        private @Nullable Output<String> grantId;
        private @Nullable Output<String> grantToken;
        private @Nullable Output<String> granteePrincipal;
        private @Nullable Output<String> keyId;
        private @Nullable Output<String> name;
        private @Nullable Output<List<String>> operations;
        private @Nullable Output<Boolean> retireOnDelete;
        private @Nullable Output<String> retiringPrincipal;

        public Builder() {
    	      // Empty
        }

        public Builder(GrantState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.constraints = defaults.constraints;
    	      this.grantCreationTokens = defaults.grantCreationTokens;
    	      this.grantId = defaults.grantId;
    	      this.grantToken = defaults.grantToken;
    	      this.granteePrincipal = defaults.granteePrincipal;
    	      this.keyId = defaults.keyId;
    	      this.name = defaults.name;
    	      this.operations = defaults.operations;
    	      this.retireOnDelete = defaults.retireOnDelete;
    	      this.retiringPrincipal = defaults.retiringPrincipal;
        }

        public Builder constraints(@Nullable Output<List<GrantConstraintGetArgs>> constraints) {
            this.constraints = constraints;
            return this;
        }
        public Builder constraints(@Nullable List<GrantConstraintGetArgs> constraints) {
            this.constraints = Codegen.ofNullable(constraints);
            return this;
        }
        public Builder constraints(GrantConstraintGetArgs... constraints) {
            return constraints(List.of(constraints));
        }
        public Builder grantCreationTokens(@Nullable Output<List<String>> grantCreationTokens) {
            this.grantCreationTokens = grantCreationTokens;
            return this;
        }
        public Builder grantCreationTokens(@Nullable List<String> grantCreationTokens) {
            this.grantCreationTokens = Codegen.ofNullable(grantCreationTokens);
            return this;
        }
        public Builder grantCreationTokens(String... grantCreationTokens) {
            return grantCreationTokens(List.of(grantCreationTokens));
        }
        public Builder grantId(@Nullable Output<String> grantId) {
            this.grantId = grantId;
            return this;
        }
        public Builder grantId(@Nullable String grantId) {
            this.grantId = Codegen.ofNullable(grantId);
            return this;
        }
        public Builder grantToken(@Nullable Output<String> grantToken) {
            this.grantToken = grantToken;
            return this;
        }
        public Builder grantToken(@Nullable String grantToken) {
            this.grantToken = Codegen.ofNullable(grantToken);
            return this;
        }
        public Builder granteePrincipal(@Nullable Output<String> granteePrincipal) {
            this.granteePrincipal = granteePrincipal;
            return this;
        }
        public Builder granteePrincipal(@Nullable String granteePrincipal) {
            this.granteePrincipal = Codegen.ofNullable(granteePrincipal);
            return this;
        }
        public Builder keyId(@Nullable Output<String> keyId) {
            this.keyId = keyId;
            return this;
        }
        public Builder keyId(@Nullable String keyId) {
            this.keyId = Codegen.ofNullable(keyId);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder operations(@Nullable Output<List<String>> operations) {
            this.operations = operations;
            return this;
        }
        public Builder operations(@Nullable List<String> operations) {
            this.operations = Codegen.ofNullable(operations);
            return this;
        }
        public Builder operations(String... operations) {
            return operations(List.of(operations));
        }
        public Builder retireOnDelete(@Nullable Output<Boolean> retireOnDelete) {
            this.retireOnDelete = retireOnDelete;
            return this;
        }
        public Builder retireOnDelete(@Nullable Boolean retireOnDelete) {
            this.retireOnDelete = Codegen.ofNullable(retireOnDelete);
            return this;
        }
        public Builder retiringPrincipal(@Nullable Output<String> retiringPrincipal) {
            this.retiringPrincipal = retiringPrincipal;
            return this;
        }
        public Builder retiringPrincipal(@Nullable String retiringPrincipal) {
            this.retiringPrincipal = Codegen.ofNullable(retiringPrincipal);
            return this;
        }        public GrantState build() {
            return new GrantState(constraints, grantCreationTokens, grantId, grantToken, granteePrincipal, keyId, name, operations, retireOnDelete, retiringPrincipal);
        }
    }
}
