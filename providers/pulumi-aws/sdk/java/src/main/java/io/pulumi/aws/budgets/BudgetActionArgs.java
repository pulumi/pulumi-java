// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.budgets;

import io.pulumi.aws.budgets.inputs.BudgetActionActionThresholdArgs;
import io.pulumi.aws.budgets.inputs.BudgetActionDefinitionArgs;
import io.pulumi.aws.budgets.inputs.BudgetActionSubscriberArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BudgetActionArgs extends io.pulumi.resources.ResourceArgs {

    public static final BudgetActionArgs Empty = new BudgetActionArgs();

    /**
     * The ID of the target account for budget. Will use current user's account_id by default if omitted.
     * 
     */
    @InputImport(name="accountId")
    private final @Nullable Input<String> accountId;

    public Input<String> getAccountId() {
        return this.accountId == null ? Input.empty() : this.accountId;
    }

    /**
     * The trigger threshold of the action. See Action Threshold.
     * 
     */
    @InputImport(name="actionThreshold", required=true)
    private final Input<BudgetActionActionThresholdArgs> actionThreshold;

    public Input<BudgetActionActionThresholdArgs> getActionThreshold() {
        return this.actionThreshold;
    }

    /**
     * The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
     * 
     */
    @InputImport(name="actionType", required=true)
    private final Input<String> actionType;

    public Input<String> getActionType() {
        return this.actionType;
    }

    /**
     * This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
     * 
     */
    @InputImport(name="approvalModel", required=true)
    private final Input<String> approvalModel;

    public Input<String> getApprovalModel() {
        return this.approvalModel;
    }

    /**
     * The name of a budget.
     * 
     */
    @InputImport(name="budgetName", required=true)
    private final Input<String> budgetName;

    public Input<String> getBudgetName() {
        return this.budgetName;
    }

    /**
     * Specifies all of the type-specific parameters. See Definition.
     * 
     */
    @InputImport(name="definition", required=true)
    private final Input<BudgetActionDefinitionArgs> definition;

    public Input<BudgetActionDefinitionArgs> getDefinition() {
        return this.definition;
    }

    /**
     * The role passed for action execution and reversion. Roles and actions must be in the same account.
     * 
     */
    @InputImport(name="executionRoleArn", required=true)
    private final Input<String> executionRoleArn;

    public Input<String> getExecutionRoleArn() {
        return this.executionRoleArn;
    }

    /**
     * The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
     * 
     */
    @InputImport(name="notificationType", required=true)
    private final Input<String> notificationType;

    public Input<String> getNotificationType() {
        return this.notificationType;
    }

    /**
     * A list of subscribers. See Subscriber.
     * 
     */
    @InputImport(name="subscribers", required=true)
    private final Input<List<BudgetActionSubscriberArgs>> subscribers;

    public Input<List<BudgetActionSubscriberArgs>> getSubscribers() {
        return this.subscribers;
    }

    public BudgetActionArgs(
        @Nullable Input<String> accountId,
        Input<BudgetActionActionThresholdArgs> actionThreshold,
        Input<String> actionType,
        Input<String> approvalModel,
        Input<String> budgetName,
        Input<BudgetActionDefinitionArgs> definition,
        Input<String> executionRoleArn,
        Input<String> notificationType,
        Input<List<BudgetActionSubscriberArgs>> subscribers) {
        this.accountId = accountId;
        this.actionThreshold = Objects.requireNonNull(actionThreshold, "expected parameter 'actionThreshold' to be non-null");
        this.actionType = Objects.requireNonNull(actionType, "expected parameter 'actionType' to be non-null");
        this.approvalModel = Objects.requireNonNull(approvalModel, "expected parameter 'approvalModel' to be non-null");
        this.budgetName = Objects.requireNonNull(budgetName, "expected parameter 'budgetName' to be non-null");
        this.definition = Objects.requireNonNull(definition, "expected parameter 'definition' to be non-null");
        this.executionRoleArn = Objects.requireNonNull(executionRoleArn, "expected parameter 'executionRoleArn' to be non-null");
        this.notificationType = Objects.requireNonNull(notificationType, "expected parameter 'notificationType' to be non-null");
        this.subscribers = Objects.requireNonNull(subscribers, "expected parameter 'subscribers' to be non-null");
    }

    private BudgetActionArgs() {
        this.accountId = Input.empty();
        this.actionThreshold = Input.empty();
        this.actionType = Input.empty();
        this.approvalModel = Input.empty();
        this.budgetName = Input.empty();
        this.definition = Input.empty();
        this.executionRoleArn = Input.empty();
        this.notificationType = Input.empty();
        this.subscribers = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accountId;
        private Input<BudgetActionActionThresholdArgs> actionThreshold;
        private Input<String> actionType;
        private Input<String> approvalModel;
        private Input<String> budgetName;
        private Input<BudgetActionDefinitionArgs> definition;
        private Input<String> executionRoleArn;
        private Input<String> notificationType;
        private Input<List<BudgetActionSubscriberArgs>> subscribers;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetActionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.actionThreshold = defaults.actionThreshold;
    	      this.actionType = defaults.actionType;
    	      this.approvalModel = defaults.approvalModel;
    	      this.budgetName = defaults.budgetName;
    	      this.definition = defaults.definition;
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.notificationType = defaults.notificationType;
    	      this.subscribers = defaults.subscribers;
        }

        public Builder setAccountId(@Nullable Input<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder setAccountId(@Nullable String accountId) {
            this.accountId = Input.ofNullable(accountId);
            return this;
        }

        public Builder setActionThreshold(Input<BudgetActionActionThresholdArgs> actionThreshold) {
            this.actionThreshold = Objects.requireNonNull(actionThreshold);
            return this;
        }

        public Builder setActionThreshold(BudgetActionActionThresholdArgs actionThreshold) {
            this.actionThreshold = Input.of(Objects.requireNonNull(actionThreshold));
            return this;
        }

        public Builder setActionType(Input<String> actionType) {
            this.actionType = Objects.requireNonNull(actionType);
            return this;
        }

        public Builder setActionType(String actionType) {
            this.actionType = Input.of(Objects.requireNonNull(actionType));
            return this;
        }

        public Builder setApprovalModel(Input<String> approvalModel) {
            this.approvalModel = Objects.requireNonNull(approvalModel);
            return this;
        }

        public Builder setApprovalModel(String approvalModel) {
            this.approvalModel = Input.of(Objects.requireNonNull(approvalModel));
            return this;
        }

        public Builder setBudgetName(Input<String> budgetName) {
            this.budgetName = Objects.requireNonNull(budgetName);
            return this;
        }

        public Builder setBudgetName(String budgetName) {
            this.budgetName = Input.of(Objects.requireNonNull(budgetName));
            return this;
        }

        public Builder setDefinition(Input<BudgetActionDefinitionArgs> definition) {
            this.definition = Objects.requireNonNull(definition);
            return this;
        }

        public Builder setDefinition(BudgetActionDefinitionArgs definition) {
            this.definition = Input.of(Objects.requireNonNull(definition));
            return this;
        }

        public Builder setExecutionRoleArn(Input<String> executionRoleArn) {
            this.executionRoleArn = Objects.requireNonNull(executionRoleArn);
            return this;
        }

        public Builder setExecutionRoleArn(String executionRoleArn) {
            this.executionRoleArn = Input.of(Objects.requireNonNull(executionRoleArn));
            return this;
        }

        public Builder setNotificationType(Input<String> notificationType) {
            this.notificationType = Objects.requireNonNull(notificationType);
            return this;
        }

        public Builder setNotificationType(String notificationType) {
            this.notificationType = Input.of(Objects.requireNonNull(notificationType));
            return this;
        }

        public Builder setSubscribers(Input<List<BudgetActionSubscriberArgs>> subscribers) {
            this.subscribers = Objects.requireNonNull(subscribers);
            return this;
        }

        public Builder setSubscribers(List<BudgetActionSubscriberArgs> subscribers) {
            this.subscribers = Input.of(Objects.requireNonNull(subscribers));
            return this;
        }
        public BudgetActionArgs build() {
            return new BudgetActionArgs(accountId, actionThreshold, actionType, approvalModel, budgetName, definition, executionRoleArn, notificationType, subscribers);
        }
    }
}
