// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class KeyPairArgs extends io.pulumi.resources.ResourceArgs {

    public static final KeyPairArgs Empty = new KeyPairArgs();

    /**
     * The name for the key pair.
     * 
     */
    @InputImport(name="keyName")
      private final @Nullable Output<String> keyName;

    public Output<String> getKeyName() {
        return this.keyName == null ? Output.empty() : this.keyName;
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `key_name`.
     * 
     */
    @InputImport(name="keyNamePrefix")
      private final @Nullable Output<String> keyNamePrefix;

    public Output<String> getKeyNamePrefix() {
        return this.keyNamePrefix == null ? Output.empty() : this.keyNamePrefix;
    }

    /**
     * The public key material.
     * 
     */
    @InputImport(name="publicKey", required=true)
      private final Output<String> publicKey;

    public Output<String> getPublicKey() {
        return this.publicKey;
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    public KeyPairArgs(
        @Nullable Output<String> keyName,
        @Nullable Output<String> keyNamePrefix,
        Output<String> publicKey,
        @Nullable Output<Map<String,String>> tags) {
        this.keyName = keyName;
        this.keyNamePrefix = keyNamePrefix;
        this.publicKey = Objects.requireNonNull(publicKey, "expected parameter 'publicKey' to be non-null");
        this.tags = tags;
    }

    private KeyPairArgs() {
        this.keyName = Output.empty();
        this.keyNamePrefix = Output.empty();
        this.publicKey = Output.empty();
        this.tags = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyPairArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> keyName;
        private @Nullable Output<String> keyNamePrefix;
        private Output<String> publicKey;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyPairArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keyName = defaults.keyName;
    	      this.keyNamePrefix = defaults.keyNamePrefix;
    	      this.publicKey = defaults.publicKey;
    	      this.tags = defaults.tags;
        }

        public Builder keyName(@Nullable Output<String> keyName) {
            this.keyName = keyName;
            return this;
        }

        public Builder keyName(@Nullable String keyName) {
            this.keyName = Output.ofNullable(keyName);
            return this;
        }

        public Builder keyNamePrefix(@Nullable Output<String> keyNamePrefix) {
            this.keyNamePrefix = keyNamePrefix;
            return this;
        }

        public Builder keyNamePrefix(@Nullable String keyNamePrefix) {
            this.keyNamePrefix = Output.ofNullable(keyNamePrefix);
            return this;
        }

        public Builder publicKey(Output<String> publicKey) {
            this.publicKey = Objects.requireNonNull(publicKey);
            return this;
        }

        public Builder publicKey(String publicKey) {
            this.publicKey = Output.of(Objects.requireNonNull(publicKey));
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public KeyPairArgs build() {
            return new KeyPairArgs(keyName, keyNamePrefix, publicKey, tags);
        }
    }
}
