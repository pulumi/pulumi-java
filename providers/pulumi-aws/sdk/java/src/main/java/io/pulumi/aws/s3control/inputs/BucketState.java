// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.s3control.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BucketState extends io.pulumi.resources.ResourceArgs {

    public static final BucketState Empty = new BucketState();

    /**
     * Amazon Resource Name (ARN) of the bucket.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Name of the bucket.
     * 
     */
    @InputImport(name="bucket")
    private final @Nullable Input<String> bucket;

    public Input<String> getBucket() {
        return this.bucket == null ? Input.empty() : this.bucket;
    }

    /**
     * UTC creation date in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     * 
     */
    @InputImport(name="creationDate")
    private final @Nullable Input<String> creationDate;

    public Input<String> getCreationDate() {
        return this.creationDate == null ? Input.empty() : this.creationDate;
    }

    /**
     * Identifier of the Outpost to contain this bucket.
     * 
     */
    @InputImport(name="outpostId")
    private final @Nullable Input<String> outpostId;

    public Input<String> getOutpostId() {
        return this.outpostId == null ? Input.empty() : this.outpostId;
    }

    /**
     * Boolean whether Public Access Block is enabled.
     * 
     */
    @InputImport(name="publicAccessBlockEnabled")
    private final @Nullable Input<Boolean> publicAccessBlockEnabled;

    public Input<Boolean> getPublicAccessBlockEnabled() {
        return this.publicAccessBlockEnabled == null ? Input.empty() : this.publicAccessBlockEnabled;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public BucketState(
        @Nullable Input<String> arn,
        @Nullable Input<String> bucket,
        @Nullable Input<String> creationDate,
        @Nullable Input<String> outpostId,
        @Nullable Input<Boolean> publicAccessBlockEnabled,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.bucket = bucket;
        this.creationDate = creationDate;
        this.outpostId = outpostId;
        this.publicAccessBlockEnabled = publicAccessBlockEnabled;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private BucketState() {
        this.arn = Input.empty();
        this.bucket = Input.empty();
        this.creationDate = Input.empty();
        this.outpostId = Input.empty();
        this.publicAccessBlockEnabled = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> bucket;
        private @Nullable Input<String> creationDate;
        private @Nullable Input<String> outpostId;
        private @Nullable Input<Boolean> publicAccessBlockEnabled;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.bucket = defaults.bucket;
    	      this.creationDate = defaults.creationDate;
    	      this.outpostId = defaults.outpostId;
    	      this.publicAccessBlockEnabled = defaults.publicAccessBlockEnabled;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setBucket(@Nullable Input<String> bucket) {
            this.bucket = bucket;
            return this;
        }

        public Builder setBucket(@Nullable String bucket) {
            this.bucket = Input.ofNullable(bucket);
            return this;
        }

        public Builder setCreationDate(@Nullable Input<String> creationDate) {
            this.creationDate = creationDate;
            return this;
        }

        public Builder setCreationDate(@Nullable String creationDate) {
            this.creationDate = Input.ofNullable(creationDate);
            return this;
        }

        public Builder setOutpostId(@Nullable Input<String> outpostId) {
            this.outpostId = outpostId;
            return this;
        }

        public Builder setOutpostId(@Nullable String outpostId) {
            this.outpostId = Input.ofNullable(outpostId);
            return this;
        }

        public Builder setPublicAccessBlockEnabled(@Nullable Input<Boolean> publicAccessBlockEnabled) {
            this.publicAccessBlockEnabled = publicAccessBlockEnabled;
            return this;
        }

        public Builder setPublicAccessBlockEnabled(@Nullable Boolean publicAccessBlockEnabled) {
            this.publicAccessBlockEnabled = Input.ofNullable(publicAccessBlockEnabled);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public BucketState build() {
            return new BucketState(arn, bucket, creationDate, outpostId, publicAccessBlockEnabled, tags, tagsAll);
        }
    }
}
