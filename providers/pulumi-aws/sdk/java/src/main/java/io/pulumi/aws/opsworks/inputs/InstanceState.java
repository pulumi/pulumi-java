// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.opsworks.inputs;

import io.pulumi.aws.opsworks.inputs.InstanceEbsBlockDeviceGetArgs;
import io.pulumi.aws.opsworks.inputs.InstanceEphemeralBlockDeviceGetArgs;
import io.pulumi.aws.opsworks.inputs.InstanceRootBlockDeviceGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class InstanceState extends io.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * The AWS OpsWorks agent to install.  Defaults to `"INHERIT"`.
     * 
     */
    @Import(name="agentVersion")
      private final @Nullable Output<String> agentVersion;

    public Output<String> getAgentVersion() {
        return this.agentVersion == null ? Output.empty() : this.agentVersion;
    }

    /**
     * The AMI to use for the instance.  If an AMI is specified, `os` must be `"Custom"`.
     * 
     */
    @Import(name="amiId")
      private final @Nullable Output<String> amiId;

    public Output<String> getAmiId() {
        return this.amiId == null ? Output.empty() : this.amiId;
    }

    /**
     * Machine architecture for created instances.  Can be either `"x86_64"` (the default) or `"i386"`
     * 
     */
    @Import(name="architecture")
      private final @Nullable Output<String> architecture;

    public Output<String> getArchitecture() {
        return this.architecture == null ? Output.empty() : this.architecture;
    }

    /**
     * Creates load-based or time-based instances.  If set, can be either: `"load"` or `"timer"`.
     * 
     */
    @Import(name="autoScalingType")
      private final @Nullable Output<String> autoScalingType;

    public Output<String> getAutoScalingType() {
        return this.autoScalingType == null ? Output.empty() : this.autoScalingType;
    }

    /**
     * Name of the availability zone where instances will be created
     * by default.
     * 
     */
    @Import(name="availabilityZone")
      private final @Nullable Output<String> availabilityZone;

    public Output<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Output.empty() : this.availabilityZone;
    }

    @Import(name="createdAt")
      private final @Nullable Output<String> createdAt;

    public Output<String> getCreatedAt() {
        return this.createdAt == null ? Output.empty() : this.createdAt;
    }

    @Import(name="deleteEbs")
      private final @Nullable Output<Boolean> deleteEbs;

    public Output<Boolean> getDeleteEbs() {
        return this.deleteEbs == null ? Output.empty() : this.deleteEbs;
    }

    @Import(name="deleteEip")
      private final @Nullable Output<Boolean> deleteEip;

    public Output<Boolean> getDeleteEip() {
        return this.deleteEip == null ? Output.empty() : this.deleteEip;
    }

    /**
     * Additional EBS block devices to attach to the
     * instance.  See Block Devices below for details.
     * 
     */
    @Import(name="ebsBlockDevices")
      private final @Nullable Output<List<InstanceEbsBlockDeviceGetArgs>> ebsBlockDevices;

    public Output<List<InstanceEbsBlockDeviceGetArgs>> getEbsBlockDevices() {
        return this.ebsBlockDevices == null ? Output.empty() : this.ebsBlockDevices;
    }

    /**
     * If true, the launched EC2 instance will be EBS-optimized.
     * 
     */
    @Import(name="ebsOptimized")
      private final @Nullable Output<Boolean> ebsOptimized;

    public Output<Boolean> getEbsOptimized() {
        return this.ebsOptimized == null ? Output.empty() : this.ebsOptimized;
    }

    /**
     * EC2 instance ID
     * 
     */
    @Import(name="ec2InstanceId")
      private final @Nullable Output<String> ec2InstanceId;

    public Output<String> getEc2InstanceId() {
        return this.ec2InstanceId == null ? Output.empty() : this.ec2InstanceId;
    }

    @Import(name="ecsClusterArn")
      private final @Nullable Output<String> ecsClusterArn;

    public Output<String> getEcsClusterArn() {
        return this.ecsClusterArn == null ? Output.empty() : this.ecsClusterArn;
    }

    @Import(name="elasticIp")
      private final @Nullable Output<String> elasticIp;

    public Output<String> getElasticIp() {
        return this.elasticIp == null ? Output.empty() : this.elasticIp;
    }

    /**
     * Customize Ephemeral (also known as
     * "Instance Store") volumes on the instance. See Block Devices below for details.
     * 
     */
    @Import(name="ephemeralBlockDevices")
      private final @Nullable Output<List<InstanceEphemeralBlockDeviceGetArgs>> ephemeralBlockDevices;

    public Output<List<InstanceEphemeralBlockDeviceGetArgs>> getEphemeralBlockDevices() {
        return this.ephemeralBlockDevices == null ? Output.empty() : this.ephemeralBlockDevices;
    }

    /**
     * The instance's host name.
     * 
     */
    @Import(name="hostname")
      private final @Nullable Output<String> hostname;

    public Output<String> getHostname() {
        return this.hostname == null ? Output.empty() : this.hostname;
    }

    @Import(name="infrastructureClass")
      private final @Nullable Output<String> infrastructureClass;

    public Output<String> getInfrastructureClass() {
        return this.infrastructureClass == null ? Output.empty() : this.infrastructureClass;
    }

    /**
     * Controls where to install OS and package updates when the instance boots.  Defaults to `true`.
     * 
     */
    @Import(name="installUpdatesOnBoot")
      private final @Nullable Output<Boolean> installUpdatesOnBoot;

    public Output<Boolean> getInstallUpdatesOnBoot() {
        return this.installUpdatesOnBoot == null ? Output.empty() : this.installUpdatesOnBoot;
    }

    @Import(name="instanceProfileArn")
      private final @Nullable Output<String> instanceProfileArn;

    public Output<String> getInstanceProfileArn() {
        return this.instanceProfileArn == null ? Output.empty() : this.instanceProfileArn;
    }

    /**
     * The type of instance to start
     * 
     */
    @Import(name="instanceType")
      private final @Nullable Output<String> instanceType;

    public Output<String> getInstanceType() {
        return this.instanceType == null ? Output.empty() : this.instanceType;
    }

    @Import(name="lastServiceErrorId")
      private final @Nullable Output<String> lastServiceErrorId;

    public Output<String> getLastServiceErrorId() {
        return this.lastServiceErrorId == null ? Output.empty() : this.lastServiceErrorId;
    }

    /**
     * The ids of the layers the instance will belong to.
     * 
     */
    @Import(name="layerIds")
      private final @Nullable Output<List<String>> layerIds;

    public Output<List<String>> getLayerIds() {
        return this.layerIds == null ? Output.empty() : this.layerIds;
    }

    /**
     * Name of operating system that will be installed.
     * 
     */
    @Import(name="os")
      private final @Nullable Output<String> os;

    public Output<String> getOs() {
        return this.os == null ? Output.empty() : this.os;
    }

    @Import(name="platform")
      private final @Nullable Output<String> platform;

    public Output<String> getPlatform() {
        return this.platform == null ? Output.empty() : this.platform;
    }

    /**
     * The private DNS name assigned to the instance. Can only be
     * used inside the Amazon EC2, and only available if you've enabled DNS hostnames
     * for your VPC
     * 
     */
    @Import(name="privateDns")
      private final @Nullable Output<String> privateDns;

    public Output<String> getPrivateDns() {
        return this.privateDns == null ? Output.empty() : this.privateDns;
    }

    /**
     * The private IP address assigned to the instance
     * 
     */
    @Import(name="privateIp")
      private final @Nullable Output<String> privateIp;

    public Output<String> getPrivateIp() {
        return this.privateIp == null ? Output.empty() : this.privateIp;
    }

    /**
     * The public DNS name assigned to the instance. For EC2-VPC, this
     * is only available if you've enabled DNS hostnames for your VPC
     * 
     */
    @Import(name="publicDns")
      private final @Nullable Output<String> publicDns;

    public Output<String> getPublicDns() {
        return this.publicDns == null ? Output.empty() : this.publicDns;
    }

    /**
     * The public IP address assigned to the instance, if applicable.
     * 
     */
    @Import(name="publicIp")
      private final @Nullable Output<String> publicIp;

    public Output<String> getPublicIp() {
        return this.publicIp == null ? Output.empty() : this.publicIp;
    }

    @Import(name="registeredBy")
      private final @Nullable Output<String> registeredBy;

    public Output<String> getRegisteredBy() {
        return this.registeredBy == null ? Output.empty() : this.registeredBy;
    }

    @Import(name="reportedAgentVersion")
      private final @Nullable Output<String> reportedAgentVersion;

    public Output<String> getReportedAgentVersion() {
        return this.reportedAgentVersion == null ? Output.empty() : this.reportedAgentVersion;
    }

    @Import(name="reportedOsFamily")
      private final @Nullable Output<String> reportedOsFamily;

    public Output<String> getReportedOsFamily() {
        return this.reportedOsFamily == null ? Output.empty() : this.reportedOsFamily;
    }

    @Import(name="reportedOsName")
      private final @Nullable Output<String> reportedOsName;

    public Output<String> getReportedOsName() {
        return this.reportedOsName == null ? Output.empty() : this.reportedOsName;
    }

    @Import(name="reportedOsVersion")
      private final @Nullable Output<String> reportedOsVersion;

    public Output<String> getReportedOsVersion() {
        return this.reportedOsVersion == null ? Output.empty() : this.reportedOsVersion;
    }

    /**
     * Customize details about the root block
     * device of the instance. See Block Devices below for details.
     * 
     */
    @Import(name="rootBlockDevices")
      private final @Nullable Output<List<InstanceRootBlockDeviceGetArgs>> rootBlockDevices;

    public Output<List<InstanceRootBlockDeviceGetArgs>> getRootBlockDevices() {
        return this.rootBlockDevices == null ? Output.empty() : this.rootBlockDevices;
    }

    /**
     * Name of the type of root device instances will have by default.  Can be either `"ebs"` or `"instance-store"`
     * 
     */
    @Import(name="rootDeviceType")
      private final @Nullable Output<String> rootDeviceType;

    public Output<String> getRootDeviceType() {
        return this.rootDeviceType == null ? Output.empty() : this.rootDeviceType;
    }

    @Import(name="rootDeviceVolumeId")
      private final @Nullable Output<String> rootDeviceVolumeId;

    public Output<String> getRootDeviceVolumeId() {
        return this.rootDeviceVolumeId == null ? Output.empty() : this.rootDeviceVolumeId;
    }

    /**
     * The associated security groups.
     * 
     */
    @Import(name="securityGroupIds")
      private final @Nullable Output<List<String>> securityGroupIds;

    public Output<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds == null ? Output.empty() : this.securityGroupIds;
    }

    @Import(name="sshHostDsaKeyFingerprint")
      private final @Nullable Output<String> sshHostDsaKeyFingerprint;

    public Output<String> getSshHostDsaKeyFingerprint() {
        return this.sshHostDsaKeyFingerprint == null ? Output.empty() : this.sshHostDsaKeyFingerprint;
    }

    @Import(name="sshHostRsaKeyFingerprint")
      private final @Nullable Output<String> sshHostRsaKeyFingerprint;

    public Output<String> getSshHostRsaKeyFingerprint() {
        return this.sshHostRsaKeyFingerprint == null ? Output.empty() : this.sshHostRsaKeyFingerprint;
    }

    /**
     * Name of the SSH keypair that instances will have by default.
     * 
     */
    @Import(name="sshKeyName")
      private final @Nullable Output<String> sshKeyName;

    public Output<String> getSshKeyName() {
        return this.sshKeyName == null ? Output.empty() : this.sshKeyName;
    }

    /**
     * The id of the stack the instance will belong to.
     * 
     */
    @Import(name="stackId")
      private final @Nullable Output<String> stackId;

    public Output<String> getStackId() {
        return this.stackId == null ? Output.empty() : this.stackId;
    }

    /**
     * The desired state of the instance.  Can be either `"running"` or `"stopped"`.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> getState() {
        return this.state == null ? Output.empty() : this.state;
    }

    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> getStatus() {
        return this.status == null ? Output.empty() : this.status;
    }

    /**
     * Subnet ID to attach to
     * 
     */
    @Import(name="subnetId")
      private final @Nullable Output<String> subnetId;

    public Output<String> getSubnetId() {
        return this.subnetId == null ? Output.empty() : this.subnetId;
    }

    /**
     * Instance tenancy to use. Can be one of `"default"`, `"dedicated"` or `"host"`
     * 
     */
    @Import(name="tenancy")
      private final @Nullable Output<String> tenancy;

    public Output<String> getTenancy() {
        return this.tenancy == null ? Output.empty() : this.tenancy;
    }

    /**
     * Keyword to choose what virtualization mode created instances
     * will use. Can be either `"paravirtual"` or `"hvm"`.
     * 
     */
    @Import(name="virtualizationType")
      private final @Nullable Output<String> virtualizationType;

    public Output<String> getVirtualizationType() {
        return this.virtualizationType == null ? Output.empty() : this.virtualizationType;
    }

    public InstanceState(
        @Nullable Output<String> agentVersion,
        @Nullable Output<String> amiId,
        @Nullable Output<String> architecture,
        @Nullable Output<String> autoScalingType,
        @Nullable Output<String> availabilityZone,
        @Nullable Output<String> createdAt,
        @Nullable Output<Boolean> deleteEbs,
        @Nullable Output<Boolean> deleteEip,
        @Nullable Output<List<InstanceEbsBlockDeviceGetArgs>> ebsBlockDevices,
        @Nullable Output<Boolean> ebsOptimized,
        @Nullable Output<String> ec2InstanceId,
        @Nullable Output<String> ecsClusterArn,
        @Nullable Output<String> elasticIp,
        @Nullable Output<List<InstanceEphemeralBlockDeviceGetArgs>> ephemeralBlockDevices,
        @Nullable Output<String> hostname,
        @Nullable Output<String> infrastructureClass,
        @Nullable Output<Boolean> installUpdatesOnBoot,
        @Nullable Output<String> instanceProfileArn,
        @Nullable Output<String> instanceType,
        @Nullable Output<String> lastServiceErrorId,
        @Nullable Output<List<String>> layerIds,
        @Nullable Output<String> os,
        @Nullable Output<String> platform,
        @Nullable Output<String> privateDns,
        @Nullable Output<String> privateIp,
        @Nullable Output<String> publicDns,
        @Nullable Output<String> publicIp,
        @Nullable Output<String> registeredBy,
        @Nullable Output<String> reportedAgentVersion,
        @Nullable Output<String> reportedOsFamily,
        @Nullable Output<String> reportedOsName,
        @Nullable Output<String> reportedOsVersion,
        @Nullable Output<List<InstanceRootBlockDeviceGetArgs>> rootBlockDevices,
        @Nullable Output<String> rootDeviceType,
        @Nullable Output<String> rootDeviceVolumeId,
        @Nullable Output<List<String>> securityGroupIds,
        @Nullable Output<String> sshHostDsaKeyFingerprint,
        @Nullable Output<String> sshHostRsaKeyFingerprint,
        @Nullable Output<String> sshKeyName,
        @Nullable Output<String> stackId,
        @Nullable Output<String> state,
        @Nullable Output<String> status,
        @Nullable Output<String> subnetId,
        @Nullable Output<String> tenancy,
        @Nullable Output<String> virtualizationType) {
        this.agentVersion = agentVersion;
        this.amiId = amiId;
        this.architecture = architecture;
        this.autoScalingType = autoScalingType;
        this.availabilityZone = availabilityZone;
        this.createdAt = createdAt;
        this.deleteEbs = deleteEbs;
        this.deleteEip = deleteEip;
        this.ebsBlockDevices = ebsBlockDevices;
        this.ebsOptimized = ebsOptimized;
        this.ec2InstanceId = ec2InstanceId;
        this.ecsClusterArn = ecsClusterArn;
        this.elasticIp = elasticIp;
        this.ephemeralBlockDevices = ephemeralBlockDevices;
        this.hostname = hostname;
        this.infrastructureClass = infrastructureClass;
        this.installUpdatesOnBoot = installUpdatesOnBoot;
        this.instanceProfileArn = instanceProfileArn;
        this.instanceType = instanceType;
        this.lastServiceErrorId = lastServiceErrorId;
        this.layerIds = layerIds;
        this.os = os;
        this.platform = platform;
        this.privateDns = privateDns;
        this.privateIp = privateIp;
        this.publicDns = publicDns;
        this.publicIp = publicIp;
        this.registeredBy = registeredBy;
        this.reportedAgentVersion = reportedAgentVersion;
        this.reportedOsFamily = reportedOsFamily;
        this.reportedOsName = reportedOsName;
        this.reportedOsVersion = reportedOsVersion;
        this.rootBlockDevices = rootBlockDevices;
        this.rootDeviceType = rootDeviceType;
        this.rootDeviceVolumeId = rootDeviceVolumeId;
        this.securityGroupIds = securityGroupIds;
        this.sshHostDsaKeyFingerprint = sshHostDsaKeyFingerprint;
        this.sshHostRsaKeyFingerprint = sshHostRsaKeyFingerprint;
        this.sshKeyName = sshKeyName;
        this.stackId = stackId;
        this.state = state;
        this.status = status;
        this.subnetId = subnetId;
        this.tenancy = tenancy;
        this.virtualizationType = virtualizationType;
    }

    private InstanceState() {
        this.agentVersion = Output.empty();
        this.amiId = Output.empty();
        this.architecture = Output.empty();
        this.autoScalingType = Output.empty();
        this.availabilityZone = Output.empty();
        this.createdAt = Output.empty();
        this.deleteEbs = Output.empty();
        this.deleteEip = Output.empty();
        this.ebsBlockDevices = Output.empty();
        this.ebsOptimized = Output.empty();
        this.ec2InstanceId = Output.empty();
        this.ecsClusterArn = Output.empty();
        this.elasticIp = Output.empty();
        this.ephemeralBlockDevices = Output.empty();
        this.hostname = Output.empty();
        this.infrastructureClass = Output.empty();
        this.installUpdatesOnBoot = Output.empty();
        this.instanceProfileArn = Output.empty();
        this.instanceType = Output.empty();
        this.lastServiceErrorId = Output.empty();
        this.layerIds = Output.empty();
        this.os = Output.empty();
        this.platform = Output.empty();
        this.privateDns = Output.empty();
        this.privateIp = Output.empty();
        this.publicDns = Output.empty();
        this.publicIp = Output.empty();
        this.registeredBy = Output.empty();
        this.reportedAgentVersion = Output.empty();
        this.reportedOsFamily = Output.empty();
        this.reportedOsName = Output.empty();
        this.reportedOsVersion = Output.empty();
        this.rootBlockDevices = Output.empty();
        this.rootDeviceType = Output.empty();
        this.rootDeviceVolumeId = Output.empty();
        this.securityGroupIds = Output.empty();
        this.sshHostDsaKeyFingerprint = Output.empty();
        this.sshHostRsaKeyFingerprint = Output.empty();
        this.sshKeyName = Output.empty();
        this.stackId = Output.empty();
        this.state = Output.empty();
        this.status = Output.empty();
        this.subnetId = Output.empty();
        this.tenancy = Output.empty();
        this.virtualizationType = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> agentVersion;
        private @Nullable Output<String> amiId;
        private @Nullable Output<String> architecture;
        private @Nullable Output<String> autoScalingType;
        private @Nullable Output<String> availabilityZone;
        private @Nullable Output<String> createdAt;
        private @Nullable Output<Boolean> deleteEbs;
        private @Nullable Output<Boolean> deleteEip;
        private @Nullable Output<List<InstanceEbsBlockDeviceGetArgs>> ebsBlockDevices;
        private @Nullable Output<Boolean> ebsOptimized;
        private @Nullable Output<String> ec2InstanceId;
        private @Nullable Output<String> ecsClusterArn;
        private @Nullable Output<String> elasticIp;
        private @Nullable Output<List<InstanceEphemeralBlockDeviceGetArgs>> ephemeralBlockDevices;
        private @Nullable Output<String> hostname;
        private @Nullable Output<String> infrastructureClass;
        private @Nullable Output<Boolean> installUpdatesOnBoot;
        private @Nullable Output<String> instanceProfileArn;
        private @Nullable Output<String> instanceType;
        private @Nullable Output<String> lastServiceErrorId;
        private @Nullable Output<List<String>> layerIds;
        private @Nullable Output<String> os;
        private @Nullable Output<String> platform;
        private @Nullable Output<String> privateDns;
        private @Nullable Output<String> privateIp;
        private @Nullable Output<String> publicDns;
        private @Nullable Output<String> publicIp;
        private @Nullable Output<String> registeredBy;
        private @Nullable Output<String> reportedAgentVersion;
        private @Nullable Output<String> reportedOsFamily;
        private @Nullable Output<String> reportedOsName;
        private @Nullable Output<String> reportedOsVersion;
        private @Nullable Output<List<InstanceRootBlockDeviceGetArgs>> rootBlockDevices;
        private @Nullable Output<String> rootDeviceType;
        private @Nullable Output<String> rootDeviceVolumeId;
        private @Nullable Output<List<String>> securityGroupIds;
        private @Nullable Output<String> sshHostDsaKeyFingerprint;
        private @Nullable Output<String> sshHostRsaKeyFingerprint;
        private @Nullable Output<String> sshKeyName;
        private @Nullable Output<String> stackId;
        private @Nullable Output<String> state;
        private @Nullable Output<String> status;
        private @Nullable Output<String> subnetId;
        private @Nullable Output<String> tenancy;
        private @Nullable Output<String> virtualizationType;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentVersion = defaults.agentVersion;
    	      this.amiId = defaults.amiId;
    	      this.architecture = defaults.architecture;
    	      this.autoScalingType = defaults.autoScalingType;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.createdAt = defaults.createdAt;
    	      this.deleteEbs = defaults.deleteEbs;
    	      this.deleteEip = defaults.deleteEip;
    	      this.ebsBlockDevices = defaults.ebsBlockDevices;
    	      this.ebsOptimized = defaults.ebsOptimized;
    	      this.ec2InstanceId = defaults.ec2InstanceId;
    	      this.ecsClusterArn = defaults.ecsClusterArn;
    	      this.elasticIp = defaults.elasticIp;
    	      this.ephemeralBlockDevices = defaults.ephemeralBlockDevices;
    	      this.hostname = defaults.hostname;
    	      this.infrastructureClass = defaults.infrastructureClass;
    	      this.installUpdatesOnBoot = defaults.installUpdatesOnBoot;
    	      this.instanceProfileArn = defaults.instanceProfileArn;
    	      this.instanceType = defaults.instanceType;
    	      this.lastServiceErrorId = defaults.lastServiceErrorId;
    	      this.layerIds = defaults.layerIds;
    	      this.os = defaults.os;
    	      this.platform = defaults.platform;
    	      this.privateDns = defaults.privateDns;
    	      this.privateIp = defaults.privateIp;
    	      this.publicDns = defaults.publicDns;
    	      this.publicIp = defaults.publicIp;
    	      this.registeredBy = defaults.registeredBy;
    	      this.reportedAgentVersion = defaults.reportedAgentVersion;
    	      this.reportedOsFamily = defaults.reportedOsFamily;
    	      this.reportedOsName = defaults.reportedOsName;
    	      this.reportedOsVersion = defaults.reportedOsVersion;
    	      this.rootBlockDevices = defaults.rootBlockDevices;
    	      this.rootDeviceType = defaults.rootDeviceType;
    	      this.rootDeviceVolumeId = defaults.rootDeviceVolumeId;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.sshHostDsaKeyFingerprint = defaults.sshHostDsaKeyFingerprint;
    	      this.sshHostRsaKeyFingerprint = defaults.sshHostRsaKeyFingerprint;
    	      this.sshKeyName = defaults.sshKeyName;
    	      this.stackId = defaults.stackId;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.subnetId = defaults.subnetId;
    	      this.tenancy = defaults.tenancy;
    	      this.virtualizationType = defaults.virtualizationType;
        }

        public Builder agentVersion(@Nullable Output<String> agentVersion) {
            this.agentVersion = agentVersion;
            return this;
        }

        public Builder agentVersion(@Nullable String agentVersion) {
            this.agentVersion = Output.ofNullable(agentVersion);
            return this;
        }

        public Builder amiId(@Nullable Output<String> amiId) {
            this.amiId = amiId;
            return this;
        }

        public Builder amiId(@Nullable String amiId) {
            this.amiId = Output.ofNullable(amiId);
            return this;
        }

        public Builder architecture(@Nullable Output<String> architecture) {
            this.architecture = architecture;
            return this;
        }

        public Builder architecture(@Nullable String architecture) {
            this.architecture = Output.ofNullable(architecture);
            return this;
        }

        public Builder autoScalingType(@Nullable Output<String> autoScalingType) {
            this.autoScalingType = autoScalingType;
            return this;
        }

        public Builder autoScalingType(@Nullable String autoScalingType) {
            this.autoScalingType = Output.ofNullable(autoScalingType);
            return this;
        }

        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Output.ofNullable(availabilityZone);
            return this;
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(@Nullable String createdAt) {
            this.createdAt = Output.ofNullable(createdAt);
            return this;
        }

        public Builder deleteEbs(@Nullable Output<Boolean> deleteEbs) {
            this.deleteEbs = deleteEbs;
            return this;
        }

        public Builder deleteEbs(@Nullable Boolean deleteEbs) {
            this.deleteEbs = Output.ofNullable(deleteEbs);
            return this;
        }

        public Builder deleteEip(@Nullable Output<Boolean> deleteEip) {
            this.deleteEip = deleteEip;
            return this;
        }

        public Builder deleteEip(@Nullable Boolean deleteEip) {
            this.deleteEip = Output.ofNullable(deleteEip);
            return this;
        }

        public Builder ebsBlockDevices(@Nullable Output<List<InstanceEbsBlockDeviceGetArgs>> ebsBlockDevices) {
            this.ebsBlockDevices = ebsBlockDevices;
            return this;
        }

        public Builder ebsBlockDevices(@Nullable List<InstanceEbsBlockDeviceGetArgs> ebsBlockDevices) {
            this.ebsBlockDevices = Output.ofNullable(ebsBlockDevices);
            return this;
        }

        public Builder ebsOptimized(@Nullable Output<Boolean> ebsOptimized) {
            this.ebsOptimized = ebsOptimized;
            return this;
        }

        public Builder ebsOptimized(@Nullable Boolean ebsOptimized) {
            this.ebsOptimized = Output.ofNullable(ebsOptimized);
            return this;
        }

        public Builder ec2InstanceId(@Nullable Output<String> ec2InstanceId) {
            this.ec2InstanceId = ec2InstanceId;
            return this;
        }

        public Builder ec2InstanceId(@Nullable String ec2InstanceId) {
            this.ec2InstanceId = Output.ofNullable(ec2InstanceId);
            return this;
        }

        public Builder ecsClusterArn(@Nullable Output<String> ecsClusterArn) {
            this.ecsClusterArn = ecsClusterArn;
            return this;
        }

        public Builder ecsClusterArn(@Nullable String ecsClusterArn) {
            this.ecsClusterArn = Output.ofNullable(ecsClusterArn);
            return this;
        }

        public Builder elasticIp(@Nullable Output<String> elasticIp) {
            this.elasticIp = elasticIp;
            return this;
        }

        public Builder elasticIp(@Nullable String elasticIp) {
            this.elasticIp = Output.ofNullable(elasticIp);
            return this;
        }

        public Builder ephemeralBlockDevices(@Nullable Output<List<InstanceEphemeralBlockDeviceGetArgs>> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = ephemeralBlockDevices;
            return this;
        }

        public Builder ephemeralBlockDevices(@Nullable List<InstanceEphemeralBlockDeviceGetArgs> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = Output.ofNullable(ephemeralBlockDevices);
            return this;
        }

        public Builder hostname(@Nullable Output<String> hostname) {
            this.hostname = hostname;
            return this;
        }

        public Builder hostname(@Nullable String hostname) {
            this.hostname = Output.ofNullable(hostname);
            return this;
        }

        public Builder infrastructureClass(@Nullable Output<String> infrastructureClass) {
            this.infrastructureClass = infrastructureClass;
            return this;
        }

        public Builder infrastructureClass(@Nullable String infrastructureClass) {
            this.infrastructureClass = Output.ofNullable(infrastructureClass);
            return this;
        }

        public Builder installUpdatesOnBoot(@Nullable Output<Boolean> installUpdatesOnBoot) {
            this.installUpdatesOnBoot = installUpdatesOnBoot;
            return this;
        }

        public Builder installUpdatesOnBoot(@Nullable Boolean installUpdatesOnBoot) {
            this.installUpdatesOnBoot = Output.ofNullable(installUpdatesOnBoot);
            return this;
        }

        public Builder instanceProfileArn(@Nullable Output<String> instanceProfileArn) {
            this.instanceProfileArn = instanceProfileArn;
            return this;
        }

        public Builder instanceProfileArn(@Nullable String instanceProfileArn) {
            this.instanceProfileArn = Output.ofNullable(instanceProfileArn);
            return this;
        }

        public Builder instanceType(@Nullable Output<String> instanceType) {
            this.instanceType = instanceType;
            return this;
        }

        public Builder instanceType(@Nullable String instanceType) {
            this.instanceType = Output.ofNullable(instanceType);
            return this;
        }

        public Builder lastServiceErrorId(@Nullable Output<String> lastServiceErrorId) {
            this.lastServiceErrorId = lastServiceErrorId;
            return this;
        }

        public Builder lastServiceErrorId(@Nullable String lastServiceErrorId) {
            this.lastServiceErrorId = Output.ofNullable(lastServiceErrorId);
            return this;
        }

        public Builder layerIds(@Nullable Output<List<String>> layerIds) {
            this.layerIds = layerIds;
            return this;
        }

        public Builder layerIds(@Nullable List<String> layerIds) {
            this.layerIds = Output.ofNullable(layerIds);
            return this;
        }

        public Builder os(@Nullable Output<String> os) {
            this.os = os;
            return this;
        }

        public Builder os(@Nullable String os) {
            this.os = Output.ofNullable(os);
            return this;
        }

        public Builder platform(@Nullable Output<String> platform) {
            this.platform = platform;
            return this;
        }

        public Builder platform(@Nullable String platform) {
            this.platform = Output.ofNullable(platform);
            return this;
        }

        public Builder privateDns(@Nullable Output<String> privateDns) {
            this.privateDns = privateDns;
            return this;
        }

        public Builder privateDns(@Nullable String privateDns) {
            this.privateDns = Output.ofNullable(privateDns);
            return this;
        }

        public Builder privateIp(@Nullable Output<String> privateIp) {
            this.privateIp = privateIp;
            return this;
        }

        public Builder privateIp(@Nullable String privateIp) {
            this.privateIp = Output.ofNullable(privateIp);
            return this;
        }

        public Builder publicDns(@Nullable Output<String> publicDns) {
            this.publicDns = publicDns;
            return this;
        }

        public Builder publicDns(@Nullable String publicDns) {
            this.publicDns = Output.ofNullable(publicDns);
            return this;
        }

        public Builder publicIp(@Nullable Output<String> publicIp) {
            this.publicIp = publicIp;
            return this;
        }

        public Builder publicIp(@Nullable String publicIp) {
            this.publicIp = Output.ofNullable(publicIp);
            return this;
        }

        public Builder registeredBy(@Nullable Output<String> registeredBy) {
            this.registeredBy = registeredBy;
            return this;
        }

        public Builder registeredBy(@Nullable String registeredBy) {
            this.registeredBy = Output.ofNullable(registeredBy);
            return this;
        }

        public Builder reportedAgentVersion(@Nullable Output<String> reportedAgentVersion) {
            this.reportedAgentVersion = reportedAgentVersion;
            return this;
        }

        public Builder reportedAgentVersion(@Nullable String reportedAgentVersion) {
            this.reportedAgentVersion = Output.ofNullable(reportedAgentVersion);
            return this;
        }

        public Builder reportedOsFamily(@Nullable Output<String> reportedOsFamily) {
            this.reportedOsFamily = reportedOsFamily;
            return this;
        }

        public Builder reportedOsFamily(@Nullable String reportedOsFamily) {
            this.reportedOsFamily = Output.ofNullable(reportedOsFamily);
            return this;
        }

        public Builder reportedOsName(@Nullable Output<String> reportedOsName) {
            this.reportedOsName = reportedOsName;
            return this;
        }

        public Builder reportedOsName(@Nullable String reportedOsName) {
            this.reportedOsName = Output.ofNullable(reportedOsName);
            return this;
        }

        public Builder reportedOsVersion(@Nullable Output<String> reportedOsVersion) {
            this.reportedOsVersion = reportedOsVersion;
            return this;
        }

        public Builder reportedOsVersion(@Nullable String reportedOsVersion) {
            this.reportedOsVersion = Output.ofNullable(reportedOsVersion);
            return this;
        }

        public Builder rootBlockDevices(@Nullable Output<List<InstanceRootBlockDeviceGetArgs>> rootBlockDevices) {
            this.rootBlockDevices = rootBlockDevices;
            return this;
        }

        public Builder rootBlockDevices(@Nullable List<InstanceRootBlockDeviceGetArgs> rootBlockDevices) {
            this.rootBlockDevices = Output.ofNullable(rootBlockDevices);
            return this;
        }

        public Builder rootDeviceType(@Nullable Output<String> rootDeviceType) {
            this.rootDeviceType = rootDeviceType;
            return this;
        }

        public Builder rootDeviceType(@Nullable String rootDeviceType) {
            this.rootDeviceType = Output.ofNullable(rootDeviceType);
            return this;
        }

        public Builder rootDeviceVolumeId(@Nullable Output<String> rootDeviceVolumeId) {
            this.rootDeviceVolumeId = rootDeviceVolumeId;
            return this;
        }

        public Builder rootDeviceVolumeId(@Nullable String rootDeviceVolumeId) {
            this.rootDeviceVolumeId = Output.ofNullable(rootDeviceVolumeId);
            return this;
        }

        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Output.ofNullable(securityGroupIds);
            return this;
        }

        public Builder sshHostDsaKeyFingerprint(@Nullable Output<String> sshHostDsaKeyFingerprint) {
            this.sshHostDsaKeyFingerprint = sshHostDsaKeyFingerprint;
            return this;
        }

        public Builder sshHostDsaKeyFingerprint(@Nullable String sshHostDsaKeyFingerprint) {
            this.sshHostDsaKeyFingerprint = Output.ofNullable(sshHostDsaKeyFingerprint);
            return this;
        }

        public Builder sshHostRsaKeyFingerprint(@Nullable Output<String> sshHostRsaKeyFingerprint) {
            this.sshHostRsaKeyFingerprint = sshHostRsaKeyFingerprint;
            return this;
        }

        public Builder sshHostRsaKeyFingerprint(@Nullable String sshHostRsaKeyFingerprint) {
            this.sshHostRsaKeyFingerprint = Output.ofNullable(sshHostRsaKeyFingerprint);
            return this;
        }

        public Builder sshKeyName(@Nullable Output<String> sshKeyName) {
            this.sshKeyName = sshKeyName;
            return this;
        }

        public Builder sshKeyName(@Nullable String sshKeyName) {
            this.sshKeyName = Output.ofNullable(sshKeyName);
            return this;
        }

        public Builder stackId(@Nullable Output<String> stackId) {
            this.stackId = stackId;
            return this;
        }

        public Builder stackId(@Nullable String stackId) {
            this.stackId = Output.ofNullable(stackId);
            return this;
        }

        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(@Nullable String state) {
            this.state = Output.ofNullable(state);
            return this;
        }

        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Output.ofNullable(status);
            return this;
        }

        public Builder subnetId(@Nullable Output<String> subnetId) {
            this.subnetId = subnetId;
            return this;
        }

        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = Output.ofNullable(subnetId);
            return this;
        }

        public Builder tenancy(@Nullable Output<String> tenancy) {
            this.tenancy = tenancy;
            return this;
        }

        public Builder tenancy(@Nullable String tenancy) {
            this.tenancy = Output.ofNullable(tenancy);
            return this;
        }

        public Builder virtualizationType(@Nullable Output<String> virtualizationType) {
            this.virtualizationType = virtualizationType;
            return this;
        }

        public Builder virtualizationType(@Nullable String virtualizationType) {
            this.virtualizationType = Output.ofNullable(virtualizationType);
            return this;
        }
        public InstanceState build() {
            return new InstanceState(agentVersion, amiId, architecture, autoScalingType, availabilityZone, createdAt, deleteEbs, deleteEip, ebsBlockDevices, ebsOptimized, ec2InstanceId, ecsClusterArn, elasticIp, ephemeralBlockDevices, hostname, infrastructureClass, installUpdatesOnBoot, instanceProfileArn, instanceType, lastServiceErrorId, layerIds, os, platform, privateDns, privateIp, publicDns, publicIp, registeredBy, reportedAgentVersion, reportedOsFamily, reportedOsName, reportedOsVersion, rootBlockDevices, rootDeviceType, rootDeviceVolumeId, securityGroupIds, sshHostDsaKeyFingerprint, sshHostRsaKeyFingerprint, sshKeyName, stackId, state, status, subnetId, tenancy, virtualizationType);
        }
    }
}
