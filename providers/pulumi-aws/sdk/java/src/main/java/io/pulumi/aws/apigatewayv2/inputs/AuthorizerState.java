// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.apigatewayv2.inputs;

import io.pulumi.aws.apigatewayv2.inputs.AuthorizerJwtConfigurationGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AuthorizerState extends io.pulumi.resources.ResourceArgs {

    public static final AuthorizerState Empty = new AuthorizerState();

    /**
     * The API identifier.
     * 
     */
    @Import(name="apiId")
      private final @Nullable Output<String> apiId;

    public Output<String> getApiId() {
        return this.apiId == null ? Output.empty() : this.apiId;
    }

    /**
     * The required credentials as an IAM role for API Gateway to invoke the authorizer.
     * Supported only for `REQUEST` authorizers.
     * 
     */
    @Import(name="authorizerCredentialsArn")
      private final @Nullable Output<String> authorizerCredentialsArn;

    public Output<String> getAuthorizerCredentialsArn() {
        return this.authorizerCredentialsArn == null ? Output.empty() : this.authorizerCredentialsArn;
    }

    /**
     * The format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
     * Valid values: `1.0`, `2.0`.
     * 
     */
    @Import(name="authorizerPayloadFormatVersion")
      private final @Nullable Output<String> authorizerPayloadFormatVersion;

    public Output<String> getAuthorizerPayloadFormatVersion() {
        return this.authorizerPayloadFormatVersion == null ? Output.empty() : this.authorizerPayloadFormatVersion;
    }

    /**
     * The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
     * If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to `300`.
     * Supported only for HTTP API Lambda authorizers.
     * 
     */
    @Import(name="authorizerResultTtlInSeconds")
      private final @Nullable Output<Integer> authorizerResultTtlInSeconds;

    public Output<Integer> getAuthorizerResultTtlInSeconds() {
        return this.authorizerResultTtlInSeconds == null ? Output.empty() : this.authorizerResultTtlInSeconds;
    }

    /**
     * The authorizer type. Valid values: `JWT`, `REQUEST`.
     * Specify `REQUEST` for a Lambda function using incoming request parameters.
     * For HTTP APIs, specify `JWT` to use JSON Web Tokens.
     * 
     */
    @Import(name="authorizerType")
      private final @Nullable Output<String> authorizerType;

    public Output<String> getAuthorizerType() {
        return this.authorizerType == null ? Output.empty() : this.authorizerType;
    }

    /**
     * The authorizer's Uniform Resource Identifier (URI).
     * For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invoke_arn` attribute of the `aws.lambda.Function` resource.
     * Supported only for `REQUEST` authorizers. Must be between 1 and 2048 characters in length.
     * 
     */
    @Import(name="authorizerUri")
      private final @Nullable Output<String> authorizerUri;

    public Output<String> getAuthorizerUri() {
        return this.authorizerUri == null ? Output.empty() : this.authorizerUri;
    }

    /**
     * Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
     * Supported only for HTTP APIs.
     * 
     */
    @Import(name="enableSimpleResponses")
      private final @Nullable Output<Boolean> enableSimpleResponses;

    public Output<Boolean> getEnableSimpleResponses() {
        return this.enableSimpleResponses == null ? Output.empty() : this.enableSimpleResponses;
    }

    /**
     * The identity sources for which authorization is requested.
     * For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
     * For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
     * 
     */
    @Import(name="identitySources")
      private final @Nullable Output<List<String>> identitySources;

    public Output<List<String>> getIdentitySources() {
        return this.identitySources == null ? Output.empty() : this.identitySources;
    }

    /**
     * The configuration of a JWT authorizer. Required for the `JWT` authorizer type.
     * Supported only for HTTP APIs.
     * 
     */
    @Import(name="jwtConfiguration")
      private final @Nullable Output<AuthorizerJwtConfigurationGetArgs> jwtConfiguration;

    public Output<AuthorizerJwtConfigurationGetArgs> getJwtConfiguration() {
        return this.jwtConfiguration == null ? Output.empty() : this.jwtConfiguration;
    }

    /**
     * The name of the authorizer. Must be between 1 and 128 characters in length.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    public AuthorizerState(
        @Nullable Output<String> apiId,
        @Nullable Output<String> authorizerCredentialsArn,
        @Nullable Output<String> authorizerPayloadFormatVersion,
        @Nullable Output<Integer> authorizerResultTtlInSeconds,
        @Nullable Output<String> authorizerType,
        @Nullable Output<String> authorizerUri,
        @Nullable Output<Boolean> enableSimpleResponses,
        @Nullable Output<List<String>> identitySources,
        @Nullable Output<AuthorizerJwtConfigurationGetArgs> jwtConfiguration,
        @Nullable Output<String> name) {
        this.apiId = apiId;
        this.authorizerCredentialsArn = authorizerCredentialsArn;
        this.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion;
        this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
        this.authorizerType = authorizerType;
        this.authorizerUri = authorizerUri;
        this.enableSimpleResponses = enableSimpleResponses;
        this.identitySources = identitySources;
        this.jwtConfiguration = jwtConfiguration;
        this.name = name;
    }

    private AuthorizerState() {
        this.apiId = Output.empty();
        this.authorizerCredentialsArn = Output.empty();
        this.authorizerPayloadFormatVersion = Output.empty();
        this.authorizerResultTtlInSeconds = Output.empty();
        this.authorizerType = Output.empty();
        this.authorizerUri = Output.empty();
        this.enableSimpleResponses = Output.empty();
        this.identitySources = Output.empty();
        this.jwtConfiguration = Output.empty();
        this.name = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorizerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> apiId;
        private @Nullable Output<String> authorizerCredentialsArn;
        private @Nullable Output<String> authorizerPayloadFormatVersion;
        private @Nullable Output<Integer> authorizerResultTtlInSeconds;
        private @Nullable Output<String> authorizerType;
        private @Nullable Output<String> authorizerUri;
        private @Nullable Output<Boolean> enableSimpleResponses;
        private @Nullable Output<List<String>> identitySources;
        private @Nullable Output<AuthorizerJwtConfigurationGetArgs> jwtConfiguration;
        private @Nullable Output<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthorizerState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiId = defaults.apiId;
    	      this.authorizerCredentialsArn = defaults.authorizerCredentialsArn;
    	      this.authorizerPayloadFormatVersion = defaults.authorizerPayloadFormatVersion;
    	      this.authorizerResultTtlInSeconds = defaults.authorizerResultTtlInSeconds;
    	      this.authorizerType = defaults.authorizerType;
    	      this.authorizerUri = defaults.authorizerUri;
    	      this.enableSimpleResponses = defaults.enableSimpleResponses;
    	      this.identitySources = defaults.identitySources;
    	      this.jwtConfiguration = defaults.jwtConfiguration;
    	      this.name = defaults.name;
        }

        public Builder apiId(@Nullable Output<String> apiId) {
            this.apiId = apiId;
            return this;
        }
        public Builder apiId(@Nullable String apiId) {
            this.apiId = Output.ofNullable(apiId);
            return this;
        }
        public Builder authorizerCredentialsArn(@Nullable Output<String> authorizerCredentialsArn) {
            this.authorizerCredentialsArn = authorizerCredentialsArn;
            return this;
        }
        public Builder authorizerCredentialsArn(@Nullable String authorizerCredentialsArn) {
            this.authorizerCredentialsArn = Output.ofNullable(authorizerCredentialsArn);
            return this;
        }
        public Builder authorizerPayloadFormatVersion(@Nullable Output<String> authorizerPayloadFormatVersion) {
            this.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion;
            return this;
        }
        public Builder authorizerPayloadFormatVersion(@Nullable String authorizerPayloadFormatVersion) {
            this.authorizerPayloadFormatVersion = Output.ofNullable(authorizerPayloadFormatVersion);
            return this;
        }
        public Builder authorizerResultTtlInSeconds(@Nullable Output<Integer> authorizerResultTtlInSeconds) {
            this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
            return this;
        }
        public Builder authorizerResultTtlInSeconds(@Nullable Integer authorizerResultTtlInSeconds) {
            this.authorizerResultTtlInSeconds = Output.ofNullable(authorizerResultTtlInSeconds);
            return this;
        }
        public Builder authorizerType(@Nullable Output<String> authorizerType) {
            this.authorizerType = authorizerType;
            return this;
        }
        public Builder authorizerType(@Nullable String authorizerType) {
            this.authorizerType = Output.ofNullable(authorizerType);
            return this;
        }
        public Builder authorizerUri(@Nullable Output<String> authorizerUri) {
            this.authorizerUri = authorizerUri;
            return this;
        }
        public Builder authorizerUri(@Nullable String authorizerUri) {
            this.authorizerUri = Output.ofNullable(authorizerUri);
            return this;
        }
        public Builder enableSimpleResponses(@Nullable Output<Boolean> enableSimpleResponses) {
            this.enableSimpleResponses = enableSimpleResponses;
            return this;
        }
        public Builder enableSimpleResponses(@Nullable Boolean enableSimpleResponses) {
            this.enableSimpleResponses = Output.ofNullable(enableSimpleResponses);
            return this;
        }
        public Builder identitySources(@Nullable Output<List<String>> identitySources) {
            this.identitySources = identitySources;
            return this;
        }
        public Builder identitySources(@Nullable List<String> identitySources) {
            this.identitySources = Output.ofNullable(identitySources);
            return this;
        }
        public Builder identitySources(String... identitySources) {
            return identitySources(List.of(identitySources));
        }
        public Builder jwtConfiguration(@Nullable Output<AuthorizerJwtConfigurationGetArgs> jwtConfiguration) {
            this.jwtConfiguration = jwtConfiguration;
            return this;
        }
        public Builder jwtConfiguration(@Nullable AuthorizerJwtConfigurationGetArgs jwtConfiguration) {
            this.jwtConfiguration = Output.ofNullable(jwtConfiguration);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }        public AuthorizerState build() {
            return new AuthorizerState(apiId, authorizerCredentialsArn, authorizerPayloadFormatVersion, authorizerResultTtlInSeconds, authorizerType, authorizerUri, enableSimpleResponses, identitySources, jwtConfiguration, name);
        }
    }
}
