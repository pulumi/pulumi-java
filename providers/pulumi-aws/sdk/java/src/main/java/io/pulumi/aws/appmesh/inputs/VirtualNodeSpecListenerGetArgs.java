// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appmesh.inputs;

import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerConnectionPoolGetArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerHealthCheckGetArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerOutlierDetectionGetArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerPortMappingGetArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerTimeoutGetArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerTlsGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualNodeSpecListenerGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualNodeSpecListenerGetArgs Empty = new VirtualNodeSpecListenerGetArgs();

    /**
     * The connection pool information for the listener.
     * 
     */
    @InputImport(name="connectionPool")
      private final @Nullable Input<VirtualNodeSpecListenerConnectionPoolGetArgs> connectionPool;

    public Input<VirtualNodeSpecListenerConnectionPoolGetArgs> getConnectionPool() {
        return this.connectionPool == null ? Input.empty() : this.connectionPool;
    }

    /**
     * The health check information for the listener.
     * 
     */
    @InputImport(name="healthCheck")
      private final @Nullable Input<VirtualNodeSpecListenerHealthCheckGetArgs> healthCheck;

    public Input<VirtualNodeSpecListenerHealthCheckGetArgs> getHealthCheck() {
        return this.healthCheck == null ? Input.empty() : this.healthCheck;
    }

    /**
     * The outlier detection information for the listener.
     * 
     */
    @InputImport(name="outlierDetection")
      private final @Nullable Input<VirtualNodeSpecListenerOutlierDetectionGetArgs> outlierDetection;

    public Input<VirtualNodeSpecListenerOutlierDetectionGetArgs> getOutlierDetection() {
        return this.outlierDetection == null ? Input.empty() : this.outlierDetection;
    }

    /**
     * The port mapping information for the listener.
     * 
     */
    @InputImport(name="portMapping", required=true)
      private final Input<VirtualNodeSpecListenerPortMappingGetArgs> portMapping;

    public Input<VirtualNodeSpecListenerPortMappingGetArgs> getPortMapping() {
        return this.portMapping;
    }

    /**
     * Timeouts for different protocols.
     * 
     */
    @InputImport(name="timeout")
      private final @Nullable Input<VirtualNodeSpecListenerTimeoutGetArgs> timeout;

    public Input<VirtualNodeSpecListenerTimeoutGetArgs> getTimeout() {
        return this.timeout == null ? Input.empty() : this.timeout;
    }

    /**
     * The Transport Layer Security (TLS) properties for the listener
     * 
     */
    @InputImport(name="tls")
      private final @Nullable Input<VirtualNodeSpecListenerTlsGetArgs> tls;

    public Input<VirtualNodeSpecListenerTlsGetArgs> getTls() {
        return this.tls == null ? Input.empty() : this.tls;
    }

    public VirtualNodeSpecListenerGetArgs(
        @Nullable Input<VirtualNodeSpecListenerConnectionPoolGetArgs> connectionPool,
        @Nullable Input<VirtualNodeSpecListenerHealthCheckGetArgs> healthCheck,
        @Nullable Input<VirtualNodeSpecListenerOutlierDetectionGetArgs> outlierDetection,
        Input<VirtualNodeSpecListenerPortMappingGetArgs> portMapping,
        @Nullable Input<VirtualNodeSpecListenerTimeoutGetArgs> timeout,
        @Nullable Input<VirtualNodeSpecListenerTlsGetArgs> tls) {
        this.connectionPool = connectionPool;
        this.healthCheck = healthCheck;
        this.outlierDetection = outlierDetection;
        this.portMapping = Objects.requireNonNull(portMapping, "expected parameter 'portMapping' to be non-null");
        this.timeout = timeout;
        this.tls = tls;
    }

    private VirtualNodeSpecListenerGetArgs() {
        this.connectionPool = Input.empty();
        this.healthCheck = Input.empty();
        this.outlierDetection = Input.empty();
        this.portMapping = Input.empty();
        this.timeout = Input.empty();
        this.tls = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNodeSpecListenerGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<VirtualNodeSpecListenerConnectionPoolGetArgs> connectionPool;
        private @Nullable Input<VirtualNodeSpecListenerHealthCheckGetArgs> healthCheck;
        private @Nullable Input<VirtualNodeSpecListenerOutlierDetectionGetArgs> outlierDetection;
        private Input<VirtualNodeSpecListenerPortMappingGetArgs> portMapping;
        private @Nullable Input<VirtualNodeSpecListenerTimeoutGetArgs> timeout;
        private @Nullable Input<VirtualNodeSpecListenerTlsGetArgs> tls;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNodeSpecListenerGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionPool = defaults.connectionPool;
    	      this.healthCheck = defaults.healthCheck;
    	      this.outlierDetection = defaults.outlierDetection;
    	      this.portMapping = defaults.portMapping;
    	      this.timeout = defaults.timeout;
    	      this.tls = defaults.tls;
        }

        public Builder connectionPool(@Nullable Input<VirtualNodeSpecListenerConnectionPoolGetArgs> connectionPool) {
            this.connectionPool = connectionPool;
            return this;
        }

        public Builder connectionPool(@Nullable VirtualNodeSpecListenerConnectionPoolGetArgs connectionPool) {
            this.connectionPool = Input.ofNullable(connectionPool);
            return this;
        }

        public Builder healthCheck(@Nullable Input<VirtualNodeSpecListenerHealthCheckGetArgs> healthCheck) {
            this.healthCheck = healthCheck;
            return this;
        }

        public Builder healthCheck(@Nullable VirtualNodeSpecListenerHealthCheckGetArgs healthCheck) {
            this.healthCheck = Input.ofNullable(healthCheck);
            return this;
        }

        public Builder outlierDetection(@Nullable Input<VirtualNodeSpecListenerOutlierDetectionGetArgs> outlierDetection) {
            this.outlierDetection = outlierDetection;
            return this;
        }

        public Builder outlierDetection(@Nullable VirtualNodeSpecListenerOutlierDetectionGetArgs outlierDetection) {
            this.outlierDetection = Input.ofNullable(outlierDetection);
            return this;
        }

        public Builder portMapping(Input<VirtualNodeSpecListenerPortMappingGetArgs> portMapping) {
            this.portMapping = Objects.requireNonNull(portMapping);
            return this;
        }

        public Builder portMapping(VirtualNodeSpecListenerPortMappingGetArgs portMapping) {
            this.portMapping = Input.of(Objects.requireNonNull(portMapping));
            return this;
        }

        public Builder timeout(@Nullable Input<VirtualNodeSpecListenerTimeoutGetArgs> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder timeout(@Nullable VirtualNodeSpecListenerTimeoutGetArgs timeout) {
            this.timeout = Input.ofNullable(timeout);
            return this;
        }

        public Builder tls(@Nullable Input<VirtualNodeSpecListenerTlsGetArgs> tls) {
            this.tls = tls;
            return this;
        }

        public Builder tls(@Nullable VirtualNodeSpecListenerTlsGetArgs tls) {
            this.tls = Input.ofNullable(tls);
            return this;
        }
        public VirtualNodeSpecListenerGetArgs build() {
            return new VirtualNodeSpecListenerGetArgs(connectionPool, healthCheck, outlierDetection, portMapping, timeout, tls);
        }
    }
}
