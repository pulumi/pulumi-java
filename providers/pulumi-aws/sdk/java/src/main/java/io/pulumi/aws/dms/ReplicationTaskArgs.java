// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.dms;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReplicationTaskArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReplicationTaskArgs Empty = new ReplicationTaskArgs();

    /**
     * Indicates when you want a change data capture (CDC) operation to start. The value can be in date, checkpoint, or LSN/SCN format depending on the source engine. For more information, see [Determining a CDC native start point](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Task.CDC.html#CHAP_Task.CDC.StartPoint.Native).
     * 
     */
    @InputImport(name="cdcStartPosition")
    private final @Nullable Input<String> cdcStartPosition;

    public Input<String> getCdcStartPosition() {
        return this.cdcStartPosition == null ? Input.empty() : this.cdcStartPosition;
    }

    /**
     * The Unix timestamp integer for the start of the Change Data Capture (CDC) operation.
     * 
     */
    @InputImport(name="cdcStartTime")
    private final @Nullable Input<String> cdcStartTime;

    public Input<String> getCdcStartTime() {
        return this.cdcStartTime == null ? Input.empty() : this.cdcStartTime;
    }

    /**
     * The migration type. Can be one of `full-load | cdc | full-load-and-cdc`.
     * 
     */
    @InputImport(name="migrationType", required=true)
    private final Input<String> migrationType;

    public Input<String> getMigrationType() {
        return this.migrationType;
    }

    /**
     * The Amazon Resource Name (ARN) of the replication instance.
     * 
     */
    @InputImport(name="replicationInstanceArn", required=true)
    private final Input<String> replicationInstanceArn;

    public Input<String> getReplicationInstanceArn() {
        return this.replicationInstanceArn;
    }

    /**
     * The replication task identifier.
     * 
     */
    @InputImport(name="replicationTaskId", required=true)
    private final Input<String> replicationTaskId;

    public Input<String> getReplicationTaskId() {
        return this.replicationTaskId;
    }

    /**
     * An escaped JSON string that contains the task settings. For a complete list of task settings, see [Task Settings for AWS Database Migration Service Tasks](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TaskSettings.html).
     * 
     */
    @InputImport(name="replicationTaskSettings")
    private final @Nullable Input<String> replicationTaskSettings;

    public Input<String> getReplicationTaskSettings() {
        return this.replicationTaskSettings == null ? Input.empty() : this.replicationTaskSettings;
    }

    /**
     * The Amazon Resource Name (ARN) string that uniquely identifies the source endpoint.
     * 
     */
    @InputImport(name="sourceEndpointArn", required=true)
    private final Input<String> sourceEndpointArn;

    public Input<String> getSourceEndpointArn() {
        return this.sourceEndpointArn;
    }

    /**
     * An escaped JSON string that contains the table mappings. For information on table mapping see [Using Table Mapping with an AWS Database Migration Service Task to Select and Filter Data](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TableMapping.html)
     * 
     */
    @InputImport(name="tableMappings", required=true)
    private final Input<String> tableMappings;

    public Input<String> getTableMappings() {
        return this.tableMappings;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The Amazon Resource Name (ARN) string that uniquely identifies the target endpoint.
     * 
     */
    @InputImport(name="targetEndpointArn", required=true)
    private final Input<String> targetEndpointArn;

    public Input<String> getTargetEndpointArn() {
        return this.targetEndpointArn;
    }

    public ReplicationTaskArgs(
        @Nullable Input<String> cdcStartPosition,
        @Nullable Input<String> cdcStartTime,
        Input<String> migrationType,
        Input<String> replicationInstanceArn,
        Input<String> replicationTaskId,
        @Nullable Input<String> replicationTaskSettings,
        Input<String> sourceEndpointArn,
        Input<String> tableMappings,
        @Nullable Input<Map<String,String>> tags,
        Input<String> targetEndpointArn) {
        this.cdcStartPosition = cdcStartPosition;
        this.cdcStartTime = cdcStartTime;
        this.migrationType = Objects.requireNonNull(migrationType, "expected parameter 'migrationType' to be non-null");
        this.replicationInstanceArn = Objects.requireNonNull(replicationInstanceArn, "expected parameter 'replicationInstanceArn' to be non-null");
        this.replicationTaskId = Objects.requireNonNull(replicationTaskId, "expected parameter 'replicationTaskId' to be non-null");
        this.replicationTaskSettings = replicationTaskSettings;
        this.sourceEndpointArn = Objects.requireNonNull(sourceEndpointArn, "expected parameter 'sourceEndpointArn' to be non-null");
        this.tableMappings = Objects.requireNonNull(tableMappings, "expected parameter 'tableMappings' to be non-null");
        this.tags = tags;
        this.targetEndpointArn = Objects.requireNonNull(targetEndpointArn, "expected parameter 'targetEndpointArn' to be non-null");
    }

    private ReplicationTaskArgs() {
        this.cdcStartPosition = Input.empty();
        this.cdcStartTime = Input.empty();
        this.migrationType = Input.empty();
        this.replicationInstanceArn = Input.empty();
        this.replicationTaskId = Input.empty();
        this.replicationTaskSettings = Input.empty();
        this.sourceEndpointArn = Input.empty();
        this.tableMappings = Input.empty();
        this.tags = Input.empty();
        this.targetEndpointArn = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicationTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> cdcStartPosition;
        private @Nullable Input<String> cdcStartTime;
        private Input<String> migrationType;
        private Input<String> replicationInstanceArn;
        private Input<String> replicationTaskId;
        private @Nullable Input<String> replicationTaskSettings;
        private Input<String> sourceEndpointArn;
        private Input<String> tableMappings;
        private @Nullable Input<Map<String,String>> tags;
        private Input<String> targetEndpointArn;

        public Builder() {
    	      // Empty
        }

        public Builder(ReplicationTaskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cdcStartPosition = defaults.cdcStartPosition;
    	      this.cdcStartTime = defaults.cdcStartTime;
    	      this.migrationType = defaults.migrationType;
    	      this.replicationInstanceArn = defaults.replicationInstanceArn;
    	      this.replicationTaskId = defaults.replicationTaskId;
    	      this.replicationTaskSettings = defaults.replicationTaskSettings;
    	      this.sourceEndpointArn = defaults.sourceEndpointArn;
    	      this.tableMappings = defaults.tableMappings;
    	      this.tags = defaults.tags;
    	      this.targetEndpointArn = defaults.targetEndpointArn;
        }

        public Builder setCdcStartPosition(@Nullable Input<String> cdcStartPosition) {
            this.cdcStartPosition = cdcStartPosition;
            return this;
        }

        public Builder setCdcStartPosition(@Nullable String cdcStartPosition) {
            this.cdcStartPosition = Input.ofNullable(cdcStartPosition);
            return this;
        }

        public Builder setCdcStartTime(@Nullable Input<String> cdcStartTime) {
            this.cdcStartTime = cdcStartTime;
            return this;
        }

        public Builder setCdcStartTime(@Nullable String cdcStartTime) {
            this.cdcStartTime = Input.ofNullable(cdcStartTime);
            return this;
        }

        public Builder setMigrationType(Input<String> migrationType) {
            this.migrationType = Objects.requireNonNull(migrationType);
            return this;
        }

        public Builder setMigrationType(String migrationType) {
            this.migrationType = Input.of(Objects.requireNonNull(migrationType));
            return this;
        }

        public Builder setReplicationInstanceArn(Input<String> replicationInstanceArn) {
            this.replicationInstanceArn = Objects.requireNonNull(replicationInstanceArn);
            return this;
        }

        public Builder setReplicationInstanceArn(String replicationInstanceArn) {
            this.replicationInstanceArn = Input.of(Objects.requireNonNull(replicationInstanceArn));
            return this;
        }

        public Builder setReplicationTaskId(Input<String> replicationTaskId) {
            this.replicationTaskId = Objects.requireNonNull(replicationTaskId);
            return this;
        }

        public Builder setReplicationTaskId(String replicationTaskId) {
            this.replicationTaskId = Input.of(Objects.requireNonNull(replicationTaskId));
            return this;
        }

        public Builder setReplicationTaskSettings(@Nullable Input<String> replicationTaskSettings) {
            this.replicationTaskSettings = replicationTaskSettings;
            return this;
        }

        public Builder setReplicationTaskSettings(@Nullable String replicationTaskSettings) {
            this.replicationTaskSettings = Input.ofNullable(replicationTaskSettings);
            return this;
        }

        public Builder setSourceEndpointArn(Input<String> sourceEndpointArn) {
            this.sourceEndpointArn = Objects.requireNonNull(sourceEndpointArn);
            return this;
        }

        public Builder setSourceEndpointArn(String sourceEndpointArn) {
            this.sourceEndpointArn = Input.of(Objects.requireNonNull(sourceEndpointArn));
            return this;
        }

        public Builder setTableMappings(Input<String> tableMappings) {
            this.tableMappings = Objects.requireNonNull(tableMappings);
            return this;
        }

        public Builder setTableMappings(String tableMappings) {
            this.tableMappings = Input.of(Objects.requireNonNull(tableMappings));
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTargetEndpointArn(Input<String> targetEndpointArn) {
            this.targetEndpointArn = Objects.requireNonNull(targetEndpointArn);
            return this;
        }

        public Builder setTargetEndpointArn(String targetEndpointArn) {
            this.targetEndpointArn = Input.of(Objects.requireNonNull(targetEndpointArn));
            return this;
        }
        public ReplicationTaskArgs build() {
            return new ReplicationTaskArgs(cdcStartPosition, cdcStartTime, migrationType, replicationInstanceArn, replicationTaskId, replicationTaskSettings, sourceEndpointArn, tableMappings, tags, targetEndpointArn);
        }
    }
}
