// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.autoscaling;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.autoscaling.PolicyArgs;
import io.pulumi.aws.autoscaling.inputs.PolicyState;
import io.pulumi.aws.autoscaling.outputs.PolicyPredictiveScalingConfiguration;
import io.pulumi.aws.autoscaling.outputs.PolicyStepAdjustment;
import io.pulumi.aws.autoscaling.outputs.PolicyTargetTrackingConfiguration;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Provides an AutoScaling Scaling Policy resource.
 * 
 * > **NOTE:** You may want to omit `desired_capacity` attribute from attached `aws.autoscaling.Group`
 * when using autoscaling policies. It's good practice to pick either
 * [manual](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-manual-scaling.html)
 * or [dynamic](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-scale-based-on-demand.html)
 * (policy-based) scaling.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * AutoScaling scaling policy can be imported using the role autoscaling_group_name and name separated by `/`.
 * 
 * ```sh
 *  $ pulumi import aws:autoscaling/policy:Policy test-policy asg-name/policy-name
 * ```
 * 
 */
@ResourceType(type="aws:autoscaling/policy:Policy")
public class Policy extends io.pulumi.resources.CustomResource {
    /**
     * Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     * 
     */
    @Export(name="adjustmentType", type=String.class, parameters={})
    private Output</* @Nullable */ String> adjustmentType;

    /**
     * @return Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     * 
     */
    public Output</* @Nullable */ String> getAdjustmentType() {
        return this.adjustmentType;
    }
    /**
     * The ARN assigned by AWS to the scaling policy.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN assigned by AWS to the scaling policy.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The name of the autoscaling group.
     * 
     */
    @Export(name="autoscalingGroupName", type=String.class, parameters={})
    private Output<String> autoscalingGroupName;

    /**
     * @return The name of the autoscaling group.
     * 
     */
    public Output<String> getAutoscalingGroupName() {
        return this.autoscalingGroupName;
    }
    /**
     * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     * 
     */
    @Export(name="cooldown", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> cooldown;

    /**
     * @return The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     * 
     */
    public Output</* @Nullable */ Integer> getCooldown() {
        return this.cooldown;
    }
    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
     * 
     */
    @Export(name="estimatedInstanceWarmup", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> estimatedInstanceWarmup;

    /**
     * @return The estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
     * 
     */
    public Output</* @Nullable */ Integer> getEstimatedInstanceWarmup() {
        return this.estimatedInstanceWarmup;
    }
    /**
     * The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
     * 
     */
    @Export(name="metricAggregationType", type=String.class, parameters={})
    private Output<String> metricAggregationType;

    /**
     * @return The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
     * 
     */
    public Output<String> getMetricAggregationType() {
        return this.metricAggregationType;
    }
    /**
     * Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.
     * 
     */
    @Export(name="minAdjustmentMagnitude", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> minAdjustmentMagnitude;

    /**
     * @return Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.
     * 
     */
    public Output</* @Nullable */ Integer> getMinAdjustmentMagnitude() {
        return this.minAdjustmentMagnitude;
    }
    /**
     * The name of the dimension.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the dimension.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
     * 
     */
    @Export(name="policyType", type=String.class, parameters={})
    private Output</* @Nullable */ String> policyType;

    /**
     * @return The policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
     * 
     */
    public Output</* @Nullable */ String> getPolicyType() {
        return this.policyType;
    }
    /**
     * The predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     * 
     */
    @Export(name="predictiveScalingConfiguration", type=PolicyPredictiveScalingConfiguration.class, parameters={})
    private Output</* @Nullable */ PolicyPredictiveScalingConfiguration> predictiveScalingConfiguration;

    /**
     * @return The predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     * 
     */
    public Output</* @Nullable */ PolicyPredictiveScalingConfiguration> getPredictiveScalingConfiguration() {
        return this.predictiveScalingConfiguration;
    }
    /**
     * The number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     * 
     */
    @Export(name="scalingAdjustment", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> scalingAdjustment;

    /**
     * @return The number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     * 
     */
    public Output</* @Nullable */ Integer> getScalingAdjustment() {
        return this.scalingAdjustment;
    }
    /**
     * A set of adjustments that manage
     * group scaling. These have the following structure:
     * 
     */
    @Export(name="stepAdjustments", type=List.class, parameters={PolicyStepAdjustment.class})
    private Output</* @Nullable */ List<PolicyStepAdjustment>> stepAdjustments;

    /**
     * @return A set of adjustments that manage
     * group scaling. These have the following structure:
     * 
     */
    public Output</* @Nullable */ List<PolicyStepAdjustment>> getStepAdjustments() {
        return this.stepAdjustments;
    }
    /**
     * A target tracking policy. These have the following structure:
     * 
     */
    @Export(name="targetTrackingConfiguration", type=PolicyTargetTrackingConfiguration.class, parameters={})
    private Output</* @Nullable */ PolicyTargetTrackingConfiguration> targetTrackingConfiguration;

    /**
     * @return A target tracking policy. These have the following structure:
     * 
     */
    public Output</* @Nullable */ PolicyTargetTrackingConfiguration> getTargetTrackingConfiguration() {
        return this.targetTrackingConfiguration;
    }

    public interface BuilderApplicator {
        public void apply(PolicyArgs.Builder a);
    }
    private static io.pulumi.aws.autoscaling.PolicyArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.aws.autoscaling.PolicyArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public Policy(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Policy(String name) {
        this(name, PolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Policy(String name, PolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Policy(String name, PolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:autoscaling/policy:Policy", name, args == null ? PolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Policy(String name, Output<String> id, @Nullable PolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:autoscaling/policy:Policy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Policy get(String name, Output<String> id, @Nullable PolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Policy(name, id, state, options);
    }
}
