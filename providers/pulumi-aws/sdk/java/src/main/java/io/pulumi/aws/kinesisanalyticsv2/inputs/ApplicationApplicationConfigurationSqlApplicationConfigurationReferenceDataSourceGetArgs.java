// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesisanalyticsv2.inputs;

import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaGetArgs;
import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceGetArgs Empty = new ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceGetArgs();

    @InputImport(name="referenceId")
      private final @Nullable Input<String> referenceId;

    public Input<String> getReferenceId() {
        return this.referenceId == null ? Input.empty() : this.referenceId;
    }

    /**
     * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
     * 
     */
    @InputImport(name="referenceSchema", required=true)
      private final Input<ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaGetArgs> referenceSchema;

    public Input<ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaGetArgs> getReferenceSchema() {
        return this.referenceSchema;
    }

    /**
     * Identifies the S3 bucket and object that contains the reference data.
     * 
     */
    @InputImport(name="s3ReferenceDataSource", required=true)
      private final Input<ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceGetArgs> s3ReferenceDataSource;

    public Input<ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceGetArgs> getS3ReferenceDataSource() {
        return this.s3ReferenceDataSource;
    }

    /**
     * The name of the in-application table to create.
     * 
     */
    @InputImport(name="tableName", required=true)
      private final Input<String> tableName;

    public Input<String> getTableName() {
        return this.tableName;
    }

    public ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceGetArgs(
        @Nullable Input<String> referenceId,
        Input<ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaGetArgs> referenceSchema,
        Input<ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceGetArgs> s3ReferenceDataSource,
        Input<String> tableName) {
        this.referenceId = referenceId;
        this.referenceSchema = Objects.requireNonNull(referenceSchema, "expected parameter 'referenceSchema' to be non-null");
        this.s3ReferenceDataSource = Objects.requireNonNull(s3ReferenceDataSource, "expected parameter 's3ReferenceDataSource' to be non-null");
        this.tableName = Objects.requireNonNull(tableName, "expected parameter 'tableName' to be non-null");
    }

    private ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceGetArgs() {
        this.referenceId = Input.empty();
        this.referenceSchema = Input.empty();
        this.s3ReferenceDataSource = Input.empty();
        this.tableName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> referenceId;
        private Input<ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaGetArgs> referenceSchema;
        private Input<ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceGetArgs> s3ReferenceDataSource;
        private Input<String> tableName;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.referenceId = defaults.referenceId;
    	      this.referenceSchema = defaults.referenceSchema;
    	      this.s3ReferenceDataSource = defaults.s3ReferenceDataSource;
    	      this.tableName = defaults.tableName;
        }

        public Builder setReferenceId(@Nullable Input<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        public Builder setReferenceId(@Nullable String referenceId) {
            this.referenceId = Input.ofNullable(referenceId);
            return this;
        }

        public Builder setReferenceSchema(Input<ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaGetArgs> referenceSchema) {
            this.referenceSchema = Objects.requireNonNull(referenceSchema);
            return this;
        }

        public Builder setReferenceSchema(ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaGetArgs referenceSchema) {
            this.referenceSchema = Input.of(Objects.requireNonNull(referenceSchema));
            return this;
        }

        public Builder setS3ReferenceDataSource(Input<ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceGetArgs> s3ReferenceDataSource) {
            this.s3ReferenceDataSource = Objects.requireNonNull(s3ReferenceDataSource);
            return this;
        }

        public Builder setS3ReferenceDataSource(ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSourceGetArgs s3ReferenceDataSource) {
            this.s3ReferenceDataSource = Input.of(Objects.requireNonNull(s3ReferenceDataSource));
            return this;
        }

        public Builder setTableName(Input<String> tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }

        public Builder setTableName(String tableName) {
            this.tableName = Input.of(Objects.requireNonNull(tableName));
            return this;
        }
        public ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceGetArgs build() {
            return new ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceGetArgs(referenceId, referenceSchema, s3ReferenceDataSource, tableName);
        }
    }
}
