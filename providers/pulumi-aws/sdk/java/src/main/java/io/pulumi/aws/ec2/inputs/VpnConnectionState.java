// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.VpnConnectionRouteGetArgs;
import io.pulumi.aws.ec2.inputs.VpnConnectionVgwTelemetryGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpnConnectionState extends io.pulumi.resources.ResourceArgs {

    public static final VpnConnectionState Empty = new VpnConnectionState();

    /**
     * Amazon Resource Name (ARN) of the VPN Connection.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The configuration information for the VPN connection's customer gateway (in the native XML format).
     * 
     */
    @InputImport(name="customerGatewayConfiguration")
      private final @Nullable Input<String> customerGatewayConfiguration;

    public Input<String> getCustomerGatewayConfiguration() {
        return this.customerGatewayConfiguration == null ? Input.empty() : this.customerGatewayConfiguration;
    }

    /**
     * The ID of the customer gateway.
     * 
     */
    @InputImport(name="customerGatewayId")
      private final @Nullable Input<String> customerGatewayId;

    public Input<String> getCustomerGatewayId() {
        return this.customerGatewayId == null ? Input.empty() : this.customerGatewayId;
    }

    /**
     * Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
     * 
     */
    @InputImport(name="enableAcceleration")
      private final @Nullable Input<Boolean> enableAcceleration;

    public Input<Boolean> getEnableAcceleration() {
        return this.enableAcceleration == null ? Input.empty() : this.enableAcceleration;
    }

    /**
     * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @InputImport(name="localIpv4NetworkCidr")
      private final @Nullable Input<String> localIpv4NetworkCidr;

    public Input<String> getLocalIpv4NetworkCidr() {
        return this.localIpv4NetworkCidr == null ? Input.empty() : this.localIpv4NetworkCidr;
    }

    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @InputImport(name="localIpv6NetworkCidr")
      private final @Nullable Input<String> localIpv6NetworkCidr;

    public Input<String> getLocalIpv6NetworkCidr() {
        return this.localIpv6NetworkCidr == null ? Input.empty() : this.localIpv6NetworkCidr;
    }

    /**
     * The IPv4 CIDR on the AWS side of the VPN connection.
     * 
     */
    @InputImport(name="remoteIpv4NetworkCidr")
      private final @Nullable Input<String> remoteIpv4NetworkCidr;

    public Input<String> getRemoteIpv4NetworkCidr() {
        return this.remoteIpv4NetworkCidr == null ? Input.empty() : this.remoteIpv4NetworkCidr;
    }

    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @InputImport(name="remoteIpv6NetworkCidr")
      private final @Nullable Input<String> remoteIpv6NetworkCidr;

    public Input<String> getRemoteIpv6NetworkCidr() {
        return this.remoteIpv6NetworkCidr == null ? Input.empty() : this.remoteIpv6NetworkCidr;
    }

    /**
     * The static routes associated with the VPN connection. Detailed below.
     * 
     */
    @InputImport(name="routes")
      private final @Nullable Input<List<VpnConnectionRouteGetArgs>> routes;

    public Input<List<VpnConnectionRouteGetArgs>> getRoutes() {
        return this.routes == null ? Input.empty() : this.routes;
    }

    /**
     * Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
     * 
     */
    @InputImport(name="staticRoutesOnly")
      private final @Nullable Input<Boolean> staticRoutesOnly;

    public Input<Boolean> getStaticRoutesOnly() {
        return this.staticRoutesOnly == null ? Input.empty() : this.staticRoutesOnly;
    }

    /**
     * Tags to apply to the connection. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * When associated with an EC2 Transit Gateway (`transit_gateway_id` argument), the attachment ID. See also the `aws.ec2.Tag` for tagging the EC2 Transit Gateway VPN Attachment.
     * 
     */
    @InputImport(name="transitGatewayAttachmentId")
      private final @Nullable Input<String> transitGatewayAttachmentId;

    public Input<String> getTransitGatewayAttachmentId() {
        return this.transitGatewayAttachmentId == null ? Input.empty() : this.transitGatewayAttachmentId;
    }

    /**
     * The ID of the EC2 Transit Gateway.
     * 
     */
    @InputImport(name="transitGatewayId")
      private final @Nullable Input<String> transitGatewayId;

    public Input<String> getTransitGatewayId() {
        return this.transitGatewayId == null ? Input.empty() : this.transitGatewayId;
    }

    /**
     * The public IP address of the first VPN tunnel.
     * 
     */
    @InputImport(name="tunnel1Address")
      private final @Nullable Input<String> tunnel1Address;

    public Input<String> getTunnel1Address() {
        return this.tunnel1Address == null ? Input.empty() : this.tunnel1Address;
    }

    /**
     * The bgp asn number of the first VPN tunnel.
     * 
     */
    @InputImport(name="tunnel1BgpAsn")
      private final @Nullable Input<String> tunnel1BgpAsn;

    public Input<String> getTunnel1BgpAsn() {
        return this.tunnel1BgpAsn == null ? Input.empty() : this.tunnel1BgpAsn;
    }

    /**
     * The bgp holdtime of the first VPN tunnel.
     * 
     */
    @InputImport(name="tunnel1BgpHoldtime")
      private final @Nullable Input<Integer> tunnel1BgpHoldtime;

    public Input<Integer> getTunnel1BgpHoldtime() {
        return this.tunnel1BgpHoldtime == null ? Input.empty() : this.tunnel1BgpHoldtime;
    }

    /**
     * The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
     * 
     */
    @InputImport(name="tunnel1CgwInsideAddress")
      private final @Nullable Input<String> tunnel1CgwInsideAddress;

    public Input<String> getTunnel1CgwInsideAddress() {
        return this.tunnel1CgwInsideAddress == null ? Input.empty() : this.tunnel1CgwInsideAddress;
    }

    /**
     * The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    @InputImport(name="tunnel1DpdTimeoutAction")
      private final @Nullable Input<String> tunnel1DpdTimeoutAction;

    public Input<String> getTunnel1DpdTimeoutAction() {
        return this.tunnel1DpdTimeoutAction == null ? Input.empty() : this.tunnel1DpdTimeoutAction;
    }

    /**
     * The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    @InputImport(name="tunnel1DpdTimeoutSeconds")
      private final @Nullable Input<Integer> tunnel1DpdTimeoutSeconds;

    public Input<Integer> getTunnel1DpdTimeoutSeconds() {
        return this.tunnel1DpdTimeoutSeconds == null ? Input.empty() : this.tunnel1DpdTimeoutSeconds;
    }

    /**
     * The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    @InputImport(name="tunnel1IkeVersions")
      private final @Nullable Input<List<String>> tunnel1IkeVersions;

    public Input<List<String>> getTunnel1IkeVersions() {
        return this.tunnel1IkeVersions == null ? Input.empty() : this.tunnel1IkeVersions;
    }

    /**
     * The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    @InputImport(name="tunnel1InsideCidr")
      private final @Nullable Input<String> tunnel1InsideCidr;

    public Input<String> getTunnel1InsideCidr() {
        return this.tunnel1InsideCidr == null ? Input.empty() : this.tunnel1InsideCidr;
    }

    /**
     * The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    @InputImport(name="tunnel1InsideIpv6Cidr")
      private final @Nullable Input<String> tunnel1InsideIpv6Cidr;

    public Input<String> getTunnel1InsideIpv6Cidr() {
        return this.tunnel1InsideIpv6Cidr == null ? Input.empty() : this.tunnel1InsideIpv6Cidr;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    @InputImport(name="tunnel1Phase1DhGroupNumbers")
      private final @Nullable Input<List<Integer>> tunnel1Phase1DhGroupNumbers;

    public Input<List<Integer>> getTunnel1Phase1DhGroupNumbers() {
        return this.tunnel1Phase1DhGroupNumbers == null ? Input.empty() : this.tunnel1Phase1DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @InputImport(name="tunnel1Phase1EncryptionAlgorithms")
      private final @Nullable Input<List<String>> tunnel1Phase1EncryptionAlgorithms;

    public Input<List<String>> getTunnel1Phase1EncryptionAlgorithms() {
        return this.tunnel1Phase1EncryptionAlgorithms == null ? Input.empty() : this.tunnel1Phase1EncryptionAlgorithms;
    }

    /**
     * One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @InputImport(name="tunnel1Phase1IntegrityAlgorithms")
      private final @Nullable Input<List<String>> tunnel1Phase1IntegrityAlgorithms;

    public Input<List<String>> getTunnel1Phase1IntegrityAlgorithms() {
        return this.tunnel1Phase1IntegrityAlgorithms == null ? Input.empty() : this.tunnel1Phase1IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    @InputImport(name="tunnel1Phase1LifetimeSeconds")
      private final @Nullable Input<Integer> tunnel1Phase1LifetimeSeconds;

    public Input<Integer> getTunnel1Phase1LifetimeSeconds() {
        return this.tunnel1Phase1LifetimeSeconds == null ? Input.empty() : this.tunnel1Phase1LifetimeSeconds;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    @InputImport(name="tunnel1Phase2DhGroupNumbers")
      private final @Nullable Input<List<Integer>> tunnel1Phase2DhGroupNumbers;

    public Input<List<Integer>> getTunnel1Phase2DhGroupNumbers() {
        return this.tunnel1Phase2DhGroupNumbers == null ? Input.empty() : this.tunnel1Phase2DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @InputImport(name="tunnel1Phase2EncryptionAlgorithms")
      private final @Nullable Input<List<String>> tunnel1Phase2EncryptionAlgorithms;

    public Input<List<String>> getTunnel1Phase2EncryptionAlgorithms() {
        return this.tunnel1Phase2EncryptionAlgorithms == null ? Input.empty() : this.tunnel1Phase2EncryptionAlgorithms;
    }

    /**
     * List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @InputImport(name="tunnel1Phase2IntegrityAlgorithms")
      private final @Nullable Input<List<String>> tunnel1Phase2IntegrityAlgorithms;

    public Input<List<String>> getTunnel1Phase2IntegrityAlgorithms() {
        return this.tunnel1Phase2IntegrityAlgorithms == null ? Input.empty() : this.tunnel1Phase2IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    @InputImport(name="tunnel1Phase2LifetimeSeconds")
      private final @Nullable Input<Integer> tunnel1Phase2LifetimeSeconds;

    public Input<Integer> getTunnel1Phase2LifetimeSeconds() {
        return this.tunnel1Phase2LifetimeSeconds == null ? Input.empty() : this.tunnel1Phase2LifetimeSeconds;
    }

    /**
     * The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    @InputImport(name="tunnel1PresharedKey")
      private final @Nullable Input<String> tunnel1PresharedKey;

    public Input<String> getTunnel1PresharedKey() {
        return this.tunnel1PresharedKey == null ? Input.empty() : this.tunnel1PresharedKey;
    }

    /**
     * The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    @InputImport(name="tunnel1RekeyFuzzPercentage")
      private final @Nullable Input<Integer> tunnel1RekeyFuzzPercentage;

    public Input<Integer> getTunnel1RekeyFuzzPercentage() {
        return this.tunnel1RekeyFuzzPercentage == null ? Input.empty() : this.tunnel1RekeyFuzzPercentage;
    }

    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel1_phase2_lifetime_seconds`.
     * 
     */
    @InputImport(name="tunnel1RekeyMarginTimeSeconds")
      private final @Nullable Input<Integer> tunnel1RekeyMarginTimeSeconds;

    public Input<Integer> getTunnel1RekeyMarginTimeSeconds() {
        return this.tunnel1RekeyMarginTimeSeconds == null ? Input.empty() : this.tunnel1RekeyMarginTimeSeconds;
    }

    /**
     * The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    @InputImport(name="tunnel1ReplayWindowSize")
      private final @Nullable Input<Integer> tunnel1ReplayWindowSize;

    public Input<Integer> getTunnel1ReplayWindowSize() {
        return this.tunnel1ReplayWindowSize == null ? Input.empty() : this.tunnel1ReplayWindowSize;
    }

    /**
     * The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    @InputImport(name="tunnel1StartupAction")
      private final @Nullable Input<String> tunnel1StartupAction;

    public Input<String> getTunnel1StartupAction() {
        return this.tunnel1StartupAction == null ? Input.empty() : this.tunnel1StartupAction;
    }

    /**
     * The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
     * 
     */
    @InputImport(name="tunnel1VgwInsideAddress")
      private final @Nullable Input<String> tunnel1VgwInsideAddress;

    public Input<String> getTunnel1VgwInsideAddress() {
        return this.tunnel1VgwInsideAddress == null ? Input.empty() : this.tunnel1VgwInsideAddress;
    }

    /**
     * The public IP address of the second VPN tunnel.
     * 
     */
    @InputImport(name="tunnel2Address")
      private final @Nullable Input<String> tunnel2Address;

    public Input<String> getTunnel2Address() {
        return this.tunnel2Address == null ? Input.empty() : this.tunnel2Address;
    }

    /**
     * The bgp asn number of the second VPN tunnel.
     * 
     */
    @InputImport(name="tunnel2BgpAsn")
      private final @Nullable Input<String> tunnel2BgpAsn;

    public Input<String> getTunnel2BgpAsn() {
        return this.tunnel2BgpAsn == null ? Input.empty() : this.tunnel2BgpAsn;
    }

    /**
     * The bgp holdtime of the second VPN tunnel.
     * 
     */
    @InputImport(name="tunnel2BgpHoldtime")
      private final @Nullable Input<Integer> tunnel2BgpHoldtime;

    public Input<Integer> getTunnel2BgpHoldtime() {
        return this.tunnel2BgpHoldtime == null ? Input.empty() : this.tunnel2BgpHoldtime;
    }

    /**
     * The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
     * 
     */
    @InputImport(name="tunnel2CgwInsideAddress")
      private final @Nullable Input<String> tunnel2CgwInsideAddress;

    public Input<String> getTunnel2CgwInsideAddress() {
        return this.tunnel2CgwInsideAddress == null ? Input.empty() : this.tunnel2CgwInsideAddress;
    }

    /**
     * The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    @InputImport(name="tunnel2DpdTimeoutAction")
      private final @Nullable Input<String> tunnel2DpdTimeoutAction;

    public Input<String> getTunnel2DpdTimeoutAction() {
        return this.tunnel2DpdTimeoutAction == null ? Input.empty() : this.tunnel2DpdTimeoutAction;
    }

    /**
     * The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    @InputImport(name="tunnel2DpdTimeoutSeconds")
      private final @Nullable Input<Integer> tunnel2DpdTimeoutSeconds;

    public Input<Integer> getTunnel2DpdTimeoutSeconds() {
        return this.tunnel2DpdTimeoutSeconds == null ? Input.empty() : this.tunnel2DpdTimeoutSeconds;
    }

    /**
     * The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    @InputImport(name="tunnel2IkeVersions")
      private final @Nullable Input<List<String>> tunnel2IkeVersions;

    public Input<List<String>> getTunnel2IkeVersions() {
        return this.tunnel2IkeVersions == null ? Input.empty() : this.tunnel2IkeVersions;
    }

    /**
     * The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    @InputImport(name="tunnel2InsideCidr")
      private final @Nullable Input<String> tunnel2InsideCidr;

    public Input<String> getTunnel2InsideCidr() {
        return this.tunnel2InsideCidr == null ? Input.empty() : this.tunnel2InsideCidr;
    }

    /**
     * The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    @InputImport(name="tunnel2InsideIpv6Cidr")
      private final @Nullable Input<String> tunnel2InsideIpv6Cidr;

    public Input<String> getTunnel2InsideIpv6Cidr() {
        return this.tunnel2InsideIpv6Cidr == null ? Input.empty() : this.tunnel2InsideIpv6Cidr;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    @InputImport(name="tunnel2Phase1DhGroupNumbers")
      private final @Nullable Input<List<Integer>> tunnel2Phase1DhGroupNumbers;

    public Input<List<Integer>> getTunnel2Phase1DhGroupNumbers() {
        return this.tunnel2Phase1DhGroupNumbers == null ? Input.empty() : this.tunnel2Phase1DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @InputImport(name="tunnel2Phase1EncryptionAlgorithms")
      private final @Nullable Input<List<String>> tunnel2Phase1EncryptionAlgorithms;

    public Input<List<String>> getTunnel2Phase1EncryptionAlgorithms() {
        return this.tunnel2Phase1EncryptionAlgorithms == null ? Input.empty() : this.tunnel2Phase1EncryptionAlgorithms;
    }

    /**
     * One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @InputImport(name="tunnel2Phase1IntegrityAlgorithms")
      private final @Nullable Input<List<String>> tunnel2Phase1IntegrityAlgorithms;

    public Input<List<String>> getTunnel2Phase1IntegrityAlgorithms() {
        return this.tunnel2Phase1IntegrityAlgorithms == null ? Input.empty() : this.tunnel2Phase1IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    @InputImport(name="tunnel2Phase1LifetimeSeconds")
      private final @Nullable Input<Integer> tunnel2Phase1LifetimeSeconds;

    public Input<Integer> getTunnel2Phase1LifetimeSeconds() {
        return this.tunnel2Phase1LifetimeSeconds == null ? Input.empty() : this.tunnel2Phase1LifetimeSeconds;
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    @InputImport(name="tunnel2Phase2DhGroupNumbers")
      private final @Nullable Input<List<Integer>> tunnel2Phase2DhGroupNumbers;

    public Input<List<Integer>> getTunnel2Phase2DhGroupNumbers() {
        return this.tunnel2Phase2DhGroupNumbers == null ? Input.empty() : this.tunnel2Phase2DhGroupNumbers;
    }

    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @InputImport(name="tunnel2Phase2EncryptionAlgorithms")
      private final @Nullable Input<List<String>> tunnel2Phase2EncryptionAlgorithms;

    public Input<List<String>> getTunnel2Phase2EncryptionAlgorithms() {
        return this.tunnel2Phase2EncryptionAlgorithms == null ? Input.empty() : this.tunnel2Phase2EncryptionAlgorithms;
    }

    /**
     * List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @InputImport(name="tunnel2Phase2IntegrityAlgorithms")
      private final @Nullable Input<List<String>> tunnel2Phase2IntegrityAlgorithms;

    public Input<List<String>> getTunnel2Phase2IntegrityAlgorithms() {
        return this.tunnel2Phase2IntegrityAlgorithms == null ? Input.empty() : this.tunnel2Phase2IntegrityAlgorithms;
    }

    /**
     * The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    @InputImport(name="tunnel2Phase2LifetimeSeconds")
      private final @Nullable Input<Integer> tunnel2Phase2LifetimeSeconds;

    public Input<Integer> getTunnel2Phase2LifetimeSeconds() {
        return this.tunnel2Phase2LifetimeSeconds == null ? Input.empty() : this.tunnel2Phase2LifetimeSeconds;
    }

    /**
     * The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    @InputImport(name="tunnel2PresharedKey")
      private final @Nullable Input<String> tunnel2PresharedKey;

    public Input<String> getTunnel2PresharedKey() {
        return this.tunnel2PresharedKey == null ? Input.empty() : this.tunnel2PresharedKey;
    }

    /**
     * The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    @InputImport(name="tunnel2RekeyFuzzPercentage")
      private final @Nullable Input<Integer> tunnel2RekeyFuzzPercentage;

    public Input<Integer> getTunnel2RekeyFuzzPercentage() {
        return this.tunnel2RekeyFuzzPercentage == null ? Input.empty() : this.tunnel2RekeyFuzzPercentage;
    }

    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel2_phase2_lifetime_seconds`.
     * 
     */
    @InputImport(name="tunnel2RekeyMarginTimeSeconds")
      private final @Nullable Input<Integer> tunnel2RekeyMarginTimeSeconds;

    public Input<Integer> getTunnel2RekeyMarginTimeSeconds() {
        return this.tunnel2RekeyMarginTimeSeconds == null ? Input.empty() : this.tunnel2RekeyMarginTimeSeconds;
    }

    /**
     * The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    @InputImport(name="tunnel2ReplayWindowSize")
      private final @Nullable Input<Integer> tunnel2ReplayWindowSize;

    public Input<Integer> getTunnel2ReplayWindowSize() {
        return this.tunnel2ReplayWindowSize == null ? Input.empty() : this.tunnel2ReplayWindowSize;
    }

    /**
     * The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    @InputImport(name="tunnel2StartupAction")
      private final @Nullable Input<String> tunnel2StartupAction;

    public Input<String> getTunnel2StartupAction() {
        return this.tunnel2StartupAction == null ? Input.empty() : this.tunnel2StartupAction;
    }

    /**
     * The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
     * 
     */
    @InputImport(name="tunnel2VgwInsideAddress")
      private final @Nullable Input<String> tunnel2VgwInsideAddress;

    public Input<String> getTunnel2VgwInsideAddress() {
        return this.tunnel2VgwInsideAddress == null ? Input.empty() : this.tunnel2VgwInsideAddress;
    }

    /**
     * Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
     * 
     */
    @InputImport(name="tunnelInsideIpVersion")
      private final @Nullable Input<String> tunnelInsideIpVersion;

    public Input<String> getTunnelInsideIpVersion() {
        return this.tunnelInsideIpVersion == null ? Input.empty() : this.tunnelInsideIpVersion;
    }

    /**
     * The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
     * 
     */
    @InputImport(name="type")
      private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * Telemetry for the VPN tunnels. Detailed below.
     * 
     */
    @InputImport(name="vgwTelemetries")
      private final @Nullable Input<List<VpnConnectionVgwTelemetryGetArgs>> vgwTelemetries;

    public Input<List<VpnConnectionVgwTelemetryGetArgs>> getVgwTelemetries() {
        return this.vgwTelemetries == null ? Input.empty() : this.vgwTelemetries;
    }

    /**
     * The ID of the Virtual Private Gateway.
     * 
     */
    @InputImport(name="vpnGatewayId")
      private final @Nullable Input<String> vpnGatewayId;

    public Input<String> getVpnGatewayId() {
        return this.vpnGatewayId == null ? Input.empty() : this.vpnGatewayId;
    }

    public VpnConnectionState(
        @Nullable Input<String> arn,
        @Nullable Input<String> customerGatewayConfiguration,
        @Nullable Input<String> customerGatewayId,
        @Nullable Input<Boolean> enableAcceleration,
        @Nullable Input<String> localIpv4NetworkCidr,
        @Nullable Input<String> localIpv6NetworkCidr,
        @Nullable Input<String> remoteIpv4NetworkCidr,
        @Nullable Input<String> remoteIpv6NetworkCidr,
        @Nullable Input<List<VpnConnectionRouteGetArgs>> routes,
        @Nullable Input<Boolean> staticRoutesOnly,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> transitGatewayAttachmentId,
        @Nullable Input<String> transitGatewayId,
        @Nullable Input<String> tunnel1Address,
        @Nullable Input<String> tunnel1BgpAsn,
        @Nullable Input<Integer> tunnel1BgpHoldtime,
        @Nullable Input<String> tunnel1CgwInsideAddress,
        @Nullable Input<String> tunnel1DpdTimeoutAction,
        @Nullable Input<Integer> tunnel1DpdTimeoutSeconds,
        @Nullable Input<List<String>> tunnel1IkeVersions,
        @Nullable Input<String> tunnel1InsideCidr,
        @Nullable Input<String> tunnel1InsideIpv6Cidr,
        @Nullable Input<List<Integer>> tunnel1Phase1DhGroupNumbers,
        @Nullable Input<List<String>> tunnel1Phase1EncryptionAlgorithms,
        @Nullable Input<List<String>> tunnel1Phase1IntegrityAlgorithms,
        @Nullable Input<Integer> tunnel1Phase1LifetimeSeconds,
        @Nullable Input<List<Integer>> tunnel1Phase2DhGroupNumbers,
        @Nullable Input<List<String>> tunnel1Phase2EncryptionAlgorithms,
        @Nullable Input<List<String>> tunnel1Phase2IntegrityAlgorithms,
        @Nullable Input<Integer> tunnel1Phase2LifetimeSeconds,
        @Nullable Input<String> tunnel1PresharedKey,
        @Nullable Input<Integer> tunnel1RekeyFuzzPercentage,
        @Nullable Input<Integer> tunnel1RekeyMarginTimeSeconds,
        @Nullable Input<Integer> tunnel1ReplayWindowSize,
        @Nullable Input<String> tunnel1StartupAction,
        @Nullable Input<String> tunnel1VgwInsideAddress,
        @Nullable Input<String> tunnel2Address,
        @Nullable Input<String> tunnel2BgpAsn,
        @Nullable Input<Integer> tunnel2BgpHoldtime,
        @Nullable Input<String> tunnel2CgwInsideAddress,
        @Nullable Input<String> tunnel2DpdTimeoutAction,
        @Nullable Input<Integer> tunnel2DpdTimeoutSeconds,
        @Nullable Input<List<String>> tunnel2IkeVersions,
        @Nullable Input<String> tunnel2InsideCidr,
        @Nullable Input<String> tunnel2InsideIpv6Cidr,
        @Nullable Input<List<Integer>> tunnel2Phase1DhGroupNumbers,
        @Nullable Input<List<String>> tunnel2Phase1EncryptionAlgorithms,
        @Nullable Input<List<String>> tunnel2Phase1IntegrityAlgorithms,
        @Nullable Input<Integer> tunnel2Phase1LifetimeSeconds,
        @Nullable Input<List<Integer>> tunnel2Phase2DhGroupNumbers,
        @Nullable Input<List<String>> tunnel2Phase2EncryptionAlgorithms,
        @Nullable Input<List<String>> tunnel2Phase2IntegrityAlgorithms,
        @Nullable Input<Integer> tunnel2Phase2LifetimeSeconds,
        @Nullable Input<String> tunnel2PresharedKey,
        @Nullable Input<Integer> tunnel2RekeyFuzzPercentage,
        @Nullable Input<Integer> tunnel2RekeyMarginTimeSeconds,
        @Nullable Input<Integer> tunnel2ReplayWindowSize,
        @Nullable Input<String> tunnel2StartupAction,
        @Nullable Input<String> tunnel2VgwInsideAddress,
        @Nullable Input<String> tunnelInsideIpVersion,
        @Nullable Input<String> type,
        @Nullable Input<List<VpnConnectionVgwTelemetryGetArgs>> vgwTelemetries,
        @Nullable Input<String> vpnGatewayId) {
        this.arn = arn;
        this.customerGatewayConfiguration = customerGatewayConfiguration;
        this.customerGatewayId = customerGatewayId;
        this.enableAcceleration = enableAcceleration;
        this.localIpv4NetworkCidr = localIpv4NetworkCidr;
        this.localIpv6NetworkCidr = localIpv6NetworkCidr;
        this.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr;
        this.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr;
        this.routes = routes;
        this.staticRoutesOnly = staticRoutesOnly;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.transitGatewayAttachmentId = transitGatewayAttachmentId;
        this.transitGatewayId = transitGatewayId;
        this.tunnel1Address = tunnel1Address;
        this.tunnel1BgpAsn = tunnel1BgpAsn;
        this.tunnel1BgpHoldtime = tunnel1BgpHoldtime;
        this.tunnel1CgwInsideAddress = tunnel1CgwInsideAddress;
        this.tunnel1DpdTimeoutAction = tunnel1DpdTimeoutAction;
        this.tunnel1DpdTimeoutSeconds = tunnel1DpdTimeoutSeconds;
        this.tunnel1IkeVersions = tunnel1IkeVersions;
        this.tunnel1InsideCidr = tunnel1InsideCidr;
        this.tunnel1InsideIpv6Cidr = tunnel1InsideIpv6Cidr;
        this.tunnel1Phase1DhGroupNumbers = tunnel1Phase1DhGroupNumbers;
        this.tunnel1Phase1EncryptionAlgorithms = tunnel1Phase1EncryptionAlgorithms;
        this.tunnel1Phase1IntegrityAlgorithms = tunnel1Phase1IntegrityAlgorithms;
        this.tunnel1Phase1LifetimeSeconds = tunnel1Phase1LifetimeSeconds;
        this.tunnel1Phase2DhGroupNumbers = tunnel1Phase2DhGroupNumbers;
        this.tunnel1Phase2EncryptionAlgorithms = tunnel1Phase2EncryptionAlgorithms;
        this.tunnel1Phase2IntegrityAlgorithms = tunnel1Phase2IntegrityAlgorithms;
        this.tunnel1Phase2LifetimeSeconds = tunnel1Phase2LifetimeSeconds;
        this.tunnel1PresharedKey = tunnel1PresharedKey;
        this.tunnel1RekeyFuzzPercentage = tunnel1RekeyFuzzPercentage;
        this.tunnel1RekeyMarginTimeSeconds = tunnel1RekeyMarginTimeSeconds;
        this.tunnel1ReplayWindowSize = tunnel1ReplayWindowSize;
        this.tunnel1StartupAction = tunnel1StartupAction;
        this.tunnel1VgwInsideAddress = tunnel1VgwInsideAddress;
        this.tunnel2Address = tunnel2Address;
        this.tunnel2BgpAsn = tunnel2BgpAsn;
        this.tunnel2BgpHoldtime = tunnel2BgpHoldtime;
        this.tunnel2CgwInsideAddress = tunnel2CgwInsideAddress;
        this.tunnel2DpdTimeoutAction = tunnel2DpdTimeoutAction;
        this.tunnel2DpdTimeoutSeconds = tunnel2DpdTimeoutSeconds;
        this.tunnel2IkeVersions = tunnel2IkeVersions;
        this.tunnel2InsideCidr = tunnel2InsideCidr;
        this.tunnel2InsideIpv6Cidr = tunnel2InsideIpv6Cidr;
        this.tunnel2Phase1DhGroupNumbers = tunnel2Phase1DhGroupNumbers;
        this.tunnel2Phase1EncryptionAlgorithms = tunnel2Phase1EncryptionAlgorithms;
        this.tunnel2Phase1IntegrityAlgorithms = tunnel2Phase1IntegrityAlgorithms;
        this.tunnel2Phase1LifetimeSeconds = tunnel2Phase1LifetimeSeconds;
        this.tunnel2Phase2DhGroupNumbers = tunnel2Phase2DhGroupNumbers;
        this.tunnel2Phase2EncryptionAlgorithms = tunnel2Phase2EncryptionAlgorithms;
        this.tunnel2Phase2IntegrityAlgorithms = tunnel2Phase2IntegrityAlgorithms;
        this.tunnel2Phase2LifetimeSeconds = tunnel2Phase2LifetimeSeconds;
        this.tunnel2PresharedKey = tunnel2PresharedKey;
        this.tunnel2RekeyFuzzPercentage = tunnel2RekeyFuzzPercentage;
        this.tunnel2RekeyMarginTimeSeconds = tunnel2RekeyMarginTimeSeconds;
        this.tunnel2ReplayWindowSize = tunnel2ReplayWindowSize;
        this.tunnel2StartupAction = tunnel2StartupAction;
        this.tunnel2VgwInsideAddress = tunnel2VgwInsideAddress;
        this.tunnelInsideIpVersion = tunnelInsideIpVersion;
        this.type = type;
        this.vgwTelemetries = vgwTelemetries;
        this.vpnGatewayId = vpnGatewayId;
    }

    private VpnConnectionState() {
        this.arn = Input.empty();
        this.customerGatewayConfiguration = Input.empty();
        this.customerGatewayId = Input.empty();
        this.enableAcceleration = Input.empty();
        this.localIpv4NetworkCidr = Input.empty();
        this.localIpv6NetworkCidr = Input.empty();
        this.remoteIpv4NetworkCidr = Input.empty();
        this.remoteIpv6NetworkCidr = Input.empty();
        this.routes = Input.empty();
        this.staticRoutesOnly = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.transitGatewayAttachmentId = Input.empty();
        this.transitGatewayId = Input.empty();
        this.tunnel1Address = Input.empty();
        this.tunnel1BgpAsn = Input.empty();
        this.tunnel1BgpHoldtime = Input.empty();
        this.tunnel1CgwInsideAddress = Input.empty();
        this.tunnel1DpdTimeoutAction = Input.empty();
        this.tunnel1DpdTimeoutSeconds = Input.empty();
        this.tunnel1IkeVersions = Input.empty();
        this.tunnel1InsideCidr = Input.empty();
        this.tunnel1InsideIpv6Cidr = Input.empty();
        this.tunnel1Phase1DhGroupNumbers = Input.empty();
        this.tunnel1Phase1EncryptionAlgorithms = Input.empty();
        this.tunnel1Phase1IntegrityAlgorithms = Input.empty();
        this.tunnel1Phase1LifetimeSeconds = Input.empty();
        this.tunnel1Phase2DhGroupNumbers = Input.empty();
        this.tunnel1Phase2EncryptionAlgorithms = Input.empty();
        this.tunnel1Phase2IntegrityAlgorithms = Input.empty();
        this.tunnel1Phase2LifetimeSeconds = Input.empty();
        this.tunnel1PresharedKey = Input.empty();
        this.tunnel1RekeyFuzzPercentage = Input.empty();
        this.tunnel1RekeyMarginTimeSeconds = Input.empty();
        this.tunnel1ReplayWindowSize = Input.empty();
        this.tunnel1StartupAction = Input.empty();
        this.tunnel1VgwInsideAddress = Input.empty();
        this.tunnel2Address = Input.empty();
        this.tunnel2BgpAsn = Input.empty();
        this.tunnel2BgpHoldtime = Input.empty();
        this.tunnel2CgwInsideAddress = Input.empty();
        this.tunnel2DpdTimeoutAction = Input.empty();
        this.tunnel2DpdTimeoutSeconds = Input.empty();
        this.tunnel2IkeVersions = Input.empty();
        this.tunnel2InsideCidr = Input.empty();
        this.tunnel2InsideIpv6Cidr = Input.empty();
        this.tunnel2Phase1DhGroupNumbers = Input.empty();
        this.tunnel2Phase1EncryptionAlgorithms = Input.empty();
        this.tunnel2Phase1IntegrityAlgorithms = Input.empty();
        this.tunnel2Phase1LifetimeSeconds = Input.empty();
        this.tunnel2Phase2DhGroupNumbers = Input.empty();
        this.tunnel2Phase2EncryptionAlgorithms = Input.empty();
        this.tunnel2Phase2IntegrityAlgorithms = Input.empty();
        this.tunnel2Phase2LifetimeSeconds = Input.empty();
        this.tunnel2PresharedKey = Input.empty();
        this.tunnel2RekeyFuzzPercentage = Input.empty();
        this.tunnel2RekeyMarginTimeSeconds = Input.empty();
        this.tunnel2ReplayWindowSize = Input.empty();
        this.tunnel2StartupAction = Input.empty();
        this.tunnel2VgwInsideAddress = Input.empty();
        this.tunnelInsideIpVersion = Input.empty();
        this.type = Input.empty();
        this.vgwTelemetries = Input.empty();
        this.vpnGatewayId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> customerGatewayConfiguration;
        private @Nullable Input<String> customerGatewayId;
        private @Nullable Input<Boolean> enableAcceleration;
        private @Nullable Input<String> localIpv4NetworkCidr;
        private @Nullable Input<String> localIpv6NetworkCidr;
        private @Nullable Input<String> remoteIpv4NetworkCidr;
        private @Nullable Input<String> remoteIpv6NetworkCidr;
        private @Nullable Input<List<VpnConnectionRouteGetArgs>> routes;
        private @Nullable Input<Boolean> staticRoutesOnly;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> transitGatewayAttachmentId;
        private @Nullable Input<String> transitGatewayId;
        private @Nullable Input<String> tunnel1Address;
        private @Nullable Input<String> tunnel1BgpAsn;
        private @Nullable Input<Integer> tunnel1BgpHoldtime;
        private @Nullable Input<String> tunnel1CgwInsideAddress;
        private @Nullable Input<String> tunnel1DpdTimeoutAction;
        private @Nullable Input<Integer> tunnel1DpdTimeoutSeconds;
        private @Nullable Input<List<String>> tunnel1IkeVersions;
        private @Nullable Input<String> tunnel1InsideCidr;
        private @Nullable Input<String> tunnel1InsideIpv6Cidr;
        private @Nullable Input<List<Integer>> tunnel1Phase1DhGroupNumbers;
        private @Nullable Input<List<String>> tunnel1Phase1EncryptionAlgorithms;
        private @Nullable Input<List<String>> tunnel1Phase1IntegrityAlgorithms;
        private @Nullable Input<Integer> tunnel1Phase1LifetimeSeconds;
        private @Nullable Input<List<Integer>> tunnel1Phase2DhGroupNumbers;
        private @Nullable Input<List<String>> tunnel1Phase2EncryptionAlgorithms;
        private @Nullable Input<List<String>> tunnel1Phase2IntegrityAlgorithms;
        private @Nullable Input<Integer> tunnel1Phase2LifetimeSeconds;
        private @Nullable Input<String> tunnel1PresharedKey;
        private @Nullable Input<Integer> tunnel1RekeyFuzzPercentage;
        private @Nullable Input<Integer> tunnel1RekeyMarginTimeSeconds;
        private @Nullable Input<Integer> tunnel1ReplayWindowSize;
        private @Nullable Input<String> tunnel1StartupAction;
        private @Nullable Input<String> tunnel1VgwInsideAddress;
        private @Nullable Input<String> tunnel2Address;
        private @Nullable Input<String> tunnel2BgpAsn;
        private @Nullable Input<Integer> tunnel2BgpHoldtime;
        private @Nullable Input<String> tunnel2CgwInsideAddress;
        private @Nullable Input<String> tunnel2DpdTimeoutAction;
        private @Nullable Input<Integer> tunnel2DpdTimeoutSeconds;
        private @Nullable Input<List<String>> tunnel2IkeVersions;
        private @Nullable Input<String> tunnel2InsideCidr;
        private @Nullable Input<String> tunnel2InsideIpv6Cidr;
        private @Nullable Input<List<Integer>> tunnel2Phase1DhGroupNumbers;
        private @Nullable Input<List<String>> tunnel2Phase1EncryptionAlgorithms;
        private @Nullable Input<List<String>> tunnel2Phase1IntegrityAlgorithms;
        private @Nullable Input<Integer> tunnel2Phase1LifetimeSeconds;
        private @Nullable Input<List<Integer>> tunnel2Phase2DhGroupNumbers;
        private @Nullable Input<List<String>> tunnel2Phase2EncryptionAlgorithms;
        private @Nullable Input<List<String>> tunnel2Phase2IntegrityAlgorithms;
        private @Nullable Input<Integer> tunnel2Phase2LifetimeSeconds;
        private @Nullable Input<String> tunnel2PresharedKey;
        private @Nullable Input<Integer> tunnel2RekeyFuzzPercentage;
        private @Nullable Input<Integer> tunnel2RekeyMarginTimeSeconds;
        private @Nullable Input<Integer> tunnel2ReplayWindowSize;
        private @Nullable Input<String> tunnel2StartupAction;
        private @Nullable Input<String> tunnel2VgwInsideAddress;
        private @Nullable Input<String> tunnelInsideIpVersion;
        private @Nullable Input<String> type;
        private @Nullable Input<List<VpnConnectionVgwTelemetryGetArgs>> vgwTelemetries;
        private @Nullable Input<String> vpnGatewayId;

        public Builder() {
    	      // Empty
        }

        public Builder(VpnConnectionState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.customerGatewayConfiguration = defaults.customerGatewayConfiguration;
    	      this.customerGatewayId = defaults.customerGatewayId;
    	      this.enableAcceleration = defaults.enableAcceleration;
    	      this.localIpv4NetworkCidr = defaults.localIpv4NetworkCidr;
    	      this.localIpv6NetworkCidr = defaults.localIpv6NetworkCidr;
    	      this.remoteIpv4NetworkCidr = defaults.remoteIpv4NetworkCidr;
    	      this.remoteIpv6NetworkCidr = defaults.remoteIpv6NetworkCidr;
    	      this.routes = defaults.routes;
    	      this.staticRoutesOnly = defaults.staticRoutesOnly;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.transitGatewayAttachmentId = defaults.transitGatewayAttachmentId;
    	      this.transitGatewayId = defaults.transitGatewayId;
    	      this.tunnel1Address = defaults.tunnel1Address;
    	      this.tunnel1BgpAsn = defaults.tunnel1BgpAsn;
    	      this.tunnel1BgpHoldtime = defaults.tunnel1BgpHoldtime;
    	      this.tunnel1CgwInsideAddress = defaults.tunnel1CgwInsideAddress;
    	      this.tunnel1DpdTimeoutAction = defaults.tunnel1DpdTimeoutAction;
    	      this.tunnel1DpdTimeoutSeconds = defaults.tunnel1DpdTimeoutSeconds;
    	      this.tunnel1IkeVersions = defaults.tunnel1IkeVersions;
    	      this.tunnel1InsideCidr = defaults.tunnel1InsideCidr;
    	      this.tunnel1InsideIpv6Cidr = defaults.tunnel1InsideIpv6Cidr;
    	      this.tunnel1Phase1DhGroupNumbers = defaults.tunnel1Phase1DhGroupNumbers;
    	      this.tunnel1Phase1EncryptionAlgorithms = defaults.tunnel1Phase1EncryptionAlgorithms;
    	      this.tunnel1Phase1IntegrityAlgorithms = defaults.tunnel1Phase1IntegrityAlgorithms;
    	      this.tunnel1Phase1LifetimeSeconds = defaults.tunnel1Phase1LifetimeSeconds;
    	      this.tunnel1Phase2DhGroupNumbers = defaults.tunnel1Phase2DhGroupNumbers;
    	      this.tunnel1Phase2EncryptionAlgorithms = defaults.tunnel1Phase2EncryptionAlgorithms;
    	      this.tunnel1Phase2IntegrityAlgorithms = defaults.tunnel1Phase2IntegrityAlgorithms;
    	      this.tunnel1Phase2LifetimeSeconds = defaults.tunnel1Phase2LifetimeSeconds;
    	      this.tunnel1PresharedKey = defaults.tunnel1PresharedKey;
    	      this.tunnel1RekeyFuzzPercentage = defaults.tunnel1RekeyFuzzPercentage;
    	      this.tunnel1RekeyMarginTimeSeconds = defaults.tunnel1RekeyMarginTimeSeconds;
    	      this.tunnel1ReplayWindowSize = defaults.tunnel1ReplayWindowSize;
    	      this.tunnel1StartupAction = defaults.tunnel1StartupAction;
    	      this.tunnel1VgwInsideAddress = defaults.tunnel1VgwInsideAddress;
    	      this.tunnel2Address = defaults.tunnel2Address;
    	      this.tunnel2BgpAsn = defaults.tunnel2BgpAsn;
    	      this.tunnel2BgpHoldtime = defaults.tunnel2BgpHoldtime;
    	      this.tunnel2CgwInsideAddress = defaults.tunnel2CgwInsideAddress;
    	      this.tunnel2DpdTimeoutAction = defaults.tunnel2DpdTimeoutAction;
    	      this.tunnel2DpdTimeoutSeconds = defaults.tunnel2DpdTimeoutSeconds;
    	      this.tunnel2IkeVersions = defaults.tunnel2IkeVersions;
    	      this.tunnel2InsideCidr = defaults.tunnel2InsideCidr;
    	      this.tunnel2InsideIpv6Cidr = defaults.tunnel2InsideIpv6Cidr;
    	      this.tunnel2Phase1DhGroupNumbers = defaults.tunnel2Phase1DhGroupNumbers;
    	      this.tunnel2Phase1EncryptionAlgorithms = defaults.tunnel2Phase1EncryptionAlgorithms;
    	      this.tunnel2Phase1IntegrityAlgorithms = defaults.tunnel2Phase1IntegrityAlgorithms;
    	      this.tunnel2Phase1LifetimeSeconds = defaults.tunnel2Phase1LifetimeSeconds;
    	      this.tunnel2Phase2DhGroupNumbers = defaults.tunnel2Phase2DhGroupNumbers;
    	      this.tunnel2Phase2EncryptionAlgorithms = defaults.tunnel2Phase2EncryptionAlgorithms;
    	      this.tunnel2Phase2IntegrityAlgorithms = defaults.tunnel2Phase2IntegrityAlgorithms;
    	      this.tunnel2Phase2LifetimeSeconds = defaults.tunnel2Phase2LifetimeSeconds;
    	      this.tunnel2PresharedKey = defaults.tunnel2PresharedKey;
    	      this.tunnel2RekeyFuzzPercentage = defaults.tunnel2RekeyFuzzPercentage;
    	      this.tunnel2RekeyMarginTimeSeconds = defaults.tunnel2RekeyMarginTimeSeconds;
    	      this.tunnel2ReplayWindowSize = defaults.tunnel2ReplayWindowSize;
    	      this.tunnel2StartupAction = defaults.tunnel2StartupAction;
    	      this.tunnel2VgwInsideAddress = defaults.tunnel2VgwInsideAddress;
    	      this.tunnelInsideIpVersion = defaults.tunnelInsideIpVersion;
    	      this.type = defaults.type;
    	      this.vgwTelemetries = defaults.vgwTelemetries;
    	      this.vpnGatewayId = defaults.vpnGatewayId;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder customerGatewayConfiguration(@Nullable Input<String> customerGatewayConfiguration) {
            this.customerGatewayConfiguration = customerGatewayConfiguration;
            return this;
        }

        public Builder customerGatewayConfiguration(@Nullable String customerGatewayConfiguration) {
            this.customerGatewayConfiguration = Input.ofNullable(customerGatewayConfiguration);
            return this;
        }

        public Builder customerGatewayId(@Nullable Input<String> customerGatewayId) {
            this.customerGatewayId = customerGatewayId;
            return this;
        }

        public Builder customerGatewayId(@Nullable String customerGatewayId) {
            this.customerGatewayId = Input.ofNullable(customerGatewayId);
            return this;
        }

        public Builder enableAcceleration(@Nullable Input<Boolean> enableAcceleration) {
            this.enableAcceleration = enableAcceleration;
            return this;
        }

        public Builder enableAcceleration(@Nullable Boolean enableAcceleration) {
            this.enableAcceleration = Input.ofNullable(enableAcceleration);
            return this;
        }

        public Builder localIpv4NetworkCidr(@Nullable Input<String> localIpv4NetworkCidr) {
            this.localIpv4NetworkCidr = localIpv4NetworkCidr;
            return this;
        }

        public Builder localIpv4NetworkCidr(@Nullable String localIpv4NetworkCidr) {
            this.localIpv4NetworkCidr = Input.ofNullable(localIpv4NetworkCidr);
            return this;
        }

        public Builder localIpv6NetworkCidr(@Nullable Input<String> localIpv6NetworkCidr) {
            this.localIpv6NetworkCidr = localIpv6NetworkCidr;
            return this;
        }

        public Builder localIpv6NetworkCidr(@Nullable String localIpv6NetworkCidr) {
            this.localIpv6NetworkCidr = Input.ofNullable(localIpv6NetworkCidr);
            return this;
        }

        public Builder remoteIpv4NetworkCidr(@Nullable Input<String> remoteIpv4NetworkCidr) {
            this.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr;
            return this;
        }

        public Builder remoteIpv4NetworkCidr(@Nullable String remoteIpv4NetworkCidr) {
            this.remoteIpv4NetworkCidr = Input.ofNullable(remoteIpv4NetworkCidr);
            return this;
        }

        public Builder remoteIpv6NetworkCidr(@Nullable Input<String> remoteIpv6NetworkCidr) {
            this.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr;
            return this;
        }

        public Builder remoteIpv6NetworkCidr(@Nullable String remoteIpv6NetworkCidr) {
            this.remoteIpv6NetworkCidr = Input.ofNullable(remoteIpv6NetworkCidr);
            return this;
        }

        public Builder routes(@Nullable Input<List<VpnConnectionRouteGetArgs>> routes) {
            this.routes = routes;
            return this;
        }

        public Builder routes(@Nullable List<VpnConnectionRouteGetArgs> routes) {
            this.routes = Input.ofNullable(routes);
            return this;
        }

        public Builder staticRoutesOnly(@Nullable Input<Boolean> staticRoutesOnly) {
            this.staticRoutesOnly = staticRoutesOnly;
            return this;
        }

        public Builder staticRoutesOnly(@Nullable Boolean staticRoutesOnly) {
            this.staticRoutesOnly = Input.ofNullable(staticRoutesOnly);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder transitGatewayAttachmentId(@Nullable Input<String> transitGatewayAttachmentId) {
            this.transitGatewayAttachmentId = transitGatewayAttachmentId;
            return this;
        }

        public Builder transitGatewayAttachmentId(@Nullable String transitGatewayAttachmentId) {
            this.transitGatewayAttachmentId = Input.ofNullable(transitGatewayAttachmentId);
            return this;
        }

        public Builder transitGatewayId(@Nullable Input<String> transitGatewayId) {
            this.transitGatewayId = transitGatewayId;
            return this;
        }

        public Builder transitGatewayId(@Nullable String transitGatewayId) {
            this.transitGatewayId = Input.ofNullable(transitGatewayId);
            return this;
        }

        public Builder tunnel1Address(@Nullable Input<String> tunnel1Address) {
            this.tunnel1Address = tunnel1Address;
            return this;
        }

        public Builder tunnel1Address(@Nullable String tunnel1Address) {
            this.tunnel1Address = Input.ofNullable(tunnel1Address);
            return this;
        }

        public Builder tunnel1BgpAsn(@Nullable Input<String> tunnel1BgpAsn) {
            this.tunnel1BgpAsn = tunnel1BgpAsn;
            return this;
        }

        public Builder tunnel1BgpAsn(@Nullable String tunnel1BgpAsn) {
            this.tunnel1BgpAsn = Input.ofNullable(tunnel1BgpAsn);
            return this;
        }

        public Builder tunnel1BgpHoldtime(@Nullable Input<Integer> tunnel1BgpHoldtime) {
            this.tunnel1BgpHoldtime = tunnel1BgpHoldtime;
            return this;
        }

        public Builder tunnel1BgpHoldtime(@Nullable Integer tunnel1BgpHoldtime) {
            this.tunnel1BgpHoldtime = Input.ofNullable(tunnel1BgpHoldtime);
            return this;
        }

        public Builder tunnel1CgwInsideAddress(@Nullable Input<String> tunnel1CgwInsideAddress) {
            this.tunnel1CgwInsideAddress = tunnel1CgwInsideAddress;
            return this;
        }

        public Builder tunnel1CgwInsideAddress(@Nullable String tunnel1CgwInsideAddress) {
            this.tunnel1CgwInsideAddress = Input.ofNullable(tunnel1CgwInsideAddress);
            return this;
        }

        public Builder tunnel1DpdTimeoutAction(@Nullable Input<String> tunnel1DpdTimeoutAction) {
            this.tunnel1DpdTimeoutAction = tunnel1DpdTimeoutAction;
            return this;
        }

        public Builder tunnel1DpdTimeoutAction(@Nullable String tunnel1DpdTimeoutAction) {
            this.tunnel1DpdTimeoutAction = Input.ofNullable(tunnel1DpdTimeoutAction);
            return this;
        }

        public Builder tunnel1DpdTimeoutSeconds(@Nullable Input<Integer> tunnel1DpdTimeoutSeconds) {
            this.tunnel1DpdTimeoutSeconds = tunnel1DpdTimeoutSeconds;
            return this;
        }

        public Builder tunnel1DpdTimeoutSeconds(@Nullable Integer tunnel1DpdTimeoutSeconds) {
            this.tunnel1DpdTimeoutSeconds = Input.ofNullable(tunnel1DpdTimeoutSeconds);
            return this;
        }

        public Builder tunnel1IkeVersions(@Nullable Input<List<String>> tunnel1IkeVersions) {
            this.tunnel1IkeVersions = tunnel1IkeVersions;
            return this;
        }

        public Builder tunnel1IkeVersions(@Nullable List<String> tunnel1IkeVersions) {
            this.tunnel1IkeVersions = Input.ofNullable(tunnel1IkeVersions);
            return this;
        }

        public Builder tunnel1InsideCidr(@Nullable Input<String> tunnel1InsideCidr) {
            this.tunnel1InsideCidr = tunnel1InsideCidr;
            return this;
        }

        public Builder tunnel1InsideCidr(@Nullable String tunnel1InsideCidr) {
            this.tunnel1InsideCidr = Input.ofNullable(tunnel1InsideCidr);
            return this;
        }

        public Builder tunnel1InsideIpv6Cidr(@Nullable Input<String> tunnel1InsideIpv6Cidr) {
            this.tunnel1InsideIpv6Cidr = tunnel1InsideIpv6Cidr;
            return this;
        }

        public Builder tunnel1InsideIpv6Cidr(@Nullable String tunnel1InsideIpv6Cidr) {
            this.tunnel1InsideIpv6Cidr = Input.ofNullable(tunnel1InsideIpv6Cidr);
            return this;
        }

        public Builder tunnel1Phase1DhGroupNumbers(@Nullable Input<List<Integer>> tunnel1Phase1DhGroupNumbers) {
            this.tunnel1Phase1DhGroupNumbers = tunnel1Phase1DhGroupNumbers;
            return this;
        }

        public Builder tunnel1Phase1DhGroupNumbers(@Nullable List<Integer> tunnel1Phase1DhGroupNumbers) {
            this.tunnel1Phase1DhGroupNumbers = Input.ofNullable(tunnel1Phase1DhGroupNumbers);
            return this;
        }

        public Builder tunnel1Phase1EncryptionAlgorithms(@Nullable Input<List<String>> tunnel1Phase1EncryptionAlgorithms) {
            this.tunnel1Phase1EncryptionAlgorithms = tunnel1Phase1EncryptionAlgorithms;
            return this;
        }

        public Builder tunnel1Phase1EncryptionAlgorithms(@Nullable List<String> tunnel1Phase1EncryptionAlgorithms) {
            this.tunnel1Phase1EncryptionAlgorithms = Input.ofNullable(tunnel1Phase1EncryptionAlgorithms);
            return this;
        }

        public Builder tunnel1Phase1IntegrityAlgorithms(@Nullable Input<List<String>> tunnel1Phase1IntegrityAlgorithms) {
            this.tunnel1Phase1IntegrityAlgorithms = tunnel1Phase1IntegrityAlgorithms;
            return this;
        }

        public Builder tunnel1Phase1IntegrityAlgorithms(@Nullable List<String> tunnel1Phase1IntegrityAlgorithms) {
            this.tunnel1Phase1IntegrityAlgorithms = Input.ofNullable(tunnel1Phase1IntegrityAlgorithms);
            return this;
        }

        public Builder tunnel1Phase1LifetimeSeconds(@Nullable Input<Integer> tunnel1Phase1LifetimeSeconds) {
            this.tunnel1Phase1LifetimeSeconds = tunnel1Phase1LifetimeSeconds;
            return this;
        }

        public Builder tunnel1Phase1LifetimeSeconds(@Nullable Integer tunnel1Phase1LifetimeSeconds) {
            this.tunnel1Phase1LifetimeSeconds = Input.ofNullable(tunnel1Phase1LifetimeSeconds);
            return this;
        }

        public Builder tunnel1Phase2DhGroupNumbers(@Nullable Input<List<Integer>> tunnel1Phase2DhGroupNumbers) {
            this.tunnel1Phase2DhGroupNumbers = tunnel1Phase2DhGroupNumbers;
            return this;
        }

        public Builder tunnel1Phase2DhGroupNumbers(@Nullable List<Integer> tunnel1Phase2DhGroupNumbers) {
            this.tunnel1Phase2DhGroupNumbers = Input.ofNullable(tunnel1Phase2DhGroupNumbers);
            return this;
        }

        public Builder tunnel1Phase2EncryptionAlgorithms(@Nullable Input<List<String>> tunnel1Phase2EncryptionAlgorithms) {
            this.tunnel1Phase2EncryptionAlgorithms = tunnel1Phase2EncryptionAlgorithms;
            return this;
        }

        public Builder tunnel1Phase2EncryptionAlgorithms(@Nullable List<String> tunnel1Phase2EncryptionAlgorithms) {
            this.tunnel1Phase2EncryptionAlgorithms = Input.ofNullable(tunnel1Phase2EncryptionAlgorithms);
            return this;
        }

        public Builder tunnel1Phase2IntegrityAlgorithms(@Nullable Input<List<String>> tunnel1Phase2IntegrityAlgorithms) {
            this.tunnel1Phase2IntegrityAlgorithms = tunnel1Phase2IntegrityAlgorithms;
            return this;
        }

        public Builder tunnel1Phase2IntegrityAlgorithms(@Nullable List<String> tunnel1Phase2IntegrityAlgorithms) {
            this.tunnel1Phase2IntegrityAlgorithms = Input.ofNullable(tunnel1Phase2IntegrityAlgorithms);
            return this;
        }

        public Builder tunnel1Phase2LifetimeSeconds(@Nullable Input<Integer> tunnel1Phase2LifetimeSeconds) {
            this.tunnel1Phase2LifetimeSeconds = tunnel1Phase2LifetimeSeconds;
            return this;
        }

        public Builder tunnel1Phase2LifetimeSeconds(@Nullable Integer tunnel1Phase2LifetimeSeconds) {
            this.tunnel1Phase2LifetimeSeconds = Input.ofNullable(tunnel1Phase2LifetimeSeconds);
            return this;
        }

        public Builder tunnel1PresharedKey(@Nullable Input<String> tunnel1PresharedKey) {
            this.tunnel1PresharedKey = tunnel1PresharedKey;
            return this;
        }

        public Builder tunnel1PresharedKey(@Nullable String tunnel1PresharedKey) {
            this.tunnel1PresharedKey = Input.ofNullable(tunnel1PresharedKey);
            return this;
        }

        public Builder tunnel1RekeyFuzzPercentage(@Nullable Input<Integer> tunnel1RekeyFuzzPercentage) {
            this.tunnel1RekeyFuzzPercentage = tunnel1RekeyFuzzPercentage;
            return this;
        }

        public Builder tunnel1RekeyFuzzPercentage(@Nullable Integer tunnel1RekeyFuzzPercentage) {
            this.tunnel1RekeyFuzzPercentage = Input.ofNullable(tunnel1RekeyFuzzPercentage);
            return this;
        }

        public Builder tunnel1RekeyMarginTimeSeconds(@Nullable Input<Integer> tunnel1RekeyMarginTimeSeconds) {
            this.tunnel1RekeyMarginTimeSeconds = tunnel1RekeyMarginTimeSeconds;
            return this;
        }

        public Builder tunnel1RekeyMarginTimeSeconds(@Nullable Integer tunnel1RekeyMarginTimeSeconds) {
            this.tunnel1RekeyMarginTimeSeconds = Input.ofNullable(tunnel1RekeyMarginTimeSeconds);
            return this;
        }

        public Builder tunnel1ReplayWindowSize(@Nullable Input<Integer> tunnel1ReplayWindowSize) {
            this.tunnel1ReplayWindowSize = tunnel1ReplayWindowSize;
            return this;
        }

        public Builder tunnel1ReplayWindowSize(@Nullable Integer tunnel1ReplayWindowSize) {
            this.tunnel1ReplayWindowSize = Input.ofNullable(tunnel1ReplayWindowSize);
            return this;
        }

        public Builder tunnel1StartupAction(@Nullable Input<String> tunnel1StartupAction) {
            this.tunnel1StartupAction = tunnel1StartupAction;
            return this;
        }

        public Builder tunnel1StartupAction(@Nullable String tunnel1StartupAction) {
            this.tunnel1StartupAction = Input.ofNullable(tunnel1StartupAction);
            return this;
        }

        public Builder tunnel1VgwInsideAddress(@Nullable Input<String> tunnel1VgwInsideAddress) {
            this.tunnel1VgwInsideAddress = tunnel1VgwInsideAddress;
            return this;
        }

        public Builder tunnel1VgwInsideAddress(@Nullable String tunnel1VgwInsideAddress) {
            this.tunnel1VgwInsideAddress = Input.ofNullable(tunnel1VgwInsideAddress);
            return this;
        }

        public Builder tunnel2Address(@Nullable Input<String> tunnel2Address) {
            this.tunnel2Address = tunnel2Address;
            return this;
        }

        public Builder tunnel2Address(@Nullable String tunnel2Address) {
            this.tunnel2Address = Input.ofNullable(tunnel2Address);
            return this;
        }

        public Builder tunnel2BgpAsn(@Nullable Input<String> tunnel2BgpAsn) {
            this.tunnel2BgpAsn = tunnel2BgpAsn;
            return this;
        }

        public Builder tunnel2BgpAsn(@Nullable String tunnel2BgpAsn) {
            this.tunnel2BgpAsn = Input.ofNullable(tunnel2BgpAsn);
            return this;
        }

        public Builder tunnel2BgpHoldtime(@Nullable Input<Integer> tunnel2BgpHoldtime) {
            this.tunnel2BgpHoldtime = tunnel2BgpHoldtime;
            return this;
        }

        public Builder tunnel2BgpHoldtime(@Nullable Integer tunnel2BgpHoldtime) {
            this.tunnel2BgpHoldtime = Input.ofNullable(tunnel2BgpHoldtime);
            return this;
        }

        public Builder tunnel2CgwInsideAddress(@Nullable Input<String> tunnel2CgwInsideAddress) {
            this.tunnel2CgwInsideAddress = tunnel2CgwInsideAddress;
            return this;
        }

        public Builder tunnel2CgwInsideAddress(@Nullable String tunnel2CgwInsideAddress) {
            this.tunnel2CgwInsideAddress = Input.ofNullable(tunnel2CgwInsideAddress);
            return this;
        }

        public Builder tunnel2DpdTimeoutAction(@Nullable Input<String> tunnel2DpdTimeoutAction) {
            this.tunnel2DpdTimeoutAction = tunnel2DpdTimeoutAction;
            return this;
        }

        public Builder tunnel2DpdTimeoutAction(@Nullable String tunnel2DpdTimeoutAction) {
            this.tunnel2DpdTimeoutAction = Input.ofNullable(tunnel2DpdTimeoutAction);
            return this;
        }

        public Builder tunnel2DpdTimeoutSeconds(@Nullable Input<Integer> tunnel2DpdTimeoutSeconds) {
            this.tunnel2DpdTimeoutSeconds = tunnel2DpdTimeoutSeconds;
            return this;
        }

        public Builder tunnel2DpdTimeoutSeconds(@Nullable Integer tunnel2DpdTimeoutSeconds) {
            this.tunnel2DpdTimeoutSeconds = Input.ofNullable(tunnel2DpdTimeoutSeconds);
            return this;
        }

        public Builder tunnel2IkeVersions(@Nullable Input<List<String>> tunnel2IkeVersions) {
            this.tunnel2IkeVersions = tunnel2IkeVersions;
            return this;
        }

        public Builder tunnel2IkeVersions(@Nullable List<String> tunnel2IkeVersions) {
            this.tunnel2IkeVersions = Input.ofNullable(tunnel2IkeVersions);
            return this;
        }

        public Builder tunnel2InsideCidr(@Nullable Input<String> tunnel2InsideCidr) {
            this.tunnel2InsideCidr = tunnel2InsideCidr;
            return this;
        }

        public Builder tunnel2InsideCidr(@Nullable String tunnel2InsideCidr) {
            this.tunnel2InsideCidr = Input.ofNullable(tunnel2InsideCidr);
            return this;
        }

        public Builder tunnel2InsideIpv6Cidr(@Nullable Input<String> tunnel2InsideIpv6Cidr) {
            this.tunnel2InsideIpv6Cidr = tunnel2InsideIpv6Cidr;
            return this;
        }

        public Builder tunnel2InsideIpv6Cidr(@Nullable String tunnel2InsideIpv6Cidr) {
            this.tunnel2InsideIpv6Cidr = Input.ofNullable(tunnel2InsideIpv6Cidr);
            return this;
        }

        public Builder tunnel2Phase1DhGroupNumbers(@Nullable Input<List<Integer>> tunnel2Phase1DhGroupNumbers) {
            this.tunnel2Phase1DhGroupNumbers = tunnel2Phase1DhGroupNumbers;
            return this;
        }

        public Builder tunnel2Phase1DhGroupNumbers(@Nullable List<Integer> tunnel2Phase1DhGroupNumbers) {
            this.tunnel2Phase1DhGroupNumbers = Input.ofNullable(tunnel2Phase1DhGroupNumbers);
            return this;
        }

        public Builder tunnel2Phase1EncryptionAlgorithms(@Nullable Input<List<String>> tunnel2Phase1EncryptionAlgorithms) {
            this.tunnel2Phase1EncryptionAlgorithms = tunnel2Phase1EncryptionAlgorithms;
            return this;
        }

        public Builder tunnel2Phase1EncryptionAlgorithms(@Nullable List<String> tunnel2Phase1EncryptionAlgorithms) {
            this.tunnel2Phase1EncryptionAlgorithms = Input.ofNullable(tunnel2Phase1EncryptionAlgorithms);
            return this;
        }

        public Builder tunnel2Phase1IntegrityAlgorithms(@Nullable Input<List<String>> tunnel2Phase1IntegrityAlgorithms) {
            this.tunnel2Phase1IntegrityAlgorithms = tunnel2Phase1IntegrityAlgorithms;
            return this;
        }

        public Builder tunnel2Phase1IntegrityAlgorithms(@Nullable List<String> tunnel2Phase1IntegrityAlgorithms) {
            this.tunnel2Phase1IntegrityAlgorithms = Input.ofNullable(tunnel2Phase1IntegrityAlgorithms);
            return this;
        }

        public Builder tunnel2Phase1LifetimeSeconds(@Nullable Input<Integer> tunnel2Phase1LifetimeSeconds) {
            this.tunnel2Phase1LifetimeSeconds = tunnel2Phase1LifetimeSeconds;
            return this;
        }

        public Builder tunnel2Phase1LifetimeSeconds(@Nullable Integer tunnel2Phase1LifetimeSeconds) {
            this.tunnel2Phase1LifetimeSeconds = Input.ofNullable(tunnel2Phase1LifetimeSeconds);
            return this;
        }

        public Builder tunnel2Phase2DhGroupNumbers(@Nullable Input<List<Integer>> tunnel2Phase2DhGroupNumbers) {
            this.tunnel2Phase2DhGroupNumbers = tunnel2Phase2DhGroupNumbers;
            return this;
        }

        public Builder tunnel2Phase2DhGroupNumbers(@Nullable List<Integer> tunnel2Phase2DhGroupNumbers) {
            this.tunnel2Phase2DhGroupNumbers = Input.ofNullable(tunnel2Phase2DhGroupNumbers);
            return this;
        }

        public Builder tunnel2Phase2EncryptionAlgorithms(@Nullable Input<List<String>> tunnel2Phase2EncryptionAlgorithms) {
            this.tunnel2Phase2EncryptionAlgorithms = tunnel2Phase2EncryptionAlgorithms;
            return this;
        }

        public Builder tunnel2Phase2EncryptionAlgorithms(@Nullable List<String> tunnel2Phase2EncryptionAlgorithms) {
            this.tunnel2Phase2EncryptionAlgorithms = Input.ofNullable(tunnel2Phase2EncryptionAlgorithms);
            return this;
        }

        public Builder tunnel2Phase2IntegrityAlgorithms(@Nullable Input<List<String>> tunnel2Phase2IntegrityAlgorithms) {
            this.tunnel2Phase2IntegrityAlgorithms = tunnel2Phase2IntegrityAlgorithms;
            return this;
        }

        public Builder tunnel2Phase2IntegrityAlgorithms(@Nullable List<String> tunnel2Phase2IntegrityAlgorithms) {
            this.tunnel2Phase2IntegrityAlgorithms = Input.ofNullable(tunnel2Phase2IntegrityAlgorithms);
            return this;
        }

        public Builder tunnel2Phase2LifetimeSeconds(@Nullable Input<Integer> tunnel2Phase2LifetimeSeconds) {
            this.tunnel2Phase2LifetimeSeconds = tunnel2Phase2LifetimeSeconds;
            return this;
        }

        public Builder tunnel2Phase2LifetimeSeconds(@Nullable Integer tunnel2Phase2LifetimeSeconds) {
            this.tunnel2Phase2LifetimeSeconds = Input.ofNullable(tunnel2Phase2LifetimeSeconds);
            return this;
        }

        public Builder tunnel2PresharedKey(@Nullable Input<String> tunnel2PresharedKey) {
            this.tunnel2PresharedKey = tunnel2PresharedKey;
            return this;
        }

        public Builder tunnel2PresharedKey(@Nullable String tunnel2PresharedKey) {
            this.tunnel2PresharedKey = Input.ofNullable(tunnel2PresharedKey);
            return this;
        }

        public Builder tunnel2RekeyFuzzPercentage(@Nullable Input<Integer> tunnel2RekeyFuzzPercentage) {
            this.tunnel2RekeyFuzzPercentage = tunnel2RekeyFuzzPercentage;
            return this;
        }

        public Builder tunnel2RekeyFuzzPercentage(@Nullable Integer tunnel2RekeyFuzzPercentage) {
            this.tunnel2RekeyFuzzPercentage = Input.ofNullable(tunnel2RekeyFuzzPercentage);
            return this;
        }

        public Builder tunnel2RekeyMarginTimeSeconds(@Nullable Input<Integer> tunnel2RekeyMarginTimeSeconds) {
            this.tunnel2RekeyMarginTimeSeconds = tunnel2RekeyMarginTimeSeconds;
            return this;
        }

        public Builder tunnel2RekeyMarginTimeSeconds(@Nullable Integer tunnel2RekeyMarginTimeSeconds) {
            this.tunnel2RekeyMarginTimeSeconds = Input.ofNullable(tunnel2RekeyMarginTimeSeconds);
            return this;
        }

        public Builder tunnel2ReplayWindowSize(@Nullable Input<Integer> tunnel2ReplayWindowSize) {
            this.tunnel2ReplayWindowSize = tunnel2ReplayWindowSize;
            return this;
        }

        public Builder tunnel2ReplayWindowSize(@Nullable Integer tunnel2ReplayWindowSize) {
            this.tunnel2ReplayWindowSize = Input.ofNullable(tunnel2ReplayWindowSize);
            return this;
        }

        public Builder tunnel2StartupAction(@Nullable Input<String> tunnel2StartupAction) {
            this.tunnel2StartupAction = tunnel2StartupAction;
            return this;
        }

        public Builder tunnel2StartupAction(@Nullable String tunnel2StartupAction) {
            this.tunnel2StartupAction = Input.ofNullable(tunnel2StartupAction);
            return this;
        }

        public Builder tunnel2VgwInsideAddress(@Nullable Input<String> tunnel2VgwInsideAddress) {
            this.tunnel2VgwInsideAddress = tunnel2VgwInsideAddress;
            return this;
        }

        public Builder tunnel2VgwInsideAddress(@Nullable String tunnel2VgwInsideAddress) {
            this.tunnel2VgwInsideAddress = Input.ofNullable(tunnel2VgwInsideAddress);
            return this;
        }

        public Builder tunnelInsideIpVersion(@Nullable Input<String> tunnelInsideIpVersion) {
            this.tunnelInsideIpVersion = tunnelInsideIpVersion;
            return this;
        }

        public Builder tunnelInsideIpVersion(@Nullable String tunnelInsideIpVersion) {
            this.tunnelInsideIpVersion = Input.ofNullable(tunnelInsideIpVersion);
            return this;
        }

        public Builder type(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder vgwTelemetries(@Nullable Input<List<VpnConnectionVgwTelemetryGetArgs>> vgwTelemetries) {
            this.vgwTelemetries = vgwTelemetries;
            return this;
        }

        public Builder vgwTelemetries(@Nullable List<VpnConnectionVgwTelemetryGetArgs> vgwTelemetries) {
            this.vgwTelemetries = Input.ofNullable(vgwTelemetries);
            return this;
        }

        public Builder vpnGatewayId(@Nullable Input<String> vpnGatewayId) {
            this.vpnGatewayId = vpnGatewayId;
            return this;
        }

        public Builder vpnGatewayId(@Nullable String vpnGatewayId) {
            this.vpnGatewayId = Input.ofNullable(vpnGatewayId);
            return this;
        }
        public VpnConnectionState build() {
            return new VpnConnectionState(arn, customerGatewayConfiguration, customerGatewayId, enableAcceleration, localIpv4NetworkCidr, localIpv6NetworkCidr, remoteIpv4NetworkCidr, remoteIpv6NetworkCidr, routes, staticRoutesOnly, tags, tagsAll, transitGatewayAttachmentId, transitGatewayId, tunnel1Address, tunnel1BgpAsn, tunnel1BgpHoldtime, tunnel1CgwInsideAddress, tunnel1DpdTimeoutAction, tunnel1DpdTimeoutSeconds, tunnel1IkeVersions, tunnel1InsideCidr, tunnel1InsideIpv6Cidr, tunnel1Phase1DhGroupNumbers, tunnel1Phase1EncryptionAlgorithms, tunnel1Phase1IntegrityAlgorithms, tunnel1Phase1LifetimeSeconds, tunnel1Phase2DhGroupNumbers, tunnel1Phase2EncryptionAlgorithms, tunnel1Phase2IntegrityAlgorithms, tunnel1Phase2LifetimeSeconds, tunnel1PresharedKey, tunnel1RekeyFuzzPercentage, tunnel1RekeyMarginTimeSeconds, tunnel1ReplayWindowSize, tunnel1StartupAction, tunnel1VgwInsideAddress, tunnel2Address, tunnel2BgpAsn, tunnel2BgpHoldtime, tunnel2CgwInsideAddress, tunnel2DpdTimeoutAction, tunnel2DpdTimeoutSeconds, tunnel2IkeVersions, tunnel2InsideCidr, tunnel2InsideIpv6Cidr, tunnel2Phase1DhGroupNumbers, tunnel2Phase1EncryptionAlgorithms, tunnel2Phase1IntegrityAlgorithms, tunnel2Phase1LifetimeSeconds, tunnel2Phase2DhGroupNumbers, tunnel2Phase2EncryptionAlgorithms, tunnel2Phase2IntegrityAlgorithms, tunnel2Phase2LifetimeSeconds, tunnel2PresharedKey, tunnel2RekeyFuzzPercentage, tunnel2RekeyMarginTimeSeconds, tunnel2ReplayWindowSize, tunnel2StartupAction, tunnel2VgwInsideAddress, tunnelInsideIpVersion, type, vgwTelemetries, vpnGatewayId);
        }
    }
}
