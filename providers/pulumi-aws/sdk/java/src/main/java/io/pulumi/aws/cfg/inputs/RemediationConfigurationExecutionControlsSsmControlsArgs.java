// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cfg.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RemediationConfigurationExecutionControlsSsmControlsArgs extends io.pulumi.resources.ResourceArgs {

    public static final RemediationConfigurationExecutionControlsSsmControlsArgs Empty = new RemediationConfigurationExecutionControlsSsmControlsArgs();

    /**
     * Maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. The default value is 10%.
     * 
     */
    @Import(name="concurrentExecutionRatePercentage")
      private final @Nullable Output<Integer> concurrentExecutionRatePercentage;

    public Output<Integer> getConcurrentExecutionRatePercentage() {
        return this.concurrentExecutionRatePercentage == null ? Output.empty() : this.concurrentExecutionRatePercentage;
    }

    /**
     * Percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule. The default is 50%.
     * 
     */
    @Import(name="errorPercentage")
      private final @Nullable Output<Integer> errorPercentage;

    public Output<Integer> getErrorPercentage() {
        return this.errorPercentage == null ? Output.empty() : this.errorPercentage;
    }

    public RemediationConfigurationExecutionControlsSsmControlsArgs(
        @Nullable Output<Integer> concurrentExecutionRatePercentage,
        @Nullable Output<Integer> errorPercentage) {
        this.concurrentExecutionRatePercentage = concurrentExecutionRatePercentage;
        this.errorPercentage = errorPercentage;
    }

    private RemediationConfigurationExecutionControlsSsmControlsArgs() {
        this.concurrentExecutionRatePercentage = Output.empty();
        this.errorPercentage = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RemediationConfigurationExecutionControlsSsmControlsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> concurrentExecutionRatePercentage;
        private @Nullable Output<Integer> errorPercentage;

        public Builder() {
    	      // Empty
        }

        public Builder(RemediationConfigurationExecutionControlsSsmControlsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.concurrentExecutionRatePercentage = defaults.concurrentExecutionRatePercentage;
    	      this.errorPercentage = defaults.errorPercentage;
        }

        public Builder concurrentExecutionRatePercentage(@Nullable Output<Integer> concurrentExecutionRatePercentage) {
            this.concurrentExecutionRatePercentage = concurrentExecutionRatePercentage;
            return this;
        }
        public Builder concurrentExecutionRatePercentage(@Nullable Integer concurrentExecutionRatePercentage) {
            this.concurrentExecutionRatePercentage = Output.ofNullable(concurrentExecutionRatePercentage);
            return this;
        }
        public Builder errorPercentage(@Nullable Output<Integer> errorPercentage) {
            this.errorPercentage = errorPercentage;
            return this;
        }
        public Builder errorPercentage(@Nullable Integer errorPercentage) {
            this.errorPercentage = Output.ofNullable(errorPercentage);
            return this;
        }        public RemediationConfigurationExecutionControlsSsmControlsArgs build() {
            return new RemediationConfigurationExecutionControlsSsmControlsArgs(concurrentExecutionRatePercentage, errorPercentage);
        }
    }
}
