// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.iam.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SshKeyState extends io.pulumi.resources.ResourceArgs {

    public static final SshKeyState Empty = new SshKeyState();

    /**
     * Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
     * 
     */
    @Import(name="encoding")
      private final @Nullable Output<String> encoding;

    public Output<String> encoding() {
        return this.encoding == null ? Codegen.empty() : this.encoding;
    }

    /**
     * The MD5 message digest of the SSH public key.
     * 
     */
    @Import(name="fingerprint")
      private final @Nullable Output<String> fingerprint;

    public Output<String> fingerprint() {
        return this.fingerprint == null ? Codegen.empty() : this.fingerprint;
    }

    /**
     * The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
     * 
     */
    @Import(name="publicKey")
      private final @Nullable Output<String> publicKey;

    public Output<String> publicKey() {
        return this.publicKey == null ? Codegen.empty() : this.publicKey;
    }

    /**
     * The unique identifier for the SSH public key.
     * 
     */
    @Import(name="sshPublicKeyId")
      private final @Nullable Output<String> sshPublicKeyId;

    public Output<String> sshPublicKeyId() {
        return this.sshPublicKeyId == null ? Codegen.empty() : this.sshPublicKeyId;
    }

    /**
     * The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * The name of the IAM user to associate the SSH public key with.
     * 
     */
    @Import(name="username")
      private final @Nullable Output<String> username;

    public Output<String> username() {
        return this.username == null ? Codegen.empty() : this.username;
    }

    public SshKeyState(
        @Nullable Output<String> encoding,
        @Nullable Output<String> fingerprint,
        @Nullable Output<String> publicKey,
        @Nullable Output<String> sshPublicKeyId,
        @Nullable Output<String> status,
        @Nullable Output<String> username) {
        this.encoding = encoding;
        this.fingerprint = fingerprint;
        this.publicKey = publicKey;
        this.sshPublicKeyId = sshPublicKeyId;
        this.status = status;
        this.username = username;
    }

    private SshKeyState() {
        this.encoding = Codegen.empty();
        this.fingerprint = Codegen.empty();
        this.publicKey = Codegen.empty();
        this.sshPublicKeyId = Codegen.empty();
        this.status = Codegen.empty();
        this.username = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SshKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> encoding;
        private @Nullable Output<String> fingerprint;
        private @Nullable Output<String> publicKey;
        private @Nullable Output<String> sshPublicKeyId;
        private @Nullable Output<String> status;
        private @Nullable Output<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(SshKeyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encoding = defaults.encoding;
    	      this.fingerprint = defaults.fingerprint;
    	      this.publicKey = defaults.publicKey;
    	      this.sshPublicKeyId = defaults.sshPublicKeyId;
    	      this.status = defaults.status;
    	      this.username = defaults.username;
        }

        public Builder encoding(@Nullable Output<String> encoding) {
            this.encoding = encoding;
            return this;
        }
        public Builder encoding(@Nullable String encoding) {
            this.encoding = Codegen.ofNullable(encoding);
            return this;
        }
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }
        public Builder fingerprint(@Nullable String fingerprint) {
            this.fingerprint = Codegen.ofNullable(fingerprint);
            return this;
        }
        public Builder publicKey(@Nullable Output<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }
        public Builder publicKey(@Nullable String publicKey) {
            this.publicKey = Codegen.ofNullable(publicKey);
            return this;
        }
        public Builder sshPublicKeyId(@Nullable Output<String> sshPublicKeyId) {
            this.sshPublicKeyId = sshPublicKeyId;
            return this;
        }
        public Builder sshPublicKeyId(@Nullable String sshPublicKeyId) {
            this.sshPublicKeyId = Codegen.ofNullable(sshPublicKeyId);
            return this;
        }
        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder username(@Nullable Output<String> username) {
            this.username = username;
            return this;
        }
        public Builder username(@Nullable String username) {
            this.username = Codegen.ofNullable(username);
            return this;
        }        public SshKeyState build() {
            return new SshKeyState(encoding, fingerprint, publicKey, sshPublicKeyId, status, username);
        }
    }
}
