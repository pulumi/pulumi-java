// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.iam.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SshKeyState extends io.pulumi.resources.ResourceArgs {

    public static final SshKeyState Empty = new SshKeyState();

    /**
     * Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
     * 
     */
    @InputImport(name="encoding")
    private final @Nullable Input<String> encoding;

    public Input<String> getEncoding() {
        return this.encoding == null ? Input.empty() : this.encoding;
    }

    /**
     * The MD5 message digest of the SSH public key.
     * 
     */
    @InputImport(name="fingerprint")
    private final @Nullable Input<String> fingerprint;

    public Input<String> getFingerprint() {
        return this.fingerprint == null ? Input.empty() : this.fingerprint;
    }

    /**
     * The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
     * 
     */
    @InputImport(name="publicKey")
    private final @Nullable Input<String> publicKey;

    public Input<String> getPublicKey() {
        return this.publicKey == null ? Input.empty() : this.publicKey;
    }

    /**
     * The unique identifier for the SSH public key.
     * 
     */
    @InputImport(name="sshPublicKeyId")
    private final @Nullable Input<String> sshPublicKeyId;

    public Input<String> getSshPublicKeyId() {
        return this.sshPublicKeyId == null ? Input.empty() : this.sshPublicKeyId;
    }

    /**
     * The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is `active`.
     * 
     */
    @InputImport(name="status")
    private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * The name of the IAM user to associate the SSH public key with.
     * 
     */
    @InputImport(name="username")
    private final @Nullable Input<String> username;

    public Input<String> getUsername() {
        return this.username == null ? Input.empty() : this.username;
    }

    public SshKeyState(
        @Nullable Input<String> encoding,
        @Nullable Input<String> fingerprint,
        @Nullable Input<String> publicKey,
        @Nullable Input<String> sshPublicKeyId,
        @Nullable Input<String> status,
        @Nullable Input<String> username) {
        this.encoding = encoding;
        this.fingerprint = fingerprint;
        this.publicKey = publicKey;
        this.sshPublicKeyId = sshPublicKeyId;
        this.status = status;
        this.username = username;
    }

    private SshKeyState() {
        this.encoding = Input.empty();
        this.fingerprint = Input.empty();
        this.publicKey = Input.empty();
        this.sshPublicKeyId = Input.empty();
        this.status = Input.empty();
        this.username = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SshKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> encoding;
        private @Nullable Input<String> fingerprint;
        private @Nullable Input<String> publicKey;
        private @Nullable Input<String> sshPublicKeyId;
        private @Nullable Input<String> status;
        private @Nullable Input<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(SshKeyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encoding = defaults.encoding;
    	      this.fingerprint = defaults.fingerprint;
    	      this.publicKey = defaults.publicKey;
    	      this.sshPublicKeyId = defaults.sshPublicKeyId;
    	      this.status = defaults.status;
    	      this.username = defaults.username;
        }

        public Builder setEncoding(@Nullable Input<String> encoding) {
            this.encoding = encoding;
            return this;
        }

        public Builder setEncoding(@Nullable String encoding) {
            this.encoding = Input.ofNullable(encoding);
            return this;
        }

        public Builder setFingerprint(@Nullable Input<String> fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }

        public Builder setFingerprint(@Nullable String fingerprint) {
            this.fingerprint = Input.ofNullable(fingerprint);
            return this;
        }

        public Builder setPublicKey(@Nullable Input<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public Builder setPublicKey(@Nullable String publicKey) {
            this.publicKey = Input.ofNullable(publicKey);
            return this;
        }

        public Builder setSshPublicKeyId(@Nullable Input<String> sshPublicKeyId) {
            this.sshPublicKeyId = sshPublicKeyId;
            return this;
        }

        public Builder setSshPublicKeyId(@Nullable String sshPublicKeyId) {
            this.sshPublicKeyId = Input.ofNullable(sshPublicKeyId);
            return this;
        }

        public Builder setStatus(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder setUsername(@Nullable Input<String> username) {
            this.username = username;
            return this;
        }

        public Builder setUsername(@Nullable String username) {
            this.username = Input.ofNullable(username);
            return this;
        }
        public SshKeyState build() {
            return new SshKeyState(encoding, fingerprint, publicKey, sshPublicKeyId, status, username);
        }
    }
}
