// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.autoscaling;

import io.pulumi.aws.autoscaling.inputs.PolicyPredictiveScalingConfigurationArgs;
import io.pulumi.aws.autoscaling.inputs.PolicyStepAdjustmentArgs;
import io.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final PolicyArgs Empty = new PolicyArgs();

    /**
     * Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     * 
     */
    @InputImport(name="adjustmentType")
    private final @Nullable Input<String> adjustmentType;

    public Input<String> getAdjustmentType() {
        return this.adjustmentType == null ? Input.empty() : this.adjustmentType;
    }

    /**
     * The name of the autoscaling group.
     * 
     */
    @InputImport(name="autoscalingGroupName", required=true)
    private final Input<String> autoscalingGroupName;

    public Input<String> getAutoscalingGroupName() {
        return this.autoscalingGroupName;
    }

    /**
     * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     * 
     */
    @InputImport(name="cooldown")
    private final @Nullable Input<Integer> cooldown;

    public Input<Integer> getCooldown() {
        return this.cooldown == null ? Input.empty() : this.cooldown;
    }

    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
     * 
     */
    @InputImport(name="estimatedInstanceWarmup")
    private final @Nullable Input<Integer> estimatedInstanceWarmup;

    public Input<Integer> getEstimatedInstanceWarmup() {
        return this.estimatedInstanceWarmup == null ? Input.empty() : this.estimatedInstanceWarmup;
    }

    /**
     * The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
     * 
     */
    @InputImport(name="metricAggregationType")
    private final @Nullable Input<String> metricAggregationType;

    public Input<String> getMetricAggregationType() {
        return this.metricAggregationType == null ? Input.empty() : this.metricAggregationType;
    }

    /**
     * Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.
     * 
     */
    @InputImport(name="minAdjustmentMagnitude")
    private final @Nullable Input<Integer> minAdjustmentMagnitude;

    public Input<Integer> getMinAdjustmentMagnitude() {
        return this.minAdjustmentMagnitude == null ? Input.empty() : this.minAdjustmentMagnitude;
    }

    /**
     * The name of the dimension.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
     * 
     */
    @InputImport(name="policyType")
    private final @Nullable Input<String> policyType;

    public Input<String> getPolicyType() {
        return this.policyType == null ? Input.empty() : this.policyType;
    }

    /**
     * The predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     * 
     */
    @InputImport(name="predictiveScalingConfiguration")
    private final @Nullable Input<PolicyPredictiveScalingConfigurationArgs> predictiveScalingConfiguration;

    public Input<PolicyPredictiveScalingConfigurationArgs> getPredictiveScalingConfiguration() {
        return this.predictiveScalingConfiguration == null ? Input.empty() : this.predictiveScalingConfiguration;
    }

    /**
     * The number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     * 
     */
    @InputImport(name="scalingAdjustment")
    private final @Nullable Input<Integer> scalingAdjustment;

    public Input<Integer> getScalingAdjustment() {
        return this.scalingAdjustment == null ? Input.empty() : this.scalingAdjustment;
    }

    /**
     * A set of adjustments that manage
     * group scaling. These have the following structure:
     * 
     */
    @InputImport(name="stepAdjustments")
    private final @Nullable Input<List<PolicyStepAdjustmentArgs>> stepAdjustments;

    public Input<List<PolicyStepAdjustmentArgs>> getStepAdjustments() {
        return this.stepAdjustments == null ? Input.empty() : this.stepAdjustments;
    }

    /**
     * A target tracking policy. These have the following structure:
     * 
     */
    @InputImport(name="targetTrackingConfiguration")
    private final @Nullable Input<PolicyTargetTrackingConfigurationArgs> targetTrackingConfiguration;

    public Input<PolicyTargetTrackingConfigurationArgs> getTargetTrackingConfiguration() {
        return this.targetTrackingConfiguration == null ? Input.empty() : this.targetTrackingConfiguration;
    }

    public PolicyArgs(
        @Nullable Input<String> adjustmentType,
        Input<String> autoscalingGroupName,
        @Nullable Input<Integer> cooldown,
        @Nullable Input<Integer> estimatedInstanceWarmup,
        @Nullable Input<String> metricAggregationType,
        @Nullable Input<Integer> minAdjustmentMagnitude,
        @Nullable Input<String> name,
        @Nullable Input<String> policyType,
        @Nullable Input<PolicyPredictiveScalingConfigurationArgs> predictiveScalingConfiguration,
        @Nullable Input<Integer> scalingAdjustment,
        @Nullable Input<List<PolicyStepAdjustmentArgs>> stepAdjustments,
        @Nullable Input<PolicyTargetTrackingConfigurationArgs> targetTrackingConfiguration) {
        this.adjustmentType = adjustmentType;
        this.autoscalingGroupName = Objects.requireNonNull(autoscalingGroupName, "expected parameter 'autoscalingGroupName' to be non-null");
        this.cooldown = cooldown;
        this.estimatedInstanceWarmup = estimatedInstanceWarmup;
        this.metricAggregationType = metricAggregationType;
        this.minAdjustmentMagnitude = minAdjustmentMagnitude;
        this.name = name;
        this.policyType = policyType;
        this.predictiveScalingConfiguration = predictiveScalingConfiguration;
        this.scalingAdjustment = scalingAdjustment;
        this.stepAdjustments = stepAdjustments;
        this.targetTrackingConfiguration = targetTrackingConfiguration;
    }

    private PolicyArgs() {
        this.adjustmentType = Input.empty();
        this.autoscalingGroupName = Input.empty();
        this.cooldown = Input.empty();
        this.estimatedInstanceWarmup = Input.empty();
        this.metricAggregationType = Input.empty();
        this.minAdjustmentMagnitude = Input.empty();
        this.name = Input.empty();
        this.policyType = Input.empty();
        this.predictiveScalingConfiguration = Input.empty();
        this.scalingAdjustment = Input.empty();
        this.stepAdjustments = Input.empty();
        this.targetTrackingConfiguration = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> adjustmentType;
        private Input<String> autoscalingGroupName;
        private @Nullable Input<Integer> cooldown;
        private @Nullable Input<Integer> estimatedInstanceWarmup;
        private @Nullable Input<String> metricAggregationType;
        private @Nullable Input<Integer> minAdjustmentMagnitude;
        private @Nullable Input<String> name;
        private @Nullable Input<String> policyType;
        private @Nullable Input<PolicyPredictiveScalingConfigurationArgs> predictiveScalingConfiguration;
        private @Nullable Input<Integer> scalingAdjustment;
        private @Nullable Input<List<PolicyStepAdjustmentArgs>> stepAdjustments;
        private @Nullable Input<PolicyTargetTrackingConfigurationArgs> targetTrackingConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adjustmentType = defaults.adjustmentType;
    	      this.autoscalingGroupName = defaults.autoscalingGroupName;
    	      this.cooldown = defaults.cooldown;
    	      this.estimatedInstanceWarmup = defaults.estimatedInstanceWarmup;
    	      this.metricAggregationType = defaults.metricAggregationType;
    	      this.minAdjustmentMagnitude = defaults.minAdjustmentMagnitude;
    	      this.name = defaults.name;
    	      this.policyType = defaults.policyType;
    	      this.predictiveScalingConfiguration = defaults.predictiveScalingConfiguration;
    	      this.scalingAdjustment = defaults.scalingAdjustment;
    	      this.stepAdjustments = defaults.stepAdjustments;
    	      this.targetTrackingConfiguration = defaults.targetTrackingConfiguration;
        }

        public Builder setAdjustmentType(@Nullable Input<String> adjustmentType) {
            this.adjustmentType = adjustmentType;
            return this;
        }

        public Builder setAdjustmentType(@Nullable String adjustmentType) {
            this.adjustmentType = Input.ofNullable(adjustmentType);
            return this;
        }

        public Builder setAutoscalingGroupName(Input<String> autoscalingGroupName) {
            this.autoscalingGroupName = Objects.requireNonNull(autoscalingGroupName);
            return this;
        }

        public Builder setAutoscalingGroupName(String autoscalingGroupName) {
            this.autoscalingGroupName = Input.of(Objects.requireNonNull(autoscalingGroupName));
            return this;
        }

        public Builder setCooldown(@Nullable Input<Integer> cooldown) {
            this.cooldown = cooldown;
            return this;
        }

        public Builder setCooldown(@Nullable Integer cooldown) {
            this.cooldown = Input.ofNullable(cooldown);
            return this;
        }

        public Builder setEstimatedInstanceWarmup(@Nullable Input<Integer> estimatedInstanceWarmup) {
            this.estimatedInstanceWarmup = estimatedInstanceWarmup;
            return this;
        }

        public Builder setEstimatedInstanceWarmup(@Nullable Integer estimatedInstanceWarmup) {
            this.estimatedInstanceWarmup = Input.ofNullable(estimatedInstanceWarmup);
            return this;
        }

        public Builder setMetricAggregationType(@Nullable Input<String> metricAggregationType) {
            this.metricAggregationType = metricAggregationType;
            return this;
        }

        public Builder setMetricAggregationType(@Nullable String metricAggregationType) {
            this.metricAggregationType = Input.ofNullable(metricAggregationType);
            return this;
        }

        public Builder setMinAdjustmentMagnitude(@Nullable Input<Integer> minAdjustmentMagnitude) {
            this.minAdjustmentMagnitude = minAdjustmentMagnitude;
            return this;
        }

        public Builder setMinAdjustmentMagnitude(@Nullable Integer minAdjustmentMagnitude) {
            this.minAdjustmentMagnitude = Input.ofNullable(minAdjustmentMagnitude);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setPolicyType(@Nullable Input<String> policyType) {
            this.policyType = policyType;
            return this;
        }

        public Builder setPolicyType(@Nullable String policyType) {
            this.policyType = Input.ofNullable(policyType);
            return this;
        }

        public Builder setPredictiveScalingConfiguration(@Nullable Input<PolicyPredictiveScalingConfigurationArgs> predictiveScalingConfiguration) {
            this.predictiveScalingConfiguration = predictiveScalingConfiguration;
            return this;
        }

        public Builder setPredictiveScalingConfiguration(@Nullable PolicyPredictiveScalingConfigurationArgs predictiveScalingConfiguration) {
            this.predictiveScalingConfiguration = Input.ofNullable(predictiveScalingConfiguration);
            return this;
        }

        public Builder setScalingAdjustment(@Nullable Input<Integer> scalingAdjustment) {
            this.scalingAdjustment = scalingAdjustment;
            return this;
        }

        public Builder setScalingAdjustment(@Nullable Integer scalingAdjustment) {
            this.scalingAdjustment = Input.ofNullable(scalingAdjustment);
            return this;
        }

        public Builder setStepAdjustments(@Nullable Input<List<PolicyStepAdjustmentArgs>> stepAdjustments) {
            this.stepAdjustments = stepAdjustments;
            return this;
        }

        public Builder setStepAdjustments(@Nullable List<PolicyStepAdjustmentArgs> stepAdjustments) {
            this.stepAdjustments = Input.ofNullable(stepAdjustments);
            return this;
        }

        public Builder setTargetTrackingConfiguration(@Nullable Input<PolicyTargetTrackingConfigurationArgs> targetTrackingConfiguration) {
            this.targetTrackingConfiguration = targetTrackingConfiguration;
            return this;
        }

        public Builder setTargetTrackingConfiguration(@Nullable PolicyTargetTrackingConfigurationArgs targetTrackingConfiguration) {
            this.targetTrackingConfiguration = Input.ofNullable(targetTrackingConfiguration);
            return this;
        }
        public PolicyArgs build() {
            return new PolicyArgs(adjustmentType, autoscalingGroupName, cooldown, estimatedInstanceWarmup, metricAggregationType, minAdjustmentMagnitude, name, policyType, predictiveScalingConfiguration, scalingAdjustment, stepAdjustments, targetTrackingConfiguration);
        }
    }
}
