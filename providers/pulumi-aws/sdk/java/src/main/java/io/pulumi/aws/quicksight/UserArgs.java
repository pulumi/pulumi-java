// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.quicksight;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserArgs extends io.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
     * 
     */
    @Import(name="awsAccountId")
      private final @Nullable Output<String> awsAccountId;

    public Output<String> getAwsAccountId() {
        return this.awsAccountId == null ? Output.empty() : this.awsAccountId;
    }

    /**
     * The email address of the user that you want to register.
     * 
     */
    @Import(name="email", required=true)
      private final Output<String> email;

    public Output<String> getEmail() {
        return this.email;
    }

    /**
     * The ARN of the IAM user or role that you are registering with Amazon QuickSight.
     * 
     */
    @Import(name="iamArn")
      private final @Nullable Output<String> iamArn;

    public Output<String> getIamArn() {
        return this.iamArn == null ? Output.empty() : this.iamArn;
    }

    /**
     * Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts either  `IAM` or `QUICKSIGHT`. If `IAM` is specified, the `iam_arn` must also be specified.
     * 
     */
    @Import(name="identityType", required=true)
      private final Output<String> identityType;

    public Output<String> getIdentityType() {
        return this.identityType;
    }

    /**
     * The namespace. Currently, you should set this to `default`.
     * 
     */
    @Import(name="namespace")
      private final @Nullable Output<String> namespace;

    public Output<String> getNamespace() {
        return this.namespace == null ? Output.empty() : this.namespace;
    }

    /**
     * The name of the IAM session to use when assuming roles that can embed QuickSight dashboards. Only valid for registering users using an assumed IAM role. Additionally, if registering multiple users using the same IAM role, each user needs to have a unique session name.
     * 
     */
    @Import(name="sessionName")
      private final @Nullable Output<String> sessionName;

    public Output<String> getSessionName() {
        return this.sessionName == null ? Output.empty() : this.sessionName;
    }

    /**
     * The Amazon QuickSight user name that you want to create for the user you are registering. Only valid for registering a user with `identity_type` set to `QUICKSIGHT`.
     * 
     */
    @Import(name="userName")
      private final @Nullable Output<String> userName;

    public Output<String> getUserName() {
        return this.userName == null ? Output.empty() : this.userName;
    }

    /**
     * The Amazon QuickSight role of the user. The user role can be one of the following: `READER`, `AUTHOR`, or `ADMIN`
     * 
     */
    @Import(name="userRole", required=true)
      private final Output<String> userRole;

    public Output<String> getUserRole() {
        return this.userRole;
    }

    public UserArgs(
        @Nullable Output<String> awsAccountId,
        Output<String> email,
        @Nullable Output<String> iamArn,
        Output<String> identityType,
        @Nullable Output<String> namespace,
        @Nullable Output<String> sessionName,
        @Nullable Output<String> userName,
        Output<String> userRole) {
        this.awsAccountId = awsAccountId;
        this.email = Objects.requireNonNull(email, "expected parameter 'email' to be non-null");
        this.iamArn = iamArn;
        this.identityType = Objects.requireNonNull(identityType, "expected parameter 'identityType' to be non-null");
        this.namespace = namespace;
        this.sessionName = sessionName;
        this.userName = userName;
        this.userRole = Objects.requireNonNull(userRole, "expected parameter 'userRole' to be non-null");
    }

    private UserArgs() {
        this.awsAccountId = Output.empty();
        this.email = Output.empty();
        this.iamArn = Output.empty();
        this.identityType = Output.empty();
        this.namespace = Output.empty();
        this.sessionName = Output.empty();
        this.userName = Output.empty();
        this.userRole = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> awsAccountId;
        private Output<String> email;
        private @Nullable Output<String> iamArn;
        private Output<String> identityType;
        private @Nullable Output<String> namespace;
        private @Nullable Output<String> sessionName;
        private @Nullable Output<String> userName;
        private Output<String> userRole;

        public Builder() {
    	      // Empty
        }

        public Builder(UserArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsAccountId = defaults.awsAccountId;
    	      this.email = defaults.email;
    	      this.iamArn = defaults.iamArn;
    	      this.identityType = defaults.identityType;
    	      this.namespace = defaults.namespace;
    	      this.sessionName = defaults.sessionName;
    	      this.userName = defaults.userName;
    	      this.userRole = defaults.userRole;
        }

        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            this.awsAccountId = awsAccountId;
            return this;
        }

        public Builder awsAccountId(@Nullable String awsAccountId) {
            this.awsAccountId = Output.ofNullable(awsAccountId);
            return this;
        }

        public Builder email(Output<String> email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }

        public Builder email(String email) {
            this.email = Output.of(Objects.requireNonNull(email));
            return this;
        }

        public Builder iamArn(@Nullable Output<String> iamArn) {
            this.iamArn = iamArn;
            return this;
        }

        public Builder iamArn(@Nullable String iamArn) {
            this.iamArn = Output.ofNullable(iamArn);
            return this;
        }

        public Builder identityType(Output<String> identityType) {
            this.identityType = Objects.requireNonNull(identityType);
            return this;
        }

        public Builder identityType(String identityType) {
            this.identityType = Output.of(Objects.requireNonNull(identityType));
            return this;
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder namespace(@Nullable String namespace) {
            this.namespace = Output.ofNullable(namespace);
            return this;
        }

        public Builder sessionName(@Nullable Output<String> sessionName) {
            this.sessionName = sessionName;
            return this;
        }

        public Builder sessionName(@Nullable String sessionName) {
            this.sessionName = Output.ofNullable(sessionName);
            return this;
        }

        public Builder userName(@Nullable Output<String> userName) {
            this.userName = userName;
            return this;
        }

        public Builder userName(@Nullable String userName) {
            this.userName = Output.ofNullable(userName);
            return this;
        }

        public Builder userRole(Output<String> userRole) {
            this.userRole = Objects.requireNonNull(userRole);
            return this;
        }

        public Builder userRole(String userRole) {
            this.userRole = Output.of(Objects.requireNonNull(userRole));
            return this;
        }
        public UserArgs build() {
            return new UserArgs(awsAccountId, email, iamArn, identityType, namespace, sessionName, userName, userRole);
        }
    }
}
