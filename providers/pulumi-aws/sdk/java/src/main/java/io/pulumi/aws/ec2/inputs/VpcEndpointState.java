// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.VpcEndpointDnsEntryGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpcEndpointState extends io.pulumi.resources.ResourceArgs {

    public static final VpcEndpointState Empty = new VpcEndpointState();

    /**
     * The Amazon Resource Name (ARN) of the VPC endpoint.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
     * 
     */
    @Import(name="autoAccept")
      private final @Nullable Output<Boolean> autoAccept;

    public Output<Boolean> autoAccept() {
        return this.autoAccept == null ? Codegen.empty() : this.autoAccept;
    }

    /**
     * The list of CIDR blocks for the exposed AWS service. Applicable for endpoints of type `Gateway`.
     * 
     */
    @Import(name="cidrBlocks")
      private final @Nullable Output<List<String>> cidrBlocks;

    public Output<List<String>> cidrBlocks() {
        return this.cidrBlocks == null ? Codegen.empty() : this.cidrBlocks;
    }

    /**
     * The DNS entries for the VPC Endpoint. Applicable for endpoints of type `Interface`. DNS blocks are documented below.
     * 
     */
    @Import(name="dnsEntries")
      private final @Nullable Output<List<VpcEndpointDnsEntryGetArgs>> dnsEntries;

    public Output<List<VpcEndpointDnsEntryGetArgs>> dnsEntries() {
        return this.dnsEntries == null ? Codegen.empty() : this.dnsEntries;
    }

    /**
     * One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type `Interface`.
     * 
     */
    @Import(name="networkInterfaceIds")
      private final @Nullable Output<List<String>> networkInterfaceIds;

    public Output<List<String>> networkInterfaceIds() {
        return this.networkInterfaceIds == null ? Codegen.empty() : this.networkInterfaceIds;
    }

    /**
     * The ID of the AWS account that owns the VPC endpoint.
     * 
     */
    @Import(name="ownerId")
      private final @Nullable Output<String> ownerId;

    public Output<String> ownerId() {
        return this.ownerId == null ? Codegen.empty() : this.ownerId;
    }

    /**
     * A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
     * 
     */
    @Import(name="policy")
      private final @Nullable Output<String> policy;

    public Output<String> policy() {
        return this.policy == null ? Codegen.empty() : this.policy;
    }

    /**
     * The prefix list ID of the exposed AWS service. Applicable for endpoints of type `Gateway`.
     * 
     */
    @Import(name="prefixListId")
      private final @Nullable Output<String> prefixListId;

    public Output<String> prefixListId() {
        return this.prefixListId == null ? Codegen.empty() : this.prefixListId;
    }

    /**
     * Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type `Interface`.
     * Defaults to `false`.
     * 
     */
    @Import(name="privateDnsEnabled")
      private final @Nullable Output<Boolean> privateDnsEnabled;

    public Output<Boolean> privateDnsEnabled() {
        return this.privateDnsEnabled == null ? Codegen.empty() : this.privateDnsEnabled;
    }

    /**
     * Whether or not the VPC Endpoint is being managed by its service - `true` or `false`.
     * 
     */
    @Import(name="requesterManaged")
      private final @Nullable Output<Boolean> requesterManaged;

    public Output<Boolean> requesterManaged() {
        return this.requesterManaged == null ? Codegen.empty() : this.requesterManaged;
    }

    /**
     * One or more route table IDs. Applicable for endpoints of type `Gateway`.
     * 
     */
    @Import(name="routeTableIds")
      private final @Nullable Output<List<String>> routeTableIds;

    public Output<List<String>> routeTableIds() {
        return this.routeTableIds == null ? Codegen.empty() : this.routeTableIds;
    }

    /**
     * The ID of one or more security groups to associate with the network interface. Required for endpoints of type `Interface`.
     * 
     */
    @Import(name="securityGroupIds")
      private final @Nullable Output<List<String>> securityGroupIds;

    public Output<List<String>> securityGroupIds() {
        return this.securityGroupIds == null ? Codegen.empty() : this.securityGroupIds;
    }

    /**
     * The service name. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
     * 
     */
    @Import(name="serviceName")
      private final @Nullable Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName == null ? Codegen.empty() : this.serviceName;
    }

    /**
     * The state of the VPC endpoint.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<String> state;

    public Output<String> state() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    /**
     * The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `GatewayLoadBalancer` and `Interface`.
     * 
     */
    @Import(name="subnetIds")
      private final @Nullable Output<List<String>> subnetIds;

    public Output<List<String>> subnetIds() {
        return this.subnetIds == null ? Codegen.empty() : this.subnetIds;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * The VPC endpoint type, `Gateway`, `GatewayLoadBalancer`, or `Interface`. Defaults to `Gateway`.
     * 
     */
    @Import(name="vpcEndpointType")
      private final @Nullable Output<String> vpcEndpointType;

    public Output<String> vpcEndpointType() {
        return this.vpcEndpointType == null ? Codegen.empty() : this.vpcEndpointType;
    }

    /**
     * The ID of the VPC in which the endpoint will be used.
     * 
     */
    @Import(name="vpcId")
      private final @Nullable Output<String> vpcId;

    public Output<String> vpcId() {
        return this.vpcId == null ? Codegen.empty() : this.vpcId;
    }

    public VpcEndpointState(
        @Nullable Output<String> arn,
        @Nullable Output<Boolean> autoAccept,
        @Nullable Output<List<String>> cidrBlocks,
        @Nullable Output<List<VpcEndpointDnsEntryGetArgs>> dnsEntries,
        @Nullable Output<List<String>> networkInterfaceIds,
        @Nullable Output<String> ownerId,
        @Nullable Output<String> policy,
        @Nullable Output<String> prefixListId,
        @Nullable Output<Boolean> privateDnsEnabled,
        @Nullable Output<Boolean> requesterManaged,
        @Nullable Output<List<String>> routeTableIds,
        @Nullable Output<List<String>> securityGroupIds,
        @Nullable Output<String> serviceName,
        @Nullable Output<String> state,
        @Nullable Output<List<String>> subnetIds,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> vpcEndpointType,
        @Nullable Output<String> vpcId) {
        this.arn = arn;
        this.autoAccept = autoAccept;
        this.cidrBlocks = cidrBlocks;
        this.dnsEntries = dnsEntries;
        this.networkInterfaceIds = networkInterfaceIds;
        this.ownerId = ownerId;
        this.policy = policy;
        this.prefixListId = prefixListId;
        this.privateDnsEnabled = privateDnsEnabled;
        this.requesterManaged = requesterManaged;
        this.routeTableIds = routeTableIds;
        this.securityGroupIds = securityGroupIds;
        this.serviceName = serviceName;
        this.state = state;
        this.subnetIds = subnetIds;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcEndpointType = vpcEndpointType;
        this.vpcId = vpcId;
    }

    private VpcEndpointState() {
        this.arn = Codegen.empty();
        this.autoAccept = Codegen.empty();
        this.cidrBlocks = Codegen.empty();
        this.dnsEntries = Codegen.empty();
        this.networkInterfaceIds = Codegen.empty();
        this.ownerId = Codegen.empty();
        this.policy = Codegen.empty();
        this.prefixListId = Codegen.empty();
        this.privateDnsEnabled = Codegen.empty();
        this.requesterManaged = Codegen.empty();
        this.routeTableIds = Codegen.empty();
        this.securityGroupIds = Codegen.empty();
        this.serviceName = Codegen.empty();
        this.state = Codegen.empty();
        this.subnetIds = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.vpcEndpointType = Codegen.empty();
        this.vpcId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpcEndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<Boolean> autoAccept;
        private @Nullable Output<List<String>> cidrBlocks;
        private @Nullable Output<List<VpcEndpointDnsEntryGetArgs>> dnsEntries;
        private @Nullable Output<List<String>> networkInterfaceIds;
        private @Nullable Output<String> ownerId;
        private @Nullable Output<String> policy;
        private @Nullable Output<String> prefixListId;
        private @Nullable Output<Boolean> privateDnsEnabled;
        private @Nullable Output<Boolean> requesterManaged;
        private @Nullable Output<List<String>> routeTableIds;
        private @Nullable Output<List<String>> securityGroupIds;
        private @Nullable Output<String> serviceName;
        private @Nullable Output<String> state;
        private @Nullable Output<List<String>> subnetIds;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> vpcEndpointType;
        private @Nullable Output<String> vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(VpcEndpointState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.autoAccept = defaults.autoAccept;
    	      this.cidrBlocks = defaults.cidrBlocks;
    	      this.dnsEntries = defaults.dnsEntries;
    	      this.networkInterfaceIds = defaults.networkInterfaceIds;
    	      this.ownerId = defaults.ownerId;
    	      this.policy = defaults.policy;
    	      this.prefixListId = defaults.prefixListId;
    	      this.privateDnsEnabled = defaults.privateDnsEnabled;
    	      this.requesterManaged = defaults.requesterManaged;
    	      this.routeTableIds = defaults.routeTableIds;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.serviceName = defaults.serviceName;
    	      this.state = defaults.state;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcEndpointType = defaults.vpcEndpointType;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder autoAccept(@Nullable Output<Boolean> autoAccept) {
            this.autoAccept = autoAccept;
            return this;
        }
        public Builder autoAccept(@Nullable Boolean autoAccept) {
            this.autoAccept = Codegen.ofNullable(autoAccept);
            return this;
        }
        public Builder cidrBlocks(@Nullable Output<List<String>> cidrBlocks) {
            this.cidrBlocks = cidrBlocks;
            return this;
        }
        public Builder cidrBlocks(@Nullable List<String> cidrBlocks) {
            this.cidrBlocks = Codegen.ofNullable(cidrBlocks);
            return this;
        }
        public Builder cidrBlocks(String... cidrBlocks) {
            return cidrBlocks(List.of(cidrBlocks));
        }
        public Builder dnsEntries(@Nullable Output<List<VpcEndpointDnsEntryGetArgs>> dnsEntries) {
            this.dnsEntries = dnsEntries;
            return this;
        }
        public Builder dnsEntries(@Nullable List<VpcEndpointDnsEntryGetArgs> dnsEntries) {
            this.dnsEntries = Codegen.ofNullable(dnsEntries);
            return this;
        }
        public Builder dnsEntries(VpcEndpointDnsEntryGetArgs... dnsEntries) {
            return dnsEntries(List.of(dnsEntries));
        }
        public Builder networkInterfaceIds(@Nullable Output<List<String>> networkInterfaceIds) {
            this.networkInterfaceIds = networkInterfaceIds;
            return this;
        }
        public Builder networkInterfaceIds(@Nullable List<String> networkInterfaceIds) {
            this.networkInterfaceIds = Codegen.ofNullable(networkInterfaceIds);
            return this;
        }
        public Builder networkInterfaceIds(String... networkInterfaceIds) {
            return networkInterfaceIds(List.of(networkInterfaceIds));
        }
        public Builder ownerId(@Nullable Output<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = Codegen.ofNullable(ownerId);
            return this;
        }
        public Builder policy(@Nullable Output<String> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable String policy) {
            this.policy = Codegen.ofNullable(policy);
            return this;
        }
        public Builder prefixListId(@Nullable Output<String> prefixListId) {
            this.prefixListId = prefixListId;
            return this;
        }
        public Builder prefixListId(@Nullable String prefixListId) {
            this.prefixListId = Codegen.ofNullable(prefixListId);
            return this;
        }
        public Builder privateDnsEnabled(@Nullable Output<Boolean> privateDnsEnabled) {
            this.privateDnsEnabled = privateDnsEnabled;
            return this;
        }
        public Builder privateDnsEnabled(@Nullable Boolean privateDnsEnabled) {
            this.privateDnsEnabled = Codegen.ofNullable(privateDnsEnabled);
            return this;
        }
        public Builder requesterManaged(@Nullable Output<Boolean> requesterManaged) {
            this.requesterManaged = requesterManaged;
            return this;
        }
        public Builder requesterManaged(@Nullable Boolean requesterManaged) {
            this.requesterManaged = Codegen.ofNullable(requesterManaged);
            return this;
        }
        public Builder routeTableIds(@Nullable Output<List<String>> routeTableIds) {
            this.routeTableIds = routeTableIds;
            return this;
        }
        public Builder routeTableIds(@Nullable List<String> routeTableIds) {
            this.routeTableIds = Codegen.ofNullable(routeTableIds);
            return this;
        }
        public Builder routeTableIds(String... routeTableIds) {
            return routeTableIds(List.of(routeTableIds));
        }
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Codegen.ofNullable(securityGroupIds);
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        public Builder serviceName(@Nullable Output<String> serviceName) {
            this.serviceName = serviceName;
            return this;
        }
        public Builder serviceName(@Nullable String serviceName) {
            this.serviceName = Codegen.ofNullable(serviceName);
            return this;
        }
        public Builder state(@Nullable Output<String> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }
        public Builder subnetIds(@Nullable Output<List<String>> subnetIds) {
            this.subnetIds = subnetIds;
            return this;
        }
        public Builder subnetIds(@Nullable List<String> subnetIds) {
            this.subnetIds = Codegen.ofNullable(subnetIds);
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder vpcEndpointType(@Nullable Output<String> vpcEndpointType) {
            this.vpcEndpointType = vpcEndpointType;
            return this;
        }
        public Builder vpcEndpointType(@Nullable String vpcEndpointType) {
            this.vpcEndpointType = Codegen.ofNullable(vpcEndpointType);
            return this;
        }
        public Builder vpcId(@Nullable Output<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = Codegen.ofNullable(vpcId);
            return this;
        }        public VpcEndpointState build() {
            return new VpcEndpointState(arn, autoAccept, cidrBlocks, dnsEntries, networkInterfaceIds, ownerId, policy, prefixListId, privateDnsEnabled, requesterManaged, routeTableIds, securityGroupIds, serviceName, state, subnetIds, tags, tagsAll, vpcEndpointType, vpcId);
        }
    }
}
