// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecrpublic;

import io.pulumi.aws.ecrpublic.inputs.RepositoryCatalogDataArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RepositoryArgs extends io.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    /**
     * Catalog data configuration for the repository. See below for schema.
     * 
     */
    @InputImport(name="catalogData")
    private final @Nullable Input<RepositoryCatalogDataArgs> catalogData;

    public Input<RepositoryCatalogDataArgs> getCatalogData() {
        return this.catalogData == null ? Input.empty() : this.catalogData;
    }

    @InputImport(name="forceDestroy")
    private final @Nullable Input<Boolean> forceDestroy;

    public Input<Boolean> getForceDestroy() {
        return this.forceDestroy == null ? Input.empty() : this.forceDestroy;
    }

    /**
     * Name of the repository.
     * 
     */
    @InputImport(name="repositoryName", required=true)
    private final Input<String> repositoryName;

    public Input<String> getRepositoryName() {
        return this.repositoryName;
    }

    public RepositoryArgs(
        @Nullable Input<RepositoryCatalogDataArgs> catalogData,
        @Nullable Input<Boolean> forceDestroy,
        Input<String> repositoryName) {
        this.catalogData = catalogData;
        this.forceDestroy = forceDestroy;
        this.repositoryName = Objects.requireNonNull(repositoryName, "expected parameter 'repositoryName' to be non-null");
    }

    private RepositoryArgs() {
        this.catalogData = Input.empty();
        this.forceDestroy = Input.empty();
        this.repositoryName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<RepositoryCatalogDataArgs> catalogData;
        private @Nullable Input<Boolean> forceDestroy;
        private Input<String> repositoryName;

        public Builder() {
    	      // Empty
        }

        public Builder(RepositoryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogData = defaults.catalogData;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.repositoryName = defaults.repositoryName;
        }

        public Builder setCatalogData(@Nullable Input<RepositoryCatalogDataArgs> catalogData) {
            this.catalogData = catalogData;
            return this;
        }

        public Builder setCatalogData(@Nullable RepositoryCatalogDataArgs catalogData) {
            this.catalogData = Input.ofNullable(catalogData);
            return this;
        }

        public Builder setForceDestroy(@Nullable Input<Boolean> forceDestroy) {
            this.forceDestroy = forceDestroy;
            return this;
        }

        public Builder setForceDestroy(@Nullable Boolean forceDestroy) {
            this.forceDestroy = Input.ofNullable(forceDestroy);
            return this;
        }

        public Builder setRepositoryName(Input<String> repositoryName) {
            this.repositoryName = Objects.requireNonNull(repositoryName);
            return this;
        }

        public Builder setRepositoryName(String repositoryName) {
            this.repositoryName = Input.of(Objects.requireNonNull(repositoryName));
            return this;
        }
        public RepositoryArgs build() {
            return new RepositoryArgs(catalogData, forceDestroy, repositoryName);
        }
    }
}
