// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.sagemaker.inputs;

import io.pulumi.aws.sagemaker.inputs.ModelContainerImageConfigArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ModelContainerArgs extends io.pulumi.resources.ResourceArgs {

    public static final ModelContainerArgs Empty = new ModelContainerArgs();

    /**
     * The DNS host name for the container.
     * 
     */
    @InputImport(name="containerHostname")
    private final @Nullable Input<String> containerHostname;

    public Input<String> getContainerHostname() {
        return this.containerHostname == null ? Input.empty() : this.containerHostname;
    }

    /**
     * Environment variables for the Docker container.
     * A list of key value pairs.
     * 
     */
    @InputImport(name="environment")
    private final @Nullable Input<Map<String,String>> environment;

    public Input<Map<String,String>> getEnvironment() {
        return this.environment == null ? Input.empty() : this.environment;
    }

    /**
     * The registry path where the inference code image is stored in Amazon ECR.
     * 
     */
    @InputImport(name="image", required=true)
    private final Input<String> image;

    public Input<String> getImage() {
        return this.image;
    }

    /**
     * Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
     * 
     */
    @InputImport(name="imageConfig")
    private final @Nullable Input<ModelContainerImageConfigArgs> imageConfig;

    public Input<ModelContainerImageConfigArgs> getImageConfig() {
        return this.imageConfig == null ? Input.empty() : this.imageConfig;
    }

    /**
     * The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
     * 
     */
    @InputImport(name="mode")
    private final @Nullable Input<String> mode;

    public Input<String> getMode() {
        return this.mode == null ? Input.empty() : this.mode;
    }

    /**
     * The URL for the S3 location where model artifacts are stored.
     * 
     */
    @InputImport(name="modelDataUrl")
    private final @Nullable Input<String> modelDataUrl;

    public Input<String> getModelDataUrl() {
        return this.modelDataUrl == null ? Input.empty() : this.modelDataUrl;
    }

    public ModelContainerArgs(
        @Nullable Input<String> containerHostname,
        @Nullable Input<Map<String,String>> environment,
        Input<String> image,
        @Nullable Input<ModelContainerImageConfigArgs> imageConfig,
        @Nullable Input<String> mode,
        @Nullable Input<String> modelDataUrl) {
        this.containerHostname = containerHostname;
        this.environment = environment;
        this.image = Objects.requireNonNull(image, "expected parameter 'image' to be non-null");
        this.imageConfig = imageConfig;
        this.mode = mode;
        this.modelDataUrl = modelDataUrl;
    }

    private ModelContainerArgs() {
        this.containerHostname = Input.empty();
        this.environment = Input.empty();
        this.image = Input.empty();
        this.imageConfig = Input.empty();
        this.mode = Input.empty();
        this.modelDataUrl = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> containerHostname;
        private @Nullable Input<Map<String,String>> environment;
        private Input<String> image;
        private @Nullable Input<ModelContainerImageConfigArgs> imageConfig;
        private @Nullable Input<String> mode;
        private @Nullable Input<String> modelDataUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(ModelContainerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerHostname = defaults.containerHostname;
    	      this.environment = defaults.environment;
    	      this.image = defaults.image;
    	      this.imageConfig = defaults.imageConfig;
    	      this.mode = defaults.mode;
    	      this.modelDataUrl = defaults.modelDataUrl;
        }

        public Builder setContainerHostname(@Nullable Input<String> containerHostname) {
            this.containerHostname = containerHostname;
            return this;
        }

        public Builder setContainerHostname(@Nullable String containerHostname) {
            this.containerHostname = Input.ofNullable(containerHostname);
            return this;
        }

        public Builder setEnvironment(@Nullable Input<Map<String,String>> environment) {
            this.environment = environment;
            return this;
        }

        public Builder setEnvironment(@Nullable Map<String,String> environment) {
            this.environment = Input.ofNullable(environment);
            return this;
        }

        public Builder setImage(Input<String> image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }

        public Builder setImage(String image) {
            this.image = Input.of(Objects.requireNonNull(image));
            return this;
        }

        public Builder setImageConfig(@Nullable Input<ModelContainerImageConfigArgs> imageConfig) {
            this.imageConfig = imageConfig;
            return this;
        }

        public Builder setImageConfig(@Nullable ModelContainerImageConfigArgs imageConfig) {
            this.imageConfig = Input.ofNullable(imageConfig);
            return this;
        }

        public Builder setMode(@Nullable Input<String> mode) {
            this.mode = mode;
            return this;
        }

        public Builder setMode(@Nullable String mode) {
            this.mode = Input.ofNullable(mode);
            return this;
        }

        public Builder setModelDataUrl(@Nullable Input<String> modelDataUrl) {
            this.modelDataUrl = modelDataUrl;
            return this;
        }

        public Builder setModelDataUrl(@Nullable String modelDataUrl) {
            this.modelDataUrl = Input.ofNullable(modelDataUrl);
            return this;
        }
        public ModelContainerArgs build() {
            return new ModelContainerArgs(containerHostname, environment, image, imageConfig, mode, modelDataUrl);
        }
    }
}
