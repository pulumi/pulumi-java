// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glue.inputs;

import io.pulumi.aws.glue.inputs.CatalogDatabaseTargetDatabaseGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CatalogDatabaseState extends io.pulumi.resources.ResourceArgs {

    public static final CatalogDatabaseState Empty = new CatalogDatabaseState();

    /**
     * ARN of the Glue Catalog Database.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * ID of the Data Catalog in which the database resides.
     * 
     */
    @InputImport(name="catalogId")
      private final @Nullable Input<String> catalogId;

    public Input<String> getCatalogId() {
        return this.catalogId == null ? Input.empty() : this.catalogId;
    }

    /**
     * Description of the database.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Location of the database (for example, an HDFS path).
     * 
     */
    @InputImport(name="locationUri")
      private final @Nullable Input<String> locationUri;

    public Input<String> getLocationUri() {
        return this.locationUri == null ? Input.empty() : this.locationUri;
    }

    /**
     * Name of the database. The acceptable characters are lowercase letters, numbers, and the underscore character.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * List of key-value pairs that define parameters and properties of the database.
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Input<Map<String,String>> parameters;

    public Input<Map<String,String>> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * Configuration block for a target database for resource linking. See `target_database` below.
     * 
     */
    @InputImport(name="targetDatabase")
      private final @Nullable Input<CatalogDatabaseTargetDatabaseGetArgs> targetDatabase;

    public Input<CatalogDatabaseTargetDatabaseGetArgs> getTargetDatabase() {
        return this.targetDatabase == null ? Input.empty() : this.targetDatabase;
    }

    public CatalogDatabaseState(
        @Nullable Input<String> arn,
        @Nullable Input<String> catalogId,
        @Nullable Input<String> description,
        @Nullable Input<String> locationUri,
        @Nullable Input<String> name,
        @Nullable Input<Map<String,String>> parameters,
        @Nullable Input<CatalogDatabaseTargetDatabaseGetArgs> targetDatabase) {
        this.arn = arn;
        this.catalogId = catalogId;
        this.description = description;
        this.locationUri = locationUri;
        this.name = name;
        this.parameters = parameters;
        this.targetDatabase = targetDatabase;
    }

    private CatalogDatabaseState() {
        this.arn = Input.empty();
        this.catalogId = Input.empty();
        this.description = Input.empty();
        this.locationUri = Input.empty();
        this.name = Input.empty();
        this.parameters = Input.empty();
        this.targetDatabase = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CatalogDatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> catalogId;
        private @Nullable Input<String> description;
        private @Nullable Input<String> locationUri;
        private @Nullable Input<String> name;
        private @Nullable Input<Map<String,String>> parameters;
        private @Nullable Input<CatalogDatabaseTargetDatabaseGetArgs> targetDatabase;

        public Builder() {
    	      // Empty
        }

        public Builder(CatalogDatabaseState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.catalogId = defaults.catalogId;
    	      this.description = defaults.description;
    	      this.locationUri = defaults.locationUri;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.targetDatabase = defaults.targetDatabase;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder catalogId(@Nullable Input<String> catalogId) {
            this.catalogId = catalogId;
            return this;
        }

        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = Input.ofNullable(catalogId);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder locationUri(@Nullable Input<String> locationUri) {
            this.locationUri = locationUri;
            return this;
        }

        public Builder locationUri(@Nullable String locationUri) {
            this.locationUri = Input.ofNullable(locationUri);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder parameters(@Nullable Input<Map<String,String>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder targetDatabase(@Nullable Input<CatalogDatabaseTargetDatabaseGetArgs> targetDatabase) {
            this.targetDatabase = targetDatabase;
            return this;
        }

        public Builder targetDatabase(@Nullable CatalogDatabaseTargetDatabaseGetArgs targetDatabase) {
            this.targetDatabase = Input.ofNullable(targetDatabase);
            return this;
        }
        public CatalogDatabaseState build() {
            return new CatalogDatabaseState(arn, catalogId, description, locationUri, name, parameters, targetDatabase);
        }
    }
}
