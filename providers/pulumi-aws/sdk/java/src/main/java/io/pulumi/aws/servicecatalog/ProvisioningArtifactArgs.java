// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.servicecatalog;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProvisioningArtifactArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProvisioningArtifactArgs Empty = new ProvisioningArtifactArgs();

    /**
     * Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). The default value is `en`.
     * 
     */
    @Import(name="acceptLanguage")
      private final @Nullable Output<String> acceptLanguage;

    public Output<String> getAcceptLanguage() {
        return this.acceptLanguage == null ? Codegen.empty() : this.acceptLanguage;
    }

    /**
     * Whether the product version is active. Inactive provisioning artifacts are invisible to end users. End users cannot launch or update a provisioned product from an inactive provisioning artifact. Default is `true`.
     * 
     */
    @Import(name="active")
      private final @Nullable Output<Boolean> active;

    public Output<Boolean> getActive() {
        return this.active == null ? Codegen.empty() : this.active;
    }

    /**
     * Description of the provisioning artifact (i.e., version), including how it differs from the previous provisioning artifact.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Whether AWS Service Catalog stops validating the specified provisioning artifact template even if it is invalid.
     * 
     */
    @Import(name="disableTemplateValidation")
      private final @Nullable Output<Boolean> disableTemplateValidation;

    public Output<Boolean> getDisableTemplateValidation() {
        return this.disableTemplateValidation == null ? Codegen.empty() : this.disableTemplateValidation;
    }

    /**
     * Information set by the administrator to provide guidance to end users about which provisioning artifacts to use. Valid values are `DEFAULT` and `DEPRECATED`. The default is `DEFAULT`. Users are able to make updates to a provisioned product of a deprecated version but cannot launch new provisioned products using a deprecated version.
     * 
     */
    @Import(name="guidance")
      private final @Nullable Output<String> guidance;

    public Output<String> getGuidance() {
        return this.guidance == null ? Codegen.empty() : this.guidance;
    }

    /**
     * Name of the provisioning artifact (for example, `v1`, `v2beta`). No spaces are allowed.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Identifier of the product.
     * 
     */
    @Import(name="productId", required=true)
      private final Output<String> productId;

    public Output<String> getProductId() {
        return this.productId;
    }

    /**
     * Template source as the physical ID of the resource that contains the template. Currently only supports CloudFormation stack ARN. Specify the physical ID as `arn:[partition]:cloudformation:[region]:[account ID]:stack/[stack name]/[resource ID]`.
     * 
     */
    @Import(name="templatePhysicalId")
      private final @Nullable Output<String> templatePhysicalId;

    public Output<String> getTemplatePhysicalId() {
        return this.templatePhysicalId == null ? Codegen.empty() : this.templatePhysicalId;
    }

    /**
     * Template source as URL of the CloudFormation template in Amazon S3.
     * 
     */
    @Import(name="templateUrl")
      private final @Nullable Output<String> templateUrl;

    public Output<String> getTemplateUrl() {
        return this.templateUrl == null ? Codegen.empty() : this.templateUrl;
    }

    /**
     * Type of provisioning artifact. Valid values: `CLOUD_FORMATION_TEMPLATE`, `MARKETPLACE_AMI`, `MARKETPLACE_CAR` (Marketplace Clusters and AWS Resources).
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    public ProvisioningArtifactArgs(
        @Nullable Output<String> acceptLanguage,
        @Nullable Output<Boolean> active,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> disableTemplateValidation,
        @Nullable Output<String> guidance,
        @Nullable Output<String> name,
        Output<String> productId,
        @Nullable Output<String> templatePhysicalId,
        @Nullable Output<String> templateUrl,
        @Nullable Output<String> type) {
        this.acceptLanguage = acceptLanguage;
        this.active = active;
        this.description = description;
        this.disableTemplateValidation = disableTemplateValidation;
        this.guidance = guidance;
        this.name = name;
        this.productId = Objects.requireNonNull(productId, "expected parameter 'productId' to be non-null");
        this.templatePhysicalId = templatePhysicalId;
        this.templateUrl = templateUrl;
        this.type = type;
    }

    private ProvisioningArtifactArgs() {
        this.acceptLanguage = Codegen.empty();
        this.active = Codegen.empty();
        this.description = Codegen.empty();
        this.disableTemplateValidation = Codegen.empty();
        this.guidance = Codegen.empty();
        this.name = Codegen.empty();
        this.productId = Codegen.empty();
        this.templatePhysicalId = Codegen.empty();
        this.templateUrl = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProvisioningArtifactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> acceptLanguage;
        private @Nullable Output<Boolean> active;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> disableTemplateValidation;
        private @Nullable Output<String> guidance;
        private @Nullable Output<String> name;
        private Output<String> productId;
        private @Nullable Output<String> templatePhysicalId;
        private @Nullable Output<String> templateUrl;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ProvisioningArtifactArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptLanguage = defaults.acceptLanguage;
    	      this.active = defaults.active;
    	      this.description = defaults.description;
    	      this.disableTemplateValidation = defaults.disableTemplateValidation;
    	      this.guidance = defaults.guidance;
    	      this.name = defaults.name;
    	      this.productId = defaults.productId;
    	      this.templatePhysicalId = defaults.templatePhysicalId;
    	      this.templateUrl = defaults.templateUrl;
    	      this.type = defaults.type;
        }

        public Builder acceptLanguage(@Nullable Output<String> acceptLanguage) {
            this.acceptLanguage = acceptLanguage;
            return this;
        }
        public Builder acceptLanguage(@Nullable String acceptLanguage) {
            this.acceptLanguage = Codegen.ofNullable(acceptLanguage);
            return this;
        }
        public Builder active(@Nullable Output<Boolean> active) {
            this.active = active;
            return this;
        }
        public Builder active(@Nullable Boolean active) {
            this.active = Codegen.ofNullable(active);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder disableTemplateValidation(@Nullable Output<Boolean> disableTemplateValidation) {
            this.disableTemplateValidation = disableTemplateValidation;
            return this;
        }
        public Builder disableTemplateValidation(@Nullable Boolean disableTemplateValidation) {
            this.disableTemplateValidation = Codegen.ofNullable(disableTemplateValidation);
            return this;
        }
        public Builder guidance(@Nullable Output<String> guidance) {
            this.guidance = guidance;
            return this;
        }
        public Builder guidance(@Nullable String guidance) {
            this.guidance = Codegen.ofNullable(guidance);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder productId(Output<String> productId) {
            this.productId = Objects.requireNonNull(productId);
            return this;
        }
        public Builder productId(String productId) {
            this.productId = Output.of(Objects.requireNonNull(productId));
            return this;
        }
        public Builder templatePhysicalId(@Nullable Output<String> templatePhysicalId) {
            this.templatePhysicalId = templatePhysicalId;
            return this;
        }
        public Builder templatePhysicalId(@Nullable String templatePhysicalId) {
            this.templatePhysicalId = Codegen.ofNullable(templatePhysicalId);
            return this;
        }
        public Builder templateUrl(@Nullable Output<String> templateUrl) {
            this.templateUrl = templateUrl;
            return this;
        }
        public Builder templateUrl(@Nullable String templateUrl) {
            this.templateUrl = Codegen.ofNullable(templateUrl);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }        public ProvisioningArtifactArgs build() {
            return new ProvisioningArtifactArgs(acceptLanguage, active, description, disableTemplateValidation, guidance, name, productId, templatePhysicalId, templateUrl, type);
        }
    }
}
