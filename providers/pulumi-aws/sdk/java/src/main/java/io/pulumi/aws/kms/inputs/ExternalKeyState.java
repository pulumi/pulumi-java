// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kms.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExternalKeyState extends io.pulumi.resources.ResourceArgs {

    public static final ExternalKeyState Empty = new ExternalKeyState();

    /**
     * The Amazon Resource Name (ARN) of the key.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Specifies whether to disable the policy lockout check performed when creating or updating the key's policy. Setting this value to `true` increases the risk that the key becomes unmanageable. For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section in the AWS Key Management Service Developer Guide. Defaults to `false`.
     * 
     */
    @InputImport(name="bypassPolicyLockoutSafetyCheck")
    private final @Nullable Input<Boolean> bypassPolicyLockoutSafetyCheck;

    public Input<Boolean> getBypassPolicyLockoutSafetyCheck() {
        return this.bypassPolicyLockoutSafetyCheck == null ? Input.empty() : this.bypassPolicyLockoutSafetyCheck;
    }

    /**
     * Duration in days after which the key is deleted after destruction of the resource. Must be between `7` and `30` days. Defaults to `30`.
     * 
     */
    @InputImport(name="deletionWindowInDays")
    private final @Nullable Input<Integer> deletionWindowInDays;

    public Input<Integer> getDeletionWindowInDays() {
        return this.deletionWindowInDays == null ? Input.empty() : this.deletionWindowInDays;
    }

    /**
     * Description of the key.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Specifies whether the key is enabled. Keys pending import can only be `false`. Imported keys default to `true` unless expired.
     * 
     */
    @InputImport(name="enabled")
    private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * Whether the key material expires. Empty when pending key material import, otherwise `KEY_MATERIAL_EXPIRES` or `KEY_MATERIAL_DOES_NOT_EXPIRE`.
     * 
     */
    @InputImport(name="expirationModel")
    private final @Nullable Input<String> expirationModel;

    public Input<String> getExpirationModel() {
        return this.expirationModel == null ? Input.empty() : this.expirationModel;
    }

    /**
     * Base64 encoded 256-bit symmetric encryption key material to import. The CMK is permanently associated with this key material. The same key material can be reimported, but you cannot import different key material.
     * 
     */
    @InputImport(name="keyMaterialBase64")
    private final @Nullable Input<String> keyMaterialBase64;

    public Input<String> getKeyMaterialBase64() {
        return this.keyMaterialBase64 == null ? Input.empty() : this.keyMaterialBase64;
    }

    /**
     * The state of the CMK.
     * 
     */
    @InputImport(name="keyState")
    private final @Nullable Input<String> keyState;

    public Input<String> getKeyState() {
        return this.keyState == null ? Input.empty() : this.keyState;
    }

    /**
     * The cryptographic operations for which you can use the CMK.
     * 
     */
    @InputImport(name="keyUsage")
    private final @Nullable Input<String> keyUsage;

    public Input<String> getKeyUsage() {
        return this.keyUsage == null ? Input.empty() : this.keyUsage;
    }

    /**
     * Indicates whether the KMS key is a multi-Region (`true`) or regional (`false`) key. Defaults to `false`.
     * 
     */
    @InputImport(name="multiRegion")
    private final @Nullable Input<Boolean> multiRegion;

    public Input<Boolean> getMultiRegion() {
        return this.multiRegion == null ? Input.empty() : this.multiRegion;
    }

    /**
     * A key policy JSON document. If you do not provide a key policy, AWS KMS attaches a default key policy to the CMK.
     * 
     */
    @InputImport(name="policy")
    private final @Nullable Input<String> policy;

    public Input<String> getPolicy() {
        return this.policy == null ? Input.empty() : this.policy;
    }

    /**
     * A key-value map of tags to assign to the key. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the CMK becomes unusable. If not specified, key material does not expire. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
     * 
     */
    @InputImport(name="validTo")
    private final @Nullable Input<String> validTo;

    public Input<String> getValidTo() {
        return this.validTo == null ? Input.empty() : this.validTo;
    }

    public ExternalKeyState(
        @Nullable Input<String> arn,
        @Nullable Input<Boolean> bypassPolicyLockoutSafetyCheck,
        @Nullable Input<Integer> deletionWindowInDays,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> enabled,
        @Nullable Input<String> expirationModel,
        @Nullable Input<String> keyMaterialBase64,
        @Nullable Input<String> keyState,
        @Nullable Input<String> keyUsage,
        @Nullable Input<Boolean> multiRegion,
        @Nullable Input<String> policy,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> validTo) {
        this.arn = arn;
        this.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
        this.deletionWindowInDays = deletionWindowInDays;
        this.description = description;
        this.enabled = enabled;
        this.expirationModel = expirationModel;
        this.keyMaterialBase64 = keyMaterialBase64;
        this.keyState = keyState;
        this.keyUsage = keyUsage;
        this.multiRegion = multiRegion;
        this.policy = policy;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.validTo = validTo;
    }

    private ExternalKeyState() {
        this.arn = Input.empty();
        this.bypassPolicyLockoutSafetyCheck = Input.empty();
        this.deletionWindowInDays = Input.empty();
        this.description = Input.empty();
        this.enabled = Input.empty();
        this.expirationModel = Input.empty();
        this.keyMaterialBase64 = Input.empty();
        this.keyState = Input.empty();
        this.keyUsage = Input.empty();
        this.multiRegion = Input.empty();
        this.policy = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.validTo = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<Boolean> bypassPolicyLockoutSafetyCheck;
        private @Nullable Input<Integer> deletionWindowInDays;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> enabled;
        private @Nullable Input<String> expirationModel;
        private @Nullable Input<String> keyMaterialBase64;
        private @Nullable Input<String> keyState;
        private @Nullable Input<String> keyUsage;
        private @Nullable Input<Boolean> multiRegion;
        private @Nullable Input<String> policy;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> validTo;

        public Builder() {
    	      // Empty
        }

        public Builder(ExternalKeyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.bypassPolicyLockoutSafetyCheck = defaults.bypassPolicyLockoutSafetyCheck;
    	      this.deletionWindowInDays = defaults.deletionWindowInDays;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.expirationModel = defaults.expirationModel;
    	      this.keyMaterialBase64 = defaults.keyMaterialBase64;
    	      this.keyState = defaults.keyState;
    	      this.keyUsage = defaults.keyUsage;
    	      this.multiRegion = defaults.multiRegion;
    	      this.policy = defaults.policy;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.validTo = defaults.validTo;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setBypassPolicyLockoutSafetyCheck(@Nullable Input<Boolean> bypassPolicyLockoutSafetyCheck) {
            this.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
            return this;
        }

        public Builder setBypassPolicyLockoutSafetyCheck(@Nullable Boolean bypassPolicyLockoutSafetyCheck) {
            this.bypassPolicyLockoutSafetyCheck = Input.ofNullable(bypassPolicyLockoutSafetyCheck);
            return this;
        }

        public Builder setDeletionWindowInDays(@Nullable Input<Integer> deletionWindowInDays) {
            this.deletionWindowInDays = deletionWindowInDays;
            return this;
        }

        public Builder setDeletionWindowInDays(@Nullable Integer deletionWindowInDays) {
            this.deletionWindowInDays = Input.ofNullable(deletionWindowInDays);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setEnabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder setEnabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder setExpirationModel(@Nullable Input<String> expirationModel) {
            this.expirationModel = expirationModel;
            return this;
        }

        public Builder setExpirationModel(@Nullable String expirationModel) {
            this.expirationModel = Input.ofNullable(expirationModel);
            return this;
        }

        public Builder setKeyMaterialBase64(@Nullable Input<String> keyMaterialBase64) {
            this.keyMaterialBase64 = keyMaterialBase64;
            return this;
        }

        public Builder setKeyMaterialBase64(@Nullable String keyMaterialBase64) {
            this.keyMaterialBase64 = Input.ofNullable(keyMaterialBase64);
            return this;
        }

        public Builder setKeyState(@Nullable Input<String> keyState) {
            this.keyState = keyState;
            return this;
        }

        public Builder setKeyState(@Nullable String keyState) {
            this.keyState = Input.ofNullable(keyState);
            return this;
        }

        public Builder setKeyUsage(@Nullable Input<String> keyUsage) {
            this.keyUsage = keyUsage;
            return this;
        }

        public Builder setKeyUsage(@Nullable String keyUsage) {
            this.keyUsage = Input.ofNullable(keyUsage);
            return this;
        }

        public Builder setMultiRegion(@Nullable Input<Boolean> multiRegion) {
            this.multiRegion = multiRegion;
            return this;
        }

        public Builder setMultiRegion(@Nullable Boolean multiRegion) {
            this.multiRegion = Input.ofNullable(multiRegion);
            return this;
        }

        public Builder setPolicy(@Nullable Input<String> policy) {
            this.policy = policy;
            return this;
        }

        public Builder setPolicy(@Nullable String policy) {
            this.policy = Input.ofNullable(policy);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setValidTo(@Nullable Input<String> validTo) {
            this.validTo = validTo;
            return this;
        }

        public Builder setValidTo(@Nullable String validTo) {
            this.validTo = Input.ofNullable(validTo);
            return this;
        }
        public ExternalKeyState build() {
            return new ExternalKeyState(arn, bypassPolicyLockoutSafetyCheck, deletionWindowInDays, description, enabled, expirationModel, keyMaterialBase64, keyState, keyUsage, multiRegion, policy, tags, tagsAll, validTo);
        }
    }
}
