// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.glacier.inputs;

import io.pulumi.aws.glacier.inputs.VaultNotificationGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VaultState extends io.pulumi.resources.ResourceArgs {

    public static final VaultState Empty = new VaultState();

    /**
     * The policy document. This is a JSON formatted string.
     * The heredoc syntax or `file` function is helpful here. Use the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html) for more information on Glacier Vault Policy
     * 
     */
    @Import(name="accessPolicy")
      private final @Nullable Output<String> accessPolicy;

    public Output<String> accessPolicy() {
        return this.accessPolicy == null ? Codegen.empty() : this.accessPolicy;
    }

    /**
     * The ARN of the vault.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The URI of the vault that was created.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the Vault. Names can be between 1 and 255 characters long and the valid characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period).
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The notifications for the Vault. Fields documented below.
     * 
     */
    @Import(name="notification")
      private final @Nullable Output<VaultNotificationGetArgs> notification;

    public Output<VaultNotificationGetArgs> notification() {
        return this.notification == null ? Codegen.empty() : this.notification;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    public VaultState(
        @Nullable Output<String> accessPolicy,
        @Nullable Output<String> arn,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<VaultNotificationGetArgs> notification,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.accessPolicy = accessPolicy;
        this.arn = arn;
        this.location = location;
        this.name = name;
        this.notification = notification;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private VaultState() {
        this.accessPolicy = Codegen.empty();
        this.arn = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.notification = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VaultState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> accessPolicy;
        private @Nullable Output<String> arn;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<VaultNotificationGetArgs> notification;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(VaultState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicy = defaults.accessPolicy;
    	      this.arn = defaults.arn;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.notification = defaults.notification;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder accessPolicy(@Nullable Output<String> accessPolicy) {
            this.accessPolicy = accessPolicy;
            return this;
        }
        public Builder accessPolicy(@Nullable String accessPolicy) {
            this.accessPolicy = Codegen.ofNullable(accessPolicy);
            return this;
        }
        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder notification(@Nullable Output<VaultNotificationGetArgs> notification) {
            this.notification = notification;
            return this;
        }
        public Builder notification(@Nullable VaultNotificationGetArgs notification) {
            this.notification = Codegen.ofNullable(notification);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }        public VaultState build() {
            return new VaultState(accessPolicy, arn, location, name, notification, tags, tagsAll);
        }
    }
}
