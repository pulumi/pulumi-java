// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cognito.outputs;

import io.pulumi.aws.cognito.outputs.IdentityPoolRoleAttachmentRoleMappingMappingRule;
import io.pulumi.core.annotations.OutputCustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class IdentityPoolRoleAttachmentRoleMapping {
    /**
     * Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
     * 
     */
    private final @Nullable String ambiguousRoleResolution;
    /**
     * A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id". Depends on `cognito_identity_providers` set on `aws.cognito.IdentityPool` resource or a `aws.cognito.IdentityProvider` resource.
     * 
     */
    private final String identityProvider;
    /**
     * The Rules Configuration to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
     * 
     */
    private final @Nullable List<IdentityPoolRoleAttachmentRoleMappingMappingRule> mappingRules;
    /**
     * The role mapping type.
     * 
     */
    private final String type;

    @OutputCustomType.Constructor({"ambiguousRoleResolution","identityProvider","mappingRules","type"})
    private IdentityPoolRoleAttachmentRoleMapping(
        @Nullable String ambiguousRoleResolution,
        String identityProvider,
        @Nullable List<IdentityPoolRoleAttachmentRoleMappingMappingRule> mappingRules,
        String type) {
        this.ambiguousRoleResolution = ambiguousRoleResolution;
        this.identityProvider = Objects.requireNonNull(identityProvider);
        this.mappingRules = mappingRules;
        this.type = Objects.requireNonNull(type);
    }

    /**
     * Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
     * 
    */
    public Optional<String> getAmbiguousRoleResolution() {
        return Optional.ofNullable(this.ambiguousRoleResolution);
    }
    /**
     * A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id". Depends on `cognito_identity_providers` set on `aws.cognito.IdentityPool` resource or a `aws.cognito.IdentityProvider` resource.
     * 
    */
    public String getIdentityProvider() {
        return this.identityProvider;
    }
    /**
     * The Rules Configuration to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
     * 
    */
    public List<IdentityPoolRoleAttachmentRoleMappingMappingRule> getMappingRules() {
        return this.mappingRules == null ? List.of() : this.mappingRules;
    }
    /**
     * The role mapping type.
     * 
    */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IdentityPoolRoleAttachmentRoleMapping defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String ambiguousRoleResolution;
        private String identityProvider;
        private @Nullable List<IdentityPoolRoleAttachmentRoleMappingMappingRule> mappingRules;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(IdentityPoolRoleAttachmentRoleMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ambiguousRoleResolution = defaults.ambiguousRoleResolution;
    	      this.identityProvider = defaults.identityProvider;
    	      this.mappingRules = defaults.mappingRules;
    	      this.type = defaults.type;
        }

        public Builder setAmbiguousRoleResolution(@Nullable String ambiguousRoleResolution) {
            this.ambiguousRoleResolution = ambiguousRoleResolution;
            return this;
        }

        public Builder setIdentityProvider(String identityProvider) {
            this.identityProvider = Objects.requireNonNull(identityProvider);
            return this;
        }

        public Builder setMappingRules(@Nullable List<IdentityPoolRoleAttachmentRoleMappingMappingRule> mappingRules) {
            this.mappingRules = mappingRules;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public IdentityPoolRoleAttachmentRoleMapping build() {
            return new IdentityPoolRoleAttachmentRoleMapping(ambiguousRoleResolution, identityProvider, mappingRules, type);
        }
    }
}
