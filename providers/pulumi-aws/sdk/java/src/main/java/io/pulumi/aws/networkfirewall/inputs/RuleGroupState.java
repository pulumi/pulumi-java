// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.networkfirewall.inputs;

import io.pulumi.aws.networkfirewall.inputs.RuleGroupRuleGroupGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RuleGroupState extends io.pulumi.resources.ResourceArgs {

    public static final RuleGroupState Empty = new RuleGroupState();

    /**
     * The Amazon Resource Name (ARN) that identifies the rule group.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
     * 
     */
    @InputImport(name="capacity")
      private final @Nullable Input<Integer> capacity;

    public Input<Integer> getCapacity() {
        return this.capacity == null ? Input.empty() : this.capacity;
    }

    /**
     * A friendly description of the rule group.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * A friendly name of the rule group.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
     * 
     */
    @InputImport(name="ruleGroup")
      private final @Nullable Input<RuleGroupRuleGroupGetArgs> ruleGroup;

    public Input<RuleGroupRuleGroupGetArgs> getRuleGroup() {
        return this.ruleGroup == null ? Input.empty() : this.ruleGroup;
    }

    /**
     * The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `rule_group` is specified.
     * 
     */
    @InputImport(name="rules")
      private final @Nullable Input<String> rules;

    public Input<String> getRules() {
        return this.rules == null ? Input.empty() : this.rules;
    }

    /**
     * A map of key:value pairs to associate with the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
     * 
     */
    @InputImport(name="type")
      private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * A string token used when updating the rule group.
     * 
     */
    @InputImport(name="updateToken")
      private final @Nullable Input<String> updateToken;

    public Input<String> getUpdateToken() {
        return this.updateToken == null ? Input.empty() : this.updateToken;
    }

    public RuleGroupState(
        @Nullable Input<String> arn,
        @Nullable Input<Integer> capacity,
        @Nullable Input<String> description,
        @Nullable Input<String> name,
        @Nullable Input<RuleGroupRuleGroupGetArgs> ruleGroup,
        @Nullable Input<String> rules,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> type,
        @Nullable Input<String> updateToken) {
        this.arn = arn;
        this.capacity = capacity;
        this.description = description;
        this.name = name;
        this.ruleGroup = ruleGroup;
        this.rules = rules;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.type = type;
        this.updateToken = updateToken;
    }

    private RuleGroupState() {
        this.arn = Input.empty();
        this.capacity = Input.empty();
        this.description = Input.empty();
        this.name = Input.empty();
        this.ruleGroup = Input.empty();
        this.rules = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.type = Input.empty();
        this.updateToken = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<Integer> capacity;
        private @Nullable Input<String> description;
        private @Nullable Input<String> name;
        private @Nullable Input<RuleGroupRuleGroupGetArgs> ruleGroup;
        private @Nullable Input<String> rules;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> type;
        private @Nullable Input<String> updateToken;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleGroupState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.capacity = defaults.capacity;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.ruleGroup = defaults.ruleGroup;
    	      this.rules = defaults.rules;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.type = defaults.type;
    	      this.updateToken = defaults.updateToken;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setCapacity(@Nullable Input<Integer> capacity) {
            this.capacity = capacity;
            return this;
        }

        public Builder setCapacity(@Nullable Integer capacity) {
            this.capacity = Input.ofNullable(capacity);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setRuleGroup(@Nullable Input<RuleGroupRuleGroupGetArgs> ruleGroup) {
            this.ruleGroup = ruleGroup;
            return this;
        }

        public Builder setRuleGroup(@Nullable RuleGroupRuleGroupGetArgs ruleGroup) {
            this.ruleGroup = Input.ofNullable(ruleGroup);
            return this;
        }

        public Builder setRules(@Nullable Input<String> rules) {
            this.rules = rules;
            return this;
        }

        public Builder setRules(@Nullable String rules) {
            this.rules = Input.ofNullable(rules);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setType(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setUpdateToken(@Nullable Input<String> updateToken) {
            this.updateToken = updateToken;
            return this;
        }

        public Builder setUpdateToken(@Nullable String updateToken) {
            this.updateToken = Input.ofNullable(updateToken);
            return this;
        }
        public RuleGroupState build() {
            return new RuleGroupState(arn, capacity, description, name, ruleGroup, rules, tags, tagsAll, type, updateToken);
        }
    }
}
