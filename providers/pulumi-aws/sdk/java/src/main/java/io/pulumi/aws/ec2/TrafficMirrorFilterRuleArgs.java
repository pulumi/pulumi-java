// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.ec2.inputs.TrafficMirrorFilterRuleDestinationPortRangeArgs;
import io.pulumi.aws.ec2.inputs.TrafficMirrorFilterRuleSourcePortRangeArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TrafficMirrorFilterRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final TrafficMirrorFilterRuleArgs Empty = new TrafficMirrorFilterRuleArgs();

    /**
     * Description of the traffic mirror filter rule.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Destination CIDR block to assign to the Traffic Mirror rule.
     * 
     */
    @Import(name="destinationCidrBlock", required=true)
      private final Output<String> destinationCidrBlock;

    public Output<String> getDestinationCidrBlock() {
        return this.destinationCidrBlock;
    }

    /**
     * Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
     * 
     */
    @Import(name="destinationPortRange")
      private final @Nullable Output<TrafficMirrorFilterRuleDestinationPortRangeArgs> destinationPortRange;

    public Output<TrafficMirrorFilterRuleDestinationPortRangeArgs> getDestinationPortRange() {
        return this.destinationPortRange == null ? Output.empty() : this.destinationPortRange;
    }

    /**
     * Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
     * 
     */
    @Import(name="protocol")
      private final @Nullable Output<Integer> protocol;

    public Output<Integer> getProtocol() {
        return this.protocol == null ? Output.empty() : this.protocol;
    }

    /**
     * Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
     * 
     */
    @Import(name="ruleAction", required=true)
      private final Output<String> ruleAction;

    public Output<String> getRuleAction() {
        return this.ruleAction;
    }

    /**
     * Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
     * 
     */
    @Import(name="ruleNumber", required=true)
      private final Output<Integer> ruleNumber;

    public Output<Integer> getRuleNumber() {
        return this.ruleNumber;
    }

    /**
     * Source CIDR block to assign to the Traffic Mirror rule.
     * 
     */
    @Import(name="sourceCidrBlock", required=true)
      private final Output<String> sourceCidrBlock;

    public Output<String> getSourceCidrBlock() {
        return this.sourceCidrBlock;
    }

    /**
     * Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
     * 
     */
    @Import(name="sourcePortRange")
      private final @Nullable Output<TrafficMirrorFilterRuleSourcePortRangeArgs> sourcePortRange;

    public Output<TrafficMirrorFilterRuleSourcePortRangeArgs> getSourcePortRange() {
        return this.sourcePortRange == null ? Output.empty() : this.sourcePortRange;
    }

    /**
     * Direction of traffic to be captured. Valid values are `ingress` and `egress`
     * 
     */
    @Import(name="trafficDirection", required=true)
      private final Output<String> trafficDirection;

    public Output<String> getTrafficDirection() {
        return this.trafficDirection;
    }

    /**
     * ID of the traffic mirror filter to which this rule should be added
     * 
     */
    @Import(name="trafficMirrorFilterId", required=true)
      private final Output<String> trafficMirrorFilterId;

    public Output<String> getTrafficMirrorFilterId() {
        return this.trafficMirrorFilterId;
    }

    public TrafficMirrorFilterRuleArgs(
        @Nullable Output<String> description,
        Output<String> destinationCidrBlock,
        @Nullable Output<TrafficMirrorFilterRuleDestinationPortRangeArgs> destinationPortRange,
        @Nullable Output<Integer> protocol,
        Output<String> ruleAction,
        Output<Integer> ruleNumber,
        Output<String> sourceCidrBlock,
        @Nullable Output<TrafficMirrorFilterRuleSourcePortRangeArgs> sourcePortRange,
        Output<String> trafficDirection,
        Output<String> trafficMirrorFilterId) {
        this.description = description;
        this.destinationCidrBlock = Objects.requireNonNull(destinationCidrBlock, "expected parameter 'destinationCidrBlock' to be non-null");
        this.destinationPortRange = destinationPortRange;
        this.protocol = protocol;
        this.ruleAction = Objects.requireNonNull(ruleAction, "expected parameter 'ruleAction' to be non-null");
        this.ruleNumber = Objects.requireNonNull(ruleNumber, "expected parameter 'ruleNumber' to be non-null");
        this.sourceCidrBlock = Objects.requireNonNull(sourceCidrBlock, "expected parameter 'sourceCidrBlock' to be non-null");
        this.sourcePortRange = sourcePortRange;
        this.trafficDirection = Objects.requireNonNull(trafficDirection, "expected parameter 'trafficDirection' to be non-null");
        this.trafficMirrorFilterId = Objects.requireNonNull(trafficMirrorFilterId, "expected parameter 'trafficMirrorFilterId' to be non-null");
    }

    private TrafficMirrorFilterRuleArgs() {
        this.description = Output.empty();
        this.destinationCidrBlock = Output.empty();
        this.destinationPortRange = Output.empty();
        this.protocol = Output.empty();
        this.ruleAction = Output.empty();
        this.ruleNumber = Output.empty();
        this.sourceCidrBlock = Output.empty();
        this.sourcePortRange = Output.empty();
        this.trafficDirection = Output.empty();
        this.trafficMirrorFilterId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrafficMirrorFilterRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> description;
        private Output<String> destinationCidrBlock;
        private @Nullable Output<TrafficMirrorFilterRuleDestinationPortRangeArgs> destinationPortRange;
        private @Nullable Output<Integer> protocol;
        private Output<String> ruleAction;
        private Output<Integer> ruleNumber;
        private Output<String> sourceCidrBlock;
        private @Nullable Output<TrafficMirrorFilterRuleSourcePortRangeArgs> sourcePortRange;
        private Output<String> trafficDirection;
        private Output<String> trafficMirrorFilterId;

        public Builder() {
    	      // Empty
        }

        public Builder(TrafficMirrorFilterRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destinationCidrBlock = defaults.destinationCidrBlock;
    	      this.destinationPortRange = defaults.destinationPortRange;
    	      this.protocol = defaults.protocol;
    	      this.ruleAction = defaults.ruleAction;
    	      this.ruleNumber = defaults.ruleNumber;
    	      this.sourceCidrBlock = defaults.sourceCidrBlock;
    	      this.sourcePortRange = defaults.sourcePortRange;
    	      this.trafficDirection = defaults.trafficDirection;
    	      this.trafficMirrorFilterId = defaults.trafficMirrorFilterId;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder destinationCidrBlock(Output<String> destinationCidrBlock) {
            this.destinationCidrBlock = Objects.requireNonNull(destinationCidrBlock);
            return this;
        }

        public Builder destinationCidrBlock(String destinationCidrBlock) {
            this.destinationCidrBlock = Output.of(Objects.requireNonNull(destinationCidrBlock));
            return this;
        }

        public Builder destinationPortRange(@Nullable Output<TrafficMirrorFilterRuleDestinationPortRangeArgs> destinationPortRange) {
            this.destinationPortRange = destinationPortRange;
            return this;
        }

        public Builder destinationPortRange(@Nullable TrafficMirrorFilterRuleDestinationPortRangeArgs destinationPortRange) {
            this.destinationPortRange = Output.ofNullable(destinationPortRange);
            return this;
        }

        public Builder protocol(@Nullable Output<Integer> protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder protocol(@Nullable Integer protocol) {
            this.protocol = Output.ofNullable(protocol);
            return this;
        }

        public Builder ruleAction(Output<String> ruleAction) {
            this.ruleAction = Objects.requireNonNull(ruleAction);
            return this;
        }

        public Builder ruleAction(String ruleAction) {
            this.ruleAction = Output.of(Objects.requireNonNull(ruleAction));
            return this;
        }

        public Builder ruleNumber(Output<Integer> ruleNumber) {
            this.ruleNumber = Objects.requireNonNull(ruleNumber);
            return this;
        }

        public Builder ruleNumber(Integer ruleNumber) {
            this.ruleNumber = Output.of(Objects.requireNonNull(ruleNumber));
            return this;
        }

        public Builder sourceCidrBlock(Output<String> sourceCidrBlock) {
            this.sourceCidrBlock = Objects.requireNonNull(sourceCidrBlock);
            return this;
        }

        public Builder sourceCidrBlock(String sourceCidrBlock) {
            this.sourceCidrBlock = Output.of(Objects.requireNonNull(sourceCidrBlock));
            return this;
        }

        public Builder sourcePortRange(@Nullable Output<TrafficMirrorFilterRuleSourcePortRangeArgs> sourcePortRange) {
            this.sourcePortRange = sourcePortRange;
            return this;
        }

        public Builder sourcePortRange(@Nullable TrafficMirrorFilterRuleSourcePortRangeArgs sourcePortRange) {
            this.sourcePortRange = Output.ofNullable(sourcePortRange);
            return this;
        }

        public Builder trafficDirection(Output<String> trafficDirection) {
            this.trafficDirection = Objects.requireNonNull(trafficDirection);
            return this;
        }

        public Builder trafficDirection(String trafficDirection) {
            this.trafficDirection = Output.of(Objects.requireNonNull(trafficDirection));
            return this;
        }

        public Builder trafficMirrorFilterId(Output<String> trafficMirrorFilterId) {
            this.trafficMirrorFilterId = Objects.requireNonNull(trafficMirrorFilterId);
            return this;
        }

        public Builder trafficMirrorFilterId(String trafficMirrorFilterId) {
            this.trafficMirrorFilterId = Output.of(Objects.requireNonNull(trafficMirrorFilterId));
            return this;
        }
        public TrafficMirrorFilterRuleArgs build() {
            return new TrafficMirrorFilterRuleArgs(description, destinationCidrBlock, destinationPortRange, protocol, ruleAction, ruleNumber, sourceCidrBlock, sourcePortRange, trafficDirection, trafficMirrorFilterId);
        }
    }
}
