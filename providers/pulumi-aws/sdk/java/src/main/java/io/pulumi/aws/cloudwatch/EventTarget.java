// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.cloudwatch.EventTargetArgs;
import io.pulumi.aws.cloudwatch.inputs.EventTargetState;
import io.pulumi.aws.cloudwatch.outputs.EventTargetBatchTarget;
import io.pulumi.aws.cloudwatch.outputs.EventTargetDeadLetterConfig;
import io.pulumi.aws.cloudwatch.outputs.EventTargetEcsTarget;
import io.pulumi.aws.cloudwatch.outputs.EventTargetHttpTarget;
import io.pulumi.aws.cloudwatch.outputs.EventTargetInputTransformer;
import io.pulumi.aws.cloudwatch.outputs.EventTargetKinesisTarget;
import io.pulumi.aws.cloudwatch.outputs.EventTargetRedshiftTarget;
import io.pulumi.aws.cloudwatch.outputs.EventTargetRetryPolicy;
import io.pulumi.aws.cloudwatch.outputs.EventTargetRunCommandTarget;
import io.pulumi.aws.cloudwatch.outputs.EventTargetSqsTarget;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Provides an EventBridge Target resource.
 * 
 * > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const console = new aws.cloudwatch.EventRule("console", {
 *     description: "Capture all EC2 scaling events",
 *     eventPattern: `{
 *   "source": [
 *     "aws.autoscaling"
 *   ],
 *   "detail-type": [
 *     "EC2 Instance Launch Successful",
 *     "EC2 Instance Terminate Successful",
 *     "EC2 Instance Launch Unsuccessful",
 *     "EC2 Instance Terminate Unsuccessful"
 *   ]
 * }
 * `,
 * });
 * const testStream = new aws.kinesis.Stream("testStream", {shardCount: 1});
 * const yada = new aws.cloudwatch.EventTarget("yada", {
 *     rule: console.name,
 *     arn: testStream.arn,
 *     runCommandTargets: [
 *         {
 *             key: "tag:Name",
 *             values: ["FooBar"],
 *         },
 *         {
 *             key: "InstanceIds",
 *             values: ["i-162058cd308bffec2"],
 *         },
 *     ],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * console = aws.cloudwatch.EventRule("console",
 *     description="Capture all EC2 scaling events",
 *     event_pattern="""{
 *   "source": [
 *     "aws.autoscaling"
 *   ],
 *   "detail-type": [
 *     "EC2 Instance Launch Successful",
 *     "EC2 Instance Terminate Successful",
 *     "EC2 Instance Launch Unsuccessful",
 *     "EC2 Instance Terminate Unsuccessful"
 *   ]
 * }
 * """)
 * test_stream = aws.kinesis.Stream("testStream", shard_count=1)
 * yada = aws.cloudwatch.EventTarget("yada",
 *     rule=console.name,
 *     arn=test_stream.arn,
 *     run_command_targets=[
 *         aws.cloudwatch.EventTargetRunCommandTargetArgs(
 *             key="tag:Name",
 *             values=["FooBar"],
 *         ),
 *         aws.cloudwatch.EventTargetRunCommandTargetArgs(
 *             key="InstanceIds",
 *             values=["i-162058cd308bffec2"],
 *         ),
 *     ])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var console = new Aws.CloudWatch.EventRule("console", new Aws.CloudWatch.EventRuleArgs
 *         {
 *             Description = "Capture all EC2 scaling events",
 *             EventPattern = @"{
 *   ""source"": [
 *     ""aws.autoscaling""
 *   ],
 *   ""detail-type"": [
 *     ""EC2 Instance Launch Successful"",
 *     ""EC2 Instance Terminate Successful"",
 *     ""EC2 Instance Launch Unsuccessful"",
 *     ""EC2 Instance Terminate Unsuccessful""
 *   ]
 * }
 * ",
 *         });
 *         var testStream = new Aws.Kinesis.Stream("testStream", new Aws.Kinesis.StreamArgs
 *         {
 *             ShardCount = 1,
 *         });
 *         var yada = new Aws.CloudWatch.EventTarget("yada", new Aws.CloudWatch.EventTargetArgs
 *         {
 *             Rule = console.Name,
 *             Arn = testStream.Arn,
 *             RunCommandTargets = 
 *             {
 *                 new Aws.CloudWatch.Inputs.EventTargetRunCommandTargetArgs
 *                 {
 *                     Key = "tag:Name",
 *                     Values = 
 *                     {
 *                         "FooBar",
 *                     },
 *                 },
 *                 new Aws.CloudWatch.Inputs.EventTargetRunCommandTargetArgs
 *                 {
 *                     Key = "InstanceIds",
 *                     Values = 
 *                     {
 *                         "i-162058cd308bffec2",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kinesis"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		console, err := cloudwatch.NewEventRule(ctx, "console", &cloudwatch.EventRuleArgs{
 * 			Description:  pulumi.String("Capture all EC2 scaling events"),
 * 			EventPattern: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"source\": [\n", "    \"aws.autoscaling\"\n", "  ],\n", "  \"detail-type\": [\n", "    \"EC2 Instance Launch Successful\",\n", "    \"EC2 Instance Terminate Successful\",\n", "    \"EC2 Instance Launch Unsuccessful\",\n", "    \"EC2 Instance Terminate Unsuccessful\"\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		testStream, err := kinesis.NewStream(ctx, "testStream", &kinesis.StreamArgs{
 * 			ShardCount: pulumi.Int(1),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventTarget(ctx, "yada", &cloudwatch.EventTargetArgs{
 * 			Rule: console.Name,
 * 			Arn:  testStream.Arn,
 * 			RunCommandTargets: cloudwatch.EventTargetRunCommandTargetArray{
 * 				&cloudwatch.EventTargetRunCommandTargetArgs{
 * 					Key: pulumi.String("tag:Name"),
 * 					Values: pulumi.StringArray{
 * 						pulumi.String("FooBar"),
 * 					},
 * 				},
 * 				&cloudwatch.EventTargetRunCommandTargetArgs{
 * 					Key: pulumi.String("InstanceIds"),
 * 					Values: pulumi.StringArray{
 * 						pulumi.String("i-162058cd308bffec2"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * ## Example SSM Document Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const ssmLifecycleTrust = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["events.amazonaws.com"],
 *         }],
 *     }],
 * });
 * const stopInstance = new aws.ssm.Document("stopInstance", {
 *     documentType: "Command",
 *     content: `  {
 *     "schemaVersion": "1.2",
 *     "description": "Stop an instance",
 *     "parameters": {
 * 
 *     },
 *     "runtimeConfig": {
 *       "aws:runShellScript": {
 *         "properties": [
 *           {
 *             "id": "0.aws:runShellScript",
 *             "runCommand": ["halt"]
 *           }
 *         ]
 *       }
 *     }
 *   }
 * `,
 * });
 * const ssmLifecyclePolicyDocument = aws.iam.getPolicyDocumentOutput({
 *     statements: [
 *         {
 *             effect: "Allow",
 *             actions: ["ssm:SendCommand"],
 *             resources: ["arn:aws:ec2:eu-west-1:1234567890:instance/*"],
 *             conditions: [{
 *                 test: "StringEquals",
 *                 variable: "ec2:ResourceTag/Terminate",
 *                 values: ["*"],
 *             }],
 *         },
 *         {
 *             effect: "Allow",
 *             actions: ["ssm:SendCommand"],
 *             resources: [stopInstance.arn],
 *         },
 *     ],
 * });
 * const ssmLifecycleRole = new aws.iam.Role("ssmLifecycleRole", {assumeRolePolicy: ssmLifecycleTrust.then(ssmLifecycleTrust => ssmLifecycleTrust.json)});
 * const ssmLifecyclePolicy = new aws.iam.Policy("ssmLifecyclePolicy", {policy: ssmLifecyclePolicyDocument.apply(ssmLifecyclePolicyDocument => ssmLifecyclePolicyDocument.json)});
 * const ssmLifecycleRolePolicyAttachment = new aws.iam.RolePolicyAttachment("ssmLifecycleRolePolicyAttachment", {
 *     policyArn: ssmLifecyclePolicy.arn,
 *     role: ssmLifecycleRole.name,
 * });
 * const stopInstancesEventRule = new aws.cloudwatch.EventRule("stopInstancesEventRule", {
 *     description: "Stop instances nightly",
 *     scheduleExpression: "cron(0 0 * * ? *)",
 * });
 * const stopInstancesEventTarget = new aws.cloudwatch.EventTarget("stopInstancesEventTarget", {
 *     arn: stopInstance.arn,
 *     rule: stopInstancesEventRule.name,
 *     roleArn: ssmLifecycleRole.arn,
 *     runCommandTargets: [{
 *         key: "tag:Terminate",
 *         values: ["midnight"],
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * ssm_lifecycle_trust = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     actions=["sts:AssumeRole"],
 *     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
 *         type="Service",
 *         identifiers=["events.amazonaws.com"],
 *     )],
 * )])
 * stop_instance = aws.ssm.Document("stopInstance",
 *     document_type="Command",
 *     content="""  {
 *     "schemaVersion": "1.2",
 *     "description": "Stop an instance",
 *     "parameters": {
 * 
 *     },
 *     "runtimeConfig": {
 *       "aws:runShellScript": {
 *         "properties": [
 *           {
 *             "id": "0.aws:runShellScript",
 *             "runCommand": ["halt"]
 *           }
 *         ]
 *       }
 *     }
 *   }
 * """)
 * ssm_lifecycle_policy_document = aws.iam.get_policy_document_output(statements=[
 *     aws.iam.GetPolicyDocumentStatementArgs(
 *         effect="Allow",
 *         actions=["ssm:SendCommand"],
 *         resources=["arn:aws:ec2:eu-west-1:1234567890:instance/*"],
 *         conditions=[aws.iam.GetPolicyDocumentStatementConditionArgs(
 *             test="StringEquals",
 *             variable="ec2:ResourceTag/Terminate",
 *             values=["*"],
 *         )],
 *     ),
 *     aws.iam.GetPolicyDocumentStatementArgs(
 *         effect="Allow",
 *         actions=["ssm:SendCommand"],
 *         resources=[stop_instance.arn],
 *     ),
 * ])
 * ssm_lifecycle_role = aws.iam.Role("ssmLifecycleRole", assume_role_policy=ssm_lifecycle_trust.json)
 * ssm_lifecycle_policy = aws.iam.Policy("ssmLifecyclePolicy", policy=ssm_lifecycle_policy_document.json)
 * ssm_lifecycle_role_policy_attachment = aws.iam.RolePolicyAttachment("ssmLifecycleRolePolicyAttachment",
 *     policy_arn=ssm_lifecycle_policy.arn,
 *     role=ssm_lifecycle_role.name)
 * stop_instances_event_rule = aws.cloudwatch.EventRule("stopInstancesEventRule",
 *     description="Stop instances nightly",
 *     schedule_expression="cron(0 0 * * ? *)")
 * stop_instances_event_target = aws.cloudwatch.EventTarget("stopInstancesEventTarget",
 *     arn=stop_instance.arn,
 *     rule=stop_instances_event_rule.name,
 *     role_arn=ssm_lifecycle_role.arn,
 *     run_command_targets=[aws.cloudwatch.EventTargetRunCommandTargetArgs(
 *         key="tag:Terminate",
 *         values=["midnight"],
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var ssmLifecycleTrust = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Actions = 
 *                     {
 *                         "sts:AssumeRole",
 *                     },
 *                     Principals = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
 *                         {
 *                             Type = "Service",
 *                             Identifiers = 
 *                             {
 *                                 "events.amazonaws.com",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         }));
 *         var stopInstance = new Aws.Ssm.Document("stopInstance", new Aws.Ssm.DocumentArgs
 *         {
 *             DocumentType = "Command",
 *             Content = @"  {
 *     ""schemaVersion"": ""1.2"",
 *     ""description"": ""Stop an instance"",
 *     ""parameters"": {
 * 
 *     },
 *     ""runtimeConfig"": {
 *       ""aws:runShellScript"": {
 *         ""properties"": [
 *           {
 *             ""id"": ""0.aws:runShellScript"",
 *             ""runCommand"": [""halt""]
 *           }
 *         ]
 *       }
 *     }
 *   }
 * ",
 *         });
 *         var ssmLifecyclePolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new Aws.Iam.GetPolicyDocumentInvokeArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
 *                 {
 *                     Effect = "Allow",
 *                     Actions = 
 *                     {
 *                         "ssm:SendCommand",
 *                     },
 *                     Resources = 
 *                     {
 *                         "arn:aws:ec2:eu-west-1:1234567890:instance/*",
 *                     },
 *                     Conditions = 
 *                     {
 *                         new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
 *                         {
 *                             Test = "StringEquals",
 *                             Variable = "ec2:ResourceTag/Terminate",
 *                             Values = 
 *                             {
 *                                 "*",
 *                             },
 *                         },
 *                     },
 *                 },
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
 *                 {
 *                     Effect = "Allow",
 *                     Actions = 
 *                     {
 *                         "ssm:SendCommand",
 *                     },
 *                     Resources = 
 *                     {
 *                         stopInstance.Arn,
 *                     },
 *                 },
 *             },
 *         });
 *         var ssmLifecycleRole = new Aws.Iam.Role("ssmLifecycleRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = ssmLifecycleTrust.Apply(ssmLifecycleTrust => ssmLifecycleTrust.Json),
 *         });
 *         var ssmLifecyclePolicy = new Aws.Iam.Policy("ssmLifecyclePolicy", new Aws.Iam.PolicyArgs
 *         {
 *             Policy = ssmLifecyclePolicyDocument.Apply(ssmLifecyclePolicyDocument => ssmLifecyclePolicyDocument.Json),
 *         });
 *         var ssmLifecycleRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("ssmLifecycleRolePolicyAttachment", new Aws.Iam.RolePolicyAttachmentArgs
 *         {
 *             PolicyArn = ssmLifecyclePolicy.Arn,
 *             Role = ssmLifecycleRole.Name,
 *         });
 *         var stopInstancesEventRule = new Aws.CloudWatch.EventRule("stopInstancesEventRule", new Aws.CloudWatch.EventRuleArgs
 *         {
 *             Description = "Stop instances nightly",
 *             ScheduleExpression = "cron(0 0 * * ? *)",
 *         });
 *         var stopInstancesEventTarget = new Aws.CloudWatch.EventTarget("stopInstancesEventTarget", new Aws.CloudWatch.EventTargetArgs
 *         {
 *             Arn = stopInstance.Arn,
 *             Rule = stopInstancesEventRule.Name,
 *             RoleArn = ssmLifecycleRole.Arn,
 *             RunCommandTargets = 
 *             {
 *                 new Aws.CloudWatch.Inputs.EventTargetRunCommandTargetArgs
 *                 {
 *                     Key = "tag:Terminate",
 *                     Values = 
 *                     {
 *                         "midnight",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ssm"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		ssmLifecycleTrust, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Actions: []string{
 * 						"sts:AssumeRole",
 * 					},
 * 					Principals: []iam.GetPolicyDocumentStatementPrincipal{
 * 						iam.GetPolicyDocumentStatementPrincipal{
 * 							Type: "Service",
 * 							Identifiers: []string{
 * 								"events.amazonaws.com",
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		stopInstance, err := ssm.NewDocument(ctx, "stopInstance", &ssm.DocumentArgs{
 * 			DocumentType: pulumi.String("Command"),
 * 			Content:      pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "  {\n", "    \"schemaVersion\": \"1.2\",\n", "    \"description\": \"Stop an instance\",\n", "    \"parameters\": {\n", "\n", "    },\n", "    \"runtimeConfig\": {\n", "      \"aws:runShellScript\": {\n", "        \"properties\": [\n", "          {\n", "            \"id\": \"0.aws:runShellScript\",\n", "            \"runCommand\": [\"halt\"]\n", "          }\n", "        ]\n", "      }\n", "    }\n", "  }\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		ssmLifecyclePolicyDocument := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
 * 			Statements: iam.GetPolicyDocumentStatementArray{
 * 				&iam.GetPolicyDocumentStatementArgs{
 * 					Effect: pulumi.String("Allow"),
 * 					Actions: pulumi.StringArray{
 * 						pulumi.String("ssm:SendCommand"),
 * 					},
 * 					Resources: pulumi.StringArray{
 * 						pulumi.String("arn:aws:ec2:eu-west-1:1234567890:instance/*"),
 * 					},
 * 					Conditions: iam.GetPolicyDocumentStatementConditionArray{
 * 						&iam.GetPolicyDocumentStatementConditionArgs{
 * 							Test:     pulumi.String("StringEquals"),
 * 							Variable: pulumi.String("ec2:ResourceTag/Terminate"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.String("*"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 				&iam.GetPolicyDocumentStatementArgs{
 * 					Effect: pulumi.String("Allow"),
 * 					Actions: pulumi.StringArray{
 * 						pulumi.String("ssm:SendCommand"),
 * 					},
 * 					Resources: pulumi.StringArray{
 * 						stopInstance.Arn,
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		ssmLifecycleRole, err := iam.NewRole(ctx, "ssmLifecycleRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.String(ssmLifecycleTrust.Json),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		ssmLifecyclePolicy, err := iam.NewPolicy(ctx, "ssmLifecyclePolicy", &iam.PolicyArgs{
 * 			Policy: ssmLifecyclePolicyDocument.ApplyT(func(ssmLifecyclePolicyDocument iam.GetPolicyDocumentResult) (string, error) {
 * 				return ssmLifecyclePolicyDocument.Json, nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicyAttachment(ctx, "ssmLifecycleRolePolicyAttachment", &iam.RolePolicyAttachmentArgs{
 * 			PolicyArn: ssmLifecyclePolicy.Arn,
 * 			Role:      ssmLifecycleRole.Name,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		stopInstancesEventRule, err := cloudwatch.NewEventRule(ctx, "stopInstancesEventRule", &cloudwatch.EventRuleArgs{
 * 			Description:        pulumi.String("Stop instances nightly"),
 * 			ScheduleExpression: pulumi.String("cron(0 0 * * ? *)"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventTarget(ctx, "stopInstancesEventTarget", &cloudwatch.EventTargetArgs{
 * 			Arn:     stopInstance.Arn,
 * 			Rule:    stopInstancesEventRule.Name,
 * 			RoleArn: ssmLifecycleRole.Arn,
 * 			RunCommandTargets: cloudwatch.EventTargetRunCommandTargetArray{
 * 				&cloudwatch.EventTargetRunCommandTargetArgs{
 * 					Key: pulumi.String("tag:Terminate"),
 * 					Values: pulumi.StringArray{
 * 						pulumi.String("midnight"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ## Example RunCommand Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const stopInstancesEventRule = new aws.cloudwatch.EventRule("stopInstancesEventRule", {
 *     description: "Stop instances nightly",
 *     scheduleExpression: "cron(0 0 * * ? *)",
 * });
 * const stopInstancesEventTarget = new aws.cloudwatch.EventTarget("stopInstancesEventTarget", {
 *     arn: `arn:aws:ssm:${_var.aws_region}::document/AWS-RunShellScript`,
 *     input: "{\"commands\":[\"halt\"]}",
 *     rule: stopInstancesEventRule.name,
 *     roleArn: aws_iam_role.ssm_lifecycle.arn,
 *     runCommandTargets: [{
 *         key: "tag:Terminate",
 *         values: ["midnight"],
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * stop_instances_event_rule = aws.cloudwatch.EventRule("stopInstancesEventRule",
 *     description="Stop instances nightly",
 *     schedule_expression="cron(0 0 * * ? *)")
 * stop_instances_event_target = aws.cloudwatch.EventTarget("stopInstancesEventTarget",
 *     arn=f"arn:aws:ssm:{var['aws_region']}::document/AWS-RunShellScript",
 *     input="{\"commands\":[\"halt\"]}",
 *     rule=stop_instances_event_rule.name,
 *     role_arn=aws_iam_role["ssm_lifecycle"]["arn"],
 *     run_command_targets=[aws.cloudwatch.EventTargetRunCommandTargetArgs(
 *         key="tag:Terminate",
 *         values=["midnight"],
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var stopInstancesEventRule = new Aws.CloudWatch.EventRule("stopInstancesEventRule", new Aws.CloudWatch.EventRuleArgs
 *         {
 *             Description = "Stop instances nightly",
 *             ScheduleExpression = "cron(0 0 * * ? *)",
 *         });
 *         var stopInstancesEventTarget = new Aws.CloudWatch.EventTarget("stopInstancesEventTarget", new Aws.CloudWatch.EventTargetArgs
 *         {
 *             Arn = $"arn:aws:ssm:{@var.Aws_region}::document/AWS-RunShellScript",
 *             Input = "{\"commands\":[\"halt\"]}",
 *             Rule = stopInstancesEventRule.Name,
 *             RoleArn = aws_iam_role.Ssm_lifecycle.Arn,
 *             RunCommandTargets = 
 *             {
 *                 new Aws.CloudWatch.Inputs.EventTargetRunCommandTargetArgs
 *                 {
 *                     Key = "tag:Terminate",
 *                     Values = 
 *                     {
 *                         "midnight",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		stopInstancesEventRule, err := cloudwatch.NewEventRule(ctx, "stopInstancesEventRule", &cloudwatch.EventRuleArgs{
 * 			Description:        pulumi.String("Stop instances nightly"),
 * 			ScheduleExpression: pulumi.String("cron(0 0 * * ? *)"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventTarget(ctx, "stopInstancesEventTarget", &cloudwatch.EventTargetArgs{
 * 			Arn:     pulumi.String(fmt.Sprintf("%v%v%v", "arn:aws:ssm:", _var.Aws_region, "::document/AWS-RunShellScript")),
 * 			Input:   pulumi.String("{\"commands\":[\"halt\"]}"),
 * 			Rule:    stopInstancesEventRule.Name,
 * 			RoleArn: pulumi.Any(aws_iam_role.Ssm_lifecycle.Arn),
 * 			RunCommandTargets: cloudwatch.EventTargetRunCommandTargetArray{
 * 				&cloudwatch.EventTargetRunCommandTargetArgs{
 * 					Key: pulumi.String("tag:Terminate"),
 * 					Values: pulumi.StringArray{
 * 						pulumi.String("midnight"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ## Example API Gateway target
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleEventRule = new aws.cloudwatch.EventRule("exampleEventRule", {});
 * // ...
 * const exampleDeployment = new aws.apigateway.Deployment("exampleDeployment", {restApi: aws_api_gateway_rest_api.example.id});
 * // ...
 * const exampleStage = new aws.apigateway.Stage("exampleStage", {
 *     restApi: aws_api_gateway_rest_api.example.id,
 *     deployment: exampleDeployment.id,
 * });
 * // ...
 * const exampleEventTarget = new aws.cloudwatch.EventTarget("exampleEventTarget", {
 *     arn: pulumi.interpolate`${exampleStage.executionArn}/GET`,
 *     rule: exampleEventRule.id,
 *     httpTarget: {
 *         queryStringParameters: {
 *             Body: `$.detail.body`,
 *         },
 *         headerParameters: {
 *             Env: "Test",
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_event_rule = aws.cloudwatch.EventRule("exampleEventRule")
 * # ...
 * example_deployment = aws.apigateway.Deployment("exampleDeployment", rest_api=aws_api_gateway_rest_api["example"]["id"])
 * # ...
 * example_stage = aws.apigateway.Stage("exampleStage",
 *     rest_api=aws_api_gateway_rest_api["example"]["id"],
 *     deployment=example_deployment.id)
 * # ...
 * example_event_target = aws.cloudwatch.EventTarget("exampleEventTarget",
 *     arn=example_stage.execution_arn.apply(lambda execution_arn: f"{execution_arn}/GET"),
 *     rule=example_event_rule.id,
 *     http_target=aws.cloudwatch.EventTargetHttpTargetArgs(
 *         query_string_parameters={
 *             "Body": "$.detail.body",
 *         },
 *         header_parameters={
 *             "Env": "Test",
 *         },
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleEventRule = new Aws.CloudWatch.EventRule("exampleEventRule", new Aws.CloudWatch.EventRuleArgs
 *         {
 *         });
 *         // ...
 *         var exampleDeployment = new Aws.ApiGateway.Deployment("exampleDeployment", new Aws.ApiGateway.DeploymentArgs
 *         {
 *             RestApi = aws_api_gateway_rest_api.Example.Id,
 *         });
 *         // ...
 *         var exampleStage = new Aws.ApiGateway.Stage("exampleStage", new Aws.ApiGateway.StageArgs
 *         {
 *             RestApi = aws_api_gateway_rest_api.Example.Id,
 *             Deployment = exampleDeployment.Id,
 *         });
 *         // ...
 *         var exampleEventTarget = new Aws.CloudWatch.EventTarget("exampleEventTarget", new Aws.CloudWatch.EventTargetArgs
 *         {
 *             Arn = exampleStage.ExecutionArn.Apply(executionArn => $"{executionArn}/GET"),
 *             Rule = exampleEventRule.Id,
 *             HttpTarget = new Aws.CloudWatch.Inputs.EventTargetHttpTargetArgs
 *             {
 *                 QueryStringParameters = 
 *                 {
 *                     { "Body", "$.detail.body" },
 *                 },
 *                 HeaderParameters = 
 *                 {
 *                     { "Env", "Test" },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/apigateway"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleEventRule, err := cloudwatch.NewEventRule(ctx, "exampleEventRule", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleDeployment, err := apigateway.NewDeployment(ctx, "exampleDeployment", &apigateway.DeploymentArgs{
 * 			RestApi: pulumi.Any(aws_api_gateway_rest_api.Example.Id),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		exampleStage, err := apigateway.NewStage(ctx, "exampleStage", &apigateway.StageArgs{
 * 			RestApi:    pulumi.Any(aws_api_gateway_rest_api.Example.Id),
 * 			Deployment: exampleDeployment.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventTarget(ctx, "exampleEventTarget", &cloudwatch.EventTargetArgs{
 * 			Arn: exampleStage.ExecutionArn.ApplyT(func(executionArn string) (string, error) {
 * 				return fmt.Sprintf("%v%v", executionArn, "/GET"), nil
 * 			}).(pulumi.StringOutput),
 * 			Rule: exampleEventRule.ID(),
 * 			HttpTarget: &cloudwatch.EventTargetHttpTargetArgs{
 * 				QueryStringParameters: pulumi.StringMap{
 * 					"Body": pulumi.String(fmt.Sprintf("%v%v", "$", ".detail.body")),
 * 				},
 * 				HeaderParameters: pulumi.StringMap{
 * 					"Env": pulumi.String("Test"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ## Example Cross-Account Event Bus target
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const eventBusInvokeRemoteEventBusRole = new aws.iam.Role("eventBusInvokeRemoteEventBusRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "events.amazonaws.com"
 *       },
 *       "Effect": "Allow"
 *     }
 *   ]
 * }
 * `});
 * const eventBusInvokeRemoteEventBusPolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         actions: ["events.PutEvents"],
 *         resources: ["arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus"],
 *     }],
 * });
 * const eventBusInvokeRemoteEventBusPolicy = new aws.iam.Policy("eventBusInvokeRemoteEventBusPolicy", {policy: eventBusInvokeRemoteEventBusPolicyDocument.then(eventBusInvokeRemoteEventBusPolicyDocument => eventBusInvokeRemoteEventBusPolicyDocument.json)});
 * const eventBusInvokeRemoteEventBusRolePolicyAttachment = new aws.iam.RolePolicyAttachment("eventBusInvokeRemoteEventBusRolePolicyAttachment", {
 *     role: eventBusInvokeRemoteEventBusRole.name,
 *     policyArn: eventBusInvokeRemoteEventBusPolicy.arn,
 * });
 * const stopInstancesEventRule = new aws.cloudwatch.EventRule("stopInstancesEventRule", {
 *     description: "Stop instances nightly",
 *     scheduleExpression: "cron(0 0 * * ? *)",
 * });
 * const stopInstancesEventTarget = new aws.cloudwatch.EventTarget("stopInstancesEventTarget", {
 *     arn: "arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus",
 *     rule: stopInstancesEventRule.name,
 *     roleArn: eventBusInvokeRemoteEventBusRole.arn,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * event_bus_invoke_remote_event_bus_role = aws.iam.Role("eventBusInvokeRemoteEventBusRole", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "events.amazonaws.com"
 *       },
 *       "Effect": "Allow"
 *     }
 *   ]
 * }
 * """)
 * event_bus_invoke_remote_event_bus_policy_document = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
 *     effect="Allow",
 *     actions=["events.PutEvents"],
 *     resources=["arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus"],
 * )])
 * event_bus_invoke_remote_event_bus_policy = aws.iam.Policy("eventBusInvokeRemoteEventBusPolicy", policy=event_bus_invoke_remote_event_bus_policy_document.json)
 * event_bus_invoke_remote_event_bus_role_policy_attachment = aws.iam.RolePolicyAttachment("eventBusInvokeRemoteEventBusRolePolicyAttachment",
 *     role=event_bus_invoke_remote_event_bus_role.name,
 *     policy_arn=event_bus_invoke_remote_event_bus_policy.arn)
 * stop_instances_event_rule = aws.cloudwatch.EventRule("stopInstancesEventRule",
 *     description="Stop instances nightly",
 *     schedule_expression="cron(0 0 * * ? *)")
 * stop_instances_event_target = aws.cloudwatch.EventTarget("stopInstancesEventTarget",
 *     arn="arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus",
 *     rule=stop_instances_event_rule.name,
 *     role_arn=event_bus_invoke_remote_event_bus_role.arn)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var eventBusInvokeRemoteEventBusRole = new Aws.Iam.Role("eventBusInvokeRemoteEventBusRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": ""sts:AssumeRole"",
 *       ""Principal"": {
 *         ""Service"": ""events.amazonaws.com""
 *       },
 *       ""Effect"": ""Allow""
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var eventBusInvokeRemoteEventBusPolicyDocument = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
 *         {
 *             Statements = 
 *             {
 *                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
 *                 {
 *                     Effect = "Allow",
 *                     Actions = 
 *                     {
 *                         "events.PutEvents",
 *                     },
 *                     Resources = 
 *                     {
 *                         "arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus",
 *                     },
 *                 },
 *             },
 *         }));
 *         var eventBusInvokeRemoteEventBusPolicy = new Aws.Iam.Policy("eventBusInvokeRemoteEventBusPolicy", new Aws.Iam.PolicyArgs
 *         {
 *             Policy = eventBusInvokeRemoteEventBusPolicyDocument.Apply(eventBusInvokeRemoteEventBusPolicyDocument => eventBusInvokeRemoteEventBusPolicyDocument.Json),
 *         });
 *         var eventBusInvokeRemoteEventBusRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("eventBusInvokeRemoteEventBusRolePolicyAttachment", new Aws.Iam.RolePolicyAttachmentArgs
 *         {
 *             Role = eventBusInvokeRemoteEventBusRole.Name,
 *             PolicyArn = eventBusInvokeRemoteEventBusPolicy.Arn,
 *         });
 *         var stopInstancesEventRule = new Aws.CloudWatch.EventRule("stopInstancesEventRule", new Aws.CloudWatch.EventRuleArgs
 *         {
 *             Description = "Stop instances nightly",
 *             ScheduleExpression = "cron(0 0 * * ? *)",
 *         });
 *         var stopInstancesEventTarget = new Aws.CloudWatch.EventTarget("stopInstancesEventTarget", new Aws.CloudWatch.EventTargetArgs
 *         {
 *             Arn = "arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus",
 *             Rule = stopInstancesEventRule.Name,
 *             RoleArn = eventBusInvokeRemoteEventBusRole.Arn,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		eventBusInvokeRemoteEventBusRole, err := iam.NewRole(ctx, "eventBusInvokeRemoteEventBusRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"events.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		eventBusInvokeRemoteEventBusPolicyDocument, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{
 * 			Statements: []iam.GetPolicyDocumentStatement{
 * 				iam.GetPolicyDocumentStatement{
 * 					Effect: "Allow",
 * 					Actions: []string{
 * 						"events.PutEvents",
 * 					},
 * 					Resources: []string{
 * 						"arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus",
 * 					},
 * 				},
 * 			},
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		eventBusInvokeRemoteEventBusPolicy, err := iam.NewPolicy(ctx, "eventBusInvokeRemoteEventBusPolicy", &iam.PolicyArgs{
 * 			Policy: pulumi.String(eventBusInvokeRemoteEventBusPolicyDocument.Json),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicyAttachment(ctx, "eventBusInvokeRemoteEventBusRolePolicyAttachment", &iam.RolePolicyAttachmentArgs{
 * 			Role:      eventBusInvokeRemoteEventBusRole.Name,
 * 			PolicyArn: eventBusInvokeRemoteEventBusPolicy.Arn,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		stopInstancesEventRule, err := cloudwatch.NewEventRule(ctx, "stopInstancesEventRule", &cloudwatch.EventRuleArgs{
 * 			Description:        pulumi.String("Stop instances nightly"),
 * 			ScheduleExpression: pulumi.String("cron(0 0 * * ? *)"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventTarget(ctx, "stopInstancesEventTarget", &cloudwatch.EventTargetArgs{
 * 			Arn:     pulumi.String("arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus"),
 * 			Rule:    stopInstancesEventRule.Name,
 * 			RoleArn: eventBusInvokeRemoteEventBusRole.Arn,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ## Example Input Transformer Usage - JSON Object
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleEventRule = new aws.cloudwatch.EventRule("exampleEventRule", {});
 * // ...
 * const exampleEventTarget = new aws.cloudwatch.EventTarget("exampleEventTarget", {
 *     arn: aws_lambda_function.example.arn,
 *     rule: exampleEventRule.id,
 *     inputTransformer: {
 *         inputPaths: {
 *             instance: `$.detail.instance`,
 *             status: `$.detail.status`,
 *         },
 *         inputTemplate: `{
 *   "instance_id": <instance>,
 *   "instance_status": <status>
 * }
 * `,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_event_rule = aws.cloudwatch.EventRule("exampleEventRule")
 * # ...
 * example_event_target = aws.cloudwatch.EventTarget("exampleEventTarget",
 *     arn=aws_lambda_function["example"]["arn"],
 *     rule=example_event_rule.id,
 *     input_transformer=aws.cloudwatch.EventTargetInputTransformerArgs(
 *         input_paths={
 *             "instance": "$.detail.instance",
 *             "status": "$.detail.status",
 *         },
 *         input_template="""{
 *   "instance_id": <instance>,
 *   "instance_status": <status>
 * }
 * """,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleEventRule = new Aws.CloudWatch.EventRule("exampleEventRule", new Aws.CloudWatch.EventRuleArgs
 *         {
 *         });
 *         // ...
 *         var exampleEventTarget = new Aws.CloudWatch.EventTarget("exampleEventTarget", new Aws.CloudWatch.EventTargetArgs
 *         {
 *             Arn = aws_lambda_function.Example.Arn,
 *             Rule = exampleEventRule.Id,
 *             InputTransformer = new Aws.CloudWatch.Inputs.EventTargetInputTransformerArgs
 *             {
 *                 InputPaths = 
 *                 {
 *                     { "instance", "$.detail.instance" },
 *                     { "status", "$.detail.status" },
 *                 },
 *                 InputTemplate = @"{
 *   ""instance_id"": <instance>,
 *   ""instance_status"": <status>
 * }
 * ",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleEventRule, err := cloudwatch.NewEventRule(ctx, "exampleEventRule", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventTarget(ctx, "exampleEventTarget", &cloudwatch.EventTargetArgs{
 * 			Arn:  pulumi.Any(aws_lambda_function.Example.Arn),
 * 			Rule: exampleEventRule.ID(),
 * 			InputTransformer: &cloudwatch.EventTargetInputTransformerArgs{
 * 				InputPaths: pulumi.StringMap{
 * 					"instance": pulumi.String(fmt.Sprintf("%v%v", "$", ".detail.instance")),
 * 					"status":   pulumi.String(fmt.Sprintf("%v%v", "$", ".detail.status")),
 * 				},
 * 				InputTemplate: pulumi.String(fmt.Sprintf("%v%v%v%v", "{\n", "  \"instance_id\": <instance>,\n", "  \"instance_status\": <status>\n", "}\n")),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * ## Example Input Transformer Usage - Simple String
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const exampleEventRule = new aws.cloudwatch.EventRule("exampleEventRule", {});
 * // ...
 * const exampleEventTarget = new aws.cloudwatch.EventTarget("exampleEventTarget", {
 *     arn: aws_lambda_function.example.arn,
 *     rule: exampleEventRule.id,
 *     inputTransformer: {
 *         inputPaths: {
 *             instance: `$.detail.instance`,
 *             status: `$.detail.status`,
 *         },
 *         inputTemplate: "\"<instance> is in state <status>\"",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * example_event_rule = aws.cloudwatch.EventRule("exampleEventRule")
 * # ...
 * example_event_target = aws.cloudwatch.EventTarget("exampleEventTarget",
 *     arn=aws_lambda_function["example"]["arn"],
 *     rule=example_event_rule.id,
 *     input_transformer=aws.cloudwatch.EventTargetInputTransformerArgs(
 *         input_paths={
 *             "instance": "$.detail.instance",
 *             "status": "$.detail.status",
 *         },
 *         input_template="\"<instance> is in state <status>\"",
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var exampleEventRule = new Aws.CloudWatch.EventRule("exampleEventRule", new Aws.CloudWatch.EventRuleArgs
 *         {
 *         });
 *         // ...
 *         var exampleEventTarget = new Aws.CloudWatch.EventTarget("exampleEventTarget", new Aws.CloudWatch.EventTargetArgs
 *         {
 *             Arn = aws_lambda_function.Example.Arn,
 *             Rule = exampleEventRule.Id,
 *             InputTransformer = new Aws.CloudWatch.Inputs.EventTargetInputTransformerArgs
 *             {
 *                 InputPaths = 
 *                 {
 *                     { "instance", "$.detail.instance" },
 *                     { "status", "$.detail.status" },
 *                 },
 *                 InputTemplate = "\"<instance> is in state <status>\"",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		exampleEventRule, err := cloudwatch.NewEventRule(ctx, "exampleEventRule", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = cloudwatch.NewEventTarget(ctx, "exampleEventTarget", &cloudwatch.EventTargetArgs{
 * 			Arn:  pulumi.Any(aws_lambda_function.Example.Arn),
 * 			Rule: exampleEventRule.ID(),
 * 			InputTransformer: &cloudwatch.EventTargetInputTransformerArgs{
 * 				InputPaths: pulumi.StringMap{
 * 					"instance": pulumi.String(fmt.Sprintf("%v%v", "$", ".detail.instance")),
 * 					"status":   pulumi.String(fmt.Sprintf("%v%v", "$", ".detail.status")),
 * 				},
 * 				InputTemplate: pulumi.String("\"<instance> is in state <status>\""),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * 
 * ## Import
 * 
 * EventBridge Targets can be imported using `event_bus_name/rule-name/target-id` (if you omit `event_bus_name`, the `default` event bus will be used).
 * 
 * ```sh
 *  $ pulumi import aws:cloudwatch/eventTarget:EventTarget test-event-target rule-name/target-id
 * ```
 * 
 *  
 */
@ResourceType(type="aws:cloudwatch/eventTarget:EventTarget")
public class EventTarget extends io.pulumi.resources.CustomResource {
    /**
     * - ARN of the SQS queue specified as the target for the dead-letter queue.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return - ARN of the SQS queue specified as the target for the dead-letter queue.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Export(name="batchTarget", type=EventTargetBatchTarget.class, parameters={})
    private Output</* @Nullable */ EventTargetBatchTarget> batchTarget;

    /**
     * @return Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
     * 
     */
    public Output</* @Nullable */ EventTargetBatchTarget> getBatchTarget() {
        return this.batchTarget;
    }
    /**
     * Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Export(name="deadLetterConfig", type=EventTargetDeadLetterConfig.class, parameters={})
    private Output</* @Nullable */ EventTargetDeadLetterConfig> deadLetterConfig;

    /**
     * @return Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
     * 
     */
    public Output</* @Nullable */ EventTargetDeadLetterConfig> getDeadLetterConfig() {
        return this.deadLetterConfig;
    }
    /**
     * Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Export(name="ecsTarget", type=EventTargetEcsTarget.class, parameters={})
    private Output</* @Nullable */ EventTargetEcsTarget> ecsTarget;

    /**
     * @return Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
     * 
     */
    public Output</* @Nullable */ EventTargetEcsTarget> getEcsTarget() {
        return this.ecsTarget;
    }
    /**
     * The event bus to associate with the rule. If you omit this, the `default` event bus is used.
     * 
     */
    @Export(name="eventBusName", type=String.class, parameters={})
    private Output</* @Nullable */ String> eventBusName;

    /**
     * @return The event bus to associate with the rule. If you omit this, the `default` event bus is used.
     * 
     */
    public Output</* @Nullable */ String> getEventBusName() {
        return this.eventBusName;
    }
    /**
     * Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
     * 
     */
    @Export(name="httpTarget", type=EventTargetHttpTarget.class, parameters={})
    private Output</* @Nullable */ EventTargetHttpTarget> httpTarget;

    /**
     * @return Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
     * 
     */
    public Output</* @Nullable */ EventTargetHttpTarget> getHttpTarget() {
        return this.httpTarget;
    }
    /**
     * Valid JSON text passed to the target. Conflicts with `input_path` and `input_transformer`.
     * 
     */
    @Export(name="input", type=String.class, parameters={})
    private Output</* @Nullable */ String> input;

    /**
     * @return Valid JSON text passed to the target. Conflicts with `input_path` and `input_transformer`.
     * 
     */
    public Output</* @Nullable */ String> getInput() {
        return this.input;
    }
    /**
     * The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `input_transformer`.
     * 
     */
    @Export(name="inputPath", type=String.class, parameters={})
    private Output</* @Nullable */ String> inputPath;

    /**
     * @return The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `input_transformer`.
     * 
     */
    public Output</* @Nullable */ String> getInputPath() {
        return this.inputPath;
    }
    /**
     * Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `input_path`.
     * 
     */
    @Export(name="inputTransformer", type=EventTargetInputTransformer.class, parameters={})
    private Output</* @Nullable */ EventTargetInputTransformer> inputTransformer;

    /**
     * @return Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `input_path`.
     * 
     */
    public Output</* @Nullable */ EventTargetInputTransformer> getInputTransformer() {
        return this.inputTransformer;
    }
    /**
     * Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Export(name="kinesisTarget", type=EventTargetKinesisTarget.class, parameters={})
    private Output</* @Nullable */ EventTargetKinesisTarget> kinesisTarget;

    /**
     * @return Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
     * 
     */
    public Output</* @Nullable */ EventTargetKinesisTarget> getKinesisTarget() {
        return this.kinesisTarget;
    }
    /**
     * Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Export(name="redshiftTarget", type=EventTargetRedshiftTarget.class, parameters={})
    private Output</* @Nullable */ EventTargetRedshiftTarget> redshiftTarget;

    /**
     * @return Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
     * 
     */
    public Output</* @Nullable */ EventTargetRedshiftTarget> getRedshiftTarget() {
        return this.redshiftTarget;
    }
    /**
     * Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Export(name="retryPolicy", type=EventTargetRetryPolicy.class, parameters={})
    private Output</* @Nullable */ EventTargetRetryPolicy> retryPolicy;

    /**
     * @return Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
     * 
     */
    public Output</* @Nullable */ EventTargetRetryPolicy> getRetryPolicy() {
        return this.retryPolicy;
    }
    /**
     * The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecs_target` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
     * 
     */
    @Export(name="roleArn", type=String.class, parameters={})
    private Output</* @Nullable */ String> roleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecs_target` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
     * 
     */
    public Output</* @Nullable */ String> getRoleArn() {
        return this.roleArn;
    }
    /**
     * The name of the rule you want to add targets to.
     * 
     */
    @Export(name="rule", type=String.class, parameters={})
    private Output<String> rule;

    /**
     * @return The name of the rule you want to add targets to.
     * 
     */
    public Output<String> getRule() {
        return this.rule;
    }
    /**
     * Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
     * 
     */
    @Export(name="runCommandTargets", type=List.class, parameters={EventTargetRunCommandTarget.class})
    private Output</* @Nullable */ List<EventTargetRunCommandTarget>> runCommandTargets;

    /**
     * @return Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
     * 
     */
    public Output</* @Nullable */ List<EventTargetRunCommandTarget>> getRunCommandTargets() {
        return this.runCommandTargets;
    }
    /**
     * Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Export(name="sqsTarget", type=EventTargetSqsTarget.class, parameters={})
    private Output</* @Nullable */ EventTargetSqsTarget> sqsTarget;

    /**
     * @return Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
     * 
     */
    public Output</* @Nullable */ EventTargetSqsTarget> getSqsTarget() {
        return this.sqsTarget;
    }
    /**
     * The unique target assignment ID.  If missing, will generate a random, unique id.
     * 
     */
    @Export(name="targetId", type=String.class, parameters={})
    private Output<String> targetId;

    /**
     * @return The unique target assignment ID.  If missing, will generate a random, unique id.
     * 
     */
    public Output<String> getTargetId() {
        return this.targetId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventTarget(String name) {
        this(name, EventTargetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventTarget(String name, EventTargetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventTarget(String name, EventTargetArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventTarget:EventTarget", name, args == null ? EventTargetArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private EventTarget(String name, Output<String> id, @Nullable EventTargetState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:cloudwatch/eventTarget:EventTarget", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventTarget get(String name, Output<String> id, @Nullable EventTargetState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new EventTarget(name, id, state, options);
    }
}
