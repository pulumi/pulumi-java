// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.datasync.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class TaskOptions {
    /**
     * A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
     * 
     */
    private final @Nullable String atime;
    /**
     * Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
     * 
     */
    private final @Nullable Integer bytesPerSecond;
    /**
     * Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
     * 
     */
    private final @Nullable String gid;
    /**
     * Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
     * 
     */
    private final @Nullable String logLevel;
    /**
     * A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
     * 
     */
    private final @Nullable String mtime;
    /**
     * Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
     * 
     */
    private final @Nullable String overwriteMode;
    /**
     * Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
     * 
     */
    private final @Nullable String posixPermissions;
    /**
     * Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
     * 
     */
    private final @Nullable String preserveDeletedFiles;
    /**
     * Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
     * 
     */
    private final @Nullable String preserveDevices;
    /**
     * Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
     * 
     */
    private final @Nullable String taskQueueing;
    /**
     * Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
     * 
     */
    private final @Nullable String transferMode;
    /**
     * User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
     * 
     */
    private final @Nullable String uid;
    /**
     * Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
     * 
     */
    private final @Nullable String verifyMode;

    @OutputCustomType.Constructor({"atime","bytesPerSecond","gid","logLevel","mtime","overwriteMode","posixPermissions","preserveDeletedFiles","preserveDevices","taskQueueing","transferMode","uid","verifyMode"})
    private TaskOptions(
        @Nullable String atime,
        @Nullable Integer bytesPerSecond,
        @Nullable String gid,
        @Nullable String logLevel,
        @Nullable String mtime,
        @Nullable String overwriteMode,
        @Nullable String posixPermissions,
        @Nullable String preserveDeletedFiles,
        @Nullable String preserveDevices,
        @Nullable String taskQueueing,
        @Nullable String transferMode,
        @Nullable String uid,
        @Nullable String verifyMode) {
        this.atime = atime;
        this.bytesPerSecond = bytesPerSecond;
        this.gid = gid;
        this.logLevel = logLevel;
        this.mtime = mtime;
        this.overwriteMode = overwriteMode;
        this.posixPermissions = posixPermissions;
        this.preserveDeletedFiles = preserveDeletedFiles;
        this.preserveDevices = preserveDevices;
        this.taskQueueing = taskQueueing;
        this.transferMode = transferMode;
        this.uid = uid;
        this.verifyMode = verifyMode;
    }

    /**
     * A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
     * 
    */
    public Optional<String> getAtime() {
        return Optional.ofNullable(this.atime);
    }
    /**
     * Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
     * 
    */
    public Optional<Integer> getBytesPerSecond() {
        return Optional.ofNullable(this.bytesPerSecond);
    }
    /**
     * Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
     * 
    */
    public Optional<String> getGid() {
        return Optional.ofNullable(this.gid);
    }
    /**
     * Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
     * 
    */
    public Optional<String> getLogLevel() {
        return Optional.ofNullable(this.logLevel);
    }
    /**
     * A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
     * 
    */
    public Optional<String> getMtime() {
        return Optional.ofNullable(this.mtime);
    }
    /**
     * Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
     * 
    */
    public Optional<String> getOverwriteMode() {
        return Optional.ofNullable(this.overwriteMode);
    }
    /**
     * Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
     * 
    */
    public Optional<String> getPosixPermissions() {
        return Optional.ofNullable(this.posixPermissions);
    }
    /**
     * Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
     * 
    */
    public Optional<String> getPreserveDeletedFiles() {
        return Optional.ofNullable(this.preserveDeletedFiles);
    }
    /**
     * Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
     * 
    */
    public Optional<String> getPreserveDevices() {
        return Optional.ofNullable(this.preserveDevices);
    }
    /**
     * Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
     * 
    */
    public Optional<String> getTaskQueueing() {
        return Optional.ofNullable(this.taskQueueing);
    }
    /**
     * Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
     * 
    */
    public Optional<String> getTransferMode() {
        return Optional.ofNullable(this.transferMode);
    }
    /**
     * User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
     * 
    */
    public Optional<String> getUid() {
        return Optional.ofNullable(this.uid);
    }
    /**
     * Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
     * 
    */
    public Optional<String> getVerifyMode() {
        return Optional.ofNullable(this.verifyMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskOptions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String atime;
        private @Nullable Integer bytesPerSecond;
        private @Nullable String gid;
        private @Nullable String logLevel;
        private @Nullable String mtime;
        private @Nullable String overwriteMode;
        private @Nullable String posixPermissions;
        private @Nullable String preserveDeletedFiles;
        private @Nullable String preserveDevices;
        private @Nullable String taskQueueing;
        private @Nullable String transferMode;
        private @Nullable String uid;
        private @Nullable String verifyMode;

        public Builder() {
    	      // Empty
        }

        public Builder(TaskOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.atime = defaults.atime;
    	      this.bytesPerSecond = defaults.bytesPerSecond;
    	      this.gid = defaults.gid;
    	      this.logLevel = defaults.logLevel;
    	      this.mtime = defaults.mtime;
    	      this.overwriteMode = defaults.overwriteMode;
    	      this.posixPermissions = defaults.posixPermissions;
    	      this.preserveDeletedFiles = defaults.preserveDeletedFiles;
    	      this.preserveDevices = defaults.preserveDevices;
    	      this.taskQueueing = defaults.taskQueueing;
    	      this.transferMode = defaults.transferMode;
    	      this.uid = defaults.uid;
    	      this.verifyMode = defaults.verifyMode;
        }

        public Builder setAtime(@Nullable String atime) {
            this.atime = atime;
            return this;
        }

        public Builder setBytesPerSecond(@Nullable Integer bytesPerSecond) {
            this.bytesPerSecond = bytesPerSecond;
            return this;
        }

        public Builder setGid(@Nullable String gid) {
            this.gid = gid;
            return this;
        }

        public Builder setLogLevel(@Nullable String logLevel) {
            this.logLevel = logLevel;
            return this;
        }

        public Builder setMtime(@Nullable String mtime) {
            this.mtime = mtime;
            return this;
        }

        public Builder setOverwriteMode(@Nullable String overwriteMode) {
            this.overwriteMode = overwriteMode;
            return this;
        }

        public Builder setPosixPermissions(@Nullable String posixPermissions) {
            this.posixPermissions = posixPermissions;
            return this;
        }

        public Builder setPreserveDeletedFiles(@Nullable String preserveDeletedFiles) {
            this.preserveDeletedFiles = preserveDeletedFiles;
            return this;
        }

        public Builder setPreserveDevices(@Nullable String preserveDevices) {
            this.preserveDevices = preserveDevices;
            return this;
        }

        public Builder setTaskQueueing(@Nullable String taskQueueing) {
            this.taskQueueing = taskQueueing;
            return this;
        }

        public Builder setTransferMode(@Nullable String transferMode) {
            this.transferMode = transferMode;
            return this;
        }

        public Builder setUid(@Nullable String uid) {
            this.uid = uid;
            return this;
        }

        public Builder setVerifyMode(@Nullable String verifyMode) {
            this.verifyMode = verifyMode;
            return this;
        }
        public TaskOptions build() {
            return new TaskOptions(atime, bytesPerSecond, gid, logLevel, mtime, overwriteMode, posixPermissions, preserveDeletedFiles, preserveDevices, taskQueueing, transferMode, uid, verifyMode);
        }
    }
}
