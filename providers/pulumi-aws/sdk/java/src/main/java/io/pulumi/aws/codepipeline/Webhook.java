// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codepipeline;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.codepipeline.WebhookArgs;
import io.pulumi.aws.codepipeline.inputs.WebhookState;
import io.pulumi.aws.codepipeline.outputs.WebhookAuthenticationConfiguration;
import io.pulumi.aws.codepipeline.outputs.WebhookFilter;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a CodePipeline Webhook.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as github from "@pulumi/github";
 * 
 * const barPipeline = new aws.codepipeline.Pipeline("barPipeline", {
 *     roleArn: aws_iam_role.bar.arn,
 *     artifactStore: {
 *         location: aws_s3_bucket.bar.bucket,
 *         type: "S3",
 *         encryptionKey: {
 *             id: data.aws_kms_alias.s3kmskey.arn,
 *             type: "KMS",
 *         },
 *     },
 *     stages: [
 *         {
 *             name: "Source",
 *             actions: [{
 *                 name: "Source",
 *                 category: "Source",
 *                 owner: "ThirdParty",
 *                 provider: "GitHub",
 *                 version: "1",
 *                 outputArtifacts: ["test"],
 *                 configuration: {
 *                     Owner: "my-organization",
 *                     Repo: "test",
 *                     Branch: "master",
 *                 },
 *             }],
 *         },
 *         {
 *             name: "Build",
 *             actions: [{
 *                 name: "Build",
 *                 category: "Build",
 *                 owner: "AWS",
 *                 provider: "CodeBuild",
 *                 inputArtifacts: ["test"],
 *                 version: "1",
 *                 configuration: {
 *                     ProjectName: "test",
 *                 },
 *             }],
 *         },
 *     ],
 * });
 * const webhookSecret = "super-secret";
 * const barWebhook = new aws.codepipeline.Webhook("barWebhook", {
 *     authentication: "GITHUB_HMAC",
 *     targetAction: "Source",
 *     targetPipeline: barPipeline.name,
 *     authenticationConfiguration: {
 *         secretToken: webhookSecret,
 *     },
 *     filters: [{
 *         jsonPath: `$.ref`,
 *         matchEquals: "refs/heads/{Branch}",
 *     }],
 * });
 * // Wire the CodePipeline webhook into a GitHub repository.
 * const barRepositoryWebhook = new github.RepositoryWebhook("barRepositoryWebhook", {
 *     repository: github_repository.repo.name,
 *     configuration: {
 *         url: barWebhook.url,
 *         contentType: "json",
 *         insecureSsl: true,
 *         secret: webhookSecret,
 *     },
 *     events: ["push"],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * import pulumi_github as github
 * 
 * bar_pipeline = aws.codepipeline.Pipeline("barPipeline",
 *     role_arn=aws_iam_role["bar"]["arn"],
 *     artifact_store=aws.codepipeline.PipelineArtifactStoreArgs(
 *         location=aws_s3_bucket["bar"]["bucket"],
 *         type="S3",
 *         encryption_key=aws.codepipeline.PipelineArtifactStoreEncryptionKeyArgs(
 *             id=data["aws_kms_alias"]["s3kmskey"]["arn"],
 *             type="KMS",
 *         ),
 *     ),
 *     stages=[
 *         aws.codepipeline.PipelineStageArgs(
 *             name="Source",
 *             actions=[aws.codepipeline.PipelineStageActionArgs(
 *                 name="Source",
 *                 category="Source",
 *                 owner="ThirdParty",
 *                 provider="GitHub",
 *                 version="1",
 *                 output_artifacts=["test"],
 *                 configuration={
 *                     "Owner": "my-organization",
 *                     "Repo": "test",
 *                     "Branch": "master",
 *                 },
 *             )],
 *         ),
 *         aws.codepipeline.PipelineStageArgs(
 *             name="Build",
 *             actions=[aws.codepipeline.PipelineStageActionArgs(
 *                 name="Build",
 *                 category="Build",
 *                 owner="AWS",
 *                 provider="CodeBuild",
 *                 input_artifacts=["test"],
 *                 version="1",
 *                 configuration={
 *                     "ProjectName": "test",
 *                 },
 *             )],
 *         ),
 *     ])
 * webhook_secret = "super-secret"
 * bar_webhook = aws.codepipeline.Webhook("barWebhook",
 *     authentication="GITHUB_HMAC",
 *     target_action="Source",
 *     target_pipeline=bar_pipeline.name,
 *     authentication_configuration=aws.codepipeline.WebhookAuthenticationConfigurationArgs(
 *         secret_token=webhook_secret,
 *     ),
 *     filters=[aws.codepipeline.WebhookFilterArgs(
 *         json_path="$.ref",
 *         match_equals="refs/heads/{Branch}",
 *     )])
 * # Wire the CodePipeline webhook into a GitHub repository.
 * bar_repository_webhook = github.RepositoryWebhook("barRepositoryWebhook",
 *     repository=github_repository["repo"]["name"],
 *     configuration=github.RepositoryWebhookConfigurationArgs(
 *         url=bar_webhook.url,
 *         content_type="json",
 *         insecure_ssl=True,
 *         secret=webhook_secret,
 *     ),
 *     events=["push"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * using Github = Pulumi.Github;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var barPipeline = new Aws.CodePipeline.Pipeline("barPipeline", new Aws.CodePipeline.PipelineArgs
 *         {
 *             RoleArn = aws_iam_role.Bar.Arn,
 *             ArtifactStore = new Aws.CodePipeline.Inputs.PipelineArtifactStoreArgs
 *             {
 *                 Location = aws_s3_bucket.Bar.Bucket,
 *                 Type = "S3",
 *                 EncryptionKey = new Aws.CodePipeline.Inputs.PipelineArtifactStoreEncryptionKeyArgs
 *                 {
 *                     Id = data.Aws_kms_alias.S3kmskey.Arn,
 *                     Type = "KMS",
 *                 },
 *             },
 *             Stages = 
 *             {
 *                 new Aws.CodePipeline.Inputs.PipelineStageArgs
 *                 {
 *                     Name = "Source",
 *                     Actions = 
 *                     {
 *                         new Aws.CodePipeline.Inputs.PipelineStageActionArgs
 *                         {
 *                             Name = "Source",
 *                             Category = "Source",
 *                             Owner = "ThirdParty",
 *                             Provider = "GitHub",
 *                             Version = "1",
 *                             OutputArtifacts = 
 *                             {
 *                                 "test",
 *                             },
 *                             Configuration = 
 *                             {
 *                                 { "Owner", "my-organization" },
 *                                 { "Repo", "test" },
 *                                 { "Branch", "master" },
 *                             },
 *                         },
 *                     },
 *                 },
 *                 new Aws.CodePipeline.Inputs.PipelineStageArgs
 *                 {
 *                     Name = "Build",
 *                     Actions = 
 *                     {
 *                         new Aws.CodePipeline.Inputs.PipelineStageActionArgs
 *                         {
 *                             Name = "Build",
 *                             Category = "Build",
 *                             Owner = "AWS",
 *                             Provider = "CodeBuild",
 *                             InputArtifacts = 
 *                             {
 *                                 "test",
 *                             },
 *                             Version = "1",
 *                             Configuration = 
 *                             {
 *                                 { "ProjectName", "test" },
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *         var webhookSecret = "super-secret";
 *         var barWebhook = new Aws.CodePipeline.Webhook("barWebhook", new Aws.CodePipeline.WebhookArgs
 *         {
 *             Authentication = "GITHUB_HMAC",
 *             TargetAction = "Source",
 *             TargetPipeline = barPipeline.Name,
 *             AuthenticationConfiguration = new Aws.CodePipeline.Inputs.WebhookAuthenticationConfigurationArgs
 *             {
 *                 SecretToken = webhookSecret,
 *             },
 *             Filters = 
 *             {
 *                 new Aws.CodePipeline.Inputs.WebhookFilterArgs
 *                 {
 *                     JsonPath = "$.ref",
 *                     MatchEquals = "refs/heads/{Branch}",
 *                 },
 *             },
 *         });
 *         // Wire the CodePipeline webhook into a GitHub repository.
 *         var barRepositoryWebhook = new Github.RepositoryWebhook("barRepositoryWebhook", new Github.RepositoryWebhookArgs
 *         {
 *             Repository = github_repository.Repo.Name,
 *             Configuration = new Github.Inputs.RepositoryWebhookConfigurationArgs
 *             {
 *                 Url = barWebhook.Url,
 *                 ContentType = "json",
 *                 InsecureSsl = true,
 *                 Secret = webhookSecret,
 *             },
 *             Events = 
 *             {
 *                 "push",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/codepipeline"
 * 	"github.com/pulumi/pulumi-github/sdk/v4/go/github"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		barPipeline, err := codepipeline.NewPipeline(ctx, "barPipeline", &codepipeline.PipelineArgs{
 * 			RoleArn: pulumi.Any(aws_iam_role.Bar.Arn),
 * 			ArtifactStore: &codepipeline.PipelineArtifactStoreArgs{
 * 				Location: pulumi.Any(aws_s3_bucket.Bar.Bucket),
 * 				Type:     pulumi.String("S3"),
 * 				EncryptionKey: &codepipeline.PipelineArtifactStoreEncryptionKeyArgs{
 * 					Id:   pulumi.Any(data.Aws_kms_alias.S3kmskey.Arn),
 * 					Type: pulumi.String("KMS"),
 * 				},
 * 			},
 * 			Stages: codepipeline.PipelineStageArray{
 * 				&codepipeline.PipelineStageArgs{
 * 					Name: pulumi.String("Source"),
 * 					Actions: codepipeline.PipelineStageActionArray{
 * 						&codepipeline.PipelineStageActionArgs{
 * 							Name:     pulumi.String("Source"),
 * 							Category: pulumi.String("Source"),
 * 							Owner:    pulumi.String("ThirdParty"),
 * 							Provider: pulumi.String("GitHub"),
 * 							Version:  pulumi.String("1"),
 * 							OutputArtifacts: pulumi.StringArray{
 * 								pulumi.String("test"),
 * 							},
 * 							Configuration: pulumi.StringMap{
 * 								"Owner":  pulumi.String("my-organization"),
 * 								"Repo":   pulumi.String("test"),
 * 								"Branch": pulumi.String("master"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 				&codepipeline.PipelineStageArgs{
 * 					Name: pulumi.String("Build"),
 * 					Actions: codepipeline.PipelineStageActionArray{
 * 						&codepipeline.PipelineStageActionArgs{
 * 							Name:     pulumi.String("Build"),
 * 							Category: pulumi.String("Build"),
 * 							Owner:    pulumi.String("AWS"),
 * 							Provider: pulumi.String("CodeBuild"),
 * 							InputArtifacts: pulumi.StringArray{
 * 								pulumi.String("test"),
 * 							},
 * 							Version: pulumi.String("1"),
 * 							Configuration: pulumi.StringMap{
 * 								"ProjectName": pulumi.String("test"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		webhookSecret := "super-secret"
 * 		barWebhook, err := codepipeline.NewWebhook(ctx, "barWebhook", &codepipeline.WebhookArgs{
 * 			Authentication: pulumi.String("GITHUB_HMAC"),
 * 			TargetAction:   pulumi.String("Source"),
 * 			TargetPipeline: barPipeline.Name,
 * 			AuthenticationConfiguration: &codepipeline.WebhookAuthenticationConfigurationArgs{
 * 				SecretToken: pulumi.String(webhookSecret),
 * 			},
 * 			Filters: codepipeline.WebhookFilterArray{
 * 				&codepipeline.WebhookFilterArgs{
 * 					JsonPath:    pulumi.String(fmt.Sprintf("%v%v", "$", ".ref")),
 * 					MatchEquals: pulumi.String("refs/heads/{Branch}"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = github.NewRepositoryWebhook(ctx, "barRepositoryWebhook", &github.RepositoryWebhookArgs{
 * 			Repository: pulumi.Any(github_repository.Repo.Name),
 * 			Configuration: &RepositoryWebhookConfigurationArgs{
 * 				Url:         barWebhook.Url,
 * 				ContentType: pulumi.String("json"),
 * 				InsecureSsl: pulumi.Bool(true),
 * 				Secret:      pulumi.String(webhookSecret),
 * 			},
 * 			Events: pulumi.StringArray{
 * 				pulumi.String("push"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * CodePipeline Webhooks can be imported by their ARN, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:codepipeline/webhook:Webhook example arn:aws:codepipeline:us-west-2:123456789012:webhook:example
 * ```
 * 
 *  
 */
@ResourceType(type="aws:codepipeline/webhook:Webhook")
public class Webhook extends io.pulumi.resources.CustomResource {
    /**
     * The CodePipeline webhook's ARN.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The CodePipeline webhook's ARN.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The type of authentication  to use. One of `IP`, `GITHUB_HMAC`, or `UNAUTHENTICATED`.
     * 
     */
    @Export(name="authentication", type=String.class, parameters={})
    private Output<String> authentication;

    /**
     * @return The type of authentication  to use. One of `IP`, `GITHUB_HMAC`, or `UNAUTHENTICATED`.
     * 
     */
    public Output<String> getAuthentication() {
        return this.authentication;
    }
    /**
     * An `auth` block. Required for `IP` and `GITHUB_HMAC`. Auth blocks are documented below.
     * 
     */
    @Export(name="authenticationConfiguration", type=WebhookAuthenticationConfiguration.class, parameters={})
    private Output</* @Nullable */ WebhookAuthenticationConfiguration> authenticationConfiguration;

    /**
     * @return An `auth` block. Required for `IP` and `GITHUB_HMAC`. Auth blocks are documented below.
     * 
     */
    public Output</* @Nullable */ WebhookAuthenticationConfiguration> getAuthenticationConfiguration() {
        return this.authenticationConfiguration;
    }
    /**
     * One or more `filter` blocks. Filter blocks are documented below.
     * 
     */
    @Export(name="filters", type=List.class, parameters={WebhookFilter.class})
    private Output<List<WebhookFilter>> filters;

    /**
     * @return One or more `filter` blocks. Filter blocks are documented below.
     * 
     */
    public Output<List<WebhookFilter>> getFilters() {
        return this.filters;
    }
    /**
     * The name of the webhook.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the webhook.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The name of the action in a pipeline you want to connect to the webhook. The action must be from the source (first) stage of the pipeline.
     * 
     */
    @Export(name="targetAction", type=String.class, parameters={})
    private Output<String> targetAction;

    /**
     * @return The name of the action in a pipeline you want to connect to the webhook. The action must be from the source (first) stage of the pipeline.
     * 
     */
    public Output<String> getTargetAction() {
        return this.targetAction;
    }
    /**
     * The name of the pipeline.
     * 
     */
    @Export(name="targetPipeline", type=String.class, parameters={})
    private Output<String> targetPipeline;

    /**
     * @return The name of the pipeline.
     * 
     */
    public Output<String> getTargetPipeline() {
        return this.targetPipeline;
    }
    /**
     * The CodePipeline webhook's URL. POST events to this endpoint to trigger the target.
     * 
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return The CodePipeline webhook's URL. POST events to this endpoint to trigger the target.
     * 
     */
    public Output<String> getUrl() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Webhook(String name) {
        this(name, WebhookArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Webhook(String name, WebhookArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Webhook(String name, WebhookArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codepipeline/webhook:Webhook", name, args == null ? WebhookArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Webhook(String name, Output<String> id, @Nullable WebhookState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:codepipeline/webhook:Webhook", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Webhook get(String name, Output<String> id, @Nullable WebhookState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Webhook(name, id, state, options);
    }
}
