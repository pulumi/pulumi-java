// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesis.inputs;

import io.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs Empty = new FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs();

    /**
     * The ARN of the S3 bucket
     * 
     */
    @InputImport(name="bucketArn", required=true)
      private final Input<String> bucketArn;

    public Input<String> getBucketArn() {
        return this.bucketArn;
    }

    /**
     * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
     * 
     */
    @InputImport(name="bufferInterval")
      private final @Nullable Input<Integer> bufferInterval;

    public Input<Integer> getBufferInterval() {
        return this.bufferInterval == null ? Input.empty() : this.bufferInterval;
    }

    /**
     * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
     * We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
     * 
     */
    @InputImport(name="bufferSize")
      private final @Nullable Input<Integer> bufferSize;

    public Input<Integer> getBufferSize() {
        return this.bufferSize == null ? Input.empty() : this.bufferSize;
    }

    /**
     * The CloudWatch Logging Options for the delivery stream. More details are given below
     * 
     */
    @InputImport(name="cloudwatchLoggingOptions")
      private final @Nullable Input<FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions;

    public Input<FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsGetArgs> getCloudwatchLoggingOptions() {
        return this.cloudwatchLoggingOptions == null ? Input.empty() : this.cloudwatchLoggingOptions;
    }

    /**
     * The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
     * 
     */
    @InputImport(name="compressionFormat")
      private final @Nullable Input<String> compressionFormat;

    public Input<String> getCompressionFormat() {
        return this.compressionFormat == null ? Input.empty() : this.compressionFormat;
    }

    /**
     * Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
     * 
     */
    @InputImport(name="errorOutputPrefix")
      private final @Nullable Input<String> errorOutputPrefix;

    public Input<String> getErrorOutputPrefix() {
        return this.errorOutputPrefix == null ? Input.empty() : this.errorOutputPrefix;
    }

    /**
     * Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
     * be used.
     * 
     */
    @InputImport(name="kmsKeyArn")
      private final @Nullable Input<String> kmsKeyArn;

    public Input<String> getKmsKeyArn() {
        return this.kmsKeyArn == null ? Input.empty() : this.kmsKeyArn;
    }

    /**
     * The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
     * 
     */
    @InputImport(name="prefix")
      private final @Nullable Input<String> prefix;

    public Input<String> getPrefix() {
        return this.prefix == null ? Input.empty() : this.prefix;
    }

    /**
     * The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
     * 
     */
    @InputImport(name="roleArn", required=true)
      private final Input<String> roleArn;

    public Input<String> getRoleArn() {
        return this.roleArn;
    }

    public FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs(
        Input<String> bucketArn,
        @Nullable Input<Integer> bufferInterval,
        @Nullable Input<Integer> bufferSize,
        @Nullable Input<FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions,
        @Nullable Input<String> compressionFormat,
        @Nullable Input<String> errorOutputPrefix,
        @Nullable Input<String> kmsKeyArn,
        @Nullable Input<String> prefix,
        Input<String> roleArn) {
        this.bucketArn = Objects.requireNonNull(bucketArn, "expected parameter 'bucketArn' to be non-null");
        this.bufferInterval = bufferInterval;
        this.bufferSize = bufferSize;
        this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
        this.compressionFormat = compressionFormat;
        this.errorOutputPrefix = errorOutputPrefix;
        this.kmsKeyArn = kmsKeyArn;
        this.prefix = prefix;
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
    }

    private FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs() {
        this.bucketArn = Input.empty();
        this.bufferInterval = Input.empty();
        this.bufferSize = Input.empty();
        this.cloudwatchLoggingOptions = Input.empty();
        this.compressionFormat = Input.empty();
        this.errorOutputPrefix = Input.empty();
        this.kmsKeyArn = Input.empty();
        this.prefix = Input.empty();
        this.roleArn = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> bucketArn;
        private @Nullable Input<Integer> bufferInterval;
        private @Nullable Input<Integer> bufferSize;
        private @Nullable Input<FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions;
        private @Nullable Input<String> compressionFormat;
        private @Nullable Input<String> errorOutputPrefix;
        private @Nullable Input<String> kmsKeyArn;
        private @Nullable Input<String> prefix;
        private Input<String> roleArn;

        public Builder() {
    	      // Empty
        }

        public Builder(FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketArn = defaults.bucketArn;
    	      this.bufferInterval = defaults.bufferInterval;
    	      this.bufferSize = defaults.bufferSize;
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.compressionFormat = defaults.compressionFormat;
    	      this.errorOutputPrefix = defaults.errorOutputPrefix;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.prefix = defaults.prefix;
    	      this.roleArn = defaults.roleArn;
        }

        public Builder setBucketArn(Input<String> bucketArn) {
            this.bucketArn = Objects.requireNonNull(bucketArn);
            return this;
        }

        public Builder setBucketArn(String bucketArn) {
            this.bucketArn = Input.of(Objects.requireNonNull(bucketArn));
            return this;
        }

        public Builder setBufferInterval(@Nullable Input<Integer> bufferInterval) {
            this.bufferInterval = bufferInterval;
            return this;
        }

        public Builder setBufferInterval(@Nullable Integer bufferInterval) {
            this.bufferInterval = Input.ofNullable(bufferInterval);
            return this;
        }

        public Builder setBufferSize(@Nullable Input<Integer> bufferSize) {
            this.bufferSize = bufferSize;
            return this;
        }

        public Builder setBufferSize(@Nullable Integer bufferSize) {
            this.bufferSize = Input.ofNullable(bufferSize);
            return this;
        }

        public Builder setCloudwatchLoggingOptions(@Nullable Input<FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }

        public Builder setCloudwatchLoggingOptions(@Nullable FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsGetArgs cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = Input.ofNullable(cloudwatchLoggingOptions);
            return this;
        }

        public Builder setCompressionFormat(@Nullable Input<String> compressionFormat) {
            this.compressionFormat = compressionFormat;
            return this;
        }

        public Builder setCompressionFormat(@Nullable String compressionFormat) {
            this.compressionFormat = Input.ofNullable(compressionFormat);
            return this;
        }

        public Builder setErrorOutputPrefix(@Nullable Input<String> errorOutputPrefix) {
            this.errorOutputPrefix = errorOutputPrefix;
            return this;
        }

        public Builder setErrorOutputPrefix(@Nullable String errorOutputPrefix) {
            this.errorOutputPrefix = Input.ofNullable(errorOutputPrefix);
            return this;
        }

        public Builder setKmsKeyArn(@Nullable Input<String> kmsKeyArn) {
            this.kmsKeyArn = kmsKeyArn;
            return this;
        }

        public Builder setKmsKeyArn(@Nullable String kmsKeyArn) {
            this.kmsKeyArn = Input.ofNullable(kmsKeyArn);
            return this;
        }

        public Builder setPrefix(@Nullable Input<String> prefix) {
            this.prefix = prefix;
            return this;
        }

        public Builder setPrefix(@Nullable String prefix) {
            this.prefix = Input.ofNullable(prefix);
            return this;
        }

        public Builder setRoleArn(Input<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }

        public Builder setRoleArn(String roleArn) {
            this.roleArn = Input.of(Objects.requireNonNull(roleArn));
            return this;
        }
        public FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs build() {
            return new FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationGetArgs(bucketArn, bufferInterval, bufferSize, cloudwatchLoggingOptions, compressionFormat, errorOutputPrefix, kmsKeyArn, prefix, roleArn);
        }
    }
}
