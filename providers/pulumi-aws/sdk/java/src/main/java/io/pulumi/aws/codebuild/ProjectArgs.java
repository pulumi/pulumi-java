// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codebuild;

import io.pulumi.aws.codebuild.inputs.ProjectArtifactsArgs;
import io.pulumi.aws.codebuild.inputs.ProjectBuildBatchConfigArgs;
import io.pulumi.aws.codebuild.inputs.ProjectCacheArgs;
import io.pulumi.aws.codebuild.inputs.ProjectEnvironmentArgs;
import io.pulumi.aws.codebuild.inputs.ProjectFileSystemLocationArgs;
import io.pulumi.aws.codebuild.inputs.ProjectLogsConfigArgs;
import io.pulumi.aws.codebuild.inputs.ProjectSecondaryArtifactArgs;
import io.pulumi.aws.codebuild.inputs.ProjectSecondarySourceArgs;
import io.pulumi.aws.codebuild.inputs.ProjectSecondarySourceVersionArgs;
import io.pulumi.aws.codebuild.inputs.ProjectSourceArgs;
import io.pulumi.aws.codebuild.inputs.ProjectVpcConfigArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProjectArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * Configuration block. Detailed below.
     * 
     */
    @InputImport(name="artifacts", required=true)
      private final Output<ProjectArtifactsArgs> artifacts;

    public Output<ProjectArtifactsArgs> getArtifacts() {
        return this.artifacts;
    }

    /**
     * Generates a publicly-accessible URL for the projects build badge. Available as `badge_url` attribute when enabled.
     * 
     */
    @InputImport(name="badgeEnabled")
      private final @Nullable Output<Boolean> badgeEnabled;

    public Output<Boolean> getBadgeEnabled() {
        return this.badgeEnabled == null ? Output.empty() : this.badgeEnabled;
    }

    /**
     * Defines the batch build options for the project.
     * 
     */
    @InputImport(name="buildBatchConfig")
      private final @Nullable Output<ProjectBuildBatchConfigArgs> buildBatchConfig;

    public Output<ProjectBuildBatchConfigArgs> getBuildBatchConfig() {
        return this.buildBatchConfig == null ? Output.empty() : this.buildBatchConfig;
    }

    /**
     * Number of minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
     * 
     */
    @InputImport(name="buildTimeout")
      private final @Nullable Output<Integer> buildTimeout;

    public Output<Integer> getBuildTimeout() {
        return this.buildTimeout == null ? Output.empty() : this.buildTimeout;
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @InputImport(name="cache")
      private final @Nullable Output<ProjectCacheArgs> cache;

    public Output<ProjectCacheArgs> getCache() {
        return this.cache == null ? Output.empty() : this.cache;
    }

    /**
     * Specify a maximum number of concurrent builds for the project. The value specified must be greater than 0 and less than the account concurrent running builds limit.
     * 
     */
    @InputImport(name="concurrentBuildLimit")
      private final @Nullable Output<Integer> concurrentBuildLimit;

    public Output<Integer> getConcurrentBuildLimit() {
        return this.concurrentBuildLimit == null ? Output.empty() : this.concurrentBuildLimit;
    }

    /**
     * Short description of the project.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
     * 
     */
    @InputImport(name="encryptionKey")
      private final @Nullable Output<String> encryptionKey;

    public Output<String> getEncryptionKey() {
        return this.encryptionKey == null ? Output.empty() : this.encryptionKey;
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @InputImport(name="environment", required=true)
      private final Output<ProjectEnvironmentArgs> environment;

    public Output<ProjectEnvironmentArgs> getEnvironment() {
        return this.environment;
    }

    /**
     * A set of file system locations to to mount inside the build. File system locations are documented below.
     * 
     */
    @InputImport(name="fileSystemLocations")
      private final @Nullable Output<List<ProjectFileSystemLocationArgs>> fileSystemLocations;

    public Output<List<ProjectFileSystemLocationArgs>> getFileSystemLocations() {
        return this.fileSystemLocations == null ? Output.empty() : this.fileSystemLocations;
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @InputImport(name="logsConfig")
      private final @Nullable Output<ProjectLogsConfigArgs> logsConfig;

    public Output<ProjectLogsConfigArgs> getLogsConfig() {
        return this.logsConfig == null ? Output.empty() : this.logsConfig;
    }

    /**
     * Name of the project. If `type` is set to `S3`, this is the name of the output artifact object
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Specifies the visibility of the project's builds. Possible values are: `PUBLIC_READ` and `PRIVATE`. Default value is `PRIVATE`.
     * 
     */
    @InputImport(name="projectVisibility")
      private final @Nullable Output<String> projectVisibility;

    public Output<String> getProjectVisibility() {
        return this.projectVisibility == null ? Output.empty() : this.projectVisibility;
    }

    /**
     * Number of minutes, from 5 to 480 (8 hours), a build is allowed to be queued before it times out. The default is 8 hours.
     * 
     */
    @InputImport(name="queuedTimeout")
      private final @Nullable Output<Integer> queuedTimeout;

    public Output<Integer> getQueuedTimeout() {
        return this.queuedTimeout == null ? Output.empty() : this.queuedTimeout;
    }

    /**
     * The ARN of the IAM role that enables CodeBuild to access the CloudWatch Logs and Amazon S3 artifacts for the project's builds.
     * 
     */
    @InputImport(name="resourceAccessRole")
      private final @Nullable Output<String> resourceAccessRole;

    public Output<String> getResourceAccessRole() {
        return this.resourceAccessRole == null ? Output.empty() : this.resourceAccessRole;
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @InputImport(name="secondaryArtifacts")
      private final @Nullable Output<List<ProjectSecondaryArtifactArgs>> secondaryArtifacts;

    public Output<List<ProjectSecondaryArtifactArgs>> getSecondaryArtifacts() {
        return this.secondaryArtifacts == null ? Output.empty() : this.secondaryArtifacts;
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @InputImport(name="secondarySourceVersions")
      private final @Nullable Output<List<ProjectSecondarySourceVersionArgs>> secondarySourceVersions;

    public Output<List<ProjectSecondarySourceVersionArgs>> getSecondarySourceVersions() {
        return this.secondarySourceVersions == null ? Output.empty() : this.secondarySourceVersions;
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @InputImport(name="secondarySources")
      private final @Nullable Output<List<ProjectSecondarySourceArgs>> secondarySources;

    public Output<List<ProjectSecondarySourceArgs>> getSecondarySources() {
        return this.secondarySources == null ? Output.empty() : this.secondarySources;
    }

    /**
     * Specifies the service role ARN for the batch build project.
     * 
     */
    @InputImport(name="serviceRole", required=true)
      private final Output<String> serviceRole;

    public Output<String> getServiceRole() {
        return this.serviceRole;
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @InputImport(name="source", required=true)
      private final Output<ProjectSourceArgs> source;

    public Output<ProjectSourceArgs> getSource() {
        return this.source;
    }

    /**
     * The source version for the corresponding source identifier. See [AWS docs](https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ProjectSourceVersion.html#CodeBuild-Type-ProjectSourceVersion-sourceVersion) for more details.
     * 
     */
    @InputImport(name="sourceVersion")
      private final @Nullable Output<String> sourceVersion;

    public Output<String> getSourceVersion() {
        return this.sourceVersion == null ? Output.empty() : this.sourceVersion;
    }

    /**
     * Map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @InputImport(name="vpcConfig")
      private final @Nullable Output<ProjectVpcConfigArgs> vpcConfig;

    public Output<ProjectVpcConfigArgs> getVpcConfig() {
        return this.vpcConfig == null ? Output.empty() : this.vpcConfig;
    }

    public ProjectArgs(
        Output<ProjectArtifactsArgs> artifacts,
        @Nullable Output<Boolean> badgeEnabled,
        @Nullable Output<ProjectBuildBatchConfigArgs> buildBatchConfig,
        @Nullable Output<Integer> buildTimeout,
        @Nullable Output<ProjectCacheArgs> cache,
        @Nullable Output<Integer> concurrentBuildLimit,
        @Nullable Output<String> description,
        @Nullable Output<String> encryptionKey,
        Output<ProjectEnvironmentArgs> environment,
        @Nullable Output<List<ProjectFileSystemLocationArgs>> fileSystemLocations,
        @Nullable Output<ProjectLogsConfigArgs> logsConfig,
        @Nullable Output<String> name,
        @Nullable Output<String> projectVisibility,
        @Nullable Output<Integer> queuedTimeout,
        @Nullable Output<String> resourceAccessRole,
        @Nullable Output<List<ProjectSecondaryArtifactArgs>> secondaryArtifacts,
        @Nullable Output<List<ProjectSecondarySourceVersionArgs>> secondarySourceVersions,
        @Nullable Output<List<ProjectSecondarySourceArgs>> secondarySources,
        Output<String> serviceRole,
        Output<ProjectSourceArgs> source,
        @Nullable Output<String> sourceVersion,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<ProjectVpcConfigArgs> vpcConfig) {
        this.artifacts = Objects.requireNonNull(artifacts, "expected parameter 'artifacts' to be non-null");
        this.badgeEnabled = badgeEnabled;
        this.buildBatchConfig = buildBatchConfig;
        this.buildTimeout = buildTimeout;
        this.cache = cache;
        this.concurrentBuildLimit = concurrentBuildLimit;
        this.description = description;
        this.encryptionKey = encryptionKey;
        this.environment = Objects.requireNonNull(environment, "expected parameter 'environment' to be non-null");
        this.fileSystemLocations = fileSystemLocations;
        this.logsConfig = logsConfig;
        this.name = name;
        this.projectVisibility = projectVisibility;
        this.queuedTimeout = queuedTimeout;
        this.resourceAccessRole = resourceAccessRole;
        this.secondaryArtifacts = secondaryArtifacts;
        this.secondarySourceVersions = secondarySourceVersions;
        this.secondarySources = secondarySources;
        this.serviceRole = Objects.requireNonNull(serviceRole, "expected parameter 'serviceRole' to be non-null");
        this.source = Objects.requireNonNull(source, "expected parameter 'source' to be non-null");
        this.sourceVersion = sourceVersion;
        this.tags = tags;
        this.vpcConfig = vpcConfig;
    }

    private ProjectArgs() {
        this.artifacts = Output.empty();
        this.badgeEnabled = Output.empty();
        this.buildBatchConfig = Output.empty();
        this.buildTimeout = Output.empty();
        this.cache = Output.empty();
        this.concurrentBuildLimit = Output.empty();
        this.description = Output.empty();
        this.encryptionKey = Output.empty();
        this.environment = Output.empty();
        this.fileSystemLocations = Output.empty();
        this.logsConfig = Output.empty();
        this.name = Output.empty();
        this.projectVisibility = Output.empty();
        this.queuedTimeout = Output.empty();
        this.resourceAccessRole = Output.empty();
        this.secondaryArtifacts = Output.empty();
        this.secondarySourceVersions = Output.empty();
        this.secondarySources = Output.empty();
        this.serviceRole = Output.empty();
        this.source = Output.empty();
        this.sourceVersion = Output.empty();
        this.tags = Output.empty();
        this.vpcConfig = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ProjectArtifactsArgs> artifacts;
        private @Nullable Output<Boolean> badgeEnabled;
        private @Nullable Output<ProjectBuildBatchConfigArgs> buildBatchConfig;
        private @Nullable Output<Integer> buildTimeout;
        private @Nullable Output<ProjectCacheArgs> cache;
        private @Nullable Output<Integer> concurrentBuildLimit;
        private @Nullable Output<String> description;
        private @Nullable Output<String> encryptionKey;
        private Output<ProjectEnvironmentArgs> environment;
        private @Nullable Output<List<ProjectFileSystemLocationArgs>> fileSystemLocations;
        private @Nullable Output<ProjectLogsConfigArgs> logsConfig;
        private @Nullable Output<String> name;
        private @Nullable Output<String> projectVisibility;
        private @Nullable Output<Integer> queuedTimeout;
        private @Nullable Output<String> resourceAccessRole;
        private @Nullable Output<List<ProjectSecondaryArtifactArgs>> secondaryArtifacts;
        private @Nullable Output<List<ProjectSecondarySourceVersionArgs>> secondarySourceVersions;
        private @Nullable Output<List<ProjectSecondarySourceArgs>> secondarySources;
        private Output<String> serviceRole;
        private Output<ProjectSourceArgs> source;
        private @Nullable Output<String> sourceVersion;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<ProjectVpcConfigArgs> vpcConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(ProjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifacts = defaults.artifacts;
    	      this.badgeEnabled = defaults.badgeEnabled;
    	      this.buildBatchConfig = defaults.buildBatchConfig;
    	      this.buildTimeout = defaults.buildTimeout;
    	      this.cache = defaults.cache;
    	      this.concurrentBuildLimit = defaults.concurrentBuildLimit;
    	      this.description = defaults.description;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.environment = defaults.environment;
    	      this.fileSystemLocations = defaults.fileSystemLocations;
    	      this.logsConfig = defaults.logsConfig;
    	      this.name = defaults.name;
    	      this.projectVisibility = defaults.projectVisibility;
    	      this.queuedTimeout = defaults.queuedTimeout;
    	      this.resourceAccessRole = defaults.resourceAccessRole;
    	      this.secondaryArtifacts = defaults.secondaryArtifacts;
    	      this.secondarySourceVersions = defaults.secondarySourceVersions;
    	      this.secondarySources = defaults.secondarySources;
    	      this.serviceRole = defaults.serviceRole;
    	      this.source = defaults.source;
    	      this.sourceVersion = defaults.sourceVersion;
    	      this.tags = defaults.tags;
    	      this.vpcConfig = defaults.vpcConfig;
        }

        public Builder artifacts(Output<ProjectArtifactsArgs> artifacts) {
            this.artifacts = Objects.requireNonNull(artifacts);
            return this;
        }

        public Builder artifacts(ProjectArtifactsArgs artifacts) {
            this.artifacts = Output.of(Objects.requireNonNull(artifacts));
            return this;
        }

        public Builder badgeEnabled(@Nullable Output<Boolean> badgeEnabled) {
            this.badgeEnabled = badgeEnabled;
            return this;
        }

        public Builder badgeEnabled(@Nullable Boolean badgeEnabled) {
            this.badgeEnabled = Output.ofNullable(badgeEnabled);
            return this;
        }

        public Builder buildBatchConfig(@Nullable Output<ProjectBuildBatchConfigArgs> buildBatchConfig) {
            this.buildBatchConfig = buildBatchConfig;
            return this;
        }

        public Builder buildBatchConfig(@Nullable ProjectBuildBatchConfigArgs buildBatchConfig) {
            this.buildBatchConfig = Output.ofNullable(buildBatchConfig);
            return this;
        }

        public Builder buildTimeout(@Nullable Output<Integer> buildTimeout) {
            this.buildTimeout = buildTimeout;
            return this;
        }

        public Builder buildTimeout(@Nullable Integer buildTimeout) {
            this.buildTimeout = Output.ofNullable(buildTimeout);
            return this;
        }

        public Builder cache(@Nullable Output<ProjectCacheArgs> cache) {
            this.cache = cache;
            return this;
        }

        public Builder cache(@Nullable ProjectCacheArgs cache) {
            this.cache = Output.ofNullable(cache);
            return this;
        }

        public Builder concurrentBuildLimit(@Nullable Output<Integer> concurrentBuildLimit) {
            this.concurrentBuildLimit = concurrentBuildLimit;
            return this;
        }

        public Builder concurrentBuildLimit(@Nullable Integer concurrentBuildLimit) {
            this.concurrentBuildLimit = Output.ofNullable(concurrentBuildLimit);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder encryptionKey(@Nullable Output<String> encryptionKey) {
            this.encryptionKey = encryptionKey;
            return this;
        }

        public Builder encryptionKey(@Nullable String encryptionKey) {
            this.encryptionKey = Output.ofNullable(encryptionKey);
            return this;
        }

        public Builder environment(Output<ProjectEnvironmentArgs> environment) {
            this.environment = Objects.requireNonNull(environment);
            return this;
        }

        public Builder environment(ProjectEnvironmentArgs environment) {
            this.environment = Output.of(Objects.requireNonNull(environment));
            return this;
        }

        public Builder fileSystemLocations(@Nullable Output<List<ProjectFileSystemLocationArgs>> fileSystemLocations) {
            this.fileSystemLocations = fileSystemLocations;
            return this;
        }

        public Builder fileSystemLocations(@Nullable List<ProjectFileSystemLocationArgs> fileSystemLocations) {
            this.fileSystemLocations = Output.ofNullable(fileSystemLocations);
            return this;
        }

        public Builder logsConfig(@Nullable Output<ProjectLogsConfigArgs> logsConfig) {
            this.logsConfig = logsConfig;
            return this;
        }

        public Builder logsConfig(@Nullable ProjectLogsConfigArgs logsConfig) {
            this.logsConfig = Output.ofNullable(logsConfig);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder projectVisibility(@Nullable Output<String> projectVisibility) {
            this.projectVisibility = projectVisibility;
            return this;
        }

        public Builder projectVisibility(@Nullable String projectVisibility) {
            this.projectVisibility = Output.ofNullable(projectVisibility);
            return this;
        }

        public Builder queuedTimeout(@Nullable Output<Integer> queuedTimeout) {
            this.queuedTimeout = queuedTimeout;
            return this;
        }

        public Builder queuedTimeout(@Nullable Integer queuedTimeout) {
            this.queuedTimeout = Output.ofNullable(queuedTimeout);
            return this;
        }

        public Builder resourceAccessRole(@Nullable Output<String> resourceAccessRole) {
            this.resourceAccessRole = resourceAccessRole;
            return this;
        }

        public Builder resourceAccessRole(@Nullable String resourceAccessRole) {
            this.resourceAccessRole = Output.ofNullable(resourceAccessRole);
            return this;
        }

        public Builder secondaryArtifacts(@Nullable Output<List<ProjectSecondaryArtifactArgs>> secondaryArtifacts) {
            this.secondaryArtifacts = secondaryArtifacts;
            return this;
        }

        public Builder secondaryArtifacts(@Nullable List<ProjectSecondaryArtifactArgs> secondaryArtifacts) {
            this.secondaryArtifacts = Output.ofNullable(secondaryArtifacts);
            return this;
        }

        public Builder secondarySourceVersions(@Nullable Output<List<ProjectSecondarySourceVersionArgs>> secondarySourceVersions) {
            this.secondarySourceVersions = secondarySourceVersions;
            return this;
        }

        public Builder secondarySourceVersions(@Nullable List<ProjectSecondarySourceVersionArgs> secondarySourceVersions) {
            this.secondarySourceVersions = Output.ofNullable(secondarySourceVersions);
            return this;
        }

        public Builder secondarySources(@Nullable Output<List<ProjectSecondarySourceArgs>> secondarySources) {
            this.secondarySources = secondarySources;
            return this;
        }

        public Builder secondarySources(@Nullable List<ProjectSecondarySourceArgs> secondarySources) {
            this.secondarySources = Output.ofNullable(secondarySources);
            return this;
        }

        public Builder serviceRole(Output<String> serviceRole) {
            this.serviceRole = Objects.requireNonNull(serviceRole);
            return this;
        }

        public Builder serviceRole(String serviceRole) {
            this.serviceRole = Output.of(Objects.requireNonNull(serviceRole));
            return this;
        }

        public Builder source(Output<ProjectSourceArgs> source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }

        public Builder source(ProjectSourceArgs source) {
            this.source = Output.of(Objects.requireNonNull(source));
            return this;
        }

        public Builder sourceVersion(@Nullable Output<String> sourceVersion) {
            this.sourceVersion = sourceVersion;
            return this;
        }

        public Builder sourceVersion(@Nullable String sourceVersion) {
            this.sourceVersion = Output.ofNullable(sourceVersion);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder vpcConfig(@Nullable Output<ProjectVpcConfigArgs> vpcConfig) {
            this.vpcConfig = vpcConfig;
            return this;
        }

        public Builder vpcConfig(@Nullable ProjectVpcConfigArgs vpcConfig) {
            this.vpcConfig = Output.ofNullable(vpcConfig);
            return this;
        }
        public ProjectArgs build() {
            return new ProjectArgs(artifacts, badgeEnabled, buildBatchConfig, buildTimeout, cache, concurrentBuildLimit, description, encryptionKey, environment, fileSystemLocations, logsConfig, name, projectVisibility, queuedTimeout, resourceAccessRole, secondaryArtifacts, secondarySourceVersions, secondarySources, serviceRole, source, sourceVersion, tags, vpcConfig);
        }
    }
}
