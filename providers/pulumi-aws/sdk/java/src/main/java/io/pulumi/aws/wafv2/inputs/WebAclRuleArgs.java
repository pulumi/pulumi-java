// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.wafv2.inputs;

import io.pulumi.aws.wafv2.inputs.WebAclRuleActionArgs;
import io.pulumi.aws.wafv2.inputs.WebAclRuleOverrideActionArgs;
import io.pulumi.aws.wafv2.inputs.WebAclRuleRuleLabelArgs;
import io.pulumi.aws.wafv2.inputs.WebAclRuleStatementArgs;
import io.pulumi.aws.wafv2.inputs.WebAclRuleVisibilityConfigArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WebAclRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final WebAclRuleArgs Empty = new WebAclRuleArgs();

    /**
     * The action that AWS WAF should take on a web request when it matches the rule's statement. This is used only for rules whose **statements do not reference a rule group**. See Action below for details.
     * 
     */
    @InputImport(name="action")
    private final @Nullable Input<WebAclRuleActionArgs> action;

    public Input<WebAclRuleActionArgs> getAction() {
        return this.action == null ? Input.empty() : this.action;
    }

    /**
     * A friendly name of the rule.
     * 
     */
    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * The override action to apply to the rules in a rule group. Used only for rule **statements that reference a rule group**, like `rule_group_reference_statement` and `managed_rule_group_statement`. See Override Action below for details.
     * 
     */
    @InputImport(name="overrideAction")
    private final @Nullable Input<WebAclRuleOverrideActionArgs> overrideAction;

    public Input<WebAclRuleOverrideActionArgs> getOverrideAction() {
        return this.overrideAction == null ? Input.empty() : this.overrideAction;
    }

    /**
     * If you define more than one Rule in a WebACL, AWS WAF evaluates each request against the `rules` in order based on the value of `priority`. AWS WAF processes rules with lower priority first.
     * 
     */
    @InputImport(name="priority", required=true)
    private final Input<Integer> priority;

    public Input<Integer> getPriority() {
        return this.priority;
    }

    /**
     * Labels to apply to web requests that match the rule match statement. See Rule Label below for details.
     * 
     */
    @InputImport(name="ruleLabels")
    private final @Nullable Input<List<WebAclRuleRuleLabelArgs>> ruleLabels;

    public Input<List<WebAclRuleRuleLabelArgs>> getRuleLabels() {
        return this.ruleLabels == null ? Input.empty() : this.ruleLabels;
    }

    /**
     * The AWS WAF processing statement for the rule, for example `byte_match_statement` or `geo_match_statement`. See Statement below for details.
     * 
     */
    @InputImport(name="statement", required=true)
    private final Input<WebAclRuleStatementArgs> statement;

    public Input<WebAclRuleStatementArgs> getStatement() {
        return this.statement;
    }

    /**
     * Defines and enables Amazon CloudWatch metrics and web request sample collection. See Visibility Configuration below for details.
     * 
     */
    @InputImport(name="visibilityConfig", required=true)
    private final Input<WebAclRuleVisibilityConfigArgs> visibilityConfig;

    public Input<WebAclRuleVisibilityConfigArgs> getVisibilityConfig() {
        return this.visibilityConfig;
    }

    public WebAclRuleArgs(
        @Nullable Input<WebAclRuleActionArgs> action,
        Input<String> name,
        @Nullable Input<WebAclRuleOverrideActionArgs> overrideAction,
        Input<Integer> priority,
        @Nullable Input<List<WebAclRuleRuleLabelArgs>> ruleLabels,
        Input<WebAclRuleStatementArgs> statement,
        Input<WebAclRuleVisibilityConfigArgs> visibilityConfig) {
        this.action = action;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.overrideAction = overrideAction;
        this.priority = Objects.requireNonNull(priority, "expected parameter 'priority' to be non-null");
        this.ruleLabels = ruleLabels;
        this.statement = Objects.requireNonNull(statement, "expected parameter 'statement' to be non-null");
        this.visibilityConfig = Objects.requireNonNull(visibilityConfig, "expected parameter 'visibilityConfig' to be non-null");
    }

    private WebAclRuleArgs() {
        this.action = Input.empty();
        this.name = Input.empty();
        this.overrideAction = Input.empty();
        this.priority = Input.empty();
        this.ruleLabels = Input.empty();
        this.statement = Input.empty();
        this.visibilityConfig = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAclRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<WebAclRuleActionArgs> action;
        private Input<String> name;
        private @Nullable Input<WebAclRuleOverrideActionArgs> overrideAction;
        private Input<Integer> priority;
        private @Nullable Input<List<WebAclRuleRuleLabelArgs>> ruleLabels;
        private Input<WebAclRuleStatementArgs> statement;
        private Input<WebAclRuleVisibilityConfigArgs> visibilityConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(WebAclRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.name = defaults.name;
    	      this.overrideAction = defaults.overrideAction;
    	      this.priority = defaults.priority;
    	      this.ruleLabels = defaults.ruleLabels;
    	      this.statement = defaults.statement;
    	      this.visibilityConfig = defaults.visibilityConfig;
        }

        public Builder setAction(@Nullable Input<WebAclRuleActionArgs> action) {
            this.action = action;
            return this;
        }

        public Builder setAction(@Nullable WebAclRuleActionArgs action) {
            this.action = Input.ofNullable(action);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setOverrideAction(@Nullable Input<WebAclRuleOverrideActionArgs> overrideAction) {
            this.overrideAction = overrideAction;
            return this;
        }

        public Builder setOverrideAction(@Nullable WebAclRuleOverrideActionArgs overrideAction) {
            this.overrideAction = Input.ofNullable(overrideAction);
            return this;
        }

        public Builder setPriority(Input<Integer> priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }

        public Builder setPriority(Integer priority) {
            this.priority = Input.of(Objects.requireNonNull(priority));
            return this;
        }

        public Builder setRuleLabels(@Nullable Input<List<WebAclRuleRuleLabelArgs>> ruleLabels) {
            this.ruleLabels = ruleLabels;
            return this;
        }

        public Builder setRuleLabels(@Nullable List<WebAclRuleRuleLabelArgs> ruleLabels) {
            this.ruleLabels = Input.ofNullable(ruleLabels);
            return this;
        }

        public Builder setStatement(Input<WebAclRuleStatementArgs> statement) {
            this.statement = Objects.requireNonNull(statement);
            return this;
        }

        public Builder setStatement(WebAclRuleStatementArgs statement) {
            this.statement = Input.of(Objects.requireNonNull(statement));
            return this;
        }

        public Builder setVisibilityConfig(Input<WebAclRuleVisibilityConfigArgs> visibilityConfig) {
            this.visibilityConfig = Objects.requireNonNull(visibilityConfig);
            return this;
        }

        public Builder setVisibilityConfig(WebAclRuleVisibilityConfigArgs visibilityConfig) {
            this.visibilityConfig = Input.of(Objects.requireNonNull(visibilityConfig));
            return this;
        }
        public WebAclRuleArgs build() {
            return new WebAclRuleArgs(action, name, overrideAction, priority, ruleLabels, statement, visibilityConfig);
        }
    }
}
