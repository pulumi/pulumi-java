// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appautoscaling;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.appautoscaling.PolicyArgs;
import io.pulumi.aws.appautoscaling.inputs.PolicyState;
import io.pulumi.aws.appautoscaling.outputs.PolicyStepScalingPolicyConfiguration;
import io.pulumi.aws.appautoscaling.outputs.PolicyTargetTrackingScalingPolicyConfiguration;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides an Application AutoScaling Policy resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### DynamoDB Table Autoscaling
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const dynamodbTableReadTarget = new aws.appautoscaling.Target("dynamodbTableReadTarget", {
 *     maxCapacity: 100,
 *     minCapacity: 5,
 *     resourceId: "table/tableName",
 *     scalableDimension: "dynamodb:table:ReadCapacityUnits",
 *     serviceNamespace: "dynamodb",
 * });
 * const dynamodbTableReadPolicy = new aws.appautoscaling.Policy("dynamodbTableReadPolicy", {
 *     policyType: "TargetTrackingScaling",
 *     resourceId: dynamodbTableReadTarget.resourceId,
 *     scalableDimension: dynamodbTableReadTarget.scalableDimension,
 *     serviceNamespace: dynamodbTableReadTarget.serviceNamespace,
 *     targetTrackingScalingPolicyConfiguration: {
 *         predefinedMetricSpecification: {
 *             predefinedMetricType: "DynamoDBReadCapacityUtilization",
 *         },
 *         targetValue: 70,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * dynamodb_table_read_target = aws.appautoscaling.Target("dynamodbTableReadTarget",
 *     max_capacity=100,
 *     min_capacity=5,
 *     resource_id="table/tableName",
 *     scalable_dimension="dynamodb:table:ReadCapacityUnits",
 *     service_namespace="dynamodb")
 * dynamodb_table_read_policy = aws.appautoscaling.Policy("dynamodbTableReadPolicy",
 *     policy_type="TargetTrackingScaling",
 *     resource_id=dynamodb_table_read_target.resource_id,
 *     scalable_dimension=dynamodb_table_read_target.scalable_dimension,
 *     service_namespace=dynamodb_table_read_target.service_namespace,
 *     target_tracking_scaling_policy_configuration=aws.appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationArgs(
 *         predefined_metric_specification=aws.appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs(
 *             predefined_metric_type="DynamoDBReadCapacityUtilization",
 *         ),
 *         target_value=70,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var dynamodbTableReadTarget = new Aws.AppAutoScaling.Target("dynamodbTableReadTarget", new Aws.AppAutoScaling.TargetArgs
 *         {
 *             MaxCapacity = 100,
 *             MinCapacity = 5,
 *             ResourceId = "table/tableName",
 *             ScalableDimension = "dynamodb:table:ReadCapacityUnits",
 *             ServiceNamespace = "dynamodb",
 *         });
 *         var dynamodbTableReadPolicy = new Aws.AppAutoScaling.Policy("dynamodbTableReadPolicy", new Aws.AppAutoScaling.PolicyArgs
 *         {
 *             PolicyType = "TargetTrackingScaling",
 *             ResourceId = dynamodbTableReadTarget.ResourceId,
 *             ScalableDimension = dynamodbTableReadTarget.ScalableDimension,
 *             ServiceNamespace = dynamodbTableReadTarget.ServiceNamespace,
 *             TargetTrackingScalingPolicyConfiguration = new Aws.AppAutoScaling.Inputs.PolicyTargetTrackingScalingPolicyConfigurationArgs
 *             {
 *                 PredefinedMetricSpecification = new Aws.AppAutoScaling.Inputs.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs
 *                 {
 *                     PredefinedMetricType = "DynamoDBReadCapacityUtilization",
 *                 },
 *                 TargetValue = 70,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appautoscaling"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		dynamodbTableReadTarget, err := appautoscaling.NewTarget(ctx, "dynamodbTableReadTarget", &appautoscaling.TargetArgs{
 * 			MaxCapacity:       pulumi.Int(100),
 * 			MinCapacity:       pulumi.Int(5),
 * 			ResourceId:        pulumi.String("table/tableName"),
 * 			ScalableDimension: pulumi.String("dynamodb:table:ReadCapacityUnits"),
 * 			ServiceNamespace:  pulumi.String("dynamodb"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = appautoscaling.NewPolicy(ctx, "dynamodbTableReadPolicy", &appautoscaling.PolicyArgs{
 * 			PolicyType:        pulumi.String("TargetTrackingScaling"),
 * 			ResourceId:        dynamodbTableReadTarget.ResourceId,
 * 			ScalableDimension: dynamodbTableReadTarget.ScalableDimension,
 * 			ServiceNamespace:  dynamodbTableReadTarget.ServiceNamespace,
 * 			TargetTrackingScalingPolicyConfiguration: &appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationArgs{
 * 				PredefinedMetricSpecification: &appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs{
 * 					PredefinedMetricType: pulumi.String("DynamoDBReadCapacityUtilization"),
 * 				},
 * 				TargetValue: pulumi.Float64(70),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### ECS Service Autoscaling
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const ecsTarget = new aws.appautoscaling.Target("ecsTarget", {
 *     maxCapacity: 4,
 *     minCapacity: 1,
 *     resourceId: "service/clusterName/serviceName",
 *     scalableDimension: "ecs:service:DesiredCount",
 *     serviceNamespace: "ecs",
 * });
 * const ecsPolicy = new aws.appautoscaling.Policy("ecsPolicy", {
 *     policyType: "StepScaling",
 *     resourceId: ecsTarget.resourceId,
 *     scalableDimension: ecsTarget.scalableDimension,
 *     serviceNamespace: ecsTarget.serviceNamespace,
 *     stepScalingPolicyConfiguration: {
 *         adjustmentType: "ChangeInCapacity",
 *         cooldown: 60,
 *         metricAggregationType: "Maximum",
 *         stepAdjustments: [{
 *             metricIntervalUpperBound: 0,
 *             scalingAdjustment: -1,
 *         }],
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * ecs_target = aws.appautoscaling.Target("ecsTarget",
 *     max_capacity=4,
 *     min_capacity=1,
 *     resource_id="service/clusterName/serviceName",
 *     scalable_dimension="ecs:service:DesiredCount",
 *     service_namespace="ecs")
 * ecs_policy = aws.appautoscaling.Policy("ecsPolicy",
 *     policy_type="StepScaling",
 *     resource_id=ecs_target.resource_id,
 *     scalable_dimension=ecs_target.scalable_dimension,
 *     service_namespace=ecs_target.service_namespace,
 *     step_scaling_policy_configuration=aws.appautoscaling.PolicyStepScalingPolicyConfigurationArgs(
 *         adjustment_type="ChangeInCapacity",
 *         cooldown=60,
 *         metric_aggregation_type="Maximum",
 *         step_adjustments=[aws.appautoscaling.PolicyStepScalingPolicyConfigurationStepAdjustmentArgs(
 *             metric_interval_upper_bound="0",
 *             scaling_adjustment=-1,
 *         )],
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var ecsTarget = new Aws.AppAutoScaling.Target("ecsTarget", new Aws.AppAutoScaling.TargetArgs
 *         {
 *             MaxCapacity = 4,
 *             MinCapacity = 1,
 *             ResourceId = "service/clusterName/serviceName",
 *             ScalableDimension = "ecs:service:DesiredCount",
 *             ServiceNamespace = "ecs",
 *         });
 *         var ecsPolicy = new Aws.AppAutoScaling.Policy("ecsPolicy", new Aws.AppAutoScaling.PolicyArgs
 *         {
 *             PolicyType = "StepScaling",
 *             ResourceId = ecsTarget.ResourceId,
 *             ScalableDimension = ecsTarget.ScalableDimension,
 *             ServiceNamespace = ecsTarget.ServiceNamespace,
 *             StepScalingPolicyConfiguration = new Aws.AppAutoScaling.Inputs.PolicyStepScalingPolicyConfigurationArgs
 *             {
 *                 AdjustmentType = "ChangeInCapacity",
 *                 Cooldown = 60,
 *                 MetricAggregationType = "Maximum",
 *                 StepAdjustments = 
 *                 {
 *                     new Aws.AppAutoScaling.Inputs.PolicyStepScalingPolicyConfigurationStepAdjustmentArgs
 *                     {
 *                         MetricIntervalUpperBound = "0",
 *                         ScalingAdjustment = -1,
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appautoscaling"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		ecsTarget, err := appautoscaling.NewTarget(ctx, "ecsTarget", &appautoscaling.TargetArgs{
 * 			MaxCapacity:       pulumi.Int(4),
 * 			MinCapacity:       pulumi.Int(1),
 * 			ResourceId:        pulumi.String("service/clusterName/serviceName"),
 * 			ScalableDimension: pulumi.String("ecs:service:DesiredCount"),
 * 			ServiceNamespace:  pulumi.String("ecs"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = appautoscaling.NewPolicy(ctx, "ecsPolicy", &appautoscaling.PolicyArgs{
 * 			PolicyType:        pulumi.String("StepScaling"),
 * 			ResourceId:        ecsTarget.ResourceId,
 * 			ScalableDimension: ecsTarget.ScalableDimension,
 * 			ServiceNamespace:  ecsTarget.ServiceNamespace,
 * 			StepScalingPolicyConfiguration: &appautoscaling.PolicyStepScalingPolicyConfigurationArgs{
 * 				AdjustmentType:        pulumi.String("ChangeInCapacity"),
 * 				Cooldown:              pulumi.Int(60),
 * 				MetricAggregationType: pulumi.String("Maximum"),
 * 				StepAdjustments: appautoscaling.PolicyStepScalingPolicyConfigurationStepAdjustmentArray{
 * 					&appautoscaling.PolicyStepScalingPolicyConfigurationStepAdjustmentArgs{
 * 						MetricIntervalUpperBound: pulumi.String("0"),
 * 						ScalingAdjustment:        -1,
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Preserve desired count when updating an autoscaled ECS Service
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const ecsService = new aws.ecs.Service("ecsService", {
 *     cluster: "clusterName",
 *     taskDefinition: "taskDefinitionFamily:1",
 *     desiredCount: 2,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * ecs_service = aws.ecs.Service("ecsService",
 *     cluster="clusterName",
 *     task_definition="taskDefinitionFamily:1",
 *     desired_count=2)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var ecsService = new Aws.Ecs.Service("ecsService", new Aws.Ecs.ServiceArgs
 *         {
 *             Cluster = "clusterName",
 *             TaskDefinition = "taskDefinitionFamily:1",
 *             DesiredCount = 2,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ecs"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ecs.NewService(ctx, "ecsService", &ecs.ServiceArgs{
 * 			Cluster:        pulumi.String("clusterName"),
 * 			TaskDefinition: pulumi.String("taskDefinitionFamily:1"),
 * 			DesiredCount:   pulumi.Int(2),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Aurora Read Replica Autoscaling
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const replicasTarget = new aws.appautoscaling.Target("replicasTarget", {
 *     serviceNamespace: "rds",
 *     scalableDimension: "rds:cluster:ReadReplicaCount",
 *     resourceId: `cluster:${aws_rds_cluster.example.id}`,
 *     minCapacity: 1,
 *     maxCapacity: 15,
 * });
 * const replicasPolicy = new aws.appautoscaling.Policy("replicasPolicy", {
 *     serviceNamespace: replicasTarget.serviceNamespace,
 *     scalableDimension: replicasTarget.scalableDimension,
 *     resourceId: replicasTarget.resourceId,
 *     policyType: "TargetTrackingScaling",
 *     targetTrackingScalingPolicyConfiguration: {
 *         predefinedMetricSpecification: {
 *             predefinedMetricType: "RDSReaderAverageCPUUtilization",
 *         },
 *         targetValue: 75,
 *         scaleInCooldown: 300,
 *         scaleOutCooldown: 300,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * replicas_target = aws.appautoscaling.Target("replicasTarget",
 *     service_namespace="rds",
 *     scalable_dimension="rds:cluster:ReadReplicaCount",
 *     resource_id=f"cluster:{aws_rds_cluster['example']['id']}",
 *     min_capacity=1,
 *     max_capacity=15)
 * replicas_policy = aws.appautoscaling.Policy("replicasPolicy",
 *     service_namespace=replicas_target.service_namespace,
 *     scalable_dimension=replicas_target.scalable_dimension,
 *     resource_id=replicas_target.resource_id,
 *     policy_type="TargetTrackingScaling",
 *     target_tracking_scaling_policy_configuration=aws.appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationArgs(
 *         predefined_metric_specification=aws.appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs(
 *             predefined_metric_type="RDSReaderAverageCPUUtilization",
 *         ),
 *         target_value=75,
 *         scale_in_cooldown=300,
 *         scale_out_cooldown=300,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var replicasTarget = new Aws.AppAutoScaling.Target("replicasTarget", new Aws.AppAutoScaling.TargetArgs
 *         {
 *             ServiceNamespace = "rds",
 *             ScalableDimension = "rds:cluster:ReadReplicaCount",
 *             ResourceId = $"cluster:{aws_rds_cluster.Example.Id}",
 *             MinCapacity = 1,
 *             MaxCapacity = 15,
 *         });
 *         var replicasPolicy = new Aws.AppAutoScaling.Policy("replicasPolicy", new Aws.AppAutoScaling.PolicyArgs
 *         {
 *             ServiceNamespace = replicasTarget.ServiceNamespace,
 *             ScalableDimension = replicasTarget.ScalableDimension,
 *             ResourceId = replicasTarget.ResourceId,
 *             PolicyType = "TargetTrackingScaling",
 *             TargetTrackingScalingPolicyConfiguration = new Aws.AppAutoScaling.Inputs.PolicyTargetTrackingScalingPolicyConfigurationArgs
 *             {
 *                 PredefinedMetricSpecification = new Aws.AppAutoScaling.Inputs.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs
 *                 {
 *                     PredefinedMetricType = "RDSReaderAverageCPUUtilization",
 *                 },
 *                 TargetValue = 75,
 *                 ScaleInCooldown = 300,
 *                 ScaleOutCooldown = 300,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appautoscaling"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		replicasTarget, err := appautoscaling.NewTarget(ctx, "replicasTarget", &appautoscaling.TargetArgs{
 * 			ServiceNamespace:  pulumi.String("rds"),
 * 			ScalableDimension: pulumi.String("rds:cluster:ReadReplicaCount"),
 * 			ResourceId:        pulumi.String(fmt.Sprintf("%v%v", "cluster:", aws_rds_cluster.Example.Id)),
 * 			MinCapacity:       pulumi.Int(1),
 * 			MaxCapacity:       pulumi.Int(15),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = appautoscaling.NewPolicy(ctx, "replicasPolicy", &appautoscaling.PolicyArgs{
 * 			ServiceNamespace:  replicasTarget.ServiceNamespace,
 * 			ScalableDimension: replicasTarget.ScalableDimension,
 * 			ResourceId:        replicasTarget.ResourceId,
 * 			PolicyType:        pulumi.String("TargetTrackingScaling"),
 * 			TargetTrackingScalingPolicyConfiguration: &appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationArgs{
 * 				PredefinedMetricSpecification: &appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs{
 * 					PredefinedMetricType: pulumi.String("RDSReaderAverageCPUUtilization"),
 * 				},
 * 				TargetValue:      pulumi.Float64(75),
 * 				ScaleInCooldown:  pulumi.Int(300),
 * 				ScaleOutCooldown: pulumi.Int(300),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### MSK / Kafka Autoscaling
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const mskTarget = new aws.appautoscaling.Target("mskTarget", {
 *     serviceNamespace: "kafka",
 *     scalableDimension: "kafka:broker-storage:VolumeSize",
 *     resourceId: aws_msk_cluster.example.arn,
 *     minCapacity: 1,
 *     maxCapacity: 8,
 * });
 * const targets = new aws.appautoscaling.Policy("targets", {
 *     serviceNamespace: mskTarget.serviceNamespace,
 *     scalableDimension: mskTarget.scalableDimension,
 *     resourceId: mskTarget.resourceId,
 *     policyType: "TargetTrackingScaling",
 *     targetTrackingScalingPolicyConfiguration: {
 *         predefinedMetricSpecification: {
 *             predefinedMetricType: "KafkaBrokerStorageUtilization",
 *         },
 *         targetValue: 55,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * msk_target = aws.appautoscaling.Target("mskTarget",
 *     service_namespace="kafka",
 *     scalable_dimension="kafka:broker-storage:VolumeSize",
 *     resource_id=aws_msk_cluster["example"]["arn"],
 *     min_capacity=1,
 *     max_capacity=8)
 * targets = aws.appautoscaling.Policy("targets",
 *     service_namespace=msk_target.service_namespace,
 *     scalable_dimension=msk_target.scalable_dimension,
 *     resource_id=msk_target.resource_id,
 *     policy_type="TargetTrackingScaling",
 *     target_tracking_scaling_policy_configuration=aws.appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationArgs(
 *         predefined_metric_specification=aws.appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs(
 *             predefined_metric_type="KafkaBrokerStorageUtilization",
 *         ),
 *         target_value=55,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var mskTarget = new Aws.AppAutoScaling.Target("mskTarget", new Aws.AppAutoScaling.TargetArgs
 *         {
 *             ServiceNamespace = "kafka",
 *             ScalableDimension = "kafka:broker-storage:VolumeSize",
 *             ResourceId = aws_msk_cluster.Example.Arn,
 *             MinCapacity = 1,
 *             MaxCapacity = 8,
 *         });
 *         var targets = new Aws.AppAutoScaling.Policy("targets", new Aws.AppAutoScaling.PolicyArgs
 *         {
 *             ServiceNamespace = mskTarget.ServiceNamespace,
 *             ScalableDimension = mskTarget.ScalableDimension,
 *             ResourceId = mskTarget.ResourceId,
 *             PolicyType = "TargetTrackingScaling",
 *             TargetTrackingScalingPolicyConfiguration = new Aws.AppAutoScaling.Inputs.PolicyTargetTrackingScalingPolicyConfigurationArgs
 *             {
 *                 PredefinedMetricSpecification = new Aws.AppAutoScaling.Inputs.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs
 *                 {
 *                     PredefinedMetricType = "KafkaBrokerStorageUtilization",
 *                 },
 *                 TargetValue = 55,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appautoscaling"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		mskTarget, err := appautoscaling.NewTarget(ctx, "mskTarget", &appautoscaling.TargetArgs{
 * 			ServiceNamespace:  pulumi.String("kafka"),
 * 			ScalableDimension: pulumi.String("kafka:broker-storage:VolumeSize"),
 * 			ResourceId:        pulumi.Any(aws_msk_cluster.Example.Arn),
 * 			MinCapacity:       pulumi.Int(1),
 * 			MaxCapacity:       pulumi.Int(8),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = appautoscaling.NewPolicy(ctx, "targets", &appautoscaling.PolicyArgs{
 * 			ServiceNamespace:  mskTarget.ServiceNamespace,
 * 			ScalableDimension: mskTarget.ScalableDimension,
 * 			ResourceId:        mskTarget.ResourceId,
 * 			PolicyType:        pulumi.String("TargetTrackingScaling"),
 * 			TargetTrackingScalingPolicyConfiguration: &appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationArgs{
 * 				PredefinedMetricSpecification: &appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationArgs{
 * 					PredefinedMetricType: pulumi.String("KafkaBrokerStorageUtilization"),
 * 				},
 * 				TargetValue: pulumi.Float64(55),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * Application AutoScaling Policy can be imported using the `service-namespace` , `resource-id`, `scalable-dimension` and `policy-name` separated by `/`.
 * 
 * ```sh
 *  $ pulumi import aws:appautoscaling/policy:Policy test-policy service-namespace/resource-id/scalable-dimension/policy-name
 * ```
 * 
 *  
 */
@ResourceType(type="aws:appautoscaling/policy:Policy")
public class Policy extends io.pulumi.resources.CustomResource {
    /**
     * The ARN assigned by AWS to the scaling policy.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN assigned by AWS to the scaling policy.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The name of the policy. Must be between 1 and 255 characters in length.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the policy. Must be between 1 and 255 characters in length.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The policy type. Valid values are `StepScaling` and `TargetTrackingScaling`. Defaults to `StepScaling`. Certain services only support only one policy type. For more information see the [Target Tracking Scaling Policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html) and [Step Scaling Policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html) documentation.
     * 
     */
    @Export(name="policyType", type=String.class, parameters={})
    private Output</* @Nullable */ String> policyType;

    /**
     * @return The policy type. Valid values are `StepScaling` and `TargetTrackingScaling`. Defaults to `StepScaling`. Certain services only support only one policy type. For more information see the [Target Tracking Scaling Policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html) and [Step Scaling Policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html) documentation.
     * 
     */
    public Output</* @Nullable */ String> getPolicyType() {
        return this.policyType;
    }
    /**
     * The resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the `ResourceId` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
     * 
     */
    @Export(name="resourceId", type=String.class, parameters={})
    private Output<String> resourceId;

    /**
     * @return The resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the `ResourceId` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
     * 
     */
    public Output<String> getResourceId() {
        return this.resourceId;
    }
    /**
     * The scalable dimension of the scalable target. Documentation can be found in the `ScalableDimension` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
     * 
     */
    @Export(name="scalableDimension", type=String.class, parameters={})
    private Output<String> scalableDimension;

    /**
     * @return The scalable dimension of the scalable target. Documentation can be found in the `ScalableDimension` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
     * 
     */
    public Output<String> getScalableDimension() {
        return this.scalableDimension;
    }
    /**
     * The AWS service namespace of the scalable target. Documentation can be found in the `ServiceNamespace` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
     * 
     */
    @Export(name="serviceNamespace", type=String.class, parameters={})
    private Output<String> serviceNamespace;

    /**
     * @return The AWS service namespace of the scalable target. Documentation can be found in the `ServiceNamespace` parameter at: [AWS Application Auto Scaling API Reference](http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters)
     * 
     */
    public Output<String> getServiceNamespace() {
        return this.serviceNamespace;
    }
    /**
     * Step scaling policy configuration, requires `policy_type = "StepScaling"` (default). See supported fields below.
     * 
     */
    @Export(name="stepScalingPolicyConfiguration", type=PolicyStepScalingPolicyConfiguration.class, parameters={})
    private Output</* @Nullable */ PolicyStepScalingPolicyConfiguration> stepScalingPolicyConfiguration;

    /**
     * @return Step scaling policy configuration, requires `policy_type = "StepScaling"` (default). See supported fields below.
     * 
     */
    public Output</* @Nullable */ PolicyStepScalingPolicyConfiguration> getStepScalingPolicyConfiguration() {
        return this.stepScalingPolicyConfiguration;
    }
    /**
     * A target tracking policy, requires `policy_type = "TargetTrackingScaling"`. See supported fields below.
     * 
     */
    @Export(name="targetTrackingScalingPolicyConfiguration", type=PolicyTargetTrackingScalingPolicyConfiguration.class, parameters={})
    private Output</* @Nullable */ PolicyTargetTrackingScalingPolicyConfiguration> targetTrackingScalingPolicyConfiguration;

    /**
     * @return A target tracking policy, requires `policy_type = "TargetTrackingScaling"`. See supported fields below.
     * 
     */
    public Output</* @Nullable */ PolicyTargetTrackingScalingPolicyConfiguration> getTargetTrackingScalingPolicyConfiguration() {
        return this.targetTrackingScalingPolicyConfiguration;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Policy(String name) {
        this(name, PolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Policy(String name, PolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Policy(String name, PolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:appautoscaling/policy:Policy", name, args == null ? PolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Policy(String name, Output<String> id, @Nullable PolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:appautoscaling/policy:Policy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Policy get(String name, Output<String> id, @Nullable PolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Policy(name, id, state, options);
    }
}
