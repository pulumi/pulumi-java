// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appmesh.inputs;

import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecBackendDefaultsGetArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecBackendGetArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerGetArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecLoggingGetArgs;
import io.pulumi.aws.appmesh.inputs.VirtualNodeSpecServiceDiscoveryGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualNodeSpecGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final VirtualNodeSpecGetArgs Empty = new VirtualNodeSpecGetArgs();

    /**
     * The defaults for backends.
     * 
     */
    @Import(name="backendDefaults")
      private final @Nullable Output<VirtualNodeSpecBackendDefaultsGetArgs> backendDefaults;

    public Output<VirtualNodeSpecBackendDefaultsGetArgs> backendDefaults() {
        return this.backendDefaults == null ? Codegen.empty() : this.backendDefaults;
    }

    /**
     * The backends to which the virtual node is expected to send outbound traffic.
     * 
     */
    @Import(name="backends")
      private final @Nullable Output<List<VirtualNodeSpecBackendGetArgs>> backends;

    public Output<List<VirtualNodeSpecBackendGetArgs>> backends() {
        return this.backends == null ? Codegen.empty() : this.backends;
    }

    /**
     * The listeners from which the virtual node is expected to receive inbound traffic.
     * 
     */
    @Import(name="listener")
      private final @Nullable Output<VirtualNodeSpecListenerGetArgs> listener;

    public Output<VirtualNodeSpecListenerGetArgs> listener() {
        return this.listener == null ? Codegen.empty() : this.listener;
    }

    /**
     * The inbound and outbound access logging information for the virtual node.
     * 
     */
    @Import(name="logging")
      private final @Nullable Output<VirtualNodeSpecLoggingGetArgs> logging;

    public Output<VirtualNodeSpecLoggingGetArgs> logging() {
        return this.logging == null ? Codegen.empty() : this.logging;
    }

    /**
     * The service discovery information for the virtual node.
     * 
     */
    @Import(name="serviceDiscovery")
      private final @Nullable Output<VirtualNodeSpecServiceDiscoveryGetArgs> serviceDiscovery;

    public Output<VirtualNodeSpecServiceDiscoveryGetArgs> serviceDiscovery() {
        return this.serviceDiscovery == null ? Codegen.empty() : this.serviceDiscovery;
    }

    public VirtualNodeSpecGetArgs(
        @Nullable Output<VirtualNodeSpecBackendDefaultsGetArgs> backendDefaults,
        @Nullable Output<List<VirtualNodeSpecBackendGetArgs>> backends,
        @Nullable Output<VirtualNodeSpecListenerGetArgs> listener,
        @Nullable Output<VirtualNodeSpecLoggingGetArgs> logging,
        @Nullable Output<VirtualNodeSpecServiceDiscoveryGetArgs> serviceDiscovery) {
        this.backendDefaults = backendDefaults;
        this.backends = backends;
        this.listener = listener;
        this.logging = logging;
        this.serviceDiscovery = serviceDiscovery;
    }

    private VirtualNodeSpecGetArgs() {
        this.backendDefaults = Codegen.empty();
        this.backends = Codegen.empty();
        this.listener = Codegen.empty();
        this.logging = Codegen.empty();
        this.serviceDiscovery = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNodeSpecGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<VirtualNodeSpecBackendDefaultsGetArgs> backendDefaults;
        private @Nullable Output<List<VirtualNodeSpecBackendGetArgs>> backends;
        private @Nullable Output<VirtualNodeSpecListenerGetArgs> listener;
        private @Nullable Output<VirtualNodeSpecLoggingGetArgs> logging;
        private @Nullable Output<VirtualNodeSpecServiceDiscoveryGetArgs> serviceDiscovery;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNodeSpecGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendDefaults = defaults.backendDefaults;
    	      this.backends = defaults.backends;
    	      this.listener = defaults.listener;
    	      this.logging = defaults.logging;
    	      this.serviceDiscovery = defaults.serviceDiscovery;
        }

        public Builder backendDefaults(@Nullable Output<VirtualNodeSpecBackendDefaultsGetArgs> backendDefaults) {
            this.backendDefaults = backendDefaults;
            return this;
        }
        public Builder backendDefaults(@Nullable VirtualNodeSpecBackendDefaultsGetArgs backendDefaults) {
            this.backendDefaults = Codegen.ofNullable(backendDefaults);
            return this;
        }
        public Builder backends(@Nullable Output<List<VirtualNodeSpecBackendGetArgs>> backends) {
            this.backends = backends;
            return this;
        }
        public Builder backends(@Nullable List<VirtualNodeSpecBackendGetArgs> backends) {
            this.backends = Codegen.ofNullable(backends);
            return this;
        }
        public Builder backends(VirtualNodeSpecBackendGetArgs... backends) {
            return backends(List.of(backends));
        }
        public Builder listener(@Nullable Output<VirtualNodeSpecListenerGetArgs> listener) {
            this.listener = listener;
            return this;
        }
        public Builder listener(@Nullable VirtualNodeSpecListenerGetArgs listener) {
            this.listener = Codegen.ofNullable(listener);
            return this;
        }
        public Builder logging(@Nullable Output<VirtualNodeSpecLoggingGetArgs> logging) {
            this.logging = logging;
            return this;
        }
        public Builder logging(@Nullable VirtualNodeSpecLoggingGetArgs logging) {
            this.logging = Codegen.ofNullable(logging);
            return this;
        }
        public Builder serviceDiscovery(@Nullable Output<VirtualNodeSpecServiceDiscoveryGetArgs> serviceDiscovery) {
            this.serviceDiscovery = serviceDiscovery;
            return this;
        }
        public Builder serviceDiscovery(@Nullable VirtualNodeSpecServiceDiscoveryGetArgs serviceDiscovery) {
            this.serviceDiscovery = Codegen.ofNullable(serviceDiscovery);
            return this;
        }        public VirtualNodeSpecGetArgs build() {
            return new VirtualNodeSpecGetArgs(backendDefaults, backends, listener, logging, serviceDiscovery);
        }
    }
}
