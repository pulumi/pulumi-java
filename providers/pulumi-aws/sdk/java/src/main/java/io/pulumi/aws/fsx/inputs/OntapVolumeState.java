// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx.inputs;

import io.pulumi.aws.fsx.inputs.OntapVolumeTieringPolicyGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OntapVolumeState extends io.pulumi.resources.ResourceArgs {

    public static final OntapVolumeState Empty = new OntapVolumeState();

    /**
     * Amazon Resource Name of the volune.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Describes the file system for the volume, e.g. `fs-12345679`
     * 
     */
    @InputImport(name="fileSystemId")
      private final @Nullable Input<String> fileSystemId;

    public Input<String> getFileSystemId() {
        return this.fileSystemId == null ? Input.empty() : this.fileSystemId;
    }

    /**
     * Specifies the FlexCache endpoint type of the volume, Valid values are `NONE`, `ORIGIN`, `CACHE`. Default value is `NONE`. These can be set by the ONTAP CLI or API and are use with FlexCache feature.
     * 
     */
    @InputImport(name="flexcacheEndpointType")
      private final @Nullable Input<String> flexcacheEndpointType;

    public Input<String> getFlexcacheEndpointType() {
        return this.flexcacheEndpointType == null ? Input.empty() : this.flexcacheEndpointType;
    }

    /**
     * Specifies the location in the storage virtual machine's namespace where the volume is mounted. The junction_path must have a leading forward slash, such as `/vol3`
     * 
     */
    @InputImport(name="junctionPath")
      private final @Nullable Input<String> junctionPath;

    public Input<String> getJunctionPath() {
        return this.junctionPath == null ? Input.empty() : this.junctionPath;
    }

    /**
     * Specifies the tiering policy for the ONTAP volume for moving data to the capacity pool storage. Valid values are `SNAPSHOT_ONLY`, `AUTO`, `ALL`, `NONE`. Default value is `SNAPSHOT_ONLY`.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Specifies the type of volume, Valid values are `RW`, `DP`,  and `LS`. Default value is `RW`. These can be set by the ONTAP CLI or API. This setting is used as part of migration and replication [Migrating to Amazon FSx for NetApp ONTAP](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/migrating-fsx-ontap.html)
     * 
     */
    @InputImport(name="ontapVolumeType")
      private final @Nullable Input<String> ontapVolumeType;

    public Input<String> getOntapVolumeType() {
        return this.ontapVolumeType == null ? Input.empty() : this.ontapVolumeType;
    }

    /**
     * Specifies the volume security style, Valid values are `UNIX`, `NTFS`, and `MIXED`. Default value is `UNIX`.
     * 
     */
    @InputImport(name="securityStyle")
      private final @Nullable Input<String> securityStyle;

    public Input<String> getSecurityStyle() {
        return this.securityStyle == null ? Input.empty() : this.securityStyle;
    }

    /**
     * Specifies the size of the volume, in megabytes (MB), that you are creating.
     * 
     */
    @InputImport(name="sizeInMegabytes")
      private final @Nullable Input<Integer> sizeInMegabytes;

    public Input<Integer> getSizeInMegabytes() {
        return this.sizeInMegabytes == null ? Input.empty() : this.sizeInMegabytes;
    }

    /**
     * Set to true to enable deduplication, compression, and compaction storage efficiency features on the volume.
     * 
     */
    @InputImport(name="storageEfficiencyEnabled")
      private final @Nullable Input<Boolean> storageEfficiencyEnabled;

    public Input<Boolean> getStorageEfficiencyEnabled() {
        return this.storageEfficiencyEnabled == null ? Input.empty() : this.storageEfficiencyEnabled;
    }

    /**
     * Specifies the storage virtual machine in which to create the volume.
     * 
     */
    @InputImport(name="storageVirtualMachineId")
      private final @Nullable Input<String> storageVirtualMachineId;

    public Input<String> getStorageVirtualMachineId() {
        return this.storageVirtualMachineId == null ? Input.empty() : this.storageVirtualMachineId;
    }

    /**
     * A map of tags to assign to the volume. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    @InputImport(name="tieringPolicy")
      private final @Nullable Input<OntapVolumeTieringPolicyGetArgs> tieringPolicy;

    public Input<OntapVolumeTieringPolicyGetArgs> getTieringPolicy() {
        return this.tieringPolicy == null ? Input.empty() : this.tieringPolicy;
    }

    /**
     * The Volume's UUID (universally unique identifier).
     * 
     */
    @InputImport(name="uuid")
      private final @Nullable Input<String> uuid;

    public Input<String> getUuid() {
        return this.uuid == null ? Input.empty() : this.uuid;
    }

    /**
     * The type of volume, currently the only valid value is `ONTAP`.
     * 
     */
    @InputImport(name="volumeType")
      private final @Nullable Input<String> volumeType;

    public Input<String> getVolumeType() {
        return this.volumeType == null ? Input.empty() : this.volumeType;
    }

    public OntapVolumeState(
        @Nullable Input<String> arn,
        @Nullable Input<String> fileSystemId,
        @Nullable Input<String> flexcacheEndpointType,
        @Nullable Input<String> junctionPath,
        @Nullable Input<String> name,
        @Nullable Input<String> ontapVolumeType,
        @Nullable Input<String> securityStyle,
        @Nullable Input<Integer> sizeInMegabytes,
        @Nullable Input<Boolean> storageEfficiencyEnabled,
        @Nullable Input<String> storageVirtualMachineId,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<OntapVolumeTieringPolicyGetArgs> tieringPolicy,
        @Nullable Input<String> uuid,
        @Nullable Input<String> volumeType) {
        this.arn = arn;
        this.fileSystemId = fileSystemId;
        this.flexcacheEndpointType = flexcacheEndpointType;
        this.junctionPath = junctionPath;
        this.name = name;
        this.ontapVolumeType = ontapVolumeType;
        this.securityStyle = securityStyle;
        this.sizeInMegabytes = sizeInMegabytes;
        this.storageEfficiencyEnabled = storageEfficiencyEnabled;
        this.storageVirtualMachineId = storageVirtualMachineId;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.tieringPolicy = tieringPolicy;
        this.uuid = uuid;
        this.volumeType = volumeType;
    }

    private OntapVolumeState() {
        this.arn = Input.empty();
        this.fileSystemId = Input.empty();
        this.flexcacheEndpointType = Input.empty();
        this.junctionPath = Input.empty();
        this.name = Input.empty();
        this.ontapVolumeType = Input.empty();
        this.securityStyle = Input.empty();
        this.sizeInMegabytes = Input.empty();
        this.storageEfficiencyEnabled = Input.empty();
        this.storageVirtualMachineId = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.tieringPolicy = Input.empty();
        this.uuid = Input.empty();
        this.volumeType = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OntapVolumeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> fileSystemId;
        private @Nullable Input<String> flexcacheEndpointType;
        private @Nullable Input<String> junctionPath;
        private @Nullable Input<String> name;
        private @Nullable Input<String> ontapVolumeType;
        private @Nullable Input<String> securityStyle;
        private @Nullable Input<Integer> sizeInMegabytes;
        private @Nullable Input<Boolean> storageEfficiencyEnabled;
        private @Nullable Input<String> storageVirtualMachineId;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<OntapVolumeTieringPolicyGetArgs> tieringPolicy;
        private @Nullable Input<String> uuid;
        private @Nullable Input<String> volumeType;

        public Builder() {
    	      // Empty
        }

        public Builder(OntapVolumeState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.flexcacheEndpointType = defaults.flexcacheEndpointType;
    	      this.junctionPath = defaults.junctionPath;
    	      this.name = defaults.name;
    	      this.ontapVolumeType = defaults.ontapVolumeType;
    	      this.securityStyle = defaults.securityStyle;
    	      this.sizeInMegabytes = defaults.sizeInMegabytes;
    	      this.storageEfficiencyEnabled = defaults.storageEfficiencyEnabled;
    	      this.storageVirtualMachineId = defaults.storageVirtualMachineId;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.tieringPolicy = defaults.tieringPolicy;
    	      this.uuid = defaults.uuid;
    	      this.volumeType = defaults.volumeType;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder fileSystemId(@Nullable Input<String> fileSystemId) {
            this.fileSystemId = fileSystemId;
            return this;
        }

        public Builder fileSystemId(@Nullable String fileSystemId) {
            this.fileSystemId = Input.ofNullable(fileSystemId);
            return this;
        }

        public Builder flexcacheEndpointType(@Nullable Input<String> flexcacheEndpointType) {
            this.flexcacheEndpointType = flexcacheEndpointType;
            return this;
        }

        public Builder flexcacheEndpointType(@Nullable String flexcacheEndpointType) {
            this.flexcacheEndpointType = Input.ofNullable(flexcacheEndpointType);
            return this;
        }

        public Builder junctionPath(@Nullable Input<String> junctionPath) {
            this.junctionPath = junctionPath;
            return this;
        }

        public Builder junctionPath(@Nullable String junctionPath) {
            this.junctionPath = Input.ofNullable(junctionPath);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder ontapVolumeType(@Nullable Input<String> ontapVolumeType) {
            this.ontapVolumeType = ontapVolumeType;
            return this;
        }

        public Builder ontapVolumeType(@Nullable String ontapVolumeType) {
            this.ontapVolumeType = Input.ofNullable(ontapVolumeType);
            return this;
        }

        public Builder securityStyle(@Nullable Input<String> securityStyle) {
            this.securityStyle = securityStyle;
            return this;
        }

        public Builder securityStyle(@Nullable String securityStyle) {
            this.securityStyle = Input.ofNullable(securityStyle);
            return this;
        }

        public Builder sizeInMegabytes(@Nullable Input<Integer> sizeInMegabytes) {
            this.sizeInMegabytes = sizeInMegabytes;
            return this;
        }

        public Builder sizeInMegabytes(@Nullable Integer sizeInMegabytes) {
            this.sizeInMegabytes = Input.ofNullable(sizeInMegabytes);
            return this;
        }

        public Builder storageEfficiencyEnabled(@Nullable Input<Boolean> storageEfficiencyEnabled) {
            this.storageEfficiencyEnabled = storageEfficiencyEnabled;
            return this;
        }

        public Builder storageEfficiencyEnabled(@Nullable Boolean storageEfficiencyEnabled) {
            this.storageEfficiencyEnabled = Input.ofNullable(storageEfficiencyEnabled);
            return this;
        }

        public Builder storageVirtualMachineId(@Nullable Input<String> storageVirtualMachineId) {
            this.storageVirtualMachineId = storageVirtualMachineId;
            return this;
        }

        public Builder storageVirtualMachineId(@Nullable String storageVirtualMachineId) {
            this.storageVirtualMachineId = Input.ofNullable(storageVirtualMachineId);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder tieringPolicy(@Nullable Input<OntapVolumeTieringPolicyGetArgs> tieringPolicy) {
            this.tieringPolicy = tieringPolicy;
            return this;
        }

        public Builder tieringPolicy(@Nullable OntapVolumeTieringPolicyGetArgs tieringPolicy) {
            this.tieringPolicy = Input.ofNullable(tieringPolicy);
            return this;
        }

        public Builder uuid(@Nullable Input<String> uuid) {
            this.uuid = uuid;
            return this;
        }

        public Builder uuid(@Nullable String uuid) {
            this.uuid = Input.ofNullable(uuid);
            return this;
        }

        public Builder volumeType(@Nullable Input<String> volumeType) {
            this.volumeType = volumeType;
            return this;
        }

        public Builder volumeType(@Nullable String volumeType) {
            this.volumeType = Input.ofNullable(volumeType);
            return this;
        }
        public OntapVolumeState build() {
            return new OntapVolumeState(arn, fileSystemId, flexcacheEndpointType, junctionPath, name, ontapVolumeType, securityStyle, sizeInMegabytes, storageEfficiencyEnabled, storageVirtualMachineId, tags, tagsAll, tieringPolicy, uuid, volumeType);
        }
    }
}
