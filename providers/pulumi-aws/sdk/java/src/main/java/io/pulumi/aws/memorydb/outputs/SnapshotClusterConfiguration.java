// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.memorydb.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class SnapshotClusterConfiguration {
    /**
     * Description for the cluster.
     * 
     */
    private final @Nullable String description;
    /**
     * Version number of the Redis engine used by the cluster.
     * 
     */
    private final @Nullable String engineVersion;
    /**
     * The weekly time range during which maintenance on the cluster is performed.
     * 
     */
    private final @Nullable String maintenanceWindow;
    /**
     * Name of the cluster.
     * 
     */
    private final @Nullable String name;
    /**
     * Compute and memory capacity of the nodes in the cluster.
     * 
     */
    private final @Nullable String nodeType;
    /**
     * Number of shards in the cluster.
     * 
     */
    private final @Nullable Integer numShards;
    /**
     * Name of the parameter group associated with the cluster.
     * 
     */
    private final @Nullable String parameterGroupName;
    /**
     * Port number on which the cluster accepts connections.
     * 
     */
    private final @Nullable Integer port;
    /**
     * Number of days for which MemoryDB retains automatic snapshots before deleting them.
     * 
     */
    private final @Nullable Integer snapshotRetentionLimit;
    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
     * 
     */
    private final @Nullable String snapshotWindow;
    /**
     * Name of the subnet group used by the cluster.
     * 
     */
    private final @Nullable String subnetGroupName;
    /**
     * ARN of the SNS topic to which cluster notifications are sent.
     * 
     */
    private final @Nullable String topicArn;
    /**
     * The VPC in which the cluster exists.
     * 
     */
    private final @Nullable String vpcId;

    @OutputCustomType.Constructor({"description","engineVersion","maintenanceWindow","name","nodeType","numShards","parameterGroupName","port","snapshotRetentionLimit","snapshotWindow","subnetGroupName","topicArn","vpcId"})
    private SnapshotClusterConfiguration(
        @Nullable String description,
        @Nullable String engineVersion,
        @Nullable String maintenanceWindow,
        @Nullable String name,
        @Nullable String nodeType,
        @Nullable Integer numShards,
        @Nullable String parameterGroupName,
        @Nullable Integer port,
        @Nullable Integer snapshotRetentionLimit,
        @Nullable String snapshotWindow,
        @Nullable String subnetGroupName,
        @Nullable String topicArn,
        @Nullable String vpcId) {
        this.description = description;
        this.engineVersion = engineVersion;
        this.maintenanceWindow = maintenanceWindow;
        this.name = name;
        this.nodeType = nodeType;
        this.numShards = numShards;
        this.parameterGroupName = parameterGroupName;
        this.port = port;
        this.snapshotRetentionLimit = snapshotRetentionLimit;
        this.snapshotWindow = snapshotWindow;
        this.subnetGroupName = subnetGroupName;
        this.topicArn = topicArn;
        this.vpcId = vpcId;
    }

    /**
     * Description for the cluster.
     * 
     */
    public Optional<String> getDescription() {
        return Optional.ofNullable(this.description);
    }
    /**
     * Version number of the Redis engine used by the cluster.
     * 
     */
    public Optional<String> getEngineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }
    /**
     * The weekly time range during which maintenance on the cluster is performed.
     * 
     */
    public Optional<String> getMaintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }
    /**
     * Name of the cluster.
     * 
     */
    public Optional<String> getName() {
        return Optional.ofNullable(this.name);
    }
    /**
     * Compute and memory capacity of the nodes in the cluster.
     * 
     */
    public Optional<String> getNodeType() {
        return Optional.ofNullable(this.nodeType);
    }
    /**
     * Number of shards in the cluster.
     * 
     */
    public Optional<Integer> getNumShards() {
        return Optional.ofNullable(this.numShards);
    }
    /**
     * Name of the parameter group associated with the cluster.
     * 
     */
    public Optional<String> getParameterGroupName() {
        return Optional.ofNullable(this.parameterGroupName);
    }
    /**
     * Port number on which the cluster accepts connections.
     * 
     */
    public Optional<Integer> getPort() {
        return Optional.ofNullable(this.port);
    }
    /**
     * Number of days for which MemoryDB retains automatic snapshots before deleting them.
     * 
     */
    public Optional<Integer> getSnapshotRetentionLimit() {
        return Optional.ofNullable(this.snapshotRetentionLimit);
    }
    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
     * 
     */
    public Optional<String> getSnapshotWindow() {
        return Optional.ofNullable(this.snapshotWindow);
    }
    /**
     * Name of the subnet group used by the cluster.
     * 
     */
    public Optional<String> getSubnetGroupName() {
        return Optional.ofNullable(this.subnetGroupName);
    }
    /**
     * ARN of the SNS topic to which cluster notifications are sent.
     * 
     */
    public Optional<String> getTopicArn() {
        return Optional.ofNullable(this.topicArn);
    }
    /**
     * The VPC in which the cluster exists.
     * 
     */
    public Optional<String> getVpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SnapshotClusterConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private @Nullable String engineVersion;
        private @Nullable String maintenanceWindow;
        private @Nullable String name;
        private @Nullable String nodeType;
        private @Nullable Integer numShards;
        private @Nullable String parameterGroupName;
        private @Nullable Integer port;
        private @Nullable Integer snapshotRetentionLimit;
        private @Nullable String snapshotWindow;
        private @Nullable String subnetGroupName;
        private @Nullable String topicArn;
        private @Nullable String vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(SnapshotClusterConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.engineVersion = defaults.engineVersion;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.name = defaults.name;
    	      this.nodeType = defaults.nodeType;
    	      this.numShards = defaults.numShards;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.port = defaults.port;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
    	      this.subnetGroupName = defaults.subnetGroupName;
    	      this.topicArn = defaults.topicArn;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = description;
            return this;
        }

        public Builder setEngineVersion(@Nullable String engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder setMaintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setNodeType(@Nullable String nodeType) {
            this.nodeType = nodeType;
            return this;
        }

        public Builder setNumShards(@Nullable Integer numShards) {
            this.numShards = numShards;
            return this;
        }

        public Builder setParameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }

        public Builder setPort(@Nullable Integer port) {
            this.port = port;
            return this;
        }

        public Builder setSnapshotRetentionLimit(@Nullable Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }

        public Builder setSnapshotWindow(@Nullable String snapshotWindow) {
            this.snapshotWindow = snapshotWindow;
            return this;
        }

        public Builder setSubnetGroupName(@Nullable String subnetGroupName) {
            this.subnetGroupName = subnetGroupName;
            return this;
        }

        public Builder setTopicArn(@Nullable String topicArn) {
            this.topicArn = topicArn;
            return this;
        }

        public Builder setVpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        public SnapshotClusterConfiguration build() {
            return new SnapshotClusterConfiguration(description, engineVersion, maintenanceWindow, name, nodeType, numShards, parameterGroupName, port, snapshotRetentionLimit, snapshotWindow, subnetGroupName, topicArn, vpcId);
        }
    }
}
