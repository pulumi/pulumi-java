// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codebuild.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class ProjectArtifacts {
    /**
     * Artifact identifier. Must be the same specified inside the AWS CodeBuild build specification.
     * 
     */
    private final @Nullable String artifactIdentifier;
    /**
     * Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. your CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
     * 
     */
    private final @Nullable String bucketOwnerAccess;
    /**
     * Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
     * 
     */
    private final @Nullable Boolean encryptionDisabled;
    /**
     * Location of the source code from git or s3.
     * 
     */
    private final @Nullable String location;
    /**
     * Name of the project. If `type` is set to `S3`, this is the name of the output artifact object
     * 
     */
    private final @Nullable String name;
    /**
     * Namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values are `BUILD_ID` or `NONE`.
     * 
     */
    private final @Nullable String namespaceType;
    /**
     * Whether a name specified in the build specification overrides the artifact name.
     * 
     */
    private final @Nullable Boolean overrideArtifactName;
    /**
     * Type of build output artifact to create. If `type` is set to `S3`, valid values are `NONE`, `ZIP`
     * 
     */
    private final @Nullable String packaging;
    /**
     * If `type` is set to `S3`, this is the path to the output artifact.
     * 
     */
    private final @Nullable String path;
    /**
     * Type of repository that contains the source code to be built. Valid values: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3`, `NO_SOURCE`.
     * 
     */
    private final String type;

    @OutputCustomType.Constructor
    private ProjectArtifacts(
        @OutputCustomType.Parameter("artifactIdentifier") @Nullable String artifactIdentifier,
        @OutputCustomType.Parameter("bucketOwnerAccess") @Nullable String bucketOwnerAccess,
        @OutputCustomType.Parameter("encryptionDisabled") @Nullable Boolean encryptionDisabled,
        @OutputCustomType.Parameter("location") @Nullable String location,
        @OutputCustomType.Parameter("name") @Nullable String name,
        @OutputCustomType.Parameter("namespaceType") @Nullable String namespaceType,
        @OutputCustomType.Parameter("overrideArtifactName") @Nullable Boolean overrideArtifactName,
        @OutputCustomType.Parameter("packaging") @Nullable String packaging,
        @OutputCustomType.Parameter("path") @Nullable String path,
        @OutputCustomType.Parameter("type") String type) {
        this.artifactIdentifier = artifactIdentifier;
        this.bucketOwnerAccess = bucketOwnerAccess;
        this.encryptionDisabled = encryptionDisabled;
        this.location = location;
        this.name = name;
        this.namespaceType = namespaceType;
        this.overrideArtifactName = overrideArtifactName;
        this.packaging = packaging;
        this.path = path;
        this.type = type;
    }

    /**
     * Artifact identifier. Must be the same specified inside the AWS CodeBuild build specification.
     * 
    */
    public Optional<String> getArtifactIdentifier() {
        return Optional.ofNullable(this.artifactIdentifier);
    }
    /**
     * Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. your CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
     * 
    */
    public Optional<String> getBucketOwnerAccess() {
        return Optional.ofNullable(this.bucketOwnerAccess);
    }
    /**
     * Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
     * 
    */
    public Optional<Boolean> getEncryptionDisabled() {
        return Optional.ofNullable(this.encryptionDisabled);
    }
    /**
     * Location of the source code from git or s3.
     * 
    */
    public Optional<String> getLocation() {
        return Optional.ofNullable(this.location);
    }
    /**
     * Name of the project. If `type` is set to `S3`, this is the name of the output artifact object
     * 
    */
    public Optional<String> getName() {
        return Optional.ofNullable(this.name);
    }
    /**
     * Namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values are `BUILD_ID` or `NONE`.
     * 
    */
    public Optional<String> getNamespaceType() {
        return Optional.ofNullable(this.namespaceType);
    }
    /**
     * Whether a name specified in the build specification overrides the artifact name.
     * 
    */
    public Optional<Boolean> getOverrideArtifactName() {
        return Optional.ofNullable(this.overrideArtifactName);
    }
    /**
     * Type of build output artifact to create. If `type` is set to `S3`, valid values are `NONE`, `ZIP`
     * 
    */
    public Optional<String> getPackaging() {
        return Optional.ofNullable(this.packaging);
    }
    /**
     * If `type` is set to `S3`, this is the path to the output artifact.
     * 
    */
    public Optional<String> getPath() {
        return Optional.ofNullable(this.path);
    }
    /**
     * Type of repository that contains the source code to be built. Valid values: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3`, `NO_SOURCE`.
     * 
    */
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectArtifacts defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String artifactIdentifier;
        private @Nullable String bucketOwnerAccess;
        private @Nullable Boolean encryptionDisabled;
        private @Nullable String location;
        private @Nullable String name;
        private @Nullable String namespaceType;
        private @Nullable Boolean overrideArtifactName;
        private @Nullable String packaging;
        private @Nullable String path;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(ProjectArtifacts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactIdentifier = defaults.artifactIdentifier;
    	      this.bucketOwnerAccess = defaults.bucketOwnerAccess;
    	      this.encryptionDisabled = defaults.encryptionDisabled;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.namespaceType = defaults.namespaceType;
    	      this.overrideArtifactName = defaults.overrideArtifactName;
    	      this.packaging = defaults.packaging;
    	      this.path = defaults.path;
    	      this.type = defaults.type;
        }

        public Builder artifactIdentifier(@Nullable String artifactIdentifier) {
            this.artifactIdentifier = artifactIdentifier;
            return this;
        }

        public Builder bucketOwnerAccess(@Nullable String bucketOwnerAccess) {
            this.bucketOwnerAccess = bucketOwnerAccess;
            return this;
        }

        public Builder encryptionDisabled(@Nullable Boolean encryptionDisabled) {
            this.encryptionDisabled = encryptionDisabled;
            return this;
        }

        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder namespaceType(@Nullable String namespaceType) {
            this.namespaceType = namespaceType;
            return this;
        }

        public Builder overrideArtifactName(@Nullable Boolean overrideArtifactName) {
            this.overrideArtifactName = overrideArtifactName;
            return this;
        }

        public Builder packaging(@Nullable String packaging) {
            this.packaging = packaging;
            return this;
        }

        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }

        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ProjectArtifacts build() {
            return new ProjectArtifacts(artifactIdentifier, bucketOwnerAccess, encryptionDisabled, location, name, namespaceType, overrideArtifactName, packaging, path, type);
        }
    }
}
