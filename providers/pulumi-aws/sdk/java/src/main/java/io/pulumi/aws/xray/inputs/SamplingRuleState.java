// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.xray.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SamplingRuleState extends io.pulumi.resources.ResourceArgs {

    public static final SamplingRuleState Empty = new SamplingRuleState();

    /**
     * The ARN of the sampling rule.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Matches attributes derived from the request.
     * 
     */
    @InputImport(name="attributes")
      private final @Nullable Input<Map<String,String>> attributes;

    public Input<Map<String,String>> getAttributes() {
        return this.attributes == null ? Input.empty() : this.attributes;
    }

    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    @InputImport(name="fixedRate")
      private final @Nullable Input<Double> fixedRate;

    public Input<Double> getFixedRate() {
        return this.fixedRate == null ? Input.empty() : this.fixedRate;
    }

    /**
     * Matches the hostname from a request URL.
     * 
     */
    @InputImport(name="host")
      private final @Nullable Input<String> host;

    public Input<String> getHost() {
        return this.host == null ? Input.empty() : this.host;
    }

    /**
     * Matches the HTTP method of a request.
     * 
     */
    @InputImport(name="httpMethod")
      private final @Nullable Input<String> httpMethod;

    public Input<String> getHttpMethod() {
        return this.httpMethod == null ? Input.empty() : this.httpMethod;
    }

    /**
     * The priority of the sampling rule.
     * 
     */
    @InputImport(name="priority")
      private final @Nullable Input<Integer> priority;

    public Input<Integer> getPriority() {
        return this.priority == null ? Input.empty() : this.priority;
    }

    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    @InputImport(name="reservoirSize")
      private final @Nullable Input<Integer> reservoirSize;

    public Input<Integer> getReservoirSize() {
        return this.reservoirSize == null ? Input.empty() : this.reservoirSize;
    }

    /**
     * Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    @InputImport(name="resourceArn")
      private final @Nullable Input<String> resourceArn;

    public Input<String> getResourceArn() {
        return this.resourceArn == null ? Input.empty() : this.resourceArn;
    }

    /**
     * The name of the sampling rule.
     * 
     */
    @InputImport(name="ruleName")
      private final @Nullable Input<String> ruleName;

    public Input<String> getRuleName() {
        return this.ruleName == null ? Input.empty() : this.ruleName;
    }

    /**
     * Matches the `name` that the service uses to identify itself in segments.
     * 
     */
    @InputImport(name="serviceName")
      private final @Nullable Input<String> serviceName;

    public Input<String> getServiceName() {
        return this.serviceName == null ? Input.empty() : this.serviceName;
    }

    /**
     * Matches the `origin` that the service uses to identify its type in segments.
     * 
     */
    @InputImport(name="serviceType")
      private final @Nullable Input<String> serviceType;

    public Input<String> getServiceType() {
        return this.serviceType == null ? Input.empty() : this.serviceType;
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Matches the path from a request URL.
     * 
     */
    @InputImport(name="urlPath")
      private final @Nullable Input<String> urlPath;

    public Input<String> getUrlPath() {
        return this.urlPath == null ? Input.empty() : this.urlPath;
    }

    /**
     * The version of the sampling rule format (`1` )
     * 
     */
    @InputImport(name="version")
      private final @Nullable Input<Integer> version;

    public Input<Integer> getVersion() {
        return this.version == null ? Input.empty() : this.version;
    }

    public SamplingRuleState(
        @Nullable Input<String> arn,
        @Nullable Input<Map<String,String>> attributes,
        @Nullable Input<Double> fixedRate,
        @Nullable Input<String> host,
        @Nullable Input<String> httpMethod,
        @Nullable Input<Integer> priority,
        @Nullable Input<Integer> reservoirSize,
        @Nullable Input<String> resourceArn,
        @Nullable Input<String> ruleName,
        @Nullable Input<String> serviceName,
        @Nullable Input<String> serviceType,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> urlPath,
        @Nullable Input<Integer> version) {
        this.arn = arn;
        this.attributes = attributes;
        this.fixedRate = fixedRate;
        this.host = host;
        this.httpMethod = httpMethod;
        this.priority = priority;
        this.reservoirSize = reservoirSize;
        this.resourceArn = resourceArn;
        this.ruleName = ruleName;
        this.serviceName = serviceName;
        this.serviceType = serviceType;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.urlPath = urlPath;
        this.version = version;
    }

    private SamplingRuleState() {
        this.arn = Input.empty();
        this.attributes = Input.empty();
        this.fixedRate = Input.empty();
        this.host = Input.empty();
        this.httpMethod = Input.empty();
        this.priority = Input.empty();
        this.reservoirSize = Input.empty();
        this.resourceArn = Input.empty();
        this.ruleName = Input.empty();
        this.serviceName = Input.empty();
        this.serviceType = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.urlPath = Input.empty();
        this.version = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SamplingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<Map<String,String>> attributes;
        private @Nullable Input<Double> fixedRate;
        private @Nullable Input<String> host;
        private @Nullable Input<String> httpMethod;
        private @Nullable Input<Integer> priority;
        private @Nullable Input<Integer> reservoirSize;
        private @Nullable Input<String> resourceArn;
        private @Nullable Input<String> ruleName;
        private @Nullable Input<String> serviceName;
        private @Nullable Input<String> serviceType;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> urlPath;
        private @Nullable Input<Integer> version;

        public Builder() {
    	      // Empty
        }

        public Builder(SamplingRuleState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.attributes = defaults.attributes;
    	      this.fixedRate = defaults.fixedRate;
    	      this.host = defaults.host;
    	      this.httpMethod = defaults.httpMethod;
    	      this.priority = defaults.priority;
    	      this.reservoirSize = defaults.reservoirSize;
    	      this.resourceArn = defaults.resourceArn;
    	      this.ruleName = defaults.ruleName;
    	      this.serviceName = defaults.serviceName;
    	      this.serviceType = defaults.serviceType;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.urlPath = defaults.urlPath;
    	      this.version = defaults.version;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setAttributes(@Nullable Input<Map<String,String>> attributes) {
            this.attributes = attributes;
            return this;
        }

        public Builder setAttributes(@Nullable Map<String,String> attributes) {
            this.attributes = Input.ofNullable(attributes);
            return this;
        }

        public Builder setFixedRate(@Nullable Input<Double> fixedRate) {
            this.fixedRate = fixedRate;
            return this;
        }

        public Builder setFixedRate(@Nullable Double fixedRate) {
            this.fixedRate = Input.ofNullable(fixedRate);
            return this;
        }

        public Builder setHost(@Nullable Input<String> host) {
            this.host = host;
            return this;
        }

        public Builder setHost(@Nullable String host) {
            this.host = Input.ofNullable(host);
            return this;
        }

        public Builder setHttpMethod(@Nullable Input<String> httpMethod) {
            this.httpMethod = httpMethod;
            return this;
        }

        public Builder setHttpMethod(@Nullable String httpMethod) {
            this.httpMethod = Input.ofNullable(httpMethod);
            return this;
        }

        public Builder setPriority(@Nullable Input<Integer> priority) {
            this.priority = priority;
            return this;
        }

        public Builder setPriority(@Nullable Integer priority) {
            this.priority = Input.ofNullable(priority);
            return this;
        }

        public Builder setReservoirSize(@Nullable Input<Integer> reservoirSize) {
            this.reservoirSize = reservoirSize;
            return this;
        }

        public Builder setReservoirSize(@Nullable Integer reservoirSize) {
            this.reservoirSize = Input.ofNullable(reservoirSize);
            return this;
        }

        public Builder setResourceArn(@Nullable Input<String> resourceArn) {
            this.resourceArn = resourceArn;
            return this;
        }

        public Builder setResourceArn(@Nullable String resourceArn) {
            this.resourceArn = Input.ofNullable(resourceArn);
            return this;
        }

        public Builder setRuleName(@Nullable Input<String> ruleName) {
            this.ruleName = ruleName;
            return this;
        }

        public Builder setRuleName(@Nullable String ruleName) {
            this.ruleName = Input.ofNullable(ruleName);
            return this;
        }

        public Builder setServiceName(@Nullable Input<String> serviceName) {
            this.serviceName = serviceName;
            return this;
        }

        public Builder setServiceName(@Nullable String serviceName) {
            this.serviceName = Input.ofNullable(serviceName);
            return this;
        }

        public Builder setServiceType(@Nullable Input<String> serviceType) {
            this.serviceType = serviceType;
            return this;
        }

        public Builder setServiceType(@Nullable String serviceType) {
            this.serviceType = Input.ofNullable(serviceType);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setUrlPath(@Nullable Input<String> urlPath) {
            this.urlPath = urlPath;
            return this;
        }

        public Builder setUrlPath(@Nullable String urlPath) {
            this.urlPath = Input.ofNullable(urlPath);
            return this;
        }

        public Builder setVersion(@Nullable Input<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder setVersion(@Nullable Integer version) {
            this.version = Input.ofNullable(version);
            return this;
        }
        public SamplingRuleState build() {
            return new SamplingRuleState(arn, attributes, fixedRate, host, httpMethod, priority, reservoirSize, resourceArn, ruleName, serviceName, serviceType, tags, tagsAll, urlPath, version);
        }
    }
}
