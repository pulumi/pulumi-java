// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.ec2.inputs.VpcPeeringConnectionAccepterArgs;
import io.pulumi.aws.ec2.inputs.VpcPeeringConnectionRequesterArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpcPeeringConnectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final VpcPeeringConnectionArgs Empty = new VpcPeeringConnectionArgs();

    /**
     * An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     * 
     */
    @InputImport(name="accepter")
      private final @Nullable Input<VpcPeeringConnectionAccepterArgs> accepter;

    public Input<VpcPeeringConnectionAccepterArgs> getAccepter() {
        return this.accepter == null ? Input.empty() : this.accepter;
    }

    /**
     * Accept the peering (both VPCs need to be in the same AWS account and region).
     * 
     */
    @InputImport(name="autoAccept")
      private final @Nullable Input<Boolean> autoAccept;

    public Input<Boolean> getAutoAccept() {
        return this.autoAccept == null ? Input.empty() : this.autoAccept;
    }

    /**
     * The AWS account ID of the owner of the peer VPC.
     * Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.
     * 
     */
    @InputImport(name="peerOwnerId")
      private final @Nullable Input<String> peerOwnerId;

    public Input<String> getPeerOwnerId() {
        return this.peerOwnerId == null ? Input.empty() : this.peerOwnerId;
    }

    /**
     * The region of the accepter VPC of the VPC Peering Connection. `auto_accept` must be `false`,
     * and use the `aws.ec2.VpcPeeringConnectionAccepter` to manage the accepter side.
     * 
     */
    @InputImport(name="peerRegion")
      private final @Nullable Input<String> peerRegion;

    public Input<String> getPeerRegion() {
        return this.peerRegion == null ? Input.empty() : this.peerRegion;
    }

    /**
     * The ID of the VPC with which you are creating the VPC Peering Connection.
     * 
     */
    @InputImport(name="peerVpcId", required=true)
      private final Input<String> peerVpcId;

    public Input<String> getPeerVpcId() {
        return this.peerVpcId;
    }

    /**
     * A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     * 
     */
    @InputImport(name="requester")
      private final @Nullable Input<VpcPeeringConnectionRequesterArgs> requester;

    public Input<VpcPeeringConnectionRequesterArgs> getRequester() {
        return this.requester == null ? Input.empty() : this.requester;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * The ID of the requester VPC.
     * 
     */
    @InputImport(name="vpcId", required=true)
      private final Input<String> vpcId;

    public Input<String> getVpcId() {
        return this.vpcId;
    }

    public VpcPeeringConnectionArgs(
        @Nullable Input<VpcPeeringConnectionAccepterArgs> accepter,
        @Nullable Input<Boolean> autoAccept,
        @Nullable Input<String> peerOwnerId,
        @Nullable Input<String> peerRegion,
        Input<String> peerVpcId,
        @Nullable Input<VpcPeeringConnectionRequesterArgs> requester,
        @Nullable Input<Map<String,String>> tags,
        Input<String> vpcId) {
        this.accepter = accepter;
        this.autoAccept = autoAccept;
        this.peerOwnerId = peerOwnerId;
        this.peerRegion = peerRegion;
        this.peerVpcId = Objects.requireNonNull(peerVpcId, "expected parameter 'peerVpcId' to be non-null");
        this.requester = requester;
        this.tags = tags;
        this.vpcId = Objects.requireNonNull(vpcId, "expected parameter 'vpcId' to be non-null");
    }

    private VpcPeeringConnectionArgs() {
        this.accepter = Input.empty();
        this.autoAccept = Input.empty();
        this.peerOwnerId = Input.empty();
        this.peerRegion = Input.empty();
        this.peerVpcId = Input.empty();
        this.requester = Input.empty();
        this.tags = Input.empty();
        this.vpcId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpcPeeringConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<VpcPeeringConnectionAccepterArgs> accepter;
        private @Nullable Input<Boolean> autoAccept;
        private @Nullable Input<String> peerOwnerId;
        private @Nullable Input<String> peerRegion;
        private Input<String> peerVpcId;
        private @Nullable Input<VpcPeeringConnectionRequesterArgs> requester;
        private @Nullable Input<Map<String,String>> tags;
        private Input<String> vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(VpcPeeringConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepter = defaults.accepter;
    	      this.autoAccept = defaults.autoAccept;
    	      this.peerOwnerId = defaults.peerOwnerId;
    	      this.peerRegion = defaults.peerRegion;
    	      this.peerVpcId = defaults.peerVpcId;
    	      this.requester = defaults.requester;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder setAccepter(@Nullable Input<VpcPeeringConnectionAccepterArgs> accepter) {
            this.accepter = accepter;
            return this;
        }

        public Builder setAccepter(@Nullable VpcPeeringConnectionAccepterArgs accepter) {
            this.accepter = Input.ofNullable(accepter);
            return this;
        }

        public Builder setAutoAccept(@Nullable Input<Boolean> autoAccept) {
            this.autoAccept = autoAccept;
            return this;
        }

        public Builder setAutoAccept(@Nullable Boolean autoAccept) {
            this.autoAccept = Input.ofNullable(autoAccept);
            return this;
        }

        public Builder setPeerOwnerId(@Nullable Input<String> peerOwnerId) {
            this.peerOwnerId = peerOwnerId;
            return this;
        }

        public Builder setPeerOwnerId(@Nullable String peerOwnerId) {
            this.peerOwnerId = Input.ofNullable(peerOwnerId);
            return this;
        }

        public Builder setPeerRegion(@Nullable Input<String> peerRegion) {
            this.peerRegion = peerRegion;
            return this;
        }

        public Builder setPeerRegion(@Nullable String peerRegion) {
            this.peerRegion = Input.ofNullable(peerRegion);
            return this;
        }

        public Builder setPeerVpcId(Input<String> peerVpcId) {
            this.peerVpcId = Objects.requireNonNull(peerVpcId);
            return this;
        }

        public Builder setPeerVpcId(String peerVpcId) {
            this.peerVpcId = Input.of(Objects.requireNonNull(peerVpcId));
            return this;
        }

        public Builder setRequester(@Nullable Input<VpcPeeringConnectionRequesterArgs> requester) {
            this.requester = requester;
            return this;
        }

        public Builder setRequester(@Nullable VpcPeeringConnectionRequesterArgs requester) {
            this.requester = Input.ofNullable(requester);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVpcId(Input<String> vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }

        public Builder setVpcId(String vpcId) {
            this.vpcId = Input.of(Objects.requireNonNull(vpcId));
            return this;
        }
        public VpcPeeringConnectionArgs build() {
            return new VpcPeeringConnectionArgs(accepter, autoAccept, peerOwnerId, peerRegion, peerVpcId, requester, tags, vpcId);
        }
    }
}
