// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elasticache.inputs;

import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetUserArgs Empty = new GetUserArgs();

    /**
     * A string for what access a user possesses within the associated ElastiCache replication groups or clusters.
     * 
     */
    @InputImport(name="accessString")
    private final @Nullable String accessString;

    public Optional<String> getAccessString() {
        return this.accessString == null ? Optional.empty() : Optional.ofNullable(this.accessString);
    }

    @InputImport(name="engine")
    private final @Nullable String engine;

    public Optional<String> getEngine() {
        return this.engine == null ? Optional.empty() : Optional.ofNullable(this.engine);
    }

    @InputImport(name="noPasswordRequired")
    private final @Nullable Boolean noPasswordRequired;

    public Optional<Boolean> getNoPasswordRequired() {
        return this.noPasswordRequired == null ? Optional.empty() : Optional.ofNullable(this.noPasswordRequired);
    }

    @InputImport(name="passwords")
    private final @Nullable List<String> passwords;

    public List<String> getPasswords() {
        return this.passwords == null ? List.of() : this.passwords;
    }

    /**
     * The identifier for the user.
     * 
     */
    @InputImport(name="userId", required=true)
    private final String userId;

    public String getUserId() {
        return this.userId;
    }

    /**
     * The user name of the user.
     * 
     */
    @InputImport(name="userName")
    private final @Nullable String userName;

    public Optional<String> getUserName() {
        return this.userName == null ? Optional.empty() : Optional.ofNullable(this.userName);
    }

    public GetUserArgs(
        @Nullable String accessString,
        @Nullable String engine,
        @Nullable Boolean noPasswordRequired,
        @Nullable List<String> passwords,
        String userId,
        @Nullable String userName) {
        this.accessString = accessString;
        this.engine = engine;
        this.noPasswordRequired = noPasswordRequired;
        this.passwords = passwords;
        this.userId = Objects.requireNonNull(userId, "expected parameter 'userId' to be non-null");
        this.userName = userName;
    }

    private GetUserArgs() {
        this.accessString = null;
        this.engine = null;
        this.noPasswordRequired = null;
        this.passwords = List.of();
        this.userId = null;
        this.userName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accessString;
        private @Nullable String engine;
        private @Nullable Boolean noPasswordRequired;
        private @Nullable List<String> passwords;
        private String userId;
        private @Nullable String userName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessString = defaults.accessString;
    	      this.engine = defaults.engine;
    	      this.noPasswordRequired = defaults.noPasswordRequired;
    	      this.passwords = defaults.passwords;
    	      this.userId = defaults.userId;
    	      this.userName = defaults.userName;
        }

        public Builder setAccessString(@Nullable String accessString) {
            this.accessString = accessString;
            return this;
        }

        public Builder setEngine(@Nullable String engine) {
            this.engine = engine;
            return this;
        }

        public Builder setNoPasswordRequired(@Nullable Boolean noPasswordRequired) {
            this.noPasswordRequired = noPasswordRequired;
            return this;
        }

        public Builder setPasswords(@Nullable List<String> passwords) {
            this.passwords = passwords;
            return this;
        }

        public Builder setUserId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }

        public Builder setUserName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        public GetUserArgs build() {
            return new GetUserArgs(accessString, engine, noPasswordRequired, passwords, userId, userName);
        }
    }
}
