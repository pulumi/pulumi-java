// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.budgets;

import io.pulumi.aws.budgets.inputs.BudgetCostTypesArgs;
import io.pulumi.aws.budgets.inputs.BudgetNotificationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BudgetArgs extends io.pulumi.resources.ResourceArgs {

    public static final BudgetArgs Empty = new BudgetArgs();

    /**
     * The ID of the target account for budget. Will use current user's account_id by default if omitted.
     * 
     */
    @InputImport(name="accountId")
      private final @Nullable Input<String> accountId;

    public Input<String> getAccountId() {
        return this.accountId == null ? Input.empty() : this.accountId;
    }

    /**
     * Whether this budget tracks monetary cost or usage.
     * 
     */
    @InputImport(name="budgetType", required=true)
      private final Input<String> budgetType;

    public Input<String> getBudgetType() {
        return this.budgetType;
    }

    /**
     * Map of CostFilters key/value pairs to apply to the budget.
     * 
     */
    @InputImport(name="costFilters")
      private final @Nullable Input<Map<String,String>> costFilters;

    public Input<Map<String,String>> getCostFilters() {
        return this.costFilters == null ? Input.empty() : this.costFilters;
    }

    /**
     * Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
     * 
     */
    @InputImport(name="costTypes")
      private final @Nullable Input<BudgetCostTypesArgs> costTypes;

    public Input<BudgetCostTypesArgs> getCostTypes() {
        return this.costTypes == null ? Input.empty() : this.costTypes;
    }

    /**
     * The amount of cost or usage being measured for a budget.
     * 
     */
    @InputImport(name="limitAmount", required=true)
      private final Input<String> limitAmount;

    public Input<String> getLimitAmount() {
        return this.limitAmount;
    }

    /**
     * The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
     * 
     */
    @InputImport(name="limitUnit", required=true)
      private final Input<String> limitUnit;

    public Input<String> getLimitUnit() {
        return this.limitUnit;
    }

    /**
     * The name of a budget. Unique within accounts.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The prefix of the name of a budget. Unique within accounts.
     * 
     */
    @InputImport(name="namePrefix")
      private final @Nullable Input<String> namePrefix;

    public Input<String> getNamePrefix() {
        return this.namePrefix == null ? Input.empty() : this.namePrefix;
    }

    /**
     * Object containing Budget Notifications. Can be used multiple times to define more than one budget notification
     * 
     */
    @InputImport(name="notifications")
      private final @Nullable Input<List<BudgetNotificationArgs>> notifications;

    public Input<List<BudgetNotificationArgs>> getNotifications() {
        return this.notifications == null ? Input.empty() : this.notifications;
    }

    /**
     * The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
     * 
     */
    @InputImport(name="timePeriodEnd")
      private final @Nullable Input<String> timePeriodEnd;

    public Input<String> getTimePeriodEnd() {
        return this.timePeriodEnd == null ? Input.empty() : this.timePeriodEnd;
    }

    /**
     * The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
     * 
     */
    @InputImport(name="timePeriodStart")
      private final @Nullable Input<String> timePeriodStart;

    public Input<String> getTimePeriodStart() {
        return this.timePeriodStart == null ? Input.empty() : this.timePeriodStart;
    }

    /**
     * The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
     * 
     */
    @InputImport(name="timeUnit", required=true)
      private final Input<String> timeUnit;

    public Input<String> getTimeUnit() {
        return this.timeUnit;
    }

    public BudgetArgs(
        @Nullable Input<String> accountId,
        Input<String> budgetType,
        @Nullable Input<Map<String,String>> costFilters,
        @Nullable Input<BudgetCostTypesArgs> costTypes,
        Input<String> limitAmount,
        Input<String> limitUnit,
        @Nullable Input<String> name,
        @Nullable Input<String> namePrefix,
        @Nullable Input<List<BudgetNotificationArgs>> notifications,
        @Nullable Input<String> timePeriodEnd,
        @Nullable Input<String> timePeriodStart,
        Input<String> timeUnit) {
        this.accountId = accountId;
        this.budgetType = Objects.requireNonNull(budgetType, "expected parameter 'budgetType' to be non-null");
        this.costFilters = costFilters;
        this.costTypes = costTypes;
        this.limitAmount = Objects.requireNonNull(limitAmount, "expected parameter 'limitAmount' to be non-null");
        this.limitUnit = Objects.requireNonNull(limitUnit, "expected parameter 'limitUnit' to be non-null");
        this.name = name;
        this.namePrefix = namePrefix;
        this.notifications = notifications;
        this.timePeriodEnd = timePeriodEnd;
        this.timePeriodStart = timePeriodStart;
        this.timeUnit = Objects.requireNonNull(timeUnit, "expected parameter 'timeUnit' to be non-null");
    }

    private BudgetArgs() {
        this.accountId = Input.empty();
        this.budgetType = Input.empty();
        this.costFilters = Input.empty();
        this.costTypes = Input.empty();
        this.limitAmount = Input.empty();
        this.limitUnit = Input.empty();
        this.name = Input.empty();
        this.namePrefix = Input.empty();
        this.notifications = Input.empty();
        this.timePeriodEnd = Input.empty();
        this.timePeriodStart = Input.empty();
        this.timeUnit = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> accountId;
        private Input<String> budgetType;
        private @Nullable Input<Map<String,String>> costFilters;
        private @Nullable Input<BudgetCostTypesArgs> costTypes;
        private Input<String> limitAmount;
        private Input<String> limitUnit;
        private @Nullable Input<String> name;
        private @Nullable Input<String> namePrefix;
        private @Nullable Input<List<BudgetNotificationArgs>> notifications;
        private @Nullable Input<String> timePeriodEnd;
        private @Nullable Input<String> timePeriodStart;
        private Input<String> timeUnit;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.budgetType = defaults.budgetType;
    	      this.costFilters = defaults.costFilters;
    	      this.costTypes = defaults.costTypes;
    	      this.limitAmount = defaults.limitAmount;
    	      this.limitUnit = defaults.limitUnit;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.notifications = defaults.notifications;
    	      this.timePeriodEnd = defaults.timePeriodEnd;
    	      this.timePeriodStart = defaults.timePeriodStart;
    	      this.timeUnit = defaults.timeUnit;
        }

        public Builder setAccountId(@Nullable Input<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder setAccountId(@Nullable String accountId) {
            this.accountId = Input.ofNullable(accountId);
            return this;
        }

        public Builder setBudgetType(Input<String> budgetType) {
            this.budgetType = Objects.requireNonNull(budgetType);
            return this;
        }

        public Builder setBudgetType(String budgetType) {
            this.budgetType = Input.of(Objects.requireNonNull(budgetType));
            return this;
        }

        public Builder setCostFilters(@Nullable Input<Map<String,String>> costFilters) {
            this.costFilters = costFilters;
            return this;
        }

        public Builder setCostFilters(@Nullable Map<String,String> costFilters) {
            this.costFilters = Input.ofNullable(costFilters);
            return this;
        }

        public Builder setCostTypes(@Nullable Input<BudgetCostTypesArgs> costTypes) {
            this.costTypes = costTypes;
            return this;
        }

        public Builder setCostTypes(@Nullable BudgetCostTypesArgs costTypes) {
            this.costTypes = Input.ofNullable(costTypes);
            return this;
        }

        public Builder setLimitAmount(Input<String> limitAmount) {
            this.limitAmount = Objects.requireNonNull(limitAmount);
            return this;
        }

        public Builder setLimitAmount(String limitAmount) {
            this.limitAmount = Input.of(Objects.requireNonNull(limitAmount));
            return this;
        }

        public Builder setLimitUnit(Input<String> limitUnit) {
            this.limitUnit = Objects.requireNonNull(limitUnit);
            return this;
        }

        public Builder setLimitUnit(String limitUnit) {
            this.limitUnit = Input.of(Objects.requireNonNull(limitUnit));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNamePrefix(@Nullable Input<String> namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }

        public Builder setNamePrefix(@Nullable String namePrefix) {
            this.namePrefix = Input.ofNullable(namePrefix);
            return this;
        }

        public Builder setNotifications(@Nullable Input<List<BudgetNotificationArgs>> notifications) {
            this.notifications = notifications;
            return this;
        }

        public Builder setNotifications(@Nullable List<BudgetNotificationArgs> notifications) {
            this.notifications = Input.ofNullable(notifications);
            return this;
        }

        public Builder setTimePeriodEnd(@Nullable Input<String> timePeriodEnd) {
            this.timePeriodEnd = timePeriodEnd;
            return this;
        }

        public Builder setTimePeriodEnd(@Nullable String timePeriodEnd) {
            this.timePeriodEnd = Input.ofNullable(timePeriodEnd);
            return this;
        }

        public Builder setTimePeriodStart(@Nullable Input<String> timePeriodStart) {
            this.timePeriodStart = timePeriodStart;
            return this;
        }

        public Builder setTimePeriodStart(@Nullable String timePeriodStart) {
            this.timePeriodStart = Input.ofNullable(timePeriodStart);
            return this;
        }

        public Builder setTimeUnit(Input<String> timeUnit) {
            this.timeUnit = Objects.requireNonNull(timeUnit);
            return this;
        }

        public Builder setTimeUnit(String timeUnit) {
            this.timeUnit = Input.of(Objects.requireNonNull(timeUnit));
            return this;
        }
        public BudgetArgs build() {
            return new BudgetArgs(accountId, budgetType, costFilters, costTypes, limitAmount, limitUnit, name, namePrefix, notifications, timePeriodEnd, timePeriodStart, timeUnit);
        }
    }
}
