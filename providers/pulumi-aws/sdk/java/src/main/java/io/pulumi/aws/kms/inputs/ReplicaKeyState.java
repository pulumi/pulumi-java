// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kms.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReplicaKeyState extends io.pulumi.resources.ResourceArgs {

    public static final ReplicaKeyState Empty = new ReplicaKeyState();

    /**
     * The Amazon Resource Name (ARN) of the replica key. The key ARNs of related multi-Region keys differ only in the Region value.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * A flag to indicate whether to bypass the key policy lockout safety check.
     * Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately.
     * For more information, refer to the scenario in the [Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam) section in the _AWS Key Management Service Developer Guide_.
     * The default value is `false`.
     * 
     */
    @Import(name="bypassPolicyLockoutSafetyCheck")
      private final @Nullable Output<Boolean> bypassPolicyLockoutSafetyCheck;

    public Output<Boolean> getBypassPolicyLockoutSafetyCheck() {
        return this.bypassPolicyLockoutSafetyCheck == null ? Output.empty() : this.bypassPolicyLockoutSafetyCheck;
    }

    /**
     * The waiting period, specified in number of days. After the waiting period ends, AWS KMS deletes the KMS key.
     * If you specify a value, it must be between `7` and `30`, inclusive. If you do not specify a value, it defaults to `30`.
     * 
     */
    @Import(name="deletionWindowInDays")
      private final @Nullable Output<Integer> deletionWindowInDays;

    public Output<Integer> getDeletionWindowInDays() {
        return this.deletionWindowInDays == null ? Output.empty() : this.deletionWindowInDays;
    }

    /**
     * A description of the KMS key.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Specifies whether the replica key is enabled. Disabled KMS keys cannot be used in cryptographic operations. The default value is `true`.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> getEnabled() {
        return this.enabled == null ? Output.empty() : this.enabled;
    }

    /**
     * The key ID of the replica key. Related multi-Region keys have the same key ID.
     * 
     */
    @Import(name="keyId")
      private final @Nullable Output<String> keyId;

    public Output<String> getKeyId() {
        return this.keyId == null ? Output.empty() : this.keyId;
    }

    /**
     * A Boolean value that specifies whether key rotation is enabled. This is a shared property of multi-Region keys.
     * 
     */
    @Import(name="keyRotationEnabled")
      private final @Nullable Output<Boolean> keyRotationEnabled;

    public Output<Boolean> getKeyRotationEnabled() {
        return this.keyRotationEnabled == null ? Output.empty() : this.keyRotationEnabled;
    }

    /**
     * The type of key material in the KMS key. This is a shared property of multi-Region keys.
     * 
     */
    @Import(name="keySpec")
      private final @Nullable Output<String> keySpec;

    public Output<String> getKeySpec() {
        return this.keySpec == null ? Output.empty() : this.keySpec;
    }

    /**
     * The [cryptographic operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) for which you can use the KMS key. This is a shared property of multi-Region keys.
     * 
     */
    @Import(name="keyUsage")
      private final @Nullable Output<String> keyUsage;

    public Output<String> getKeyUsage() {
        return this.keyUsage == null ? Output.empty() : this.keyUsage;
    }

    @Import(name="policy")
      private final @Nullable Output<String> policy;

    public Output<String> getPolicy() {
        return this.policy == null ? Output.empty() : this.policy;
    }

    /**
     * The ARN of the multi-Region primary key to replicate. The primary key must be in a different AWS Region of the same AWS Partition. You can create only one replica of a given primary key in each AWS Region.
     * 
     */
    @Import(name="primaryKeyArn")
      private final @Nullable Output<String> primaryKeyArn;

    public Output<String> getPrimaryKeyArn() {
        return this.primaryKeyArn == null ? Output.empty() : this.primaryKeyArn;
    }

    /**
     * A map of tags to assign to the replica key. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    public ReplicaKeyState(
        @Nullable Output<String> arn,
        @Nullable Output<Boolean> bypassPolicyLockoutSafetyCheck,
        @Nullable Output<Integer> deletionWindowInDays,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<String> keyId,
        @Nullable Output<Boolean> keyRotationEnabled,
        @Nullable Output<String> keySpec,
        @Nullable Output<String> keyUsage,
        @Nullable Output<String> policy,
        @Nullable Output<String> primaryKeyArn,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
        this.deletionWindowInDays = deletionWindowInDays;
        this.description = description;
        this.enabled = enabled;
        this.keyId = keyId;
        this.keyRotationEnabled = keyRotationEnabled;
        this.keySpec = keySpec;
        this.keyUsage = keyUsage;
        this.policy = policy;
        this.primaryKeyArn = primaryKeyArn;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private ReplicaKeyState() {
        this.arn = Output.empty();
        this.bypassPolicyLockoutSafetyCheck = Output.empty();
        this.deletionWindowInDays = Output.empty();
        this.description = Output.empty();
        this.enabled = Output.empty();
        this.keyId = Output.empty();
        this.keyRotationEnabled = Output.empty();
        this.keySpec = Output.empty();
        this.keyUsage = Output.empty();
        this.policy = Output.empty();
        this.primaryKeyArn = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicaKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<Boolean> bypassPolicyLockoutSafetyCheck;
        private @Nullable Output<Integer> deletionWindowInDays;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<String> keyId;
        private @Nullable Output<Boolean> keyRotationEnabled;
        private @Nullable Output<String> keySpec;
        private @Nullable Output<String> keyUsage;
        private @Nullable Output<String> policy;
        private @Nullable Output<String> primaryKeyArn;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(ReplicaKeyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.bypassPolicyLockoutSafetyCheck = defaults.bypassPolicyLockoutSafetyCheck;
    	      this.deletionWindowInDays = defaults.deletionWindowInDays;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.keyId = defaults.keyId;
    	      this.keyRotationEnabled = defaults.keyRotationEnabled;
    	      this.keySpec = defaults.keySpec;
    	      this.keyUsage = defaults.keyUsage;
    	      this.policy = defaults.policy;
    	      this.primaryKeyArn = defaults.primaryKeyArn;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }
        public Builder bypassPolicyLockoutSafetyCheck(@Nullable Output<Boolean> bypassPolicyLockoutSafetyCheck) {
            this.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
            return this;
        }
        public Builder bypassPolicyLockoutSafetyCheck(@Nullable Boolean bypassPolicyLockoutSafetyCheck) {
            this.bypassPolicyLockoutSafetyCheck = Output.ofNullable(bypassPolicyLockoutSafetyCheck);
            return this;
        }
        public Builder deletionWindowInDays(@Nullable Output<Integer> deletionWindowInDays) {
            this.deletionWindowInDays = deletionWindowInDays;
            return this;
        }
        public Builder deletionWindowInDays(@Nullable Integer deletionWindowInDays) {
            this.deletionWindowInDays = Output.ofNullable(deletionWindowInDays);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Output.ofNullable(enabled);
            return this;
        }
        public Builder keyId(@Nullable Output<String> keyId) {
            this.keyId = keyId;
            return this;
        }
        public Builder keyId(@Nullable String keyId) {
            this.keyId = Output.ofNullable(keyId);
            return this;
        }
        public Builder keyRotationEnabled(@Nullable Output<Boolean> keyRotationEnabled) {
            this.keyRotationEnabled = keyRotationEnabled;
            return this;
        }
        public Builder keyRotationEnabled(@Nullable Boolean keyRotationEnabled) {
            this.keyRotationEnabled = Output.ofNullable(keyRotationEnabled);
            return this;
        }
        public Builder keySpec(@Nullable Output<String> keySpec) {
            this.keySpec = keySpec;
            return this;
        }
        public Builder keySpec(@Nullable String keySpec) {
            this.keySpec = Output.ofNullable(keySpec);
            return this;
        }
        public Builder keyUsage(@Nullable Output<String> keyUsage) {
            this.keyUsage = keyUsage;
            return this;
        }
        public Builder keyUsage(@Nullable String keyUsage) {
            this.keyUsage = Output.ofNullable(keyUsage);
            return this;
        }
        public Builder policy(@Nullable Output<String> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable String policy) {
            this.policy = Output.ofNullable(policy);
            return this;
        }
        public Builder primaryKeyArn(@Nullable Output<String> primaryKeyArn) {
            this.primaryKeyArn = primaryKeyArn;
            return this;
        }
        public Builder primaryKeyArn(@Nullable String primaryKeyArn) {
            this.primaryKeyArn = Output.ofNullable(primaryKeyArn);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }        public ReplicaKeyState build() {
            return new ReplicaKeyState(arn, bypassPolicyLockoutSafetyCheck, deletionWindowInDays, description, enabled, keyId, keyRotationEnabled, keySpec, keyUsage, policy, primaryKeyArn, tags, tagsAll);
        }
    }
}
