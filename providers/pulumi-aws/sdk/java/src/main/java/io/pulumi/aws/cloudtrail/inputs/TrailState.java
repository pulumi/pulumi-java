// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudtrail.inputs;

import io.pulumi.aws.cloudtrail.inputs.TrailAdvancedEventSelectorGetArgs;
import io.pulumi.aws.cloudtrail.inputs.TrailEventSelectorGetArgs;
import io.pulumi.aws.cloudtrail.inputs.TrailInsightSelectorGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TrailState extends io.pulumi.resources.ResourceArgs {

    public static final TrailState Empty = new TrailState();

    /**
     * Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `event_selector`.
     * 
     */
    @Import(name="advancedEventSelectors")
      private final @Nullable Output<List<TrailAdvancedEventSelectorGetArgs>> advancedEventSelectors;

    public Output<List<TrailAdvancedEventSelectorGetArgs>> getAdvancedEventSelectors() {
        return this.advancedEventSelectors == null ? Codegen.empty() : this.advancedEventSelectors;
    }

    /**
     * ARN of the trail.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
     * 
     */
    @Import(name="cloudWatchLogsGroupArn")
      private final @Nullable Output<String> cloudWatchLogsGroupArn;

    public Output<String> getCloudWatchLogsGroupArn() {
        return this.cloudWatchLogsGroupArn == null ? Codegen.empty() : this.cloudWatchLogsGroupArn;
    }

    /**
     * Role for the CloudWatch Logs endpoint to assume to write to a userâ€™s log group.
     * 
     */
    @Import(name="cloudWatchLogsRoleArn")
      private final @Nullable Output<String> cloudWatchLogsRoleArn;

    public Output<String> getCloudWatchLogsRoleArn() {
        return this.cloudWatchLogsRoleArn == null ? Codegen.empty() : this.cloudWatchLogsRoleArn;
    }

    /**
     * Whether log file integrity validation is enabled. Defaults to `false`.
     * 
     */
    @Import(name="enableLogFileValidation")
      private final @Nullable Output<Boolean> enableLogFileValidation;

    public Output<Boolean> getEnableLogFileValidation() {
        return this.enableLogFileValidation == null ? Codegen.empty() : this.enableLogFileValidation;
    }

    /**
     * Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
     * 
     */
    @Import(name="enableLogging")
      private final @Nullable Output<Boolean> enableLogging;

    public Output<Boolean> getEnableLogging() {
        return this.enableLogging == null ? Codegen.empty() : this.enableLogging;
    }

    /**
     * Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advanced_event_selector`.
     * 
     */
    @Import(name="eventSelectors")
      private final @Nullable Output<List<TrailEventSelectorGetArgs>> eventSelectors;

    public Output<List<TrailEventSelectorGetArgs>> getEventSelectors() {
        return this.eventSelectors == null ? Codegen.empty() : this.eventSelectors;
    }

    /**
     * Region in which the trail was created.
     * 
     */
    @Import(name="homeRegion")
      private final @Nullable Output<String> homeRegion;

    public Output<String> getHomeRegion() {
        return this.homeRegion == null ? Codegen.empty() : this.homeRegion;
    }

    /**
     * Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
     * 
     */
    @Import(name="includeGlobalServiceEvents")
      private final @Nullable Output<Boolean> includeGlobalServiceEvents;

    public Output<Boolean> getIncludeGlobalServiceEvents() {
        return this.includeGlobalServiceEvents == null ? Codegen.empty() : this.includeGlobalServiceEvents;
    }

    /**
     * Configuration block for identifying unusual operational activity. See details below.
     * 
     */
    @Import(name="insightSelectors")
      private final @Nullable Output<List<TrailInsightSelectorGetArgs>> insightSelectors;

    public Output<List<TrailInsightSelectorGetArgs>> getInsightSelectors() {
        return this.insightSelectors == null ? Codegen.empty() : this.insightSelectors;
    }

    /**
     * Whether the trail is created in the current region or in all regions. Defaults to `false`.
     * 
     */
    @Import(name="isMultiRegionTrail")
      private final @Nullable Output<Boolean> isMultiRegionTrail;

    public Output<Boolean> getIsMultiRegionTrail() {
        return this.isMultiRegionTrail == null ? Codegen.empty() : this.isMultiRegionTrail;
    }

    /**
     * Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
     * 
     */
    @Import(name="isOrganizationTrail")
      private final @Nullable Output<Boolean> isOrganizationTrail;

    public Output<Boolean> getIsOrganizationTrail() {
        return this.isOrganizationTrail == null ? Codegen.empty() : this.isOrganizationTrail;
    }

    /**
     * KMS key ARN to use to encrypt the logs delivered by CloudTrail.
     * 
     */
    @Import(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Codegen.empty() : this.kmsKeyId;
    }

    /**
     * Specifies the name of the advanced event selector.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Name of the S3 bucket designated for publishing log files.
     * 
     */
    @Import(name="s3BucketName")
      private final @Nullable Output<String> s3BucketName;

    public Output<String> getS3BucketName() {
        return this.s3BucketName == null ? Codegen.empty() : this.s3BucketName;
    }

    /**
     * S3 key prefix that follows the name of the bucket you have designated for log file delivery.
     * 
     */
    @Import(name="s3KeyPrefix")
      private final @Nullable Output<String> s3KeyPrefix;

    public Output<String> getS3KeyPrefix() {
        return this.s3KeyPrefix == null ? Codegen.empty() : this.s3KeyPrefix;
    }

    /**
     * Name of the Amazon SNS topic defined for notification of log file delivery.
     * 
     */
    @Import(name="snsTopicName")
      private final @Nullable Output<String> snsTopicName;

    public Output<String> getSnsTopicName() {
        return this.snsTopicName == null ? Codegen.empty() : this.snsTopicName;
    }

    /**
     * Map of tags to assign to the trail. If configured with provider defaultTags present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    public TrailState(
        @Nullable Output<List<TrailAdvancedEventSelectorGetArgs>> advancedEventSelectors,
        @Nullable Output<String> arn,
        @Nullable Output<String> cloudWatchLogsGroupArn,
        @Nullable Output<String> cloudWatchLogsRoleArn,
        @Nullable Output<Boolean> enableLogFileValidation,
        @Nullable Output<Boolean> enableLogging,
        @Nullable Output<List<TrailEventSelectorGetArgs>> eventSelectors,
        @Nullable Output<String> homeRegion,
        @Nullable Output<Boolean> includeGlobalServiceEvents,
        @Nullable Output<List<TrailInsightSelectorGetArgs>> insightSelectors,
        @Nullable Output<Boolean> isMultiRegionTrail,
        @Nullable Output<Boolean> isOrganizationTrail,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<String> name,
        @Nullable Output<String> s3BucketName,
        @Nullable Output<String> s3KeyPrefix,
        @Nullable Output<String> snsTopicName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.advancedEventSelectors = advancedEventSelectors;
        this.arn = arn;
        this.cloudWatchLogsGroupArn = cloudWatchLogsGroupArn;
        this.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
        this.enableLogFileValidation = enableLogFileValidation;
        this.enableLogging = enableLogging;
        this.eventSelectors = eventSelectors;
        this.homeRegion = homeRegion;
        this.includeGlobalServiceEvents = includeGlobalServiceEvents;
        this.insightSelectors = insightSelectors;
        this.isMultiRegionTrail = isMultiRegionTrail;
        this.isOrganizationTrail = isOrganizationTrail;
        this.kmsKeyId = kmsKeyId;
        this.name = name;
        this.s3BucketName = s3BucketName;
        this.s3KeyPrefix = s3KeyPrefix;
        this.snsTopicName = snsTopicName;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private TrailState() {
        this.advancedEventSelectors = Codegen.empty();
        this.arn = Codegen.empty();
        this.cloudWatchLogsGroupArn = Codegen.empty();
        this.cloudWatchLogsRoleArn = Codegen.empty();
        this.enableLogFileValidation = Codegen.empty();
        this.enableLogging = Codegen.empty();
        this.eventSelectors = Codegen.empty();
        this.homeRegion = Codegen.empty();
        this.includeGlobalServiceEvents = Codegen.empty();
        this.insightSelectors = Codegen.empty();
        this.isMultiRegionTrail = Codegen.empty();
        this.isOrganizationTrail = Codegen.empty();
        this.kmsKeyId = Codegen.empty();
        this.name = Codegen.empty();
        this.s3BucketName = Codegen.empty();
        this.s3KeyPrefix = Codegen.empty();
        this.snsTopicName = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrailState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<TrailAdvancedEventSelectorGetArgs>> advancedEventSelectors;
        private @Nullable Output<String> arn;
        private @Nullable Output<String> cloudWatchLogsGroupArn;
        private @Nullable Output<String> cloudWatchLogsRoleArn;
        private @Nullable Output<Boolean> enableLogFileValidation;
        private @Nullable Output<Boolean> enableLogging;
        private @Nullable Output<List<TrailEventSelectorGetArgs>> eventSelectors;
        private @Nullable Output<String> homeRegion;
        private @Nullable Output<Boolean> includeGlobalServiceEvents;
        private @Nullable Output<List<TrailInsightSelectorGetArgs>> insightSelectors;
        private @Nullable Output<Boolean> isMultiRegionTrail;
        private @Nullable Output<Boolean> isOrganizationTrail;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<String> name;
        private @Nullable Output<String> s3BucketName;
        private @Nullable Output<String> s3KeyPrefix;
        private @Nullable Output<String> snsTopicName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(TrailState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedEventSelectors = defaults.advancedEventSelectors;
    	      this.arn = defaults.arn;
    	      this.cloudWatchLogsGroupArn = defaults.cloudWatchLogsGroupArn;
    	      this.cloudWatchLogsRoleArn = defaults.cloudWatchLogsRoleArn;
    	      this.enableLogFileValidation = defaults.enableLogFileValidation;
    	      this.enableLogging = defaults.enableLogging;
    	      this.eventSelectors = defaults.eventSelectors;
    	      this.homeRegion = defaults.homeRegion;
    	      this.includeGlobalServiceEvents = defaults.includeGlobalServiceEvents;
    	      this.insightSelectors = defaults.insightSelectors;
    	      this.isMultiRegionTrail = defaults.isMultiRegionTrail;
    	      this.isOrganizationTrail = defaults.isOrganizationTrail;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.name = defaults.name;
    	      this.s3BucketName = defaults.s3BucketName;
    	      this.s3KeyPrefix = defaults.s3KeyPrefix;
    	      this.snsTopicName = defaults.snsTopicName;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder advancedEventSelectors(@Nullable Output<List<TrailAdvancedEventSelectorGetArgs>> advancedEventSelectors) {
            this.advancedEventSelectors = advancedEventSelectors;
            return this;
        }
        public Builder advancedEventSelectors(@Nullable List<TrailAdvancedEventSelectorGetArgs> advancedEventSelectors) {
            this.advancedEventSelectors = Codegen.ofNullable(advancedEventSelectors);
            return this;
        }
        public Builder advancedEventSelectors(TrailAdvancedEventSelectorGetArgs... advancedEventSelectors) {
            return advancedEventSelectors(List.of(advancedEventSelectors));
        }
        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder cloudWatchLogsGroupArn(@Nullable Output<String> cloudWatchLogsGroupArn) {
            this.cloudWatchLogsGroupArn = cloudWatchLogsGroupArn;
            return this;
        }
        public Builder cloudWatchLogsGroupArn(@Nullable String cloudWatchLogsGroupArn) {
            this.cloudWatchLogsGroupArn = Codegen.ofNullable(cloudWatchLogsGroupArn);
            return this;
        }
        public Builder cloudWatchLogsRoleArn(@Nullable Output<String> cloudWatchLogsRoleArn) {
            this.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
            return this;
        }
        public Builder cloudWatchLogsRoleArn(@Nullable String cloudWatchLogsRoleArn) {
            this.cloudWatchLogsRoleArn = Codegen.ofNullable(cloudWatchLogsRoleArn);
            return this;
        }
        public Builder enableLogFileValidation(@Nullable Output<Boolean> enableLogFileValidation) {
            this.enableLogFileValidation = enableLogFileValidation;
            return this;
        }
        public Builder enableLogFileValidation(@Nullable Boolean enableLogFileValidation) {
            this.enableLogFileValidation = Codegen.ofNullable(enableLogFileValidation);
            return this;
        }
        public Builder enableLogging(@Nullable Output<Boolean> enableLogging) {
            this.enableLogging = enableLogging;
            return this;
        }
        public Builder enableLogging(@Nullable Boolean enableLogging) {
            this.enableLogging = Codegen.ofNullable(enableLogging);
            return this;
        }
        public Builder eventSelectors(@Nullable Output<List<TrailEventSelectorGetArgs>> eventSelectors) {
            this.eventSelectors = eventSelectors;
            return this;
        }
        public Builder eventSelectors(@Nullable List<TrailEventSelectorGetArgs> eventSelectors) {
            this.eventSelectors = Codegen.ofNullable(eventSelectors);
            return this;
        }
        public Builder eventSelectors(TrailEventSelectorGetArgs... eventSelectors) {
            return eventSelectors(List.of(eventSelectors));
        }
        public Builder homeRegion(@Nullable Output<String> homeRegion) {
            this.homeRegion = homeRegion;
            return this;
        }
        public Builder homeRegion(@Nullable String homeRegion) {
            this.homeRegion = Codegen.ofNullable(homeRegion);
            return this;
        }
        public Builder includeGlobalServiceEvents(@Nullable Output<Boolean> includeGlobalServiceEvents) {
            this.includeGlobalServiceEvents = includeGlobalServiceEvents;
            return this;
        }
        public Builder includeGlobalServiceEvents(@Nullable Boolean includeGlobalServiceEvents) {
            this.includeGlobalServiceEvents = Codegen.ofNullable(includeGlobalServiceEvents);
            return this;
        }
        public Builder insightSelectors(@Nullable Output<List<TrailInsightSelectorGetArgs>> insightSelectors) {
            this.insightSelectors = insightSelectors;
            return this;
        }
        public Builder insightSelectors(@Nullable List<TrailInsightSelectorGetArgs> insightSelectors) {
            this.insightSelectors = Codegen.ofNullable(insightSelectors);
            return this;
        }
        public Builder insightSelectors(TrailInsightSelectorGetArgs... insightSelectors) {
            return insightSelectors(List.of(insightSelectors));
        }
        public Builder isMultiRegionTrail(@Nullable Output<Boolean> isMultiRegionTrail) {
            this.isMultiRegionTrail = isMultiRegionTrail;
            return this;
        }
        public Builder isMultiRegionTrail(@Nullable Boolean isMultiRegionTrail) {
            this.isMultiRegionTrail = Codegen.ofNullable(isMultiRegionTrail);
            return this;
        }
        public Builder isOrganizationTrail(@Nullable Output<Boolean> isOrganizationTrail) {
            this.isOrganizationTrail = isOrganizationTrail;
            return this;
        }
        public Builder isOrganizationTrail(@Nullable Boolean isOrganizationTrail) {
            this.isOrganizationTrail = Codegen.ofNullable(isOrganizationTrail);
            return this;
        }
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Codegen.ofNullable(kmsKeyId);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder s3BucketName(@Nullable Output<String> s3BucketName) {
            this.s3BucketName = s3BucketName;
            return this;
        }
        public Builder s3BucketName(@Nullable String s3BucketName) {
            this.s3BucketName = Codegen.ofNullable(s3BucketName);
            return this;
        }
        public Builder s3KeyPrefix(@Nullable Output<String> s3KeyPrefix) {
            this.s3KeyPrefix = s3KeyPrefix;
            return this;
        }
        public Builder s3KeyPrefix(@Nullable String s3KeyPrefix) {
            this.s3KeyPrefix = Codegen.ofNullable(s3KeyPrefix);
            return this;
        }
        public Builder snsTopicName(@Nullable Output<String> snsTopicName) {
            this.snsTopicName = snsTopicName;
            return this;
        }
        public Builder snsTopicName(@Nullable String snsTopicName) {
            this.snsTopicName = Codegen.ofNullable(snsTopicName);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }        public TrailState build() {
            return new TrailState(advancedEventSelectors, arn, cloudWatchLogsGroupArn, cloudWatchLogsRoleArn, enableLogFileValidation, enableLogging, eventSelectors, homeRegion, includeGlobalServiceEvents, insightSelectors, isMultiRegionTrail, isOrganizationTrail, kmsKeyId, name, s3BucketName, s3KeyPrefix, snsTopicName, tags, tagsAll);
        }
    }
}
