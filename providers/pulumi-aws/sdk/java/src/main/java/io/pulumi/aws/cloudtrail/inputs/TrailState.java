// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudtrail.inputs;

import io.pulumi.aws.cloudtrail.inputs.TrailAdvancedEventSelectorGetArgs;
import io.pulumi.aws.cloudtrail.inputs.TrailEventSelectorGetArgs;
import io.pulumi.aws.cloudtrail.inputs.TrailInsightSelectorGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TrailState extends io.pulumi.resources.ResourceArgs {

    public static final TrailState Empty = new TrailState();

    /**
     * Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `event_selector`.
     * 
     */
    @InputImport(name="advancedEventSelectors")
      private final @Nullable Input<List<TrailAdvancedEventSelectorGetArgs>> advancedEventSelectors;

    public Input<List<TrailAdvancedEventSelectorGetArgs>> getAdvancedEventSelectors() {
        return this.advancedEventSelectors == null ? Input.empty() : this.advancedEventSelectors;
    }

    /**
     * ARN of the trail.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
     * 
     */
    @InputImport(name="cloudWatchLogsGroupArn")
      private final @Nullable Input<String> cloudWatchLogsGroupArn;

    public Input<String> getCloudWatchLogsGroupArn() {
        return this.cloudWatchLogsGroupArn == null ? Input.empty() : this.cloudWatchLogsGroupArn;
    }

    /**
     * Role for the CloudWatch Logs endpoint to assume to write to a userâ€™s log group.
     * 
     */
    @InputImport(name="cloudWatchLogsRoleArn")
      private final @Nullable Input<String> cloudWatchLogsRoleArn;

    public Input<String> getCloudWatchLogsRoleArn() {
        return this.cloudWatchLogsRoleArn == null ? Input.empty() : this.cloudWatchLogsRoleArn;
    }

    /**
     * Whether log file integrity validation is enabled. Defaults to `false`.
     * 
     */
    @InputImport(name="enableLogFileValidation")
      private final @Nullable Input<Boolean> enableLogFileValidation;

    public Input<Boolean> getEnableLogFileValidation() {
        return this.enableLogFileValidation == null ? Input.empty() : this.enableLogFileValidation;
    }

    /**
     * Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
     * 
     */
    @InputImport(name="enableLogging")
      private final @Nullable Input<Boolean> enableLogging;

    public Input<Boolean> getEnableLogging() {
        return this.enableLogging == null ? Input.empty() : this.enableLogging;
    }

    /**
     * Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advanced_event_selector`.
     * 
     */
    @InputImport(name="eventSelectors")
      private final @Nullable Input<List<TrailEventSelectorGetArgs>> eventSelectors;

    public Input<List<TrailEventSelectorGetArgs>> getEventSelectors() {
        return this.eventSelectors == null ? Input.empty() : this.eventSelectors;
    }

    /**
     * Region in which the trail was created.
     * 
     */
    @InputImport(name="homeRegion")
      private final @Nullable Input<String> homeRegion;

    public Input<String> getHomeRegion() {
        return this.homeRegion == null ? Input.empty() : this.homeRegion;
    }

    /**
     * Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
     * 
     */
    @InputImport(name="includeGlobalServiceEvents")
      private final @Nullable Input<Boolean> includeGlobalServiceEvents;

    public Input<Boolean> getIncludeGlobalServiceEvents() {
        return this.includeGlobalServiceEvents == null ? Input.empty() : this.includeGlobalServiceEvents;
    }

    /**
     * Configuration block for identifying unusual operational activity. See details below.
     * 
     */
    @InputImport(name="insightSelectors")
      private final @Nullable Input<List<TrailInsightSelectorGetArgs>> insightSelectors;

    public Input<List<TrailInsightSelectorGetArgs>> getInsightSelectors() {
        return this.insightSelectors == null ? Input.empty() : this.insightSelectors;
    }

    /**
     * Whether the trail is created in the current region or in all regions. Defaults to `false`.
     * 
     */
    @InputImport(name="isMultiRegionTrail")
      private final @Nullable Input<Boolean> isMultiRegionTrail;

    public Input<Boolean> getIsMultiRegionTrail() {
        return this.isMultiRegionTrail == null ? Input.empty() : this.isMultiRegionTrail;
    }

    /**
     * Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
     * 
     */
    @InputImport(name="isOrganizationTrail")
      private final @Nullable Input<Boolean> isOrganizationTrail;

    public Input<Boolean> getIsOrganizationTrail() {
        return this.isOrganizationTrail == null ? Input.empty() : this.isOrganizationTrail;
    }

    /**
     * KMS key ARN to use to encrypt the logs delivered by CloudTrail.
     * 
     */
    @InputImport(name="kmsKeyId")
      private final @Nullable Input<String> kmsKeyId;

    public Input<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Input.empty() : this.kmsKeyId;
    }

    /**
     * Specifies the name of the advanced event selector.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Name of the S3 bucket designated for publishing log files.
     * 
     */
    @InputImport(name="s3BucketName")
      private final @Nullable Input<String> s3BucketName;

    public Input<String> getS3BucketName() {
        return this.s3BucketName == null ? Input.empty() : this.s3BucketName;
    }

    /**
     * S3 key prefix that follows the name of the bucket you have designated for log file delivery.
     * 
     */
    @InputImport(name="s3KeyPrefix")
      private final @Nullable Input<String> s3KeyPrefix;

    public Input<String> getS3KeyPrefix() {
        return this.s3KeyPrefix == null ? Input.empty() : this.s3KeyPrefix;
    }

    /**
     * Name of the Amazon SNS topic defined for notification of log file delivery.
     * 
     */
    @InputImport(name="snsTopicName")
      private final @Nullable Input<String> snsTopicName;

    public Input<String> getSnsTopicName() {
        return this.snsTopicName == null ? Input.empty() : this.snsTopicName;
    }

    /**
     * Map of tags to assign to the trail. If configured with provider defaultTags present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public TrailState(
        @Nullable Input<List<TrailAdvancedEventSelectorGetArgs>> advancedEventSelectors,
        @Nullable Input<String> arn,
        @Nullable Input<String> cloudWatchLogsGroupArn,
        @Nullable Input<String> cloudWatchLogsRoleArn,
        @Nullable Input<Boolean> enableLogFileValidation,
        @Nullable Input<Boolean> enableLogging,
        @Nullable Input<List<TrailEventSelectorGetArgs>> eventSelectors,
        @Nullable Input<String> homeRegion,
        @Nullable Input<Boolean> includeGlobalServiceEvents,
        @Nullable Input<List<TrailInsightSelectorGetArgs>> insightSelectors,
        @Nullable Input<Boolean> isMultiRegionTrail,
        @Nullable Input<Boolean> isOrganizationTrail,
        @Nullable Input<String> kmsKeyId,
        @Nullable Input<String> name,
        @Nullable Input<String> s3BucketName,
        @Nullable Input<String> s3KeyPrefix,
        @Nullable Input<String> snsTopicName,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.advancedEventSelectors = advancedEventSelectors;
        this.arn = arn;
        this.cloudWatchLogsGroupArn = cloudWatchLogsGroupArn;
        this.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
        this.enableLogFileValidation = enableLogFileValidation;
        this.enableLogging = enableLogging;
        this.eventSelectors = eventSelectors;
        this.homeRegion = homeRegion;
        this.includeGlobalServiceEvents = includeGlobalServiceEvents;
        this.insightSelectors = insightSelectors;
        this.isMultiRegionTrail = isMultiRegionTrail;
        this.isOrganizationTrail = isOrganizationTrail;
        this.kmsKeyId = kmsKeyId;
        this.name = name;
        this.s3BucketName = s3BucketName;
        this.s3KeyPrefix = s3KeyPrefix;
        this.snsTopicName = snsTopicName;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private TrailState() {
        this.advancedEventSelectors = Input.empty();
        this.arn = Input.empty();
        this.cloudWatchLogsGroupArn = Input.empty();
        this.cloudWatchLogsRoleArn = Input.empty();
        this.enableLogFileValidation = Input.empty();
        this.enableLogging = Input.empty();
        this.eventSelectors = Input.empty();
        this.homeRegion = Input.empty();
        this.includeGlobalServiceEvents = Input.empty();
        this.insightSelectors = Input.empty();
        this.isMultiRegionTrail = Input.empty();
        this.isOrganizationTrail = Input.empty();
        this.kmsKeyId = Input.empty();
        this.name = Input.empty();
        this.s3BucketName = Input.empty();
        this.s3KeyPrefix = Input.empty();
        this.snsTopicName = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrailState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<TrailAdvancedEventSelectorGetArgs>> advancedEventSelectors;
        private @Nullable Input<String> arn;
        private @Nullable Input<String> cloudWatchLogsGroupArn;
        private @Nullable Input<String> cloudWatchLogsRoleArn;
        private @Nullable Input<Boolean> enableLogFileValidation;
        private @Nullable Input<Boolean> enableLogging;
        private @Nullable Input<List<TrailEventSelectorGetArgs>> eventSelectors;
        private @Nullable Input<String> homeRegion;
        private @Nullable Input<Boolean> includeGlobalServiceEvents;
        private @Nullable Input<List<TrailInsightSelectorGetArgs>> insightSelectors;
        private @Nullable Input<Boolean> isMultiRegionTrail;
        private @Nullable Input<Boolean> isOrganizationTrail;
        private @Nullable Input<String> kmsKeyId;
        private @Nullable Input<String> name;
        private @Nullable Input<String> s3BucketName;
        private @Nullable Input<String> s3KeyPrefix;
        private @Nullable Input<String> snsTopicName;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(TrailState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedEventSelectors = defaults.advancedEventSelectors;
    	      this.arn = defaults.arn;
    	      this.cloudWatchLogsGroupArn = defaults.cloudWatchLogsGroupArn;
    	      this.cloudWatchLogsRoleArn = defaults.cloudWatchLogsRoleArn;
    	      this.enableLogFileValidation = defaults.enableLogFileValidation;
    	      this.enableLogging = defaults.enableLogging;
    	      this.eventSelectors = defaults.eventSelectors;
    	      this.homeRegion = defaults.homeRegion;
    	      this.includeGlobalServiceEvents = defaults.includeGlobalServiceEvents;
    	      this.insightSelectors = defaults.insightSelectors;
    	      this.isMultiRegionTrail = defaults.isMultiRegionTrail;
    	      this.isOrganizationTrail = defaults.isOrganizationTrail;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.name = defaults.name;
    	      this.s3BucketName = defaults.s3BucketName;
    	      this.s3KeyPrefix = defaults.s3KeyPrefix;
    	      this.snsTopicName = defaults.snsTopicName;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setAdvancedEventSelectors(@Nullable Input<List<TrailAdvancedEventSelectorGetArgs>> advancedEventSelectors) {
            this.advancedEventSelectors = advancedEventSelectors;
            return this;
        }

        public Builder setAdvancedEventSelectors(@Nullable List<TrailAdvancedEventSelectorGetArgs> advancedEventSelectors) {
            this.advancedEventSelectors = Input.ofNullable(advancedEventSelectors);
            return this;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setCloudWatchLogsGroupArn(@Nullable Input<String> cloudWatchLogsGroupArn) {
            this.cloudWatchLogsGroupArn = cloudWatchLogsGroupArn;
            return this;
        }

        public Builder setCloudWatchLogsGroupArn(@Nullable String cloudWatchLogsGroupArn) {
            this.cloudWatchLogsGroupArn = Input.ofNullable(cloudWatchLogsGroupArn);
            return this;
        }

        public Builder setCloudWatchLogsRoleArn(@Nullable Input<String> cloudWatchLogsRoleArn) {
            this.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
            return this;
        }

        public Builder setCloudWatchLogsRoleArn(@Nullable String cloudWatchLogsRoleArn) {
            this.cloudWatchLogsRoleArn = Input.ofNullable(cloudWatchLogsRoleArn);
            return this;
        }

        public Builder setEnableLogFileValidation(@Nullable Input<Boolean> enableLogFileValidation) {
            this.enableLogFileValidation = enableLogFileValidation;
            return this;
        }

        public Builder setEnableLogFileValidation(@Nullable Boolean enableLogFileValidation) {
            this.enableLogFileValidation = Input.ofNullable(enableLogFileValidation);
            return this;
        }

        public Builder setEnableLogging(@Nullable Input<Boolean> enableLogging) {
            this.enableLogging = enableLogging;
            return this;
        }

        public Builder setEnableLogging(@Nullable Boolean enableLogging) {
            this.enableLogging = Input.ofNullable(enableLogging);
            return this;
        }

        public Builder setEventSelectors(@Nullable Input<List<TrailEventSelectorGetArgs>> eventSelectors) {
            this.eventSelectors = eventSelectors;
            return this;
        }

        public Builder setEventSelectors(@Nullable List<TrailEventSelectorGetArgs> eventSelectors) {
            this.eventSelectors = Input.ofNullable(eventSelectors);
            return this;
        }

        public Builder setHomeRegion(@Nullable Input<String> homeRegion) {
            this.homeRegion = homeRegion;
            return this;
        }

        public Builder setHomeRegion(@Nullable String homeRegion) {
            this.homeRegion = Input.ofNullable(homeRegion);
            return this;
        }

        public Builder setIncludeGlobalServiceEvents(@Nullable Input<Boolean> includeGlobalServiceEvents) {
            this.includeGlobalServiceEvents = includeGlobalServiceEvents;
            return this;
        }

        public Builder setIncludeGlobalServiceEvents(@Nullable Boolean includeGlobalServiceEvents) {
            this.includeGlobalServiceEvents = Input.ofNullable(includeGlobalServiceEvents);
            return this;
        }

        public Builder setInsightSelectors(@Nullable Input<List<TrailInsightSelectorGetArgs>> insightSelectors) {
            this.insightSelectors = insightSelectors;
            return this;
        }

        public Builder setInsightSelectors(@Nullable List<TrailInsightSelectorGetArgs> insightSelectors) {
            this.insightSelectors = Input.ofNullable(insightSelectors);
            return this;
        }

        public Builder setIsMultiRegionTrail(@Nullable Input<Boolean> isMultiRegionTrail) {
            this.isMultiRegionTrail = isMultiRegionTrail;
            return this;
        }

        public Builder setIsMultiRegionTrail(@Nullable Boolean isMultiRegionTrail) {
            this.isMultiRegionTrail = Input.ofNullable(isMultiRegionTrail);
            return this;
        }

        public Builder setIsOrganizationTrail(@Nullable Input<Boolean> isOrganizationTrail) {
            this.isOrganizationTrail = isOrganizationTrail;
            return this;
        }

        public Builder setIsOrganizationTrail(@Nullable Boolean isOrganizationTrail) {
            this.isOrganizationTrail = Input.ofNullable(isOrganizationTrail);
            return this;
        }

        public Builder setKmsKeyId(@Nullable Input<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder setKmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Input.ofNullable(kmsKeyId);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setS3BucketName(@Nullable Input<String> s3BucketName) {
            this.s3BucketName = s3BucketName;
            return this;
        }

        public Builder setS3BucketName(@Nullable String s3BucketName) {
            this.s3BucketName = Input.ofNullable(s3BucketName);
            return this;
        }

        public Builder setS3KeyPrefix(@Nullable Input<String> s3KeyPrefix) {
            this.s3KeyPrefix = s3KeyPrefix;
            return this;
        }

        public Builder setS3KeyPrefix(@Nullable String s3KeyPrefix) {
            this.s3KeyPrefix = Input.ofNullable(s3KeyPrefix);
            return this;
        }

        public Builder setSnsTopicName(@Nullable Input<String> snsTopicName) {
            this.snsTopicName = snsTopicName;
            return this;
        }

        public Builder setSnsTopicName(@Nullable String snsTopicName) {
            this.snsTopicName = Input.ofNullable(snsTopicName);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public TrailState build() {
            return new TrailState(advancedEventSelectors, arn, cloudWatchLogsGroupArn, cloudWatchLogsRoleArn, enableLogFileValidation, enableLogging, eventSelectors, homeRegion, includeGlobalServiceEvents, insightSelectors, isMultiRegionTrail, isOrganizationTrail, kmsKeyId, name, s3BucketName, s3KeyPrefix, snsTopicName, tags, tagsAll);
        }
    }
}
