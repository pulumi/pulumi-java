// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ssm;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.ssm.PatchBaselineArgs;
import io.pulumi.aws.ssm.inputs.PatchBaselineState;
import io.pulumi.aws.ssm.outputs.PatchBaselineApprovalRule;
import io.pulumi.aws.ssm.outputs.PatchBaselineGlobalFilter;
import io.pulumi.aws.ssm.outputs.PatchBaselineSource;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides an SSM Patch Baseline resource
 * 
 * > **NOTE on Patch Baselines:** The `approved_patches` and `approval_rule` are
 * both marked as optional fields, but the Patch Baseline requires that at least one
 * of them is specified.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * Basic usage using `approved_patches` only
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const production = new aws.ssm.PatchBaseline("production", {
 *     approvedPatches: ["KB123456"],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * production = aws.ssm.PatchBaseline("production", approved_patches=["KB123456"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var production = new Aws.Ssm.PatchBaseline("production", new Aws.Ssm.PatchBaselineArgs
 *         {
 *             ApprovedPatches = 
 *             {
 *                 "KB123456",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ssm"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ssm.NewPatchBaseline(ctx, "production", &ssm.PatchBaselineArgs{
 * 			ApprovedPatches: pulumi.StringArray{
 * 				pulumi.String("KB123456"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * Advanced usage, specifying patch filters
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const production = new aws.ssm.PatchBaseline("production", {
 *     approvalRules: [
 *         {
 *             approveAfterDays: 7,
 *             complianceLevel: "HIGH",
 *             patchFilters: [
 *                 {
 *                     key: "PRODUCT",
 *                     values: ["WindowsServer2016"],
 *                 },
 *                 {
 *                     key: "CLASSIFICATION",
 *                     values: [
 *                         "CriticalUpdates",
 *                         "SecurityUpdates",
 *                         "Updates",
 *                     ],
 *                 },
 *                 {
 *                     key: "MSRC_SEVERITY",
 *                     values: [
 *                         "Critical",
 *                         "Important",
 *                         "Moderate",
 *                     ],
 *                 },
 *             ],
 *         },
 *         {
 *             approveAfterDays: 7,
 *             patchFilters: [{
 *                 key: "PRODUCT",
 *                 values: ["WindowsServer2012"],
 *             }],
 *         },
 *     ],
 *     approvedPatches: [
 *         "KB123456",
 *         "KB456789",
 *     ],
 *     description: "Patch Baseline Description",
 *     globalFilters: [
 *         {
 *             key: "PRODUCT",
 *             values: ["WindowsServer2008"],
 *         },
 *         {
 *             key: "CLASSIFICATION",
 *             values: ["ServicePacks"],
 *         },
 *         {
 *             key: "MSRC_SEVERITY",
 *             values: ["Low"],
 *         },
 *     ],
 *     rejectedPatches: ["KB987654"],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * production = aws.ssm.PatchBaseline("production",
 *     approval_rules=[
 *         aws.ssm.PatchBaselineApprovalRuleArgs(
 *             approve_after_days=7,
 *             compliance_level="HIGH",
 *             patch_filters=[
 *                 aws.ssm.PatchBaselineApprovalRulePatchFilterArgs(
 *                     key="PRODUCT",
 *                     values=["WindowsServer2016"],
 *                 ),
 *                 aws.ssm.PatchBaselineApprovalRulePatchFilterArgs(
 *                     key="CLASSIFICATION",
 *                     values=[
 *                         "CriticalUpdates",
 *                         "SecurityUpdates",
 *                         "Updates",
 *                     ],
 *                 ),
 *                 aws.ssm.PatchBaselineApprovalRulePatchFilterArgs(
 *                     key="MSRC_SEVERITY",
 *                     values=[
 *                         "Critical",
 *                         "Important",
 *                         "Moderate",
 *                     ],
 *                 ),
 *             ],
 *         ),
 *         aws.ssm.PatchBaselineApprovalRuleArgs(
 *             approve_after_days=7,
 *             patch_filters=[aws.ssm.PatchBaselineApprovalRulePatchFilterArgs(
 *                 key="PRODUCT",
 *                 values=["WindowsServer2012"],
 *             )],
 *         ),
 *     ],
 *     approved_patches=[
 *         "KB123456",
 *         "KB456789",
 *     ],
 *     description="Patch Baseline Description",
 *     global_filters=[
 *         aws.ssm.PatchBaselineGlobalFilterArgs(
 *             key="PRODUCT",
 *             values=["WindowsServer2008"],
 *         ),
 *         aws.ssm.PatchBaselineGlobalFilterArgs(
 *             key="CLASSIFICATION",
 *             values=["ServicePacks"],
 *         ),
 *         aws.ssm.PatchBaselineGlobalFilterArgs(
 *             key="MSRC_SEVERITY",
 *             values=["Low"],
 *         ),
 *     ],
 *     rejected_patches=["KB987654"])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var production = new Aws.Ssm.PatchBaseline("production", new Aws.Ssm.PatchBaselineArgs
 *         {
 *             ApprovalRules = 
 *             {
 *                 new Aws.Ssm.Inputs.PatchBaselineApprovalRuleArgs
 *                 {
 *                     ApproveAfterDays = 7,
 *                     ComplianceLevel = "HIGH",
 *                     PatchFilters = 
 *                     {
 *                         new Aws.Ssm.Inputs.PatchBaselineApprovalRulePatchFilterArgs
 *                         {
 *                             Key = "PRODUCT",
 *                             Values = 
 *                             {
 *                                 "WindowsServer2016",
 *                             },
 *                         },
 *                         new Aws.Ssm.Inputs.PatchBaselineApprovalRulePatchFilterArgs
 *                         {
 *                             Key = "CLASSIFICATION",
 *                             Values = 
 *                             {
 *                                 "CriticalUpdates",
 *                                 "SecurityUpdates",
 *                                 "Updates",
 *                             },
 *                         },
 *                         new Aws.Ssm.Inputs.PatchBaselineApprovalRulePatchFilterArgs
 *                         {
 *                             Key = "MSRC_SEVERITY",
 *                             Values = 
 *                             {
 *                                 "Critical",
 *                                 "Important",
 *                                 "Moderate",
 *                             },
 *                         },
 *                     },
 *                 },
 *                 new Aws.Ssm.Inputs.PatchBaselineApprovalRuleArgs
 *                 {
 *                     ApproveAfterDays = 7,
 *                     PatchFilters = 
 *                     {
 *                         new Aws.Ssm.Inputs.PatchBaselineApprovalRulePatchFilterArgs
 *                         {
 *                             Key = "PRODUCT",
 *                             Values = 
 *                             {
 *                                 "WindowsServer2012",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *             ApprovedPatches = 
 *             {
 *                 "KB123456",
 *                 "KB456789",
 *             },
 *             Description = "Patch Baseline Description",
 *             GlobalFilters = 
 *             {
 *                 new Aws.Ssm.Inputs.PatchBaselineGlobalFilterArgs
 *                 {
 *                     Key = "PRODUCT",
 *                     Values = 
 *                     {
 *                         "WindowsServer2008",
 *                     },
 *                 },
 *                 new Aws.Ssm.Inputs.PatchBaselineGlobalFilterArgs
 *                 {
 *                     Key = "CLASSIFICATION",
 *                     Values = 
 *                     {
 *                         "ServicePacks",
 *                     },
 *                 },
 *                 new Aws.Ssm.Inputs.PatchBaselineGlobalFilterArgs
 *                 {
 *                     Key = "MSRC_SEVERITY",
 *                     Values = 
 *                     {
 *                         "Low",
 *                     },
 *                 },
 *             },
 *             RejectedPatches = 
 *             {
 *                 "KB987654",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ssm"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ssm.NewPatchBaseline(ctx, "production", &ssm.PatchBaselineArgs{
 * 			ApprovalRules: ssm.PatchBaselineApprovalRuleArray{
 * 				&ssm.PatchBaselineApprovalRuleArgs{
 * 					ApproveAfterDays: pulumi.Int(7),
 * 					ComplianceLevel:  pulumi.String("HIGH"),
 * 					PatchFilters: ssm.PatchBaselineApprovalRulePatchFilterArray{
 * 						&ssm.PatchBaselineApprovalRulePatchFilterArgs{
 * 							Key: pulumi.String("PRODUCT"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.String("WindowsServer2016"),
 * 							},
 * 						},
 * 						&ssm.PatchBaselineApprovalRulePatchFilterArgs{
 * 							Key: pulumi.String("CLASSIFICATION"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.String("CriticalUpdates"),
 * 								pulumi.String("SecurityUpdates"),
 * 								pulumi.String("Updates"),
 * 							},
 * 						},
 * 						&ssm.PatchBaselineApprovalRulePatchFilterArgs{
 * 							Key: pulumi.String("MSRC_SEVERITY"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.String("Critical"),
 * 								pulumi.String("Important"),
 * 								pulumi.String("Moderate"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 				&ssm.PatchBaselineApprovalRuleArgs{
 * 					ApproveAfterDays: pulumi.Int(7),
 * 					PatchFilters: ssm.PatchBaselineApprovalRulePatchFilterArray{
 * 						&ssm.PatchBaselineApprovalRulePatchFilterArgs{
 * 							Key: pulumi.String("PRODUCT"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.String("WindowsServer2012"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 			ApprovedPatches: pulumi.StringArray{
 * 				pulumi.String("KB123456"),
 * 				pulumi.String("KB456789"),
 * 			},
 * 			Description: pulumi.String("Patch Baseline Description"),
 * 			GlobalFilters: ssm.PatchBaselineGlobalFilterArray{
 * 				&ssm.PatchBaselineGlobalFilterArgs{
 * 					Key: pulumi.String("PRODUCT"),
 * 					Values: pulumi.StringArray{
 * 						pulumi.String("WindowsServer2008"),
 * 					},
 * 				},
 * 				&ssm.PatchBaselineGlobalFilterArgs{
 * 					Key: pulumi.String("CLASSIFICATION"),
 * 					Values: pulumi.StringArray{
 * 						pulumi.String("ServicePacks"),
 * 					},
 * 				},
 * 				&ssm.PatchBaselineGlobalFilterArgs{
 * 					Key: pulumi.String("MSRC_SEVERITY"),
 * 					Values: pulumi.StringArray{
 * 						pulumi.String("Low"),
 * 					},
 * 				},
 * 			},
 * 			RejectedPatches: pulumi.StringArray{
 * 				pulumi.String("KB987654"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * Advanced usage, specifying Microsoft application and Windows patch rules
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const windowsOsApps = new aws.ssm.PatchBaseline("windows_os_apps", {
 *     approvalRules: [
 *         {
 *             approveAfterDays: 7,
 *             patchFilters: [
 *                 {
 *                     key: "CLASSIFICATION",
 *                     values: [
 *                         "CriticalUpdates",
 *                         "SecurityUpdates",
 *                     ],
 *                 },
 *                 {
 *                     key: "MSRC_SEVERITY",
 *                     values: [
 *                         "Critical",
 *                         "Important",
 *                     ],
 *                 },
 *             ],
 *         },
 *         {
 *             approveAfterDays: 7,
 *             patchFilters: [
 *                 {
 *                     key: "PATCH_SET",
 *                     values: ["APPLICATION"],
 *                 },
 *                 // Filter on Microsoft product if necessary
 *                 {
 *                     key: "PRODUCT",
 *                     values: [
 *                         "Office 2013",
 *                         "Office 2016",
 *                     ],
 *                 },
 *             ],
 *         },
 *     ],
 *     description: "Patch both Windows and Microsoft apps",
 *     operatingSystem: "WINDOWS",
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * windows_os_apps = aws.ssm.PatchBaseline("windowsOsApps",
 *     approval_rules=[
 *         aws.ssm.PatchBaselineApprovalRuleArgs(
 *             approve_after_days=7,
 *             patch_filters=[
 *                 aws.ssm.PatchBaselineApprovalRulePatchFilterArgs(
 *                     key="CLASSIFICATION",
 *                     values=[
 *                         "CriticalUpdates",
 *                         "SecurityUpdates",
 *                     ],
 *                 ),
 *                 aws.ssm.PatchBaselineApprovalRulePatchFilterArgs(
 *                     key="MSRC_SEVERITY",
 *                     values=[
 *                         "Critical",
 *                         "Important",
 *                     ],
 *                 ),
 *             ],
 *         ),
 *         aws.ssm.PatchBaselineApprovalRuleArgs(
 *             approve_after_days=7,
 *             patch_filters=[
 *                 aws.ssm.PatchBaselineApprovalRulePatchFilterArgs(
 *                     key="PATCH_SET",
 *                     values=["APPLICATION"],
 *                 ),
 *                 aws.ssm.PatchBaselineApprovalRulePatchFilterArgs(
 *                     key="PRODUCT",
 *                     values=[
 *                         "Office 2013",
 *                         "Office 2016",
 *                     ],
 *                 ),
 *             ],
 *         ),
 *     ],
 *     description="Patch both Windows and Microsoft apps",
 *     operating_system="WINDOWS")
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var windowsOsApps = new Aws.Ssm.PatchBaseline("windowsOsApps", new Aws.Ssm.PatchBaselineArgs
 *         {
 *             ApprovalRules = 
 *             {
 *                 new Aws.Ssm.Inputs.PatchBaselineApprovalRuleArgs
 *                 {
 *                     ApproveAfterDays = 7,
 *                     PatchFilters = 
 *                     {
 *                         new Aws.Ssm.Inputs.PatchBaselineApprovalRulePatchFilterArgs
 *                         {
 *                             Key = "CLASSIFICATION",
 *                             Values = 
 *                             {
 *                                 "CriticalUpdates",
 *                                 "SecurityUpdates",
 *                             },
 *                         },
 *                         new Aws.Ssm.Inputs.PatchBaselineApprovalRulePatchFilterArgs
 *                         {
 *                             Key = "MSRC_SEVERITY",
 *                             Values = 
 *                             {
 *                                 "Critical",
 *                                 "Important",
 *                             },
 *                         },
 *                     },
 *                 },
 *                 new Aws.Ssm.Inputs.PatchBaselineApprovalRuleArgs
 *                 {
 *                     ApproveAfterDays = 7,
 *                     PatchFilters = 
 *                     {
 *                         new Aws.Ssm.Inputs.PatchBaselineApprovalRulePatchFilterArgs
 *                         {
 *                             Key = "PATCH_SET",
 *                             Values = 
 *                             {
 *                                 "APPLICATION",
 *                             },
 *                         },
 *                         new Aws.Ssm.Inputs.PatchBaselineApprovalRulePatchFilterArgs
 *                         {
 *                             Key = "PRODUCT",
 *                             Values = 
 *                             {
 *                                 "Office 2013",
 *                                 "Office 2016",
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *             Description = "Patch both Windows and Microsoft apps",
 *             OperatingSystem = "WINDOWS",
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ssm"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ssm.NewPatchBaseline(ctx, "windowsOsApps", &ssm.PatchBaselineArgs{
 * 			ApprovalRules: ssm.PatchBaselineApprovalRuleArray{
 * 				&ssm.PatchBaselineApprovalRuleArgs{
 * 					ApproveAfterDays: pulumi.Int(7),
 * 					PatchFilters: ssm.PatchBaselineApprovalRulePatchFilterArray{
 * 						&ssm.PatchBaselineApprovalRulePatchFilterArgs{
 * 							Key: pulumi.String("CLASSIFICATION"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.String("CriticalUpdates"),
 * 								pulumi.String("SecurityUpdates"),
 * 							},
 * 						},
 * 						&ssm.PatchBaselineApprovalRulePatchFilterArgs{
 * 							Key: pulumi.String("MSRC_SEVERITY"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.String("Critical"),
 * 								pulumi.String("Important"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 				&ssm.PatchBaselineApprovalRuleArgs{
 * 					ApproveAfterDays: pulumi.Int(7),
 * 					PatchFilters: ssm.PatchBaselineApprovalRulePatchFilterArray{
 * 						&ssm.PatchBaselineApprovalRulePatchFilterArgs{
 * 							Key: pulumi.String("PATCH_SET"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.String("APPLICATION"),
 * 							},
 * 						},
 * 						&ssm.PatchBaselineApprovalRulePatchFilterArgs{
 * 							Key: pulumi.String("PRODUCT"),
 * 							Values: pulumi.StringArray{
 * 								pulumi.String("Office 2013"),
 * 								pulumi.String("Office 2016"),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 			Description:     pulumi.String("Patch both Windows and Microsoft apps"),
 * 			OperatingSystem: pulumi.String("WINDOWS"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * 
 * Advanced usage, specifying alternate patch source repository
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const al201709 = new aws.ssm.PatchBaseline("al_2017_09", {
 *     approvalRules: [{}],
 *     description: "My patch repository for Amazon Linux 2017.09",
 *     operatingSystem: "AMAZON_LINUX",
 *     sources: [{
 *         configuration: `[amzn-main]
 * name=amzn-main-Base
 * mirrorlist=http://repo./$awsregion./$awsdomain//$releasever/main/mirror.list
 * mirrorlist_expire=300
 * metadata_expire=300
 * priority=10
 * failovermethod=priority
 * fastestmirror_enabled=0
 * gpgcheck=1
 * gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-amazon-ga
 * enabled=1
 * retries=3
 * timeout=5
 * report_instanceid=yes
 * `,
 *         name: "My-AL2017.09",
 *         products: ["AmazonLinux2017.09"],
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * al201709 = aws.ssm.PatchBaseline("al201709",
 *     approval_rules=[aws.ssm.PatchBaselineApprovalRuleArgs()],
 *     description="My patch repository for Amazon Linux 2017.09",
 *     operating_system="AMAZON_LINUX",
 *     sources=[aws.ssm.PatchBaselineSourceArgs(
 *         configuration="""[amzn-main]
 * name=amzn-main-Base
 * mirrorlist=http://repo./$awsregion./$awsdomain//$releasever/main/mirror.list
 * mirrorlist_expire=300
 * metadata_expire=300
 * priority=10
 * failovermethod=priority
 * fastestmirror_enabled=0
 * gpgcheck=1
 * gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-amazon-ga
 * enabled=1
 * retries=3
 * timeout=5
 * report_instanceid=yes
 * 
 * """,
 *         name="My-AL2017.09",
 *         products=["AmazonLinux2017.09"],
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var al201709 = new Aws.Ssm.PatchBaseline("al201709", new Aws.Ssm.PatchBaselineArgs
 *         {
 *             ApprovalRules = 
 *             {
 *                 ,
 *             },
 *             Description = "My patch repository for Amazon Linux 2017.09",
 *             OperatingSystem = "AMAZON_LINUX",
 *             Sources = 
 *             {
 *                 new Aws.Ssm.Inputs.PatchBaselineSourceArgs
 *                 {
 *                     Configuration = @"[amzn-main]
 * name=amzn-main-Base
 * mirrorlist=http://repo./$awsregion./$awsdomain//$releasever/main/mirror.list
 * mirrorlist_expire=300
 * metadata_expire=300
 * priority=10
 * failovermethod=priority
 * fastestmirror_enabled=0
 * gpgcheck=1
 * gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-amazon-ga
 * enabled=1
 * retries=3
 * timeout=5
 * report_instanceid=yes
 * 
 * ",
 *                     Name = "My-AL2017.09",
 *                     Products = 
 *                     {
 *                         "AmazonLinux2017.09",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ssm"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := ssm.NewPatchBaseline(ctx, "al201709", &ssm.PatchBaselineArgs{
 * 			ApprovalRules: ssm.PatchBaselineApprovalRuleArray{
 * 				nil,
 * 			},
 * 			Description:     pulumi.String("My patch repository for Amazon Linux 2017.09"),
 * 			OperatingSystem: pulumi.String("AMAZON_LINUX"),
 * 			Sources: ssm.PatchBaselineSourceArray{
 * 				&ssm.PatchBaselineSourceArgs{
 * 					Configuration: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "[amzn-main]\n", "name=amzn-main-Base\n", "mirrorlist=http://repo./", "$", "awsregion./", "$", "awsdomain//", "$", "releasever/main/mirror.list\n", "mirrorlist_expire=300\n", "metadata_expire=300\n", "priority=10\n", "failovermethod=priority\n", "fastestmirror_enabled=0\n", "gpgcheck=1\n", "gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-amazon-ga\n", "enabled=1\n", "retries=3\n", "timeout=5\n", "report_instanceid=yes\n", "\n")),
 * 					Name:          pulumi.String("My-AL2017.09"),
 * 					Products: pulumi.StringArray{
 * 						pulumi.String("AmazonLinux2017.09"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * SSM Patch Baselines can be imported by their baseline ID, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:ssm/patchBaseline:PatchBaseline example pb-12345678
 * ```
 * 
 *  
 */
@ResourceType(type="aws:ssm/patchBaseline:PatchBaseline")
public class PatchBaseline extends io.pulumi.resources.CustomResource {
    /**
     * A set of rules used to include patches in the baseline. up to 10 approval rules can be specified. Each approval_rule block requires the fields documented below.
     * 
     */
    @Export(name="approvalRules", type=List.class, parameters={PatchBaselineApprovalRule.class})
    private Output</* @Nullable */ List<PatchBaselineApprovalRule>> approvalRules;

    /**
     * @return A set of rules used to include patches in the baseline. up to 10 approval rules can be specified. Each approval_rule block requires the fields documented below.
     * 
     */
    public Output</* @Nullable */ List<PatchBaselineApprovalRule>> getApprovalRules() {
        return this.approvalRules;
    }
    /**
     * A list of explicitly approved patches for the baseline.
     * 
     */
    @Export(name="approvedPatches", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> approvedPatches;

    /**
     * @return A list of explicitly approved patches for the baseline.
     * 
     */
    public Output</* @Nullable */ List<String>> getApprovedPatches() {
        return this.approvedPatches;
    }
    /**
     * Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid compliance levels include the following: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
     * 
     */
    @Export(name="approvedPatchesComplianceLevel", type=String.class, parameters={})
    private Output</* @Nullable */ String> approvedPatchesComplianceLevel;

    /**
     * @return Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid compliance levels include the following: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
     * 
     */
    public Output</* @Nullable */ String> getApprovedPatchesComplianceLevel() {
        return this.approvedPatchesComplianceLevel;
    }
    /**
     * Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. Applies to Linux instances only.
     * 
     */
    @Export(name="approvedPatchesEnableNonSecurity", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> approvedPatchesEnableNonSecurity;

    /**
     * @return Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. Applies to Linux instances only.
     * 
     */
    public Output</* @Nullable */ Boolean> getApprovedPatchesEnableNonSecurity() {
        return this.approvedPatchesEnableNonSecurity;
    }
    /**
     * The ARN of the patch baseline.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the patch baseline.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The description of the patch baseline.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the patch baseline.
     * 
     */
    public Output</* @Nullable */ String> getDescription() {
        return this.description;
    }
    /**
     * A set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are `PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID`.
     * 
     */
    @Export(name="globalFilters", type=List.class, parameters={PatchBaselineGlobalFilter.class})
    private Output</* @Nullable */ List<PatchBaselineGlobalFilter>> globalFilters;

    /**
     * @return A set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are `PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID`.
     * 
     */
    public Output</* @Nullable */ List<PatchBaselineGlobalFilter>> getGlobalFilters() {
        return this.globalFilters;
    }
    /**
     * The name specified to identify the patch source.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name specified to identify the patch source.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * Defines the operating system the patch baseline applies to. Supported operating systems include `WINDOWS`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `SUSE`, `UBUNTU`, `CENTOS`, and `REDHAT_ENTERPRISE_LINUX`. The Default value is `WINDOWS`.
     * 
     */
    @Export(name="operatingSystem", type=String.class, parameters={})
    private Output</* @Nullable */ String> operatingSystem;

    /**
     * @return Defines the operating system the patch baseline applies to. Supported operating systems include `WINDOWS`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `SUSE`, `UBUNTU`, `CENTOS`, and `REDHAT_ENTERPRISE_LINUX`. The Default value is `WINDOWS`.
     * 
     */
    public Output</* @Nullable */ String> getOperatingSystem() {
        return this.operatingSystem;
    }
    /**
     * A list of rejected patches.
     * 
     */
    @Export(name="rejectedPatches", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> rejectedPatches;

    /**
     * @return A list of rejected patches.
     * 
     */
    public Output</* @Nullable */ List<String>> getRejectedPatches() {
        return this.rejectedPatches;
    }
    /**
     * The action for Patch Manager to take on patches included in the `rejected_patches` list. Allow values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
     * 
     */
    @Export(name="rejectedPatchesAction", type=String.class, parameters={})
    private Output<String> rejectedPatchesAction;

    /**
     * @return The action for Patch Manager to take on patches included in the `rejected_patches` list. Allow values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
     * 
     */
    public Output<String> getRejectedPatchesAction() {
        return this.rejectedPatchesAction;
    }
    /**
     * Configuration block(s) with alternate sources for patches. Applies to Linux instances only. Documented below.
     * 
     */
    @Export(name="sources", type=List.class, parameters={PatchBaselineSource.class})
    private Output</* @Nullable */ List<PatchBaselineSource>> sources;

    /**
     * @return Configuration block(s) with alternate sources for patches. Applies to Linux instances only. Documented below.
     * 
     */
    public Output</* @Nullable */ List<PatchBaselineSource>> getSources() {
        return this.sources;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PatchBaseline(String name) {
        this(name, PatchBaselineArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PatchBaseline(String name, @Nullable PatchBaselineArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PatchBaseline(String name, @Nullable PatchBaselineArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ssm/patchBaseline:PatchBaseline", name, args == null ? PatchBaselineArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private PatchBaseline(String name, Output<String> id, @Nullable PatchBaselineState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ssm/patchBaseline:PatchBaseline", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PatchBaseline get(String name, Output<String> id, @Nullable PatchBaselineState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new PatchBaseline(name, id, state, options);
    }
}
