// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lambda;

import io.pulumi.aws.lambda.inputs.EventSourceMappingDestinationConfigArgs;
import io.pulumi.aws.lambda.inputs.EventSourceMappingFilterCriteriaArgs;
import io.pulumi.aws.lambda.inputs.EventSourceMappingSelfManagedEventSourceArgs;
import io.pulumi.aws.lambda.inputs.EventSourceMappingSourceAccessConfigurationArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventSourceMappingArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventSourceMappingArgs Empty = new EventSourceMappingArgs();

    /**
     * The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
     * * `bisect_batch_on_function_error`: - (Optional) If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to `false`.
     * * `destination_config`: - (Optional) An Amazon SQS queue or Amazon SNS topic destination for failed records. Only available for stream sources (DynamoDB and Kinesis). Detailed below.
     * 
     */
    @InputImport(name="batchSize")
      private final @Nullable Input<Integer> batchSize;

    public Input<Integer> getBatchSize() {
        return this.batchSize == null ? Input.empty() : this.batchSize;
    }

    @InputImport(name="bisectBatchOnFunctionError")
      private final @Nullable Input<Boolean> bisectBatchOnFunctionError;

    public Input<Boolean> getBisectBatchOnFunctionError() {
        return this.bisectBatchOnFunctionError == null ? Input.empty() : this.bisectBatchOnFunctionError;
    }

    @InputImport(name="destinationConfig")
      private final @Nullable Input<EventSourceMappingDestinationConfigArgs> destinationConfig;

    public Input<EventSourceMappingDestinationConfigArgs> getDestinationConfig() {
        return this.destinationConfig == null ? Input.empty() : this.destinationConfig;
    }

    /**
     * Determines if the mapping will be enabled on creation. Defaults to `true`.
     * 
     */
    @InputImport(name="enabled")
      private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker or MSK cluster.  It is incompatible with a Self Managed Kafka source.
     * 
     */
    @InputImport(name="eventSourceArn")
      private final @Nullable Input<String> eventSourceArn;

    public Input<String> getEventSourceArn() {
        return this.eventSourceArn == null ? Input.empty() : this.eventSourceArn;
    }

    /**
     * The criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
     * 
     */
    @InputImport(name="filterCriteria")
      private final @Nullable Input<EventSourceMappingFilterCriteriaArgs> filterCriteria;

    public Input<EventSourceMappingFilterCriteriaArgs> getFilterCriteria() {
        return this.filterCriteria == null ? Input.empty() : this.filterCriteria;
    }

    /**
     * The name or the ARN of the Lambda function that will be subscribing to events.
     * 
     */
    @InputImport(name="functionName", required=true)
      private final Input<String> functionName;

    public Input<String> getFunctionName() {
        return this.functionName;
    }

    /**
     * A list of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
     * 
     */
    @InputImport(name="functionResponseTypes")
      private final @Nullable Input<List<String>> functionResponseTypes;

    public Input<List<String>> getFunctionResponseTypes() {
        return this.functionResponseTypes == null ? Input.empty() : this.functionResponseTypes;
    }

    /**
     * The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either `maximum_batching_window_in_seconds` expires or `batch_size` has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
     * * `maximum_record_age_in_seconds`: - (Optional) The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
     * * `maximum_retry_attempts`: - (Optional) The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
     * * `parallelization_factor`: - (Optional) The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
     * 
     */
    @InputImport(name="maximumBatchingWindowInSeconds")
      private final @Nullable Input<Integer> maximumBatchingWindowInSeconds;

    public Input<Integer> getMaximumBatchingWindowInSeconds() {
        return this.maximumBatchingWindowInSeconds == null ? Input.empty() : this.maximumBatchingWindowInSeconds;
    }

    @InputImport(name="maximumRecordAgeInSeconds")
      private final @Nullable Input<Integer> maximumRecordAgeInSeconds;

    public Input<Integer> getMaximumRecordAgeInSeconds() {
        return this.maximumRecordAgeInSeconds == null ? Input.empty() : this.maximumRecordAgeInSeconds;
    }

    @InputImport(name="maximumRetryAttempts")
      private final @Nullable Input<Integer> maximumRetryAttempts;

    public Input<Integer> getMaximumRetryAttempts() {
        return this.maximumRetryAttempts == null ? Input.empty() : this.maximumRetryAttempts;
    }

    @InputImport(name="parallelizationFactor")
      private final @Nullable Input<Integer> parallelizationFactor;

    public Input<Integer> getParallelizationFactor() {
        return this.parallelizationFactor == null ? Input.empty() : this.parallelizationFactor;
    }

    /**
     * The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. A single queue name must be specified.
     * * `self_managed_event_source`: - (Optional) For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `source_access_configuration`. Detailed below.
     * * `source_access_configuration`: (Optional) For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `self_managed_event_source`. Detailed below.
     * 
     */
    @InputImport(name="queues")
      private final @Nullable Input<List<String>> queues;

    public Input<List<String>> getQueues() {
        return this.queues == null ? Input.empty() : this.queues;
    }

    @InputImport(name="selfManagedEventSource")
      private final @Nullable Input<EventSourceMappingSelfManagedEventSourceArgs> selfManagedEventSource;

    public Input<EventSourceMappingSelfManagedEventSourceArgs> getSelfManagedEventSource() {
        return this.selfManagedEventSource == null ? Input.empty() : this.selfManagedEventSource;
    }

    @InputImport(name="sourceAccessConfigurations")
      private final @Nullable Input<List<EventSourceMappingSourceAccessConfigurationArgs>> sourceAccessConfigurations;

    public Input<List<EventSourceMappingSourceAccessConfigurationArgs>> getSourceAccessConfigurations() {
        return this.sourceAccessConfigurations == null ? Input.empty() : this.sourceAccessConfigurations;
    }

    /**
     * The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB or MSK. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
     * 
     */
    @InputImport(name="startingPosition")
      private final @Nullable Input<String> startingPosition;

    public Input<String> getStartingPosition() {
        return this.startingPosition == null ? Input.empty() : this.startingPosition;
    }

    /**
     * A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `starting_position` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
     * 
     */
    @InputImport(name="startingPositionTimestamp")
      private final @Nullable Input<String> startingPositionTimestamp;

    public Input<String> getStartingPositionTimestamp() {
        return this.startingPositionTimestamp == null ? Input.empty() : this.startingPositionTimestamp;
    }

    /**
     * The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
     * 
     */
    @InputImport(name="topics")
      private final @Nullable Input<List<String>> topics;

    public Input<List<String>> getTopics() {
        return this.topics == null ? Input.empty() : this.topics;
    }

    /**
     * The duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
     * 
     */
    @InputImport(name="tumblingWindowInSeconds")
      private final @Nullable Input<Integer> tumblingWindowInSeconds;

    public Input<Integer> getTumblingWindowInSeconds() {
        return this.tumblingWindowInSeconds == null ? Input.empty() : this.tumblingWindowInSeconds;
    }

    public EventSourceMappingArgs(
        @Nullable Input<Integer> batchSize,
        @Nullable Input<Boolean> bisectBatchOnFunctionError,
        @Nullable Input<EventSourceMappingDestinationConfigArgs> destinationConfig,
        @Nullable Input<Boolean> enabled,
        @Nullable Input<String> eventSourceArn,
        @Nullable Input<EventSourceMappingFilterCriteriaArgs> filterCriteria,
        Input<String> functionName,
        @Nullable Input<List<String>> functionResponseTypes,
        @Nullable Input<Integer> maximumBatchingWindowInSeconds,
        @Nullable Input<Integer> maximumRecordAgeInSeconds,
        @Nullable Input<Integer> maximumRetryAttempts,
        @Nullable Input<Integer> parallelizationFactor,
        @Nullable Input<List<String>> queues,
        @Nullable Input<EventSourceMappingSelfManagedEventSourceArgs> selfManagedEventSource,
        @Nullable Input<List<EventSourceMappingSourceAccessConfigurationArgs>> sourceAccessConfigurations,
        @Nullable Input<String> startingPosition,
        @Nullable Input<String> startingPositionTimestamp,
        @Nullable Input<List<String>> topics,
        @Nullable Input<Integer> tumblingWindowInSeconds) {
        this.batchSize = batchSize;
        this.bisectBatchOnFunctionError = bisectBatchOnFunctionError;
        this.destinationConfig = destinationConfig;
        this.enabled = enabled;
        this.eventSourceArn = eventSourceArn;
        this.filterCriteria = filterCriteria;
        this.functionName = Objects.requireNonNull(functionName, "expected parameter 'functionName' to be non-null");
        this.functionResponseTypes = functionResponseTypes;
        this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
        this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
        this.maximumRetryAttempts = maximumRetryAttempts;
        this.parallelizationFactor = parallelizationFactor;
        this.queues = queues;
        this.selfManagedEventSource = selfManagedEventSource;
        this.sourceAccessConfigurations = sourceAccessConfigurations;
        this.startingPosition = startingPosition;
        this.startingPositionTimestamp = startingPositionTimestamp;
        this.topics = topics;
        this.tumblingWindowInSeconds = tumblingWindowInSeconds;
    }

    private EventSourceMappingArgs() {
        this.batchSize = Input.empty();
        this.bisectBatchOnFunctionError = Input.empty();
        this.destinationConfig = Input.empty();
        this.enabled = Input.empty();
        this.eventSourceArn = Input.empty();
        this.filterCriteria = Input.empty();
        this.functionName = Input.empty();
        this.functionResponseTypes = Input.empty();
        this.maximumBatchingWindowInSeconds = Input.empty();
        this.maximumRecordAgeInSeconds = Input.empty();
        this.maximumRetryAttempts = Input.empty();
        this.parallelizationFactor = Input.empty();
        this.queues = Input.empty();
        this.selfManagedEventSource = Input.empty();
        this.sourceAccessConfigurations = Input.empty();
        this.startingPosition = Input.empty();
        this.startingPositionTimestamp = Input.empty();
        this.topics = Input.empty();
        this.tumblingWindowInSeconds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventSourceMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> batchSize;
        private @Nullable Input<Boolean> bisectBatchOnFunctionError;
        private @Nullable Input<EventSourceMappingDestinationConfigArgs> destinationConfig;
        private @Nullable Input<Boolean> enabled;
        private @Nullable Input<String> eventSourceArn;
        private @Nullable Input<EventSourceMappingFilterCriteriaArgs> filterCriteria;
        private Input<String> functionName;
        private @Nullable Input<List<String>> functionResponseTypes;
        private @Nullable Input<Integer> maximumBatchingWindowInSeconds;
        private @Nullable Input<Integer> maximumRecordAgeInSeconds;
        private @Nullable Input<Integer> maximumRetryAttempts;
        private @Nullable Input<Integer> parallelizationFactor;
        private @Nullable Input<List<String>> queues;
        private @Nullable Input<EventSourceMappingSelfManagedEventSourceArgs> selfManagedEventSource;
        private @Nullable Input<List<EventSourceMappingSourceAccessConfigurationArgs>> sourceAccessConfigurations;
        private @Nullable Input<String> startingPosition;
        private @Nullable Input<String> startingPositionTimestamp;
        private @Nullable Input<List<String>> topics;
        private @Nullable Input<Integer> tumblingWindowInSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(EventSourceMappingArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSize = defaults.batchSize;
    	      this.bisectBatchOnFunctionError = defaults.bisectBatchOnFunctionError;
    	      this.destinationConfig = defaults.destinationConfig;
    	      this.enabled = defaults.enabled;
    	      this.eventSourceArn = defaults.eventSourceArn;
    	      this.filterCriteria = defaults.filterCriteria;
    	      this.functionName = defaults.functionName;
    	      this.functionResponseTypes = defaults.functionResponseTypes;
    	      this.maximumBatchingWindowInSeconds = defaults.maximumBatchingWindowInSeconds;
    	      this.maximumRecordAgeInSeconds = defaults.maximumRecordAgeInSeconds;
    	      this.maximumRetryAttempts = defaults.maximumRetryAttempts;
    	      this.parallelizationFactor = defaults.parallelizationFactor;
    	      this.queues = defaults.queues;
    	      this.selfManagedEventSource = defaults.selfManagedEventSource;
    	      this.sourceAccessConfigurations = defaults.sourceAccessConfigurations;
    	      this.startingPosition = defaults.startingPosition;
    	      this.startingPositionTimestamp = defaults.startingPositionTimestamp;
    	      this.topics = defaults.topics;
    	      this.tumblingWindowInSeconds = defaults.tumblingWindowInSeconds;
        }

        public Builder batchSize(@Nullable Input<Integer> batchSize) {
            this.batchSize = batchSize;
            return this;
        }

        public Builder batchSize(@Nullable Integer batchSize) {
            this.batchSize = Input.ofNullable(batchSize);
            return this;
        }

        public Builder bisectBatchOnFunctionError(@Nullable Input<Boolean> bisectBatchOnFunctionError) {
            this.bisectBatchOnFunctionError = bisectBatchOnFunctionError;
            return this;
        }

        public Builder bisectBatchOnFunctionError(@Nullable Boolean bisectBatchOnFunctionError) {
            this.bisectBatchOnFunctionError = Input.ofNullable(bisectBatchOnFunctionError);
            return this;
        }

        public Builder destinationConfig(@Nullable Input<EventSourceMappingDestinationConfigArgs> destinationConfig) {
            this.destinationConfig = destinationConfig;
            return this;
        }

        public Builder destinationConfig(@Nullable EventSourceMappingDestinationConfigArgs destinationConfig) {
            this.destinationConfig = Input.ofNullable(destinationConfig);
            return this;
        }

        public Builder enabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder eventSourceArn(@Nullable Input<String> eventSourceArn) {
            this.eventSourceArn = eventSourceArn;
            return this;
        }

        public Builder eventSourceArn(@Nullable String eventSourceArn) {
            this.eventSourceArn = Input.ofNullable(eventSourceArn);
            return this;
        }

        public Builder filterCriteria(@Nullable Input<EventSourceMappingFilterCriteriaArgs> filterCriteria) {
            this.filterCriteria = filterCriteria;
            return this;
        }

        public Builder filterCriteria(@Nullable EventSourceMappingFilterCriteriaArgs filterCriteria) {
            this.filterCriteria = Input.ofNullable(filterCriteria);
            return this;
        }

        public Builder functionName(Input<String> functionName) {
            this.functionName = Objects.requireNonNull(functionName);
            return this;
        }

        public Builder functionName(String functionName) {
            this.functionName = Input.of(Objects.requireNonNull(functionName));
            return this;
        }

        public Builder functionResponseTypes(@Nullable Input<List<String>> functionResponseTypes) {
            this.functionResponseTypes = functionResponseTypes;
            return this;
        }

        public Builder functionResponseTypes(@Nullable List<String> functionResponseTypes) {
            this.functionResponseTypes = Input.ofNullable(functionResponseTypes);
            return this;
        }

        public Builder maximumBatchingWindowInSeconds(@Nullable Input<Integer> maximumBatchingWindowInSeconds) {
            this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            return this;
        }

        public Builder maximumBatchingWindowInSeconds(@Nullable Integer maximumBatchingWindowInSeconds) {
            this.maximumBatchingWindowInSeconds = Input.ofNullable(maximumBatchingWindowInSeconds);
            return this;
        }

        public Builder maximumRecordAgeInSeconds(@Nullable Input<Integer> maximumRecordAgeInSeconds) {
            this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
            return this;
        }

        public Builder maximumRecordAgeInSeconds(@Nullable Integer maximumRecordAgeInSeconds) {
            this.maximumRecordAgeInSeconds = Input.ofNullable(maximumRecordAgeInSeconds);
            return this;
        }

        public Builder maximumRetryAttempts(@Nullable Input<Integer> maximumRetryAttempts) {
            this.maximumRetryAttempts = maximumRetryAttempts;
            return this;
        }

        public Builder maximumRetryAttempts(@Nullable Integer maximumRetryAttempts) {
            this.maximumRetryAttempts = Input.ofNullable(maximumRetryAttempts);
            return this;
        }

        public Builder parallelizationFactor(@Nullable Input<Integer> parallelizationFactor) {
            this.parallelizationFactor = parallelizationFactor;
            return this;
        }

        public Builder parallelizationFactor(@Nullable Integer parallelizationFactor) {
            this.parallelizationFactor = Input.ofNullable(parallelizationFactor);
            return this;
        }

        public Builder queues(@Nullable Input<List<String>> queues) {
            this.queues = queues;
            return this;
        }

        public Builder queues(@Nullable List<String> queues) {
            this.queues = Input.ofNullable(queues);
            return this;
        }

        public Builder selfManagedEventSource(@Nullable Input<EventSourceMappingSelfManagedEventSourceArgs> selfManagedEventSource) {
            this.selfManagedEventSource = selfManagedEventSource;
            return this;
        }

        public Builder selfManagedEventSource(@Nullable EventSourceMappingSelfManagedEventSourceArgs selfManagedEventSource) {
            this.selfManagedEventSource = Input.ofNullable(selfManagedEventSource);
            return this;
        }

        public Builder sourceAccessConfigurations(@Nullable Input<List<EventSourceMappingSourceAccessConfigurationArgs>> sourceAccessConfigurations) {
            this.sourceAccessConfigurations = sourceAccessConfigurations;
            return this;
        }

        public Builder sourceAccessConfigurations(@Nullable List<EventSourceMappingSourceAccessConfigurationArgs> sourceAccessConfigurations) {
            this.sourceAccessConfigurations = Input.ofNullable(sourceAccessConfigurations);
            return this;
        }

        public Builder startingPosition(@Nullable Input<String> startingPosition) {
            this.startingPosition = startingPosition;
            return this;
        }

        public Builder startingPosition(@Nullable String startingPosition) {
            this.startingPosition = Input.ofNullable(startingPosition);
            return this;
        }

        public Builder startingPositionTimestamp(@Nullable Input<String> startingPositionTimestamp) {
            this.startingPositionTimestamp = startingPositionTimestamp;
            return this;
        }

        public Builder startingPositionTimestamp(@Nullable String startingPositionTimestamp) {
            this.startingPositionTimestamp = Input.ofNullable(startingPositionTimestamp);
            return this;
        }

        public Builder topics(@Nullable Input<List<String>> topics) {
            this.topics = topics;
            return this;
        }

        public Builder topics(@Nullable List<String> topics) {
            this.topics = Input.ofNullable(topics);
            return this;
        }

        public Builder tumblingWindowInSeconds(@Nullable Input<Integer> tumblingWindowInSeconds) {
            this.tumblingWindowInSeconds = tumblingWindowInSeconds;
            return this;
        }

        public Builder tumblingWindowInSeconds(@Nullable Integer tumblingWindowInSeconds) {
            this.tumblingWindowInSeconds = Input.ofNullable(tumblingWindowInSeconds);
            return this;
        }
        public EventSourceMappingArgs build() {
            return new EventSourceMappingArgs(batchSize, bisectBatchOnFunctionError, destinationConfig, enabled, eventSourceArn, filterCriteria, functionName, functionResponseTypes, maximumBatchingWindowInSeconds, maximumRecordAgeInSeconds, maximumRetryAttempts, parallelizationFactor, queues, selfManagedEventSource, sourceAccessConfigurations, startingPosition, startingPositionTimestamp, topics, tumblingWindowInSeconds);
        }
    }
}
