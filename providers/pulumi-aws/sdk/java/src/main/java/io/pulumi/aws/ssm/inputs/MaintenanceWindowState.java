// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ssm.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MaintenanceWindowState extends io.pulumi.resources.ResourceArgs {

    public static final MaintenanceWindowState Empty = new MaintenanceWindowState();

    /**
     * Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
     * 
     */
    @InputImport(name="allowUnassociatedTargets")
      private final @Nullable Input<Boolean> allowUnassociatedTargets;

    public Input<Boolean> getAllowUnassociatedTargets() {
        return this.allowUnassociatedTargets == null ? Input.empty() : this.allowUnassociatedTargets;
    }

    /**
     * The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
     * 
     */
    @InputImport(name="cutoff")
      private final @Nullable Input<Integer> cutoff;

    public Input<Integer> getCutoff() {
        return this.cutoff == null ? Input.empty() : this.cutoff;
    }

    /**
     * A description for the maintenance window.
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The duration of the Maintenance Window in hours.
     * 
     */
    @InputImport(name="duration")
      private final @Nullable Input<Integer> duration;

    public Input<Integer> getDuration() {
        return this.duration == null ? Input.empty() : this.duration;
    }

    /**
     * Whether the maintenance window is enabled. Default: `true`.
     * 
     */
    @InputImport(name="enabled")
      private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
     * 
     */
    @InputImport(name="endDate")
      private final @Nullable Input<String> endDate;

    public Input<String> getEndDate() {
        return this.endDate == null ? Input.empty() : this.endDate;
    }

    /**
     * The name of the maintenance window.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The schedule of the Maintenance Window in the form of a [cron](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-cron.html) or rate expression.
     * 
     */
    @InputImport(name="schedule")
      private final @Nullable Input<String> schedule;

    public Input<String> getSchedule() {
        return this.schedule == null ? Input.empty() : this.schedule;
    }

    /**
     * The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
     * 
     */
    @InputImport(name="scheduleOffset")
      private final @Nullable Input<Integer> scheduleOffset;

    public Input<Integer> getScheduleOffset() {
        return this.scheduleOffset == null ? Input.empty() : this.scheduleOffset;
    }

    /**
     * Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
     * 
     */
    @InputImport(name="scheduleTimezone")
      private final @Nullable Input<String> scheduleTimezone;

    public Input<String> getScheduleTimezone() {
        return this.scheduleTimezone == null ? Input.empty() : this.scheduleTimezone;
    }

    /**
     * Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
     * 
     */
    @InputImport(name="startDate")
      private final @Nullable Input<String> startDate;

    public Input<String> getStartDate() {
        return this.startDate == null ? Input.empty() : this.startDate;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public MaintenanceWindowState(
        @Nullable Input<Boolean> allowUnassociatedTargets,
        @Nullable Input<Integer> cutoff,
        @Nullable Input<String> description,
        @Nullable Input<Integer> duration,
        @Nullable Input<Boolean> enabled,
        @Nullable Input<String> endDate,
        @Nullable Input<String> name,
        @Nullable Input<String> schedule,
        @Nullable Input<Integer> scheduleOffset,
        @Nullable Input<String> scheduleTimezone,
        @Nullable Input<String> startDate,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.allowUnassociatedTargets = allowUnassociatedTargets;
        this.cutoff = cutoff;
        this.description = description;
        this.duration = duration;
        this.enabled = enabled;
        this.endDate = endDate;
        this.name = name;
        this.schedule = schedule;
        this.scheduleOffset = scheduleOffset;
        this.scheduleTimezone = scheduleTimezone;
        this.startDate = startDate;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private MaintenanceWindowState() {
        this.allowUnassociatedTargets = Input.empty();
        this.cutoff = Input.empty();
        this.description = Input.empty();
        this.duration = Input.empty();
        this.enabled = Input.empty();
        this.endDate = Input.empty();
        this.name = Input.empty();
        this.schedule = Input.empty();
        this.scheduleOffset = Input.empty();
        this.scheduleTimezone = Input.empty();
        this.startDate = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MaintenanceWindowState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> allowUnassociatedTargets;
        private @Nullable Input<Integer> cutoff;
        private @Nullable Input<String> description;
        private @Nullable Input<Integer> duration;
        private @Nullable Input<Boolean> enabled;
        private @Nullable Input<String> endDate;
        private @Nullable Input<String> name;
        private @Nullable Input<String> schedule;
        private @Nullable Input<Integer> scheduleOffset;
        private @Nullable Input<String> scheduleTimezone;
        private @Nullable Input<String> startDate;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(MaintenanceWindowState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowUnassociatedTargets = defaults.allowUnassociatedTargets;
    	      this.cutoff = defaults.cutoff;
    	      this.description = defaults.description;
    	      this.duration = defaults.duration;
    	      this.enabled = defaults.enabled;
    	      this.endDate = defaults.endDate;
    	      this.name = defaults.name;
    	      this.schedule = defaults.schedule;
    	      this.scheduleOffset = defaults.scheduleOffset;
    	      this.scheduleTimezone = defaults.scheduleTimezone;
    	      this.startDate = defaults.startDate;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder allowUnassociatedTargets(@Nullable Input<Boolean> allowUnassociatedTargets) {
            this.allowUnassociatedTargets = allowUnassociatedTargets;
            return this;
        }

        public Builder allowUnassociatedTargets(@Nullable Boolean allowUnassociatedTargets) {
            this.allowUnassociatedTargets = Input.ofNullable(allowUnassociatedTargets);
            return this;
        }

        public Builder cutoff(@Nullable Input<Integer> cutoff) {
            this.cutoff = cutoff;
            return this;
        }

        public Builder cutoff(@Nullable Integer cutoff) {
            this.cutoff = Input.ofNullable(cutoff);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder duration(@Nullable Input<Integer> duration) {
            this.duration = duration;
            return this;
        }

        public Builder duration(@Nullable Integer duration) {
            this.duration = Input.ofNullable(duration);
            return this;
        }

        public Builder enabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder endDate(@Nullable Input<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(@Nullable String endDate) {
            this.endDate = Input.ofNullable(endDate);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder schedule(@Nullable Input<String> schedule) {
            this.schedule = schedule;
            return this;
        }

        public Builder schedule(@Nullable String schedule) {
            this.schedule = Input.ofNullable(schedule);
            return this;
        }

        public Builder scheduleOffset(@Nullable Input<Integer> scheduleOffset) {
            this.scheduleOffset = scheduleOffset;
            return this;
        }

        public Builder scheduleOffset(@Nullable Integer scheduleOffset) {
            this.scheduleOffset = Input.ofNullable(scheduleOffset);
            return this;
        }

        public Builder scheduleTimezone(@Nullable Input<String> scheduleTimezone) {
            this.scheduleTimezone = scheduleTimezone;
            return this;
        }

        public Builder scheduleTimezone(@Nullable String scheduleTimezone) {
            this.scheduleTimezone = Input.ofNullable(scheduleTimezone);
            return this;
        }

        public Builder startDate(@Nullable Input<String> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(@Nullable String startDate) {
            this.startDate = Input.ofNullable(startDate);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public MaintenanceWindowState build() {
            return new MaintenanceWindowState(allowUnassociatedTargets, cutoff, description, duration, enabled, endDate, name, schedule, scheduleOffset, scheduleTimezone, startDate, tags, tagsAll);
        }
    }
}
