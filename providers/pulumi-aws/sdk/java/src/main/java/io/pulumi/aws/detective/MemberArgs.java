// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.detective;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MemberArgs extends io.pulumi.resources.ResourceArgs {

    public static final MemberArgs Empty = new MemberArgs();

    /**
     * AWS account ID for the account.
     * 
     */
    @InputImport(name="accountId", required=true)
    private final Input<String> accountId;

    public Input<String> getAccountId() {
        return this.accountId;
    }

    /**
     * If set to true, then the root user of the invited account will _not_ receive an email notification. This notification is in addition to an alert that the root user receives in AWS Personal Health Dashboard. By default, this is set to `false`.
     * 
     */
    @InputImport(name="disableEmailNotification")
    private final @Nullable Input<Boolean> disableEmailNotification;

    public Input<Boolean> getDisableEmailNotification() {
        return this.disableEmailNotification == null ? Input.empty() : this.disableEmailNotification;
    }

    /**
     * Email address for the account.
     * 
     */
    @InputImport(name="emailAddress", required=true)
    private final Input<String> emailAddress;

    public Input<String> getEmailAddress() {
        return this.emailAddress;
    }

    /**
     * ARN of the behavior graph to invite the member accounts to contribute their data to.
     * 
     */
    @InputImport(name="graphArn", required=true)
    private final Input<String> graphArn;

    public Input<String> getGraphArn() {
        return this.graphArn;
    }

    /**
     * A custom message to include in the invitation. Amazon Detective adds this message to the standard content that it sends for an invitation.
     * 
     */
    @InputImport(name="message")
    private final @Nullable Input<String> message;

    public Input<String> getMessage() {
        return this.message == null ? Input.empty() : this.message;
    }

    public MemberArgs(
        Input<String> accountId,
        @Nullable Input<Boolean> disableEmailNotification,
        Input<String> emailAddress,
        Input<String> graphArn,
        @Nullable Input<String> message) {
        this.accountId = Objects.requireNonNull(accountId, "expected parameter 'accountId' to be non-null");
        this.disableEmailNotification = disableEmailNotification;
        this.emailAddress = Objects.requireNonNull(emailAddress, "expected parameter 'emailAddress' to be non-null");
        this.graphArn = Objects.requireNonNull(graphArn, "expected parameter 'graphArn' to be non-null");
        this.message = message;
    }

    private MemberArgs() {
        this.accountId = Input.empty();
        this.disableEmailNotification = Input.empty();
        this.emailAddress = Input.empty();
        this.graphArn = Input.empty();
        this.message = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> accountId;
        private @Nullable Input<Boolean> disableEmailNotification;
        private Input<String> emailAddress;
        private Input<String> graphArn;
        private @Nullable Input<String> message;

        public Builder() {
    	      // Empty
        }

        public Builder(MemberArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.disableEmailNotification = defaults.disableEmailNotification;
    	      this.emailAddress = defaults.emailAddress;
    	      this.graphArn = defaults.graphArn;
    	      this.message = defaults.message;
        }

        public Builder setAccountId(Input<String> accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }

        public Builder setAccountId(String accountId) {
            this.accountId = Input.of(Objects.requireNonNull(accountId));
            return this;
        }

        public Builder setDisableEmailNotification(@Nullable Input<Boolean> disableEmailNotification) {
            this.disableEmailNotification = disableEmailNotification;
            return this;
        }

        public Builder setDisableEmailNotification(@Nullable Boolean disableEmailNotification) {
            this.disableEmailNotification = Input.ofNullable(disableEmailNotification);
            return this;
        }

        public Builder setEmailAddress(Input<String> emailAddress) {
            this.emailAddress = Objects.requireNonNull(emailAddress);
            return this;
        }

        public Builder setEmailAddress(String emailAddress) {
            this.emailAddress = Input.of(Objects.requireNonNull(emailAddress));
            return this;
        }

        public Builder setGraphArn(Input<String> graphArn) {
            this.graphArn = Objects.requireNonNull(graphArn);
            return this;
        }

        public Builder setGraphArn(String graphArn) {
            this.graphArn = Input.of(Objects.requireNonNull(graphArn));
            return this;
        }

        public Builder setMessage(@Nullable Input<String> message) {
            this.message = message;
            return this;
        }

        public Builder setMessage(@Nullable String message) {
            this.message = Input.ofNullable(message);
            return this;
        }
        public MemberArgs build() {
            return new MemberArgs(accountId, disableEmailNotification, emailAddress, graphArn, message);
        }
    }
}
