// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.PeeringConnectionOptionsAccepterGetArgs;
import io.pulumi.aws.ec2.inputs.PeeringConnectionOptionsRequesterGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PeeringConnectionOptionsState extends io.pulumi.resources.ResourceArgs {

    public static final PeeringConnectionOptionsState Empty = new PeeringConnectionOptionsState();

    /**
     * An optional configuration block that allows for [VPC Peering Connection]
     * (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     * 
     */
    @InputImport(name="accepter")
      private final @Nullable Input<PeeringConnectionOptionsAccepterGetArgs> accepter;

    public Input<PeeringConnectionOptionsAccepterGetArgs> getAccepter() {
        return this.accepter == null ? Input.empty() : this.accepter;
    }

    /**
     * A optional configuration block that allows for [VPC Peering Connection]
     * (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     * 
     */
    @InputImport(name="requester")
      private final @Nullable Input<PeeringConnectionOptionsRequesterGetArgs> requester;

    public Input<PeeringConnectionOptionsRequesterGetArgs> getRequester() {
        return this.requester == null ? Input.empty() : this.requester;
    }

    /**
     * The ID of the requester VPC peering connection.
     * 
     */
    @InputImport(name="vpcPeeringConnectionId")
      private final @Nullable Input<String> vpcPeeringConnectionId;

    public Input<String> getVpcPeeringConnectionId() {
        return this.vpcPeeringConnectionId == null ? Input.empty() : this.vpcPeeringConnectionId;
    }

    public PeeringConnectionOptionsState(
        @Nullable Input<PeeringConnectionOptionsAccepterGetArgs> accepter,
        @Nullable Input<PeeringConnectionOptionsRequesterGetArgs> requester,
        @Nullable Input<String> vpcPeeringConnectionId) {
        this.accepter = accepter;
        this.requester = requester;
        this.vpcPeeringConnectionId = vpcPeeringConnectionId;
    }

    private PeeringConnectionOptionsState() {
        this.accepter = Input.empty();
        this.requester = Input.empty();
        this.vpcPeeringConnectionId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PeeringConnectionOptionsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<PeeringConnectionOptionsAccepterGetArgs> accepter;
        private @Nullable Input<PeeringConnectionOptionsRequesterGetArgs> requester;
        private @Nullable Input<String> vpcPeeringConnectionId;

        public Builder() {
    	      // Empty
        }

        public Builder(PeeringConnectionOptionsState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepter = defaults.accepter;
    	      this.requester = defaults.requester;
    	      this.vpcPeeringConnectionId = defaults.vpcPeeringConnectionId;
        }

        public Builder setAccepter(@Nullable Input<PeeringConnectionOptionsAccepterGetArgs> accepter) {
            this.accepter = accepter;
            return this;
        }

        public Builder setAccepter(@Nullable PeeringConnectionOptionsAccepterGetArgs accepter) {
            this.accepter = Input.ofNullable(accepter);
            return this;
        }

        public Builder setRequester(@Nullable Input<PeeringConnectionOptionsRequesterGetArgs> requester) {
            this.requester = requester;
            return this;
        }

        public Builder setRequester(@Nullable PeeringConnectionOptionsRequesterGetArgs requester) {
            this.requester = Input.ofNullable(requester);
            return this;
        }

        public Builder setVpcPeeringConnectionId(@Nullable Input<String> vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = vpcPeeringConnectionId;
            return this;
        }

        public Builder setVpcPeeringConnectionId(@Nullable String vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = Input.ofNullable(vpcPeeringConnectionId);
            return this;
        }
        public PeeringConnectionOptionsState build() {
            return new PeeringConnectionOptionsState(accepter, requester, vpcPeeringConnectionId);
        }
    }
}
