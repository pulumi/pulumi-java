// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesisanalyticsv2.outputs;

import io.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfiguration {
    /**
     * Describes whether to use the default CloudWatch logging configuration for an application. Valid values: `CUSTOM`, `DEFAULT`. Set this attribute to `CUSTOM` in order for any specified `log_level` or `metrics_level` attribute values to be effective.
     * 
     */
    private final String configurationType;
    /**
     * Describes the verbosity of the CloudWatch Logs for an application. Valid values: `DEBUG`, `ERROR`, `INFO`, `WARN`.
     * 
     */
    private final @Nullable String logLevel;
    /**
     * Describes the granularity of the CloudWatch Logs for an application. Valid values: `APPLICATION`, `OPERATOR`, `PARALLELISM`, `TASK`.
     * 
     */
    private final @Nullable String metricsLevel;

    @CustomType.Constructor
    private ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfiguration(
        @CustomType.Parameter("configurationType") String configurationType,
        @CustomType.Parameter("logLevel") @Nullable String logLevel,
        @CustomType.Parameter("metricsLevel") @Nullable String metricsLevel) {
        this.configurationType = configurationType;
        this.logLevel = logLevel;
        this.metricsLevel = metricsLevel;
    }

    /**
     * Describes whether to use the default CloudWatch logging configuration for an application. Valid values: `CUSTOM`, `DEFAULT`. Set this attribute to `CUSTOM` in order for any specified `log_level` or `metrics_level` attribute values to be effective.
     * 
    */
    public String getConfigurationType() {
        return this.configurationType;
    }
    /**
     * Describes the verbosity of the CloudWatch Logs for an application. Valid values: `DEBUG`, `ERROR`, `INFO`, `WARN`.
     * 
    */
    public Optional<String> getLogLevel() {
        return Optional.ofNullable(this.logLevel);
    }
    /**
     * Describes the granularity of the CloudWatch Logs for an application. Valid values: `APPLICATION`, `OPERATOR`, `PARALLELISM`, `TASK`.
     * 
    */
    public Optional<String> getMetricsLevel() {
        return Optional.ofNullable(this.metricsLevel);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String configurationType;
        private @Nullable String logLevel;
        private @Nullable String metricsLevel;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configurationType = defaults.configurationType;
    	      this.logLevel = defaults.logLevel;
    	      this.metricsLevel = defaults.metricsLevel;
        }

        public Builder configurationType(String configurationType) {
            this.configurationType = Objects.requireNonNull(configurationType);
            return this;
        }

        public Builder logLevel(@Nullable String logLevel) {
            this.logLevel = logLevel;
            return this;
        }

        public Builder metricsLevel(@Nullable String metricsLevel) {
            this.metricsLevel = metricsLevel;
            return this;
        }
        public ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfiguration build() {
            return new ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfiguration(configurationType, logLevel, metricsLevel);
        }
    }
}
