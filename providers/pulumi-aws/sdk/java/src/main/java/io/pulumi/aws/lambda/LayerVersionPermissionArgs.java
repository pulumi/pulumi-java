// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lambda;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LayerVersionPermissionArgs extends io.pulumi.resources.ResourceArgs {

    public static final LayerVersionPermissionArgs Empty = new LayerVersionPermissionArgs();

    /**
     * Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
     * 
     */
    @Import(name="action", required=true)
      private final Output<String> action;

    public Output<String> action() {
        return this.action;
    }

    /**
     * The name or ARN of the Lambda Layer, which you want to grant access to.
     * 
     */
    @Import(name="layerName", required=true)
      private final Output<String> layerName;

    public Output<String> layerName() {
        return this.layerName;
    }

    /**
     * An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organization_id` provided.
     * 
     */
    @Import(name="organizationId")
      private final @Nullable Output<String> organizationId;

    public Output<String> organizationId() {
        return this.organizationId == null ? Codegen.empty() : this.organizationId;
    }

    /**
     * AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
     * 
     */
    @Import(name="principal", required=true)
      private final Output<String> principal;

    public Output<String> principal() {
        return this.principal;
    }

    /**
     * The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
     * 
     */
    @Import(name="statementId", required=true)
      private final Output<String> statementId;

    public Output<String> statementId() {
        return this.statementId;
    }

    /**
     * Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
     * 
     */
    @Import(name="versionNumber", required=true)
      private final Output<Integer> versionNumber;

    public Output<Integer> versionNumber() {
        return this.versionNumber;
    }

    public LayerVersionPermissionArgs(
        Output<String> action,
        Output<String> layerName,
        @Nullable Output<String> organizationId,
        Output<String> principal,
        Output<String> statementId,
        Output<Integer> versionNumber) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.layerName = Objects.requireNonNull(layerName, "expected parameter 'layerName' to be non-null");
        this.organizationId = organizationId;
        this.principal = Objects.requireNonNull(principal, "expected parameter 'principal' to be non-null");
        this.statementId = Objects.requireNonNull(statementId, "expected parameter 'statementId' to be non-null");
        this.versionNumber = Objects.requireNonNull(versionNumber, "expected parameter 'versionNumber' to be non-null");
    }

    private LayerVersionPermissionArgs() {
        this.action = Codegen.empty();
        this.layerName = Codegen.empty();
        this.organizationId = Codegen.empty();
        this.principal = Codegen.empty();
        this.statementId = Codegen.empty();
        this.versionNumber = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LayerVersionPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> action;
        private Output<String> layerName;
        private @Nullable Output<String> organizationId;
        private Output<String> principal;
        private Output<String> statementId;
        private Output<Integer> versionNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(LayerVersionPermissionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.layerName = defaults.layerName;
    	      this.organizationId = defaults.organizationId;
    	      this.principal = defaults.principal;
    	      this.statementId = defaults.statementId;
    	      this.versionNumber = defaults.versionNumber;
        }

        public Builder action(Output<String> action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder action(String action) {
            this.action = Output.of(Objects.requireNonNull(action));
            return this;
        }
        public Builder layerName(Output<String> layerName) {
            this.layerName = Objects.requireNonNull(layerName);
            return this;
        }
        public Builder layerName(String layerName) {
            this.layerName = Output.of(Objects.requireNonNull(layerName));
            return this;
        }
        public Builder organizationId(@Nullable Output<String> organizationId) {
            this.organizationId = organizationId;
            return this;
        }
        public Builder organizationId(@Nullable String organizationId) {
            this.organizationId = Codegen.ofNullable(organizationId);
            return this;
        }
        public Builder principal(Output<String> principal) {
            this.principal = Objects.requireNonNull(principal);
            return this;
        }
        public Builder principal(String principal) {
            this.principal = Output.of(Objects.requireNonNull(principal));
            return this;
        }
        public Builder statementId(Output<String> statementId) {
            this.statementId = Objects.requireNonNull(statementId);
            return this;
        }
        public Builder statementId(String statementId) {
            this.statementId = Output.of(Objects.requireNonNull(statementId));
            return this;
        }
        public Builder versionNumber(Output<Integer> versionNumber) {
            this.versionNumber = Objects.requireNonNull(versionNumber);
            return this;
        }
        public Builder versionNumber(Integer versionNumber) {
            this.versionNumber = Output.of(Objects.requireNonNull(versionNumber));
            return this;
        }        public LayerVersionPermissionArgs build() {
            return new LayerVersionPermissionArgs(action, layerName, organizationId, principal, statementId, versionNumber);
        }
    }
}
