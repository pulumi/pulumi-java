// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.quicksight.inputs;

import io.pulumi.aws.quicksight.inputs.DataSourceCredentialsGetArgs;
import io.pulumi.aws.quicksight.inputs.DataSourceParametersGetArgs;
import io.pulumi.aws.quicksight.inputs.DataSourcePermissionGetArgs;
import io.pulumi.aws.quicksight.inputs.DataSourceSslPropertiesGetArgs;
import io.pulumi.aws.quicksight.inputs.DataSourceVpcConnectionPropertiesGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DataSourceState extends io.pulumi.resources.ResourceArgs {

    public static final DataSourceState Empty = new DataSourceState();

    /**
     * Amazon Resource Name (ARN) of the data source
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
     * 
     */
    @InputImport(name="awsAccountId")
      private final @Nullable Input<String> awsAccountId;

    public Input<String> getAwsAccountId() {
        return this.awsAccountId == null ? Input.empty() : this.awsAccountId;
    }

    /**
     * The credentials Amazon QuickSight uses to connect to your underlying source. Currently, only credentials based on user name and password are supported. See Credentials below for more details.
     * 
     */
    @InputImport(name="credentials")
      private final @Nullable Input<DataSourceCredentialsGetArgs> credentials;

    public Input<DataSourceCredentialsGetArgs> getCredentials() {
        return this.credentials == null ? Input.empty() : this.credentials;
    }

    /**
     * An identifier for the data source.
     * 
     */
    @InputImport(name="dataSourceId")
      private final @Nullable Input<String> dataSourceId;

    public Input<String> getDataSourceId() {
        return this.dataSourceId == null ? Input.empty() : this.dataSourceId;
    }

    /**
     * A name for the data source, maximum of 128 characters.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The parameters used to connect to this data source (exactly one).
     * 
     */
    @InputImport(name="parameters")
      private final @Nullable Input<DataSourceParametersGetArgs> parameters;

    public Input<DataSourceParametersGetArgs> getParameters() {
        return this.parameters == null ? Input.empty() : this.parameters;
    }

    /**
     * A set of resource permissions on the data source. Maximum of 64 items. See Permission below for more details.
     * 
     */
    @InputImport(name="permissions")
      private final @Nullable Input<List<DataSourcePermissionGetArgs>> permissions;

    public Input<List<DataSourcePermissionGetArgs>> getPermissions() {
        return this.permissions == null ? Input.empty() : this.permissions;
    }

    /**
     * Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See SSL Properties below for more details.
     * 
     */
    @InputImport(name="sslProperties")
      private final @Nullable Input<DataSourceSslPropertiesGetArgs> sslProperties;

    public Input<DataSourceSslPropertiesGetArgs> getSslProperties() {
        return this.sslProperties == null ? Input.empty() : this.sslProperties;
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.
     * 
     */
    @InputImport(name="type")
      private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See VPC Connection Properties below for more details.
     * 
     */
    @InputImport(name="vpcConnectionProperties")
      private final @Nullable Input<DataSourceVpcConnectionPropertiesGetArgs> vpcConnectionProperties;

    public Input<DataSourceVpcConnectionPropertiesGetArgs> getVpcConnectionProperties() {
        return this.vpcConnectionProperties == null ? Input.empty() : this.vpcConnectionProperties;
    }

    public DataSourceState(
        @Nullable Input<String> arn,
        @Nullable Input<String> awsAccountId,
        @Nullable Input<DataSourceCredentialsGetArgs> credentials,
        @Nullable Input<String> dataSourceId,
        @Nullable Input<String> name,
        @Nullable Input<DataSourceParametersGetArgs> parameters,
        @Nullable Input<List<DataSourcePermissionGetArgs>> permissions,
        @Nullable Input<DataSourceSslPropertiesGetArgs> sslProperties,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> type,
        @Nullable Input<DataSourceVpcConnectionPropertiesGetArgs> vpcConnectionProperties) {
        this.arn = arn;
        this.awsAccountId = awsAccountId;
        this.credentials = credentials;
        this.dataSourceId = dataSourceId;
        this.name = name;
        this.parameters = parameters;
        this.permissions = permissions;
        this.sslProperties = sslProperties;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.type = type;
        this.vpcConnectionProperties = vpcConnectionProperties;
    }

    private DataSourceState() {
        this.arn = Input.empty();
        this.awsAccountId = Input.empty();
        this.credentials = Input.empty();
        this.dataSourceId = Input.empty();
        this.name = Input.empty();
        this.parameters = Input.empty();
        this.permissions = Input.empty();
        this.sslProperties = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.type = Input.empty();
        this.vpcConnectionProperties = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> awsAccountId;
        private @Nullable Input<DataSourceCredentialsGetArgs> credentials;
        private @Nullable Input<String> dataSourceId;
        private @Nullable Input<String> name;
        private @Nullable Input<DataSourceParametersGetArgs> parameters;
        private @Nullable Input<List<DataSourcePermissionGetArgs>> permissions;
        private @Nullable Input<DataSourceSslPropertiesGetArgs> sslProperties;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> type;
        private @Nullable Input<DataSourceVpcConnectionPropertiesGetArgs> vpcConnectionProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(DataSourceState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.awsAccountId = defaults.awsAccountId;
    	      this.credentials = defaults.credentials;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.permissions = defaults.permissions;
    	      this.sslProperties = defaults.sslProperties;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.type = defaults.type;
    	      this.vpcConnectionProperties = defaults.vpcConnectionProperties;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder awsAccountId(@Nullable Input<String> awsAccountId) {
            this.awsAccountId = awsAccountId;
            return this;
        }

        public Builder awsAccountId(@Nullable String awsAccountId) {
            this.awsAccountId = Input.ofNullable(awsAccountId);
            return this;
        }

        public Builder credentials(@Nullable Input<DataSourceCredentialsGetArgs> credentials) {
            this.credentials = credentials;
            return this;
        }

        public Builder credentials(@Nullable DataSourceCredentialsGetArgs credentials) {
            this.credentials = Input.ofNullable(credentials);
            return this;
        }

        public Builder dataSourceId(@Nullable Input<String> dataSourceId) {
            this.dataSourceId = dataSourceId;
            return this;
        }

        public Builder dataSourceId(@Nullable String dataSourceId) {
            this.dataSourceId = Input.ofNullable(dataSourceId);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder parameters(@Nullable Input<DataSourceParametersGetArgs> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(@Nullable DataSourceParametersGetArgs parameters) {
            this.parameters = Input.ofNullable(parameters);
            return this;
        }

        public Builder permissions(@Nullable Input<List<DataSourcePermissionGetArgs>> permissions) {
            this.permissions = permissions;
            return this;
        }

        public Builder permissions(@Nullable List<DataSourcePermissionGetArgs> permissions) {
            this.permissions = Input.ofNullable(permissions);
            return this;
        }

        public Builder sslProperties(@Nullable Input<DataSourceSslPropertiesGetArgs> sslProperties) {
            this.sslProperties = sslProperties;
            return this;
        }

        public Builder sslProperties(@Nullable DataSourceSslPropertiesGetArgs sslProperties) {
            this.sslProperties = Input.ofNullable(sslProperties);
            return this;
        }

        public Builder tags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder type(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder vpcConnectionProperties(@Nullable Input<DataSourceVpcConnectionPropertiesGetArgs> vpcConnectionProperties) {
            this.vpcConnectionProperties = vpcConnectionProperties;
            return this;
        }

        public Builder vpcConnectionProperties(@Nullable DataSourceVpcConnectionPropertiesGetArgs vpcConnectionProperties) {
            this.vpcConnectionProperties = Input.ofNullable(vpcConnectionProperties);
            return this;
        }
        public DataSourceState build() {
            return new DataSourceState(arn, awsAccountId, credentials, dataSourceId, name, parameters, permissions, sslProperties, tags, tagsAll, type, vpcConnectionProperties);
        }
    }
}
