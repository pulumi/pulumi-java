// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ecr;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.ecr.RegistryPolicyArgs;
import io.pulumi.aws.ecr.inputs.RegistryPolicyState;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides an Elastic Container Registry Policy.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const currentCallerIdentity = aws.getCallerIdentity({});
 * const currentRegion = aws.getRegion({});
 * const currentPartition = aws.getPartition({});
 * const example = new aws.ecr.RegistryPolicy("example", {policy: Promise.all([currentPartition, currentCallerIdentity, currentPartition, currentRegion, currentCallerIdentity]).then(([currentPartition, currentCallerIdentity, currentPartition1, currentRegion, currentCallerIdentity1]) => JSON.stringify({
 *     Version: "2012-10-17",
 *     Statement: [{
 *         Sid: "testpolicy",
 *         Effect: "Allow",
 *         Principal: {
 *             AWS: `arn:${currentPartition.partition}:iam::${currentCallerIdentity.accountId}:root`,
 *         },
 *         Action: ["ecr:ReplicateImage"],
 *         Resource: [`arn:${currentPartition1.partition}:ecr:${currentRegion.name}:${currentCallerIdentity1.accountId}:repository/*`],
 *     }],
 * }))});
 * ```
 * ```python
 * import pulumi
 * import json
 * import pulumi_aws as aws
 * 
 * current_caller_identity = aws.get_caller_identity()
 * current_region = aws.get_region()
 * current_partition = aws.get_partition()
 * example = aws.ecr.RegistryPolicy("example", policy=json.dumps({
 *     "Version": "2012-10-17",
 *     "Statement": [{
 *         "Sid": "testpolicy",
 *         "Effect": "Allow",
 *         "Principal": {
 *             "AWS": f"arn:{current_partition.partition}:iam::{current_caller_identity.account_id}:root",
 *         },
 *         "Action": ["ecr:ReplicateImage"],
 *         "Resource": [f"arn:{current_partition.partition}:ecr:{current_region.name}:{current_caller_identity.account_id}:repository/*"],
 *     }],
 * }))
 * ```
 * ```csharp
 * using System.Collections.Generic;
 * using System.Text.Json;
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var currentCallerIdentity = Output.Create(Aws.GetCallerIdentity.InvokeAsync());
 *         var currentRegion = Output.Create(Aws.GetRegion.InvokeAsync());
 *         var currentPartition = Output.Create(Aws.GetPartition.InvokeAsync());
 *         var example = new Aws.Ecr.RegistryPolicy("example", new Aws.Ecr.RegistryPolicyArgs
 *         {
 *             Policy = Output.Tuple(currentPartition, currentCallerIdentity, currentPartition, currentRegion, currentCallerIdentity).Apply(values =>
 *             {
 *                 var currentPartition = values.Item1;
 *                 var currentCallerIdentity = values.Item2;
 *                 var currentPartition1 = values.Item3;
 *                 var currentRegion = values.Item4;
 *                 var currentCallerIdentity1 = values.Item5;
 *                 return JsonSerializer.Serialize(new Dictionary<string, object?>
 *                 {
 *                     { "Version", "2012-10-17" },
 *                     { "Statement", new[]
 *                         {
 *                             new Dictionary<string, object?>
 *                             {
 *                                 { "Sid", "testpolicy" },
 *                                 { "Effect", "Allow" },
 *                                 { "Principal", new Dictionary<string, object?>
 *                                 {
 *                                     { "AWS", $"arn:{currentPartition.Partition}:iam::{currentCallerIdentity.AccountId}:root" },
 *                                 } },
 *                                 { "Action", new[]
 *                                     {
 *                                         "ecr:ReplicateImage",
 *                                     }
 *                                  },
 *                                 { "Resource", new[]
 *                                     {
 *                                         $"arn:{currentPartition1.Partition}:ecr:{currentRegion.Name}:{currentCallerIdentity1.AccountId}:repository/*",
 *                                     }
 *                                  },
 *                             },
 *                         }
 *                      },
 *                 });
 *             }),
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"encoding/json"
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ecr"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		currentCallerIdentity, err := aws.GetCallerIdentity(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		currentRegion, err := aws.GetRegion(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		currentPartition, err := aws.GetPartition(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		tmpJSON0, err := json.Marshal(map[string]interface{}{
 * 			"Version": "2012-10-17",
 * 			"Statement": []map[string]interface{}{
 * 				map[string]interface{}{
 * 					"Sid":    "testpolicy",
 * 					"Effect": "Allow",
 * 					"Principal": map[string]interface{}{
 * 						"AWS": fmt.Sprintf("%v%v%v%v%v", "arn:", currentPartition.Partition, ":iam::", currentCallerIdentity.AccountId, ":root"),
 * 					},
 * 					"Action": []string{
 * 						"ecr:ReplicateImage",
 * 					},
 * 					"Resource": []string{
 * 						fmt.Sprintf("%v%v%v%v%v%v%v", "arn:", currentPartition.Partition, ":ecr:", currentRegion.Name, ":", currentCallerIdentity.AccountId, ":repository/*"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		json0 := string(tmpJSON0)
 * 		_, err = ecr.NewRegistryPolicy(ctx, "example", &ecr.RegistryPolicyArgs{
 * 			Policy: pulumi.String(json0),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * ECR Registry Policy can be imported using the registry id, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:ecr/registryPolicy:RegistryPolicy example 123456789012
 * ```
 * 
 *  
 */
@ResourceType(type="aws:ecr/registryPolicy:RegistryPolicy")
public class RegistryPolicy extends io.pulumi.resources.CustomResource {
    @Export(name="policy", type=String.class, parameters={})
    private Output<String> policy;

    public Output<String> getPolicy() {
        return this.policy;
    }
    /**
     * The registry ID where the registry was created.
     * 
     */
    @Export(name="registryId", type=String.class, parameters={})
    private Output<String> registryId;

    /**
     * @return The registry ID where the registry was created.
     * 
     */
    public Output<String> getRegistryId() {
        return this.registryId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegistryPolicy(String name) {
        this(name, RegistryPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegistryPolicy(String name, RegistryPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegistryPolicy(String name, RegistryPolicyArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ecr/registryPolicy:RegistryPolicy", name, args == null ? RegistryPolicyArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private RegistryPolicy(String name, Output<String> id, @Nullable RegistryPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ecr/registryPolicy:RegistryPolicy", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegistryPolicy get(String name, Output<String> id, @Nullable RegistryPolicyState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new RegistryPolicy(name, id, state, options);
    }
}
