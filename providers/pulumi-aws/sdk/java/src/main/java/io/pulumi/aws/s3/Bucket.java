// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.s3;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.s3.BucketArgs;
import io.pulumi.aws.s3.inputs.BucketState;
import io.pulumi.aws.s3.outputs.BucketCorsRule;
import io.pulumi.aws.s3.outputs.BucketGrant;
import io.pulumi.aws.s3.outputs.BucketLifecycleRule;
import io.pulumi.aws.s3.outputs.BucketLogging;
import io.pulumi.aws.s3.outputs.BucketObjectLockConfiguration;
import io.pulumi.aws.s3.outputs.BucketReplicationConfiguration;
import io.pulumi.aws.s3.outputs.BucketServerSideEncryptionConfiguration;
import io.pulumi.aws.s3.outputs.BucketVersioning;
import io.pulumi.aws.s3.outputs.BucketWebsite;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a S3 bucket resource.
 * 
 * > This functionality is for managing S3 in an AWS Partition. To manage [S3 on Outposts](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html), see the `aws.s3control.Bucket` resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### Private Bucket w/ Tags
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const bucket = new aws.s3.Bucket("b", {
 *     acl: "private",
 *     tags: {
 *         Environment: "Dev",
 *         Name: "My bucket",
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * bucket = aws.s3.Bucket("bucket",
 *     acl="private",
 *     tags={
 *         "Environment": "Dev",
 *         "Name": "My bucket",
 *     })
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bucket = new Aws.S3.Bucket("bucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "private",
 *             Tags = 
 *             {
 *                 { "Environment", "Dev" },
 *                 { "Name", "My bucket" },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
 * 			Acl: pulumi.String("private"),
 * 			Tags: pulumi.StringMap{
 * 				"Environment": pulumi.String("Dev"),
 * 				"Name":        pulumi.String("My bucket"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Static Website Hosting
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * from "fs";
 * 
 * const bucket = new aws.s3.Bucket("bucket", {
 *     acl: "public-read",
 *     policy: fs.readFileSync("policy.json"),
 *     website: {
 *         indexDocument: "index.html",
 *         errorDocument: "error.html",
 *         routingRules: `[{
 *     "Condition": {
 *         "KeyPrefixEquals": "docs/"
 *     },
 *     "Redirect": {
 *         "ReplaceKeyPrefixWith": "documents/"
 *     }
 * }]
 * `,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * bucket = aws.s3.Bucket("bucket",
 *     acl="public-read",
 *     policy=(lambda path: open(path).read())("policy.json"),
 *     website=aws.s3.BucketWebsiteArgs(
 *         index_document="index.html",
 *         error_document="error.html",
 *         routing_rules="""[{
 *     "Condition": {
 *         "KeyPrefixEquals": "docs/"
 *     },
 *     "Redirect": {
 *         "ReplaceKeyPrefixWith": "documents/"
 *     }
 * }]
 * """,
 *     ))
 * ```
 * ```csharp
 * using System.IO;
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bucket = new Aws.S3.Bucket("bucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "public-read",
 *             Policy = File.ReadAllText("policy.json"),
 *             Website = new Aws.S3.Inputs.BucketWebsiteArgs
 *             {
 *                 IndexDocument = "index.html",
 *                 ErrorDocument = "error.html",
 *                 RoutingRules = @"[{
 *     ""Condition"": {
 *         ""KeyPrefixEquals"": ""docs/""
 *     },
 *     ""Redirect"": {
 *         ""ReplaceKeyPrefixWith"": ""documents/""
 *     }
 * }]
 * ",
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 	"io/ioutil"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func readFileOrPanic(path string) pulumi.StringPtrInput {
 * 	data, err := ioutil.ReadFile(path)
 * 	if err != nil {
 * 		panic(err.Error())
 * 	}
 * 	return pulumi.String(string(data))
 * }
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
 * 			Acl:    pulumi.String("public-read"),
 * 			Policy: readFileOrPanic("policy.json"),
 * 			Website: &s3.BucketWebsiteArgs{
 * 				IndexDocument: pulumi.String("index.html"),
 * 				ErrorDocument: pulumi.String("error.html"),
 * 				RoutingRules:  pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v", "[{\n", "    \"Condition\": {\n", "        \"KeyPrefixEquals\": \"docs/\"\n", "    },\n", "    \"Redirect\": {\n", "        \"ReplaceKeyPrefixWith\": \"documents/\"\n", "    }\n", "}]\n")),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Using CORS
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const bucket = new aws.s3.Bucket("b", {
 *     acl: "public-read",
 *     corsRules: [{
 *         allowedHeaders: ["*"],
 *         allowedMethods: [
 *             "PUT",
 *             "POST",
 *         ],
 *         allowedOrigins: ["https://s3-website-test.mydomain.com"],
 *         exposeHeaders: ["ETag"],
 *         maxAgeSeconds: 3000,
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * bucket = aws.s3.Bucket("bucket",
 *     acl="public-read",
 *     cors_rules=[aws.s3.BucketCorsRuleArgs(
 *         allowed_headers=["*"],
 *         allowed_methods=[
 *             "PUT",
 *             "POST",
 *         ],
 *         allowed_origins=["https://s3-website-test.mydomain.com"],
 *         expose_headers=["ETag"],
 *         max_age_seconds=3000,
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bucket = new Aws.S3.Bucket("bucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "public-read",
 *             CorsRules = 
 *             {
 *                 new Aws.S3.Inputs.BucketCorsRuleArgs
 *                 {
 *                     AllowedHeaders = 
 *                     {
 *                         "*",
 *                     },
 *                     AllowedMethods = 
 *                     {
 *                         "PUT",
 *                         "POST",
 *                     },
 *                     AllowedOrigins = 
 *                     {
 *                         "https://s3-website-test.mydomain.com",
 *                     },
 *                     ExposeHeaders = 
 *                     {
 *                         "ETag",
 *                     },
 *                     MaxAgeSeconds = 3000,
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
 * 			Acl: pulumi.String("public-read"),
 * 			CorsRules: s3.BucketCorsRuleArray{
 * 				&s3.BucketCorsRuleArgs{
 * 					AllowedHeaders: pulumi.StringArray{
 * 						pulumi.String("*"),
 * 					},
 * 					AllowedMethods: pulumi.StringArray{
 * 						pulumi.String("PUT"),
 * 						pulumi.String("POST"),
 * 					},
 * 					AllowedOrigins: pulumi.StringArray{
 * 						pulumi.String("https://s3-website-test.mydomain.com"),
 * 					},
 * 					ExposeHeaders: pulumi.StringArray{
 * 						pulumi.String("ETag"),
 * 					},
 * 					MaxAgeSeconds: pulumi.Int(3000),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Using versioning
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const bucket = new aws.s3.Bucket("b", {
 *     acl: "private",
 *     versioning: {
 *         enabled: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * bucket = aws.s3.Bucket("bucket",
 *     acl="private",
 *     versioning=aws.s3.BucketVersioningArgs(
 *         enabled=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bucket = new Aws.S3.Bucket("bucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "private",
 *             Versioning = new Aws.S3.Inputs.BucketVersioningArgs
 *             {
 *                 Enabled = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
 * 			Acl: pulumi.String("private"),
 * 			Versioning: &s3.BucketVersioningArgs{
 * 				Enabled: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Enable Logging
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const logBucket = new aws.s3.Bucket("logBucket", {acl: "log-delivery-write"});
 * const bucket = new aws.s3.Bucket("bucket", {
 *     acl: "private",
 *     loggings: [{
 *         targetBucket: logBucket.id,
 *         targetPrefix: "log/",
 *     }],
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * log_bucket = aws.s3.Bucket("logBucket", acl="log-delivery-write")
 * bucket = aws.s3.Bucket("bucket",
 *     acl="private",
 *     loggings=[aws.s3.BucketLoggingArgs(
 *         target_bucket=log_bucket.id,
 *         target_prefix="log/",
 *     )])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var logBucket = new Aws.S3.Bucket("logBucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "log-delivery-write",
 *         });
 *         var bucket = new Aws.S3.Bucket("bucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "private",
 *             Loggings = 
 *             {
 *                 new Aws.S3.Inputs.BucketLoggingArgs
 *                 {
 *                     TargetBucket = logBucket.Id,
 *                     TargetPrefix = "log/",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		logBucket, err := s3.NewBucket(ctx, "logBucket", &s3.BucketArgs{
 * 			Acl: pulumi.String("log-delivery-write"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
 * 			Acl: pulumi.String("private"),
 * 			Loggings: s3.BucketLoggingArray{
 * 				&s3.BucketLoggingArgs{
 * 					TargetBucket: logBucket.ID(),
 * 					TargetPrefix: pulumi.String("log/"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Using object lifecycle
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const bucket = new aws.s3.Bucket("bucket", {
 *     acl: "private",
 *     lifecycleRules: [
 *         {
 *             enabled: true,
 *             expiration: {
 *                 days: 90,
 *             },
 *             id: "log",
 *             prefix: "log/",
 *             tags: {
 *                 autoclean: "true",
 *                 rule: "log",
 *             },
 *             transitions: [
 *                 {
 *                     days: 30,
 *                     storageClass: "STANDARD_IA", // or "ONEZONE_IA"
 *                 },
 *                 {
 *                     days: 60,
 *                     storageClass: "GLACIER",
 *                 },
 *             ],
 *         },
 *         {
 *             enabled: true,
 *             expiration: {
 *                 date: "2016-01-12",
 *             },
 *             id: "tmp",
 *             prefix: "tmp/",
 *         },
 *     ],
 * });
 * const versioningBucket = new aws.s3.Bucket("versioning_bucket", {
 *     acl: "private",
 *     lifecycleRules: [{
 *         enabled: true,
 *         noncurrentVersionExpiration: {
 *             days: 90,
 *         },
 *         noncurrentVersionTransitions: [
 *             {
 *                 days: 30,
 *                 storageClass: "STANDARD_IA",
 *             },
 *             {
 *                 days: 60,
 *                 storageClass: "GLACIER",
 *             },
 *         ],
 *         prefix: "config/",
 *     }],
 *     versioning: {
 *         enabled: true,
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * bucket = aws.s3.Bucket("bucket",
 *     acl="private",
 *     lifecycle_rules=[
 *         aws.s3.BucketLifecycleRuleArgs(
 *             enabled=True,
 *             expiration=aws.s3.BucketLifecycleRuleExpirationArgs(
 *                 days=90,
 *             ),
 *             id="log",
 *             prefix="log/",
 *             tags={
 *                 "autoclean": "true",
 *                 "rule": "log",
 *             },
 *             transitions=[
 *                 aws.s3.BucketLifecycleRuleTransitionArgs(
 *                     days=30,
 *                     storage_class="STANDARD_IA",
 *                 ),
 *                 aws.s3.BucketLifecycleRuleTransitionArgs(
 *                     days=60,
 *                     storage_class="GLACIER",
 *                 ),
 *             ],
 *         ),
 *         aws.s3.BucketLifecycleRuleArgs(
 *             enabled=True,
 *             expiration=aws.s3.BucketLifecycleRuleExpirationArgs(
 *                 date="2016-01-12",
 *             ),
 *             id="tmp",
 *             prefix="tmp/",
 *         ),
 *     ])
 * versioning_bucket = aws.s3.Bucket("versioningBucket",
 *     acl="private",
 *     lifecycle_rules=[aws.s3.BucketLifecycleRuleArgs(
 *         enabled=True,
 *         noncurrent_version_expiration=aws.s3.BucketLifecycleRuleNoncurrentVersionExpirationArgs(
 *             days=90,
 *         ),
 *         noncurrent_version_transitions=[
 *             aws.s3.BucketLifecycleRuleNoncurrentVersionTransitionArgs(
 *                 days=30,
 *                 storage_class="STANDARD_IA",
 *             ),
 *             aws.s3.BucketLifecycleRuleNoncurrentVersionTransitionArgs(
 *                 days=60,
 *                 storage_class="GLACIER",
 *             ),
 *         ],
 *         prefix="config/",
 *     )],
 *     versioning=aws.s3.BucketVersioningArgs(
 *         enabled=True,
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var bucket = new Aws.S3.Bucket("bucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "private",
 *             LifecycleRules = 
 *             {
 *                 new Aws.S3.Inputs.BucketLifecycleRuleArgs
 *                 {
 *                     Enabled = true,
 *                     Expiration = new Aws.S3.Inputs.BucketLifecycleRuleExpirationArgs
 *                     {
 *                         Days = 90,
 *                     },
 *                     Id = "log",
 *                     Prefix = "log/",
 *                     Tags = 
 *                     {
 *                         { "autoclean", "true" },
 *                         { "rule", "log" },
 *                     },
 *                     Transitions = 
 *                     {
 *                         new Aws.S3.Inputs.BucketLifecycleRuleTransitionArgs
 *                         {
 *                             Days = 30,
 *                             StorageClass = "STANDARD_IA",
 *                         },
 *                         new Aws.S3.Inputs.BucketLifecycleRuleTransitionArgs
 *                         {
 *                             Days = 60,
 *                             StorageClass = "GLACIER",
 *                         },
 *                     },
 *                 },
 *                 new Aws.S3.Inputs.BucketLifecycleRuleArgs
 *                 {
 *                     Enabled = true,
 *                     Expiration = new Aws.S3.Inputs.BucketLifecycleRuleExpirationArgs
 *                     {
 *                         Date = "2016-01-12",
 *                     },
 *                     Id = "tmp",
 *                     Prefix = "tmp/",
 *                 },
 *             },
 *         });
 *         var versioningBucket = new Aws.S3.Bucket("versioningBucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "private",
 *             LifecycleRules = 
 *             {
 *                 new Aws.S3.Inputs.BucketLifecycleRuleArgs
 *                 {
 *                     Enabled = true,
 *                     NoncurrentVersionExpiration = new Aws.S3.Inputs.BucketLifecycleRuleNoncurrentVersionExpirationArgs
 *                     {
 *                         Days = 90,
 *                     },
 *                     NoncurrentVersionTransitions = 
 *                     {
 *                         new Aws.S3.Inputs.BucketLifecycleRuleNoncurrentVersionTransitionArgs
 *                         {
 *                             Days = 30,
 *                             StorageClass = "STANDARD_IA",
 *                         },
 *                         new Aws.S3.Inputs.BucketLifecycleRuleNoncurrentVersionTransitionArgs
 *                         {
 *                             Days = 60,
 *                             StorageClass = "GLACIER",
 *                         },
 *                     },
 *                     Prefix = "config/",
 *                 },
 *             },
 *             Versioning = new Aws.S3.Inputs.BucketVersioningArgs
 *             {
 *                 Enabled = true,
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
 * 			Acl: pulumi.String("private"),
 * 			LifecycleRules: s3.BucketLifecycleRuleArray{
 * 				&s3.BucketLifecycleRuleArgs{
 * 					Enabled: pulumi.Bool(true),
 * 					Expiration: &s3.BucketLifecycleRuleExpirationArgs{
 * 						Days: pulumi.Int(90),
 * 					},
 * 					Id:     pulumi.String("log"),
 * 					Prefix: pulumi.String("log/"),
 * 					Tags: pulumi.StringMap{
 * 						"autoclean": pulumi.String("true"),
 * 						"rule":      pulumi.String("log"),
 * 					},
 * 					Transitions: s3.BucketLifecycleRuleTransitionArray{
 * 						&s3.BucketLifecycleRuleTransitionArgs{
 * 							Days:         pulumi.Int(30),
 * 							StorageClass: pulumi.String("STANDARD_IA"),
 * 						},
 * 						&s3.BucketLifecycleRuleTransitionArgs{
 * 							Days:         pulumi.Int(60),
 * 							StorageClass: pulumi.String("GLACIER"),
 * 						},
 * 					},
 * 				},
 * 				&s3.BucketLifecycleRuleArgs{
 * 					Enabled: pulumi.Bool(true),
 * 					Expiration: &s3.BucketLifecycleRuleExpirationArgs{
 * 						Date: pulumi.String("2016-01-12"),
 * 					},
 * 					Id:     pulumi.String("tmp"),
 * 					Prefix: pulumi.String("tmp/"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = s3.NewBucket(ctx, "versioningBucket", &s3.BucketArgs{
 * 			Acl: pulumi.String("private"),
 * 			LifecycleRules: s3.BucketLifecycleRuleArray{
 * 				&s3.BucketLifecycleRuleArgs{
 * 					Enabled: pulumi.Bool(true),
 * 					NoncurrentVersionExpiration: &s3.BucketLifecycleRuleNoncurrentVersionExpirationArgs{
 * 						Days: pulumi.Int(90),
 * 					},
 * 					NoncurrentVersionTransitions: s3.BucketLifecycleRuleNoncurrentVersionTransitionArray{
 * 						&s3.BucketLifecycleRuleNoncurrentVersionTransitionArgs{
 * 							Days:         pulumi.Int(30),
 * 							StorageClass: pulumi.String("STANDARD_IA"),
 * 						},
 * 						&s3.BucketLifecycleRuleNoncurrentVersionTransitionArgs{
 * 							Days:         pulumi.Int(60),
 * 							StorageClass: pulumi.String("GLACIER"),
 * 						},
 * 					},
 * 					Prefix: pulumi.String("config/"),
 * 				},
 * 			},
 * 			Versioning: &s3.BucketVersioningArgs{
 * 				Enabled: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Using replication configuration
 * 
 * > **NOTE:** See the `aws.s3.BucketReplicationConfig` resource to support bi-directional replication configuration and additional features.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const central = new aws.Provider("central", {region: "eu-central-1"});
 * const replicationRole = new aws.iam.Role("replicationRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "s3.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const destination = new aws.s3.Bucket("destination", {versioning: {
 *     enabled: true,
 * }});
 * const source = new aws.s3.Bucket("source", {
 *     acl: "private",
 *     versioning: {
 *         enabled: true,
 *     },
 *     replicationConfiguration: {
 *         role: replicationRole.arn,
 *         rules: [{
 *             id: "foobar",
 *             status: "Enabled",
 *             filter: {
 *                 tags: {},
 *             },
 *             destination: {
 *                 bucket: destination.arn,
 *                 storageClass: "STANDARD",
 *                 replicationTime: {
 *                     status: "Enabled",
 *                     minutes: 15,
 *                 },
 *                 metrics: {
 *                     status: "Enabled",
 *                     minutes: 15,
 *                 },
 *             },
 *         }],
 *     },
 * }, {
 *     provider: aws.central,
 * });
 * const replicationPolicy = new aws.iam.Policy("replicationPolicy", {policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "s3:GetReplicationConfiguration",
 *         "s3:ListBucket"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${source.arn}"
 *       ]
 *     },
 *     {
 *       "Action": [
 *         "s3:GetObjectVersionForReplication",
 *         "s3:GetObjectVersionAcl",
 *          "s3:GetObjectVersionTagging"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${source.arn}/*"
 *       ]
 *     },
 *     {
 *       "Action": [
 *         "s3:ReplicateObject",
 *         "s3:ReplicateDelete",
 *         "s3:ReplicateTags"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": "${destination.arn}/*"
 *     }
 *   ]
 * }
 * `});
 * const replicationRolePolicyAttachment = new aws.iam.RolePolicyAttachment("replicationRolePolicyAttachment", {
 *     role: replicationRole.name,
 *     policyArn: replicationPolicy.arn,
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * import pulumi_pulumi as pulumi
 * 
 * central = pulumi.providers.Aws("central", region="eu-central-1")
 * replication_role = aws.iam.Role("replicationRole", assume_role_policy="""{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "s3.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * """)
 * destination = aws.s3.Bucket("destination", versioning=aws.s3.BucketVersioningArgs(
 *     enabled=True,
 * ))
 * source = aws.s3.Bucket("source",
 *     acl="private",
 *     versioning=aws.s3.BucketVersioningArgs(
 *         enabled=True,
 *     ),
 *     replication_configuration=aws.s3.BucketReplicationConfigurationArgs(
 *         role=replication_role.arn,
 *         rules=[aws.s3.BucketReplicationConfigurationRuleArgs(
 *             id="foobar",
 *             status="Enabled",
 *             filter=aws.s3.BucketReplicationConfigurationRuleFilterArgs(
 *                 tags={},
 *             ),
 *             destination=aws.s3.BucketReplicationConfigurationRuleDestinationArgs(
 *                 bucket=destination.arn,
 *                 storage_class="STANDARD",
 *                 replication_time=aws.s3.BucketReplicationConfigurationRuleDestinationReplicationTimeArgs(
 *                     status="Enabled",
 *                     minutes=15,
 *                 ),
 *                 metrics=aws.s3.BucketReplicationConfigurationRuleDestinationMetricsArgs(
 *                     status="Enabled",
 *                     minutes=15,
 *                 ),
 *             ),
 *         )],
 *     ),
 *     opts=pulumi.ResourceOptions(provider=aws["central"]))
 * replication_policy = aws.iam.Policy("replicationPolicy", policy=pulumi.Output.all(source.arn, source.arn, destination.arn).apply(lambda sourceArn, sourceArn1, destinationArn: f"""{{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {{
 *       "Action": [
 *         "s3:GetReplicationConfiguration",
 *         "s3:ListBucket"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "{source_arn}"
 *       ]
 *     }},
 *     {{
 *       "Action": [
 *         "s3:GetObjectVersionForReplication",
 *         "s3:GetObjectVersionAcl",
 *          "s3:GetObjectVersionTagging"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "{source_arn1}/*"
 *       ]
 *     }},
 *     {{
 *       "Action": [
 *         "s3:ReplicateObject",
 *         "s3:ReplicateDelete",
 *         "s3:ReplicateTags"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": "{destination_arn}/*"
 *     }}
 *   ]
 * }}
 * """))
 * replication_role_policy_attachment = aws.iam.RolePolicyAttachment("replicationRolePolicyAttachment",
 *     role=replication_role.name,
 *     policy_arn=replication_policy.arn)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var central = new Aws.Provider("central", new Aws.ProviderArgs
 *         {
 *             Region = "eu-central-1",
 *         });
 *         var replicationRole = new Aws.Iam.Role("replicationRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {
 *       ""Action"": ""sts:AssumeRole"",
 *       ""Principal"": {
 *         ""Service"": ""s3.amazonaws.com""
 *       },
 *       ""Effect"": ""Allow"",
 *       ""Sid"": """"
 *     }
 *   ]
 * }
 * ",
 *         });
 *         var destination = new Aws.S3.Bucket("destination", new Aws.S3.BucketArgs
 *         {
 *             Versioning = new Aws.S3.Inputs.BucketVersioningArgs
 *             {
 *                 Enabled = true,
 *             },
 *         });
 *         var source = new Aws.S3.Bucket("source", new Aws.S3.BucketArgs
 *         {
 *             Acl = "private",
 *             Versioning = new Aws.S3.Inputs.BucketVersioningArgs
 *             {
 *                 Enabled = true,
 *             },
 *             ReplicationConfiguration = new Aws.S3.Inputs.BucketReplicationConfigurationArgs
 *             {
 *                 Role = replicationRole.Arn,
 *                 Rules = 
 *                 {
 *                     new Aws.S3.Inputs.BucketReplicationConfigurationRuleArgs
 *                     {
 *                         Id = "foobar",
 *                         Status = "Enabled",
 *                         Filter = new Aws.S3.Inputs.BucketReplicationConfigurationRuleFilterArgs
 *                         {
 *                             Tags = ,
 *                         },
 *                         Destination = new Aws.S3.Inputs.BucketReplicationConfigurationRuleDestinationArgs
 *                         {
 *                             Bucket = destination.Arn,
 *                             StorageClass = "STANDARD",
 *                             ReplicationTime = new Aws.S3.Inputs.BucketReplicationConfigurationRuleDestinationReplicationTimeArgs
 *                             {
 *                                 Status = "Enabled",
 *                                 Minutes = 15,
 *                             },
 *                             Metrics = new Aws.S3.Inputs.BucketReplicationConfigurationRuleDestinationMetricsArgs
 *                             {
 *                                 Status = "Enabled",
 *                                 Minutes = 15,
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         }, new CustomResourceOptions
 *         {
 *             Provider = aws.Central,
 *         });
 *         var replicationPolicy = new Aws.Iam.Policy("replicationPolicy", new Aws.Iam.PolicyArgs
 *         {
 *             Policy = Output.Tuple(source.Arn, source.Arn, destination.Arn).Apply(values =>
 *             {
 *                 var sourceArn = values.Item1;
 *                 var sourceArn1 = values.Item2;
 *                 var destinationArn = values.Item3;
 *                 return @$"{{
 *   ""Version"": ""2012-10-17"",
 *   ""Statement"": [
 *     {{
 *       ""Action"": [
 *         ""s3:GetReplicationConfiguration"",
 *         ""s3:ListBucket""
 *       ],
 *       ""Effect"": ""Allow"",
 *       ""Resource"": [
 *         ""{sourceArn}""
 *       ]
 *     }},
 *     {{
 *       ""Action"": [
 *         ""s3:GetObjectVersionForReplication"",
 *         ""s3:GetObjectVersionAcl"",
 *          ""s3:GetObjectVersionTagging""
 *       ],
 *       ""Effect"": ""Allow"",
 *       ""Resource"": [
 *         ""{sourceArn1}/*""
 *       ]
 *     }},
 *     {{
 *       ""Action"": [
 *         ""s3:ReplicateObject"",
 *         ""s3:ReplicateDelete"",
 *         ""s3:ReplicateTags""
 *       ],
 *       ""Effect"": ""Allow"",
 *       ""Resource"": ""{destinationArn}/*""
 *     }}
 *   ]
 * }}
 * ";
 *             }),
 *         });
 *         var replicationRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("replicationRolePolicyAttachment", new Aws.Iam.RolePolicyAttachmentArgs
 *         {
 *             Role = replicationRole.Name,
 *             PolicyArn = replicationPolicy.Arn,
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/providers"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := providers.Newaws(ctx, "central", &providers.awsArgs{
 * 			Region: "eu-central-1",
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		replicationRole, err := iam.NewRole(ctx, "replicationRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": \"sts:AssumeRole\",\n", "      \"Principal\": {\n", "        \"Service\": \"s3.amazonaws.com\"\n", "      },\n", "      \"Effect\": \"Allow\",\n", "      \"Sid\": \"\"\n", "    }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		destination, err := s3.NewBucket(ctx, "destination", &s3.BucketArgs{
 * 			Versioning: &s3.BucketVersioningArgs{
 * 				Enabled: pulumi.Bool(true),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		source, err := s3.NewBucket(ctx, "source", &s3.BucketArgs{
 * 			Acl: pulumi.String("private"),
 * 			Versioning: &s3.BucketVersioningArgs{
 * 				Enabled: pulumi.Bool(true),
 * 			},
 * 			ReplicationConfiguration: &s3.BucketReplicationConfigurationArgs{
 * 				Role: replicationRole.Arn,
 * 				Rules: s3.BucketReplicationConfigurationRuleArray{
 * 					&s3.BucketReplicationConfigurationRuleArgs{
 * 						Id:     pulumi.String("foobar"),
 * 						Status: pulumi.String("Enabled"),
 * 						Filter: &s3.BucketReplicationConfigurationRuleFilterArgs{
 * 							Tags: nil,
 * 						},
 * 						Destination: &s3.BucketReplicationConfigurationRuleDestinationArgs{
 * 							Bucket:       destination.Arn,
 * 							StorageClass: pulumi.String("STANDARD"),
 * 							ReplicationTime: &s3.BucketReplicationConfigurationRuleDestinationReplicationTimeArgs{
 * 								Status:  pulumi.String("Enabled"),
 * 								Minutes: pulumi.Int(15),
 * 							},
 * 							Metrics: &s3.BucketReplicationConfigurationRuleDestinationMetricsArgs{
 * 								Status:  pulumi.String("Enabled"),
 * 								Minutes: pulumi.Int(15),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		}, pulumi.Provider(aws.Central))
 * 		if err != nil {
 * 			return err
 * 		}
 * 		replicationPolicy, err := iam.NewPolicy(ctx, "replicationPolicy", &iam.PolicyArgs{
 * 			Policy: pulumi.All(source.Arn, source.Arn, destination.Arn).ApplyT(func(_args []interface{}) (string, error) {
 * 				sourceArn := _args[0].(string)
 * 				sourceArn1 := _args[1].(string)
 * 				destinationArn := _args[2].(string)
 * 				return fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\": \"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Action\": [\n", "        \"s3:GetReplicationConfiguration\",\n", "        \"s3:ListBucket\"\n", "      ],\n", "      \"Effect\": \"Allow\",\n", "      \"Resource\": [\n", "        \"", sourceArn, "\"\n", "      ]\n", "    },\n", "    {\n", "      \"Action\": [\n", "        \"s3:GetObjectVersionForReplication\",\n", "        \"s3:GetObjectVersionAcl\",\n", "         \"s3:GetObjectVersionTagging\"\n", "      ],\n", "      \"Effect\": \"Allow\",\n", "      \"Resource\": [\n", "        \"", sourceArn1, "/*\"\n", "      ]\n", "    },\n", "    {\n", "      \"Action\": [\n", "        \"s3:ReplicateObject\",\n", "        \"s3:ReplicateDelete\",\n", "        \"s3:ReplicateTags\"\n", "      ],\n", "      \"Effect\": \"Allow\",\n", "      \"Resource\": \"", destinationArn, "/*\"\n", "    }\n", "  ]\n", "}\n"), nil
 * 			}).(pulumi.StringOutput),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = iam.NewRolePolicyAttachment(ctx, "replicationRolePolicyAttachment", &iam.RolePolicyAttachmentArgs{
 * 			Role:      replicationRole.Name,
 * 			PolicyArn: replicationPolicy.Arn,
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Enable Default Server Side Encryption
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const mykey = new aws.kms.Key("mykey", {
 *     description: "This key is used to encrypt bucket objects",
 *     deletionWindowInDays: 10,
 * });
 * const mybucket = new aws.s3.Bucket("mybucket", {serverSideEncryptionConfiguration: {
 *     rule: {
 *         applyServerSideEncryptionByDefault: {
 *             kmsMasterKeyId: mykey.arn,
 *             sseAlgorithm: "aws:kms",
 *         },
 *     },
 * }});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * mykey = aws.kms.Key("mykey",
 *     description="This key is used to encrypt bucket objects",
 *     deletion_window_in_days=10)
 * mybucket = aws.s3.Bucket("mybucket", server_side_encryption_configuration=aws.s3.BucketServerSideEncryptionConfigurationArgs(
 *     rule=aws.s3.BucketServerSideEncryptionConfigurationRuleArgs(
 *         apply_server_side_encryption_by_default=aws.s3.BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs(
 *             kms_master_key_id=mykey.arn,
 *             sse_algorithm="aws:kms",
 *         ),
 *     ),
 * ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var mykey = new Aws.Kms.Key("mykey", new Aws.Kms.KeyArgs
 *         {
 *             Description = "This key is used to encrypt bucket objects",
 *             DeletionWindowInDays = 10,
 *         });
 *         var mybucket = new Aws.S3.Bucket("mybucket", new Aws.S3.BucketArgs
 *         {
 *             ServerSideEncryptionConfiguration = new Aws.S3.Inputs.BucketServerSideEncryptionConfigurationArgs
 *             {
 *                 Rule = new Aws.S3.Inputs.BucketServerSideEncryptionConfigurationRuleArgs
 *                 {
 *                     ApplyServerSideEncryptionByDefault = new Aws.S3.Inputs.BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs
 *                     {
 *                         KmsMasterKeyId = mykey.Arn,
 *                         SseAlgorithm = "aws:kms",
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kms"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		mykey, err := kms.NewKey(ctx, "mykey", &kms.KeyArgs{
 * 			Description:          pulumi.String("This key is used to encrypt bucket objects"),
 * 			DeletionWindowInDays: pulumi.Int(10),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = s3.NewBucket(ctx, "mybucket", &s3.BucketArgs{
 * 			ServerSideEncryptionConfiguration: &s3.BucketServerSideEncryptionConfigurationArgs{
 * 				Rule: &s3.BucketServerSideEncryptionConfigurationRuleArgs{
 * 					ApplyServerSideEncryptionByDefault: &s3.BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs{
 * 						KmsMasterKeyId: mykey.Arn,
 * 						SseAlgorithm:   pulumi.String("aws:kms"),
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Using ACL policy grants
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const currentUser = aws.s3.getCanonicalUserId({});
 * const bucket = new aws.s3.Bucket("bucket", {grants: [
 *     {
 *         id: currentUser.then(currentUser => currentUser.id),
 *         type: "CanonicalUser",
 *         permissions: ["FULL_CONTROL"],
 *     },
 *     {
 *         type: "Group",
 *         permissions: [
 *             "READ_ACP",
 *             "WRITE",
 *         ],
 *         uri: "http://acs.amazonaws.com/groups/s3/LogDelivery",
 *     },
 * ]});
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * current_user = aws.s3.get_canonical_user_id()
 * bucket = aws.s3.Bucket("bucket", grants=[
 *     aws.s3.BucketGrantArgs(
 *         id=current_user.id,
 *         type="CanonicalUser",
 *         permissions=["FULL_CONTROL"],
 *     ),
 *     aws.s3.BucketGrantArgs(
 *         type="Group",
 *         permissions=[
 *             "READ_ACP",
 *             "WRITE",
 *         ],
 *         uri="http://acs.amazonaws.com/groups/s3/LogDelivery",
 *     ),
 * ])
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var currentUser = Output.Create(Aws.S3.GetCanonicalUserId.InvokeAsync());
 *         var bucket = new Aws.S3.Bucket("bucket", new Aws.S3.BucketArgs
 *         {
 *             Grants = 
 *             {
 *                 new Aws.S3.Inputs.BucketGrantArgs
 *                 {
 *                     Id = currentUser.Apply(currentUser => currentUser.Id),
 *                     Type = "CanonicalUser",
 *                     Permissions = 
 *                     {
 *                         "FULL_CONTROL",
 *                     },
 *                 },
 *                 new Aws.S3.Inputs.BucketGrantArgs
 *                 {
 *                     Type = "Group",
 *                     Permissions = 
 *                     {
 *                         "READ_ACP",
 *                         "WRITE",
 *                     },
 *                     Uri = "http://acs.amazonaws.com/groups/s3/LogDelivery",
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		currentUser, err := s3.GetCanonicalUserId(ctx, nil, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		_, err = s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
 * 			Grants: s3.BucketGrantArray{
 * 				&s3.BucketGrantArgs{
 * 					Id:   pulumi.String(currentUser.Id),
 * 					Type: pulumi.String("CanonicalUser"),
 * 					Permissions: pulumi.StringArray{
 * 						pulumi.String("FULL_CONTROL"),
 * 					},
 * 				},
 * 				&s3.BucketGrantArgs{
 * 					Type: pulumi.String("Group"),
 * 					Permissions: pulumi.StringArray{
 * 						pulumi.String("READ_ACP"),
 * 						pulumi.String("WRITE"),
 * 					},
 * 					Uri: pulumi.String("http://acs.amazonaws.com/groups/s3/LogDelivery"),
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * S3 bucket can be imported using the `bucket`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:s3/bucket:Bucket bucket bucket-name
 * ```
 * 
 *  The `policy` argument is not imported and will be deprecated in a future version of the provider. Use the `aws_s3_bucket_policy` resource to manage the S3 Bucket Policy instead. 
 */
@ResourceType(type="aws:s3/bucket:Bucket")
public class Bucket extends io.pulumi.resources.CustomResource {
    /**
     * Sets the accelerate configuration of an existing bucket. Can be `Enabled` or `Suspended`.
     * 
     */
    @Export(name="accelerationStatus", type=String.class, parameters={})
    private Output<String> accelerationStatus;

    /**
     * @return Sets the accelerate configuration of an existing bucket. Can be `Enabled` or `Suspended`.
     * 
     */
    public Output<String> getAccelerationStatus() {
        return this.accelerationStatus;
    }
    /**
     * The [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Valid values are `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, and `log-delivery-write`. Defaults to `private`.  Conflicts with `grant`.
     * 
     */
    @Export(name="acl", type=String.class, parameters={})
    private Output</* @Nullable */ String> acl;

    /**
     * @return The [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Valid values are `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, and `log-delivery-write`. Defaults to `private`.  Conflicts with `grant`.
     * 
     */
    public Output</* @Nullable */ String> getAcl() {
        return this.acl;
    }
    /**
     * The ARN of the bucket. Will be of format `arn:aws:s3:::bucketname`.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the bucket. Will be of format `arn:aws:s3:::bucketname`.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The name of the bucket. If omitted, this provider will assign a random, unique name. Must be lowercase and less than or equal to 63 characters in length. A full list of bucket naming rules [may be found here](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
     * 
     */
    @Export(name="bucket", type=String.class, parameters={})
    private Output<String> bucket;

    /**
     * @return The name of the bucket. If omitted, this provider will assign a random, unique name. Must be lowercase and less than or equal to 63 characters in length. A full list of bucket naming rules [may be found here](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
     * 
     */
    public Output<String> getBucket() {
        return this.bucket;
    }
    /**
     * The bucket domain name. Will be of format `bucketname.s3.amazonaws.com`.
     * 
     */
    @Export(name="bucketDomainName", type=String.class, parameters={})
    private Output<String> bucketDomainName;

    /**
     * @return The bucket domain name. Will be of format `bucketname.s3.amazonaws.com`.
     * 
     */
    public Output<String> getBucketDomainName() {
        return this.bucketDomainName;
    }
    /**
     * Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`. Must be lowercase and less than or equal to 37 characters in length. A full list of bucket naming rules [may be found here](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
     * 
     */
    @Export(name="bucketPrefix", type=String.class, parameters={})
    private Output</* @Nullable */ String> bucketPrefix;

    /**
     * @return Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`. Must be lowercase and less than or equal to 37 characters in length. A full list of bucket naming rules [may be found here](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
     * 
     */
    public Output</* @Nullable */ String> getBucketPrefix() {
        return this.bucketPrefix;
    }
    /**
     * The bucket region-specific domain name. The bucket domain name including the region name, please refer [here](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for format. Note: The AWS CloudFront allows specifying S3 region-specific endpoint when creating S3 origin, it will prevent [redirect issues](https://forums.aws.amazon.com/thread.jspa?threadID=216814) from CloudFront to S3 Origin URL.
     * 
     */
    @Export(name="bucketRegionalDomainName", type=String.class, parameters={})
    private Output<String> bucketRegionalDomainName;

    /**
     * @return The bucket region-specific domain name. The bucket domain name including the region name, please refer [here](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for format. Note: The AWS CloudFront allows specifying S3 region-specific endpoint when creating S3 origin, it will prevent [redirect issues](https://forums.aws.amazon.com/thread.jspa?threadID=216814) from CloudFront to S3 Origin URL.
     * 
     */
    public Output<String> getBucketRegionalDomainName() {
        return this.bucketRegionalDomainName;
    }
    /**
     * A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).
     * 
     */
    @Export(name="corsRules", type=List.class, parameters={BucketCorsRule.class})
    private Output</* @Nullable */ List<BucketCorsRule>> corsRules;

    /**
     * @return A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).
     * 
     */
    public Output</* @Nullable */ List<BucketCorsRule>> getCorsRules() {
        return this.corsRules;
    }
    /**
     * A boolean that indicates all objects (including any [locked objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html)) should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
     * 
     */
    @Export(name="forceDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceDestroy;

    /**
     * @return A boolean that indicates all objects (including any [locked objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html)) should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
     * 
     */
    public Output</* @Nullable */ Boolean> getForceDestroy() {
        return this.forceDestroy;
    }
    /**
     * An [ACL policy grant](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#sample-acl) (documented below). Conflicts with `acl`.
     * 
     */
    @Export(name="grants", type=List.class, parameters={BucketGrant.class})
    private Output</* @Nullable */ List<BucketGrant>> grants;

    /**
     * @return An [ACL policy grant](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#sample-acl) (documented below). Conflicts with `acl`.
     * 
     */
    public Output</* @Nullable */ List<BucketGrant>> getGrants() {
        return this.grants;
    }
    /**
     * The [Route 53 Hosted Zone ID](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints) for this bucket's region.
     * 
     */
    @Export(name="hostedZoneId", type=String.class, parameters={})
    private Output<String> hostedZoneId;

    /**
     * @return The [Route 53 Hosted Zone ID](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints) for this bucket's region.
     * 
     */
    public Output<String> getHostedZoneId() {
        return this.hostedZoneId;
    }
    /**
     * A configuration of [object lifecycle management](http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) (documented below).
     * 
     */
    @Export(name="lifecycleRules", type=List.class, parameters={BucketLifecycleRule.class})
    private Output</* @Nullable */ List<BucketLifecycleRule>> lifecycleRules;

    /**
     * @return A configuration of [object lifecycle management](http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) (documented below).
     * 
     */
    public Output</* @Nullable */ List<BucketLifecycleRule>> getLifecycleRules() {
        return this.lifecycleRules;
    }
    /**
     * A settings of [bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/UG/ManagingBucketLogging.html) (documented below).
     * 
     */
    @Export(name="loggings", type=List.class, parameters={BucketLogging.class})
    private Output</* @Nullable */ List<BucketLogging>> loggings;

    /**
     * @return A settings of [bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/UG/ManagingBucketLogging.html) (documented below).
     * 
     */
    public Output</* @Nullable */ List<BucketLogging>> getLoggings() {
        return this.loggings;
    }
    /**
     * A configuration of [S3 object locking](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html) (documented below)
     * 
     */
    @Export(name="objectLockConfiguration", type=BucketObjectLockConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketObjectLockConfiguration> objectLockConfiguration;

    /**
     * @return A configuration of [S3 object locking](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html) (documented below)
     * 
     */
    public Output</* @Nullable */ BucketObjectLockConfiguration> getObjectLockConfiguration() {
        return this.objectLockConfiguration;
    }
    /**
     * A valid [bucket policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html) JSON document. Note that if the policy document is not specific enough (but still valid), the provider may view the policy as constantly changing in a `pulumi up / preview / update`. In this case, please make sure you use the verbose/specific version of the policy.
     * 
     */
    @Export(name="policy", type=String.class, parameters={})
    private Output</* @Nullable */ String> policy;

    /**
     * @return A valid [bucket policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html) JSON document. Note that if the policy document is not specific enough (but still valid), the provider may view the policy as constantly changing in a `pulumi up / preview / update`. In this case, please make sure you use the verbose/specific version of the policy.
     * 
     */
    public Output</* @Nullable */ String> getPolicy() {
        return this.policy;
    }
    /**
     * The AWS region this bucket resides in.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The AWS region this bucket resides in.
     * 
     */
    public Output<String> getRegion() {
        return this.region;
    }
    /**
     * A configuration of [replication configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html) (documented below).
     * 
     */
    @Export(name="replicationConfiguration", type=BucketReplicationConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketReplicationConfiguration> replicationConfiguration;

    /**
     * @return A configuration of [replication configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html) (documented below).
     * 
     */
    public Output</* @Nullable */ BucketReplicationConfiguration> getReplicationConfiguration() {
        return this.replicationConfiguration;
    }
    /**
     * Specifies who should bear the cost of Amazon S3 data transfer.
     * Can be either `BucketOwner` or `Requester`. By default, the owner of the S3 bucket would incur
     * the costs of any data transfer. See [Requester Pays Buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html)
     * developer guide for more information.
     * 
     */
    @Export(name="requestPayer", type=String.class, parameters={})
    private Output<String> requestPayer;

    /**
     * @return Specifies who should bear the cost of Amazon S3 data transfer.
     * Can be either `BucketOwner` or `Requester`. By default, the owner of the S3 bucket would incur
     * the costs of any data transfer. See [Requester Pays Buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html)
     * developer guide for more information.
     * 
     */
    public Output<String> getRequestPayer() {
        return this.requestPayer;
    }
    /**
     * A configuration of [server-side encryption configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) (documented below)
     * 
     */
    @Export(name="serverSideEncryptionConfiguration", type=BucketServerSideEncryptionConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketServerSideEncryptionConfiguration> serverSideEncryptionConfiguration;

    /**
     * @return A configuration of [server-side encryption configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) (documented below)
     * 
     */
    public Output</* @Nullable */ BucketServerSideEncryptionConfiguration> getServerSideEncryptionConfiguration() {
        return this.serverSideEncryptionConfiguration;
    }
    /**
     * A mapping of tags to assign to the bucket.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the bucket.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)
     * 
     */
    @Export(name="versioning", type=BucketVersioning.class, parameters={})
    private Output<BucketVersioning> versioning;

    /**
     * @return A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)
     * 
     */
    public Output<BucketVersioning> getVersioning() {
        return this.versioning;
    }
    /**
     * A website object (documented below).
     * 
     */
    @Export(name="website", type=BucketWebsite.class, parameters={})
    private Output</* @Nullable */ BucketWebsite> website;

    /**
     * @return A website object (documented below).
     * 
     */
    public Output</* @Nullable */ BucketWebsite> getWebsite() {
        return this.website;
    }
    /**
     * The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records.
     * 
     */
    @Export(name="websiteDomain", type=String.class, parameters={})
    private Output<String> websiteDomain;

    /**
     * @return The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records.
     * 
     */
    public Output<String> getWebsiteDomain() {
        return this.websiteDomain;
    }
    /**
     * The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
     * 
     */
    @Export(name="websiteEndpoint", type=String.class, parameters={})
    private Output<String> websiteEndpoint;

    /**
     * @return The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
     * 
     */
    public Output<String> getWebsiteEndpoint() {
        return this.websiteEndpoint;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Bucket(String name) {
        this(name, BucketArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Bucket(String name, @Nullable BucketArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Bucket(String name, @Nullable BucketArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:s3/bucket:Bucket", name, args == null ? BucketArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Bucket(String name, Output<String> id, @Nullable BucketState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:s3/bucket:Bucket", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Bucket get(String name, Output<String> id, @Nullable BucketState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Bucket(name, id, state, options);
    }
}
