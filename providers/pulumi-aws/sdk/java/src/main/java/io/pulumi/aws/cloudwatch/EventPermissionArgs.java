// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.cloudwatch;

import io.pulumi.aws.cloudwatch.inputs.EventPermissionConditionArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventPermissionArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventPermissionArgs Empty = new EventPermissionArgs();

    /**
     * The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
     * 
     */
    @Import(name="action")
      private final @Nullable Output<String> action;

    public Output<String> action() {
        return this.action == null ? Codegen.empty() : this.action;
    }

    /**
     * Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
     * 
     */
    @Import(name="condition")
      private final @Nullable Output<EventPermissionConditionArgs> condition;

    public Output<EventPermissionConditionArgs> condition() {
        return this.condition == null ? Codegen.empty() : this.condition;
    }

    /**
     * The event bus to set the permissions on. If you omit this, the permissions are set on the `default` event bus.
     * 
     */
    @Import(name="eventBusName")
      private final @Nullable Output<String> eventBusName;

    public Output<String> eventBusName() {
        return this.eventBusName == null ? Codegen.empty() : this.eventBusName;
    }

    /**
     * The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
     * 
     */
    @Import(name="principal", required=true)
      private final Output<String> principal;

    public Output<String> principal() {
        return this.principal;
    }

    /**
     * An identifier string for the external account that you are granting permissions to.
     * 
     */
    @Import(name="statementId", required=true)
      private final Output<String> statementId;

    public Output<String> statementId() {
        return this.statementId;
    }

    public EventPermissionArgs(
        @Nullable Output<String> action,
        @Nullable Output<EventPermissionConditionArgs> condition,
        @Nullable Output<String> eventBusName,
        Output<String> principal,
        Output<String> statementId) {
        this.action = action;
        this.condition = condition;
        this.eventBusName = eventBusName;
        this.principal = Objects.requireNonNull(principal, "expected parameter 'principal' to be non-null");
        this.statementId = Objects.requireNonNull(statementId, "expected parameter 'statementId' to be non-null");
    }

    private EventPermissionArgs() {
        this.action = Codegen.empty();
        this.condition = Codegen.empty();
        this.eventBusName = Codegen.empty();
        this.principal = Codegen.empty();
        this.statementId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> action;
        private @Nullable Output<EventPermissionConditionArgs> condition;
        private @Nullable Output<String> eventBusName;
        private Output<String> principal;
        private Output<String> statementId;

        public Builder() {
    	      // Empty
        }

        public Builder(EventPermissionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.condition = defaults.condition;
    	      this.eventBusName = defaults.eventBusName;
    	      this.principal = defaults.principal;
    	      this.statementId = defaults.statementId;
        }

        public Builder action(@Nullable Output<String> action) {
            this.action = action;
            return this;
        }
        public Builder action(@Nullable String action) {
            this.action = Codegen.ofNullable(action);
            return this;
        }
        public Builder condition(@Nullable Output<EventPermissionConditionArgs> condition) {
            this.condition = condition;
            return this;
        }
        public Builder condition(@Nullable EventPermissionConditionArgs condition) {
            this.condition = Codegen.ofNullable(condition);
            return this;
        }
        public Builder eventBusName(@Nullable Output<String> eventBusName) {
            this.eventBusName = eventBusName;
            return this;
        }
        public Builder eventBusName(@Nullable String eventBusName) {
            this.eventBusName = Codegen.ofNullable(eventBusName);
            return this;
        }
        public Builder principal(Output<String> principal) {
            this.principal = Objects.requireNonNull(principal);
            return this;
        }
        public Builder principal(String principal) {
            this.principal = Output.of(Objects.requireNonNull(principal));
            return this;
        }
        public Builder statementId(Output<String> statementId) {
            this.statementId = Objects.requireNonNull(statementId);
            return this;
        }
        public Builder statementId(String statementId) {
            this.statementId = Output.of(Objects.requireNonNull(statementId));
            return this;
        }        public EventPermissionArgs build() {
            return new EventPermissionArgs(action, condition, eventBusName, principal, statementId);
        }
    }
}
