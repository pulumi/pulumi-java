// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.eks.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IdentityProviderConfigOidcGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final IdentityProviderConfigOidcGetArgs Empty = new IdentityProviderConfigOidcGetArgs();

    /**
     * Client ID for the OpenID Connect identity provider.
     * 
     */
    @Import(name="clientId", required=true)
      private final Output<String> clientId;

    public Output<String> getClientId() {
        return this.clientId;
    }

    /**
     * The JWT claim that the provider will use to return groups.
     * 
     */
    @Import(name="groupsClaim")
      private final @Nullable Output<String> groupsClaim;

    public Output<String> getGroupsClaim() {
        return this.groupsClaim == null ? Codegen.empty() : this.groupsClaim;
    }

    /**
     * A prefix that is prepended to group claims e.g., `oidc:`.
     * 
     */
    @Import(name="groupsPrefix")
      private final @Nullable Output<String> groupsPrefix;

    public Output<String> getGroupsPrefix() {
        return this.groupsPrefix == null ? Codegen.empty() : this.groupsPrefix;
    }

    /**
     * The name of the identity provider config.
     * 
     */
    @Import(name="identityProviderConfigName", required=true)
      private final Output<String> identityProviderConfigName;

    public Output<String> getIdentityProviderConfigName() {
        return this.identityProviderConfigName;
    }

    /**
     * Issuer URL for the OpenID Connect identity provider.
     * 
     */
    @Import(name="issuerUrl", required=true)
      private final Output<String> issuerUrl;

    public Output<String> getIssuerUrl() {
        return this.issuerUrl;
    }

    /**
     * The key value pairs that describe required claims in the identity token.
     * 
     */
    @Import(name="requiredClaims")
      private final @Nullable Output<Map<String,String>> requiredClaims;

    public Output<Map<String,String>> getRequiredClaims() {
        return this.requiredClaims == null ? Codegen.empty() : this.requiredClaims;
    }

    /**
     * The JWT claim that the provider will use as the username.
     * 
     */
    @Import(name="usernameClaim")
      private final @Nullable Output<String> usernameClaim;

    public Output<String> getUsernameClaim() {
        return this.usernameClaim == null ? Codegen.empty() : this.usernameClaim;
    }

    /**
     * A prefix that is prepended to username claims.
     * 
     */
    @Import(name="usernamePrefix")
      private final @Nullable Output<String> usernamePrefix;

    public Output<String> getUsernamePrefix() {
        return this.usernamePrefix == null ? Codegen.empty() : this.usernamePrefix;
    }

    public IdentityProviderConfigOidcGetArgs(
        Output<String> clientId,
        @Nullable Output<String> groupsClaim,
        @Nullable Output<String> groupsPrefix,
        Output<String> identityProviderConfigName,
        Output<String> issuerUrl,
        @Nullable Output<Map<String,String>> requiredClaims,
        @Nullable Output<String> usernameClaim,
        @Nullable Output<String> usernamePrefix) {
        this.clientId = Objects.requireNonNull(clientId, "expected parameter 'clientId' to be non-null");
        this.groupsClaim = groupsClaim;
        this.groupsPrefix = groupsPrefix;
        this.identityProviderConfigName = Objects.requireNonNull(identityProviderConfigName, "expected parameter 'identityProviderConfigName' to be non-null");
        this.issuerUrl = Objects.requireNonNull(issuerUrl, "expected parameter 'issuerUrl' to be non-null");
        this.requiredClaims = requiredClaims;
        this.usernameClaim = usernameClaim;
        this.usernamePrefix = usernamePrefix;
    }

    private IdentityProviderConfigOidcGetArgs() {
        this.clientId = Codegen.empty();
        this.groupsClaim = Codegen.empty();
        this.groupsPrefix = Codegen.empty();
        this.identityProviderConfigName = Codegen.empty();
        this.issuerUrl = Codegen.empty();
        this.requiredClaims = Codegen.empty();
        this.usernameClaim = Codegen.empty();
        this.usernamePrefix = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IdentityProviderConfigOidcGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> clientId;
        private @Nullable Output<String> groupsClaim;
        private @Nullable Output<String> groupsPrefix;
        private Output<String> identityProviderConfigName;
        private Output<String> issuerUrl;
        private @Nullable Output<Map<String,String>> requiredClaims;
        private @Nullable Output<String> usernameClaim;
        private @Nullable Output<String> usernamePrefix;

        public Builder() {
    	      // Empty
        }

        public Builder(IdentityProviderConfigOidcGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.groupsClaim = defaults.groupsClaim;
    	      this.groupsPrefix = defaults.groupsPrefix;
    	      this.identityProviderConfigName = defaults.identityProviderConfigName;
    	      this.issuerUrl = defaults.issuerUrl;
    	      this.requiredClaims = defaults.requiredClaims;
    	      this.usernameClaim = defaults.usernameClaim;
    	      this.usernamePrefix = defaults.usernamePrefix;
        }

        public Builder clientId(Output<String> clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Output.of(Objects.requireNonNull(clientId));
            return this;
        }
        public Builder groupsClaim(@Nullable Output<String> groupsClaim) {
            this.groupsClaim = groupsClaim;
            return this;
        }
        public Builder groupsClaim(@Nullable String groupsClaim) {
            this.groupsClaim = Codegen.ofNullable(groupsClaim);
            return this;
        }
        public Builder groupsPrefix(@Nullable Output<String> groupsPrefix) {
            this.groupsPrefix = groupsPrefix;
            return this;
        }
        public Builder groupsPrefix(@Nullable String groupsPrefix) {
            this.groupsPrefix = Codegen.ofNullable(groupsPrefix);
            return this;
        }
        public Builder identityProviderConfigName(Output<String> identityProviderConfigName) {
            this.identityProviderConfigName = Objects.requireNonNull(identityProviderConfigName);
            return this;
        }
        public Builder identityProviderConfigName(String identityProviderConfigName) {
            this.identityProviderConfigName = Output.of(Objects.requireNonNull(identityProviderConfigName));
            return this;
        }
        public Builder issuerUrl(Output<String> issuerUrl) {
            this.issuerUrl = Objects.requireNonNull(issuerUrl);
            return this;
        }
        public Builder issuerUrl(String issuerUrl) {
            this.issuerUrl = Output.of(Objects.requireNonNull(issuerUrl));
            return this;
        }
        public Builder requiredClaims(@Nullable Output<Map<String,String>> requiredClaims) {
            this.requiredClaims = requiredClaims;
            return this;
        }
        public Builder requiredClaims(@Nullable Map<String,String> requiredClaims) {
            this.requiredClaims = Codegen.ofNullable(requiredClaims);
            return this;
        }
        public Builder usernameClaim(@Nullable Output<String> usernameClaim) {
            this.usernameClaim = usernameClaim;
            return this;
        }
        public Builder usernameClaim(@Nullable String usernameClaim) {
            this.usernameClaim = Codegen.ofNullable(usernameClaim);
            return this;
        }
        public Builder usernamePrefix(@Nullable Output<String> usernamePrefix) {
            this.usernamePrefix = usernamePrefix;
            return this;
        }
        public Builder usernamePrefix(@Nullable String usernamePrefix) {
            this.usernamePrefix = Codegen.ofNullable(usernamePrefix);
            return this;
        }        public IdentityProviderConfigOidcGetArgs build() {
            return new IdentityProviderConfigOidcGetArgs(clientId, groupsClaim, groupsPrefix, identityProviderConfigName, issuerUrl, requiredClaims, usernameClaim, usernamePrefix);
        }
    }
}
