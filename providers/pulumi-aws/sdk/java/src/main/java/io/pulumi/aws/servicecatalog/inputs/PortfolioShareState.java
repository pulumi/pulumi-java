// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.servicecatalog.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PortfolioShareState extends io.pulumi.resources.ResourceArgs {

    public static final PortfolioShareState Empty = new PortfolioShareState();

    /**
     * Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
     * 
     */
    @Import(name="acceptLanguage")
      private final @Nullable Output<String> acceptLanguage;

    public Output<String> acceptLanguage() {
        return this.acceptLanguage == null ? Codegen.empty() : this.acceptLanguage;
    }

    /**
     * Whether the shared portfolio is imported by the recipient account. If the recipient is organizational, the share is automatically imported, and the field is always set to true.
     * 
     */
    @Import(name="accepted")
      private final @Nullable Output<Boolean> accepted;

    public Output<Boolean> accepted() {
        return this.accepted == null ? Codegen.empty() : this.accepted;
    }

    /**
     * Portfolio identifier.
     * 
     */
    @Import(name="portfolioId")
      private final @Nullable Output<String> portfolioId;

    public Output<String> portfolioId() {
        return this.portfolioId == null ? Codegen.empty() : this.portfolioId;
    }

    /**
     * Identifier of the principal with whom you will share the portfolio. Valid values AWS account IDs and ARNs of AWS Organizations and organizational units.
     * 
     */
    @Import(name="principalId")
      private final @Nullable Output<String> principalId;

    public Output<String> principalId() {
        return this.principalId == null ? Codegen.empty() : this.principalId;
    }

    /**
     * Whether to enable sharing of `aws.servicecatalog.TagOption` resources when creating the portfolio share.
     * 
     */
    @Import(name="shareTagOptions")
      private final @Nullable Output<Boolean> shareTagOptions;

    public Output<Boolean> shareTagOptions() {
        return this.shareTagOptions == null ? Codegen.empty() : this.shareTagOptions;
    }

    /**
     * Type of portfolio share. Valid values are `ACCOUNT` (an external account), `ORGANIZATION` (a share to every account in an organization), `ORGANIZATIONAL_UNIT`, `ORGANIZATION_MEMBER_ACCOUNT` (a share to an account in an organization).
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * Whether to wait (up to the timeout) for the share to be accepted. Organizational shares are automatically accepted.
     * 
     */
    @Import(name="waitForAcceptance")
      private final @Nullable Output<Boolean> waitForAcceptance;

    public Output<Boolean> waitForAcceptance() {
        return this.waitForAcceptance == null ? Codegen.empty() : this.waitForAcceptance;
    }

    public PortfolioShareState(
        @Nullable Output<String> acceptLanguage,
        @Nullable Output<Boolean> accepted,
        @Nullable Output<String> portfolioId,
        @Nullable Output<String> principalId,
        @Nullable Output<Boolean> shareTagOptions,
        @Nullable Output<String> type,
        @Nullable Output<Boolean> waitForAcceptance) {
        this.acceptLanguage = acceptLanguage;
        this.accepted = accepted;
        this.portfolioId = portfolioId;
        this.principalId = principalId;
        this.shareTagOptions = shareTagOptions;
        this.type = type;
        this.waitForAcceptance = waitForAcceptance;
    }

    private PortfolioShareState() {
        this.acceptLanguage = Codegen.empty();
        this.accepted = Codegen.empty();
        this.portfolioId = Codegen.empty();
        this.principalId = Codegen.empty();
        this.shareTagOptions = Codegen.empty();
        this.type = Codegen.empty();
        this.waitForAcceptance = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PortfolioShareState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> acceptLanguage;
        private @Nullable Output<Boolean> accepted;
        private @Nullable Output<String> portfolioId;
        private @Nullable Output<String> principalId;
        private @Nullable Output<Boolean> shareTagOptions;
        private @Nullable Output<String> type;
        private @Nullable Output<Boolean> waitForAcceptance;

        public Builder() {
    	      // Empty
        }

        public Builder(PortfolioShareState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptLanguage = defaults.acceptLanguage;
    	      this.accepted = defaults.accepted;
    	      this.portfolioId = defaults.portfolioId;
    	      this.principalId = defaults.principalId;
    	      this.shareTagOptions = defaults.shareTagOptions;
    	      this.type = defaults.type;
    	      this.waitForAcceptance = defaults.waitForAcceptance;
        }

        public Builder acceptLanguage(@Nullable Output<String> acceptLanguage) {
            this.acceptLanguage = acceptLanguage;
            return this;
        }
        public Builder acceptLanguage(@Nullable String acceptLanguage) {
            this.acceptLanguage = Codegen.ofNullable(acceptLanguage);
            return this;
        }
        public Builder accepted(@Nullable Output<Boolean> accepted) {
            this.accepted = accepted;
            return this;
        }
        public Builder accepted(@Nullable Boolean accepted) {
            this.accepted = Codegen.ofNullable(accepted);
            return this;
        }
        public Builder portfolioId(@Nullable Output<String> portfolioId) {
            this.portfolioId = portfolioId;
            return this;
        }
        public Builder portfolioId(@Nullable String portfolioId) {
            this.portfolioId = Codegen.ofNullable(portfolioId);
            return this;
        }
        public Builder principalId(@Nullable Output<String> principalId) {
            this.principalId = principalId;
            return this;
        }
        public Builder principalId(@Nullable String principalId) {
            this.principalId = Codegen.ofNullable(principalId);
            return this;
        }
        public Builder shareTagOptions(@Nullable Output<Boolean> shareTagOptions) {
            this.shareTagOptions = shareTagOptions;
            return this;
        }
        public Builder shareTagOptions(@Nullable Boolean shareTagOptions) {
            this.shareTagOptions = Codegen.ofNullable(shareTagOptions);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder waitForAcceptance(@Nullable Output<Boolean> waitForAcceptance) {
            this.waitForAcceptance = waitForAcceptance;
            return this;
        }
        public Builder waitForAcceptance(@Nullable Boolean waitForAcceptance) {
            this.waitForAcceptance = Codegen.ofNullable(waitForAcceptance);
            return this;
        }        public PortfolioShareState build() {
            return new PortfolioShareState(acceptLanguage, accepted, portfolioId, principalId, shareTagOptions, type, waitForAcceptance);
        }
    }
}
