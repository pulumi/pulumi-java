// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.devicefarm.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UploadState extends io.pulumi.resources.ResourceArgs {

    public static final UploadState Empty = new UploadState();

    /**
     * The Amazon Resource Name of this upload.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The upload's category.
     * 
     */
    @Import(name="category")
      private final @Nullable Output<String> category;

    public Output<String> getCategory() {
        return this.category == null ? Codegen.empty() : this.category;
    }

    /**
     * The upload's content type (for example, application/octet-stream).
     * 
     */
    @Import(name="contentType")
      private final @Nullable Output<String> contentType;

    public Output<String> getContentType() {
        return this.contentType == null ? Codegen.empty() : this.contentType;
    }

    /**
     * The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<String> metadata;

    public Output<String> getMetadata() {
        return this.metadata == null ? Codegen.empty() : this.metadata;
    }

    /**
     * The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ARN of the project for the upload.
     * 
     */
    @Import(name="projectArn")
      private final @Nullable Output<String> projectArn;

    public Output<String> getProjectArn() {
        return this.projectArn == null ? Codegen.empty() : this.projectArn;
    }

    /**
     * The upload's upload type. See [AWS Docs](https://docs.aws.amazon.com/devicefarm/latest/APIReference/API_CreateUpload.html#API_CreateUpload_RequestSyntax) for valid list of values.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * The presigned Amazon S3 URL that was used to store a file using a PUT request.
     * 
     */
    @Import(name="url")
      private final @Nullable Output<String> url;

    public Output<String> getUrl() {
        return this.url == null ? Codegen.empty() : this.url;
    }

    public UploadState(
        @Nullable Output<String> arn,
        @Nullable Output<String> category,
        @Nullable Output<String> contentType,
        @Nullable Output<String> metadata,
        @Nullable Output<String> name,
        @Nullable Output<String> projectArn,
        @Nullable Output<String> type,
        @Nullable Output<String> url) {
        this.arn = arn;
        this.category = category;
        this.contentType = contentType;
        this.metadata = metadata;
        this.name = name;
        this.projectArn = projectArn;
        this.type = type;
        this.url = url;
    }

    private UploadState() {
        this.arn = Codegen.empty();
        this.category = Codegen.empty();
        this.contentType = Codegen.empty();
        this.metadata = Codegen.empty();
        this.name = Codegen.empty();
        this.projectArn = Codegen.empty();
        this.type = Codegen.empty();
        this.url = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UploadState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> category;
        private @Nullable Output<String> contentType;
        private @Nullable Output<String> metadata;
        private @Nullable Output<String> name;
        private @Nullable Output<String> projectArn;
        private @Nullable Output<String> type;
        private @Nullable Output<String> url;

        public Builder() {
    	      // Empty
        }

        public Builder(UploadState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.category = defaults.category;
    	      this.contentType = defaults.contentType;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.projectArn = defaults.projectArn;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder category(@Nullable Output<String> category) {
            this.category = category;
            return this;
        }
        public Builder category(@Nullable String category) {
            this.category = Codegen.ofNullable(category);
            return this;
        }
        public Builder contentType(@Nullable Output<String> contentType) {
            this.contentType = contentType;
            return this;
        }
        public Builder contentType(@Nullable String contentType) {
            this.contentType = Codegen.ofNullable(contentType);
            return this;
        }
        public Builder metadata(@Nullable Output<String> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable String metadata) {
            this.metadata = Codegen.ofNullable(metadata);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder projectArn(@Nullable Output<String> projectArn) {
            this.projectArn = projectArn;
            return this;
        }
        public Builder projectArn(@Nullable String projectArn) {
            this.projectArn = Codegen.ofNullable(projectArn);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder url(@Nullable Output<String> url) {
            this.url = url;
            return this;
        }
        public Builder url(@Nullable String url) {
            this.url = Codegen.ofNullable(url);
            return this;
        }        public UploadState build() {
            return new UploadState(arn, category, contentType, metadata, name, projectArn, type, url);
        }
    }
}
