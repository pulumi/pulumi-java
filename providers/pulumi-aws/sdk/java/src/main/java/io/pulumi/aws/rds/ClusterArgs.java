// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds;

import io.pulumi.aws.rds.enums.EngineMode;
import io.pulumi.aws.rds.enums.EngineType;
import io.pulumi.aws.rds.inputs.ClusterRestoreToPointInTimeArgs;
import io.pulumi.aws.rds.inputs.ClusterS3ImportArgs;
import io.pulumi.aws.rds.inputs.ClusterScalingConfigurationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * Enable to allow major engine version upgrades when changing engine versions. Defaults to `false`.
     * 
     */
    @InputImport(name="allowMajorVersionUpgrade")
      private final @Nullable Output<Boolean> allowMajorVersionUpgrade;

    public Output<Boolean> getAllowMajorVersionUpgrade() {
        return this.allowMajorVersionUpgrade == null ? Output.empty() : this.allowMajorVersionUpgrade;
    }

    /**
     * Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`. See [Amazon RDS Documentation for more information.](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html)
     * 
     */
    @InputImport(name="applyImmediately")
      private final @Nullable Output<Boolean> applyImmediately;

    public Output<Boolean> getApplyImmediately() {
        return this.applyImmediately == null ? Output.empty() : this.applyImmediately;
    }

    /**
     * A list of EC2 Availability Zones for the DB cluster storage where DB cluster instances can be created. RDS automatically assigns 3 AZs if less than 3 AZs are configured, which will show as a difference requiring resource recreation next apply. It is recommended to specify 3 AZs.
     * 
     */
    @InputImport(name="availabilityZones")
      private final @Nullable Output<List<String>> availabilityZones;

    public Output<List<String>> getAvailabilityZones() {
        return this.availabilityZones == null ? Output.empty() : this.availabilityZones;
    }

    /**
     * The target backtrack window, in seconds. Only available for `aurora` and `aurora-mysql` engines currently. To disable backtracking, set this value to `0`. Defaults to `0`. Must be between `0` and `259200` (72 hours)
     * 
     */
    @InputImport(name="backtrackWindow")
      private final @Nullable Output<Integer> backtrackWindow;

    public Output<Integer> getBacktrackWindow() {
        return this.backtrackWindow == null ? Output.empty() : this.backtrackWindow;
    }

    /**
     * The days to retain backups for. Default `1`
     * 
     */
    @InputImport(name="backupRetentionPeriod")
      private final @Nullable Output<Integer> backupRetentionPeriod;

    public Output<Integer> getBackupRetentionPeriod() {
        return this.backupRetentionPeriod == null ? Output.empty() : this.backupRetentionPeriod;
    }

    /**
     * The cluster identifier. If omitted, this provider will assign a random, unique identifier.
     * 
     */
    @InputImport(name="clusterIdentifier")
      private final @Nullable Output<String> clusterIdentifier;

    public Output<String> getClusterIdentifier() {
        return this.clusterIdentifier == null ? Output.empty() : this.clusterIdentifier;
    }

    /**
     * Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `cluster_identifier`.
     * 
     */
    @InputImport(name="clusterIdentifierPrefix")
      private final @Nullable Output<String> clusterIdentifierPrefix;

    public Output<String> getClusterIdentifierPrefix() {
        return this.clusterIdentifierPrefix == null ? Output.empty() : this.clusterIdentifierPrefix;
    }

    /**
     * List of RDS Instances that are a part of this cluster
     * 
     */
    @InputImport(name="clusterMembers")
      private final @Nullable Output<List<String>> clusterMembers;

    public Output<List<String>> getClusterMembers() {
        return this.clusterMembers == null ? Output.empty() : this.clusterMembers;
    }

    /**
     * Copy all Cluster `tags` to snapshots. Default is `false`.
     * 
     */
    @InputImport(name="copyTagsToSnapshot")
      private final @Nullable Output<Boolean> copyTagsToSnapshot;

    public Output<Boolean> getCopyTagsToSnapshot() {
        return this.copyTagsToSnapshot == null ? Output.empty() : this.copyTagsToSnapshot;
    }

    /**
     * Name for an automatically created database on cluster creation. There are different naming restrictions per database engine: [RDS Naming Constraints](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints)
     * 
     */
    @InputImport(name="databaseName")
      private final @Nullable Output<String> databaseName;

    public Output<String> getDatabaseName() {
        return this.databaseName == null ? Output.empty() : this.databaseName;
    }

    /**
     * A cluster parameter group to associate with the cluster.
     * 
     */
    @InputImport(name="dbClusterParameterGroupName")
      private final @Nullable Output<String> dbClusterParameterGroupName;

    public Output<String> getDbClusterParameterGroupName() {
        return this.dbClusterParameterGroupName == null ? Output.empty() : this.dbClusterParameterGroupName;
    }

    /**
     * Instance parameter group to associate with all instances of the DB cluster. The `db_instance_parameter_group_name` parameter is only valid in combination with the `allow_major_version_upgrade` parameter.
     * 
     */
    @InputImport(name="dbInstanceParameterGroupName")
      private final @Nullable Output<String> dbInstanceParameterGroupName;

    public Output<String> getDbInstanceParameterGroupName() {
        return this.dbInstanceParameterGroupName == null ? Output.empty() : this.dbInstanceParameterGroupName;
    }

    /**
     * A DB subnet group to associate with this DB instance. **NOTE:** This must match the `db_subnet_group_name` specified on every `aws.rds.ClusterInstance` in the cluster.
     * 
     */
    @InputImport(name="dbSubnetGroupName")
      private final @Nullable Output<String> dbSubnetGroupName;

    public Output<String> getDbSubnetGroupName() {
        return this.dbSubnetGroupName == null ? Output.empty() : this.dbSubnetGroupName;
    }

    /**
     * If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
     * 
     */
    @InputImport(name="deletionProtection")
      private final @Nullable Output<Boolean> deletionProtection;

    public Output<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Output.empty() : this.deletionProtection;
    }

    /**
     * Whether cluster should forward writes to an associated global cluster. Applied to secondary clusters to enable them to forward writes to an `aws.rds.GlobalCluster`'s primary cluster. See the [Aurora Userguide documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-write-forwarding.html) for more information.
     * 
     */
    @InputImport(name="enableGlobalWriteForwarding")
      private final @Nullable Output<Boolean> enableGlobalWriteForwarding;

    public Output<Boolean> getEnableGlobalWriteForwarding() {
        return this.enableGlobalWriteForwarding == null ? Output.empty() : this.enableGlobalWriteForwarding;
    }

    /**
     * Enable HTTP endpoint (data API). Only valid when `engine_mode` is set to `serverless`.
     * 
     */
    @InputImport(name="enableHttpEndpoint")
      private final @Nullable Output<Boolean> enableHttpEndpoint;

    public Output<Boolean> getEnableHttpEndpoint() {
        return this.enableHttpEndpoint == null ? Output.empty() : this.enableHttpEndpoint;
    }

    /**
     * Set of log types to export to cloudwatch. If omitted, no logs will be exported. The following log types are supported: `audit`, `error`, `general`, `slowquery`, `postgresql` (PostgreSQL).
     * 
     */
    @InputImport(name="enabledCloudwatchLogsExports")
      private final @Nullable Output<List<String>> enabledCloudwatchLogsExports;

    public Output<List<String>> getEnabledCloudwatchLogsExports() {
        return this.enabledCloudwatchLogsExports == null ? Output.empty() : this.enabledCloudwatchLogsExports;
    }

    /**
     * The name of the database engine to be used for this DB cluster. Defaults to `aurora`. Valid Values: `aurora`, `aurora-mysql`, `aurora-postgresql`
     * 
     */
    @InputImport(name="engine")
      private final @Nullable Output<Either<String,EngineType>> engine;

    public Output<Either<String,EngineType>> getEngine() {
        return this.engine == null ? Output.empty() : this.engine;
    }

    /**
     * The database engine mode. Valid values: `global` (only valid for Aurora MySQL 1.21 and earlier), `multimaster`, `parallelquery`, `provisioned`, `serverless`. Defaults to: `provisioned`. See the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/aurora-serverless.html) for limitations when using `serverless`.
     * 
     */
    @InputImport(name="engineMode")
      private final @Nullable Output<Either<String,EngineMode>> engineMode;

    public Output<Either<String,EngineMode>> getEngineMode() {
        return this.engineMode == null ? Output.empty() : this.engineMode;
    }

    /**
     * The database engine version. Updating this argument results in an outage. See the [Aurora MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html) and [Aurora Postgres](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.html) documentation for your configured engine to determine this value. For example with Aurora MySQL 2, a potential value for this argument is `5.7.mysql_aurora.2.03.2`. The value can contain a partial version where supported by the API. The actual engine version used is returned in the attribute `engine_version_actual`, defined below.
     * 
     */
    @InputImport(name="engineVersion")
      private final @Nullable Output<String> engineVersion;

    public Output<String> getEngineVersion() {
        return this.engineVersion == null ? Output.empty() : this.engineVersion;
    }

    /**
     * The name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made.
     * 
     */
    @InputImport(name="finalSnapshotIdentifier")
      private final @Nullable Output<String> finalSnapshotIdentifier;

    public Output<String> getFinalSnapshotIdentifier() {
        return this.finalSnapshotIdentifier == null ? Output.empty() : this.finalSnapshotIdentifier;
    }

    /**
     * The global cluster identifier specified on `aws.rds.GlobalCluster`.
     * 
     */
    @InputImport(name="globalClusterIdentifier")
      private final @Nullable Output<String> globalClusterIdentifier;

    public Output<String> getGlobalClusterIdentifier() {
        return this.globalClusterIdentifier == null ? Output.empty() : this.globalClusterIdentifier;
    }

    /**
     * Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. Please see [AWS Documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html) for availability and limitations.
     * 
     */
    @InputImport(name="iamDatabaseAuthenticationEnabled")
      private final @Nullable Output<Boolean> iamDatabaseAuthenticationEnabled;

    public Output<Boolean> getIamDatabaseAuthenticationEnabled() {
        return this.iamDatabaseAuthenticationEnabled == null ? Output.empty() : this.iamDatabaseAuthenticationEnabled;
    }

    /**
     * A List of ARNs for the IAM roles to associate to the RDS Cluster.
     * 
     */
    @InputImport(name="iamRoles")
      private final @Nullable Output<List<String>> iamRoles;

    public Output<List<String>> getIamRoles() {
        return this.iamRoles == null ? Output.empty() : this.iamRoles;
    }

    /**
     * The ARN for the KMS encryption key. When specifying `kms_key_id`, `storage_encrypted` needs to be set to true.
     * 
     */
    @InputImport(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Output.empty() : this.kmsKeyId;
    }

    /**
     * Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. Please refer to the [RDS Naming Constraints](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints)
     * 
     */
    @InputImport(name="masterPassword")
      private final @Nullable Output<String> masterPassword;

    public Output<String> getMasterPassword() {
        return this.masterPassword == null ? Output.empty() : this.masterPassword;
    }

    /**
     * Username for the master DB user. Please refer to the [RDS Naming Constraints](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints). This argument does not support in-place updates and cannot be changed during a restore from snapshot.
     * 
     */
    @InputImport(name="masterUsername")
      private final @Nullable Output<String> masterUsername;

    public Output<String> getMasterUsername() {
        return this.masterUsername == null ? Output.empty() : this.masterUsername;
    }

    /**
     * The port on which the DB accepts connections
     * 
     */
    @InputImport(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port == null ? Output.empty() : this.port;
    }

    /**
     * The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per region. e.g. 04:00-09:00
     * 
     */
    @InputImport(name="preferredBackupWindow")
      private final @Nullable Output<String> preferredBackupWindow;

    public Output<String> getPreferredBackupWindow() {
        return this.preferredBackupWindow == null ? Output.empty() : this.preferredBackupWindow;
    }

    /**
     * The weekly time range during which system maintenance can occur, in (UTC) e.g. wed:04:00-wed:04:30
     * 
     */
    @InputImport(name="preferredMaintenanceWindow")
      private final @Nullable Output<String> preferredMaintenanceWindow;

    public Output<String> getPreferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow == null ? Output.empty() : this.preferredMaintenanceWindow;
    }

    /**
     * ARN of a source DB cluster or DB instance if this DB cluster is to be created as a Read Replica. If DB Cluster is part of a Global Cluster, use `ignore_changes`.
     * 
     */
    @InputImport(name="replicationSourceIdentifier")
      private final @Nullable Output<String> replicationSourceIdentifier;

    public Output<String> getReplicationSourceIdentifier() {
        return this.replicationSourceIdentifier == null ? Output.empty() : this.replicationSourceIdentifier;
    }

    /**
     * Nested attribute for [point in time restore](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PIT.html). More details below.
     * 
     */
    @InputImport(name="restoreToPointInTime")
      private final @Nullable Output<ClusterRestoreToPointInTimeArgs> restoreToPointInTime;

    public Output<ClusterRestoreToPointInTimeArgs> getRestoreToPointInTime() {
        return this.restoreToPointInTime == null ? Output.empty() : this.restoreToPointInTime;
    }

    @InputImport(name="s3Import")
      private final @Nullable Output<ClusterS3ImportArgs> s3Import;

    public Output<ClusterS3ImportArgs> getS3Import() {
        return this.s3Import == null ? Output.empty() : this.s3Import;
    }

    /**
     * Nested attribute with scaling properties. Only valid when `engine_mode` is set to `serverless`. More details below.
     * 
     */
    @InputImport(name="scalingConfiguration")
      private final @Nullable Output<ClusterScalingConfigurationArgs> scalingConfiguration;

    public Output<ClusterScalingConfigurationArgs> getScalingConfiguration() {
        return this.scalingConfiguration == null ? Output.empty() : this.scalingConfiguration;
    }

    /**
     * Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `final_snapshot_identifier`. Default is `false`.
     * 
     */
    @InputImport(name="skipFinalSnapshot")
      private final @Nullable Output<Boolean> skipFinalSnapshot;

    public Output<Boolean> getSkipFinalSnapshot() {
        return this.skipFinalSnapshot == null ? Output.empty() : this.skipFinalSnapshot;
    }

    /**
     * Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot.
     * 
     */
    @InputImport(name="snapshotIdentifier")
      private final @Nullable Output<String> snapshotIdentifier;

    public Output<String> getSnapshotIdentifier() {
        return this.snapshotIdentifier == null ? Output.empty() : this.snapshotIdentifier;
    }

    /**
     * The source region for an encrypted replica DB cluster.
     * 
     */
    @InputImport(name="sourceRegion")
      private final @Nullable Output<String> sourceRegion;

    public Output<String> getSourceRegion() {
        return this.sourceRegion == null ? Output.empty() : this.sourceRegion;
    }

    /**
     * Specifies whether the DB cluster is encrypted. The default is `false` for `provisioned` `engine_mode` and `true` for `serverless` `engine_mode`. When restoring an unencrypted `snapshot_identifier`, the `kms_key_id` argument must be provided to encrypt the restored cluster. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @InputImport(name="storageEncrypted")
      private final @Nullable Output<Boolean> storageEncrypted;

    public Output<Boolean> getStorageEncrypted() {
        return this.storageEncrypted == null ? Output.empty() : this.storageEncrypted;
    }

    /**
     * A map of tags to assign to the DB cluster.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * List of VPC security groups to associate with the Cluster
     * 
     */
    @InputImport(name="vpcSecurityGroupIds")
      private final @Nullable Output<List<String>> vpcSecurityGroupIds;

    public Output<List<String>> getVpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Output.empty() : this.vpcSecurityGroupIds;
    }

    public ClusterArgs(
        @Nullable Output<Boolean> allowMajorVersionUpgrade,
        @Nullable Output<Boolean> applyImmediately,
        @Nullable Output<List<String>> availabilityZones,
        @Nullable Output<Integer> backtrackWindow,
        @Nullable Output<Integer> backupRetentionPeriod,
        @Nullable Output<String> clusterIdentifier,
        @Nullable Output<String> clusterIdentifierPrefix,
        @Nullable Output<List<String>> clusterMembers,
        @Nullable Output<Boolean> copyTagsToSnapshot,
        @Nullable Output<String> databaseName,
        @Nullable Output<String> dbClusterParameterGroupName,
        @Nullable Output<String> dbInstanceParameterGroupName,
        @Nullable Output<String> dbSubnetGroupName,
        @Nullable Output<Boolean> deletionProtection,
        @Nullable Output<Boolean> enableGlobalWriteForwarding,
        @Nullable Output<Boolean> enableHttpEndpoint,
        @Nullable Output<List<String>> enabledCloudwatchLogsExports,
        @Nullable Output<Either<String,EngineType>> engine,
        @Nullable Output<Either<String,EngineMode>> engineMode,
        @Nullable Output<String> engineVersion,
        @Nullable Output<String> finalSnapshotIdentifier,
        @Nullable Output<String> globalClusterIdentifier,
        @Nullable Output<Boolean> iamDatabaseAuthenticationEnabled,
        @Nullable Output<List<String>> iamRoles,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<String> masterPassword,
        @Nullable Output<String> masterUsername,
        @Nullable Output<Integer> port,
        @Nullable Output<String> preferredBackupWindow,
        @Nullable Output<String> preferredMaintenanceWindow,
        @Nullable Output<String> replicationSourceIdentifier,
        @Nullable Output<ClusterRestoreToPointInTimeArgs> restoreToPointInTime,
        @Nullable Output<ClusterS3ImportArgs> s3Import,
        @Nullable Output<ClusterScalingConfigurationArgs> scalingConfiguration,
        @Nullable Output<Boolean> skipFinalSnapshot,
        @Nullable Output<String> snapshotIdentifier,
        @Nullable Output<String> sourceRegion,
        @Nullable Output<Boolean> storageEncrypted,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<List<String>> vpcSecurityGroupIds) {
        this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
        this.applyImmediately = applyImmediately;
        this.availabilityZones = availabilityZones;
        this.backtrackWindow = backtrackWindow;
        this.backupRetentionPeriod = backupRetentionPeriod;
        this.clusterIdentifier = clusterIdentifier;
        this.clusterIdentifierPrefix = clusterIdentifierPrefix;
        this.clusterMembers = clusterMembers;
        this.copyTagsToSnapshot = copyTagsToSnapshot;
        this.databaseName = databaseName;
        this.dbClusterParameterGroupName = dbClusterParameterGroupName;
        this.dbInstanceParameterGroupName = dbInstanceParameterGroupName;
        this.dbSubnetGroupName = dbSubnetGroupName;
        this.deletionProtection = deletionProtection;
        this.enableGlobalWriteForwarding = enableGlobalWriteForwarding;
        this.enableHttpEndpoint = enableHttpEndpoint;
        this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
        this.engine = engine;
        this.engineMode = engineMode;
        this.engineVersion = engineVersion;
        this.finalSnapshotIdentifier = finalSnapshotIdentifier;
        this.globalClusterIdentifier = globalClusterIdentifier;
        this.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
        this.iamRoles = iamRoles;
        this.kmsKeyId = kmsKeyId;
        this.masterPassword = masterPassword;
        this.masterUsername = masterUsername;
        this.port = port;
        this.preferredBackupWindow = preferredBackupWindow;
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        this.replicationSourceIdentifier = replicationSourceIdentifier;
        this.restoreToPointInTime = restoreToPointInTime;
        this.s3Import = s3Import;
        this.scalingConfiguration = scalingConfiguration;
        this.skipFinalSnapshot = skipFinalSnapshot;
        this.snapshotIdentifier = snapshotIdentifier;
        this.sourceRegion = sourceRegion;
        this.storageEncrypted = storageEncrypted;
        this.tags = tags;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    }

    private ClusterArgs() {
        this.allowMajorVersionUpgrade = Output.empty();
        this.applyImmediately = Output.empty();
        this.availabilityZones = Output.empty();
        this.backtrackWindow = Output.empty();
        this.backupRetentionPeriod = Output.empty();
        this.clusterIdentifier = Output.empty();
        this.clusterIdentifierPrefix = Output.empty();
        this.clusterMembers = Output.empty();
        this.copyTagsToSnapshot = Output.empty();
        this.databaseName = Output.empty();
        this.dbClusterParameterGroupName = Output.empty();
        this.dbInstanceParameterGroupName = Output.empty();
        this.dbSubnetGroupName = Output.empty();
        this.deletionProtection = Output.empty();
        this.enableGlobalWriteForwarding = Output.empty();
        this.enableHttpEndpoint = Output.empty();
        this.enabledCloudwatchLogsExports = Output.empty();
        this.engine = Output.empty();
        this.engineMode = Output.empty();
        this.engineVersion = Output.empty();
        this.finalSnapshotIdentifier = Output.empty();
        this.globalClusterIdentifier = Output.empty();
        this.iamDatabaseAuthenticationEnabled = Output.empty();
        this.iamRoles = Output.empty();
        this.kmsKeyId = Output.empty();
        this.masterPassword = Output.empty();
        this.masterUsername = Output.empty();
        this.port = Output.empty();
        this.preferredBackupWindow = Output.empty();
        this.preferredMaintenanceWindow = Output.empty();
        this.replicationSourceIdentifier = Output.empty();
        this.restoreToPointInTime = Output.empty();
        this.s3Import = Output.empty();
        this.scalingConfiguration = Output.empty();
        this.skipFinalSnapshot = Output.empty();
        this.snapshotIdentifier = Output.empty();
        this.sourceRegion = Output.empty();
        this.storageEncrypted = Output.empty();
        this.tags = Output.empty();
        this.vpcSecurityGroupIds = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowMajorVersionUpgrade;
        private @Nullable Output<Boolean> applyImmediately;
        private @Nullable Output<List<String>> availabilityZones;
        private @Nullable Output<Integer> backtrackWindow;
        private @Nullable Output<Integer> backupRetentionPeriod;
        private @Nullable Output<String> clusterIdentifier;
        private @Nullable Output<String> clusterIdentifierPrefix;
        private @Nullable Output<List<String>> clusterMembers;
        private @Nullable Output<Boolean> copyTagsToSnapshot;
        private @Nullable Output<String> databaseName;
        private @Nullable Output<String> dbClusterParameterGroupName;
        private @Nullable Output<String> dbInstanceParameterGroupName;
        private @Nullable Output<String> dbSubnetGroupName;
        private @Nullable Output<Boolean> deletionProtection;
        private @Nullable Output<Boolean> enableGlobalWriteForwarding;
        private @Nullable Output<Boolean> enableHttpEndpoint;
        private @Nullable Output<List<String>> enabledCloudwatchLogsExports;
        private @Nullable Output<Either<String,EngineType>> engine;
        private @Nullable Output<Either<String,EngineMode>> engineMode;
        private @Nullable Output<String> engineVersion;
        private @Nullable Output<String> finalSnapshotIdentifier;
        private @Nullable Output<String> globalClusterIdentifier;
        private @Nullable Output<Boolean> iamDatabaseAuthenticationEnabled;
        private @Nullable Output<List<String>> iamRoles;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<String> masterPassword;
        private @Nullable Output<String> masterUsername;
        private @Nullable Output<Integer> port;
        private @Nullable Output<String> preferredBackupWindow;
        private @Nullable Output<String> preferredMaintenanceWindow;
        private @Nullable Output<String> replicationSourceIdentifier;
        private @Nullable Output<ClusterRestoreToPointInTimeArgs> restoreToPointInTime;
        private @Nullable Output<ClusterS3ImportArgs> s3Import;
        private @Nullable Output<ClusterScalingConfigurationArgs> scalingConfiguration;
        private @Nullable Output<Boolean> skipFinalSnapshot;
        private @Nullable Output<String> snapshotIdentifier;
        private @Nullable Output<String> sourceRegion;
        private @Nullable Output<Boolean> storageEncrypted;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<List<String>> vpcSecurityGroupIds;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowMajorVersionUpgrade = defaults.allowMajorVersionUpgrade;
    	      this.applyImmediately = defaults.applyImmediately;
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.backtrackWindow = defaults.backtrackWindow;
    	      this.backupRetentionPeriod = defaults.backupRetentionPeriod;
    	      this.clusterIdentifier = defaults.clusterIdentifier;
    	      this.clusterIdentifierPrefix = defaults.clusterIdentifierPrefix;
    	      this.clusterMembers = defaults.clusterMembers;
    	      this.copyTagsToSnapshot = defaults.copyTagsToSnapshot;
    	      this.databaseName = defaults.databaseName;
    	      this.dbClusterParameterGroupName = defaults.dbClusterParameterGroupName;
    	      this.dbInstanceParameterGroupName = defaults.dbInstanceParameterGroupName;
    	      this.dbSubnetGroupName = defaults.dbSubnetGroupName;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.enableGlobalWriteForwarding = defaults.enableGlobalWriteForwarding;
    	      this.enableHttpEndpoint = defaults.enableHttpEndpoint;
    	      this.enabledCloudwatchLogsExports = defaults.enabledCloudwatchLogsExports;
    	      this.engine = defaults.engine;
    	      this.engineMode = defaults.engineMode;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotIdentifier = defaults.finalSnapshotIdentifier;
    	      this.globalClusterIdentifier = defaults.globalClusterIdentifier;
    	      this.iamDatabaseAuthenticationEnabled = defaults.iamDatabaseAuthenticationEnabled;
    	      this.iamRoles = defaults.iamRoles;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.masterPassword = defaults.masterPassword;
    	      this.masterUsername = defaults.masterUsername;
    	      this.port = defaults.port;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.replicationSourceIdentifier = defaults.replicationSourceIdentifier;
    	      this.restoreToPointInTime = defaults.restoreToPointInTime;
    	      this.s3Import = defaults.s3Import;
    	      this.scalingConfiguration = defaults.scalingConfiguration;
    	      this.skipFinalSnapshot = defaults.skipFinalSnapshot;
    	      this.snapshotIdentifier = defaults.snapshotIdentifier;
    	      this.sourceRegion = defaults.sourceRegion;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.tags = defaults.tags;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        public Builder allowMajorVersionUpgrade(@Nullable Output<Boolean> allowMajorVersionUpgrade) {
            this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
            return this;
        }

        public Builder allowMajorVersionUpgrade(@Nullable Boolean allowMajorVersionUpgrade) {
            this.allowMajorVersionUpgrade = Output.ofNullable(allowMajorVersionUpgrade);
            return this;
        }

        public Builder applyImmediately(@Nullable Output<Boolean> applyImmediately) {
            this.applyImmediately = applyImmediately;
            return this;
        }

        public Builder applyImmediately(@Nullable Boolean applyImmediately) {
            this.applyImmediately = Output.ofNullable(applyImmediately);
            return this;
        }

        public Builder availabilityZones(@Nullable Output<List<String>> availabilityZones) {
            this.availabilityZones = availabilityZones;
            return this;
        }

        public Builder availabilityZones(@Nullable List<String> availabilityZones) {
            this.availabilityZones = Output.ofNullable(availabilityZones);
            return this;
        }

        public Builder backtrackWindow(@Nullable Output<Integer> backtrackWindow) {
            this.backtrackWindow = backtrackWindow;
            return this;
        }

        public Builder backtrackWindow(@Nullable Integer backtrackWindow) {
            this.backtrackWindow = Output.ofNullable(backtrackWindow);
            return this;
        }

        public Builder backupRetentionPeriod(@Nullable Output<Integer> backupRetentionPeriod) {
            this.backupRetentionPeriod = backupRetentionPeriod;
            return this;
        }

        public Builder backupRetentionPeriod(@Nullable Integer backupRetentionPeriod) {
            this.backupRetentionPeriod = Output.ofNullable(backupRetentionPeriod);
            return this;
        }

        public Builder clusterIdentifier(@Nullable Output<String> clusterIdentifier) {
            this.clusterIdentifier = clusterIdentifier;
            return this;
        }

        public Builder clusterIdentifier(@Nullable String clusterIdentifier) {
            this.clusterIdentifier = Output.ofNullable(clusterIdentifier);
            return this;
        }

        public Builder clusterIdentifierPrefix(@Nullable Output<String> clusterIdentifierPrefix) {
            this.clusterIdentifierPrefix = clusterIdentifierPrefix;
            return this;
        }

        public Builder clusterIdentifierPrefix(@Nullable String clusterIdentifierPrefix) {
            this.clusterIdentifierPrefix = Output.ofNullable(clusterIdentifierPrefix);
            return this;
        }

        public Builder clusterMembers(@Nullable Output<List<String>> clusterMembers) {
            this.clusterMembers = clusterMembers;
            return this;
        }

        public Builder clusterMembers(@Nullable List<String> clusterMembers) {
            this.clusterMembers = Output.ofNullable(clusterMembers);
            return this;
        }

        public Builder copyTagsToSnapshot(@Nullable Output<Boolean> copyTagsToSnapshot) {
            this.copyTagsToSnapshot = copyTagsToSnapshot;
            return this;
        }

        public Builder copyTagsToSnapshot(@Nullable Boolean copyTagsToSnapshot) {
            this.copyTagsToSnapshot = Output.ofNullable(copyTagsToSnapshot);
            return this;
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            this.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = Output.ofNullable(databaseName);
            return this;
        }

        public Builder dbClusterParameterGroupName(@Nullable Output<String> dbClusterParameterGroupName) {
            this.dbClusterParameterGroupName = dbClusterParameterGroupName;
            return this;
        }

        public Builder dbClusterParameterGroupName(@Nullable String dbClusterParameterGroupName) {
            this.dbClusterParameterGroupName = Output.ofNullable(dbClusterParameterGroupName);
            return this;
        }

        public Builder dbInstanceParameterGroupName(@Nullable Output<String> dbInstanceParameterGroupName) {
            this.dbInstanceParameterGroupName = dbInstanceParameterGroupName;
            return this;
        }

        public Builder dbInstanceParameterGroupName(@Nullable String dbInstanceParameterGroupName) {
            this.dbInstanceParameterGroupName = Output.ofNullable(dbInstanceParameterGroupName);
            return this;
        }

        public Builder dbSubnetGroupName(@Nullable Output<String> dbSubnetGroupName) {
            this.dbSubnetGroupName = dbSubnetGroupName;
            return this;
        }

        public Builder dbSubnetGroupName(@Nullable String dbSubnetGroupName) {
            this.dbSubnetGroupName = Output.ofNullable(dbSubnetGroupName);
            return this;
        }

        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder deletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Output.ofNullable(deletionProtection);
            return this;
        }

        public Builder enableGlobalWriteForwarding(@Nullable Output<Boolean> enableGlobalWriteForwarding) {
            this.enableGlobalWriteForwarding = enableGlobalWriteForwarding;
            return this;
        }

        public Builder enableGlobalWriteForwarding(@Nullable Boolean enableGlobalWriteForwarding) {
            this.enableGlobalWriteForwarding = Output.ofNullable(enableGlobalWriteForwarding);
            return this;
        }

        public Builder enableHttpEndpoint(@Nullable Output<Boolean> enableHttpEndpoint) {
            this.enableHttpEndpoint = enableHttpEndpoint;
            return this;
        }

        public Builder enableHttpEndpoint(@Nullable Boolean enableHttpEndpoint) {
            this.enableHttpEndpoint = Output.ofNullable(enableHttpEndpoint);
            return this;
        }

        public Builder enabledCloudwatchLogsExports(@Nullable Output<List<String>> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            return this;
        }

        public Builder enabledCloudwatchLogsExports(@Nullable List<String> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = Output.ofNullable(enabledCloudwatchLogsExports);
            return this;
        }

        public Builder engine(@Nullable Output<Either<String,EngineType>> engine) {
            this.engine = engine;
            return this;
        }

        public Builder engine(@Nullable Either<String,EngineType> engine) {
            this.engine = Output.ofNullable(engine);
            return this;
        }

        public Builder engineMode(@Nullable Output<Either<String,EngineMode>> engineMode) {
            this.engineMode = engineMode;
            return this;
        }

        public Builder engineMode(@Nullable Either<String,EngineMode> engineMode) {
            this.engineMode = Output.ofNullable(engineMode);
            return this;
        }

        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = Output.ofNullable(engineVersion);
            return this;
        }

        public Builder finalSnapshotIdentifier(@Nullable Output<String> finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = finalSnapshotIdentifier;
            return this;
        }

        public Builder finalSnapshotIdentifier(@Nullable String finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = Output.ofNullable(finalSnapshotIdentifier);
            return this;
        }

        public Builder globalClusterIdentifier(@Nullable Output<String> globalClusterIdentifier) {
            this.globalClusterIdentifier = globalClusterIdentifier;
            return this;
        }

        public Builder globalClusterIdentifier(@Nullable String globalClusterIdentifier) {
            this.globalClusterIdentifier = Output.ofNullable(globalClusterIdentifier);
            return this;
        }

        public Builder iamDatabaseAuthenticationEnabled(@Nullable Output<Boolean> iamDatabaseAuthenticationEnabled) {
            this.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
            return this;
        }

        public Builder iamDatabaseAuthenticationEnabled(@Nullable Boolean iamDatabaseAuthenticationEnabled) {
            this.iamDatabaseAuthenticationEnabled = Output.ofNullable(iamDatabaseAuthenticationEnabled);
            return this;
        }

        public Builder iamRoles(@Nullable Output<List<String>> iamRoles) {
            this.iamRoles = iamRoles;
            return this;
        }

        public Builder iamRoles(@Nullable List<String> iamRoles) {
            this.iamRoles = Output.ofNullable(iamRoles);
            return this;
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Output.ofNullable(kmsKeyId);
            return this;
        }

        public Builder masterPassword(@Nullable Output<String> masterPassword) {
            this.masterPassword = masterPassword;
            return this;
        }

        public Builder masterPassword(@Nullable String masterPassword) {
            this.masterPassword = Output.ofNullable(masterPassword);
            return this;
        }

        public Builder masterUsername(@Nullable Output<String> masterUsername) {
            this.masterUsername = masterUsername;
            return this;
        }

        public Builder masterUsername(@Nullable String masterUsername) {
            this.masterUsername = Output.ofNullable(masterUsername);
            return this;
        }

        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder port(@Nullable Integer port) {
            this.port = Output.ofNullable(port);
            return this;
        }

        public Builder preferredBackupWindow(@Nullable Output<String> preferredBackupWindow) {
            this.preferredBackupWindow = preferredBackupWindow;
            return this;
        }

        public Builder preferredBackupWindow(@Nullable String preferredBackupWindow) {
            this.preferredBackupWindow = Output.ofNullable(preferredBackupWindow);
            return this;
        }

        public Builder preferredMaintenanceWindow(@Nullable Output<String> preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }

        public Builder preferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Output.ofNullable(preferredMaintenanceWindow);
            return this;
        }

        public Builder replicationSourceIdentifier(@Nullable Output<String> replicationSourceIdentifier) {
            this.replicationSourceIdentifier = replicationSourceIdentifier;
            return this;
        }

        public Builder replicationSourceIdentifier(@Nullable String replicationSourceIdentifier) {
            this.replicationSourceIdentifier = Output.ofNullable(replicationSourceIdentifier);
            return this;
        }

        public Builder restoreToPointInTime(@Nullable Output<ClusterRestoreToPointInTimeArgs> restoreToPointInTime) {
            this.restoreToPointInTime = restoreToPointInTime;
            return this;
        }

        public Builder restoreToPointInTime(@Nullable ClusterRestoreToPointInTimeArgs restoreToPointInTime) {
            this.restoreToPointInTime = Output.ofNullable(restoreToPointInTime);
            return this;
        }

        public Builder s3Import(@Nullable Output<ClusterS3ImportArgs> s3Import) {
            this.s3Import = s3Import;
            return this;
        }

        public Builder s3Import(@Nullable ClusterS3ImportArgs s3Import) {
            this.s3Import = Output.ofNullable(s3Import);
            return this;
        }

        public Builder scalingConfiguration(@Nullable Output<ClusterScalingConfigurationArgs> scalingConfiguration) {
            this.scalingConfiguration = scalingConfiguration;
            return this;
        }

        public Builder scalingConfiguration(@Nullable ClusterScalingConfigurationArgs scalingConfiguration) {
            this.scalingConfiguration = Output.ofNullable(scalingConfiguration);
            return this;
        }

        public Builder skipFinalSnapshot(@Nullable Output<Boolean> skipFinalSnapshot) {
            this.skipFinalSnapshot = skipFinalSnapshot;
            return this;
        }

        public Builder skipFinalSnapshot(@Nullable Boolean skipFinalSnapshot) {
            this.skipFinalSnapshot = Output.ofNullable(skipFinalSnapshot);
            return this;
        }

        public Builder snapshotIdentifier(@Nullable Output<String> snapshotIdentifier) {
            this.snapshotIdentifier = snapshotIdentifier;
            return this;
        }

        public Builder snapshotIdentifier(@Nullable String snapshotIdentifier) {
            this.snapshotIdentifier = Output.ofNullable(snapshotIdentifier);
            return this;
        }

        public Builder sourceRegion(@Nullable Output<String> sourceRegion) {
            this.sourceRegion = sourceRegion;
            return this;
        }

        public Builder sourceRegion(@Nullable String sourceRegion) {
            this.sourceRegion = Output.ofNullable(sourceRegion);
            return this;
        }

        public Builder storageEncrypted(@Nullable Output<Boolean> storageEncrypted) {
            this.storageEncrypted = storageEncrypted;
            return this;
        }

        public Builder storageEncrypted(@Nullable Boolean storageEncrypted) {
            this.storageEncrypted = Output.ofNullable(storageEncrypted);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder vpcSecurityGroupIds(@Nullable Output<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        public Builder vpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Output.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public ClusterArgs build() {
            return new ClusterArgs(allowMajorVersionUpgrade, applyImmediately, availabilityZones, backtrackWindow, backupRetentionPeriod, clusterIdentifier, clusterIdentifierPrefix, clusterMembers, copyTagsToSnapshot, databaseName, dbClusterParameterGroupName, dbInstanceParameterGroupName, dbSubnetGroupName, deletionProtection, enableGlobalWriteForwarding, enableHttpEndpoint, enabledCloudwatchLogsExports, engine, engineMode, engineVersion, finalSnapshotIdentifier, globalClusterIdentifier, iamDatabaseAuthenticationEnabled, iamRoles, kmsKeyId, masterPassword, masterUsername, port, preferredBackupWindow, preferredMaintenanceWindow, replicationSourceIdentifier, restoreToPointInTime, s3Import, scalingConfiguration, skipFinalSnapshot, snapshotIdentifier, sourceRegion, storageEncrypted, tags, vpcSecurityGroupIds);
        }
    }
}
