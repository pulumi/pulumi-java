// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.rds;

import io.pulumi.aws.rds.enums.EngineMode;
import io.pulumi.aws.rds.enums.EngineType;
import io.pulumi.aws.rds.inputs.ClusterRestoreToPointInTimeArgs;
import io.pulumi.aws.rds.inputs.ClusterS3ImportArgs;
import io.pulumi.aws.rds.inputs.ClusterScalingConfigurationArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterArgs extends io.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * Enable to allow major engine version upgrades when changing engine versions. Defaults to `false`.
     * 
     */
    @InputImport(name="allowMajorVersionUpgrade")
      private final @Nullable Input<Boolean> allowMajorVersionUpgrade;

    public Input<Boolean> getAllowMajorVersionUpgrade() {
        return this.allowMajorVersionUpgrade == null ? Input.empty() : this.allowMajorVersionUpgrade;
    }

    /**
     * Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is `false`. See [Amazon RDS Documentation for more information.](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html)
     * 
     */
    @InputImport(name="applyImmediately")
      private final @Nullable Input<Boolean> applyImmediately;

    public Input<Boolean> getApplyImmediately() {
        return this.applyImmediately == null ? Input.empty() : this.applyImmediately;
    }

    /**
     * A list of EC2 Availability Zones for the DB cluster storage where DB cluster instances can be created. RDS automatically assigns 3 AZs if less than 3 AZs are configured, which will show as a difference requiring resource recreation next apply. It is recommended to specify 3 AZs.
     * 
     */
    @InputImport(name="availabilityZones")
      private final @Nullable Input<List<String>> availabilityZones;

    public Input<List<String>> getAvailabilityZones() {
        return this.availabilityZones == null ? Input.empty() : this.availabilityZones;
    }

    /**
     * The target backtrack window, in seconds. Only available for `aurora` and `aurora-mysql` engines currently. To disable backtracking, set this value to `0`. Defaults to `0`. Must be between `0` and `259200` (72 hours)
     * 
     */
    @InputImport(name="backtrackWindow")
      private final @Nullable Input<Integer> backtrackWindow;

    public Input<Integer> getBacktrackWindow() {
        return this.backtrackWindow == null ? Input.empty() : this.backtrackWindow;
    }

    /**
     * The days to retain backups for. Default `1`
     * 
     */
    @InputImport(name="backupRetentionPeriod")
      private final @Nullable Input<Integer> backupRetentionPeriod;

    public Input<Integer> getBackupRetentionPeriod() {
        return this.backupRetentionPeriod == null ? Input.empty() : this.backupRetentionPeriod;
    }

    /**
     * The cluster identifier. If omitted, this provider will assign a random, unique identifier.
     * 
     */
    @InputImport(name="clusterIdentifier")
      private final @Nullable Input<String> clusterIdentifier;

    public Input<String> getClusterIdentifier() {
        return this.clusterIdentifier == null ? Input.empty() : this.clusterIdentifier;
    }

    /**
     * Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `cluster_identifier`.
     * 
     */
    @InputImport(name="clusterIdentifierPrefix")
      private final @Nullable Input<String> clusterIdentifierPrefix;

    public Input<String> getClusterIdentifierPrefix() {
        return this.clusterIdentifierPrefix == null ? Input.empty() : this.clusterIdentifierPrefix;
    }

    /**
     * List of RDS Instances that are a part of this cluster
     * 
     */
    @InputImport(name="clusterMembers")
      private final @Nullable Input<List<String>> clusterMembers;

    public Input<List<String>> getClusterMembers() {
        return this.clusterMembers == null ? Input.empty() : this.clusterMembers;
    }

    /**
     * Copy all Cluster `tags` to snapshots. Default is `false`.
     * 
     */
    @InputImport(name="copyTagsToSnapshot")
      private final @Nullable Input<Boolean> copyTagsToSnapshot;

    public Input<Boolean> getCopyTagsToSnapshot() {
        return this.copyTagsToSnapshot == null ? Input.empty() : this.copyTagsToSnapshot;
    }

    /**
     * Name for an automatically created database on cluster creation. There are different naming restrictions per database engine: [RDS Naming Constraints](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints)
     * 
     */
    @InputImport(name="databaseName")
      private final @Nullable Input<String> databaseName;

    public Input<String> getDatabaseName() {
        return this.databaseName == null ? Input.empty() : this.databaseName;
    }

    /**
     * A cluster parameter group to associate with the cluster.
     * 
     */
    @InputImport(name="dbClusterParameterGroupName")
      private final @Nullable Input<String> dbClusterParameterGroupName;

    public Input<String> getDbClusterParameterGroupName() {
        return this.dbClusterParameterGroupName == null ? Input.empty() : this.dbClusterParameterGroupName;
    }

    /**
     * Instance parameter group to associate with all instances of the DB cluster. The `db_instance_parameter_group_name` parameter is only valid in combination with the `allow_major_version_upgrade` parameter.
     * 
     */
    @InputImport(name="dbInstanceParameterGroupName")
      private final @Nullable Input<String> dbInstanceParameterGroupName;

    public Input<String> getDbInstanceParameterGroupName() {
        return this.dbInstanceParameterGroupName == null ? Input.empty() : this.dbInstanceParameterGroupName;
    }

    /**
     * A DB subnet group to associate with this DB instance. **NOTE:** This must match the `db_subnet_group_name` specified on every `aws.rds.ClusterInstance` in the cluster.
     * 
     */
    @InputImport(name="dbSubnetGroupName")
      private final @Nullable Input<String> dbSubnetGroupName;

    public Input<String> getDbSubnetGroupName() {
        return this.dbSubnetGroupName == null ? Input.empty() : this.dbSubnetGroupName;
    }

    /**
     * If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
     * 
     */
    @InputImport(name="deletionProtection")
      private final @Nullable Input<Boolean> deletionProtection;

    public Input<Boolean> getDeletionProtection() {
        return this.deletionProtection == null ? Input.empty() : this.deletionProtection;
    }

    /**
     * Whether cluster should forward writes to an associated global cluster. Applied to secondary clusters to enable them to forward writes to an `aws.rds.GlobalCluster`'s primary cluster. See the [Aurora Userguide documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-write-forwarding.html) for more information.
     * 
     */
    @InputImport(name="enableGlobalWriteForwarding")
      private final @Nullable Input<Boolean> enableGlobalWriteForwarding;

    public Input<Boolean> getEnableGlobalWriteForwarding() {
        return this.enableGlobalWriteForwarding == null ? Input.empty() : this.enableGlobalWriteForwarding;
    }

    /**
     * Enable HTTP endpoint (data API). Only valid when `engine_mode` is set to `serverless`.
     * 
     */
    @InputImport(name="enableHttpEndpoint")
      private final @Nullable Input<Boolean> enableHttpEndpoint;

    public Input<Boolean> getEnableHttpEndpoint() {
        return this.enableHttpEndpoint == null ? Input.empty() : this.enableHttpEndpoint;
    }

    /**
     * Set of log types to export to cloudwatch. If omitted, no logs will be exported. The following log types are supported: `audit`, `error`, `general`, `slowquery`, `postgresql` (PostgreSQL).
     * 
     */
    @InputImport(name="enabledCloudwatchLogsExports")
      private final @Nullable Input<List<String>> enabledCloudwatchLogsExports;

    public Input<List<String>> getEnabledCloudwatchLogsExports() {
        return this.enabledCloudwatchLogsExports == null ? Input.empty() : this.enabledCloudwatchLogsExports;
    }

    /**
     * The name of the database engine to be used for this DB cluster. Defaults to `aurora`. Valid Values: `aurora`, `aurora-mysql`, `aurora-postgresql`
     * 
     */
    @InputImport(name="engine")
      private final @Nullable Input<Either<String,EngineType>> engine;

    public Input<Either<String,EngineType>> getEngine() {
        return this.engine == null ? Input.empty() : this.engine;
    }

    /**
     * The database engine mode. Valid values: `global` (only valid for Aurora MySQL 1.21 and earlier), `multimaster`, `parallelquery`, `provisioned`, `serverless`. Defaults to: `provisioned`. See the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/aurora-serverless.html) for limitations when using `serverless`.
     * 
     */
    @InputImport(name="engineMode")
      private final @Nullable Input<Either<String,EngineMode>> engineMode;

    public Input<Either<String,EngineMode>> getEngineMode() {
        return this.engineMode == null ? Input.empty() : this.engineMode;
    }

    /**
     * The database engine version. Updating this argument results in an outage. See the [Aurora MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html) and [Aurora Postgres](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.html) documentation for your configured engine to determine this value. For example with Aurora MySQL 2, a potential value for this argument is `5.7.mysql_aurora.2.03.2`. The value can contain a partial version where supported by the API. The actual engine version used is returned in the attribute `engine_version_actual`, defined below.
     * 
     */
    @InputImport(name="engineVersion")
      private final @Nullable Input<String> engineVersion;

    public Input<String> getEngineVersion() {
        return this.engineVersion == null ? Input.empty() : this.engineVersion;
    }

    /**
     * The name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made.
     * 
     */
    @InputImport(name="finalSnapshotIdentifier")
      private final @Nullable Input<String> finalSnapshotIdentifier;

    public Input<String> getFinalSnapshotIdentifier() {
        return this.finalSnapshotIdentifier == null ? Input.empty() : this.finalSnapshotIdentifier;
    }

    /**
     * The global cluster identifier specified on `aws.rds.GlobalCluster`.
     * 
     */
    @InputImport(name="globalClusterIdentifier")
      private final @Nullable Input<String> globalClusterIdentifier;

    public Input<String> getGlobalClusterIdentifier() {
        return this.globalClusterIdentifier == null ? Input.empty() : this.globalClusterIdentifier;
    }

    /**
     * Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. Please see [AWS Documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html) for availability and limitations.
     * 
     */
    @InputImport(name="iamDatabaseAuthenticationEnabled")
      private final @Nullable Input<Boolean> iamDatabaseAuthenticationEnabled;

    public Input<Boolean> getIamDatabaseAuthenticationEnabled() {
        return this.iamDatabaseAuthenticationEnabled == null ? Input.empty() : this.iamDatabaseAuthenticationEnabled;
    }

    /**
     * A List of ARNs for the IAM roles to associate to the RDS Cluster.
     * 
     */
    @InputImport(name="iamRoles")
      private final @Nullable Input<List<String>> iamRoles;

    public Input<List<String>> getIamRoles() {
        return this.iamRoles == null ? Input.empty() : this.iamRoles;
    }

    /**
     * The ARN for the KMS encryption key. When specifying `kms_key_id`, `storage_encrypted` needs to be set to true.
     * 
     */
    @InputImport(name="kmsKeyId")
      private final @Nullable Input<String> kmsKeyId;

    public Input<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Input.empty() : this.kmsKeyId;
    }

    /**
     * Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. Please refer to the [RDS Naming Constraints](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints)
     * 
     */
    @InputImport(name="masterPassword")
      private final @Nullable Input<String> masterPassword;

    public Input<String> getMasterPassword() {
        return this.masterPassword == null ? Input.empty() : this.masterPassword;
    }

    /**
     * Username for the master DB user. Please refer to the [RDS Naming Constraints](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints). This argument does not support in-place updates and cannot be changed during a restore from snapshot.
     * 
     */
    @InputImport(name="masterUsername")
      private final @Nullable Input<String> masterUsername;

    public Input<String> getMasterUsername() {
        return this.masterUsername == null ? Input.empty() : this.masterUsername;
    }

    /**
     * The port on which the DB accepts connections
     * 
     */
    @InputImport(name="port")
      private final @Nullable Input<Integer> port;

    public Input<Integer> getPort() {
        return this.port == null ? Input.empty() : this.port;
    }

    /**
     * The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC. Default: A 30-minute window selected at random from an 8-hour block of time per region. e.g. 04:00-09:00
     * 
     */
    @InputImport(name="preferredBackupWindow")
      private final @Nullable Input<String> preferredBackupWindow;

    public Input<String> getPreferredBackupWindow() {
        return this.preferredBackupWindow == null ? Input.empty() : this.preferredBackupWindow;
    }

    /**
     * The weekly time range during which system maintenance can occur, in (UTC) e.g. wed:04:00-wed:04:30
     * 
     */
    @InputImport(name="preferredMaintenanceWindow")
      private final @Nullable Input<String> preferredMaintenanceWindow;

    public Input<String> getPreferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow == null ? Input.empty() : this.preferredMaintenanceWindow;
    }

    /**
     * ARN of a source DB cluster or DB instance if this DB cluster is to be created as a Read Replica. If DB Cluster is part of a Global Cluster, use `ignore_changes`.
     * 
     */
    @InputImport(name="replicationSourceIdentifier")
      private final @Nullable Input<String> replicationSourceIdentifier;

    public Input<String> getReplicationSourceIdentifier() {
        return this.replicationSourceIdentifier == null ? Input.empty() : this.replicationSourceIdentifier;
    }

    /**
     * Nested attribute for [point in time restore](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PIT.html). More details below.
     * 
     */
    @InputImport(name="restoreToPointInTime")
      private final @Nullable Input<ClusterRestoreToPointInTimeArgs> restoreToPointInTime;

    public Input<ClusterRestoreToPointInTimeArgs> getRestoreToPointInTime() {
        return this.restoreToPointInTime == null ? Input.empty() : this.restoreToPointInTime;
    }

    @InputImport(name="s3Import")
      private final @Nullable Input<ClusterS3ImportArgs> s3Import;

    public Input<ClusterS3ImportArgs> getS3Import() {
        return this.s3Import == null ? Input.empty() : this.s3Import;
    }

    /**
     * Nested attribute with scaling properties. Only valid when `engine_mode` is set to `serverless`. More details below.
     * 
     */
    @InputImport(name="scalingConfiguration")
      private final @Nullable Input<ClusterScalingConfigurationArgs> scalingConfiguration;

    public Input<ClusterScalingConfigurationArgs> getScalingConfiguration() {
        return this.scalingConfiguration == null ? Input.empty() : this.scalingConfiguration;
    }

    /**
     * Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `final_snapshot_identifier`. Default is `false`.
     * 
     */
    @InputImport(name="skipFinalSnapshot")
      private final @Nullable Input<Boolean> skipFinalSnapshot;

    public Input<Boolean> getSkipFinalSnapshot() {
        return this.skipFinalSnapshot == null ? Input.empty() : this.skipFinalSnapshot;
    }

    /**
     * Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot.
     * 
     */
    @InputImport(name="snapshotIdentifier")
      private final @Nullable Input<String> snapshotIdentifier;

    public Input<String> getSnapshotIdentifier() {
        return this.snapshotIdentifier == null ? Input.empty() : this.snapshotIdentifier;
    }

    /**
     * The source region for an encrypted replica DB cluster.
     * 
     */
    @InputImport(name="sourceRegion")
      private final @Nullable Input<String> sourceRegion;

    public Input<String> getSourceRegion() {
        return this.sourceRegion == null ? Input.empty() : this.sourceRegion;
    }

    /**
     * Specifies whether the DB cluster is encrypted. The default is `false` for `provisioned` `engine_mode` and `true` for `serverless` `engine_mode`. When restoring an unencrypted `snapshot_identifier`, the `kms_key_id` argument must be provided to encrypt the restored cluster. The provider will only perform drift detection if a configuration value is provided.
     * 
     */
    @InputImport(name="storageEncrypted")
      private final @Nullable Input<Boolean> storageEncrypted;

    public Input<Boolean> getStorageEncrypted() {
        return this.storageEncrypted == null ? Input.empty() : this.storageEncrypted;
    }

    /**
     * A map of tags to assign to the DB cluster.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * List of VPC security groups to associate with the Cluster
     * 
     */
    @InputImport(name="vpcSecurityGroupIds")
      private final @Nullable Input<List<String>> vpcSecurityGroupIds;

    public Input<List<String>> getVpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Input.empty() : this.vpcSecurityGroupIds;
    }

    public ClusterArgs(
        @Nullable Input<Boolean> allowMajorVersionUpgrade,
        @Nullable Input<Boolean> applyImmediately,
        @Nullable Input<List<String>> availabilityZones,
        @Nullable Input<Integer> backtrackWindow,
        @Nullable Input<Integer> backupRetentionPeriod,
        @Nullable Input<String> clusterIdentifier,
        @Nullable Input<String> clusterIdentifierPrefix,
        @Nullable Input<List<String>> clusterMembers,
        @Nullable Input<Boolean> copyTagsToSnapshot,
        @Nullable Input<String> databaseName,
        @Nullable Input<String> dbClusterParameterGroupName,
        @Nullable Input<String> dbInstanceParameterGroupName,
        @Nullable Input<String> dbSubnetGroupName,
        @Nullable Input<Boolean> deletionProtection,
        @Nullable Input<Boolean> enableGlobalWriteForwarding,
        @Nullable Input<Boolean> enableHttpEndpoint,
        @Nullable Input<List<String>> enabledCloudwatchLogsExports,
        @Nullable Input<Either<String,EngineType>> engine,
        @Nullable Input<Either<String,EngineMode>> engineMode,
        @Nullable Input<String> engineVersion,
        @Nullable Input<String> finalSnapshotIdentifier,
        @Nullable Input<String> globalClusterIdentifier,
        @Nullable Input<Boolean> iamDatabaseAuthenticationEnabled,
        @Nullable Input<List<String>> iamRoles,
        @Nullable Input<String> kmsKeyId,
        @Nullable Input<String> masterPassword,
        @Nullable Input<String> masterUsername,
        @Nullable Input<Integer> port,
        @Nullable Input<String> preferredBackupWindow,
        @Nullable Input<String> preferredMaintenanceWindow,
        @Nullable Input<String> replicationSourceIdentifier,
        @Nullable Input<ClusterRestoreToPointInTimeArgs> restoreToPointInTime,
        @Nullable Input<ClusterS3ImportArgs> s3Import,
        @Nullable Input<ClusterScalingConfigurationArgs> scalingConfiguration,
        @Nullable Input<Boolean> skipFinalSnapshot,
        @Nullable Input<String> snapshotIdentifier,
        @Nullable Input<String> sourceRegion,
        @Nullable Input<Boolean> storageEncrypted,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<List<String>> vpcSecurityGroupIds) {
        this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
        this.applyImmediately = applyImmediately;
        this.availabilityZones = availabilityZones;
        this.backtrackWindow = backtrackWindow;
        this.backupRetentionPeriod = backupRetentionPeriod;
        this.clusterIdentifier = clusterIdentifier;
        this.clusterIdentifierPrefix = clusterIdentifierPrefix;
        this.clusterMembers = clusterMembers;
        this.copyTagsToSnapshot = copyTagsToSnapshot;
        this.databaseName = databaseName;
        this.dbClusterParameterGroupName = dbClusterParameterGroupName;
        this.dbInstanceParameterGroupName = dbInstanceParameterGroupName;
        this.dbSubnetGroupName = dbSubnetGroupName;
        this.deletionProtection = deletionProtection;
        this.enableGlobalWriteForwarding = enableGlobalWriteForwarding;
        this.enableHttpEndpoint = enableHttpEndpoint;
        this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
        this.engine = engine;
        this.engineMode = engineMode;
        this.engineVersion = engineVersion;
        this.finalSnapshotIdentifier = finalSnapshotIdentifier;
        this.globalClusterIdentifier = globalClusterIdentifier;
        this.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
        this.iamRoles = iamRoles;
        this.kmsKeyId = kmsKeyId;
        this.masterPassword = masterPassword;
        this.masterUsername = masterUsername;
        this.port = port;
        this.preferredBackupWindow = preferredBackupWindow;
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        this.replicationSourceIdentifier = replicationSourceIdentifier;
        this.restoreToPointInTime = restoreToPointInTime;
        this.s3Import = s3Import;
        this.scalingConfiguration = scalingConfiguration;
        this.skipFinalSnapshot = skipFinalSnapshot;
        this.snapshotIdentifier = snapshotIdentifier;
        this.sourceRegion = sourceRegion;
        this.storageEncrypted = storageEncrypted;
        this.tags = tags;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    }

    private ClusterArgs() {
        this.allowMajorVersionUpgrade = Input.empty();
        this.applyImmediately = Input.empty();
        this.availabilityZones = Input.empty();
        this.backtrackWindow = Input.empty();
        this.backupRetentionPeriod = Input.empty();
        this.clusterIdentifier = Input.empty();
        this.clusterIdentifierPrefix = Input.empty();
        this.clusterMembers = Input.empty();
        this.copyTagsToSnapshot = Input.empty();
        this.databaseName = Input.empty();
        this.dbClusterParameterGroupName = Input.empty();
        this.dbInstanceParameterGroupName = Input.empty();
        this.dbSubnetGroupName = Input.empty();
        this.deletionProtection = Input.empty();
        this.enableGlobalWriteForwarding = Input.empty();
        this.enableHttpEndpoint = Input.empty();
        this.enabledCloudwatchLogsExports = Input.empty();
        this.engine = Input.empty();
        this.engineMode = Input.empty();
        this.engineVersion = Input.empty();
        this.finalSnapshotIdentifier = Input.empty();
        this.globalClusterIdentifier = Input.empty();
        this.iamDatabaseAuthenticationEnabled = Input.empty();
        this.iamRoles = Input.empty();
        this.kmsKeyId = Input.empty();
        this.masterPassword = Input.empty();
        this.masterUsername = Input.empty();
        this.port = Input.empty();
        this.preferredBackupWindow = Input.empty();
        this.preferredMaintenanceWindow = Input.empty();
        this.replicationSourceIdentifier = Input.empty();
        this.restoreToPointInTime = Input.empty();
        this.s3Import = Input.empty();
        this.scalingConfiguration = Input.empty();
        this.skipFinalSnapshot = Input.empty();
        this.snapshotIdentifier = Input.empty();
        this.sourceRegion = Input.empty();
        this.storageEncrypted = Input.empty();
        this.tags = Input.empty();
        this.vpcSecurityGroupIds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> allowMajorVersionUpgrade;
        private @Nullable Input<Boolean> applyImmediately;
        private @Nullable Input<List<String>> availabilityZones;
        private @Nullable Input<Integer> backtrackWindow;
        private @Nullable Input<Integer> backupRetentionPeriod;
        private @Nullable Input<String> clusterIdentifier;
        private @Nullable Input<String> clusterIdentifierPrefix;
        private @Nullable Input<List<String>> clusterMembers;
        private @Nullable Input<Boolean> copyTagsToSnapshot;
        private @Nullable Input<String> databaseName;
        private @Nullable Input<String> dbClusterParameterGroupName;
        private @Nullable Input<String> dbInstanceParameterGroupName;
        private @Nullable Input<String> dbSubnetGroupName;
        private @Nullable Input<Boolean> deletionProtection;
        private @Nullable Input<Boolean> enableGlobalWriteForwarding;
        private @Nullable Input<Boolean> enableHttpEndpoint;
        private @Nullable Input<List<String>> enabledCloudwatchLogsExports;
        private @Nullable Input<Either<String,EngineType>> engine;
        private @Nullable Input<Either<String,EngineMode>> engineMode;
        private @Nullable Input<String> engineVersion;
        private @Nullable Input<String> finalSnapshotIdentifier;
        private @Nullable Input<String> globalClusterIdentifier;
        private @Nullable Input<Boolean> iamDatabaseAuthenticationEnabled;
        private @Nullable Input<List<String>> iamRoles;
        private @Nullable Input<String> kmsKeyId;
        private @Nullable Input<String> masterPassword;
        private @Nullable Input<String> masterUsername;
        private @Nullable Input<Integer> port;
        private @Nullable Input<String> preferredBackupWindow;
        private @Nullable Input<String> preferredMaintenanceWindow;
        private @Nullable Input<String> replicationSourceIdentifier;
        private @Nullable Input<ClusterRestoreToPointInTimeArgs> restoreToPointInTime;
        private @Nullable Input<ClusterS3ImportArgs> s3Import;
        private @Nullable Input<ClusterScalingConfigurationArgs> scalingConfiguration;
        private @Nullable Input<Boolean> skipFinalSnapshot;
        private @Nullable Input<String> snapshotIdentifier;
        private @Nullable Input<String> sourceRegion;
        private @Nullable Input<Boolean> storageEncrypted;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<List<String>> vpcSecurityGroupIds;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowMajorVersionUpgrade = defaults.allowMajorVersionUpgrade;
    	      this.applyImmediately = defaults.applyImmediately;
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.backtrackWindow = defaults.backtrackWindow;
    	      this.backupRetentionPeriod = defaults.backupRetentionPeriod;
    	      this.clusterIdentifier = defaults.clusterIdentifier;
    	      this.clusterIdentifierPrefix = defaults.clusterIdentifierPrefix;
    	      this.clusterMembers = defaults.clusterMembers;
    	      this.copyTagsToSnapshot = defaults.copyTagsToSnapshot;
    	      this.databaseName = defaults.databaseName;
    	      this.dbClusterParameterGroupName = defaults.dbClusterParameterGroupName;
    	      this.dbInstanceParameterGroupName = defaults.dbInstanceParameterGroupName;
    	      this.dbSubnetGroupName = defaults.dbSubnetGroupName;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.enableGlobalWriteForwarding = defaults.enableGlobalWriteForwarding;
    	      this.enableHttpEndpoint = defaults.enableHttpEndpoint;
    	      this.enabledCloudwatchLogsExports = defaults.enabledCloudwatchLogsExports;
    	      this.engine = defaults.engine;
    	      this.engineMode = defaults.engineMode;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotIdentifier = defaults.finalSnapshotIdentifier;
    	      this.globalClusterIdentifier = defaults.globalClusterIdentifier;
    	      this.iamDatabaseAuthenticationEnabled = defaults.iamDatabaseAuthenticationEnabled;
    	      this.iamRoles = defaults.iamRoles;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.masterPassword = defaults.masterPassword;
    	      this.masterUsername = defaults.masterUsername;
    	      this.port = defaults.port;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.replicationSourceIdentifier = defaults.replicationSourceIdentifier;
    	      this.restoreToPointInTime = defaults.restoreToPointInTime;
    	      this.s3Import = defaults.s3Import;
    	      this.scalingConfiguration = defaults.scalingConfiguration;
    	      this.skipFinalSnapshot = defaults.skipFinalSnapshot;
    	      this.snapshotIdentifier = defaults.snapshotIdentifier;
    	      this.sourceRegion = defaults.sourceRegion;
    	      this.storageEncrypted = defaults.storageEncrypted;
    	      this.tags = defaults.tags;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
        }

        public Builder setAllowMajorVersionUpgrade(@Nullable Input<Boolean> allowMajorVersionUpgrade) {
            this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
            return this;
        }

        public Builder setAllowMajorVersionUpgrade(@Nullable Boolean allowMajorVersionUpgrade) {
            this.allowMajorVersionUpgrade = Input.ofNullable(allowMajorVersionUpgrade);
            return this;
        }

        public Builder setApplyImmediately(@Nullable Input<Boolean> applyImmediately) {
            this.applyImmediately = applyImmediately;
            return this;
        }

        public Builder setApplyImmediately(@Nullable Boolean applyImmediately) {
            this.applyImmediately = Input.ofNullable(applyImmediately);
            return this;
        }

        public Builder setAvailabilityZones(@Nullable Input<List<String>> availabilityZones) {
            this.availabilityZones = availabilityZones;
            return this;
        }

        public Builder setAvailabilityZones(@Nullable List<String> availabilityZones) {
            this.availabilityZones = Input.ofNullable(availabilityZones);
            return this;
        }

        public Builder setBacktrackWindow(@Nullable Input<Integer> backtrackWindow) {
            this.backtrackWindow = backtrackWindow;
            return this;
        }

        public Builder setBacktrackWindow(@Nullable Integer backtrackWindow) {
            this.backtrackWindow = Input.ofNullable(backtrackWindow);
            return this;
        }

        public Builder setBackupRetentionPeriod(@Nullable Input<Integer> backupRetentionPeriod) {
            this.backupRetentionPeriod = backupRetentionPeriod;
            return this;
        }

        public Builder setBackupRetentionPeriod(@Nullable Integer backupRetentionPeriod) {
            this.backupRetentionPeriod = Input.ofNullable(backupRetentionPeriod);
            return this;
        }

        public Builder setClusterIdentifier(@Nullable Input<String> clusterIdentifier) {
            this.clusterIdentifier = clusterIdentifier;
            return this;
        }

        public Builder setClusterIdentifier(@Nullable String clusterIdentifier) {
            this.clusterIdentifier = Input.ofNullable(clusterIdentifier);
            return this;
        }

        public Builder setClusterIdentifierPrefix(@Nullable Input<String> clusterIdentifierPrefix) {
            this.clusterIdentifierPrefix = clusterIdentifierPrefix;
            return this;
        }

        public Builder setClusterIdentifierPrefix(@Nullable String clusterIdentifierPrefix) {
            this.clusterIdentifierPrefix = Input.ofNullable(clusterIdentifierPrefix);
            return this;
        }

        public Builder setClusterMembers(@Nullable Input<List<String>> clusterMembers) {
            this.clusterMembers = clusterMembers;
            return this;
        }

        public Builder setClusterMembers(@Nullable List<String> clusterMembers) {
            this.clusterMembers = Input.ofNullable(clusterMembers);
            return this;
        }

        public Builder setCopyTagsToSnapshot(@Nullable Input<Boolean> copyTagsToSnapshot) {
            this.copyTagsToSnapshot = copyTagsToSnapshot;
            return this;
        }

        public Builder setCopyTagsToSnapshot(@Nullable Boolean copyTagsToSnapshot) {
            this.copyTagsToSnapshot = Input.ofNullable(copyTagsToSnapshot);
            return this;
        }

        public Builder setDatabaseName(@Nullable Input<String> databaseName) {
            this.databaseName = databaseName;
            return this;
        }

        public Builder setDatabaseName(@Nullable String databaseName) {
            this.databaseName = Input.ofNullable(databaseName);
            return this;
        }

        public Builder setDbClusterParameterGroupName(@Nullable Input<String> dbClusterParameterGroupName) {
            this.dbClusterParameterGroupName = dbClusterParameterGroupName;
            return this;
        }

        public Builder setDbClusterParameterGroupName(@Nullable String dbClusterParameterGroupName) {
            this.dbClusterParameterGroupName = Input.ofNullable(dbClusterParameterGroupName);
            return this;
        }

        public Builder setDbInstanceParameterGroupName(@Nullable Input<String> dbInstanceParameterGroupName) {
            this.dbInstanceParameterGroupName = dbInstanceParameterGroupName;
            return this;
        }

        public Builder setDbInstanceParameterGroupName(@Nullable String dbInstanceParameterGroupName) {
            this.dbInstanceParameterGroupName = Input.ofNullable(dbInstanceParameterGroupName);
            return this;
        }

        public Builder setDbSubnetGroupName(@Nullable Input<String> dbSubnetGroupName) {
            this.dbSubnetGroupName = dbSubnetGroupName;
            return this;
        }

        public Builder setDbSubnetGroupName(@Nullable String dbSubnetGroupName) {
            this.dbSubnetGroupName = Input.ofNullable(dbSubnetGroupName);
            return this;
        }

        public Builder setDeletionProtection(@Nullable Input<Boolean> deletionProtection) {
            this.deletionProtection = deletionProtection;
            return this;
        }

        public Builder setDeletionProtection(@Nullable Boolean deletionProtection) {
            this.deletionProtection = Input.ofNullable(deletionProtection);
            return this;
        }

        public Builder setEnableGlobalWriteForwarding(@Nullable Input<Boolean> enableGlobalWriteForwarding) {
            this.enableGlobalWriteForwarding = enableGlobalWriteForwarding;
            return this;
        }

        public Builder setEnableGlobalWriteForwarding(@Nullable Boolean enableGlobalWriteForwarding) {
            this.enableGlobalWriteForwarding = Input.ofNullable(enableGlobalWriteForwarding);
            return this;
        }

        public Builder setEnableHttpEndpoint(@Nullable Input<Boolean> enableHttpEndpoint) {
            this.enableHttpEndpoint = enableHttpEndpoint;
            return this;
        }

        public Builder setEnableHttpEndpoint(@Nullable Boolean enableHttpEndpoint) {
            this.enableHttpEndpoint = Input.ofNullable(enableHttpEndpoint);
            return this;
        }

        public Builder setEnabledCloudwatchLogsExports(@Nullable Input<List<String>> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            return this;
        }

        public Builder setEnabledCloudwatchLogsExports(@Nullable List<String> enabledCloudwatchLogsExports) {
            this.enabledCloudwatchLogsExports = Input.ofNullable(enabledCloudwatchLogsExports);
            return this;
        }

        public Builder setEngine(@Nullable Input<Either<String,EngineType>> engine) {
            this.engine = engine;
            return this;
        }

        public Builder setEngine(@Nullable Either<String,EngineType> engine) {
            this.engine = Input.ofNullable(engine);
            return this;
        }

        public Builder setEngineMode(@Nullable Input<Either<String,EngineMode>> engineMode) {
            this.engineMode = engineMode;
            return this;
        }

        public Builder setEngineMode(@Nullable Either<String,EngineMode> engineMode) {
            this.engineMode = Input.ofNullable(engineMode);
            return this;
        }

        public Builder setEngineVersion(@Nullable Input<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder setEngineVersion(@Nullable String engineVersion) {
            this.engineVersion = Input.ofNullable(engineVersion);
            return this;
        }

        public Builder setFinalSnapshotIdentifier(@Nullable Input<String> finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = finalSnapshotIdentifier;
            return this;
        }

        public Builder setFinalSnapshotIdentifier(@Nullable String finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = Input.ofNullable(finalSnapshotIdentifier);
            return this;
        }

        public Builder setGlobalClusterIdentifier(@Nullable Input<String> globalClusterIdentifier) {
            this.globalClusterIdentifier = globalClusterIdentifier;
            return this;
        }

        public Builder setGlobalClusterIdentifier(@Nullable String globalClusterIdentifier) {
            this.globalClusterIdentifier = Input.ofNullable(globalClusterIdentifier);
            return this;
        }

        public Builder setIamDatabaseAuthenticationEnabled(@Nullable Input<Boolean> iamDatabaseAuthenticationEnabled) {
            this.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
            return this;
        }

        public Builder setIamDatabaseAuthenticationEnabled(@Nullable Boolean iamDatabaseAuthenticationEnabled) {
            this.iamDatabaseAuthenticationEnabled = Input.ofNullable(iamDatabaseAuthenticationEnabled);
            return this;
        }

        public Builder setIamRoles(@Nullable Input<List<String>> iamRoles) {
            this.iamRoles = iamRoles;
            return this;
        }

        public Builder setIamRoles(@Nullable List<String> iamRoles) {
            this.iamRoles = Input.ofNullable(iamRoles);
            return this;
        }

        public Builder setKmsKeyId(@Nullable Input<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder setKmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Input.ofNullable(kmsKeyId);
            return this;
        }

        public Builder setMasterPassword(@Nullable Input<String> masterPassword) {
            this.masterPassword = masterPassword;
            return this;
        }

        public Builder setMasterPassword(@Nullable String masterPassword) {
            this.masterPassword = Input.ofNullable(masterPassword);
            return this;
        }

        public Builder setMasterUsername(@Nullable Input<String> masterUsername) {
            this.masterUsername = masterUsername;
            return this;
        }

        public Builder setMasterUsername(@Nullable String masterUsername) {
            this.masterUsername = Input.ofNullable(masterUsername);
            return this;
        }

        public Builder setPort(@Nullable Input<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder setPort(@Nullable Integer port) {
            this.port = Input.ofNullable(port);
            return this;
        }

        public Builder setPreferredBackupWindow(@Nullable Input<String> preferredBackupWindow) {
            this.preferredBackupWindow = preferredBackupWindow;
            return this;
        }

        public Builder setPreferredBackupWindow(@Nullable String preferredBackupWindow) {
            this.preferredBackupWindow = Input.ofNullable(preferredBackupWindow);
            return this;
        }

        public Builder setPreferredMaintenanceWindow(@Nullable Input<String> preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }

        public Builder setPreferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = Input.ofNullable(preferredMaintenanceWindow);
            return this;
        }

        public Builder setReplicationSourceIdentifier(@Nullable Input<String> replicationSourceIdentifier) {
            this.replicationSourceIdentifier = replicationSourceIdentifier;
            return this;
        }

        public Builder setReplicationSourceIdentifier(@Nullable String replicationSourceIdentifier) {
            this.replicationSourceIdentifier = Input.ofNullable(replicationSourceIdentifier);
            return this;
        }

        public Builder setRestoreToPointInTime(@Nullable Input<ClusterRestoreToPointInTimeArgs> restoreToPointInTime) {
            this.restoreToPointInTime = restoreToPointInTime;
            return this;
        }

        public Builder setRestoreToPointInTime(@Nullable ClusterRestoreToPointInTimeArgs restoreToPointInTime) {
            this.restoreToPointInTime = Input.ofNullable(restoreToPointInTime);
            return this;
        }

        public Builder setS3Import(@Nullable Input<ClusterS3ImportArgs> s3Import) {
            this.s3Import = s3Import;
            return this;
        }

        public Builder setS3Import(@Nullable ClusterS3ImportArgs s3Import) {
            this.s3Import = Input.ofNullable(s3Import);
            return this;
        }

        public Builder setScalingConfiguration(@Nullable Input<ClusterScalingConfigurationArgs> scalingConfiguration) {
            this.scalingConfiguration = scalingConfiguration;
            return this;
        }

        public Builder setScalingConfiguration(@Nullable ClusterScalingConfigurationArgs scalingConfiguration) {
            this.scalingConfiguration = Input.ofNullable(scalingConfiguration);
            return this;
        }

        public Builder setSkipFinalSnapshot(@Nullable Input<Boolean> skipFinalSnapshot) {
            this.skipFinalSnapshot = skipFinalSnapshot;
            return this;
        }

        public Builder setSkipFinalSnapshot(@Nullable Boolean skipFinalSnapshot) {
            this.skipFinalSnapshot = Input.ofNullable(skipFinalSnapshot);
            return this;
        }

        public Builder setSnapshotIdentifier(@Nullable Input<String> snapshotIdentifier) {
            this.snapshotIdentifier = snapshotIdentifier;
            return this;
        }

        public Builder setSnapshotIdentifier(@Nullable String snapshotIdentifier) {
            this.snapshotIdentifier = Input.ofNullable(snapshotIdentifier);
            return this;
        }

        public Builder setSourceRegion(@Nullable Input<String> sourceRegion) {
            this.sourceRegion = sourceRegion;
            return this;
        }

        public Builder setSourceRegion(@Nullable String sourceRegion) {
            this.sourceRegion = Input.ofNullable(sourceRegion);
            return this;
        }

        public Builder setStorageEncrypted(@Nullable Input<Boolean> storageEncrypted) {
            this.storageEncrypted = storageEncrypted;
            return this;
        }

        public Builder setStorageEncrypted(@Nullable Boolean storageEncrypted) {
            this.storageEncrypted = Input.ofNullable(storageEncrypted);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVpcSecurityGroupIds(@Nullable Input<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        public Builder setVpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Input.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public ClusterArgs build() {
            return new ClusterArgs(allowMajorVersionUpgrade, applyImmediately, availabilityZones, backtrackWindow, backupRetentionPeriod, clusterIdentifier, clusterIdentifierPrefix, clusterMembers, copyTagsToSnapshot, databaseName, dbClusterParameterGroupName, dbInstanceParameterGroupName, dbSubnetGroupName, deletionProtection, enableGlobalWriteForwarding, enableHttpEndpoint, enabledCloudwatchLogsExports, engine, engineMode, engineVersion, finalSnapshotIdentifier, globalClusterIdentifier, iamDatabaseAuthenticationEnabled, iamRoles, kmsKeyId, masterPassword, masterUsername, port, preferredBackupWindow, preferredMaintenanceWindow, replicationSourceIdentifier, restoreToPointInTime, s3Import, scalingConfiguration, skipFinalSnapshot, snapshotIdentifier, sourceRegion, storageEncrypted, tags, vpcSecurityGroupIds);
        }
    }
}
