// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.acm.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCertificateArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetCertificateArgs Empty = new GetCertificateArgs();

    /**
     * The domain of the certificate to look up. If no certificate is found with this name, an error will be returned.
     * 
     */
    @Import(name="domain", required=true)
      private final String domain;

    public String getDomain() {
        return this.domain;
    }

    /**
     * A list of key algorithms to filter certificates. By default, ACM does not return all certificate types when searching. See the [ACM API Reference](https://docs.aws.amazon.com/acm/latest/APIReference/API_CertificateDetail.html#ACM-Type-CertificateDetail-KeyAlgorithm) for supported key algorithms.
     * 
     */
    @Import(name="keyTypes")
      private final @Nullable List<String> keyTypes;

    public List<String> getKeyTypes() {
        return this.keyTypes == null ? List.of() : this.keyTypes;
    }

    /**
     * If set to true, it sorts the certificates matched by previous criteria by the NotBefore field, returning only the most recent one. If set to false, it returns an error if more than one certificate is found. Defaults to false.
     * 
     */
    @Import(name="mostRecent")
      private final @Nullable Boolean mostRecent;

    public Optional<Boolean> getMostRecent() {
        return this.mostRecent == null ? Optional.empty() : Optional.ofNullable(this.mostRecent);
    }

    /**
     * A list of statuses on which to filter the returned list. Valid values are `PENDING_VALIDATION`, `ISSUED`,
     * `INACTIVE`, `EXPIRED`, `VALIDATION_TIMED_OUT`, `REVOKED` and `FAILED`. If no value is specified, only certificates in the `ISSUED` state
     * are returned.
     * 
     */
    @Import(name="statuses")
      private final @Nullable List<String> statuses;

    public List<String> getStatuses() {
        return this.statuses == null ? List.of() : this.statuses;
    }

    /**
     * A mapping of tags for the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Map<String,String> tags;

    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    /**
     * A list of types on which to filter the returned list. Valid values are `AMAZON_ISSUED` and `IMPORTED`.
     * 
     */
    @Import(name="types")
      private final @Nullable List<String> types;

    public List<String> getTypes() {
        return this.types == null ? List.of() : this.types;
    }

    public GetCertificateArgs(
        String domain,
        @Nullable List<String> keyTypes,
        @Nullable Boolean mostRecent,
        @Nullable List<String> statuses,
        @Nullable Map<String,String> tags,
        @Nullable List<String> types) {
        this.domain = Objects.requireNonNull(domain, "expected parameter 'domain' to be non-null");
        this.keyTypes = keyTypes;
        this.mostRecent = mostRecent;
        this.statuses = statuses;
        this.tags = tags;
        this.types = types;
    }

    private GetCertificateArgs() {
        this.domain = null;
        this.keyTypes = List.of();
        this.mostRecent = null;
        this.statuses = List.of();
        this.tags = Map.of();
        this.types = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String domain;
        private @Nullable List<String> keyTypes;
        private @Nullable Boolean mostRecent;
        private @Nullable List<String> statuses;
        private @Nullable Map<String,String> tags;
        private @Nullable List<String> types;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCertificateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.keyTypes = defaults.keyTypes;
    	      this.mostRecent = defaults.mostRecent;
    	      this.statuses = defaults.statuses;
    	      this.tags = defaults.tags;
    	      this.types = defaults.types;
        }

        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        public Builder keyTypes(@Nullable List<String> keyTypes) {
            this.keyTypes = keyTypes;
            return this;
        }
        public Builder keyTypes(String... keyTypes) {
            return keyTypes(List.of(keyTypes));
        }
        public Builder mostRecent(@Nullable Boolean mostRecent) {
            this.mostRecent = mostRecent;
            return this;
        }
        public Builder statuses(@Nullable List<String> statuses) {
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder types(@Nullable List<String> types) {
            this.types = types;
            return this;
        }
        public Builder types(String... types) {
            return types(List.of(types));
        }        public GetCertificateArgs build() {
            return new GetCertificateArgs(domain, keyTypes, mostRecent, statuses, tags, types);
        }
    }
}
