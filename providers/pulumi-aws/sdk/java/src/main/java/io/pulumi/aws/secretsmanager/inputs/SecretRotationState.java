// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.secretsmanager.inputs;

import io.pulumi.aws.secretsmanager.inputs.SecretRotationRotationRulesGetArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecretRotationState extends io.pulumi.resources.ResourceArgs {

    public static final SecretRotationState Empty = new SecretRotationState();

    /**
     * Specifies whether automatic rotation is enabled for this secret.
     * 
     */
    @Import(name="rotationEnabled")
      private final @Nullable Output<Boolean> rotationEnabled;

    public Output<Boolean> getRotationEnabled() {
        return this.rotationEnabled == null ? Codegen.empty() : this.rotationEnabled;
    }

    /**
     * Specifies the ARN of the Lambda function that can rotate the secret.
     * 
     */
    @Import(name="rotationLambdaArn")
      private final @Nullable Output<String> rotationLambdaArn;

    public Output<String> getRotationLambdaArn() {
        return this.rotationLambdaArn == null ? Codegen.empty() : this.rotationLambdaArn;
    }

    /**
     * A structure that defines the rotation configuration for this secret. Defined below.
     * 
     */
    @Import(name="rotationRules")
      private final @Nullable Output<SecretRotationRotationRulesGetArgs> rotationRules;

    public Output<SecretRotationRotationRulesGetArgs> getRotationRules() {
        return this.rotationRules == null ? Codegen.empty() : this.rotationRules;
    }

    /**
     * Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
     * 
     */
    @Import(name="secretId")
      private final @Nullable Output<String> secretId;

    public Output<String> getSecretId() {
        return this.secretId == null ? Codegen.empty() : this.secretId;
    }

    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public SecretRotationState(
        @Nullable Output<Boolean> rotationEnabled,
        @Nullable Output<String> rotationLambdaArn,
        @Nullable Output<SecretRotationRotationRulesGetArgs> rotationRules,
        @Nullable Output<String> secretId,
        @Nullable Output<Map<String,String>> tags) {
        this.rotationEnabled = rotationEnabled;
        this.rotationLambdaArn = rotationLambdaArn;
        this.rotationRules = rotationRules;
        this.secretId = secretId;
        this.tags = tags;
    }

    private SecretRotationState() {
        this.rotationEnabled = Codegen.empty();
        this.rotationLambdaArn = Codegen.empty();
        this.rotationRules = Codegen.empty();
        this.secretId = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretRotationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> rotationEnabled;
        private @Nullable Output<String> rotationLambdaArn;
        private @Nullable Output<SecretRotationRotationRulesGetArgs> rotationRules;
        private @Nullable Output<String> secretId;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretRotationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.rotationEnabled = defaults.rotationEnabled;
    	      this.rotationLambdaArn = defaults.rotationLambdaArn;
    	      this.rotationRules = defaults.rotationRules;
    	      this.secretId = defaults.secretId;
    	      this.tags = defaults.tags;
        }

        public Builder rotationEnabled(@Nullable Output<Boolean> rotationEnabled) {
            this.rotationEnabled = rotationEnabled;
            return this;
        }
        public Builder rotationEnabled(@Nullable Boolean rotationEnabled) {
            this.rotationEnabled = Codegen.ofNullable(rotationEnabled);
            return this;
        }
        public Builder rotationLambdaArn(@Nullable Output<String> rotationLambdaArn) {
            this.rotationLambdaArn = rotationLambdaArn;
            return this;
        }
        public Builder rotationLambdaArn(@Nullable String rotationLambdaArn) {
            this.rotationLambdaArn = Codegen.ofNullable(rotationLambdaArn);
            return this;
        }
        public Builder rotationRules(@Nullable Output<SecretRotationRotationRulesGetArgs> rotationRules) {
            this.rotationRules = rotationRules;
            return this;
        }
        public Builder rotationRules(@Nullable SecretRotationRotationRulesGetArgs rotationRules) {
            this.rotationRules = Codegen.ofNullable(rotationRules);
            return this;
        }
        public Builder secretId(@Nullable Output<String> secretId) {
            this.secretId = secretId;
            return this;
        }
        public Builder secretId(@Nullable String secretId) {
            this.secretId = Codegen.ofNullable(secretId);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public SecretRotationState build() {
            return new SecretRotationState(rotationEnabled, rotationLambdaArn, rotationRules, secretId, tags);
        }
    }
}
