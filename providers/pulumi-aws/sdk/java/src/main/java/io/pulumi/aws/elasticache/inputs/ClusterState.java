// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elasticache.inputs;

import io.pulumi.aws.elasticache.inputs.ClusterCacheNodeGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterState extends io.pulumi.resources.ResourceArgs {

    public static final ClusterState Empty = new ClusterState();

    /**
     * Whether any database modifications are applied immediately, or during the next maintenance window. Default is `false`. See [Amazon ElastiCache Documentation for more information.](https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheCluster.html).
     * 
     */
    @InputImport(name="applyImmediately")
      private final @Nullable Input<Boolean> applyImmediately;

    public Input<Boolean> getApplyImmediately() {
        return this.applyImmediately == null ? Input.empty() : this.applyImmediately;
    }

    /**
     * The ARN of the created ElastiCache Cluster.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Availability Zone for the cache cluster. If you want to create cache nodes in multi-az, use `preferred_availability_zones` instead. Default: System chosen Availability Zone. Changing this value will re-create the resource.
     * 
     */
    @InputImport(name="availabilityZone")
      private final @Nullable Input<String> availabilityZone;

    public Input<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Input.empty() : this.availabilityZone;
    }

    /**
     * Whether the nodes in this Memcached node group are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region. Valid values for this parameter are `single-az` or `cross-az`, default is `single-az`. If you want to choose `cross-az`, `num_cache_nodes` must be greater than `1`.
     * 
     */
    @InputImport(name="azMode")
      private final @Nullable Input<String> azMode;

    public Input<String> getAzMode() {
        return this.azMode == null ? Input.empty() : this.azMode;
    }

    /**
     * List of node objects including `id`, `address`, `port` and `availability_zone`.
     * 
     */
    @InputImport(name="cacheNodes")
      private final @Nullable Input<List<ClusterCacheNodeGetArgs>> cacheNodes;

    public Input<List<ClusterCacheNodeGetArgs>> getCacheNodes() {
        return this.cacheNodes == null ? Input.empty() : this.cacheNodes;
    }

    /**
     * (Memcached only) DNS name of the cache cluster without the port appended.
     * 
     */
    @InputImport(name="clusterAddress")
      private final @Nullable Input<String> clusterAddress;

    public Input<String> getClusterAddress() {
        return this.clusterAddress == null ? Input.empty() : this.clusterAddress;
    }

    /**
     * Group identifier. ElastiCache converts this name to lowercase. Changing this value will re-create the resource.
     * 
     */
    @InputImport(name="clusterId")
      private final @Nullable Input<String> clusterId;

    public Input<String> getClusterId() {
        return this.clusterId == null ? Input.empty() : this.clusterId;
    }

    /**
     * (Memcached only) Configuration endpoint to allow host discovery.
     * 
     */
    @InputImport(name="configurationEndpoint")
      private final @Nullable Input<String> configurationEndpoint;

    public Input<String> getConfigurationEndpoint() {
        return this.configurationEndpoint == null ? Input.empty() : this.configurationEndpoint;
    }

    /**
     * Name of the cache engine to be used for this cache cluster. Valid values are `memcached` or `redis`.
     * 
     */
    @InputImport(name="engine")
      private final @Nullable Input<String> engine;

    public Input<String> getEngine() {
        return this.engine == null ? Input.empty() : this.engine;
    }

    /**
     * Version number of the cache engine to be used.
     * See [Describe Cache Engine Versions](https://docs.aws.amazon.com/cli/latest/reference/elasticache/describe-cache-engine-versions.html)
     * in the AWS Documentation for supported versions. When `engine` is `redis` and the version is 6 or higher, only the major version can be set, e.g., `6.x`, otherwise, specify the full version desired, e.g., `5.0.6`. The actual engine version used is returned in the attribute `engine_version_actual`, defined below.
     * 
     */
    @InputImport(name="engineVersion")
      private final @Nullable Input<String> engineVersion;

    public Input<String> getEngineVersion() {
        return this.engineVersion == null ? Input.empty() : this.engineVersion;
    }

    /**
     * The running version of the cache engine.
     * 
     */
    @InputImport(name="engineVersionActual")
      private final @Nullable Input<String> engineVersionActual;

    public Input<String> getEngineVersionActual() {
        return this.engineVersionActual == null ? Input.empty() : this.engineVersionActual;
    }

    /**
     * Name of your final cluster snapshot. If omitted, no final snapshot will be made.
     * 
     */
    @InputImport(name="finalSnapshotIdentifier")
      private final @Nullable Input<String> finalSnapshotIdentifier;

    public Input<String> getFinalSnapshotIdentifier() {
        return this.finalSnapshotIdentifier == null ? Input.empty() : this.finalSnapshotIdentifier;
    }

    /**
     * Specifies the weekly time range for when maintenance
     * on the cache cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC).
     * The minimum maintenance window is a 60 minute period. Example: `sun:05:00-sun:09:00`.
     * 
     */
    @InputImport(name="maintenanceWindow")
      private final @Nullable Input<String> maintenanceWindow;

    public Input<String> getMaintenanceWindow() {
        return this.maintenanceWindow == null ? Input.empty() : this.maintenanceWindow;
    }

    /**
     * The instance class used. See AWS documentation for information on [supported node types for Redis](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types for Redis](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html). See AWS documentation for information on [supported node types for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/nodes-select-size.html). For Memcached, changing this value will re-create the resource.
     * 
     */
    @InputImport(name="nodeType")
      private final @Nullable Input<String> nodeType;

    public Input<String> getNodeType() {
        return this.nodeType == null ? Input.empty() : this.nodeType;
    }

    /**
     * ARN of an SNS topic to send ElastiCache notifications to. Example: `arn:aws:sns:us-east-1:012345678999:my_sns_topic`.
     * 
     */
    @InputImport(name="notificationTopicArn")
      private final @Nullable Input<String> notificationTopicArn;

    public Input<String> getNotificationTopicArn() {
        return this.notificationTopicArn == null ? Input.empty() : this.notificationTopicArn;
    }

    /**
     * The initial number of cache nodes that the cache cluster will have. For Redis, this value must be 1. For Memcached, this value must be between 1 and 40. If this number is reduced on subsequent runs, the highest numbered nodes will be removed.
     * 
     */
    @InputImport(name="numCacheNodes")
      private final @Nullable Input<Integer> numCacheNodes;

    public Input<Integer> getNumCacheNodes() {
        return this.numCacheNodes == null ? Input.empty() : this.numCacheNodes;
    }

    /**
     * The name of the parameter group to associate with this cache cluster.
     * 
     */
    @InputImport(name="parameterGroupName")
      private final @Nullable Input<String> parameterGroupName;

    public Input<String> getParameterGroupName() {
        return this.parameterGroupName == null ? Input.empty() : this.parameterGroupName;
    }

    /**
     * The port number on which each of the cache nodes will accept connections. For Memcached the default is 11211, and for Redis the default port is 6379. Cannot be provided with `replication_group_id`. Changing this value will re-create the resource.
     * 
     */
    @InputImport(name="port")
      private final @Nullable Input<Integer> port;

    public Input<Integer> getPort() {
        return this.port == null ? Input.empty() : this.port;
    }

    /**
     * List of the Availability Zones in which cache nodes are created. If you are creating your cluster in an Amazon VPC you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of `num_cache_nodes`. If you want all the nodes in the same Availability Zone, use `availability_zone` instead, or repeat the Availability Zone multiple times in the list. Default: System chosen Availability Zones. Detecting drift of existing node availability zone is not currently supported. Updating this argument by itself to migrate existing node availability zones is not currently supported and will show a perpetual difference.
     * 
     */
    @InputImport(name="preferredAvailabilityZones")
      private final @Nullable Input<List<String>> preferredAvailabilityZones;

    public Input<List<String>> getPreferredAvailabilityZones() {
        return this.preferredAvailabilityZones == null ? Input.empty() : this.preferredAvailabilityZones;
    }

    /**
     * ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.
     * 
     */
    @InputImport(name="replicationGroupId")
      private final @Nullable Input<String> replicationGroupId;

    public Input<String> getReplicationGroupId() {
        return this.replicationGroupId == null ? Input.empty() : this.replicationGroupId;
    }

    /**
     * One or more VPC security groups associated with the cache cluster
     * 
     */
    @InputImport(name="securityGroupIds")
      private final @Nullable Input<List<String>> securityGroupIds;

    public Input<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds == null ? Input.empty() : this.securityGroupIds;
    }

    /**
     * List of security group names to associate with this cache cluster. Changing this value will re-create the resource.
     * 
     */
    @InputImport(name="securityGroupNames")
      private final @Nullable Input<List<String>> securityGroupNames;

    public Input<List<String>> getSecurityGroupNames() {
        return this.securityGroupNames == null ? Input.empty() : this.securityGroupNames;
    }

    /**
     * Single-element string list containing an Amazon Resource Name (ARN) of a Redis RDB snapshot file stored in Amazon S3. The object name cannot contain any commas. Changing `snapshot_arns` forces a new resource.
     * 
     */
    @InputImport(name="snapshotArns")
      private final @Nullable Input<String> snapshotArns;

    public Input<String> getSnapshotArns() {
        return this.snapshotArns == null ? Input.empty() : this.snapshotArns;
    }

    /**
     * Name of a snapshot from which to restore data into the new node group. Changing `snapshot_name` forces a new resource.
     * 
     */
    @InputImport(name="snapshotName")
      private final @Nullable Input<String> snapshotName;

    public Input<String> getSnapshotName() {
        return this.snapshotName == null ? Input.empty() : this.snapshotName;
    }

    /**
     * Number of days for which ElastiCache will retain automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. Please note that setting a `snapshot_retention_limit` is not supported on cache.t1.micro cache nodes
     * 
     */
    @InputImport(name="snapshotRetentionLimit")
      private final @Nullable Input<Integer> snapshotRetentionLimit;

    public Input<Integer> getSnapshotRetentionLimit() {
        return this.snapshotRetentionLimit == null ? Input.empty() : this.snapshotRetentionLimit;
    }

    /**
     * Daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your cache cluster. Example: 05:00-09:00
     * 
     */
    @InputImport(name="snapshotWindow")
      private final @Nullable Input<String> snapshotWindow;

    public Input<String> getSnapshotWindow() {
        return this.snapshotWindow == null ? Input.empty() : this.snapshotWindow;
    }

    /**
     * Name of the subnet group to be used for the cache cluster. Changing this value will re-create the resource.
     * 
     */
    @InputImport(name="subnetGroupName")
      private final @Nullable Input<String> subnetGroupName;

    public Input<String> getSubnetGroupName() {
        return this.subnetGroupName == null ? Input.empty() : this.subnetGroupName;
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    public ClusterState(
        @Nullable Input<Boolean> applyImmediately,
        @Nullable Input<String> arn,
        @Nullable Input<String> availabilityZone,
        @Nullable Input<String> azMode,
        @Nullable Input<List<ClusterCacheNodeGetArgs>> cacheNodes,
        @Nullable Input<String> clusterAddress,
        @Nullable Input<String> clusterId,
        @Nullable Input<String> configurationEndpoint,
        @Nullable Input<String> engine,
        @Nullable Input<String> engineVersion,
        @Nullable Input<String> engineVersionActual,
        @Nullable Input<String> finalSnapshotIdentifier,
        @Nullable Input<String> maintenanceWindow,
        @Nullable Input<String> nodeType,
        @Nullable Input<String> notificationTopicArn,
        @Nullable Input<Integer> numCacheNodes,
        @Nullable Input<String> parameterGroupName,
        @Nullable Input<Integer> port,
        @Nullable Input<List<String>> preferredAvailabilityZones,
        @Nullable Input<String> replicationGroupId,
        @Nullable Input<List<String>> securityGroupIds,
        @Nullable Input<List<String>> securityGroupNames,
        @Nullable Input<String> snapshotArns,
        @Nullable Input<String> snapshotName,
        @Nullable Input<Integer> snapshotRetentionLimit,
        @Nullable Input<String> snapshotWindow,
        @Nullable Input<String> subnetGroupName,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll) {
        this.applyImmediately = applyImmediately;
        this.arn = arn;
        this.availabilityZone = availabilityZone;
        this.azMode = azMode;
        this.cacheNodes = cacheNodes;
        this.clusterAddress = clusterAddress;
        this.clusterId = clusterId;
        this.configurationEndpoint = configurationEndpoint;
        this.engine = engine;
        this.engineVersion = engineVersion;
        this.engineVersionActual = engineVersionActual;
        this.finalSnapshotIdentifier = finalSnapshotIdentifier;
        this.maintenanceWindow = maintenanceWindow;
        this.nodeType = nodeType;
        this.notificationTopicArn = notificationTopicArn;
        this.numCacheNodes = numCacheNodes;
        this.parameterGroupName = parameterGroupName;
        this.port = port;
        this.preferredAvailabilityZones = preferredAvailabilityZones;
        this.replicationGroupId = replicationGroupId;
        this.securityGroupIds = securityGroupIds;
        this.securityGroupNames = securityGroupNames;
        this.snapshotArns = snapshotArns;
        this.snapshotName = snapshotName;
        this.snapshotRetentionLimit = snapshotRetentionLimit;
        this.snapshotWindow = snapshotWindow;
        this.subnetGroupName = subnetGroupName;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private ClusterState() {
        this.applyImmediately = Input.empty();
        this.arn = Input.empty();
        this.availabilityZone = Input.empty();
        this.azMode = Input.empty();
        this.cacheNodes = Input.empty();
        this.clusterAddress = Input.empty();
        this.clusterId = Input.empty();
        this.configurationEndpoint = Input.empty();
        this.engine = Input.empty();
        this.engineVersion = Input.empty();
        this.engineVersionActual = Input.empty();
        this.finalSnapshotIdentifier = Input.empty();
        this.maintenanceWindow = Input.empty();
        this.nodeType = Input.empty();
        this.notificationTopicArn = Input.empty();
        this.numCacheNodes = Input.empty();
        this.parameterGroupName = Input.empty();
        this.port = Input.empty();
        this.preferredAvailabilityZones = Input.empty();
        this.replicationGroupId = Input.empty();
        this.securityGroupIds = Input.empty();
        this.securityGroupNames = Input.empty();
        this.snapshotArns = Input.empty();
        this.snapshotName = Input.empty();
        this.snapshotRetentionLimit = Input.empty();
        this.snapshotWindow = Input.empty();
        this.subnetGroupName = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> applyImmediately;
        private @Nullable Input<String> arn;
        private @Nullable Input<String> availabilityZone;
        private @Nullable Input<String> azMode;
        private @Nullable Input<List<ClusterCacheNodeGetArgs>> cacheNodes;
        private @Nullable Input<String> clusterAddress;
        private @Nullable Input<String> clusterId;
        private @Nullable Input<String> configurationEndpoint;
        private @Nullable Input<String> engine;
        private @Nullable Input<String> engineVersion;
        private @Nullable Input<String> engineVersionActual;
        private @Nullable Input<String> finalSnapshotIdentifier;
        private @Nullable Input<String> maintenanceWindow;
        private @Nullable Input<String> nodeType;
        private @Nullable Input<String> notificationTopicArn;
        private @Nullable Input<Integer> numCacheNodes;
        private @Nullable Input<String> parameterGroupName;
        private @Nullable Input<Integer> port;
        private @Nullable Input<List<String>> preferredAvailabilityZones;
        private @Nullable Input<String> replicationGroupId;
        private @Nullable Input<List<String>> securityGroupIds;
        private @Nullable Input<List<String>> securityGroupNames;
        private @Nullable Input<String> snapshotArns;
        private @Nullable Input<String> snapshotName;
        private @Nullable Input<Integer> snapshotRetentionLimit;
        private @Nullable Input<String> snapshotWindow;
        private @Nullable Input<String> subnetGroupName;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyImmediately = defaults.applyImmediately;
    	      this.arn = defaults.arn;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.azMode = defaults.azMode;
    	      this.cacheNodes = defaults.cacheNodes;
    	      this.clusterAddress = defaults.clusterAddress;
    	      this.clusterId = defaults.clusterId;
    	      this.configurationEndpoint = defaults.configurationEndpoint;
    	      this.engine = defaults.engine;
    	      this.engineVersion = defaults.engineVersion;
    	      this.engineVersionActual = defaults.engineVersionActual;
    	      this.finalSnapshotIdentifier = defaults.finalSnapshotIdentifier;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.nodeType = defaults.nodeType;
    	      this.notificationTopicArn = defaults.notificationTopicArn;
    	      this.numCacheNodes = defaults.numCacheNodes;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.port = defaults.port;
    	      this.preferredAvailabilityZones = defaults.preferredAvailabilityZones;
    	      this.replicationGroupId = defaults.replicationGroupId;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.securityGroupNames = defaults.securityGroupNames;
    	      this.snapshotArns = defaults.snapshotArns;
    	      this.snapshotName = defaults.snapshotName;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
    	      this.subnetGroupName = defaults.subnetGroupName;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder setApplyImmediately(@Nullable Input<Boolean> applyImmediately) {
            this.applyImmediately = applyImmediately;
            return this;
        }

        public Builder setApplyImmediately(@Nullable Boolean applyImmediately) {
            this.applyImmediately = Input.ofNullable(applyImmediately);
            return this;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setAvailabilityZone(@Nullable Input<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }

        public Builder setAvailabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Input.ofNullable(availabilityZone);
            return this;
        }

        public Builder setAzMode(@Nullable Input<String> azMode) {
            this.azMode = azMode;
            return this;
        }

        public Builder setAzMode(@Nullable String azMode) {
            this.azMode = Input.ofNullable(azMode);
            return this;
        }

        public Builder setCacheNodes(@Nullable Input<List<ClusterCacheNodeGetArgs>> cacheNodes) {
            this.cacheNodes = cacheNodes;
            return this;
        }

        public Builder setCacheNodes(@Nullable List<ClusterCacheNodeGetArgs> cacheNodes) {
            this.cacheNodes = Input.ofNullable(cacheNodes);
            return this;
        }

        public Builder setClusterAddress(@Nullable Input<String> clusterAddress) {
            this.clusterAddress = clusterAddress;
            return this;
        }

        public Builder setClusterAddress(@Nullable String clusterAddress) {
            this.clusterAddress = Input.ofNullable(clusterAddress);
            return this;
        }

        public Builder setClusterId(@Nullable Input<String> clusterId) {
            this.clusterId = clusterId;
            return this;
        }

        public Builder setClusterId(@Nullable String clusterId) {
            this.clusterId = Input.ofNullable(clusterId);
            return this;
        }

        public Builder setConfigurationEndpoint(@Nullable Input<String> configurationEndpoint) {
            this.configurationEndpoint = configurationEndpoint;
            return this;
        }

        public Builder setConfigurationEndpoint(@Nullable String configurationEndpoint) {
            this.configurationEndpoint = Input.ofNullable(configurationEndpoint);
            return this;
        }

        public Builder setEngine(@Nullable Input<String> engine) {
            this.engine = engine;
            return this;
        }

        public Builder setEngine(@Nullable String engine) {
            this.engine = Input.ofNullable(engine);
            return this;
        }

        public Builder setEngineVersion(@Nullable Input<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }

        public Builder setEngineVersion(@Nullable String engineVersion) {
            this.engineVersion = Input.ofNullable(engineVersion);
            return this;
        }

        public Builder setEngineVersionActual(@Nullable Input<String> engineVersionActual) {
            this.engineVersionActual = engineVersionActual;
            return this;
        }

        public Builder setEngineVersionActual(@Nullable String engineVersionActual) {
            this.engineVersionActual = Input.ofNullable(engineVersionActual);
            return this;
        }

        public Builder setFinalSnapshotIdentifier(@Nullable Input<String> finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = finalSnapshotIdentifier;
            return this;
        }

        public Builder setFinalSnapshotIdentifier(@Nullable String finalSnapshotIdentifier) {
            this.finalSnapshotIdentifier = Input.ofNullable(finalSnapshotIdentifier);
            return this;
        }

        public Builder setMaintenanceWindow(@Nullable Input<String> maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }

        public Builder setMaintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = Input.ofNullable(maintenanceWindow);
            return this;
        }

        public Builder setNodeType(@Nullable Input<String> nodeType) {
            this.nodeType = nodeType;
            return this;
        }

        public Builder setNodeType(@Nullable String nodeType) {
            this.nodeType = Input.ofNullable(nodeType);
            return this;
        }

        public Builder setNotificationTopicArn(@Nullable Input<String> notificationTopicArn) {
            this.notificationTopicArn = notificationTopicArn;
            return this;
        }

        public Builder setNotificationTopicArn(@Nullable String notificationTopicArn) {
            this.notificationTopicArn = Input.ofNullable(notificationTopicArn);
            return this;
        }

        public Builder setNumCacheNodes(@Nullable Input<Integer> numCacheNodes) {
            this.numCacheNodes = numCacheNodes;
            return this;
        }

        public Builder setNumCacheNodes(@Nullable Integer numCacheNodes) {
            this.numCacheNodes = Input.ofNullable(numCacheNodes);
            return this;
        }

        public Builder setParameterGroupName(@Nullable Input<String> parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }

        public Builder setParameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = Input.ofNullable(parameterGroupName);
            return this;
        }

        public Builder setPort(@Nullable Input<Integer> port) {
            this.port = port;
            return this;
        }

        public Builder setPort(@Nullable Integer port) {
            this.port = Input.ofNullable(port);
            return this;
        }

        public Builder setPreferredAvailabilityZones(@Nullable Input<List<String>> preferredAvailabilityZones) {
            this.preferredAvailabilityZones = preferredAvailabilityZones;
            return this;
        }

        public Builder setPreferredAvailabilityZones(@Nullable List<String> preferredAvailabilityZones) {
            this.preferredAvailabilityZones = Input.ofNullable(preferredAvailabilityZones);
            return this;
        }

        public Builder setReplicationGroupId(@Nullable Input<String> replicationGroupId) {
            this.replicationGroupId = replicationGroupId;
            return this;
        }

        public Builder setReplicationGroupId(@Nullable String replicationGroupId) {
            this.replicationGroupId = Input.ofNullable(replicationGroupId);
            return this;
        }

        public Builder setSecurityGroupIds(@Nullable Input<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder setSecurityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Input.ofNullable(securityGroupIds);
            return this;
        }

        public Builder setSecurityGroupNames(@Nullable Input<List<String>> securityGroupNames) {
            this.securityGroupNames = securityGroupNames;
            return this;
        }

        public Builder setSecurityGroupNames(@Nullable List<String> securityGroupNames) {
            this.securityGroupNames = Input.ofNullable(securityGroupNames);
            return this;
        }

        public Builder setSnapshotArns(@Nullable Input<String> snapshotArns) {
            this.snapshotArns = snapshotArns;
            return this;
        }

        public Builder setSnapshotArns(@Nullable String snapshotArns) {
            this.snapshotArns = Input.ofNullable(snapshotArns);
            return this;
        }

        public Builder setSnapshotName(@Nullable Input<String> snapshotName) {
            this.snapshotName = snapshotName;
            return this;
        }

        public Builder setSnapshotName(@Nullable String snapshotName) {
            this.snapshotName = Input.ofNullable(snapshotName);
            return this;
        }

        public Builder setSnapshotRetentionLimit(@Nullable Input<Integer> snapshotRetentionLimit) {
            this.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }

        public Builder setSnapshotRetentionLimit(@Nullable Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = Input.ofNullable(snapshotRetentionLimit);
            return this;
        }

        public Builder setSnapshotWindow(@Nullable Input<String> snapshotWindow) {
            this.snapshotWindow = snapshotWindow;
            return this;
        }

        public Builder setSnapshotWindow(@Nullable String snapshotWindow) {
            this.snapshotWindow = Input.ofNullable(snapshotWindow);
            return this;
        }

        public Builder setSubnetGroupName(@Nullable Input<String> subnetGroupName) {
            this.subnetGroupName = subnetGroupName;
            return this;
        }

        public Builder setSubnetGroupName(@Nullable String subnetGroupName) {
            this.subnetGroupName = Input.ofNullable(subnetGroupName);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }
        public ClusterState build() {
            return new ClusterState(applyImmediately, arn, availabilityZone, azMode, cacheNodes, clusterAddress, clusterId, configurationEndpoint, engine, engineVersion, engineVersionActual, finalSnapshotIdentifier, maintenanceWindow, nodeType, notificationTopicArn, numCacheNodes, parameterGroupName, port, preferredAvailabilityZones, replicationGroupId, securityGroupIds, securityGroupNames, snapshotArns, snapshotName, snapshotRetentionLimit, snapshotWindow, subnetGroupName, tags, tagsAll);
        }
    }
}
