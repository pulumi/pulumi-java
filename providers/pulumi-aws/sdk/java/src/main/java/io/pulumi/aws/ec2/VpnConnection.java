// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.ec2.VpnConnectionArgs;
import io.pulumi.aws.ec2.inputs.VpnConnectionState;
import io.pulumi.aws.ec2.outputs.VpnConnectionRoute;
import io.pulumi.aws.ec2.outputs.VpnConnectionVgwTelemetry;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Manages a Site-to-Site VPN connection. A Site-to-Site VPN connection is an Internet Protocol security (IPsec) VPN connection between a VPC and an on-premises network.
 * Any new Site-to-Site VPN connection that you create is an [AWS VPN connection](https://docs.aws.amazon.com/vpn/latest/s2svpn/vpn-categories.html).
 * 
 * > **Note:** The CIDR blocks in the arguments `tunnel1_inside_cidr` and `tunnel2_inside_cidr` must have a prefix of /30 and be a part of a specific range.
 * [Read more about this in the AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnTunnelOptionsSpecification.html).
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * VPN Connections can be imported using the `vpn connection id`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:ec2/vpnConnection:VpnConnection testvpnconnection vpn-40f41529
 * ```
 * 
 */
@ResourceType(type="aws:ec2/vpnConnection:VpnConnection")
public class VpnConnection extends io.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name (ARN) of the VPN Connection.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of the VPN Connection.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The configuration information for the VPN connection's customer gateway (in the native XML format).
     * 
     */
    @Export(name="customerGatewayConfiguration", type=String.class, parameters={})
    private Output<String> customerGatewayConfiguration;

    /**
     * @return The configuration information for the VPN connection's customer gateway (in the native XML format).
     * 
     */
    public Output<String> getCustomerGatewayConfiguration() {
        return this.customerGatewayConfiguration;
    }
    /**
     * The ID of the customer gateway.
     * 
     */
    @Export(name="customerGatewayId", type=String.class, parameters={})
    private Output<String> customerGatewayId;

    /**
     * @return The ID of the customer gateway.
     * 
     */
    public Output<String> getCustomerGatewayId() {
        return this.customerGatewayId;
    }
    /**
     * Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
     * 
     */
    @Export(name="enableAcceleration", type=Boolean.class, parameters={})
    private Output<Boolean> enableAcceleration;

    /**
     * @return Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
     * 
     */
    public Output<Boolean> getEnableAcceleration() {
        return this.enableAcceleration;
    }
    /**
     * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @Export(name="localIpv4NetworkCidr", type=String.class, parameters={})
    private Output<String> localIpv4NetworkCidr;

    /**
     * @return The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    public Output<String> getLocalIpv4NetworkCidr() {
        return this.localIpv4NetworkCidr;
    }
    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @Export(name="localIpv6NetworkCidr", type=String.class, parameters={})
    private Output<String> localIpv6NetworkCidr;

    /**
     * @return The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    public Output<String> getLocalIpv6NetworkCidr() {
        return this.localIpv6NetworkCidr;
    }
    /**
     * The IPv4 CIDR on the AWS side of the VPN connection.
     * 
     */
    @Export(name="remoteIpv4NetworkCidr", type=String.class, parameters={})
    private Output<String> remoteIpv4NetworkCidr;

    /**
     * @return The IPv4 CIDR on the AWS side of the VPN connection.
     * 
     */
    public Output<String> getRemoteIpv4NetworkCidr() {
        return this.remoteIpv4NetworkCidr;
    }
    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @Export(name="remoteIpv6NetworkCidr", type=String.class, parameters={})
    private Output<String> remoteIpv6NetworkCidr;

    /**
     * @return The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    public Output<String> getRemoteIpv6NetworkCidr() {
        return this.remoteIpv6NetworkCidr;
    }
    /**
     * The static routes associated with the VPN connection. Detailed below.
     * 
     */
    @Export(name="routes", type=List.class, parameters={VpnConnectionRoute.class})
    private Output<List<VpnConnectionRoute>> routes;

    /**
     * @return The static routes associated with the VPN connection. Detailed below.
     * 
     */
    public Output<List<VpnConnectionRoute>> getRoutes() {
        return this.routes;
    }
    /**
     * Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
     * 
     */
    @Export(name="staticRoutesOnly", type=Boolean.class, parameters={})
    private Output<Boolean> staticRoutesOnly;

    /**
     * @return Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
     * 
     */
    public Output<Boolean> getStaticRoutesOnly() {
        return this.staticRoutesOnly;
    }
    /**
     * Tags to apply to the connection. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Tags to apply to the connection. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * When associated with an EC2 Transit Gateway (`transit_gateway_id` argument), the attachment ID. See also the `aws.ec2.Tag` for tagging the EC2 Transit Gateway VPN Attachment.
     * 
     */
    @Export(name="transitGatewayAttachmentId", type=String.class, parameters={})
    private Output<String> transitGatewayAttachmentId;

    /**
     * @return When associated with an EC2 Transit Gateway (`transit_gateway_id` argument), the attachment ID. See also the `aws.ec2.Tag` for tagging the EC2 Transit Gateway VPN Attachment.
     * 
     */
    public Output<String> getTransitGatewayAttachmentId() {
        return this.transitGatewayAttachmentId;
    }
    /**
     * The ID of the EC2 Transit Gateway.
     * 
     */
    @Export(name="transitGatewayId", type=String.class, parameters={})
    private Output</* @Nullable */ String> transitGatewayId;

    /**
     * @return The ID of the EC2 Transit Gateway.
     * 
     */
    public Output</* @Nullable */ String> getTransitGatewayId() {
        return this.transitGatewayId;
    }
    /**
     * The public IP address of the first VPN tunnel.
     * 
     */
    @Export(name="tunnel1Address", type=String.class, parameters={})
    private Output<String> tunnel1Address;

    /**
     * @return The public IP address of the first VPN tunnel.
     * 
     */
    public Output<String> getTunnel1Address() {
        return this.tunnel1Address;
    }
    /**
     * The bgp asn number of the first VPN tunnel.
     * 
     */
    @Export(name="tunnel1BgpAsn", type=String.class, parameters={})
    private Output<String> tunnel1BgpAsn;

    /**
     * @return The bgp asn number of the first VPN tunnel.
     * 
     */
    public Output<String> getTunnel1BgpAsn() {
        return this.tunnel1BgpAsn;
    }
    /**
     * The bgp holdtime of the first VPN tunnel.
     * 
     */
    @Export(name="tunnel1BgpHoldtime", type=Integer.class, parameters={})
    private Output<Integer> tunnel1BgpHoldtime;

    /**
     * @return The bgp holdtime of the first VPN tunnel.
     * 
     */
    public Output<Integer> getTunnel1BgpHoldtime() {
        return this.tunnel1BgpHoldtime;
    }
    /**
     * The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
     * 
     */
    @Export(name="tunnel1CgwInsideAddress", type=String.class, parameters={})
    private Output<String> tunnel1CgwInsideAddress;

    /**
     * @return The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
     * 
     */
    public Output<String> getTunnel1CgwInsideAddress() {
        return this.tunnel1CgwInsideAddress;
    }
    /**
     * The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    @Export(name="tunnel1DpdTimeoutAction", type=String.class, parameters={})
    private Output</* @Nullable */ String> tunnel1DpdTimeoutAction;

    /**
     * @return The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    public Output</* @Nullable */ String> getTunnel1DpdTimeoutAction() {
        return this.tunnel1DpdTimeoutAction;
    }
    /**
     * The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    @Export(name="tunnel1DpdTimeoutSeconds", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel1DpdTimeoutSeconds;

    /**
     * @return The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel1DpdTimeoutSeconds() {
        return this.tunnel1DpdTimeoutSeconds;
    }
    /**
     * The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    @Export(name="tunnel1IkeVersions", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tunnel1IkeVersions;

    /**
     * @return The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    public Output</* @Nullable */ List<String>> getTunnel1IkeVersions() {
        return this.tunnel1IkeVersions;
    }
    /**
     * The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    @Export(name="tunnel1InsideCidr", type=String.class, parameters={})
    private Output<String> tunnel1InsideCidr;

    /**
     * @return The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    public Output<String> getTunnel1InsideCidr() {
        return this.tunnel1InsideCidr;
    }
    /**
     * The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    @Export(name="tunnel1InsideIpv6Cidr", type=String.class, parameters={})
    private Output<String> tunnel1InsideIpv6Cidr;

    /**
     * @return The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    public Output<String> getTunnel1InsideIpv6Cidr() {
        return this.tunnel1InsideIpv6Cidr;
    }
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    @Export(name="tunnel1Phase1DhGroupNumbers", type=List.class, parameters={Integer.class})
    private Output</* @Nullable */ List<Integer>> tunnel1Phase1DhGroupNumbers;

    /**
     * @return List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    public Output</* @Nullable */ List<Integer>> getTunnel1Phase1DhGroupNumbers() {
        return this.tunnel1Phase1DhGroupNumbers;
    }
    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Export(name="tunnel1Phase1EncryptionAlgorithms", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tunnel1Phase1EncryptionAlgorithms;

    /**
     * @return List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    public Output</* @Nullable */ List<String>> getTunnel1Phase1EncryptionAlgorithms() {
        return this.tunnel1Phase1EncryptionAlgorithms;
    }
    /**
     * One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Export(name="tunnel1Phase1IntegrityAlgorithms", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tunnel1Phase1IntegrityAlgorithms;

    /**
     * @return One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    public Output</* @Nullable */ List<String>> getTunnel1Phase1IntegrityAlgorithms() {
        return this.tunnel1Phase1IntegrityAlgorithms;
    }
    /**
     * The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    @Export(name="tunnel1Phase1LifetimeSeconds", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel1Phase1LifetimeSeconds;

    /**
     * @return The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel1Phase1LifetimeSeconds() {
        return this.tunnel1Phase1LifetimeSeconds;
    }
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    @Export(name="tunnel1Phase2DhGroupNumbers", type=List.class, parameters={Integer.class})
    private Output</* @Nullable */ List<Integer>> tunnel1Phase2DhGroupNumbers;

    /**
     * @return List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    public Output</* @Nullable */ List<Integer>> getTunnel1Phase2DhGroupNumbers() {
        return this.tunnel1Phase2DhGroupNumbers;
    }
    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Export(name="tunnel1Phase2EncryptionAlgorithms", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tunnel1Phase2EncryptionAlgorithms;

    /**
     * @return List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    public Output</* @Nullable */ List<String>> getTunnel1Phase2EncryptionAlgorithms() {
        return this.tunnel1Phase2EncryptionAlgorithms;
    }
    /**
     * List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Export(name="tunnel1Phase2IntegrityAlgorithms", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tunnel1Phase2IntegrityAlgorithms;

    /**
     * @return List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    public Output</* @Nullable */ List<String>> getTunnel1Phase2IntegrityAlgorithms() {
        return this.tunnel1Phase2IntegrityAlgorithms;
    }
    /**
     * The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    @Export(name="tunnel1Phase2LifetimeSeconds", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel1Phase2LifetimeSeconds;

    /**
     * @return The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel1Phase2LifetimeSeconds() {
        return this.tunnel1Phase2LifetimeSeconds;
    }
    /**
     * The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    @Export(name="tunnel1PresharedKey", type=String.class, parameters={})
    private Output<String> tunnel1PresharedKey;

    /**
     * @return The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    public Output<String> getTunnel1PresharedKey() {
        return this.tunnel1PresharedKey;
    }
    /**
     * The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    @Export(name="tunnel1RekeyFuzzPercentage", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel1RekeyFuzzPercentage;

    /**
     * @return The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel1RekeyFuzzPercentage() {
        return this.tunnel1RekeyFuzzPercentage;
    }
    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel1_phase2_lifetime_seconds`.
     * 
     */
    @Export(name="tunnel1RekeyMarginTimeSeconds", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel1RekeyMarginTimeSeconds;

    /**
     * @return The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel1_phase2_lifetime_seconds`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel1RekeyMarginTimeSeconds() {
        return this.tunnel1RekeyMarginTimeSeconds;
    }
    /**
     * The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    @Export(name="tunnel1ReplayWindowSize", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel1ReplayWindowSize;

    /**
     * @return The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel1ReplayWindowSize() {
        return this.tunnel1ReplayWindowSize;
    }
    /**
     * The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    @Export(name="tunnel1StartupAction", type=String.class, parameters={})
    private Output</* @Nullable */ String> tunnel1StartupAction;

    /**
     * @return The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    public Output</* @Nullable */ String> getTunnel1StartupAction() {
        return this.tunnel1StartupAction;
    }
    /**
     * The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
     * 
     */
    @Export(name="tunnel1VgwInsideAddress", type=String.class, parameters={})
    private Output<String> tunnel1VgwInsideAddress;

    /**
     * @return The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
     * 
     */
    public Output<String> getTunnel1VgwInsideAddress() {
        return this.tunnel1VgwInsideAddress;
    }
    /**
     * The public IP address of the second VPN tunnel.
     * 
     */
    @Export(name="tunnel2Address", type=String.class, parameters={})
    private Output<String> tunnel2Address;

    /**
     * @return The public IP address of the second VPN tunnel.
     * 
     */
    public Output<String> getTunnel2Address() {
        return this.tunnel2Address;
    }
    /**
     * The bgp asn number of the second VPN tunnel.
     * 
     */
    @Export(name="tunnel2BgpAsn", type=String.class, parameters={})
    private Output<String> tunnel2BgpAsn;

    /**
     * @return The bgp asn number of the second VPN tunnel.
     * 
     */
    public Output<String> getTunnel2BgpAsn() {
        return this.tunnel2BgpAsn;
    }
    /**
     * The bgp holdtime of the second VPN tunnel.
     * 
     */
    @Export(name="tunnel2BgpHoldtime", type=Integer.class, parameters={})
    private Output<Integer> tunnel2BgpHoldtime;

    /**
     * @return The bgp holdtime of the second VPN tunnel.
     * 
     */
    public Output<Integer> getTunnel2BgpHoldtime() {
        return this.tunnel2BgpHoldtime;
    }
    /**
     * The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
     * 
     */
    @Export(name="tunnel2CgwInsideAddress", type=String.class, parameters={})
    private Output<String> tunnel2CgwInsideAddress;

    /**
     * @return The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
     * 
     */
    public Output<String> getTunnel2CgwInsideAddress() {
        return this.tunnel2CgwInsideAddress;
    }
    /**
     * The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    @Export(name="tunnel2DpdTimeoutAction", type=String.class, parameters={})
    private Output</* @Nullable */ String> tunnel2DpdTimeoutAction;

    /**
     * @return The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    public Output</* @Nullable */ String> getTunnel2DpdTimeoutAction() {
        return this.tunnel2DpdTimeoutAction;
    }
    /**
     * The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    @Export(name="tunnel2DpdTimeoutSeconds", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel2DpdTimeoutSeconds;

    /**
     * @return The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel2DpdTimeoutSeconds() {
        return this.tunnel2DpdTimeoutSeconds;
    }
    /**
     * The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    @Export(name="tunnel2IkeVersions", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tunnel2IkeVersions;

    /**
     * @return The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    public Output</* @Nullable */ List<String>> getTunnel2IkeVersions() {
        return this.tunnel2IkeVersions;
    }
    /**
     * The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    @Export(name="tunnel2InsideCidr", type=String.class, parameters={})
    private Output<String> tunnel2InsideCidr;

    /**
     * @return The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    public Output<String> getTunnel2InsideCidr() {
        return this.tunnel2InsideCidr;
    }
    /**
     * The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    @Export(name="tunnel2InsideIpv6Cidr", type=String.class, parameters={})
    private Output<String> tunnel2InsideIpv6Cidr;

    /**
     * @return The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    public Output<String> getTunnel2InsideIpv6Cidr() {
        return this.tunnel2InsideIpv6Cidr;
    }
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    @Export(name="tunnel2Phase1DhGroupNumbers", type=List.class, parameters={Integer.class})
    private Output</* @Nullable */ List<Integer>> tunnel2Phase1DhGroupNumbers;

    /**
     * @return List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    public Output</* @Nullable */ List<Integer>> getTunnel2Phase1DhGroupNumbers() {
        return this.tunnel2Phase1DhGroupNumbers;
    }
    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Export(name="tunnel2Phase1EncryptionAlgorithms", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tunnel2Phase1EncryptionAlgorithms;

    /**
     * @return List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    public Output</* @Nullable */ List<String>> getTunnel2Phase1EncryptionAlgorithms() {
        return this.tunnel2Phase1EncryptionAlgorithms;
    }
    /**
     * One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Export(name="tunnel2Phase1IntegrityAlgorithms", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tunnel2Phase1IntegrityAlgorithms;

    /**
     * @return One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    public Output</* @Nullable */ List<String>> getTunnel2Phase1IntegrityAlgorithms() {
        return this.tunnel2Phase1IntegrityAlgorithms;
    }
    /**
     * The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    @Export(name="tunnel2Phase1LifetimeSeconds", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel2Phase1LifetimeSeconds;

    /**
     * @return The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel2Phase1LifetimeSeconds() {
        return this.tunnel2Phase1LifetimeSeconds;
    }
    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    @Export(name="tunnel2Phase2DhGroupNumbers", type=List.class, parameters={Integer.class})
    private Output</* @Nullable */ List<Integer>> tunnel2Phase2DhGroupNumbers;

    /**
     * @return List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    public Output</* @Nullable */ List<Integer>> getTunnel2Phase2DhGroupNumbers() {
        return this.tunnel2Phase2DhGroupNumbers;
    }
    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Export(name="tunnel2Phase2EncryptionAlgorithms", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tunnel2Phase2EncryptionAlgorithms;

    /**
     * @return List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    public Output</* @Nullable */ List<String>> getTunnel2Phase2EncryptionAlgorithms() {
        return this.tunnel2Phase2EncryptionAlgorithms;
    }
    /**
     * List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Export(name="tunnel2Phase2IntegrityAlgorithms", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tunnel2Phase2IntegrityAlgorithms;

    /**
     * @return List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    public Output</* @Nullable */ List<String>> getTunnel2Phase2IntegrityAlgorithms() {
        return this.tunnel2Phase2IntegrityAlgorithms;
    }
    /**
     * The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    @Export(name="tunnel2Phase2LifetimeSeconds", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel2Phase2LifetimeSeconds;

    /**
     * @return The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel2Phase2LifetimeSeconds() {
        return this.tunnel2Phase2LifetimeSeconds;
    }
    /**
     * The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    @Export(name="tunnel2PresharedKey", type=String.class, parameters={})
    private Output<String> tunnel2PresharedKey;

    /**
     * @return The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    public Output<String> getTunnel2PresharedKey() {
        return this.tunnel2PresharedKey;
    }
    /**
     * The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    @Export(name="tunnel2RekeyFuzzPercentage", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel2RekeyFuzzPercentage;

    /**
     * @return The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel2RekeyFuzzPercentage() {
        return this.tunnel2RekeyFuzzPercentage;
    }
    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel2_phase2_lifetime_seconds`.
     * 
     */
    @Export(name="tunnel2RekeyMarginTimeSeconds", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel2RekeyMarginTimeSeconds;

    /**
     * @return The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel2_phase2_lifetime_seconds`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel2RekeyMarginTimeSeconds() {
        return this.tunnel2RekeyMarginTimeSeconds;
    }
    /**
     * The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    @Export(name="tunnel2ReplayWindowSize", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> tunnel2ReplayWindowSize;

    /**
     * @return The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    public Output</* @Nullable */ Integer> getTunnel2ReplayWindowSize() {
        return this.tunnel2ReplayWindowSize;
    }
    /**
     * The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    @Export(name="tunnel2StartupAction", type=String.class, parameters={})
    private Output</* @Nullable */ String> tunnel2StartupAction;

    /**
     * @return The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    public Output</* @Nullable */ String> getTunnel2StartupAction() {
        return this.tunnel2StartupAction;
    }
    /**
     * The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
     * 
     */
    @Export(name="tunnel2VgwInsideAddress", type=String.class, parameters={})
    private Output<String> tunnel2VgwInsideAddress;

    /**
     * @return The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
     * 
     */
    public Output<String> getTunnel2VgwInsideAddress() {
        return this.tunnel2VgwInsideAddress;
    }
    /**
     * Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
     * 
     */
    @Export(name="tunnelInsideIpVersion", type=String.class, parameters={})
    private Output<String> tunnelInsideIpVersion;

    /**
     * @return Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
     * 
     */
    public Output<String> getTunnelInsideIpVersion() {
        return this.tunnelInsideIpVersion;
    }
    /**
     * The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
     * 
     */
    public Output<String> getType() {
        return this.type;
    }
    /**
     * Telemetry for the VPN tunnels. Detailed below.
     * 
     */
    @Export(name="vgwTelemetries", type=List.class, parameters={VpnConnectionVgwTelemetry.class})
    private Output<List<VpnConnectionVgwTelemetry>> vgwTelemetries;

    /**
     * @return Telemetry for the VPN tunnels. Detailed below.
     * 
     */
    public Output<List<VpnConnectionVgwTelemetry>> getVgwTelemetries() {
        return this.vgwTelemetries;
    }
    /**
     * The ID of the Virtual Private Gateway.
     * 
     */
    @Export(name="vpnGatewayId", type=String.class, parameters={})
    private Output</* @Nullable */ String> vpnGatewayId;

    /**
     * @return The ID of the Virtual Private Gateway.
     * 
     */
    public Output</* @Nullable */ String> getVpnGatewayId() {
        return this.vpnGatewayId;
    }

    public interface BuilderApplicator {
        public void apply(VpnConnectionArgs.Builder a);
    }
    private static io.pulumi.aws.ec2.VpnConnectionArgs buildArgs(BuilderApplicator argsBuilder) {
        final var builder = io.pulumi.aws.ec2.VpnConnectionArgs.builder();
        argsBuilder.apply(builder);
        return builder.build();
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param argsBuilder A function that configures a passed builder.
     */
    public VpnConnection(String name, BuilderApplicator argsBuilder) {
        this(name, buildArgs(argsBuilder), null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VpnConnection(String name) {
        this(name, VpnConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VpnConnection(String name, VpnConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VpnConnection(String name, VpnConnectionArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ec2/vpnConnection:VpnConnection", name, args == null ? VpnConnectionArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private VpnConnection(String name, Output<String> id, @Nullable VpnConnectionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:ec2/vpnConnection:VpnConnection", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VpnConnection get(String name, Output<String> id, @Nullable VpnConnectionState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new VpnConnection(name, id, state, options);
    }
}
