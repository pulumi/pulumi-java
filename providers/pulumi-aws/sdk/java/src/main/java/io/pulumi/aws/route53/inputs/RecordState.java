// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.route53.inputs;

import io.pulumi.aws.route53.enums.RecordType;
import io.pulumi.aws.route53.inputs.RecordAliasGetArgs;
import io.pulumi.aws.route53.inputs.RecordFailoverRoutingPolicyGetArgs;
import io.pulumi.aws.route53.inputs.RecordGeolocationRoutingPolicyGetArgs;
import io.pulumi.aws.route53.inputs.RecordLatencyRoutingPolicyGetArgs;
import io.pulumi.aws.route53.inputs.RecordWeightedRoutingPolicyGetArgs;
import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RecordState extends io.pulumi.resources.ResourceArgs {

    public static final RecordState Empty = new RecordState();

    /**
     * An alias block. Conflicts with `ttl` & `records`.
     * Alias record documented below.
     * 
     */
    @InputImport(name="aliases")
    private final @Nullable Input<List<RecordAliasGetArgs>> aliases;

    public Input<List<RecordAliasGetArgs>> getAliases() {
        return this.aliases == null ? Input.empty() : this.aliases;
    }

    /**
     * Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
     * 
     */
    @InputImport(name="allowOverwrite")
    private final @Nullable Input<Boolean> allowOverwrite;

    public Input<Boolean> getAllowOverwrite() {
        return this.allowOverwrite == null ? Input.empty() : this.allowOverwrite;
    }

    /**
     * A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
     * 
     */
    @InputImport(name="failoverRoutingPolicies")
    private final @Nullable Input<List<RecordFailoverRoutingPolicyGetArgs>> failoverRoutingPolicies;

    public Input<List<RecordFailoverRoutingPolicyGetArgs>> getFailoverRoutingPolicies() {
        return this.failoverRoutingPolicies == null ? Input.empty() : this.failoverRoutingPolicies;
    }

    /**
     * [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) built using the zone domain and `name`.
     * 
     */
    @InputImport(name="fqdn")
    private final @Nullable Input<String> fqdn;

    public Input<String> getFqdn() {
        return this.fqdn == null ? Input.empty() : this.fqdn;
    }

    /**
     * A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
     * 
     */
    @InputImport(name="geolocationRoutingPolicies")
    private final @Nullable Input<List<RecordGeolocationRoutingPolicyGetArgs>> geolocationRoutingPolicies;

    public Input<List<RecordGeolocationRoutingPolicyGetArgs>> getGeolocationRoutingPolicies() {
        return this.geolocationRoutingPolicies == null ? Input.empty() : this.geolocationRoutingPolicies;
    }

    /**
     * The health check the record should be associated with.
     * 
     */
    @InputImport(name="healthCheckId")
    private final @Nullable Input<String> healthCheckId;

    public Input<String> getHealthCheckId() {
        return this.healthCheckId == null ? Input.empty() : this.healthCheckId;
    }

    /**
     * A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
     * 
     */
    @InputImport(name="latencyRoutingPolicies")
    private final @Nullable Input<List<RecordLatencyRoutingPolicyGetArgs>> latencyRoutingPolicies;

    public Input<List<RecordLatencyRoutingPolicyGetArgs>> getLatencyRoutingPolicies() {
        return this.latencyRoutingPolicies == null ? Input.empty() : this.latencyRoutingPolicies;
    }

    /**
     * Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
     * 
     */
    @InputImport(name="multivalueAnswerRoutingPolicy")
    private final @Nullable Input<Boolean> multivalueAnswerRoutingPolicy;

    public Input<Boolean> getMultivalueAnswerRoutingPolicy() {
        return this.multivalueAnswerRoutingPolicy == null ? Input.empty() : this.multivalueAnswerRoutingPolicy;
    }

    /**
     * DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the configuration string (e.g. `"first255characters\"\"morecharacters"`).
     * 
     */
    @InputImport(name="records")
    private final @Nullable Input<List<String>> records;

    public Input<List<String>> getRecords() {
        return this.records == null ? Input.empty() : this.records;
    }

    /**
     * Unique identifier to differentiate records with routing policies from one another. Required if using `failover`, `geolocation`, `latency`, or `weighted` routing policies documented below.
     * 
     */
    @InputImport(name="setIdentifier")
    private final @Nullable Input<String> setIdentifier;

    public Input<String> getSetIdentifier() {
        return this.setIdentifier == null ? Input.empty() : this.setIdentifier;
    }

    /**
     * The TTL of the record.
     * 
     */
    @InputImport(name="ttl")
    private final @Nullable Input<Integer> ttl;

    public Input<Integer> getTtl() {
        return this.ttl == null ? Input.empty() : this.ttl;
    }

    /**
     * `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
     * 
     */
    @InputImport(name="type")
    private final @Nullable Input<Either<String,RecordType>> type;

    public Input<Either<String,RecordType>> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
     * 
     */
    @InputImport(name="weightedRoutingPolicies")
    private final @Nullable Input<List<RecordWeightedRoutingPolicyGetArgs>> weightedRoutingPolicies;

    public Input<List<RecordWeightedRoutingPolicyGetArgs>> getWeightedRoutingPolicies() {
        return this.weightedRoutingPolicies == null ? Input.empty() : this.weightedRoutingPolicies;
    }

    /**
     * Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
     * 
     */
    @InputImport(name="zoneId")
    private final @Nullable Input<String> zoneId;

    public Input<String> getZoneId() {
        return this.zoneId == null ? Input.empty() : this.zoneId;
    }

    public RecordState(
        @Nullable Input<List<RecordAliasGetArgs>> aliases,
        @Nullable Input<Boolean> allowOverwrite,
        @Nullable Input<List<RecordFailoverRoutingPolicyGetArgs>> failoverRoutingPolicies,
        @Nullable Input<String> fqdn,
        @Nullable Input<List<RecordGeolocationRoutingPolicyGetArgs>> geolocationRoutingPolicies,
        @Nullable Input<String> healthCheckId,
        @Nullable Input<List<RecordLatencyRoutingPolicyGetArgs>> latencyRoutingPolicies,
        @Nullable Input<Boolean> multivalueAnswerRoutingPolicy,
        @Nullable Input<String> name,
        @Nullable Input<List<String>> records,
        @Nullable Input<String> setIdentifier,
        @Nullable Input<Integer> ttl,
        @Nullable Input<Either<String,RecordType>> type,
        @Nullable Input<List<RecordWeightedRoutingPolicyGetArgs>> weightedRoutingPolicies,
        @Nullable Input<String> zoneId) {
        this.aliases = aliases;
        this.allowOverwrite = allowOverwrite;
        this.failoverRoutingPolicies = failoverRoutingPolicies;
        this.fqdn = fqdn;
        this.geolocationRoutingPolicies = geolocationRoutingPolicies;
        this.healthCheckId = healthCheckId;
        this.latencyRoutingPolicies = latencyRoutingPolicies;
        this.multivalueAnswerRoutingPolicy = multivalueAnswerRoutingPolicy;
        this.name = name;
        this.records = records;
        this.setIdentifier = setIdentifier;
        this.ttl = ttl;
        this.type = type;
        this.weightedRoutingPolicies = weightedRoutingPolicies;
        this.zoneId = zoneId;
    }

    private RecordState() {
        this.aliases = Input.empty();
        this.allowOverwrite = Input.empty();
        this.failoverRoutingPolicies = Input.empty();
        this.fqdn = Input.empty();
        this.geolocationRoutingPolicies = Input.empty();
        this.healthCheckId = Input.empty();
        this.latencyRoutingPolicies = Input.empty();
        this.multivalueAnswerRoutingPolicy = Input.empty();
        this.name = Input.empty();
        this.records = Input.empty();
        this.setIdentifier = Input.empty();
        this.ttl = Input.empty();
        this.type = Input.empty();
        this.weightedRoutingPolicies = Input.empty();
        this.zoneId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecordState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<RecordAliasGetArgs>> aliases;
        private @Nullable Input<Boolean> allowOverwrite;
        private @Nullable Input<List<RecordFailoverRoutingPolicyGetArgs>> failoverRoutingPolicies;
        private @Nullable Input<String> fqdn;
        private @Nullable Input<List<RecordGeolocationRoutingPolicyGetArgs>> geolocationRoutingPolicies;
        private @Nullable Input<String> healthCheckId;
        private @Nullable Input<List<RecordLatencyRoutingPolicyGetArgs>> latencyRoutingPolicies;
        private @Nullable Input<Boolean> multivalueAnswerRoutingPolicy;
        private @Nullable Input<String> name;
        private @Nullable Input<List<String>> records;
        private @Nullable Input<String> setIdentifier;
        private @Nullable Input<Integer> ttl;
        private @Nullable Input<Either<String,RecordType>> type;
        private @Nullable Input<List<RecordWeightedRoutingPolicyGetArgs>> weightedRoutingPolicies;
        private @Nullable Input<String> zoneId;

        public Builder() {
    	      // Empty
        }

        public Builder(RecordState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliases = defaults.aliases;
    	      this.allowOverwrite = defaults.allowOverwrite;
    	      this.failoverRoutingPolicies = defaults.failoverRoutingPolicies;
    	      this.fqdn = defaults.fqdn;
    	      this.geolocationRoutingPolicies = defaults.geolocationRoutingPolicies;
    	      this.healthCheckId = defaults.healthCheckId;
    	      this.latencyRoutingPolicies = defaults.latencyRoutingPolicies;
    	      this.multivalueAnswerRoutingPolicy = defaults.multivalueAnswerRoutingPolicy;
    	      this.name = defaults.name;
    	      this.records = defaults.records;
    	      this.setIdentifier = defaults.setIdentifier;
    	      this.ttl = defaults.ttl;
    	      this.type = defaults.type;
    	      this.weightedRoutingPolicies = defaults.weightedRoutingPolicies;
    	      this.zoneId = defaults.zoneId;
        }

        public Builder setAliases(@Nullable Input<List<RecordAliasGetArgs>> aliases) {
            this.aliases = aliases;
            return this;
        }

        public Builder setAliases(@Nullable List<RecordAliasGetArgs> aliases) {
            this.aliases = Input.ofNullable(aliases);
            return this;
        }

        public Builder setAllowOverwrite(@Nullable Input<Boolean> allowOverwrite) {
            this.allowOverwrite = allowOverwrite;
            return this;
        }

        public Builder setAllowOverwrite(@Nullable Boolean allowOverwrite) {
            this.allowOverwrite = Input.ofNullable(allowOverwrite);
            return this;
        }

        public Builder setFailoverRoutingPolicies(@Nullable Input<List<RecordFailoverRoutingPolicyGetArgs>> failoverRoutingPolicies) {
            this.failoverRoutingPolicies = failoverRoutingPolicies;
            return this;
        }

        public Builder setFailoverRoutingPolicies(@Nullable List<RecordFailoverRoutingPolicyGetArgs> failoverRoutingPolicies) {
            this.failoverRoutingPolicies = Input.ofNullable(failoverRoutingPolicies);
            return this;
        }

        public Builder setFqdn(@Nullable Input<String> fqdn) {
            this.fqdn = fqdn;
            return this;
        }

        public Builder setFqdn(@Nullable String fqdn) {
            this.fqdn = Input.ofNullable(fqdn);
            return this;
        }

        public Builder setGeolocationRoutingPolicies(@Nullable Input<List<RecordGeolocationRoutingPolicyGetArgs>> geolocationRoutingPolicies) {
            this.geolocationRoutingPolicies = geolocationRoutingPolicies;
            return this;
        }

        public Builder setGeolocationRoutingPolicies(@Nullable List<RecordGeolocationRoutingPolicyGetArgs> geolocationRoutingPolicies) {
            this.geolocationRoutingPolicies = Input.ofNullable(geolocationRoutingPolicies);
            return this;
        }

        public Builder setHealthCheckId(@Nullable Input<String> healthCheckId) {
            this.healthCheckId = healthCheckId;
            return this;
        }

        public Builder setHealthCheckId(@Nullable String healthCheckId) {
            this.healthCheckId = Input.ofNullable(healthCheckId);
            return this;
        }

        public Builder setLatencyRoutingPolicies(@Nullable Input<List<RecordLatencyRoutingPolicyGetArgs>> latencyRoutingPolicies) {
            this.latencyRoutingPolicies = latencyRoutingPolicies;
            return this;
        }

        public Builder setLatencyRoutingPolicies(@Nullable List<RecordLatencyRoutingPolicyGetArgs> latencyRoutingPolicies) {
            this.latencyRoutingPolicies = Input.ofNullable(latencyRoutingPolicies);
            return this;
        }

        public Builder setMultivalueAnswerRoutingPolicy(@Nullable Input<Boolean> multivalueAnswerRoutingPolicy) {
            this.multivalueAnswerRoutingPolicy = multivalueAnswerRoutingPolicy;
            return this;
        }

        public Builder setMultivalueAnswerRoutingPolicy(@Nullable Boolean multivalueAnswerRoutingPolicy) {
            this.multivalueAnswerRoutingPolicy = Input.ofNullable(multivalueAnswerRoutingPolicy);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setRecords(@Nullable Input<List<String>> records) {
            this.records = records;
            return this;
        }

        public Builder setRecords(@Nullable List<String> records) {
            this.records = Input.ofNullable(records);
            return this;
        }

        public Builder setSetIdentifier(@Nullable Input<String> setIdentifier) {
            this.setIdentifier = setIdentifier;
            return this;
        }

        public Builder setSetIdentifier(@Nullable String setIdentifier) {
            this.setIdentifier = Input.ofNullable(setIdentifier);
            return this;
        }

        public Builder setTtl(@Nullable Input<Integer> ttl) {
            this.ttl = ttl;
            return this;
        }

        public Builder setTtl(@Nullable Integer ttl) {
            this.ttl = Input.ofNullable(ttl);
            return this;
        }

        public Builder setType(@Nullable Input<Either<String,RecordType>> type) {
            this.type = type;
            return this;
        }

        public Builder setType(@Nullable Either<String,RecordType> type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder setWeightedRoutingPolicies(@Nullable Input<List<RecordWeightedRoutingPolicyGetArgs>> weightedRoutingPolicies) {
            this.weightedRoutingPolicies = weightedRoutingPolicies;
            return this;
        }

        public Builder setWeightedRoutingPolicies(@Nullable List<RecordWeightedRoutingPolicyGetArgs> weightedRoutingPolicies) {
            this.weightedRoutingPolicies = Input.ofNullable(weightedRoutingPolicies);
            return this;
        }

        public Builder setZoneId(@Nullable Input<String> zoneId) {
            this.zoneId = zoneId;
            return this;
        }

        public Builder setZoneId(@Nullable String zoneId) {
            this.zoneId = Input.ofNullable(zoneId);
            return this;
        }
        public RecordState build() {
            return new RecordState(aliases, allowOverwrite, failoverRoutingPolicies, fqdn, geolocationRoutingPolicies, healthCheckId, latencyRoutingPolicies, multivalueAnswerRoutingPolicy, name, records, setIdentifier, ttl, type, weightedRoutingPolicies, zoneId);
        }
    }
}
