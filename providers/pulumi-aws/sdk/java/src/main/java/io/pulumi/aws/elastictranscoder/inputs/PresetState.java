// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elastictranscoder.inputs;

import io.pulumi.aws.elastictranscoder.inputs.PresetAudioCodecOptionsGetArgs;
import io.pulumi.aws.elastictranscoder.inputs.PresetAudioGetArgs;
import io.pulumi.aws.elastictranscoder.inputs.PresetThumbnailsGetArgs;
import io.pulumi.aws.elastictranscoder.inputs.PresetVideoGetArgs;
import io.pulumi.aws.elastictranscoder.inputs.PresetVideoWatermarkGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PresetState extends io.pulumi.resources.ResourceArgs {

    public static final PresetState Empty = new PresetState();

    /**
     * Amazon Resource Name (ARN) of the Elastic Transcoder Preset.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * Audio parameters object (documented below).
     * 
     */
    @InputImport(name="audio")
      private final @Nullable Input<PresetAudioGetArgs> audio;

    public Input<PresetAudioGetArgs> getAudio() {
        return this.audio == null ? Input.empty() : this.audio;
    }

    /**
     * Codec options for the audio parameters (documented below)
     * 
     */
    @InputImport(name="audioCodecOptions")
      private final @Nullable Input<PresetAudioCodecOptionsGetArgs> audioCodecOptions;

    public Input<PresetAudioCodecOptionsGetArgs> getAudioCodecOptions() {
        return this.audioCodecOptions == null ? Input.empty() : this.audioCodecOptions;
    }

    /**
     * The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
     * 
     */
    @InputImport(name="container")
      private final @Nullable Input<String> container;

    public Input<String> getContainer() {
        return this.container == null ? Input.empty() : this.container;
    }

    /**
     * A description of the preset (maximum 255 characters)
     * 
     */
    @InputImport(name="description")
      private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * The name of the preset. (maximum 40 characters)
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * Thumbnail parameters object (documented below)
     * 
     */
    @InputImport(name="thumbnails")
      private final @Nullable Input<PresetThumbnailsGetArgs> thumbnails;

    public Input<PresetThumbnailsGetArgs> getThumbnails() {
        return this.thumbnails == null ? Input.empty() : this.thumbnails;
    }

    @InputImport(name="type")
      private final @Nullable Input<String> type;

    public Input<String> getType() {
        return this.type == null ? Input.empty() : this.type;
    }

    /**
     * Video parameters object (documented below)
     * 
     */
    @InputImport(name="video")
      private final @Nullable Input<PresetVideoGetArgs> video;

    public Input<PresetVideoGetArgs> getVideo() {
        return this.video == null ? Input.empty() : this.video;
    }

    /**
     * Codec options for the video parameters
     * 
     */
    @InputImport(name="videoCodecOptions")
      private final @Nullable Input<Map<String,String>> videoCodecOptions;

    public Input<Map<String,String>> getVideoCodecOptions() {
        return this.videoCodecOptions == null ? Input.empty() : this.videoCodecOptions;
    }

    /**
     * Watermark parameters for the video parameters (documented below)
     * 
     */
    @InputImport(name="videoWatermarks")
      private final @Nullable Input<List<PresetVideoWatermarkGetArgs>> videoWatermarks;

    public Input<List<PresetVideoWatermarkGetArgs>> getVideoWatermarks() {
        return this.videoWatermarks == null ? Input.empty() : this.videoWatermarks;
    }

    public PresetState(
        @Nullable Input<String> arn,
        @Nullable Input<PresetAudioGetArgs> audio,
        @Nullable Input<PresetAudioCodecOptionsGetArgs> audioCodecOptions,
        @Nullable Input<String> container,
        @Nullable Input<String> description,
        @Nullable Input<String> name,
        @Nullable Input<PresetThumbnailsGetArgs> thumbnails,
        @Nullable Input<String> type,
        @Nullable Input<PresetVideoGetArgs> video,
        @Nullable Input<Map<String,String>> videoCodecOptions,
        @Nullable Input<List<PresetVideoWatermarkGetArgs>> videoWatermarks) {
        this.arn = arn;
        this.audio = audio;
        this.audioCodecOptions = audioCodecOptions;
        this.container = container;
        this.description = description;
        this.name = name;
        this.thumbnails = thumbnails;
        this.type = type;
        this.video = video;
        this.videoCodecOptions = videoCodecOptions;
        this.videoWatermarks = videoWatermarks;
    }

    private PresetState() {
        this.arn = Input.empty();
        this.audio = Input.empty();
        this.audioCodecOptions = Input.empty();
        this.container = Input.empty();
        this.description = Input.empty();
        this.name = Input.empty();
        this.thumbnails = Input.empty();
        this.type = Input.empty();
        this.video = Input.empty();
        this.videoCodecOptions = Input.empty();
        this.videoWatermarks = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PresetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<PresetAudioGetArgs> audio;
        private @Nullable Input<PresetAudioCodecOptionsGetArgs> audioCodecOptions;
        private @Nullable Input<String> container;
        private @Nullable Input<String> description;
        private @Nullable Input<String> name;
        private @Nullable Input<PresetThumbnailsGetArgs> thumbnails;
        private @Nullable Input<String> type;
        private @Nullable Input<PresetVideoGetArgs> video;
        private @Nullable Input<Map<String,String>> videoCodecOptions;
        private @Nullable Input<List<PresetVideoWatermarkGetArgs>> videoWatermarks;

        public Builder() {
    	      // Empty
        }

        public Builder(PresetState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.audio = defaults.audio;
    	      this.audioCodecOptions = defaults.audioCodecOptions;
    	      this.container = defaults.container;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.thumbnails = defaults.thumbnails;
    	      this.type = defaults.type;
    	      this.video = defaults.video;
    	      this.videoCodecOptions = defaults.videoCodecOptions;
    	      this.videoWatermarks = defaults.videoWatermarks;
        }

        public Builder arn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder audio(@Nullable Input<PresetAudioGetArgs> audio) {
            this.audio = audio;
            return this;
        }

        public Builder audio(@Nullable PresetAudioGetArgs audio) {
            this.audio = Input.ofNullable(audio);
            return this;
        }

        public Builder audioCodecOptions(@Nullable Input<PresetAudioCodecOptionsGetArgs> audioCodecOptions) {
            this.audioCodecOptions = audioCodecOptions;
            return this;
        }

        public Builder audioCodecOptions(@Nullable PresetAudioCodecOptionsGetArgs audioCodecOptions) {
            this.audioCodecOptions = Input.ofNullable(audioCodecOptions);
            return this;
        }

        public Builder container(@Nullable Input<String> container) {
            this.container = container;
            return this;
        }

        public Builder container(@Nullable String container) {
            this.container = Input.ofNullable(container);
            return this;
        }

        public Builder description(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder thumbnails(@Nullable Input<PresetThumbnailsGetArgs> thumbnails) {
            this.thumbnails = thumbnails;
            return this;
        }

        public Builder thumbnails(@Nullable PresetThumbnailsGetArgs thumbnails) {
            this.thumbnails = Input.ofNullable(thumbnails);
            return this;
        }

        public Builder type(@Nullable Input<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Input.ofNullable(type);
            return this;
        }

        public Builder video(@Nullable Input<PresetVideoGetArgs> video) {
            this.video = video;
            return this;
        }

        public Builder video(@Nullable PresetVideoGetArgs video) {
            this.video = Input.ofNullable(video);
            return this;
        }

        public Builder videoCodecOptions(@Nullable Input<Map<String,String>> videoCodecOptions) {
            this.videoCodecOptions = videoCodecOptions;
            return this;
        }

        public Builder videoCodecOptions(@Nullable Map<String,String> videoCodecOptions) {
            this.videoCodecOptions = Input.ofNullable(videoCodecOptions);
            return this;
        }

        public Builder videoWatermarks(@Nullable Input<List<PresetVideoWatermarkGetArgs>> videoWatermarks) {
            this.videoWatermarks = videoWatermarks;
            return this;
        }

        public Builder videoWatermarks(@Nullable List<PresetVideoWatermarkGetArgs> videoWatermarks) {
            this.videoWatermarks = Input.ofNullable(videoWatermarks);
            return this;
        }
        public PresetState build() {
            return new PresetState(arn, audio, audioCodecOptions, container, description, name, thumbnails, type, video, videoCodecOptions, videoWatermarks);
        }
    }
}
