// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2;

import io.pulumi.aws.ec2.inputs.SpotInstanceRequestCapacityReservationSpecificationArgs;
import io.pulumi.aws.ec2.inputs.SpotInstanceRequestCreditSpecificationArgs;
import io.pulumi.aws.ec2.inputs.SpotInstanceRequestEbsBlockDeviceArgs;
import io.pulumi.aws.ec2.inputs.SpotInstanceRequestEnclaveOptionsArgs;
import io.pulumi.aws.ec2.inputs.SpotInstanceRequestEphemeralBlockDeviceArgs;
import io.pulumi.aws.ec2.inputs.SpotInstanceRequestLaunchTemplateArgs;
import io.pulumi.aws.ec2.inputs.SpotInstanceRequestMetadataOptionsArgs;
import io.pulumi.aws.ec2.inputs.SpotInstanceRequestNetworkInterfaceArgs;
import io.pulumi.aws.ec2.inputs.SpotInstanceRequestRootBlockDeviceArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SpotInstanceRequestArgs extends io.pulumi.resources.ResourceArgs {

    public static final SpotInstanceRequestArgs Empty = new SpotInstanceRequestArgs();

    /**
     * AMI to use for the instance. Required unless `launch_template` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
     * 
     */
    @Import(name="ami")
      private final @Nullable Output<String> ami;

    public Output<String> getAmi() {
        return this.ami == null ? Codegen.empty() : this.ami;
    }

    /**
     * Whether to associate a public IP address with an instance in a VPC.
     * 
     */
    @Import(name="associatePublicIpAddress")
      private final @Nullable Output<Boolean> associatePublicIpAddress;

    public Output<Boolean> getAssociatePublicIpAddress() {
        return this.associatePublicIpAddress == null ? Codegen.empty() : this.associatePublicIpAddress;
    }

    /**
     * AZ to start the instance in.
     * 
     */
    @Import(name="availabilityZone")
      private final @Nullable Output<String> availabilityZone;

    public Output<String> getAvailabilityZone() {
        return this.availabilityZone == null ? Codegen.empty() : this.availabilityZone;
    }

    /**
     * The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
     * The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
     * Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
     * 
     */
    @Import(name="blockDurationMinutes")
      private final @Nullable Output<Integer> blockDurationMinutes;

    public Output<Integer> getBlockDurationMinutes() {
        return this.blockDurationMinutes == null ? Codegen.empty() : this.blockDurationMinutes;
    }

    /**
     * Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
     * 
     */
    @Import(name="capacityReservationSpecification")
      private final @Nullable Output<SpotInstanceRequestCapacityReservationSpecificationArgs> capacityReservationSpecification;

    public Output<SpotInstanceRequestCapacityReservationSpecificationArgs> getCapacityReservationSpecification() {
        return this.capacityReservationSpecification == null ? Codegen.empty() : this.capacityReservationSpecification;
    }

    /**
     * Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
     * 
     */
    @Import(name="cpuCoreCount")
      private final @Nullable Output<Integer> cpuCoreCount;

    public Output<Integer> getCpuCoreCount() {
        return this.cpuCoreCount == null ? Codegen.empty() : this.cpuCoreCount;
    }

    /**
     * If set to to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
     * 
     */
    @Import(name="cpuThreadsPerCore")
      private final @Nullable Output<Integer> cpuThreadsPerCore;

    public Output<Integer> getCpuThreadsPerCore() {
        return this.cpuThreadsPerCore == null ? Codegen.empty() : this.cpuThreadsPerCore;
    }

    /**
     * Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. the provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
     * 
     */
    @Import(name="creditSpecification")
      private final @Nullable Output<SpotInstanceRequestCreditSpecificationArgs> creditSpecification;

    public Output<SpotInstanceRequestCreditSpecificationArgs> getCreditSpecification() {
        return this.creditSpecification == null ? Codegen.empty() : this.creditSpecification;
    }

    /**
     * If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
     * 
     */
    @Import(name="disableApiTermination")
      private final @Nullable Output<Boolean> disableApiTermination;

    public Output<Boolean> getDisableApiTermination() {
        return this.disableApiTermination == null ? Codegen.empty() : this.disableApiTermination;
    }

    /**
     * One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
     * 
     */
    @Import(name="ebsBlockDevices")
      private final @Nullable Output<List<SpotInstanceRequestEbsBlockDeviceArgs>> ebsBlockDevices;

    public Output<List<SpotInstanceRequestEbsBlockDeviceArgs>> getEbsBlockDevices() {
        return this.ebsBlockDevices == null ? Codegen.empty() : this.ebsBlockDevices;
    }

    /**
     * If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
     * 
     */
    @Import(name="ebsOptimized")
      private final @Nullable Output<Boolean> ebsOptimized;

    public Output<Boolean> getEbsOptimized() {
        return this.ebsOptimized == null ? Codegen.empty() : this.ebsOptimized;
    }

    /**
     * Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
     * 
     */
    @Import(name="enclaveOptions")
      private final @Nullable Output<SpotInstanceRequestEnclaveOptionsArgs> enclaveOptions;

    public Output<SpotInstanceRequestEnclaveOptionsArgs> getEnclaveOptions() {
        return this.enclaveOptions == null ? Codegen.empty() : this.enclaveOptions;
    }

    /**
     * One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
     * 
     */
    @Import(name="ephemeralBlockDevices")
      private final @Nullable Output<List<SpotInstanceRequestEphemeralBlockDeviceArgs>> ephemeralBlockDevices;

    public Output<List<SpotInstanceRequestEphemeralBlockDeviceArgs>> getEphemeralBlockDevices() {
        return this.ephemeralBlockDevices == null ? Codegen.empty() : this.ephemeralBlockDevices;
    }

    /**
     * If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `password_data` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
     * 
     */
    @Import(name="getPasswordData")
      private final @Nullable Output<Boolean> getPasswordData;

    public Output<Boolean> getGetPasswordData() {
        return this.getPasswordData == null ? Codegen.empty() : this.getPasswordData;
    }

    /**
     * If true, the launched EC2 instance will support hibernation.
     * 
     */
    @Import(name="hibernation")
      private final @Nullable Output<Boolean> hibernation;

    public Output<Boolean> getHibernation() {
        return this.hibernation == null ? Codegen.empty() : this.hibernation;
    }

    /**
     * ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
     * 
     */
    @Import(name="hostId")
      private final @Nullable Output<String> hostId;

    public Output<String> getHostId() {
        return this.hostId == null ? Codegen.empty() : this.hostId;
    }

    /**
     * IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
     * 
     */
    @Import(name="iamInstanceProfile")
      private final @Nullable Output<String> iamInstanceProfile;

    public Output<String> getIamInstanceProfile() {
        return this.iamInstanceProfile == null ? Codegen.empty() : this.iamInstanceProfile;
    }

    /**
     * Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
     * 
     */
    @Import(name="instanceInitiatedShutdownBehavior")
      private final @Nullable Output<String> instanceInitiatedShutdownBehavior;

    public Output<String> getInstanceInitiatedShutdownBehavior() {
        return this.instanceInitiatedShutdownBehavior == null ? Codegen.empty() : this.instanceInitiatedShutdownBehavior;
    }

    /**
     * Indicates Spot instance behavior when it is interrupted. Valid values are `terminate`, `stop`, or `hibernate`. Default value is `terminate`.
     * 
     */
    @Import(name="instanceInterruptionBehavior")
      private final @Nullable Output<String> instanceInterruptionBehavior;

    public Output<String> getInstanceInterruptionBehavior() {
        return this.instanceInterruptionBehavior == null ? Codegen.empty() : this.instanceInterruptionBehavior;
    }

    /**
     * Indicates Spot instance behavior when it is interrupted. Valid values are `terminate`, `stop`, or `hibernate`. Default value is `terminate`. Use the argument `instance_interruption_behavior` instead.
     * 
     * @Deprecated
     * Use the parameter "instance_interruption_behavior" instead.
     * 
     */
    @Deprecated /* Use the parameter ""instance_interruption_behavior"" instead. */
    @Import(name="instanceInterruptionBehaviour")
      private final @Nullable Output<String> instanceInterruptionBehaviour;

    @Deprecated /* Use the parameter ""instance_interruption_behavior"" instead. */
    public Output<String> getInstanceInterruptionBehaviour() {
        return this.instanceInterruptionBehaviour == null ? Codegen.empty() : this.instanceInterruptionBehaviour;
    }

    /**
     * The instance type to use for the instance. Updates to this field will trigger a stop/start of the EC2 instance.
     * 
     */
    @Import(name="instanceType")
      private final @Nullable Output<String> instanceType;

    public Output<String> getInstanceType() {
        return this.instanceType == null ? Codegen.empty() : this.instanceType;
    }

    /**
     * A number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
     * 
     */
    @Import(name="ipv6AddressCount")
      private final @Nullable Output<Integer> ipv6AddressCount;

    public Output<Integer> getIpv6AddressCount() {
        return this.ipv6AddressCount == null ? Codegen.empty() : this.ipv6AddressCount;
    }

    /**
     * Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
     * 
     */
    @Import(name="ipv6Addresses")
      private final @Nullable Output<List<String>> ipv6Addresses;

    public Output<List<String>> getIpv6Addresses() {
        return this.ipv6Addresses == null ? Codegen.empty() : this.ipv6Addresses;
    }

    /**
     * Key name of the Key Pair to use for the instance; which can be managed using the `aws.ec2.KeyPair` resource.
     * 
     */
    @Import(name="keyName")
      private final @Nullable Output<String> keyName;

    public Output<String> getKeyName() {
        return this.keyName == null ? Codegen.empty() : this.keyName;
    }

    /**
     * A launch group is a group of spot instances that launch together and terminate together.
     * If left empty instances are launched and terminated individually.
     * 
     */
    @Import(name="launchGroup")
      private final @Nullable Output<String> launchGroup;

    public Output<String> getLaunchGroup() {
        return this.launchGroup == null ? Codegen.empty() : this.launchGroup;
    }

    /**
     * Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template.
     * See Launch Template Specification below for more details.
     * 
     */
    @Import(name="launchTemplate")
      private final @Nullable Output<SpotInstanceRequestLaunchTemplateArgs> launchTemplate;

    public Output<SpotInstanceRequestLaunchTemplateArgs> getLaunchTemplate() {
        return this.launchTemplate == null ? Codegen.empty() : this.launchTemplate;
    }

    /**
     * Customize the metadata options of the instance. See Metadata Options below for more details.
     * 
     */
    @Import(name="metadataOptions")
      private final @Nullable Output<SpotInstanceRequestMetadataOptionsArgs> metadataOptions;

    public Output<SpotInstanceRequestMetadataOptionsArgs> getMetadataOptions() {
        return this.metadataOptions == null ? Codegen.empty() : this.metadataOptions;
    }

    /**
     * If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
     * 
     */
    @Import(name="monitoring")
      private final @Nullable Output<Boolean> monitoring;

    public Output<Boolean> getMonitoring() {
        return this.monitoring == null ? Codegen.empty() : this.monitoring;
    }

    /**
     * Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
     * 
     */
    @Import(name="networkInterfaces")
      private final @Nullable Output<List<SpotInstanceRequestNetworkInterfaceArgs>> networkInterfaces;

    public Output<List<SpotInstanceRequestNetworkInterfaceArgs>> getNetworkInterfaces() {
        return this.networkInterfaces == null ? Codegen.empty() : this.networkInterfaces;
    }

    /**
     * Placement Group to start the instance in.
     * 
     */
    @Import(name="placementGroup")
      private final @Nullable Output<String> placementGroup;

    public Output<String> getPlacementGroup() {
        return this.placementGroup == null ? Codegen.empty() : this.placementGroup;
    }

    /**
     * The number of the partition the instance is in. Valid only if the `aws.ec2.PlacementGroup` resource's `strategy` argument is set to `"partition"`.
     * 
     */
    @Import(name="placementPartitionNumber")
      private final @Nullable Output<Integer> placementPartitionNumber;

    public Output<Integer> getPlacementPartitionNumber() {
        return this.placementPartitionNumber == null ? Codegen.empty() : this.placementPartitionNumber;
    }

    /**
     * Private IP address to associate with the instance in a VPC.
     * 
     */
    @Import(name="privateIp")
      private final @Nullable Output<String> privateIp;

    public Output<String> getPrivateIp() {
        return this.privateIp == null ? Codegen.empty() : this.privateIp;
    }

    /**
     * Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
     * 
     */
    @Import(name="rootBlockDevice")
      private final @Nullable Output<SpotInstanceRequestRootBlockDeviceArgs> rootBlockDevice;

    public Output<SpotInstanceRequestRootBlockDeviceArgs> getRootBlockDevice() {
        return this.rootBlockDevice == null ? Codegen.empty() : this.rootBlockDevice;
    }

    /**
     * A list of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `network_interface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
     * 
     */
    @Import(name="secondaryPrivateIps")
      private final @Nullable Output<List<String>> secondaryPrivateIps;

    public Output<List<String>> getSecondaryPrivateIps() {
        return this.secondaryPrivateIps == null ? Codegen.empty() : this.secondaryPrivateIps;
    }

    /**
     * A list of security group names to associate with.
     * 
     */
    @Import(name="securityGroups")
      private final @Nullable Output<List<String>> securityGroups;

    public Output<List<String>> getSecurityGroups() {
        return this.securityGroups == null ? Codegen.empty() : this.securityGroups;
    }

    /**
     * Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
     * 
     */
    @Import(name="sourceDestCheck")
      private final @Nullable Output<Boolean> sourceDestCheck;

    public Output<Boolean> getSourceDestCheck() {
        return this.sourceDestCheck == null ? Codegen.empty() : this.sourceDestCheck;
    }

    /**
     * The maximum price to request on the spot market.
     * 
     */
    @Import(name="spotPrice")
      private final @Nullable Output<String> spotPrice;

    public Output<String> getSpotPrice() {
        return this.spotPrice == null ? Codegen.empty() : this.spotPrice;
    }

    /**
     * If set to `one-time`, after
     * the instance is terminated, the spot request will be closed.
     * 
     */
    @Import(name="spotType")
      private final @Nullable Output<String> spotType;

    public Output<String> getSpotType() {
        return this.spotType == null ? Codegen.empty() : this.spotType;
    }

    /**
     * VPC Subnet ID to launch in.
     * 
     */
    @Import(name="subnetId")
      private final @Nullable Output<String> subnetId;

    public Output<String> getSubnetId() {
        return this.subnetId == null ? Codegen.empty() : this.subnetId;
    }

    /**
     * A map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the import-instance command.
     * 
     */
    @Import(name="tenancy")
      private final @Nullable Output<String> tenancy;

    public Output<String> getTenancy() {
        return this.tenancy == null ? Codegen.empty() : this.tenancy;
    }

    /**
     * User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `user_data_base64` instead.
     * 
     */
    @Import(name="userData")
      private final @Nullable Output<String> userData;

    public Output<String> getUserData() {
        return this.userData == null ? Codegen.empty() : this.userData;
    }

    /**
     * Can be used instead of `user_data` to pass base64-encoded binary data directly. Use this instead of `user_data` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
     * 
     */
    @Import(name="userDataBase64")
      private final @Nullable Output<String> userDataBase64;

    public Output<String> getUserDataBase64() {
        return this.userDataBase64 == null ? Codegen.empty() : this.userDataBase64;
    }

    /**
     * The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
     * 
     */
    @Import(name="validFrom")
      private final @Nullable Output<String> validFrom;

    public Output<String> getValidFrom() {
        return this.validFrom == null ? Codegen.empty() : this.validFrom;
    }

    /**
     * The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. The default end date is 7 days from the current date.
     * 
     */
    @Import(name="validUntil")
      private final @Nullable Output<String> validUntil;

    public Output<String> getValidUntil() {
        return this.validUntil == null ? Codegen.empty() : this.validUntil;
    }

    /**
     * A map of tags to assign, at instance-creation time, to root and EBS volumes.
     * 
     */
    @Import(name="volumeTags")
      private final @Nullable Output<Map<String,String>> volumeTags;

    public Output<Map<String,String>> getVolumeTags() {
        return this.volumeTags == null ? Codegen.empty() : this.volumeTags;
    }

    /**
     * A list of security group IDs to associate with.
     * 
     */
    @Import(name="vpcSecurityGroupIds")
      private final @Nullable Output<List<String>> vpcSecurityGroupIds;

    public Output<List<String>> getVpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds == null ? Codegen.empty() : this.vpcSecurityGroupIds;
    }

    /**
     * If set, this provider will
     * wait for the Spot Request to be fulfilled, and will throw an error if the
     * timeout of 10m is reached.
     * 
     */
    @Import(name="waitForFulfillment")
      private final @Nullable Output<Boolean> waitForFulfillment;

    public Output<Boolean> getWaitForFulfillment() {
        return this.waitForFulfillment == null ? Codegen.empty() : this.waitForFulfillment;
    }

    public SpotInstanceRequestArgs(
        @Nullable Output<String> ami,
        @Nullable Output<Boolean> associatePublicIpAddress,
        @Nullable Output<String> availabilityZone,
        @Nullable Output<Integer> blockDurationMinutes,
        @Nullable Output<SpotInstanceRequestCapacityReservationSpecificationArgs> capacityReservationSpecification,
        @Nullable Output<Integer> cpuCoreCount,
        @Nullable Output<Integer> cpuThreadsPerCore,
        @Nullable Output<SpotInstanceRequestCreditSpecificationArgs> creditSpecification,
        @Nullable Output<Boolean> disableApiTermination,
        @Nullable Output<List<SpotInstanceRequestEbsBlockDeviceArgs>> ebsBlockDevices,
        @Nullable Output<Boolean> ebsOptimized,
        @Nullable Output<SpotInstanceRequestEnclaveOptionsArgs> enclaveOptions,
        @Nullable Output<List<SpotInstanceRequestEphemeralBlockDeviceArgs>> ephemeralBlockDevices,
        @Nullable Output<Boolean> getPasswordData,
        @Nullable Output<Boolean> hibernation,
        @Nullable Output<String> hostId,
        @Nullable Output<String> iamInstanceProfile,
        @Nullable Output<String> instanceInitiatedShutdownBehavior,
        @Nullable Output<String> instanceInterruptionBehavior,
        @Nullable Output<String> instanceInterruptionBehaviour,
        @Nullable Output<String> instanceType,
        @Nullable Output<Integer> ipv6AddressCount,
        @Nullable Output<List<String>> ipv6Addresses,
        @Nullable Output<String> keyName,
        @Nullable Output<String> launchGroup,
        @Nullable Output<SpotInstanceRequestLaunchTemplateArgs> launchTemplate,
        @Nullable Output<SpotInstanceRequestMetadataOptionsArgs> metadataOptions,
        @Nullable Output<Boolean> monitoring,
        @Nullable Output<List<SpotInstanceRequestNetworkInterfaceArgs>> networkInterfaces,
        @Nullable Output<String> placementGroup,
        @Nullable Output<Integer> placementPartitionNumber,
        @Nullable Output<String> privateIp,
        @Nullable Output<SpotInstanceRequestRootBlockDeviceArgs> rootBlockDevice,
        @Nullable Output<List<String>> secondaryPrivateIps,
        @Nullable Output<List<String>> securityGroups,
        @Nullable Output<Boolean> sourceDestCheck,
        @Nullable Output<String> spotPrice,
        @Nullable Output<String> spotType,
        @Nullable Output<String> subnetId,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> tenancy,
        @Nullable Output<String> userData,
        @Nullable Output<String> userDataBase64,
        @Nullable Output<String> validFrom,
        @Nullable Output<String> validUntil,
        @Nullable Output<Map<String,String>> volumeTags,
        @Nullable Output<List<String>> vpcSecurityGroupIds,
        @Nullable Output<Boolean> waitForFulfillment) {
        this.ami = ami;
        this.associatePublicIpAddress = associatePublicIpAddress;
        this.availabilityZone = availabilityZone;
        this.blockDurationMinutes = blockDurationMinutes;
        this.capacityReservationSpecification = capacityReservationSpecification;
        this.cpuCoreCount = cpuCoreCount;
        this.cpuThreadsPerCore = cpuThreadsPerCore;
        this.creditSpecification = creditSpecification;
        this.disableApiTermination = disableApiTermination;
        this.ebsBlockDevices = ebsBlockDevices;
        this.ebsOptimized = ebsOptimized;
        this.enclaveOptions = enclaveOptions;
        this.ephemeralBlockDevices = ephemeralBlockDevices;
        this.getPasswordData = getPasswordData;
        this.hibernation = hibernation;
        this.hostId = hostId;
        this.iamInstanceProfile = iamInstanceProfile;
        this.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior;
        this.instanceInterruptionBehavior = instanceInterruptionBehavior;
        this.instanceInterruptionBehaviour = instanceInterruptionBehaviour;
        this.instanceType = instanceType;
        this.ipv6AddressCount = ipv6AddressCount;
        this.ipv6Addresses = ipv6Addresses;
        this.keyName = keyName;
        this.launchGroup = launchGroup;
        this.launchTemplate = launchTemplate;
        this.metadataOptions = metadataOptions;
        this.monitoring = monitoring;
        this.networkInterfaces = networkInterfaces;
        this.placementGroup = placementGroup;
        this.placementPartitionNumber = placementPartitionNumber;
        this.privateIp = privateIp;
        this.rootBlockDevice = rootBlockDevice;
        this.secondaryPrivateIps = secondaryPrivateIps;
        this.securityGroups = securityGroups;
        this.sourceDestCheck = sourceDestCheck;
        this.spotPrice = spotPrice;
        this.spotType = spotType;
        this.subnetId = subnetId;
        this.tags = tags;
        this.tenancy = tenancy;
        this.userData = userData;
        this.userDataBase64 = userDataBase64;
        this.validFrom = validFrom;
        this.validUntil = validUntil;
        this.volumeTags = volumeTags;
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
        this.waitForFulfillment = waitForFulfillment;
    }

    private SpotInstanceRequestArgs() {
        this.ami = Codegen.empty();
        this.associatePublicIpAddress = Codegen.empty();
        this.availabilityZone = Codegen.empty();
        this.blockDurationMinutes = Codegen.empty();
        this.capacityReservationSpecification = Codegen.empty();
        this.cpuCoreCount = Codegen.empty();
        this.cpuThreadsPerCore = Codegen.empty();
        this.creditSpecification = Codegen.empty();
        this.disableApiTermination = Codegen.empty();
        this.ebsBlockDevices = Codegen.empty();
        this.ebsOptimized = Codegen.empty();
        this.enclaveOptions = Codegen.empty();
        this.ephemeralBlockDevices = Codegen.empty();
        this.getPasswordData = Codegen.empty();
        this.hibernation = Codegen.empty();
        this.hostId = Codegen.empty();
        this.iamInstanceProfile = Codegen.empty();
        this.instanceInitiatedShutdownBehavior = Codegen.empty();
        this.instanceInterruptionBehavior = Codegen.empty();
        this.instanceInterruptionBehaviour = Codegen.empty();
        this.instanceType = Codegen.empty();
        this.ipv6AddressCount = Codegen.empty();
        this.ipv6Addresses = Codegen.empty();
        this.keyName = Codegen.empty();
        this.launchGroup = Codegen.empty();
        this.launchTemplate = Codegen.empty();
        this.metadataOptions = Codegen.empty();
        this.monitoring = Codegen.empty();
        this.networkInterfaces = Codegen.empty();
        this.placementGroup = Codegen.empty();
        this.placementPartitionNumber = Codegen.empty();
        this.privateIp = Codegen.empty();
        this.rootBlockDevice = Codegen.empty();
        this.secondaryPrivateIps = Codegen.empty();
        this.securityGroups = Codegen.empty();
        this.sourceDestCheck = Codegen.empty();
        this.spotPrice = Codegen.empty();
        this.spotType = Codegen.empty();
        this.subnetId = Codegen.empty();
        this.tags = Codegen.empty();
        this.tenancy = Codegen.empty();
        this.userData = Codegen.empty();
        this.userDataBase64 = Codegen.empty();
        this.validFrom = Codegen.empty();
        this.validUntil = Codegen.empty();
        this.volumeTags = Codegen.empty();
        this.vpcSecurityGroupIds = Codegen.empty();
        this.waitForFulfillment = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpotInstanceRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> ami;
        private @Nullable Output<Boolean> associatePublicIpAddress;
        private @Nullable Output<String> availabilityZone;
        private @Nullable Output<Integer> blockDurationMinutes;
        private @Nullable Output<SpotInstanceRequestCapacityReservationSpecificationArgs> capacityReservationSpecification;
        private @Nullable Output<Integer> cpuCoreCount;
        private @Nullable Output<Integer> cpuThreadsPerCore;
        private @Nullable Output<SpotInstanceRequestCreditSpecificationArgs> creditSpecification;
        private @Nullable Output<Boolean> disableApiTermination;
        private @Nullable Output<List<SpotInstanceRequestEbsBlockDeviceArgs>> ebsBlockDevices;
        private @Nullable Output<Boolean> ebsOptimized;
        private @Nullable Output<SpotInstanceRequestEnclaveOptionsArgs> enclaveOptions;
        private @Nullable Output<List<SpotInstanceRequestEphemeralBlockDeviceArgs>> ephemeralBlockDevices;
        private @Nullable Output<Boolean> getPasswordData;
        private @Nullable Output<Boolean> hibernation;
        private @Nullable Output<String> hostId;
        private @Nullable Output<String> iamInstanceProfile;
        private @Nullable Output<String> instanceInitiatedShutdownBehavior;
        private @Nullable Output<String> instanceInterruptionBehavior;
        private @Nullable Output<String> instanceInterruptionBehaviour;
        private @Nullable Output<String> instanceType;
        private @Nullable Output<Integer> ipv6AddressCount;
        private @Nullable Output<List<String>> ipv6Addresses;
        private @Nullable Output<String> keyName;
        private @Nullable Output<String> launchGroup;
        private @Nullable Output<SpotInstanceRequestLaunchTemplateArgs> launchTemplate;
        private @Nullable Output<SpotInstanceRequestMetadataOptionsArgs> metadataOptions;
        private @Nullable Output<Boolean> monitoring;
        private @Nullable Output<List<SpotInstanceRequestNetworkInterfaceArgs>> networkInterfaces;
        private @Nullable Output<String> placementGroup;
        private @Nullable Output<Integer> placementPartitionNumber;
        private @Nullable Output<String> privateIp;
        private @Nullable Output<SpotInstanceRequestRootBlockDeviceArgs> rootBlockDevice;
        private @Nullable Output<List<String>> secondaryPrivateIps;
        private @Nullable Output<List<String>> securityGroups;
        private @Nullable Output<Boolean> sourceDestCheck;
        private @Nullable Output<String> spotPrice;
        private @Nullable Output<String> spotType;
        private @Nullable Output<String> subnetId;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> tenancy;
        private @Nullable Output<String> userData;
        private @Nullable Output<String> userDataBase64;
        private @Nullable Output<String> validFrom;
        private @Nullable Output<String> validUntil;
        private @Nullable Output<Map<String,String>> volumeTags;
        private @Nullable Output<List<String>> vpcSecurityGroupIds;
        private @Nullable Output<Boolean> waitForFulfillment;

        public Builder() {
    	      // Empty
        }

        public Builder(SpotInstanceRequestArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ami = defaults.ami;
    	      this.associatePublicIpAddress = defaults.associatePublicIpAddress;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.blockDurationMinutes = defaults.blockDurationMinutes;
    	      this.capacityReservationSpecification = defaults.capacityReservationSpecification;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.cpuThreadsPerCore = defaults.cpuThreadsPerCore;
    	      this.creditSpecification = defaults.creditSpecification;
    	      this.disableApiTermination = defaults.disableApiTermination;
    	      this.ebsBlockDevices = defaults.ebsBlockDevices;
    	      this.ebsOptimized = defaults.ebsOptimized;
    	      this.enclaveOptions = defaults.enclaveOptions;
    	      this.ephemeralBlockDevices = defaults.ephemeralBlockDevices;
    	      this.getPasswordData = defaults.getPasswordData;
    	      this.hibernation = defaults.hibernation;
    	      this.hostId = defaults.hostId;
    	      this.iamInstanceProfile = defaults.iamInstanceProfile;
    	      this.instanceInitiatedShutdownBehavior = defaults.instanceInitiatedShutdownBehavior;
    	      this.instanceInterruptionBehavior = defaults.instanceInterruptionBehavior;
    	      this.instanceInterruptionBehaviour = defaults.instanceInterruptionBehaviour;
    	      this.instanceType = defaults.instanceType;
    	      this.ipv6AddressCount = defaults.ipv6AddressCount;
    	      this.ipv6Addresses = defaults.ipv6Addresses;
    	      this.keyName = defaults.keyName;
    	      this.launchGroup = defaults.launchGroup;
    	      this.launchTemplate = defaults.launchTemplate;
    	      this.metadataOptions = defaults.metadataOptions;
    	      this.monitoring = defaults.monitoring;
    	      this.networkInterfaces = defaults.networkInterfaces;
    	      this.placementGroup = defaults.placementGroup;
    	      this.placementPartitionNumber = defaults.placementPartitionNumber;
    	      this.privateIp = defaults.privateIp;
    	      this.rootBlockDevice = defaults.rootBlockDevice;
    	      this.secondaryPrivateIps = defaults.secondaryPrivateIps;
    	      this.securityGroups = defaults.securityGroups;
    	      this.sourceDestCheck = defaults.sourceDestCheck;
    	      this.spotPrice = defaults.spotPrice;
    	      this.spotType = defaults.spotType;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.tenancy = defaults.tenancy;
    	      this.userData = defaults.userData;
    	      this.userDataBase64 = defaults.userDataBase64;
    	      this.validFrom = defaults.validFrom;
    	      this.validUntil = defaults.validUntil;
    	      this.volumeTags = defaults.volumeTags;
    	      this.vpcSecurityGroupIds = defaults.vpcSecurityGroupIds;
    	      this.waitForFulfillment = defaults.waitForFulfillment;
        }

        public Builder ami(@Nullable Output<String> ami) {
            this.ami = ami;
            return this;
        }
        public Builder ami(@Nullable String ami) {
            this.ami = Codegen.ofNullable(ami);
            return this;
        }
        public Builder associatePublicIpAddress(@Nullable Output<Boolean> associatePublicIpAddress) {
            this.associatePublicIpAddress = associatePublicIpAddress;
            return this;
        }
        public Builder associatePublicIpAddress(@Nullable Boolean associatePublicIpAddress) {
            this.associatePublicIpAddress = Codegen.ofNullable(associatePublicIpAddress);
            return this;
        }
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }
        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = Codegen.ofNullable(availabilityZone);
            return this;
        }
        public Builder blockDurationMinutes(@Nullable Output<Integer> blockDurationMinutes) {
            this.blockDurationMinutes = blockDurationMinutes;
            return this;
        }
        public Builder blockDurationMinutes(@Nullable Integer blockDurationMinutes) {
            this.blockDurationMinutes = Codegen.ofNullable(blockDurationMinutes);
            return this;
        }
        public Builder capacityReservationSpecification(@Nullable Output<SpotInstanceRequestCapacityReservationSpecificationArgs> capacityReservationSpecification) {
            this.capacityReservationSpecification = capacityReservationSpecification;
            return this;
        }
        public Builder capacityReservationSpecification(@Nullable SpotInstanceRequestCapacityReservationSpecificationArgs capacityReservationSpecification) {
            this.capacityReservationSpecification = Codegen.ofNullable(capacityReservationSpecification);
            return this;
        }
        public Builder cpuCoreCount(@Nullable Output<Integer> cpuCoreCount) {
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        public Builder cpuCoreCount(@Nullable Integer cpuCoreCount) {
            this.cpuCoreCount = Codegen.ofNullable(cpuCoreCount);
            return this;
        }
        public Builder cpuThreadsPerCore(@Nullable Output<Integer> cpuThreadsPerCore) {
            this.cpuThreadsPerCore = cpuThreadsPerCore;
            return this;
        }
        public Builder cpuThreadsPerCore(@Nullable Integer cpuThreadsPerCore) {
            this.cpuThreadsPerCore = Codegen.ofNullable(cpuThreadsPerCore);
            return this;
        }
        public Builder creditSpecification(@Nullable Output<SpotInstanceRequestCreditSpecificationArgs> creditSpecification) {
            this.creditSpecification = creditSpecification;
            return this;
        }
        public Builder creditSpecification(@Nullable SpotInstanceRequestCreditSpecificationArgs creditSpecification) {
            this.creditSpecification = Codegen.ofNullable(creditSpecification);
            return this;
        }
        public Builder disableApiTermination(@Nullable Output<Boolean> disableApiTermination) {
            this.disableApiTermination = disableApiTermination;
            return this;
        }
        public Builder disableApiTermination(@Nullable Boolean disableApiTermination) {
            this.disableApiTermination = Codegen.ofNullable(disableApiTermination);
            return this;
        }
        public Builder ebsBlockDevices(@Nullable Output<List<SpotInstanceRequestEbsBlockDeviceArgs>> ebsBlockDevices) {
            this.ebsBlockDevices = ebsBlockDevices;
            return this;
        }
        public Builder ebsBlockDevices(@Nullable List<SpotInstanceRequestEbsBlockDeviceArgs> ebsBlockDevices) {
            this.ebsBlockDevices = Codegen.ofNullable(ebsBlockDevices);
            return this;
        }
        public Builder ebsBlockDevices(SpotInstanceRequestEbsBlockDeviceArgs... ebsBlockDevices) {
            return ebsBlockDevices(List.of(ebsBlockDevices));
        }
        public Builder ebsOptimized(@Nullable Output<Boolean> ebsOptimized) {
            this.ebsOptimized = ebsOptimized;
            return this;
        }
        public Builder ebsOptimized(@Nullable Boolean ebsOptimized) {
            this.ebsOptimized = Codegen.ofNullable(ebsOptimized);
            return this;
        }
        public Builder enclaveOptions(@Nullable Output<SpotInstanceRequestEnclaveOptionsArgs> enclaveOptions) {
            this.enclaveOptions = enclaveOptions;
            return this;
        }
        public Builder enclaveOptions(@Nullable SpotInstanceRequestEnclaveOptionsArgs enclaveOptions) {
            this.enclaveOptions = Codegen.ofNullable(enclaveOptions);
            return this;
        }
        public Builder ephemeralBlockDevices(@Nullable Output<List<SpotInstanceRequestEphemeralBlockDeviceArgs>> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = ephemeralBlockDevices;
            return this;
        }
        public Builder ephemeralBlockDevices(@Nullable List<SpotInstanceRequestEphemeralBlockDeviceArgs> ephemeralBlockDevices) {
            this.ephemeralBlockDevices = Codegen.ofNullable(ephemeralBlockDevices);
            return this;
        }
        public Builder ephemeralBlockDevices(SpotInstanceRequestEphemeralBlockDeviceArgs... ephemeralBlockDevices) {
            return ephemeralBlockDevices(List.of(ephemeralBlockDevices));
        }
        public Builder getPasswordData(@Nullable Output<Boolean> getPasswordData) {
            this.getPasswordData = getPasswordData;
            return this;
        }
        public Builder getPasswordData(@Nullable Boolean getPasswordData) {
            this.getPasswordData = Codegen.ofNullable(getPasswordData);
            return this;
        }
        public Builder hibernation(@Nullable Output<Boolean> hibernation) {
            this.hibernation = hibernation;
            return this;
        }
        public Builder hibernation(@Nullable Boolean hibernation) {
            this.hibernation = Codegen.ofNullable(hibernation);
            return this;
        }
        public Builder hostId(@Nullable Output<String> hostId) {
            this.hostId = hostId;
            return this;
        }
        public Builder hostId(@Nullable String hostId) {
            this.hostId = Codegen.ofNullable(hostId);
            return this;
        }
        public Builder iamInstanceProfile(@Nullable Output<String> iamInstanceProfile) {
            this.iamInstanceProfile = iamInstanceProfile;
            return this;
        }
        public Builder iamInstanceProfile(@Nullable String iamInstanceProfile) {
            this.iamInstanceProfile = Codegen.ofNullable(iamInstanceProfile);
            return this;
        }
        public Builder instanceInitiatedShutdownBehavior(@Nullable Output<String> instanceInitiatedShutdownBehavior) {
            this.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior;
            return this;
        }
        public Builder instanceInitiatedShutdownBehavior(@Nullable String instanceInitiatedShutdownBehavior) {
            this.instanceInitiatedShutdownBehavior = Codegen.ofNullable(instanceInitiatedShutdownBehavior);
            return this;
        }
        public Builder instanceInterruptionBehavior(@Nullable Output<String> instanceInterruptionBehavior) {
            this.instanceInterruptionBehavior = instanceInterruptionBehavior;
            return this;
        }
        public Builder instanceInterruptionBehavior(@Nullable String instanceInterruptionBehavior) {
            this.instanceInterruptionBehavior = Codegen.ofNullable(instanceInterruptionBehavior);
            return this;
        }
        public Builder instanceInterruptionBehaviour(@Nullable Output<String> instanceInterruptionBehaviour) {
            this.instanceInterruptionBehaviour = instanceInterruptionBehaviour;
            return this;
        }
        public Builder instanceInterruptionBehaviour(@Nullable String instanceInterruptionBehaviour) {
            this.instanceInterruptionBehaviour = Codegen.ofNullable(instanceInterruptionBehaviour);
            return this;
        }
        public Builder instanceType(@Nullable Output<String> instanceType) {
            this.instanceType = instanceType;
            return this;
        }
        public Builder instanceType(@Nullable String instanceType) {
            this.instanceType = Codegen.ofNullable(instanceType);
            return this;
        }
        public Builder ipv6AddressCount(@Nullable Output<Integer> ipv6AddressCount) {
            this.ipv6AddressCount = ipv6AddressCount;
            return this;
        }
        public Builder ipv6AddressCount(@Nullable Integer ipv6AddressCount) {
            this.ipv6AddressCount = Codegen.ofNullable(ipv6AddressCount);
            return this;
        }
        public Builder ipv6Addresses(@Nullable Output<List<String>> ipv6Addresses) {
            this.ipv6Addresses = ipv6Addresses;
            return this;
        }
        public Builder ipv6Addresses(@Nullable List<String> ipv6Addresses) {
            this.ipv6Addresses = Codegen.ofNullable(ipv6Addresses);
            return this;
        }
        public Builder ipv6Addresses(String... ipv6Addresses) {
            return ipv6Addresses(List.of(ipv6Addresses));
        }
        public Builder keyName(@Nullable Output<String> keyName) {
            this.keyName = keyName;
            return this;
        }
        public Builder keyName(@Nullable String keyName) {
            this.keyName = Codegen.ofNullable(keyName);
            return this;
        }
        public Builder launchGroup(@Nullable Output<String> launchGroup) {
            this.launchGroup = launchGroup;
            return this;
        }
        public Builder launchGroup(@Nullable String launchGroup) {
            this.launchGroup = Codegen.ofNullable(launchGroup);
            return this;
        }
        public Builder launchTemplate(@Nullable Output<SpotInstanceRequestLaunchTemplateArgs> launchTemplate) {
            this.launchTemplate = launchTemplate;
            return this;
        }
        public Builder launchTemplate(@Nullable SpotInstanceRequestLaunchTemplateArgs launchTemplate) {
            this.launchTemplate = Codegen.ofNullable(launchTemplate);
            return this;
        }
        public Builder metadataOptions(@Nullable Output<SpotInstanceRequestMetadataOptionsArgs> metadataOptions) {
            this.metadataOptions = metadataOptions;
            return this;
        }
        public Builder metadataOptions(@Nullable SpotInstanceRequestMetadataOptionsArgs metadataOptions) {
            this.metadataOptions = Codegen.ofNullable(metadataOptions);
            return this;
        }
        public Builder monitoring(@Nullable Output<Boolean> monitoring) {
            this.monitoring = monitoring;
            return this;
        }
        public Builder monitoring(@Nullable Boolean monitoring) {
            this.monitoring = Codegen.ofNullable(monitoring);
            return this;
        }
        public Builder networkInterfaces(@Nullable Output<List<SpotInstanceRequestNetworkInterfaceArgs>> networkInterfaces) {
            this.networkInterfaces = networkInterfaces;
            return this;
        }
        public Builder networkInterfaces(@Nullable List<SpotInstanceRequestNetworkInterfaceArgs> networkInterfaces) {
            this.networkInterfaces = Codegen.ofNullable(networkInterfaces);
            return this;
        }
        public Builder networkInterfaces(SpotInstanceRequestNetworkInterfaceArgs... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }
        public Builder placementGroup(@Nullable Output<String> placementGroup) {
            this.placementGroup = placementGroup;
            return this;
        }
        public Builder placementGroup(@Nullable String placementGroup) {
            this.placementGroup = Codegen.ofNullable(placementGroup);
            return this;
        }
        public Builder placementPartitionNumber(@Nullable Output<Integer> placementPartitionNumber) {
            this.placementPartitionNumber = placementPartitionNumber;
            return this;
        }
        public Builder placementPartitionNumber(@Nullable Integer placementPartitionNumber) {
            this.placementPartitionNumber = Codegen.ofNullable(placementPartitionNumber);
            return this;
        }
        public Builder privateIp(@Nullable Output<String> privateIp) {
            this.privateIp = privateIp;
            return this;
        }
        public Builder privateIp(@Nullable String privateIp) {
            this.privateIp = Codegen.ofNullable(privateIp);
            return this;
        }
        public Builder rootBlockDevice(@Nullable Output<SpotInstanceRequestRootBlockDeviceArgs> rootBlockDevice) {
            this.rootBlockDevice = rootBlockDevice;
            return this;
        }
        public Builder rootBlockDevice(@Nullable SpotInstanceRequestRootBlockDeviceArgs rootBlockDevice) {
            this.rootBlockDevice = Codegen.ofNullable(rootBlockDevice);
            return this;
        }
        public Builder secondaryPrivateIps(@Nullable Output<List<String>> secondaryPrivateIps) {
            this.secondaryPrivateIps = secondaryPrivateIps;
            return this;
        }
        public Builder secondaryPrivateIps(@Nullable List<String> secondaryPrivateIps) {
            this.secondaryPrivateIps = Codegen.ofNullable(secondaryPrivateIps);
            return this;
        }
        public Builder secondaryPrivateIps(String... secondaryPrivateIps) {
            return secondaryPrivateIps(List.of(secondaryPrivateIps));
        }
        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }
        public Builder securityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = Codegen.ofNullable(securityGroups);
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        public Builder sourceDestCheck(@Nullable Output<Boolean> sourceDestCheck) {
            this.sourceDestCheck = sourceDestCheck;
            return this;
        }
        public Builder sourceDestCheck(@Nullable Boolean sourceDestCheck) {
            this.sourceDestCheck = Codegen.ofNullable(sourceDestCheck);
            return this;
        }
        public Builder spotPrice(@Nullable Output<String> spotPrice) {
            this.spotPrice = spotPrice;
            return this;
        }
        public Builder spotPrice(@Nullable String spotPrice) {
            this.spotPrice = Codegen.ofNullable(spotPrice);
            return this;
        }
        public Builder spotType(@Nullable Output<String> spotType) {
            this.spotType = spotType;
            return this;
        }
        public Builder spotType(@Nullable String spotType) {
            this.spotType = Codegen.ofNullable(spotType);
            return this;
        }
        public Builder subnetId(@Nullable Output<String> subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = Codegen.ofNullable(subnetId);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tenancy(@Nullable Output<String> tenancy) {
            this.tenancy = tenancy;
            return this;
        }
        public Builder tenancy(@Nullable String tenancy) {
            this.tenancy = Codegen.ofNullable(tenancy);
            return this;
        }
        public Builder userData(@Nullable Output<String> userData) {
            this.userData = userData;
            return this;
        }
        public Builder userData(@Nullable String userData) {
            this.userData = Codegen.ofNullable(userData);
            return this;
        }
        public Builder userDataBase64(@Nullable Output<String> userDataBase64) {
            this.userDataBase64 = userDataBase64;
            return this;
        }
        public Builder userDataBase64(@Nullable String userDataBase64) {
            this.userDataBase64 = Codegen.ofNullable(userDataBase64);
            return this;
        }
        public Builder validFrom(@Nullable Output<String> validFrom) {
            this.validFrom = validFrom;
            return this;
        }
        public Builder validFrom(@Nullable String validFrom) {
            this.validFrom = Codegen.ofNullable(validFrom);
            return this;
        }
        public Builder validUntil(@Nullable Output<String> validUntil) {
            this.validUntil = validUntil;
            return this;
        }
        public Builder validUntil(@Nullable String validUntil) {
            this.validUntil = Codegen.ofNullable(validUntil);
            return this;
        }
        public Builder volumeTags(@Nullable Output<Map<String,String>> volumeTags) {
            this.volumeTags = volumeTags;
            return this;
        }
        public Builder volumeTags(@Nullable Map<String,String> volumeTags) {
            this.volumeTags = Codegen.ofNullable(volumeTags);
            return this;
        }
        public Builder vpcSecurityGroupIds(@Nullable Output<List<String>> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }
        public Builder vpcSecurityGroupIds(@Nullable List<String> vpcSecurityGroupIds) {
            this.vpcSecurityGroupIds = Codegen.ofNullable(vpcSecurityGroupIds);
            return this;
        }
        public Builder vpcSecurityGroupIds(String... vpcSecurityGroupIds) {
            return vpcSecurityGroupIds(List.of(vpcSecurityGroupIds));
        }
        public Builder waitForFulfillment(@Nullable Output<Boolean> waitForFulfillment) {
            this.waitForFulfillment = waitForFulfillment;
            return this;
        }
        public Builder waitForFulfillment(@Nullable Boolean waitForFulfillment) {
            this.waitForFulfillment = Codegen.ofNullable(waitForFulfillment);
            return this;
        }        public SpotInstanceRequestArgs build() {
            return new SpotInstanceRequestArgs(ami, associatePublicIpAddress, availabilityZone, blockDurationMinutes, capacityReservationSpecification, cpuCoreCount, cpuThreadsPerCore, creditSpecification, disableApiTermination, ebsBlockDevices, ebsOptimized, enclaveOptions, ephemeralBlockDevices, getPasswordData, hibernation, hostId, iamInstanceProfile, instanceInitiatedShutdownBehavior, instanceInterruptionBehavior, instanceInterruptionBehaviour, instanceType, ipv6AddressCount, ipv6Addresses, keyName, launchGroup, launchTemplate, metadataOptions, monitoring, networkInterfaces, placementGroup, placementPartitionNumber, privateIp, rootBlockDevice, secondaryPrivateIps, securityGroups, sourceDestCheck, spotPrice, spotType, subnetId, tags, tenancy, userData, userDataBase64, validFrom, validUntil, volumeTags, vpcSecurityGroupIds, waitForFulfillment);
        }
    }
}
