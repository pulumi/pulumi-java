// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.directconnect;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PrivateVirtualInterfaceArgs extends io.pulumi.resources.ResourceArgs {

    public static final PrivateVirtualInterfaceArgs Empty = new PrivateVirtualInterfaceArgs();

    /**
     * The address family for the BGP peer. ` ipv4  ` or `ipv6`.
     * 
     */
    @InputImport(name="addressFamily", required=true)
      private final Output<String> addressFamily;

    public Output<String> getAddressFamily() {
        return this.addressFamily;
    }

    /**
     * The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
     * 
     */
    @InputImport(name="amazonAddress")
      private final @Nullable Output<String> amazonAddress;

    public Output<String> getAmazonAddress() {
        return this.amazonAddress == null ? Output.empty() : this.amazonAddress;
    }

    /**
     * The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
     * 
     */
    @InputImport(name="bgpAsn", required=true)
      private final Output<Integer> bgpAsn;

    public Output<Integer> getBgpAsn() {
        return this.bgpAsn;
    }

    /**
     * The authentication key for BGP configuration.
     * 
     */
    @InputImport(name="bgpAuthKey")
      private final @Nullable Output<String> bgpAuthKey;

    public Output<String> getBgpAuthKey() {
        return this.bgpAuthKey == null ? Output.empty() : this.bgpAuthKey;
    }

    /**
     * The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
     * 
     */
    @InputImport(name="connectionId", required=true)
      private final Output<String> connectionId;

    public Output<String> getConnectionId() {
        return this.connectionId;
    }

    /**
     * The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
     * 
     */
    @InputImport(name="customerAddress")
      private final @Nullable Output<String> customerAddress;

    public Output<String> getCustomerAddress() {
        return this.customerAddress == null ? Output.empty() : this.customerAddress;
    }

    /**
     * The ID of the Direct Connect gateway to which to connect the virtual interface.
     * 
     */
    @InputImport(name="dxGatewayId")
      private final @Nullable Output<String> dxGatewayId;

    public Output<String> getDxGatewayId() {
        return this.dxGatewayId == null ? Output.empty() : this.dxGatewayId;
    }

    /**
     * The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
     * The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
     * 
     */
    @InputImport(name="mtu")
      private final @Nullable Output<Integer> mtu;

    public Output<Integer> getMtu() {
        return this.mtu == null ? Output.empty() : this.mtu;
    }

    /**
     * The name for the virtual interface.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    @InputImport(name="sitelinkEnabled")
      private final @Nullable Output<Boolean> sitelinkEnabled;

    public Output<Boolean> getSitelinkEnabled() {
        return this.sitelinkEnabled == null ? Output.empty() : this.sitelinkEnabled;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * The VLAN ID.
     * 
     */
    @InputImport(name="vlan", required=true)
      private final Output<Integer> vlan;

    public Output<Integer> getVlan() {
        return this.vlan;
    }

    /**
     * The ID of the virtual private gateway to which to connect the virtual interface.
     * 
     */
    @InputImport(name="vpnGatewayId")
      private final @Nullable Output<String> vpnGatewayId;

    public Output<String> getVpnGatewayId() {
        return this.vpnGatewayId == null ? Output.empty() : this.vpnGatewayId;
    }

    public PrivateVirtualInterfaceArgs(
        Output<String> addressFamily,
        @Nullable Output<String> amazonAddress,
        Output<Integer> bgpAsn,
        @Nullable Output<String> bgpAuthKey,
        Output<String> connectionId,
        @Nullable Output<String> customerAddress,
        @Nullable Output<String> dxGatewayId,
        @Nullable Output<Integer> mtu,
        @Nullable Output<String> name,
        @Nullable Output<Boolean> sitelinkEnabled,
        @Nullable Output<Map<String,String>> tags,
        Output<Integer> vlan,
        @Nullable Output<String> vpnGatewayId) {
        this.addressFamily = Objects.requireNonNull(addressFamily, "expected parameter 'addressFamily' to be non-null");
        this.amazonAddress = amazonAddress;
        this.bgpAsn = Objects.requireNonNull(bgpAsn, "expected parameter 'bgpAsn' to be non-null");
        this.bgpAuthKey = bgpAuthKey;
        this.connectionId = Objects.requireNonNull(connectionId, "expected parameter 'connectionId' to be non-null");
        this.customerAddress = customerAddress;
        this.dxGatewayId = dxGatewayId;
        this.mtu = mtu;
        this.name = name;
        this.sitelinkEnabled = sitelinkEnabled;
        this.tags = tags;
        this.vlan = Objects.requireNonNull(vlan, "expected parameter 'vlan' to be non-null");
        this.vpnGatewayId = vpnGatewayId;
    }

    private PrivateVirtualInterfaceArgs() {
        this.addressFamily = Output.empty();
        this.amazonAddress = Output.empty();
        this.bgpAsn = Output.empty();
        this.bgpAuthKey = Output.empty();
        this.connectionId = Output.empty();
        this.customerAddress = Output.empty();
        this.dxGatewayId = Output.empty();
        this.mtu = Output.empty();
        this.name = Output.empty();
        this.sitelinkEnabled = Output.empty();
        this.tags = Output.empty();
        this.vlan = Output.empty();
        this.vpnGatewayId = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PrivateVirtualInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> addressFamily;
        private @Nullable Output<String> amazonAddress;
        private Output<Integer> bgpAsn;
        private @Nullable Output<String> bgpAuthKey;
        private Output<String> connectionId;
        private @Nullable Output<String> customerAddress;
        private @Nullable Output<String> dxGatewayId;
        private @Nullable Output<Integer> mtu;
        private @Nullable Output<String> name;
        private @Nullable Output<Boolean> sitelinkEnabled;
        private @Nullable Output<Map<String,String>> tags;
        private Output<Integer> vlan;
        private @Nullable Output<String> vpnGatewayId;

        public Builder() {
    	      // Empty
        }

        public Builder(PrivateVirtualInterfaceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressFamily = defaults.addressFamily;
    	      this.amazonAddress = defaults.amazonAddress;
    	      this.bgpAsn = defaults.bgpAsn;
    	      this.bgpAuthKey = defaults.bgpAuthKey;
    	      this.connectionId = defaults.connectionId;
    	      this.customerAddress = defaults.customerAddress;
    	      this.dxGatewayId = defaults.dxGatewayId;
    	      this.mtu = defaults.mtu;
    	      this.name = defaults.name;
    	      this.sitelinkEnabled = defaults.sitelinkEnabled;
    	      this.tags = defaults.tags;
    	      this.vlan = defaults.vlan;
    	      this.vpnGatewayId = defaults.vpnGatewayId;
        }

        public Builder addressFamily(Output<String> addressFamily) {
            this.addressFamily = Objects.requireNonNull(addressFamily);
            return this;
        }

        public Builder addressFamily(String addressFamily) {
            this.addressFamily = Output.of(Objects.requireNonNull(addressFamily));
            return this;
        }

        public Builder amazonAddress(@Nullable Output<String> amazonAddress) {
            this.amazonAddress = amazonAddress;
            return this;
        }

        public Builder amazonAddress(@Nullable String amazonAddress) {
            this.amazonAddress = Output.ofNullable(amazonAddress);
            return this;
        }

        public Builder bgpAsn(Output<Integer> bgpAsn) {
            this.bgpAsn = Objects.requireNonNull(bgpAsn);
            return this;
        }

        public Builder bgpAsn(Integer bgpAsn) {
            this.bgpAsn = Output.of(Objects.requireNonNull(bgpAsn));
            return this;
        }

        public Builder bgpAuthKey(@Nullable Output<String> bgpAuthKey) {
            this.bgpAuthKey = bgpAuthKey;
            return this;
        }

        public Builder bgpAuthKey(@Nullable String bgpAuthKey) {
            this.bgpAuthKey = Output.ofNullable(bgpAuthKey);
            return this;
        }

        public Builder connectionId(Output<String> connectionId) {
            this.connectionId = Objects.requireNonNull(connectionId);
            return this;
        }

        public Builder connectionId(String connectionId) {
            this.connectionId = Output.of(Objects.requireNonNull(connectionId));
            return this;
        }

        public Builder customerAddress(@Nullable Output<String> customerAddress) {
            this.customerAddress = customerAddress;
            return this;
        }

        public Builder customerAddress(@Nullable String customerAddress) {
            this.customerAddress = Output.ofNullable(customerAddress);
            return this;
        }

        public Builder dxGatewayId(@Nullable Output<String> dxGatewayId) {
            this.dxGatewayId = dxGatewayId;
            return this;
        }

        public Builder dxGatewayId(@Nullable String dxGatewayId) {
            this.dxGatewayId = Output.ofNullable(dxGatewayId);
            return this;
        }

        public Builder mtu(@Nullable Output<Integer> mtu) {
            this.mtu = mtu;
            return this;
        }

        public Builder mtu(@Nullable Integer mtu) {
            this.mtu = Output.ofNullable(mtu);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder sitelinkEnabled(@Nullable Output<Boolean> sitelinkEnabled) {
            this.sitelinkEnabled = sitelinkEnabled;
            return this;
        }

        public Builder sitelinkEnabled(@Nullable Boolean sitelinkEnabled) {
            this.sitelinkEnabled = Output.ofNullable(sitelinkEnabled);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder vlan(Output<Integer> vlan) {
            this.vlan = Objects.requireNonNull(vlan);
            return this;
        }

        public Builder vlan(Integer vlan) {
            this.vlan = Output.of(Objects.requireNonNull(vlan));
            return this;
        }

        public Builder vpnGatewayId(@Nullable Output<String> vpnGatewayId) {
            this.vpnGatewayId = vpnGatewayId;
            return this;
        }

        public Builder vpnGatewayId(@Nullable String vpnGatewayId) {
            this.vpnGatewayId = Output.ofNullable(vpnGatewayId);
            return this;
        }
        public PrivateVirtualInterfaceArgs build() {
            return new PrivateVirtualInterfaceArgs(addressFamily, amazonAddress, bgpAsn, bgpAuthKey, connectionId, customerAddress, dxGatewayId, mtu, name, sitelinkEnabled, tags, vlan, vpnGatewayId);
        }
    }
}
