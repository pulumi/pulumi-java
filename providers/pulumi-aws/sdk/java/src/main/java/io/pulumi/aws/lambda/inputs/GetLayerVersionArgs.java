// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lambda.inputs;

import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLayerVersionArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetLayerVersionArgs Empty = new GetLayerVersionArgs();

    /**
     * Specific architecture the layer version could support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
     * 
     */
    @Import(name="compatibleArchitecture")
      private final @Nullable String compatibleArchitecture;

    public Optional<String> getCompatibleArchitecture() {
        return this.compatibleArchitecture == null ? Optional.empty() : Optional.ofNullable(this.compatibleArchitecture);
    }

    /**
     * Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
     * 
     */
    @Import(name="compatibleRuntime")
      private final @Nullable String compatibleRuntime;

    public Optional<String> getCompatibleRuntime() {
        return this.compatibleRuntime == null ? Optional.empty() : Optional.ofNullable(this.compatibleRuntime);
    }

    /**
     * Name of the lambda layer.
     * 
     */
    @Import(name="layerName", required=true)
      private final String layerName;

    public String getLayerName() {
        return this.layerName;
    }

    /**
     * Specific layer version. Conflicts with `compatible_runtime` and `compatible_architecture`. If omitted, the latest available layer version will be used.
     * 
     */
    @Import(name="version")
      private final @Nullable Integer version;

    public Optional<Integer> getVersion() {
        return this.version == null ? Optional.empty() : Optional.ofNullable(this.version);
    }

    public GetLayerVersionArgs(
        @Nullable String compatibleArchitecture,
        @Nullable String compatibleRuntime,
        String layerName,
        @Nullable Integer version) {
        this.compatibleArchitecture = compatibleArchitecture;
        this.compatibleRuntime = compatibleRuntime;
        this.layerName = Objects.requireNonNull(layerName, "expected parameter 'layerName' to be non-null");
        this.version = version;
    }

    private GetLayerVersionArgs() {
        this.compatibleArchitecture = null;
        this.compatibleRuntime = null;
        this.layerName = null;
        this.version = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLayerVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String compatibleArchitecture;
        private @Nullable String compatibleRuntime;
        private String layerName;
        private @Nullable Integer version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetLayerVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compatibleArchitecture = defaults.compatibleArchitecture;
    	      this.compatibleRuntime = defaults.compatibleRuntime;
    	      this.layerName = defaults.layerName;
    	      this.version = defaults.version;
        }

        public Builder compatibleArchitecture(@Nullable String compatibleArchitecture) {
            this.compatibleArchitecture = compatibleArchitecture;
            return this;
        }
        public Builder compatibleRuntime(@Nullable String compatibleRuntime) {
            this.compatibleRuntime = compatibleRuntime;
            return this;
        }
        public Builder layerName(String layerName) {
            this.layerName = Objects.requireNonNull(layerName);
            return this;
        }
        public Builder version(@Nullable Integer version) {
            this.version = version;
            return this;
        }        public GetLayerVersionArgs build() {
            return new GetLayerVersionArgs(compatibleArchitecture, compatibleRuntime, layerName, version);
        }
    }
}
