// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.route53.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class KeySigningKeyState extends io.pulumi.resources.ResourceArgs {

    public static final KeySigningKeyState Empty = new KeySigningKeyState();

    /**
     * A string used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
     * 
     */
    @InputImport(name="digestAlgorithmMnemonic")
      private final @Nullable Input<String> digestAlgorithmMnemonic;

    public Input<String> getDigestAlgorithmMnemonic() {
        return this.digestAlgorithmMnemonic == null ? Input.empty() : this.digestAlgorithmMnemonic;
    }

    /**
     * An integer used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
     * 
     */
    @InputImport(name="digestAlgorithmType")
      private final @Nullable Input<Integer> digestAlgorithmType;

    public Input<Integer> getDigestAlgorithmType() {
        return this.digestAlgorithmType == null ? Input.empty() : this.digestAlgorithmType;
    }

    /**
     * A cryptographic digest of a DNSKEY resource record (RR). DNSKEY records are used to publish the public key that resolvers can use to verify DNSSEC signatures that are used to secure certain kinds of information provided by the DNS system.
     * 
     */
    @InputImport(name="digestValue")
      private final @Nullable Input<String> digestValue;

    public Input<String> getDigestValue() {
        return this.digestValue == null ? Input.empty() : this.digestValue;
    }

    /**
     * A string that represents a DNSKEY record.
     * 
     */
    @InputImport(name="dnskeyRecord")
      private final @Nullable Input<String> dnskeyRecord;

    public Input<String> getDnskeyRecord() {
        return this.dnskeyRecord == null ? Input.empty() : this.dnskeyRecord;
    }

    /**
     * A string that represents a delegation signer (DS) record.
     * 
     */
    @InputImport(name="dsRecord")
      private final @Nullable Input<String> dsRecord;

    public Input<String> getDsRecord() {
        return this.dsRecord == null ? Input.empty() : this.dsRecord;
    }

    /**
     * An integer that specifies how the key is used. For key-signing key (KSK), this value is always 257.
     * 
     */
    @InputImport(name="flag")
      private final @Nullable Input<Integer> flag;

    public Input<Integer> getFlag() {
        return this.flag == null ? Input.empty() : this.flag;
    }

    /**
     * Identifier of the Route 53 Hosted Zone.
     * 
     */
    @InputImport(name="hostedZoneId")
      private final @Nullable Input<String> hostedZoneId;

    public Input<String> getHostedZoneId() {
        return this.hostedZoneId == null ? Input.empty() : this.hostedZoneId;
    }

    /**
     * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
     * 
     */
    @InputImport(name="keyManagementServiceArn")
      private final @Nullable Input<String> keyManagementServiceArn;

    public Input<String> getKeyManagementServiceArn() {
        return this.keyManagementServiceArn == null ? Input.empty() : this.keyManagementServiceArn;
    }

    /**
     * An integer used to identify the DNSSEC record for the domain name. The process used to calculate the value is described in [RFC-4034 Appendix B](https://tools.ietf.org/rfc/rfc4034.txt).
     * 
     */
    @InputImport(name="keyTag")
      private final @Nullable Input<Integer> keyTag;

    public Input<Integer> getKeyTag() {
        return this.keyTag == null ? Input.empty() : this.keyTag;
    }

    /**
     * Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The public key, represented as a Base64 encoding, as required by [RFC-4034 Page 5](https://tools.ietf.org/rfc/rfc4034.txt).
     * 
     */
    @InputImport(name="publicKey")
      private final @Nullable Input<String> publicKey;

    public Input<String> getPublicKey() {
        return this.publicKey == null ? Input.empty() : this.publicKey;
    }

    /**
     * A string used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
     * 
     */
    @InputImport(name="signingAlgorithmMnemonic")
      private final @Nullable Input<String> signingAlgorithmMnemonic;

    public Input<String> getSigningAlgorithmMnemonic() {
        return this.signingAlgorithmMnemonic == null ? Input.empty() : this.signingAlgorithmMnemonic;
    }

    /**
     * An integer used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
     * 
     */
    @InputImport(name="signingAlgorithmType")
      private final @Nullable Input<Integer> signingAlgorithmType;

    public Input<Integer> getSigningAlgorithmType() {
        return this.signingAlgorithmType == null ? Input.empty() : this.signingAlgorithmType;
    }

    /**
     * Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
     * 
     */
    @InputImport(name="status")
      private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    public KeySigningKeyState(
        @Nullable Input<String> digestAlgorithmMnemonic,
        @Nullable Input<Integer> digestAlgorithmType,
        @Nullable Input<String> digestValue,
        @Nullable Input<String> dnskeyRecord,
        @Nullable Input<String> dsRecord,
        @Nullable Input<Integer> flag,
        @Nullable Input<String> hostedZoneId,
        @Nullable Input<String> keyManagementServiceArn,
        @Nullable Input<Integer> keyTag,
        @Nullable Input<String> name,
        @Nullable Input<String> publicKey,
        @Nullable Input<String> signingAlgorithmMnemonic,
        @Nullable Input<Integer> signingAlgorithmType,
        @Nullable Input<String> status) {
        this.digestAlgorithmMnemonic = digestAlgorithmMnemonic;
        this.digestAlgorithmType = digestAlgorithmType;
        this.digestValue = digestValue;
        this.dnskeyRecord = dnskeyRecord;
        this.dsRecord = dsRecord;
        this.flag = flag;
        this.hostedZoneId = hostedZoneId;
        this.keyManagementServiceArn = keyManagementServiceArn;
        this.keyTag = keyTag;
        this.name = name;
        this.publicKey = publicKey;
        this.signingAlgorithmMnemonic = signingAlgorithmMnemonic;
        this.signingAlgorithmType = signingAlgorithmType;
        this.status = status;
    }

    private KeySigningKeyState() {
        this.digestAlgorithmMnemonic = Input.empty();
        this.digestAlgorithmType = Input.empty();
        this.digestValue = Input.empty();
        this.dnskeyRecord = Input.empty();
        this.dsRecord = Input.empty();
        this.flag = Input.empty();
        this.hostedZoneId = Input.empty();
        this.keyManagementServiceArn = Input.empty();
        this.keyTag = Input.empty();
        this.name = Input.empty();
        this.publicKey = Input.empty();
        this.signingAlgorithmMnemonic = Input.empty();
        this.signingAlgorithmType = Input.empty();
        this.status = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeySigningKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> digestAlgorithmMnemonic;
        private @Nullable Input<Integer> digestAlgorithmType;
        private @Nullable Input<String> digestValue;
        private @Nullable Input<String> dnskeyRecord;
        private @Nullable Input<String> dsRecord;
        private @Nullable Input<Integer> flag;
        private @Nullable Input<String> hostedZoneId;
        private @Nullable Input<String> keyManagementServiceArn;
        private @Nullable Input<Integer> keyTag;
        private @Nullable Input<String> name;
        private @Nullable Input<String> publicKey;
        private @Nullable Input<String> signingAlgorithmMnemonic;
        private @Nullable Input<Integer> signingAlgorithmType;
        private @Nullable Input<String> status;

        public Builder() {
    	      // Empty
        }

        public Builder(KeySigningKeyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.digestAlgorithmMnemonic = defaults.digestAlgorithmMnemonic;
    	      this.digestAlgorithmType = defaults.digestAlgorithmType;
    	      this.digestValue = defaults.digestValue;
    	      this.dnskeyRecord = defaults.dnskeyRecord;
    	      this.dsRecord = defaults.dsRecord;
    	      this.flag = defaults.flag;
    	      this.hostedZoneId = defaults.hostedZoneId;
    	      this.keyManagementServiceArn = defaults.keyManagementServiceArn;
    	      this.keyTag = defaults.keyTag;
    	      this.name = defaults.name;
    	      this.publicKey = defaults.publicKey;
    	      this.signingAlgorithmMnemonic = defaults.signingAlgorithmMnemonic;
    	      this.signingAlgorithmType = defaults.signingAlgorithmType;
    	      this.status = defaults.status;
        }

        public Builder digestAlgorithmMnemonic(@Nullable Input<String> digestAlgorithmMnemonic) {
            this.digestAlgorithmMnemonic = digestAlgorithmMnemonic;
            return this;
        }

        public Builder digestAlgorithmMnemonic(@Nullable String digestAlgorithmMnemonic) {
            this.digestAlgorithmMnemonic = Input.ofNullable(digestAlgorithmMnemonic);
            return this;
        }

        public Builder digestAlgorithmType(@Nullable Input<Integer> digestAlgorithmType) {
            this.digestAlgorithmType = digestAlgorithmType;
            return this;
        }

        public Builder digestAlgorithmType(@Nullable Integer digestAlgorithmType) {
            this.digestAlgorithmType = Input.ofNullable(digestAlgorithmType);
            return this;
        }

        public Builder digestValue(@Nullable Input<String> digestValue) {
            this.digestValue = digestValue;
            return this;
        }

        public Builder digestValue(@Nullable String digestValue) {
            this.digestValue = Input.ofNullable(digestValue);
            return this;
        }

        public Builder dnskeyRecord(@Nullable Input<String> dnskeyRecord) {
            this.dnskeyRecord = dnskeyRecord;
            return this;
        }

        public Builder dnskeyRecord(@Nullable String dnskeyRecord) {
            this.dnskeyRecord = Input.ofNullable(dnskeyRecord);
            return this;
        }

        public Builder dsRecord(@Nullable Input<String> dsRecord) {
            this.dsRecord = dsRecord;
            return this;
        }

        public Builder dsRecord(@Nullable String dsRecord) {
            this.dsRecord = Input.ofNullable(dsRecord);
            return this;
        }

        public Builder flag(@Nullable Input<Integer> flag) {
            this.flag = flag;
            return this;
        }

        public Builder flag(@Nullable Integer flag) {
            this.flag = Input.ofNullable(flag);
            return this;
        }

        public Builder hostedZoneId(@Nullable Input<String> hostedZoneId) {
            this.hostedZoneId = hostedZoneId;
            return this;
        }

        public Builder hostedZoneId(@Nullable String hostedZoneId) {
            this.hostedZoneId = Input.ofNullable(hostedZoneId);
            return this;
        }

        public Builder keyManagementServiceArn(@Nullable Input<String> keyManagementServiceArn) {
            this.keyManagementServiceArn = keyManagementServiceArn;
            return this;
        }

        public Builder keyManagementServiceArn(@Nullable String keyManagementServiceArn) {
            this.keyManagementServiceArn = Input.ofNullable(keyManagementServiceArn);
            return this;
        }

        public Builder keyTag(@Nullable Input<Integer> keyTag) {
            this.keyTag = keyTag;
            return this;
        }

        public Builder keyTag(@Nullable Integer keyTag) {
            this.keyTag = Input.ofNullable(keyTag);
            return this;
        }

        public Builder name(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder publicKey(@Nullable Input<String> publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public Builder publicKey(@Nullable String publicKey) {
            this.publicKey = Input.ofNullable(publicKey);
            return this;
        }

        public Builder signingAlgorithmMnemonic(@Nullable Input<String> signingAlgorithmMnemonic) {
            this.signingAlgorithmMnemonic = signingAlgorithmMnemonic;
            return this;
        }

        public Builder signingAlgorithmMnemonic(@Nullable String signingAlgorithmMnemonic) {
            this.signingAlgorithmMnemonic = Input.ofNullable(signingAlgorithmMnemonic);
            return this;
        }

        public Builder signingAlgorithmType(@Nullable Input<Integer> signingAlgorithmType) {
            this.signingAlgorithmType = signingAlgorithmType;
            return this;
        }

        public Builder signingAlgorithmType(@Nullable Integer signingAlgorithmType) {
            this.signingAlgorithmType = Input.ofNullable(signingAlgorithmType);
            return this;
        }

        public Builder status(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }
        public KeySigningKeyState build() {
            return new KeySigningKeyState(digestAlgorithmMnemonic, digestAlgorithmType, digestValue, dnskeyRecord, dsRecord, flag, hostedZoneId, keyManagementServiceArn, keyTag, name, publicKey, signingAlgorithmMnemonic, signingAlgorithmType, status);
        }
    }
}
