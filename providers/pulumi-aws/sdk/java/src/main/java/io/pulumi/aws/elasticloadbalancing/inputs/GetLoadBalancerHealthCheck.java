// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.elasticloadbalancing.inputs;

import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetLoadBalancerHealthCheck extends io.pulumi.resources.InvokeArgs {

    public static final GetLoadBalancerHealthCheck Empty = new GetLoadBalancerHealthCheck();

    @InputImport(name="healthyThreshold", required=true)
      private final Integer healthyThreshold;

    public Integer getHealthyThreshold() {
        return this.healthyThreshold;
    }

    @InputImport(name="interval", required=true)
      private final Integer interval;

    public Integer getInterval() {
        return this.interval;
    }

    @InputImport(name="target", required=true)
      private final String target;

    public String getTarget() {
        return this.target;
    }

    @InputImport(name="timeout", required=true)
      private final Integer timeout;

    public Integer getTimeout() {
        return this.timeout;
    }

    @InputImport(name="unhealthyThreshold", required=true)
      private final Integer unhealthyThreshold;

    public Integer getUnhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    public GetLoadBalancerHealthCheck(
        Integer healthyThreshold,
        Integer interval,
        String target,
        Integer timeout,
        Integer unhealthyThreshold) {
        this.healthyThreshold = Objects.requireNonNull(healthyThreshold, "expected parameter 'healthyThreshold' to be non-null");
        this.interval = Objects.requireNonNull(interval, "expected parameter 'interval' to be non-null");
        this.target = Objects.requireNonNull(target, "expected parameter 'target' to be non-null");
        this.timeout = Objects.requireNonNull(timeout, "expected parameter 'timeout' to be non-null");
        this.unhealthyThreshold = Objects.requireNonNull(unhealthyThreshold, "expected parameter 'unhealthyThreshold' to be non-null");
    }

    private GetLoadBalancerHealthCheck() {
        this.healthyThreshold = null;
        this.interval = null;
        this.target = null;
        this.timeout = null;
        this.unhealthyThreshold = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerHealthCheck defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer healthyThreshold;
        private Integer interval;
        private String target;
        private Integer timeout;
        private Integer unhealthyThreshold;

        public Builder() {
    	      // Empty
        }

        public Builder(GetLoadBalancerHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.interval = defaults.interval;
    	      this.target = defaults.target;
    	      this.timeout = defaults.timeout;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        public Builder healthyThreshold(Integer healthyThreshold) {
            this.healthyThreshold = Objects.requireNonNull(healthyThreshold);
            return this;
        }

        public Builder interval(Integer interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }

        public Builder target(String target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }

        public Builder timeout(Integer timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }

        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            this.unhealthyThreshold = Objects.requireNonNull(unhealthyThreshold);
            return this;
        }
        public GetLoadBalancerHealthCheck build() {
            return new GetLoadBalancerHealthCheck(healthyThreshold, interval, target, timeout, unhealthyThreshold);
        }
    }
}
