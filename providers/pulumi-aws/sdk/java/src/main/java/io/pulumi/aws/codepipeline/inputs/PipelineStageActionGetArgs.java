// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codepipeline.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PipelineStageActionGetArgs extends io.pulumi.resources.ResourceArgs {

    public static final PipelineStageActionGetArgs Empty = new PipelineStageActionGetArgs();

    /**
     * A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are `Approval`, `Build`, `Deploy`, `Invoke`, `Source` and `Test`.
     * 
     */
    @InputImport(name="category", required=true)
    private final Input<String> category;

    public Input<String> getCategory() {
        return this.category;
    }

    /**
     * A map of the action declaration's configuration. Configurations options for action types and providers can be found in the [Pipeline Structure Reference](http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements) and [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
     * 
     */
    @InputImport(name="configuration")
    private final @Nullable Input<Map<String,String>> configuration;

    public Input<Map<String,String>> getConfiguration() {
        return this.configuration == null ? Input.empty() : this.configuration;
    }

    /**
     * A list of artifact names to be worked on.
     * 
     */
    @InputImport(name="inputArtifacts")
    private final @Nullable Input<List<String>> inputArtifacts;

    public Input<List<String>> getInputArtifacts() {
        return this.inputArtifacts == null ? Input.empty() : this.inputArtifacts;
    }

    /**
     * The action declaration's name.
     * 
     */
    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * The namespace all output variables will be accessed from.
     * 
     */
    @InputImport(name="namespace")
    private final @Nullable Input<String> namespace;

    public Input<String> getNamespace() {
        return this.namespace == null ? Input.empty() : this.namespace;
    }

    /**
     * A list of artifact names to output. Output artifact names must be unique within a pipeline.
     * 
     */
    @InputImport(name="outputArtifacts")
    private final @Nullable Input<List<String>> outputArtifacts;

    public Input<List<String>> getOutputArtifacts() {
        return this.outputArtifacts == null ? Input.empty() : this.outputArtifacts;
    }

    /**
     * The creator of the action being called. Possible values are `AWS`, `Custom` and `ThirdParty`.
     * 
     */
    @InputImport(name="owner", required=true)
    private final Input<String> owner;

    public Input<String> getOwner() {
        return this.owner;
    }

    /**
     * The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
     * 
     */
    @InputImport(name="provider", required=true)
    private final Input<String> provider;

    public Input<String> getProvider() {
        return this.provider;
    }

    /**
     * The region in which to run the action.
     * 
     */
    @InputImport(name="region")
    private final @Nullable Input<String> region;

    public Input<String> getRegion() {
        return this.region == null ? Input.empty() : this.region;
    }

    /**
     * The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
     * 
     */
    @InputImport(name="roleArn")
    private final @Nullable Input<String> roleArn;

    public Input<String> getRoleArn() {
        return this.roleArn == null ? Input.empty() : this.roleArn;
    }

    /**
     * The order in which actions are run.
     * 
     */
    @InputImport(name="runOrder")
    private final @Nullable Input<Integer> runOrder;

    public Input<Integer> getRunOrder() {
        return this.runOrder == null ? Input.empty() : this.runOrder;
    }

    /**
     * A string that identifies the action type.
     * 
     */
    @InputImport(name="version", required=true)
    private final Input<String> version;

    public Input<String> getVersion() {
        return this.version;
    }

    public PipelineStageActionGetArgs(
        Input<String> category,
        @Nullable Input<Map<String,String>> configuration,
        @Nullable Input<List<String>> inputArtifacts,
        Input<String> name,
        @Nullable Input<String> namespace,
        @Nullable Input<List<String>> outputArtifacts,
        Input<String> owner,
        Input<String> provider,
        @Nullable Input<String> region,
        @Nullable Input<String> roleArn,
        @Nullable Input<Integer> runOrder,
        Input<String> version) {
        this.category = Objects.requireNonNull(category, "expected parameter 'category' to be non-null");
        this.configuration = configuration;
        this.inputArtifacts = inputArtifacts;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.namespace = namespace;
        this.outputArtifacts = outputArtifacts;
        this.owner = Objects.requireNonNull(owner, "expected parameter 'owner' to be non-null");
        this.provider = Objects.requireNonNull(provider, "expected parameter 'provider' to be non-null");
        this.region = region;
        this.roleArn = roleArn;
        this.runOrder = runOrder;
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
    }

    private PipelineStageActionGetArgs() {
        this.category = Input.empty();
        this.configuration = Input.empty();
        this.inputArtifacts = Input.empty();
        this.name = Input.empty();
        this.namespace = Input.empty();
        this.outputArtifacts = Input.empty();
        this.owner = Input.empty();
        this.provider = Input.empty();
        this.region = Input.empty();
        this.roleArn = Input.empty();
        this.runOrder = Input.empty();
        this.version = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineStageActionGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> category;
        private @Nullable Input<Map<String,String>> configuration;
        private @Nullable Input<List<String>> inputArtifacts;
        private Input<String> name;
        private @Nullable Input<String> namespace;
        private @Nullable Input<List<String>> outputArtifacts;
        private Input<String> owner;
        private Input<String> provider;
        private @Nullable Input<String> region;
        private @Nullable Input<String> roleArn;
        private @Nullable Input<Integer> runOrder;
        private Input<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineStageActionGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.configuration = defaults.configuration;
    	      this.inputArtifacts = defaults.inputArtifacts;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.outputArtifacts = defaults.outputArtifacts;
    	      this.owner = defaults.owner;
    	      this.provider = defaults.provider;
    	      this.region = defaults.region;
    	      this.roleArn = defaults.roleArn;
    	      this.runOrder = defaults.runOrder;
    	      this.version = defaults.version;
        }

        public Builder setCategory(Input<String> category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }

        public Builder setCategory(String category) {
            this.category = Input.of(Objects.requireNonNull(category));
            return this;
        }

        public Builder setConfiguration(@Nullable Input<Map<String,String>> configuration) {
            this.configuration = configuration;
            return this;
        }

        public Builder setConfiguration(@Nullable Map<String,String> configuration) {
            this.configuration = Input.ofNullable(configuration);
            return this;
        }

        public Builder setInputArtifacts(@Nullable Input<List<String>> inputArtifacts) {
            this.inputArtifacts = inputArtifacts;
            return this;
        }

        public Builder setInputArtifacts(@Nullable List<String> inputArtifacts) {
            this.inputArtifacts = Input.ofNullable(inputArtifacts);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setNamespace(@Nullable Input<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder setNamespace(@Nullable String namespace) {
            this.namespace = Input.ofNullable(namespace);
            return this;
        }

        public Builder setOutputArtifacts(@Nullable Input<List<String>> outputArtifacts) {
            this.outputArtifacts = outputArtifacts;
            return this;
        }

        public Builder setOutputArtifacts(@Nullable List<String> outputArtifacts) {
            this.outputArtifacts = Input.ofNullable(outputArtifacts);
            return this;
        }

        public Builder setOwner(Input<String> owner) {
            this.owner = Objects.requireNonNull(owner);
            return this;
        }

        public Builder setOwner(String owner) {
            this.owner = Input.of(Objects.requireNonNull(owner));
            return this;
        }

        public Builder setProvider(Input<String> provider) {
            this.provider = Objects.requireNonNull(provider);
            return this;
        }

        public Builder setProvider(String provider) {
            this.provider = Input.of(Objects.requireNonNull(provider));
            return this;
        }

        public Builder setRegion(@Nullable Input<String> region) {
            this.region = region;
            return this;
        }

        public Builder setRegion(@Nullable String region) {
            this.region = Input.ofNullable(region);
            return this;
        }

        public Builder setRoleArn(@Nullable Input<String> roleArn) {
            this.roleArn = roleArn;
            return this;
        }

        public Builder setRoleArn(@Nullable String roleArn) {
            this.roleArn = Input.ofNullable(roleArn);
            return this;
        }

        public Builder setRunOrder(@Nullable Input<Integer> runOrder) {
            this.runOrder = runOrder;
            return this;
        }

        public Builder setRunOrder(@Nullable Integer runOrder) {
            this.runOrder = Input.ofNullable(runOrder);
            return this;
        }

        public Builder setVersion(Input<String> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }

        public Builder setVersion(String version) {
            this.version = Input.of(Objects.requireNonNull(version));
            return this;
        }
        public PipelineStageActionGetArgs build() {
            return new PipelineStageActionGetArgs(category, configuration, inputArtifacts, name, namespace, outputArtifacts, owner, provider, region, roleArn, runOrder, version);
        }
    }
}
