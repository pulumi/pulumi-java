// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.aws.ec2.inputs.GetAmiFilter;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAmiArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetAmiArgs Empty = new GetAmiArgs();

    /**
     * Limit search to users with *explicit* launch permission on
     * the image. Valid items are the numeric account ID or `self`.
     * 
     */
    @Import(name="executableUsers")
      private final @Nullable List<String> executableUsers;

    public List<String> getExecutableUsers() {
        return this.executableUsers == null ? List.of() : this.executableUsers;
    }

    /**
     * One or more name/value pairs to filter off of. There are
     * several valid keys, for a full reference, check out
     * [describe-images in the AWS CLI reference][1].
     * 
     */
    @Import(name="filters")
      private final @Nullable List<GetAmiFilter> filters;

    public List<GetAmiFilter> getFilters() {
        return this.filters == null ? List.of() : this.filters;
    }

    /**
     * If more than one result is returned, use the most
     * recent AMI.
     * 
     */
    @Import(name="mostRecent")
      private final @Nullable Boolean mostRecent;

    public Optional<Boolean> getMostRecent() {
        return this.mostRecent == null ? Optional.empty() : Optional.ofNullable(this.mostRecent);
    }

    /**
     * A regex string to apply to the AMI list returned
     * by AWS. This allows more advanced filtering not supported from the AWS API. This
     * filtering is done locally on what AWS returns, and could have a performance
     * impact if the result is large. It is recommended to combine this with other
     * options to narrow down the list AWS returns.
     * 
     */
    @Import(name="nameRegex")
      private final @Nullable String nameRegex;

    public Optional<String> getNameRegex() {
        return this.nameRegex == null ? Optional.empty() : Optional.ofNullable(this.nameRegex);
    }

    /**
     * List of AMI owners to limit search. At least 1 value must be specified. Valid values: an AWS account ID, `self` (the current account), or an AWS owner alias (e.g., `amazon`, `aws-marketplace`, `microsoft`).
     * 
     */
    @Import(name="owners", required=true)
      private final List<String> owners;

    public List<String> getOwners() {
        return this.owners;
    }

    /**
     * Any tags assigned to the image.
     * * `tags.#.key` - The key name of the tag.
     * * `tags.#.value` - The value of the tag.
     * 
     */
    @Import(name="tags")
      private final @Nullable Map<String,String> tags;

    public Map<String,String> getTags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public GetAmiArgs(
        @Nullable List<String> executableUsers,
        @Nullable List<GetAmiFilter> filters,
        @Nullable Boolean mostRecent,
        @Nullable String nameRegex,
        List<String> owners,
        @Nullable Map<String,String> tags) {
        this.executableUsers = executableUsers;
        this.filters = filters;
        this.mostRecent = mostRecent;
        this.nameRegex = nameRegex;
        this.owners = Objects.requireNonNull(owners, "expected parameter 'owners' to be non-null");
        this.tags = tags;
    }

    private GetAmiArgs() {
        this.executableUsers = List.of();
        this.filters = List.of();
        this.mostRecent = null;
        this.nameRegex = null;
        this.owners = List.of();
        this.tags = Map.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAmiArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> executableUsers;
        private @Nullable List<GetAmiFilter> filters;
        private @Nullable Boolean mostRecent;
        private @Nullable String nameRegex;
        private List<String> owners;
        private @Nullable Map<String,String> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAmiArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.executableUsers = defaults.executableUsers;
    	      this.filters = defaults.filters;
    	      this.mostRecent = defaults.mostRecent;
    	      this.nameRegex = defaults.nameRegex;
    	      this.owners = defaults.owners;
    	      this.tags = defaults.tags;
        }

        public Builder executableUsers(@Nullable List<String> executableUsers) {
            this.executableUsers = executableUsers;
            return this;
        }
        public Builder executableUsers(String... executableUsers) {
            return executableUsers(List.of(executableUsers));
        }
        public Builder filters(@Nullable List<GetAmiFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetAmiFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder mostRecent(@Nullable Boolean mostRecent) {
            this.mostRecent = mostRecent;
            return this;
        }
        public Builder nameRegex(@Nullable String nameRegex) {
            this.nameRegex = nameRegex;
            return this;
        }
        public Builder owners(List<String> owners) {
            this.owners = Objects.requireNonNull(owners);
            return this;
        }
        public Builder owners(String... owners) {
            return owners(List.of(owners));
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }        public GetAmiArgs build() {
            return new GetAmiArgs(executableUsers, filters, mostRecent, nameRegex, owners, tags);
        }
    }
}
