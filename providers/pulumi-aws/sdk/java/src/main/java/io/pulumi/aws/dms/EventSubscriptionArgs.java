// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.dms;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EventSubscriptionArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventSubscriptionArgs Empty = new EventSubscriptionArgs();

    /**
     * Whether the event subscription should be enabled.
     * 
     */
    @InputImport(name="enabled")
    private final @Nullable Input<Boolean> enabled;

    public Input<Boolean> getEnabled() {
        return this.enabled == null ? Input.empty() : this.enabled;
    }

    /**
     * List of event categories to listen for, see `DescribeEventCategories` for a canonical list.
     * 
     */
    @InputImport(name="eventCategories", required=true)
    private final Input<List<String>> eventCategories;

    public Input<List<String>> getEventCategories() {
        return this.eventCategories;
    }

    /**
     * Name of event subscription.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * SNS topic arn to send events on.
     * 
     */
    @InputImport(name="snsTopicArn", required=true)
    private final Input<String> snsTopicArn;

    public Input<String> getSnsTopicArn() {
        return this.snsTopicArn;
    }

    /**
     * Ids of sources to listen to.
     * 
     */
    @InputImport(name="sourceIds")
    private final @Nullable Input<List<String>> sourceIds;

    public Input<List<String>> getSourceIds() {
        return this.sourceIds == null ? Input.empty() : this.sourceIds;
    }

    /**
     * Type of source for events. Valid values: `replication-instance` or `replication-task`
     * 
     */
    @InputImport(name="sourceType")
    private final @Nullable Input<String> sourceType;

    public Input<String> getSourceType() {
        return this.sourceType == null ? Input.empty() : this.sourceType;
    }

    /**
     * Map of resource tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    public EventSubscriptionArgs(
        @Nullable Input<Boolean> enabled,
        Input<List<String>> eventCategories,
        @Nullable Input<String> name,
        Input<String> snsTopicArn,
        @Nullable Input<List<String>> sourceIds,
        @Nullable Input<String> sourceType,
        @Nullable Input<Map<String,String>> tags) {
        this.enabled = enabled;
        this.eventCategories = Objects.requireNonNull(eventCategories, "expected parameter 'eventCategories' to be non-null");
        this.name = name;
        this.snsTopicArn = Objects.requireNonNull(snsTopicArn, "expected parameter 'snsTopicArn' to be non-null");
        this.sourceIds = sourceIds;
        this.sourceType = sourceType;
        this.tags = tags;
    }

    private EventSubscriptionArgs() {
        this.enabled = Input.empty();
        this.eventCategories = Input.empty();
        this.name = Input.empty();
        this.snsTopicArn = Input.empty();
        this.sourceIds = Input.empty();
        this.sourceType = Input.empty();
        this.tags = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> enabled;
        private Input<List<String>> eventCategories;
        private @Nullable Input<String> name;
        private Input<String> snsTopicArn;
        private @Nullable Input<List<String>> sourceIds;
        private @Nullable Input<String> sourceType;
        private @Nullable Input<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(EventSubscriptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.eventCategories = defaults.eventCategories;
    	      this.name = defaults.name;
    	      this.snsTopicArn = defaults.snsTopicArn;
    	      this.sourceIds = defaults.sourceIds;
    	      this.sourceType = defaults.sourceType;
    	      this.tags = defaults.tags;
        }

        public Builder setEnabled(@Nullable Input<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder setEnabled(@Nullable Boolean enabled) {
            this.enabled = Input.ofNullable(enabled);
            return this;
        }

        public Builder setEventCategories(Input<List<String>> eventCategories) {
            this.eventCategories = Objects.requireNonNull(eventCategories);
            return this;
        }

        public Builder setEventCategories(List<String> eventCategories) {
            this.eventCategories = Input.of(Objects.requireNonNull(eventCategories));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setSnsTopicArn(Input<String> snsTopicArn) {
            this.snsTopicArn = Objects.requireNonNull(snsTopicArn);
            return this;
        }

        public Builder setSnsTopicArn(String snsTopicArn) {
            this.snsTopicArn = Input.of(Objects.requireNonNull(snsTopicArn));
            return this;
        }

        public Builder setSourceIds(@Nullable Input<List<String>> sourceIds) {
            this.sourceIds = sourceIds;
            return this;
        }

        public Builder setSourceIds(@Nullable List<String> sourceIds) {
            this.sourceIds = Input.ofNullable(sourceIds);
            return this;
        }

        public Builder setSourceType(@Nullable Input<String> sourceType) {
            this.sourceType = sourceType;
            return this;
        }

        public Builder setSourceType(@Nullable String sourceType) {
            this.sourceType = Input.ofNullable(sourceType);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }
        public EventSubscriptionArgs build() {
            return new EventSubscriptionArgs(enabled, eventCategories, name, snsTopicArn, sourceIds, sourceType, tags);
        }
    }
}
