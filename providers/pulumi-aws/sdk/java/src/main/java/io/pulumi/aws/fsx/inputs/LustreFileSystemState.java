// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LustreFileSystemState extends io.pulumi.resources.ResourceArgs {

    public static final LustreFileSystemState Empty = new LustreFileSystemState();

    /**
     * Amazon Resource Name of the file system.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * How Amazon FSx keeps your file and directory listings up to date as you add or modify objects in your linked S3 bucket. see [Auto Import Data Repo](https://docs.aws.amazon.com/fsx/latest/LustreGuide/autoimport-data-repo.html) for more details. Only supported on `PERSISTENT_1` deployment types.
     * 
     */
    @InputImport(name="autoImportPolicy")
    private final @Nullable Input<String> autoImportPolicy;

    public Input<String> getAutoImportPolicy() {
        return this.autoImportPolicy == null ? Input.empty() : this.autoImportPolicy;
    }

    /**
     * The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. only valid for `PERSISTENT_1` and `PERSISTENT_2` deployment_type.
     * 
     */
    @InputImport(name="automaticBackupRetentionDays")
    private final @Nullable Input<Integer> automaticBackupRetentionDays;

    public Input<Integer> getAutomaticBackupRetentionDays() {
        return this.automaticBackupRetentionDays == null ? Input.empty() : this.automaticBackupRetentionDays;
    }

    /**
     * The ID of the source backup to create the filesystem from.
     * 
     */
    @InputImport(name="backupId")
    private final @Nullable Input<String> backupId;

    public Input<String> getBackupId() {
        return this.backupId == null ? Input.empty() : this.backupId;
    }

    /**
     * A boolean flag indicating whether tags for the file system should be copied to backups. Applicable for `PERSISTENT_1` and `PERSISTENT_2` deployment_type. The default value is false.
     * 
     */
    @InputImport(name="copyTagsToBackups")
    private final @Nullable Input<Boolean> copyTagsToBackups;

    public Input<Boolean> getCopyTagsToBackups() {
        return this.copyTagsToBackups == null ? Input.empty() : this.copyTagsToBackups;
    }

    /**
     * A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. only valid for `PERSISTENT_1` and `PERSISTENT_2` deployment_type. Requires `automatic_backup_retention_days` to be set.
     * 
     */
    @InputImport(name="dailyAutomaticBackupStartTime")
    private final @Nullable Input<String> dailyAutomaticBackupStartTime;

    public Input<String> getDailyAutomaticBackupStartTime() {
        return this.dailyAutomaticBackupStartTime == null ? Input.empty() : this.dailyAutomaticBackupStartTime;
    }

    /**
     * Sets the data compression configuration for the file system. Valid values are `LZ4` and `NONE`. Default value is `NONE`. Unsetting this value reverts the compression type back to `NONE`.
     * 
     */
    @InputImport(name="dataCompressionType")
    private final @Nullable Input<String> dataCompressionType;

    public Input<String> getDataCompressionType() {
        return this.dataCompressionType == null ? Input.empty() : this.dataCompressionType;
    }

    /**
     * - The filesystem deployment type. One of: `SCRATCH_1`, `SCRATCH_2`, `PERSISTENT_1`, `PERSISTENT_2`.
     * 
     */
    @InputImport(name="deploymentType")
    private final @Nullable Input<String> deploymentType;

    public Input<String> getDeploymentType() {
        return this.deploymentType == null ? Input.empty() : this.deploymentType;
    }

    /**
     * DNS name for the file system, e.g., `fs-12345678.fsx.us-west-2.amazonaws.com`
     * 
     */
    @InputImport(name="dnsName")
    private final @Nullable Input<String> dnsName;

    public Input<String> getDnsName() {
        return this.dnsName == null ? Input.empty() : this.dnsName;
    }

    /**
     * - The type of drive cache used by `PERSISTENT_1` filesystems that are provisioned with `HDD` storage_type. Required for `HDD` storage_type, set to either `READ` or `NONE`.
     * 
     */
    @InputImport(name="driveCacheType")
    private final @Nullable Input<String> driveCacheType;

    public Input<String> getDriveCacheType() {
        return this.driveCacheType == null ? Input.empty() : this.driveCacheType;
    }

    /**
     * S3 URI (with optional prefix) where the root of your Amazon FSx file system is exported. Can only be specified with `import_path` argument and the path must use the same Amazon S3 bucket as specified in `import_path`. Set equal to `import_path` to overwrite files on export. Defaults to `s3://{IMPORT BUCKET}/FSxLustre{CREATION TIMESTAMP}`. Only supported on `PERSISTENT_1` deployment types.
     * 
     */
    @InputImport(name="exportPath")
    private final @Nullable Input<String> exportPath;

    public Input<String> getExportPath() {
        return this.exportPath == null ? Input.empty() : this.exportPath;
    }

    /**
     * Sets the Lustre version for the file system that you're creating. Valid values are 2.10 for `SCRATCH_1`, `SCRATCH_2` and `PERSISTENT_1` deployment types. Valid values for 2.12 include all deployment types.
     * 
     */
    @InputImport(name="fileSystemTypeVersion")
    private final @Nullable Input<String> fileSystemTypeVersion;

    public Input<String> getFileSystemTypeVersion() {
        return this.fileSystemTypeVersion == null ? Input.empty() : this.fileSystemTypeVersion;
    }

    /**
     * S3 URI (with optional prefix) that you're using as the data repository for your FSx for Lustre file system. For example, `s3://example-bucket/optional-prefix/`. Only supported on `PERSISTENT_1` deployment types.
     * 
     */
    @InputImport(name="importPath")
    private final @Nullable Input<String> importPath;

    public Input<String> getImportPath() {
        return this.importPath == null ? Input.empty() : this.importPath;
    }

    /**
     * For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. Can only be specified with `import_path` argument. Defaults to `1024`. Minimum of `1` and maximum of `512000`. Only supported on `PERSISTENT_1` deployment types.
     * 
     */
    @InputImport(name="importedFileChunkSize")
    private final @Nullable Input<Integer> importedFileChunkSize;

    public Input<Integer> getImportedFileChunkSize() {
        return this.importedFileChunkSize == null ? Input.empty() : this.importedFileChunkSize;
    }

    /**
     * ARN for the KMS Key to encrypt the file system at rest, applicable for `PERSISTENT_1` and `PERSISTENT_2` deployment_type. Defaults to an AWS managed KMS Key.
     * 
     */
    @InputImport(name="kmsKeyId")
    private final @Nullable Input<String> kmsKeyId;

    public Input<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Input.empty() : this.kmsKeyId;
    }

    /**
     * The value to be used when mounting the filesystem.
     * 
     */
    @InputImport(name="mountName")
    private final @Nullable Input<String> mountName;

    public Input<String> getMountName() {
        return this.mountName == null ? Input.empty() : this.mountName;
    }

    /**
     * Set of Elastic Network Interface identifiers from which the file system is accessible. As explained in the [documentation](https://docs.aws.amazon.com/fsx/latest/LustreGuide/mounting-on-premises.html), the first network interface returned is the primary network interface.
     * 
     */
    @InputImport(name="networkInterfaceIds")
    private final @Nullable Input<List<String>> networkInterfaceIds;

    public Input<List<String>> getNetworkInterfaceIds() {
        return this.networkInterfaceIds == null ? Input.empty() : this.networkInterfaceIds;
    }

    /**
     * AWS account identifier that created the file system.
     * 
     */
    @InputImport(name="ownerId")
    private final @Nullable Input<String> ownerId;

    public Input<String> getOwnerId() {
        return this.ownerId == null ? Input.empty() : this.ownerId;
    }

    /**
     * - Describes the amount of read and write throughput for each 1 tebibyte of storage, in MB/s/TiB, required for the `PERSISTENT_1` and `PERSISTENT_2` deployment_type. Valid values for `PERSISTENT_1` deployment_type and `SSD` storage_type are 50, 100, 200. Valid values for `PERSISTENT_1` deployment_type and `HDD` storage_type are 12, 40. Valid values for `PERSISTENT_2` deployment_type and `  SSD ` storage_type are 125, 250, 500, 1000.
     * 
     */
    @InputImport(name="perUnitStorageThroughput")
    private final @Nullable Input<Integer> perUnitStorageThroughput;

    public Input<Integer> getPerUnitStorageThroughput() {
        return this.perUnitStorageThroughput == null ? Input.empty() : this.perUnitStorageThroughput;
    }

    /**
     * A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
     * 
     */
    @InputImport(name="securityGroupIds")
    private final @Nullable Input<List<String>> securityGroupIds;

    public Input<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds == null ? Input.empty() : this.securityGroupIds;
    }

    /**
     * The storage capacity (GiB) of the file system. Minimum of `1200`. See more details at [Allowed values for Fsx storage capacity](https://docs.aws.amazon.com/fsx/latest/APIReference/API_CreateFileSystem.html#FSx-CreateFileSystem-request-StorageCapacity). Update is allowed only for `SCRATCH_2`, `PERSISTENT_1` and `PERSISTENT_2` deployment types, See more details at [Fsx Storage Capacity Update](https://docs.aws.amazon.com/fsx/latest/APIReference/API_UpdateFileSystem.html#FSx-UpdateFileSystem-request-StorageCapacity). Required when not creating filesystem for a backup.
     * 
     */
    @InputImport(name="storageCapacity")
    private final @Nullable Input<Integer> storageCapacity;

    public Input<Integer> getStorageCapacity() {
        return this.storageCapacity == null ? Input.empty() : this.storageCapacity;
    }

    /**
     * - The filesystem storage type. Either `SSD` or `HDD`, defaults to `SSD`. `HDD` is only supported on `PERSISTENT_1` deployment types.
     * 
     */
    @InputImport(name="storageType")
    private final @Nullable Input<String> storageType;

    public Input<String> getStorageType() {
        return this.storageType == null ? Input.empty() : this.storageType;
    }

    /**
     * A list of IDs for the subnets that the file system will be accessible from. File systems currently support only one subnet. The file server is also launched in that subnet's Availability Zone.
     * 
     */
    @InputImport(name="subnetIds")
    private final @Nullable Input<String> subnetIds;

    public Input<String> getSubnetIds() {
        return this.subnetIds == null ? Input.empty() : this.subnetIds;
    }

    /**
     * A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * Identifier of the Virtual Private Cloud for the file system.
     * 
     */
    @InputImport(name="vpcId")
    private final @Nullable Input<String> vpcId;

    public Input<String> getVpcId() {
        return this.vpcId == null ? Input.empty() : this.vpcId;
    }

    /**
     * The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
     * 
     */
    @InputImport(name="weeklyMaintenanceStartTime")
    private final @Nullable Input<String> weeklyMaintenanceStartTime;

    public Input<String> getWeeklyMaintenanceStartTime() {
        return this.weeklyMaintenanceStartTime == null ? Input.empty() : this.weeklyMaintenanceStartTime;
    }

    public LustreFileSystemState(
        @Nullable Input<String> arn,
        @Nullable Input<String> autoImportPolicy,
        @Nullable Input<Integer> automaticBackupRetentionDays,
        @Nullable Input<String> backupId,
        @Nullable Input<Boolean> copyTagsToBackups,
        @Nullable Input<String> dailyAutomaticBackupStartTime,
        @Nullable Input<String> dataCompressionType,
        @Nullable Input<String> deploymentType,
        @Nullable Input<String> dnsName,
        @Nullable Input<String> driveCacheType,
        @Nullable Input<String> exportPath,
        @Nullable Input<String> fileSystemTypeVersion,
        @Nullable Input<String> importPath,
        @Nullable Input<Integer> importedFileChunkSize,
        @Nullable Input<String> kmsKeyId,
        @Nullable Input<String> mountName,
        @Nullable Input<List<String>> networkInterfaceIds,
        @Nullable Input<String> ownerId,
        @Nullable Input<Integer> perUnitStorageThroughput,
        @Nullable Input<List<String>> securityGroupIds,
        @Nullable Input<Integer> storageCapacity,
        @Nullable Input<String> storageType,
        @Nullable Input<String> subnetIds,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> vpcId,
        @Nullable Input<String> weeklyMaintenanceStartTime) {
        this.arn = arn;
        this.autoImportPolicy = autoImportPolicy;
        this.automaticBackupRetentionDays = automaticBackupRetentionDays;
        this.backupId = backupId;
        this.copyTagsToBackups = copyTagsToBackups;
        this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
        this.dataCompressionType = dataCompressionType;
        this.deploymentType = deploymentType;
        this.dnsName = dnsName;
        this.driveCacheType = driveCacheType;
        this.exportPath = exportPath;
        this.fileSystemTypeVersion = fileSystemTypeVersion;
        this.importPath = importPath;
        this.importedFileChunkSize = importedFileChunkSize;
        this.kmsKeyId = kmsKeyId;
        this.mountName = mountName;
        this.networkInterfaceIds = networkInterfaceIds;
        this.ownerId = ownerId;
        this.perUnitStorageThroughput = perUnitStorageThroughput;
        this.securityGroupIds = securityGroupIds;
        this.storageCapacity = storageCapacity;
        this.storageType = storageType;
        this.subnetIds = subnetIds;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcId = vpcId;
        this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
    }

    private LustreFileSystemState() {
        this.arn = Input.empty();
        this.autoImportPolicy = Input.empty();
        this.automaticBackupRetentionDays = Input.empty();
        this.backupId = Input.empty();
        this.copyTagsToBackups = Input.empty();
        this.dailyAutomaticBackupStartTime = Input.empty();
        this.dataCompressionType = Input.empty();
        this.deploymentType = Input.empty();
        this.dnsName = Input.empty();
        this.driveCacheType = Input.empty();
        this.exportPath = Input.empty();
        this.fileSystemTypeVersion = Input.empty();
        this.importPath = Input.empty();
        this.importedFileChunkSize = Input.empty();
        this.kmsKeyId = Input.empty();
        this.mountName = Input.empty();
        this.networkInterfaceIds = Input.empty();
        this.ownerId = Input.empty();
        this.perUnitStorageThroughput = Input.empty();
        this.securityGroupIds = Input.empty();
        this.storageCapacity = Input.empty();
        this.storageType = Input.empty();
        this.subnetIds = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.vpcId = Input.empty();
        this.weeklyMaintenanceStartTime = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LustreFileSystemState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> autoImportPolicy;
        private @Nullable Input<Integer> automaticBackupRetentionDays;
        private @Nullable Input<String> backupId;
        private @Nullable Input<Boolean> copyTagsToBackups;
        private @Nullable Input<String> dailyAutomaticBackupStartTime;
        private @Nullable Input<String> dataCompressionType;
        private @Nullable Input<String> deploymentType;
        private @Nullable Input<String> dnsName;
        private @Nullable Input<String> driveCacheType;
        private @Nullable Input<String> exportPath;
        private @Nullable Input<String> fileSystemTypeVersion;
        private @Nullable Input<String> importPath;
        private @Nullable Input<Integer> importedFileChunkSize;
        private @Nullable Input<String> kmsKeyId;
        private @Nullable Input<String> mountName;
        private @Nullable Input<List<String>> networkInterfaceIds;
        private @Nullable Input<String> ownerId;
        private @Nullable Input<Integer> perUnitStorageThroughput;
        private @Nullable Input<List<String>> securityGroupIds;
        private @Nullable Input<Integer> storageCapacity;
        private @Nullable Input<String> storageType;
        private @Nullable Input<String> subnetIds;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> vpcId;
        private @Nullable Input<String> weeklyMaintenanceStartTime;

        public Builder() {
    	      // Empty
        }

        public Builder(LustreFileSystemState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.autoImportPolicy = defaults.autoImportPolicy;
    	      this.automaticBackupRetentionDays = defaults.automaticBackupRetentionDays;
    	      this.backupId = defaults.backupId;
    	      this.copyTagsToBackups = defaults.copyTagsToBackups;
    	      this.dailyAutomaticBackupStartTime = defaults.dailyAutomaticBackupStartTime;
    	      this.dataCompressionType = defaults.dataCompressionType;
    	      this.deploymentType = defaults.deploymentType;
    	      this.dnsName = defaults.dnsName;
    	      this.driveCacheType = defaults.driveCacheType;
    	      this.exportPath = defaults.exportPath;
    	      this.fileSystemTypeVersion = defaults.fileSystemTypeVersion;
    	      this.importPath = defaults.importPath;
    	      this.importedFileChunkSize = defaults.importedFileChunkSize;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.mountName = defaults.mountName;
    	      this.networkInterfaceIds = defaults.networkInterfaceIds;
    	      this.ownerId = defaults.ownerId;
    	      this.perUnitStorageThroughput = defaults.perUnitStorageThroughput;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.storageCapacity = defaults.storageCapacity;
    	      this.storageType = defaults.storageType;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcId = defaults.vpcId;
    	      this.weeklyMaintenanceStartTime = defaults.weeklyMaintenanceStartTime;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setAutoImportPolicy(@Nullable Input<String> autoImportPolicy) {
            this.autoImportPolicy = autoImportPolicy;
            return this;
        }

        public Builder setAutoImportPolicy(@Nullable String autoImportPolicy) {
            this.autoImportPolicy = Input.ofNullable(autoImportPolicy);
            return this;
        }

        public Builder setAutomaticBackupRetentionDays(@Nullable Input<Integer> automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = automaticBackupRetentionDays;
            return this;
        }

        public Builder setAutomaticBackupRetentionDays(@Nullable Integer automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = Input.ofNullable(automaticBackupRetentionDays);
            return this;
        }

        public Builder setBackupId(@Nullable Input<String> backupId) {
            this.backupId = backupId;
            return this;
        }

        public Builder setBackupId(@Nullable String backupId) {
            this.backupId = Input.ofNullable(backupId);
            return this;
        }

        public Builder setCopyTagsToBackups(@Nullable Input<Boolean> copyTagsToBackups) {
            this.copyTagsToBackups = copyTagsToBackups;
            return this;
        }

        public Builder setCopyTagsToBackups(@Nullable Boolean copyTagsToBackups) {
            this.copyTagsToBackups = Input.ofNullable(copyTagsToBackups);
            return this;
        }

        public Builder setDailyAutomaticBackupStartTime(@Nullable Input<String> dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
            return this;
        }

        public Builder setDailyAutomaticBackupStartTime(@Nullable String dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = Input.ofNullable(dailyAutomaticBackupStartTime);
            return this;
        }

        public Builder setDataCompressionType(@Nullable Input<String> dataCompressionType) {
            this.dataCompressionType = dataCompressionType;
            return this;
        }

        public Builder setDataCompressionType(@Nullable String dataCompressionType) {
            this.dataCompressionType = Input.ofNullable(dataCompressionType);
            return this;
        }

        public Builder setDeploymentType(@Nullable Input<String> deploymentType) {
            this.deploymentType = deploymentType;
            return this;
        }

        public Builder setDeploymentType(@Nullable String deploymentType) {
            this.deploymentType = Input.ofNullable(deploymentType);
            return this;
        }

        public Builder setDnsName(@Nullable Input<String> dnsName) {
            this.dnsName = dnsName;
            return this;
        }

        public Builder setDnsName(@Nullable String dnsName) {
            this.dnsName = Input.ofNullable(dnsName);
            return this;
        }

        public Builder setDriveCacheType(@Nullable Input<String> driveCacheType) {
            this.driveCacheType = driveCacheType;
            return this;
        }

        public Builder setDriveCacheType(@Nullable String driveCacheType) {
            this.driveCacheType = Input.ofNullable(driveCacheType);
            return this;
        }

        public Builder setExportPath(@Nullable Input<String> exportPath) {
            this.exportPath = exportPath;
            return this;
        }

        public Builder setExportPath(@Nullable String exportPath) {
            this.exportPath = Input.ofNullable(exportPath);
            return this;
        }

        public Builder setFileSystemTypeVersion(@Nullable Input<String> fileSystemTypeVersion) {
            this.fileSystemTypeVersion = fileSystemTypeVersion;
            return this;
        }

        public Builder setFileSystemTypeVersion(@Nullable String fileSystemTypeVersion) {
            this.fileSystemTypeVersion = Input.ofNullable(fileSystemTypeVersion);
            return this;
        }

        public Builder setImportPath(@Nullable Input<String> importPath) {
            this.importPath = importPath;
            return this;
        }

        public Builder setImportPath(@Nullable String importPath) {
            this.importPath = Input.ofNullable(importPath);
            return this;
        }

        public Builder setImportedFileChunkSize(@Nullable Input<Integer> importedFileChunkSize) {
            this.importedFileChunkSize = importedFileChunkSize;
            return this;
        }

        public Builder setImportedFileChunkSize(@Nullable Integer importedFileChunkSize) {
            this.importedFileChunkSize = Input.ofNullable(importedFileChunkSize);
            return this;
        }

        public Builder setKmsKeyId(@Nullable Input<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder setKmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Input.ofNullable(kmsKeyId);
            return this;
        }

        public Builder setMountName(@Nullable Input<String> mountName) {
            this.mountName = mountName;
            return this;
        }

        public Builder setMountName(@Nullable String mountName) {
            this.mountName = Input.ofNullable(mountName);
            return this;
        }

        public Builder setNetworkInterfaceIds(@Nullable Input<List<String>> networkInterfaceIds) {
            this.networkInterfaceIds = networkInterfaceIds;
            return this;
        }

        public Builder setNetworkInterfaceIds(@Nullable List<String> networkInterfaceIds) {
            this.networkInterfaceIds = Input.ofNullable(networkInterfaceIds);
            return this;
        }

        public Builder setOwnerId(@Nullable Input<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        public Builder setOwnerId(@Nullable String ownerId) {
            this.ownerId = Input.ofNullable(ownerId);
            return this;
        }

        public Builder setPerUnitStorageThroughput(@Nullable Input<Integer> perUnitStorageThroughput) {
            this.perUnitStorageThroughput = perUnitStorageThroughput;
            return this;
        }

        public Builder setPerUnitStorageThroughput(@Nullable Integer perUnitStorageThroughput) {
            this.perUnitStorageThroughput = Input.ofNullable(perUnitStorageThroughput);
            return this;
        }

        public Builder setSecurityGroupIds(@Nullable Input<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder setSecurityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Input.ofNullable(securityGroupIds);
            return this;
        }

        public Builder setStorageCapacity(@Nullable Input<Integer> storageCapacity) {
            this.storageCapacity = storageCapacity;
            return this;
        }

        public Builder setStorageCapacity(@Nullable Integer storageCapacity) {
            this.storageCapacity = Input.ofNullable(storageCapacity);
            return this;
        }

        public Builder setStorageType(@Nullable Input<String> storageType) {
            this.storageType = storageType;
            return this;
        }

        public Builder setStorageType(@Nullable String storageType) {
            this.storageType = Input.ofNullable(storageType);
            return this;
        }

        public Builder setSubnetIds(@Nullable Input<String> subnetIds) {
            this.subnetIds = subnetIds;
            return this;
        }

        public Builder setSubnetIds(@Nullable String subnetIds) {
            this.subnetIds = Input.ofNullable(subnetIds);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setVpcId(@Nullable Input<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }

        public Builder setVpcId(@Nullable String vpcId) {
            this.vpcId = Input.ofNullable(vpcId);
            return this;
        }

        public Builder setWeeklyMaintenanceStartTime(@Nullable Input<String> weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
            return this;
        }

        public Builder setWeeklyMaintenanceStartTime(@Nullable String weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = Input.ofNullable(weeklyMaintenanceStartTime);
            return this;
        }
        public LustreFileSystemState build() {
            return new LustreFileSystemState(arn, autoImportPolicy, automaticBackupRetentionDays, backupId, copyTagsToBackups, dailyAutomaticBackupStartTime, dataCompressionType, deploymentType, dnsName, driveCacheType, exportPath, fileSystemTypeVersion, importPath, importedFileChunkSize, kmsKeyId, mountName, networkInterfaceIds, ownerId, perUnitStorageThroughput, securityGroupIds, storageCapacity, storageType, subnetIds, tags, tagsAll, vpcId, weeklyMaintenanceStartTime);
        }
    }
}
