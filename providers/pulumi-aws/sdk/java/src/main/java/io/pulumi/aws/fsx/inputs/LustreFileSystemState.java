// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.fsx.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LustreFileSystemState extends io.pulumi.resources.ResourceArgs {

    public static final LustreFileSystemState Empty = new LustreFileSystemState();

    /**
     * Amazon Resource Name of the file system.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> getArn() {
        return this.arn == null ? Output.empty() : this.arn;
    }

    /**
     * How Amazon FSx keeps your file and directory listings up to date as you add or modify objects in your linked S3 bucket. see [Auto Import Data Repo](https://docs.aws.amazon.com/fsx/latest/LustreGuide/autoimport-data-repo.html) for more details. Only supported on `PERSISTENT_1` deployment types.
     * 
     */
    @InputImport(name="autoImportPolicy")
      private final @Nullable Output<String> autoImportPolicy;

    public Output<String> getAutoImportPolicy() {
        return this.autoImportPolicy == null ? Output.empty() : this.autoImportPolicy;
    }

    /**
     * The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. only valid for `PERSISTENT_1` and `PERSISTENT_2` deployment_type.
     * 
     */
    @InputImport(name="automaticBackupRetentionDays")
      private final @Nullable Output<Integer> automaticBackupRetentionDays;

    public Output<Integer> getAutomaticBackupRetentionDays() {
        return this.automaticBackupRetentionDays == null ? Output.empty() : this.automaticBackupRetentionDays;
    }

    /**
     * The ID of the source backup to create the filesystem from.
     * 
     */
    @InputImport(name="backupId")
      private final @Nullable Output<String> backupId;

    public Output<String> getBackupId() {
        return this.backupId == null ? Output.empty() : this.backupId;
    }

    /**
     * A boolean flag indicating whether tags for the file system should be copied to backups. Applicable for `PERSISTENT_1` and `PERSISTENT_2` deployment_type. The default value is false.
     * 
     */
    @InputImport(name="copyTagsToBackups")
      private final @Nullable Output<Boolean> copyTagsToBackups;

    public Output<Boolean> getCopyTagsToBackups() {
        return this.copyTagsToBackups == null ? Output.empty() : this.copyTagsToBackups;
    }

    /**
     * A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. only valid for `PERSISTENT_1` and `PERSISTENT_2` deployment_type. Requires `automatic_backup_retention_days` to be set.
     * 
     */
    @InputImport(name="dailyAutomaticBackupStartTime")
      private final @Nullable Output<String> dailyAutomaticBackupStartTime;

    public Output<String> getDailyAutomaticBackupStartTime() {
        return this.dailyAutomaticBackupStartTime == null ? Output.empty() : this.dailyAutomaticBackupStartTime;
    }

    /**
     * Sets the data compression configuration for the file system. Valid values are `LZ4` and `NONE`. Default value is `NONE`. Unsetting this value reverts the compression type back to `NONE`.
     * 
     */
    @InputImport(name="dataCompressionType")
      private final @Nullable Output<String> dataCompressionType;

    public Output<String> getDataCompressionType() {
        return this.dataCompressionType == null ? Output.empty() : this.dataCompressionType;
    }

    /**
     * - The filesystem deployment type. One of: `SCRATCH_1`, `SCRATCH_2`, `PERSISTENT_1`, `PERSISTENT_2`.
     * 
     */
    @InputImport(name="deploymentType")
      private final @Nullable Output<String> deploymentType;

    public Output<String> getDeploymentType() {
        return this.deploymentType == null ? Output.empty() : this.deploymentType;
    }

    /**
     * DNS name for the file system, e.g., `fs-12345678.fsx.us-west-2.amazonaws.com`
     * 
     */
    @InputImport(name="dnsName")
      private final @Nullable Output<String> dnsName;

    public Output<String> getDnsName() {
        return this.dnsName == null ? Output.empty() : this.dnsName;
    }

    /**
     * - The type of drive cache used by `PERSISTENT_1` filesystems that are provisioned with `HDD` storage_type. Required for `HDD` storage_type, set to either `READ` or `NONE`.
     * 
     */
    @InputImport(name="driveCacheType")
      private final @Nullable Output<String> driveCacheType;

    public Output<String> getDriveCacheType() {
        return this.driveCacheType == null ? Output.empty() : this.driveCacheType;
    }

    /**
     * S3 URI (with optional prefix) where the root of your Amazon FSx file system is exported. Can only be specified with `import_path` argument and the path must use the same Amazon S3 bucket as specified in `import_path`. Set equal to `import_path` to overwrite files on export. Defaults to `s3://{IMPORT BUCKET}/FSxLustre{CREATION TIMESTAMP}`. Only supported on `PERSISTENT_1` deployment types.
     * 
     */
    @InputImport(name="exportPath")
      private final @Nullable Output<String> exportPath;

    public Output<String> getExportPath() {
        return this.exportPath == null ? Output.empty() : this.exportPath;
    }

    /**
     * Sets the Lustre version for the file system that you're creating. Valid values are 2.10 for `SCRATCH_1`, `SCRATCH_2` and `PERSISTENT_1` deployment types. Valid values for 2.12 include all deployment types.
     * 
     */
    @InputImport(name="fileSystemTypeVersion")
      private final @Nullable Output<String> fileSystemTypeVersion;

    public Output<String> getFileSystemTypeVersion() {
        return this.fileSystemTypeVersion == null ? Output.empty() : this.fileSystemTypeVersion;
    }

    /**
     * S3 URI (with optional prefix) that you're using as the data repository for your FSx for Lustre file system. For example, `s3://example-bucket/optional-prefix/`. Only supported on `PERSISTENT_1` deployment types.
     * 
     */
    @InputImport(name="importPath")
      private final @Nullable Output<String> importPath;

    public Output<String> getImportPath() {
        return this.importPath == null ? Output.empty() : this.importPath;
    }

    /**
     * For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. Can only be specified with `import_path` argument. Defaults to `1024`. Minimum of `1` and maximum of `512000`. Only supported on `PERSISTENT_1` deployment types.
     * 
     */
    @InputImport(name="importedFileChunkSize")
      private final @Nullable Output<Integer> importedFileChunkSize;

    public Output<Integer> getImportedFileChunkSize() {
        return this.importedFileChunkSize == null ? Output.empty() : this.importedFileChunkSize;
    }

    /**
     * ARN for the KMS Key to encrypt the file system at rest, applicable for `PERSISTENT_1` and `PERSISTENT_2` deployment_type. Defaults to an AWS managed KMS Key.
     * 
     */
    @InputImport(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> getKmsKeyId() {
        return this.kmsKeyId == null ? Output.empty() : this.kmsKeyId;
    }

    /**
     * The value to be used when mounting the filesystem.
     * 
     */
    @InputImport(name="mountName")
      private final @Nullable Output<String> mountName;

    public Output<String> getMountName() {
        return this.mountName == null ? Output.empty() : this.mountName;
    }

    /**
     * Set of Elastic Network Interface identifiers from which the file system is accessible. As explained in the [documentation](https://docs.aws.amazon.com/fsx/latest/LustreGuide/mounting-on-premises.html), the first network interface returned is the primary network interface.
     * 
     */
    @InputImport(name="networkInterfaceIds")
      private final @Nullable Output<List<String>> networkInterfaceIds;

    public Output<List<String>> getNetworkInterfaceIds() {
        return this.networkInterfaceIds == null ? Output.empty() : this.networkInterfaceIds;
    }

    /**
     * AWS account identifier that created the file system.
     * 
     */
    @InputImport(name="ownerId")
      private final @Nullable Output<String> ownerId;

    public Output<String> getOwnerId() {
        return this.ownerId == null ? Output.empty() : this.ownerId;
    }

    /**
     * - Describes the amount of read and write throughput for each 1 tebibyte of storage, in MB/s/TiB, required for the `PERSISTENT_1` and `PERSISTENT_2` deployment_type. Valid values for `PERSISTENT_1` deployment_type and `SSD` storage_type are 50, 100, 200. Valid values for `PERSISTENT_1` deployment_type and `HDD` storage_type are 12, 40. Valid values for `PERSISTENT_2` deployment_type and `  SSD ` storage_type are 125, 250, 500, 1000.
     * 
     */
    @InputImport(name="perUnitStorageThroughput")
      private final @Nullable Output<Integer> perUnitStorageThroughput;

    public Output<Integer> getPerUnitStorageThroughput() {
        return this.perUnitStorageThroughput == null ? Output.empty() : this.perUnitStorageThroughput;
    }

    /**
     * A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
     * 
     */
    @InputImport(name="securityGroupIds")
      private final @Nullable Output<List<String>> securityGroupIds;

    public Output<List<String>> getSecurityGroupIds() {
        return this.securityGroupIds == null ? Output.empty() : this.securityGroupIds;
    }

    /**
     * The storage capacity (GiB) of the file system. Minimum of `1200`. See more details at [Allowed values for Fsx storage capacity](https://docs.aws.amazon.com/fsx/latest/APIReference/API_CreateFileSystem.html#FSx-CreateFileSystem-request-StorageCapacity). Update is allowed only for `SCRATCH_2`, `PERSISTENT_1` and `PERSISTENT_2` deployment types, See more details at [Fsx Storage Capacity Update](https://docs.aws.amazon.com/fsx/latest/APIReference/API_UpdateFileSystem.html#FSx-UpdateFileSystem-request-StorageCapacity). Required when not creating filesystem for a backup.
     * 
     */
    @InputImport(name="storageCapacity")
      private final @Nullable Output<Integer> storageCapacity;

    public Output<Integer> getStorageCapacity() {
        return this.storageCapacity == null ? Output.empty() : this.storageCapacity;
    }

    /**
     * - The filesystem storage type. Either `SSD` or `HDD`, defaults to `SSD`. `HDD` is only supported on `PERSISTENT_1` deployment types.
     * 
     */
    @InputImport(name="storageType")
      private final @Nullable Output<String> storageType;

    public Output<String> getStorageType() {
        return this.storageType == null ? Output.empty() : this.storageType;
    }

    /**
     * A list of IDs for the subnets that the file system will be accessible from. File systems currently support only one subnet. The file server is also launched in that subnet's Availability Zone.
     * 
     */
    @InputImport(name="subnetIds")
      private final @Nullable Output<String> subnetIds;

    public Output<String> getSubnetIds() {
        return this.subnetIds == null ? Output.empty() : this.subnetIds;
    }

    /**
     * A map of tags to assign to the file system. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> getTags() {
        return this.tags == null ? Output.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Output.empty() : this.tagsAll;
    }

    /**
     * Identifier of the Virtual Private Cloud for the file system.
     * 
     */
    @InputImport(name="vpcId")
      private final @Nullable Output<String> vpcId;

    public Output<String> getVpcId() {
        return this.vpcId == null ? Output.empty() : this.vpcId;
    }

    /**
     * The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
     * 
     */
    @InputImport(name="weeklyMaintenanceStartTime")
      private final @Nullable Output<String> weeklyMaintenanceStartTime;

    public Output<String> getWeeklyMaintenanceStartTime() {
        return this.weeklyMaintenanceStartTime == null ? Output.empty() : this.weeklyMaintenanceStartTime;
    }

    public LustreFileSystemState(
        @Nullable Output<String> arn,
        @Nullable Output<String> autoImportPolicy,
        @Nullable Output<Integer> automaticBackupRetentionDays,
        @Nullable Output<String> backupId,
        @Nullable Output<Boolean> copyTagsToBackups,
        @Nullable Output<String> dailyAutomaticBackupStartTime,
        @Nullable Output<String> dataCompressionType,
        @Nullable Output<String> deploymentType,
        @Nullable Output<String> dnsName,
        @Nullable Output<String> driveCacheType,
        @Nullable Output<String> exportPath,
        @Nullable Output<String> fileSystemTypeVersion,
        @Nullable Output<String> importPath,
        @Nullable Output<Integer> importedFileChunkSize,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<String> mountName,
        @Nullable Output<List<String>> networkInterfaceIds,
        @Nullable Output<String> ownerId,
        @Nullable Output<Integer> perUnitStorageThroughput,
        @Nullable Output<List<String>> securityGroupIds,
        @Nullable Output<Integer> storageCapacity,
        @Nullable Output<String> storageType,
        @Nullable Output<String> subnetIds,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> vpcId,
        @Nullable Output<String> weeklyMaintenanceStartTime) {
        this.arn = arn;
        this.autoImportPolicy = autoImportPolicy;
        this.automaticBackupRetentionDays = automaticBackupRetentionDays;
        this.backupId = backupId;
        this.copyTagsToBackups = copyTagsToBackups;
        this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
        this.dataCompressionType = dataCompressionType;
        this.deploymentType = deploymentType;
        this.dnsName = dnsName;
        this.driveCacheType = driveCacheType;
        this.exportPath = exportPath;
        this.fileSystemTypeVersion = fileSystemTypeVersion;
        this.importPath = importPath;
        this.importedFileChunkSize = importedFileChunkSize;
        this.kmsKeyId = kmsKeyId;
        this.mountName = mountName;
        this.networkInterfaceIds = networkInterfaceIds;
        this.ownerId = ownerId;
        this.perUnitStorageThroughput = perUnitStorageThroughput;
        this.securityGroupIds = securityGroupIds;
        this.storageCapacity = storageCapacity;
        this.storageType = storageType;
        this.subnetIds = subnetIds;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.vpcId = vpcId;
        this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
    }

    private LustreFileSystemState() {
        this.arn = Output.empty();
        this.autoImportPolicy = Output.empty();
        this.automaticBackupRetentionDays = Output.empty();
        this.backupId = Output.empty();
        this.copyTagsToBackups = Output.empty();
        this.dailyAutomaticBackupStartTime = Output.empty();
        this.dataCompressionType = Output.empty();
        this.deploymentType = Output.empty();
        this.dnsName = Output.empty();
        this.driveCacheType = Output.empty();
        this.exportPath = Output.empty();
        this.fileSystemTypeVersion = Output.empty();
        this.importPath = Output.empty();
        this.importedFileChunkSize = Output.empty();
        this.kmsKeyId = Output.empty();
        this.mountName = Output.empty();
        this.networkInterfaceIds = Output.empty();
        this.ownerId = Output.empty();
        this.perUnitStorageThroughput = Output.empty();
        this.securityGroupIds = Output.empty();
        this.storageCapacity = Output.empty();
        this.storageType = Output.empty();
        this.subnetIds = Output.empty();
        this.tags = Output.empty();
        this.tagsAll = Output.empty();
        this.vpcId = Output.empty();
        this.weeklyMaintenanceStartTime = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LustreFileSystemState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> autoImportPolicy;
        private @Nullable Output<Integer> automaticBackupRetentionDays;
        private @Nullable Output<String> backupId;
        private @Nullable Output<Boolean> copyTagsToBackups;
        private @Nullable Output<String> dailyAutomaticBackupStartTime;
        private @Nullable Output<String> dataCompressionType;
        private @Nullable Output<String> deploymentType;
        private @Nullable Output<String> dnsName;
        private @Nullable Output<String> driveCacheType;
        private @Nullable Output<String> exportPath;
        private @Nullable Output<String> fileSystemTypeVersion;
        private @Nullable Output<String> importPath;
        private @Nullable Output<Integer> importedFileChunkSize;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<String> mountName;
        private @Nullable Output<List<String>> networkInterfaceIds;
        private @Nullable Output<String> ownerId;
        private @Nullable Output<Integer> perUnitStorageThroughput;
        private @Nullable Output<List<String>> securityGroupIds;
        private @Nullable Output<Integer> storageCapacity;
        private @Nullable Output<String> storageType;
        private @Nullable Output<String> subnetIds;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> vpcId;
        private @Nullable Output<String> weeklyMaintenanceStartTime;

        public Builder() {
    	      // Empty
        }

        public Builder(LustreFileSystemState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.autoImportPolicy = defaults.autoImportPolicy;
    	      this.automaticBackupRetentionDays = defaults.automaticBackupRetentionDays;
    	      this.backupId = defaults.backupId;
    	      this.copyTagsToBackups = defaults.copyTagsToBackups;
    	      this.dailyAutomaticBackupStartTime = defaults.dailyAutomaticBackupStartTime;
    	      this.dataCompressionType = defaults.dataCompressionType;
    	      this.deploymentType = defaults.deploymentType;
    	      this.dnsName = defaults.dnsName;
    	      this.driveCacheType = defaults.driveCacheType;
    	      this.exportPath = defaults.exportPath;
    	      this.fileSystemTypeVersion = defaults.fileSystemTypeVersion;
    	      this.importPath = defaults.importPath;
    	      this.importedFileChunkSize = defaults.importedFileChunkSize;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.mountName = defaults.mountName;
    	      this.networkInterfaceIds = defaults.networkInterfaceIds;
    	      this.ownerId = defaults.ownerId;
    	      this.perUnitStorageThroughput = defaults.perUnitStorageThroughput;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.storageCapacity = defaults.storageCapacity;
    	      this.storageType = defaults.storageType;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.vpcId = defaults.vpcId;
    	      this.weeklyMaintenanceStartTime = defaults.weeklyMaintenanceStartTime;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder arn(@Nullable String arn) {
            this.arn = Output.ofNullable(arn);
            return this;
        }

        public Builder autoImportPolicy(@Nullable Output<String> autoImportPolicy) {
            this.autoImportPolicy = autoImportPolicy;
            return this;
        }

        public Builder autoImportPolicy(@Nullable String autoImportPolicy) {
            this.autoImportPolicy = Output.ofNullable(autoImportPolicy);
            return this;
        }

        public Builder automaticBackupRetentionDays(@Nullable Output<Integer> automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = automaticBackupRetentionDays;
            return this;
        }

        public Builder automaticBackupRetentionDays(@Nullable Integer automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = Output.ofNullable(automaticBackupRetentionDays);
            return this;
        }

        public Builder backupId(@Nullable Output<String> backupId) {
            this.backupId = backupId;
            return this;
        }

        public Builder backupId(@Nullable String backupId) {
            this.backupId = Output.ofNullable(backupId);
            return this;
        }

        public Builder copyTagsToBackups(@Nullable Output<Boolean> copyTagsToBackups) {
            this.copyTagsToBackups = copyTagsToBackups;
            return this;
        }

        public Builder copyTagsToBackups(@Nullable Boolean copyTagsToBackups) {
            this.copyTagsToBackups = Output.ofNullable(copyTagsToBackups);
            return this;
        }

        public Builder dailyAutomaticBackupStartTime(@Nullable Output<String> dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
            return this;
        }

        public Builder dailyAutomaticBackupStartTime(@Nullable String dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = Output.ofNullable(dailyAutomaticBackupStartTime);
            return this;
        }

        public Builder dataCompressionType(@Nullable Output<String> dataCompressionType) {
            this.dataCompressionType = dataCompressionType;
            return this;
        }

        public Builder dataCompressionType(@Nullable String dataCompressionType) {
            this.dataCompressionType = Output.ofNullable(dataCompressionType);
            return this;
        }

        public Builder deploymentType(@Nullable Output<String> deploymentType) {
            this.deploymentType = deploymentType;
            return this;
        }

        public Builder deploymentType(@Nullable String deploymentType) {
            this.deploymentType = Output.ofNullable(deploymentType);
            return this;
        }

        public Builder dnsName(@Nullable Output<String> dnsName) {
            this.dnsName = dnsName;
            return this;
        }

        public Builder dnsName(@Nullable String dnsName) {
            this.dnsName = Output.ofNullable(dnsName);
            return this;
        }

        public Builder driveCacheType(@Nullable Output<String> driveCacheType) {
            this.driveCacheType = driveCacheType;
            return this;
        }

        public Builder driveCacheType(@Nullable String driveCacheType) {
            this.driveCacheType = Output.ofNullable(driveCacheType);
            return this;
        }

        public Builder exportPath(@Nullable Output<String> exportPath) {
            this.exportPath = exportPath;
            return this;
        }

        public Builder exportPath(@Nullable String exportPath) {
            this.exportPath = Output.ofNullable(exportPath);
            return this;
        }

        public Builder fileSystemTypeVersion(@Nullable Output<String> fileSystemTypeVersion) {
            this.fileSystemTypeVersion = fileSystemTypeVersion;
            return this;
        }

        public Builder fileSystemTypeVersion(@Nullable String fileSystemTypeVersion) {
            this.fileSystemTypeVersion = Output.ofNullable(fileSystemTypeVersion);
            return this;
        }

        public Builder importPath(@Nullable Output<String> importPath) {
            this.importPath = importPath;
            return this;
        }

        public Builder importPath(@Nullable String importPath) {
            this.importPath = Output.ofNullable(importPath);
            return this;
        }

        public Builder importedFileChunkSize(@Nullable Output<Integer> importedFileChunkSize) {
            this.importedFileChunkSize = importedFileChunkSize;
            return this;
        }

        public Builder importedFileChunkSize(@Nullable Integer importedFileChunkSize) {
            this.importedFileChunkSize = Output.ofNullable(importedFileChunkSize);
            return this;
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Output.ofNullable(kmsKeyId);
            return this;
        }

        public Builder mountName(@Nullable Output<String> mountName) {
            this.mountName = mountName;
            return this;
        }

        public Builder mountName(@Nullable String mountName) {
            this.mountName = Output.ofNullable(mountName);
            return this;
        }

        public Builder networkInterfaceIds(@Nullable Output<List<String>> networkInterfaceIds) {
            this.networkInterfaceIds = networkInterfaceIds;
            return this;
        }

        public Builder networkInterfaceIds(@Nullable List<String> networkInterfaceIds) {
            this.networkInterfaceIds = Output.ofNullable(networkInterfaceIds);
            return this;
        }

        public Builder ownerId(@Nullable Output<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = Output.ofNullable(ownerId);
            return this;
        }

        public Builder perUnitStorageThroughput(@Nullable Output<Integer> perUnitStorageThroughput) {
            this.perUnitStorageThroughput = perUnitStorageThroughput;
            return this;
        }

        public Builder perUnitStorageThroughput(@Nullable Integer perUnitStorageThroughput) {
            this.perUnitStorageThroughput = Output.ofNullable(perUnitStorageThroughput);
            return this;
        }

        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }

        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Output.ofNullable(securityGroupIds);
            return this;
        }

        public Builder storageCapacity(@Nullable Output<Integer> storageCapacity) {
            this.storageCapacity = storageCapacity;
            return this;
        }

        public Builder storageCapacity(@Nullable Integer storageCapacity) {
            this.storageCapacity = Output.ofNullable(storageCapacity);
            return this;
        }

        public Builder storageType(@Nullable Output<String> storageType) {
            this.storageType = storageType;
            return this;
        }

        public Builder storageType(@Nullable String storageType) {
            this.storageType = Output.ofNullable(storageType);
            return this;
        }

        public Builder subnetIds(@Nullable Output<String> subnetIds) {
            this.subnetIds = subnetIds;
            return this;
        }

        public Builder subnetIds(@Nullable String subnetIds) {
            this.subnetIds = Output.ofNullable(subnetIds);
            return this;
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Output.ofNullable(tags);
            return this;
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Output.ofNullable(tagsAll);
            return this;
        }

        public Builder vpcId(@Nullable Output<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }

        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = Output.ofNullable(vpcId);
            return this;
        }

        public Builder weeklyMaintenanceStartTime(@Nullable Output<String> weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
            return this;
        }

        public Builder weeklyMaintenanceStartTime(@Nullable String weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = Output.ofNullable(weeklyMaintenanceStartTime);
            return this;
        }
        public LustreFileSystemState build() {
            return new LustreFileSystemState(arn, autoImportPolicy, automaticBackupRetentionDays, backupId, copyTagsToBackups, dailyAutomaticBackupStartTime, dataCompressionType, deploymentType, dnsName, driveCacheType, exportPath, fileSystemTypeVersion, importPath, importedFileChunkSize, kmsKeyId, mountName, networkInterfaceIds, ownerId, perUnitStorageThroughput, securityGroupIds, storageCapacity, storageType, subnetIds, tags, tagsAll, vpcId, weeklyMaintenanceStartTime);
        }
    }
}
