// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.lakeformation.inputs;

import io.pulumi.aws.lakeformation.inputs.GetPermissionsDataLocation;
import io.pulumi.aws.lakeformation.inputs.GetPermissionsDatabase;
import io.pulumi.aws.lakeformation.inputs.GetPermissionsTable;
import io.pulumi.aws.lakeformation.inputs.GetPermissionsTableWithColumns;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPermissionsArgs extends io.pulumi.resources.InvokeArgs {

    public static final GetPermissionsArgs Empty = new GetPermissionsArgs();

    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     * 
     */
    @Import(name="catalogId")
      private final @Nullable String catalogId;

    public Optional<String> getCatalogId() {
        return this.catalogId == null ? Optional.empty() : Optional.ofNullable(this.catalogId);
    }

    /**
     * Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
     * 
     */
    @Import(name="catalogResource")
      private final @Nullable Boolean catalogResource;

    public Optional<Boolean> getCatalogResource() {
        return this.catalogResource == null ? Optional.empty() : Optional.ofNullable(this.catalogResource);
    }

    /**
     * Configuration block for a data location resource. Detailed below.
     * 
     */
    @Import(name="dataLocation")
      private final @Nullable GetPermissionsDataLocation dataLocation;

    public Optional<GetPermissionsDataLocation> getDataLocation() {
        return this.dataLocation == null ? Optional.empty() : Optional.ofNullable(this.dataLocation);
    }

    /**
     * Configuration block for a database resource. Detailed below.
     * 
     */
    @Import(name="database")
      private final @Nullable GetPermissionsDatabase database;

    public Optional<GetPermissionsDatabase> getDatabase() {
        return this.database == null ? Optional.empty() : Optional.ofNullable(this.database);
    }

    /**
     * Principal to be granted the permissions on the resource. Supported principals are IAM users or IAM roles.
     * 
     */
    @Import(name="principal", required=true)
      private final String principal;

    public String getPrincipal() {
        return this.principal;
    }

    /**
     * Configuration block for a table resource. Detailed below.
     * 
     */
    @Import(name="table")
      private final @Nullable GetPermissionsTable table;

    public Optional<GetPermissionsTable> getTable() {
        return this.table == null ? Optional.empty() : Optional.ofNullable(this.table);
    }

    /**
     * Configuration block for a table with columns resource. Detailed below.
     * 
     */
    @Import(name="tableWithColumns")
      private final @Nullable GetPermissionsTableWithColumns tableWithColumns;

    public Optional<GetPermissionsTableWithColumns> getTableWithColumns() {
        return this.tableWithColumns == null ? Optional.empty() : Optional.ofNullable(this.tableWithColumns);
    }

    public GetPermissionsArgs(
        @Nullable String catalogId,
        @Nullable Boolean catalogResource,
        @Nullable GetPermissionsDataLocation dataLocation,
        @Nullable GetPermissionsDatabase database,
        String principal,
        @Nullable GetPermissionsTable table,
        @Nullable GetPermissionsTableWithColumns tableWithColumns) {
        this.catalogId = catalogId;
        this.catalogResource = catalogResource;
        this.dataLocation = dataLocation;
        this.database = database;
        this.principal = Objects.requireNonNull(principal, "expected parameter 'principal' to be non-null");
        this.table = table;
        this.tableWithColumns = tableWithColumns;
    }

    private GetPermissionsArgs() {
        this.catalogId = null;
        this.catalogResource = null;
        this.dataLocation = null;
        this.database = null;
        this.principal = null;
        this.table = null;
        this.tableWithColumns = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPermissionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String catalogId;
        private @Nullable Boolean catalogResource;
        private @Nullable GetPermissionsDataLocation dataLocation;
        private @Nullable GetPermissionsDatabase database;
        private String principal;
        private @Nullable GetPermissionsTable table;
        private @Nullable GetPermissionsTableWithColumns tableWithColumns;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPermissionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.catalogResource = defaults.catalogResource;
    	      this.dataLocation = defaults.dataLocation;
    	      this.database = defaults.database;
    	      this.principal = defaults.principal;
    	      this.table = defaults.table;
    	      this.tableWithColumns = defaults.tableWithColumns;
        }

        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = catalogId;
            return this;
        }
        public Builder catalogResource(@Nullable Boolean catalogResource) {
            this.catalogResource = catalogResource;
            return this;
        }
        public Builder dataLocation(@Nullable GetPermissionsDataLocation dataLocation) {
            this.dataLocation = dataLocation;
            return this;
        }
        public Builder database(@Nullable GetPermissionsDatabase database) {
            this.database = database;
            return this;
        }
        public Builder principal(String principal) {
            this.principal = Objects.requireNonNull(principal);
            return this;
        }
        public Builder table(@Nullable GetPermissionsTable table) {
            this.table = table;
            return this;
        }
        public Builder tableWithColumns(@Nullable GetPermissionsTableWithColumns tableWithColumns) {
            this.tableWithColumns = tableWithColumns;
            return this;
        }        public GetPermissionsArgs build() {
            return new GetPermissionsArgs(catalogId, catalogResource, dataLocation, database, principal, table, tableWithColumns);
        }
    }
}
