// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.codepipeline.inputs;

import io.pulumi.aws.codepipeline.inputs.WebhookAuthenticationConfigurationGetArgs;
import io.pulumi.aws.codepipeline.inputs.WebhookFilterGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WebhookState extends io.pulumi.resources.ResourceArgs {

    public static final WebhookState Empty = new WebhookState();

    /**
     * The CodePipeline webhook's ARN.
     * 
     */
    @InputImport(name="arn")
      private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * The type of authentication  to use. One of `IP`, `GITHUB_HMAC`, or `UNAUTHENTICATED`.
     * 
     */
    @InputImport(name="authentication")
      private final @Nullable Input<String> authentication;

    public Input<String> getAuthentication() {
        return this.authentication == null ? Input.empty() : this.authentication;
    }

    /**
     * An `auth` block. Required for `IP` and `GITHUB_HMAC`. Auth blocks are documented below.
     * 
     */
    @InputImport(name="authenticationConfiguration")
      private final @Nullable Input<WebhookAuthenticationConfigurationGetArgs> authenticationConfiguration;

    public Input<WebhookAuthenticationConfigurationGetArgs> getAuthenticationConfiguration() {
        return this.authenticationConfiguration == null ? Input.empty() : this.authenticationConfiguration;
    }

    /**
     * One or more `filter` blocks. Filter blocks are documented below.
     * 
     */
    @InputImport(name="filters")
      private final @Nullable Input<List<WebhookFilterGetArgs>> filters;

    public Input<List<WebhookFilterGetArgs>> getFilters() {
        return this.filters == null ? Input.empty() : this.filters;
    }

    /**
     * The name of the webhook.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
      private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @InputImport(name="tagsAll")
      private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The name of the action in a pipeline you want to connect to the webhook. The action must be from the source (first) stage of the pipeline.
     * 
     */
    @InputImport(name="targetAction")
      private final @Nullable Input<String> targetAction;

    public Input<String> getTargetAction() {
        return this.targetAction == null ? Input.empty() : this.targetAction;
    }

    /**
     * The name of the pipeline.
     * 
     */
    @InputImport(name="targetPipeline")
      private final @Nullable Input<String> targetPipeline;

    public Input<String> getTargetPipeline() {
        return this.targetPipeline == null ? Input.empty() : this.targetPipeline;
    }

    /**
     * The CodePipeline webhook's URL. POST events to this endpoint to trigger the target.
     * 
     */
    @InputImport(name="url")
      private final @Nullable Input<String> url;

    public Input<String> getUrl() {
        return this.url == null ? Input.empty() : this.url;
    }

    public WebhookState(
        @Nullable Input<String> arn,
        @Nullable Input<String> authentication,
        @Nullable Input<WebhookAuthenticationConfigurationGetArgs> authenticationConfiguration,
        @Nullable Input<List<WebhookFilterGetArgs>> filters,
        @Nullable Input<String> name,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<String> targetAction,
        @Nullable Input<String> targetPipeline,
        @Nullable Input<String> url) {
        this.arn = arn;
        this.authentication = authentication;
        this.authenticationConfiguration = authenticationConfiguration;
        this.filters = filters;
        this.name = name;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.targetAction = targetAction;
        this.targetPipeline = targetPipeline;
        this.url = url;
    }

    private WebhookState() {
        this.arn = Input.empty();
        this.authentication = Input.empty();
        this.authenticationConfiguration = Input.empty();
        this.filters = Input.empty();
        this.name = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.targetAction = Input.empty();
        this.targetPipeline = Input.empty();
        this.url = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebhookState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> arn;
        private @Nullable Input<String> authentication;
        private @Nullable Input<WebhookAuthenticationConfigurationGetArgs> authenticationConfiguration;
        private @Nullable Input<List<WebhookFilterGetArgs>> filters;
        private @Nullable Input<String> name;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<String> targetAction;
        private @Nullable Input<String> targetPipeline;
        private @Nullable Input<String> url;

        public Builder() {
    	      // Empty
        }

        public Builder(WebhookState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authentication = defaults.authentication;
    	      this.authenticationConfiguration = defaults.authenticationConfiguration;
    	      this.filters = defaults.filters;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.targetAction = defaults.targetAction;
    	      this.targetPipeline = defaults.targetPipeline;
    	      this.url = defaults.url;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setAuthentication(@Nullable Input<String> authentication) {
            this.authentication = authentication;
            return this;
        }

        public Builder setAuthentication(@Nullable String authentication) {
            this.authentication = Input.ofNullable(authentication);
            return this;
        }

        public Builder setAuthenticationConfiguration(@Nullable Input<WebhookAuthenticationConfigurationGetArgs> authenticationConfiguration) {
            this.authenticationConfiguration = authenticationConfiguration;
            return this;
        }

        public Builder setAuthenticationConfiguration(@Nullable WebhookAuthenticationConfigurationGetArgs authenticationConfiguration) {
            this.authenticationConfiguration = Input.ofNullable(authenticationConfiguration);
            return this;
        }

        public Builder setFilters(@Nullable Input<List<WebhookFilterGetArgs>> filters) {
            this.filters = filters;
            return this;
        }

        public Builder setFilters(@Nullable List<WebhookFilterGetArgs> filters) {
            this.filters = Input.ofNullable(filters);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setTargetAction(@Nullable Input<String> targetAction) {
            this.targetAction = targetAction;
            return this;
        }

        public Builder setTargetAction(@Nullable String targetAction) {
            this.targetAction = Input.ofNullable(targetAction);
            return this;
        }

        public Builder setTargetPipeline(@Nullable Input<String> targetPipeline) {
            this.targetPipeline = targetPipeline;
            return this;
        }

        public Builder setTargetPipeline(@Nullable String targetPipeline) {
            this.targetPipeline = Input.ofNullable(targetPipeline);
            return this;
        }

        public Builder setUrl(@Nullable Input<String> url) {
            this.url = url;
            return this;
        }

        public Builder setUrl(@Nullable String url) {
            this.url = Input.ofNullable(url);
            return this;
        }
        public WebhookState build() {
            return new WebhookState(arn, authentication, authenticationConfiguration, filters, name, tags, tagsAll, targetAction, targetPipeline, url);
        }
    }
}
