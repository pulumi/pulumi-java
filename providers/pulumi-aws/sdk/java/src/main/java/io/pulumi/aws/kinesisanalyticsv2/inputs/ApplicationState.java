// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.kinesisanalyticsv2.inputs;

import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationGetArgs;
import io.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationCloudwatchLoggingOptionsGetArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationState extends io.pulumi.resources.ResourceArgs {

    public static final ApplicationState Empty = new ApplicationState();

    /**
     * The application's configuration
     * 
     */
    @InputImport(name="applicationConfiguration")
    private final @Nullable Input<ApplicationApplicationConfigurationGetArgs> applicationConfiguration;

    public Input<ApplicationApplicationConfigurationGetArgs> getApplicationConfiguration() {
        return this.applicationConfiguration == null ? Input.empty() : this.applicationConfiguration;
    }

    /**
     * The ARN of the application.
     * 
     */
    @InputImport(name="arn")
    private final @Nullable Input<String> arn;

    public Input<String> getArn() {
        return this.arn == null ? Input.empty() : this.arn;
    }

    /**
     * A CloudWatch log stream to monitor application configuration errors.
     * 
     */
    @InputImport(name="cloudwatchLoggingOptions")
    private final @Nullable Input<ApplicationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions;

    public Input<ApplicationCloudwatchLoggingOptionsGetArgs> getCloudwatchLoggingOptions() {
        return this.cloudwatchLoggingOptions == null ? Input.empty() : this.cloudwatchLoggingOptions;
    }

    /**
     * The current timestamp when the application was created.
     * 
     */
    @InputImport(name="createTimestamp")
    private final @Nullable Input<String> createTimestamp;

    public Input<String> getCreateTimestamp() {
        return this.createTimestamp == null ? Input.empty() : this.createTimestamp;
    }

    /**
     * A summary description of the application.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Whether to force stop an unresponsive Flink-based application.
     * 
     */
    @InputImport(name="forceStop")
    private final @Nullable Input<Boolean> forceStop;

    public Input<Boolean> getForceStop() {
        return this.forceStop == null ? Input.empty() : this.forceStop;
    }

    /**
     * The current timestamp when the application was last updated.
     * 
     */
    @InputImport(name="lastUpdateTimestamp")
    private final @Nullable Input<String> lastUpdateTimestamp;

    public Input<String> getLastUpdateTimestamp() {
        return this.lastUpdateTimestamp == null ? Input.empty() : this.lastUpdateTimestamp;
    }

    /**
     * The name of the application.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * The runtime environment for the application. Valid values: `SQL-1_0`, `FLINK-1_6`, `FLINK-1_8`, `FLINK-1_11`.
     * 
     */
    @InputImport(name="runtimeEnvironment")
    private final @Nullable Input<String> runtimeEnvironment;

    public Input<String> getRuntimeEnvironment() {
        return this.runtimeEnvironment == null ? Input.empty() : this.runtimeEnvironment;
    }

    /**
     * The ARN of the IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.
     * 
     */
    @InputImport(name="serviceExecutionRole")
    private final @Nullable Input<String> serviceExecutionRole;

    public Input<String> getServiceExecutionRole() {
        return this.serviceExecutionRole == null ? Input.empty() : this.serviceExecutionRole;
    }

    /**
     * Whether to start or stop the application.
     * 
     */
    @InputImport(name="startApplication")
    private final @Nullable Input<Boolean> startApplication;

    public Input<Boolean> getStartApplication() {
        return this.startApplication == null ? Input.empty() : this.startApplication;
    }

    /**
     * The status of the application.
     * 
     */
    @InputImport(name="status")
    private final @Nullable Input<String> status;

    public Input<String> getStatus() {
        return this.status == null ? Input.empty() : this.status;
    }

    /**
     * A map of tags to assign to the application. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @InputImport(name="tagsAll")
    private final @Nullable Input<Map<String,String>> tagsAll;

    public Input<Map<String,String>> getTagsAll() {
        return this.tagsAll == null ? Input.empty() : this.tagsAll;
    }

    /**
     * The current application version. Kinesis Data Analytics updates the `version_id` each time the application is updated.
     * 
     */
    @InputImport(name="versionId")
    private final @Nullable Input<Integer> versionId;

    public Input<Integer> getVersionId() {
        return this.versionId == null ? Input.empty() : this.versionId;
    }

    public ApplicationState(
        @Nullable Input<ApplicationApplicationConfigurationGetArgs> applicationConfiguration,
        @Nullable Input<String> arn,
        @Nullable Input<ApplicationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions,
        @Nullable Input<String> createTimestamp,
        @Nullable Input<String> description,
        @Nullable Input<Boolean> forceStop,
        @Nullable Input<String> lastUpdateTimestamp,
        @Nullable Input<String> name,
        @Nullable Input<String> runtimeEnvironment,
        @Nullable Input<String> serviceExecutionRole,
        @Nullable Input<Boolean> startApplication,
        @Nullable Input<String> status,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<Map<String,String>> tagsAll,
        @Nullable Input<Integer> versionId) {
        this.applicationConfiguration = applicationConfiguration;
        this.arn = arn;
        this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
        this.createTimestamp = createTimestamp;
        this.description = description;
        this.forceStop = forceStop;
        this.lastUpdateTimestamp = lastUpdateTimestamp;
        this.name = name;
        this.runtimeEnvironment = runtimeEnvironment;
        this.serviceExecutionRole = serviceExecutionRole;
        this.startApplication = startApplication;
        this.status = status;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.versionId = versionId;
    }

    private ApplicationState() {
        this.applicationConfiguration = Input.empty();
        this.arn = Input.empty();
        this.cloudwatchLoggingOptions = Input.empty();
        this.createTimestamp = Input.empty();
        this.description = Input.empty();
        this.forceStop = Input.empty();
        this.lastUpdateTimestamp = Input.empty();
        this.name = Input.empty();
        this.runtimeEnvironment = Input.empty();
        this.serviceExecutionRole = Input.empty();
        this.startApplication = Input.empty();
        this.status = Input.empty();
        this.tags = Input.empty();
        this.tagsAll = Input.empty();
        this.versionId = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ApplicationApplicationConfigurationGetArgs> applicationConfiguration;
        private @Nullable Input<String> arn;
        private @Nullable Input<ApplicationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions;
        private @Nullable Input<String> createTimestamp;
        private @Nullable Input<String> description;
        private @Nullable Input<Boolean> forceStop;
        private @Nullable Input<String> lastUpdateTimestamp;
        private @Nullable Input<String> name;
        private @Nullable Input<String> runtimeEnvironment;
        private @Nullable Input<String> serviceExecutionRole;
        private @Nullable Input<Boolean> startApplication;
        private @Nullable Input<String> status;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<Map<String,String>> tagsAll;
        private @Nullable Input<Integer> versionId;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationConfiguration = defaults.applicationConfiguration;
    	      this.arn = defaults.arn;
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.createTimestamp = defaults.createTimestamp;
    	      this.description = defaults.description;
    	      this.forceStop = defaults.forceStop;
    	      this.lastUpdateTimestamp = defaults.lastUpdateTimestamp;
    	      this.name = defaults.name;
    	      this.runtimeEnvironment = defaults.runtimeEnvironment;
    	      this.serviceExecutionRole = defaults.serviceExecutionRole;
    	      this.startApplication = defaults.startApplication;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.versionId = defaults.versionId;
        }

        public Builder setApplicationConfiguration(@Nullable Input<ApplicationApplicationConfigurationGetArgs> applicationConfiguration) {
            this.applicationConfiguration = applicationConfiguration;
            return this;
        }

        public Builder setApplicationConfiguration(@Nullable ApplicationApplicationConfigurationGetArgs applicationConfiguration) {
            this.applicationConfiguration = Input.ofNullable(applicationConfiguration);
            return this;
        }

        public Builder setArn(@Nullable Input<String> arn) {
            this.arn = arn;
            return this;
        }

        public Builder setArn(@Nullable String arn) {
            this.arn = Input.ofNullable(arn);
            return this;
        }

        public Builder setCloudwatchLoggingOptions(@Nullable Input<ApplicationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }

        public Builder setCloudwatchLoggingOptions(@Nullable ApplicationCloudwatchLoggingOptionsGetArgs cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = Input.ofNullable(cloudwatchLoggingOptions);
            return this;
        }

        public Builder setCreateTimestamp(@Nullable Input<String> createTimestamp) {
            this.createTimestamp = createTimestamp;
            return this;
        }

        public Builder setCreateTimestamp(@Nullable String createTimestamp) {
            this.createTimestamp = Input.ofNullable(createTimestamp);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setForceStop(@Nullable Input<Boolean> forceStop) {
            this.forceStop = forceStop;
            return this;
        }

        public Builder setForceStop(@Nullable Boolean forceStop) {
            this.forceStop = Input.ofNullable(forceStop);
            return this;
        }

        public Builder setLastUpdateTimestamp(@Nullable Input<String> lastUpdateTimestamp) {
            this.lastUpdateTimestamp = lastUpdateTimestamp;
            return this;
        }

        public Builder setLastUpdateTimestamp(@Nullable String lastUpdateTimestamp) {
            this.lastUpdateTimestamp = Input.ofNullable(lastUpdateTimestamp);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setRuntimeEnvironment(@Nullable Input<String> runtimeEnvironment) {
            this.runtimeEnvironment = runtimeEnvironment;
            return this;
        }

        public Builder setRuntimeEnvironment(@Nullable String runtimeEnvironment) {
            this.runtimeEnvironment = Input.ofNullable(runtimeEnvironment);
            return this;
        }

        public Builder setServiceExecutionRole(@Nullable Input<String> serviceExecutionRole) {
            this.serviceExecutionRole = serviceExecutionRole;
            return this;
        }

        public Builder setServiceExecutionRole(@Nullable String serviceExecutionRole) {
            this.serviceExecutionRole = Input.ofNullable(serviceExecutionRole);
            return this;
        }

        public Builder setStartApplication(@Nullable Input<Boolean> startApplication) {
            this.startApplication = startApplication;
            return this;
        }

        public Builder setStartApplication(@Nullable Boolean startApplication) {
            this.startApplication = Input.ofNullable(startApplication);
            return this;
        }

        public Builder setStatus(@Nullable Input<String> status) {
            this.status = status;
            return this;
        }

        public Builder setStatus(@Nullable String status) {
            this.status = Input.ofNullable(status);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setTagsAll(@Nullable Input<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }

        public Builder setTagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Input.ofNullable(tagsAll);
            return this;
        }

        public Builder setVersionId(@Nullable Input<Integer> versionId) {
            this.versionId = versionId;
            return this;
        }

        public Builder setVersionId(@Nullable Integer versionId) {
            this.versionId = Input.ofNullable(versionId);
            return this;
        }
        public ApplicationState build() {
            return new ApplicationState(applicationConfiguration, arn, cloudwatchLoggingOptions, createTimestamp, description, forceStop, lastUpdateTimestamp, name, runtimeEnvironment, serviceExecutionRole, startApplication, status, tags, tagsAll, versionId);
        }
    }
}
