// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appmesh;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.appmesh.RouteArgs;
import io.pulumi.aws.appmesh.inputs.RouteState;
import io.pulumi.aws.appmesh.outputs.RouteSpec;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides an AWS App Mesh route resource.
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * ### HTTP Routing
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const serviceb = new aws.appmesh.Route("serviceb", {
 *     meshName: aws_appmesh_mesh.simple.id,
 *     virtualRouterName: aws_appmesh_virtual_router.serviceb.name,
 *     spec: {
 *         httpRoute: {
 *             match: {
 *                 prefix: "/",
 *             },
 *             action: {
 *                 weightedTargets: [
 *                     {
 *                         virtualNode: aws_appmesh_virtual_node.serviceb1.name,
 *                         weight: 90,
 *                     },
 *                     {
 *                         virtualNode: aws_appmesh_virtual_node.serviceb2.name,
 *                         weight: 10,
 *                     },
 *                 ],
 *             },
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * serviceb = aws.appmesh.Route("serviceb",
 *     mesh_name=aws_appmesh_mesh["simple"]["id"],
 *     virtual_router_name=aws_appmesh_virtual_router["serviceb"]["name"],
 *     spec=aws.appmesh.RouteSpecArgs(
 *         http_route=aws.appmesh.RouteSpecHttpRouteArgs(
 *             match=aws.appmesh.RouteSpecHttpRouteMatchArgs(
 *                 prefix="/",
 *             ),
 *             action=aws.appmesh.RouteSpecHttpRouteActionArgs(
 *                 weighted_targets=[
 *                     aws.appmesh.RouteSpecHttpRouteActionWeightedTargetArgs(
 *                         virtual_node=aws_appmesh_virtual_node["serviceb1"]["name"],
 *                         weight=90,
 *                     ),
 *                     aws.appmesh.RouteSpecHttpRouteActionWeightedTargetArgs(
 *                         virtual_node=aws_appmesh_virtual_node["serviceb2"]["name"],
 *                         weight=10,
 *                     ),
 *                 ],
 *             ),
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var serviceb = new Aws.AppMesh.Route("serviceb", new Aws.AppMesh.RouteArgs
 *         {
 *             MeshName = aws_appmesh_mesh.Simple.Id,
 *             VirtualRouterName = aws_appmesh_virtual_router.Serviceb.Name,
 *             Spec = new Aws.AppMesh.Inputs.RouteSpecArgs
 *             {
 *                 HttpRoute = new Aws.AppMesh.Inputs.RouteSpecHttpRouteArgs
 *                 {
 *                     Match = new Aws.AppMesh.Inputs.RouteSpecHttpRouteMatchArgs
 *                     {
 *                         Prefix = "/",
 *                     },
 *                     Action = new Aws.AppMesh.Inputs.RouteSpecHttpRouteActionArgs
 *                     {
 *                         WeightedTargets = 
 *                         {
 *                             new Aws.AppMesh.Inputs.RouteSpecHttpRouteActionWeightedTargetArgs
 *                             {
 *                                 VirtualNode = aws_appmesh_virtual_node.Serviceb1.Name,
 *                                 Weight = 90,
 *                             },
 *                             new Aws.AppMesh.Inputs.RouteSpecHttpRouteActionWeightedTargetArgs
 *                             {
 *                                 VirtualNode = aws_appmesh_virtual_node.Serviceb2.Name,
 *                                 Weight = 10,
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appmesh"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := appmesh.NewRoute(ctx, "serviceb", &appmesh.RouteArgs{
 * 			MeshName:          pulumi.Any(aws_appmesh_mesh.Simple.Id),
 * 			VirtualRouterName: pulumi.Any(aws_appmesh_virtual_router.Serviceb.Name),
 * 			Spec: &appmesh.RouteSpecArgs{
 * 				HttpRoute: &appmesh.RouteSpecHttpRouteArgs{
 * 					Match: &appmesh.RouteSpecHttpRouteMatchArgs{
 * 						Prefix: pulumi.String("/"),
 * 					},
 * 					Action: &appmesh.RouteSpecHttpRouteActionArgs{
 * 						WeightedTargets: appmesh.RouteSpecHttpRouteActionWeightedTargetArray{
 * 							&appmesh.RouteSpecHttpRouteActionWeightedTargetArgs{
 * 								VirtualNode: pulumi.Any(aws_appmesh_virtual_node.Serviceb1.Name),
 * 								Weight:      pulumi.Int(90),
 * 							},
 * 							&appmesh.RouteSpecHttpRouteActionWeightedTargetArgs{
 * 								VirtualNode: pulumi.Any(aws_appmesh_virtual_node.Serviceb2.Name),
 * 								Weight:      pulumi.Int(10),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### HTTP Header Routing
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const serviceb = new aws.appmesh.Route("serviceb", {
 *     meshName: aws_appmesh_mesh.simple.id,
 *     virtualRouterName: aws_appmesh_virtual_router.serviceb.name,
 *     spec: {
 *         httpRoute: {
 *             match: {
 *                 method: "POST",
 *                 prefix: "/",
 *                 scheme: "https",
 *                 headers: [{
 *                     name: "clientRequestId",
 *                     match: {
 *                         prefix: "123",
 *                     },
 *                 }],
 *             },
 *             action: {
 *                 weightedTargets: [{
 *                     virtualNode: aws_appmesh_virtual_node.serviceb.name,
 *                     weight: 100,
 *                 }],
 *             },
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * serviceb = aws.appmesh.Route("serviceb",
 *     mesh_name=aws_appmesh_mesh["simple"]["id"],
 *     virtual_router_name=aws_appmesh_virtual_router["serviceb"]["name"],
 *     spec=aws.appmesh.RouteSpecArgs(
 *         http_route=aws.appmesh.RouteSpecHttpRouteArgs(
 *             match=aws.appmesh.RouteSpecHttpRouteMatchArgs(
 *                 method="POST",
 *                 prefix="/",
 *                 scheme="https",
 *                 headers=[aws.appmesh.RouteSpecHttpRouteMatchHeaderArgs(
 *                     name="clientRequestId",
 *                     match=aws.appmesh.RouteSpecHttpRouteMatchHeaderMatchArgs(
 *                         prefix="123",
 *                     ),
 *                 )],
 *             ),
 *             action=aws.appmesh.RouteSpecHttpRouteActionArgs(
 *                 weighted_targets=[aws.appmesh.RouteSpecHttpRouteActionWeightedTargetArgs(
 *                     virtual_node=aws_appmesh_virtual_node["serviceb"]["name"],
 *                     weight=100,
 *                 )],
 *             ),
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var serviceb = new Aws.AppMesh.Route("serviceb", new Aws.AppMesh.RouteArgs
 *         {
 *             MeshName = aws_appmesh_mesh.Simple.Id,
 *             VirtualRouterName = aws_appmesh_virtual_router.Serviceb.Name,
 *             Spec = new Aws.AppMesh.Inputs.RouteSpecArgs
 *             {
 *                 HttpRoute = new Aws.AppMesh.Inputs.RouteSpecHttpRouteArgs
 *                 {
 *                     Match = new Aws.AppMesh.Inputs.RouteSpecHttpRouteMatchArgs
 *                     {
 *                         Method = "POST",
 *                         Prefix = "/",
 *                         Scheme = "https",
 *                         Headers = 
 *                         {
 *                             new Aws.AppMesh.Inputs.RouteSpecHttpRouteMatchHeaderArgs
 *                             {
 *                                 Name = "clientRequestId",
 *                                 Match = new Aws.AppMesh.Inputs.RouteSpecHttpRouteMatchHeaderMatchArgs
 *                                 {
 *                                     Prefix = "123",
 *                                 },
 *                             },
 *                         },
 *                     },
 *                     Action = new Aws.AppMesh.Inputs.RouteSpecHttpRouteActionArgs
 *                     {
 *                         WeightedTargets = 
 *                         {
 *                             new Aws.AppMesh.Inputs.RouteSpecHttpRouteActionWeightedTargetArgs
 *                             {
 *                                 VirtualNode = aws_appmesh_virtual_node.Serviceb.Name,
 *                                 Weight = 100,
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appmesh"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := appmesh.NewRoute(ctx, "serviceb", &appmesh.RouteArgs{
 * 			MeshName:          pulumi.Any(aws_appmesh_mesh.Simple.Id),
 * 			VirtualRouterName: pulumi.Any(aws_appmesh_virtual_router.Serviceb.Name),
 * 			Spec: &appmesh.RouteSpecArgs{
 * 				HttpRoute: &appmesh.RouteSpecHttpRouteArgs{
 * 					Match: &appmesh.RouteSpecHttpRouteMatchArgs{
 * 						Method: pulumi.String("POST"),
 * 						Prefix: pulumi.String("/"),
 * 						Scheme: pulumi.String("https"),
 * 						Headers: appmesh.RouteSpecHttpRouteMatchHeaderArray{
 * 							&appmesh.RouteSpecHttpRouteMatchHeaderArgs{
 * 								Name: pulumi.String("clientRequestId"),
 * 								Match: &appmesh.RouteSpecHttpRouteMatchHeaderMatchArgs{
 * 									Prefix: pulumi.String("123"),
 * 								},
 * 							},
 * 						},
 * 					},
 * 					Action: &appmesh.RouteSpecHttpRouteActionArgs{
 * 						WeightedTargets: appmesh.RouteSpecHttpRouteActionWeightedTargetArray{
 * 							&appmesh.RouteSpecHttpRouteActionWeightedTargetArgs{
 * 								VirtualNode: pulumi.Any(aws_appmesh_virtual_node.Serviceb.Name),
 * 								Weight:      pulumi.Int(100),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### Retry Policy
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const serviceb = new aws.appmesh.Route("serviceb", {
 *     meshName: aws_appmesh_mesh.simple.id,
 *     virtualRouterName: aws_appmesh_virtual_router.serviceb.name,
 *     spec: {
 *         httpRoute: {
 *             match: {
 *                 prefix: "/",
 *             },
 *             retryPolicy: {
 *                 httpRetryEvents: ["server-error"],
 *                 maxRetries: 1,
 *                 perRetryTimeout: {
 *                     unit: "s",
 *                     value: 15,
 *                 },
 *             },
 *             action: {
 *                 weightedTargets: [{
 *                     virtualNode: aws_appmesh_virtual_node.serviceb.name,
 *                     weight: 100,
 *                 }],
 *             },
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * serviceb = aws.appmesh.Route("serviceb",
 *     mesh_name=aws_appmesh_mesh["simple"]["id"],
 *     virtual_router_name=aws_appmesh_virtual_router["serviceb"]["name"],
 *     spec=aws.appmesh.RouteSpecArgs(
 *         http_route=aws.appmesh.RouteSpecHttpRouteArgs(
 *             match=aws.appmesh.RouteSpecHttpRouteMatchArgs(
 *                 prefix="/",
 *             ),
 *             retry_policy=aws.appmesh.RouteSpecHttpRouteRetryPolicyArgs(
 *                 http_retry_events=["server-error"],
 *                 max_retries=1,
 *                 per_retry_timeout=aws.appmesh.RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs(
 *                     unit="s",
 *                     value=15,
 *                 ),
 *             ),
 *             action=aws.appmesh.RouteSpecHttpRouteActionArgs(
 *                 weighted_targets=[aws.appmesh.RouteSpecHttpRouteActionWeightedTargetArgs(
 *                     virtual_node=aws_appmesh_virtual_node["serviceb"]["name"],
 *                     weight=100,
 *                 )],
 *             ),
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var serviceb = new Aws.AppMesh.Route("serviceb", new Aws.AppMesh.RouteArgs
 *         {
 *             MeshName = aws_appmesh_mesh.Simple.Id,
 *             VirtualRouterName = aws_appmesh_virtual_router.Serviceb.Name,
 *             Spec = new Aws.AppMesh.Inputs.RouteSpecArgs
 *             {
 *                 HttpRoute = new Aws.AppMesh.Inputs.RouteSpecHttpRouteArgs
 *                 {
 *                     Match = new Aws.AppMesh.Inputs.RouteSpecHttpRouteMatchArgs
 *                     {
 *                         Prefix = "/",
 *                     },
 *                     RetryPolicy = new Aws.AppMesh.Inputs.RouteSpecHttpRouteRetryPolicyArgs
 *                     {
 *                         HttpRetryEvents = 
 *                         {
 *                             "server-error",
 *                         },
 *                         MaxRetries = 1,
 *                         PerRetryTimeout = new Aws.AppMesh.Inputs.RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs
 *                         {
 *                             Unit = "s",
 *                             Value = 15,
 *                         },
 *                     },
 *                     Action = new Aws.AppMesh.Inputs.RouteSpecHttpRouteActionArgs
 *                     {
 *                         WeightedTargets = 
 *                         {
 *                             new Aws.AppMesh.Inputs.RouteSpecHttpRouteActionWeightedTargetArgs
 *                             {
 *                                 VirtualNode = aws_appmesh_virtual_node.Serviceb.Name,
 *                                 Weight = 100,
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appmesh"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := appmesh.NewRoute(ctx, "serviceb", &appmesh.RouteArgs{
 * 			MeshName:          pulumi.Any(aws_appmesh_mesh.Simple.Id),
 * 			VirtualRouterName: pulumi.Any(aws_appmesh_virtual_router.Serviceb.Name),
 * 			Spec: &appmesh.RouteSpecArgs{
 * 				HttpRoute: &appmesh.RouteSpecHttpRouteArgs{
 * 					Match: &appmesh.RouteSpecHttpRouteMatchArgs{
 * 						Prefix: pulumi.String("/"),
 * 					},
 * 					RetryPolicy: &appmesh.RouteSpecHttpRouteRetryPolicyArgs{
 * 						HttpRetryEvents: pulumi.StringArray{
 * 							pulumi.String("server-error"),
 * 						},
 * 						MaxRetries: pulumi.Int(1),
 * 						PerRetryTimeout: &appmesh.RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs{
 * 							Unit:  pulumi.String("s"),
 * 							Value: pulumi.Int(15),
 * 						},
 * 					},
 * 					Action: &appmesh.RouteSpecHttpRouteActionArgs{
 * 						WeightedTargets: appmesh.RouteSpecHttpRouteActionWeightedTargetArray{
 * 							&appmesh.RouteSpecHttpRouteActionWeightedTargetArgs{
 * 								VirtualNode: pulumi.Any(aws_appmesh_virtual_node.Serviceb.Name),
 * 								Weight:      pulumi.Int(100),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% example %}}
 * ### TCP Routing
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const serviceb = new aws.appmesh.Route("serviceb", {
 *     meshName: aws_appmesh_mesh.simple.id,
 *     virtualRouterName: aws_appmesh_virtual_router.serviceb.name,
 *     spec: {
 *         tcpRoute: {
 *             action: {
 *                 weightedTargets: [{
 *                     virtualNode: aws_appmesh_virtual_node.serviceb1.name,
 *                     weight: 100,
 *                 }],
 *             },
 *         },
 *     },
 * });
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * serviceb = aws.appmesh.Route("serviceb",
 *     mesh_name=aws_appmesh_mesh["simple"]["id"],
 *     virtual_router_name=aws_appmesh_virtual_router["serviceb"]["name"],
 *     spec=aws.appmesh.RouteSpecArgs(
 *         tcp_route=aws.appmesh.RouteSpecTcpRouteArgs(
 *             action=aws.appmesh.RouteSpecTcpRouteActionArgs(
 *                 weighted_targets=[aws.appmesh.RouteSpecTcpRouteActionWeightedTargetArgs(
 *                     virtual_node=aws_appmesh_virtual_node["serviceb1"]["name"],
 *                     weight=100,
 *                 )],
 *             ),
 *         ),
 *     ))
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var serviceb = new Aws.AppMesh.Route("serviceb", new Aws.AppMesh.RouteArgs
 *         {
 *             MeshName = aws_appmesh_mesh.Simple.Id,
 *             VirtualRouterName = aws_appmesh_virtual_router.Serviceb.Name,
 *             Spec = new Aws.AppMesh.Inputs.RouteSpecArgs
 *             {
 *                 TcpRoute = new Aws.AppMesh.Inputs.RouteSpecTcpRouteArgs
 *                 {
 *                     Action = new Aws.AppMesh.Inputs.RouteSpecTcpRouteActionArgs
 *                     {
 *                         WeightedTargets = 
 *                         {
 *                             new Aws.AppMesh.Inputs.RouteSpecTcpRouteActionWeightedTargetArgs
 *                             {
 *                                 VirtualNode = aws_appmesh_virtual_node.Serviceb1.Name,
 *                                 Weight = 100,
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *         });
 *     }
 * 
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/appmesh"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		_, err := appmesh.NewRoute(ctx, "serviceb", &appmesh.RouteArgs{
 * 			MeshName:          pulumi.Any(aws_appmesh_mesh.Simple.Id),
 * 			VirtualRouterName: pulumi.Any(aws_appmesh_virtual_router.Serviceb.Name),
 * 			Spec: &appmesh.RouteSpecArgs{
 * 				TcpRoute: &appmesh.RouteSpecTcpRouteArgs{
 * 					Action: &appmesh.RouteSpecTcpRouteActionArgs{
 * 						WeightedTargets: appmesh.RouteSpecTcpRouteActionWeightedTargetArray{
 * 							&appmesh.RouteSpecTcpRouteActionWeightedTargetArgs{
 * 								VirtualNode: pulumi.Any(aws_appmesh_virtual_node.Serviceb1.Name),
 * 								Weight:      pulumi.Int(100),
 * 							},
 * 						},
 * 					},
 * 				},
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * App Mesh virtual routes can be imported using `mesh_name` and `virtual_router_name` together with the route's `name`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:appmesh/route:Route serviceb simpleapp/serviceB/serviceB-route
 * ```
 * 
 *  [1]/docs/providers/aws/index.html 
 */
@ResourceType(type="aws:appmesh/route:Route")
public class Route extends io.pulumi.resources.CustomResource {
    /**
     * The ARN of the route.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN of the route.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * The creation date of the route.
     * 
     */
    @Export(name="createdDate", type=String.class, parameters={})
    private Output<String> createdDate;

    /**
     * @return The creation date of the route.
     * 
     */
    public Output<String> getCreatedDate() {
        return this.createdDate;
    }
    /**
     * The last update date of the route.
     * 
     */
    @Export(name="lastUpdatedDate", type=String.class, parameters={})
    private Output<String> lastUpdatedDate;

    /**
     * @return The last update date of the route.
     * 
     */
    public Output<String> getLastUpdatedDate() {
        return this.lastUpdatedDate;
    }
    /**
     * The name of the service mesh in which to create the route. Must be between 1 and 255 characters in length.
     * 
     */
    @Export(name="meshName", type=String.class, parameters={})
    private Output<String> meshName;

    /**
     * @return The name of the service mesh in which to create the route. Must be between 1 and 255 characters in length.
     * 
     */
    public Output<String> getMeshName() {
        return this.meshName;
    }
    /**
     * The AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.
     * 
     */
    @Export(name="meshOwner", type=String.class, parameters={})
    private Output<String> meshOwner;

    /**
     * @return The AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.
     * 
     */
    public Output<String> getMeshOwner() {
        return this.meshOwner;
    }
    /**
     * The name to use for the route. Must be between 1 and 255 characters in length.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name to use for the route. Must be between 1 and 255 characters in length.
     * 
     */
    public Output<String> getName() {
        return this.name;
    }
    /**
     * The resource owner's AWS account ID.
     * 
     */
    @Export(name="resourceOwner", type=String.class, parameters={})
    private Output<String> resourceOwner;

    /**
     * @return The resource owner's AWS account ID.
     * 
     */
    public Output<String> getResourceOwner() {
        return this.resourceOwner;
    }
    /**
     * The route specification to apply.
     * 
     */
    @Export(name="spec", type=RouteSpec.class, parameters={})
    private Output<RouteSpec> spec;

    /**
     * @return The route specification to apply.
     * 
     */
    public Output<RouteSpec> getSpec() {
        return this.spec;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * The name of the virtual router in which to create the route. Must be between 1 and 255 characters in length.
     * 
     */
    @Export(name="virtualRouterName", type=String.class, parameters={})
    private Output<String> virtualRouterName;

    /**
     * @return The name of the virtual router in which to create the route. Must be between 1 and 255 characters in length.
     * 
     */
    public Output<String> getVirtualRouterName() {
        return this.virtualRouterName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Route(String name) {
        this(name, RouteArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Route(String name, RouteArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Route(String name, RouteArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:appmesh/route:Route", name, args == null ? RouteArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Route(String name, Output<String> id, @Nullable RouteState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:appmesh/route:Route", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Route get(String name, Output<String> id, @Nullable RouteState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Route(name, id, state, options);
    }
}
