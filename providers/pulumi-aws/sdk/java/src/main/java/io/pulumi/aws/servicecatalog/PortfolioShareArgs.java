// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.servicecatalog;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PortfolioShareArgs extends io.pulumi.resources.ResourceArgs {

    public static final PortfolioShareArgs Empty = new PortfolioShareArgs();

    /**
     * Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
     * 
     */
    @InputImport(name="acceptLanguage")
      private final @Nullable Input<String> acceptLanguage;

    public Input<String> getAcceptLanguage() {
        return this.acceptLanguage == null ? Input.empty() : this.acceptLanguage;
    }

    /**
     * Portfolio identifier.
     * 
     */
    @InputImport(name="portfolioId", required=true)
      private final Input<String> portfolioId;

    public Input<String> getPortfolioId() {
        return this.portfolioId;
    }

    /**
     * Identifier of the principal with whom you will share the portfolio. Valid values AWS account IDs and ARNs of AWS Organizations and organizational units.
     * 
     */
    @InputImport(name="principalId", required=true)
      private final Input<String> principalId;

    public Input<String> getPrincipalId() {
        return this.principalId;
    }

    /**
     * Whether to enable sharing of `aws.servicecatalog.TagOption` resources when creating the portfolio share.
     * 
     */
    @InputImport(name="shareTagOptions")
      private final @Nullable Input<Boolean> shareTagOptions;

    public Input<Boolean> getShareTagOptions() {
        return this.shareTagOptions == null ? Input.empty() : this.shareTagOptions;
    }

    /**
     * Type of portfolio share. Valid values are `ACCOUNT` (an external account), `ORGANIZATION` (a share to every account in an organization), `ORGANIZATIONAL_UNIT`, `ORGANIZATION_MEMBER_ACCOUNT` (a share to an account in an organization).
     * 
     */
    @InputImport(name="type", required=true)
      private final Input<String> type;

    public Input<String> getType() {
        return this.type;
    }

    /**
     * Whether to wait (up to the timeout) for the share to be accepted. Organizational shares are automatically accepted.
     * 
     */
    @InputImport(name="waitForAcceptance")
      private final @Nullable Input<Boolean> waitForAcceptance;

    public Input<Boolean> getWaitForAcceptance() {
        return this.waitForAcceptance == null ? Input.empty() : this.waitForAcceptance;
    }

    public PortfolioShareArgs(
        @Nullable Input<String> acceptLanguage,
        Input<String> portfolioId,
        Input<String> principalId,
        @Nullable Input<Boolean> shareTagOptions,
        Input<String> type,
        @Nullable Input<Boolean> waitForAcceptance) {
        this.acceptLanguage = acceptLanguage;
        this.portfolioId = Objects.requireNonNull(portfolioId, "expected parameter 'portfolioId' to be non-null");
        this.principalId = Objects.requireNonNull(principalId, "expected parameter 'principalId' to be non-null");
        this.shareTagOptions = shareTagOptions;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.waitForAcceptance = waitForAcceptance;
    }

    private PortfolioShareArgs() {
        this.acceptLanguage = Input.empty();
        this.portfolioId = Input.empty();
        this.principalId = Input.empty();
        this.shareTagOptions = Input.empty();
        this.type = Input.empty();
        this.waitForAcceptance = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PortfolioShareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> acceptLanguage;
        private Input<String> portfolioId;
        private Input<String> principalId;
        private @Nullable Input<Boolean> shareTagOptions;
        private Input<String> type;
        private @Nullable Input<Boolean> waitForAcceptance;

        public Builder() {
    	      // Empty
        }

        public Builder(PortfolioShareArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptLanguage = defaults.acceptLanguage;
    	      this.portfolioId = defaults.portfolioId;
    	      this.principalId = defaults.principalId;
    	      this.shareTagOptions = defaults.shareTagOptions;
    	      this.type = defaults.type;
    	      this.waitForAcceptance = defaults.waitForAcceptance;
        }

        public Builder acceptLanguage(@Nullable Input<String> acceptLanguage) {
            this.acceptLanguage = acceptLanguage;
            return this;
        }

        public Builder acceptLanguage(@Nullable String acceptLanguage) {
            this.acceptLanguage = Input.ofNullable(acceptLanguage);
            return this;
        }

        public Builder portfolioId(Input<String> portfolioId) {
            this.portfolioId = Objects.requireNonNull(portfolioId);
            return this;
        }

        public Builder portfolioId(String portfolioId) {
            this.portfolioId = Input.of(Objects.requireNonNull(portfolioId));
            return this;
        }

        public Builder principalId(Input<String> principalId) {
            this.principalId = Objects.requireNonNull(principalId);
            return this;
        }

        public Builder principalId(String principalId) {
            this.principalId = Input.of(Objects.requireNonNull(principalId));
            return this;
        }

        public Builder shareTagOptions(@Nullable Input<Boolean> shareTagOptions) {
            this.shareTagOptions = shareTagOptions;
            return this;
        }

        public Builder shareTagOptions(@Nullable Boolean shareTagOptions) {
            this.shareTagOptions = Input.ofNullable(shareTagOptions);
            return this;
        }

        public Builder type(Input<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder type(String type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public Builder waitForAcceptance(@Nullable Input<Boolean> waitForAcceptance) {
            this.waitForAcceptance = waitForAcceptance;
            return this;
        }

        public Builder waitForAcceptance(@Nullable Boolean waitForAcceptance) {
            this.waitForAcceptance = Input.ofNullable(waitForAcceptance);
            return this;
        }
        public PortfolioShareArgs build() {
            return new PortfolioShareArgs(acceptLanguage, portfolioId, principalId, shareTagOptions, type, waitForAcceptance);
        }
    }
}
