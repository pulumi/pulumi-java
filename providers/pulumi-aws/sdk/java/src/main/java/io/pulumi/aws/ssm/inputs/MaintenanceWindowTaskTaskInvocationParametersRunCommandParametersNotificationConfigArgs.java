// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ssm.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs extends io.pulumi.resources.ResourceArgs {

    public static final MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs Empty = new MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs();

    /**
     * An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
     * 
     */
    @Import(name="notificationArn")
      private final @Nullable Output<String> notificationArn;

    public Output<String> notificationArn() {
        return this.notificationArn == null ? Codegen.empty() : this.notificationArn;
    }

    /**
     * The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
     * 
     */
    @Import(name="notificationEvents")
      private final @Nullable Output<List<String>> notificationEvents;

    public Output<List<String>> notificationEvents() {
        return this.notificationEvents == null ? Codegen.empty() : this.notificationEvents;
    }

    /**
     * When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
     * 
     */
    @Import(name="notificationType")
      private final @Nullable Output<String> notificationType;

    public Output<String> notificationType() {
        return this.notificationType == null ? Codegen.empty() : this.notificationType;
    }

    public MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs(
        @Nullable Output<String> notificationArn,
        @Nullable Output<List<String>> notificationEvents,
        @Nullable Output<String> notificationType) {
        this.notificationArn = notificationArn;
        this.notificationEvents = notificationEvents;
        this.notificationType = notificationType;
    }

    private MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs() {
        this.notificationArn = Codegen.empty();
        this.notificationEvents = Codegen.empty();
        this.notificationType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> notificationArn;
        private @Nullable Output<List<String>> notificationEvents;
        private @Nullable Output<String> notificationType;

        public Builder() {
    	      // Empty
        }

        public Builder(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.notificationArn = defaults.notificationArn;
    	      this.notificationEvents = defaults.notificationEvents;
    	      this.notificationType = defaults.notificationType;
        }

        public Builder notificationArn(@Nullable Output<String> notificationArn) {
            this.notificationArn = notificationArn;
            return this;
        }
        public Builder notificationArn(@Nullable String notificationArn) {
            this.notificationArn = Codegen.ofNullable(notificationArn);
            return this;
        }
        public Builder notificationEvents(@Nullable Output<List<String>> notificationEvents) {
            this.notificationEvents = notificationEvents;
            return this;
        }
        public Builder notificationEvents(@Nullable List<String> notificationEvents) {
            this.notificationEvents = Codegen.ofNullable(notificationEvents);
            return this;
        }
        public Builder notificationEvents(String... notificationEvents) {
            return notificationEvents(List.of(notificationEvents));
        }
        public Builder notificationType(@Nullable Output<String> notificationType) {
            this.notificationType = notificationType;
            return this;
        }
        public Builder notificationType(@Nullable String notificationType) {
            this.notificationType = Codegen.ofNullable(notificationType);
            return this;
        }        public MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs build() {
            return new MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs(notificationArn, notificationEvents, notificationType);
        }
    }
}
