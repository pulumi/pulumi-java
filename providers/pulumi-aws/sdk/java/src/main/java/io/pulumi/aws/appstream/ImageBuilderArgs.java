// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.appstream;

import io.pulumi.aws.appstream.inputs.ImageBuilderAccessEndpointArgs;
import io.pulumi.aws.appstream.inputs.ImageBuilderDomainJoinInfoArgs;
import io.pulumi.aws.appstream.inputs.ImageBuilderVpcConfigArgs;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ImageBuilderArgs extends io.pulumi.resources.ResourceArgs {

    public static final ImageBuilderArgs Empty = new ImageBuilderArgs();

    /**
     * Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
     * 
     */
    @InputImport(name="accessEndpoints")
    private final @Nullable Input<List<ImageBuilderAccessEndpointArgs>> accessEndpoints;

    public Input<List<ImageBuilderAccessEndpointArgs>> getAccessEndpoints() {
        return this.accessEndpoints == null ? Input.empty() : this.accessEndpoints;
    }

    /**
     * The version of the AppStream 2.0 agent to use for this image builder.
     * 
     */
    @InputImport(name="appstreamAgentVersion")
    private final @Nullable Input<String> appstreamAgentVersion;

    public Input<String> getAppstreamAgentVersion() {
        return this.appstreamAgentVersion == null ? Input.empty() : this.appstreamAgentVersion;
    }

    /**
     * Description to display.
     * 
     */
    @InputImport(name="description")
    private final @Nullable Input<String> description;

    public Input<String> getDescription() {
        return this.description == null ? Input.empty() : this.description;
    }

    /**
     * Human-readable friendly name for the AppStream image builder.
     * 
     */
    @InputImport(name="displayName")
    private final @Nullable Input<String> displayName;

    public Input<String> getDisplayName() {
        return this.displayName == null ? Input.empty() : this.displayName;
    }

    /**
     * Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
     * 
     */
    @InputImport(name="domainJoinInfo")
    private final @Nullable Input<ImageBuilderDomainJoinInfoArgs> domainJoinInfo;

    public Input<ImageBuilderDomainJoinInfoArgs> getDomainJoinInfo() {
        return this.domainJoinInfo == null ? Input.empty() : this.domainJoinInfo;
    }

    /**
     * Enables or disables default internet access for the image builder.
     * 
     */
    @InputImport(name="enableDefaultInternetAccess")
    private final @Nullable Input<Boolean> enableDefaultInternetAccess;

    public Input<Boolean> getEnableDefaultInternetAccess() {
        return this.enableDefaultInternetAccess == null ? Input.empty() : this.enableDefaultInternetAccess;
    }

    /**
     * ARN of the IAM role to apply to the image builder.
     * 
     */
    @InputImport(name="iamRoleArn")
    private final @Nullable Input<String> iamRoleArn;

    public Input<String> getIamRoleArn() {
        return this.iamRoleArn == null ? Input.empty() : this.iamRoleArn;
    }

    /**
     * ARN of the public, private, or shared image to use.
     * 
     */
    @InputImport(name="imageArn")
    private final @Nullable Input<String> imageArn;

    public Input<String> getImageArn() {
        return this.imageArn == null ? Input.empty() : this.imageArn;
    }

    /**
     * Name of the image used to create the image builder.
     * 
     */
    @InputImport(name="imageName")
    private final @Nullable Input<String> imageName;

    public Input<String> getImageName() {
        return this.imageName == null ? Input.empty() : this.imageName;
    }

    /**
     * The instance type to use when launching the image builder.
     * 
     */
    @InputImport(name="instanceType", required=true)
    private final Input<String> instanceType;

    public Input<String> getInstanceType() {
        return this.instanceType;
    }

    /**
     * Unique name for the image builder.
     * 
     */
    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    /**
     * A map of tags to assign to the instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @InputImport(name="tags")
    private final @Nullable Input<Map<String,String>> tags;

    public Input<Map<String,String>> getTags() {
        return this.tags == null ? Input.empty() : this.tags;
    }

    /**
     * Configuration block for the VPC configuration for the image builder. See below.
     * 
     */
    @InputImport(name="vpcConfig")
    private final @Nullable Input<ImageBuilderVpcConfigArgs> vpcConfig;

    public Input<ImageBuilderVpcConfigArgs> getVpcConfig() {
        return this.vpcConfig == null ? Input.empty() : this.vpcConfig;
    }

    public ImageBuilderArgs(
        @Nullable Input<List<ImageBuilderAccessEndpointArgs>> accessEndpoints,
        @Nullable Input<String> appstreamAgentVersion,
        @Nullable Input<String> description,
        @Nullable Input<String> displayName,
        @Nullable Input<ImageBuilderDomainJoinInfoArgs> domainJoinInfo,
        @Nullable Input<Boolean> enableDefaultInternetAccess,
        @Nullable Input<String> iamRoleArn,
        @Nullable Input<String> imageArn,
        @Nullable Input<String> imageName,
        Input<String> instanceType,
        @Nullable Input<String> name,
        @Nullable Input<Map<String,String>> tags,
        @Nullable Input<ImageBuilderVpcConfigArgs> vpcConfig) {
        this.accessEndpoints = accessEndpoints;
        this.appstreamAgentVersion = appstreamAgentVersion;
        this.description = description;
        this.displayName = displayName;
        this.domainJoinInfo = domainJoinInfo;
        this.enableDefaultInternetAccess = enableDefaultInternetAccess;
        this.iamRoleArn = iamRoleArn;
        this.imageArn = imageArn;
        this.imageName = imageName;
        this.instanceType = Objects.requireNonNull(instanceType, "expected parameter 'instanceType' to be non-null");
        this.name = name;
        this.tags = tags;
        this.vpcConfig = vpcConfig;
    }

    private ImageBuilderArgs() {
        this.accessEndpoints = Input.empty();
        this.appstreamAgentVersion = Input.empty();
        this.description = Input.empty();
        this.displayName = Input.empty();
        this.domainJoinInfo = Input.empty();
        this.enableDefaultInternetAccess = Input.empty();
        this.iamRoleArn = Input.empty();
        this.imageArn = Input.empty();
        this.imageName = Input.empty();
        this.instanceType = Input.empty();
        this.name = Input.empty();
        this.tags = Input.empty();
        this.vpcConfig = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageBuilderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<ImageBuilderAccessEndpointArgs>> accessEndpoints;
        private @Nullable Input<String> appstreamAgentVersion;
        private @Nullable Input<String> description;
        private @Nullable Input<String> displayName;
        private @Nullable Input<ImageBuilderDomainJoinInfoArgs> domainJoinInfo;
        private @Nullable Input<Boolean> enableDefaultInternetAccess;
        private @Nullable Input<String> iamRoleArn;
        private @Nullable Input<String> imageArn;
        private @Nullable Input<String> imageName;
        private Input<String> instanceType;
        private @Nullable Input<String> name;
        private @Nullable Input<Map<String,String>> tags;
        private @Nullable Input<ImageBuilderVpcConfigArgs> vpcConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageBuilderArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessEndpoints = defaults.accessEndpoints;
    	      this.appstreamAgentVersion = defaults.appstreamAgentVersion;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.domainJoinInfo = defaults.domainJoinInfo;
    	      this.enableDefaultInternetAccess = defaults.enableDefaultInternetAccess;
    	      this.iamRoleArn = defaults.iamRoleArn;
    	      this.imageArn = defaults.imageArn;
    	      this.imageName = defaults.imageName;
    	      this.instanceType = defaults.instanceType;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.vpcConfig = defaults.vpcConfig;
        }

        public Builder setAccessEndpoints(@Nullable Input<List<ImageBuilderAccessEndpointArgs>> accessEndpoints) {
            this.accessEndpoints = accessEndpoints;
            return this;
        }

        public Builder setAccessEndpoints(@Nullable List<ImageBuilderAccessEndpointArgs> accessEndpoints) {
            this.accessEndpoints = Input.ofNullable(accessEndpoints);
            return this;
        }

        public Builder setAppstreamAgentVersion(@Nullable Input<String> appstreamAgentVersion) {
            this.appstreamAgentVersion = appstreamAgentVersion;
            return this;
        }

        public Builder setAppstreamAgentVersion(@Nullable String appstreamAgentVersion) {
            this.appstreamAgentVersion = Input.ofNullable(appstreamAgentVersion);
            return this;
        }

        public Builder setDescription(@Nullable Input<String> description) {
            this.description = description;
            return this;
        }

        public Builder setDescription(@Nullable String description) {
            this.description = Input.ofNullable(description);
            return this;
        }

        public Builder setDisplayName(@Nullable Input<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder setDisplayName(@Nullable String displayName) {
            this.displayName = Input.ofNullable(displayName);
            return this;
        }

        public Builder setDomainJoinInfo(@Nullable Input<ImageBuilderDomainJoinInfoArgs> domainJoinInfo) {
            this.domainJoinInfo = domainJoinInfo;
            return this;
        }

        public Builder setDomainJoinInfo(@Nullable ImageBuilderDomainJoinInfoArgs domainJoinInfo) {
            this.domainJoinInfo = Input.ofNullable(domainJoinInfo);
            return this;
        }

        public Builder setEnableDefaultInternetAccess(@Nullable Input<Boolean> enableDefaultInternetAccess) {
            this.enableDefaultInternetAccess = enableDefaultInternetAccess;
            return this;
        }

        public Builder setEnableDefaultInternetAccess(@Nullable Boolean enableDefaultInternetAccess) {
            this.enableDefaultInternetAccess = Input.ofNullable(enableDefaultInternetAccess);
            return this;
        }

        public Builder setIamRoleArn(@Nullable Input<String> iamRoleArn) {
            this.iamRoleArn = iamRoleArn;
            return this;
        }

        public Builder setIamRoleArn(@Nullable String iamRoleArn) {
            this.iamRoleArn = Input.ofNullable(iamRoleArn);
            return this;
        }

        public Builder setImageArn(@Nullable Input<String> imageArn) {
            this.imageArn = imageArn;
            return this;
        }

        public Builder setImageArn(@Nullable String imageArn) {
            this.imageArn = Input.ofNullable(imageArn);
            return this;
        }

        public Builder setImageName(@Nullable Input<String> imageName) {
            this.imageName = imageName;
            return this;
        }

        public Builder setImageName(@Nullable String imageName) {
            this.imageName = Input.ofNullable(imageName);
            return this;
        }

        public Builder setInstanceType(Input<String> instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }

        public Builder setInstanceType(String instanceType) {
            this.instanceType = Input.of(Objects.requireNonNull(instanceType));
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setTags(@Nullable Input<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder setTags(@Nullable Map<String,String> tags) {
            this.tags = Input.ofNullable(tags);
            return this;
        }

        public Builder setVpcConfig(@Nullable Input<ImageBuilderVpcConfigArgs> vpcConfig) {
            this.vpcConfig = vpcConfig;
            return this;
        }

        public Builder setVpcConfig(@Nullable ImageBuilderVpcConfigArgs vpcConfig) {
            this.vpcConfig = Input.ofNullable(vpcConfig);
            return this;
        }
        public ImageBuilderArgs build() {
            return new ImageBuilderArgs(accessEndpoints, appstreamAgentVersion, description, displayName, domainJoinInfo, enableDefaultInternetAccess, iamRoleArn, imageArn, imageName, instanceType, name, tags, vpcConfig);
        }
    }
}
