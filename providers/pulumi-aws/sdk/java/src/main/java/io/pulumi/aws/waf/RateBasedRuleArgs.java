// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.waf;

import io.pulumi.aws.waf.inputs.RateBasedRulePredicateArgs;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RateBasedRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final RateBasedRuleArgs Empty = new RateBasedRuleArgs();

    /**
     * The name or description for the Amazon CloudWatch metric of this rule.
     * 
     */
    @Import(name="metricName", required=true)
      private final Output<String> metricName;

    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * The name or description of the rule.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The objects to include in a rule (documented below).
     * 
     */
    @Import(name="predicates")
      private final @Nullable Output<List<RateBasedRulePredicateArgs>> predicates;

    public Output<List<RateBasedRulePredicateArgs>> predicates() {
        return this.predicates == null ? Codegen.empty() : this.predicates;
    }

    /**
     * Valid value is IP.
     * 
     */
    @Import(name="rateKey", required=true)
      private final Output<String> rateKey;

    public Output<String> rateKey() {
        return this.rateKey;
    }

    /**
     * The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. Minimum value is 100.
     * 
     */
    @Import(name="rateLimit", required=true)
      private final Output<Integer> rateLimit;

    public Output<Integer> rateLimit() {
        return this.rateLimit;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public RateBasedRuleArgs(
        Output<String> metricName,
        @Nullable Output<String> name,
        @Nullable Output<List<RateBasedRulePredicateArgs>> predicates,
        Output<String> rateKey,
        Output<Integer> rateLimit,
        @Nullable Output<Map<String,String>> tags) {
        this.metricName = Objects.requireNonNull(metricName, "expected parameter 'metricName' to be non-null");
        this.name = name;
        this.predicates = predicates;
        this.rateKey = Objects.requireNonNull(rateKey, "expected parameter 'rateKey' to be non-null");
        this.rateLimit = Objects.requireNonNull(rateLimit, "expected parameter 'rateLimit' to be non-null");
        this.tags = tags;
    }

    private RateBasedRuleArgs() {
        this.metricName = Codegen.empty();
        this.name = Codegen.empty();
        this.predicates = Codegen.empty();
        this.rateKey = Codegen.empty();
        this.rateLimit = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RateBasedRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> metricName;
        private @Nullable Output<String> name;
        private @Nullable Output<List<RateBasedRulePredicateArgs>> predicates;
        private Output<String> rateKey;
        private Output<Integer> rateLimit;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(RateBasedRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricName = defaults.metricName;
    	      this.name = defaults.name;
    	      this.predicates = defaults.predicates;
    	      this.rateKey = defaults.rateKey;
    	      this.rateLimit = defaults.rateLimit;
    	      this.tags = defaults.tags;
        }

        public Builder metricName(Output<String> metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        public Builder metricName(String metricName) {
            this.metricName = Output.of(Objects.requireNonNull(metricName));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder predicates(@Nullable Output<List<RateBasedRulePredicateArgs>> predicates) {
            this.predicates = predicates;
            return this;
        }
        public Builder predicates(@Nullable List<RateBasedRulePredicateArgs> predicates) {
            this.predicates = Codegen.ofNullable(predicates);
            return this;
        }
        public Builder predicates(RateBasedRulePredicateArgs... predicates) {
            return predicates(List.of(predicates));
        }
        public Builder rateKey(Output<String> rateKey) {
            this.rateKey = Objects.requireNonNull(rateKey);
            return this;
        }
        public Builder rateKey(String rateKey) {
            this.rateKey = Output.of(Objects.requireNonNull(rateKey));
            return this;
        }
        public Builder rateLimit(Output<Integer> rateLimit) {
            this.rateLimit = Objects.requireNonNull(rateLimit);
            return this;
        }
        public Builder rateLimit(Integer rateLimit) {
            this.rateLimit = Output.of(Objects.requireNonNull(rateLimit));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public RateBasedRuleArgs build() {
            return new RateBasedRuleArgs(metricName, name, predicates, rateKey, rateLimit, tags);
        }
    }
}
