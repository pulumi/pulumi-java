// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.directoryservice;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ConditionalForwaderArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConditionalForwaderArgs Empty = new ConditionalForwaderArgs();

    /**
     * The id of directory.
     * 
     */
    @InputImport(name="directoryId", required=true)
    private final Input<String> directoryId;

    public Input<String> getDirectoryId() {
        return this.directoryId;
    }

    /**
     * A list of forwarder IP addresses.
     * 
     */
    @InputImport(name="dnsIps", required=true)
    private final Input<List<String>> dnsIps;

    public Input<List<String>> getDnsIps() {
        return this.dnsIps;
    }

    /**
     * The fully qualified domain name of the remote domain for which forwarders will be used.
     * 
     */
    @InputImport(name="remoteDomainName", required=true)
    private final Input<String> remoteDomainName;

    public Input<String> getRemoteDomainName() {
        return this.remoteDomainName;
    }

    public ConditionalForwaderArgs(
        Input<String> directoryId,
        Input<List<String>> dnsIps,
        Input<String> remoteDomainName) {
        this.directoryId = Objects.requireNonNull(directoryId, "expected parameter 'directoryId' to be non-null");
        this.dnsIps = Objects.requireNonNull(dnsIps, "expected parameter 'dnsIps' to be non-null");
        this.remoteDomainName = Objects.requireNonNull(remoteDomainName, "expected parameter 'remoteDomainName' to be non-null");
    }

    private ConditionalForwaderArgs() {
        this.directoryId = Input.empty();
        this.dnsIps = Input.empty();
        this.remoteDomainName = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalForwaderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> directoryId;
        private Input<List<String>> dnsIps;
        private Input<String> remoteDomainName;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalForwaderArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.directoryId = defaults.directoryId;
    	      this.dnsIps = defaults.dnsIps;
    	      this.remoteDomainName = defaults.remoteDomainName;
        }

        public Builder setDirectoryId(Input<String> directoryId) {
            this.directoryId = Objects.requireNonNull(directoryId);
            return this;
        }

        public Builder setDirectoryId(String directoryId) {
            this.directoryId = Input.of(Objects.requireNonNull(directoryId));
            return this;
        }

        public Builder setDnsIps(Input<List<String>> dnsIps) {
            this.dnsIps = Objects.requireNonNull(dnsIps);
            return this;
        }

        public Builder setDnsIps(List<String> dnsIps) {
            this.dnsIps = Input.of(Objects.requireNonNull(dnsIps));
            return this;
        }

        public Builder setRemoteDomainName(Input<String> remoteDomainName) {
            this.remoteDomainName = Objects.requireNonNull(remoteDomainName);
            return this;
        }

        public Builder setRemoteDomainName(String remoteDomainName) {
            this.remoteDomainName = Input.of(Objects.requireNonNull(remoteDomainName));
            return this;
        }
        public ConditionalForwaderArgs build() {
            return new ConditionalForwaderArgs(directoryId, dnsIps, remoteDomainName);
        }
    }
}
