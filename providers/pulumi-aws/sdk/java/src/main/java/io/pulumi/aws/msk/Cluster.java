// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.msk;

import io.pulumi.aws.Utilities;
import io.pulumi.aws.msk.ClusterArgs;
import io.pulumi.aws.msk.inputs.ClusterState;
import io.pulumi.aws.msk.outputs.ClusterBrokerNodeGroupInfo;
import io.pulumi.aws.msk.outputs.ClusterClientAuthentication;
import io.pulumi.aws.msk.outputs.ClusterConfigurationInfo;
import io.pulumi.aws.msk.outputs.ClusterEncryptionInfo;
import io.pulumi.aws.msk.outputs.ClusterLoggingInfo;
import io.pulumi.aws.msk.outputs.ClusterOpenMonitoring;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Export;
import io.pulumi.core.annotations.ResourceType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Manages AWS Managed Streaming for Kafka cluster
 * 
 * {{% examples %}}
 * ## Example Usage
 * {{% example %}}
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const vpc = new aws.ec2.Vpc("vpc", {cidrBlock: "192.168.0.0/22"});
 * const azs = aws.getAvailabilityZones({
 *     state: "available",
 * });
 * const subnetAz1 = new aws.ec2.Subnet("subnetAz1", {
 *     availabilityZone: azs.then(azs => azs.names?[0]),
 *     cidrBlock: "192.168.0.0/24",
 *     vpcId: vpc.id,
 * });
 * const subnetAz2 = new aws.ec2.Subnet("subnetAz2", {
 *     availabilityZone: azs.then(azs => azs.names?[1]),
 *     cidrBlock: "192.168.1.0/24",
 *     vpcId: vpc.id,
 * });
 * const subnetAz3 = new aws.ec2.Subnet("subnetAz3", {
 *     availabilityZone: azs.then(azs => azs.names?[2]),
 *     cidrBlock: "192.168.2.0/24",
 *     vpcId: vpc.id,
 * });
 * const sg = new aws.ec2.SecurityGroup("sg", {vpcId: vpc.id});
 * const kms = new aws.kms.Key("kms", {description: "example"});
 * const test = new aws.cloudwatch.LogGroup("test", {});
 * const bucket = new aws.s3.Bucket("bucket", {acl: "private"});
 * const firehoseRole = new aws.iam.Role("firehoseRole", {assumeRolePolicy: `{
 * "Version": "2012-10-17",
 * "Statement": [
 *   {
 *     "Action": "sts:AssumeRole",
 *     "Principal": {
 *       "Service": "firehose.amazonaws.com"
 *     },
 *     "Effect": "Allow",
 *     "Sid": ""
 *   }
 *   ]
 * }
 * `});
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("testStream", {
 *     destination: "s3",
 *     s3Configuration: {
 *         roleArn: firehoseRole.arn,
 *         bucketArn: bucket.arn,
 *     },
 *     tags: {
 *         LogDeliveryEnabled: "placeholder",
 *     },
 * });
 * const example = new aws.msk.Cluster("example", {
 *     kafkaVersion: "2.4.1",
 *     numberOfBrokerNodes: 3,
 *     brokerNodeGroupInfo: {
 *         instanceType: "kafka.m5.large",
 *         ebsVolumeSize: 1000,
 *         clientSubnets: [
 *             subnetAz1.id,
 *             subnetAz2.id,
 *             subnetAz3.id,
 *         ],
 *         securityGroups: [sg.id],
 *     },
 *     encryptionInfo: {
 *         encryptionAtRestKmsKeyArn: kms.arn,
 *     },
 *     openMonitoring: {
 *         prometheus: {
 *             jmxExporter: {
 *                 enabledInBroker: true,
 *             },
 *             nodeExporter: {
 *                 enabledInBroker: true,
 *             },
 *         },
 *     },
 *     loggingInfo: {
 *         brokerLogs: {
 *             cloudwatchLogs: {
 *                 enabled: true,
 *                 logGroup: test.name,
 *             },
 *             firehose: {
 *                 enabled: true,
 *                 deliveryStream: testStream.name,
 *             },
 *             s3: {
 *                 enabled: true,
 *                 bucket: bucket.id,
 *                 prefix: "logs/msk-",
 *             },
 *         },
 *     },
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * export const zookeeperConnectString = example.zookeeperConnectString;
 * export const bootstrapBrokersTls = example.bootstrapBrokersTls;
 * ```
 * ```python
 * import pulumi
 * import pulumi_aws as aws
 * 
 * vpc = aws.ec2.Vpc("vpc", cidr_block="192.168.0.0/22")
 * azs = aws.get_availability_zones(state="available")
 * subnet_az1 = aws.ec2.Subnet("subnetAz1",
 *     availability_zone=azs.names[0],
 *     cidr_block="192.168.0.0/24",
 *     vpc_id=vpc.id)
 * subnet_az2 = aws.ec2.Subnet("subnetAz2",
 *     availability_zone=azs.names[1],
 *     cidr_block="192.168.1.0/24",
 *     vpc_id=vpc.id)
 * subnet_az3 = aws.ec2.Subnet("subnetAz3",
 *     availability_zone=azs.names[2],
 *     cidr_block="192.168.2.0/24",
 *     vpc_id=vpc.id)
 * sg = aws.ec2.SecurityGroup("sg", vpc_id=vpc.id)
 * kms = aws.kms.Key("kms", description="example")
 * test = aws.cloudwatch.LogGroup("test")
 * bucket = aws.s3.Bucket("bucket", acl="private")
 * firehose_role = aws.iam.Role("firehoseRole", assume_role_policy="""{
 * "Version": "2012-10-17",
 * "Statement": [
 *   {
 *     "Action": "sts:AssumeRole",
 *     "Principal": {
 *       "Service": "firehose.amazonaws.com"
 *     },
 *     "Effect": "Allow",
 *     "Sid": ""
 *   }
 *   ]
 * }
 * """)
 * test_stream = aws.kinesis.FirehoseDeliveryStream("testStream",
 *     destination="s3",
 *     s3_configuration=aws.kinesis.FirehoseDeliveryStreamS3ConfigurationArgs(
 *         role_arn=firehose_role.arn,
 *         bucket_arn=bucket.arn,
 *     ),
 *     tags={
 *         "LogDeliveryEnabled": "placeholder",
 *     })
 * example = aws.msk.Cluster("example",
 *     kafka_version="2.4.1",
 *     number_of_broker_nodes=3,
 *     broker_node_group_info=aws.msk.ClusterBrokerNodeGroupInfoArgs(
 *         instance_type="kafka.m5.large",
 *         ebs_volume_size=1000,
 *         client_subnets=[
 *             subnet_az1.id,
 *             subnet_az2.id,
 *             subnet_az3.id,
 *         ],
 *         security_groups=[sg.id],
 *     ),
 *     encryption_info=aws.msk.ClusterEncryptionInfoArgs(
 *         encryption_at_rest_kms_key_arn=kms.arn,
 *     ),
 *     open_monitoring=aws.msk.ClusterOpenMonitoringArgs(
 *         prometheus=aws.msk.ClusterOpenMonitoringPrometheusArgs(
 *             jmx_exporter=aws.msk.ClusterOpenMonitoringPrometheusJmxExporterArgs(
 *                 enabled_in_broker=True,
 *             ),
 *             node_exporter=aws.msk.ClusterOpenMonitoringPrometheusNodeExporterArgs(
 *                 enabled_in_broker=True,
 *             ),
 *         ),
 *     ),
 *     logging_info=aws.msk.ClusterLoggingInfoArgs(
 *         broker_logs=aws.msk.ClusterLoggingInfoBrokerLogsArgs(
 *             cloudwatch_logs=aws.msk.ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs(
 *                 enabled=True,
 *                 log_group=test.name,
 *             ),
 *             firehose=aws.msk.ClusterLoggingInfoBrokerLogsFirehoseArgs(
 *                 enabled=True,
 *                 delivery_stream=test_stream.name,
 *             ),
 *             s3=aws.msk.ClusterLoggingInfoBrokerLogsS3Args(
 *                 enabled=True,
 *                 bucket=bucket.id,
 *                 prefix="logs/msk-",
 *             ),
 *         ),
 *     ),
 *     tags={
 *         "foo": "bar",
 *     })
 * pulumi.export("zookeeperConnectString", example.zookeeper_connect_string)
 * pulumi.export("bootstrapBrokersTls", example.bootstrap_brokers_tls)
 * ```
 * ```csharp
 * using Pulumi;
 * using Aws = Pulumi.Aws;
 * 
 * class MyStack : Stack
 * {
 *     public MyStack()
 *     {
 *         var vpc = new Aws.Ec2.Vpc("vpc", new Aws.Ec2.VpcArgs
 *         {
 *             CidrBlock = "192.168.0.0/22",
 *         });
 *         var azs = Output.Create(Aws.GetAvailabilityZones.InvokeAsync(new Aws.GetAvailabilityZonesArgs
 *         {
 *             State = "available",
 *         }));
 *         var subnetAz1 = new Aws.Ec2.Subnet("subnetAz1", new Aws.Ec2.SubnetArgs
 *         {
 *             AvailabilityZone = azs.Apply(azs => azs.Names?[0]),
 *             CidrBlock = "192.168.0.0/24",
 *             VpcId = vpc.Id,
 *         });
 *         var subnetAz2 = new Aws.Ec2.Subnet("subnetAz2", new Aws.Ec2.SubnetArgs
 *         {
 *             AvailabilityZone = azs.Apply(azs => azs.Names?[1]),
 *             CidrBlock = "192.168.1.0/24",
 *             VpcId = vpc.Id,
 *         });
 *         var subnetAz3 = new Aws.Ec2.Subnet("subnetAz3", new Aws.Ec2.SubnetArgs
 *         {
 *             AvailabilityZone = azs.Apply(azs => azs.Names?[2]),
 *             CidrBlock = "192.168.2.0/24",
 *             VpcId = vpc.Id,
 *         });
 *         var sg = new Aws.Ec2.SecurityGroup("sg", new Aws.Ec2.SecurityGroupArgs
 *         {
 *             VpcId = vpc.Id,
 *         });
 *         var kms = new Aws.Kms.Key("kms", new Aws.Kms.KeyArgs
 *         {
 *             Description = "example",
 *         });
 *         var test = new Aws.CloudWatch.LogGroup("test", new Aws.CloudWatch.LogGroupArgs
 *         {
 *         });
 *         var bucket = new Aws.S3.Bucket("bucket", new Aws.S3.BucketArgs
 *         {
 *             Acl = "private",
 *         });
 *         var firehoseRole = new Aws.Iam.Role("firehoseRole", new Aws.Iam.RoleArgs
 *         {
 *             AssumeRolePolicy = @"{
 * ""Version"": ""2012-10-17"",
 * ""Statement"": [
 *   {
 *     ""Action"": ""sts:AssumeRole"",
 *     ""Principal"": {
 *       ""Service"": ""firehose.amazonaws.com""
 *     },
 *     ""Effect"": ""Allow"",
 *     ""Sid"": """"
 *   }
 *   ]
 * }
 * ",
 *         });
 *         var testStream = new Aws.Kinesis.FirehoseDeliveryStream("testStream", new Aws.Kinesis.FirehoseDeliveryStreamArgs
 *         {
 *             Destination = "s3",
 *             S3Configuration = new Aws.Kinesis.Inputs.FirehoseDeliveryStreamS3ConfigurationArgs
 *             {
 *                 RoleArn = firehoseRole.Arn,
 *                 BucketArn = bucket.Arn,
 *             },
 *             Tags = 
 *             {
 *                 { "LogDeliveryEnabled", "placeholder" },
 *             },
 *         });
 *         var example = new Aws.Msk.Cluster("example", new Aws.Msk.ClusterArgs
 *         {
 *             KafkaVersion = "2.4.1",
 *             NumberOfBrokerNodes = 3,
 *             BrokerNodeGroupInfo = new Aws.Msk.Inputs.ClusterBrokerNodeGroupInfoArgs
 *             {
 *                 InstanceType = "kafka.m5.large",
 *                 EbsVolumeSize = 1000,
 *                 ClientSubnets = 
 *                 {
 *                     subnetAz1.Id,
 *                     subnetAz2.Id,
 *                     subnetAz3.Id,
 *                 },
 *                 SecurityGroups = 
 *                 {
 *                     sg.Id,
 *                 },
 *             },
 *             EncryptionInfo = new Aws.Msk.Inputs.ClusterEncryptionInfoArgs
 *             {
 *                 EncryptionAtRestKmsKeyArn = kms.Arn,
 *             },
 *             OpenMonitoring = new Aws.Msk.Inputs.ClusterOpenMonitoringArgs
 *             {
 *                 Prometheus = new Aws.Msk.Inputs.ClusterOpenMonitoringPrometheusArgs
 *                 {
 *                     JmxExporter = new Aws.Msk.Inputs.ClusterOpenMonitoringPrometheusJmxExporterArgs
 *                     {
 *                         EnabledInBroker = true,
 *                     },
 *                     NodeExporter = new Aws.Msk.Inputs.ClusterOpenMonitoringPrometheusNodeExporterArgs
 *                     {
 *                         EnabledInBroker = true,
 *                     },
 *                 },
 *             },
 *             LoggingInfo = new Aws.Msk.Inputs.ClusterLoggingInfoArgs
 *             {
 *                 BrokerLogs = new Aws.Msk.Inputs.ClusterLoggingInfoBrokerLogsArgs
 *                 {
 *                     CloudwatchLogs = new Aws.Msk.Inputs.ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs
 *                     {
 *                         Enabled = true,
 *                         LogGroup = test.Name,
 *                     },
 *                     Firehose = new Aws.Msk.Inputs.ClusterLoggingInfoBrokerLogsFirehoseArgs
 *                     {
 *                         Enabled = true,
 *                         DeliveryStream = testStream.Name,
 *                     },
 *                     S3 = new Aws.Msk.Inputs.ClusterLoggingInfoBrokerLogsS3Args
 *                     {
 *                         Enabled = true,
 *                         Bucket = bucket.Id,
 *                         Prefix = "logs/msk-",
 *                     },
 *                 },
 *             },
 *             Tags = 
 *             {
 *                 { "foo", "bar" },
 *             },
 *         });
 *         this.ZookeeperConnectString = example.ZookeeperConnectString;
 *         this.BootstrapBrokersTls = example.BootstrapBrokersTls;
 *     }
 * 
 *     [Output("zookeeperConnectString")]
 *     public Output<string> ZookeeperConnectString { get; set; }
 *     [Output("bootstrapBrokersTls")]
 *     public Output<string> BootstrapBrokersTls { get; set; }
 * }
 * ```
 * ```go
 * package main
 * 
 * import (
 * 	"fmt"
 * 
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/cloudwatch"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/iam"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kinesis"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/kms"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/msk"
 * 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
 * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
 * )
 * 
 * func main() {
 * 	pulumi.Run(func(ctx *pulumi.Context) error {
 * 		vpc, err := ec2.NewVpc(ctx, "vpc", &ec2.VpcArgs{
 * 			CidrBlock: pulumi.String("192.168.0.0/22"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		opt0 := "available"
 * 		azs, err := aws.GetAvailabilityZones(ctx, &GetAvailabilityZonesArgs{
 * 			State: &opt0,
 * 		}, nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		subnetAz1, err := ec2.NewSubnet(ctx, "subnetAz1", &ec2.SubnetArgs{
 * 			AvailabilityZone: pulumi.String(azs.Names[0]),
 * 			CidrBlock:        pulumi.String("192.168.0.0/24"),
 * 			VpcId:            vpc.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		subnetAz2, err := ec2.NewSubnet(ctx, "subnetAz2", &ec2.SubnetArgs{
 * 			AvailabilityZone: pulumi.String(azs.Names[1]),
 * 			CidrBlock:        pulumi.String("192.168.1.0/24"),
 * 			VpcId:            vpc.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		subnetAz3, err := ec2.NewSubnet(ctx, "subnetAz3", &ec2.SubnetArgs{
 * 			AvailabilityZone: pulumi.String(azs.Names[2]),
 * 			CidrBlock:        pulumi.String("192.168.2.0/24"),
 * 			VpcId:            vpc.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		sg, err := ec2.NewSecurityGroup(ctx, "sg", &ec2.SecurityGroupArgs{
 * 			VpcId: vpc.ID(),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		kms, err := kms.NewKey(ctx, "kms", &kms.KeyArgs{
 * 			Description: pulumi.String("example"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		test, err := cloudwatch.NewLogGroup(ctx, "test", nil)
 * 		if err != nil {
 * 			return err
 * 		}
 * 		bucket, err := s3.NewBucket(ctx, "bucket", &s3.BucketArgs{
 * 			Acl: pulumi.String("private"),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		firehoseRole, err := iam.NewRole(ctx, "firehoseRole", &iam.RoleArgs{
 * 			AssumeRolePolicy: pulumi.Any(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "\"Version\": \"2012-10-17\",\n", "\"Statement\": [\n", "  {\n", "    \"Action\": \"sts:AssumeRole\",\n", "    \"Principal\": {\n", "      \"Service\": \"firehose.amazonaws.com\"\n", "    },\n", "    \"Effect\": \"Allow\",\n", "    \"Sid\": \"\"\n", "  }\n", "  ]\n", "}\n")),
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		testStream, err := kinesis.NewFirehoseDeliveryStream(ctx, "testStream", &kinesis.FirehoseDeliveryStreamArgs{
 * 			Destination: pulumi.String("s3"),
 * 			S3Configuration: &kinesis.FirehoseDeliveryStreamS3ConfigurationArgs{
 * 				RoleArn:   firehoseRole.Arn,
 * 				BucketArn: bucket.Arn,
 * 			},
 * 			Tags: pulumi.StringMap{
 * 				"LogDeliveryEnabled": pulumi.String("placeholder"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		example, err := msk.NewCluster(ctx, "example", &msk.ClusterArgs{
 * 			KafkaVersion:        pulumi.String("2.4.1"),
 * 			NumberOfBrokerNodes: pulumi.Int(3),
 * 			BrokerNodeGroupInfo: &msk.ClusterBrokerNodeGroupInfoArgs{
 * 				InstanceType:  pulumi.String("kafka.m5.large"),
 * 				EbsVolumeSize: pulumi.Int(1000),
 * 				ClientSubnets: pulumi.StringArray{
 * 					subnetAz1.ID(),
 * 					subnetAz2.ID(),
 * 					subnetAz3.ID(),
 * 				},
 * 				SecurityGroups: pulumi.StringArray{
 * 					sg.ID(),
 * 				},
 * 			},
 * 			EncryptionInfo: &msk.ClusterEncryptionInfoArgs{
 * 				EncryptionAtRestKmsKeyArn: kms.Arn,
 * 			},
 * 			OpenMonitoring: &msk.ClusterOpenMonitoringArgs{
 * 				Prometheus: &msk.ClusterOpenMonitoringPrometheusArgs{
 * 					JmxExporter: &msk.ClusterOpenMonitoringPrometheusJmxExporterArgs{
 * 						EnabledInBroker: pulumi.Bool(true),
 * 					},
 * 					NodeExporter: &msk.ClusterOpenMonitoringPrometheusNodeExporterArgs{
 * 						EnabledInBroker: pulumi.Bool(true),
 * 					},
 * 				},
 * 			},
 * 			LoggingInfo: &msk.ClusterLoggingInfoArgs{
 * 				BrokerLogs: &msk.ClusterLoggingInfoBrokerLogsArgs{
 * 					CloudwatchLogs: &msk.ClusterLoggingInfoBrokerLogsCloudwatchLogsArgs{
 * 						Enabled:  pulumi.Bool(true),
 * 						LogGroup: test.Name,
 * 					},
 * 					Firehose: &msk.ClusterLoggingInfoBrokerLogsFirehoseArgs{
 * 						Enabled:        pulumi.Bool(true),
 * 						DeliveryStream: testStream.Name,
 * 					},
 * 					S3: &msk.ClusterLoggingInfoBrokerLogsS3Args{
 * 						Enabled: pulumi.Bool(true),
 * 						Bucket:  bucket.ID(),
 * 						Prefix:  pulumi.String("logs/msk-"),
 * 					},
 * 				},
 * 			},
 * 			Tags: pulumi.StringMap{
 * 				"foo": pulumi.String("bar"),
 * 			},
 * 		})
 * 		if err != nil {
 * 			return err
 * 		}
 * 		ctx.Export("zookeeperConnectString", example.ZookeeperConnectString)
 * 		ctx.Export("bootstrapBrokersTls", example.BootstrapBrokersTls)
 * 		return nil
 * 	})
 * }
 * ```
 * {{% /example %}}
 * {{% /examples %}}
 * 
 * ## Import
 * 
 * MSK clusters can be imported using the cluster `arn`, e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:msk/cluster:Cluster example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3
 * ```
 * 
 *  
 */
@ResourceType(type="aws:msk/cluster:Cluster")
public class Cluster extends io.pulumi.resources.CustomResource {
    /**
     * Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
     * 
     */
    public Output<String> getArn() {
        return this.arn;
    }
    /**
     * Comma separated list of one or more hostname:port pairs of kafka brokers suitable to bootstrap connectivity to the kafka cluster. Contains a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `PLAINTEXT` or `TLS_PLAINTEXT`. The resource sorts values alphabetically. AWS may not always return all endpoints so this value is not guaranteed to be stable across applies.
     * 
     */
    @Export(name="bootstrapBrokers", type=String.class, parameters={})
    private Output<String> bootstrapBrokers;

    /**
     * @return Comma separated list of one or more hostname:port pairs of kafka brokers suitable to bootstrap connectivity to the kafka cluster. Contains a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `PLAINTEXT` or `TLS_PLAINTEXT`. The resource sorts values alphabetically. AWS may not always return all endpoints so this value is not guaranteed to be stable across applies.
     * 
     */
    public Output<String> getBootstrapBrokers() {
        return this.bootstrapBrokers;
    }
    /**
     * One or more DNS names (or IP addresses) and SASL IAM port pairs. For example, `b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098`. This attribute will have a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `TLS_PLAINTEXT` or `TLS` and `client_authentication.0.sasl.0.iam` is set to `true`. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.
     * 
     */
    @Export(name="bootstrapBrokersSaslIam", type=String.class, parameters={})
    private Output<String> bootstrapBrokersSaslIam;

    /**
     * @return One or more DNS names (or IP addresses) and SASL IAM port pairs. For example, `b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098`. This attribute will have a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `TLS_PLAINTEXT` or `TLS` and `client_authentication.0.sasl.0.iam` is set to `true`. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.
     * 
     */
    public Output<String> getBootstrapBrokersSaslIam() {
        return this.bootstrapBrokersSaslIam;
    }
    /**
     * One or more DNS names (or IP addresses) and SASL SCRAM port pairs. For example, `b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096`. This attribute will have a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `TLS_PLAINTEXT` or `TLS` and `client_authentication.0.sasl.0.scram` is set to `true`. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.
     * 
     */
    @Export(name="bootstrapBrokersSaslScram", type=String.class, parameters={})
    private Output<String> bootstrapBrokersSaslScram;

    /**
     * @return One or more DNS names (or IP addresses) and SASL SCRAM port pairs. For example, `b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096`. This attribute will have a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `TLS_PLAINTEXT` or `TLS` and `client_authentication.0.sasl.0.scram` is set to `true`. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.
     * 
     */
    public Output<String> getBootstrapBrokersSaslScram() {
        return this.bootstrapBrokersSaslScram;
    }
    /**
     * One or more DNS names (or IP addresses) and TLS port pairs. For example, `b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094`. This attribute will have a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `TLS_PLAINTEXT` or `TLS`. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.
     * 
     */
    @Export(name="bootstrapBrokersTls", type=String.class, parameters={})
    private Output<String> bootstrapBrokersTls;

    /**
     * @return One or more DNS names (or IP addresses) and TLS port pairs. For example, `b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094`. This attribute will have a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `TLS_PLAINTEXT` or `TLS`. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.
     * 
     */
    public Output<String> getBootstrapBrokersTls() {
        return this.bootstrapBrokersTls;
    }
    /**
     * Configuration block for the broker nodes of the Kafka cluster.
     * 
     */
    @Export(name="brokerNodeGroupInfo", type=ClusterBrokerNodeGroupInfo.class, parameters={})
    private Output<ClusterBrokerNodeGroupInfo> brokerNodeGroupInfo;

    /**
     * @return Configuration block for the broker nodes of the Kafka cluster.
     * 
     */
    public Output<ClusterBrokerNodeGroupInfo> getBrokerNodeGroupInfo() {
        return this.brokerNodeGroupInfo;
    }
    /**
     * Configuration block for specifying a client authentication. See below.
     * 
     */
    @Export(name="clientAuthentication", type=ClusterClientAuthentication.class, parameters={})
    private Output</* @Nullable */ ClusterClientAuthentication> clientAuthentication;

    /**
     * @return Configuration block for specifying a client authentication. See below.
     * 
     */
    public Output</* @Nullable */ ClusterClientAuthentication> getClientAuthentication() {
        return this.clientAuthentication;
    }
    /**
     * Name of the MSK cluster.
     * 
     */
    @Export(name="clusterName", type=String.class, parameters={})
    private Output<String> clusterName;

    /**
     * @return Name of the MSK cluster.
     * 
     */
    public Output<String> getClusterName() {
        return this.clusterName;
    }
    /**
     * Configuration block for specifying a MSK Configuration to attach to Kafka brokers. See below.
     * 
     */
    @Export(name="configurationInfo", type=ClusterConfigurationInfo.class, parameters={})
    private Output</* @Nullable */ ClusterConfigurationInfo> configurationInfo;

    /**
     * @return Configuration block for specifying a MSK Configuration to attach to Kafka brokers. See below.
     * 
     */
    public Output</* @Nullable */ ClusterConfigurationInfo> getConfigurationInfo() {
        return this.configurationInfo;
    }
    /**
     * Current version of the MSK Cluster used for updates, e.g., `K13V1IB3VIYZZH`
     * * `encryption_info.0.encryption_at_rest_kms_key_arn` - The ARN of the KMS key used for encryption at rest of the broker data volumes.
     * 
     */
    @Export(name="currentVersion", type=String.class, parameters={})
    private Output<String> currentVersion;

    /**
     * @return Current version of the MSK Cluster used for updates, e.g., `K13V1IB3VIYZZH`
     * * `encryption_info.0.encryption_at_rest_kms_key_arn` - The ARN of the KMS key used for encryption at rest of the broker data volumes.
     * 
     */
    public Output<String> getCurrentVersion() {
        return this.currentVersion;
    }
    /**
     * Configuration block for specifying encryption. See below.
     * 
     */
    @Export(name="encryptionInfo", type=ClusterEncryptionInfo.class, parameters={})
    private Output</* @Nullable */ ClusterEncryptionInfo> encryptionInfo;

    /**
     * @return Configuration block for specifying encryption. See below.
     * 
     */
    public Output</* @Nullable */ ClusterEncryptionInfo> getEncryptionInfo() {
        return this.encryptionInfo;
    }
    /**
     * Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
     * 
     */
    @Export(name="enhancedMonitoring", type=String.class, parameters={})
    private Output</* @Nullable */ String> enhancedMonitoring;

    /**
     * @return Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
     * 
     */
    public Output</* @Nullable */ String> getEnhancedMonitoring() {
        return this.enhancedMonitoring;
    }
    /**
     * Specify the desired Kafka software version.
     * 
     */
    @Export(name="kafkaVersion", type=String.class, parameters={})
    private Output<String> kafkaVersion;

    /**
     * @return Specify the desired Kafka software version.
     * 
     */
    public Output<String> getKafkaVersion() {
        return this.kafkaVersion;
    }
    /**
     * Configuration block for streaming broker logs to Cloudwatch/S3/Kinesis Firehose. See below.
     * 
     */
    @Export(name="loggingInfo", type=ClusterLoggingInfo.class, parameters={})
    private Output</* @Nullable */ ClusterLoggingInfo> loggingInfo;

    /**
     * @return Configuration block for streaming broker logs to Cloudwatch/S3/Kinesis Firehose. See below.
     * 
     */
    public Output</* @Nullable */ ClusterLoggingInfo> getLoggingInfo() {
        return this.loggingInfo;
    }
    /**
     * The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
     * 
     */
    @Export(name="numberOfBrokerNodes", type=Integer.class, parameters={})
    private Output<Integer> numberOfBrokerNodes;

    /**
     * @return The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
     * 
     */
    public Output<Integer> getNumberOfBrokerNodes() {
        return this.numberOfBrokerNodes;
    }
    /**
     * Configuration block for JMX and Node monitoring for the MSK cluster. See below.
     * 
     */
    @Export(name="openMonitoring", type=ClusterOpenMonitoring.class, parameters={})
    private Output</* @Nullable */ ClusterOpenMonitoring> openMonitoring;

    /**
     * @return Configuration block for JMX and Node monitoring for the MSK cluster. See below.
     * 
     */
    public Output</* @Nullable */ ClusterOpenMonitoring> getOpenMonitoring() {
        return this.openMonitoring;
    }
    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> getTags() {
        return this.tags;
    }
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Export(name="tagsAll", type=Map.class, parameters={String.class, String.class})
    private Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Output<Map<String,String>> getTagsAll() {
        return this.tagsAll;
    }
    /**
     * A comma separated list of one or more hostname:port pairs to use to connect to the Apache Zookeeper cluster. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
     * 
     */
    @Export(name="zookeeperConnectString", type=String.class, parameters={})
    private Output<String> zookeeperConnectString;

    /**
     * @return A comma separated list of one or more hostname:port pairs to use to connect to the Apache Zookeeper cluster. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
     * 
     */
    public Output<String> getZookeeperConnectString() {
        return this.zookeeperConnectString;
    }
    /**
     * A comma separated list of one or more hostname:port pairs to use to connect to the Apache Zookeeper cluster via TLS. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
     * 
     */
    @Export(name="zookeeperConnectStringTls", type=String.class, parameters={})
    private Output<String> zookeeperConnectStringTls;

    /**
     * @return A comma separated list of one or more hostname:port pairs to use to connect to the Apache Zookeeper cluster via TLS. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
     * 
     */
    public Output<String> getZookeeperConnectStringTls() {
        return this.zookeeperConnectStringTls;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Cluster(String name) {
        this(name, ClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Cluster(String name, ClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Cluster(String name, ClusterArgs args, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:msk/cluster:Cluster", name, args == null ? ClusterArgs.Empty : args, makeResourceOptions(options, Output.empty()));
    }

    private Cluster(String name, Output<String> id, @Nullable ClusterState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        super("aws:msk/cluster:Cluster", name, state, makeResourceOptions(options, id));
    }

    private static io.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable io.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = io.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return io.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Cluster get(String name, Output<String> id, @Nullable ClusterState state, @Nullable io.pulumi.resources.CustomResourceOptions options) {
        return new Cluster(name, id, state, options);
    }
}
