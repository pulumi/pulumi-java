// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.aws.ec2.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LaunchTemplateInstanceMarketOptionsSpotOptionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final LaunchTemplateInstanceMarketOptionsSpotOptionsArgs Empty = new LaunchTemplateInstanceMarketOptionsSpotOptionsArgs();

    /**
     * The required duration in minutes. This value must be a multiple of 60.
     * 
     */
    @Import(name="blockDurationMinutes")
      private final @Nullable Output<Integer> blockDurationMinutes;

    public Output<Integer> getBlockDurationMinutes() {
        return this.blockDurationMinutes == null ? Output.empty() : this.blockDurationMinutes;
    }

    /**
     * The behavior when a Spot Instance is interrupted. Can be `hibernate`,
     * `stop`, or `terminate`. (Default: `terminate`).
     * 
     */
    @Import(name="instanceInterruptionBehavior")
      private final @Nullable Output<String> instanceInterruptionBehavior;

    public Output<String> getInstanceInterruptionBehavior() {
        return this.instanceInterruptionBehavior == null ? Output.empty() : this.instanceInterruptionBehavior;
    }

    /**
     * The maximum hourly price you're willing to pay for the Spot Instances.
     * 
     */
    @Import(name="maxPrice")
      private final @Nullable Output<String> maxPrice;

    public Output<String> getMaxPrice() {
        return this.maxPrice == null ? Output.empty() : this.maxPrice;
    }

    /**
     * The Spot Instance request type. Can be `one-time`, or `persistent`.
     * 
     */
    @Import(name="spotInstanceType")
      private final @Nullable Output<String> spotInstanceType;

    public Output<String> getSpotInstanceType() {
        return this.spotInstanceType == null ? Output.empty() : this.spotInstanceType;
    }

    /**
     * The end date of the request.
     * 
     */
    @Import(name="validUntil")
      private final @Nullable Output<String> validUntil;

    public Output<String> getValidUntil() {
        return this.validUntil == null ? Output.empty() : this.validUntil;
    }

    public LaunchTemplateInstanceMarketOptionsSpotOptionsArgs(
        @Nullable Output<Integer> blockDurationMinutes,
        @Nullable Output<String> instanceInterruptionBehavior,
        @Nullable Output<String> maxPrice,
        @Nullable Output<String> spotInstanceType,
        @Nullable Output<String> validUntil) {
        this.blockDurationMinutes = blockDurationMinutes;
        this.instanceInterruptionBehavior = instanceInterruptionBehavior;
        this.maxPrice = maxPrice;
        this.spotInstanceType = spotInstanceType;
        this.validUntil = validUntil;
    }

    private LaunchTemplateInstanceMarketOptionsSpotOptionsArgs() {
        this.blockDurationMinutes = Output.empty();
        this.instanceInterruptionBehavior = Output.empty();
        this.maxPrice = Output.empty();
        this.spotInstanceType = Output.empty();
        this.validUntil = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LaunchTemplateInstanceMarketOptionsSpotOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> blockDurationMinutes;
        private @Nullable Output<String> instanceInterruptionBehavior;
        private @Nullable Output<String> maxPrice;
        private @Nullable Output<String> spotInstanceType;
        private @Nullable Output<String> validUntil;

        public Builder() {
    	      // Empty
        }

        public Builder(LaunchTemplateInstanceMarketOptionsSpotOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockDurationMinutes = defaults.blockDurationMinutes;
    	      this.instanceInterruptionBehavior = defaults.instanceInterruptionBehavior;
    	      this.maxPrice = defaults.maxPrice;
    	      this.spotInstanceType = defaults.spotInstanceType;
    	      this.validUntil = defaults.validUntil;
        }

        public Builder blockDurationMinutes(@Nullable Output<Integer> blockDurationMinutes) {
            this.blockDurationMinutes = blockDurationMinutes;
            return this;
        }

        public Builder blockDurationMinutes(@Nullable Integer blockDurationMinutes) {
            this.blockDurationMinutes = Output.ofNullable(blockDurationMinutes);
            return this;
        }

        public Builder instanceInterruptionBehavior(@Nullable Output<String> instanceInterruptionBehavior) {
            this.instanceInterruptionBehavior = instanceInterruptionBehavior;
            return this;
        }

        public Builder instanceInterruptionBehavior(@Nullable String instanceInterruptionBehavior) {
            this.instanceInterruptionBehavior = Output.ofNullable(instanceInterruptionBehavior);
            return this;
        }

        public Builder maxPrice(@Nullable Output<String> maxPrice) {
            this.maxPrice = maxPrice;
            return this;
        }

        public Builder maxPrice(@Nullable String maxPrice) {
            this.maxPrice = Output.ofNullable(maxPrice);
            return this;
        }

        public Builder spotInstanceType(@Nullable Output<String> spotInstanceType) {
            this.spotInstanceType = spotInstanceType;
            return this;
        }

        public Builder spotInstanceType(@Nullable String spotInstanceType) {
            this.spotInstanceType = Output.ofNullable(spotInstanceType);
            return this;
        }

        public Builder validUntil(@Nullable Output<String> validUntil) {
            this.validUntil = validUntil;
            return this;
        }

        public Builder validUntil(@Nullable String validUntil) {
            this.validUntil = Output.ofNullable(validUntil);
            return this;
        }
        public LaunchTemplateInstanceMarketOptionsSpotOptionsArgs build() {
            return new LaunchTemplateInstanceMarketOptionsSpotOptionsArgs(blockDurationMinutes, instanceInterruptionBehavior, maxPrice, spotInstanceType, validUntil);
        }
    }
}
