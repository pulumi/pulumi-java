// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.storagegateway;

import com.pulumi.aws.storagegateway.inputs.FileSystemAssociationCacheAttributesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FileSystemAssociationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileSystemAssociationArgs Empty = new FileSystemAssociationArgs();

    /**
     * The Amazon Resource Name (ARN) of the storage used for the audit logs.
     * 
     */
    @Import(name="auditDestinationArn")
      private final @Nullable Output<String> auditDestinationArn;

    public Output<String> auditDestinationArn() {
        return this.auditDestinationArn == null ? Codegen.empty() : this.auditDestinationArn;
    }

    /**
     * Refresh cache information. see Cache Attributes for more details.
     * 
     */
    @Import(name="cacheAttributes")
      private final @Nullable Output<FileSystemAssociationCacheAttributesArgs> cacheAttributes;

    public Output<FileSystemAssociationCacheAttributesArgs> cacheAttributes() {
        return this.cacheAttributes == null ? Codegen.empty() : this.cacheAttributes;
    }

    /**
     * The Amazon Resource Name (ARN) of the gateway.
     * 
     */
    @Import(name="gatewayArn", required=true)
      private final Output<String> gatewayArn;

    public Output<String> gatewayArn() {
        return this.gatewayArn;
    }

    /**
     * The Amazon Resource Name (ARN) of the Amazon FSx file system to associate with the FSx File Gateway.
     * 
     */
    @Import(name="locationArn", required=true)
      private final Output<String> locationArn;

    public Output<String> locationArn() {
        return this.locationArn;
    }

    /**
     * The password of the user credential.
     * 
     */
    @Import(name="password", required=true)
      private final Output<String> password;

    public Output<String> password() {
        return this.password;
    }

    /**
     * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The user name of the user credential that has permission to access the root share of the Amazon FSx file system. The user account must belong to the Amazon FSx delegated admin user group.
     * 
     */
    @Import(name="username", required=true)
      private final Output<String> username;

    public Output<String> username() {
        return this.username;
    }

    public FileSystemAssociationArgs(
        @Nullable Output<String> auditDestinationArn,
        @Nullable Output<FileSystemAssociationCacheAttributesArgs> cacheAttributes,
        Output<String> gatewayArn,
        Output<String> locationArn,
        Output<String> password,
        @Nullable Output<Map<String,String>> tags,
        Output<String> username) {
        this.auditDestinationArn = auditDestinationArn;
        this.cacheAttributes = cacheAttributes;
        this.gatewayArn = Objects.requireNonNull(gatewayArn, "expected parameter 'gatewayArn' to be non-null");
        this.locationArn = Objects.requireNonNull(locationArn, "expected parameter 'locationArn' to be non-null");
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.tags = tags;
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
    }

    private FileSystemAssociationArgs() {
        this.auditDestinationArn = Codegen.empty();
        this.cacheAttributes = Codegen.empty();
        this.gatewayArn = Codegen.empty();
        this.locationArn = Codegen.empty();
        this.password = Codegen.empty();
        this.tags = Codegen.empty();
        this.username = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FileSystemAssociationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> auditDestinationArn;
        private @Nullable Output<FileSystemAssociationCacheAttributesArgs> cacheAttributes;
        private Output<String> gatewayArn;
        private Output<String> locationArn;
        private Output<String> password;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(FileSystemAssociationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditDestinationArn = defaults.auditDestinationArn;
    	      this.cacheAttributes = defaults.cacheAttributes;
    	      this.gatewayArn = defaults.gatewayArn;
    	      this.locationArn = defaults.locationArn;
    	      this.password = defaults.password;
    	      this.tags = defaults.tags;
    	      this.username = defaults.username;
        }

        public Builder auditDestinationArn(@Nullable Output<String> auditDestinationArn) {
            this.auditDestinationArn = auditDestinationArn;
            return this;
        }
        public Builder auditDestinationArn(@Nullable String auditDestinationArn) {
            this.auditDestinationArn = Codegen.ofNullable(auditDestinationArn);
            return this;
        }
        public Builder cacheAttributes(@Nullable Output<FileSystemAssociationCacheAttributesArgs> cacheAttributes) {
            this.cacheAttributes = cacheAttributes;
            return this;
        }
        public Builder cacheAttributes(@Nullable FileSystemAssociationCacheAttributesArgs cacheAttributes) {
            this.cacheAttributes = Codegen.ofNullable(cacheAttributes);
            return this;
        }
        public Builder gatewayArn(Output<String> gatewayArn) {
            this.gatewayArn = Objects.requireNonNull(gatewayArn);
            return this;
        }
        public Builder gatewayArn(String gatewayArn) {
            this.gatewayArn = Output.of(Objects.requireNonNull(gatewayArn));
            return this;
        }
        public Builder locationArn(Output<String> locationArn) {
            this.locationArn = Objects.requireNonNull(locationArn);
            return this;
        }
        public Builder locationArn(String locationArn) {
            this.locationArn = Output.of(Objects.requireNonNull(locationArn));
            return this;
        }
        public Builder password(Output<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        public Builder password(String password) {
            this.password = Output.of(Objects.requireNonNull(password));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder username(Output<String> username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public Builder username(String username) {
            this.username = Output.of(Objects.requireNonNull(username));
            return this;
        }        public FileSystemAssociationArgs build() {
            return new FileSystemAssociationArgs(auditDestinationArn, cacheAttributes, gatewayArn, locationArn, password, tags, username);
        }
    }
}
