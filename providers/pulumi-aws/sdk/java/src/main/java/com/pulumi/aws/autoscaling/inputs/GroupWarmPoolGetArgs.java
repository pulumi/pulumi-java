// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.autoscaling.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupWarmPoolGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupWarmPoolGetArgs Empty = new GroupWarmPoolGetArgs();

    /**
     * Specifies the total maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group.
     * 
     */
    @Import(name="maxGroupPreparedCapacity")
    private @Nullable Output<Integer> maxGroupPreparedCapacity;

    public Optional<Output<Integer>> maxGroupPreparedCapacity() {
        return Optional.ofNullable(this.maxGroupPreparedCapacity);
    }

    /**
     * Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
     * 
     */
    @Import(name="minSize")
    private @Nullable Output<Integer> minSize;

    public Optional<Output<Integer>> minSize() {
        return Optional.ofNullable(this.minSize);
    }

    /**
     * Sets the instance state to transition to after the lifecycle hooks finish. Valid values are: Stopped (default) or Running.
     * 
     */
    @Import(name="poolState")
    private @Nullable Output<String> poolState;

    public Optional<Output<String>> poolState() {
        return Optional.ofNullable(this.poolState);
    }

    private GroupWarmPoolGetArgs() {}

    private GroupWarmPoolGetArgs(GroupWarmPoolGetArgs $) {
        this.maxGroupPreparedCapacity = $.maxGroupPreparedCapacity;
        this.minSize = $.minSize;
        this.poolState = $.poolState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupWarmPoolGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupWarmPoolGetArgs $;

        public Builder() {
            $ = new GroupWarmPoolGetArgs();
        }

        public Builder(GroupWarmPoolGetArgs defaults) {
            $ = new GroupWarmPoolGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder maxGroupPreparedCapacity(@Nullable Output<Integer> maxGroupPreparedCapacity) {
            $.maxGroupPreparedCapacity = maxGroupPreparedCapacity;
            return this;
        }

        public Builder maxGroupPreparedCapacity(Integer maxGroupPreparedCapacity) {
            return maxGroupPreparedCapacity(Output.of(maxGroupPreparedCapacity));
        }

        public Builder minSize(@Nullable Output<Integer> minSize) {
            $.minSize = minSize;
            return this;
        }

        public Builder minSize(Integer minSize) {
            return minSize(Output.of(minSize));
        }

        public Builder poolState(@Nullable Output<String> poolState) {
            $.poolState = poolState;
            return this;
        }

        public Builder poolState(String poolState) {
            return poolState(Output.of(poolState));
        }

        public GroupWarmPoolGetArgs build() {
            return $;
        }
    }

}
