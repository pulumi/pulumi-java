// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2clientvpn.outputs;

import com.pulumi.aws.ec2clientvpn.outputs.GetEndpointAuthenticationOption;
import com.pulumi.aws.ec2clientvpn.outputs.GetEndpointClientConnectOption;
import com.pulumi.aws.ec2clientvpn.outputs.GetEndpointClientLoginBannerOption;
import com.pulumi.aws.ec2clientvpn.outputs.GetEndpointConnectionLogOption;
import com.pulumi.aws.ec2clientvpn.outputs.GetEndpointFilter;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetEndpointResult {
    /**
     * @return The ARN of the Client VPN endpoint.
     * 
     */
    private final String arn;
    /**
     * @return Information about the authentication method used by the Client VPN endpoint.
     * 
     */
    private final List<GetEndpointAuthenticationOption> authenticationOptions;
    /**
     * @return The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
     * 
     */
    private final String clientCidrBlock;
    /**
     * @return The options for managing connection authorization for new client connections.
     * 
     */
    private final List<GetEndpointClientConnectOption> clientConnectOptions;
    /**
     * @return Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
     * 
     */
    private final List<GetEndpointClientLoginBannerOption> clientLoginBannerOptions;
    private final String clientVpnEndpointId;
    /**
     * @return Information about the client connection logging options for the Client VPN endpoint.
     * 
     */
    private final List<GetEndpointConnectionLogOption> connectionLogOptions;
    /**
     * @return A brief description of the endpoint.
     * 
     */
    private final String description;
    /**
     * @return The DNS name to be used by clients when connecting to the Client VPN endpoint.
     * 
     */
    private final String dnsName;
    /**
     * @return Information about the DNS servers to be used for DNS resolution.
     * 
     */
    private final List<String> dnsServers;
    private final @Nullable List<GetEndpointFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The IDs of the security groups for the target network associated with the Client VPN endpoint.
     * 
     */
    private final List<String> securityGroupIds;
    /**
     * @return Indicates whether the self-service portal for the Client VPN endpoint is enabled.
     * 
     */
    private final String selfServicePortal;
    /**
     * @return The ARN of the server certificate.
     * 
     */
    private final String serverCertificateArn;
    /**
     * @return The maximum VPN session duration time in hours.
     * 
     */
    private final Integer sessionTimeoutHours;
    /**
     * @return Indicates whether split-tunnel is enabled in the AWS Client VPN endpoint.
     * 
     */
    private final Boolean splitTunnel;
    private final Map<String,String> tags;
    /**
     * @return The transport protocol used by the Client VPN endpoint.
     * 
     */
    private final String transportProtocol;
    /**
     * @return The ID of the VPC associated with the Client VPN endpoint.
     * 
     */
    private final String vpcId;
    /**
     * @return The port number for the Client VPN endpoint.
     * 
     */
    private final Integer vpnPort;

    @CustomType.Constructor
    private GetEndpointResult(
        @CustomType.Parameter("arn") String arn,
        @CustomType.Parameter("authenticationOptions") List<GetEndpointAuthenticationOption> authenticationOptions,
        @CustomType.Parameter("clientCidrBlock") String clientCidrBlock,
        @CustomType.Parameter("clientConnectOptions") List<GetEndpointClientConnectOption> clientConnectOptions,
        @CustomType.Parameter("clientLoginBannerOptions") List<GetEndpointClientLoginBannerOption> clientLoginBannerOptions,
        @CustomType.Parameter("clientVpnEndpointId") String clientVpnEndpointId,
        @CustomType.Parameter("connectionLogOptions") List<GetEndpointConnectionLogOption> connectionLogOptions,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("dnsName") String dnsName,
        @CustomType.Parameter("dnsServers") List<String> dnsServers,
        @CustomType.Parameter("filters") @Nullable List<GetEndpointFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("securityGroupIds") List<String> securityGroupIds,
        @CustomType.Parameter("selfServicePortal") String selfServicePortal,
        @CustomType.Parameter("serverCertificateArn") String serverCertificateArn,
        @CustomType.Parameter("sessionTimeoutHours") Integer sessionTimeoutHours,
        @CustomType.Parameter("splitTunnel") Boolean splitTunnel,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("transportProtocol") String transportProtocol,
        @CustomType.Parameter("vpcId") String vpcId,
        @CustomType.Parameter("vpnPort") Integer vpnPort) {
        this.arn = arn;
        this.authenticationOptions = authenticationOptions;
        this.clientCidrBlock = clientCidrBlock;
        this.clientConnectOptions = clientConnectOptions;
        this.clientLoginBannerOptions = clientLoginBannerOptions;
        this.clientVpnEndpointId = clientVpnEndpointId;
        this.connectionLogOptions = connectionLogOptions;
        this.description = description;
        this.dnsName = dnsName;
        this.dnsServers = dnsServers;
        this.filters = filters;
        this.id = id;
        this.securityGroupIds = securityGroupIds;
        this.selfServicePortal = selfServicePortal;
        this.serverCertificateArn = serverCertificateArn;
        this.sessionTimeoutHours = sessionTimeoutHours;
        this.splitTunnel = splitTunnel;
        this.tags = tags;
        this.transportProtocol = transportProtocol;
        this.vpcId = vpcId;
        this.vpnPort = vpnPort;
    }

    /**
     * @return The ARN of the Client VPN endpoint.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Information about the authentication method used by the Client VPN endpoint.
     * 
     */
    public List<GetEndpointAuthenticationOption> authenticationOptions() {
        return this.authenticationOptions;
    }
    /**
     * @return The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
     * 
     */
    public String clientCidrBlock() {
        return this.clientCidrBlock;
    }
    /**
     * @return The options for managing connection authorization for new client connections.
     * 
     */
    public List<GetEndpointClientConnectOption> clientConnectOptions() {
        return this.clientConnectOptions;
    }
    /**
     * @return Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
     * 
     */
    public List<GetEndpointClientLoginBannerOption> clientLoginBannerOptions() {
        return this.clientLoginBannerOptions;
    }
    public String clientVpnEndpointId() {
        return this.clientVpnEndpointId;
    }
    /**
     * @return Information about the client connection logging options for the Client VPN endpoint.
     * 
     */
    public List<GetEndpointConnectionLogOption> connectionLogOptions() {
        return this.connectionLogOptions;
    }
    /**
     * @return A brief description of the endpoint.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The DNS name to be used by clients when connecting to the Client VPN endpoint.
     * 
     */
    public String dnsName() {
        return this.dnsName;
    }
    /**
     * @return Information about the DNS servers to be used for DNS resolution.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    public List<GetEndpointFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The IDs of the security groups for the target network associated with the Client VPN endpoint.
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds;
    }
    /**
     * @return Indicates whether the self-service portal for the Client VPN endpoint is enabled.
     * 
     */
    public String selfServicePortal() {
        return this.selfServicePortal;
    }
    /**
     * @return The ARN of the server certificate.
     * 
     */
    public String serverCertificateArn() {
        return this.serverCertificateArn;
    }
    /**
     * @return The maximum VPN session duration time in hours.
     * 
     */
    public Integer sessionTimeoutHours() {
        return this.sessionTimeoutHours;
    }
    /**
     * @return Indicates whether split-tunnel is enabled in the AWS Client VPN endpoint.
     * 
     */
    public Boolean splitTunnel() {
        return this.splitTunnel;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The transport protocol used by the Client VPN endpoint.
     * 
     */
    public String transportProtocol() {
        return this.transportProtocol;
    }
    /**
     * @return The ID of the VPC associated with the Client VPN endpoint.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The port number for the Client VPN endpoint.
     * 
     */
    public Integer vpnPort() {
        return this.vpnPort;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEndpointResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String arn;
        private List<GetEndpointAuthenticationOption> authenticationOptions;
        private String clientCidrBlock;
        private List<GetEndpointClientConnectOption> clientConnectOptions;
        private List<GetEndpointClientLoginBannerOption> clientLoginBannerOptions;
        private String clientVpnEndpointId;
        private List<GetEndpointConnectionLogOption> connectionLogOptions;
        private String description;
        private String dnsName;
        private List<String> dnsServers;
        private @Nullable List<GetEndpointFilter> filters;
        private String id;
        private List<String> securityGroupIds;
        private String selfServicePortal;
        private String serverCertificateArn;
        private Integer sessionTimeoutHours;
        private Boolean splitTunnel;
        private Map<String,String> tags;
        private String transportProtocol;
        private String vpcId;
        private Integer vpnPort;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEndpointResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authenticationOptions = defaults.authenticationOptions;
    	      this.clientCidrBlock = defaults.clientCidrBlock;
    	      this.clientConnectOptions = defaults.clientConnectOptions;
    	      this.clientLoginBannerOptions = defaults.clientLoginBannerOptions;
    	      this.clientVpnEndpointId = defaults.clientVpnEndpointId;
    	      this.connectionLogOptions = defaults.connectionLogOptions;
    	      this.description = defaults.description;
    	      this.dnsName = defaults.dnsName;
    	      this.dnsServers = defaults.dnsServers;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.selfServicePortal = defaults.selfServicePortal;
    	      this.serverCertificateArn = defaults.serverCertificateArn;
    	      this.sessionTimeoutHours = defaults.sessionTimeoutHours;
    	      this.splitTunnel = defaults.splitTunnel;
    	      this.tags = defaults.tags;
    	      this.transportProtocol = defaults.transportProtocol;
    	      this.vpcId = defaults.vpcId;
    	      this.vpnPort = defaults.vpnPort;
        }

        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        public Builder authenticationOptions(List<GetEndpointAuthenticationOption> authenticationOptions) {
            this.authenticationOptions = Objects.requireNonNull(authenticationOptions);
            return this;
        }
        public Builder authenticationOptions(GetEndpointAuthenticationOption... authenticationOptions) {
            return authenticationOptions(List.of(authenticationOptions));
        }
        public Builder clientCidrBlock(String clientCidrBlock) {
            this.clientCidrBlock = Objects.requireNonNull(clientCidrBlock);
            return this;
        }
        public Builder clientConnectOptions(List<GetEndpointClientConnectOption> clientConnectOptions) {
            this.clientConnectOptions = Objects.requireNonNull(clientConnectOptions);
            return this;
        }
        public Builder clientConnectOptions(GetEndpointClientConnectOption... clientConnectOptions) {
            return clientConnectOptions(List.of(clientConnectOptions));
        }
        public Builder clientLoginBannerOptions(List<GetEndpointClientLoginBannerOption> clientLoginBannerOptions) {
            this.clientLoginBannerOptions = Objects.requireNonNull(clientLoginBannerOptions);
            return this;
        }
        public Builder clientLoginBannerOptions(GetEndpointClientLoginBannerOption... clientLoginBannerOptions) {
            return clientLoginBannerOptions(List.of(clientLoginBannerOptions));
        }
        public Builder clientVpnEndpointId(String clientVpnEndpointId) {
            this.clientVpnEndpointId = Objects.requireNonNull(clientVpnEndpointId);
            return this;
        }
        public Builder connectionLogOptions(List<GetEndpointConnectionLogOption> connectionLogOptions) {
            this.connectionLogOptions = Objects.requireNonNull(connectionLogOptions);
            return this;
        }
        public Builder connectionLogOptions(GetEndpointConnectionLogOption... connectionLogOptions) {
            return connectionLogOptions(List.of(connectionLogOptions));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder dnsName(String dnsName) {
            this.dnsName = Objects.requireNonNull(dnsName);
            return this;
        }
        public Builder dnsServers(List<String> dnsServers) {
            this.dnsServers = Objects.requireNonNull(dnsServers);
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        public Builder filters(@Nullable List<GetEndpointFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetEndpointFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder securityGroupIds(List<String> securityGroupIds) {
            this.securityGroupIds = Objects.requireNonNull(securityGroupIds);
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        public Builder selfServicePortal(String selfServicePortal) {
            this.selfServicePortal = Objects.requireNonNull(selfServicePortal);
            return this;
        }
        public Builder serverCertificateArn(String serverCertificateArn) {
            this.serverCertificateArn = Objects.requireNonNull(serverCertificateArn);
            return this;
        }
        public Builder sessionTimeoutHours(Integer sessionTimeoutHours) {
            this.sessionTimeoutHours = Objects.requireNonNull(sessionTimeoutHours);
            return this;
        }
        public Builder splitTunnel(Boolean splitTunnel) {
            this.splitTunnel = Objects.requireNonNull(splitTunnel);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder transportProtocol(String transportProtocol) {
            this.transportProtocol = Objects.requireNonNull(transportProtocol);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vpnPort(Integer vpnPort) {
            this.vpnPort = Objects.requireNonNull(vpnPort);
            return this;
        }        public GetEndpointResult build() {
            return new GetEndpointResult(arn, authenticationOptions, clientCidrBlock, clientConnectOptions, clientLoginBannerOptions, clientVpnEndpointId, connectionLogOptions, description, dnsName, dnsServers, filters, id, securityGroupIds, selfServicePortal, serverCertificateArn, sessionTimeoutHours, splitTunnel, tags, transportProtocol, vpcId, vpnPort);
        }
    }
}
