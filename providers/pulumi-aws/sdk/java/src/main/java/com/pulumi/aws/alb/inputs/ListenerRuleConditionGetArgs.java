// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.alb.inputs;

import com.pulumi.aws.alb.inputs.ListenerRuleConditionHostHeaderGetArgs;
import com.pulumi.aws.alb.inputs.ListenerRuleConditionHttpHeaderGetArgs;
import com.pulumi.aws.alb.inputs.ListenerRuleConditionHttpRequestMethodGetArgs;
import com.pulumi.aws.alb.inputs.ListenerRuleConditionPathPatternGetArgs;
import com.pulumi.aws.alb.inputs.ListenerRuleConditionQueryStringGetArgs;
import com.pulumi.aws.alb.inputs.ListenerRuleConditionSourceIpGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerRuleConditionGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListenerRuleConditionGetArgs Empty = new ListenerRuleConditionGetArgs();

    /**
     * Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
     * 
     */
    @Import(name="hostHeader")
    private @Nullable Output<ListenerRuleConditionHostHeaderGetArgs> hostHeader;

    public Optional<Output<ListenerRuleConditionHostHeaderGetArgs>> hostHeader() {
        return Optional.ofNullable(this.hostHeader);
    }

    /**
     * HTTP headers to match. HTTP Header block fields documented below.
     * 
     */
    @Import(name="httpHeader")
    private @Nullable Output<ListenerRuleConditionHttpHeaderGetArgs> httpHeader;

    public Optional<Output<ListenerRuleConditionHttpHeaderGetArgs>> httpHeader() {
        return Optional.ofNullable(this.httpHeader);
    }

    /**
     * Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
     * 
     */
    @Import(name="httpRequestMethod")
    private @Nullable Output<ListenerRuleConditionHttpRequestMethodGetArgs> httpRequestMethod;

    public Optional<Output<ListenerRuleConditionHttpRequestMethodGetArgs>> httpRequestMethod() {
        return Optional.ofNullable(this.httpRequestMethod);
    }

    /**
     * Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `query_string` condition.
     * 
     */
    @Import(name="pathPattern")
    private @Nullable Output<ListenerRuleConditionPathPatternGetArgs> pathPattern;

    public Optional<Output<ListenerRuleConditionPathPatternGetArgs>> pathPattern() {
        return Optional.ofNullable(this.pathPattern);
    }

    /**
     * Query strings to match. Query String block fields documented below.
     * 
     */
    @Import(name="queryStrings")
    private @Nullable Output<List<ListenerRuleConditionQueryStringGetArgs>> queryStrings;

    public Optional<Output<List<ListenerRuleConditionQueryStringGetArgs>>> queryStrings() {
        return Optional.ofNullable(this.queryStrings);
    }

    /**
     * Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `http_header` condition instead.
     * 
     */
    @Import(name="sourceIp")
    private @Nullable Output<ListenerRuleConditionSourceIpGetArgs> sourceIp;

    public Optional<Output<ListenerRuleConditionSourceIpGetArgs>> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    private ListenerRuleConditionGetArgs() {}

    private ListenerRuleConditionGetArgs(ListenerRuleConditionGetArgs $) {
        this.hostHeader = $.hostHeader;
        this.httpHeader = $.httpHeader;
        this.httpRequestMethod = $.httpRequestMethod;
        this.pathPattern = $.pathPattern;
        this.queryStrings = $.queryStrings;
        this.sourceIp = $.sourceIp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerRuleConditionGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerRuleConditionGetArgs $;

        public Builder() {
            $ = new ListenerRuleConditionGetArgs();
        }

        public Builder(ListenerRuleConditionGetArgs defaults) {
            $ = new ListenerRuleConditionGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder hostHeader(@Nullable Output<ListenerRuleConditionHostHeaderGetArgs> hostHeader) {
            $.hostHeader = hostHeader;
            return this;
        }

        public Builder hostHeader(ListenerRuleConditionHostHeaderGetArgs hostHeader) {
            return hostHeader(Output.of(hostHeader));
        }

        public Builder httpHeader(@Nullable Output<ListenerRuleConditionHttpHeaderGetArgs> httpHeader) {
            $.httpHeader = httpHeader;
            return this;
        }

        public Builder httpHeader(ListenerRuleConditionHttpHeaderGetArgs httpHeader) {
            return httpHeader(Output.of(httpHeader));
        }

        public Builder httpRequestMethod(@Nullable Output<ListenerRuleConditionHttpRequestMethodGetArgs> httpRequestMethod) {
            $.httpRequestMethod = httpRequestMethod;
            return this;
        }

        public Builder httpRequestMethod(ListenerRuleConditionHttpRequestMethodGetArgs httpRequestMethod) {
            return httpRequestMethod(Output.of(httpRequestMethod));
        }

        public Builder pathPattern(@Nullable Output<ListenerRuleConditionPathPatternGetArgs> pathPattern) {
            $.pathPattern = pathPattern;
            return this;
        }

        public Builder pathPattern(ListenerRuleConditionPathPatternGetArgs pathPattern) {
            return pathPattern(Output.of(pathPattern));
        }

        public Builder queryStrings(@Nullable Output<List<ListenerRuleConditionQueryStringGetArgs>> queryStrings) {
            $.queryStrings = queryStrings;
            return this;
        }

        public Builder queryStrings(List<ListenerRuleConditionQueryStringGetArgs> queryStrings) {
            return queryStrings(Output.of(queryStrings));
        }

        public Builder queryStrings(ListenerRuleConditionQueryStringGetArgs... queryStrings) {
            return queryStrings(List.of(queryStrings));
        }

        public Builder sourceIp(@Nullable Output<ListenerRuleConditionSourceIpGetArgs> sourceIp) {
            $.sourceIp = sourceIp;
            return this;
        }

        public Builder sourceIp(ListenerRuleConditionSourceIpGetArgs sourceIp) {
            return sourceIp(Output.of(sourceIp));
        }

        public ListenerRuleConditionGetArgs build() {
            return $;
        }
    }

}
