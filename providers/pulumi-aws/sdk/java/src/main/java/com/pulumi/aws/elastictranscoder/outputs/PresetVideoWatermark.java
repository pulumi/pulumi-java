// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elastictranscoder.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PresetVideoWatermark {
    /**
     * @return The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
     * 
     */
    private final @Nullable String horizontalAlign;
    /**
     * @return The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
     * 
     */
    private final @Nullable String horizontalOffset;
    /**
     * @return A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
     * 
     */
    private final @Nullable String id;
    /**
     * @return The maximum height of the watermark.
     * 
     */
    private final @Nullable String maxHeight;
    /**
     * @return The maximum width of the watermark.
     * 
     */
    private final @Nullable String maxWidth;
    /**
     * @return A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
     * 
     */
    private final @Nullable String opacity;
    /**
     * @return A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
     * 
     */
    private final @Nullable String sizingPolicy;
    /**
     * @return A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
     * 
     */
    private final @Nullable String target;
    /**
     * @return The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
     * 
     */
    private final @Nullable String verticalAlign;
    /**
     * @return The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
     * 
     */
    private final @Nullable String verticalOffset;

    @CustomType.Constructor
    private PresetVideoWatermark(
        @CustomType.Parameter("horizontalAlign") @Nullable String horizontalAlign,
        @CustomType.Parameter("horizontalOffset") @Nullable String horizontalOffset,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("maxHeight") @Nullable String maxHeight,
        @CustomType.Parameter("maxWidth") @Nullable String maxWidth,
        @CustomType.Parameter("opacity") @Nullable String opacity,
        @CustomType.Parameter("sizingPolicy") @Nullable String sizingPolicy,
        @CustomType.Parameter("target") @Nullable String target,
        @CustomType.Parameter("verticalAlign") @Nullable String verticalAlign,
        @CustomType.Parameter("verticalOffset") @Nullable String verticalOffset) {
        this.horizontalAlign = horizontalAlign;
        this.horizontalOffset = horizontalOffset;
        this.id = id;
        this.maxHeight = maxHeight;
        this.maxWidth = maxWidth;
        this.opacity = opacity;
        this.sizingPolicy = sizingPolicy;
        this.target = target;
        this.verticalAlign = verticalAlign;
        this.verticalOffset = verticalOffset;
    }

    /**
     * @return The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
     * 
     */
    public Optional<String> horizontalAlign() {
        return Optional.ofNullable(this.horizontalAlign);
    }
    /**
     * @return The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
     * 
     */
    public Optional<String> horizontalOffset() {
        return Optional.ofNullable(this.horizontalOffset);
    }
    /**
     * @return A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The maximum height of the watermark.
     * 
     */
    public Optional<String> maxHeight() {
        return Optional.ofNullable(this.maxHeight);
    }
    /**
     * @return The maximum width of the watermark.
     * 
     */
    public Optional<String> maxWidth() {
        return Optional.ofNullable(this.maxWidth);
    }
    /**
     * @return A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
     * 
     */
    public Optional<String> opacity() {
        return Optional.ofNullable(this.opacity);
    }
    /**
     * @return A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
     * 
     */
    public Optional<String> sizingPolicy() {
        return Optional.ofNullable(this.sizingPolicy);
    }
    /**
     * @return A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
     * 
     */
    public Optional<String> verticalAlign() {
        return Optional.ofNullable(this.verticalAlign);
    }
    /**
     * @return The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
     * 
     */
    public Optional<String> verticalOffset() {
        return Optional.ofNullable(this.verticalOffset);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PresetVideoWatermark defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String horizontalAlign;
        private @Nullable String horizontalOffset;
        private @Nullable String id;
        private @Nullable String maxHeight;
        private @Nullable String maxWidth;
        private @Nullable String opacity;
        private @Nullable String sizingPolicy;
        private @Nullable String target;
        private @Nullable String verticalAlign;
        private @Nullable String verticalOffset;

        public Builder() {
    	      // Empty
        }

        public Builder(PresetVideoWatermark defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.horizontalAlign = defaults.horizontalAlign;
    	      this.horizontalOffset = defaults.horizontalOffset;
    	      this.id = defaults.id;
    	      this.maxHeight = defaults.maxHeight;
    	      this.maxWidth = defaults.maxWidth;
    	      this.opacity = defaults.opacity;
    	      this.sizingPolicy = defaults.sizingPolicy;
    	      this.target = defaults.target;
    	      this.verticalAlign = defaults.verticalAlign;
    	      this.verticalOffset = defaults.verticalOffset;
        }

        public Builder horizontalAlign(@Nullable String horizontalAlign) {
            this.horizontalAlign = horizontalAlign;
            return this;
        }
        public Builder horizontalOffset(@Nullable String horizontalOffset) {
            this.horizontalOffset = horizontalOffset;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder maxHeight(@Nullable String maxHeight) {
            this.maxHeight = maxHeight;
            return this;
        }
        public Builder maxWidth(@Nullable String maxWidth) {
            this.maxWidth = maxWidth;
            return this;
        }
        public Builder opacity(@Nullable String opacity) {
            this.opacity = opacity;
            return this;
        }
        public Builder sizingPolicy(@Nullable String sizingPolicy) {
            this.sizingPolicy = sizingPolicy;
            return this;
        }
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        public Builder verticalAlign(@Nullable String verticalAlign) {
            this.verticalAlign = verticalAlign;
            return this;
        }
        public Builder verticalOffset(@Nullable String verticalOffset) {
            this.verticalOffset = verticalOffset;
            return this;
        }        public PresetVideoWatermark build() {
            return new PresetVideoWatermark(horizontalAlign, horizontalOffset, id, maxHeight, maxWidth, opacity, sizingPolicy, target, verticalAlign, verticalOffset);
        }
    }
}
