// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.storagegateway;

import com.pulumi.aws.storagegateway.inputs.GatewaySmbActiveDirectorySettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayArgs Empty = new GatewayArgs();

    /**
     * Gateway activation key during resource creation. Conflicts with `gateway_ip_address`. Additional information is available in the [Storage Gateway User Guide](https://docs.aws.amazon.com/storagegateway/latest/userguide/get-activation-key.html).
     * 
     */
    @Import(name="activationKey")
    private @Nullable Output<String> activationKey;

    public Optional<Output<String>> activationKey() {
        return Optional.ofNullable(this.activationKey);
    }

    /**
     * The average download bandwidth rate limit in bits per second. This is supported for the `CACHED`, `STORED`, and `VTL` gateway types.
     * 
     */
    @Import(name="averageDownloadRateLimitInBitsPerSec")
    private @Nullable Output<Integer> averageDownloadRateLimitInBitsPerSec;

    public Optional<Output<Integer>> averageDownloadRateLimitInBitsPerSec() {
        return Optional.ofNullable(this.averageDownloadRateLimitInBitsPerSec);
    }

    /**
     * The average upload bandwidth rate limit in bits per second. This is supported for the `CACHED`, `STORED`, and `VTL` gateway types.
     * 
     */
    @Import(name="averageUploadRateLimitInBitsPerSec")
    private @Nullable Output<Integer> averageUploadRateLimitInBitsPerSec;

    public Optional<Output<Integer>> averageUploadRateLimitInBitsPerSec() {
        return Optional.ofNullable(this.averageUploadRateLimitInBitsPerSec);
    }

    /**
     * The Amazon Resource Name (ARN) of the Amazon CloudWatch log group to use to monitor and log events in the gateway.
     * 
     */
    @Import(name="cloudwatchLogGroupArn")
    private @Nullable Output<String> cloudwatchLogGroupArn;

    public Optional<Output<String>> cloudwatchLogGroupArn() {
        return Optional.ofNullable(this.cloudwatchLogGroupArn);
    }

    /**
     * Gateway IP address to retrieve activation key during resource creation. Conflicts with `activation_key`. Gateway must be accessible on port 80 from where this provider is running. Additional information is available in the [Storage Gateway User Guide](https://docs.aws.amazon.com/storagegateway/latest/userguide/get-activation-key.html).
     * 
     */
    @Import(name="gatewayIpAddress")
    private @Nullable Output<String> gatewayIpAddress;

    public Optional<Output<String>> gatewayIpAddress() {
        return Optional.ofNullable(this.gatewayIpAddress);
    }

    /**
     * Name of the gateway.
     * 
     */
    @Import(name="gatewayName", required=true)
    private Output<String> gatewayName;

    public Output<String> gatewayName() {
        return this.gatewayName;
    }

    /**
     * Time zone for the gateway. The time zone is of the format &#34;GMT&#34;, &#34;GMT-hr:mm&#34;, or &#34;GMT+hr:mm&#34;. For example, `GMT-4:00` indicates the time is 4 hours behind GMT. The time zone is used, for example, for scheduling snapshots and your gateway&#39;s maintenance schedule.
     * 
     */
    @Import(name="gatewayTimezone", required=true)
    private Output<String> gatewayTimezone;

    public Output<String> gatewayTimezone() {
        return this.gatewayTimezone;
    }

    /**
     * Type of the gateway. The default value is `STORED`. Valid values: `CACHED`, `FILE_FSX_SMB`, `FILE_S3`, `STORED`, `VTL`.
     * 
     */
    @Import(name="gatewayType")
    private @Nullable Output<String> gatewayType;

    public Optional<Output<String>> gatewayType() {
        return Optional.ofNullable(this.gatewayType);
    }

    /**
     * VPC endpoint address to be used when activating your gateway. This should be used when your instance is in a private subnet. Requires HTTP access from client computer running this provider. More info on what ports are required by your VPC Endpoint Security group in [Activating a Gateway in a Virtual Private Cloud](https://docs.aws.amazon.com/storagegateway/latest/userguide/gateway-private-link.html).
     * 
     */
    @Import(name="gatewayVpcEndpoint")
    private @Nullable Output<String> gatewayVpcEndpoint;

    public Optional<Output<String>> gatewayVpcEndpoint() {
        return Optional.ofNullable(this.gatewayVpcEndpoint);
    }

    /**
     * Type of medium changer to use for tape gateway. This provider cannot detect drift of this argument. Valid values: `STK-L700`, `AWS-Gateway-VTL`, `IBM-03584L32-0402`.
     * 
     */
    @Import(name="mediumChangerType")
    private @Nullable Output<String> mediumChangerType;

    public Optional<Output<String>> mediumChangerType() {
        return Optional.ofNullable(this.mediumChangerType);
    }

    /**
     * Nested argument with Active Directory domain join information for Server Message Block (SMB) file shares. Only valid for `FILE_S3` and `FILE_FSX_SMB` gateway types. Must be set before creating `ActiveDirectory` authentication SMB file shares. More details below.
     * 
     */
    @Import(name="smbActiveDirectorySettings")
    private @Nullable Output<GatewaySmbActiveDirectorySettingsArgs> smbActiveDirectorySettings;

    public Optional<Output<GatewaySmbActiveDirectorySettingsArgs>> smbActiveDirectorySettings() {
        return Optional.ofNullable(this.smbActiveDirectorySettings);
    }

    /**
     * Specifies whether the shares on this gateway appear when listing shares.
     * 
     */
    @Import(name="smbFileShareVisibility")
    private @Nullable Output<Boolean> smbFileShareVisibility;

    public Optional<Output<Boolean>> smbFileShareVisibility() {
        return Optional.ofNullable(this.smbFileShareVisibility);
    }

    /**
     * Guest password for Server Message Block (SMB) file shares. Only valid for `FILE_S3` and `FILE_FSX_SMB` gateway types. Must be set before creating `GuestAccess` authentication SMB file shares. This provider can only detect drift of the existence of a guest password, not its actual value from the gateway. This provider can however update the password with changing the argument.
     * 
     */
    @Import(name="smbGuestPassword")
    private @Nullable Output<String> smbGuestPassword;

    public Optional<Output<String>> smbGuestPassword() {
        return Optional.ofNullable(this.smbGuestPassword);
    }

    /**
     * Specifies the type of security strategy. Valid values are: `ClientSpecified`, `MandatorySigning`, and `MandatoryEncryption`. See [Setting a Security Level for Your Gateway](https://docs.aws.amazon.com/storagegateway/latest/userguide/managing-gateway-file.html#security-strategy) for more information.
     * 
     */
    @Import(name="smbSecurityStrategy")
    private @Nullable Output<String> smbSecurityStrategy;

    public Optional<Output<String>> smbSecurityStrategy() {
        return Optional.ofNullable(this.smbSecurityStrategy);
    }

    /**
     * Key-value map of resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Type of tape drive to use for tape gateway. This provider cannot detect drift of this argument. Valid values: `IBM-ULT3580-TD5`.
     * 
     */
    @Import(name="tapeDriveType")
    private @Nullable Output<String> tapeDriveType;

    public Optional<Output<String>> tapeDriveType() {
        return Optional.ofNullable(this.tapeDriveType);
    }

    private GatewayArgs() {}

    private GatewayArgs(GatewayArgs $) {
        this.activationKey = $.activationKey;
        this.averageDownloadRateLimitInBitsPerSec = $.averageDownloadRateLimitInBitsPerSec;
        this.averageUploadRateLimitInBitsPerSec = $.averageUploadRateLimitInBitsPerSec;
        this.cloudwatchLogGroupArn = $.cloudwatchLogGroupArn;
        this.gatewayIpAddress = $.gatewayIpAddress;
        this.gatewayName = $.gatewayName;
        this.gatewayTimezone = $.gatewayTimezone;
        this.gatewayType = $.gatewayType;
        this.gatewayVpcEndpoint = $.gatewayVpcEndpoint;
        this.mediumChangerType = $.mediumChangerType;
        this.smbActiveDirectorySettings = $.smbActiveDirectorySettings;
        this.smbFileShareVisibility = $.smbFileShareVisibility;
        this.smbGuestPassword = $.smbGuestPassword;
        this.smbSecurityStrategy = $.smbSecurityStrategy;
        this.tags = $.tags;
        this.tapeDriveType = $.tapeDriveType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayArgs $;

        public Builder() {
            $ = new GatewayArgs();
        }

        public Builder(GatewayArgs defaults) {
            $ = new GatewayArgs(Objects.requireNonNull(defaults));
        }

        public Builder activationKey(@Nullable Output<String> activationKey) {
            $.activationKey = activationKey;
            return this;
        }

        public Builder activationKey(String activationKey) {
            return activationKey(Output.of(activationKey));
        }

        public Builder averageDownloadRateLimitInBitsPerSec(@Nullable Output<Integer> averageDownloadRateLimitInBitsPerSec) {
            $.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec;
            return this;
        }

        public Builder averageDownloadRateLimitInBitsPerSec(Integer averageDownloadRateLimitInBitsPerSec) {
            return averageDownloadRateLimitInBitsPerSec(Output.of(averageDownloadRateLimitInBitsPerSec));
        }

        public Builder averageUploadRateLimitInBitsPerSec(@Nullable Output<Integer> averageUploadRateLimitInBitsPerSec) {
            $.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec;
            return this;
        }

        public Builder averageUploadRateLimitInBitsPerSec(Integer averageUploadRateLimitInBitsPerSec) {
            return averageUploadRateLimitInBitsPerSec(Output.of(averageUploadRateLimitInBitsPerSec));
        }

        public Builder cloudwatchLogGroupArn(@Nullable Output<String> cloudwatchLogGroupArn) {
            $.cloudwatchLogGroupArn = cloudwatchLogGroupArn;
            return this;
        }

        public Builder cloudwatchLogGroupArn(String cloudwatchLogGroupArn) {
            return cloudwatchLogGroupArn(Output.of(cloudwatchLogGroupArn));
        }

        public Builder gatewayIpAddress(@Nullable Output<String> gatewayIpAddress) {
            $.gatewayIpAddress = gatewayIpAddress;
            return this;
        }

        public Builder gatewayIpAddress(String gatewayIpAddress) {
            return gatewayIpAddress(Output.of(gatewayIpAddress));
        }

        public Builder gatewayName(Output<String> gatewayName) {
            $.gatewayName = gatewayName;
            return this;
        }

        public Builder gatewayName(String gatewayName) {
            return gatewayName(Output.of(gatewayName));
        }

        public Builder gatewayTimezone(Output<String> gatewayTimezone) {
            $.gatewayTimezone = gatewayTimezone;
            return this;
        }

        public Builder gatewayTimezone(String gatewayTimezone) {
            return gatewayTimezone(Output.of(gatewayTimezone));
        }

        public Builder gatewayType(@Nullable Output<String> gatewayType) {
            $.gatewayType = gatewayType;
            return this;
        }

        public Builder gatewayType(String gatewayType) {
            return gatewayType(Output.of(gatewayType));
        }

        public Builder gatewayVpcEndpoint(@Nullable Output<String> gatewayVpcEndpoint) {
            $.gatewayVpcEndpoint = gatewayVpcEndpoint;
            return this;
        }

        public Builder gatewayVpcEndpoint(String gatewayVpcEndpoint) {
            return gatewayVpcEndpoint(Output.of(gatewayVpcEndpoint));
        }

        public Builder mediumChangerType(@Nullable Output<String> mediumChangerType) {
            $.mediumChangerType = mediumChangerType;
            return this;
        }

        public Builder mediumChangerType(String mediumChangerType) {
            return mediumChangerType(Output.of(mediumChangerType));
        }

        public Builder smbActiveDirectorySettings(@Nullable Output<GatewaySmbActiveDirectorySettingsArgs> smbActiveDirectorySettings) {
            $.smbActiveDirectorySettings = smbActiveDirectorySettings;
            return this;
        }

        public Builder smbActiveDirectorySettings(GatewaySmbActiveDirectorySettingsArgs smbActiveDirectorySettings) {
            return smbActiveDirectorySettings(Output.of(smbActiveDirectorySettings));
        }

        public Builder smbFileShareVisibility(@Nullable Output<Boolean> smbFileShareVisibility) {
            $.smbFileShareVisibility = smbFileShareVisibility;
            return this;
        }

        public Builder smbFileShareVisibility(Boolean smbFileShareVisibility) {
            return smbFileShareVisibility(Output.of(smbFileShareVisibility));
        }

        public Builder smbGuestPassword(@Nullable Output<String> smbGuestPassword) {
            $.smbGuestPassword = smbGuestPassword;
            return this;
        }

        public Builder smbGuestPassword(String smbGuestPassword) {
            return smbGuestPassword(Output.of(smbGuestPassword));
        }

        public Builder smbSecurityStrategy(@Nullable Output<String> smbSecurityStrategy) {
            $.smbSecurityStrategy = smbSecurityStrategy;
            return this;
        }

        public Builder smbSecurityStrategy(String smbSecurityStrategy) {
            return smbSecurityStrategy(Output.of(smbSecurityStrategy));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tapeDriveType(@Nullable Output<String> tapeDriveType) {
            $.tapeDriveType = tapeDriveType;
            return this;
        }

        public Builder tapeDriveType(String tapeDriveType) {
            return tapeDriveType(Output.of(tapeDriveType));
        }

        public GatewayArgs build() {
            $.gatewayName = Objects.requireNonNull($.gatewayName, "expected parameter 'gatewayName' to be non-null");
            $.gatewayTimezone = Objects.requireNonNull($.gatewayTimezone, "expected parameter 'gatewayTimezone' to be non-null");
            return $;
        }
    }

}
