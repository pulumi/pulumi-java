// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs.inputs;

import com.pulumi.aws.ecs.inputs.TaskDefinitionEphemeralStorageGetArgs;
import com.pulumi.aws.ecs.inputs.TaskDefinitionInferenceAcceleratorGetArgs;
import com.pulumi.aws.ecs.inputs.TaskDefinitionPlacementConstraintGetArgs;
import com.pulumi.aws.ecs.inputs.TaskDefinitionProxyConfigurationGetArgs;
import com.pulumi.aws.ecs.inputs.TaskDefinitionRuntimePlatformGetArgs;
import com.pulumi.aws.ecs.inputs.TaskDefinitionVolumeGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskDefinitionState extends com.pulumi.resources.ResourceArgs {

    public static final TaskDefinitionState Empty = new TaskDefinitionState();

    /**
     * Full ARN of the Task Definition (including both `family` and `revision`).
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
     * 
     */
    @Import(name="containerDefinitions")
    private @Nullable Output<String> containerDefinitions;

    public Optional<Output<String>> containerDefinitions() {
        return Optional.ofNullable(this.containerDefinitions);
    }

    /**
     * Number of cpu units used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<String> cpu;

    public Optional<Output<String>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
     * 
     */
    @Import(name="ephemeralStorage")
    private @Nullable Output<TaskDefinitionEphemeralStorageGetArgs> ephemeralStorage;

    public Optional<Output<TaskDefinitionEphemeralStorageGetArgs>> ephemeralStorage() {
        return Optional.ofNullable(this.ephemeralStorage);
    }

    /**
     * ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
     * 
     */
    @Import(name="executionRoleArn")
    private @Nullable Output<String> executionRoleArn;

    public Optional<Output<String>> executionRoleArn() {
        return Optional.ofNullable(this.executionRoleArn);
    }

    /**
     * A unique name for your task definition.
     * 
     */
    @Import(name="family")
    private @Nullable Output<String> family;

    public Optional<Output<String>> family() {
        return Optional.ofNullable(this.family);
    }

    /**
     * Configuration block(s) with Inference Accelerators settings. Detailed below.
     * 
     */
    @Import(name="inferenceAccelerators")
    private @Nullable Output<List<TaskDefinitionInferenceAcceleratorGetArgs>> inferenceAccelerators;

    public Optional<Output<List<TaskDefinitionInferenceAcceleratorGetArgs>>> inferenceAccelerators() {
        return Optional.ofNullable(this.inferenceAccelerators);
    }

    /**
     * IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
     * 
     */
    @Import(name="ipcMode")
    private @Nullable Output<String> ipcMode;

    public Optional<Output<String>> ipcMode() {
        return Optional.ofNullable(this.ipcMode);
    }

    /**
     * Amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<String> memory;

    public Optional<Output<String>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
     * 
     */
    @Import(name="networkMode")
    private @Nullable Output<String> networkMode;

    public Optional<Output<String>> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }

    /**
     * Process namespace to use for the containers in the task. The valid values are `host` and `task`.
     * 
     */
    @Import(name="pidMode")
    private @Nullable Output<String> pidMode;

    public Optional<Output<String>> pidMode() {
        return Optional.ofNullable(this.pidMode);
    }

    /**
     * Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
     * 
     */
    @Import(name="placementConstraints")
    private @Nullable Output<List<TaskDefinitionPlacementConstraintGetArgs>> placementConstraints;

    public Optional<Output<List<TaskDefinitionPlacementConstraintGetArgs>>> placementConstraints() {
        return Optional.ofNullable(this.placementConstraints);
    }

    /**
     * Configuration block for the App Mesh proxy. Detailed below.
     * 
     */
    @Import(name="proxyConfiguration")
    private @Nullable Output<TaskDefinitionProxyConfigurationGetArgs> proxyConfiguration;

    public Optional<Output<TaskDefinitionProxyConfigurationGetArgs>> proxyConfiguration() {
        return Optional.ofNullable(this.proxyConfiguration);
    }

    /**
     * Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
     * 
     */
    @Import(name="requiresCompatibilities")
    private @Nullable Output<List<String>> requiresCompatibilities;

    public Optional<Output<List<String>>> requiresCompatibilities() {
        return Optional.ofNullable(this.requiresCompatibilities);
    }

    /**
     * Revision of the task in a particular family.
     * 
     */
    @Import(name="revision")
    private @Nullable Output<Integer> revision;

    public Optional<Output<Integer>> revision() {
        return Optional.ofNullable(this.revision);
    }

    /**
     * Configuration block for runtime_platform that containers in your task may use.
     * 
     */
    @Import(name="runtimePlatform")
    private @Nullable Output<TaskDefinitionRuntimePlatformGetArgs> runtimePlatform;

    public Optional<Output<TaskDefinitionRuntimePlatformGetArgs>> runtimePlatform() {
        return Optional.ofNullable(this.runtimePlatform);
    }

    @Import(name="skipDestroy")
    private @Nullable Output<Boolean> skipDestroy;

    public Optional<Output<Boolean>> skipDestroy() {
        return Optional.ofNullable(this.skipDestroy);
    }

    /**
     * Key-value map of resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
     * 
     */
    @Import(name="taskRoleArn")
    private @Nullable Output<String> taskRoleArn;

    public Optional<Output<String>> taskRoleArn() {
        return Optional.ofNullable(this.taskRoleArn);
    }

    /**
     * Configuration block for volumes that containers in your task may use. Detailed below.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<TaskDefinitionVolumeGetArgs>> volumes;

    public Optional<Output<List<TaskDefinitionVolumeGetArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private TaskDefinitionState() {}

    private TaskDefinitionState(TaskDefinitionState $) {
        this.arn = $.arn;
        this.containerDefinitions = $.containerDefinitions;
        this.cpu = $.cpu;
        this.ephemeralStorage = $.ephemeralStorage;
        this.executionRoleArn = $.executionRoleArn;
        this.family = $.family;
        this.inferenceAccelerators = $.inferenceAccelerators;
        this.ipcMode = $.ipcMode;
        this.memory = $.memory;
        this.networkMode = $.networkMode;
        this.pidMode = $.pidMode;
        this.placementConstraints = $.placementConstraints;
        this.proxyConfiguration = $.proxyConfiguration;
        this.requiresCompatibilities = $.requiresCompatibilities;
        this.revision = $.revision;
        this.runtimePlatform = $.runtimePlatform;
        this.skipDestroy = $.skipDestroy;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.taskRoleArn = $.taskRoleArn;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskDefinitionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskDefinitionState $;

        public Builder() {
            $ = new TaskDefinitionState();
        }

        public Builder(TaskDefinitionState defaults) {
            $ = new TaskDefinitionState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder containerDefinitions(@Nullable Output<String> containerDefinitions) {
            $.containerDefinitions = containerDefinitions;
            return this;
        }

        public Builder containerDefinitions(String containerDefinitions) {
            return containerDefinitions(Output.of(containerDefinitions));
        }

        public Builder cpu(@Nullable Output<String> cpu) {
            $.cpu = cpu;
            return this;
        }

        public Builder cpu(String cpu) {
            return cpu(Output.of(cpu));
        }

        public Builder ephemeralStorage(@Nullable Output<TaskDefinitionEphemeralStorageGetArgs> ephemeralStorage) {
            $.ephemeralStorage = ephemeralStorage;
            return this;
        }

        public Builder ephemeralStorage(TaskDefinitionEphemeralStorageGetArgs ephemeralStorage) {
            return ephemeralStorage(Output.of(ephemeralStorage));
        }

        public Builder executionRoleArn(@Nullable Output<String> executionRoleArn) {
            $.executionRoleArn = executionRoleArn;
            return this;
        }

        public Builder executionRoleArn(String executionRoleArn) {
            return executionRoleArn(Output.of(executionRoleArn));
        }

        public Builder family(@Nullable Output<String> family) {
            $.family = family;
            return this;
        }

        public Builder family(String family) {
            return family(Output.of(family));
        }

        public Builder inferenceAccelerators(@Nullable Output<List<TaskDefinitionInferenceAcceleratorGetArgs>> inferenceAccelerators) {
            $.inferenceAccelerators = inferenceAccelerators;
            return this;
        }

        public Builder inferenceAccelerators(List<TaskDefinitionInferenceAcceleratorGetArgs> inferenceAccelerators) {
            return inferenceAccelerators(Output.of(inferenceAccelerators));
        }

        public Builder inferenceAccelerators(TaskDefinitionInferenceAcceleratorGetArgs... inferenceAccelerators) {
            return inferenceAccelerators(List.of(inferenceAccelerators));
        }

        public Builder ipcMode(@Nullable Output<String> ipcMode) {
            $.ipcMode = ipcMode;
            return this;
        }

        public Builder ipcMode(String ipcMode) {
            return ipcMode(Output.of(ipcMode));
        }

        public Builder memory(@Nullable Output<String> memory) {
            $.memory = memory;
            return this;
        }

        public Builder memory(String memory) {
            return memory(Output.of(memory));
        }

        public Builder networkMode(@Nullable Output<String> networkMode) {
            $.networkMode = networkMode;
            return this;
        }

        public Builder networkMode(String networkMode) {
            return networkMode(Output.of(networkMode));
        }

        public Builder pidMode(@Nullable Output<String> pidMode) {
            $.pidMode = pidMode;
            return this;
        }

        public Builder pidMode(String pidMode) {
            return pidMode(Output.of(pidMode));
        }

        public Builder placementConstraints(@Nullable Output<List<TaskDefinitionPlacementConstraintGetArgs>> placementConstraints) {
            $.placementConstraints = placementConstraints;
            return this;
        }

        public Builder placementConstraints(List<TaskDefinitionPlacementConstraintGetArgs> placementConstraints) {
            return placementConstraints(Output.of(placementConstraints));
        }

        public Builder placementConstraints(TaskDefinitionPlacementConstraintGetArgs... placementConstraints) {
            return placementConstraints(List.of(placementConstraints));
        }

        public Builder proxyConfiguration(@Nullable Output<TaskDefinitionProxyConfigurationGetArgs> proxyConfiguration) {
            $.proxyConfiguration = proxyConfiguration;
            return this;
        }

        public Builder proxyConfiguration(TaskDefinitionProxyConfigurationGetArgs proxyConfiguration) {
            return proxyConfiguration(Output.of(proxyConfiguration));
        }

        public Builder requiresCompatibilities(@Nullable Output<List<String>> requiresCompatibilities) {
            $.requiresCompatibilities = requiresCompatibilities;
            return this;
        }

        public Builder requiresCompatibilities(List<String> requiresCompatibilities) {
            return requiresCompatibilities(Output.of(requiresCompatibilities));
        }

        public Builder requiresCompatibilities(String... requiresCompatibilities) {
            return requiresCompatibilities(List.of(requiresCompatibilities));
        }

        public Builder revision(@Nullable Output<Integer> revision) {
            $.revision = revision;
            return this;
        }

        public Builder revision(Integer revision) {
            return revision(Output.of(revision));
        }

        public Builder runtimePlatform(@Nullable Output<TaskDefinitionRuntimePlatformGetArgs> runtimePlatform) {
            $.runtimePlatform = runtimePlatform;
            return this;
        }

        public Builder runtimePlatform(TaskDefinitionRuntimePlatformGetArgs runtimePlatform) {
            return runtimePlatform(Output.of(runtimePlatform));
        }

        public Builder skipDestroy(@Nullable Output<Boolean> skipDestroy) {
            $.skipDestroy = skipDestroy;
            return this;
        }

        public Builder skipDestroy(Boolean skipDestroy) {
            return skipDestroy(Output.of(skipDestroy));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder taskRoleArn(@Nullable Output<String> taskRoleArn) {
            $.taskRoleArn = taskRoleArn;
            return this;
        }

        public Builder taskRoleArn(String taskRoleArn) {
            return taskRoleArn(Output.of(taskRoleArn));
        }

        public Builder volumes(@Nullable Output<List<TaskDefinitionVolumeGetArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        public Builder volumes(List<TaskDefinitionVolumeGetArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        public Builder volumes(TaskDefinitionVolumeGetArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public TaskDefinitionState build() {
            return $;
        }
    }

}
