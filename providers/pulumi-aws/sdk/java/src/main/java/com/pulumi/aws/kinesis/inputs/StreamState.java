// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.inputs;

import com.pulumi.aws.kinesis.inputs.StreamStreamModeDetailsGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StreamState extends com.pulumi.resources.ResourceArgs {

    public static final StreamState Empty = new StreamState();

    /**
     * The Amazon Resource Name (ARN) specifying the Stream (same as `id`)
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The encryption type to use. The only acceptable values are `NONE` or `KMS`. The default value is `NONE`.
     * 
     */
    @Import(name="encryptionType")
      private final @Nullable Output<String> encryptionType;

    public Output<String> encryptionType() {
        return this.encryptionType == null ? Codegen.empty() : this.encryptionType;
    }

    /**
     * A boolean that indicates all registered consumers should be deregistered from the stream so that the stream can be destroyed without error. The default value is `false`.
     * 
     */
    @Import(name="enforceConsumerDeletion")
      private final @Nullable Output<Boolean> enforceConsumerDeletion;

    public Output<Boolean> enforceConsumerDeletion() {
        return this.enforceConsumerDeletion == null ? Codegen.empty() : this.enforceConsumerDeletion;
    }

    /**
     * The GUID for the customer-managed KMS key to use for encryption. You can also use a Kinesis-owned master key by specifying the alias `alias/aws/kinesis`.
     * 
     */
    @Import(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> kmsKeyId() {
        return this.kmsKeyId == null ? Codegen.empty() : this.kmsKeyId;
    }

    /**
     * A name to identify the stream. This is unique to the AWS account and region the Stream is created in.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Length of time data records are accessible after they are added to the stream. The maximum value of a stream&#39;s retention period is 8760 hours. Minimum value is 24. Default is 24.
     * 
     */
    @Import(name="retentionPeriod")
      private final @Nullable Output<Integer> retentionPeriod;

    public Output<Integer> retentionPeriod() {
        return this.retentionPeriod == null ? Codegen.empty() : this.retentionPeriod;
    }

    /**
     * The number of shards that the stream will use. If the `stream_mode` is `PROVISIONED`, this field is required.
     * Amazon has guidelines for specifying the Stream size that should be referenced when creating a Kinesis stream. See [Amazon Kinesis Streams](https://docs.aws.amazon.com/kinesis/latest/dev/amazon-kinesis-streams.html) for more.
     * 
     */
    @Import(name="shardCount")
      private final @Nullable Output<Integer> shardCount;

    public Output<Integer> shardCount() {
        return this.shardCount == null ? Codegen.empty() : this.shardCount;
    }

    /**
     * A list of shard-level CloudWatch metrics which can be enabled for the stream. See [Monitoring with CloudWatch](https://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html) for more. Note that the value ALL should not be used; instead you should provide an explicit list of metrics you wish to enable.
     * 
     */
    @Import(name="shardLevelMetrics")
      private final @Nullable Output<List<String>> shardLevelMetrics;

    public Output<List<String>> shardLevelMetrics() {
        return this.shardLevelMetrics == null ? Codegen.empty() : this.shardLevelMetrics;
    }

    /**
     * Indicates the [capacity mode](https://docs.aws.amazon.com/streams/latest/dev/how-do-i-size-a-stream.html) of the data stream. Detailed below.
     * 
     */
    @Import(name="streamModeDetails")
      private final @Nullable Output<StreamStreamModeDetailsGetArgs> streamModeDetails;

    public Output<StreamStreamModeDetailsGetArgs> streamModeDetails() {
        return this.streamModeDetails == null ? Codegen.empty() : this.streamModeDetails;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    public StreamState(
        @Nullable Output<String> arn,
        @Nullable Output<String> encryptionType,
        @Nullable Output<Boolean> enforceConsumerDeletion,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<String> name,
        @Nullable Output<Integer> retentionPeriod,
        @Nullable Output<Integer> shardCount,
        @Nullable Output<List<String>> shardLevelMetrics,
        @Nullable Output<StreamStreamModeDetailsGetArgs> streamModeDetails,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll) {
        this.arn = arn;
        this.encryptionType = encryptionType;
        this.enforceConsumerDeletion = enforceConsumerDeletion;
        this.kmsKeyId = kmsKeyId;
        this.name = name;
        this.retentionPeriod = retentionPeriod;
        this.shardCount = shardCount;
        this.shardLevelMetrics = shardLevelMetrics;
        this.streamModeDetails = streamModeDetails;
        this.tags = tags;
        this.tagsAll = tagsAll;
    }

    private StreamState() {
        this.arn = Codegen.empty();
        this.encryptionType = Codegen.empty();
        this.enforceConsumerDeletion = Codegen.empty();
        this.kmsKeyId = Codegen.empty();
        this.name = Codegen.empty();
        this.retentionPeriod = Codegen.empty();
        this.shardCount = Codegen.empty();
        this.shardLevelMetrics = Codegen.empty();
        this.streamModeDetails = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> encryptionType;
        private @Nullable Output<Boolean> enforceConsumerDeletion;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> retentionPeriod;
        private @Nullable Output<Integer> shardCount;
        private @Nullable Output<List<String>> shardLevelMetrics;
        private @Nullable Output<StreamStreamModeDetailsGetArgs> streamModeDetails;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;

        public Builder() {
    	      // Empty
        }

        public Builder(StreamState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.encryptionType = defaults.encryptionType;
    	      this.enforceConsumerDeletion = defaults.enforceConsumerDeletion;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.name = defaults.name;
    	      this.retentionPeriod = defaults.retentionPeriod;
    	      this.shardCount = defaults.shardCount;
    	      this.shardLevelMetrics = defaults.shardLevelMetrics;
    	      this.streamModeDetails = defaults.streamModeDetails;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder encryptionType(@Nullable Output<String> encryptionType) {
            this.encryptionType = encryptionType;
            return this;
        }
        public Builder encryptionType(@Nullable String encryptionType) {
            this.encryptionType = Codegen.ofNullable(encryptionType);
            return this;
        }
        public Builder enforceConsumerDeletion(@Nullable Output<Boolean> enforceConsumerDeletion) {
            this.enforceConsumerDeletion = enforceConsumerDeletion;
            return this;
        }
        public Builder enforceConsumerDeletion(@Nullable Boolean enforceConsumerDeletion) {
            this.enforceConsumerDeletion = Codegen.ofNullable(enforceConsumerDeletion);
            return this;
        }
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Codegen.ofNullable(kmsKeyId);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder retentionPeriod(@Nullable Output<Integer> retentionPeriod) {
            this.retentionPeriod = retentionPeriod;
            return this;
        }
        public Builder retentionPeriod(@Nullable Integer retentionPeriod) {
            this.retentionPeriod = Codegen.ofNullable(retentionPeriod);
            return this;
        }
        public Builder shardCount(@Nullable Output<Integer> shardCount) {
            this.shardCount = shardCount;
            return this;
        }
        public Builder shardCount(@Nullable Integer shardCount) {
            this.shardCount = Codegen.ofNullable(shardCount);
            return this;
        }
        public Builder shardLevelMetrics(@Nullable Output<List<String>> shardLevelMetrics) {
            this.shardLevelMetrics = shardLevelMetrics;
            return this;
        }
        public Builder shardLevelMetrics(@Nullable List<String> shardLevelMetrics) {
            this.shardLevelMetrics = Codegen.ofNullable(shardLevelMetrics);
            return this;
        }
        public Builder shardLevelMetrics(String... shardLevelMetrics) {
            return shardLevelMetrics(List.of(shardLevelMetrics));
        }
        public Builder streamModeDetails(@Nullable Output<StreamStreamModeDetailsGetArgs> streamModeDetails) {
            this.streamModeDetails = streamModeDetails;
            return this;
        }
        public Builder streamModeDetails(@Nullable StreamStreamModeDetailsGetArgs streamModeDetails) {
            this.streamModeDetails = Codegen.ofNullable(streamModeDetails);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }        public StreamState build() {
            return new StreamState(arn, encryptionType, enforceConsumerDeletion, kmsKeyId, name, retentionPeriod, shardCount, shardLevelMetrics, streamModeDetails, tags, tagsAll);
        }
    }
}
