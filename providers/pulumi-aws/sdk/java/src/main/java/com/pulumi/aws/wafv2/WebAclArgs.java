// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.wafv2;

import com.pulumi.aws.wafv2.inputs.WebAclCustomResponseBodyArgs;
import com.pulumi.aws.wafv2.inputs.WebAclDefaultActionArgs;
import com.pulumi.aws.wafv2.inputs.WebAclRuleArgs;
import com.pulumi.aws.wafv2.inputs.WebAclVisibilityConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAclArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAclArgs Empty = new WebAclArgs();

    /**
     * Defines custom response bodies that can be referenced by `custom_response` actions. See Custom Response Body below for details.
     * 
     */
    @Import(name="customResponseBodies")
    private @Nullable Output<List<WebAclCustomResponseBodyArgs>> customResponseBodies;

    public Optional<Output<List<WebAclCustomResponseBodyArgs>>> customResponseBodies() {
        return Optional.ofNullable(this.customResponseBodies);
    }

    /**
     * The action to perform if none of the `rules` contained in the WebACL match. See Default Action below for details.
     * 
     */
    @Import(name="defaultAction", required=true)
    private Output<WebAclDefaultActionArgs> defaultAction;

    public Output<WebAclDefaultActionArgs> defaultAction() {
        return this.defaultAction;
    }

    /**
     * A friendly description of the WebACL.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The label string.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See Rules below for details.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<WebAclRuleArgs>> rules;

    public Optional<Output<List<WebAclRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    public Output<String> scope() {
        return this.scope;
    }

    /**
     * An map of key:value pairs to associate with the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Defines and enables Amazon CloudWatch metrics and web request sample collection. See Visibility Configuration below for details.
     * 
     */
    @Import(name="visibilityConfig", required=true)
    private Output<WebAclVisibilityConfigArgs> visibilityConfig;

    public Output<WebAclVisibilityConfigArgs> visibilityConfig() {
        return this.visibilityConfig;
    }

    private WebAclArgs() {}

    private WebAclArgs(WebAclArgs $) {
        this.customResponseBodies = $.customResponseBodies;
        this.defaultAction = $.defaultAction;
        this.description = $.description;
        this.name = $.name;
        this.rules = $.rules;
        this.scope = $.scope;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.visibilityConfig = $.visibilityConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAclArgs $;

        public Builder() {
            $ = new WebAclArgs();
        }

        public Builder(WebAclArgs defaults) {
            $ = new WebAclArgs(Objects.requireNonNull(defaults));
        }

        public Builder customResponseBodies(@Nullable Output<List<WebAclCustomResponseBodyArgs>> customResponseBodies) {
            $.customResponseBodies = customResponseBodies;
            return this;
        }

        public Builder customResponseBodies(List<WebAclCustomResponseBodyArgs> customResponseBodies) {
            return customResponseBodies(Output.of(customResponseBodies));
        }

        public Builder customResponseBodies(WebAclCustomResponseBodyArgs... customResponseBodies) {
            return customResponseBodies(List.of(customResponseBodies));
        }

        public Builder defaultAction(Output<WebAclDefaultActionArgs> defaultAction) {
            $.defaultAction = defaultAction;
            return this;
        }

        public Builder defaultAction(WebAclDefaultActionArgs defaultAction) {
            return defaultAction(Output.of(defaultAction));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder rules(@Nullable Output<List<WebAclRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        public Builder rules(List<WebAclRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        public Builder rules(WebAclRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder visibilityConfig(Output<WebAclVisibilityConfigArgs> visibilityConfig) {
            $.visibilityConfig = visibilityConfig;
            return this;
        }

        public Builder visibilityConfig(WebAclVisibilityConfigArgs visibilityConfig) {
            return visibilityConfig(Output.of(visibilityConfig));
        }

        public WebAclArgs build() {
            $.defaultAction = Objects.requireNonNull($.defaultAction, "expected parameter 'defaultAction' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            $.visibilityConfig = Objects.requireNonNull($.visibilityConfig, "expected parameter 'visibilityConfig' to be non-null");
            return $;
        }
    }

}
