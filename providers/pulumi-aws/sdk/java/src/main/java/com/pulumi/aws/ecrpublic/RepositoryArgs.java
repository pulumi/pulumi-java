// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecrpublic;

import com.pulumi.aws.ecrpublic.inputs.RepositoryCatalogDataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    /**
     * Catalog data configuration for the repository. See below for schema.
     * 
     */
    @Import(name="catalogData")
    private @Nullable Output<RepositoryCatalogDataArgs> catalogData;

    /**
     * @return Catalog data configuration for the repository. See below for schema.
     * 
     */
    public Optional<Output<RepositoryCatalogDataArgs>> catalogData() {
        return Optional.ofNullable(this.catalogData);
    }

    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * Name of the repository.
     * 
     */
    @Import(name="repositoryName", required=true)
    private Output<String> repositoryName;

    /**
     * @return Name of the repository.
     * 
     */
    public Output<String> repositoryName() {
        return this.repositoryName;
    }

    private RepositoryArgs() {}

    private RepositoryArgs(RepositoryArgs $) {
        this.catalogData = $.catalogData;
        this.forceDestroy = $.forceDestroy;
        this.repositoryName = $.repositoryName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryArgs $;

        public Builder() {
            $ = new RepositoryArgs();
        }

        public Builder(RepositoryArgs defaults) {
            $ = new RepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogData Catalog data configuration for the repository. See below for schema.
         * 
         * @return builder
         * 
         */
        public Builder catalogData(@Nullable Output<RepositoryCatalogDataArgs> catalogData) {
            $.catalogData = catalogData;
            return this;
        }

        /**
         * @param catalogData Catalog data configuration for the repository. See below for schema.
         * 
         * @return builder
         * 
         */
        public Builder catalogData(RepositoryCatalogDataArgs catalogData) {
            return catalogData(Output.of(catalogData));
        }

        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        /**
         * @param repositoryName Name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(Output<String> repositoryName) {
            $.repositoryName = repositoryName;
            return this;
        }

        /**
         * @param repositoryName Name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(String repositoryName) {
            return repositoryName(Output.of(repositoryName));
        }

        public RepositoryArgs build() {
            $.repositoryName = Objects.requireNonNull($.repositoryName, "expected parameter 'repositoryName' to be non-null");
            return $;
        }
    }

}
