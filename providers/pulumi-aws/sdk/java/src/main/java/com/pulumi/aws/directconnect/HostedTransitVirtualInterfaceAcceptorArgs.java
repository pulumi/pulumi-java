// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directconnect;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HostedTransitVirtualInterfaceAcceptorArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostedTransitVirtualInterfaceAcceptorArgs Empty = new HostedTransitVirtualInterfaceAcceptorArgs();

    /**
     * The ID of the Direct Connect gateway to which to connect the virtual interface.
     * 
     */
    @Import(name="dxGatewayId", required=true)
      private final Output<String> dxGatewayId;

    public Output<String> dxGatewayId() {
        return this.dxGatewayId;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The ID of the Direct Connect virtual interface to accept.
     * 
     */
    @Import(name="virtualInterfaceId", required=true)
      private final Output<String> virtualInterfaceId;

    public Output<String> virtualInterfaceId() {
        return this.virtualInterfaceId;
    }

    public HostedTransitVirtualInterfaceAcceptorArgs(
        Output<String> dxGatewayId,
        @Nullable Output<Map<String,String>> tags,
        Output<String> virtualInterfaceId) {
        this.dxGatewayId = Objects.requireNonNull(dxGatewayId, "expected parameter 'dxGatewayId' to be non-null");
        this.tags = tags;
        this.virtualInterfaceId = Objects.requireNonNull(virtualInterfaceId, "expected parameter 'virtualInterfaceId' to be non-null");
    }

    private HostedTransitVirtualInterfaceAcceptorArgs() {
        this.dxGatewayId = Codegen.empty();
        this.tags = Codegen.empty();
        this.virtualInterfaceId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HostedTransitVirtualInterfaceAcceptorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> dxGatewayId;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> virtualInterfaceId;

        public Builder() {
    	      // Empty
        }

        public Builder(HostedTransitVirtualInterfaceAcceptorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dxGatewayId = defaults.dxGatewayId;
    	      this.tags = defaults.tags;
    	      this.virtualInterfaceId = defaults.virtualInterfaceId;
        }

        public Builder dxGatewayId(Output<String> dxGatewayId) {
            this.dxGatewayId = Objects.requireNonNull(dxGatewayId);
            return this;
        }
        public Builder dxGatewayId(String dxGatewayId) {
            this.dxGatewayId = Output.of(Objects.requireNonNull(dxGatewayId));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder virtualInterfaceId(Output<String> virtualInterfaceId) {
            this.virtualInterfaceId = Objects.requireNonNull(virtualInterfaceId);
            return this;
        }
        public Builder virtualInterfaceId(String virtualInterfaceId) {
            this.virtualInterfaceId = Output.of(Objects.requireNonNull(virtualInterfaceId));
            return this;
        }        public HostedTransitVirtualInterfaceAcceptorArgs build() {
            return new HostedTransitVirtualInterfaceAcceptorArgs(dxGatewayId, tags, virtualInterfaceId);
        }
    }
}
