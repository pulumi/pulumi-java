// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53recoverycontrol.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class SafetyRuleRuleConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SafetyRuleRuleConfigArgs Empty = new SafetyRuleRuleConfigArgs();

    /**
     * Logical negation of the rule.
     * 
     */
    @Import(name="inverted", required=true)
      private final Output<Boolean> inverted;

    public Output<Boolean> inverted() {
        return this.inverted;
    }

    /**
     * Number of controls that must be set when you specify an `ATLEAST` type rule.
     * 
     */
    @Import(name="threshold", required=true)
      private final Output<Integer> threshold;

    public Output<Integer> threshold() {
        return this.threshold;
    }

    /**
     * Rule type. Valid values are `ATLEAST`, `AND`, and `OR`.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public SafetyRuleRuleConfigArgs(
        Output<Boolean> inverted,
        Output<Integer> threshold,
        Output<String> type) {
        this.inverted = Objects.requireNonNull(inverted, "expected parameter 'inverted' to be non-null");
        this.threshold = Objects.requireNonNull(threshold, "expected parameter 'threshold' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private SafetyRuleRuleConfigArgs() {
        this.inverted = Codegen.empty();
        this.threshold = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SafetyRuleRuleConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Boolean> inverted;
        private Output<Integer> threshold;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(SafetyRuleRuleConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inverted = defaults.inverted;
    	      this.threshold = defaults.threshold;
    	      this.type = defaults.type;
        }

        public Builder inverted(Output<Boolean> inverted) {
            this.inverted = Objects.requireNonNull(inverted);
            return this;
        }
        public Builder inverted(Boolean inverted) {
            this.inverted = Output.of(Objects.requireNonNull(inverted));
            return this;
        }
        public Builder threshold(Output<Integer> threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }
        public Builder threshold(Integer threshold) {
            this.threshold = Output.of(Objects.requireNonNull(threshold));
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public SafetyRuleRuleConfigArgs build() {
            return new SafetyRuleRuleConfigArgs(inverted, threshold, type);
        }
    }
}
