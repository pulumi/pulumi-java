// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.workspaces.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetWorkspaceWorkspaceProperty extends com.pulumi.resources.InvokeArgs {

    public static final GetWorkspaceWorkspaceProperty Empty = new GetWorkspaceWorkspaceProperty();

    /**
     * The compute type. For more information, see [Amazon WorkSpaces Bundles](http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles). Valid values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `GRAPHICS`, `POWERPRO` and `GRAPHICSPRO`.
     * 
     */
    @Import(name="computeTypeName", required=true)
    private String computeTypeName;

    public String computeTypeName() {
        return this.computeTypeName;
    }

    /**
     * The size of the root volume.
     * 
     */
    @Import(name="rootVolumeSizeGib", required=true)
    private Integer rootVolumeSizeGib;

    public Integer rootVolumeSizeGib() {
        return this.rootVolumeSizeGib;
    }

    /**
     * The running mode. For more information, see [Manage the WorkSpace Running Mode](https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html). Valid values are `AUTO_STOP` and `ALWAYS_ON`.
     * 
     */
    @Import(name="runningMode", required=true)
    private String runningMode;

    public String runningMode() {
        return this.runningMode;
    }

    /**
     * The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.
     * 
     */
    @Import(name="runningModeAutoStopTimeoutInMinutes", required=true)
    private Integer runningModeAutoStopTimeoutInMinutes;

    public Integer runningModeAutoStopTimeoutInMinutes() {
        return this.runningModeAutoStopTimeoutInMinutes;
    }

    /**
     * The size of the user storage.
     * 
     */
    @Import(name="userVolumeSizeGib", required=true)
    private Integer userVolumeSizeGib;

    public Integer userVolumeSizeGib() {
        return this.userVolumeSizeGib;
    }

    private GetWorkspaceWorkspaceProperty() {}

    private GetWorkspaceWorkspaceProperty(GetWorkspaceWorkspaceProperty $) {
        this.computeTypeName = $.computeTypeName;
        this.rootVolumeSizeGib = $.rootVolumeSizeGib;
        this.runningMode = $.runningMode;
        this.runningModeAutoStopTimeoutInMinutes = $.runningModeAutoStopTimeoutInMinutes;
        this.userVolumeSizeGib = $.userVolumeSizeGib;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWorkspaceWorkspaceProperty defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWorkspaceWorkspaceProperty $;

        public Builder() {
            $ = new GetWorkspaceWorkspaceProperty();
        }

        public Builder(GetWorkspaceWorkspaceProperty defaults) {
            $ = new GetWorkspaceWorkspaceProperty(Objects.requireNonNull(defaults));
        }

        public Builder computeTypeName(String computeTypeName) {
            $.computeTypeName = computeTypeName;
            return this;
        }

        public Builder rootVolumeSizeGib(Integer rootVolumeSizeGib) {
            $.rootVolumeSizeGib = rootVolumeSizeGib;
            return this;
        }

        public Builder runningMode(String runningMode) {
            $.runningMode = runningMode;
            return this;
        }

        public Builder runningModeAutoStopTimeoutInMinutes(Integer runningModeAutoStopTimeoutInMinutes) {
            $.runningModeAutoStopTimeoutInMinutes = runningModeAutoStopTimeoutInMinutes;
            return this;
        }

        public Builder userVolumeSizeGib(Integer userVolumeSizeGib) {
            $.userVolumeSizeGib = userVolumeSizeGib;
            return this;
        }

        public GetWorkspaceWorkspaceProperty build() {
            $.computeTypeName = Objects.requireNonNull($.computeTypeName, "expected parameter 'computeTypeName' to be non-null");
            $.rootVolumeSizeGib = Objects.requireNonNull($.rootVolumeSizeGib, "expected parameter 'rootVolumeSizeGib' to be non-null");
            $.runningMode = Objects.requireNonNull($.runningMode, "expected parameter 'runningMode' to be non-null");
            $.runningModeAutoStopTimeoutInMinutes = Objects.requireNonNull($.runningModeAutoStopTimeoutInMinutes, "expected parameter 'runningModeAutoStopTimeoutInMinutes' to be non-null");
            $.userVolumeSizeGib = Objects.requireNonNull($.userVolumeSizeGib, "expected parameter 'userVolumeSizeGib' to be non-null");
            return $;
        }
    }

}
