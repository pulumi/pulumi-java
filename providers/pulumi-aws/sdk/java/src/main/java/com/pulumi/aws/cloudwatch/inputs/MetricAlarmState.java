// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.inputs;

import com.pulumi.aws.cloudwatch.inputs.MetricAlarmMetricQueryGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricAlarmState extends com.pulumi.resources.ResourceArgs {

    public static final MetricAlarmState Empty = new MetricAlarmState();

    /**
     * Indicates whether or not actions should be executed during any changes to the alarm&#39;s state. Defaults to `true`.
     * 
     */
    @Import(name="actionsEnabled")
    private @Nullable Output<Boolean> actionsEnabled;

    public Optional<Output<Boolean>> actionsEnabled() {
        return Optional.ofNullable(this.actionsEnabled);
    }

    /**
     * The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     */
    @Import(name="alarmActions")
    private @Nullable Output<List<String>> alarmActions;

    public Optional<Output<List<String>>> alarmActions() {
        return Optional.ofNullable(this.alarmActions);
    }

    /**
     * The description for the alarm.
     * 
     */
    @Import(name="alarmDescription")
    private @Nullable Output<String> alarmDescription;

    public Optional<Output<String>> alarmDescription() {
        return Optional.ofNullable(this.alarmDescription);
    }

    /**
     * The ARN of the CloudWatch Metric Alarm.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: `GreaterThanOrEqualToThreshold`, `GreaterThanThreshold`, `LessThanThreshold`, `LessThanOrEqualToThreshold`. Additionally, the values  `LessThanLowerOrGreaterThanUpperThreshold`, `LessThanLowerThreshold`, and `GreaterThanUpperThreshold` are used only for alarms based on anomaly detection models.
     * 
     */
    @Import(name="comparisonOperator")
    private @Nullable Output<String> comparisonOperator;

    public Optional<Output<String>> comparisonOperator() {
        return Optional.ofNullable(this.comparisonOperator);
    }

    /**
     * The number of datapoints that must be breaching to trigger the alarm.
     * 
     */
    @Import(name="datapointsToAlarm")
    private @Nullable Output<Integer> datapointsToAlarm;

    public Optional<Output<Integer>> datapointsToAlarm() {
        return Optional.ofNullable(this.datapointsToAlarm);
    }

    /**
     * The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<Map<String,String>> dimensions;

    public Optional<Output<Map<String,String>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * Used only for alarms
     * based on percentiles. If you specify `ignore`, the alarm state will not
     * change during periods with too few data points to be statistically significant.
     * If you specify `evaluate` or omit this parameter, the alarm will always be
     * evaluated and possibly change state no matter how many data points are available.
     * The following values are supported: `ignore`, and `evaluate`.
     * 
     */
    @Import(name="evaluateLowSampleCountPercentiles")
    private @Nullable Output<String> evaluateLowSampleCountPercentiles;

    public Optional<Output<String>> evaluateLowSampleCountPercentiles() {
        return Optional.ofNullable(this.evaluateLowSampleCountPercentiles);
    }

    /**
     * The number of periods over which data is compared to the specified threshold.
     * 
     */
    @Import(name="evaluationPeriods")
    private @Nullable Output<Integer> evaluationPeriods;

    public Optional<Output<Integer>> evaluationPeriods() {
        return Optional.ofNullable(this.evaluationPeriods);
    }

    /**
     * The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
     * 
     */
    @Import(name="extendedStatistic")
    private @Nullable Output<String> extendedStatistic;

    public Optional<Output<String>> extendedStatistic() {
        return Optional.ofNullable(this.extendedStatistic);
    }

    /**
     * The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     */
    @Import(name="insufficientDataActions")
    private @Nullable Output<List<String>> insufficientDataActions;

    public Optional<Output<List<String>>> insufficientDataActions() {
        return Optional.ofNullable(this.insufficientDataActions);
    }

    /**
     * The name for this metric.
     * See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     * 
     */
    @Import(name="metricName")
    private @Nullable Output<String> metricName;

    public Optional<Output<String>> metricName() {
        return Optional.ofNullable(this.metricName);
    }

    /**
     * Enables you to create an alarm based on a metric math expression. You may specify at most 20.
     * 
     */
    @Import(name="metricQueries")
    private @Nullable Output<List<MetricAlarmMetricQueryGetArgs>> metricQueries;

    public Optional<Output<List<MetricAlarmMetricQueryGetArgs>>> metricQueries() {
        return Optional.ofNullable(this.metricQueries);
    }

    /**
     * The descriptive name for the alarm. This name must be unique within the user&#39;s AWS account
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
     * See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     */
    @Import(name="okActions")
    private @Nullable Output<List<String>> okActions;

    public Optional<Output<List<String>>> okActions() {
        return Optional.ofNullable(this.okActions);
    }

    /**
     * The period in seconds over which the specified `stat` is applied.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The statistic to apply to the alarm&#39;s associated metric.
     * Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
     * 
     */
    @Import(name="statistic")
    private @Nullable Output<String> statistic;

    public Optional<Output<String>> statistic() {
        return Optional.ofNullable(this.statistic);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Double> threshold;

    public Optional<Output<Double>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
     * 
     */
    @Import(name="thresholdMetricId")
    private @Nullable Output<String> thresholdMetricId;

    public Optional<Output<String>> thresholdMetricId() {
        return Optional.ofNullable(this.thresholdMetricId);
    }

    /**
     * Sets how this alarm is to handle missing data points. The following values are supported: `missing`, `ignore`, `breaching` and `notBreaching`. Defaults to `missing`.
     * 
     */
    @Import(name="treatMissingData")
    private @Nullable Output<String> treatMissingData;

    public Optional<Output<String>> treatMissingData() {
        return Optional.ofNullable(this.treatMissingData);
    }

    /**
     * The unit for this metric.
     * 
     */
    @Import(name="unit")
    private @Nullable Output<String> unit;

    public Optional<Output<String>> unit() {
        return Optional.ofNullable(this.unit);
    }

    private MetricAlarmState() {}

    private MetricAlarmState(MetricAlarmState $) {
        this.actionsEnabled = $.actionsEnabled;
        this.alarmActions = $.alarmActions;
        this.alarmDescription = $.alarmDescription;
        this.arn = $.arn;
        this.comparisonOperator = $.comparisonOperator;
        this.datapointsToAlarm = $.datapointsToAlarm;
        this.dimensions = $.dimensions;
        this.evaluateLowSampleCountPercentiles = $.evaluateLowSampleCountPercentiles;
        this.evaluationPeriods = $.evaluationPeriods;
        this.extendedStatistic = $.extendedStatistic;
        this.insufficientDataActions = $.insufficientDataActions;
        this.metricName = $.metricName;
        this.metricQueries = $.metricQueries;
        this.name = $.name;
        this.namespace = $.namespace;
        this.okActions = $.okActions;
        this.period = $.period;
        this.statistic = $.statistic;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.threshold = $.threshold;
        this.thresholdMetricId = $.thresholdMetricId;
        this.treatMissingData = $.treatMissingData;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricAlarmState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricAlarmState $;

        public Builder() {
            $ = new MetricAlarmState();
        }

        public Builder(MetricAlarmState defaults) {
            $ = new MetricAlarmState(Objects.requireNonNull(defaults));
        }

        public Builder actionsEnabled(@Nullable Output<Boolean> actionsEnabled) {
            $.actionsEnabled = actionsEnabled;
            return this;
        }

        public Builder actionsEnabled(Boolean actionsEnabled) {
            return actionsEnabled(Output.of(actionsEnabled));
        }

        public Builder alarmActions(@Nullable Output<List<String>> alarmActions) {
            $.alarmActions = alarmActions;
            return this;
        }

        public Builder alarmActions(List<String> alarmActions) {
            return alarmActions(Output.of(alarmActions));
        }

        public Builder alarmActions(String... alarmActions) {
            return alarmActions(List.of(alarmActions));
        }

        public Builder alarmDescription(@Nullable Output<String> alarmDescription) {
            $.alarmDescription = alarmDescription;
            return this;
        }

        public Builder alarmDescription(String alarmDescription) {
            return alarmDescription(Output.of(alarmDescription));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder comparisonOperator(@Nullable Output<String> comparisonOperator) {
            $.comparisonOperator = comparisonOperator;
            return this;
        }

        public Builder comparisonOperator(String comparisonOperator) {
            return comparisonOperator(Output.of(comparisonOperator));
        }

        public Builder datapointsToAlarm(@Nullable Output<Integer> datapointsToAlarm) {
            $.datapointsToAlarm = datapointsToAlarm;
            return this;
        }

        public Builder datapointsToAlarm(Integer datapointsToAlarm) {
            return datapointsToAlarm(Output.of(datapointsToAlarm));
        }

        public Builder dimensions(@Nullable Output<Map<String,String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(Map<String,String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder evaluateLowSampleCountPercentiles(@Nullable Output<String> evaluateLowSampleCountPercentiles) {
            $.evaluateLowSampleCountPercentiles = evaluateLowSampleCountPercentiles;
            return this;
        }

        public Builder evaluateLowSampleCountPercentiles(String evaluateLowSampleCountPercentiles) {
            return evaluateLowSampleCountPercentiles(Output.of(evaluateLowSampleCountPercentiles));
        }

        public Builder evaluationPeriods(@Nullable Output<Integer> evaluationPeriods) {
            $.evaluationPeriods = evaluationPeriods;
            return this;
        }

        public Builder evaluationPeriods(Integer evaluationPeriods) {
            return evaluationPeriods(Output.of(evaluationPeriods));
        }

        public Builder extendedStatistic(@Nullable Output<String> extendedStatistic) {
            $.extendedStatistic = extendedStatistic;
            return this;
        }

        public Builder extendedStatistic(String extendedStatistic) {
            return extendedStatistic(Output.of(extendedStatistic));
        }

        public Builder insufficientDataActions(@Nullable Output<List<String>> insufficientDataActions) {
            $.insufficientDataActions = insufficientDataActions;
            return this;
        }

        public Builder insufficientDataActions(List<String> insufficientDataActions) {
            return insufficientDataActions(Output.of(insufficientDataActions));
        }

        public Builder insufficientDataActions(String... insufficientDataActions) {
            return insufficientDataActions(List.of(insufficientDataActions));
        }

        public Builder metricName(@Nullable Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        public Builder metricQueries(@Nullable Output<List<MetricAlarmMetricQueryGetArgs>> metricQueries) {
            $.metricQueries = metricQueries;
            return this;
        }

        public Builder metricQueries(List<MetricAlarmMetricQueryGetArgs> metricQueries) {
            return metricQueries(Output.of(metricQueries));
        }

        public Builder metricQueries(MetricAlarmMetricQueryGetArgs... metricQueries) {
            return metricQueries(List.of(metricQueries));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder okActions(@Nullable Output<List<String>> okActions) {
            $.okActions = okActions;
            return this;
        }

        public Builder okActions(List<String> okActions) {
            return okActions(Output.of(okActions));
        }

        public Builder okActions(String... okActions) {
            return okActions(List.of(okActions));
        }

        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        public Builder statistic(@Nullable Output<String> statistic) {
            $.statistic = statistic;
            return this;
        }

        public Builder statistic(String statistic) {
            return statistic(Output.of(statistic));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder threshold(@Nullable Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public Builder thresholdMetricId(@Nullable Output<String> thresholdMetricId) {
            $.thresholdMetricId = thresholdMetricId;
            return this;
        }

        public Builder thresholdMetricId(String thresholdMetricId) {
            return thresholdMetricId(Output.of(thresholdMetricId));
        }

        public Builder treatMissingData(@Nullable Output<String> treatMissingData) {
            $.treatMissingData = treatMissingData;
            return this;
        }

        public Builder treatMissingData(String treatMissingData) {
            return treatMissingData(Output.of(treatMissingData));
        }

        public Builder unit(@Nullable Output<String> unit) {
            $.unit = unit;
            return this;
        }

        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public MetricAlarmState build() {
            return $;
        }
    }

}
