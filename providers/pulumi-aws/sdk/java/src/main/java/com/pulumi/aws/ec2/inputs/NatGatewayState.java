// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NatGatewayState extends com.pulumi.resources.ResourceArgs {

    public static final NatGatewayState Empty = new NatGatewayState();

    /**
     * The Allocation ID of the Elastic IP address for the gateway. Required for `connectivity_type` of `public`.
     * 
     */
    @Import(name="allocationId")
    private @Nullable Output<String> allocationId;

    public Optional<Output<String>> allocationId() {
        return Optional.ofNullable(this.allocationId);
    }

    /**
     * Connectivity type for the gateway. Valid values are `private` and `public`. Defaults to `public`.
     * 
     */
    @Import(name="connectivityType")
    private @Nullable Output<String> connectivityType;

    public Optional<Output<String>> connectivityType() {
        return Optional.ofNullable(this.connectivityType);
    }

    /**
     * The ENI ID of the network interface created by the NAT gateway.
     * 
     */
    @Import(name="networkInterfaceId")
    private @Nullable Output<String> networkInterfaceId;

    public Optional<Output<String>> networkInterfaceId() {
        return Optional.ofNullable(this.networkInterfaceId);
    }

    /**
     * The private IP address of the NAT Gateway.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<String> privateIp;

    public Optional<Output<String>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    /**
     * The public IP address of the NAT Gateway.
     * 
     */
    @Import(name="publicIp")
    private @Nullable Output<String> publicIp;

    public Optional<Output<String>> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }

    /**
     * The Subnet ID of the subnet in which to place the gateway.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private NatGatewayState() {}

    private NatGatewayState(NatGatewayState $) {
        this.allocationId = $.allocationId;
        this.connectivityType = $.connectivityType;
        this.networkInterfaceId = $.networkInterfaceId;
        this.privateIp = $.privateIp;
        this.publicIp = $.publicIp;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NatGatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NatGatewayState $;

        public Builder() {
            $ = new NatGatewayState();
        }

        public Builder(NatGatewayState defaults) {
            $ = new NatGatewayState(Objects.requireNonNull(defaults));
        }

        public Builder allocationId(@Nullable Output<String> allocationId) {
            $.allocationId = allocationId;
            return this;
        }

        public Builder allocationId(String allocationId) {
            return allocationId(Output.of(allocationId));
        }

        public Builder connectivityType(@Nullable Output<String> connectivityType) {
            $.connectivityType = connectivityType;
            return this;
        }

        public Builder connectivityType(String connectivityType) {
            return connectivityType(Output.of(connectivityType));
        }

        public Builder networkInterfaceId(@Nullable Output<String> networkInterfaceId) {
            $.networkInterfaceId = networkInterfaceId;
            return this;
        }

        public Builder networkInterfaceId(String networkInterfaceId) {
            return networkInterfaceId(Output.of(networkInterfaceId));
        }

        public Builder privateIp(@Nullable Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        public Builder publicIp(@Nullable Output<String> publicIp) {
            $.publicIp = publicIp;
            return this;
        }

        public Builder publicIp(String publicIp) {
            return publicIp(Output.of(publicIp));
        }

        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public NatGatewayState build() {
            return $;
        }
    }

}
