// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elastictranscoder.inputs;

import com.pulumi.aws.elastictranscoder.inputs.PipelineContentConfigGetArgs;
import com.pulumi.aws.elastictranscoder.inputs.PipelineContentConfigPermissionGetArgs;
import com.pulumi.aws.elastictranscoder.inputs.PipelineNotificationsGetArgs;
import com.pulumi.aws.elastictranscoder.inputs.PipelineThumbnailConfigGetArgs;
import com.pulumi.aws.elastictranscoder.inputs.PipelineThumbnailConfigPermissionGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineState extends com.pulumi.resources.ResourceArgs {

    public static final PipelineState Empty = new PipelineState();

    /**
     * The ARN of the Elastictranscoder pipeline.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
     * 
     */
    @Import(name="awsKmsKeyArn")
    private @Nullable Output<String> awsKmsKeyArn;

    public Optional<Output<String>> awsKmsKeyArn() {
        return Optional.ofNullable(this.awsKmsKeyArn);
    }

    /**
     * The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
     * 
     */
    @Import(name="contentConfig")
    private @Nullable Output<PipelineContentConfigGetArgs> contentConfig;

    public Optional<Output<PipelineContentConfigGetArgs>> contentConfig() {
        return Optional.ofNullable(this.contentConfig);
    }

    /**
     * The permissions for the `content_config` object. (documented below)
     * 
     */
    @Import(name="contentConfigPermissions")
    private @Nullable Output<List<PipelineContentConfigPermissionGetArgs>> contentConfigPermissions;

    public Optional<Output<List<PipelineContentConfigPermissionGetArgs>>> contentConfigPermissions() {
        return Optional.ofNullable(this.contentConfigPermissions);
    }

    /**
     * The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
     * 
     */
    @Import(name="inputBucket")
    private @Nullable Output<String> inputBucket;

    public Optional<Output<String>> inputBucket() {
        return Optional.ofNullable(this.inputBucket);
    }

    /**
     * The name of the pipeline. Maximum 40 characters
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
     * 
     */
    @Import(name="notifications")
    private @Nullable Output<PipelineNotificationsGetArgs> notifications;

    public Optional<Output<PipelineNotificationsGetArgs>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    /**
     * The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
     * 
     */
    @Import(name="outputBucket")
    private @Nullable Output<String> outputBucket;

    public Optional<Output<String>> outputBucket() {
        return Optional.ofNullable(this.outputBucket);
    }

    /**
     * The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
     * 
     */
    @Import(name="thumbnailConfig")
    private @Nullable Output<PipelineThumbnailConfigGetArgs> thumbnailConfig;

    public Optional<Output<PipelineThumbnailConfigGetArgs>> thumbnailConfig() {
        return Optional.ofNullable(this.thumbnailConfig);
    }

    /**
     * The permissions for the `thumbnail_config` object. (documented below)
     * 
     */
    @Import(name="thumbnailConfigPermissions")
    private @Nullable Output<List<PipelineThumbnailConfigPermissionGetArgs>> thumbnailConfigPermissions;

    public Optional<Output<List<PipelineThumbnailConfigPermissionGetArgs>>> thumbnailConfigPermissions() {
        return Optional.ofNullable(this.thumbnailConfigPermissions);
    }

    private PipelineState() {}

    private PipelineState(PipelineState $) {
        this.arn = $.arn;
        this.awsKmsKeyArn = $.awsKmsKeyArn;
        this.contentConfig = $.contentConfig;
        this.contentConfigPermissions = $.contentConfigPermissions;
        this.inputBucket = $.inputBucket;
        this.name = $.name;
        this.notifications = $.notifications;
        this.outputBucket = $.outputBucket;
        this.role = $.role;
        this.thumbnailConfig = $.thumbnailConfig;
        this.thumbnailConfigPermissions = $.thumbnailConfigPermissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineState $;

        public Builder() {
            $ = new PipelineState();
        }

        public Builder(PipelineState defaults) {
            $ = new PipelineState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder awsKmsKeyArn(@Nullable Output<String> awsKmsKeyArn) {
            $.awsKmsKeyArn = awsKmsKeyArn;
            return this;
        }

        public Builder awsKmsKeyArn(String awsKmsKeyArn) {
            return awsKmsKeyArn(Output.of(awsKmsKeyArn));
        }

        public Builder contentConfig(@Nullable Output<PipelineContentConfigGetArgs> contentConfig) {
            $.contentConfig = contentConfig;
            return this;
        }

        public Builder contentConfig(PipelineContentConfigGetArgs contentConfig) {
            return contentConfig(Output.of(contentConfig));
        }

        public Builder contentConfigPermissions(@Nullable Output<List<PipelineContentConfigPermissionGetArgs>> contentConfigPermissions) {
            $.contentConfigPermissions = contentConfigPermissions;
            return this;
        }

        public Builder contentConfigPermissions(List<PipelineContentConfigPermissionGetArgs> contentConfigPermissions) {
            return contentConfigPermissions(Output.of(contentConfigPermissions));
        }

        public Builder contentConfigPermissions(PipelineContentConfigPermissionGetArgs... contentConfigPermissions) {
            return contentConfigPermissions(List.of(contentConfigPermissions));
        }

        public Builder inputBucket(@Nullable Output<String> inputBucket) {
            $.inputBucket = inputBucket;
            return this;
        }

        public Builder inputBucket(String inputBucket) {
            return inputBucket(Output.of(inputBucket));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder notifications(@Nullable Output<PipelineNotificationsGetArgs> notifications) {
            $.notifications = notifications;
            return this;
        }

        public Builder notifications(PipelineNotificationsGetArgs notifications) {
            return notifications(Output.of(notifications));
        }

        public Builder outputBucket(@Nullable Output<String> outputBucket) {
            $.outputBucket = outputBucket;
            return this;
        }

        public Builder outputBucket(String outputBucket) {
            return outputBucket(Output.of(outputBucket));
        }

        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder thumbnailConfig(@Nullable Output<PipelineThumbnailConfigGetArgs> thumbnailConfig) {
            $.thumbnailConfig = thumbnailConfig;
            return this;
        }

        public Builder thumbnailConfig(PipelineThumbnailConfigGetArgs thumbnailConfig) {
            return thumbnailConfig(Output.of(thumbnailConfig));
        }

        public Builder thumbnailConfigPermissions(@Nullable Output<List<PipelineThumbnailConfigPermissionGetArgs>> thumbnailConfigPermissions) {
            $.thumbnailConfigPermissions = thumbnailConfigPermissions;
            return this;
        }

        public Builder thumbnailConfigPermissions(List<PipelineThumbnailConfigPermissionGetArgs> thumbnailConfigPermissions) {
            return thumbnailConfigPermissions(Output.of(thumbnailConfigPermissions));
        }

        public Builder thumbnailConfigPermissions(PipelineThumbnailConfigPermissionGetArgs... thumbnailConfigPermissions) {
            return thumbnailConfigPermissions(List.of(thumbnailConfigPermissions));
        }

        public PipelineState build() {
            return $;
        }
    }

}
