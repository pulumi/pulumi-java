// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


public final class UserPoolPasswordPolicyGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserPoolPasswordPolicyGetArgs Empty = new UserPoolPasswordPolicyGetArgs();

    /**
     * Minimum length of the password policy that you have set.
     * 
     */
    @Import(name="minimumLength")
      private final @Nullable Output<Integer> minimumLength;

    public Output<Integer> minimumLength() {
        return this.minimumLength == null ? Codegen.empty() : this.minimumLength;
    }

    /**
     * Whether you have required users to use at least one lowercase letter in their password.
     * 
     */
    @Import(name="requireLowercase")
      private final @Nullable Output<Boolean> requireLowercase;

    public Output<Boolean> requireLowercase() {
        return this.requireLowercase == null ? Codegen.empty() : this.requireLowercase;
    }

    /**
     * Whether you have required users to use at least one number in their password.
     * 
     */
    @Import(name="requireNumbers")
      private final @Nullable Output<Boolean> requireNumbers;

    public Output<Boolean> requireNumbers() {
        return this.requireNumbers == null ? Codegen.empty() : this.requireNumbers;
    }

    /**
     * Whether you have required users to use at least one symbol in their password.
     * 
     */
    @Import(name="requireSymbols")
      private final @Nullable Output<Boolean> requireSymbols;

    public Output<Boolean> requireSymbols() {
        return this.requireSymbols == null ? Codegen.empty() : this.requireSymbols;
    }

    /**
     * Whether you have required users to use at least one uppercase letter in their password.
     * 
     */
    @Import(name="requireUppercase")
      private final @Nullable Output<Boolean> requireUppercase;

    public Output<Boolean> requireUppercase() {
        return this.requireUppercase == null ? Codegen.empty() : this.requireUppercase;
    }

    /**
     * In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
     * 
     */
    @Import(name="temporaryPasswordValidityDays")
      private final @Nullable Output<Integer> temporaryPasswordValidityDays;

    public Output<Integer> temporaryPasswordValidityDays() {
        return this.temporaryPasswordValidityDays == null ? Codegen.empty() : this.temporaryPasswordValidityDays;
    }

    public UserPoolPasswordPolicyGetArgs(
        @Nullable Output<Integer> minimumLength,
        @Nullable Output<Boolean> requireLowercase,
        @Nullable Output<Boolean> requireNumbers,
        @Nullable Output<Boolean> requireSymbols,
        @Nullable Output<Boolean> requireUppercase,
        @Nullable Output<Integer> temporaryPasswordValidityDays) {
        this.minimumLength = minimumLength;
        this.requireLowercase = requireLowercase;
        this.requireNumbers = requireNumbers;
        this.requireSymbols = requireSymbols;
        this.requireUppercase = requireUppercase;
        this.temporaryPasswordValidityDays = temporaryPasswordValidityDays;
    }

    private UserPoolPasswordPolicyGetArgs() {
        this.minimumLength = Codegen.empty();
        this.requireLowercase = Codegen.empty();
        this.requireNumbers = Codegen.empty();
        this.requireSymbols = Codegen.empty();
        this.requireUppercase = Codegen.empty();
        this.temporaryPasswordValidityDays = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserPoolPasswordPolicyGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> minimumLength;
        private @Nullable Output<Boolean> requireLowercase;
        private @Nullable Output<Boolean> requireNumbers;
        private @Nullable Output<Boolean> requireSymbols;
        private @Nullable Output<Boolean> requireUppercase;
        private @Nullable Output<Integer> temporaryPasswordValidityDays;

        public Builder() {
    	      // Empty
        }

        public Builder(UserPoolPasswordPolicyGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.minimumLength = defaults.minimumLength;
    	      this.requireLowercase = defaults.requireLowercase;
    	      this.requireNumbers = defaults.requireNumbers;
    	      this.requireSymbols = defaults.requireSymbols;
    	      this.requireUppercase = defaults.requireUppercase;
    	      this.temporaryPasswordValidityDays = defaults.temporaryPasswordValidityDays;
        }

        public Builder minimumLength(@Nullable Output<Integer> minimumLength) {
            this.minimumLength = minimumLength;
            return this;
        }
        public Builder minimumLength(@Nullable Integer minimumLength) {
            this.minimumLength = Codegen.ofNullable(minimumLength);
            return this;
        }
        public Builder requireLowercase(@Nullable Output<Boolean> requireLowercase) {
            this.requireLowercase = requireLowercase;
            return this;
        }
        public Builder requireLowercase(@Nullable Boolean requireLowercase) {
            this.requireLowercase = Codegen.ofNullable(requireLowercase);
            return this;
        }
        public Builder requireNumbers(@Nullable Output<Boolean> requireNumbers) {
            this.requireNumbers = requireNumbers;
            return this;
        }
        public Builder requireNumbers(@Nullable Boolean requireNumbers) {
            this.requireNumbers = Codegen.ofNullable(requireNumbers);
            return this;
        }
        public Builder requireSymbols(@Nullable Output<Boolean> requireSymbols) {
            this.requireSymbols = requireSymbols;
            return this;
        }
        public Builder requireSymbols(@Nullable Boolean requireSymbols) {
            this.requireSymbols = Codegen.ofNullable(requireSymbols);
            return this;
        }
        public Builder requireUppercase(@Nullable Output<Boolean> requireUppercase) {
            this.requireUppercase = requireUppercase;
            return this;
        }
        public Builder requireUppercase(@Nullable Boolean requireUppercase) {
            this.requireUppercase = Codegen.ofNullable(requireUppercase);
            return this;
        }
        public Builder temporaryPasswordValidityDays(@Nullable Output<Integer> temporaryPasswordValidityDays) {
            this.temporaryPasswordValidityDays = temporaryPasswordValidityDays;
            return this;
        }
        public Builder temporaryPasswordValidityDays(@Nullable Integer temporaryPasswordValidityDays) {
            this.temporaryPasswordValidityDays = Codegen.ofNullable(temporaryPasswordValidityDays);
            return this;
        }        public UserPoolPasswordPolicyGetArgs build() {
            return new UserPoolPasswordPolicyGetArgs(minimumLength, requireLowercase, requireNumbers, requireSymbols, requireUppercase, temporaryPasswordValidityDays);
        }
    }
}
