// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fsx;

import com.pulumi.aws.fsx.inputs.OpenZfsFileSystemDiskIopsConfigurationArgs;
import com.pulumi.aws.fsx.inputs.OpenZfsFileSystemRootVolumeConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OpenZfsFileSystemArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenZfsFileSystemArgs Empty = new OpenZfsFileSystemArgs();

    /**
     * The number of days to retain automatic backups. Setting this to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days.
     * 
     */
    @Import(name="automaticBackupRetentionDays")
      private final @Nullable Output<Integer> automaticBackupRetentionDays;

    public Output<Integer> automaticBackupRetentionDays() {
        return this.automaticBackupRetentionDays == null ? Codegen.empty() : this.automaticBackupRetentionDays;
    }

    /**
     * The ID of the source backup to create the filesystem from.
     * 
     */
    @Import(name="backupId")
      private final @Nullable Output<String> backupId;

    public Output<String> backupId() {
        return this.backupId == null ? Codegen.empty() : this.backupId;
    }

    /**
     * A boolean flag indicating whether tags for the file system should be copied to backups. The default value is false.
     * 
     */
    @Import(name="copyTagsToBackups")
      private final @Nullable Output<Boolean> copyTagsToBackups;

    public Output<Boolean> copyTagsToBackups() {
        return this.copyTagsToBackups == null ? Codegen.empty() : this.copyTagsToBackups;
    }

    /**
     * A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
     * 
     */
    @Import(name="copyTagsToVolumes")
      private final @Nullable Output<Boolean> copyTagsToVolumes;

    public Output<Boolean> copyTagsToVolumes() {
        return this.copyTagsToVolumes == null ? Codegen.empty() : this.copyTagsToVolumes;
    }

    /**
     * A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily. Requires `automatic_backup_retention_days` to be set.
     * 
     */
    @Import(name="dailyAutomaticBackupStartTime")
      private final @Nullable Output<String> dailyAutomaticBackupStartTime;

    public Output<String> dailyAutomaticBackupStartTime() {
        return this.dailyAutomaticBackupStartTime == null ? Codegen.empty() : this.dailyAutomaticBackupStartTime;
    }

    /**
     * - The filesystem deployment type. Only `SINGLE_AZ_1` is supported.
     * 
     */
    @Import(name="deploymentType", required=true)
      private final Output<String> deploymentType;

    public Output<String> deploymentType() {
        return this.deploymentType;
    }

    /**
     * The SSD IOPS configuration for the Amazon FSx for OpenZFS file system. See Disk Iops Configuration Below.
     * 
     */
    @Import(name="diskIopsConfiguration")
      private final @Nullable Output<OpenZfsFileSystemDiskIopsConfigurationArgs> diskIopsConfiguration;

    public Output<OpenZfsFileSystemDiskIopsConfigurationArgs> diskIopsConfiguration() {
        return this.diskIopsConfiguration == null ? Codegen.empty() : this.diskIopsConfiguration;
    }

    /**
     * ARN for the KMS Key to encrypt the file system at rest, Defaults to an AWS managed KMS Key.
     * 
     */
    @Import(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> kmsKeyId() {
        return this.kmsKeyId == null ? Codegen.empty() : this.kmsKeyId;
    }

    /**
     * The configuration for the root volume of the file system. All other volumes are children or the root volume. See Root Volume Configuration Below.
     * 
     */
    @Import(name="rootVolumeConfiguration")
      private final @Nullable Output<OpenZfsFileSystemRootVolumeConfigurationArgs> rootVolumeConfiguration;

    public Output<OpenZfsFileSystemRootVolumeConfigurationArgs> rootVolumeConfiguration() {
        return this.rootVolumeConfiguration == null ? Codegen.empty() : this.rootVolumeConfiguration;
    }

    /**
     * A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
     * 
     */
    @Import(name="securityGroupIds")
      private final @Nullable Output<List<String>> securityGroupIds;

    public Output<List<String>> securityGroupIds() {
        return this.securityGroupIds == null ? Codegen.empty() : this.securityGroupIds;
    }

    /**
     * The storage capacity (GiB) of the file system. Valid values between `64` and `524288`.
     * 
     */
    @Import(name="storageCapacity")
      private final @Nullable Output<Integer> storageCapacity;

    public Output<Integer> storageCapacity() {
        return this.storageCapacity == null ? Codegen.empty() : this.storageCapacity;
    }

    /**
     * The filesystem storage type. Only `SSD` is supported.
     * 
     */
    @Import(name="storageType")
      private final @Nullable Output<String> storageType;

    public Output<String> storageType() {
        return this.storageType == null ? Codegen.empty() : this.storageType;
    }

    /**
     * A list of IDs for the subnets that the file system will be accessible from. Exactly 1 subnet need to be provided.
     * 
     */
    @Import(name="subnetIds", required=true)
      private final Output<String> subnetIds;

    public Output<String> subnetIds() {
        return this.subnetIds;
    }

    /**
     * A map of tags to assign to the file system. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `64` and maximum of `4096`.
     * 
     */
    @Import(name="throughputCapacity", required=true)
      private final Output<Integer> throughputCapacity;

    public Output<Integer> throughputCapacity() {
        return this.throughputCapacity;
    }

    /**
     * The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
     * 
     */
    @Import(name="weeklyMaintenanceStartTime")
      private final @Nullable Output<String> weeklyMaintenanceStartTime;

    public Output<String> weeklyMaintenanceStartTime() {
        return this.weeklyMaintenanceStartTime == null ? Codegen.empty() : this.weeklyMaintenanceStartTime;
    }

    public OpenZfsFileSystemArgs(
        @Nullable Output<Integer> automaticBackupRetentionDays,
        @Nullable Output<String> backupId,
        @Nullable Output<Boolean> copyTagsToBackups,
        @Nullable Output<Boolean> copyTagsToVolumes,
        @Nullable Output<String> dailyAutomaticBackupStartTime,
        Output<String> deploymentType,
        @Nullable Output<OpenZfsFileSystemDiskIopsConfigurationArgs> diskIopsConfiguration,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<OpenZfsFileSystemRootVolumeConfigurationArgs> rootVolumeConfiguration,
        @Nullable Output<List<String>> securityGroupIds,
        @Nullable Output<Integer> storageCapacity,
        @Nullable Output<String> storageType,
        Output<String> subnetIds,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        Output<Integer> throughputCapacity,
        @Nullable Output<String> weeklyMaintenanceStartTime) {
        this.automaticBackupRetentionDays = automaticBackupRetentionDays;
        this.backupId = backupId;
        this.copyTagsToBackups = copyTagsToBackups;
        this.copyTagsToVolumes = copyTagsToVolumes;
        this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
        this.deploymentType = Objects.requireNonNull(deploymentType, "expected parameter 'deploymentType' to be non-null");
        this.diskIopsConfiguration = diskIopsConfiguration;
        this.kmsKeyId = kmsKeyId;
        this.rootVolumeConfiguration = rootVolumeConfiguration;
        this.securityGroupIds = securityGroupIds;
        this.storageCapacity = storageCapacity;
        this.storageType = storageType;
        this.subnetIds = Objects.requireNonNull(subnetIds, "expected parameter 'subnetIds' to be non-null");
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.throughputCapacity = Objects.requireNonNull(throughputCapacity, "expected parameter 'throughputCapacity' to be non-null");
        this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
    }

    private OpenZfsFileSystemArgs() {
        this.automaticBackupRetentionDays = Codegen.empty();
        this.backupId = Codegen.empty();
        this.copyTagsToBackups = Codegen.empty();
        this.copyTagsToVolumes = Codegen.empty();
        this.dailyAutomaticBackupStartTime = Codegen.empty();
        this.deploymentType = Codegen.empty();
        this.diskIopsConfiguration = Codegen.empty();
        this.kmsKeyId = Codegen.empty();
        this.rootVolumeConfiguration = Codegen.empty();
        this.securityGroupIds = Codegen.empty();
        this.storageCapacity = Codegen.empty();
        this.storageType = Codegen.empty();
        this.subnetIds = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.throughputCapacity = Codegen.empty();
        this.weeklyMaintenanceStartTime = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenZfsFileSystemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> automaticBackupRetentionDays;
        private @Nullable Output<String> backupId;
        private @Nullable Output<Boolean> copyTagsToBackups;
        private @Nullable Output<Boolean> copyTagsToVolumes;
        private @Nullable Output<String> dailyAutomaticBackupStartTime;
        private Output<String> deploymentType;
        private @Nullable Output<OpenZfsFileSystemDiskIopsConfigurationArgs> diskIopsConfiguration;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<OpenZfsFileSystemRootVolumeConfigurationArgs> rootVolumeConfiguration;
        private @Nullable Output<List<String>> securityGroupIds;
        private @Nullable Output<Integer> storageCapacity;
        private @Nullable Output<String> storageType;
        private Output<String> subnetIds;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private Output<Integer> throughputCapacity;
        private @Nullable Output<String> weeklyMaintenanceStartTime;

        public Builder() {
    	      // Empty
        }

        public Builder(OpenZfsFileSystemArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticBackupRetentionDays = defaults.automaticBackupRetentionDays;
    	      this.backupId = defaults.backupId;
    	      this.copyTagsToBackups = defaults.copyTagsToBackups;
    	      this.copyTagsToVolumes = defaults.copyTagsToVolumes;
    	      this.dailyAutomaticBackupStartTime = defaults.dailyAutomaticBackupStartTime;
    	      this.deploymentType = defaults.deploymentType;
    	      this.diskIopsConfiguration = defaults.diskIopsConfiguration;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.rootVolumeConfiguration = defaults.rootVolumeConfiguration;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.storageCapacity = defaults.storageCapacity;
    	      this.storageType = defaults.storageType;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.throughputCapacity = defaults.throughputCapacity;
    	      this.weeklyMaintenanceStartTime = defaults.weeklyMaintenanceStartTime;
        }

        public Builder automaticBackupRetentionDays(@Nullable Output<Integer> automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = automaticBackupRetentionDays;
            return this;
        }
        public Builder automaticBackupRetentionDays(@Nullable Integer automaticBackupRetentionDays) {
            this.automaticBackupRetentionDays = Codegen.ofNullable(automaticBackupRetentionDays);
            return this;
        }
        public Builder backupId(@Nullable Output<String> backupId) {
            this.backupId = backupId;
            return this;
        }
        public Builder backupId(@Nullable String backupId) {
            this.backupId = Codegen.ofNullable(backupId);
            return this;
        }
        public Builder copyTagsToBackups(@Nullable Output<Boolean> copyTagsToBackups) {
            this.copyTagsToBackups = copyTagsToBackups;
            return this;
        }
        public Builder copyTagsToBackups(@Nullable Boolean copyTagsToBackups) {
            this.copyTagsToBackups = Codegen.ofNullable(copyTagsToBackups);
            return this;
        }
        public Builder copyTagsToVolumes(@Nullable Output<Boolean> copyTagsToVolumes) {
            this.copyTagsToVolumes = copyTagsToVolumes;
            return this;
        }
        public Builder copyTagsToVolumes(@Nullable Boolean copyTagsToVolumes) {
            this.copyTagsToVolumes = Codegen.ofNullable(copyTagsToVolumes);
            return this;
        }
        public Builder dailyAutomaticBackupStartTime(@Nullable Output<String> dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
            return this;
        }
        public Builder dailyAutomaticBackupStartTime(@Nullable String dailyAutomaticBackupStartTime) {
            this.dailyAutomaticBackupStartTime = Codegen.ofNullable(dailyAutomaticBackupStartTime);
            return this;
        }
        public Builder deploymentType(Output<String> deploymentType) {
            this.deploymentType = Objects.requireNonNull(deploymentType);
            return this;
        }
        public Builder deploymentType(String deploymentType) {
            this.deploymentType = Output.of(Objects.requireNonNull(deploymentType));
            return this;
        }
        public Builder diskIopsConfiguration(@Nullable Output<OpenZfsFileSystemDiskIopsConfigurationArgs> diskIopsConfiguration) {
            this.diskIopsConfiguration = diskIopsConfiguration;
            return this;
        }
        public Builder diskIopsConfiguration(@Nullable OpenZfsFileSystemDiskIopsConfigurationArgs diskIopsConfiguration) {
            this.diskIopsConfiguration = Codegen.ofNullable(diskIopsConfiguration);
            return this;
        }
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Codegen.ofNullable(kmsKeyId);
            return this;
        }
        public Builder rootVolumeConfiguration(@Nullable Output<OpenZfsFileSystemRootVolumeConfigurationArgs> rootVolumeConfiguration) {
            this.rootVolumeConfiguration = rootVolumeConfiguration;
            return this;
        }
        public Builder rootVolumeConfiguration(@Nullable OpenZfsFileSystemRootVolumeConfigurationArgs rootVolumeConfiguration) {
            this.rootVolumeConfiguration = Codegen.ofNullable(rootVolumeConfiguration);
            return this;
        }
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Codegen.ofNullable(securityGroupIds);
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        public Builder storageCapacity(@Nullable Output<Integer> storageCapacity) {
            this.storageCapacity = storageCapacity;
            return this;
        }
        public Builder storageCapacity(@Nullable Integer storageCapacity) {
            this.storageCapacity = Codegen.ofNullable(storageCapacity);
            return this;
        }
        public Builder storageType(@Nullable Output<String> storageType) {
            this.storageType = storageType;
            return this;
        }
        public Builder storageType(@Nullable String storageType) {
            this.storageType = Codegen.ofNullable(storageType);
            return this;
        }
        public Builder subnetIds(Output<String> subnetIds) {
            this.subnetIds = Objects.requireNonNull(subnetIds);
            return this;
        }
        public Builder subnetIds(String subnetIds) {
            this.subnetIds = Output.of(Objects.requireNonNull(subnetIds));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder throughputCapacity(Output<Integer> throughputCapacity) {
            this.throughputCapacity = Objects.requireNonNull(throughputCapacity);
            return this;
        }
        public Builder throughputCapacity(Integer throughputCapacity) {
            this.throughputCapacity = Output.of(Objects.requireNonNull(throughputCapacity));
            return this;
        }
        public Builder weeklyMaintenanceStartTime(@Nullable Output<String> weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
            return this;
        }
        public Builder weeklyMaintenanceStartTime(@Nullable String weeklyMaintenanceStartTime) {
            this.weeklyMaintenanceStartTime = Codegen.ofNullable(weeklyMaintenanceStartTime);
            return this;
        }        public OpenZfsFileSystemArgs build() {
            return new OpenZfsFileSystemArgs(automaticBackupRetentionDays, backupId, copyTagsToBackups, copyTagsToVolumes, dailyAutomaticBackupStartTime, deploymentType, diskIopsConfiguration, kmsKeyId, rootVolumeConfiguration, securityGroupIds, storageCapacity, storageType, subnetIds, tags, tagsAll, throughputCapacity, weeklyMaintenanceStartTime);
        }
    }
}
