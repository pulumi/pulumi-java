// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudsearch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainIndexFieldGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainIndexFieldGetArgs Empty = new DomainIndexFieldGetArgs();

    /**
     * The analysis scheme you want to use for a `text` field. The analysis scheme specifies the language-specific text processing options that are used during indexing.
     * 
     */
    @Import(name="analysisScheme")
    private @Nullable Output<String> analysisScheme;

    public Optional<Output<String>> analysisScheme() {
        return Optional.ofNullable(this.analysisScheme);
    }

    /**
     * The default value for the field. This value is used when no value is specified for the field in the document data.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * You can get facet information by enabling this.
     * 
     */
    @Import(name="facet")
    private @Nullable Output<Boolean> facet;

    public Optional<Output<Boolean>> facet() {
        return Optional.ofNullable(this.facet);
    }

    /**
     * You can highlight information.
     * 
     */
    @Import(name="highlight")
    private @Nullable Output<Boolean> highlight;

    public Optional<Output<Boolean>> highlight() {
        return Optional.ofNullable(this.highlight);
    }

    /**
     * A unique name for the field. Field names must begin with a letter and be at least 3 and no more than 64 characters long. The allowed characters are: `a`-`z` (lower-case letters), `0`-`9`, and `_` (underscore). The name `score` is reserved and cannot be used as a field name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * You can enable returning the value of all searchable fields.
     * 
     */
    @Import(name="return")
    private @Nullable Output<Boolean> return_;

    public Optional<Output<Boolean>> return_() {
        return Optional.ofNullable(this.return_);
    }

    /**
     * You can set whether this index should be searchable or not.
     * 
     */
    @Import(name="search")
    private @Nullable Output<Boolean> search;

    public Optional<Output<Boolean>> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * You can enable the property to be sortable.
     * 
     */
    @Import(name="sort")
    private @Nullable Output<Boolean> sort;

    public Optional<Output<Boolean>> sort() {
        return Optional.ofNullable(this.sort);
    }

    /**
     * The field type. Valid values: `date`, `date-array`, `double`, `double-array`, `int`, `int-array`, `literal`, `literal-array`, `text`, `text-array`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private DomainIndexFieldGetArgs() {}

    private DomainIndexFieldGetArgs(DomainIndexFieldGetArgs $) {
        this.analysisScheme = $.analysisScheme;
        this.defaultValue = $.defaultValue;
        this.facet = $.facet;
        this.highlight = $.highlight;
        this.name = $.name;
        this.return_ = $.return_;
        this.search = $.search;
        this.sort = $.sort;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainIndexFieldGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainIndexFieldGetArgs $;

        public Builder() {
            $ = new DomainIndexFieldGetArgs();
        }

        public Builder(DomainIndexFieldGetArgs defaults) {
            $ = new DomainIndexFieldGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder analysisScheme(@Nullable Output<String> analysisScheme) {
            $.analysisScheme = analysisScheme;
            return this;
        }

        public Builder analysisScheme(String analysisScheme) {
            return analysisScheme(Output.of(analysisScheme));
        }

        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        public Builder facet(@Nullable Output<Boolean> facet) {
            $.facet = facet;
            return this;
        }

        public Builder facet(Boolean facet) {
            return facet(Output.of(facet));
        }

        public Builder highlight(@Nullable Output<Boolean> highlight) {
            $.highlight = highlight;
            return this;
        }

        public Builder highlight(Boolean highlight) {
            return highlight(Output.of(highlight));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder return_(@Nullable Output<Boolean> return_) {
            $.return_ = return_;
            return this;
        }

        public Builder return_(Boolean return_) {
            return return_(Output.of(return_));
        }

        public Builder search(@Nullable Output<Boolean> search) {
            $.search = search;
            return this;
        }

        public Builder search(Boolean search) {
            return search(Output.of(search));
        }

        public Builder sort(@Nullable Output<Boolean> sort) {
            $.sort = sort;
            return this;
        }

        public Builder sort(Boolean sort) {
            return sort(Output.of(sort));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DomainIndexFieldGetArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
