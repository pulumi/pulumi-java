// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigatewayv2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DomainNameDomainNameConfiguration {
    /**
     * The ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source.
     * Use the `aws.acm.Certificate` resource to configure an ACM certificate.
     * 
     */
    private final String certificateArn;
    /**
     * The endpoint type. Valid values: `REGIONAL`.
     * 
     */
    private final String endpointType;
    /**
     * The Amazon Route 53 Hosted Zone ID of the endpoint.
     * 
     */
    private final @Nullable String hostedZoneId;
    /**
     * The Transport Layer Security (TLS) version of the [security policy](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html) for the domain name. Valid values: `TLS_1_2`.
     * 
     */
    private final String securityPolicy;
    /**
     * The target domain name.
     * 
     */
    private final @Nullable String targetDomainName;

    @CustomType.Constructor
    private DomainNameDomainNameConfiguration(
        @CustomType.Parameter("certificateArn") String certificateArn,
        @CustomType.Parameter("endpointType") String endpointType,
        @CustomType.Parameter("hostedZoneId") @Nullable String hostedZoneId,
        @CustomType.Parameter("securityPolicy") String securityPolicy,
        @CustomType.Parameter("targetDomainName") @Nullable String targetDomainName) {
        this.certificateArn = certificateArn;
        this.endpointType = endpointType;
        this.hostedZoneId = hostedZoneId;
        this.securityPolicy = securityPolicy;
        this.targetDomainName = targetDomainName;
    }

    /**
     * The ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source.
     * Use the `aws.acm.Certificate` resource to configure an ACM certificate.
     * 
    */
    public String certificateArn() {
        return this.certificateArn;
    }
    /**
     * The endpoint type. Valid values: `REGIONAL`.
     * 
    */
    public String endpointType() {
        return this.endpointType;
    }
    /**
     * The Amazon Route 53 Hosted Zone ID of the endpoint.
     * 
    */
    public Optional<String> hostedZoneId() {
        return Optional.ofNullable(this.hostedZoneId);
    }
    /**
     * The Transport Layer Security (TLS) version of the [security policy](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html) for the domain name. Valid values: `TLS_1_2`.
     * 
    */
    public String securityPolicy() {
        return this.securityPolicy;
    }
    /**
     * The target domain name.
     * 
    */
    public Optional<String> targetDomainName() {
        return Optional.ofNullable(this.targetDomainName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainNameDomainNameConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String certificateArn;
        private String endpointType;
        private @Nullable String hostedZoneId;
        private String securityPolicy;
        private @Nullable String targetDomainName;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainNameDomainNameConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateArn = defaults.certificateArn;
    	      this.endpointType = defaults.endpointType;
    	      this.hostedZoneId = defaults.hostedZoneId;
    	      this.securityPolicy = defaults.securityPolicy;
    	      this.targetDomainName = defaults.targetDomainName;
        }

        public Builder certificateArn(String certificateArn) {
            this.certificateArn = Objects.requireNonNull(certificateArn);
            return this;
        }
        public Builder endpointType(String endpointType) {
            this.endpointType = Objects.requireNonNull(endpointType);
            return this;
        }
        public Builder hostedZoneId(@Nullable String hostedZoneId) {
            this.hostedZoneId = hostedZoneId;
            return this;
        }
        public Builder securityPolicy(String securityPolicy) {
            this.securityPolicy = Objects.requireNonNull(securityPolicy);
            return this;
        }
        public Builder targetDomainName(@Nullable String targetDomainName) {
            this.targetDomainName = targetDomainName;
            return this;
        }        public DomainNameDomainNameConfiguration build() {
            return new DomainNameDomainNameConfiguration(certificateArn, endpointType, hostedZoneId, securityPolicy, targetDomainName);
        }
    }
}
