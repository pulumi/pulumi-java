// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cur.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetReportDefinitionResult {
    /**
     * @return A list of additional artifacts.
     * 
     */
    private final List<String> additionalArtifacts;
    /**
     * @return A list of schema elements.
     * 
     */
    private final List<String> additionalSchemaElements;
    /**
     * @return Preferred format for report.
     * 
     */
    private final String compression;
    /**
     * @return Preferred compression format for report.
     * 
     */
    private final String format;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return If true reports are updated after they have been finalized.
     * 
     */
    private final Boolean refreshClosedReports;
    private final String reportName;
    /**
     * @return Overwrite the previous version of each report or to deliver the report in addition to the previous versions.
     * 
     */
    private final String reportVersioning;
    /**
     * @return Name of customer S3 bucket.
     * 
     */
    private final String s3Bucket;
    /**
     * @return Preferred report path prefix.
     * 
     */
    private final String s3Prefix;
    /**
     * @return Region of customer S3 bucket.
     * 
     */
    private final String s3Region;
    /**
     * @return The frequency on which report data are measured and displayed.
     * 
     */
    private final String timeUnit;

    @CustomType.Constructor
    private GetReportDefinitionResult(
        @CustomType.Parameter("additionalArtifacts") List<String> additionalArtifacts,
        @CustomType.Parameter("additionalSchemaElements") List<String> additionalSchemaElements,
        @CustomType.Parameter("compression") String compression,
        @CustomType.Parameter("format") String format,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("refreshClosedReports") Boolean refreshClosedReports,
        @CustomType.Parameter("reportName") String reportName,
        @CustomType.Parameter("reportVersioning") String reportVersioning,
        @CustomType.Parameter("s3Bucket") String s3Bucket,
        @CustomType.Parameter("s3Prefix") String s3Prefix,
        @CustomType.Parameter("s3Region") String s3Region,
        @CustomType.Parameter("timeUnit") String timeUnit) {
        this.additionalArtifacts = additionalArtifacts;
        this.additionalSchemaElements = additionalSchemaElements;
        this.compression = compression;
        this.format = format;
        this.id = id;
        this.refreshClosedReports = refreshClosedReports;
        this.reportName = reportName;
        this.reportVersioning = reportVersioning;
        this.s3Bucket = s3Bucket;
        this.s3Prefix = s3Prefix;
        this.s3Region = s3Region;
        this.timeUnit = timeUnit;
    }

    /**
     * @return A list of additional artifacts.
     * 
     */
    public List<String> additionalArtifacts() {
        return this.additionalArtifacts;
    }
    /**
     * @return A list of schema elements.
     * 
     */
    public List<String> additionalSchemaElements() {
        return this.additionalSchemaElements;
    }
    /**
     * @return Preferred format for report.
     * 
     */
    public String compression() {
        return this.compression;
    }
    /**
     * @return Preferred compression format for report.
     * 
     */
    public String format() {
        return this.format;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If true reports are updated after they have been finalized.
     * 
     */
    public Boolean refreshClosedReports() {
        return this.refreshClosedReports;
    }
    public String reportName() {
        return this.reportName;
    }
    /**
     * @return Overwrite the previous version of each report or to deliver the report in addition to the previous versions.
     * 
     */
    public String reportVersioning() {
        return this.reportVersioning;
    }
    /**
     * @return Name of customer S3 bucket.
     * 
     */
    public String s3Bucket() {
        return this.s3Bucket;
    }
    /**
     * @return Preferred report path prefix.
     * 
     */
    public String s3Prefix() {
        return this.s3Prefix;
    }
    /**
     * @return Region of customer S3 bucket.
     * 
     */
    public String s3Region() {
        return this.s3Region;
    }
    /**
     * @return The frequency on which report data are measured and displayed.
     * 
     */
    public String timeUnit() {
        return this.timeUnit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReportDefinitionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> additionalArtifacts;
        private List<String> additionalSchemaElements;
        private String compression;
        private String format;
        private String id;
        private Boolean refreshClosedReports;
        private String reportName;
        private String reportVersioning;
        private String s3Bucket;
        private String s3Prefix;
        private String s3Region;
        private String timeUnit;

        public Builder() {
    	      // Empty
        }

        public Builder(GetReportDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalArtifacts = defaults.additionalArtifacts;
    	      this.additionalSchemaElements = defaults.additionalSchemaElements;
    	      this.compression = defaults.compression;
    	      this.format = defaults.format;
    	      this.id = defaults.id;
    	      this.refreshClosedReports = defaults.refreshClosedReports;
    	      this.reportName = defaults.reportName;
    	      this.reportVersioning = defaults.reportVersioning;
    	      this.s3Bucket = defaults.s3Bucket;
    	      this.s3Prefix = defaults.s3Prefix;
    	      this.s3Region = defaults.s3Region;
    	      this.timeUnit = defaults.timeUnit;
        }

        public Builder additionalArtifacts(List<String> additionalArtifacts) {
            this.additionalArtifacts = Objects.requireNonNull(additionalArtifacts);
            return this;
        }
        public Builder additionalArtifacts(String... additionalArtifacts) {
            return additionalArtifacts(List.of(additionalArtifacts));
        }
        public Builder additionalSchemaElements(List<String> additionalSchemaElements) {
            this.additionalSchemaElements = Objects.requireNonNull(additionalSchemaElements);
            return this;
        }
        public Builder additionalSchemaElements(String... additionalSchemaElements) {
            return additionalSchemaElements(List.of(additionalSchemaElements));
        }
        public Builder compression(String compression) {
            this.compression = Objects.requireNonNull(compression);
            return this;
        }
        public Builder format(String format) {
            this.format = Objects.requireNonNull(format);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder refreshClosedReports(Boolean refreshClosedReports) {
            this.refreshClosedReports = Objects.requireNonNull(refreshClosedReports);
            return this;
        }
        public Builder reportName(String reportName) {
            this.reportName = Objects.requireNonNull(reportName);
            return this;
        }
        public Builder reportVersioning(String reportVersioning) {
            this.reportVersioning = Objects.requireNonNull(reportVersioning);
            return this;
        }
        public Builder s3Bucket(String s3Bucket) {
            this.s3Bucket = Objects.requireNonNull(s3Bucket);
            return this;
        }
        public Builder s3Prefix(String s3Prefix) {
            this.s3Prefix = Objects.requireNonNull(s3Prefix);
            return this;
        }
        public Builder s3Region(String s3Region) {
            this.s3Region = Objects.requireNonNull(s3Region);
            return this;
        }
        public Builder timeUnit(String timeUnit) {
            this.timeUnit = Objects.requireNonNull(timeUnit);
            return this;
        }        public GetReportDefinitionResult build() {
            return new GetReportDefinitionResult(additionalArtifacts, additionalSchemaElements, compression, format, id, refreshClosedReports, reportName, reportVersioning, s3Bucket, s3Prefix, s3Region, timeUnit);
        }
    }
}
