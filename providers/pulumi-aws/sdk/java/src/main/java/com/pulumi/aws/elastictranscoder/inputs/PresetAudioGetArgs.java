// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elastictranscoder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PresetAudioGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final PresetAudioGetArgs Empty = new PresetAudioGetArgs();

    /**
     * The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
     * 
     */
    @Import(name="audioPackingMode")
    private @Nullable Output<String> audioPackingMode;

    public Optional<Output<String>> audioPackingMode() {
        return Optional.ofNullable(this.audioPackingMode);
    }

    /**
     * The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
     * 
     */
    @Import(name="bitRate")
    private @Nullable Output<String> bitRate;

    public Optional<Output<String>> bitRate() {
        return Optional.ofNullable(this.bitRate);
    }

    /**
     * The number of audio channels in the output file
     * 
     */
    @Import(name="channels")
    private @Nullable Output<String> channels;

    public Optional<Output<String>> channels() {
        return Optional.ofNullable(this.channels);
    }

    /**
     * The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
     * 
     */
    @Import(name="codec")
    private @Nullable Output<String> codec;

    public Optional<Output<String>> codec() {
        return Optional.ofNullable(this.codec);
    }

    /**
     * The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
     * 
     */
    @Import(name="sampleRate")
    private @Nullable Output<String> sampleRate;

    public Optional<Output<String>> sampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }

    private PresetAudioGetArgs() {}

    private PresetAudioGetArgs(PresetAudioGetArgs $) {
        this.audioPackingMode = $.audioPackingMode;
        this.bitRate = $.bitRate;
        this.channels = $.channels;
        this.codec = $.codec;
        this.sampleRate = $.sampleRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PresetAudioGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PresetAudioGetArgs $;

        public Builder() {
            $ = new PresetAudioGetArgs();
        }

        public Builder(PresetAudioGetArgs defaults) {
            $ = new PresetAudioGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder audioPackingMode(@Nullable Output<String> audioPackingMode) {
            $.audioPackingMode = audioPackingMode;
            return this;
        }

        public Builder audioPackingMode(String audioPackingMode) {
            return audioPackingMode(Output.of(audioPackingMode));
        }

        public Builder bitRate(@Nullable Output<String> bitRate) {
            $.bitRate = bitRate;
            return this;
        }

        public Builder bitRate(String bitRate) {
            return bitRate(Output.of(bitRate));
        }

        public Builder channels(@Nullable Output<String> channels) {
            $.channels = channels;
            return this;
        }

        public Builder channels(String channels) {
            return channels(Output.of(channels));
        }

        public Builder codec(@Nullable Output<String> codec) {
            $.codec = codec;
            return this;
        }

        public Builder codec(String codec) {
            return codec(Output.of(codec));
        }

        public Builder sampleRate(@Nullable Output<String> sampleRate) {
            $.sampleRate = sampleRate;
            return this;
        }

        public Builder sampleRate(String sampleRate) {
            return sampleRate(Output.of(sampleRate));
        }

        public PresetAudioGetArgs build() {
            return $;
        }
    }

}
