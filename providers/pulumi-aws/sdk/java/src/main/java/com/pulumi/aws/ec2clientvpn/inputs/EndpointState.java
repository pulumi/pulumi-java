// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2clientvpn.inputs;

import com.pulumi.aws.ec2clientvpn.inputs.EndpointAuthenticationOptionGetArgs;
import com.pulumi.aws.ec2clientvpn.inputs.EndpointConnectionLogOptionsGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointState extends com.pulumi.resources.ResourceArgs {

    public static final EndpointState Empty = new EndpointState();

    /**
     * The ARN of the Client VPN endpoint.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Information about the authentication method to be used to authenticate clients.
     * 
     */
    @Import(name="authenticationOptions")
    private @Nullable Output<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions;

    public Optional<Output<List<EndpointAuthenticationOptionGetArgs>>> authenticationOptions() {
        return Optional.ofNullable(this.authenticationOptions);
    }

    /**
     * The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
     * 
     */
    @Import(name="clientCidrBlock")
    private @Nullable Output<String> clientCidrBlock;

    public Optional<Output<String>> clientCidrBlock() {
        return Optional.ofNullable(this.clientCidrBlock);
    }

    /**
     * Information about the client connection logging options.
     * 
     */
    @Import(name="connectionLogOptions")
    private @Nullable Output<EndpointConnectionLogOptionsGetArgs> connectionLogOptions;

    public Optional<Output<EndpointConnectionLogOptionsGetArgs>> connectionLogOptions() {
        return Optional.ofNullable(this.connectionLogOptions);
    }

    /**
     * A brief description of the Client VPN endpoint.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The DNS name to be used by clients when establishing their VPN session.
     * 
     */
    @Import(name="dnsName")
    private @Nullable Output<String> dnsName;

    public Optional<Output<String>> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
     * 
     */
    @Import(name="selfServicePortal")
    private @Nullable Output<String> selfServicePortal;

    public Optional<Output<String>> selfServicePortal() {
        return Optional.ofNullable(this.selfServicePortal);
    }

    /**
     * The ARN of the ACM server certificate.
     * 
     */
    @Import(name="serverCertificateArn")
    private @Nullable Output<String> serverCertificateArn;

    public Optional<Output<String>> serverCertificateArn() {
        return Optional.ofNullable(this.serverCertificateArn);
    }

    /**
     * Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
     * 
     */
    @Import(name="splitTunnel")
    private @Nullable Output<Boolean> splitTunnel;

    public Optional<Output<Boolean>> splitTunnel() {
        return Optional.ofNullable(this.splitTunnel);
    }

    /**
     * The current state of the Client VPN endpoint.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A mapping of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The transport protocol to be used by the VPN session. Default value is `udp`.
     * 
     */
    @Import(name="transportProtocol")
    private @Nullable Output<String> transportProtocol;

    public Optional<Output<String>> transportProtocol() {
        return Optional.ofNullable(this.transportProtocol);
    }

    private EndpointState() {}

    private EndpointState(EndpointState $) {
        this.arn = $.arn;
        this.authenticationOptions = $.authenticationOptions;
        this.clientCidrBlock = $.clientCidrBlock;
        this.connectionLogOptions = $.connectionLogOptions;
        this.description = $.description;
        this.dnsName = $.dnsName;
        this.dnsServers = $.dnsServers;
        this.selfServicePortal = $.selfServicePortal;
        this.serverCertificateArn = $.serverCertificateArn;
        this.splitTunnel = $.splitTunnel;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.transportProtocol = $.transportProtocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointState $;

        public Builder() {
            $ = new EndpointState();
        }

        public Builder(EndpointState defaults) {
            $ = new EndpointState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder authenticationOptions(@Nullable Output<List<EndpointAuthenticationOptionGetArgs>> authenticationOptions) {
            $.authenticationOptions = authenticationOptions;
            return this;
        }

        public Builder authenticationOptions(List<EndpointAuthenticationOptionGetArgs> authenticationOptions) {
            return authenticationOptions(Output.of(authenticationOptions));
        }

        public Builder authenticationOptions(EndpointAuthenticationOptionGetArgs... authenticationOptions) {
            return authenticationOptions(List.of(authenticationOptions));
        }

        public Builder clientCidrBlock(@Nullable Output<String> clientCidrBlock) {
            $.clientCidrBlock = clientCidrBlock;
            return this;
        }

        public Builder clientCidrBlock(String clientCidrBlock) {
            return clientCidrBlock(Output.of(clientCidrBlock));
        }

        public Builder connectionLogOptions(@Nullable Output<EndpointConnectionLogOptionsGetArgs> connectionLogOptions) {
            $.connectionLogOptions = connectionLogOptions;
            return this;
        }

        public Builder connectionLogOptions(EndpointConnectionLogOptionsGetArgs connectionLogOptions) {
            return connectionLogOptions(Output.of(connectionLogOptions));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder dnsName(@Nullable Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        public Builder selfServicePortal(@Nullable Output<String> selfServicePortal) {
            $.selfServicePortal = selfServicePortal;
            return this;
        }

        public Builder selfServicePortal(String selfServicePortal) {
            return selfServicePortal(Output.of(selfServicePortal));
        }

        public Builder serverCertificateArn(@Nullable Output<String> serverCertificateArn) {
            $.serverCertificateArn = serverCertificateArn;
            return this;
        }

        public Builder serverCertificateArn(String serverCertificateArn) {
            return serverCertificateArn(Output.of(serverCertificateArn));
        }

        public Builder splitTunnel(@Nullable Output<Boolean> splitTunnel) {
            $.splitTunnel = splitTunnel;
            return this;
        }

        public Builder splitTunnel(Boolean splitTunnel) {
            return splitTunnel(Output.of(splitTunnel));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder transportProtocol(@Nullable Output<String> transportProtocol) {
            $.transportProtocol = transportProtocol;
            return this;
        }

        public Builder transportProtocol(String transportProtocol) {
            return transportProtocol(Output.of(transportProtocol));
        }

        public EndpointState build() {
            return $;
        }
    }

}
