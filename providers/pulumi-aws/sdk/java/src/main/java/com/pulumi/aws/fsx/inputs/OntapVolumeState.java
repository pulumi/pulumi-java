// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fsx.inputs;

import com.pulumi.aws.fsx.inputs.OntapVolumeTieringPolicyGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OntapVolumeState extends com.pulumi.resources.ResourceArgs {

    public static final OntapVolumeState Empty = new OntapVolumeState();

    /**
     * Amazon Resource Name of the volune.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Describes the file system for the volume, e.g. `fs-12345679`
     * 
     */
    @Import(name="fileSystemId")
    private @Nullable Output<String> fileSystemId;

    public Optional<Output<String>> fileSystemId() {
        return Optional.ofNullable(this.fileSystemId);
    }

    /**
     * Specifies the FlexCache endpoint type of the volume, Valid values are `NONE`, `ORIGIN`, `CACHE`. Default value is `NONE`. These can be set by the ONTAP CLI or API and are use with FlexCache feature.
     * 
     */
    @Import(name="flexcacheEndpointType")
    private @Nullable Output<String> flexcacheEndpointType;

    public Optional<Output<String>> flexcacheEndpointType() {
        return Optional.ofNullable(this.flexcacheEndpointType);
    }

    /**
     * Specifies the location in the storage virtual machine&#39;s namespace where the volume is mounted. The junction_path must have a leading forward slash, such as `/vol3`
     * 
     */
    @Import(name="junctionPath")
    private @Nullable Output<String> junctionPath;

    public Optional<Output<String>> junctionPath() {
        return Optional.ofNullable(this.junctionPath);
    }

    /**
     * Specifies the tiering policy for the ONTAP volume for moving data to the capacity pool storage. Valid values are `SNAPSHOT_ONLY`, `AUTO`, `ALL`, `NONE`. Default value is `SNAPSHOT_ONLY`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the type of volume, Valid values are `RW`, `DP`,  and `LS`. Default value is `RW`. These can be set by the ONTAP CLI or API. This setting is used as part of migration and replication [Migrating to Amazon FSx for NetApp ONTAP](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/migrating-fsx-ontap.html)
     * 
     */
    @Import(name="ontapVolumeType")
    private @Nullable Output<String> ontapVolumeType;

    public Optional<Output<String>> ontapVolumeType() {
        return Optional.ofNullable(this.ontapVolumeType);
    }

    /**
     * Specifies the volume security style, Valid values are `UNIX`, `NTFS`, and `MIXED`. Default value is `UNIX`.
     * 
     */
    @Import(name="securityStyle")
    private @Nullable Output<String> securityStyle;

    public Optional<Output<String>> securityStyle() {
        return Optional.ofNullable(this.securityStyle);
    }

    /**
     * Specifies the size of the volume, in megabytes (MB), that you are creating.
     * 
     */
    @Import(name="sizeInMegabytes")
    private @Nullable Output<Integer> sizeInMegabytes;

    public Optional<Output<Integer>> sizeInMegabytes() {
        return Optional.ofNullable(this.sizeInMegabytes);
    }

    /**
     * Set to true to enable deduplication, compression, and compaction storage efficiency features on the volume.
     * 
     */
    @Import(name="storageEfficiencyEnabled")
    private @Nullable Output<Boolean> storageEfficiencyEnabled;

    public Optional<Output<Boolean>> storageEfficiencyEnabled() {
        return Optional.ofNullable(this.storageEfficiencyEnabled);
    }

    /**
     * Specifies the storage virtual machine in which to create the volume.
     * 
     */
    @Import(name="storageVirtualMachineId")
    private @Nullable Output<String> storageVirtualMachineId;

    public Optional<Output<String>> storageVirtualMachineId() {
        return Optional.ofNullable(this.storageVirtualMachineId);
    }

    /**
     * A map of tags to assign to the volume. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    @Import(name="tieringPolicy")
    private @Nullable Output<OntapVolumeTieringPolicyGetArgs> tieringPolicy;

    public Optional<Output<OntapVolumeTieringPolicyGetArgs>> tieringPolicy() {
        return Optional.ofNullable(this.tieringPolicy);
    }

    /**
     * The Volume&#39;s UUID (universally unique identifier).
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * The type of volume, currently the only valid value is `ONTAP`.
     * 
     */
    @Import(name="volumeType")
    private @Nullable Output<String> volumeType;

    public Optional<Output<String>> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    private OntapVolumeState() {}

    private OntapVolumeState(OntapVolumeState $) {
        this.arn = $.arn;
        this.fileSystemId = $.fileSystemId;
        this.flexcacheEndpointType = $.flexcacheEndpointType;
        this.junctionPath = $.junctionPath;
        this.name = $.name;
        this.ontapVolumeType = $.ontapVolumeType;
        this.securityStyle = $.securityStyle;
        this.sizeInMegabytes = $.sizeInMegabytes;
        this.storageEfficiencyEnabled = $.storageEfficiencyEnabled;
        this.storageVirtualMachineId = $.storageVirtualMachineId;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.tieringPolicy = $.tieringPolicy;
        this.uuid = $.uuid;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OntapVolumeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OntapVolumeState $;

        public Builder() {
            $ = new OntapVolumeState();
        }

        public Builder(OntapVolumeState defaults) {
            $ = new OntapVolumeState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder fileSystemId(@Nullable Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        public Builder flexcacheEndpointType(@Nullable Output<String> flexcacheEndpointType) {
            $.flexcacheEndpointType = flexcacheEndpointType;
            return this;
        }

        public Builder flexcacheEndpointType(String flexcacheEndpointType) {
            return flexcacheEndpointType(Output.of(flexcacheEndpointType));
        }

        public Builder junctionPath(@Nullable Output<String> junctionPath) {
            $.junctionPath = junctionPath;
            return this;
        }

        public Builder junctionPath(String junctionPath) {
            return junctionPath(Output.of(junctionPath));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder ontapVolumeType(@Nullable Output<String> ontapVolumeType) {
            $.ontapVolumeType = ontapVolumeType;
            return this;
        }

        public Builder ontapVolumeType(String ontapVolumeType) {
            return ontapVolumeType(Output.of(ontapVolumeType));
        }

        public Builder securityStyle(@Nullable Output<String> securityStyle) {
            $.securityStyle = securityStyle;
            return this;
        }

        public Builder securityStyle(String securityStyle) {
            return securityStyle(Output.of(securityStyle));
        }

        public Builder sizeInMegabytes(@Nullable Output<Integer> sizeInMegabytes) {
            $.sizeInMegabytes = sizeInMegabytes;
            return this;
        }

        public Builder sizeInMegabytes(Integer sizeInMegabytes) {
            return sizeInMegabytes(Output.of(sizeInMegabytes));
        }

        public Builder storageEfficiencyEnabled(@Nullable Output<Boolean> storageEfficiencyEnabled) {
            $.storageEfficiencyEnabled = storageEfficiencyEnabled;
            return this;
        }

        public Builder storageEfficiencyEnabled(Boolean storageEfficiencyEnabled) {
            return storageEfficiencyEnabled(Output.of(storageEfficiencyEnabled));
        }

        public Builder storageVirtualMachineId(@Nullable Output<String> storageVirtualMachineId) {
            $.storageVirtualMachineId = storageVirtualMachineId;
            return this;
        }

        public Builder storageVirtualMachineId(String storageVirtualMachineId) {
            return storageVirtualMachineId(Output.of(storageVirtualMachineId));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder tieringPolicy(@Nullable Output<OntapVolumeTieringPolicyGetArgs> tieringPolicy) {
            $.tieringPolicy = tieringPolicy;
            return this;
        }

        public Builder tieringPolicy(OntapVolumeTieringPolicyGetArgs tieringPolicy) {
            return tieringPolicy(Output.of(tieringPolicy));
        }

        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public Builder volumeType(@Nullable Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        public OntapVolumeState build() {
            return $;
        }
    }

}
