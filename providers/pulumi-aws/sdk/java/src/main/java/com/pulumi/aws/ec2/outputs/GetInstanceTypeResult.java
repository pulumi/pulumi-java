// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.aws.ec2.outputs.GetInstanceTypeFpga;
import com.pulumi.aws.ec2.outputs.GetInstanceTypeGpus;
import com.pulumi.aws.ec2.outputs.GetInstanceTypeInferenceAccelerator;
import com.pulumi.aws.ec2.outputs.GetInstanceTypeInstanceDisk;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceTypeResult {
    /**
     * @return `true` if auto recovery is supported.
     * 
     */
    private final Boolean autoRecoverySupported;
    /**
     * @return `true` if it is a bare metal instance type.
     * 
     */
    private final Boolean bareMetal;
    /**
     * @return `true` if the instance type is a burstable performance instance type.
     * 
     */
    private final Boolean burstablePerformanceSupported;
    /**
     * @return `true`  if the instance type is a current generation.
     * 
     */
    private final Boolean currentGeneration;
    /**
     * @return `true` if Dedicated Hosts are supported on the instance type.
     * 
     */
    private final Boolean dedicatedHostsSupported;
    /**
     * @return The default number of cores for the instance type.
     * 
     */
    private final Integer defaultCores;
    /**
     * @return The  default  number of threads per core for the instance type.
     * 
     */
    private final Integer defaultThreadsPerCore;
    /**
     * @return The default number of vCPUs for the instance type.
     * 
     */
    private final Integer defaultVcpus;
    /**
     * @return Indicates whether Amazon EBS encryption is supported.
     * 
     */
    private final String ebsEncryptionSupport;
    /**
     * @return Indicates whether non-volatile memory express (NVMe) is supported.
     * 
     */
    private final String ebsNvmeSupport;
    /**
     * @return Indicates that the instance type is Amazon EBS-optimized.
     * 
     */
    private final String ebsOptimizedSupport;
    /**
     * @return The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    private final Integer ebsPerformanceBaselineBandwidth;
    /**
     * @return The baseline input/output storage operations per seconds for an EBS-optimized instance type.
     * 
     */
    private final Integer ebsPerformanceBaselineIops;
    /**
     * @return The baseline throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    private final Double ebsPerformanceBaselineThroughput;
    /**
     * @return The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    private final Integer ebsPerformanceMaximumBandwidth;
    /**
     * @return The maximum input/output storage operations per second for an EBS-optimized instance type.
     * 
     */
    private final Integer ebsPerformanceMaximumIops;
    /**
     * @return The maximum throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    private final Double ebsPerformanceMaximumThroughput;
    /**
     * @return Indicates whether Elastic Fabric Adapter (EFA) is supported.
     * 
     */
    private final Boolean efaSupported;
    /**
     * @return Indicates whether Elastic Network Adapter (ENA) is supported.
     * 
     */
    private final String enaSupport;
    /**
     * @return Indicates whether encryption in-transit between instances is supported.
     * 
     */
    private final Boolean encryptionInTransitSupported;
    /**
     * @return Describes the FPGA accelerator settings for the instance type.
     * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
     * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
     * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
     * * `fpgas.#.name` - The name of the FPGA accelerator.
     * 
     */
    private final List<GetInstanceTypeFpga> fpgas;
    /**
     * @return `true` if the instance type is eligible for the free tier.
     * 
     */
    private final Boolean freeTierEligible;
    /**
     * @return Describes the GPU accelerators for the instance type.
     * * `gpus.#.count` - The number of GPUs for the instance type.
     * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
     * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
     * * `gpus.#.name` - The name of the GPU accelerator.
     * 
     */
    private final List<GetInstanceTypeGpus> gpuses;
    /**
     * @return `true` if On-Demand hibernation is supported.
     * 
     */
    private final Boolean hibernationSupported;
    /**
     * @return Indicates the hypervisor used for the instance type.
     * * `inference_accelerators` Describes the Inference accelerators for the instance type.
     * * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
     * * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
     * * `inference_accelerators.#.name` - The name of the Inference accelerator.
     * 
     */
    private final String hypervisor;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators;
    /**
     * @return Describes the disks for the instance type.
     * * `instance_disks.#.count` - The number of disks with this configuration.
     * * `instance_disks.#.size` - The size of the disk in GB.
     * * `instance_disks.#.type` - The type of disk.
     * 
     */
    private final List<GetInstanceTypeInstanceDisk> instanceDisks;
    /**
     * @return `true` if instance storage is supported.
     * 
     */
    private final Boolean instanceStorageSupported;
    private final String instanceType;
    /**
     * @return `true` if IPv6 is supported.
     * 
     */
    private final Boolean ipv6Supported;
    /**
     * @return The maximum number of IPv4 addresses per network interface.
     * 
     */
    private final Integer maximumIpv4AddressesPerInterface;
    /**
     * @return The maximum number of IPv6 addresses per network interface.
     * 
     */
    private final Integer maximumIpv6AddressesPerInterface;
    /**
     * @return The maximum number of network interfaces for the instance type.
     * 
     */
    private final Integer maximumNetworkInterfaces;
    /**
     * @return Size of the instance memory, in MiB.
     * 
     */
    private final Integer memorySize;
    /**
     * @return Describes the network performance.
     * 
     */
    private final String networkPerformance;
    /**
     * @return A list of architectures supported by the instance type.
     * 
     */
    private final List<String> supportedArchitectures;
    /**
     * @return A list of supported placement groups types.
     * 
     */
    private final List<String> supportedPlacementStrategies;
    /**
     * @return Indicates the supported root device types.
     * 
     */
    private final List<String> supportedRootDeviceTypes;
    /**
     * @return Indicates whether the instance type is offered for spot or On-Demand.
     * 
     */
    private final List<String> supportedUsagesClasses;
    /**
     * @return The supported virtualization types.
     * 
     */
    private final List<String> supportedVirtualizationTypes;
    /**
     * @return The speed of the processor, in GHz.
     * 
     */
    private final Double sustainedClockSpeed;
    /**
     * @return The total memory of all FPGA accelerators for the instance type (in MiB).
     * 
     */
    private final Integer totalFpgaMemory;
    /**
     * @return The total size of the memory for the GPU accelerators for the instance type (in MiB).
     * 
     */
    private final Integer totalGpuMemory;
    /**
     * @return The total size of the instance disks, in GB.
     * 
     */
    private final Integer totalInstanceStorage;
    /**
     * @return List of the valid number of cores that can be configured for the instance type.
     * 
     */
    private final List<Integer> validCores;
    /**
     * @return List of the valid number of threads per core that can be configured for the instance type.
     * 
     */
    private final List<Integer> validThreadsPerCores;

    @CustomType.Constructor
    private GetInstanceTypeResult(
        @CustomType.Parameter("autoRecoverySupported") Boolean autoRecoverySupported,
        @CustomType.Parameter("bareMetal") Boolean bareMetal,
        @CustomType.Parameter("burstablePerformanceSupported") Boolean burstablePerformanceSupported,
        @CustomType.Parameter("currentGeneration") Boolean currentGeneration,
        @CustomType.Parameter("dedicatedHostsSupported") Boolean dedicatedHostsSupported,
        @CustomType.Parameter("defaultCores") Integer defaultCores,
        @CustomType.Parameter("defaultThreadsPerCore") Integer defaultThreadsPerCore,
        @CustomType.Parameter("defaultVcpus") Integer defaultVcpus,
        @CustomType.Parameter("ebsEncryptionSupport") String ebsEncryptionSupport,
        @CustomType.Parameter("ebsNvmeSupport") String ebsNvmeSupport,
        @CustomType.Parameter("ebsOptimizedSupport") String ebsOptimizedSupport,
        @CustomType.Parameter("ebsPerformanceBaselineBandwidth") Integer ebsPerformanceBaselineBandwidth,
        @CustomType.Parameter("ebsPerformanceBaselineIops") Integer ebsPerformanceBaselineIops,
        @CustomType.Parameter("ebsPerformanceBaselineThroughput") Double ebsPerformanceBaselineThroughput,
        @CustomType.Parameter("ebsPerformanceMaximumBandwidth") Integer ebsPerformanceMaximumBandwidth,
        @CustomType.Parameter("ebsPerformanceMaximumIops") Integer ebsPerformanceMaximumIops,
        @CustomType.Parameter("ebsPerformanceMaximumThroughput") Double ebsPerformanceMaximumThroughput,
        @CustomType.Parameter("efaSupported") Boolean efaSupported,
        @CustomType.Parameter("enaSupport") String enaSupport,
        @CustomType.Parameter("encryptionInTransitSupported") Boolean encryptionInTransitSupported,
        @CustomType.Parameter("fpgas") List<GetInstanceTypeFpga> fpgas,
        @CustomType.Parameter("freeTierEligible") Boolean freeTierEligible,
        @CustomType.Parameter("gpuses") List<GetInstanceTypeGpus> gpuses,
        @CustomType.Parameter("hibernationSupported") Boolean hibernationSupported,
        @CustomType.Parameter("hypervisor") String hypervisor,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("inferenceAccelerators") List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators,
        @CustomType.Parameter("instanceDisks") List<GetInstanceTypeInstanceDisk> instanceDisks,
        @CustomType.Parameter("instanceStorageSupported") Boolean instanceStorageSupported,
        @CustomType.Parameter("instanceType") String instanceType,
        @CustomType.Parameter("ipv6Supported") Boolean ipv6Supported,
        @CustomType.Parameter("maximumIpv4AddressesPerInterface") Integer maximumIpv4AddressesPerInterface,
        @CustomType.Parameter("maximumIpv6AddressesPerInterface") Integer maximumIpv6AddressesPerInterface,
        @CustomType.Parameter("maximumNetworkInterfaces") Integer maximumNetworkInterfaces,
        @CustomType.Parameter("memorySize") Integer memorySize,
        @CustomType.Parameter("networkPerformance") String networkPerformance,
        @CustomType.Parameter("supportedArchitectures") List<String> supportedArchitectures,
        @CustomType.Parameter("supportedPlacementStrategies") List<String> supportedPlacementStrategies,
        @CustomType.Parameter("supportedRootDeviceTypes") List<String> supportedRootDeviceTypes,
        @CustomType.Parameter("supportedUsagesClasses") List<String> supportedUsagesClasses,
        @CustomType.Parameter("supportedVirtualizationTypes") List<String> supportedVirtualizationTypes,
        @CustomType.Parameter("sustainedClockSpeed") Double sustainedClockSpeed,
        @CustomType.Parameter("totalFpgaMemory") Integer totalFpgaMemory,
        @CustomType.Parameter("totalGpuMemory") Integer totalGpuMemory,
        @CustomType.Parameter("totalInstanceStorage") Integer totalInstanceStorage,
        @CustomType.Parameter("validCores") List<Integer> validCores,
        @CustomType.Parameter("validThreadsPerCores") List<Integer> validThreadsPerCores) {
        this.autoRecoverySupported = autoRecoverySupported;
        this.bareMetal = bareMetal;
        this.burstablePerformanceSupported = burstablePerformanceSupported;
        this.currentGeneration = currentGeneration;
        this.dedicatedHostsSupported = dedicatedHostsSupported;
        this.defaultCores = defaultCores;
        this.defaultThreadsPerCore = defaultThreadsPerCore;
        this.defaultVcpus = defaultVcpus;
        this.ebsEncryptionSupport = ebsEncryptionSupport;
        this.ebsNvmeSupport = ebsNvmeSupport;
        this.ebsOptimizedSupport = ebsOptimizedSupport;
        this.ebsPerformanceBaselineBandwidth = ebsPerformanceBaselineBandwidth;
        this.ebsPerformanceBaselineIops = ebsPerformanceBaselineIops;
        this.ebsPerformanceBaselineThroughput = ebsPerformanceBaselineThroughput;
        this.ebsPerformanceMaximumBandwidth = ebsPerformanceMaximumBandwidth;
        this.ebsPerformanceMaximumIops = ebsPerformanceMaximumIops;
        this.ebsPerformanceMaximumThroughput = ebsPerformanceMaximumThroughput;
        this.efaSupported = efaSupported;
        this.enaSupport = enaSupport;
        this.encryptionInTransitSupported = encryptionInTransitSupported;
        this.fpgas = fpgas;
        this.freeTierEligible = freeTierEligible;
        this.gpuses = gpuses;
        this.hibernationSupported = hibernationSupported;
        this.hypervisor = hypervisor;
        this.id = id;
        this.inferenceAccelerators = inferenceAccelerators;
        this.instanceDisks = instanceDisks;
        this.instanceStorageSupported = instanceStorageSupported;
        this.instanceType = instanceType;
        this.ipv6Supported = ipv6Supported;
        this.maximumIpv4AddressesPerInterface = maximumIpv4AddressesPerInterface;
        this.maximumIpv6AddressesPerInterface = maximumIpv6AddressesPerInterface;
        this.maximumNetworkInterfaces = maximumNetworkInterfaces;
        this.memorySize = memorySize;
        this.networkPerformance = networkPerformance;
        this.supportedArchitectures = supportedArchitectures;
        this.supportedPlacementStrategies = supportedPlacementStrategies;
        this.supportedRootDeviceTypes = supportedRootDeviceTypes;
        this.supportedUsagesClasses = supportedUsagesClasses;
        this.supportedVirtualizationTypes = supportedVirtualizationTypes;
        this.sustainedClockSpeed = sustainedClockSpeed;
        this.totalFpgaMemory = totalFpgaMemory;
        this.totalGpuMemory = totalGpuMemory;
        this.totalInstanceStorage = totalInstanceStorage;
        this.validCores = validCores;
        this.validThreadsPerCores = validThreadsPerCores;
    }

    /**
     * @return `true` if auto recovery is supported.
     * 
     */
    public Boolean autoRecoverySupported() {
        return this.autoRecoverySupported;
    }
    /**
     * @return `true` if it is a bare metal instance type.
     * 
     */
    public Boolean bareMetal() {
        return this.bareMetal;
    }
    /**
     * @return `true` if the instance type is a burstable performance instance type.
     * 
     */
    public Boolean burstablePerformanceSupported() {
        return this.burstablePerformanceSupported;
    }
    /**
     * @return `true`  if the instance type is a current generation.
     * 
     */
    public Boolean currentGeneration() {
        return this.currentGeneration;
    }
    /**
     * @return `true` if Dedicated Hosts are supported on the instance type.
     * 
     */
    public Boolean dedicatedHostsSupported() {
        return this.dedicatedHostsSupported;
    }
    /**
     * @return The default number of cores for the instance type.
     * 
     */
    public Integer defaultCores() {
        return this.defaultCores;
    }
    /**
     * @return The  default  number of threads per core for the instance type.
     * 
     */
    public Integer defaultThreadsPerCore() {
        return this.defaultThreadsPerCore;
    }
    /**
     * @return The default number of vCPUs for the instance type.
     * 
     */
    public Integer defaultVcpus() {
        return this.defaultVcpus;
    }
    /**
     * @return Indicates whether Amazon EBS encryption is supported.
     * 
     */
    public String ebsEncryptionSupport() {
        return this.ebsEncryptionSupport;
    }
    /**
     * @return Indicates whether non-volatile memory express (NVMe) is supported.
     * 
     */
    public String ebsNvmeSupport() {
        return this.ebsNvmeSupport;
    }
    /**
     * @return Indicates that the instance type is Amazon EBS-optimized.
     * 
     */
    public String ebsOptimizedSupport() {
        return this.ebsOptimizedSupport;
    }
    /**
     * @return The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    public Integer ebsPerformanceBaselineBandwidth() {
        return this.ebsPerformanceBaselineBandwidth;
    }
    /**
     * @return The baseline input/output storage operations per seconds for an EBS-optimized instance type.
     * 
     */
    public Integer ebsPerformanceBaselineIops() {
        return this.ebsPerformanceBaselineIops;
    }
    /**
     * @return The baseline throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    public Double ebsPerformanceBaselineThroughput() {
        return this.ebsPerformanceBaselineThroughput;
    }
    /**
     * @return The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
     * 
     */
    public Integer ebsPerformanceMaximumBandwidth() {
        return this.ebsPerformanceMaximumBandwidth;
    }
    /**
     * @return The maximum input/output storage operations per second for an EBS-optimized instance type.
     * 
     */
    public Integer ebsPerformanceMaximumIops() {
        return this.ebsPerformanceMaximumIops;
    }
    /**
     * @return The maximum throughput performance for an EBS-optimized instance type, in MBps.
     * 
     */
    public Double ebsPerformanceMaximumThroughput() {
        return this.ebsPerformanceMaximumThroughput;
    }
    /**
     * @return Indicates whether Elastic Fabric Adapter (EFA) is supported.
     * 
     */
    public Boolean efaSupported() {
        return this.efaSupported;
    }
    /**
     * @return Indicates whether Elastic Network Adapter (ENA) is supported.
     * 
     */
    public String enaSupport() {
        return this.enaSupport;
    }
    /**
     * @return Indicates whether encryption in-transit between instances is supported.
     * 
     */
    public Boolean encryptionInTransitSupported() {
        return this.encryptionInTransitSupported;
    }
    /**
     * @return Describes the FPGA accelerator settings for the instance type.
     * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
     * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
     * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
     * * `fpgas.#.name` - The name of the FPGA accelerator.
     * 
     */
    public List<GetInstanceTypeFpga> fpgas() {
        return this.fpgas;
    }
    /**
     * @return `true` if the instance type is eligible for the free tier.
     * 
     */
    public Boolean freeTierEligible() {
        return this.freeTierEligible;
    }
    /**
     * @return Describes the GPU accelerators for the instance type.
     * * `gpus.#.count` - The number of GPUs for the instance type.
     * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
     * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
     * * `gpus.#.name` - The name of the GPU accelerator.
     * 
     */
    public List<GetInstanceTypeGpus> gpuses() {
        return this.gpuses;
    }
    /**
     * @return `true` if On-Demand hibernation is supported.
     * 
     */
    public Boolean hibernationSupported() {
        return this.hibernationSupported;
    }
    /**
     * @return Indicates the hypervisor used for the instance type.
     * * `inference_accelerators` Describes the Inference accelerators for the instance type.
     * * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
     * * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
     * * `inference_accelerators.#.name` - The name of the Inference accelerator.
     * 
     */
    public String hypervisor() {
        return this.hypervisor;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators() {
        return this.inferenceAccelerators;
    }
    /**
     * @return Describes the disks for the instance type.
     * * `instance_disks.#.count` - The number of disks with this configuration.
     * * `instance_disks.#.size` - The size of the disk in GB.
     * * `instance_disks.#.type` - The type of disk.
     * 
     */
    public List<GetInstanceTypeInstanceDisk> instanceDisks() {
        return this.instanceDisks;
    }
    /**
     * @return `true` if instance storage is supported.
     * 
     */
    public Boolean instanceStorageSupported() {
        return this.instanceStorageSupported;
    }
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return `true` if IPv6 is supported.
     * 
     */
    public Boolean ipv6Supported() {
        return this.ipv6Supported;
    }
    /**
     * @return The maximum number of IPv4 addresses per network interface.
     * 
     */
    public Integer maximumIpv4AddressesPerInterface() {
        return this.maximumIpv4AddressesPerInterface;
    }
    /**
     * @return The maximum number of IPv6 addresses per network interface.
     * 
     */
    public Integer maximumIpv6AddressesPerInterface() {
        return this.maximumIpv6AddressesPerInterface;
    }
    /**
     * @return The maximum number of network interfaces for the instance type.
     * 
     */
    public Integer maximumNetworkInterfaces() {
        return this.maximumNetworkInterfaces;
    }
    /**
     * @return Size of the instance memory, in MiB.
     * 
     */
    public Integer memorySize() {
        return this.memorySize;
    }
    /**
     * @return Describes the network performance.
     * 
     */
    public String networkPerformance() {
        return this.networkPerformance;
    }
    /**
     * @return A list of architectures supported by the instance type.
     * 
     */
    public List<String> supportedArchitectures() {
        return this.supportedArchitectures;
    }
    /**
     * @return A list of supported placement groups types.
     * 
     */
    public List<String> supportedPlacementStrategies() {
        return this.supportedPlacementStrategies;
    }
    /**
     * @return Indicates the supported root device types.
     * 
     */
    public List<String> supportedRootDeviceTypes() {
        return this.supportedRootDeviceTypes;
    }
    /**
     * @return Indicates whether the instance type is offered for spot or On-Demand.
     * 
     */
    public List<String> supportedUsagesClasses() {
        return this.supportedUsagesClasses;
    }
    /**
     * @return The supported virtualization types.
     * 
     */
    public List<String> supportedVirtualizationTypes() {
        return this.supportedVirtualizationTypes;
    }
    /**
     * @return The speed of the processor, in GHz.
     * 
     */
    public Double sustainedClockSpeed() {
        return this.sustainedClockSpeed;
    }
    /**
     * @return The total memory of all FPGA accelerators for the instance type (in MiB).
     * 
     */
    public Integer totalFpgaMemory() {
        return this.totalFpgaMemory;
    }
    /**
     * @return The total size of the memory for the GPU accelerators for the instance type (in MiB).
     * 
     */
    public Integer totalGpuMemory() {
        return this.totalGpuMemory;
    }
    /**
     * @return The total size of the instance disks, in GB.
     * 
     */
    public Integer totalInstanceStorage() {
        return this.totalInstanceStorage;
    }
    /**
     * @return List of the valid number of cores that can be configured for the instance type.
     * 
     */
    public List<Integer> validCores() {
        return this.validCores;
    }
    /**
     * @return List of the valid number of threads per core that can be configured for the instance type.
     * 
     */
    public List<Integer> validThreadsPerCores() {
        return this.validThreadsPerCores;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceTypeResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean autoRecoverySupported;
        private Boolean bareMetal;
        private Boolean burstablePerformanceSupported;
        private Boolean currentGeneration;
        private Boolean dedicatedHostsSupported;
        private Integer defaultCores;
        private Integer defaultThreadsPerCore;
        private Integer defaultVcpus;
        private String ebsEncryptionSupport;
        private String ebsNvmeSupport;
        private String ebsOptimizedSupport;
        private Integer ebsPerformanceBaselineBandwidth;
        private Integer ebsPerformanceBaselineIops;
        private Double ebsPerformanceBaselineThroughput;
        private Integer ebsPerformanceMaximumBandwidth;
        private Integer ebsPerformanceMaximumIops;
        private Double ebsPerformanceMaximumThroughput;
        private Boolean efaSupported;
        private String enaSupport;
        private Boolean encryptionInTransitSupported;
        private List<GetInstanceTypeFpga> fpgas;
        private Boolean freeTierEligible;
        private List<GetInstanceTypeGpus> gpuses;
        private Boolean hibernationSupported;
        private String hypervisor;
        private String id;
        private List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators;
        private List<GetInstanceTypeInstanceDisk> instanceDisks;
        private Boolean instanceStorageSupported;
        private String instanceType;
        private Boolean ipv6Supported;
        private Integer maximumIpv4AddressesPerInterface;
        private Integer maximumIpv6AddressesPerInterface;
        private Integer maximumNetworkInterfaces;
        private Integer memorySize;
        private String networkPerformance;
        private List<String> supportedArchitectures;
        private List<String> supportedPlacementStrategies;
        private List<String> supportedRootDeviceTypes;
        private List<String> supportedUsagesClasses;
        private List<String> supportedVirtualizationTypes;
        private Double sustainedClockSpeed;
        private Integer totalFpgaMemory;
        private Integer totalGpuMemory;
        private Integer totalInstanceStorage;
        private List<Integer> validCores;
        private List<Integer> validThreadsPerCores;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoRecoverySupported = defaults.autoRecoverySupported;
    	      this.bareMetal = defaults.bareMetal;
    	      this.burstablePerformanceSupported = defaults.burstablePerformanceSupported;
    	      this.currentGeneration = defaults.currentGeneration;
    	      this.dedicatedHostsSupported = defaults.dedicatedHostsSupported;
    	      this.defaultCores = defaults.defaultCores;
    	      this.defaultThreadsPerCore = defaults.defaultThreadsPerCore;
    	      this.defaultVcpus = defaults.defaultVcpus;
    	      this.ebsEncryptionSupport = defaults.ebsEncryptionSupport;
    	      this.ebsNvmeSupport = defaults.ebsNvmeSupport;
    	      this.ebsOptimizedSupport = defaults.ebsOptimizedSupport;
    	      this.ebsPerformanceBaselineBandwidth = defaults.ebsPerformanceBaselineBandwidth;
    	      this.ebsPerformanceBaselineIops = defaults.ebsPerformanceBaselineIops;
    	      this.ebsPerformanceBaselineThroughput = defaults.ebsPerformanceBaselineThroughput;
    	      this.ebsPerformanceMaximumBandwidth = defaults.ebsPerformanceMaximumBandwidth;
    	      this.ebsPerformanceMaximumIops = defaults.ebsPerformanceMaximumIops;
    	      this.ebsPerformanceMaximumThroughput = defaults.ebsPerformanceMaximumThroughput;
    	      this.efaSupported = defaults.efaSupported;
    	      this.enaSupport = defaults.enaSupport;
    	      this.encryptionInTransitSupported = defaults.encryptionInTransitSupported;
    	      this.fpgas = defaults.fpgas;
    	      this.freeTierEligible = defaults.freeTierEligible;
    	      this.gpuses = defaults.gpuses;
    	      this.hibernationSupported = defaults.hibernationSupported;
    	      this.hypervisor = defaults.hypervisor;
    	      this.id = defaults.id;
    	      this.inferenceAccelerators = defaults.inferenceAccelerators;
    	      this.instanceDisks = defaults.instanceDisks;
    	      this.instanceStorageSupported = defaults.instanceStorageSupported;
    	      this.instanceType = defaults.instanceType;
    	      this.ipv6Supported = defaults.ipv6Supported;
    	      this.maximumIpv4AddressesPerInterface = defaults.maximumIpv4AddressesPerInterface;
    	      this.maximumIpv6AddressesPerInterface = defaults.maximumIpv6AddressesPerInterface;
    	      this.maximumNetworkInterfaces = defaults.maximumNetworkInterfaces;
    	      this.memorySize = defaults.memorySize;
    	      this.networkPerformance = defaults.networkPerformance;
    	      this.supportedArchitectures = defaults.supportedArchitectures;
    	      this.supportedPlacementStrategies = defaults.supportedPlacementStrategies;
    	      this.supportedRootDeviceTypes = defaults.supportedRootDeviceTypes;
    	      this.supportedUsagesClasses = defaults.supportedUsagesClasses;
    	      this.supportedVirtualizationTypes = defaults.supportedVirtualizationTypes;
    	      this.sustainedClockSpeed = defaults.sustainedClockSpeed;
    	      this.totalFpgaMemory = defaults.totalFpgaMemory;
    	      this.totalGpuMemory = defaults.totalGpuMemory;
    	      this.totalInstanceStorage = defaults.totalInstanceStorage;
    	      this.validCores = defaults.validCores;
    	      this.validThreadsPerCores = defaults.validThreadsPerCores;
        }

        public Builder autoRecoverySupported(Boolean autoRecoverySupported) {
            this.autoRecoverySupported = Objects.requireNonNull(autoRecoverySupported);
            return this;
        }
        public Builder bareMetal(Boolean bareMetal) {
            this.bareMetal = Objects.requireNonNull(bareMetal);
            return this;
        }
        public Builder burstablePerformanceSupported(Boolean burstablePerformanceSupported) {
            this.burstablePerformanceSupported = Objects.requireNonNull(burstablePerformanceSupported);
            return this;
        }
        public Builder currentGeneration(Boolean currentGeneration) {
            this.currentGeneration = Objects.requireNonNull(currentGeneration);
            return this;
        }
        public Builder dedicatedHostsSupported(Boolean dedicatedHostsSupported) {
            this.dedicatedHostsSupported = Objects.requireNonNull(dedicatedHostsSupported);
            return this;
        }
        public Builder defaultCores(Integer defaultCores) {
            this.defaultCores = Objects.requireNonNull(defaultCores);
            return this;
        }
        public Builder defaultThreadsPerCore(Integer defaultThreadsPerCore) {
            this.defaultThreadsPerCore = Objects.requireNonNull(defaultThreadsPerCore);
            return this;
        }
        public Builder defaultVcpus(Integer defaultVcpus) {
            this.defaultVcpus = Objects.requireNonNull(defaultVcpus);
            return this;
        }
        public Builder ebsEncryptionSupport(String ebsEncryptionSupport) {
            this.ebsEncryptionSupport = Objects.requireNonNull(ebsEncryptionSupport);
            return this;
        }
        public Builder ebsNvmeSupport(String ebsNvmeSupport) {
            this.ebsNvmeSupport = Objects.requireNonNull(ebsNvmeSupport);
            return this;
        }
        public Builder ebsOptimizedSupport(String ebsOptimizedSupport) {
            this.ebsOptimizedSupport = Objects.requireNonNull(ebsOptimizedSupport);
            return this;
        }
        public Builder ebsPerformanceBaselineBandwidth(Integer ebsPerformanceBaselineBandwidth) {
            this.ebsPerformanceBaselineBandwidth = Objects.requireNonNull(ebsPerformanceBaselineBandwidth);
            return this;
        }
        public Builder ebsPerformanceBaselineIops(Integer ebsPerformanceBaselineIops) {
            this.ebsPerformanceBaselineIops = Objects.requireNonNull(ebsPerformanceBaselineIops);
            return this;
        }
        public Builder ebsPerformanceBaselineThroughput(Double ebsPerformanceBaselineThroughput) {
            this.ebsPerformanceBaselineThroughput = Objects.requireNonNull(ebsPerformanceBaselineThroughput);
            return this;
        }
        public Builder ebsPerformanceMaximumBandwidth(Integer ebsPerformanceMaximumBandwidth) {
            this.ebsPerformanceMaximumBandwidth = Objects.requireNonNull(ebsPerformanceMaximumBandwidth);
            return this;
        }
        public Builder ebsPerformanceMaximumIops(Integer ebsPerformanceMaximumIops) {
            this.ebsPerformanceMaximumIops = Objects.requireNonNull(ebsPerformanceMaximumIops);
            return this;
        }
        public Builder ebsPerformanceMaximumThroughput(Double ebsPerformanceMaximumThroughput) {
            this.ebsPerformanceMaximumThroughput = Objects.requireNonNull(ebsPerformanceMaximumThroughput);
            return this;
        }
        public Builder efaSupported(Boolean efaSupported) {
            this.efaSupported = Objects.requireNonNull(efaSupported);
            return this;
        }
        public Builder enaSupport(String enaSupport) {
            this.enaSupport = Objects.requireNonNull(enaSupport);
            return this;
        }
        public Builder encryptionInTransitSupported(Boolean encryptionInTransitSupported) {
            this.encryptionInTransitSupported = Objects.requireNonNull(encryptionInTransitSupported);
            return this;
        }
        public Builder fpgas(List<GetInstanceTypeFpga> fpgas) {
            this.fpgas = Objects.requireNonNull(fpgas);
            return this;
        }
        public Builder fpgas(GetInstanceTypeFpga... fpgas) {
            return fpgas(List.of(fpgas));
        }
        public Builder freeTierEligible(Boolean freeTierEligible) {
            this.freeTierEligible = Objects.requireNonNull(freeTierEligible);
            return this;
        }
        public Builder gpuses(List<GetInstanceTypeGpus> gpuses) {
            this.gpuses = Objects.requireNonNull(gpuses);
            return this;
        }
        public Builder gpuses(GetInstanceTypeGpus... gpuses) {
            return gpuses(List.of(gpuses));
        }
        public Builder hibernationSupported(Boolean hibernationSupported) {
            this.hibernationSupported = Objects.requireNonNull(hibernationSupported);
            return this;
        }
        public Builder hypervisor(String hypervisor) {
            this.hypervisor = Objects.requireNonNull(hypervisor);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder inferenceAccelerators(List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators) {
            this.inferenceAccelerators = Objects.requireNonNull(inferenceAccelerators);
            return this;
        }
        public Builder inferenceAccelerators(GetInstanceTypeInferenceAccelerator... inferenceAccelerators) {
            return inferenceAccelerators(List.of(inferenceAccelerators));
        }
        public Builder instanceDisks(List<GetInstanceTypeInstanceDisk> instanceDisks) {
            this.instanceDisks = Objects.requireNonNull(instanceDisks);
            return this;
        }
        public Builder instanceDisks(GetInstanceTypeInstanceDisk... instanceDisks) {
            return instanceDisks(List.of(instanceDisks));
        }
        public Builder instanceStorageSupported(Boolean instanceStorageSupported) {
            this.instanceStorageSupported = Objects.requireNonNull(instanceStorageSupported);
            return this;
        }
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        public Builder ipv6Supported(Boolean ipv6Supported) {
            this.ipv6Supported = Objects.requireNonNull(ipv6Supported);
            return this;
        }
        public Builder maximumIpv4AddressesPerInterface(Integer maximumIpv4AddressesPerInterface) {
            this.maximumIpv4AddressesPerInterface = Objects.requireNonNull(maximumIpv4AddressesPerInterface);
            return this;
        }
        public Builder maximumIpv6AddressesPerInterface(Integer maximumIpv6AddressesPerInterface) {
            this.maximumIpv6AddressesPerInterface = Objects.requireNonNull(maximumIpv6AddressesPerInterface);
            return this;
        }
        public Builder maximumNetworkInterfaces(Integer maximumNetworkInterfaces) {
            this.maximumNetworkInterfaces = Objects.requireNonNull(maximumNetworkInterfaces);
            return this;
        }
        public Builder memorySize(Integer memorySize) {
            this.memorySize = Objects.requireNonNull(memorySize);
            return this;
        }
        public Builder networkPerformance(String networkPerformance) {
            this.networkPerformance = Objects.requireNonNull(networkPerformance);
            return this;
        }
        public Builder supportedArchitectures(List<String> supportedArchitectures) {
            this.supportedArchitectures = Objects.requireNonNull(supportedArchitectures);
            return this;
        }
        public Builder supportedArchitectures(String... supportedArchitectures) {
            return supportedArchitectures(List.of(supportedArchitectures));
        }
        public Builder supportedPlacementStrategies(List<String> supportedPlacementStrategies) {
            this.supportedPlacementStrategies = Objects.requireNonNull(supportedPlacementStrategies);
            return this;
        }
        public Builder supportedPlacementStrategies(String... supportedPlacementStrategies) {
            return supportedPlacementStrategies(List.of(supportedPlacementStrategies));
        }
        public Builder supportedRootDeviceTypes(List<String> supportedRootDeviceTypes) {
            this.supportedRootDeviceTypes = Objects.requireNonNull(supportedRootDeviceTypes);
            return this;
        }
        public Builder supportedRootDeviceTypes(String... supportedRootDeviceTypes) {
            return supportedRootDeviceTypes(List.of(supportedRootDeviceTypes));
        }
        public Builder supportedUsagesClasses(List<String> supportedUsagesClasses) {
            this.supportedUsagesClasses = Objects.requireNonNull(supportedUsagesClasses);
            return this;
        }
        public Builder supportedUsagesClasses(String... supportedUsagesClasses) {
            return supportedUsagesClasses(List.of(supportedUsagesClasses));
        }
        public Builder supportedVirtualizationTypes(List<String> supportedVirtualizationTypes) {
            this.supportedVirtualizationTypes = Objects.requireNonNull(supportedVirtualizationTypes);
            return this;
        }
        public Builder supportedVirtualizationTypes(String... supportedVirtualizationTypes) {
            return supportedVirtualizationTypes(List.of(supportedVirtualizationTypes));
        }
        public Builder sustainedClockSpeed(Double sustainedClockSpeed) {
            this.sustainedClockSpeed = Objects.requireNonNull(sustainedClockSpeed);
            return this;
        }
        public Builder totalFpgaMemory(Integer totalFpgaMemory) {
            this.totalFpgaMemory = Objects.requireNonNull(totalFpgaMemory);
            return this;
        }
        public Builder totalGpuMemory(Integer totalGpuMemory) {
            this.totalGpuMemory = Objects.requireNonNull(totalGpuMemory);
            return this;
        }
        public Builder totalInstanceStorage(Integer totalInstanceStorage) {
            this.totalInstanceStorage = Objects.requireNonNull(totalInstanceStorage);
            return this;
        }
        public Builder validCores(List<Integer> validCores) {
            this.validCores = Objects.requireNonNull(validCores);
            return this;
        }
        public Builder validCores(Integer... validCores) {
            return validCores(List.of(validCores));
        }
        public Builder validThreadsPerCores(List<Integer> validThreadsPerCores) {
            this.validThreadsPerCores = Objects.requireNonNull(validThreadsPerCores);
            return this;
        }
        public Builder validThreadsPerCores(Integer... validThreadsPerCores) {
            return validThreadsPerCores(List.of(validThreadsPerCores));
        }        public GetInstanceTypeResult build() {
            return new GetInstanceTypeResult(autoRecoverySupported, bareMetal, burstablePerformanceSupported, currentGeneration, dedicatedHostsSupported, defaultCores, defaultThreadsPerCore, defaultVcpus, ebsEncryptionSupport, ebsNvmeSupport, ebsOptimizedSupport, ebsPerformanceBaselineBandwidth, ebsPerformanceBaselineIops, ebsPerformanceBaselineThroughput, ebsPerformanceMaximumBandwidth, ebsPerformanceMaximumIops, ebsPerformanceMaximumThroughput, efaSupported, enaSupport, encryptionInTransitSupported, fpgas, freeTierEligible, gpuses, hibernationSupported, hypervisor, id, inferenceAccelerators, instanceDisks, instanceStorageSupported, instanceType, ipv6Supported, maximumIpv4AddressesPerInterface, maximumIpv6AddressesPerInterface, maximumNetworkInterfaces, memorySize, networkPerformance, supportedArchitectures, supportedPlacementStrategies, supportedRootDeviceTypes, supportedUsagesClasses, supportedVirtualizationTypes, sustainedClockSpeed, totalFpgaMemory, totalGpuMemory, totalInstanceStorage, validCores, validThreadsPerCores);
        }
    }
}
