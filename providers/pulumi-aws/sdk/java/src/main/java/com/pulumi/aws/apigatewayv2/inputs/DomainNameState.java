// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigatewayv2.inputs;

import com.pulumi.aws.apigatewayv2.inputs.DomainNameDomainNameConfigurationArgs;
import com.pulumi.aws.apigatewayv2.inputs.DomainNameMutualTlsAuthenticationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainNameState extends com.pulumi.resources.ResourceArgs {

    public static final DomainNameState Empty = new DomainNameState();

    /**
     * The [API mapping selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-mapping-selection-expressions) for the domain name.
     * 
     */
    @Import(name="apiMappingSelectionExpression")
    private @Nullable Output<String> apiMappingSelectionExpression;

    /**
     * @return The [API mapping selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-mapping-selection-expressions) for the domain name.
     * 
     */
    public Optional<Output<String>> apiMappingSelectionExpression() {
        return Optional.ofNullable(this.apiMappingSelectionExpression);
    }

    /**
     * The ARN of the domain name.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the domain name.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The domain name. Must be between 1 and 512 characters in length.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return The domain name. Must be between 1 and 512 characters in length.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * The domain name configuration.
     * 
     */
    @Import(name="domainNameConfiguration")
    private @Nullable Output<DomainNameDomainNameConfigurationArgs> domainNameConfiguration;

    /**
     * @return The domain name configuration.
     * 
     */
    public Optional<Output<DomainNameDomainNameConfigurationArgs>> domainNameConfiguration() {
        return Optional.ofNullable(this.domainNameConfiguration);
    }

    /**
     * The mutual TLS authentication configuration for the domain name.
     * 
     */
    @Import(name="mutualTlsAuthentication")
    private @Nullable Output<DomainNameMutualTlsAuthenticationArgs> mutualTlsAuthentication;

    /**
     * @return The mutual TLS authentication configuration for the domain name.
     * 
     */
    public Optional<Output<DomainNameMutualTlsAuthenticationArgs>> mutualTlsAuthentication() {
        return Optional.ofNullable(this.mutualTlsAuthentication);
    }

    /**
     * A map of tags to assign to the domain name. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the domain name. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private DomainNameState() {}

    private DomainNameState(DomainNameState $) {
        this.apiMappingSelectionExpression = $.apiMappingSelectionExpression;
        this.arn = $.arn;
        this.domainName = $.domainName;
        this.domainNameConfiguration = $.domainNameConfiguration;
        this.mutualTlsAuthentication = $.mutualTlsAuthentication;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainNameState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainNameState $;

        public Builder() {
            $ = new DomainNameState();
        }

        public Builder(DomainNameState defaults) {
            $ = new DomainNameState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiMappingSelectionExpression The [API mapping selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-mapping-selection-expressions) for the domain name.
         * 
         * @return builder
         * 
         */
        public Builder apiMappingSelectionExpression(@Nullable Output<String> apiMappingSelectionExpression) {
            $.apiMappingSelectionExpression = apiMappingSelectionExpression;
            return this;
        }

        /**
         * @param apiMappingSelectionExpression The [API mapping selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-mapping-selection-expressions) for the domain name.
         * 
         * @return builder
         * 
         */
        public Builder apiMappingSelectionExpression(String apiMappingSelectionExpression) {
            return apiMappingSelectionExpression(Output.of(apiMappingSelectionExpression));
        }

        /**
         * @param arn The ARN of the domain name.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the domain name.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param domainName The domain name. Must be between 1 and 512 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The domain name. Must be between 1 and 512 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainNameConfiguration The domain name configuration.
         * 
         * @return builder
         * 
         */
        public Builder domainNameConfiguration(@Nullable Output<DomainNameDomainNameConfigurationArgs> domainNameConfiguration) {
            $.domainNameConfiguration = domainNameConfiguration;
            return this;
        }

        /**
         * @param domainNameConfiguration The domain name configuration.
         * 
         * @return builder
         * 
         */
        public Builder domainNameConfiguration(DomainNameDomainNameConfigurationArgs domainNameConfiguration) {
            return domainNameConfiguration(Output.of(domainNameConfiguration));
        }

        /**
         * @param mutualTlsAuthentication The mutual TLS authentication configuration for the domain name.
         * 
         * @return builder
         * 
         */
        public Builder mutualTlsAuthentication(@Nullable Output<DomainNameMutualTlsAuthenticationArgs> mutualTlsAuthentication) {
            $.mutualTlsAuthentication = mutualTlsAuthentication;
            return this;
        }

        /**
         * @param mutualTlsAuthentication The mutual TLS authentication configuration for the domain name.
         * 
         * @return builder
         * 
         */
        public Builder mutualTlsAuthentication(DomainNameMutualTlsAuthenticationArgs mutualTlsAuthentication) {
            return mutualTlsAuthentication(Output.of(mutualTlsAuthentication));
        }

        /**
         * @param tags A map of tags to assign to the domain name. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the domain name. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider .
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider .
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public DomainNameState build() {
            return $;
        }
    }

}
