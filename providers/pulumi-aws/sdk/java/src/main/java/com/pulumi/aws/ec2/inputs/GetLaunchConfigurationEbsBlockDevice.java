// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetLaunchConfigurationEbsBlockDevice extends com.pulumi.resources.InvokeArgs {

    public static final GetLaunchConfigurationEbsBlockDevice Empty = new GetLaunchConfigurationEbsBlockDevice();

    /**
     * Whether the EBS Volume will be deleted on instance termination.
     * 
     */
    @Import(name="deleteOnTermination", required=true)
    private Boolean deleteOnTermination;

    public Boolean deleteOnTermination() {
        return this.deleteOnTermination;
    }

    /**
     * The Name of the device.
     * 
     */
    @Import(name="deviceName", required=true)
    private String deviceName;

    public String deviceName() {
        return this.deviceName;
    }

    /**
     * Whether the volume is Encrypted.
     * 
     */
    @Import(name="encrypted", required=true)
    private Boolean encrypted;

    public Boolean encrypted() {
        return this.encrypted;
    }

    /**
     * The provisioned IOPs of the volume.
     * 
     */
    @Import(name="iops", required=true)
    private Integer iops;

    public Integer iops() {
        return this.iops;
    }

    /**
     * Whether the device in the block device mapping of the AMI is suppressed.
     * 
     */
    @Import(name="noDevice", required=true)
    private Boolean noDevice;

    public Boolean noDevice() {
        return this.noDevice;
    }

    /**
     * The Snapshot ID of the mount.
     * 
     */
    @Import(name="snapshotId", required=true)
    private String snapshotId;

    public String snapshotId() {
        return this.snapshotId;
    }

    /**
     * The Throughput of the volume.
     * 
     */
    @Import(name="throughput", required=true)
    private Boolean throughput;

    public Boolean throughput() {
        return this.throughput;
    }

    /**
     * The Size of the volume.
     * 
     */
    @Import(name="volumeSize", required=true)
    private Integer volumeSize;

    public Integer volumeSize() {
        return this.volumeSize;
    }

    /**
     * The Type of the volume.
     * 
     */
    @Import(name="volumeType", required=true)
    private String volumeType;

    public String volumeType() {
        return this.volumeType;
    }

    private GetLaunchConfigurationEbsBlockDevice() {}

    private GetLaunchConfigurationEbsBlockDevice(GetLaunchConfigurationEbsBlockDevice $) {
        this.deleteOnTermination = $.deleteOnTermination;
        this.deviceName = $.deviceName;
        this.encrypted = $.encrypted;
        this.iops = $.iops;
        this.noDevice = $.noDevice;
        this.snapshotId = $.snapshotId;
        this.throughput = $.throughput;
        this.volumeSize = $.volumeSize;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLaunchConfigurationEbsBlockDevice defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLaunchConfigurationEbsBlockDevice $;

        public Builder() {
            $ = new GetLaunchConfigurationEbsBlockDevice();
        }

        public Builder(GetLaunchConfigurationEbsBlockDevice defaults) {
            $ = new GetLaunchConfigurationEbsBlockDevice(Objects.requireNonNull(defaults));
        }

        public Builder deleteOnTermination(Boolean deleteOnTermination) {
            $.deleteOnTermination = deleteOnTermination;
            return this;
        }

        public Builder deviceName(String deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        public Builder encrypted(Boolean encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        public Builder iops(Integer iops) {
            $.iops = iops;
            return this;
        }

        public Builder noDevice(Boolean noDevice) {
            $.noDevice = noDevice;
            return this;
        }

        public Builder snapshotId(String snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        public Builder throughput(Boolean throughput) {
            $.throughput = throughput;
            return this;
        }

        public Builder volumeSize(Integer volumeSize) {
            $.volumeSize = volumeSize;
            return this;
        }

        public Builder volumeType(String volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        public GetLaunchConfigurationEbsBlockDevice build() {
            $.deleteOnTermination = Objects.requireNonNull($.deleteOnTermination, "expected parameter 'deleteOnTermination' to be non-null");
            $.deviceName = Objects.requireNonNull($.deviceName, "expected parameter 'deviceName' to be non-null");
            $.encrypted = Objects.requireNonNull($.encrypted, "expected parameter 'encrypted' to be non-null");
            $.iops = Objects.requireNonNull($.iops, "expected parameter 'iops' to be non-null");
            $.noDevice = Objects.requireNonNull($.noDevice, "expected parameter 'noDevice' to be non-null");
            $.snapshotId = Objects.requireNonNull($.snapshotId, "expected parameter 'snapshotId' to be non-null");
            $.throughput = Objects.requireNonNull($.throughput, "expected parameter 'throughput' to be non-null");
            $.volumeSize = Objects.requireNonNull($.volumeSize, "expected parameter 'volumeSize' to be non-null");
            $.volumeType = Objects.requireNonNull($.volumeType, "expected parameter 'volumeType' to be non-null");
            return $;
        }
    }

}
