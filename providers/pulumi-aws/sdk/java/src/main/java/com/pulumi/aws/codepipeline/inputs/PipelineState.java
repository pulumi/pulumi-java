// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.inputs;

import com.pulumi.aws.codepipeline.inputs.PipelineArtifactStoreGetArgs;
import com.pulumi.aws.codepipeline.inputs.PipelineStageGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineState extends com.pulumi.resources.ResourceArgs {

    public static final PipelineState Empty = new PipelineState();

    /**
     * The codepipeline ARN.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * One or more artifact_store blocks. Artifact stores are documented below.
     * 
     */
    @Import(name="artifactStore")
    private @Nullable Output<PipelineArtifactStoreGetArgs> artifactStore;

    public Optional<Output<PipelineArtifactStoreGetArgs>> artifactStore() {
        return Optional.ofNullable(this.artifactStore);
    }

    /**
     * The name of the pipeline.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * A stage block. Stages are documented below.
     * 
     */
    @Import(name="stages")
    private @Nullable Output<List<PipelineStageGetArgs>> stages;

    public Optional<Output<List<PipelineStageGetArgs>>> stages() {
        return Optional.ofNullable(this.stages);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private PipelineState() {}

    private PipelineState(PipelineState $) {
        this.arn = $.arn;
        this.artifactStore = $.artifactStore;
        this.name = $.name;
        this.roleArn = $.roleArn;
        this.stages = $.stages;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineState $;

        public Builder() {
            $ = new PipelineState();
        }

        public Builder(PipelineState defaults) {
            $ = new PipelineState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder artifactStore(@Nullable Output<PipelineArtifactStoreGetArgs> artifactStore) {
            $.artifactStore = artifactStore;
            return this;
        }

        public Builder artifactStore(PipelineArtifactStoreGetArgs artifactStore) {
            return artifactStore(Output.of(artifactStore));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder stages(@Nullable Output<List<PipelineStageGetArgs>> stages) {
            $.stages = stages;
            return this;
        }

        public Builder stages(List<PipelineStageGetArgs> stages) {
            return stages(Output.of(stages));
        }

        public Builder stages(PipelineStageGetArgs... stages) {
            return stages(List.of(stages));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public PipelineState build() {
            return $;
        }
    }

}
