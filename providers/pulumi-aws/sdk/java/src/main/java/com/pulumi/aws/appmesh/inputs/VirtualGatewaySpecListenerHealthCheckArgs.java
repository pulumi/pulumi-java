// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualGatewaySpecListenerHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualGatewaySpecListenerHealthCheckArgs Empty = new VirtualGatewaySpecListenerHealthCheckArgs();

    /**
     * The number of consecutive successful health checks that must occur before declaring listener healthy.
     * 
     */
    @Import(name="healthyThreshold", required=true)
    private Output<Integer> healthyThreshold;

    public Output<Integer> healthyThreshold() {
        return this.healthyThreshold;
    }

    /**
     * The time period in milliseconds between each health check execution.
     * 
     */
    @Import(name="intervalMillis", required=true)
    private Output<Integer> intervalMillis;

    public Output<Integer> intervalMillis() {
        return this.intervalMillis;
    }

    /**
     * The destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The protocol for the health check request. Valid values are `http`, `http2`, and `grpc`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * The amount of time to wait when receiving a response from the health check, in milliseconds.
     * 
     */
    @Import(name="timeoutMillis", required=true)
    private Output<Integer> timeoutMillis;

    public Output<Integer> timeoutMillis() {
        return this.timeoutMillis;
    }

    /**
     * The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
     * 
     */
    @Import(name="unhealthyThreshold", required=true)
    private Output<Integer> unhealthyThreshold;

    public Output<Integer> unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    private VirtualGatewaySpecListenerHealthCheckArgs() {}

    private VirtualGatewaySpecListenerHealthCheckArgs(VirtualGatewaySpecListenerHealthCheckArgs $) {
        this.healthyThreshold = $.healthyThreshold;
        this.intervalMillis = $.intervalMillis;
        this.path = $.path;
        this.port = $.port;
        this.protocol = $.protocol;
        this.timeoutMillis = $.timeoutMillis;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualGatewaySpecListenerHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualGatewaySpecListenerHealthCheckArgs $;

        public Builder() {
            $ = new VirtualGatewaySpecListenerHealthCheckArgs();
        }

        public Builder(VirtualGatewaySpecListenerHealthCheckArgs defaults) {
            $ = new VirtualGatewaySpecListenerHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        public Builder healthyThreshold(Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        public Builder intervalMillis(Output<Integer> intervalMillis) {
            $.intervalMillis = intervalMillis;
            return this;
        }

        public Builder intervalMillis(Integer intervalMillis) {
            return intervalMillis(Output.of(intervalMillis));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder timeoutMillis(Output<Integer> timeoutMillis) {
            $.timeoutMillis = timeoutMillis;
            return this;
        }

        public Builder timeoutMillis(Integer timeoutMillis) {
            return timeoutMillis(Output.of(timeoutMillis));
        }

        public Builder unhealthyThreshold(Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        public VirtualGatewaySpecListenerHealthCheckArgs build() {
            $.healthyThreshold = Objects.requireNonNull($.healthyThreshold, "expected parameter 'healthyThreshold' to be non-null");
            $.intervalMillis = Objects.requireNonNull($.intervalMillis, "expected parameter 'intervalMillis' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.timeoutMillis = Objects.requireNonNull($.timeoutMillis, "expected parameter 'timeoutMillis' to be non-null");
            $.unhealthyThreshold = Objects.requireNonNull($.unhealthyThreshold, "expected parameter 'unhealthyThreshold' to be non-null");
            return $;
        }
    }

}
