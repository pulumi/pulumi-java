// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appconfig;

import com.pulumi.aws.appconfig.inputs.ConfigurationProfileValidatorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConfigurationProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationProfileArgs Empty = new ConfigurationProfileArgs();

    /**
     * The application ID. Must be between 4 and 7 characters in length.
     * 
     */
    @Import(name="applicationId", required=true)
      private final Output<String> applicationId;

    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * The description of the configuration profile. Can be at most 1024 characters.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store, specify `hosted`. For an SSM document, specify either the document name in the format `ssm-document://&lt;Document_name&gt;` or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format `ssm-parameter://&lt;Parameter_name&gt;` or the ARN. For an Amazon S3 object, specify the URI in the following format: `s3://&lt;bucket&gt;/&lt;objectKey&gt;`.
     * 
     */
    @Import(name="locationUri", required=true)
      private final Output<String> locationUri;

    public Output<String> locationUri() {
        return this.locationUri;
    }

    /**
     * The name for the configuration profile. Must be between 1 and 64 characters in length.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ARN of an IAM role with permission to access the configuration at the specified `location_uri`. A retrieval role ARN is not required for configurations stored in the AWS AppConfig `hosted` configuration store. It is required for all other sources that store your configuration.
     * 
     */
    @Import(name="retrievalRoleArn")
      private final @Nullable Output<String> retrievalRoleArn;

    public Output<String> retrievalRoleArn() {
        return this.retrievalRoleArn == null ? Codegen.empty() : this.retrievalRoleArn;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A set of methods for validating the configuration. Maximum of 2. See Validator below for more details.
     * 
     */
    @Import(name="validators")
      private final @Nullable Output<List<ConfigurationProfileValidatorArgs>> validators;

    public Output<List<ConfigurationProfileValidatorArgs>> validators() {
        return this.validators == null ? Codegen.empty() : this.validators;
    }

    public ConfigurationProfileArgs(
        Output<String> applicationId,
        @Nullable Output<String> description,
        Output<String> locationUri,
        @Nullable Output<String> name,
        @Nullable Output<String> retrievalRoleArn,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<List<ConfigurationProfileValidatorArgs>> validators) {
        this.applicationId = Objects.requireNonNull(applicationId, "expected parameter 'applicationId' to be non-null");
        this.description = description;
        this.locationUri = Objects.requireNonNull(locationUri, "expected parameter 'locationUri' to be non-null");
        this.name = name;
        this.retrievalRoleArn = retrievalRoleArn;
        this.tags = tags;
        this.validators = validators;
    }

    private ConfigurationProfileArgs() {
        this.applicationId = Codegen.empty();
        this.description = Codegen.empty();
        this.locationUri = Codegen.empty();
        this.name = Codegen.empty();
        this.retrievalRoleArn = Codegen.empty();
        this.tags = Codegen.empty();
        this.validators = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> applicationId;
        private @Nullable Output<String> description;
        private Output<String> locationUri;
        private @Nullable Output<String> name;
        private @Nullable Output<String> retrievalRoleArn;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<List<ConfigurationProfileValidatorArgs>> validators;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigurationProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.description = defaults.description;
    	      this.locationUri = defaults.locationUri;
    	      this.name = defaults.name;
    	      this.retrievalRoleArn = defaults.retrievalRoleArn;
    	      this.tags = defaults.tags;
    	      this.validators = defaults.validators;
        }

        public Builder applicationId(Output<String> applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }
        public Builder applicationId(String applicationId) {
            this.applicationId = Output.of(Objects.requireNonNull(applicationId));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder locationUri(Output<String> locationUri) {
            this.locationUri = Objects.requireNonNull(locationUri);
            return this;
        }
        public Builder locationUri(String locationUri) {
            this.locationUri = Output.of(Objects.requireNonNull(locationUri));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder retrievalRoleArn(@Nullable Output<String> retrievalRoleArn) {
            this.retrievalRoleArn = retrievalRoleArn;
            return this;
        }
        public Builder retrievalRoleArn(@Nullable String retrievalRoleArn) {
            this.retrievalRoleArn = Codegen.ofNullable(retrievalRoleArn);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder validators(@Nullable Output<List<ConfigurationProfileValidatorArgs>> validators) {
            this.validators = validators;
            return this;
        }
        public Builder validators(@Nullable List<ConfigurationProfileValidatorArgs> validators) {
            this.validators = Codegen.ofNullable(validators);
            return this;
        }
        public Builder validators(ConfigurationProfileValidatorArgs... validators) {
            return validators(List.of(validators));
        }        public ConfigurationProfileArgs build() {
            return new ConfigurationProfileArgs(applicationId, description, locationUri, name, retrievalRoleArn, tags, validators);
        }
    }
}
