// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.aws.ec2.inputs.GetInstanceTypeFpga;
import com.pulumi.aws.ec2.inputs.GetInstanceTypeGpus;
import com.pulumi.aws.ec2.inputs.GetInstanceTypeInferenceAccelerator;
import com.pulumi.aws.ec2.inputs.GetInstanceTypeInstanceDisk;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetInstanceTypeArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInstanceTypeArgs Empty = new GetInstanceTypeArgs();

    /**
     * The default number of cores for the instance type.
     * 
     */
    @Import(name="defaultCores")
    private Output</* @Nullable */ Integer> defaultCores;

    /**
     * @return The default number of cores for the instance type.
     * 
     */
    public Output</* @Nullable */ Integer> defaultCores() {
        return this.defaultCores;
    }

    /**
     * The  default  number of threads per core for the instance type.
     * 
     */
    @Import(name="defaultThreadsPerCore")
    private Output</* @Nullable */ Integer> defaultThreadsPerCore;

    /**
     * @return The  default  number of threads per core for the instance type.
     * 
     */
    public Output</* @Nullable */ Integer> defaultThreadsPerCore() {
        return this.defaultThreadsPerCore;
    }

    /**
     * Describes the FPGA accelerator settings for the instance type.
     * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
     * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
     * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
     * * `fpgas.#.name` - The name of the FPGA accelerator.
     * 
     */
    @Import(name="fpgas")
    private Output</* @Nullable */ List<GetInstanceTypeFpga>> fpgas;

    /**
     * @return Describes the FPGA accelerator settings for the instance type.
     * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
     * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
     * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
     * * `fpgas.#.name` - The name of the FPGA accelerator.
     * 
     */
    public Output</* @Nullable */ List<GetInstanceTypeFpga>> fpgas() {
        return this.fpgas;
    }

    /**
     * Describes the GPU accelerators for the instance type.
     * * `gpus.#.count` - The number of GPUs for the instance type.
     * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
     * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
     * * `gpus.#.name` - The name of the GPU accelerator.
     * 
     */
    @Import(name="gpuses")
    private Output</* @Nullable */ List<GetInstanceTypeGpus>> gpuses;

    /**
     * @return Describes the GPU accelerators for the instance type.
     * * `gpus.#.count` - The number of GPUs for the instance type.
     * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
     * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
     * * `gpus.#.name` - The name of the GPU accelerator.
     * 
     */
    public Output</* @Nullable */ List<GetInstanceTypeGpus>> gpuses() {
        return this.gpuses;
    }

    /**
     * Indicates the hypervisor used for the instance type.
     * * `inference_accelerators` Describes the Inference accelerators for the instance type.
     * * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
     * * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
     * * `inference_accelerators.#.name` - The name of the Inference accelerator.
     * 
     */
    @Import(name="hypervisor")
    private Output</* @Nullable */ String> hypervisor;

    /**
     * @return Indicates the hypervisor used for the instance type.
     * * `inference_accelerators` Describes the Inference accelerators for the instance type.
     * * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
     * * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
     * * `inference_accelerators.#.name` - The name of the Inference accelerator.
     * 
     */
    public Output</* @Nullable */ String> hypervisor() {
        return this.hypervisor;
    }

    @Import(name="inferenceAccelerators")
    private Output</* @Nullable */ List<GetInstanceTypeInferenceAccelerator>> inferenceAccelerators;

    public Output</* @Nullable */ List<GetInstanceTypeInferenceAccelerator>> inferenceAccelerators() {
        return this.inferenceAccelerators;
    }

    /**
     * Describes the disks for the instance type.
     * * `instance_disks.#.count` - The number of disks with this configuration.
     * * `instance_disks.#.size` - The size of the disk in GB.
     * * `instance_disks.#.type` - The type of disk.
     * 
     */
    @Import(name="instanceDisks")
    private Output</* @Nullable */ List<GetInstanceTypeInstanceDisk>> instanceDisks;

    /**
     * @return Describes the disks for the instance type.
     * * `instance_disks.#.count` - The number of disks with this configuration.
     * * `instance_disks.#.size` - The size of the disk in GB.
     * * `instance_disks.#.type` - The type of disk.
     * 
     */
    public Output</* @Nullable */ List<GetInstanceTypeInstanceDisk>> instanceDisks() {
        return this.instanceDisks;
    }

    /**
     * Instance
     * 
     */
    @Import(name="instanceType", required=true)
    private Output<String> instanceType;

    /**
     * @return Instance
     * 
     */
    public Output<String> instanceType() {
        return this.instanceType;
    }

    /**
     * The maximum number of IPv6 addresses per network interface.
     * 
     */
    @Import(name="maximumIpv6AddressesPerInterface")
    private Output</* @Nullable */ Integer> maximumIpv6AddressesPerInterface;

    /**
     * @return The maximum number of IPv6 addresses per network interface.
     * 
     */
    public Output</* @Nullable */ Integer> maximumIpv6AddressesPerInterface() {
        return this.maximumIpv6AddressesPerInterface;
    }

    /**
     * The total memory of all FPGA accelerators for the instance type (in MiB).
     * 
     */
    @Import(name="totalFpgaMemory")
    private Output</* @Nullable */ Integer> totalFpgaMemory;

    /**
     * @return The total memory of all FPGA accelerators for the instance type (in MiB).
     * 
     */
    public Output</* @Nullable */ Integer> totalFpgaMemory() {
        return this.totalFpgaMemory;
    }

    /**
     * The total size of the memory for the GPU accelerators for the instance type (in MiB).
     * 
     */
    @Import(name="totalGpuMemory")
    private Output</* @Nullable */ Integer> totalGpuMemory;

    /**
     * @return The total size of the memory for the GPU accelerators for the instance type (in MiB).
     * 
     */
    public Output</* @Nullable */ Integer> totalGpuMemory() {
        return this.totalGpuMemory;
    }

    /**
     * The total size of the instance disks, in GB.
     * 
     */
    @Import(name="totalInstanceStorage")
    private Output</* @Nullable */ Integer> totalInstanceStorage;

    /**
     * @return The total size of the instance disks, in GB.
     * 
     */
    public Output</* @Nullable */ Integer> totalInstanceStorage() {
        return this.totalInstanceStorage;
    }

    private GetInstanceTypeArgs() {}

    private GetInstanceTypeArgs(GetInstanceTypeArgs $) {
        this.defaultCores = $.defaultCores;
        this.defaultThreadsPerCore = $.defaultThreadsPerCore;
        this.fpgas = $.fpgas;
        this.gpuses = $.gpuses;
        this.hypervisor = $.hypervisor;
        this.inferenceAccelerators = $.inferenceAccelerators;
        this.instanceDisks = $.instanceDisks;
        this.instanceType = $.instanceType;
        this.maximumIpv6AddressesPerInterface = $.maximumIpv6AddressesPerInterface;
        this.totalFpgaMemory = $.totalFpgaMemory;
        this.totalGpuMemory = $.totalGpuMemory;
        this.totalInstanceStorage = $.totalInstanceStorage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceTypeArgs $;

        public Builder() {
            $ = new GetInstanceTypeArgs();
        }

        public Builder(GetInstanceTypeArgs defaults) {
            $ = new GetInstanceTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultCores The default number of cores for the instance type.
         * 
         * @return builder
         * 
         */
        public Builder defaultCores(Output</* @Nullable */ Integer> defaultCores) {
            $.defaultCores = defaultCores;
            return this;
        }

        /**
         * @param defaultCores The default number of cores for the instance type.
         * 
         * @return builder
         * 
         */
        public Builder defaultCores(@Nullable Integer defaultCores) {
            return defaultCores(Output.of(defaultCores));
        }

        /**
         * @param defaultThreadsPerCore The  default  number of threads per core for the instance type.
         * 
         * @return builder
         * 
         */
        public Builder defaultThreadsPerCore(Output</* @Nullable */ Integer> defaultThreadsPerCore) {
            $.defaultThreadsPerCore = defaultThreadsPerCore;
            return this;
        }

        /**
         * @param defaultThreadsPerCore The  default  number of threads per core for the instance type.
         * 
         * @return builder
         * 
         */
        public Builder defaultThreadsPerCore(@Nullable Integer defaultThreadsPerCore) {
            return defaultThreadsPerCore(Output.of(defaultThreadsPerCore));
        }

        /**
         * @param fpgas Describes the FPGA accelerator settings for the instance type.
         * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
         * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
         * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
         * * `fpgas.#.name` - The name of the FPGA accelerator.
         * 
         * @return builder
         * 
         */
        public Builder fpgas(Output</* @Nullable */ List<GetInstanceTypeFpga>> fpgas) {
            $.fpgas = fpgas;
            return this;
        }

        /**
         * @param fpgas Describes the FPGA accelerator settings for the instance type.
         * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
         * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
         * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
         * * `fpgas.#.name` - The name of the FPGA accelerator.
         * 
         * @return builder
         * 
         */
        public Builder fpgas(@Nullable List<GetInstanceTypeFpga> fpgas) {
            return fpgas(Output.of(fpgas));
        }

        /**
         * @param fpgas Describes the FPGA accelerator settings for the instance type.
         * * `fpgas.#.count` - The count of FPGA accelerators for the instance type.
         * * `fpgas.#.manufacturer` - The manufacturer of the FPGA accelerator.
         * * `fpgas.#.memory_size` - The size (in MiB) for the memory available to the FPGA accelerator.
         * * `fpgas.#.name` - The name of the FPGA accelerator.
         * 
         * @return builder
         * 
         */
        public Builder fpgas(GetInstanceTypeFpga... fpgas) {
            return fpgas(List.of(fpgas));
        }

        /**
         * @param gpuses Describes the GPU accelerators for the instance type.
         * * `gpus.#.count` - The number of GPUs for the instance type.
         * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
         * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
         * * `gpus.#.name` - The name of the GPU accelerator.
         * 
         * @return builder
         * 
         */
        public Builder gpuses(Output</* @Nullable */ List<GetInstanceTypeGpus>> gpuses) {
            $.gpuses = gpuses;
            return this;
        }

        /**
         * @param gpuses Describes the GPU accelerators for the instance type.
         * * `gpus.#.count` - The number of GPUs for the instance type.
         * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
         * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
         * * `gpus.#.name` - The name of the GPU accelerator.
         * 
         * @return builder
         * 
         */
        public Builder gpuses(@Nullable List<GetInstanceTypeGpus> gpuses) {
            return gpuses(Output.of(gpuses));
        }

        /**
         * @param gpuses Describes the GPU accelerators for the instance type.
         * * `gpus.#.count` - The number of GPUs for the instance type.
         * * `gpus.#.manufacturer` - The manufacturer of the GPU accelerator.
         * * `gpus.#.memory_size` - The size (in MiB) for the memory available to the GPU accelerator.
         * * `gpus.#.name` - The name of the GPU accelerator.
         * 
         * @return builder
         * 
         */
        public Builder gpuses(GetInstanceTypeGpus... gpuses) {
            return gpuses(List.of(gpuses));
        }

        /**
         * @param hypervisor Indicates the hypervisor used for the instance type.
         * * `inference_accelerators` Describes the Inference accelerators for the instance type.
         * * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
         * * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
         * * `inference_accelerators.#.name` - The name of the Inference accelerator.
         * 
         * @return builder
         * 
         */
        public Builder hypervisor(Output</* @Nullable */ String> hypervisor) {
            $.hypervisor = hypervisor;
            return this;
        }

        /**
         * @param hypervisor Indicates the hypervisor used for the instance type.
         * * `inference_accelerators` Describes the Inference accelerators for the instance type.
         * * `inference_accelerators.#.count` - The number of Inference accelerators for the instance type.
         * * `inference_accelerators.#.manufacturer` - The manufacturer of the Inference accelerator.
         * * `inference_accelerators.#.name` - The name of the Inference accelerator.
         * 
         * @return builder
         * 
         */
        public Builder hypervisor(@Nullable String hypervisor) {
            return hypervisor(Output.of(hypervisor));
        }

        public Builder inferenceAccelerators(Output</* @Nullable */ List<GetInstanceTypeInferenceAccelerator>> inferenceAccelerators) {
            $.inferenceAccelerators = inferenceAccelerators;
            return this;
        }

        public Builder inferenceAccelerators(@Nullable List<GetInstanceTypeInferenceAccelerator> inferenceAccelerators) {
            return inferenceAccelerators(Output.of(inferenceAccelerators));
        }

        public Builder inferenceAccelerators(GetInstanceTypeInferenceAccelerator... inferenceAccelerators) {
            return inferenceAccelerators(List.of(inferenceAccelerators));
        }

        /**
         * @param instanceDisks Describes the disks for the instance type.
         * * `instance_disks.#.count` - The number of disks with this configuration.
         * * `instance_disks.#.size` - The size of the disk in GB.
         * * `instance_disks.#.type` - The type of disk.
         * 
         * @return builder
         * 
         */
        public Builder instanceDisks(Output</* @Nullable */ List<GetInstanceTypeInstanceDisk>> instanceDisks) {
            $.instanceDisks = instanceDisks;
            return this;
        }

        /**
         * @param instanceDisks Describes the disks for the instance type.
         * * `instance_disks.#.count` - The number of disks with this configuration.
         * * `instance_disks.#.size` - The size of the disk in GB.
         * * `instance_disks.#.type` - The type of disk.
         * 
         * @return builder
         * 
         */
        public Builder instanceDisks(@Nullable List<GetInstanceTypeInstanceDisk> instanceDisks) {
            return instanceDisks(Output.of(instanceDisks));
        }

        /**
         * @param instanceDisks Describes the disks for the instance type.
         * * `instance_disks.#.count` - The number of disks with this configuration.
         * * `instance_disks.#.size` - The size of the disk in GB.
         * * `instance_disks.#.type` - The type of disk.
         * 
         * @return builder
         * 
         */
        public Builder instanceDisks(GetInstanceTypeInstanceDisk... instanceDisks) {
            return instanceDisks(List.of(instanceDisks));
        }

        /**
         * @param instanceType Instance
         * 
         * @return builder
         * 
         */
        public Builder instanceType(Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType Instance
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param maximumIpv6AddressesPerInterface The maximum number of IPv6 addresses per network interface.
         * 
         * @return builder
         * 
         */
        public Builder maximumIpv6AddressesPerInterface(Output</* @Nullable */ Integer> maximumIpv6AddressesPerInterface) {
            $.maximumIpv6AddressesPerInterface = maximumIpv6AddressesPerInterface;
            return this;
        }

        /**
         * @param maximumIpv6AddressesPerInterface The maximum number of IPv6 addresses per network interface.
         * 
         * @return builder
         * 
         */
        public Builder maximumIpv6AddressesPerInterface(@Nullable Integer maximumIpv6AddressesPerInterface) {
            return maximumIpv6AddressesPerInterface(Output.of(maximumIpv6AddressesPerInterface));
        }

        /**
         * @param totalFpgaMemory The total memory of all FPGA accelerators for the instance type (in MiB).
         * 
         * @return builder
         * 
         */
        public Builder totalFpgaMemory(Output</* @Nullable */ Integer> totalFpgaMemory) {
            $.totalFpgaMemory = totalFpgaMemory;
            return this;
        }

        /**
         * @param totalFpgaMemory The total memory of all FPGA accelerators for the instance type (in MiB).
         * 
         * @return builder
         * 
         */
        public Builder totalFpgaMemory(@Nullable Integer totalFpgaMemory) {
            return totalFpgaMemory(Output.of(totalFpgaMemory));
        }

        /**
         * @param totalGpuMemory The total size of the memory for the GPU accelerators for the instance type (in MiB).
         * 
         * @return builder
         * 
         */
        public Builder totalGpuMemory(Output</* @Nullable */ Integer> totalGpuMemory) {
            $.totalGpuMemory = totalGpuMemory;
            return this;
        }

        /**
         * @param totalGpuMemory The total size of the memory for the GPU accelerators for the instance type (in MiB).
         * 
         * @return builder
         * 
         */
        public Builder totalGpuMemory(@Nullable Integer totalGpuMemory) {
            return totalGpuMemory(Output.of(totalGpuMemory));
        }

        /**
         * @param totalInstanceStorage The total size of the instance disks, in GB.
         * 
         * @return builder
         * 
         */
        public Builder totalInstanceStorage(Output</* @Nullable */ Integer> totalInstanceStorage) {
            $.totalInstanceStorage = totalInstanceStorage;
            return this;
        }

        /**
         * @param totalInstanceStorage The total size of the instance disks, in GB.
         * 
         * @return builder
         * 
         */
        public Builder totalInstanceStorage(@Nullable Integer totalInstanceStorage) {
            return totalInstanceStorage(Output.of(totalInstanceStorage));
        }

        public GetInstanceTypeArgs build() {
            $.instanceType = Objects.requireNonNull($.instanceType, "expected parameter 'instanceType' to be non-null");
            return $;
        }
    }

}
