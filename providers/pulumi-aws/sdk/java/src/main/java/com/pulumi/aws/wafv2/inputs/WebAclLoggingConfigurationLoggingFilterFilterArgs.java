// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.wafv2.inputs;

import com.pulumi.aws.wafv2.inputs.WebAclLoggingConfigurationLoggingFilterFilterConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class WebAclLoggingConfigurationLoggingFilterFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAclLoggingConfigurationLoggingFilterFilterArgs Empty = new WebAclLoggingConfigurationLoggingFilterFilterArgs();

    /**
     * How to handle logs that satisfy the filter&#39;s conditions and requirement. Valid values: `KEEP` or `DROP`.
     * 
     */
    @Import(name="behavior", required=true)
      private final Output<String> behavior;

    public Output<String> behavior() {
        return this.behavior;
    }

    /**
     * Match condition(s) for the filter. See Condition below for more details.
     * 
     */
    @Import(name="conditions", required=true)
      private final Output<List<WebAclLoggingConfigurationLoggingFilterFilterConditionArgs>> conditions;

    public Output<List<WebAclLoggingConfigurationLoggingFilterFilterConditionArgs>> conditions() {
        return this.conditions;
    }

    /**
     * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition. Valid values: `MEETS_ALL` or `MEETS_ANY`.
     * 
     */
    @Import(name="requirement", required=true)
      private final Output<String> requirement;

    public Output<String> requirement() {
        return this.requirement;
    }

    public WebAclLoggingConfigurationLoggingFilterFilterArgs(
        Output<String> behavior,
        Output<List<WebAclLoggingConfigurationLoggingFilterFilterConditionArgs>> conditions,
        Output<String> requirement) {
        this.behavior = Objects.requireNonNull(behavior, "expected parameter 'behavior' to be non-null");
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
        this.requirement = Objects.requireNonNull(requirement, "expected parameter 'requirement' to be non-null");
    }

    private WebAclLoggingConfigurationLoggingFilterFilterArgs() {
        this.behavior = Codegen.empty();
        this.conditions = Codegen.empty();
        this.requirement = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAclLoggingConfigurationLoggingFilterFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> behavior;
        private Output<List<WebAclLoggingConfigurationLoggingFilterFilterConditionArgs>> conditions;
        private Output<String> requirement;

        public Builder() {
    	      // Empty
        }

        public Builder(WebAclLoggingConfigurationLoggingFilterFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.behavior = defaults.behavior;
    	      this.conditions = defaults.conditions;
    	      this.requirement = defaults.requirement;
        }

        public Builder behavior(Output<String> behavior) {
            this.behavior = Objects.requireNonNull(behavior);
            return this;
        }
        public Builder behavior(String behavior) {
            this.behavior = Output.of(Objects.requireNonNull(behavior));
            return this;
        }
        public Builder conditions(Output<List<WebAclLoggingConfigurationLoggingFilterFilterConditionArgs>> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        public Builder conditions(List<WebAclLoggingConfigurationLoggingFilterFilterConditionArgs> conditions) {
            this.conditions = Output.of(Objects.requireNonNull(conditions));
            return this;
        }
        public Builder conditions(WebAclLoggingConfigurationLoggingFilterFilterConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder requirement(Output<String> requirement) {
            this.requirement = Objects.requireNonNull(requirement);
            return this;
        }
        public Builder requirement(String requirement) {
            this.requirement = Output.of(Objects.requireNonNull(requirement));
            return this;
        }        public WebAclLoggingConfigurationLoggingFilterFilterArgs build() {
            return new WebAclLoggingConfigurationLoggingFilterFilterArgs(behavior, conditions, requirement);
        }
    }
}
