// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.inputs;

import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationCloudwatchLoggingOptionsGetArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsGetArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationOutputGetArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationReferenceDataSourcesGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalyticsApplicationState extends com.pulumi.resources.ResourceArgs {

    public static final AnalyticsApplicationState Empty = new AnalyticsApplicationState();

    /**
     * The ARN of the Kinesis Analytics Appliation.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The CloudWatch log stream options to monitor application errors.
     * See CloudWatch Logging Options below for more details.
     * 
     */
    @Import(name="cloudwatchLoggingOptions")
    private @Nullable Output<AnalyticsApplicationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions;

    public Optional<Output<AnalyticsApplicationCloudwatchLoggingOptionsGetArgs>> cloudwatchLoggingOptions() {
        return Optional.ofNullable(this.cloudwatchLoggingOptions);
    }

    /**
     * SQL Code to transform input data, and generate output.
     * 
     */
    @Import(name="code")
    private @Nullable Output<String> code;

    public Optional<Output<String>> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * The Timestamp when the application version was created.
     * 
     */
    @Import(name="createTimestamp")
    private @Nullable Output<String> createTimestamp;

    public Optional<Output<String>> createTimestamp() {
        return Optional.ofNullable(this.createTimestamp);
    }

    /**
     * Description of the application.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Input configuration of the application. See Inputs below for more details.
     * 
     */
    @Import(name="inputs")
    private @Nullable Output<AnalyticsApplicationInputsGetArgs> inputs;

    public Optional<Output<AnalyticsApplicationInputsGetArgs>> inputs() {
        return Optional.ofNullable(this.inputs);
    }

    /**
     * The Timestamp when the application was last updated.
     * 
     */
    @Import(name="lastUpdateTimestamp")
    private @Nullable Output<String> lastUpdateTimestamp;

    public Optional<Output<String>> lastUpdateTimestamp() {
        return Optional.ofNullable(this.lastUpdateTimestamp);
    }

    /**
     * Name of the Kinesis Analytics Application.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Output destination configuration of the application. See Outputs below for more details.
     * 
     */
    @Import(name="outputs")
    private @Nullable Output<List<AnalyticsApplicationOutputGetArgs>> outputs;

    public Optional<Output<List<AnalyticsApplicationOutputGetArgs>>> outputs() {
        return Optional.ofNullable(this.outputs);
    }

    /**
     * An S3 Reference Data Source for the application.
     * See Reference Data Sources below for more details.
     * 
     */
    @Import(name="referenceDataSources")
    private @Nullable Output<AnalyticsApplicationReferenceDataSourcesGetArgs> referenceDataSources;

    public Optional<Output<AnalyticsApplicationReferenceDataSourcesGetArgs>> referenceDataSources() {
        return Optional.ofNullable(this.referenceDataSources);
    }

    /**
     * Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `starting_position` must be configured.
     * To modify an application&#39;s starting position, first stop the application by setting `start_application = false`, then update `starting_position` and set `start_application = true`.
     * 
     */
    @Import(name="startApplication")
    private @Nullable Output<Boolean> startApplication;

    public Optional<Output<Boolean>> startApplication() {
        return Optional.ofNullable(this.startApplication);
    }

    /**
     * The Status of the application.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The Version of the application.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private AnalyticsApplicationState() {}

    private AnalyticsApplicationState(AnalyticsApplicationState $) {
        this.arn = $.arn;
        this.cloudwatchLoggingOptions = $.cloudwatchLoggingOptions;
        this.code = $.code;
        this.createTimestamp = $.createTimestamp;
        this.description = $.description;
        this.inputs = $.inputs;
        this.lastUpdateTimestamp = $.lastUpdateTimestamp;
        this.name = $.name;
        this.outputs = $.outputs;
        this.referenceDataSources = $.referenceDataSources;
        this.startApplication = $.startApplication;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalyticsApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalyticsApplicationState $;

        public Builder() {
            $ = new AnalyticsApplicationState();
        }

        public Builder(AnalyticsApplicationState defaults) {
            $ = new AnalyticsApplicationState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder cloudwatchLoggingOptions(@Nullable Output<AnalyticsApplicationCloudwatchLoggingOptionsGetArgs> cloudwatchLoggingOptions) {
            $.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }

        public Builder cloudwatchLoggingOptions(AnalyticsApplicationCloudwatchLoggingOptionsGetArgs cloudwatchLoggingOptions) {
            return cloudwatchLoggingOptions(Output.of(cloudwatchLoggingOptions));
        }

        public Builder code(@Nullable Output<String> code) {
            $.code = code;
            return this;
        }

        public Builder code(String code) {
            return code(Output.of(code));
        }

        public Builder createTimestamp(@Nullable Output<String> createTimestamp) {
            $.createTimestamp = createTimestamp;
            return this;
        }

        public Builder createTimestamp(String createTimestamp) {
            return createTimestamp(Output.of(createTimestamp));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder inputs(@Nullable Output<AnalyticsApplicationInputsGetArgs> inputs) {
            $.inputs = inputs;
            return this;
        }

        public Builder inputs(AnalyticsApplicationInputsGetArgs inputs) {
            return inputs(Output.of(inputs));
        }

        public Builder lastUpdateTimestamp(@Nullable Output<String> lastUpdateTimestamp) {
            $.lastUpdateTimestamp = lastUpdateTimestamp;
            return this;
        }

        public Builder lastUpdateTimestamp(String lastUpdateTimestamp) {
            return lastUpdateTimestamp(Output.of(lastUpdateTimestamp));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder outputs(@Nullable Output<List<AnalyticsApplicationOutputGetArgs>> outputs) {
            $.outputs = outputs;
            return this;
        }

        public Builder outputs(List<AnalyticsApplicationOutputGetArgs> outputs) {
            return outputs(Output.of(outputs));
        }

        public Builder outputs(AnalyticsApplicationOutputGetArgs... outputs) {
            return outputs(List.of(outputs));
        }

        public Builder referenceDataSources(@Nullable Output<AnalyticsApplicationReferenceDataSourcesGetArgs> referenceDataSources) {
            $.referenceDataSources = referenceDataSources;
            return this;
        }

        public Builder referenceDataSources(AnalyticsApplicationReferenceDataSourcesGetArgs referenceDataSources) {
            return referenceDataSources(Output.of(referenceDataSources));
        }

        public Builder startApplication(@Nullable Output<Boolean> startApplication) {
            $.startApplication = startApplication;
            return this;
        }

        public Builder startApplication(Boolean startApplication) {
            return startApplication(Output.of(startApplication));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public AnalyticsApplicationState build() {
            return $;
        }
    }

}
