// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fsx;

import com.pulumi.aws.fsx.inputs.OntapVolumeTieringPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class OntapVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final OntapVolumeArgs Empty = new OntapVolumeArgs();

    /**
     * Specifies the location in the storage virtual machine's namespace where the volume is mounted. The junction_path must have a leading forward slash, such as `/vol3`
     * 
     */
    @Import(name="junctionPath", required=true)
      private final Output<String> junctionPath;

    public Output<String> junctionPath() {
        return this.junctionPath;
    }

    /**
     * Specifies the tiering policy for the ONTAP volume for moving data to the capacity pool storage. Valid values are `SNAPSHOT_ONLY`, `AUTO`, `ALL`, `NONE`. Default value is `SNAPSHOT_ONLY`.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Specifies the volume security style, Valid values are `UNIX`, `NTFS`, and `MIXED`. Default value is `UNIX`.
     * 
     */
    @Import(name="securityStyle")
      private final @Nullable Output<String> securityStyle;

    public Output<String> securityStyle() {
        return this.securityStyle == null ? Codegen.empty() : this.securityStyle;
    }

    /**
     * Specifies the size of the volume, in megabytes (MB), that you are creating.
     * 
     */
    @Import(name="sizeInMegabytes", required=true)
      private final Output<Integer> sizeInMegabytes;

    public Output<Integer> sizeInMegabytes() {
        return this.sizeInMegabytes;
    }

    /**
     * Set to true to enable deduplication, compression, and compaction storage efficiency features on the volume.
     * 
     */
    @Import(name="storageEfficiencyEnabled", required=true)
      private final Output<Boolean> storageEfficiencyEnabled;

    public Output<Boolean> storageEfficiencyEnabled() {
        return this.storageEfficiencyEnabled;
    }

    /**
     * Specifies the storage virtual machine in which to create the volume.
     * 
     */
    @Import(name="storageVirtualMachineId", required=true)
      private final Output<String> storageVirtualMachineId;

    public Output<String> storageVirtualMachineId() {
        return this.storageVirtualMachineId;
    }

    /**
     * A map of tags to assign to the volume. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    @Import(name="tieringPolicy")
      private final @Nullable Output<OntapVolumeTieringPolicyArgs> tieringPolicy;

    public Output<OntapVolumeTieringPolicyArgs> tieringPolicy() {
        return this.tieringPolicy == null ? Codegen.empty() : this.tieringPolicy;
    }

    /**
     * The type of volume, currently the only valid value is `ONTAP`.
     * 
     */
    @Import(name="volumeType")
      private final @Nullable Output<String> volumeType;

    public Output<String> volumeType() {
        return this.volumeType == null ? Codegen.empty() : this.volumeType;
    }

    public OntapVolumeArgs(
        Output<String> junctionPath,
        @Nullable Output<String> name,
        @Nullable Output<String> securityStyle,
        Output<Integer> sizeInMegabytes,
        Output<Boolean> storageEfficiencyEnabled,
        Output<String> storageVirtualMachineId,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<OntapVolumeTieringPolicyArgs> tieringPolicy,
        @Nullable Output<String> volumeType) {
        this.junctionPath = Objects.requireNonNull(junctionPath, "expected parameter 'junctionPath' to be non-null");
        this.name = name;
        this.securityStyle = securityStyle;
        this.sizeInMegabytes = Objects.requireNonNull(sizeInMegabytes, "expected parameter 'sizeInMegabytes' to be non-null");
        this.storageEfficiencyEnabled = Objects.requireNonNull(storageEfficiencyEnabled, "expected parameter 'storageEfficiencyEnabled' to be non-null");
        this.storageVirtualMachineId = Objects.requireNonNull(storageVirtualMachineId, "expected parameter 'storageVirtualMachineId' to be non-null");
        this.tags = tags;
        this.tieringPolicy = tieringPolicy;
        this.volumeType = volumeType;
    }

    private OntapVolumeArgs() {
        this.junctionPath = Codegen.empty();
        this.name = Codegen.empty();
        this.securityStyle = Codegen.empty();
        this.sizeInMegabytes = Codegen.empty();
        this.storageEfficiencyEnabled = Codegen.empty();
        this.storageVirtualMachineId = Codegen.empty();
        this.tags = Codegen.empty();
        this.tieringPolicy = Codegen.empty();
        this.volumeType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OntapVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> junctionPath;
        private @Nullable Output<String> name;
        private @Nullable Output<String> securityStyle;
        private Output<Integer> sizeInMegabytes;
        private Output<Boolean> storageEfficiencyEnabled;
        private Output<String> storageVirtualMachineId;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<OntapVolumeTieringPolicyArgs> tieringPolicy;
        private @Nullable Output<String> volumeType;

        public Builder() {
    	      // Empty
        }

        public Builder(OntapVolumeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.junctionPath = defaults.junctionPath;
    	      this.name = defaults.name;
    	      this.securityStyle = defaults.securityStyle;
    	      this.sizeInMegabytes = defaults.sizeInMegabytes;
    	      this.storageEfficiencyEnabled = defaults.storageEfficiencyEnabled;
    	      this.storageVirtualMachineId = defaults.storageVirtualMachineId;
    	      this.tags = defaults.tags;
    	      this.tieringPolicy = defaults.tieringPolicy;
    	      this.volumeType = defaults.volumeType;
        }

        public Builder junctionPath(Output<String> junctionPath) {
            this.junctionPath = Objects.requireNonNull(junctionPath);
            return this;
        }
        public Builder junctionPath(String junctionPath) {
            this.junctionPath = Output.of(Objects.requireNonNull(junctionPath));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder securityStyle(@Nullable Output<String> securityStyle) {
            this.securityStyle = securityStyle;
            return this;
        }
        public Builder securityStyle(@Nullable String securityStyle) {
            this.securityStyle = Codegen.ofNullable(securityStyle);
            return this;
        }
        public Builder sizeInMegabytes(Output<Integer> sizeInMegabytes) {
            this.sizeInMegabytes = Objects.requireNonNull(sizeInMegabytes);
            return this;
        }
        public Builder sizeInMegabytes(Integer sizeInMegabytes) {
            this.sizeInMegabytes = Output.of(Objects.requireNonNull(sizeInMegabytes));
            return this;
        }
        public Builder storageEfficiencyEnabled(Output<Boolean> storageEfficiencyEnabled) {
            this.storageEfficiencyEnabled = Objects.requireNonNull(storageEfficiencyEnabled);
            return this;
        }
        public Builder storageEfficiencyEnabled(Boolean storageEfficiencyEnabled) {
            this.storageEfficiencyEnabled = Output.of(Objects.requireNonNull(storageEfficiencyEnabled));
            return this;
        }
        public Builder storageVirtualMachineId(Output<String> storageVirtualMachineId) {
            this.storageVirtualMachineId = Objects.requireNonNull(storageVirtualMachineId);
            return this;
        }
        public Builder storageVirtualMachineId(String storageVirtualMachineId) {
            this.storageVirtualMachineId = Output.of(Objects.requireNonNull(storageVirtualMachineId));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tieringPolicy(@Nullable Output<OntapVolumeTieringPolicyArgs> tieringPolicy) {
            this.tieringPolicy = tieringPolicy;
            return this;
        }
        public Builder tieringPolicy(@Nullable OntapVolumeTieringPolicyArgs tieringPolicy) {
            this.tieringPolicy = Codegen.ofNullable(tieringPolicy);
            return this;
        }
        public Builder volumeType(@Nullable Output<String> volumeType) {
            this.volumeType = volumeType;
            return this;
        }
        public Builder volumeType(@Nullable String volumeType) {
            this.volumeType = Codegen.ofNullable(volumeType);
            return this;
        }        public OntapVolumeArgs build() {
            return new OntapVolumeArgs(junctionPath, name, securityStyle, sizeInMegabytes, storageEfficiencyEnabled, storageVirtualMachineId, tags, tieringPolicy, volumeType);
        }
    }
}
