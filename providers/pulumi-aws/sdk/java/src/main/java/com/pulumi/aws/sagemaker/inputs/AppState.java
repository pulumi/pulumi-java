// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker.inputs;

import com.pulumi.aws.sagemaker.inputs.AppResourceSpecGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppState extends com.pulumi.resources.ResourceArgs {

    public static final AppState Empty = new AppState();

    /**
     * The name of the app.
     * 
     */
    @Import(name="appName")
    private @Nullable Output<String> appName;

    public Optional<Output<String>> appName() {
        return Optional.ofNullable(this.appName);
    }

    /**
     * The type of app. Valid values are `JupyterServer`, `KernelGateway` and `TensorBoard`.
     * 
     */
    @Import(name="appType")
    private @Nullable Output<String> appType;

    public Optional<Output<String>> appType() {
        return Optional.ofNullable(this.appType);
    }

    /**
     * The Amazon Resource Name (ARN) of the app.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The domain ID.
     * 
     */
    @Import(name="domainId")
    private @Nullable Output<String> domainId;

    public Optional<Output<String>> domainId() {
        return Optional.ofNullable(this.domainId);
    }

    /**
     * The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.See Resource Spec below.
     * 
     */
    @Import(name="resourceSpec")
    private @Nullable Output<AppResourceSpecGetArgs> resourceSpec;

    public Optional<Output<AppResourceSpecGetArgs>> resourceSpec() {
        return Optional.ofNullable(this.resourceSpec);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The user profile name.
     * 
     */
    @Import(name="userProfileName")
    private @Nullable Output<String> userProfileName;

    public Optional<Output<String>> userProfileName() {
        return Optional.ofNullable(this.userProfileName);
    }

    private AppState() {}

    private AppState(AppState $) {
        this.appName = $.appName;
        this.appType = $.appType;
        this.arn = $.arn;
        this.domainId = $.domainId;
        this.resourceSpec = $.resourceSpec;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.userProfileName = $.userProfileName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppState $;

        public Builder() {
            $ = new AppState();
        }

        public Builder(AppState defaults) {
            $ = new AppState(Objects.requireNonNull(defaults));
        }

        public Builder appName(@Nullable Output<String> appName) {
            $.appName = appName;
            return this;
        }

        public Builder appName(String appName) {
            return appName(Output.of(appName));
        }

        public Builder appType(@Nullable Output<String> appType) {
            $.appType = appType;
            return this;
        }

        public Builder appType(String appType) {
            return appType(Output.of(appType));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder domainId(@Nullable Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        public Builder resourceSpec(@Nullable Output<AppResourceSpecGetArgs> resourceSpec) {
            $.resourceSpec = resourceSpec;
            return this;
        }

        public Builder resourceSpec(AppResourceSpecGetArgs resourceSpec) {
            return resourceSpec(Output.of(resourceSpec));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder userProfileName(@Nullable Output<String> userProfileName) {
            $.userProfileName = userProfileName;
            return this;
        }

        public Builder userProfileName(String userProfileName) {
            return userProfileName(Output.of(userProfileName));
        }

        public AppState build() {
            return $;
        }
    }

}
