// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceCreditSpecificationGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceCreditSpecificationGetArgs Empty = new InstanceCreditSpecificationGetArgs();

    /**
     * Credit option for CPU usage. Valid values include `standard` or `unlimited`. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
     * 
     */
    @Import(name="cpuCredits")
    private @Nullable Output<String> cpuCredits;

    public Optional<Output<String>> cpuCredits() {
        return Optional.ofNullable(this.cpuCredits);
    }

    private InstanceCreditSpecificationGetArgs() {}

    private InstanceCreditSpecificationGetArgs(InstanceCreditSpecificationGetArgs $) {
        this.cpuCredits = $.cpuCredits;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceCreditSpecificationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceCreditSpecificationGetArgs $;

        public Builder() {
            $ = new InstanceCreditSpecificationGetArgs();
        }

        public Builder(InstanceCreditSpecificationGetArgs defaults) {
            $ = new InstanceCreditSpecificationGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder cpuCredits(@Nullable Output<String> cpuCredits) {
            $.cpuCredits = cpuCredits;
            return this;
        }

        public Builder cpuCredits(String cpuCredits) {
            return cpuCredits(Output.of(cpuCredits));
        }

        public InstanceCreditSpecificationGetArgs build() {
            return $;
        }
    }

}
