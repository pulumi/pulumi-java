// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.gamelift.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FleetRuntimeConfigurationServerProcessGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final FleetRuntimeConfigurationServerProcessGetArgs Empty = new FleetRuntimeConfigurationServerProcessGetArgs();

    /**
     * Number of server processes using this configuration to run concurrently on an instance.
     * 
     */
    @Import(name="concurrentExecutions", required=true)
    private Output<Integer> concurrentExecutions;

    public Output<Integer> concurrentExecutions() {
        return this.concurrentExecutions;
    }

    /**
     * Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances `C:\game`, and for Linux instances `/local/game`.
     * 
     */
    @Import(name="launchPath", required=true)
    private Output<String> launchPath;

    public Output<String> launchPath() {
        return this.launchPath;
    }

    /**
     * Optional list of parameters to pass to the server executable on launch.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<String> parameters;

    public Optional<Output<String>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    private FleetRuntimeConfigurationServerProcessGetArgs() {}

    private FleetRuntimeConfigurationServerProcessGetArgs(FleetRuntimeConfigurationServerProcessGetArgs $) {
        this.concurrentExecutions = $.concurrentExecutions;
        this.launchPath = $.launchPath;
        this.parameters = $.parameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FleetRuntimeConfigurationServerProcessGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FleetRuntimeConfigurationServerProcessGetArgs $;

        public Builder() {
            $ = new FleetRuntimeConfigurationServerProcessGetArgs();
        }

        public Builder(FleetRuntimeConfigurationServerProcessGetArgs defaults) {
            $ = new FleetRuntimeConfigurationServerProcessGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder concurrentExecutions(Output<Integer> concurrentExecutions) {
            $.concurrentExecutions = concurrentExecutions;
            return this;
        }

        public Builder concurrentExecutions(Integer concurrentExecutions) {
            return concurrentExecutions(Output.of(concurrentExecutions));
        }

        public Builder launchPath(Output<String> launchPath) {
            $.launchPath = launchPath;
            return this;
        }

        public Builder launchPath(String launchPath) {
            return launchPath(Output.of(launchPath));
        }

        public Builder parameters(@Nullable Output<String> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(String parameters) {
            return parameters(Output.of(parameters));
        }

        public FleetRuntimeConfigurationServerProcessGetArgs build() {
            $.concurrentExecutions = Objects.requireNonNull($.concurrentExecutions, "expected parameter 'concurrentExecutions' to be non-null");
            $.launchPath = Objects.requireNonNull($.launchPath, "expected parameter 'launchPath' to be non-null");
            return $;
        }
    }

}
