// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.outputs;

import com.pulumi.aws.cloudwatch.outputs.EventConnectionAuthParametersOauthClientParameters;
import com.pulumi.aws.cloudwatch.outputs.EventConnectionAuthParametersOauthOauthHttpParameters;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventConnectionAuthParametersOauth {
    /**
     * @return The URL to the authorization endpoint.
     * 
     */
    private final String authorizationEndpoint;
    /**
     * @return Contains the client parameters for OAuth authorization. Contains the following two parameters.
     * 
     */
    private final @Nullable EventConnectionAuthParametersOauthClientParameters clientParameters;
    /**
     * @return A password for the authorization. Created and stored in AWS Secrets Manager.
     * 
     */
    private final String httpMethod;
    /**
     * @return OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
     * 
     */
    private final EventConnectionAuthParametersOauthOauthHttpParameters oauthHttpParameters;

    @CustomType.Constructor
    private EventConnectionAuthParametersOauth(
        @CustomType.Parameter("authorizationEndpoint") String authorizationEndpoint,
        @CustomType.Parameter("clientParameters") @Nullable EventConnectionAuthParametersOauthClientParameters clientParameters,
        @CustomType.Parameter("httpMethod") String httpMethod,
        @CustomType.Parameter("oauthHttpParameters") EventConnectionAuthParametersOauthOauthHttpParameters oauthHttpParameters) {
        this.authorizationEndpoint = authorizationEndpoint;
        this.clientParameters = clientParameters;
        this.httpMethod = httpMethod;
        this.oauthHttpParameters = oauthHttpParameters;
    }

    /**
     * @return The URL to the authorization endpoint.
     * 
     */
    public String authorizationEndpoint() {
        return this.authorizationEndpoint;
    }
    /**
     * @return Contains the client parameters for OAuth authorization. Contains the following two parameters.
     * 
     */
    public Optional<EventConnectionAuthParametersOauthClientParameters> clientParameters() {
        return Optional.ofNullable(this.clientParameters);
    }
    /**
     * @return A password for the authorization. Created and stored in AWS Secrets Manager.
     * 
     */
    public String httpMethod() {
        return this.httpMethod;
    }
    /**
     * @return OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
     * 
     */
    public EventConnectionAuthParametersOauthOauthHttpParameters oauthHttpParameters() {
        return this.oauthHttpParameters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventConnectionAuthParametersOauth defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String authorizationEndpoint;
        private @Nullable EventConnectionAuthParametersOauthClientParameters clientParameters;
        private String httpMethod;
        private EventConnectionAuthParametersOauthOauthHttpParameters oauthHttpParameters;

        public Builder() {
    	      // Empty
        }

        public Builder(EventConnectionAuthParametersOauth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationEndpoint = defaults.authorizationEndpoint;
    	      this.clientParameters = defaults.clientParameters;
    	      this.httpMethod = defaults.httpMethod;
    	      this.oauthHttpParameters = defaults.oauthHttpParameters;
        }

        public Builder authorizationEndpoint(String authorizationEndpoint) {
            this.authorizationEndpoint = Objects.requireNonNull(authorizationEndpoint);
            return this;
        }
        public Builder clientParameters(@Nullable EventConnectionAuthParametersOauthClientParameters clientParameters) {
            this.clientParameters = clientParameters;
            return this;
        }
        public Builder httpMethod(String httpMethod) {
            this.httpMethod = Objects.requireNonNull(httpMethod);
            return this;
        }
        public Builder oauthHttpParameters(EventConnectionAuthParametersOauthOauthHttpParameters oauthHttpParameters) {
            this.oauthHttpParameters = Objects.requireNonNull(oauthHttpParameters);
            return this;
        }        public EventConnectionAuthParametersOauth build() {
            return new EventConnectionAuthParametersOauth(authorizationEndpoint, clientParameters, httpMethod, oauthHttpParameters);
        }
    }
}
