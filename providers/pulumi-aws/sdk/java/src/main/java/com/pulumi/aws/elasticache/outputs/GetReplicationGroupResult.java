// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticache.outputs;

import com.pulumi.aws.elasticache.outputs.GetReplicationGroupLogDeliveryConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetReplicationGroupResult {
    /**
     * @return The Amazon Resource Name (ARN) of the created ElastiCache Replication Group.
     * 
     */
    private final String arn;
    /**
     * @return Specifies whether an AuthToken (password) is enabled.
     * 
     */
    private final Boolean authTokenEnabled;
    /**
     * @return A flag whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails.
     * 
     */
    private final Boolean automaticFailoverEnabled;
    /**
     * @return The configuration endpoint address to allow host discovery.
     * 
     */
    private final String configurationEndpointAddress;
    /**
     * @return The description of the replication group.
     * 
     */
    private final String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Redis [SLOWLOG](https://redis.io/commands/slowlog) or Redis [Engine Log](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Log_Delivery.html#Log_contents-engine-log) delivery settings.
     * 
     */
    private final List<GetReplicationGroupLogDeliveryConfiguration> logDeliveryConfigurations;
    /**
     * @return The identifiers of all the nodes that are part of this replication group.
     * 
     */
    private final List<String> memberClusters;
    /**
     * @return Specifies whether Multi-AZ Support is enabled for the replication group.
     * 
     */
    private final Boolean multiAzEnabled;
    /**
     * @return The cluster node type.
     * 
     */
    private final String nodeType;
    /**
     * @return The number of cache clusters that the replication group has.
     * 
     */
    private final Integer numCacheClusters;
    /**
     * @return Number of node groups (shards) for the replication group.
     * 
     */
    private final Integer numNodeGroups;
    /**
     * @return (**Deprecated** use `num_cache_clusters` instead) The number of cache clusters that the replication group has.
     * 
     * @deprecated
     * Use num_cache_clusters instead
     * 
     */
    @Deprecated /* Use num_cache_clusters instead */
    private final Integer numberCacheClusters;
    /**
     * @return The port number on which the configuration endpoint will accept connections.
     * 
     */
    private final Integer port;
    /**
     * @return The endpoint of the primary node in this node group (shard).
     * 
     */
    private final String primaryEndpointAddress;
    /**
     * @return The endpoint of the reader node in this node group (shard).
     * 
     */
    private final String readerEndpointAddress;
    /**
     * @return Number of replica nodes in each node group.
     * 
     */
    private final Integer replicasPerNodeGroup;
    /**
     * @return (**Deprecated** use `description` instead) The description of the replication group.
     * 
     * @deprecated
     * Use description instead
     * 
     */
    @Deprecated /* Use description instead */
    private final String replicationGroupDescription;
    private final String replicationGroupId;
    /**
     * @return The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them.
     * 
     */
    private final Integer snapshotRetentionLimit;
    /**
     * @return The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).
     * 
     */
    private final String snapshotWindow;

    @CustomType.Constructor
    private GetReplicationGroupResult(
        @CustomType.Parameter("arn") String arn,
        @CustomType.Parameter("authTokenEnabled") Boolean authTokenEnabled,
        @CustomType.Parameter("automaticFailoverEnabled") Boolean automaticFailoverEnabled,
        @CustomType.Parameter("configurationEndpointAddress") String configurationEndpointAddress,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("logDeliveryConfigurations") List<GetReplicationGroupLogDeliveryConfiguration> logDeliveryConfigurations,
        @CustomType.Parameter("memberClusters") List<String> memberClusters,
        @CustomType.Parameter("multiAzEnabled") Boolean multiAzEnabled,
        @CustomType.Parameter("nodeType") String nodeType,
        @CustomType.Parameter("numCacheClusters") Integer numCacheClusters,
        @CustomType.Parameter("numNodeGroups") Integer numNodeGroups,
        @CustomType.Parameter("numberCacheClusters") Integer numberCacheClusters,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("primaryEndpointAddress") String primaryEndpointAddress,
        @CustomType.Parameter("readerEndpointAddress") String readerEndpointAddress,
        @CustomType.Parameter("replicasPerNodeGroup") Integer replicasPerNodeGroup,
        @CustomType.Parameter("replicationGroupDescription") String replicationGroupDescription,
        @CustomType.Parameter("replicationGroupId") String replicationGroupId,
        @CustomType.Parameter("snapshotRetentionLimit") Integer snapshotRetentionLimit,
        @CustomType.Parameter("snapshotWindow") String snapshotWindow) {
        this.arn = arn;
        this.authTokenEnabled = authTokenEnabled;
        this.automaticFailoverEnabled = automaticFailoverEnabled;
        this.configurationEndpointAddress = configurationEndpointAddress;
        this.description = description;
        this.id = id;
        this.logDeliveryConfigurations = logDeliveryConfigurations;
        this.memberClusters = memberClusters;
        this.multiAzEnabled = multiAzEnabled;
        this.nodeType = nodeType;
        this.numCacheClusters = numCacheClusters;
        this.numNodeGroups = numNodeGroups;
        this.numberCacheClusters = numberCacheClusters;
        this.port = port;
        this.primaryEndpointAddress = primaryEndpointAddress;
        this.readerEndpointAddress = readerEndpointAddress;
        this.replicasPerNodeGroup = replicasPerNodeGroup;
        this.replicationGroupDescription = replicationGroupDescription;
        this.replicationGroupId = replicationGroupId;
        this.snapshotRetentionLimit = snapshotRetentionLimit;
        this.snapshotWindow = snapshotWindow;
    }

    /**
     * @return The Amazon Resource Name (ARN) of the created ElastiCache Replication Group.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Specifies whether an AuthToken (password) is enabled.
     * 
     */
    public Boolean authTokenEnabled() {
        return this.authTokenEnabled;
    }
    /**
     * @return A flag whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails.
     * 
     */
    public Boolean automaticFailoverEnabled() {
        return this.automaticFailoverEnabled;
    }
    /**
     * @return The configuration endpoint address to allow host discovery.
     * 
     */
    public String configurationEndpointAddress() {
        return this.configurationEndpointAddress;
    }
    /**
     * @return The description of the replication group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Redis [SLOWLOG](https://redis.io/commands/slowlog) or Redis [Engine Log](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Log_Delivery.html#Log_contents-engine-log) delivery settings.
     * 
     */
    public List<GetReplicationGroupLogDeliveryConfiguration> logDeliveryConfigurations() {
        return this.logDeliveryConfigurations;
    }
    /**
     * @return The identifiers of all the nodes that are part of this replication group.
     * 
     */
    public List<String> memberClusters() {
        return this.memberClusters;
    }
    /**
     * @return Specifies whether Multi-AZ Support is enabled for the replication group.
     * 
     */
    public Boolean multiAzEnabled() {
        return this.multiAzEnabled;
    }
    /**
     * @return The cluster node type.
     * 
     */
    public String nodeType() {
        return this.nodeType;
    }
    /**
     * @return The number of cache clusters that the replication group has.
     * 
     */
    public Integer numCacheClusters() {
        return this.numCacheClusters;
    }
    /**
     * @return Number of node groups (shards) for the replication group.
     * 
     */
    public Integer numNodeGroups() {
        return this.numNodeGroups;
    }
    /**
     * @return (**Deprecated** use `num_cache_clusters` instead) The number of cache clusters that the replication group has.
     * 
     * @deprecated
     * Use num_cache_clusters instead
     * 
     */
    @Deprecated /* Use num_cache_clusters instead */
    public Integer numberCacheClusters() {
        return this.numberCacheClusters;
    }
    /**
     * @return The port number on which the configuration endpoint will accept connections.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The endpoint of the primary node in this node group (shard).
     * 
     */
    public String primaryEndpointAddress() {
        return this.primaryEndpointAddress;
    }
    /**
     * @return The endpoint of the reader node in this node group (shard).
     * 
     */
    public String readerEndpointAddress() {
        return this.readerEndpointAddress;
    }
    /**
     * @return Number of replica nodes in each node group.
     * 
     */
    public Integer replicasPerNodeGroup() {
        return this.replicasPerNodeGroup;
    }
    /**
     * @return (**Deprecated** use `description` instead) The description of the replication group.
     * 
     * @deprecated
     * Use description instead
     * 
     */
    @Deprecated /* Use description instead */
    public String replicationGroupDescription() {
        return this.replicationGroupDescription;
    }
    public String replicationGroupId() {
        return this.replicationGroupId;
    }
    /**
     * @return The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them.
     * 
     */
    public Integer snapshotRetentionLimit() {
        return this.snapshotRetentionLimit;
    }
    /**
     * @return The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).
     * 
     */
    public String snapshotWindow() {
        return this.snapshotWindow;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReplicationGroupResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String arn;
        private Boolean authTokenEnabled;
        private Boolean automaticFailoverEnabled;
        private String configurationEndpointAddress;
        private String description;
        private String id;
        private List<GetReplicationGroupLogDeliveryConfiguration> logDeliveryConfigurations;
        private List<String> memberClusters;
        private Boolean multiAzEnabled;
        private String nodeType;
        private Integer numCacheClusters;
        private Integer numNodeGroups;
        private Integer numberCacheClusters;
        private Integer port;
        private String primaryEndpointAddress;
        private String readerEndpointAddress;
        private Integer replicasPerNodeGroup;
        private String replicationGroupDescription;
        private String replicationGroupId;
        private Integer snapshotRetentionLimit;
        private String snapshotWindow;

        public Builder() {
    	      // Empty
        }

        public Builder(GetReplicationGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authTokenEnabled = defaults.authTokenEnabled;
    	      this.automaticFailoverEnabled = defaults.automaticFailoverEnabled;
    	      this.configurationEndpointAddress = defaults.configurationEndpointAddress;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.logDeliveryConfigurations = defaults.logDeliveryConfigurations;
    	      this.memberClusters = defaults.memberClusters;
    	      this.multiAzEnabled = defaults.multiAzEnabled;
    	      this.nodeType = defaults.nodeType;
    	      this.numCacheClusters = defaults.numCacheClusters;
    	      this.numNodeGroups = defaults.numNodeGroups;
    	      this.numberCacheClusters = defaults.numberCacheClusters;
    	      this.port = defaults.port;
    	      this.primaryEndpointAddress = defaults.primaryEndpointAddress;
    	      this.readerEndpointAddress = defaults.readerEndpointAddress;
    	      this.replicasPerNodeGroup = defaults.replicasPerNodeGroup;
    	      this.replicationGroupDescription = defaults.replicationGroupDescription;
    	      this.replicationGroupId = defaults.replicationGroupId;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
        }

        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        public Builder authTokenEnabled(Boolean authTokenEnabled) {
            this.authTokenEnabled = Objects.requireNonNull(authTokenEnabled);
            return this;
        }
        public Builder automaticFailoverEnabled(Boolean automaticFailoverEnabled) {
            this.automaticFailoverEnabled = Objects.requireNonNull(automaticFailoverEnabled);
            return this;
        }
        public Builder configurationEndpointAddress(String configurationEndpointAddress) {
            this.configurationEndpointAddress = Objects.requireNonNull(configurationEndpointAddress);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder logDeliveryConfigurations(List<GetReplicationGroupLogDeliveryConfiguration> logDeliveryConfigurations) {
            this.logDeliveryConfigurations = Objects.requireNonNull(logDeliveryConfigurations);
            return this;
        }
        public Builder logDeliveryConfigurations(GetReplicationGroupLogDeliveryConfiguration... logDeliveryConfigurations) {
            return logDeliveryConfigurations(List.of(logDeliveryConfigurations));
        }
        public Builder memberClusters(List<String> memberClusters) {
            this.memberClusters = Objects.requireNonNull(memberClusters);
            return this;
        }
        public Builder memberClusters(String... memberClusters) {
            return memberClusters(List.of(memberClusters));
        }
        public Builder multiAzEnabled(Boolean multiAzEnabled) {
            this.multiAzEnabled = Objects.requireNonNull(multiAzEnabled);
            return this;
        }
        public Builder nodeType(String nodeType) {
            this.nodeType = Objects.requireNonNull(nodeType);
            return this;
        }
        public Builder numCacheClusters(Integer numCacheClusters) {
            this.numCacheClusters = Objects.requireNonNull(numCacheClusters);
            return this;
        }
        public Builder numNodeGroups(Integer numNodeGroups) {
            this.numNodeGroups = Objects.requireNonNull(numNodeGroups);
            return this;
        }
        public Builder numberCacheClusters(Integer numberCacheClusters) {
            this.numberCacheClusters = Objects.requireNonNull(numberCacheClusters);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder primaryEndpointAddress(String primaryEndpointAddress) {
            this.primaryEndpointAddress = Objects.requireNonNull(primaryEndpointAddress);
            return this;
        }
        public Builder readerEndpointAddress(String readerEndpointAddress) {
            this.readerEndpointAddress = Objects.requireNonNull(readerEndpointAddress);
            return this;
        }
        public Builder replicasPerNodeGroup(Integer replicasPerNodeGroup) {
            this.replicasPerNodeGroup = Objects.requireNonNull(replicasPerNodeGroup);
            return this;
        }
        public Builder replicationGroupDescription(String replicationGroupDescription) {
            this.replicationGroupDescription = Objects.requireNonNull(replicationGroupDescription);
            return this;
        }
        public Builder replicationGroupId(String replicationGroupId) {
            this.replicationGroupId = Objects.requireNonNull(replicationGroupId);
            return this;
        }
        public Builder snapshotRetentionLimit(Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = Objects.requireNonNull(snapshotRetentionLimit);
            return this;
        }
        public Builder snapshotWindow(String snapshotWindow) {
            this.snapshotWindow = Objects.requireNonNull(snapshotWindow);
            return this;
        }        public GetReplicationGroupResult build() {
            return new GetReplicationGroupResult(arn, authTokenEnabled, automaticFailoverEnabled, configurationEndpointAddress, description, id, logDeliveryConfigurations, memberClusters, multiAzEnabled, nodeType, numCacheClusters, numNodeGroups, numberCacheClusters, port, primaryEndpointAddress, readerEndpointAddress, replicasPerNodeGroup, replicationGroupDescription, replicationGroupId, snapshotRetentionLimit, snapshotWindow);
        }
    }
}
