// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.aws.glue.inputs.PartitionStorageDescriptorGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PartitionState extends com.pulumi.resources.ResourceArgs {

    public static final PartitionState Empty = new PartitionState();

    /**
     * ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
     * 
     */
    @Import(name="catalogId")
      private final @Nullable Output<String> catalogId;

    public Output<String> catalogId() {
        return this.catalogId == null ? Codegen.empty() : this.catalogId;
    }

    /**
     * The time at which the partition was created.
     * 
     */
    @Import(name="creationTime")
      private final @Nullable Output<String> creationTime;

    public Output<String> creationTime() {
        return this.creationTime == null ? Codegen.empty() : this.creationTime;
    }

    /**
     * Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
     * 
     */
    @Import(name="databaseName")
      private final @Nullable Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName == null ? Codegen.empty() : this.databaseName;
    }

    /**
     * The last time at which the partition was accessed.
     * 
     */
    @Import(name="lastAccessedTime")
      private final @Nullable Output<String> lastAccessedTime;

    public Output<String> lastAccessedTime() {
        return this.lastAccessedTime == null ? Codegen.empty() : this.lastAccessedTime;
    }

    /**
     * The last time at which column statistics were computed for this partition.
     * 
     */
    @Import(name="lastAnalyzedTime")
      private final @Nullable Output<String> lastAnalyzedTime;

    public Output<String> lastAnalyzedTime() {
        return this.lastAnalyzedTime == null ? Codegen.empty() : this.lastAnalyzedTime;
    }

    /**
     * A map of initialization parameters for the SerDe, in key-value form.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<Map<String,String>> parameters;

    public Output<Map<String,String>> parameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * The values that define the partition.
     * 
     */
    @Import(name="partitionValues")
      private final @Nullable Output<List<String>> partitionValues;

    public Output<List<String>> partitionValues() {
        return this.partitionValues == null ? Codegen.empty() : this.partitionValues;
    }

    /**
     * A storage descriptor object containing information about the physical storage of this table. You can refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor) for a full explanation of this object.
     * 
     */
    @Import(name="storageDescriptor")
      private final @Nullable Output<PartitionStorageDescriptorGetArgs> storageDescriptor;

    public Output<PartitionStorageDescriptorGetArgs> storageDescriptor() {
        return this.storageDescriptor == null ? Codegen.empty() : this.storageDescriptor;
    }

    @Import(name="tableName")
      private final @Nullable Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName == null ? Codegen.empty() : this.tableName;
    }

    public PartitionState(
        @Nullable Output<String> catalogId,
        @Nullable Output<String> creationTime,
        @Nullable Output<String> databaseName,
        @Nullable Output<String> lastAccessedTime,
        @Nullable Output<String> lastAnalyzedTime,
        @Nullable Output<Map<String,String>> parameters,
        @Nullable Output<List<String>> partitionValues,
        @Nullable Output<PartitionStorageDescriptorGetArgs> storageDescriptor,
        @Nullable Output<String> tableName) {
        this.catalogId = catalogId;
        this.creationTime = creationTime;
        this.databaseName = databaseName;
        this.lastAccessedTime = lastAccessedTime;
        this.lastAnalyzedTime = lastAnalyzedTime;
        this.parameters = parameters;
        this.partitionValues = partitionValues;
        this.storageDescriptor = storageDescriptor;
        this.tableName = tableName;
    }

    private PartitionState() {
        this.catalogId = Codegen.empty();
        this.creationTime = Codegen.empty();
        this.databaseName = Codegen.empty();
        this.lastAccessedTime = Codegen.empty();
        this.lastAnalyzedTime = Codegen.empty();
        this.parameters = Codegen.empty();
        this.partitionValues = Codegen.empty();
        this.storageDescriptor = Codegen.empty();
        this.tableName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PartitionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> catalogId;
        private @Nullable Output<String> creationTime;
        private @Nullable Output<String> databaseName;
        private @Nullable Output<String> lastAccessedTime;
        private @Nullable Output<String> lastAnalyzedTime;
        private @Nullable Output<Map<String,String>> parameters;
        private @Nullable Output<List<String>> partitionValues;
        private @Nullable Output<PartitionStorageDescriptorGetArgs> storageDescriptor;
        private @Nullable Output<String> tableName;

        public Builder() {
    	      // Empty
        }

        public Builder(PartitionState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.creationTime = defaults.creationTime;
    	      this.databaseName = defaults.databaseName;
    	      this.lastAccessedTime = defaults.lastAccessedTime;
    	      this.lastAnalyzedTime = defaults.lastAnalyzedTime;
    	      this.parameters = defaults.parameters;
    	      this.partitionValues = defaults.partitionValues;
    	      this.storageDescriptor = defaults.storageDescriptor;
    	      this.tableName = defaults.tableName;
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            this.catalogId = catalogId;
            return this;
        }
        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = Codegen.ofNullable(catalogId);
            return this;
        }
        public Builder creationTime(@Nullable Output<String> creationTime) {
            this.creationTime = creationTime;
            return this;
        }
        public Builder creationTime(@Nullable String creationTime) {
            this.creationTime = Codegen.ofNullable(creationTime);
            return this;
        }
        public Builder databaseName(@Nullable Output<String> databaseName) {
            this.databaseName = databaseName;
            return this;
        }
        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = Codegen.ofNullable(databaseName);
            return this;
        }
        public Builder lastAccessedTime(@Nullable Output<String> lastAccessedTime) {
            this.lastAccessedTime = lastAccessedTime;
            return this;
        }
        public Builder lastAccessedTime(@Nullable String lastAccessedTime) {
            this.lastAccessedTime = Codegen.ofNullable(lastAccessedTime);
            return this;
        }
        public Builder lastAnalyzedTime(@Nullable Output<String> lastAnalyzedTime) {
            this.lastAnalyzedTime = lastAnalyzedTime;
            return this;
        }
        public Builder lastAnalyzedTime(@Nullable String lastAnalyzedTime) {
            this.lastAnalyzedTime = Codegen.ofNullable(lastAnalyzedTime);
            return this;
        }
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable Map<String,String> parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder partitionValues(@Nullable Output<List<String>> partitionValues) {
            this.partitionValues = partitionValues;
            return this;
        }
        public Builder partitionValues(@Nullable List<String> partitionValues) {
            this.partitionValues = Codegen.ofNullable(partitionValues);
            return this;
        }
        public Builder partitionValues(String... partitionValues) {
            return partitionValues(List.of(partitionValues));
        }
        public Builder storageDescriptor(@Nullable Output<PartitionStorageDescriptorGetArgs> storageDescriptor) {
            this.storageDescriptor = storageDescriptor;
            return this;
        }
        public Builder storageDescriptor(@Nullable PartitionStorageDescriptorGetArgs storageDescriptor) {
            this.storageDescriptor = Codegen.ofNullable(storageDescriptor);
            return this;
        }
        public Builder tableName(@Nullable Output<String> tableName) {
            this.tableName = tableName;
            return this;
        }
        public Builder tableName(@Nullable String tableName) {
            this.tableName = Codegen.ofNullable(tableName);
            return this;
        }        public PartitionState build() {
            return new PartitionState(catalogId, creationTime, databaseName, lastAccessedTime, lastAnalyzedTime, parameters, partitionValues, storageDescriptor, tableName);
        }
    }
}
