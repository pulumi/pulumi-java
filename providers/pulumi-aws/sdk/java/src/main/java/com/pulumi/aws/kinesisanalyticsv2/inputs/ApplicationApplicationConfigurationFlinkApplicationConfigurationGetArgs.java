// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesisanalyticsv2.inputs;

import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs;
import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs;
import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs Empty = new ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs();

    /**
     * Describes an application&#39;s checkpointing configuration.
     * 
     */
    @Import(name="checkpointConfiguration")
    private @Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs> checkpointConfiguration;

    public Optional<Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs>> checkpointConfiguration() {
        return Optional.ofNullable(this.checkpointConfiguration);
    }

    /**
     * Describes configuration parameters for CloudWatch logging for an application.
     * 
     */
    @Import(name="monitoringConfiguration")
    private @Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs> monitoringConfiguration;

    public Optional<Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs>> monitoringConfiguration() {
        return Optional.ofNullable(this.monitoringConfiguration);
    }

    /**
     * Describes parameters for how an application executes multiple tasks simultaneously.
     * 
     */
    @Import(name="parallelismConfiguration")
    private @Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs> parallelismConfiguration;

    public Optional<Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs>> parallelismConfiguration() {
        return Optional.ofNullable(this.parallelismConfiguration);
    }

    private ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs() {}

    private ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs(ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs $) {
        this.checkpointConfiguration = $.checkpointConfiguration;
        this.monitoringConfiguration = $.monitoringConfiguration;
        this.parallelismConfiguration = $.parallelismConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs $;

        public Builder() {
            $ = new ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs();
        }

        public Builder(ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs defaults) {
            $ = new ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder checkpointConfiguration(@Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs> checkpointConfiguration) {
            $.checkpointConfiguration = checkpointConfiguration;
            return this;
        }

        public Builder checkpointConfiguration(ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfigurationGetArgs checkpointConfiguration) {
            return checkpointConfiguration(Output.of(checkpointConfiguration));
        }

        public Builder monitoringConfiguration(@Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs> monitoringConfiguration) {
            $.monitoringConfiguration = monitoringConfiguration;
            return this;
        }

        public Builder monitoringConfiguration(ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfigurationGetArgs monitoringConfiguration) {
            return monitoringConfiguration(Output.of(monitoringConfiguration));
        }

        public Builder parallelismConfiguration(@Nullable Output<ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs> parallelismConfiguration) {
            $.parallelismConfiguration = parallelismConfiguration;
            return this;
        }

        public Builder parallelismConfiguration(ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfigurationGetArgs parallelismConfiguration) {
            return parallelismConfiguration(Output.of(parallelismConfiguration));
        }

        public ApplicationApplicationConfigurationFlinkApplicationConfigurationGetArgs build() {
            return $;
        }
    }

}
