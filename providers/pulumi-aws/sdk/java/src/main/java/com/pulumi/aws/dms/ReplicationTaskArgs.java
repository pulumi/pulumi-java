// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicationTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicationTaskArgs Empty = new ReplicationTaskArgs();

    /**
     * Indicates when you want a change data capture (CDC) operation to start. The value can be in date, checkpoint, or LSN/SCN format depending on the source engine. For more information, see [Determining a CDC native start point](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Task.CDC.html#CHAP_Task.CDC.StartPoint.Native).
     * 
     */
    @Import(name="cdcStartPosition")
    private @Nullable Output<String> cdcStartPosition;

    public Optional<Output<String>> cdcStartPosition() {
        return Optional.ofNullable(this.cdcStartPosition);
    }

    /**
     * The Unix timestamp integer for the start of the Change Data Capture (CDC) operation.
     * 
     */
    @Import(name="cdcStartTime")
    private @Nullable Output<String> cdcStartTime;

    public Optional<Output<String>> cdcStartTime() {
        return Optional.ofNullable(this.cdcStartTime);
    }

    /**
     * The migration type. Can be one of `full-load | cdc | full-load-and-cdc`.
     * 
     */
    @Import(name="migrationType", required=true)
    private Output<String> migrationType;

    public Output<String> migrationType() {
        return this.migrationType;
    }

    /**
     * The Amazon Resource Name (ARN) of the replication instance.
     * 
     */
    @Import(name="replicationInstanceArn", required=true)
    private Output<String> replicationInstanceArn;

    public Output<String> replicationInstanceArn() {
        return this.replicationInstanceArn;
    }

    /**
     * The replication task identifier.
     * 
     */
    @Import(name="replicationTaskId", required=true)
    private Output<String> replicationTaskId;

    public Output<String> replicationTaskId() {
        return this.replicationTaskId;
    }

    /**
     * An escaped JSON string that contains the task settings. For a complete list of task settings, see [Task Settings for AWS Database Migration Service Tasks](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TaskSettings.html).
     * 
     */
    @Import(name="replicationTaskSettings")
    private @Nullable Output<String> replicationTaskSettings;

    public Optional<Output<String>> replicationTaskSettings() {
        return Optional.ofNullable(this.replicationTaskSettings);
    }

    /**
     * The Amazon Resource Name (ARN) string that uniquely identifies the source endpoint.
     * 
     */
    @Import(name="sourceEndpointArn", required=true)
    private Output<String> sourceEndpointArn;

    public Output<String> sourceEndpointArn() {
        return this.sourceEndpointArn;
    }

    /**
     * An escaped JSON string that contains the table mappings. For information on table mapping see [Using Table Mapping with an AWS Database Migration Service Task to Select and Filter Data](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TableMapping.html)
     * 
     */
    @Import(name="tableMappings", required=true)
    private Output<String> tableMappings;

    public Output<String> tableMappings() {
        return this.tableMappings;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Amazon Resource Name (ARN) string that uniquely identifies the target endpoint.
     * 
     */
    @Import(name="targetEndpointArn", required=true)
    private Output<String> targetEndpointArn;

    public Output<String> targetEndpointArn() {
        return this.targetEndpointArn;
    }

    private ReplicationTaskArgs() {}

    private ReplicationTaskArgs(ReplicationTaskArgs $) {
        this.cdcStartPosition = $.cdcStartPosition;
        this.cdcStartTime = $.cdcStartTime;
        this.migrationType = $.migrationType;
        this.replicationInstanceArn = $.replicationInstanceArn;
        this.replicationTaskId = $.replicationTaskId;
        this.replicationTaskSettings = $.replicationTaskSettings;
        this.sourceEndpointArn = $.sourceEndpointArn;
        this.tableMappings = $.tableMappings;
        this.tags = $.tags;
        this.targetEndpointArn = $.targetEndpointArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationTaskArgs $;

        public Builder() {
            $ = new ReplicationTaskArgs();
        }

        public Builder(ReplicationTaskArgs defaults) {
            $ = new ReplicationTaskArgs(Objects.requireNonNull(defaults));
        }

        public Builder cdcStartPosition(@Nullable Output<String> cdcStartPosition) {
            $.cdcStartPosition = cdcStartPosition;
            return this;
        }

        public Builder cdcStartPosition(String cdcStartPosition) {
            return cdcStartPosition(Output.of(cdcStartPosition));
        }

        public Builder cdcStartTime(@Nullable Output<String> cdcStartTime) {
            $.cdcStartTime = cdcStartTime;
            return this;
        }

        public Builder cdcStartTime(String cdcStartTime) {
            return cdcStartTime(Output.of(cdcStartTime));
        }

        public Builder migrationType(Output<String> migrationType) {
            $.migrationType = migrationType;
            return this;
        }

        public Builder migrationType(String migrationType) {
            return migrationType(Output.of(migrationType));
        }

        public Builder replicationInstanceArn(Output<String> replicationInstanceArn) {
            $.replicationInstanceArn = replicationInstanceArn;
            return this;
        }

        public Builder replicationInstanceArn(String replicationInstanceArn) {
            return replicationInstanceArn(Output.of(replicationInstanceArn));
        }

        public Builder replicationTaskId(Output<String> replicationTaskId) {
            $.replicationTaskId = replicationTaskId;
            return this;
        }

        public Builder replicationTaskId(String replicationTaskId) {
            return replicationTaskId(Output.of(replicationTaskId));
        }

        public Builder replicationTaskSettings(@Nullable Output<String> replicationTaskSettings) {
            $.replicationTaskSettings = replicationTaskSettings;
            return this;
        }

        public Builder replicationTaskSettings(String replicationTaskSettings) {
            return replicationTaskSettings(Output.of(replicationTaskSettings));
        }

        public Builder sourceEndpointArn(Output<String> sourceEndpointArn) {
            $.sourceEndpointArn = sourceEndpointArn;
            return this;
        }

        public Builder sourceEndpointArn(String sourceEndpointArn) {
            return sourceEndpointArn(Output.of(sourceEndpointArn));
        }

        public Builder tableMappings(Output<String> tableMappings) {
            $.tableMappings = tableMappings;
            return this;
        }

        public Builder tableMappings(String tableMappings) {
            return tableMappings(Output.of(tableMappings));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder targetEndpointArn(Output<String> targetEndpointArn) {
            $.targetEndpointArn = targetEndpointArn;
            return this;
        }

        public Builder targetEndpointArn(String targetEndpointArn) {
            return targetEndpointArn(Output.of(targetEndpointArn));
        }

        public ReplicationTaskArgs build() {
            $.migrationType = Objects.requireNonNull($.migrationType, "expected parameter 'migrationType' to be non-null");
            $.replicationInstanceArn = Objects.requireNonNull($.replicationInstanceArn, "expected parameter 'replicationInstanceArn' to be non-null");
            $.replicationTaskId = Objects.requireNonNull($.replicationTaskId, "expected parameter 'replicationTaskId' to be non-null");
            $.sourceEndpointArn = Objects.requireNonNull($.sourceEndpointArn, "expected parameter 'sourceEndpointArn' to be non-null");
            $.tableMappings = Objects.requireNonNull($.tableMappings, "expected parameter 'tableMappings' to be non-null");
            $.targetEndpointArn = Objects.requireNonNull($.targetEndpointArn, "expected parameter 'targetEndpointArn' to be non-null");
            return $;
        }
    }

}
