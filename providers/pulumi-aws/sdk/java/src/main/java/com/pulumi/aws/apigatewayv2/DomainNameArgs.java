// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigatewayv2;

import com.pulumi.aws.apigatewayv2.inputs.DomainNameDomainNameConfigurationArgs;
import com.pulumi.aws.apigatewayv2.inputs.DomainNameMutualTlsAuthenticationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainNameArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainNameArgs Empty = new DomainNameArgs();

    /**
     * The domain name. Must be between 1 and 512 characters in length.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The domain name configuration.
     * 
     */
    @Import(name="domainNameConfiguration", required=true)
    private Output<DomainNameDomainNameConfigurationArgs> domainNameConfiguration;

    public Output<DomainNameDomainNameConfigurationArgs> domainNameConfiguration() {
        return this.domainNameConfiguration;
    }

    /**
     * The mutual TLS authentication configuration for the domain name.
     * 
     */
    @Import(name="mutualTlsAuthentication")
    private @Nullable Output<DomainNameMutualTlsAuthenticationArgs> mutualTlsAuthentication;

    public Optional<Output<DomainNameMutualTlsAuthenticationArgs>> mutualTlsAuthentication() {
        return Optional.ofNullable(this.mutualTlsAuthentication);
    }

    /**
     * A map of tags to assign to the domain name. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DomainNameArgs() {}

    private DomainNameArgs(DomainNameArgs $) {
        this.domainName = $.domainName;
        this.domainNameConfiguration = $.domainNameConfiguration;
        this.mutualTlsAuthentication = $.mutualTlsAuthentication;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainNameArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainNameArgs $;

        public Builder() {
            $ = new DomainNameArgs();
        }

        public Builder(DomainNameArgs defaults) {
            $ = new DomainNameArgs(Objects.requireNonNull(defaults));
        }

        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder domainNameConfiguration(Output<DomainNameDomainNameConfigurationArgs> domainNameConfiguration) {
            $.domainNameConfiguration = domainNameConfiguration;
            return this;
        }

        public Builder domainNameConfiguration(DomainNameDomainNameConfigurationArgs domainNameConfiguration) {
            return domainNameConfiguration(Output.of(domainNameConfiguration));
        }

        public Builder mutualTlsAuthentication(@Nullable Output<DomainNameMutualTlsAuthenticationArgs> mutualTlsAuthentication) {
            $.mutualTlsAuthentication = mutualTlsAuthentication;
            return this;
        }

        public Builder mutualTlsAuthentication(DomainNameMutualTlsAuthenticationArgs mutualTlsAuthentication) {
            return mutualTlsAuthentication(Output.of(mutualTlsAuthentication));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DomainNameArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.domainNameConfiguration = Objects.requireNonNull($.domainNameConfiguration, "expected parameter 'domainNameConfiguration' to be non-null");
            return $;
        }
    }

}
