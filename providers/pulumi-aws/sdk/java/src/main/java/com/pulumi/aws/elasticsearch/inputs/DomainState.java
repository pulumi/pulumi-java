// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticsearch.inputs;

import com.pulumi.aws.elasticsearch.inputs.DomainAdvancedSecurityOptionsGetArgs;
import com.pulumi.aws.elasticsearch.inputs.DomainAutoTuneOptionsGetArgs;
import com.pulumi.aws.elasticsearch.inputs.DomainClusterConfigGetArgs;
import com.pulumi.aws.elasticsearch.inputs.DomainCognitoOptionsGetArgs;
import com.pulumi.aws.elasticsearch.inputs.DomainDomainEndpointOptionsGetArgs;
import com.pulumi.aws.elasticsearch.inputs.DomainEbsOptionsGetArgs;
import com.pulumi.aws.elasticsearch.inputs.DomainEncryptAtRestGetArgs;
import com.pulumi.aws.elasticsearch.inputs.DomainLogPublishingOptionGetArgs;
import com.pulumi.aws.elasticsearch.inputs.DomainNodeToNodeEncryptionGetArgs;
import com.pulumi.aws.elasticsearch.inputs.DomainSnapshotOptionsGetArgs;
import com.pulumi.aws.elasticsearch.inputs.DomainVpcOptionsGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainState extends com.pulumi.resources.ResourceArgs {

    public static final DomainState Empty = new DomainState();

    /**
     * IAM policy document specifying the access policies for the domain.
     * 
     */
    @Import(name="accessPolicies")
    private @Nullable Output<String> accessPolicies;

    public Optional<Output<String>> accessPolicies() {
        return Optional.ofNullable(this.accessPolicies);
    }

    @Import(name="advancedOptions")
    private @Nullable Output<Map<String,String>> advancedOptions;

    public Optional<Output<Map<String,String>>> advancedOptions() {
        return Optional.ofNullable(this.advancedOptions);
    }

    /**
     * Configuration block for [fine-grained access control](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/fgac.html). Detailed below.
     * 
     */
    @Import(name="advancedSecurityOptions")
    private @Nullable Output<DomainAdvancedSecurityOptionsGetArgs> advancedSecurityOptions;

    public Optional<Output<DomainAdvancedSecurityOptionsGetArgs>> advancedSecurityOptions() {
        return Optional.ofNullable(this.advancedSecurityOptions);
    }

    /**
     * ARN of the domain.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Configuration block for the Auto-Tune options of the domain. Detailed below.
     * 
     */
    @Import(name="autoTuneOptions")
    private @Nullable Output<DomainAutoTuneOptionsGetArgs> autoTuneOptions;

    public Optional<Output<DomainAutoTuneOptionsGetArgs>> autoTuneOptions() {
        return Optional.ofNullable(this.autoTuneOptions);
    }

    /**
     * Configuration block for the cluster of the domain. Detailed below.
     * 
     */
    @Import(name="clusterConfig")
    private @Nullable Output<DomainClusterConfigGetArgs> clusterConfig;

    public Optional<Output<DomainClusterConfigGetArgs>> clusterConfig() {
        return Optional.ofNullable(this.clusterConfig);
    }

    /**
     * Configuration block for authenticating Kibana with Cognito. Detailed below.
     * 
     */
    @Import(name="cognitoOptions")
    private @Nullable Output<DomainCognitoOptionsGetArgs> cognitoOptions;

    public Optional<Output<DomainCognitoOptionsGetArgs>> cognitoOptions() {
        return Optional.ofNullable(this.cognitoOptions);
    }

    /**
     * Configuration block for domain endpoint HTTP(S) related options. Detailed below.
     * 
     */
    @Import(name="domainEndpointOptions")
    private @Nullable Output<DomainDomainEndpointOptionsGetArgs> domainEndpointOptions;

    public Optional<Output<DomainDomainEndpointOptionsGetArgs>> domainEndpointOptions() {
        return Optional.ofNullable(this.domainEndpointOptions);
    }

    /**
     * Unique identifier for the domain.
     * 
     */
    @Import(name="domainId")
    private @Nullable Output<String> domainId;

    public Optional<Output<String>> domainId() {
        return Optional.ofNullable(this.domainId);
    }

    /**
     * Name of the domain.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * Configuration block for EBS related options, may be required based on chosen [instance size](https://aws.amazon.com/elasticsearch-service/pricing/). Detailed below.
     * 
     */
    @Import(name="ebsOptions")
    private @Nullable Output<DomainEbsOptionsGetArgs> ebsOptions;

    public Optional<Output<DomainEbsOptionsGetArgs>> ebsOptions() {
        return Optional.ofNullable(this.ebsOptions);
    }

    /**
     * Version of Elasticsearch to deploy. Defaults to `1.5`.
     * 
     */
    @Import(name="elasticsearchVersion")
    private @Nullable Output<String> elasticsearchVersion;

    public Optional<Output<String>> elasticsearchVersion() {
        return Optional.ofNullable(this.elasticsearchVersion);
    }

    /**
     * Configuration block for encrypt at rest options. Only available for [certain instance types](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/aes-supported-instance-types.html). Detailed below.
     * 
     */
    @Import(name="encryptAtRest")
    private @Nullable Output<DomainEncryptAtRestGetArgs> encryptAtRest;

    public Optional<Output<DomainEncryptAtRestGetArgs>> encryptAtRest() {
        return Optional.ofNullable(this.encryptAtRest);
    }

    /**
     * Domain-specific endpoint used to submit index, search, and data upload requests.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * Domain-specific endpoint for kibana without https scheme.
     * 
     */
    @Import(name="kibanaEndpoint")
    private @Nullable Output<String> kibanaEndpoint;

    public Optional<Output<String>> kibanaEndpoint() {
        return Optional.ofNullable(this.kibanaEndpoint);
    }

    /**
     * Configuration block for publishing slow and application logs to CloudWatch Logs. This block can be declared multiple times, for each log_type, within the same resource. Detailed below.
     * 
     */
    @Import(name="logPublishingOptions")
    private @Nullable Output<List<DomainLogPublishingOptionGetArgs>> logPublishingOptions;

    public Optional<Output<List<DomainLogPublishingOptionGetArgs>>> logPublishingOptions() {
        return Optional.ofNullable(this.logPublishingOptions);
    }

    /**
     * Configuration block for node-to-node encryption options. Detailed below.
     * 
     */
    @Import(name="nodeToNodeEncryption")
    private @Nullable Output<DomainNodeToNodeEncryptionGetArgs> nodeToNodeEncryption;

    public Optional<Output<DomainNodeToNodeEncryptionGetArgs>> nodeToNodeEncryption() {
        return Optional.ofNullable(this.nodeToNodeEncryption);
    }

    /**
     * Configuration block for snapshot related options. Detailed below. DEPRECATED. For domains running Elasticsearch 5.3 and later, Amazon ES takes hourly automated snapshots, making this setting irrelevant. For domains running earlier versions of Elasticsearch, Amazon ES takes daily automated snapshots.
     * 
     */
    @Import(name="snapshotOptions")
    private @Nullable Output<DomainSnapshotOptionsGetArgs> snapshotOptions;

    public Optional<Output<DomainSnapshotOptionsGetArgs>> snapshotOptions() {
        return Optional.ofNullable(this.snapshotOptions);
    }

    /**
     * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Configuration block for VPC related options. Adding or removing this configuration forces a new resource ([documentation](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-vpc-limitations)). Detailed below.
     * 
     */
    @Import(name="vpcOptions")
    private @Nullable Output<DomainVpcOptionsGetArgs> vpcOptions;

    public Optional<Output<DomainVpcOptionsGetArgs>> vpcOptions() {
        return Optional.ofNullable(this.vpcOptions);
    }

    private DomainState() {}

    private DomainState(DomainState $) {
        this.accessPolicies = $.accessPolicies;
        this.advancedOptions = $.advancedOptions;
        this.advancedSecurityOptions = $.advancedSecurityOptions;
        this.arn = $.arn;
        this.autoTuneOptions = $.autoTuneOptions;
        this.clusterConfig = $.clusterConfig;
        this.cognitoOptions = $.cognitoOptions;
        this.domainEndpointOptions = $.domainEndpointOptions;
        this.domainId = $.domainId;
        this.domainName = $.domainName;
        this.ebsOptions = $.ebsOptions;
        this.elasticsearchVersion = $.elasticsearchVersion;
        this.encryptAtRest = $.encryptAtRest;
        this.endpoint = $.endpoint;
        this.kibanaEndpoint = $.kibanaEndpoint;
        this.logPublishingOptions = $.logPublishingOptions;
        this.nodeToNodeEncryption = $.nodeToNodeEncryption;
        this.snapshotOptions = $.snapshotOptions;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.vpcOptions = $.vpcOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainState $;

        public Builder() {
            $ = new DomainState();
        }

        public Builder(DomainState defaults) {
            $ = new DomainState(Objects.requireNonNull(defaults));
        }

        public Builder accessPolicies(@Nullable Output<String> accessPolicies) {
            $.accessPolicies = accessPolicies;
            return this;
        }

        public Builder accessPolicies(String accessPolicies) {
            return accessPolicies(Output.of(accessPolicies));
        }

        public Builder advancedOptions(@Nullable Output<Map<String,String>> advancedOptions) {
            $.advancedOptions = advancedOptions;
            return this;
        }

        public Builder advancedOptions(Map<String,String> advancedOptions) {
            return advancedOptions(Output.of(advancedOptions));
        }

        public Builder advancedSecurityOptions(@Nullable Output<DomainAdvancedSecurityOptionsGetArgs> advancedSecurityOptions) {
            $.advancedSecurityOptions = advancedSecurityOptions;
            return this;
        }

        public Builder advancedSecurityOptions(DomainAdvancedSecurityOptionsGetArgs advancedSecurityOptions) {
            return advancedSecurityOptions(Output.of(advancedSecurityOptions));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder autoTuneOptions(@Nullable Output<DomainAutoTuneOptionsGetArgs> autoTuneOptions) {
            $.autoTuneOptions = autoTuneOptions;
            return this;
        }

        public Builder autoTuneOptions(DomainAutoTuneOptionsGetArgs autoTuneOptions) {
            return autoTuneOptions(Output.of(autoTuneOptions));
        }

        public Builder clusterConfig(@Nullable Output<DomainClusterConfigGetArgs> clusterConfig) {
            $.clusterConfig = clusterConfig;
            return this;
        }

        public Builder clusterConfig(DomainClusterConfigGetArgs clusterConfig) {
            return clusterConfig(Output.of(clusterConfig));
        }

        public Builder cognitoOptions(@Nullable Output<DomainCognitoOptionsGetArgs> cognitoOptions) {
            $.cognitoOptions = cognitoOptions;
            return this;
        }

        public Builder cognitoOptions(DomainCognitoOptionsGetArgs cognitoOptions) {
            return cognitoOptions(Output.of(cognitoOptions));
        }

        public Builder domainEndpointOptions(@Nullable Output<DomainDomainEndpointOptionsGetArgs> domainEndpointOptions) {
            $.domainEndpointOptions = domainEndpointOptions;
            return this;
        }

        public Builder domainEndpointOptions(DomainDomainEndpointOptionsGetArgs domainEndpointOptions) {
            return domainEndpointOptions(Output.of(domainEndpointOptions));
        }

        public Builder domainId(@Nullable Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder ebsOptions(@Nullable Output<DomainEbsOptionsGetArgs> ebsOptions) {
            $.ebsOptions = ebsOptions;
            return this;
        }

        public Builder ebsOptions(DomainEbsOptionsGetArgs ebsOptions) {
            return ebsOptions(Output.of(ebsOptions));
        }

        public Builder elasticsearchVersion(@Nullable Output<String> elasticsearchVersion) {
            $.elasticsearchVersion = elasticsearchVersion;
            return this;
        }

        public Builder elasticsearchVersion(String elasticsearchVersion) {
            return elasticsearchVersion(Output.of(elasticsearchVersion));
        }

        public Builder encryptAtRest(@Nullable Output<DomainEncryptAtRestGetArgs> encryptAtRest) {
            $.encryptAtRest = encryptAtRest;
            return this;
        }

        public Builder encryptAtRest(DomainEncryptAtRestGetArgs encryptAtRest) {
            return encryptAtRest(Output.of(encryptAtRest));
        }

        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder kibanaEndpoint(@Nullable Output<String> kibanaEndpoint) {
            $.kibanaEndpoint = kibanaEndpoint;
            return this;
        }

        public Builder kibanaEndpoint(String kibanaEndpoint) {
            return kibanaEndpoint(Output.of(kibanaEndpoint));
        }

        public Builder logPublishingOptions(@Nullable Output<List<DomainLogPublishingOptionGetArgs>> logPublishingOptions) {
            $.logPublishingOptions = logPublishingOptions;
            return this;
        }

        public Builder logPublishingOptions(List<DomainLogPublishingOptionGetArgs> logPublishingOptions) {
            return logPublishingOptions(Output.of(logPublishingOptions));
        }

        public Builder logPublishingOptions(DomainLogPublishingOptionGetArgs... logPublishingOptions) {
            return logPublishingOptions(List.of(logPublishingOptions));
        }

        public Builder nodeToNodeEncryption(@Nullable Output<DomainNodeToNodeEncryptionGetArgs> nodeToNodeEncryption) {
            $.nodeToNodeEncryption = nodeToNodeEncryption;
            return this;
        }

        public Builder nodeToNodeEncryption(DomainNodeToNodeEncryptionGetArgs nodeToNodeEncryption) {
            return nodeToNodeEncryption(Output.of(nodeToNodeEncryption));
        }

        public Builder snapshotOptions(@Nullable Output<DomainSnapshotOptionsGetArgs> snapshotOptions) {
            $.snapshotOptions = snapshotOptions;
            return this;
        }

        public Builder snapshotOptions(DomainSnapshotOptionsGetArgs snapshotOptions) {
            return snapshotOptions(Output.of(snapshotOptions));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder vpcOptions(@Nullable Output<DomainVpcOptionsGetArgs> vpcOptions) {
            $.vpcOptions = vpcOptions;
            return this;
        }

        public Builder vpcOptions(DomainVpcOptionsGetArgs vpcOptions) {
            return vpcOptions(Output.of(vpcOptions));
        }

        public DomainState build() {
            return $;
        }
    }

}
