// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.resourcegroupstaggingapi.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetResourcesResourceTagMappingListComplianceDetail extends com.pulumi.resources.InvokeArgs {

    public static final GetResourcesResourceTagMappingListComplianceDetail Empty = new GetResourcesResourceTagMappingListComplianceDetail();

    /**
     * Whether the resource is compliant.
     * * ` keys_with_noncompliant_values  ` - Set of tag keys with non-compliant tag values.
     * * ` non_compliant_keys  ` - Set of non-compliant tag keys.
     * 
     */
    @Import(name="complianceStatus", required=true)
    private Boolean complianceStatus;

    /**
     * @return Whether the resource is compliant.
     * * ` keys_with_noncompliant_values  ` - Set of tag keys with non-compliant tag values.
     * * ` non_compliant_keys  ` - Set of non-compliant tag keys.
     * 
     */
    public Boolean complianceStatus() {
        return this.complianceStatus;
    }

    @Import(name="keysWithNoncompliantValues", required=true)
    private List<String> keysWithNoncompliantValues;

    public List<String> keysWithNoncompliantValues() {
        return this.keysWithNoncompliantValues;
    }

    @Import(name="nonCompliantKeys", required=true)
    private List<String> nonCompliantKeys;

    public List<String> nonCompliantKeys() {
        return this.nonCompliantKeys;
    }

    private GetResourcesResourceTagMappingListComplianceDetail() {}

    private GetResourcesResourceTagMappingListComplianceDetail(GetResourcesResourceTagMappingListComplianceDetail $) {
        this.complianceStatus = $.complianceStatus;
        this.keysWithNoncompliantValues = $.keysWithNoncompliantValues;
        this.nonCompliantKeys = $.nonCompliantKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetResourcesResourceTagMappingListComplianceDetail defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetResourcesResourceTagMappingListComplianceDetail $;

        public Builder() {
            $ = new GetResourcesResourceTagMappingListComplianceDetail();
        }

        public Builder(GetResourcesResourceTagMappingListComplianceDetail defaults) {
            $ = new GetResourcesResourceTagMappingListComplianceDetail(Objects.requireNonNull(defaults));
        }

        /**
         * @param complianceStatus Whether the resource is compliant.
         * * ` keys_with_noncompliant_values  ` - Set of tag keys with non-compliant tag values.
         * * ` non_compliant_keys  ` - Set of non-compliant tag keys.
         * 
         * @return builder
         * 
         */
        public Builder complianceStatus(Boolean complianceStatus) {
            $.complianceStatus = complianceStatus;
            return this;
        }

        public Builder keysWithNoncompliantValues(List<String> keysWithNoncompliantValues) {
            $.keysWithNoncompliantValues = keysWithNoncompliantValues;
            return this;
        }

        public Builder keysWithNoncompliantValues(String... keysWithNoncompliantValues) {
            return keysWithNoncompliantValues(List.of(keysWithNoncompliantValues));
        }

        public Builder nonCompliantKeys(List<String> nonCompliantKeys) {
            $.nonCompliantKeys = nonCompliantKeys;
            return this;
        }

        public Builder nonCompliantKeys(String... nonCompliantKeys) {
            return nonCompliantKeys(List.of(nonCompliantKeys));
        }

        public GetResourcesResourceTagMappingListComplianceDetail build() {
            $.complianceStatus = Objects.requireNonNull($.complianceStatus, "expected parameter 'complianceStatus' to be non-null");
            $.keysWithNoncompliantValues = Objects.requireNonNull($.keysWithNoncompliantValues, "expected parameter 'keysWithNoncompliantValues' to be non-null");
            $.nonCompliantKeys = Objects.requireNonNull($.nonCompliantKeys, "expected parameter 'nonCompliantKeys' to be non-null");
            return $;
        }
    }

}
