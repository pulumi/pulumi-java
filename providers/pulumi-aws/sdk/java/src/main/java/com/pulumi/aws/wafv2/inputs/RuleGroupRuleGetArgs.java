// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.wafv2.inputs;

import com.pulumi.aws.wafv2.inputs.RuleGroupRuleActionGetArgs;
import com.pulumi.aws.wafv2.inputs.RuleGroupRuleRuleLabelGetArgs;
import com.pulumi.aws.wafv2.inputs.RuleGroupRuleStatementGetArgs;
import com.pulumi.aws.wafv2.inputs.RuleGroupRuleVisibilityConfigGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RuleGroupRuleGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleGroupRuleGetArgs Empty = new RuleGroupRuleGetArgs();

    /**
     * The action that AWS WAF should take on a web request when it matches the rule&#39;s statement. Settings at the `aws.wafv2.WebAcl` level can override the rule action setting. See Action below for details.
     * 
     */
    @Import(name="action", required=true)
      private final Output<RuleGroupRuleActionGetArgs> action;

    public Output<RuleGroupRuleActionGetArgs> action() {
        return this.action;
    }

    /**
     * A friendly name of the rule.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * If you define more than one Rule in a WebACL, AWS WAF evaluates each request against the `rules` in order based on the value of `priority`. AWS WAF processes rules with lower priority first.
     * 
     */
    @Import(name="priority", required=true)
      private final Output<Integer> priority;

    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * Labels to apply to web requests that match the rule match statement. See Rule Label below for details.
     * 
     */
    @Import(name="ruleLabels")
      private final @Nullable Output<List<RuleGroupRuleRuleLabelGetArgs>> ruleLabels;

    public Output<List<RuleGroupRuleRuleLabelGetArgs>> ruleLabels() {
        return this.ruleLabels == null ? Codegen.empty() : this.ruleLabels;
    }

    /**
     * The AWS WAF processing statement for the rule, for example `byte_match_statement` or `geo_match_statement`. See Statement below for details.
     * 
     */
    @Import(name="statement", required=true)
      private final Output<RuleGroupRuleStatementGetArgs> statement;

    public Output<RuleGroupRuleStatementGetArgs> statement() {
        return this.statement;
    }

    /**
     * Defines and enables Amazon CloudWatch metrics and web request sample collection. See Visibility Configuration below for details.
     * 
     */
    @Import(name="visibilityConfig", required=true)
      private final Output<RuleGroupRuleVisibilityConfigGetArgs> visibilityConfig;

    public Output<RuleGroupRuleVisibilityConfigGetArgs> visibilityConfig() {
        return this.visibilityConfig;
    }

    public RuleGroupRuleGetArgs(
        Output<RuleGroupRuleActionGetArgs> action,
        Output<String> name,
        Output<Integer> priority,
        @Nullable Output<List<RuleGroupRuleRuleLabelGetArgs>> ruleLabels,
        Output<RuleGroupRuleStatementGetArgs> statement,
        Output<RuleGroupRuleVisibilityConfigGetArgs> visibilityConfig) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.priority = Objects.requireNonNull(priority, "expected parameter 'priority' to be non-null");
        this.ruleLabels = ruleLabels;
        this.statement = Objects.requireNonNull(statement, "expected parameter 'statement' to be non-null");
        this.visibilityConfig = Objects.requireNonNull(visibilityConfig, "expected parameter 'visibilityConfig' to be non-null");
    }

    private RuleGroupRuleGetArgs() {
        this.action = Codegen.empty();
        this.name = Codegen.empty();
        this.priority = Codegen.empty();
        this.ruleLabels = Codegen.empty();
        this.statement = Codegen.empty();
        this.visibilityConfig = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleGroupRuleGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<RuleGroupRuleActionGetArgs> action;
        private Output<String> name;
        private Output<Integer> priority;
        private @Nullable Output<List<RuleGroupRuleRuleLabelGetArgs>> ruleLabels;
        private Output<RuleGroupRuleStatementGetArgs> statement;
        private Output<RuleGroupRuleVisibilityConfigGetArgs> visibilityConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(RuleGroupRuleGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.ruleLabels = defaults.ruleLabels;
    	      this.statement = defaults.statement;
    	      this.visibilityConfig = defaults.visibilityConfig;
        }

        public Builder action(Output<RuleGroupRuleActionGetArgs> action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder action(RuleGroupRuleActionGetArgs action) {
            this.action = Output.of(Objects.requireNonNull(action));
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder priority(Output<Integer> priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        public Builder priority(Integer priority) {
            this.priority = Output.of(Objects.requireNonNull(priority));
            return this;
        }
        public Builder ruleLabels(@Nullable Output<List<RuleGroupRuleRuleLabelGetArgs>> ruleLabels) {
            this.ruleLabels = ruleLabels;
            return this;
        }
        public Builder ruleLabels(@Nullable List<RuleGroupRuleRuleLabelGetArgs> ruleLabels) {
            this.ruleLabels = Codegen.ofNullable(ruleLabels);
            return this;
        }
        public Builder ruleLabels(RuleGroupRuleRuleLabelGetArgs... ruleLabels) {
            return ruleLabels(List.of(ruleLabels));
        }
        public Builder statement(Output<RuleGroupRuleStatementGetArgs> statement) {
            this.statement = Objects.requireNonNull(statement);
            return this;
        }
        public Builder statement(RuleGroupRuleStatementGetArgs statement) {
            this.statement = Output.of(Objects.requireNonNull(statement));
            return this;
        }
        public Builder visibilityConfig(Output<RuleGroupRuleVisibilityConfigGetArgs> visibilityConfig) {
            this.visibilityConfig = Objects.requireNonNull(visibilityConfig);
            return this;
        }
        public Builder visibilityConfig(RuleGroupRuleVisibilityConfigGetArgs visibilityConfig) {
            this.visibilityConfig = Output.of(Objects.requireNonNull(visibilityConfig));
            return this;
        }        public RuleGroupRuleGetArgs build() {
            return new RuleGroupRuleGetArgs(action, name, priority, ruleLabels, statement, visibilityConfig);
        }
    }
}
