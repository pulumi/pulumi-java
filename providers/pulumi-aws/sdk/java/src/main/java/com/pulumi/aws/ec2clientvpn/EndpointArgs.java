// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2clientvpn;

import com.pulumi.aws.ec2clientvpn.inputs.EndpointAuthenticationOptionArgs;
import com.pulumi.aws.ec2clientvpn.inputs.EndpointConnectionLogOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * Information about the authentication method to be used to authenticate clients.
     * 
     */
    @Import(name="authenticationOptions", required=true)
    private Output<List<EndpointAuthenticationOptionArgs>> authenticationOptions;

    public Output<List<EndpointAuthenticationOptionArgs>> authenticationOptions() {
        return this.authenticationOptions;
    }

    /**
     * The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
     * 
     */
    @Import(name="clientCidrBlock", required=true)
    private Output<String> clientCidrBlock;

    public Output<String> clientCidrBlock() {
        return this.clientCidrBlock;
    }

    /**
     * Information about the client connection logging options.
     * 
     */
    @Import(name="connectionLogOptions", required=true)
    private Output<EndpointConnectionLogOptionsArgs> connectionLogOptions;

    public Output<EndpointConnectionLogOptionsArgs> connectionLogOptions() {
        return this.connectionLogOptions;
    }

    /**
     * A brief description of the Client VPN endpoint.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
     * 
     */
    @Import(name="selfServicePortal")
    private @Nullable Output<String> selfServicePortal;

    public Optional<Output<String>> selfServicePortal() {
        return Optional.ofNullable(this.selfServicePortal);
    }

    /**
     * The ARN of the ACM server certificate.
     * 
     */
    @Import(name="serverCertificateArn", required=true)
    private Output<String> serverCertificateArn;

    public Output<String> serverCertificateArn() {
        return this.serverCertificateArn;
    }

    /**
     * Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
     * 
     */
    @Import(name="splitTunnel")
    private @Nullable Output<Boolean> splitTunnel;

    public Optional<Output<Boolean>> splitTunnel() {
        return Optional.ofNullable(this.splitTunnel);
    }

    /**
     * A mapping of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The transport protocol to be used by the VPN session. Default value is `udp`.
     * 
     */
    @Import(name="transportProtocol")
    private @Nullable Output<String> transportProtocol;

    public Optional<Output<String>> transportProtocol() {
        return Optional.ofNullable(this.transportProtocol);
    }

    private EndpointArgs() {}

    private EndpointArgs(EndpointArgs $) {
        this.authenticationOptions = $.authenticationOptions;
        this.clientCidrBlock = $.clientCidrBlock;
        this.connectionLogOptions = $.connectionLogOptions;
        this.description = $.description;
        this.dnsServers = $.dnsServers;
        this.selfServicePortal = $.selfServicePortal;
        this.serverCertificateArn = $.serverCertificateArn;
        this.splitTunnel = $.splitTunnel;
        this.tags = $.tags;
        this.transportProtocol = $.transportProtocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointArgs $;

        public Builder() {
            $ = new EndpointArgs();
        }

        public Builder(EndpointArgs defaults) {
            $ = new EndpointArgs(Objects.requireNonNull(defaults));
        }

        public Builder authenticationOptions(Output<List<EndpointAuthenticationOptionArgs>> authenticationOptions) {
            $.authenticationOptions = authenticationOptions;
            return this;
        }

        public Builder authenticationOptions(List<EndpointAuthenticationOptionArgs> authenticationOptions) {
            return authenticationOptions(Output.of(authenticationOptions));
        }

        public Builder authenticationOptions(EndpointAuthenticationOptionArgs... authenticationOptions) {
            return authenticationOptions(List.of(authenticationOptions));
        }

        public Builder clientCidrBlock(Output<String> clientCidrBlock) {
            $.clientCidrBlock = clientCidrBlock;
            return this;
        }

        public Builder clientCidrBlock(String clientCidrBlock) {
            return clientCidrBlock(Output.of(clientCidrBlock));
        }

        public Builder connectionLogOptions(Output<EndpointConnectionLogOptionsArgs> connectionLogOptions) {
            $.connectionLogOptions = connectionLogOptions;
            return this;
        }

        public Builder connectionLogOptions(EndpointConnectionLogOptionsArgs connectionLogOptions) {
            return connectionLogOptions(Output.of(connectionLogOptions));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        public Builder selfServicePortal(@Nullable Output<String> selfServicePortal) {
            $.selfServicePortal = selfServicePortal;
            return this;
        }

        public Builder selfServicePortal(String selfServicePortal) {
            return selfServicePortal(Output.of(selfServicePortal));
        }

        public Builder serverCertificateArn(Output<String> serverCertificateArn) {
            $.serverCertificateArn = serverCertificateArn;
            return this;
        }

        public Builder serverCertificateArn(String serverCertificateArn) {
            return serverCertificateArn(Output.of(serverCertificateArn));
        }

        public Builder splitTunnel(@Nullable Output<Boolean> splitTunnel) {
            $.splitTunnel = splitTunnel;
            return this;
        }

        public Builder splitTunnel(Boolean splitTunnel) {
            return splitTunnel(Output.of(splitTunnel));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder transportProtocol(@Nullable Output<String> transportProtocol) {
            $.transportProtocol = transportProtocol;
            return this;
        }

        public Builder transportProtocol(String transportProtocol) {
            return transportProtocol(Output.of(transportProtocol));
        }

        public EndpointArgs build() {
            $.authenticationOptions = Objects.requireNonNull($.authenticationOptions, "expected parameter 'authenticationOptions' to be non-null");
            $.clientCidrBlock = Objects.requireNonNull($.clientCidrBlock, "expected parameter 'clientCidrBlock' to be non-null");
            $.connectionLogOptions = Objects.requireNonNull($.connectionLogOptions, "expected parameter 'connectionLogOptions' to be non-null");
            $.serverCertificateArn = Objects.requireNonNull($.serverCertificateArn, "expected parameter 'serverCertificateArn' to be non-null");
            return $;
        }
    }

}
