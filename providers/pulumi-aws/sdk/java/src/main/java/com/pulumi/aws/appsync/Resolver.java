// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync;

import com.pulumi.aws.Utilities;
import com.pulumi.aws.appsync.ResolverArgs;
import com.pulumi.aws.appsync.inputs.ResolverState;
import com.pulumi.aws.appsync.outputs.ResolverCachingConfig;
import com.pulumi.aws.appsync.outputs.ResolverPipelineConfig;
import com.pulumi.aws.appsync.outputs.ResolverSyncConfig;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides an AppSync Resolver.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * `aws_appsync_resolver` can be imported with their `api_id`, a hyphen, `type`, a hypen and `field` e.g.,
 * 
 * ```sh
 *  $ pulumi import aws:appsync/resolver:Resolver example abcdef123456-exampleType-exampleField
 * ```
 * 
 */
@ResourceType(type="aws:appsync/resolver:Resolver")
public class Resolver extends com.pulumi.resources.CustomResource {
    /**
     * The API ID for the GraphQL API.
     * 
     */
    @Export(name="apiId", type=String.class, parameters={})
    private Output<String> apiId;

    /**
     * @return The API ID for the GraphQL API.
     * 
     */
    public Output<String> apiId() {
        return this.apiId;
    }
    /**
     * The ARN
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The ARN
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * The CachingConfig.
     * 
     */
    @Export(name="cachingConfig", type=ResolverCachingConfig.class, parameters={})
    private Output</* @Nullable */ ResolverCachingConfig> cachingConfig;

    /**
     * @return The CachingConfig.
     * 
     */
    public Output</* @Nullable */ ResolverCachingConfig> cachingConfig() {
        return this.cachingConfig;
    }
    /**
     * The DataSource name.
     * 
     */
    @Export(name="dataSource", type=String.class, parameters={})
    private Output</* @Nullable */ String> dataSource;

    /**
     * @return The DataSource name.
     * 
     */
    public Output</* @Nullable */ String> dataSource() {
        return this.dataSource;
    }
    /**
     * The field name from the schema defined in the GraphQL API.
     * 
     */
    @Export(name="field", type=String.class, parameters={})
    private Output<String> field;

    /**
     * @return The field name from the schema defined in the GraphQL API.
     * 
     */
    public Output<String> field() {
        return this.field;
    }
    /**
     * The resolver type. Valid values are `UNIT` and `PIPELINE`.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output</* @Nullable */ String> kind;

    /**
     * @return The resolver type. Valid values are `UNIT` and `PIPELINE`.
     * 
     */
    public Output</* @Nullable */ String> kind() {
        return this.kind;
    }
    /**
     * The maximum batching size for a resolver. Valid values are between `0` and `2000`.
     * 
     */
    @Export(name="maxBatchSize", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> maxBatchSize;

    /**
     * @return The maximum batching size for a resolver. Valid values are between `0` and `2000`.
     * 
     */
    public Output</* @Nullable */ Integer> maxBatchSize() {
        return this.maxBatchSize;
    }
    /**
     * The PipelineConfig.
     * 
     */
    @Export(name="pipelineConfig", type=ResolverPipelineConfig.class, parameters={})
    private Output</* @Nullable */ ResolverPipelineConfig> pipelineConfig;

    /**
     * @return The PipelineConfig.
     * 
     */
    public Output</* @Nullable */ ResolverPipelineConfig> pipelineConfig() {
        return this.pipelineConfig;
    }
    /**
     * The request mapping template for UNIT resolver or &#39;before mapping template&#39; for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    @Export(name="requestTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> requestTemplate;

    /**
     * @return The request mapping template for UNIT resolver or &#39;before mapping template&#39; for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    public Output</* @Nullable */ String> requestTemplate() {
        return this.requestTemplate;
    }
    /**
     * The response mapping template for UNIT resolver or &#39;after mapping template&#39; for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    @Export(name="responseTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> responseTemplate;

    /**
     * @return The response mapping template for UNIT resolver or &#39;after mapping template&#39; for PIPELINE resolver. Required for non-Lambda resolvers.
     * 
     */
    public Output</* @Nullable */ String> responseTemplate() {
        return this.responseTemplate;
    }
    /**
     * Describes a Sync configuration for a resolver. See Sync Config.
     * 
     */
    @Export(name="syncConfig", type=ResolverSyncConfig.class, parameters={})
    private Output</* @Nullable */ ResolverSyncConfig> syncConfig;

    /**
     * @return Describes a Sync configuration for a resolver. See Sync Config.
     * 
     */
    public Output</* @Nullable */ ResolverSyncConfig> syncConfig() {
        return this.syncConfig;
    }
    /**
     * The type name from the schema defined in the GraphQL API.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type name from the schema defined in the GraphQL API.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Resolver(String name) {
        this(name, ResolverArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Resolver(String name, ResolverArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Resolver(String name, ResolverArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:appsync/resolver:Resolver", name, args == null ? ResolverArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Resolver(String name, Output<String> id, @Nullable ResolverState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws:appsync/resolver:Resolver", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Resolver get(String name, Output<String> id, @Nullable ResolverState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Resolver(name, id, state, options);
    }
}
