// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcDhcpOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcDhcpOptionsArgs Empty = new VpcDhcpOptionsArgs();

    /**
     * the suffix domain name to use by default when resolving non Fully Qualified Domain Names. In other words, this is what ends up being the `search` value in the `/etc/resolv.conf` file.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * List of name servers to configure in `/etc/resolv.conf`. If you want to use the default AWS nameservers you should set this to `AmazonProvidedDNS`.
     * 
     */
    @Import(name="domainNameServers")
    private @Nullable Output<List<String>> domainNameServers;

    public Optional<Output<List<String>>> domainNameServers() {
        return Optional.ofNullable(this.domainNameServers);
    }

    /**
     * List of NETBIOS name servers.
     * 
     */
    @Import(name="netbiosNameServers")
    private @Nullable Output<List<String>> netbiosNameServers;

    public Optional<Output<List<String>>> netbiosNameServers() {
        return Optional.ofNullable(this.netbiosNameServers);
    }

    /**
     * The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
     * 
     */
    @Import(name="netbiosNodeType")
    private @Nullable Output<String> netbiosNodeType;

    public Optional<Output<String>> netbiosNodeType() {
        return Optional.ofNullable(this.netbiosNodeType);
    }

    /**
     * List of NTP servers to configure.
     * 
     */
    @Import(name="ntpServers")
    private @Nullable Output<List<String>> ntpServers;

    public Optional<Output<List<String>>> ntpServers() {
        return Optional.ofNullable(this.ntpServers);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private VpcDhcpOptionsArgs() {}

    private VpcDhcpOptionsArgs(VpcDhcpOptionsArgs $) {
        this.domainName = $.domainName;
        this.domainNameServers = $.domainNameServers;
        this.netbiosNameServers = $.netbiosNameServers;
        this.netbiosNodeType = $.netbiosNodeType;
        this.ntpServers = $.ntpServers;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcDhcpOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcDhcpOptionsArgs $;

        public Builder() {
            $ = new VpcDhcpOptionsArgs();
        }

        public Builder(VpcDhcpOptionsArgs defaults) {
            $ = new VpcDhcpOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder domainNameServers(@Nullable Output<List<String>> domainNameServers) {
            $.domainNameServers = domainNameServers;
            return this;
        }

        public Builder domainNameServers(List<String> domainNameServers) {
            return domainNameServers(Output.of(domainNameServers));
        }

        public Builder domainNameServers(String... domainNameServers) {
            return domainNameServers(List.of(domainNameServers));
        }

        public Builder netbiosNameServers(@Nullable Output<List<String>> netbiosNameServers) {
            $.netbiosNameServers = netbiosNameServers;
            return this;
        }

        public Builder netbiosNameServers(List<String> netbiosNameServers) {
            return netbiosNameServers(Output.of(netbiosNameServers));
        }

        public Builder netbiosNameServers(String... netbiosNameServers) {
            return netbiosNameServers(List.of(netbiosNameServers));
        }

        public Builder netbiosNodeType(@Nullable Output<String> netbiosNodeType) {
            $.netbiosNodeType = netbiosNodeType;
            return this;
        }

        public Builder netbiosNodeType(String netbiosNodeType) {
            return netbiosNodeType(Output.of(netbiosNodeType));
        }

        public Builder ntpServers(@Nullable Output<List<String>> ntpServers) {
            $.ntpServers = ntpServers;
            return this;
        }

        public Builder ntpServers(List<String> ntpServers) {
            return ntpServers(Output.of(ntpServers));
        }

        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public VpcDhcpOptionsArgs build() {
            return $;
        }
    }

}
