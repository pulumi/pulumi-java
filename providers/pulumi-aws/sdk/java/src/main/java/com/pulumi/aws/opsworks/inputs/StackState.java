// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.opsworks.inputs;

import com.pulumi.aws.opsworks.inputs.StackCustomCookbooksSourceGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StackState extends com.pulumi.resources.ResourceArgs {

    public static final StackState Empty = new StackState();

    /**
     * If set to `&#34;LATEST&#34;`, OpsWorks will automatically install the latest version.
     * 
     */
    @Import(name="agentVersion")
    private @Nullable Output<String> agentVersion;

    public Optional<Output<String>> agentVersion() {
        return Optional.ofNullable(this.agentVersion);
    }

    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * If `manage_berkshelf` is enabled, the version of Berkshelf to use.
     * 
     */
    @Import(name="berkshelfVersion")
    private @Nullable Output<String> berkshelfVersion;

    public Optional<Output<String>> berkshelfVersion() {
        return Optional.ofNullable(this.berkshelfVersion);
    }

    /**
     * Color to paint next to the stack&#39;s resources in the OpsWorks console.
     * 
     */
    @Import(name="color")
    private @Nullable Output<String> color;

    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * Name of the configuration manager to use. Defaults to &#34;Chef&#34;.
     * 
     */
    @Import(name="configurationManagerName")
    private @Nullable Output<String> configurationManagerName;

    public Optional<Output<String>> configurationManagerName() {
        return Optional.ofNullable(this.configurationManagerName);
    }

    /**
     * Version of the configuration manager to use. Defaults to &#34;11.4&#34;.
     * 
     */
    @Import(name="configurationManagerVersion")
    private @Nullable Output<String> configurationManagerVersion;

    public Optional<Output<String>> configurationManagerVersion() {
        return Optional.ofNullable(this.configurationManagerVersion);
    }

    /**
     * When `use_custom_cookbooks` is set, provide this sub-object as
     * described below.
     * 
     */
    @Import(name="customCookbooksSources")
    private @Nullable Output<List<StackCustomCookbooksSourceGetArgs>> customCookbooksSources;

    public Optional<Output<List<StackCustomCookbooksSourceGetArgs>>> customCookbooksSources() {
        return Optional.ofNullable(this.customCookbooksSources);
    }

    /**
     * Custom JSON attributes to apply to the entire stack.
     * 
     */
    @Import(name="customJson")
    private @Nullable Output<String> customJson;

    public Optional<Output<String>> customJson() {
        return Optional.ofNullable(this.customJson);
    }

    /**
     * Name of the availability zone where instances will be created
     * by default. This is required unless you set `vpc_id`.
     * 
     */
    @Import(name="defaultAvailabilityZone")
    private @Nullable Output<String> defaultAvailabilityZone;

    public Optional<Output<String>> defaultAvailabilityZone() {
        return Optional.ofNullable(this.defaultAvailabilityZone);
    }

    /**
     * The ARN of an IAM Instance Profile that created instances
     * will have by default.
     * 
     */
    @Import(name="defaultInstanceProfileArn")
    private @Nullable Output<String> defaultInstanceProfileArn;

    public Optional<Output<String>> defaultInstanceProfileArn() {
        return Optional.ofNullable(this.defaultInstanceProfileArn);
    }

    /**
     * Name of OS that will be installed on instances by default.
     * 
     */
    @Import(name="defaultOs")
    private @Nullable Output<String> defaultOs;

    public Optional<Output<String>> defaultOs() {
        return Optional.ofNullable(this.defaultOs);
    }

    /**
     * Name of the type of root device instances will have by default.
     * 
     */
    @Import(name="defaultRootDeviceType")
    private @Nullable Output<String> defaultRootDeviceType;

    public Optional<Output<String>> defaultRootDeviceType() {
        return Optional.ofNullable(this.defaultRootDeviceType);
    }

    /**
     * Name of the SSH keypair that instances will have by default.
     * 
     */
    @Import(name="defaultSshKeyName")
    private @Nullable Output<String> defaultSshKeyName;

    public Optional<Output<String>> defaultSshKeyName() {
        return Optional.ofNullable(this.defaultSshKeyName);
    }

    /**
     * Id of the subnet in which instances will be created by default. Mandatory
     * if `vpc_id` is set, and forbidden if it isn&#39;t.
     * 
     */
    @Import(name="defaultSubnetId")
    private @Nullable Output<String> defaultSubnetId;

    public Optional<Output<String>> defaultSubnetId() {
        return Optional.ofNullable(this.defaultSubnetId);
    }

    /**
     * Keyword representing the naming scheme that will be used for instance hostnames
     * within this stack.
     * 
     */
    @Import(name="hostnameTheme")
    private @Nullable Output<String> hostnameTheme;

    public Optional<Output<String>> hostnameTheme() {
        return Optional.ofNullable(this.hostnameTheme);
    }

    /**
     * Boolean value controlling whether Opsworks will run Berkshelf for this stack.
     * 
     */
    @Import(name="manageBerkshelf")
    private @Nullable Output<Boolean> manageBerkshelf;

    public Optional<Output<Boolean>> manageBerkshelf() {
        return Optional.ofNullable(this.manageBerkshelf);
    }

    /**
     * The name of the stack.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the region where the stack will exist.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The ARN of an IAM role that the OpsWorks service will act as.
     * 
     */
    @Import(name="serviceRoleArn")
    private @Nullable Output<String> serviceRoleArn;

    public Optional<Output<String>> serviceRoleArn() {
        return Optional.ofNullable(this.serviceRoleArn);
    }

    @Import(name="stackEndpoint")
    private @Nullable Output<String> stackEndpoint;

    public Optional<Output<String>> stackEndpoint() {
        return Optional.ofNullable(this.stackEndpoint);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Boolean value controlling whether the custom cookbook settings are
     * enabled.
     * 
     */
    @Import(name="useCustomCookbooks")
    private @Nullable Output<Boolean> useCustomCookbooks;

    public Optional<Output<Boolean>> useCustomCookbooks() {
        return Optional.ofNullable(this.useCustomCookbooks);
    }

    /**
     * Boolean value controlling whether the standard OpsWorks
     * security groups apply to created instances.
     * 
     */
    @Import(name="useOpsworksSecurityGroups")
    private @Nullable Output<Boolean> useOpsworksSecurityGroups;

    public Optional<Output<Boolean>> useOpsworksSecurityGroups() {
        return Optional.ofNullable(this.useOpsworksSecurityGroups);
    }

    /**
     * The id of the VPC that this stack belongs to.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private StackState() {}

    private StackState(StackState $) {
        this.agentVersion = $.agentVersion;
        this.arn = $.arn;
        this.berkshelfVersion = $.berkshelfVersion;
        this.color = $.color;
        this.configurationManagerName = $.configurationManagerName;
        this.configurationManagerVersion = $.configurationManagerVersion;
        this.customCookbooksSources = $.customCookbooksSources;
        this.customJson = $.customJson;
        this.defaultAvailabilityZone = $.defaultAvailabilityZone;
        this.defaultInstanceProfileArn = $.defaultInstanceProfileArn;
        this.defaultOs = $.defaultOs;
        this.defaultRootDeviceType = $.defaultRootDeviceType;
        this.defaultSshKeyName = $.defaultSshKeyName;
        this.defaultSubnetId = $.defaultSubnetId;
        this.hostnameTheme = $.hostnameTheme;
        this.manageBerkshelf = $.manageBerkshelf;
        this.name = $.name;
        this.region = $.region;
        this.serviceRoleArn = $.serviceRoleArn;
        this.stackEndpoint = $.stackEndpoint;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.useCustomCookbooks = $.useCustomCookbooks;
        this.useOpsworksSecurityGroups = $.useOpsworksSecurityGroups;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StackState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StackState $;

        public Builder() {
            $ = new StackState();
        }

        public Builder(StackState defaults) {
            $ = new StackState(Objects.requireNonNull(defaults));
        }

        public Builder agentVersion(@Nullable Output<String> agentVersion) {
            $.agentVersion = agentVersion;
            return this;
        }

        public Builder agentVersion(String agentVersion) {
            return agentVersion(Output.of(agentVersion));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder berkshelfVersion(@Nullable Output<String> berkshelfVersion) {
            $.berkshelfVersion = berkshelfVersion;
            return this;
        }

        public Builder berkshelfVersion(String berkshelfVersion) {
            return berkshelfVersion(Output.of(berkshelfVersion));
        }

        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        public Builder color(String color) {
            return color(Output.of(color));
        }

        public Builder configurationManagerName(@Nullable Output<String> configurationManagerName) {
            $.configurationManagerName = configurationManagerName;
            return this;
        }

        public Builder configurationManagerName(String configurationManagerName) {
            return configurationManagerName(Output.of(configurationManagerName));
        }

        public Builder configurationManagerVersion(@Nullable Output<String> configurationManagerVersion) {
            $.configurationManagerVersion = configurationManagerVersion;
            return this;
        }

        public Builder configurationManagerVersion(String configurationManagerVersion) {
            return configurationManagerVersion(Output.of(configurationManagerVersion));
        }

        public Builder customCookbooksSources(@Nullable Output<List<StackCustomCookbooksSourceGetArgs>> customCookbooksSources) {
            $.customCookbooksSources = customCookbooksSources;
            return this;
        }

        public Builder customCookbooksSources(List<StackCustomCookbooksSourceGetArgs> customCookbooksSources) {
            return customCookbooksSources(Output.of(customCookbooksSources));
        }

        public Builder customCookbooksSources(StackCustomCookbooksSourceGetArgs... customCookbooksSources) {
            return customCookbooksSources(List.of(customCookbooksSources));
        }

        public Builder customJson(@Nullable Output<String> customJson) {
            $.customJson = customJson;
            return this;
        }

        public Builder customJson(String customJson) {
            return customJson(Output.of(customJson));
        }

        public Builder defaultAvailabilityZone(@Nullable Output<String> defaultAvailabilityZone) {
            $.defaultAvailabilityZone = defaultAvailabilityZone;
            return this;
        }

        public Builder defaultAvailabilityZone(String defaultAvailabilityZone) {
            return defaultAvailabilityZone(Output.of(defaultAvailabilityZone));
        }

        public Builder defaultInstanceProfileArn(@Nullable Output<String> defaultInstanceProfileArn) {
            $.defaultInstanceProfileArn = defaultInstanceProfileArn;
            return this;
        }

        public Builder defaultInstanceProfileArn(String defaultInstanceProfileArn) {
            return defaultInstanceProfileArn(Output.of(defaultInstanceProfileArn));
        }

        public Builder defaultOs(@Nullable Output<String> defaultOs) {
            $.defaultOs = defaultOs;
            return this;
        }

        public Builder defaultOs(String defaultOs) {
            return defaultOs(Output.of(defaultOs));
        }

        public Builder defaultRootDeviceType(@Nullable Output<String> defaultRootDeviceType) {
            $.defaultRootDeviceType = defaultRootDeviceType;
            return this;
        }

        public Builder defaultRootDeviceType(String defaultRootDeviceType) {
            return defaultRootDeviceType(Output.of(defaultRootDeviceType));
        }

        public Builder defaultSshKeyName(@Nullable Output<String> defaultSshKeyName) {
            $.defaultSshKeyName = defaultSshKeyName;
            return this;
        }

        public Builder defaultSshKeyName(String defaultSshKeyName) {
            return defaultSshKeyName(Output.of(defaultSshKeyName));
        }

        public Builder defaultSubnetId(@Nullable Output<String> defaultSubnetId) {
            $.defaultSubnetId = defaultSubnetId;
            return this;
        }

        public Builder defaultSubnetId(String defaultSubnetId) {
            return defaultSubnetId(Output.of(defaultSubnetId));
        }

        public Builder hostnameTheme(@Nullable Output<String> hostnameTheme) {
            $.hostnameTheme = hostnameTheme;
            return this;
        }

        public Builder hostnameTheme(String hostnameTheme) {
            return hostnameTheme(Output.of(hostnameTheme));
        }

        public Builder manageBerkshelf(@Nullable Output<Boolean> manageBerkshelf) {
            $.manageBerkshelf = manageBerkshelf;
            return this;
        }

        public Builder manageBerkshelf(Boolean manageBerkshelf) {
            return manageBerkshelf(Output.of(manageBerkshelf));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder serviceRoleArn(@Nullable Output<String> serviceRoleArn) {
            $.serviceRoleArn = serviceRoleArn;
            return this;
        }

        public Builder serviceRoleArn(String serviceRoleArn) {
            return serviceRoleArn(Output.of(serviceRoleArn));
        }

        public Builder stackEndpoint(@Nullable Output<String> stackEndpoint) {
            $.stackEndpoint = stackEndpoint;
            return this;
        }

        public Builder stackEndpoint(String stackEndpoint) {
            return stackEndpoint(Output.of(stackEndpoint));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder useCustomCookbooks(@Nullable Output<Boolean> useCustomCookbooks) {
            $.useCustomCookbooks = useCustomCookbooks;
            return this;
        }

        public Builder useCustomCookbooks(Boolean useCustomCookbooks) {
            return useCustomCookbooks(Output.of(useCustomCookbooks));
        }

        public Builder useOpsworksSecurityGroups(@Nullable Output<Boolean> useOpsworksSecurityGroups) {
            $.useOpsworksSecurityGroups = useOpsworksSecurityGroups;
            return this;
        }

        public Builder useOpsworksSecurityGroups(Boolean useOpsworksSecurityGroups) {
            return useOpsworksSecurityGroups(Output.of(useOpsworksSecurityGroups));
        }

        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public StackState build() {
            return $;
        }
    }

}
