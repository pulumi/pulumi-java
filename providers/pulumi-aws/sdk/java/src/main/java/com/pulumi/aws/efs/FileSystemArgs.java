// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.efs;

import com.pulumi.aws.efs.inputs.FileSystemLifecyclePolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FileSystemArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileSystemArgs Empty = new FileSystemArgs();

    /**
     * the AWS Availability Zone in which to create the file system. Used to create a file system that uses One Zone storage classes. See [user guide](https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html) for more information.
     * 
     */
    @Import(name="availabilityZoneName")
      private final @Nullable Output<String> availabilityZoneName;

    public Output<String> availabilityZoneName() {
        return this.availabilityZoneName == null ? Codegen.empty() : this.availabilityZoneName;
    }

    /**
     * A unique name (a maximum of 64 characters are allowed)
     * used as reference when creating the Elastic File System to ensure idempotent file
     * system creation. By default generated by this provider. See [Elastic File System]
     * (http://docs.aws.amazon.com/efs/latest/ug/) user guide for more information.
     * 
     */
    @Import(name="creationToken")
      private final @Nullable Output<String> creationToken;

    public Output<String> creationToken() {
        return this.creationToken == null ? Codegen.empty() : this.creationToken;
    }

    /**
     * If true, the disk will be encrypted.
     * 
     */
    @Import(name="encrypted")
      private final @Nullable Output<Boolean> encrypted;

    public Output<Boolean> encrypted() {
        return this.encrypted == null ? Codegen.empty() : this.encrypted;
    }

    /**
     * The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
     * 
     */
    @Import(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> kmsKeyId() {
        return this.kmsKeyId == null ? Codegen.empty() : this.kmsKeyId;
    }

    /**
     * A file system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object (documented below).
     * 
     */
    @Import(name="lifecyclePolicy")
      private final @Nullable Output<FileSystemLifecyclePolicyArgs> lifecyclePolicy;

    public Output<FileSystemLifecyclePolicyArgs> lifecyclePolicy() {
        return this.lifecyclePolicy == null ? Codegen.empty() : this.lifecyclePolicy;
    }

    /**
     * The file system performance mode. Can be either `&#34;generalPurpose&#34;` or `&#34;maxIO&#34;` (Default: `&#34;generalPurpose&#34;`).
     * 
     */
    @Import(name="performanceMode")
      private final @Nullable Output<String> performanceMode;

    public Output<String> performanceMode() {
        return this.performanceMode == null ? Codegen.empty() : this.performanceMode;
    }

    /**
     * The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughput_mode` set to `provisioned`.
     * 
     */
    @Import(name="provisionedThroughputInMibps")
      private final @Nullable Output<Double> provisionedThroughputInMibps;

    public Output<Double> provisionedThroughputInMibps() {
        return this.provisionedThroughputInMibps == null ? Codegen.empty() : this.provisionedThroughputInMibps;
    }

    /**
     * A map of tags to assign to the file system. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Throughput mode for the file system. Defaults to `bursting`. Valid values: `bursting`, `provisioned`. When using `provisioned`, also set `provisioned_throughput_in_mibps`.
     * 
     */
    @Import(name="throughputMode")
      private final @Nullable Output<String> throughputMode;

    public Output<String> throughputMode() {
        return this.throughputMode == null ? Codegen.empty() : this.throughputMode;
    }

    public FileSystemArgs(
        @Nullable Output<String> availabilityZoneName,
        @Nullable Output<String> creationToken,
        @Nullable Output<Boolean> encrypted,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<FileSystemLifecyclePolicyArgs> lifecyclePolicy,
        @Nullable Output<String> performanceMode,
        @Nullable Output<Double> provisionedThroughputInMibps,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> throughputMode) {
        this.availabilityZoneName = availabilityZoneName;
        this.creationToken = creationToken;
        this.encrypted = encrypted;
        this.kmsKeyId = kmsKeyId;
        this.lifecyclePolicy = lifecyclePolicy;
        this.performanceMode = performanceMode;
        this.provisionedThroughputInMibps = provisionedThroughputInMibps;
        this.tags = tags;
        this.throughputMode = throughputMode;
    }

    private FileSystemArgs() {
        this.availabilityZoneName = Codegen.empty();
        this.creationToken = Codegen.empty();
        this.encrypted = Codegen.empty();
        this.kmsKeyId = Codegen.empty();
        this.lifecyclePolicy = Codegen.empty();
        this.performanceMode = Codegen.empty();
        this.provisionedThroughputInMibps = Codegen.empty();
        this.tags = Codegen.empty();
        this.throughputMode = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FileSystemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> availabilityZoneName;
        private @Nullable Output<String> creationToken;
        private @Nullable Output<Boolean> encrypted;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<FileSystemLifecyclePolicyArgs> lifecyclePolicy;
        private @Nullable Output<String> performanceMode;
        private @Nullable Output<Double> provisionedThroughputInMibps;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> throughputMode;

        public Builder() {
    	      // Empty
        }

        public Builder(FileSystemArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZoneName = defaults.availabilityZoneName;
    	      this.creationToken = defaults.creationToken;
    	      this.encrypted = defaults.encrypted;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.lifecyclePolicy = defaults.lifecyclePolicy;
    	      this.performanceMode = defaults.performanceMode;
    	      this.provisionedThroughputInMibps = defaults.provisionedThroughputInMibps;
    	      this.tags = defaults.tags;
    	      this.throughputMode = defaults.throughputMode;
        }

        public Builder availabilityZoneName(@Nullable Output<String> availabilityZoneName) {
            this.availabilityZoneName = availabilityZoneName;
            return this;
        }
        public Builder availabilityZoneName(@Nullable String availabilityZoneName) {
            this.availabilityZoneName = Codegen.ofNullable(availabilityZoneName);
            return this;
        }
        public Builder creationToken(@Nullable Output<String> creationToken) {
            this.creationToken = creationToken;
            return this;
        }
        public Builder creationToken(@Nullable String creationToken) {
            this.creationToken = Codegen.ofNullable(creationToken);
            return this;
        }
        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            this.encrypted = encrypted;
            return this;
        }
        public Builder encrypted(@Nullable Boolean encrypted) {
            this.encrypted = Codegen.ofNullable(encrypted);
            return this;
        }
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Codegen.ofNullable(kmsKeyId);
            return this;
        }
        public Builder lifecyclePolicy(@Nullable Output<FileSystemLifecyclePolicyArgs> lifecyclePolicy) {
            this.lifecyclePolicy = lifecyclePolicy;
            return this;
        }
        public Builder lifecyclePolicy(@Nullable FileSystemLifecyclePolicyArgs lifecyclePolicy) {
            this.lifecyclePolicy = Codegen.ofNullable(lifecyclePolicy);
            return this;
        }
        public Builder performanceMode(@Nullable Output<String> performanceMode) {
            this.performanceMode = performanceMode;
            return this;
        }
        public Builder performanceMode(@Nullable String performanceMode) {
            this.performanceMode = Codegen.ofNullable(performanceMode);
            return this;
        }
        public Builder provisionedThroughputInMibps(@Nullable Output<Double> provisionedThroughputInMibps) {
            this.provisionedThroughputInMibps = provisionedThroughputInMibps;
            return this;
        }
        public Builder provisionedThroughputInMibps(@Nullable Double provisionedThroughputInMibps) {
            this.provisionedThroughputInMibps = Codegen.ofNullable(provisionedThroughputInMibps);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder throughputMode(@Nullable Output<String> throughputMode) {
            this.throughputMode = throughputMode;
            return this;
        }
        public Builder throughputMode(@Nullable String throughputMode) {
            this.throughputMode = Codegen.ofNullable(throughputMode);
            return this;
        }        public FileSystemArgs build() {
            return new FileSystemArgs(availabilityZoneName, creationToken, encrypted, kmsKeyId, lifecyclePolicy, performanceMode, provisionedThroughputInMibps, tags, throughputMode);
        }
    }
}
