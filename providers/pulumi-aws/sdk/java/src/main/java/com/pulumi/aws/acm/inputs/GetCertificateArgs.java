// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.acm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetCertificateArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCertificateArgs Empty = new GetCertificateArgs();

    /**
     * The domain of the certificate to look up. If no certificate is found with this name, an error will be returned.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The domain of the certificate to look up. If no certificate is found with this name, an error will be returned.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * A list of key algorithms to filter certificates. By default, ACM does not return all certificate types when searching. See the [ACM API Reference](https://docs.aws.amazon.com/acm/latest/APIReference/API_CertificateDetail.html#ACM-Type-CertificateDetail-KeyAlgorithm) for supported key algorithms.
     * 
     */
    @Import(name="keyTypes")
    private Output</* @Nullable */ List<String>> keyTypes;

    /**
     * @return A list of key algorithms to filter certificates. By default, ACM does not return all certificate types when searching. See the [ACM API Reference](https://docs.aws.amazon.com/acm/latest/APIReference/API_CertificateDetail.html#ACM-Type-CertificateDetail-KeyAlgorithm) for supported key algorithms.
     * 
     */
    public Output</* @Nullable */ List<String>> keyTypes() {
        return this.keyTypes;
    }

    /**
     * If set to true, it sorts the certificates matched by previous criteria by the NotBefore field, returning only the most recent one. If set to false, it returns an error if more than one certificate is found. Defaults to false.
     * 
     */
    @Import(name="mostRecent")
    private Output</* @Nullable */ Boolean> mostRecent;

    /**
     * @return If set to true, it sorts the certificates matched by previous criteria by the NotBefore field, returning only the most recent one. If set to false, it returns an error if more than one certificate is found. Defaults to false.
     * 
     */
    public Output</* @Nullable */ Boolean> mostRecent() {
        return this.mostRecent;
    }

    /**
     * A list of statuses on which to filter the returned list. Valid values are `PENDING_VALIDATION`, `ISSUED`,
     * `INACTIVE`, `EXPIRED`, `VALIDATION_TIMED_OUT`, `REVOKED` and `FAILED`. If no value is specified, only certificates in the `ISSUED` state
     * are returned.
     * 
     */
    @Import(name="statuses")
    private Output</* @Nullable */ List<String>> statuses;

    /**
     * @return A list of statuses on which to filter the returned list. Valid values are `PENDING_VALIDATION`, `ISSUED`,
     * `INACTIVE`, `EXPIRED`, `VALIDATION_TIMED_OUT`, `REVOKED` and `FAILED`. If no value is specified, only certificates in the `ISSUED` state
     * are returned.
     * 
     */
    public Output</* @Nullable */ List<String>> statuses() {
        return this.statuses;
    }

    /**
     * A mapping of tags for the resource.
     * 
     */
    @Import(name="tags")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags for the resource.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> tags() {
        return this.tags;
    }

    /**
     * A list of types on which to filter the returned list. Valid values are `AMAZON_ISSUED` and `IMPORTED`.
     * 
     */
    @Import(name="types")
    private Output</* @Nullable */ List<String>> types;

    /**
     * @return A list of types on which to filter the returned list. Valid values are `AMAZON_ISSUED` and `IMPORTED`.
     * 
     */
    public Output</* @Nullable */ List<String>> types() {
        return this.types;
    }

    private GetCertificateArgs() {}

    private GetCertificateArgs(GetCertificateArgs $) {
        this.domain = $.domain;
        this.keyTypes = $.keyTypes;
        this.mostRecent = $.mostRecent;
        this.statuses = $.statuses;
        this.tags = $.tags;
        this.types = $.types;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCertificateArgs $;

        public Builder() {
            $ = new GetCertificateArgs();
        }

        public Builder(GetCertificateArgs defaults) {
            $ = new GetCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The domain of the certificate to look up. If no certificate is found with this name, an error will be returned.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain of the certificate to look up. If no certificate is found with this name, an error will be returned.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param keyTypes A list of key algorithms to filter certificates. By default, ACM does not return all certificate types when searching. See the [ACM API Reference](https://docs.aws.amazon.com/acm/latest/APIReference/API_CertificateDetail.html#ACM-Type-CertificateDetail-KeyAlgorithm) for supported key algorithms.
         * 
         * @return builder
         * 
         */
        public Builder keyTypes(Output</* @Nullable */ List<String>> keyTypes) {
            $.keyTypes = keyTypes;
            return this;
        }

        /**
         * @param keyTypes A list of key algorithms to filter certificates. By default, ACM does not return all certificate types when searching. See the [ACM API Reference](https://docs.aws.amazon.com/acm/latest/APIReference/API_CertificateDetail.html#ACM-Type-CertificateDetail-KeyAlgorithm) for supported key algorithms.
         * 
         * @return builder
         * 
         */
        public Builder keyTypes(@Nullable List<String> keyTypes) {
            return keyTypes(Output.of(keyTypes));
        }

        /**
         * @param keyTypes A list of key algorithms to filter certificates. By default, ACM does not return all certificate types when searching. See the [ACM API Reference](https://docs.aws.amazon.com/acm/latest/APIReference/API_CertificateDetail.html#ACM-Type-CertificateDetail-KeyAlgorithm) for supported key algorithms.
         * 
         * @return builder
         * 
         */
        public Builder keyTypes(String... keyTypes) {
            return keyTypes(List.of(keyTypes));
        }

        /**
         * @param mostRecent If set to true, it sorts the certificates matched by previous criteria by the NotBefore field, returning only the most recent one. If set to false, it returns an error if more than one certificate is found. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder mostRecent(Output</* @Nullable */ Boolean> mostRecent) {
            $.mostRecent = mostRecent;
            return this;
        }

        /**
         * @param mostRecent If set to true, it sorts the certificates matched by previous criteria by the NotBefore field, returning only the most recent one. If set to false, it returns an error if more than one certificate is found. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder mostRecent(@Nullable Boolean mostRecent) {
            return mostRecent(Output.of(mostRecent));
        }

        /**
         * @param statuses A list of statuses on which to filter the returned list. Valid values are `PENDING_VALIDATION`, `ISSUED`,
         * `INACTIVE`, `EXPIRED`, `VALIDATION_TIMED_OUT`, `REVOKED` and `FAILED`. If no value is specified, only certificates in the `ISSUED` state
         * are returned.
         * 
         * @return builder
         * 
         */
        public Builder statuses(Output</* @Nullable */ List<String>> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses A list of statuses on which to filter the returned list. Valid values are `PENDING_VALIDATION`, `ISSUED`,
         * `INACTIVE`, `EXPIRED`, `VALIDATION_TIMED_OUT`, `REVOKED` and `FAILED`. If no value is specified, only certificates in the `ISSUED` state
         * are returned.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable List<String> statuses) {
            return statuses(Output.of(statuses));
        }

        /**
         * @param statuses A list of statuses on which to filter the returned list. Valid values are `PENDING_VALIDATION`, `ISSUED`,
         * `INACTIVE`, `EXPIRED`, `VALIDATION_TIMED_OUT`, `REVOKED` and `FAILED`. If no value is specified, only certificates in the `ISSUED` state
         * are returned.
         * 
         * @return builder
         * 
         */
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }

        /**
         * @param tags A mapping of tags for the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output</* @Nullable */ Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags for the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param types A list of types on which to filter the returned list. Valid values are `AMAZON_ISSUED` and `IMPORTED`.
         * 
         * @return builder
         * 
         */
        public Builder types(Output</* @Nullable */ List<String>> types) {
            $.types = types;
            return this;
        }

        /**
         * @param types A list of types on which to filter the returned list. Valid values are `AMAZON_ISSUED` and `IMPORTED`.
         * 
         * @return builder
         * 
         */
        public Builder types(@Nullable List<String> types) {
            return types(Output.of(types));
        }

        /**
         * @param types A list of types on which to filter the returned list. Valid values are `AMAZON_ISSUED` and `IMPORTED`.
         * 
         * @return builder
         * 
         */
        public Builder types(String... types) {
            return types(List.of(types));
        }

        public GetCertificateArgs build() {
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            return $;
        }
    }

}
