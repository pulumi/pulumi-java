// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directconnect;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class HostedConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostedConnectionArgs Empty = new HostedConnectionArgs();

    /**
     * The bandwidth of the connection. Valid values for dedicated connections: 1Gbps, 10Gbps. Valid values for hosted connections: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps and 10Gbps. Case sensitive.
     * 
     */
    @Import(name="bandwidth", required=true)
      private final Output<String> bandwidth;

    public Output<String> bandwidth() {
        return this.bandwidth;
    }

    /**
     * The ID of the interconnect or LAG.
     * 
     */
    @Import(name="connectionId", required=true)
      private final Output<String> connectionId;

    public Output<String> connectionId() {
        return this.connectionId;
    }

    /**
     * The name of the connection.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of the AWS account of the customer for the connection.
     * 
     */
    @Import(name="ownerAccountId", required=true)
      private final Output<String> ownerAccountId;

    public Output<String> ownerAccountId() {
        return this.ownerAccountId;
    }

    /**
     * The dedicated VLAN provisioned to the hosted connection.
     * 
     */
    @Import(name="vlan", required=true)
      private final Output<Integer> vlan;

    public Output<Integer> vlan() {
        return this.vlan;
    }

    public HostedConnectionArgs(
        Output<String> bandwidth,
        Output<String> connectionId,
        @Nullable Output<String> name,
        Output<String> ownerAccountId,
        Output<Integer> vlan) {
        this.bandwidth = Objects.requireNonNull(bandwidth, "expected parameter 'bandwidth' to be non-null");
        this.connectionId = Objects.requireNonNull(connectionId, "expected parameter 'connectionId' to be non-null");
        this.name = name;
        this.ownerAccountId = Objects.requireNonNull(ownerAccountId, "expected parameter 'ownerAccountId' to be non-null");
        this.vlan = Objects.requireNonNull(vlan, "expected parameter 'vlan' to be non-null");
    }

    private HostedConnectionArgs() {
        this.bandwidth = Codegen.empty();
        this.connectionId = Codegen.empty();
        this.name = Codegen.empty();
        this.ownerAccountId = Codegen.empty();
        this.vlan = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HostedConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> bandwidth;
        private Output<String> connectionId;
        private @Nullable Output<String> name;
        private Output<String> ownerAccountId;
        private Output<Integer> vlan;

        public Builder() {
    	      // Empty
        }

        public Builder(HostedConnectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidth = defaults.bandwidth;
    	      this.connectionId = defaults.connectionId;
    	      this.name = defaults.name;
    	      this.ownerAccountId = defaults.ownerAccountId;
    	      this.vlan = defaults.vlan;
        }

        public Builder bandwidth(Output<String> bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        public Builder bandwidth(String bandwidth) {
            this.bandwidth = Output.of(Objects.requireNonNull(bandwidth));
            return this;
        }
        public Builder connectionId(Output<String> connectionId) {
            this.connectionId = Objects.requireNonNull(connectionId);
            return this;
        }
        public Builder connectionId(String connectionId) {
            this.connectionId = Output.of(Objects.requireNonNull(connectionId));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder ownerAccountId(Output<String> ownerAccountId) {
            this.ownerAccountId = Objects.requireNonNull(ownerAccountId);
            return this;
        }
        public Builder ownerAccountId(String ownerAccountId) {
            this.ownerAccountId = Output.of(Objects.requireNonNull(ownerAccountId));
            return this;
        }
        public Builder vlan(Output<Integer> vlan) {
            this.vlan = Objects.requireNonNull(vlan);
            return this;
        }
        public Builder vlan(Integer vlan) {
            this.vlan = Output.of(Objects.requireNonNull(vlan));
            return this;
        }        public HostedConnectionArgs build() {
            return new HostedConnectionArgs(bandwidth, connectionId, name, ownerAccountId, vlan);
        }
    }
}
