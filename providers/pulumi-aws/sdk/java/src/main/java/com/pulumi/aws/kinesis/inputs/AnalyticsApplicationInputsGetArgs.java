// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.inputs;

import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsKinesisFirehoseGetArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsKinesisStreamGetArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsParallelismGetArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsProcessingConfigurationGetArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsSchemaGetArgs;
import com.pulumi.aws.kinesis.inputs.AnalyticsApplicationInputsStartingPositionConfigurationGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AnalyticsApplicationInputsGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalyticsApplicationInputsGetArgs Empty = new AnalyticsApplicationInputsGetArgs();

    /**
     * The ARN of the Kinesis Analytics Application.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesis_stream`.
     * See Kinesis Firehose below for more details.
     * 
     */
    @Import(name="kinesisFirehose")
      private final @Nullable Output<AnalyticsApplicationInputsKinesisFirehoseGetArgs> kinesisFirehose;

    public Output<AnalyticsApplicationInputsKinesisFirehoseGetArgs> kinesisFirehose() {
        return this.kinesisFirehose == null ? Codegen.empty() : this.kinesisFirehose;
    }

    /**
     * The Kinesis Stream configuration for the streaming source. Conflicts with `kinesis_firehose`.
     * See Kinesis Stream below for more details.
     * 
     */
    @Import(name="kinesisStream")
      private final @Nullable Output<AnalyticsApplicationInputsKinesisStreamGetArgs> kinesisStream;

    public Output<AnalyticsApplicationInputsKinesisStreamGetArgs> kinesisStream() {
        return this.kinesisStream == null ? Codegen.empty() : this.kinesisStream;
    }

    /**
     * The Name Prefix to use when creating an in-application stream.
     * 
     */
    @Import(name="namePrefix", required=true)
      private final Output<String> namePrefix;

    public Output<String> namePrefix() {
        return this.namePrefix;
    }

    /**
     * The number of Parallel in-application streams to create.
     * See Parallelism below for more details.
     * 
     */
    @Import(name="parallelism")
      private final @Nullable Output<AnalyticsApplicationInputsParallelismGetArgs> parallelism;

    public Output<AnalyticsApplicationInputsParallelismGetArgs> parallelism() {
        return this.parallelism == null ? Codegen.empty() : this.parallelism;
    }

    /**
     * The Processing Configuration to transform records as they are received from the stream.
     * See Processing Configuration below for more details.
     * 
     */
    @Import(name="processingConfiguration")
      private final @Nullable Output<AnalyticsApplicationInputsProcessingConfigurationGetArgs> processingConfiguration;

    public Output<AnalyticsApplicationInputsProcessingConfigurationGetArgs> processingConfiguration() {
        return this.processingConfiguration == null ? Codegen.empty() : this.processingConfiguration;
    }

    /**
     * The Schema format of the data in the streaming source. See Source Schema below for more details.
     * 
     */
    @Import(name="schema", required=true)
      private final Output<AnalyticsApplicationInputsSchemaGetArgs> schema;

    public Output<AnalyticsApplicationInputsSchemaGetArgs> schema() {
        return this.schema;
    }

    /**
     * The point at which the application starts processing records from the streaming source.
     * See Starting Position Configuration below for more details.
     * 
     */
    @Import(name="startingPositionConfigurations")
      private final @Nullable Output<List<AnalyticsApplicationInputsStartingPositionConfigurationGetArgs>> startingPositionConfigurations;

    public Output<List<AnalyticsApplicationInputsStartingPositionConfigurationGetArgs>> startingPositionConfigurations() {
        return this.startingPositionConfigurations == null ? Codegen.empty() : this.startingPositionConfigurations;
    }

    @Import(name="streamNames")
      private final @Nullable Output<List<String>> streamNames;

    public Output<List<String>> streamNames() {
        return this.streamNames == null ? Codegen.empty() : this.streamNames;
    }

    public AnalyticsApplicationInputsGetArgs(
        @Nullable Output<String> id,
        @Nullable Output<AnalyticsApplicationInputsKinesisFirehoseGetArgs> kinesisFirehose,
        @Nullable Output<AnalyticsApplicationInputsKinesisStreamGetArgs> kinesisStream,
        Output<String> namePrefix,
        @Nullable Output<AnalyticsApplicationInputsParallelismGetArgs> parallelism,
        @Nullable Output<AnalyticsApplicationInputsProcessingConfigurationGetArgs> processingConfiguration,
        Output<AnalyticsApplicationInputsSchemaGetArgs> schema,
        @Nullable Output<List<AnalyticsApplicationInputsStartingPositionConfigurationGetArgs>> startingPositionConfigurations,
        @Nullable Output<List<String>> streamNames) {
        this.id = id;
        this.kinesisFirehose = kinesisFirehose;
        this.kinesisStream = kinesisStream;
        this.namePrefix = Objects.requireNonNull(namePrefix, "expected parameter 'namePrefix' to be non-null");
        this.parallelism = parallelism;
        this.processingConfiguration = processingConfiguration;
        this.schema = Objects.requireNonNull(schema, "expected parameter 'schema' to be non-null");
        this.startingPositionConfigurations = startingPositionConfigurations;
        this.streamNames = streamNames;
    }

    private AnalyticsApplicationInputsGetArgs() {
        this.id = Codegen.empty();
        this.kinesisFirehose = Codegen.empty();
        this.kinesisStream = Codegen.empty();
        this.namePrefix = Codegen.empty();
        this.parallelism = Codegen.empty();
        this.processingConfiguration = Codegen.empty();
        this.schema = Codegen.empty();
        this.startingPositionConfigurations = Codegen.empty();
        this.streamNames = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalyticsApplicationInputsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> id;
        private @Nullable Output<AnalyticsApplicationInputsKinesisFirehoseGetArgs> kinesisFirehose;
        private @Nullable Output<AnalyticsApplicationInputsKinesisStreamGetArgs> kinesisStream;
        private Output<String> namePrefix;
        private @Nullable Output<AnalyticsApplicationInputsParallelismGetArgs> parallelism;
        private @Nullable Output<AnalyticsApplicationInputsProcessingConfigurationGetArgs> processingConfiguration;
        private Output<AnalyticsApplicationInputsSchemaGetArgs> schema;
        private @Nullable Output<List<AnalyticsApplicationInputsStartingPositionConfigurationGetArgs>> startingPositionConfigurations;
        private @Nullable Output<List<String>> streamNames;

        public Builder() {
    	      // Empty
        }

        public Builder(AnalyticsApplicationInputsGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.kinesisFirehose = defaults.kinesisFirehose;
    	      this.kinesisStream = defaults.kinesisStream;
    	      this.namePrefix = defaults.namePrefix;
    	      this.parallelism = defaults.parallelism;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.schema = defaults.schema;
    	      this.startingPositionConfigurations = defaults.startingPositionConfigurations;
    	      this.streamNames = defaults.streamNames;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder kinesisFirehose(@Nullable Output<AnalyticsApplicationInputsKinesisFirehoseGetArgs> kinesisFirehose) {
            this.kinesisFirehose = kinesisFirehose;
            return this;
        }
        public Builder kinesisFirehose(@Nullable AnalyticsApplicationInputsKinesisFirehoseGetArgs kinesisFirehose) {
            this.kinesisFirehose = Codegen.ofNullable(kinesisFirehose);
            return this;
        }
        public Builder kinesisStream(@Nullable Output<AnalyticsApplicationInputsKinesisStreamGetArgs> kinesisStream) {
            this.kinesisStream = kinesisStream;
            return this;
        }
        public Builder kinesisStream(@Nullable AnalyticsApplicationInputsKinesisStreamGetArgs kinesisStream) {
            this.kinesisStream = Codegen.ofNullable(kinesisStream);
            return this;
        }
        public Builder namePrefix(Output<String> namePrefix) {
            this.namePrefix = Objects.requireNonNull(namePrefix);
            return this;
        }
        public Builder namePrefix(String namePrefix) {
            this.namePrefix = Output.of(Objects.requireNonNull(namePrefix));
            return this;
        }
        public Builder parallelism(@Nullable Output<AnalyticsApplicationInputsParallelismGetArgs> parallelism) {
            this.parallelism = parallelism;
            return this;
        }
        public Builder parallelism(@Nullable AnalyticsApplicationInputsParallelismGetArgs parallelism) {
            this.parallelism = Codegen.ofNullable(parallelism);
            return this;
        }
        public Builder processingConfiguration(@Nullable Output<AnalyticsApplicationInputsProcessingConfigurationGetArgs> processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }
        public Builder processingConfiguration(@Nullable AnalyticsApplicationInputsProcessingConfigurationGetArgs processingConfiguration) {
            this.processingConfiguration = Codegen.ofNullable(processingConfiguration);
            return this;
        }
        public Builder schema(Output<AnalyticsApplicationInputsSchemaGetArgs> schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }
        public Builder schema(AnalyticsApplicationInputsSchemaGetArgs schema) {
            this.schema = Output.of(Objects.requireNonNull(schema));
            return this;
        }
        public Builder startingPositionConfigurations(@Nullable Output<List<AnalyticsApplicationInputsStartingPositionConfigurationGetArgs>> startingPositionConfigurations) {
            this.startingPositionConfigurations = startingPositionConfigurations;
            return this;
        }
        public Builder startingPositionConfigurations(@Nullable List<AnalyticsApplicationInputsStartingPositionConfigurationGetArgs> startingPositionConfigurations) {
            this.startingPositionConfigurations = Codegen.ofNullable(startingPositionConfigurations);
            return this;
        }
        public Builder startingPositionConfigurations(AnalyticsApplicationInputsStartingPositionConfigurationGetArgs... startingPositionConfigurations) {
            return startingPositionConfigurations(List.of(startingPositionConfigurations));
        }
        public Builder streamNames(@Nullable Output<List<String>> streamNames) {
            this.streamNames = streamNames;
            return this;
        }
        public Builder streamNames(@Nullable List<String> streamNames) {
            this.streamNames = Codegen.ofNullable(streamNames);
            return this;
        }
        public Builder streamNames(String... streamNames) {
            return streamNames(List.of(streamNames));
        }        public AnalyticsApplicationInputsGetArgs build() {
            return new AnalyticsApplicationInputsGetArgs(id, kinesisFirehose, kinesisStream, namePrefix, parallelism, processingConfiguration, schema, startingPositionConfigurations, streamNames);
        }
    }
}
