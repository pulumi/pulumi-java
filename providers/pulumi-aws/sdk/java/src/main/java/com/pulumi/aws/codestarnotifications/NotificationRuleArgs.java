// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codestarnotifications;

import com.pulumi.aws.codestarnotifications.inputs.NotificationRuleTargetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NotificationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationRuleArgs Empty = new NotificationRuleArgs();

    /**
     * The level of detail to include in the notifications for this resource. Possible values are `BASIC` and `FULL`.
     * 
     */
    @Import(name="detailType", required=true)
      private final Output<String> detailType;

    public Output<String> detailType() {
        return this.detailType;
    }

    /**
     * A list of event types associated with this notification rule.
     * For list of allowed events see [here](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api).
     * 
     */
    @Import(name="eventTypeIds", required=true)
      private final Output<List<String>> eventTypeIds;

    public Output<List<String>> eventTypeIds() {
        return this.eventTypeIds;
    }

    /**
     * The name of notification rule.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ARN of the resource to associate with the notification rule.
     * 
     */
    @Import(name="resource", required=true)
      private final Output<String> resource;

    public Output<String> resource() {
        return this.resource;
    }

    /**
     * The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
     * 
     */
    @Import(name="targets")
      private final @Nullable Output<List<NotificationRuleTargetArgs>> targets;

    public Output<List<NotificationRuleTargetArgs>> targets() {
        return this.targets == null ? Codegen.empty() : this.targets;
    }

    public NotificationRuleArgs(
        Output<String> detailType,
        Output<List<String>> eventTypeIds,
        @Nullable Output<String> name,
        Output<String> resource,
        @Nullable Output<String> status,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<List<NotificationRuleTargetArgs>> targets) {
        this.detailType = Objects.requireNonNull(detailType, "expected parameter 'detailType' to be non-null");
        this.eventTypeIds = Objects.requireNonNull(eventTypeIds, "expected parameter 'eventTypeIds' to be non-null");
        this.name = name;
        this.resource = Objects.requireNonNull(resource, "expected parameter 'resource' to be non-null");
        this.status = status;
        this.tags = tags;
        this.targets = targets;
    }

    private NotificationRuleArgs() {
        this.detailType = Codegen.empty();
        this.eventTypeIds = Codegen.empty();
        this.name = Codegen.empty();
        this.resource = Codegen.empty();
        this.status = Codegen.empty();
        this.tags = Codegen.empty();
        this.targets = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> detailType;
        private Output<List<String>> eventTypeIds;
        private @Nullable Output<String> name;
        private Output<String> resource;
        private @Nullable Output<String> status;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<List<NotificationRuleTargetArgs>> targets;

        public Builder() {
    	      // Empty
        }

        public Builder(NotificationRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.detailType = defaults.detailType;
    	      this.eventTypeIds = defaults.eventTypeIds;
    	      this.name = defaults.name;
    	      this.resource = defaults.resource;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.targets = defaults.targets;
        }

        public Builder detailType(Output<String> detailType) {
            this.detailType = Objects.requireNonNull(detailType);
            return this;
        }
        public Builder detailType(String detailType) {
            this.detailType = Output.of(Objects.requireNonNull(detailType));
            return this;
        }
        public Builder eventTypeIds(Output<List<String>> eventTypeIds) {
            this.eventTypeIds = Objects.requireNonNull(eventTypeIds);
            return this;
        }
        public Builder eventTypeIds(List<String> eventTypeIds) {
            this.eventTypeIds = Output.of(Objects.requireNonNull(eventTypeIds));
            return this;
        }
        public Builder eventTypeIds(String... eventTypeIds) {
            return eventTypeIds(List.of(eventTypeIds));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder resource(Output<String> resource) {
            this.resource = Objects.requireNonNull(resource);
            return this;
        }
        public Builder resource(String resource) {
            this.resource = Output.of(Objects.requireNonNull(resource));
            return this;
        }
        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder targets(@Nullable Output<List<NotificationRuleTargetArgs>> targets) {
            this.targets = targets;
            return this;
        }
        public Builder targets(@Nullable List<NotificationRuleTargetArgs> targets) {
            this.targets = Codegen.ofNullable(targets);
            return this;
        }
        public Builder targets(NotificationRuleTargetArgs... targets) {
            return targets(List.of(targets));
        }        public NotificationRuleArgs build() {
            return new NotificationRuleArgs(detailType, eventTypeIds, name, resource, status, tags, targets);
        }
    }
}
