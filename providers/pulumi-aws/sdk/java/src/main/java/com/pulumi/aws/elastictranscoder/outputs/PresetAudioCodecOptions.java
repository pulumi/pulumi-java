// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elastictranscoder.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PresetAudioCodecOptions {
    /**
     * @return The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
     * 
     */
    private final @Nullable String bitDepth;
    /**
     * @return The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
     * 
     */
    private final @Nullable String bitOrder;
    /**
     * @return If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
     * 
     */
    private final @Nullable String profile;
    /**
     * @return Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
     * 
     */
    private final @Nullable String signed;

    @CustomType.Constructor
    private PresetAudioCodecOptions(
        @CustomType.Parameter("bitDepth") @Nullable String bitDepth,
        @CustomType.Parameter("bitOrder") @Nullable String bitOrder,
        @CustomType.Parameter("profile") @Nullable String profile,
        @CustomType.Parameter("signed") @Nullable String signed) {
        this.bitDepth = bitDepth;
        this.bitOrder = bitOrder;
        this.profile = profile;
        this.signed = signed;
    }

    /**
     * @return The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
     * 
     */
    public Optional<String> bitDepth() {
        return Optional.ofNullable(this.bitDepth);
    }
    /**
     * @return The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
     * 
     */
    public Optional<String> bitOrder() {
        return Optional.ofNullable(this.bitOrder);
    }
    /**
     * @return If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
     * 
     */
    public Optional<String> profile() {
        return Optional.ofNullable(this.profile);
    }
    /**
     * @return Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
     * 
     */
    public Optional<String> signed() {
        return Optional.ofNullable(this.signed);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PresetAudioCodecOptions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String bitDepth;
        private @Nullable String bitOrder;
        private @Nullable String profile;
        private @Nullable String signed;

        public Builder() {
    	      // Empty
        }

        public Builder(PresetAudioCodecOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitDepth = defaults.bitDepth;
    	      this.bitOrder = defaults.bitOrder;
    	      this.profile = defaults.profile;
    	      this.signed = defaults.signed;
        }

        public Builder bitDepth(@Nullable String bitDepth) {
            this.bitDepth = bitDepth;
            return this;
        }
        public Builder bitOrder(@Nullable String bitOrder) {
            this.bitOrder = bitOrder;
            return this;
        }
        public Builder profile(@Nullable String profile) {
            this.profile = profile;
            return this;
        }
        public Builder signed(@Nullable String signed) {
            this.signed = signed;
            return this;
        }        public PresetAudioCodecOptions build() {
            return new PresetAudioCodecOptions(bitDepth, bitOrder, profile, signed);
        }
    }
}
