// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.globalaccelerator;

import com.pulumi.aws.globalaccelerator.inputs.AcceleratorAttributesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AcceleratorArgs extends com.pulumi.resources.ResourceArgs {

    public static final AcceleratorArgs Empty = new AcceleratorArgs();

    /**
     * The attributes of the accelerator. Fields documented below.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<AcceleratorAttributesArgs> attributes;

    public Optional<Output<AcceleratorAttributesArgs>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Indicates whether the accelerator is enabled. Defaults to `true`. Valid values: `true`, `false`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The value for the address type. Defaults to `IPV4`. Valid values: `IPV4`.
     * 
     */
    @Import(name="ipAddressType")
    private @Nullable Output<String> ipAddressType;

    public Optional<Output<String>> ipAddressType() {
        return Optional.ofNullable(this.ipAddressType);
    }

    /**
     * The name of the accelerator.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AcceleratorArgs() {}

    private AcceleratorArgs(AcceleratorArgs $) {
        this.attributes = $.attributes;
        this.enabled = $.enabled;
        this.ipAddressType = $.ipAddressType;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AcceleratorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AcceleratorArgs $;

        public Builder() {
            $ = new AcceleratorArgs();
        }

        public Builder(AcceleratorArgs defaults) {
            $ = new AcceleratorArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributes(@Nullable Output<AcceleratorAttributesArgs> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(AcceleratorAttributesArgs attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder ipAddressType(@Nullable Output<String> ipAddressType) {
            $.ipAddressType = ipAddressType;
            return this;
        }

        public Builder ipAddressType(String ipAddressType) {
            return ipAddressType(Output.of(ipAddressType));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public AcceleratorArgs build() {
            return $;
        }
    }

}
