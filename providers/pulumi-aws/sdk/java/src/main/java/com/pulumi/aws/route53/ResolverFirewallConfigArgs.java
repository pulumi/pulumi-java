// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ResolverFirewallConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResolverFirewallConfigArgs Empty = new ResolverFirewallConfigArgs();

    /**
     * Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
     * 
     */
    @Import(name="firewallFailOpen")
      private final @Nullable Output<String> firewallFailOpen;

    public Output<String> firewallFailOpen() {
        return this.firewallFailOpen == null ? Codegen.empty() : this.firewallFailOpen;
    }

    /**
     * The ID of the VPC that the configuration is for.
     * 
     */
    @Import(name="resourceId", required=true)
      private final Output<String> resourceId;

    public Output<String> resourceId() {
        return this.resourceId;
    }

    public ResolverFirewallConfigArgs(
        @Nullable Output<String> firewallFailOpen,
        Output<String> resourceId) {
        this.firewallFailOpen = firewallFailOpen;
        this.resourceId = Objects.requireNonNull(resourceId, "expected parameter 'resourceId' to be non-null");
    }

    private ResolverFirewallConfigArgs() {
        this.firewallFailOpen = Codegen.empty();
        this.resourceId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverFirewallConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> firewallFailOpen;
        private Output<String> resourceId;

        public Builder() {
    	      // Empty
        }

        public Builder(ResolverFirewallConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.firewallFailOpen = defaults.firewallFailOpen;
    	      this.resourceId = defaults.resourceId;
        }

        public Builder firewallFailOpen(@Nullable Output<String> firewallFailOpen) {
            this.firewallFailOpen = firewallFailOpen;
            return this;
        }
        public Builder firewallFailOpen(@Nullable String firewallFailOpen) {
            this.firewallFailOpen = Codegen.ofNullable(firewallFailOpen);
            return this;
        }
        public Builder resourceId(Output<String> resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }
        public Builder resourceId(String resourceId) {
            this.resourceId = Output.of(Objects.requireNonNull(resourceId));
            return this;
        }        public ResolverFirewallConfigArgs build() {
            return new ResolverFirewallConfigArgs(firewallFailOpen, resourceId);
        }
    }
}
