// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MLTransformInputRecordTableGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final MLTransformInputRecordTableGetArgs Empty = new MLTransformInputRecordTableGetArgs();

    /**
     * A unique identifier for the AWS Glue Data Catalog.
     * 
     */
    @Import(name="catalogId")
      private final @Nullable Output<String> catalogId;

    public Output<String> catalogId() {
        return this.catalogId == null ? Codegen.empty() : this.catalogId;
    }

    /**
     * The name of the connection to the AWS Glue Data Catalog.
     * 
     */
    @Import(name="connectionName")
      private final @Nullable Output<String> connectionName;

    public Output<String> connectionName() {
        return this.connectionName == null ? Codegen.empty() : this.connectionName;
    }

    /**
     * A database name in the AWS Glue Data Catalog.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * A table name in the AWS Glue Data Catalog.
     * 
     */
    @Import(name="tableName", required=true)
      private final Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName;
    }

    public MLTransformInputRecordTableGetArgs(
        @Nullable Output<String> catalogId,
        @Nullable Output<String> connectionName,
        Output<String> databaseName,
        Output<String> tableName) {
        this.catalogId = catalogId;
        this.connectionName = connectionName;
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.tableName = Objects.requireNonNull(tableName, "expected parameter 'tableName' to be non-null");
    }

    private MLTransformInputRecordTableGetArgs() {
        this.catalogId = Codegen.empty();
        this.connectionName = Codegen.empty();
        this.databaseName = Codegen.empty();
        this.tableName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MLTransformInputRecordTableGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> catalogId;
        private @Nullable Output<String> connectionName;
        private Output<String> databaseName;
        private Output<String> tableName;

        public Builder() {
    	      // Empty
        }

        public Builder(MLTransformInputRecordTableGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.connectionName = defaults.connectionName;
    	      this.databaseName = defaults.databaseName;
    	      this.tableName = defaults.tableName;
        }

        public Builder catalogId(@Nullable Output<String> catalogId) {
            this.catalogId = catalogId;
            return this;
        }
        public Builder catalogId(@Nullable String catalogId) {
            this.catalogId = Codegen.ofNullable(catalogId);
            return this;
        }
        public Builder connectionName(@Nullable Output<String> connectionName) {
            this.connectionName = connectionName;
            return this;
        }
        public Builder connectionName(@Nullable String connectionName) {
            this.connectionName = Codegen.ofNullable(connectionName);
            return this;
        }
        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder tableName(Output<String> tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }
        public Builder tableName(String tableName) {
            this.tableName = Output.of(Objects.requireNonNull(tableName));
            return this;
        }        public MLTransformInputRecordTableGetArgs build() {
            return new MLTransformInputRecordTableGetArgs(catalogId, connectionName, databaseName, tableName);
        }
    }
}
