// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.asset.Archive;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LayerVersionState extends com.pulumi.resources.ResourceArgs {

    public static final LayerVersionState Empty = new LayerVersionState();

    /**
     * ARN of the Lambda Layer with version.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Path to the function&#39;s deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
     * 
     */
    @Import(name="code")
    private @Nullable Output<Archive> code;

    public Optional<Output<Archive>> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleArchitectures) this layer is compatible with. Currently `x86_64` and `arm64` can be specified.
     * 
     */
    @Import(name="compatibleArchitectures")
    private @Nullable Output<List<String>> compatibleArchitectures;

    public Optional<Output<List<String>>> compatibleArchitectures() {
        return Optional.ofNullable(this.compatibleArchitectures);
    }

    /**
     * List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleRuntimes) this layer is compatible with. Up to 5 runtimes can be specified.
     * 
     */
    @Import(name="compatibleRuntimes")
    private @Nullable Output<List<String>> compatibleRuntimes;

    public Optional<Output<List<String>>> compatibleRuntimes() {
        return Optional.ofNullable(this.compatibleRuntimes);
    }

    /**
     * Date this resource was created.
     * 
     */
    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * Description of what your Lambda Layer does.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ARN of the Lambda Layer without version.
     * 
     */
    @Import(name="layerArn")
    private @Nullable Output<String> layerArn;

    public Optional<Output<String>> layerArn() {
        return Optional.ofNullable(this.layerArn);
    }

    /**
     * Unique name for your Lambda Layer
     * 
     */
    @Import(name="layerName")
    private @Nullable Output<String> layerName;

    public Optional<Output<String>> layerName() {
        return Optional.ofNullable(this.layerName);
    }

    /**
     * License info for your Lambda Layer. See [License Info](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-LicenseInfo).
     * 
     */
    @Import(name="licenseInfo")
    private @Nullable Output<String> licenseInfo;

    public Optional<Output<String>> licenseInfo() {
        return Optional.ofNullable(this.licenseInfo);
    }

    /**
     * S3 bucket location containing the function&#39;s deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
     * 
     */
    @Import(name="s3Bucket")
    private @Nullable Output<String> s3Bucket;

    public Optional<Output<String>> s3Bucket() {
        return Optional.ofNullable(this.s3Bucket);
    }

    /**
     * S3 key of an object containing the function&#39;s deployment package. Conflicts with `filename`.
     * 
     */
    @Import(name="s3Key")
    private @Nullable Output<String> s3Key;

    public Optional<Output<String>> s3Key() {
        return Optional.ofNullable(this.s3Key);
    }

    /**
     * Object version containing the function&#39;s deployment package. Conflicts with `filename`.
     * 
     */
    @Import(name="s3ObjectVersion")
    private @Nullable Output<String> s3ObjectVersion;

    public Optional<Output<String>> s3ObjectVersion() {
        return Optional.ofNullable(this.s3ObjectVersion);
    }

    /**
     * ARN of a signing job.
     * 
     */
    @Import(name="signingJobArn")
    private @Nullable Output<String> signingJobArn;

    public Optional<Output<String>> signingJobArn() {
        return Optional.ofNullable(this.signingJobArn);
    }

    /**
     * ARN for a signing profile version.
     * 
     */
    @Import(name="signingProfileVersionArn")
    private @Nullable Output<String> signingProfileVersionArn;

    public Optional<Output<String>> signingProfileVersionArn() {
        return Optional.ofNullable(this.signingProfileVersionArn);
    }

    /**
     * Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatible_architectures`, `compatible_runtimes`, `description`, `filename`, `layer_name`, `license_info`, `s3_bucket`, `s3_key`, `s3_object_version`, or `source_code_hash` forces deletion of the existing layer version and creation of a new layer version.
     * 
     */
    @Import(name="skipDestroy")
    private @Nullable Output<Boolean> skipDestroy;

    public Optional<Output<Boolean>> skipDestroy() {
        return Optional.ofNullable(this.skipDestroy);
    }

    @Import(name="sourceCodeHash")
    private @Nullable Output<String> sourceCodeHash;

    public Optional<Output<String>> sourceCodeHash() {
        return Optional.ofNullable(this.sourceCodeHash);
    }

    /**
     * Size in bytes of the function .zip file.
     * 
     */
    @Import(name="sourceCodeSize")
    private @Nullable Output<Integer> sourceCodeSize;

    public Optional<Output<Integer>> sourceCodeSize() {
        return Optional.ofNullable(this.sourceCodeSize);
    }

    /**
     * Lambda Layer version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private LayerVersionState() {}

    private LayerVersionState(LayerVersionState $) {
        this.arn = $.arn;
        this.code = $.code;
        this.compatibleArchitectures = $.compatibleArchitectures;
        this.compatibleRuntimes = $.compatibleRuntimes;
        this.createdDate = $.createdDate;
        this.description = $.description;
        this.layerArn = $.layerArn;
        this.layerName = $.layerName;
        this.licenseInfo = $.licenseInfo;
        this.s3Bucket = $.s3Bucket;
        this.s3Key = $.s3Key;
        this.s3ObjectVersion = $.s3ObjectVersion;
        this.signingJobArn = $.signingJobArn;
        this.signingProfileVersionArn = $.signingProfileVersionArn;
        this.skipDestroy = $.skipDestroy;
        this.sourceCodeHash = $.sourceCodeHash;
        this.sourceCodeSize = $.sourceCodeSize;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LayerVersionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LayerVersionState $;

        public Builder() {
            $ = new LayerVersionState();
        }

        public Builder(LayerVersionState defaults) {
            $ = new LayerVersionState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder code(@Nullable Output<Archive> code) {
            $.code = code;
            return this;
        }

        public Builder code(Archive code) {
            return code(Output.of(code));
        }

        public Builder compatibleArchitectures(@Nullable Output<List<String>> compatibleArchitectures) {
            $.compatibleArchitectures = compatibleArchitectures;
            return this;
        }

        public Builder compatibleArchitectures(List<String> compatibleArchitectures) {
            return compatibleArchitectures(Output.of(compatibleArchitectures));
        }

        public Builder compatibleArchitectures(String... compatibleArchitectures) {
            return compatibleArchitectures(List.of(compatibleArchitectures));
        }

        public Builder compatibleRuntimes(@Nullable Output<List<String>> compatibleRuntimes) {
            $.compatibleRuntimes = compatibleRuntimes;
            return this;
        }

        public Builder compatibleRuntimes(List<String> compatibleRuntimes) {
            return compatibleRuntimes(Output.of(compatibleRuntimes));
        }

        public Builder compatibleRuntimes(String... compatibleRuntimes) {
            return compatibleRuntimes(List.of(compatibleRuntimes));
        }

        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder layerArn(@Nullable Output<String> layerArn) {
            $.layerArn = layerArn;
            return this;
        }

        public Builder layerArn(String layerArn) {
            return layerArn(Output.of(layerArn));
        }

        public Builder layerName(@Nullable Output<String> layerName) {
            $.layerName = layerName;
            return this;
        }

        public Builder layerName(String layerName) {
            return layerName(Output.of(layerName));
        }

        public Builder licenseInfo(@Nullable Output<String> licenseInfo) {
            $.licenseInfo = licenseInfo;
            return this;
        }

        public Builder licenseInfo(String licenseInfo) {
            return licenseInfo(Output.of(licenseInfo));
        }

        public Builder s3Bucket(@Nullable Output<String> s3Bucket) {
            $.s3Bucket = s3Bucket;
            return this;
        }

        public Builder s3Bucket(String s3Bucket) {
            return s3Bucket(Output.of(s3Bucket));
        }

        public Builder s3Key(@Nullable Output<String> s3Key) {
            $.s3Key = s3Key;
            return this;
        }

        public Builder s3Key(String s3Key) {
            return s3Key(Output.of(s3Key));
        }

        public Builder s3ObjectVersion(@Nullable Output<String> s3ObjectVersion) {
            $.s3ObjectVersion = s3ObjectVersion;
            return this;
        }

        public Builder s3ObjectVersion(String s3ObjectVersion) {
            return s3ObjectVersion(Output.of(s3ObjectVersion));
        }

        public Builder signingJobArn(@Nullable Output<String> signingJobArn) {
            $.signingJobArn = signingJobArn;
            return this;
        }

        public Builder signingJobArn(String signingJobArn) {
            return signingJobArn(Output.of(signingJobArn));
        }

        public Builder signingProfileVersionArn(@Nullable Output<String> signingProfileVersionArn) {
            $.signingProfileVersionArn = signingProfileVersionArn;
            return this;
        }

        public Builder signingProfileVersionArn(String signingProfileVersionArn) {
            return signingProfileVersionArn(Output.of(signingProfileVersionArn));
        }

        public Builder skipDestroy(@Nullable Output<Boolean> skipDestroy) {
            $.skipDestroy = skipDestroy;
            return this;
        }

        public Builder skipDestroy(Boolean skipDestroy) {
            return skipDestroy(Output.of(skipDestroy));
        }

        public Builder sourceCodeHash(@Nullable Output<String> sourceCodeHash) {
            $.sourceCodeHash = sourceCodeHash;
            return this;
        }

        public Builder sourceCodeHash(String sourceCodeHash) {
            return sourceCodeHash(Output.of(sourceCodeHash));
        }

        public Builder sourceCodeSize(@Nullable Output<Integer> sourceCodeSize) {
            $.sourceCodeSize = sourceCodeSize;
            return this;
        }

        public Builder sourceCodeSize(Integer sourceCodeSize) {
            return sourceCodeSize(Output.of(sourceCodeSize));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public LayerVersionState build() {
            return $;
        }
    }

}
