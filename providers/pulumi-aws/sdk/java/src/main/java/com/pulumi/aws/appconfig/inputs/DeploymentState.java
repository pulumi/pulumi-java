// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentState extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentState Empty = new DeploymentState();

    /**
     * The application ID. Must be between 4 and 7 characters in length.
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return The application ID. Must be between 4 and 7 characters in length.
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * The Amazon Resource Name (ARN) of the AppConfig Deployment.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the AppConfig Deployment.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The configuration profile ID. Must be between 4 and 7 characters in length.
     * 
     */
    @Import(name="configurationProfileId")
    private @Nullable Output<String> configurationProfileId;

    /**
     * @return The configuration profile ID. Must be between 4 and 7 characters in length.
     * 
     */
    public Optional<Output<String>> configurationProfileId() {
        return Optional.ofNullable(this.configurationProfileId);
    }

    /**
     * The configuration version to deploy. Can be at most 1024 characters.
     * 
     */
    @Import(name="configurationVersion")
    private @Nullable Output<String> configurationVersion;

    /**
     * @return The configuration version to deploy. Can be at most 1024 characters.
     * 
     */
    public Optional<Output<String>> configurationVersion() {
        return Optional.ofNullable(this.configurationVersion);
    }

    /**
     * The deployment number.
     * 
     */
    @Import(name="deploymentNumber")
    private @Nullable Output<Integer> deploymentNumber;

    /**
     * @return The deployment number.
     * 
     */
    public Optional<Output<Integer>> deploymentNumber() {
        return Optional.ofNullable(this.deploymentNumber);
    }

    /**
     * The deployment strategy ID or name of a predefined deployment strategy. See [Predefined Deployment Strategies](https://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-creating-deployment-strategy.html#appconfig-creating-deployment-strategy-predefined) for more details.
     * 
     */
    @Import(name="deploymentStrategyId")
    private @Nullable Output<String> deploymentStrategyId;

    /**
     * @return The deployment strategy ID or name of a predefined deployment strategy. See [Predefined Deployment Strategies](https://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-creating-deployment-strategy.html#appconfig-creating-deployment-strategy-predefined) for more details.
     * 
     */
    public Optional<Output<String>> deploymentStrategyId() {
        return Optional.ofNullable(this.deploymentStrategyId);
    }

    /**
     * The description of the deployment. Can be at most 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the deployment. Can be at most 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The environment ID. Must be between 4 and 7 characters in length.
     * 
     */
    @Import(name="environmentId")
    private @Nullable Output<String> environmentId;

    /**
     * @return The environment ID. Must be between 4 and 7 characters in length.
     * 
     */
    public Optional<Output<String>> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * The state of the deployment.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the deployment.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    /**
     * @return A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private DeploymentState() {}

    private DeploymentState(DeploymentState $) {
        this.applicationId = $.applicationId;
        this.arn = $.arn;
        this.configurationProfileId = $.configurationProfileId;
        this.configurationVersion = $.configurationVersion;
        this.deploymentNumber = $.deploymentNumber;
        this.deploymentStrategyId = $.deploymentStrategyId;
        this.description = $.description;
        this.environmentId = $.environmentId;
        this.state = $.state;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentState $;

        public Builder() {
            $ = new DeploymentState();
        }

        public Builder(DeploymentState defaults) {
            $ = new DeploymentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId The application ID. Must be between 4 and 7 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId The application ID. Must be between 4 and 7 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the AppConfig Deployment.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the AppConfig Deployment.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param configurationProfileId The configuration profile ID. Must be between 4 and 7 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder configurationProfileId(@Nullable Output<String> configurationProfileId) {
            $.configurationProfileId = configurationProfileId;
            return this;
        }

        /**
         * @param configurationProfileId The configuration profile ID. Must be between 4 and 7 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder configurationProfileId(String configurationProfileId) {
            return configurationProfileId(Output.of(configurationProfileId));
        }

        /**
         * @param configurationVersion The configuration version to deploy. Can be at most 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder configurationVersion(@Nullable Output<String> configurationVersion) {
            $.configurationVersion = configurationVersion;
            return this;
        }

        /**
         * @param configurationVersion The configuration version to deploy. Can be at most 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder configurationVersion(String configurationVersion) {
            return configurationVersion(Output.of(configurationVersion));
        }

        /**
         * @param deploymentNumber The deployment number.
         * 
         * @return builder
         * 
         */
        public Builder deploymentNumber(@Nullable Output<Integer> deploymentNumber) {
            $.deploymentNumber = deploymentNumber;
            return this;
        }

        /**
         * @param deploymentNumber The deployment number.
         * 
         * @return builder
         * 
         */
        public Builder deploymentNumber(Integer deploymentNumber) {
            return deploymentNumber(Output.of(deploymentNumber));
        }

        /**
         * @param deploymentStrategyId The deployment strategy ID or name of a predefined deployment strategy. See [Predefined Deployment Strategies](https://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-creating-deployment-strategy.html#appconfig-creating-deployment-strategy-predefined) for more details.
         * 
         * @return builder
         * 
         */
        public Builder deploymentStrategyId(@Nullable Output<String> deploymentStrategyId) {
            $.deploymentStrategyId = deploymentStrategyId;
            return this;
        }

        /**
         * @param deploymentStrategyId The deployment strategy ID or name of a predefined deployment strategy. See [Predefined Deployment Strategies](https://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-creating-deployment-strategy.html#appconfig-creating-deployment-strategy-predefined) for more details.
         * 
         * @return builder
         * 
         */
        public Builder deploymentStrategyId(String deploymentStrategyId) {
            return deploymentStrategyId(Output.of(deploymentStrategyId));
        }

        /**
         * @param description The description of the deployment. Can be at most 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the deployment. Can be at most 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentId The environment ID. Must be between 4 and 7 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId The environment ID. Must be between 4 and 7 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param state The state of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        /**
         * @param tagsAll A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
         * 
         * @return builder
         * 
         */
        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public DeploymentState build() {
            return $;
        }
    }

}
