// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.organizations.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetOrganizationNonMasterAccount extends com.pulumi.resources.InvokeArgs {

    public static final GetOrganizationNonMasterAccount Empty = new GetOrganizationNonMasterAccount();

    /**
     * ARN of the root
     * 
     */
    @Import(name="arn", required=true)
    private String arn;

    /**
     * @return ARN of the root
     * 
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Email of the account
     * 
     */
    @Import(name="email", required=true)
    private String email;

    /**
     * @return Email of the account
     * 
     */
    public String email() {
        return this.email;
    }

    /**
     * Identifier of the root
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Identifier of the root
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The name of the policy type
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the policy type
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The status of the policy type as it relates to the associated root
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return The status of the policy type as it relates to the associated root
     * 
     */
    public String status() {
        return this.status;
    }

    private GetOrganizationNonMasterAccount() {}

    private GetOrganizationNonMasterAccount(GetOrganizationNonMasterAccount $) {
        this.arn = $.arn;
        this.email = $.email;
        this.id = $.id;
        this.name = $.name;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrganizationNonMasterAccount defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrganizationNonMasterAccount $;

        public Builder() {
            $ = new GetOrganizationNonMasterAccount();
        }

        public Builder(GetOrganizationNonMasterAccount defaults) {
            $ = new GetOrganizationNonMasterAccount(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn ARN of the root
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param email Email of the account
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            $.email = email;
            return this;
        }

        /**
         * @param id Identifier of the root
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name The name of the policy type
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param status The status of the policy type as it relates to the associated root
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public GetOrganizationNonMasterAccount build() {
            $.arn = Objects.requireNonNull($.arn, "expected parameter 'arn' to be non-null");
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
