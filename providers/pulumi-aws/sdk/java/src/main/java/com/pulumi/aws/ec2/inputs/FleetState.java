// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.aws.ec2.inputs.FleetLaunchTemplateConfigGetArgs;
import com.pulumi.aws.ec2.inputs.FleetOnDemandOptionsGetArgs;
import com.pulumi.aws.ec2.inputs.FleetSpotOptionsGetArgs;
import com.pulumi.aws.ec2.inputs.FleetTargetCapacitySpecificationGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FleetState extends com.pulumi.resources.ResourceArgs {

    public static final FleetState Empty = new FleetState();

    /**
     * Whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2. Valid values: `no-termination`, `termination`. Defaults to `termination`.
     * 
     */
    @Import(name="excessCapacityTerminationPolicy")
      private final @Nullable Output<String> excessCapacityTerminationPolicy;

    public Output<String> excessCapacityTerminationPolicy() {
        return this.excessCapacityTerminationPolicy == null ? Codegen.empty() : this.excessCapacityTerminationPolicy;
    }

    /**
     * Nested argument containing EC2 Launch Template configurations. Defined below.
     * 
     */
    @Import(name="launchTemplateConfig")
      private final @Nullable Output<FleetLaunchTemplateConfigGetArgs> launchTemplateConfig;

    public Output<FleetLaunchTemplateConfigGetArgs> launchTemplateConfig() {
        return this.launchTemplateConfig == null ? Codegen.empty() : this.launchTemplateConfig;
    }

    /**
     * Nested argument containing On-Demand configurations. Defined below.
     * 
     */
    @Import(name="onDemandOptions")
      private final @Nullable Output<FleetOnDemandOptionsGetArgs> onDemandOptions;

    public Output<FleetOnDemandOptionsGetArgs> onDemandOptions() {
        return this.onDemandOptions == null ? Codegen.empty() : this.onDemandOptions;
    }

    /**
     * Whether EC2 Fleet should replace unhealthy instances. Defaults to `false`.
     * 
     */
    @Import(name="replaceUnhealthyInstances")
      private final @Nullable Output<Boolean> replaceUnhealthyInstances;

    public Output<Boolean> replaceUnhealthyInstances() {
        return this.replaceUnhealthyInstances == null ? Codegen.empty() : this.replaceUnhealthyInstances;
    }

    /**
     * Nested argument containing Spot configurations. Defined below.
     * 
     */
    @Import(name="spotOptions")
      private final @Nullable Output<FleetSpotOptionsGetArgs> spotOptions;

    public Output<FleetSpotOptionsGetArgs> spotOptions() {
        return this.spotOptions == null ? Codegen.empty() : this.spotOptions;
    }

    /**
     * Map of Fleet tags. To tag instances at launch, specify the tags in the Launch Template. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * Nested argument containing target capacity configurations. Defined below.
     * 
     */
    @Import(name="targetCapacitySpecification")
      private final @Nullable Output<FleetTargetCapacitySpecificationGetArgs> targetCapacitySpecification;

    public Output<FleetTargetCapacitySpecificationGetArgs> targetCapacitySpecification() {
        return this.targetCapacitySpecification == null ? Codegen.empty() : this.targetCapacitySpecification;
    }

    /**
     * Whether to terminate instances for an EC2 Fleet if it is deleted successfully. Defaults to `false`.
     * 
     */
    @Import(name="terminateInstances")
      private final @Nullable Output<Boolean> terminateInstances;

    public Output<Boolean> terminateInstances() {
        return this.terminateInstances == null ? Codegen.empty() : this.terminateInstances;
    }

    /**
     * Whether running instances should be terminated when the EC2 Fleet expires. Defaults to `false`.
     * 
     */
    @Import(name="terminateInstancesWithExpiration")
      private final @Nullable Output<Boolean> terminateInstancesWithExpiration;

    public Output<Boolean> terminateInstancesWithExpiration() {
        return this.terminateInstancesWithExpiration == null ? Codegen.empty() : this.terminateInstancesWithExpiration;
    }

    /**
     * The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. Valid values: `maintain`, `request`. Defaults to `maintain`.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    public FleetState(
        @Nullable Output<String> excessCapacityTerminationPolicy,
        @Nullable Output<FleetLaunchTemplateConfigGetArgs> launchTemplateConfig,
        @Nullable Output<FleetOnDemandOptionsGetArgs> onDemandOptions,
        @Nullable Output<Boolean> replaceUnhealthyInstances,
        @Nullable Output<FleetSpotOptionsGetArgs> spotOptions,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<FleetTargetCapacitySpecificationGetArgs> targetCapacitySpecification,
        @Nullable Output<Boolean> terminateInstances,
        @Nullable Output<Boolean> terminateInstancesWithExpiration,
        @Nullable Output<String> type) {
        this.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
        this.launchTemplateConfig = launchTemplateConfig;
        this.onDemandOptions = onDemandOptions;
        this.replaceUnhealthyInstances = replaceUnhealthyInstances;
        this.spotOptions = spotOptions;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.targetCapacitySpecification = targetCapacitySpecification;
        this.terminateInstances = terminateInstances;
        this.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
        this.type = type;
    }

    private FleetState() {
        this.excessCapacityTerminationPolicy = Codegen.empty();
        this.launchTemplateConfig = Codegen.empty();
        this.onDemandOptions = Codegen.empty();
        this.replaceUnhealthyInstances = Codegen.empty();
        this.spotOptions = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.targetCapacitySpecification = Codegen.empty();
        this.terminateInstances = Codegen.empty();
        this.terminateInstancesWithExpiration = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FleetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> excessCapacityTerminationPolicy;
        private @Nullable Output<FleetLaunchTemplateConfigGetArgs> launchTemplateConfig;
        private @Nullable Output<FleetOnDemandOptionsGetArgs> onDemandOptions;
        private @Nullable Output<Boolean> replaceUnhealthyInstances;
        private @Nullable Output<FleetSpotOptionsGetArgs> spotOptions;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<FleetTargetCapacitySpecificationGetArgs> targetCapacitySpecification;
        private @Nullable Output<Boolean> terminateInstances;
        private @Nullable Output<Boolean> terminateInstancesWithExpiration;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(FleetState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excessCapacityTerminationPolicy = defaults.excessCapacityTerminationPolicy;
    	      this.launchTemplateConfig = defaults.launchTemplateConfig;
    	      this.onDemandOptions = defaults.onDemandOptions;
    	      this.replaceUnhealthyInstances = defaults.replaceUnhealthyInstances;
    	      this.spotOptions = defaults.spotOptions;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.targetCapacitySpecification = defaults.targetCapacitySpecification;
    	      this.terminateInstances = defaults.terminateInstances;
    	      this.terminateInstancesWithExpiration = defaults.terminateInstancesWithExpiration;
    	      this.type = defaults.type;
        }

        public Builder excessCapacityTerminationPolicy(@Nullable Output<String> excessCapacityTerminationPolicy) {
            this.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy;
            return this;
        }
        public Builder excessCapacityTerminationPolicy(@Nullable String excessCapacityTerminationPolicy) {
            this.excessCapacityTerminationPolicy = Codegen.ofNullable(excessCapacityTerminationPolicy);
            return this;
        }
        public Builder launchTemplateConfig(@Nullable Output<FleetLaunchTemplateConfigGetArgs> launchTemplateConfig) {
            this.launchTemplateConfig = launchTemplateConfig;
            return this;
        }
        public Builder launchTemplateConfig(@Nullable FleetLaunchTemplateConfigGetArgs launchTemplateConfig) {
            this.launchTemplateConfig = Codegen.ofNullable(launchTemplateConfig);
            return this;
        }
        public Builder onDemandOptions(@Nullable Output<FleetOnDemandOptionsGetArgs> onDemandOptions) {
            this.onDemandOptions = onDemandOptions;
            return this;
        }
        public Builder onDemandOptions(@Nullable FleetOnDemandOptionsGetArgs onDemandOptions) {
            this.onDemandOptions = Codegen.ofNullable(onDemandOptions);
            return this;
        }
        public Builder replaceUnhealthyInstances(@Nullable Output<Boolean> replaceUnhealthyInstances) {
            this.replaceUnhealthyInstances = replaceUnhealthyInstances;
            return this;
        }
        public Builder replaceUnhealthyInstances(@Nullable Boolean replaceUnhealthyInstances) {
            this.replaceUnhealthyInstances = Codegen.ofNullable(replaceUnhealthyInstances);
            return this;
        }
        public Builder spotOptions(@Nullable Output<FleetSpotOptionsGetArgs> spotOptions) {
            this.spotOptions = spotOptions;
            return this;
        }
        public Builder spotOptions(@Nullable FleetSpotOptionsGetArgs spotOptions) {
            this.spotOptions = Codegen.ofNullable(spotOptions);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder targetCapacitySpecification(@Nullable Output<FleetTargetCapacitySpecificationGetArgs> targetCapacitySpecification) {
            this.targetCapacitySpecification = targetCapacitySpecification;
            return this;
        }
        public Builder targetCapacitySpecification(@Nullable FleetTargetCapacitySpecificationGetArgs targetCapacitySpecification) {
            this.targetCapacitySpecification = Codegen.ofNullable(targetCapacitySpecification);
            return this;
        }
        public Builder terminateInstances(@Nullable Output<Boolean> terminateInstances) {
            this.terminateInstances = terminateInstances;
            return this;
        }
        public Builder terminateInstances(@Nullable Boolean terminateInstances) {
            this.terminateInstances = Codegen.ofNullable(terminateInstances);
            return this;
        }
        public Builder terminateInstancesWithExpiration(@Nullable Output<Boolean> terminateInstancesWithExpiration) {
            this.terminateInstancesWithExpiration = terminateInstancesWithExpiration;
            return this;
        }
        public Builder terminateInstancesWithExpiration(@Nullable Boolean terminateInstancesWithExpiration) {
            this.terminateInstancesWithExpiration = Codegen.ofNullable(terminateInstancesWithExpiration);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }        public FleetState build() {
            return new FleetState(excessCapacityTerminationPolicy, launchTemplateConfig, onDemandOptions, replaceUnhealthyInstances, spotOptions, tags, tagsAll, targetCapacitySpecification, terminateInstances, terminateInstancesWithExpiration, type);
        }
    }
}
