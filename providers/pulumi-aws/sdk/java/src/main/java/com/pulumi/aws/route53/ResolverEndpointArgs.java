// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53;

import com.pulumi.aws.route53.inputs.ResolverEndpointIpAddressArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ResolverEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResolverEndpointArgs Empty = new ResolverEndpointArgs();

    /**
     * The direction of DNS queries to or from the Route 53 Resolver endpoint.
     * Valid values are `INBOUND` (resolver forwards DNS queries to the DNS service for a VPC from your network or another VPC)
     * or `OUTBOUND` (resolver forwards DNS queries from the DNS service for a VPC to your network or another VPC).
     * 
     */
    @Import(name="direction", required=true)
      private final Output<String> direction;

    public Output<String> direction() {
        return this.direction;
    }

    /**
     * The subnets and IP addresses in your VPC that you want DNS queries to pass through on the way from your VPCs
     * to your network (for outbound endpoints) or on the way from your network to your VPCs (for inbound endpoints). Described below.
     * 
     */
    @Import(name="ipAddresses", required=true)
      private final Output<List<ResolverEndpointIpAddressArgs>> ipAddresses;

    public Output<List<ResolverEndpointIpAddressArgs>> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * The friendly name of the Route 53 Resolver endpoint.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ID of one or more security groups that you want to use to control access to this VPC.
     * 
     */
    @Import(name="securityGroupIds", required=true)
      private final Output<List<String>> securityGroupIds;

    public Output<List<String>> securityGroupIds() {
        return this.securityGroupIds;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public ResolverEndpointArgs(
        Output<String> direction,
        Output<List<ResolverEndpointIpAddressArgs>> ipAddresses,
        @Nullable Output<String> name,
        Output<List<String>> securityGroupIds,
        @Nullable Output<Map<String,String>> tags) {
        this.direction = Objects.requireNonNull(direction, "expected parameter 'direction' to be non-null");
        this.ipAddresses = Objects.requireNonNull(ipAddresses, "expected parameter 'ipAddresses' to be non-null");
        this.name = name;
        this.securityGroupIds = Objects.requireNonNull(securityGroupIds, "expected parameter 'securityGroupIds' to be non-null");
        this.tags = tags;
    }

    private ResolverEndpointArgs() {
        this.direction = Codegen.empty();
        this.ipAddresses = Codegen.empty();
        this.name = Codegen.empty();
        this.securityGroupIds = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> direction;
        private Output<List<ResolverEndpointIpAddressArgs>> ipAddresses;
        private @Nullable Output<String> name;
        private Output<List<String>> securityGroupIds;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ResolverEndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.direction = defaults.direction;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.name = defaults.name;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.tags = defaults.tags;
        }

        public Builder direction(Output<String> direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }
        public Builder direction(String direction) {
            this.direction = Output.of(Objects.requireNonNull(direction));
            return this;
        }
        public Builder ipAddresses(Output<List<ResolverEndpointIpAddressArgs>> ipAddresses) {
            this.ipAddresses = Objects.requireNonNull(ipAddresses);
            return this;
        }
        public Builder ipAddresses(List<ResolverEndpointIpAddressArgs> ipAddresses) {
            this.ipAddresses = Output.of(Objects.requireNonNull(ipAddresses));
            return this;
        }
        public Builder ipAddresses(ResolverEndpointIpAddressArgs... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder securityGroupIds(Output<List<String>> securityGroupIds) {
            this.securityGroupIds = Objects.requireNonNull(securityGroupIds);
            return this;
        }
        public Builder securityGroupIds(List<String> securityGroupIds) {
            this.securityGroupIds = Output.of(Objects.requireNonNull(securityGroupIds));
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public ResolverEndpointArgs build() {
            return new ResolverEndpointArgs(direction, ipAddresses, name, securityGroupIds, tags);
        }
    }
}
