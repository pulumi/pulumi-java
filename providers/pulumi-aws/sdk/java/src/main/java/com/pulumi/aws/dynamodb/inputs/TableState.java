// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dynamodb.inputs;

import com.pulumi.aws.dynamodb.inputs.TableAttributeGetArgs;
import com.pulumi.aws.dynamodb.inputs.TableGlobalSecondaryIndexGetArgs;
import com.pulumi.aws.dynamodb.inputs.TableLocalSecondaryIndexGetArgs;
import com.pulumi.aws.dynamodb.inputs.TablePointInTimeRecoveryGetArgs;
import com.pulumi.aws.dynamodb.inputs.TableReplicaGetArgs;
import com.pulumi.aws.dynamodb.inputs.TableServerSideEncryptionGetArgs;
import com.pulumi.aws.dynamodb.inputs.TableTtlGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableState extends com.pulumi.resources.ResourceArgs {

    public static final TableState Empty = new TableState();

    /**
     * The arn of the table
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes. Each attribute has two properties:
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<List<TableAttributeGetArgs>> attributes;

    public Optional<Output<List<TableAttributeGetArgs>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
     * 
     */
    @Import(name="billingMode")
    private @Nullable Output<String> billingMode;

    public Optional<Output<String>> billingMode() {
        return Optional.ofNullable(this.billingMode);
    }

    /**
     * Describe a GSI for the table;
     * subject to the normal limits on the number of GSIs, projected
     * attributes, etc.
     * 
     */
    @Import(name="globalSecondaryIndexes")
    private @Nullable Output<List<TableGlobalSecondaryIndexGetArgs>> globalSecondaryIndexes;

    public Optional<Output<List<TableGlobalSecondaryIndexGetArgs>>> globalSecondaryIndexes() {
        return Optional.ofNullable(this.globalSecondaryIndexes);
    }

    /**
     * The name of the hash key in the index; must be
     * defined as an attribute in the resource.
     * 
     */
    @Import(name="hashKey")
    private @Nullable Output<String> hashKey;

    public Optional<Output<String>> hashKey() {
        return Optional.ofNullable(this.hashKey);
    }

    /**
     * Describe an LSI on the table;
     * these can only be allocated *at creation* so you cannot change this
     * definition after you have created the resource.
     * 
     */
    @Import(name="localSecondaryIndexes")
    private @Nullable Output<List<TableLocalSecondaryIndexGetArgs>> localSecondaryIndexes;

    public Optional<Output<List<TableLocalSecondaryIndexGetArgs>>> localSecondaryIndexes() {
        return Optional.ofNullable(this.localSecondaryIndexes);
    }

    /**
     * The name of the index
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Enable point-in-time recovery options.
     * 
     */
    @Import(name="pointInTimeRecovery")
    private @Nullable Output<TablePointInTimeRecoveryGetArgs> pointInTimeRecovery;

    public Optional<Output<TablePointInTimeRecoveryGetArgs>> pointInTimeRecovery() {
        return Optional.ofNullable(this.pointInTimeRecovery);
    }

    /**
     * The name of the range key; must be defined
     * 
     */
    @Import(name="rangeKey")
    private @Nullable Output<String> rangeKey;

    public Optional<Output<String>> rangeKey() {
        return Optional.ofNullable(this.rangeKey);
    }

    /**
     * The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
     * 
     */
    @Import(name="readCapacity")
    private @Nullable Output<Integer> readCapacity;

    public Optional<Output<Integer>> readCapacity() {
        return Optional.ofNullable(this.readCapacity);
    }

    /**
     * Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. Detailed below.
     * 
     */
    @Import(name="replicas")
    private @Nullable Output<List<TableReplicaGetArgs>> replicas;

    public Optional<Output<List<TableReplicaGetArgs>>> replicas() {
        return Optional.ofNullable(this.replicas);
    }

    /**
     * The time of the point-in-time recovery point to restore.
     * 
     */
    @Import(name="restoreDateTime")
    private @Nullable Output<String> restoreDateTime;

    public Optional<Output<String>> restoreDateTime() {
        return Optional.ofNullable(this.restoreDateTime);
    }

    /**
     * The name of the table to restore. Must match the name of an existing table.
     * 
     */
    @Import(name="restoreSourceName")
    private @Nullable Output<String> restoreSourceName;

    public Optional<Output<String>> restoreSourceName() {
        return Optional.ofNullable(this.restoreSourceName);
    }

    /**
     * If set, restores table to the most recent point-in-time recovery point.
     * 
     */
    @Import(name="restoreToLatestTime")
    private @Nullable Output<Boolean> restoreToLatestTime;

    public Optional<Output<Boolean>> restoreToLatestTime() {
        return Optional.ofNullable(this.restoreToLatestTime);
    }

    /**
     * Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn&#39;t specified.
     * 
     */
    @Import(name="serverSideEncryption")
    private @Nullable Output<TableServerSideEncryptionGetArgs> serverSideEncryption;

    public Optional<Output<TableServerSideEncryptionGetArgs>> serverSideEncryption() {
        return Optional.ofNullable(this.serverSideEncryption);
    }

    /**
     * The ARN of the Table Stream. Only available when `stream_enabled = true`
     * 
     */
    @Import(name="streamArn")
    private @Nullable Output<String> streamArn;

    public Optional<Output<String>> streamArn() {
        return Optional.ofNullable(this.streamArn);
    }

    /**
     * Indicates whether Streams are to be enabled (true) or disabled (false).
     * 
     */
    @Import(name="streamEnabled")
    private @Nullable Output<Boolean> streamEnabled;

    public Optional<Output<Boolean>> streamEnabled() {
        return Optional.ofNullable(this.streamEnabled);
    }

    /**
     * A timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not
     * a unique identifier for the stream on its own. However, the combination of AWS customer ID,
     * table name and this field is guaranteed to be unique.
     * It can be used for creating CloudWatch Alarms. Only available when `stream_enabled = true`
     * 
     */
    @Import(name="streamLabel")
    private @Nullable Output<String> streamLabel;

    public Optional<Output<String>> streamLabel() {
        return Optional.ofNullable(this.streamLabel);
    }

    /**
     * When an item in the table is modified, StreamViewType determines what information is written to the table&#39;s stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
     * 
     */
    @Import(name="streamViewType")
    private @Nullable Output<String> streamViewType;

    public Optional<Output<String>> streamViewType() {
        return Optional.ofNullable(this.streamViewType);
    }

    /**
     * The storage class of the table. Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
     * 
     */
    @Import(name="tableClass")
    private @Nullable Output<String> tableClass;

    public Optional<Output<String>> tableClass() {
        return Optional.ofNullable(this.tableClass);
    }

    /**
     * A map of tags to populate on the created table. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Defines ttl, has two properties, and can only be specified once:
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<TableTtlGetArgs> ttl;

    public Optional<Output<TableTtlGetArgs>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
     * 
     */
    @Import(name="writeCapacity")
    private @Nullable Output<Integer> writeCapacity;

    public Optional<Output<Integer>> writeCapacity() {
        return Optional.ofNullable(this.writeCapacity);
    }

    private TableState() {}

    private TableState(TableState $) {
        this.arn = $.arn;
        this.attributes = $.attributes;
        this.billingMode = $.billingMode;
        this.globalSecondaryIndexes = $.globalSecondaryIndexes;
        this.hashKey = $.hashKey;
        this.localSecondaryIndexes = $.localSecondaryIndexes;
        this.name = $.name;
        this.pointInTimeRecovery = $.pointInTimeRecovery;
        this.rangeKey = $.rangeKey;
        this.readCapacity = $.readCapacity;
        this.replicas = $.replicas;
        this.restoreDateTime = $.restoreDateTime;
        this.restoreSourceName = $.restoreSourceName;
        this.restoreToLatestTime = $.restoreToLatestTime;
        this.serverSideEncryption = $.serverSideEncryption;
        this.streamArn = $.streamArn;
        this.streamEnabled = $.streamEnabled;
        this.streamLabel = $.streamLabel;
        this.streamViewType = $.streamViewType;
        this.tableClass = $.tableClass;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.ttl = $.ttl;
        this.writeCapacity = $.writeCapacity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableState $;

        public Builder() {
            $ = new TableState();
        }

        public Builder(TableState defaults) {
            $ = new TableState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder attributes(@Nullable Output<List<TableAttributeGetArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(List<TableAttributeGetArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder attributes(TableAttributeGetArgs... attributes) {
            return attributes(List.of(attributes));
        }

        public Builder billingMode(@Nullable Output<String> billingMode) {
            $.billingMode = billingMode;
            return this;
        }

        public Builder billingMode(String billingMode) {
            return billingMode(Output.of(billingMode));
        }

        public Builder globalSecondaryIndexes(@Nullable Output<List<TableGlobalSecondaryIndexGetArgs>> globalSecondaryIndexes) {
            $.globalSecondaryIndexes = globalSecondaryIndexes;
            return this;
        }

        public Builder globalSecondaryIndexes(List<TableGlobalSecondaryIndexGetArgs> globalSecondaryIndexes) {
            return globalSecondaryIndexes(Output.of(globalSecondaryIndexes));
        }

        public Builder globalSecondaryIndexes(TableGlobalSecondaryIndexGetArgs... globalSecondaryIndexes) {
            return globalSecondaryIndexes(List.of(globalSecondaryIndexes));
        }

        public Builder hashKey(@Nullable Output<String> hashKey) {
            $.hashKey = hashKey;
            return this;
        }

        public Builder hashKey(String hashKey) {
            return hashKey(Output.of(hashKey));
        }

        public Builder localSecondaryIndexes(@Nullable Output<List<TableLocalSecondaryIndexGetArgs>> localSecondaryIndexes) {
            $.localSecondaryIndexes = localSecondaryIndexes;
            return this;
        }

        public Builder localSecondaryIndexes(List<TableLocalSecondaryIndexGetArgs> localSecondaryIndexes) {
            return localSecondaryIndexes(Output.of(localSecondaryIndexes));
        }

        public Builder localSecondaryIndexes(TableLocalSecondaryIndexGetArgs... localSecondaryIndexes) {
            return localSecondaryIndexes(List.of(localSecondaryIndexes));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pointInTimeRecovery(@Nullable Output<TablePointInTimeRecoveryGetArgs> pointInTimeRecovery) {
            $.pointInTimeRecovery = pointInTimeRecovery;
            return this;
        }

        public Builder pointInTimeRecovery(TablePointInTimeRecoveryGetArgs pointInTimeRecovery) {
            return pointInTimeRecovery(Output.of(pointInTimeRecovery));
        }

        public Builder rangeKey(@Nullable Output<String> rangeKey) {
            $.rangeKey = rangeKey;
            return this;
        }

        public Builder rangeKey(String rangeKey) {
            return rangeKey(Output.of(rangeKey));
        }

        public Builder readCapacity(@Nullable Output<Integer> readCapacity) {
            $.readCapacity = readCapacity;
            return this;
        }

        public Builder readCapacity(Integer readCapacity) {
            return readCapacity(Output.of(readCapacity));
        }

        public Builder replicas(@Nullable Output<List<TableReplicaGetArgs>> replicas) {
            $.replicas = replicas;
            return this;
        }

        public Builder replicas(List<TableReplicaGetArgs> replicas) {
            return replicas(Output.of(replicas));
        }

        public Builder replicas(TableReplicaGetArgs... replicas) {
            return replicas(List.of(replicas));
        }

        public Builder restoreDateTime(@Nullable Output<String> restoreDateTime) {
            $.restoreDateTime = restoreDateTime;
            return this;
        }

        public Builder restoreDateTime(String restoreDateTime) {
            return restoreDateTime(Output.of(restoreDateTime));
        }

        public Builder restoreSourceName(@Nullable Output<String> restoreSourceName) {
            $.restoreSourceName = restoreSourceName;
            return this;
        }

        public Builder restoreSourceName(String restoreSourceName) {
            return restoreSourceName(Output.of(restoreSourceName));
        }

        public Builder restoreToLatestTime(@Nullable Output<Boolean> restoreToLatestTime) {
            $.restoreToLatestTime = restoreToLatestTime;
            return this;
        }

        public Builder restoreToLatestTime(Boolean restoreToLatestTime) {
            return restoreToLatestTime(Output.of(restoreToLatestTime));
        }

        public Builder serverSideEncryption(@Nullable Output<TableServerSideEncryptionGetArgs> serverSideEncryption) {
            $.serverSideEncryption = serverSideEncryption;
            return this;
        }

        public Builder serverSideEncryption(TableServerSideEncryptionGetArgs serverSideEncryption) {
            return serverSideEncryption(Output.of(serverSideEncryption));
        }

        public Builder streamArn(@Nullable Output<String> streamArn) {
            $.streamArn = streamArn;
            return this;
        }

        public Builder streamArn(String streamArn) {
            return streamArn(Output.of(streamArn));
        }

        public Builder streamEnabled(@Nullable Output<Boolean> streamEnabled) {
            $.streamEnabled = streamEnabled;
            return this;
        }

        public Builder streamEnabled(Boolean streamEnabled) {
            return streamEnabled(Output.of(streamEnabled));
        }

        public Builder streamLabel(@Nullable Output<String> streamLabel) {
            $.streamLabel = streamLabel;
            return this;
        }

        public Builder streamLabel(String streamLabel) {
            return streamLabel(Output.of(streamLabel));
        }

        public Builder streamViewType(@Nullable Output<String> streamViewType) {
            $.streamViewType = streamViewType;
            return this;
        }

        public Builder streamViewType(String streamViewType) {
            return streamViewType(Output.of(streamViewType));
        }

        public Builder tableClass(@Nullable Output<String> tableClass) {
            $.tableClass = tableClass;
            return this;
        }

        public Builder tableClass(String tableClass) {
            return tableClass(Output.of(tableClass));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder ttl(@Nullable Output<TableTtlGetArgs> ttl) {
            $.ttl = ttl;
            return this;
        }

        public Builder ttl(TableTtlGetArgs ttl) {
            return ttl(Output.of(ttl));
        }

        public Builder writeCapacity(@Nullable Output<Integer> writeCapacity) {
            $.writeCapacity = writeCapacity;
            return this;
        }

        public Builder writeCapacity(Integer writeCapacity) {
            return writeCapacity(Output.of(writeCapacity));
        }

        public TableState build() {
            return $;
        }
    }

}
