// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dynamodb.inputs;

import com.pulumi.aws.dynamodb.inputs.TableAttributeGetArgs;
import com.pulumi.aws.dynamodb.inputs.TableGlobalSecondaryIndexGetArgs;
import com.pulumi.aws.dynamodb.inputs.TableLocalSecondaryIndexGetArgs;
import com.pulumi.aws.dynamodb.inputs.TablePointInTimeRecoveryGetArgs;
import com.pulumi.aws.dynamodb.inputs.TableReplicaGetArgs;
import com.pulumi.aws.dynamodb.inputs.TableServerSideEncryptionGetArgs;
import com.pulumi.aws.dynamodb.inputs.TableTtlGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TableState extends com.pulumi.resources.ResourceArgs {

    public static final TableState Empty = new TableState();

    /**
     * The arn of the table
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes. Each attribute has two properties:
     * 
     */
    @Import(name="attributes")
      private final @Nullable Output<List<TableAttributeGetArgs>> attributes;

    public Output<List<TableAttributeGetArgs>> attributes() {
        return this.attributes == null ? Codegen.empty() : this.attributes;
    }

    /**
     * Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
     * 
     */
    @Import(name="billingMode")
      private final @Nullable Output<String> billingMode;

    public Output<String> billingMode() {
        return this.billingMode == null ? Codegen.empty() : this.billingMode;
    }

    /**
     * Describe a GSI for the table;
     * subject to the normal limits on the number of GSIs, projected
     * attributes, etc.
     * 
     */
    @Import(name="globalSecondaryIndexes")
      private final @Nullable Output<List<TableGlobalSecondaryIndexGetArgs>> globalSecondaryIndexes;

    public Output<List<TableGlobalSecondaryIndexGetArgs>> globalSecondaryIndexes() {
        return this.globalSecondaryIndexes == null ? Codegen.empty() : this.globalSecondaryIndexes;
    }

    /**
     * The name of the hash key in the index; must be
     * defined as an attribute in the resource.
     * 
     */
    @Import(name="hashKey")
      private final @Nullable Output<String> hashKey;

    public Output<String> hashKey() {
        return this.hashKey == null ? Codegen.empty() : this.hashKey;
    }

    /**
     * Describe an LSI on the table;
     * these can only be allocated *at creation* so you cannot change this
     * definition after you have created the resource.
     * 
     */
    @Import(name="localSecondaryIndexes")
      private final @Nullable Output<List<TableLocalSecondaryIndexGetArgs>> localSecondaryIndexes;

    public Output<List<TableLocalSecondaryIndexGetArgs>> localSecondaryIndexes() {
        return this.localSecondaryIndexes == null ? Codegen.empty() : this.localSecondaryIndexes;
    }

    /**
     * The name of the index
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Enable point-in-time recovery options.
     * 
     */
    @Import(name="pointInTimeRecovery")
      private final @Nullable Output<TablePointInTimeRecoveryGetArgs> pointInTimeRecovery;

    public Output<TablePointInTimeRecoveryGetArgs> pointInTimeRecovery() {
        return this.pointInTimeRecovery == null ? Codegen.empty() : this.pointInTimeRecovery;
    }

    /**
     * The name of the range key; must be defined
     * 
     */
    @Import(name="rangeKey")
      private final @Nullable Output<String> rangeKey;

    public Output<String> rangeKey() {
        return this.rangeKey == null ? Codegen.empty() : this.rangeKey;
    }

    /**
     * The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
     * 
     */
    @Import(name="readCapacity")
      private final @Nullable Output<Integer> readCapacity;

    public Output<Integer> readCapacity() {
        return this.readCapacity == null ? Codegen.empty() : this.readCapacity;
    }

    /**
     * Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. Detailed below.
     * 
     */
    @Import(name="replicas")
      private final @Nullable Output<List<TableReplicaGetArgs>> replicas;

    public Output<List<TableReplicaGetArgs>> replicas() {
        return this.replicas == null ? Codegen.empty() : this.replicas;
    }

    /**
     * The time of the point-in-time recovery point to restore.
     * 
     */
    @Import(name="restoreDateTime")
      private final @Nullable Output<String> restoreDateTime;

    public Output<String> restoreDateTime() {
        return this.restoreDateTime == null ? Codegen.empty() : this.restoreDateTime;
    }

    /**
     * The name of the table to restore. Must match the name of an existing table.
     * 
     */
    @Import(name="restoreSourceName")
      private final @Nullable Output<String> restoreSourceName;

    public Output<String> restoreSourceName() {
        return this.restoreSourceName == null ? Codegen.empty() : this.restoreSourceName;
    }

    /**
     * If set, restores table to the most recent point-in-time recovery point.
     * 
     */
    @Import(name="restoreToLatestTime")
      private final @Nullable Output<Boolean> restoreToLatestTime;

    public Output<Boolean> restoreToLatestTime() {
        return this.restoreToLatestTime == null ? Codegen.empty() : this.restoreToLatestTime;
    }

    /**
     * Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn&#39;t specified.
     * 
     */
    @Import(name="serverSideEncryption")
      private final @Nullable Output<TableServerSideEncryptionGetArgs> serverSideEncryption;

    public Output<TableServerSideEncryptionGetArgs> serverSideEncryption() {
        return this.serverSideEncryption == null ? Codegen.empty() : this.serverSideEncryption;
    }

    /**
     * The ARN of the Table Stream. Only available when `stream_enabled = true`
     * 
     */
    @Import(name="streamArn")
      private final @Nullable Output<String> streamArn;

    public Output<String> streamArn() {
        return this.streamArn == null ? Codegen.empty() : this.streamArn;
    }

    /**
     * Indicates whether Streams are to be enabled (true) or disabled (false).
     * 
     */
    @Import(name="streamEnabled")
      private final @Nullable Output<Boolean> streamEnabled;

    public Output<Boolean> streamEnabled() {
        return this.streamEnabled == null ? Codegen.empty() : this.streamEnabled;
    }

    /**
     * A timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not
     * a unique identifier for the stream on its own. However, the combination of AWS customer ID,
     * table name and this field is guaranteed to be unique.
     * It can be used for creating CloudWatch Alarms. Only available when `stream_enabled = true`
     * 
     */
    @Import(name="streamLabel")
      private final @Nullable Output<String> streamLabel;

    public Output<String> streamLabel() {
        return this.streamLabel == null ? Codegen.empty() : this.streamLabel;
    }

    /**
     * When an item in the table is modified, StreamViewType determines what information is written to the table&#39;s stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
     * 
     */
    @Import(name="streamViewType")
      private final @Nullable Output<String> streamViewType;

    public Output<String> streamViewType() {
        return this.streamViewType == null ? Codegen.empty() : this.streamViewType;
    }

    /**
     * The storage class of the table. Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
     * 
     */
    @Import(name="tableClass")
      private final @Nullable Output<String> tableClass;

    public Output<String> tableClass() {
        return this.tableClass == null ? Codegen.empty() : this.tableClass;
    }

    /**
     * A map of tags to populate on the created table. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * Defines ttl, has two properties, and can only be specified once:
     * 
     */
    @Import(name="ttl")
      private final @Nullable Output<TableTtlGetArgs> ttl;

    public Output<TableTtlGetArgs> ttl() {
        return this.ttl == null ? Codegen.empty() : this.ttl;
    }

    /**
     * The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
     * 
     */
    @Import(name="writeCapacity")
      private final @Nullable Output<Integer> writeCapacity;

    public Output<Integer> writeCapacity() {
        return this.writeCapacity == null ? Codegen.empty() : this.writeCapacity;
    }

    public TableState(
        @Nullable Output<String> arn,
        @Nullable Output<List<TableAttributeGetArgs>> attributes,
        @Nullable Output<String> billingMode,
        @Nullable Output<List<TableGlobalSecondaryIndexGetArgs>> globalSecondaryIndexes,
        @Nullable Output<String> hashKey,
        @Nullable Output<List<TableLocalSecondaryIndexGetArgs>> localSecondaryIndexes,
        @Nullable Output<String> name,
        @Nullable Output<TablePointInTimeRecoveryGetArgs> pointInTimeRecovery,
        @Nullable Output<String> rangeKey,
        @Nullable Output<Integer> readCapacity,
        @Nullable Output<List<TableReplicaGetArgs>> replicas,
        @Nullable Output<String> restoreDateTime,
        @Nullable Output<String> restoreSourceName,
        @Nullable Output<Boolean> restoreToLatestTime,
        @Nullable Output<TableServerSideEncryptionGetArgs> serverSideEncryption,
        @Nullable Output<String> streamArn,
        @Nullable Output<Boolean> streamEnabled,
        @Nullable Output<String> streamLabel,
        @Nullable Output<String> streamViewType,
        @Nullable Output<String> tableClass,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<TableTtlGetArgs> ttl,
        @Nullable Output<Integer> writeCapacity) {
        this.arn = arn;
        this.attributes = attributes;
        this.billingMode = billingMode;
        this.globalSecondaryIndexes = globalSecondaryIndexes;
        this.hashKey = hashKey;
        this.localSecondaryIndexes = localSecondaryIndexes;
        this.name = name;
        this.pointInTimeRecovery = pointInTimeRecovery;
        this.rangeKey = rangeKey;
        this.readCapacity = readCapacity;
        this.replicas = replicas;
        this.restoreDateTime = restoreDateTime;
        this.restoreSourceName = restoreSourceName;
        this.restoreToLatestTime = restoreToLatestTime;
        this.serverSideEncryption = serverSideEncryption;
        this.streamArn = streamArn;
        this.streamEnabled = streamEnabled;
        this.streamLabel = streamLabel;
        this.streamViewType = streamViewType;
        this.tableClass = tableClass;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.ttl = ttl;
        this.writeCapacity = writeCapacity;
    }

    private TableState() {
        this.arn = Codegen.empty();
        this.attributes = Codegen.empty();
        this.billingMode = Codegen.empty();
        this.globalSecondaryIndexes = Codegen.empty();
        this.hashKey = Codegen.empty();
        this.localSecondaryIndexes = Codegen.empty();
        this.name = Codegen.empty();
        this.pointInTimeRecovery = Codegen.empty();
        this.rangeKey = Codegen.empty();
        this.readCapacity = Codegen.empty();
        this.replicas = Codegen.empty();
        this.restoreDateTime = Codegen.empty();
        this.restoreSourceName = Codegen.empty();
        this.restoreToLatestTime = Codegen.empty();
        this.serverSideEncryption = Codegen.empty();
        this.streamArn = Codegen.empty();
        this.streamEnabled = Codegen.empty();
        this.streamLabel = Codegen.empty();
        this.streamViewType = Codegen.empty();
        this.tableClass = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.ttl = Codegen.empty();
        this.writeCapacity = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<List<TableAttributeGetArgs>> attributes;
        private @Nullable Output<String> billingMode;
        private @Nullable Output<List<TableGlobalSecondaryIndexGetArgs>> globalSecondaryIndexes;
        private @Nullable Output<String> hashKey;
        private @Nullable Output<List<TableLocalSecondaryIndexGetArgs>> localSecondaryIndexes;
        private @Nullable Output<String> name;
        private @Nullable Output<TablePointInTimeRecoveryGetArgs> pointInTimeRecovery;
        private @Nullable Output<String> rangeKey;
        private @Nullable Output<Integer> readCapacity;
        private @Nullable Output<List<TableReplicaGetArgs>> replicas;
        private @Nullable Output<String> restoreDateTime;
        private @Nullable Output<String> restoreSourceName;
        private @Nullable Output<Boolean> restoreToLatestTime;
        private @Nullable Output<TableServerSideEncryptionGetArgs> serverSideEncryption;
        private @Nullable Output<String> streamArn;
        private @Nullable Output<Boolean> streamEnabled;
        private @Nullable Output<String> streamLabel;
        private @Nullable Output<String> streamViewType;
        private @Nullable Output<String> tableClass;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<TableTtlGetArgs> ttl;
        private @Nullable Output<Integer> writeCapacity;

        public Builder() {
    	      // Empty
        }

        public Builder(TableState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.attributes = defaults.attributes;
    	      this.billingMode = defaults.billingMode;
    	      this.globalSecondaryIndexes = defaults.globalSecondaryIndexes;
    	      this.hashKey = defaults.hashKey;
    	      this.localSecondaryIndexes = defaults.localSecondaryIndexes;
    	      this.name = defaults.name;
    	      this.pointInTimeRecovery = defaults.pointInTimeRecovery;
    	      this.rangeKey = defaults.rangeKey;
    	      this.readCapacity = defaults.readCapacity;
    	      this.replicas = defaults.replicas;
    	      this.restoreDateTime = defaults.restoreDateTime;
    	      this.restoreSourceName = defaults.restoreSourceName;
    	      this.restoreToLatestTime = defaults.restoreToLatestTime;
    	      this.serverSideEncryption = defaults.serverSideEncryption;
    	      this.streamArn = defaults.streamArn;
    	      this.streamEnabled = defaults.streamEnabled;
    	      this.streamLabel = defaults.streamLabel;
    	      this.streamViewType = defaults.streamViewType;
    	      this.tableClass = defaults.tableClass;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.ttl = defaults.ttl;
    	      this.writeCapacity = defaults.writeCapacity;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder attributes(@Nullable Output<List<TableAttributeGetArgs>> attributes) {
            this.attributes = attributes;
            return this;
        }
        public Builder attributes(@Nullable List<TableAttributeGetArgs> attributes) {
            this.attributes = Codegen.ofNullable(attributes);
            return this;
        }
        public Builder attributes(TableAttributeGetArgs... attributes) {
            return attributes(List.of(attributes));
        }
        public Builder billingMode(@Nullable Output<String> billingMode) {
            this.billingMode = billingMode;
            return this;
        }
        public Builder billingMode(@Nullable String billingMode) {
            this.billingMode = Codegen.ofNullable(billingMode);
            return this;
        }
        public Builder globalSecondaryIndexes(@Nullable Output<List<TableGlobalSecondaryIndexGetArgs>> globalSecondaryIndexes) {
            this.globalSecondaryIndexes = globalSecondaryIndexes;
            return this;
        }
        public Builder globalSecondaryIndexes(@Nullable List<TableGlobalSecondaryIndexGetArgs> globalSecondaryIndexes) {
            this.globalSecondaryIndexes = Codegen.ofNullable(globalSecondaryIndexes);
            return this;
        }
        public Builder globalSecondaryIndexes(TableGlobalSecondaryIndexGetArgs... globalSecondaryIndexes) {
            return globalSecondaryIndexes(List.of(globalSecondaryIndexes));
        }
        public Builder hashKey(@Nullable Output<String> hashKey) {
            this.hashKey = hashKey;
            return this;
        }
        public Builder hashKey(@Nullable String hashKey) {
            this.hashKey = Codegen.ofNullable(hashKey);
            return this;
        }
        public Builder localSecondaryIndexes(@Nullable Output<List<TableLocalSecondaryIndexGetArgs>> localSecondaryIndexes) {
            this.localSecondaryIndexes = localSecondaryIndexes;
            return this;
        }
        public Builder localSecondaryIndexes(@Nullable List<TableLocalSecondaryIndexGetArgs> localSecondaryIndexes) {
            this.localSecondaryIndexes = Codegen.ofNullable(localSecondaryIndexes);
            return this;
        }
        public Builder localSecondaryIndexes(TableLocalSecondaryIndexGetArgs... localSecondaryIndexes) {
            return localSecondaryIndexes(List.of(localSecondaryIndexes));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder pointInTimeRecovery(@Nullable Output<TablePointInTimeRecoveryGetArgs> pointInTimeRecovery) {
            this.pointInTimeRecovery = pointInTimeRecovery;
            return this;
        }
        public Builder pointInTimeRecovery(@Nullable TablePointInTimeRecoveryGetArgs pointInTimeRecovery) {
            this.pointInTimeRecovery = Codegen.ofNullable(pointInTimeRecovery);
            return this;
        }
        public Builder rangeKey(@Nullable Output<String> rangeKey) {
            this.rangeKey = rangeKey;
            return this;
        }
        public Builder rangeKey(@Nullable String rangeKey) {
            this.rangeKey = Codegen.ofNullable(rangeKey);
            return this;
        }
        public Builder readCapacity(@Nullable Output<Integer> readCapacity) {
            this.readCapacity = readCapacity;
            return this;
        }
        public Builder readCapacity(@Nullable Integer readCapacity) {
            this.readCapacity = Codegen.ofNullable(readCapacity);
            return this;
        }
        public Builder replicas(@Nullable Output<List<TableReplicaGetArgs>> replicas) {
            this.replicas = replicas;
            return this;
        }
        public Builder replicas(@Nullable List<TableReplicaGetArgs> replicas) {
            this.replicas = Codegen.ofNullable(replicas);
            return this;
        }
        public Builder replicas(TableReplicaGetArgs... replicas) {
            return replicas(List.of(replicas));
        }
        public Builder restoreDateTime(@Nullable Output<String> restoreDateTime) {
            this.restoreDateTime = restoreDateTime;
            return this;
        }
        public Builder restoreDateTime(@Nullable String restoreDateTime) {
            this.restoreDateTime = Codegen.ofNullable(restoreDateTime);
            return this;
        }
        public Builder restoreSourceName(@Nullable Output<String> restoreSourceName) {
            this.restoreSourceName = restoreSourceName;
            return this;
        }
        public Builder restoreSourceName(@Nullable String restoreSourceName) {
            this.restoreSourceName = Codegen.ofNullable(restoreSourceName);
            return this;
        }
        public Builder restoreToLatestTime(@Nullable Output<Boolean> restoreToLatestTime) {
            this.restoreToLatestTime = restoreToLatestTime;
            return this;
        }
        public Builder restoreToLatestTime(@Nullable Boolean restoreToLatestTime) {
            this.restoreToLatestTime = Codegen.ofNullable(restoreToLatestTime);
            return this;
        }
        public Builder serverSideEncryption(@Nullable Output<TableServerSideEncryptionGetArgs> serverSideEncryption) {
            this.serverSideEncryption = serverSideEncryption;
            return this;
        }
        public Builder serverSideEncryption(@Nullable TableServerSideEncryptionGetArgs serverSideEncryption) {
            this.serverSideEncryption = Codegen.ofNullable(serverSideEncryption);
            return this;
        }
        public Builder streamArn(@Nullable Output<String> streamArn) {
            this.streamArn = streamArn;
            return this;
        }
        public Builder streamArn(@Nullable String streamArn) {
            this.streamArn = Codegen.ofNullable(streamArn);
            return this;
        }
        public Builder streamEnabled(@Nullable Output<Boolean> streamEnabled) {
            this.streamEnabled = streamEnabled;
            return this;
        }
        public Builder streamEnabled(@Nullable Boolean streamEnabled) {
            this.streamEnabled = Codegen.ofNullable(streamEnabled);
            return this;
        }
        public Builder streamLabel(@Nullable Output<String> streamLabel) {
            this.streamLabel = streamLabel;
            return this;
        }
        public Builder streamLabel(@Nullable String streamLabel) {
            this.streamLabel = Codegen.ofNullable(streamLabel);
            return this;
        }
        public Builder streamViewType(@Nullable Output<String> streamViewType) {
            this.streamViewType = streamViewType;
            return this;
        }
        public Builder streamViewType(@Nullable String streamViewType) {
            this.streamViewType = Codegen.ofNullable(streamViewType);
            return this;
        }
        public Builder tableClass(@Nullable Output<String> tableClass) {
            this.tableClass = tableClass;
            return this;
        }
        public Builder tableClass(@Nullable String tableClass) {
            this.tableClass = Codegen.ofNullable(tableClass);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder ttl(@Nullable Output<TableTtlGetArgs> ttl) {
            this.ttl = ttl;
            return this;
        }
        public Builder ttl(@Nullable TableTtlGetArgs ttl) {
            this.ttl = Codegen.ofNullable(ttl);
            return this;
        }
        public Builder writeCapacity(@Nullable Output<Integer> writeCapacity) {
            this.writeCapacity = writeCapacity;
            return this;
        }
        public Builder writeCapacity(@Nullable Integer writeCapacity) {
            this.writeCapacity = Codegen.ofNullable(writeCapacity);
            return this;
        }        public TableState build() {
            return new TableState(arn, attributes, billingMode, globalSecondaryIndexes, hashKey, localSecondaryIndexes, name, pointInTimeRecovery, rangeKey, readCapacity, replicas, restoreDateTime, restoreSourceName, restoreToLatestTime, serverSideEncryption, streamArn, streamEnabled, streamLabel, streamViewType, tableClass, tags, tagsAll, ttl, writeCapacity);
        }
    }
}
