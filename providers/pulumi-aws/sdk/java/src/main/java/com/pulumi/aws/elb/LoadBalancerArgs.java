// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elb;

import com.pulumi.aws.elb.inputs.LoadBalancerAccessLogsArgs;
import com.pulumi.aws.elb.inputs.LoadBalancerHealthCheckArgs;
import com.pulumi.aws.elb.inputs.LoadBalancerListenerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LoadBalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerArgs Empty = new LoadBalancerArgs();

    /**
     * An Access Logs block. Access Logs documented below.
     * 
     */
    @Import(name="accessLogs")
      private final @Nullable Output<LoadBalancerAccessLogsArgs> accessLogs;

    public Output<LoadBalancerAccessLogsArgs> accessLogs() {
        return this.accessLogs == null ? Codegen.empty() : this.accessLogs;
    }

    /**
     * The AZ&#39;s to serve traffic in.
     * 
     */
    @Import(name="availabilityZones")
      private final @Nullable Output<List<String>> availabilityZones;

    public Output<List<String>> availabilityZones() {
        return this.availabilityZones == null ? Codegen.empty() : this.availabilityZones;
    }

    /**
     * Boolean to enable connection draining. Default: `false`
     * 
     */
    @Import(name="connectionDraining")
      private final @Nullable Output<Boolean> connectionDraining;

    public Output<Boolean> connectionDraining() {
        return this.connectionDraining == null ? Codegen.empty() : this.connectionDraining;
    }

    /**
     * The time in seconds to allow for connections to drain. Default: `300`
     * 
     */
    @Import(name="connectionDrainingTimeout")
      private final @Nullable Output<Integer> connectionDrainingTimeout;

    public Output<Integer> connectionDrainingTimeout() {
        return this.connectionDrainingTimeout == null ? Codegen.empty() : this.connectionDrainingTimeout;
    }

    /**
     * Enable cross-zone load balancing. Default: `true`
     * 
     */
    @Import(name="crossZoneLoadBalancing")
      private final @Nullable Output<Boolean> crossZoneLoadBalancing;

    public Output<Boolean> crossZoneLoadBalancing() {
        return this.crossZoneLoadBalancing == null ? Codegen.empty() : this.crossZoneLoadBalancing;
    }

    /**
     * Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
     * 
     */
    @Import(name="desyncMitigationMode")
      private final @Nullable Output<String> desyncMitigationMode;

    public Output<String> desyncMitigationMode() {
        return this.desyncMitigationMode == null ? Codegen.empty() : this.desyncMitigationMode;
    }

    /**
     * A health_check block. Health Check documented below.
     * 
     */
    @Import(name="healthCheck")
      private final @Nullable Output<LoadBalancerHealthCheckArgs> healthCheck;

    public Output<LoadBalancerHealthCheckArgs> healthCheck() {
        return this.healthCheck == null ? Codegen.empty() : this.healthCheck;
    }

    /**
     * The time in seconds that the connection is allowed to be idle. Default: `60`
     * 
     */
    @Import(name="idleTimeout")
      private final @Nullable Output<Integer> idleTimeout;

    public Output<Integer> idleTimeout() {
        return this.idleTimeout == null ? Codegen.empty() : this.idleTimeout;
    }

    /**
     * A list of instance ids to place in the ELB pool.
     * 
     */
    @Import(name="instances")
      private final @Nullable Output<List<String>> instances;

    public Output<List<String>> instances() {
        return this.instances == null ? Codegen.empty() : this.instances;
    }

    /**
     * If true, ELB will be an internal ELB.
     * 
     */
    @Import(name="internal")
      private final @Nullable Output<Boolean> internal;

    public Output<Boolean> internal() {
        return this.internal == null ? Codegen.empty() : this.internal;
    }

    /**
     * A list of listener blocks. Listeners documented below.
     * 
     */
    @Import(name="listeners", required=true)
      private final Output<List<LoadBalancerListenerArgs>> listeners;

    public Output<List<LoadBalancerListenerArgs>> listeners() {
        return this.listeners;
    }

    /**
     * The name of the ELB. By default generated by this provider.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Creates a unique name beginning with the specified
     * prefix. Conflicts with `name`.
     * 
     */
    @Import(name="namePrefix")
      private final @Nullable Output<String> namePrefix;

    public Output<String> namePrefix() {
        return this.namePrefix == null ? Codegen.empty() : this.namePrefix;
    }

    /**
     * A list of security group IDs to assign to the ELB.
     * Only valid if creating an ELB within a VPC
     * 
     */
    @Import(name="securityGroups")
      private final @Nullable Output<List<String>> securityGroups;

    public Output<List<String>> securityGroups() {
        return this.securityGroups == null ? Codegen.empty() : this.securityGroups;
    }

    /**
     * The name of the security group that you can use as
     * part of your inbound rules for your load balancer&#39;s back-end application
     * instances. Use this for Classic or Default VPC only.
     * 
     */
    @Import(name="sourceSecurityGroup")
      private final @Nullable Output<String> sourceSecurityGroup;

    public Output<String> sourceSecurityGroup() {
        return this.sourceSecurityGroup == null ? Codegen.empty() : this.sourceSecurityGroup;
    }

    /**
     * A list of subnet IDs to attach to the ELB.
     * 
     */
    @Import(name="subnets")
      private final @Nullable Output<List<String>> subnets;

    public Output<List<String>> subnets() {
        return this.subnets == null ? Codegen.empty() : this.subnets;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public LoadBalancerArgs(
        @Nullable Output<LoadBalancerAccessLogsArgs> accessLogs,
        @Nullable Output<List<String>> availabilityZones,
        @Nullable Output<Boolean> connectionDraining,
        @Nullable Output<Integer> connectionDrainingTimeout,
        @Nullable Output<Boolean> crossZoneLoadBalancing,
        @Nullable Output<String> desyncMitigationMode,
        @Nullable Output<LoadBalancerHealthCheckArgs> healthCheck,
        @Nullable Output<Integer> idleTimeout,
        @Nullable Output<List<String>> instances,
        @Nullable Output<Boolean> internal,
        Output<List<LoadBalancerListenerArgs>> listeners,
        @Nullable Output<String> name,
        @Nullable Output<String> namePrefix,
        @Nullable Output<List<String>> securityGroups,
        @Nullable Output<String> sourceSecurityGroup,
        @Nullable Output<List<String>> subnets,
        @Nullable Output<Map<String,String>> tags) {
        this.accessLogs = accessLogs;
        this.availabilityZones = availabilityZones;
        this.connectionDraining = connectionDraining;
        this.connectionDrainingTimeout = connectionDrainingTimeout;
        this.crossZoneLoadBalancing = crossZoneLoadBalancing;
        this.desyncMitigationMode = desyncMitigationMode;
        this.healthCheck = healthCheck;
        this.idleTimeout = idleTimeout;
        this.instances = instances;
        this.internal = internal;
        this.listeners = Objects.requireNonNull(listeners, "expected parameter 'listeners' to be non-null");
        this.name = name;
        this.namePrefix = namePrefix;
        this.securityGroups = securityGroups;
        this.sourceSecurityGroup = sourceSecurityGroup;
        this.subnets = subnets;
        this.tags = tags;
    }

    private LoadBalancerArgs() {
        this.accessLogs = Codegen.empty();
        this.availabilityZones = Codegen.empty();
        this.connectionDraining = Codegen.empty();
        this.connectionDrainingTimeout = Codegen.empty();
        this.crossZoneLoadBalancing = Codegen.empty();
        this.desyncMitigationMode = Codegen.empty();
        this.healthCheck = Codegen.empty();
        this.idleTimeout = Codegen.empty();
        this.instances = Codegen.empty();
        this.internal = Codegen.empty();
        this.listeners = Codegen.empty();
        this.name = Codegen.empty();
        this.namePrefix = Codegen.empty();
        this.securityGroups = Codegen.empty();
        this.sourceSecurityGroup = Codegen.empty();
        this.subnets = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<LoadBalancerAccessLogsArgs> accessLogs;
        private @Nullable Output<List<String>> availabilityZones;
        private @Nullable Output<Boolean> connectionDraining;
        private @Nullable Output<Integer> connectionDrainingTimeout;
        private @Nullable Output<Boolean> crossZoneLoadBalancing;
        private @Nullable Output<String> desyncMitigationMode;
        private @Nullable Output<LoadBalancerHealthCheckArgs> healthCheck;
        private @Nullable Output<Integer> idleTimeout;
        private @Nullable Output<List<String>> instances;
        private @Nullable Output<Boolean> internal;
        private Output<List<LoadBalancerListenerArgs>> listeners;
        private @Nullable Output<String> name;
        private @Nullable Output<String> namePrefix;
        private @Nullable Output<List<String>> securityGroups;
        private @Nullable Output<String> sourceSecurityGroup;
        private @Nullable Output<List<String>> subnets;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLogs = defaults.accessLogs;
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.connectionDraining = defaults.connectionDraining;
    	      this.connectionDrainingTimeout = defaults.connectionDrainingTimeout;
    	      this.crossZoneLoadBalancing = defaults.crossZoneLoadBalancing;
    	      this.desyncMitigationMode = defaults.desyncMitigationMode;
    	      this.healthCheck = defaults.healthCheck;
    	      this.idleTimeout = defaults.idleTimeout;
    	      this.instances = defaults.instances;
    	      this.internal = defaults.internal;
    	      this.listeners = defaults.listeners;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.securityGroups = defaults.securityGroups;
    	      this.sourceSecurityGroup = defaults.sourceSecurityGroup;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
        }

        public Builder accessLogs(@Nullable Output<LoadBalancerAccessLogsArgs> accessLogs) {
            this.accessLogs = accessLogs;
            return this;
        }
        public Builder accessLogs(@Nullable LoadBalancerAccessLogsArgs accessLogs) {
            this.accessLogs = Codegen.ofNullable(accessLogs);
            return this;
        }
        public Builder availabilityZones(@Nullable Output<List<String>> availabilityZones) {
            this.availabilityZones = availabilityZones;
            return this;
        }
        public Builder availabilityZones(@Nullable List<String> availabilityZones) {
            this.availabilityZones = Codegen.ofNullable(availabilityZones);
            return this;
        }
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }
        public Builder connectionDraining(@Nullable Output<Boolean> connectionDraining) {
            this.connectionDraining = connectionDraining;
            return this;
        }
        public Builder connectionDraining(@Nullable Boolean connectionDraining) {
            this.connectionDraining = Codegen.ofNullable(connectionDraining);
            return this;
        }
        public Builder connectionDrainingTimeout(@Nullable Output<Integer> connectionDrainingTimeout) {
            this.connectionDrainingTimeout = connectionDrainingTimeout;
            return this;
        }
        public Builder connectionDrainingTimeout(@Nullable Integer connectionDrainingTimeout) {
            this.connectionDrainingTimeout = Codegen.ofNullable(connectionDrainingTimeout);
            return this;
        }
        public Builder crossZoneLoadBalancing(@Nullable Output<Boolean> crossZoneLoadBalancing) {
            this.crossZoneLoadBalancing = crossZoneLoadBalancing;
            return this;
        }
        public Builder crossZoneLoadBalancing(@Nullable Boolean crossZoneLoadBalancing) {
            this.crossZoneLoadBalancing = Codegen.ofNullable(crossZoneLoadBalancing);
            return this;
        }
        public Builder desyncMitigationMode(@Nullable Output<String> desyncMitigationMode) {
            this.desyncMitigationMode = desyncMitigationMode;
            return this;
        }
        public Builder desyncMitigationMode(@Nullable String desyncMitigationMode) {
            this.desyncMitigationMode = Codegen.ofNullable(desyncMitigationMode);
            return this;
        }
        public Builder healthCheck(@Nullable Output<LoadBalancerHealthCheckArgs> healthCheck) {
            this.healthCheck = healthCheck;
            return this;
        }
        public Builder healthCheck(@Nullable LoadBalancerHealthCheckArgs healthCheck) {
            this.healthCheck = Codegen.ofNullable(healthCheck);
            return this;
        }
        public Builder idleTimeout(@Nullable Output<Integer> idleTimeout) {
            this.idleTimeout = idleTimeout;
            return this;
        }
        public Builder idleTimeout(@Nullable Integer idleTimeout) {
            this.idleTimeout = Codegen.ofNullable(idleTimeout);
            return this;
        }
        public Builder instances(@Nullable Output<List<String>> instances) {
            this.instances = instances;
            return this;
        }
        public Builder instances(@Nullable List<String> instances) {
            this.instances = Codegen.ofNullable(instances);
            return this;
        }
        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }
        public Builder internal(@Nullable Output<Boolean> internal) {
            this.internal = internal;
            return this;
        }
        public Builder internal(@Nullable Boolean internal) {
            this.internal = Codegen.ofNullable(internal);
            return this;
        }
        public Builder listeners(Output<List<LoadBalancerListenerArgs>> listeners) {
            this.listeners = Objects.requireNonNull(listeners);
            return this;
        }
        public Builder listeners(List<LoadBalancerListenerArgs> listeners) {
            this.listeners = Output.of(Objects.requireNonNull(listeners));
            return this;
        }
        public Builder listeners(LoadBalancerListenerArgs... listeners) {
            return listeners(List.of(listeners));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }
        public Builder namePrefix(@Nullable String namePrefix) {
            this.namePrefix = Codegen.ofNullable(namePrefix);
            return this;
        }
        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }
        public Builder securityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = Codegen.ofNullable(securityGroups);
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        public Builder sourceSecurityGroup(@Nullable Output<String> sourceSecurityGroup) {
            this.sourceSecurityGroup = sourceSecurityGroup;
            return this;
        }
        public Builder sourceSecurityGroup(@Nullable String sourceSecurityGroup) {
            this.sourceSecurityGroup = Codegen.ofNullable(sourceSecurityGroup);
            return this;
        }
        public Builder subnets(@Nullable Output<List<String>> subnets) {
            this.subnets = subnets;
            return this;
        }
        public Builder subnets(@Nullable List<String> subnets) {
            this.subnets = Codegen.ofNullable(subnets);
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public LoadBalancerArgs build() {
            return new LoadBalancerArgs(accessLogs, availabilityZones, connectionDraining, connectionDrainingTimeout, crossZoneLoadBalancing, desyncMitigationMode, healthCheck, idleTimeout, instances, internal, listeners, name, namePrefix, securityGroups, sourceSecurityGroup, subnets, tags);
        }
    }
}
