// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder;

import com.pulumi.aws.imagebuilder.inputs.ImageRecipeBlockDeviceMappingArgs;
import com.pulumi.aws.imagebuilder.inputs.ImageRecipeComponentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ImageRecipeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageRecipeArgs Empty = new ImageRecipeArgs();

    /**
     * Configuration block(s) with block device mappings for the the image recipe. Detailed below.
     * 
     */
    @Import(name="blockDeviceMappings")
      private final @Nullable Output<List<ImageRecipeBlockDeviceMappingArgs>> blockDeviceMappings;

    public Output<List<ImageRecipeBlockDeviceMappingArgs>> blockDeviceMappings() {
        return this.blockDeviceMappings == null ? Codegen.empty() : this.blockDeviceMappings;
    }

    /**
     * Ordered configuration block(s) with components for the image recipe. Detailed below.
     * 
     */
    @Import(name="components", required=true)
      private final Output<List<ImageRecipeComponentArgs>> components;

    public Output<List<ImageRecipeComponentArgs>> components() {
        return this.components;
    }

    /**
     * Description of the image recipe.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Name of the image recipe.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Platform of the image recipe.
     * 
     */
    @Import(name="parentImage", required=true)
      private final Output<String> parentImage;

    public Output<String> parentImage() {
        return this.parentImage;
    }

    /**
     * Key-value map of resource tags for the image recipe. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
     * 
     */
    @Import(name="userDataBase64")
      private final @Nullable Output<String> userDataBase64;

    public Output<String> userDataBase64() {
        return this.userDataBase64 == null ? Codegen.empty() : this.userDataBase64;
    }

    /**
     * Version of the image recipe.
     * 
     */
    @Import(name="version", required=true)
      private final Output<String> version;

    public Output<String> version() {
        return this.version;
    }

    /**
     * The working directory to be used during build and test workflows.
     * 
     */
    @Import(name="workingDirectory")
      private final @Nullable Output<String> workingDirectory;

    public Output<String> workingDirectory() {
        return this.workingDirectory == null ? Codegen.empty() : this.workingDirectory;
    }

    public ImageRecipeArgs(
        @Nullable Output<List<ImageRecipeBlockDeviceMappingArgs>> blockDeviceMappings,
        Output<List<ImageRecipeComponentArgs>> components,
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        Output<String> parentImage,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> userDataBase64,
        Output<String> version,
        @Nullable Output<String> workingDirectory) {
        this.blockDeviceMappings = blockDeviceMappings;
        this.components = Objects.requireNonNull(components, "expected parameter 'components' to be non-null");
        this.description = description;
        this.name = name;
        this.parentImage = Objects.requireNonNull(parentImage, "expected parameter 'parentImage' to be non-null");
        this.tags = tags;
        this.userDataBase64 = userDataBase64;
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
        this.workingDirectory = workingDirectory;
    }

    private ImageRecipeArgs() {
        this.blockDeviceMappings = Codegen.empty();
        this.components = Codegen.empty();
        this.description = Codegen.empty();
        this.name = Codegen.empty();
        this.parentImage = Codegen.empty();
        this.tags = Codegen.empty();
        this.userDataBase64 = Codegen.empty();
        this.version = Codegen.empty();
        this.workingDirectory = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageRecipeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<ImageRecipeBlockDeviceMappingArgs>> blockDeviceMappings;
        private Output<List<ImageRecipeComponentArgs>> components;
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private Output<String> parentImage;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> userDataBase64;
        private Output<String> version;
        private @Nullable Output<String> workingDirectory;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageRecipeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockDeviceMappings = defaults.blockDeviceMappings;
    	      this.components = defaults.components;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.parentImage = defaults.parentImage;
    	      this.tags = defaults.tags;
    	      this.userDataBase64 = defaults.userDataBase64;
    	      this.version = defaults.version;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        public Builder blockDeviceMappings(@Nullable Output<List<ImageRecipeBlockDeviceMappingArgs>> blockDeviceMappings) {
            this.blockDeviceMappings = blockDeviceMappings;
            return this;
        }
        public Builder blockDeviceMappings(@Nullable List<ImageRecipeBlockDeviceMappingArgs> blockDeviceMappings) {
            this.blockDeviceMappings = Codegen.ofNullable(blockDeviceMappings);
            return this;
        }
        public Builder blockDeviceMappings(ImageRecipeBlockDeviceMappingArgs... blockDeviceMappings) {
            return blockDeviceMappings(List.of(blockDeviceMappings));
        }
        public Builder components(Output<List<ImageRecipeComponentArgs>> components) {
            this.components = Objects.requireNonNull(components);
            return this;
        }
        public Builder components(List<ImageRecipeComponentArgs> components) {
            this.components = Output.of(Objects.requireNonNull(components));
            return this;
        }
        public Builder components(ImageRecipeComponentArgs... components) {
            return components(List.of(components));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder parentImage(Output<String> parentImage) {
            this.parentImage = Objects.requireNonNull(parentImage);
            return this;
        }
        public Builder parentImage(String parentImage) {
            this.parentImage = Output.of(Objects.requireNonNull(parentImage));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder userDataBase64(@Nullable Output<String> userDataBase64) {
            this.userDataBase64 = userDataBase64;
            return this;
        }
        public Builder userDataBase64(@Nullable String userDataBase64) {
            this.userDataBase64 = Codegen.ofNullable(userDataBase64);
            return this;
        }
        public Builder version(Output<String> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder version(String version) {
            this.version = Output.of(Objects.requireNonNull(version));
            return this;
        }
        public Builder workingDirectory(@Nullable Output<String> workingDirectory) {
            this.workingDirectory = workingDirectory;
            return this;
        }
        public Builder workingDirectory(@Nullable String workingDirectory) {
            this.workingDirectory = Codegen.ofNullable(workingDirectory);
            return this;
        }        public ImageRecipeArgs build() {
            return new ImageRecipeArgs(blockDeviceMappings, components, description, name, parentImage, tags, userDataBase64, version, workingDirectory);
        }
    }
}
