// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codepipeline.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebhookAuthenticationConfigurationGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebhookAuthenticationConfigurationGetArgs Empty = new WebhookAuthenticationConfigurationGetArgs();

    /**
     * A valid CIDR block for `IP` filtering. Required for `IP`.
     * 
     */
    @Import(name="allowedIpRange")
    private @Nullable Output<String> allowedIpRange;

    /**
     * @return A valid CIDR block for `IP` filtering. Required for `IP`.
     * 
     */
    public Optional<Output<String>> allowedIpRange() {
        return Optional.ofNullable(this.allowedIpRange);
    }

    /**
     * The shared secret for the GitHub repository webhook. Set this as `secret` in your `github_repository_webhook`&#39;s `configuration` block. Required for `GITHUB_HMAC`.
     * 
     */
    @Import(name="secretToken")
    private @Nullable Output<String> secretToken;

    /**
     * @return The shared secret for the GitHub repository webhook. Set this as `secret` in your `github_repository_webhook`&#39;s `configuration` block. Required for `GITHUB_HMAC`.
     * 
     */
    public Optional<Output<String>> secretToken() {
        return Optional.ofNullable(this.secretToken);
    }

    private WebhookAuthenticationConfigurationGetArgs() {}

    private WebhookAuthenticationConfigurationGetArgs(WebhookAuthenticationConfigurationGetArgs $) {
        this.allowedIpRange = $.allowedIpRange;
        this.secretToken = $.secretToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebhookAuthenticationConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebhookAuthenticationConfigurationGetArgs $;

        public Builder() {
            $ = new WebhookAuthenticationConfigurationGetArgs();
        }

        public Builder(WebhookAuthenticationConfigurationGetArgs defaults) {
            $ = new WebhookAuthenticationConfigurationGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedIpRange A valid CIDR block for `IP` filtering. Required for `IP`.
         * 
         * @return builder
         * 
         */
        public Builder allowedIpRange(@Nullable Output<String> allowedIpRange) {
            $.allowedIpRange = allowedIpRange;
            return this;
        }

        /**
         * @param allowedIpRange A valid CIDR block for `IP` filtering. Required for `IP`.
         * 
         * @return builder
         * 
         */
        public Builder allowedIpRange(String allowedIpRange) {
            return allowedIpRange(Output.of(allowedIpRange));
        }

        /**
         * @param secretToken The shared secret for the GitHub repository webhook. Set this as `secret` in your `github_repository_webhook`&#39;s `configuration` block. Required for `GITHUB_HMAC`.
         * 
         * @return builder
         * 
         */
        public Builder secretToken(@Nullable Output<String> secretToken) {
            $.secretToken = secretToken;
            return this;
        }

        /**
         * @param secretToken The shared secret for the GitHub repository webhook. Set this as `secret` in your `github_repository_webhook`&#39;s `configuration` block. Required for `GITHUB_HMAC`.
         * 
         * @return builder
         * 
         */
        public Builder secretToken(String secretToken) {
            return secretToken(Output.of(secretToken));
        }

        public WebhookAuthenticationConfigurationGetArgs build() {
            return $;
        }
    }

}
