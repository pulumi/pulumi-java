// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudtrail.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventDataStoreAdvancedEventSelectorFieldSelector {
    /**
     * @return A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
     * 
     */
    private final @Nullable List<String> endsWiths;
    /**
     * @return A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
     * 
     */
    private final @Nullable List<String> equals;
    /**
     * @return Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
     * 
     */
    private final @Nullable String field;
    /**
     * @return A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
     * 
     */
    private final @Nullable List<String> notEndsWiths;
    /**
     * @return A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
     * 
     */
    private final @Nullable List<String> notEquals;
    /**
     * @return A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
     * 
     */
    private final @Nullable List<String> notStartsWiths;
    /**
     * @return A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
     * 
     */
    private final @Nullable List<String> startsWiths;

    @CustomType.Constructor
    private EventDataStoreAdvancedEventSelectorFieldSelector(
        @CustomType.Parameter("endsWiths") @Nullable List<String> endsWiths,
        @CustomType.Parameter("equals") @Nullable List<String> equals,
        @CustomType.Parameter("field") @Nullable String field,
        @CustomType.Parameter("notEndsWiths") @Nullable List<String> notEndsWiths,
        @CustomType.Parameter("notEquals") @Nullable List<String> notEquals,
        @CustomType.Parameter("notStartsWiths") @Nullable List<String> notStartsWiths,
        @CustomType.Parameter("startsWiths") @Nullable List<String> startsWiths) {
        this.endsWiths = endsWiths;
        this.equals = equals;
        this.field = field;
        this.notEndsWiths = notEndsWiths;
        this.notEquals = notEquals;
        this.notStartsWiths = notStartsWiths;
        this.startsWiths = startsWiths;
    }

    /**
     * @return A list of values that includes events that match the last few characters of the event record field specified as the value of `field`.
     * 
     */
    public List<String> endsWiths() {
        return this.endsWiths == null ? List.of() : this.endsWiths;
    }
    /**
     * @return A list of values that includes events that match the exact value of the event record field specified as the value of `field`. This is the only valid operator that you can use with the `readOnly`, `eventCategory`, and `resources.type` fields.
     * 
     */
    public List<String> equals_() {
        return this.equals == null ? List.of() : this.equals;
    }
    /**
     * @return Specifies a field in an event record on which to filter events to be logged. You can specify only the following values: `readOnly`, `eventSource`, `eventName`, `eventCategory`, `resources.type`, `resources.ARN`.
     * 
     */
    public Optional<String> field() {
        return Optional.ofNullable(this.field);
    }
    /**
     * @return A list of values that excludes events that match the last few characters of the event record field specified as the value of `field`.
     * 
     */
    public List<String> notEndsWiths() {
        return this.notEndsWiths == null ? List.of() : this.notEndsWiths;
    }
    /**
     * @return A list of values that excludes events that match the exact value of the event record field specified as the value of `field`.
     * 
     */
    public List<String> notEquals() {
        return this.notEquals == null ? List.of() : this.notEquals;
    }
    /**
     * @return A list of values that excludes events that match the first few characters of the event record field specified as the value of `field`.
     * 
     */
    public List<String> notStartsWiths() {
        return this.notStartsWiths == null ? List.of() : this.notStartsWiths;
    }
    /**
     * @return A list of values that includes events that match the first few characters of the event record field specified as the value of `field`.
     * 
     */
    public List<String> startsWiths() {
        return this.startsWiths == null ? List.of() : this.startsWiths;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventDataStoreAdvancedEventSelectorFieldSelector defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> endsWiths;
        private @Nullable List<String> equals;
        private @Nullable String field;
        private @Nullable List<String> notEndsWiths;
        private @Nullable List<String> notEquals;
        private @Nullable List<String> notStartsWiths;
        private @Nullable List<String> startsWiths;

        public Builder() {
    	      // Empty
        }

        public Builder(EventDataStoreAdvancedEventSelectorFieldSelector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endsWiths = defaults.endsWiths;
    	      this.equals = defaults.equals;
    	      this.field = defaults.field;
    	      this.notEndsWiths = defaults.notEndsWiths;
    	      this.notEquals = defaults.notEquals;
    	      this.notStartsWiths = defaults.notStartsWiths;
    	      this.startsWiths = defaults.startsWiths;
        }

        public Builder endsWiths(@Nullable List<String> endsWiths) {
            this.endsWiths = endsWiths;
            return this;
        }
        public Builder endsWiths(String... endsWiths) {
            return endsWiths(List.of(endsWiths));
        }
        public Builder equals_(@Nullable List<String> equals) {
            this.equals = equals;
            return this;
        }
        public Builder equals_(String... equals) {
            return equals_(List.of(equals));
        }
        public Builder field(@Nullable String field) {
            this.field = field;
            return this;
        }
        public Builder notEndsWiths(@Nullable List<String> notEndsWiths) {
            this.notEndsWiths = notEndsWiths;
            return this;
        }
        public Builder notEndsWiths(String... notEndsWiths) {
            return notEndsWiths(List.of(notEndsWiths));
        }
        public Builder notEquals(@Nullable List<String> notEquals) {
            this.notEquals = notEquals;
            return this;
        }
        public Builder notEquals(String... notEquals) {
            return notEquals(List.of(notEquals));
        }
        public Builder notStartsWiths(@Nullable List<String> notStartsWiths) {
            this.notStartsWiths = notStartsWiths;
            return this;
        }
        public Builder notStartsWiths(String... notStartsWiths) {
            return notStartsWiths(List.of(notStartsWiths));
        }
        public Builder startsWiths(@Nullable List<String> startsWiths) {
            this.startsWiths = startsWiths;
            return this;
        }
        public Builder startsWiths(String... startsWiths) {
            return startsWiths(List.of(startsWiths));
        }        public EventDataStoreAdvancedEventSelectorFieldSelector build() {
            return new EventDataStoreAdvancedEventSelectorFieldSelector(endsWiths, equals, field, notEndsWiths, notEquals, notStartsWiths, startsWiths);
        }
    }
}
