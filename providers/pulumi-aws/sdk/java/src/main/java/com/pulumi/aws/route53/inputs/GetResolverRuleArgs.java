// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetResolverRuleArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetResolverRuleArgs Empty = new GetResolverRuleArgs();

    /**
     * The domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolver_rule_id`.
     * 
     */
    @Import(name="domainName")
    private Output</* @Nullable */ String> domainName;

    /**
     * @return The domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolver_rule_id`.
     * 
     */
    public Output</* @Nullable */ String> domainName() {
        return this.domainName;
    }

    /**
     * The friendly name of the desired resolver rule. Conflicts with `resolver_rule_id`.
     * 
     */
    @Import(name="name")
    private Output</* @Nullable */ String> name;

    /**
     * @return The friendly name of the desired resolver rule. Conflicts with `resolver_rule_id`.
     * 
     */
    public Output</* @Nullable */ String> name() {
        return this.name;
    }

    /**
     * The ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolver_rule_id`.
     * 
     */
    @Import(name="resolverEndpointId")
    private Output</* @Nullable */ String> resolverEndpointId;

    /**
     * @return The ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolver_rule_id`.
     * 
     */
    public Output</* @Nullable */ String> resolverEndpointId() {
        return this.resolverEndpointId;
    }

    /**
     * The ID of the desired resolver rule. Conflicts with `domain_name`, `name`, `resolver_endpoint_id` and `rule_type`.
     * 
     */
    @Import(name="resolverRuleId")
    private Output</* @Nullable */ String> resolverRuleId;

    /**
     * @return The ID of the desired resolver rule. Conflicts with `domain_name`, `name`, `resolver_endpoint_id` and `rule_type`.
     * 
     */
    public Output</* @Nullable */ String> resolverRuleId() {
        return this.resolverRuleId;
    }

    /**
     * The rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolver_rule_id`.
     * 
     */
    @Import(name="ruleType")
    private Output</* @Nullable */ String> ruleType;

    /**
     * @return The rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolver_rule_id`.
     * 
     */
    public Output</* @Nullable */ String> ruleType() {
        return this.ruleType;
    }

    /**
     * A map of tags assigned to the resolver rule.
     * 
     */
    @Import(name="tags")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map of tags assigned to the resolver rule.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> tags() {
        return this.tags;
    }

    private GetResolverRuleArgs() {}

    private GetResolverRuleArgs(GetResolverRuleArgs $) {
        this.domainName = $.domainName;
        this.name = $.name;
        this.resolverEndpointId = $.resolverEndpointId;
        this.resolverRuleId = $.resolverRuleId;
        this.ruleType = $.ruleType;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetResolverRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetResolverRuleArgs $;

        public Builder() {
            $ = new GetResolverRuleArgs();
        }

        public Builder(GetResolverRuleArgs defaults) {
            $ = new GetResolverRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName The domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolver_rule_id`.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output</* @Nullable */ String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolver_rule_id`.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param name The friendly name of the desired resolver rule. Conflicts with `resolver_rule_id`.
         * 
         * @return builder
         * 
         */
        public Builder name(Output</* @Nullable */ String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The friendly name of the desired resolver rule. Conflicts with `resolver_rule_id`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            return name(Output.of(name));
        }

        /**
         * @param resolverEndpointId The ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolver_rule_id`.
         * 
         * @return builder
         * 
         */
        public Builder resolverEndpointId(Output</* @Nullable */ String> resolverEndpointId) {
            $.resolverEndpointId = resolverEndpointId;
            return this;
        }

        /**
         * @param resolverEndpointId The ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolver_rule_id`.
         * 
         * @return builder
         * 
         */
        public Builder resolverEndpointId(@Nullable String resolverEndpointId) {
            return resolverEndpointId(Output.of(resolverEndpointId));
        }

        /**
         * @param resolverRuleId The ID of the desired resolver rule. Conflicts with `domain_name`, `name`, `resolver_endpoint_id` and `rule_type`.
         * 
         * @return builder
         * 
         */
        public Builder resolverRuleId(Output</* @Nullable */ String> resolverRuleId) {
            $.resolverRuleId = resolverRuleId;
            return this;
        }

        /**
         * @param resolverRuleId The ID of the desired resolver rule. Conflicts with `domain_name`, `name`, `resolver_endpoint_id` and `rule_type`.
         * 
         * @return builder
         * 
         */
        public Builder resolverRuleId(@Nullable String resolverRuleId) {
            return resolverRuleId(Output.of(resolverRuleId));
        }

        /**
         * @param ruleType The rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolver_rule_id`.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(Output</* @Nullable */ String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType The rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolver_rule_id`.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(@Nullable String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        /**
         * @param tags A map of tags assigned to the resolver rule.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output</* @Nullable */ Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags assigned to the resolver rule.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public GetResolverRuleArgs build() {
            return $;
        }
    }

}
