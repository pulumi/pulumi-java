// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.autoscaling.inputs;

import com.pulumi.aws.autoscaling.inputs.PolicyPredictiveScalingConfigurationGetArgs;
import com.pulumi.aws.autoscaling.inputs.PolicyStepAdjustmentGetArgs;
import com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PolicyState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyState Empty = new PolicyState();

    /**
     * Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     * 
     */
    @Import(name="adjustmentType")
      private final @Nullable Output<String> adjustmentType;

    public Output<String> adjustmentType() {
        return this.adjustmentType == null ? Codegen.empty() : this.adjustmentType;
    }

    /**
     * The ARN assigned by AWS to the scaling policy.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The name of the autoscaling group.
     * 
     */
    @Import(name="autoscalingGroupName")
      private final @Nullable Output<String> autoscalingGroupName;

    public Output<String> autoscalingGroupName() {
        return this.autoscalingGroupName == null ? Codegen.empty() : this.autoscalingGroupName;
    }

    /**
     * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     * 
     */
    @Import(name="cooldown")
      private final @Nullable Output<Integer> cooldown;

    public Output<Integer> cooldown() {
        return this.cooldown == null ? Codegen.empty() : this.cooldown;
    }

    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group&#39;s specified cooldown period.
     * 
     */
    @Import(name="estimatedInstanceWarmup")
      private final @Nullable Output<Integer> estimatedInstanceWarmup;

    public Output<Integer> estimatedInstanceWarmup() {
        return this.estimatedInstanceWarmup == null ? Codegen.empty() : this.estimatedInstanceWarmup;
    }

    /**
     * The aggregation type for the policy&#39;s metrics. Valid values are &#34;Minimum&#34;, &#34;Maximum&#34;, and &#34;Average&#34;. Without a value, AWS will treat the aggregation type as &#34;Average&#34;.
     * 
     */
    @Import(name="metricAggregationType")
      private final @Nullable Output<String> metricAggregationType;

    public Output<String> metricAggregationType() {
        return this.metricAggregationType == null ? Codegen.empty() : this.metricAggregationType;
    }

    /**
     * Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.
     * 
     */
    @Import(name="minAdjustmentMagnitude")
      private final @Nullable Output<Integer> minAdjustmentMagnitude;

    public Output<Integer> minAdjustmentMagnitude() {
        return this.minAdjustmentMagnitude == null ? Codegen.empty() : this.minAdjustmentMagnitude;
    }

    /**
     * The name of the dimension.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The policy type, either &#34;SimpleScaling&#34;, &#34;StepScaling&#34;, &#34;TargetTrackingScaling&#34;, or &#34;PredictiveScaling&#34;. If this value isn&#39;t provided, AWS will default to &#34;SimpleScaling.&#34;
     * 
     */
    @Import(name="policyType")
      private final @Nullable Output<String> policyType;

    public Output<String> policyType() {
        return this.policyType == null ? Codegen.empty() : this.policyType;
    }

    /**
     * The predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     * 
     */
    @Import(name="predictiveScalingConfiguration")
      private final @Nullable Output<PolicyPredictiveScalingConfigurationGetArgs> predictiveScalingConfiguration;

    public Output<PolicyPredictiveScalingConfigurationGetArgs> predictiveScalingConfiguration() {
        return this.predictiveScalingConfiguration == null ? Codegen.empty() : this.predictiveScalingConfiguration;
    }

    /**
     * The number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     * 
     */
    @Import(name="scalingAdjustment")
      private final @Nullable Output<Integer> scalingAdjustment;

    public Output<Integer> scalingAdjustment() {
        return this.scalingAdjustment == null ? Codegen.empty() : this.scalingAdjustment;
    }

    /**
     * A set of adjustments that manage
     * group scaling. These have the following structure:
     * 
     */
    @Import(name="stepAdjustments")
      private final @Nullable Output<List<PolicyStepAdjustmentGetArgs>> stepAdjustments;

    public Output<List<PolicyStepAdjustmentGetArgs>> stepAdjustments() {
        return this.stepAdjustments == null ? Codegen.empty() : this.stepAdjustments;
    }

    /**
     * A target tracking policy. These have the following structure:
     * 
     */
    @Import(name="targetTrackingConfiguration")
      private final @Nullable Output<PolicyTargetTrackingConfigurationGetArgs> targetTrackingConfiguration;

    public Output<PolicyTargetTrackingConfigurationGetArgs> targetTrackingConfiguration() {
        return this.targetTrackingConfiguration == null ? Codegen.empty() : this.targetTrackingConfiguration;
    }

    public PolicyState(
        @Nullable Output<String> adjustmentType,
        @Nullable Output<String> arn,
        @Nullable Output<String> autoscalingGroupName,
        @Nullable Output<Integer> cooldown,
        @Nullable Output<Integer> estimatedInstanceWarmup,
        @Nullable Output<String> metricAggregationType,
        @Nullable Output<Integer> minAdjustmentMagnitude,
        @Nullable Output<String> name,
        @Nullable Output<String> policyType,
        @Nullable Output<PolicyPredictiveScalingConfigurationGetArgs> predictiveScalingConfiguration,
        @Nullable Output<Integer> scalingAdjustment,
        @Nullable Output<List<PolicyStepAdjustmentGetArgs>> stepAdjustments,
        @Nullable Output<PolicyTargetTrackingConfigurationGetArgs> targetTrackingConfiguration) {
        this.adjustmentType = adjustmentType;
        this.arn = arn;
        this.autoscalingGroupName = autoscalingGroupName;
        this.cooldown = cooldown;
        this.estimatedInstanceWarmup = estimatedInstanceWarmup;
        this.metricAggregationType = metricAggregationType;
        this.minAdjustmentMagnitude = minAdjustmentMagnitude;
        this.name = name;
        this.policyType = policyType;
        this.predictiveScalingConfiguration = predictiveScalingConfiguration;
        this.scalingAdjustment = scalingAdjustment;
        this.stepAdjustments = stepAdjustments;
        this.targetTrackingConfiguration = targetTrackingConfiguration;
    }

    private PolicyState() {
        this.adjustmentType = Codegen.empty();
        this.arn = Codegen.empty();
        this.autoscalingGroupName = Codegen.empty();
        this.cooldown = Codegen.empty();
        this.estimatedInstanceWarmup = Codegen.empty();
        this.metricAggregationType = Codegen.empty();
        this.minAdjustmentMagnitude = Codegen.empty();
        this.name = Codegen.empty();
        this.policyType = Codegen.empty();
        this.predictiveScalingConfiguration = Codegen.empty();
        this.scalingAdjustment = Codegen.empty();
        this.stepAdjustments = Codegen.empty();
        this.targetTrackingConfiguration = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> adjustmentType;
        private @Nullable Output<String> arn;
        private @Nullable Output<String> autoscalingGroupName;
        private @Nullable Output<Integer> cooldown;
        private @Nullable Output<Integer> estimatedInstanceWarmup;
        private @Nullable Output<String> metricAggregationType;
        private @Nullable Output<Integer> minAdjustmentMagnitude;
        private @Nullable Output<String> name;
        private @Nullable Output<String> policyType;
        private @Nullable Output<PolicyPredictiveScalingConfigurationGetArgs> predictiveScalingConfiguration;
        private @Nullable Output<Integer> scalingAdjustment;
        private @Nullable Output<List<PolicyStepAdjustmentGetArgs>> stepAdjustments;
        private @Nullable Output<PolicyTargetTrackingConfigurationGetArgs> targetTrackingConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adjustmentType = defaults.adjustmentType;
    	      this.arn = defaults.arn;
    	      this.autoscalingGroupName = defaults.autoscalingGroupName;
    	      this.cooldown = defaults.cooldown;
    	      this.estimatedInstanceWarmup = defaults.estimatedInstanceWarmup;
    	      this.metricAggregationType = defaults.metricAggregationType;
    	      this.minAdjustmentMagnitude = defaults.minAdjustmentMagnitude;
    	      this.name = defaults.name;
    	      this.policyType = defaults.policyType;
    	      this.predictiveScalingConfiguration = defaults.predictiveScalingConfiguration;
    	      this.scalingAdjustment = defaults.scalingAdjustment;
    	      this.stepAdjustments = defaults.stepAdjustments;
    	      this.targetTrackingConfiguration = defaults.targetTrackingConfiguration;
        }

        public Builder adjustmentType(@Nullable Output<String> adjustmentType) {
            this.adjustmentType = adjustmentType;
            return this;
        }
        public Builder adjustmentType(@Nullable String adjustmentType) {
            this.adjustmentType = Codegen.ofNullable(adjustmentType);
            return this;
        }
        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder autoscalingGroupName(@Nullable Output<String> autoscalingGroupName) {
            this.autoscalingGroupName = autoscalingGroupName;
            return this;
        }
        public Builder autoscalingGroupName(@Nullable String autoscalingGroupName) {
            this.autoscalingGroupName = Codegen.ofNullable(autoscalingGroupName);
            return this;
        }
        public Builder cooldown(@Nullable Output<Integer> cooldown) {
            this.cooldown = cooldown;
            return this;
        }
        public Builder cooldown(@Nullable Integer cooldown) {
            this.cooldown = Codegen.ofNullable(cooldown);
            return this;
        }
        public Builder estimatedInstanceWarmup(@Nullable Output<Integer> estimatedInstanceWarmup) {
            this.estimatedInstanceWarmup = estimatedInstanceWarmup;
            return this;
        }
        public Builder estimatedInstanceWarmup(@Nullable Integer estimatedInstanceWarmup) {
            this.estimatedInstanceWarmup = Codegen.ofNullable(estimatedInstanceWarmup);
            return this;
        }
        public Builder metricAggregationType(@Nullable Output<String> metricAggregationType) {
            this.metricAggregationType = metricAggregationType;
            return this;
        }
        public Builder metricAggregationType(@Nullable String metricAggregationType) {
            this.metricAggregationType = Codegen.ofNullable(metricAggregationType);
            return this;
        }
        public Builder minAdjustmentMagnitude(@Nullable Output<Integer> minAdjustmentMagnitude) {
            this.minAdjustmentMagnitude = minAdjustmentMagnitude;
            return this;
        }
        public Builder minAdjustmentMagnitude(@Nullable Integer minAdjustmentMagnitude) {
            this.minAdjustmentMagnitude = Codegen.ofNullable(minAdjustmentMagnitude);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder policyType(@Nullable Output<String> policyType) {
            this.policyType = policyType;
            return this;
        }
        public Builder policyType(@Nullable String policyType) {
            this.policyType = Codegen.ofNullable(policyType);
            return this;
        }
        public Builder predictiveScalingConfiguration(@Nullable Output<PolicyPredictiveScalingConfigurationGetArgs> predictiveScalingConfiguration) {
            this.predictiveScalingConfiguration = predictiveScalingConfiguration;
            return this;
        }
        public Builder predictiveScalingConfiguration(@Nullable PolicyPredictiveScalingConfigurationGetArgs predictiveScalingConfiguration) {
            this.predictiveScalingConfiguration = Codegen.ofNullable(predictiveScalingConfiguration);
            return this;
        }
        public Builder scalingAdjustment(@Nullable Output<Integer> scalingAdjustment) {
            this.scalingAdjustment = scalingAdjustment;
            return this;
        }
        public Builder scalingAdjustment(@Nullable Integer scalingAdjustment) {
            this.scalingAdjustment = Codegen.ofNullable(scalingAdjustment);
            return this;
        }
        public Builder stepAdjustments(@Nullable Output<List<PolicyStepAdjustmentGetArgs>> stepAdjustments) {
            this.stepAdjustments = stepAdjustments;
            return this;
        }
        public Builder stepAdjustments(@Nullable List<PolicyStepAdjustmentGetArgs> stepAdjustments) {
            this.stepAdjustments = Codegen.ofNullable(stepAdjustments);
            return this;
        }
        public Builder stepAdjustments(PolicyStepAdjustmentGetArgs... stepAdjustments) {
            return stepAdjustments(List.of(stepAdjustments));
        }
        public Builder targetTrackingConfiguration(@Nullable Output<PolicyTargetTrackingConfigurationGetArgs> targetTrackingConfiguration) {
            this.targetTrackingConfiguration = targetTrackingConfiguration;
            return this;
        }
        public Builder targetTrackingConfiguration(@Nullable PolicyTargetTrackingConfigurationGetArgs targetTrackingConfiguration) {
            this.targetTrackingConfiguration = Codegen.ofNullable(targetTrackingConfiguration);
            return this;
        }        public PolicyState build() {
            return new PolicyState(adjustmentType, arn, autoscalingGroupName, cooldown, estimatedInstanceWarmup, metricAggregationType, minAdjustmentMagnitude, name, policyType, predictiveScalingConfiguration, scalingAdjustment, stepAdjustments, targetTrackingConfiguration);
        }
    }
}
