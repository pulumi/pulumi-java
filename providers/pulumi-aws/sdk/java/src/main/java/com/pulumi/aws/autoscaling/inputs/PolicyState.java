// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.autoscaling.inputs;

import com.pulumi.aws.autoscaling.inputs.PolicyPredictiveScalingConfigurationGetArgs;
import com.pulumi.aws.autoscaling.inputs.PolicyStepAdjustmentGetArgs;
import com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyState Empty = new PolicyState();

    /**
     * Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     * 
     */
    @Import(name="adjustmentType")
    private @Nullable Output<String> adjustmentType;

    public Optional<Output<String>> adjustmentType() {
        return Optional.ofNullable(this.adjustmentType);
    }

    /**
     * The ARN assigned by AWS to the scaling policy.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The name of the autoscaling group.
     * 
     */
    @Import(name="autoscalingGroupName")
    private @Nullable Output<String> autoscalingGroupName;

    public Optional<Output<String>> autoscalingGroupName() {
        return Optional.ofNullable(this.autoscalingGroupName);
    }

    /**
     * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     * 
     */
    @Import(name="cooldown")
    private @Nullable Output<Integer> cooldown;

    public Optional<Output<Integer>> cooldown() {
        return Optional.ofNullable(this.cooldown);
    }

    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group&#39;s specified cooldown period.
     * 
     */
    @Import(name="estimatedInstanceWarmup")
    private @Nullable Output<Integer> estimatedInstanceWarmup;

    public Optional<Output<Integer>> estimatedInstanceWarmup() {
        return Optional.ofNullable(this.estimatedInstanceWarmup);
    }

    /**
     * The aggregation type for the policy&#39;s metrics. Valid values are &#34;Minimum&#34;, &#34;Maximum&#34;, and &#34;Average&#34;. Without a value, AWS will treat the aggregation type as &#34;Average&#34;.
     * 
     */
    @Import(name="metricAggregationType")
    private @Nullable Output<String> metricAggregationType;

    public Optional<Output<String>> metricAggregationType() {
        return Optional.ofNullable(this.metricAggregationType);
    }

    /**
     * Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.
     * 
     */
    @Import(name="minAdjustmentMagnitude")
    private @Nullable Output<Integer> minAdjustmentMagnitude;

    public Optional<Output<Integer>> minAdjustmentMagnitude() {
        return Optional.ofNullable(this.minAdjustmentMagnitude);
    }

    /**
     * The name of the dimension.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The policy type, either &#34;SimpleScaling&#34;, &#34;StepScaling&#34;, &#34;TargetTrackingScaling&#34;, or &#34;PredictiveScaling&#34;. If this value isn&#39;t provided, AWS will default to &#34;SimpleScaling.&#34;
     * 
     */
    @Import(name="policyType")
    private @Nullable Output<String> policyType;

    public Optional<Output<String>> policyType() {
        return Optional.ofNullable(this.policyType);
    }

    /**
     * The predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     * 
     */
    @Import(name="predictiveScalingConfiguration")
    private @Nullable Output<PolicyPredictiveScalingConfigurationGetArgs> predictiveScalingConfiguration;

    public Optional<Output<PolicyPredictiveScalingConfigurationGetArgs>> predictiveScalingConfiguration() {
        return Optional.ofNullable(this.predictiveScalingConfiguration);
    }

    /**
     * The number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     * 
     */
    @Import(name="scalingAdjustment")
    private @Nullable Output<Integer> scalingAdjustment;

    public Optional<Output<Integer>> scalingAdjustment() {
        return Optional.ofNullable(this.scalingAdjustment);
    }

    /**
     * A set of adjustments that manage
     * group scaling. These have the following structure:
     * 
     */
    @Import(name="stepAdjustments")
    private @Nullable Output<List<PolicyStepAdjustmentGetArgs>> stepAdjustments;

    public Optional<Output<List<PolicyStepAdjustmentGetArgs>>> stepAdjustments() {
        return Optional.ofNullable(this.stepAdjustments);
    }

    /**
     * A target tracking policy. These have the following structure:
     * 
     */
    @Import(name="targetTrackingConfiguration")
    private @Nullable Output<PolicyTargetTrackingConfigurationGetArgs> targetTrackingConfiguration;

    public Optional<Output<PolicyTargetTrackingConfigurationGetArgs>> targetTrackingConfiguration() {
        return Optional.ofNullable(this.targetTrackingConfiguration);
    }

    private PolicyState() {}

    private PolicyState(PolicyState $) {
        this.adjustmentType = $.adjustmentType;
        this.arn = $.arn;
        this.autoscalingGroupName = $.autoscalingGroupName;
        this.cooldown = $.cooldown;
        this.estimatedInstanceWarmup = $.estimatedInstanceWarmup;
        this.metricAggregationType = $.metricAggregationType;
        this.minAdjustmentMagnitude = $.minAdjustmentMagnitude;
        this.name = $.name;
        this.policyType = $.policyType;
        this.predictiveScalingConfiguration = $.predictiveScalingConfiguration;
        this.scalingAdjustment = $.scalingAdjustment;
        this.stepAdjustments = $.stepAdjustments;
        this.targetTrackingConfiguration = $.targetTrackingConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyState $;

        public Builder() {
            $ = new PolicyState();
        }

        public Builder(PolicyState defaults) {
            $ = new PolicyState(Objects.requireNonNull(defaults));
        }

        public Builder adjustmentType(@Nullable Output<String> adjustmentType) {
            $.adjustmentType = adjustmentType;
            return this;
        }

        public Builder adjustmentType(String adjustmentType) {
            return adjustmentType(Output.of(adjustmentType));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder autoscalingGroupName(@Nullable Output<String> autoscalingGroupName) {
            $.autoscalingGroupName = autoscalingGroupName;
            return this;
        }

        public Builder autoscalingGroupName(String autoscalingGroupName) {
            return autoscalingGroupName(Output.of(autoscalingGroupName));
        }

        public Builder cooldown(@Nullable Output<Integer> cooldown) {
            $.cooldown = cooldown;
            return this;
        }

        public Builder cooldown(Integer cooldown) {
            return cooldown(Output.of(cooldown));
        }

        public Builder estimatedInstanceWarmup(@Nullable Output<Integer> estimatedInstanceWarmup) {
            $.estimatedInstanceWarmup = estimatedInstanceWarmup;
            return this;
        }

        public Builder estimatedInstanceWarmup(Integer estimatedInstanceWarmup) {
            return estimatedInstanceWarmup(Output.of(estimatedInstanceWarmup));
        }

        public Builder metricAggregationType(@Nullable Output<String> metricAggregationType) {
            $.metricAggregationType = metricAggregationType;
            return this;
        }

        public Builder metricAggregationType(String metricAggregationType) {
            return metricAggregationType(Output.of(metricAggregationType));
        }

        public Builder minAdjustmentMagnitude(@Nullable Output<Integer> minAdjustmentMagnitude) {
            $.minAdjustmentMagnitude = minAdjustmentMagnitude;
            return this;
        }

        public Builder minAdjustmentMagnitude(Integer minAdjustmentMagnitude) {
            return minAdjustmentMagnitude(Output.of(minAdjustmentMagnitude));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder policyType(@Nullable Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        public Builder predictiveScalingConfiguration(@Nullable Output<PolicyPredictiveScalingConfigurationGetArgs> predictiveScalingConfiguration) {
            $.predictiveScalingConfiguration = predictiveScalingConfiguration;
            return this;
        }

        public Builder predictiveScalingConfiguration(PolicyPredictiveScalingConfigurationGetArgs predictiveScalingConfiguration) {
            return predictiveScalingConfiguration(Output.of(predictiveScalingConfiguration));
        }

        public Builder scalingAdjustment(@Nullable Output<Integer> scalingAdjustment) {
            $.scalingAdjustment = scalingAdjustment;
            return this;
        }

        public Builder scalingAdjustment(Integer scalingAdjustment) {
            return scalingAdjustment(Output.of(scalingAdjustment));
        }

        public Builder stepAdjustments(@Nullable Output<List<PolicyStepAdjustmentGetArgs>> stepAdjustments) {
            $.stepAdjustments = stepAdjustments;
            return this;
        }

        public Builder stepAdjustments(List<PolicyStepAdjustmentGetArgs> stepAdjustments) {
            return stepAdjustments(Output.of(stepAdjustments));
        }

        public Builder stepAdjustments(PolicyStepAdjustmentGetArgs... stepAdjustments) {
            return stepAdjustments(List.of(stepAdjustments));
        }

        public Builder targetTrackingConfiguration(@Nullable Output<PolicyTargetTrackingConfigurationGetArgs> targetTrackingConfiguration) {
            $.targetTrackingConfiguration = targetTrackingConfiguration;
            return this;
        }

        public Builder targetTrackingConfiguration(PolicyTargetTrackingConfigurationGetArgs targetTrackingConfiguration) {
            return targetTrackingConfiguration(Output.of(targetTrackingConfiguration));
        }

        public PolicyState build() {
            return $;
        }
    }

}
