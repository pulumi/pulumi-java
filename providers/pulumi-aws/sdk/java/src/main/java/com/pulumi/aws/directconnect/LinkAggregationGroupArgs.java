// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directconnect;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LinkAggregationGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinkAggregationGroupArgs Empty = new LinkAggregationGroupArgs();

    /**
     * The ID of an existing dedicated connection to migrate to the LAG.
     * 
     */
    @Import(name="connectionId")
      private final @Nullable Output<String> connectionId;

    public Output<String> connectionId() {
        return this.connectionId == null ? Codegen.empty() : this.connectionId;
    }

    /**
     * The bandwidth of the individual physical connections bundled by the LAG. Valid values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps and 100Gbps. Case sensitive.
     * 
     */
    @Import(name="connectionsBandwidth", required=true)
      private final Output<String> connectionsBandwidth;

    public Output<String> connectionsBandwidth() {
        return this.connectionsBandwidth;
    }

    /**
     * A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
     * 
     */
    @Import(name="forceDestroy")
      private final @Nullable Output<Boolean> forceDestroy;

    public Output<Boolean> forceDestroy() {
        return this.forceDestroy == null ? Codegen.empty() : this.forceDestroy;
    }

    /**
     * The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
     * 
     */
    @Import(name="location", required=true)
      private final Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    /**
     * The name of the LAG.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The name of the service provider associated with the LAG.
     * 
     */
    @Import(name="providerName")
      private final @Nullable Output<String> providerName;

    public Output<String> providerName() {
        return this.providerName == null ? Codegen.empty() : this.providerName;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public LinkAggregationGroupArgs(
        @Nullable Output<String> connectionId,
        Output<String> connectionsBandwidth,
        @Nullable Output<Boolean> forceDestroy,
        Output<String> location,
        @Nullable Output<String> name,
        @Nullable Output<String> providerName,
        @Nullable Output<Map<String,String>> tags) {
        this.connectionId = connectionId;
        this.connectionsBandwidth = Objects.requireNonNull(connectionsBandwidth, "expected parameter 'connectionsBandwidth' to be non-null");
        this.forceDestroy = forceDestroy;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.name = name;
        this.providerName = providerName;
        this.tags = tags;
    }

    private LinkAggregationGroupArgs() {
        this.connectionId = Codegen.empty();
        this.connectionsBandwidth = Codegen.empty();
        this.forceDestroy = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.providerName = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinkAggregationGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> connectionId;
        private Output<String> connectionsBandwidth;
        private @Nullable Output<Boolean> forceDestroy;
        private Output<String> location;
        private @Nullable Output<String> name;
        private @Nullable Output<String> providerName;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(LinkAggregationGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.connectionsBandwidth = defaults.connectionsBandwidth;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.providerName = defaults.providerName;
    	      this.tags = defaults.tags;
        }

        public Builder connectionId(@Nullable Output<String> connectionId) {
            this.connectionId = connectionId;
            return this;
        }
        public Builder connectionId(@Nullable String connectionId) {
            this.connectionId = Codegen.ofNullable(connectionId);
            return this;
        }
        public Builder connectionsBandwidth(Output<String> connectionsBandwidth) {
            this.connectionsBandwidth = Objects.requireNonNull(connectionsBandwidth);
            return this;
        }
        public Builder connectionsBandwidth(String connectionsBandwidth) {
            this.connectionsBandwidth = Output.of(Objects.requireNonNull(connectionsBandwidth));
            return this;
        }
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            this.forceDestroy = forceDestroy;
            return this;
        }
        public Builder forceDestroy(@Nullable Boolean forceDestroy) {
            this.forceDestroy = Codegen.ofNullable(forceDestroy);
            return this;
        }
        public Builder location(Output<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder location(String location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder providerName(@Nullable Output<String> providerName) {
            this.providerName = providerName;
            return this;
        }
        public Builder providerName(@Nullable String providerName) {
            this.providerName = Codegen.ofNullable(providerName);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public LinkAggregationGroupArgs build() {
            return new LinkAggregationGroupArgs(connectionId, connectionsBandwidth, forceDestroy, location, name, providerName, tags);
        }
    }
}
