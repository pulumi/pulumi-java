// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mwaa.inputs;

import com.pulumi.aws.mwaa.inputs.EnvironmentLastUpdatedGetArgs;
import com.pulumi.aws.mwaa.inputs.EnvironmentLoggingConfigurationGetArgs;
import com.pulumi.aws.mwaa.inputs.EnvironmentNetworkConfigurationGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EnvironmentState extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentState Empty = new EnvironmentState();

    /**
     * The `airflow_configuration_options` parameter specifies airflow override options. Check the [Official documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-reference) for all possible configuration options.
     * 
     */
    @Import(name="airflowConfigurationOptions")
      private final @Nullable Output<Map<String,String>> airflowConfigurationOptions;

    public Output<Map<String,String>> airflowConfigurationOptions() {
        return this.airflowConfigurationOptions == null ? Codegen.empty() : this.airflowConfigurationOptions;
    }

    /**
     * Airflow version of your environment, will be set by default to the latest version that MWAA supports.
     * 
     */
    @Import(name="airflowVersion")
      private final @Nullable Output<String> airflowVersion;

    public Output<String> airflowVersion() {
        return this.airflowVersion == null ? Codegen.empty() : this.airflowVersion;
    }

    /**
     * The ARN of the MWAA Environment
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The Created At date of the MWAA Environment
     * * `logging_configuration[0].&lt;LOG_CONFIGURATION_TYPE&gt;[0].cloud_watch_log_group_arn` - Provides the ARN for the CloudWatch group where the logs will be published
     * 
     */
    @Import(name="createdAt")
      private final @Nullable Output<String> createdAt;

    public Output<String> createdAt() {
        return this.createdAt == null ? Codegen.empty() : this.createdAt;
    }

    /**
     * The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
     * 
     */
    @Import(name="dagS3Path")
      private final @Nullable Output<String> dagS3Path;

    public Output<String> dagS3Path() {
        return this.dagS3Path == null ? Codegen.empty() : this.dagS3Path;
    }

    /**
     * Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`. Will be set by default to `mw1.small`. Please check the [AWS Pricing](https://aws.amazon.com/de/managed-workflows-for-apache-airflow/pricing/) for more information about the environment classes.
     * 
     */
    @Import(name="environmentClass")
      private final @Nullable Output<String> environmentClass;

    public Output<String> environmentClass() {
        return this.environmentClass == null ? Codegen.empty() : this.environmentClass;
    }

    /**
     * The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the [official AWS documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html) for the detailed role specification.
     * 
     */
    @Import(name="executionRoleArn")
      private final @Nullable Output<String> executionRoleArn;

    public Output<String> executionRoleArn() {
        return this.executionRoleArn == null ? Codegen.empty() : this.executionRoleArn;
    }

    /**
     * The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key `aws/airflow` by default. Please check the [Official Documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/custom-keys-certs.html) for more information.
     * 
     */
    @Import(name="kmsKey")
      private final @Nullable Output<String> kmsKey;

    public Output<String> kmsKey() {
        return this.kmsKey == null ? Codegen.empty() : this.kmsKey;
    }

    @Import(name="lastUpdateds")
      private final @Nullable Output<List<EnvironmentLastUpdatedGetArgs>> lastUpdateds;

    public Output<List<EnvironmentLastUpdatedGetArgs>> lastUpdateds() {
        return this.lastUpdateds == null ? Codegen.empty() : this.lastUpdateds;
    }

    /**
     * The Apache Airflow logs you want to send to Amazon CloudWatch Logs.
     * 
     */
    @Import(name="loggingConfiguration")
      private final @Nullable Output<EnvironmentLoggingConfigurationGetArgs> loggingConfiguration;

    public Output<EnvironmentLoggingConfigurationGetArgs> loggingConfiguration() {
        return this.loggingConfiguration == null ? Codegen.empty() : this.loggingConfiguration;
    }

    /**
     * The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`. Will be `10` by default.
     * 
     */
    @Import(name="maxWorkers")
      private final @Nullable Output<Integer> maxWorkers;

    public Output<Integer> maxWorkers() {
        return this.maxWorkers == null ? Codegen.empty() : this.maxWorkers;
    }

    /**
     * The minimum number of workers that you want to run in your environment. Will be `1` by default.
     * 
     */
    @Import(name="minWorkers")
      private final @Nullable Output<Integer> minWorkers;

    public Output<Integer> minWorkers() {
        return this.minWorkers == null ? Codegen.empty() : this.minWorkers;
    }

    /**
     * The name of the Apache Airflow Environment
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See Network configuration below for details.
     * 
     */
    @Import(name="networkConfiguration")
      private final @Nullable Output<EnvironmentNetworkConfigurationGetArgs> networkConfiguration;

    public Output<EnvironmentNetworkConfigurationGetArgs> networkConfiguration() {
        return this.networkConfiguration == null ? Codegen.empty() : this.networkConfiguration;
    }

    /**
     * The plugins.zip file version you want to use.
     * 
     */
    @Import(name="pluginsS3ObjectVersion")
      private final @Nullable Output<String> pluginsS3ObjectVersion;

    public Output<String> pluginsS3ObjectVersion() {
        return this.pluginsS3ObjectVersion == null ? Codegen.empty() : this.pluginsS3ObjectVersion;
    }

    /**
     * The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then plugins_s3_object_version is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
     * 
     */
    @Import(name="pluginsS3Path")
      private final @Nullable Output<String> pluginsS3Path;

    public Output<String> pluginsS3Path() {
        return this.pluginsS3Path == null ? Codegen.empty() : this.pluginsS3Path;
    }

    /**
     * The requirements.txt file version you want to use.
     * 
     */
    @Import(name="requirementsS3ObjectVersion")
      private final @Nullable Output<String> requirementsS3ObjectVersion;

    public Output<String> requirementsS3ObjectVersion() {
        return this.requirementsS3ObjectVersion == null ? Codegen.empty() : this.requirementsS3ObjectVersion;
    }

    /**
     * The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements_s3_object_version is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
     * 
     */
    @Import(name="requirementsS3Path")
      private final @Nullable Output<String> requirementsS3Path;

    public Output<String> requirementsS3Path() {
        return this.requirementsS3Path == null ? Codegen.empty() : this.requirementsS3Path;
    }

    /**
     * The Service Role ARN of the Amazon MWAA Environment
     * 
     */
    @Import(name="serviceRoleArn")
      private final @Nullable Output<String> serviceRoleArn;

    public Output<String> serviceRoleArn() {
        return this.serviceRoleArn == null ? Codegen.empty() : this.serviceRoleArn;
    }

    /**
     * The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
     * 
     */
    @Import(name="sourceBucketArn")
      private final @Nullable Output<String> sourceBucketArn;

    public Output<String> sourceBucketArn() {
        return this.sourceBucketArn == null ? Codegen.empty() : this.sourceBucketArn;
    }

    /**
     * The status of the Amazon MWAA Environment
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * A map of resource tags to associate with the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: `PRIVATE_ONLY` (default) and `PUBLIC_ONLY`.
     * 
     */
    @Import(name="webserverAccessMode")
      private final @Nullable Output<String> webserverAccessMode;

    public Output<String> webserverAccessMode() {
        return this.webserverAccessMode == null ? Codegen.empty() : this.webserverAccessMode;
    }

    /**
     * The webserver URL of the MWAA Environment
     * 
     */
    @Import(name="webserverUrl")
      private final @Nullable Output<String> webserverUrl;

    public Output<String> webserverUrl() {
        return this.webserverUrl == null ? Codegen.empty() : this.webserverUrl;
    }

    /**
     * Specifies the start date for the weekly maintenance window.
     * 
     */
    @Import(name="weeklyMaintenanceWindowStart")
      private final @Nullable Output<String> weeklyMaintenanceWindowStart;

    public Output<String> weeklyMaintenanceWindowStart() {
        return this.weeklyMaintenanceWindowStart == null ? Codegen.empty() : this.weeklyMaintenanceWindowStart;
    }

    public EnvironmentState(
        @Nullable Output<Map<String,String>> airflowConfigurationOptions,
        @Nullable Output<String> airflowVersion,
        @Nullable Output<String> arn,
        @Nullable Output<String> createdAt,
        @Nullable Output<String> dagS3Path,
        @Nullable Output<String> environmentClass,
        @Nullable Output<String> executionRoleArn,
        @Nullable Output<String> kmsKey,
        @Nullable Output<List<EnvironmentLastUpdatedGetArgs>> lastUpdateds,
        @Nullable Output<EnvironmentLoggingConfigurationGetArgs> loggingConfiguration,
        @Nullable Output<Integer> maxWorkers,
        @Nullable Output<Integer> minWorkers,
        @Nullable Output<String> name,
        @Nullable Output<EnvironmentNetworkConfigurationGetArgs> networkConfiguration,
        @Nullable Output<String> pluginsS3ObjectVersion,
        @Nullable Output<String> pluginsS3Path,
        @Nullable Output<String> requirementsS3ObjectVersion,
        @Nullable Output<String> requirementsS3Path,
        @Nullable Output<String> serviceRoleArn,
        @Nullable Output<String> sourceBucketArn,
        @Nullable Output<String> status,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> webserverAccessMode,
        @Nullable Output<String> webserverUrl,
        @Nullable Output<String> weeklyMaintenanceWindowStart) {
        this.airflowConfigurationOptions = airflowConfigurationOptions;
        this.airflowVersion = airflowVersion;
        this.arn = arn;
        this.createdAt = createdAt;
        this.dagS3Path = dagS3Path;
        this.environmentClass = environmentClass;
        this.executionRoleArn = executionRoleArn;
        this.kmsKey = kmsKey;
        this.lastUpdateds = lastUpdateds;
        this.loggingConfiguration = loggingConfiguration;
        this.maxWorkers = maxWorkers;
        this.minWorkers = minWorkers;
        this.name = name;
        this.networkConfiguration = networkConfiguration;
        this.pluginsS3ObjectVersion = pluginsS3ObjectVersion;
        this.pluginsS3Path = pluginsS3Path;
        this.requirementsS3ObjectVersion = requirementsS3ObjectVersion;
        this.requirementsS3Path = requirementsS3Path;
        this.serviceRoleArn = serviceRoleArn;
        this.sourceBucketArn = sourceBucketArn;
        this.status = status;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.webserverAccessMode = webserverAccessMode;
        this.webserverUrl = webserverUrl;
        this.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart;
    }

    private EnvironmentState() {
        this.airflowConfigurationOptions = Codegen.empty();
        this.airflowVersion = Codegen.empty();
        this.arn = Codegen.empty();
        this.createdAt = Codegen.empty();
        this.dagS3Path = Codegen.empty();
        this.environmentClass = Codegen.empty();
        this.executionRoleArn = Codegen.empty();
        this.kmsKey = Codegen.empty();
        this.lastUpdateds = Codegen.empty();
        this.loggingConfiguration = Codegen.empty();
        this.maxWorkers = Codegen.empty();
        this.minWorkers = Codegen.empty();
        this.name = Codegen.empty();
        this.networkConfiguration = Codegen.empty();
        this.pluginsS3ObjectVersion = Codegen.empty();
        this.pluginsS3Path = Codegen.empty();
        this.requirementsS3ObjectVersion = Codegen.empty();
        this.requirementsS3Path = Codegen.empty();
        this.serviceRoleArn = Codegen.empty();
        this.sourceBucketArn = Codegen.empty();
        this.status = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.webserverAccessMode = Codegen.empty();
        this.webserverUrl = Codegen.empty();
        this.weeklyMaintenanceWindowStart = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvironmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> airflowConfigurationOptions;
        private @Nullable Output<String> airflowVersion;
        private @Nullable Output<String> arn;
        private @Nullable Output<String> createdAt;
        private @Nullable Output<String> dagS3Path;
        private @Nullable Output<String> environmentClass;
        private @Nullable Output<String> executionRoleArn;
        private @Nullable Output<String> kmsKey;
        private @Nullable Output<List<EnvironmentLastUpdatedGetArgs>> lastUpdateds;
        private @Nullable Output<EnvironmentLoggingConfigurationGetArgs> loggingConfiguration;
        private @Nullable Output<Integer> maxWorkers;
        private @Nullable Output<Integer> minWorkers;
        private @Nullable Output<String> name;
        private @Nullable Output<EnvironmentNetworkConfigurationGetArgs> networkConfiguration;
        private @Nullable Output<String> pluginsS3ObjectVersion;
        private @Nullable Output<String> pluginsS3Path;
        private @Nullable Output<String> requirementsS3ObjectVersion;
        private @Nullable Output<String> requirementsS3Path;
        private @Nullable Output<String> serviceRoleArn;
        private @Nullable Output<String> sourceBucketArn;
        private @Nullable Output<String> status;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> webserverAccessMode;
        private @Nullable Output<String> webserverUrl;
        private @Nullable Output<String> weeklyMaintenanceWindowStart;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvironmentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.airflowConfigurationOptions = defaults.airflowConfigurationOptions;
    	      this.airflowVersion = defaults.airflowVersion;
    	      this.arn = defaults.arn;
    	      this.createdAt = defaults.createdAt;
    	      this.dagS3Path = defaults.dagS3Path;
    	      this.environmentClass = defaults.environmentClass;
    	      this.executionRoleArn = defaults.executionRoleArn;
    	      this.kmsKey = defaults.kmsKey;
    	      this.lastUpdateds = defaults.lastUpdateds;
    	      this.loggingConfiguration = defaults.loggingConfiguration;
    	      this.maxWorkers = defaults.maxWorkers;
    	      this.minWorkers = defaults.minWorkers;
    	      this.name = defaults.name;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.pluginsS3ObjectVersion = defaults.pluginsS3ObjectVersion;
    	      this.pluginsS3Path = defaults.pluginsS3Path;
    	      this.requirementsS3ObjectVersion = defaults.requirementsS3ObjectVersion;
    	      this.requirementsS3Path = defaults.requirementsS3Path;
    	      this.serviceRoleArn = defaults.serviceRoleArn;
    	      this.sourceBucketArn = defaults.sourceBucketArn;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.webserverAccessMode = defaults.webserverAccessMode;
    	      this.webserverUrl = defaults.webserverUrl;
    	      this.weeklyMaintenanceWindowStart = defaults.weeklyMaintenanceWindowStart;
        }

        public Builder airflowConfigurationOptions(@Nullable Output<Map<String,String>> airflowConfigurationOptions) {
            this.airflowConfigurationOptions = airflowConfigurationOptions;
            return this;
        }
        public Builder airflowConfigurationOptions(@Nullable Map<String,String> airflowConfigurationOptions) {
            this.airflowConfigurationOptions = Codegen.ofNullable(airflowConfigurationOptions);
            return this;
        }
        public Builder airflowVersion(@Nullable Output<String> airflowVersion) {
            this.airflowVersion = airflowVersion;
            return this;
        }
        public Builder airflowVersion(@Nullable String airflowVersion) {
            this.airflowVersion = Codegen.ofNullable(airflowVersion);
            return this;
        }
        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder createdAt(@Nullable Output<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        public Builder createdAt(@Nullable String createdAt) {
            this.createdAt = Codegen.ofNullable(createdAt);
            return this;
        }
        public Builder dagS3Path(@Nullable Output<String> dagS3Path) {
            this.dagS3Path = dagS3Path;
            return this;
        }
        public Builder dagS3Path(@Nullable String dagS3Path) {
            this.dagS3Path = Codegen.ofNullable(dagS3Path);
            return this;
        }
        public Builder environmentClass(@Nullable Output<String> environmentClass) {
            this.environmentClass = environmentClass;
            return this;
        }
        public Builder environmentClass(@Nullable String environmentClass) {
            this.environmentClass = Codegen.ofNullable(environmentClass);
            return this;
        }
        public Builder executionRoleArn(@Nullable Output<String> executionRoleArn) {
            this.executionRoleArn = executionRoleArn;
            return this;
        }
        public Builder executionRoleArn(@Nullable String executionRoleArn) {
            this.executionRoleArn = Codegen.ofNullable(executionRoleArn);
            return this;
        }
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            this.kmsKey = kmsKey;
            return this;
        }
        public Builder kmsKey(@Nullable String kmsKey) {
            this.kmsKey = Codegen.ofNullable(kmsKey);
            return this;
        }
        public Builder lastUpdateds(@Nullable Output<List<EnvironmentLastUpdatedGetArgs>> lastUpdateds) {
            this.lastUpdateds = lastUpdateds;
            return this;
        }
        public Builder lastUpdateds(@Nullable List<EnvironmentLastUpdatedGetArgs> lastUpdateds) {
            this.lastUpdateds = Codegen.ofNullable(lastUpdateds);
            return this;
        }
        public Builder lastUpdateds(EnvironmentLastUpdatedGetArgs... lastUpdateds) {
            return lastUpdateds(List.of(lastUpdateds));
        }
        public Builder loggingConfiguration(@Nullable Output<EnvironmentLoggingConfigurationGetArgs> loggingConfiguration) {
            this.loggingConfiguration = loggingConfiguration;
            return this;
        }
        public Builder loggingConfiguration(@Nullable EnvironmentLoggingConfigurationGetArgs loggingConfiguration) {
            this.loggingConfiguration = Codegen.ofNullable(loggingConfiguration);
            return this;
        }
        public Builder maxWorkers(@Nullable Output<Integer> maxWorkers) {
            this.maxWorkers = maxWorkers;
            return this;
        }
        public Builder maxWorkers(@Nullable Integer maxWorkers) {
            this.maxWorkers = Codegen.ofNullable(maxWorkers);
            return this;
        }
        public Builder minWorkers(@Nullable Output<Integer> minWorkers) {
            this.minWorkers = minWorkers;
            return this;
        }
        public Builder minWorkers(@Nullable Integer minWorkers) {
            this.minWorkers = Codegen.ofNullable(minWorkers);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder networkConfiguration(@Nullable Output<EnvironmentNetworkConfigurationGetArgs> networkConfiguration) {
            this.networkConfiguration = networkConfiguration;
            return this;
        }
        public Builder networkConfiguration(@Nullable EnvironmentNetworkConfigurationGetArgs networkConfiguration) {
            this.networkConfiguration = Codegen.ofNullable(networkConfiguration);
            return this;
        }
        public Builder pluginsS3ObjectVersion(@Nullable Output<String> pluginsS3ObjectVersion) {
            this.pluginsS3ObjectVersion = pluginsS3ObjectVersion;
            return this;
        }
        public Builder pluginsS3ObjectVersion(@Nullable String pluginsS3ObjectVersion) {
            this.pluginsS3ObjectVersion = Codegen.ofNullable(pluginsS3ObjectVersion);
            return this;
        }
        public Builder pluginsS3Path(@Nullable Output<String> pluginsS3Path) {
            this.pluginsS3Path = pluginsS3Path;
            return this;
        }
        public Builder pluginsS3Path(@Nullable String pluginsS3Path) {
            this.pluginsS3Path = Codegen.ofNullable(pluginsS3Path);
            return this;
        }
        public Builder requirementsS3ObjectVersion(@Nullable Output<String> requirementsS3ObjectVersion) {
            this.requirementsS3ObjectVersion = requirementsS3ObjectVersion;
            return this;
        }
        public Builder requirementsS3ObjectVersion(@Nullable String requirementsS3ObjectVersion) {
            this.requirementsS3ObjectVersion = Codegen.ofNullable(requirementsS3ObjectVersion);
            return this;
        }
        public Builder requirementsS3Path(@Nullable Output<String> requirementsS3Path) {
            this.requirementsS3Path = requirementsS3Path;
            return this;
        }
        public Builder requirementsS3Path(@Nullable String requirementsS3Path) {
            this.requirementsS3Path = Codegen.ofNullable(requirementsS3Path);
            return this;
        }
        public Builder serviceRoleArn(@Nullable Output<String> serviceRoleArn) {
            this.serviceRoleArn = serviceRoleArn;
            return this;
        }
        public Builder serviceRoleArn(@Nullable String serviceRoleArn) {
            this.serviceRoleArn = Codegen.ofNullable(serviceRoleArn);
            return this;
        }
        public Builder sourceBucketArn(@Nullable Output<String> sourceBucketArn) {
            this.sourceBucketArn = sourceBucketArn;
            return this;
        }
        public Builder sourceBucketArn(@Nullable String sourceBucketArn) {
            this.sourceBucketArn = Codegen.ofNullable(sourceBucketArn);
            return this;
        }
        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder webserverAccessMode(@Nullable Output<String> webserverAccessMode) {
            this.webserverAccessMode = webserverAccessMode;
            return this;
        }
        public Builder webserverAccessMode(@Nullable String webserverAccessMode) {
            this.webserverAccessMode = Codegen.ofNullable(webserverAccessMode);
            return this;
        }
        public Builder webserverUrl(@Nullable Output<String> webserverUrl) {
            this.webserverUrl = webserverUrl;
            return this;
        }
        public Builder webserverUrl(@Nullable String webserverUrl) {
            this.webserverUrl = Codegen.ofNullable(webserverUrl);
            return this;
        }
        public Builder weeklyMaintenanceWindowStart(@Nullable Output<String> weeklyMaintenanceWindowStart) {
            this.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart;
            return this;
        }
        public Builder weeklyMaintenanceWindowStart(@Nullable String weeklyMaintenanceWindowStart) {
            this.weeklyMaintenanceWindowStart = Codegen.ofNullable(weeklyMaintenanceWindowStart);
            return this;
        }        public EnvironmentState build() {
            return new EnvironmentState(airflowConfigurationOptions, airflowVersion, arn, createdAt, dagS3Path, environmentClass, executionRoleArn, kmsKey, lastUpdateds, loggingConfiguration, maxWorkers, minWorkers, name, networkConfiguration, pluginsS3ObjectVersion, pluginsS3Path, requirementsS3ObjectVersion, requirementsS3Path, serviceRoleArn, sourceBucketArn, status, tags, tagsAll, webserverAccessMode, webserverUrl, weeklyMaintenanceWindowStart);
        }
    }
}
