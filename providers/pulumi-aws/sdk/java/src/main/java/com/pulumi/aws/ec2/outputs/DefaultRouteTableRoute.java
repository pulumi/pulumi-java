// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DefaultRouteTableRoute {
    /**
     * @return The CIDR block of the route.
     * 
     */
    private final @Nullable String cidrBlock;
    /**
     * @return The Amazon Resource Name (ARN) of a core network.
     * 
     */
    private final @Nullable String coreNetworkArn;
    /**
     * @return The ID of a managed prefix list destination of the route.
     * 
     */
    private final @Nullable String destinationPrefixListId;
    /**
     * @return Identifier of a VPC Egress Only Internet Gateway.
     * 
     */
    private final @Nullable String egressOnlyGatewayId;
    /**
     * @return Identifier of a VPC internet gateway or a virtual private gateway.
     * 
     */
    private final @Nullable String gatewayId;
    /**
     * @return Identifier of an EC2 instance.
     * 
     */
    private final @Nullable String instanceId;
    /**
     * @return The Ipv6 CIDR block of the route
     * 
     */
    private final @Nullable String ipv6CidrBlock;
    /**
     * @return Identifier of a VPC NAT gateway.
     * 
     */
    private final @Nullable String natGatewayId;
    /**
     * @return Identifier of an EC2 network interface.
     * 
     */
    private final @Nullable String networkInterfaceId;
    /**
     * @return Identifier of an EC2 Transit Gateway.
     * 
     */
    private final @Nullable String transitGatewayId;
    /**
     * @return Identifier of a VPC Endpoint. This route must be removed prior to VPC Endpoint deletion.
     * 
     */
    private final @Nullable String vpcEndpointId;
    /**
     * @return Identifier of a VPC peering connection.
     * 
     */
    private final @Nullable String vpcPeeringConnectionId;

    @CustomType.Constructor
    private DefaultRouteTableRoute(
        @CustomType.Parameter("cidrBlock") @Nullable String cidrBlock,
        @CustomType.Parameter("coreNetworkArn") @Nullable String coreNetworkArn,
        @CustomType.Parameter("destinationPrefixListId") @Nullable String destinationPrefixListId,
        @CustomType.Parameter("egressOnlyGatewayId") @Nullable String egressOnlyGatewayId,
        @CustomType.Parameter("gatewayId") @Nullable String gatewayId,
        @CustomType.Parameter("instanceId") @Nullable String instanceId,
        @CustomType.Parameter("ipv6CidrBlock") @Nullable String ipv6CidrBlock,
        @CustomType.Parameter("natGatewayId") @Nullable String natGatewayId,
        @CustomType.Parameter("networkInterfaceId") @Nullable String networkInterfaceId,
        @CustomType.Parameter("transitGatewayId") @Nullable String transitGatewayId,
        @CustomType.Parameter("vpcEndpointId") @Nullable String vpcEndpointId,
        @CustomType.Parameter("vpcPeeringConnectionId") @Nullable String vpcPeeringConnectionId) {
        this.cidrBlock = cidrBlock;
        this.coreNetworkArn = coreNetworkArn;
        this.destinationPrefixListId = destinationPrefixListId;
        this.egressOnlyGatewayId = egressOnlyGatewayId;
        this.gatewayId = gatewayId;
        this.instanceId = instanceId;
        this.ipv6CidrBlock = ipv6CidrBlock;
        this.natGatewayId = natGatewayId;
        this.networkInterfaceId = networkInterfaceId;
        this.transitGatewayId = transitGatewayId;
        this.vpcEndpointId = vpcEndpointId;
        this.vpcPeeringConnectionId = vpcPeeringConnectionId;
    }

    /**
     * @return The CIDR block of the route.
     * 
     */
    public Optional<String> cidrBlock() {
        return Optional.ofNullable(this.cidrBlock);
    }
    /**
     * @return The Amazon Resource Name (ARN) of a core network.
     * 
     */
    public Optional<String> coreNetworkArn() {
        return Optional.ofNullable(this.coreNetworkArn);
    }
    /**
     * @return The ID of a managed prefix list destination of the route.
     * 
     */
    public Optional<String> destinationPrefixListId() {
        return Optional.ofNullable(this.destinationPrefixListId);
    }
    /**
     * @return Identifier of a VPC Egress Only Internet Gateway.
     * 
     */
    public Optional<String> egressOnlyGatewayId() {
        return Optional.ofNullable(this.egressOnlyGatewayId);
    }
    /**
     * @return Identifier of a VPC internet gateway or a virtual private gateway.
     * 
     */
    public Optional<String> gatewayId() {
        return Optional.ofNullable(this.gatewayId);
    }
    /**
     * @return Identifier of an EC2 instance.
     * 
     */
    public Optional<String> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }
    /**
     * @return The Ipv6 CIDR block of the route
     * 
     */
    public Optional<String> ipv6CidrBlock() {
        return Optional.ofNullable(this.ipv6CidrBlock);
    }
    /**
     * @return Identifier of a VPC NAT gateway.
     * 
     */
    public Optional<String> natGatewayId() {
        return Optional.ofNullable(this.natGatewayId);
    }
    /**
     * @return Identifier of an EC2 network interface.
     * 
     */
    public Optional<String> networkInterfaceId() {
        return Optional.ofNullable(this.networkInterfaceId);
    }
    /**
     * @return Identifier of an EC2 Transit Gateway.
     * 
     */
    public Optional<String> transitGatewayId() {
        return Optional.ofNullable(this.transitGatewayId);
    }
    /**
     * @return Identifier of a VPC Endpoint. This route must be removed prior to VPC Endpoint deletion.
     * 
     */
    public Optional<String> vpcEndpointId() {
        return Optional.ofNullable(this.vpcEndpointId);
    }
    /**
     * @return Identifier of a VPC peering connection.
     * 
     */
    public Optional<String> vpcPeeringConnectionId() {
        return Optional.ofNullable(this.vpcPeeringConnectionId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DefaultRouteTableRoute defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String cidrBlock;
        private @Nullable String coreNetworkArn;
        private @Nullable String destinationPrefixListId;
        private @Nullable String egressOnlyGatewayId;
        private @Nullable String gatewayId;
        private @Nullable String instanceId;
        private @Nullable String ipv6CidrBlock;
        private @Nullable String natGatewayId;
        private @Nullable String networkInterfaceId;
        private @Nullable String transitGatewayId;
        private @Nullable String vpcEndpointId;
        private @Nullable String vpcPeeringConnectionId;

        public Builder() {
    	      // Empty
        }

        public Builder(DefaultRouteTableRoute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.coreNetworkArn = defaults.coreNetworkArn;
    	      this.destinationPrefixListId = defaults.destinationPrefixListId;
    	      this.egressOnlyGatewayId = defaults.egressOnlyGatewayId;
    	      this.gatewayId = defaults.gatewayId;
    	      this.instanceId = defaults.instanceId;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.natGatewayId = defaults.natGatewayId;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.transitGatewayId = defaults.transitGatewayId;
    	      this.vpcEndpointId = defaults.vpcEndpointId;
    	      this.vpcPeeringConnectionId = defaults.vpcPeeringConnectionId;
        }

        public Builder cidrBlock(@Nullable String cidrBlock) {
            this.cidrBlock = cidrBlock;
            return this;
        }
        public Builder coreNetworkArn(@Nullable String coreNetworkArn) {
            this.coreNetworkArn = coreNetworkArn;
            return this;
        }
        public Builder destinationPrefixListId(@Nullable String destinationPrefixListId) {
            this.destinationPrefixListId = destinationPrefixListId;
            return this;
        }
        public Builder egressOnlyGatewayId(@Nullable String egressOnlyGatewayId) {
            this.egressOnlyGatewayId = egressOnlyGatewayId;
            return this;
        }
        public Builder gatewayId(@Nullable String gatewayId) {
            this.gatewayId = gatewayId;
            return this;
        }
        public Builder instanceId(@Nullable String instanceId) {
            this.instanceId = instanceId;
            return this;
        }
        public Builder ipv6CidrBlock(@Nullable String ipv6CidrBlock) {
            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        public Builder natGatewayId(@Nullable String natGatewayId) {
            this.natGatewayId = natGatewayId;
            return this;
        }
        public Builder networkInterfaceId(@Nullable String networkInterfaceId) {
            this.networkInterfaceId = networkInterfaceId;
            return this;
        }
        public Builder transitGatewayId(@Nullable String transitGatewayId) {
            this.transitGatewayId = transitGatewayId;
            return this;
        }
        public Builder vpcEndpointId(@Nullable String vpcEndpointId) {
            this.vpcEndpointId = vpcEndpointId;
            return this;
        }
        public Builder vpcPeeringConnectionId(@Nullable String vpcPeeringConnectionId) {
            this.vpcPeeringConnectionId = vpcPeeringConnectionId;
            return this;
        }        public DefaultRouteTableRoute build() {
            return new DefaultRouteTableRoute(cidrBlock, coreNetworkArn, destinationPrefixListId, egressOnlyGatewayId, gatewayId, instanceId, ipv6CidrBlock, natGatewayId, networkInterfaceId, transitGatewayId, vpcEndpointId, vpcPeeringConnectionId);
        }
    }
}
