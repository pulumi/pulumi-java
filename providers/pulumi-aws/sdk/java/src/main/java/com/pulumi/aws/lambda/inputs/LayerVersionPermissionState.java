// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LayerVersionPermissionState extends com.pulumi.resources.ResourceArgs {

    public static final LayerVersionPermissionState Empty = new LayerVersionPermissionState();

    /**
     * Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
     * 
     */
    @Import(name="action")
      private final @Nullable Output<String> action;

    public Output<String> action() {
        return this.action == null ? Codegen.empty() : this.action;
    }

    /**
     * The name or ARN of the Lambda Layer, which you want to grant access to.
     * 
     */
    @Import(name="layerName")
      private final @Nullable Output<String> layerName;

    public Output<String> layerName() {
        return this.layerName == null ? Codegen.empty() : this.layerName;
    }

    /**
     * An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organization_id` provided.
     * 
     */
    @Import(name="organizationId")
      private final @Nullable Output<String> organizationId;

    public Output<String> organizationId() {
        return this.organizationId == null ? Codegen.empty() : this.organizationId;
    }

    /**
     * Full Lambda Layer Permission policy.
     * 
     */
    @Import(name="policy")
      private final @Nullable Output<String> policy;

    public Output<String> policy() {
        return this.policy == null ? Codegen.empty() : this.policy;
    }

    /**
     * AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
     * 
     */
    @Import(name="principal")
      private final @Nullable Output<String> principal;

    public Output<String> principal() {
        return this.principal == null ? Codegen.empty() : this.principal;
    }

    /**
     * A unique identifier for the current revision of the policy.
     * 
     */
    @Import(name="revisionId")
      private final @Nullable Output<String> revisionId;

    public Output<String> revisionId() {
        return this.revisionId == null ? Codegen.empty() : this.revisionId;
    }

    /**
     * The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
     * 
     */
    @Import(name="statementId")
      private final @Nullable Output<String> statementId;

    public Output<String> statementId() {
        return this.statementId == null ? Codegen.empty() : this.statementId;
    }

    /**
     * Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
     * 
     */
    @Import(name="versionNumber")
      private final @Nullable Output<Integer> versionNumber;

    public Output<Integer> versionNumber() {
        return this.versionNumber == null ? Codegen.empty() : this.versionNumber;
    }

    public LayerVersionPermissionState(
        @Nullable Output<String> action,
        @Nullable Output<String> layerName,
        @Nullable Output<String> organizationId,
        @Nullable Output<String> policy,
        @Nullable Output<String> principal,
        @Nullable Output<String> revisionId,
        @Nullable Output<String> statementId,
        @Nullable Output<Integer> versionNumber) {
        this.action = action;
        this.layerName = layerName;
        this.organizationId = organizationId;
        this.policy = policy;
        this.principal = principal;
        this.revisionId = revisionId;
        this.statementId = statementId;
        this.versionNumber = versionNumber;
    }

    private LayerVersionPermissionState() {
        this.action = Codegen.empty();
        this.layerName = Codegen.empty();
        this.organizationId = Codegen.empty();
        this.policy = Codegen.empty();
        this.principal = Codegen.empty();
        this.revisionId = Codegen.empty();
        this.statementId = Codegen.empty();
        this.versionNumber = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LayerVersionPermissionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> action;
        private @Nullable Output<String> layerName;
        private @Nullable Output<String> organizationId;
        private @Nullable Output<String> policy;
        private @Nullable Output<String> principal;
        private @Nullable Output<String> revisionId;
        private @Nullable Output<String> statementId;
        private @Nullable Output<Integer> versionNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(LayerVersionPermissionState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.layerName = defaults.layerName;
    	      this.organizationId = defaults.organizationId;
    	      this.policy = defaults.policy;
    	      this.principal = defaults.principal;
    	      this.revisionId = defaults.revisionId;
    	      this.statementId = defaults.statementId;
    	      this.versionNumber = defaults.versionNumber;
        }

        public Builder action(@Nullable Output<String> action) {
            this.action = action;
            return this;
        }
        public Builder action(@Nullable String action) {
            this.action = Codegen.ofNullable(action);
            return this;
        }
        public Builder layerName(@Nullable Output<String> layerName) {
            this.layerName = layerName;
            return this;
        }
        public Builder layerName(@Nullable String layerName) {
            this.layerName = Codegen.ofNullable(layerName);
            return this;
        }
        public Builder organizationId(@Nullable Output<String> organizationId) {
            this.organizationId = organizationId;
            return this;
        }
        public Builder organizationId(@Nullable String organizationId) {
            this.organizationId = Codegen.ofNullable(organizationId);
            return this;
        }
        public Builder policy(@Nullable Output<String> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable String policy) {
            this.policy = Codegen.ofNullable(policy);
            return this;
        }
        public Builder principal(@Nullable Output<String> principal) {
            this.principal = principal;
            return this;
        }
        public Builder principal(@Nullable String principal) {
            this.principal = Codegen.ofNullable(principal);
            return this;
        }
        public Builder revisionId(@Nullable Output<String> revisionId) {
            this.revisionId = revisionId;
            return this;
        }
        public Builder revisionId(@Nullable String revisionId) {
            this.revisionId = Codegen.ofNullable(revisionId);
            return this;
        }
        public Builder statementId(@Nullable Output<String> statementId) {
            this.statementId = statementId;
            return this;
        }
        public Builder statementId(@Nullable String statementId) {
            this.statementId = Codegen.ofNullable(statementId);
            return this;
        }
        public Builder versionNumber(@Nullable Output<Integer> versionNumber) {
            this.versionNumber = versionNumber;
            return this;
        }
        public Builder versionNumber(@Nullable Integer versionNumber) {
            this.versionNumber = Codegen.ofNullable(versionNumber);
            return this;
        }        public LayerVersionPermissionState build() {
            return new LayerVersionPermissionState(action, layerName, organizationId, policy, principal, revisionId, statementId, versionNumber);
        }
    }
}
