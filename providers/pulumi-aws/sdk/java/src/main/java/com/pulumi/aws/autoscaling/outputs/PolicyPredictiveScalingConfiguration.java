// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.autoscaling.outputs;

import com.pulumi.aws.autoscaling.outputs.PolicyPredictiveScalingConfigurationMetricSpecification;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PolicyPredictiveScalingConfiguration {
    /**
     * @return Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are `HonorMaxCapacity` or `IncreaseMaxCapacity`. Default is `HonorMaxCapacity`.
     * 
     */
    private final @Nullable String maxCapacityBreachBehavior;
    /**
     * @return The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is `0` to `100`. If set to `0`, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
     * 
     */
    private final @Nullable String maxCapacityBuffer;
    /**
     * @return This structure includes the metrics and target utilization to use for predictive scaling.
     * 
     */
    private final PolicyPredictiveScalingConfigurationMetricSpecification metricSpecification;
    /**
     * @return The predictive scaling mode. Valid values are `ForecastAndScale` and `ForecastOnly`. Default is `ForecastOnly`.
     * 
     */
    private final @Nullable String mode;
    /**
     * @return The amount of time, in seconds, by which the instance launch time can be advanced. Minimum is `0`.
     * 
     */
    private final @Nullable String schedulingBufferTime;

    @CustomType.Constructor
    private PolicyPredictiveScalingConfiguration(
        @CustomType.Parameter("maxCapacityBreachBehavior") @Nullable String maxCapacityBreachBehavior,
        @CustomType.Parameter("maxCapacityBuffer") @Nullable String maxCapacityBuffer,
        @CustomType.Parameter("metricSpecification") PolicyPredictiveScalingConfigurationMetricSpecification metricSpecification,
        @CustomType.Parameter("mode") @Nullable String mode,
        @CustomType.Parameter("schedulingBufferTime") @Nullable String schedulingBufferTime) {
        this.maxCapacityBreachBehavior = maxCapacityBreachBehavior;
        this.maxCapacityBuffer = maxCapacityBuffer;
        this.metricSpecification = metricSpecification;
        this.mode = mode;
        this.schedulingBufferTime = schedulingBufferTime;
    }

    /**
     * @return Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are `HonorMaxCapacity` or `IncreaseMaxCapacity`. Default is `HonorMaxCapacity`.
     * 
     */
    public Optional<String> maxCapacityBreachBehavior() {
        return Optional.ofNullable(this.maxCapacityBreachBehavior);
    }
    /**
     * @return The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is `0` to `100`. If set to `0`, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
     * 
     */
    public Optional<String> maxCapacityBuffer() {
        return Optional.ofNullable(this.maxCapacityBuffer);
    }
    /**
     * @return This structure includes the metrics and target utilization to use for predictive scaling.
     * 
     */
    public PolicyPredictiveScalingConfigurationMetricSpecification metricSpecification() {
        return this.metricSpecification;
    }
    /**
     * @return The predictive scaling mode. Valid values are `ForecastAndScale` and `ForecastOnly`. Default is `ForecastOnly`.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return The amount of time, in seconds, by which the instance launch time can be advanced. Minimum is `0`.
     * 
     */
    public Optional<String> schedulingBufferTime() {
        return Optional.ofNullable(this.schedulingBufferTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyPredictiveScalingConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String maxCapacityBreachBehavior;
        private @Nullable String maxCapacityBuffer;
        private PolicyPredictiveScalingConfigurationMetricSpecification metricSpecification;
        private @Nullable String mode;
        private @Nullable String schedulingBufferTime;

        public Builder() {
    	      // Empty
        }

        public Builder(PolicyPredictiveScalingConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxCapacityBreachBehavior = defaults.maxCapacityBreachBehavior;
    	      this.maxCapacityBuffer = defaults.maxCapacityBuffer;
    	      this.metricSpecification = defaults.metricSpecification;
    	      this.mode = defaults.mode;
    	      this.schedulingBufferTime = defaults.schedulingBufferTime;
        }

        public Builder maxCapacityBreachBehavior(@Nullable String maxCapacityBreachBehavior) {
            this.maxCapacityBreachBehavior = maxCapacityBreachBehavior;
            return this;
        }
        public Builder maxCapacityBuffer(@Nullable String maxCapacityBuffer) {
            this.maxCapacityBuffer = maxCapacityBuffer;
            return this;
        }
        public Builder metricSpecification(PolicyPredictiveScalingConfigurationMetricSpecification metricSpecification) {
            this.metricSpecification = Objects.requireNonNull(metricSpecification);
            return this;
        }
        public Builder mode(@Nullable String mode) {
            this.mode = mode;
            return this;
        }
        public Builder schedulingBufferTime(@Nullable String schedulingBufferTime) {
            this.schedulingBufferTime = schedulingBufferTime;
            return this;
        }        public PolicyPredictiveScalingConfiguration build() {
            return new PolicyPredictiveScalingConfiguration(maxCapacityBreachBehavior, maxCapacityBuffer, metricSpecification, mode, schedulingBufferTime);
        }
    }
}
