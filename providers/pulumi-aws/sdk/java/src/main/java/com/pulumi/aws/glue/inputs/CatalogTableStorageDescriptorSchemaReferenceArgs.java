// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.aws.glue.inputs.CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CatalogTableStorageDescriptorSchemaReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogTableStorageDescriptorSchemaReferenceArgs Empty = new CatalogTableStorageDescriptorSchemaReferenceArgs();

    /**
     * Configuration block that contains schema identity fields. Either this or the `schema_version_id` has to be provided. See `schema_id` below.
     * 
     */
    @Import(name="schemaId")
      private final @Nullable Output<CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs> schemaId;

    public Output<CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs> schemaId() {
        return this.schemaId == null ? Codegen.empty() : this.schemaId;
    }

    /**
     * Unique ID assigned to a version of the schema. Either this or the `schema_id` has to be provided.
     * 
     */
    @Import(name="schemaVersionId")
      private final @Nullable Output<String> schemaVersionId;

    public Output<String> schemaVersionId() {
        return this.schemaVersionId == null ? Codegen.empty() : this.schemaVersionId;
    }

    /**
     * Version number of the schema.
     * 
     */
    @Import(name="schemaVersionNumber", required=true)
      private final Output<Integer> schemaVersionNumber;

    public Output<Integer> schemaVersionNumber() {
        return this.schemaVersionNumber;
    }

    public CatalogTableStorageDescriptorSchemaReferenceArgs(
        @Nullable Output<CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs> schemaId,
        @Nullable Output<String> schemaVersionId,
        Output<Integer> schemaVersionNumber) {
        this.schemaId = schemaId;
        this.schemaVersionId = schemaVersionId;
        this.schemaVersionNumber = Objects.requireNonNull(schemaVersionNumber, "expected parameter 'schemaVersionNumber' to be non-null");
    }

    private CatalogTableStorageDescriptorSchemaReferenceArgs() {
        this.schemaId = Codegen.empty();
        this.schemaVersionId = Codegen.empty();
        this.schemaVersionNumber = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CatalogTableStorageDescriptorSchemaReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs> schemaId;
        private @Nullable Output<String> schemaVersionId;
        private Output<Integer> schemaVersionNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(CatalogTableStorageDescriptorSchemaReferenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.schemaId = defaults.schemaId;
    	      this.schemaVersionId = defaults.schemaVersionId;
    	      this.schemaVersionNumber = defaults.schemaVersionNumber;
        }

        public Builder schemaId(@Nullable Output<CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs> schemaId) {
            this.schemaId = schemaId;
            return this;
        }
        public Builder schemaId(@Nullable CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs schemaId) {
            this.schemaId = Codegen.ofNullable(schemaId);
            return this;
        }
        public Builder schemaVersionId(@Nullable Output<String> schemaVersionId) {
            this.schemaVersionId = schemaVersionId;
            return this;
        }
        public Builder schemaVersionId(@Nullable String schemaVersionId) {
            this.schemaVersionId = Codegen.ofNullable(schemaVersionId);
            return this;
        }
        public Builder schemaVersionNumber(Output<Integer> schemaVersionNumber) {
            this.schemaVersionNumber = Objects.requireNonNull(schemaVersionNumber);
            return this;
        }
        public Builder schemaVersionNumber(Integer schemaVersionNumber) {
            this.schemaVersionNumber = Output.of(Objects.requireNonNull(schemaVersionNumber));
            return this;
        }        public CatalogTableStorageDescriptorSchemaReferenceArgs build() {
            return new CatalogTableStorageDescriptorSchemaReferenceArgs(schemaId, schemaVersionId, schemaVersionNumber);
        }
    }
}
