// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apprunner.inputs;

import com.pulumi.aws.apprunner.inputs.ServiceEncryptionConfigurationGetArgs;
import com.pulumi.aws.apprunner.inputs.ServiceHealthCheckConfigurationGetArgs;
import com.pulumi.aws.apprunner.inputs.ServiceInstanceConfigurationGetArgs;
import com.pulumi.aws.apprunner.inputs.ServiceSourceConfigurationGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceState Empty = new ServiceState();

    /**
     * ARN of the App Runner service.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.
     * 
     */
    @Import(name="autoScalingConfigurationArn")
    private @Nullable Output<String> autoScalingConfigurationArn;

    public Optional<Output<String>> autoScalingConfigurationArn() {
        return Optional.ofNullable(this.autoScalingConfigurationArn);
    }

    /**
     * An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.
     * 
     */
    @Import(name="encryptionConfiguration")
    private @Nullable Output<ServiceEncryptionConfigurationGetArgs> encryptionConfiguration;

    public Optional<Output<ServiceEncryptionConfigurationGetArgs>> encryptionConfiguration() {
        return Optional.ofNullable(this.encryptionConfiguration);
    }

    /**
     * Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.
     * 
     */
    @Import(name="healthCheckConfiguration")
    private @Nullable Output<ServiceHealthCheckConfigurationGetArgs> healthCheckConfiguration;

    public Optional<Output<ServiceHealthCheckConfigurationGetArgs>> healthCheckConfiguration() {
        return Optional.ofNullable(this.healthCheckConfiguration);
    }

    /**
     * The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.
     * 
     */
    @Import(name="instanceConfiguration")
    private @Nullable Output<ServiceInstanceConfigurationGetArgs> instanceConfiguration;

    public Optional<Output<ServiceInstanceConfigurationGetArgs>> instanceConfiguration() {
        return Optional.ofNullable(this.instanceConfiguration);
    }

    /**
     * An alphanumeric ID that App Runner generated for this service. Unique within the AWS Region.
     * 
     */
    @Import(name="serviceId")
    private @Nullable Output<String> serviceId;

    public Optional<Output<String>> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * Name of the service.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * A subdomain URL that App Runner generated for this service. You can use this URL to access your service web application.
     * 
     */
    @Import(name="serviceUrl")
    private @Nullable Output<String> serviceUrl;

    public Optional<Output<String>> serviceUrl() {
        return Optional.ofNullable(this.serviceUrl);
    }

    /**
     * The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.
     * 
     */
    @Import(name="sourceConfiguration")
    private @Nullable Output<ServiceSourceConfigurationGetArgs> sourceConfiguration;

    public Optional<Output<ServiceSourceConfigurationGetArgs>> sourceConfiguration() {
        return Optional.ofNullable(this.sourceConfiguration);
    }

    /**
     * The current state of the App Runner service.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private ServiceState() {}

    private ServiceState(ServiceState $) {
        this.arn = $.arn;
        this.autoScalingConfigurationArn = $.autoScalingConfigurationArn;
        this.encryptionConfiguration = $.encryptionConfiguration;
        this.healthCheckConfiguration = $.healthCheckConfiguration;
        this.instanceConfiguration = $.instanceConfiguration;
        this.serviceId = $.serviceId;
        this.serviceName = $.serviceName;
        this.serviceUrl = $.serviceUrl;
        this.sourceConfiguration = $.sourceConfiguration;
        this.status = $.status;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceState $;

        public Builder() {
            $ = new ServiceState();
        }

        public Builder(ServiceState defaults) {
            $ = new ServiceState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder autoScalingConfigurationArn(@Nullable Output<String> autoScalingConfigurationArn) {
            $.autoScalingConfigurationArn = autoScalingConfigurationArn;
            return this;
        }

        public Builder autoScalingConfigurationArn(String autoScalingConfigurationArn) {
            return autoScalingConfigurationArn(Output.of(autoScalingConfigurationArn));
        }

        public Builder encryptionConfiguration(@Nullable Output<ServiceEncryptionConfigurationGetArgs> encryptionConfiguration) {
            $.encryptionConfiguration = encryptionConfiguration;
            return this;
        }

        public Builder encryptionConfiguration(ServiceEncryptionConfigurationGetArgs encryptionConfiguration) {
            return encryptionConfiguration(Output.of(encryptionConfiguration));
        }

        public Builder healthCheckConfiguration(@Nullable Output<ServiceHealthCheckConfigurationGetArgs> healthCheckConfiguration) {
            $.healthCheckConfiguration = healthCheckConfiguration;
            return this;
        }

        public Builder healthCheckConfiguration(ServiceHealthCheckConfigurationGetArgs healthCheckConfiguration) {
            return healthCheckConfiguration(Output.of(healthCheckConfiguration));
        }

        public Builder instanceConfiguration(@Nullable Output<ServiceInstanceConfigurationGetArgs> instanceConfiguration) {
            $.instanceConfiguration = instanceConfiguration;
            return this;
        }

        public Builder instanceConfiguration(ServiceInstanceConfigurationGetArgs instanceConfiguration) {
            return instanceConfiguration(Output.of(instanceConfiguration));
        }

        public Builder serviceId(@Nullable Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder serviceUrl(@Nullable Output<String> serviceUrl) {
            $.serviceUrl = serviceUrl;
            return this;
        }

        public Builder serviceUrl(String serviceUrl) {
            return serviceUrl(Output.of(serviceUrl));
        }

        public Builder sourceConfiguration(@Nullable Output<ServiceSourceConfigurationGetArgs> sourceConfiguration) {
            $.sourceConfiguration = sourceConfiguration;
            return this;
        }

        public Builder sourceConfiguration(ServiceSourceConfigurationGetArgs sourceConfiguration) {
            return sourceConfiguration(Output.of(sourceConfiguration));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public ServiceState build() {
            return $;
        }
    }

}
