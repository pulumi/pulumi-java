// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventTargetRedshiftTargetGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventTargetRedshiftTargetGetArgs Empty = new EventTargetRedshiftTargetGetArgs();

    /**
     * The name of the database.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    public Output<String> database() {
        return this.database;
    }

    /**
     * The database user name.
     * 
     */
    @Import(name="dbUser")
    private @Nullable Output<String> dbUser;

    public Optional<Output<String>> dbUser() {
        return Optional.ofNullable(this.dbUser);
    }

    /**
     * The name or ARN of the secret that enables access to the database.
     * 
     */
    @Import(name="secretsManagerArn")
    private @Nullable Output<String> secretsManagerArn;

    public Optional<Output<String>> secretsManagerArn() {
        return Optional.ofNullable(this.secretsManagerArn);
    }

    /**
     * The SQL statement text to run.
     * 
     */
    @Import(name="sql")
    private @Nullable Output<String> sql;

    public Optional<Output<String>> sql() {
        return Optional.ofNullable(this.sql);
    }

    /**
     * The name of the SQL statement.
     * 
     */
    @Import(name="statementName")
    private @Nullable Output<String> statementName;

    public Optional<Output<String>> statementName() {
        return Optional.ofNullable(this.statementName);
    }

    /**
     * Indicates whether to send an event back to EventBridge after the SQL statement runs.
     * 
     */
    @Import(name="withEvent")
    private @Nullable Output<Boolean> withEvent;

    public Optional<Output<Boolean>> withEvent() {
        return Optional.ofNullable(this.withEvent);
    }

    private EventTargetRedshiftTargetGetArgs() {}

    private EventTargetRedshiftTargetGetArgs(EventTargetRedshiftTargetGetArgs $) {
        this.database = $.database;
        this.dbUser = $.dbUser;
        this.secretsManagerArn = $.secretsManagerArn;
        this.sql = $.sql;
        this.statementName = $.statementName;
        this.withEvent = $.withEvent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventTargetRedshiftTargetGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventTargetRedshiftTargetGetArgs $;

        public Builder() {
            $ = new EventTargetRedshiftTargetGetArgs();
        }

        public Builder(EventTargetRedshiftTargetGetArgs defaults) {
            $ = new EventTargetRedshiftTargetGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        public Builder database(String database) {
            return database(Output.of(database));
        }

        public Builder dbUser(@Nullable Output<String> dbUser) {
            $.dbUser = dbUser;
            return this;
        }

        public Builder dbUser(String dbUser) {
            return dbUser(Output.of(dbUser));
        }

        public Builder secretsManagerArn(@Nullable Output<String> secretsManagerArn) {
            $.secretsManagerArn = secretsManagerArn;
            return this;
        }

        public Builder secretsManagerArn(String secretsManagerArn) {
            return secretsManagerArn(Output.of(secretsManagerArn));
        }

        public Builder sql(@Nullable Output<String> sql) {
            $.sql = sql;
            return this;
        }

        public Builder sql(String sql) {
            return sql(Output.of(sql));
        }

        public Builder statementName(@Nullable Output<String> statementName) {
            $.statementName = statementName;
            return this;
        }

        public Builder statementName(String statementName) {
            return statementName(Output.of(statementName));
        }

        public Builder withEvent(@Nullable Output<Boolean> withEvent) {
            $.withEvent = withEvent;
            return this;
        }

        public Builder withEvent(Boolean withEvent) {
            return withEvent(Output.of(withEvent));
        }

        public EventTargetRedshiftTargetGetArgs build() {
            $.database = Objects.requireNonNull($.database, "expected parameter 'database' to be non-null");
            return $;
        }
    }

}
