// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.aws.ec2.inputs.AmiEbsBlockDeviceGetArgs;
import com.pulumi.aws.ec2.inputs.AmiEphemeralBlockDeviceGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AmiState extends com.pulumi.resources.ResourceArgs {

    public static final AmiState Empty = new AmiState();

    /**
     * Machine architecture for created instances. Defaults to &#34;x86_64&#34;.
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * The ARN of the AMI.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * A longer, human-readable description for the AMI.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Nested block describing an EBS block device that should be
     * attached to created instances. The structure of this block is described below.
     * 
     */
    @Import(name="ebsBlockDevices")
    private @Nullable Output<List<AmiEbsBlockDeviceGetArgs>> ebsBlockDevices;

    public Optional<Output<List<AmiEbsBlockDeviceGetArgs>>> ebsBlockDevices() {
        return Optional.ofNullable(this.ebsBlockDevices);
    }

    /**
     * Specifies whether enhanced networking with ENA is enabled. Defaults to `false`.
     * 
     */
    @Import(name="enaSupport")
    private @Nullable Output<Boolean> enaSupport;

    public Optional<Output<Boolean>> enaSupport() {
        return Optional.ofNullable(this.enaSupport);
    }

    /**
     * Nested block describing an ephemeral block device that
     * should be attached to created instances. The structure of this block is described below.
     * 
     */
    @Import(name="ephemeralBlockDevices")
    private @Nullable Output<List<AmiEphemeralBlockDeviceGetArgs>> ephemeralBlockDevices;

    public Optional<Output<List<AmiEphemeralBlockDeviceGetArgs>>> ephemeralBlockDevices() {
        return Optional.ofNullable(this.ephemeralBlockDevices);
    }

    /**
     * The hypervisor type of the image.
     * 
     */
    @Import(name="hypervisor")
    private @Nullable Output<String> hypervisor;

    public Optional<Output<String>> hypervisor() {
        return Optional.ofNullable(this.hypervisor);
    }

    /**
     * Path to an S3 object containing an image manifest, e.g., created
     * by the `ec2-upload-bundle` command in the EC2 command line tools.
     * 
     */
    @Import(name="imageLocation")
    private @Nullable Output<String> imageLocation;

    public Optional<Output<String>> imageLocation() {
        return Optional.ofNullable(this.imageLocation);
    }

    /**
     * The AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.
     * 
     */
    @Import(name="imageOwnerAlias")
    private @Nullable Output<String> imageOwnerAlias;

    public Optional<Output<String>> imageOwnerAlias() {
        return Optional.ofNullable(this.imageOwnerAlias);
    }

    /**
     * The type of image.
     * 
     */
    @Import(name="imageType")
    private @Nullable Output<String> imageType;

    public Optional<Output<String>> imageType() {
        return Optional.ofNullable(this.imageType);
    }

    /**
     * The id of the kernel image (AKI) that will be used as the paravirtual
     * kernel in created instances.
     * 
     */
    @Import(name="kernelId")
    private @Nullable Output<String> kernelId;

    public Optional<Output<String>> kernelId() {
        return Optional.ofNullable(this.kernelId);
    }

    @Import(name="manageEbsSnapshots")
    private @Nullable Output<Boolean> manageEbsSnapshots;

    public Optional<Output<Boolean>> manageEbsSnapshots() {
        return Optional.ofNullable(this.manageEbsSnapshots);
    }

    /**
     * A region-unique name for the AMI.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The AWS account ID of the image owner.
     * 
     */
    @Import(name="ownerId")
    private @Nullable Output<String> ownerId;

    public Optional<Output<String>> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }

    /**
     * This value is set to windows for Windows AMIs; otherwise, it is blank.
     * 
     */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * The platform details associated with the billing code of the AMI.
     * 
     */
    @Import(name="platformDetails")
    private @Nullable Output<String> platformDetails;

    public Optional<Output<String>> platformDetails() {
        return Optional.ofNullable(this.platformDetails);
    }

    /**
     * Indicates whether the image has public launch permissions.
     * 
     */
    @Import(name="public")
    private @Nullable Output<Boolean> public_;

    public Optional<Output<Boolean>> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * The id of an initrd image (ARI) that will be used when booting the
     * created instances.
     * 
     */
    @Import(name="ramdiskId")
    private @Nullable Output<String> ramdiskId;

    public Optional<Output<String>> ramdiskId() {
        return Optional.ofNullable(this.ramdiskId);
    }

    /**
     * The name of the root device (for example, `/dev/sda1`, or `/dev/xvda`).
     * 
     */
    @Import(name="rootDeviceName")
    private @Nullable Output<String> rootDeviceName;

    public Optional<Output<String>> rootDeviceName() {
        return Optional.ofNullable(this.rootDeviceName);
    }

    /**
     * The Snapshot ID for the root volume (for EBS-backed AMIs)
     * 
     */
    @Import(name="rootSnapshotId")
    private @Nullable Output<String> rootSnapshotId;

    public Optional<Output<String>> rootSnapshotId() {
        return Optional.ofNullable(this.rootSnapshotId);
    }

    /**
     * When set to &#34;simple&#34; (the default), enables enhanced networking
     * for created instances. No other value is supported at this time.
     * 
     */
    @Import(name="sriovNetSupport")
    private @Nullable Output<String> sriovNetSupport;

    public Optional<Output<String>> sriovNetSupport() {
        return Optional.ofNullable(this.sriovNetSupport);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The operation of the Amazon EC2 instance and the billing code that is associated with the AMI.
     * 
     */
    @Import(name="usageOperation")
    private @Nullable Output<String> usageOperation;

    public Optional<Output<String>> usageOperation() {
        return Optional.ofNullable(this.usageOperation);
    }

    /**
     * Keyword to choose what virtualization mode created instances
     * will use. Can be either &#34;paravirtual&#34; (the default) or &#34;hvm&#34;. The choice of virtualization type
     * changes the set of further arguments that are required, as described below.
     * 
     */
    @Import(name="virtualizationType")
    private @Nullable Output<String> virtualizationType;

    public Optional<Output<String>> virtualizationType() {
        return Optional.ofNullable(this.virtualizationType);
    }

    private AmiState() {}

    private AmiState(AmiState $) {
        this.architecture = $.architecture;
        this.arn = $.arn;
        this.description = $.description;
        this.ebsBlockDevices = $.ebsBlockDevices;
        this.enaSupport = $.enaSupport;
        this.ephemeralBlockDevices = $.ephemeralBlockDevices;
        this.hypervisor = $.hypervisor;
        this.imageLocation = $.imageLocation;
        this.imageOwnerAlias = $.imageOwnerAlias;
        this.imageType = $.imageType;
        this.kernelId = $.kernelId;
        this.manageEbsSnapshots = $.manageEbsSnapshots;
        this.name = $.name;
        this.ownerId = $.ownerId;
        this.platform = $.platform;
        this.platformDetails = $.platformDetails;
        this.public_ = $.public_;
        this.ramdiskId = $.ramdiskId;
        this.rootDeviceName = $.rootDeviceName;
        this.rootSnapshotId = $.rootSnapshotId;
        this.sriovNetSupport = $.sriovNetSupport;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.usageOperation = $.usageOperation;
        this.virtualizationType = $.virtualizationType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AmiState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AmiState $;

        public Builder() {
            $ = new AmiState();
        }

        public Builder(AmiState defaults) {
            $ = new AmiState(Objects.requireNonNull(defaults));
        }

        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder ebsBlockDevices(@Nullable Output<List<AmiEbsBlockDeviceGetArgs>> ebsBlockDevices) {
            $.ebsBlockDevices = ebsBlockDevices;
            return this;
        }

        public Builder ebsBlockDevices(List<AmiEbsBlockDeviceGetArgs> ebsBlockDevices) {
            return ebsBlockDevices(Output.of(ebsBlockDevices));
        }

        public Builder ebsBlockDevices(AmiEbsBlockDeviceGetArgs... ebsBlockDevices) {
            return ebsBlockDevices(List.of(ebsBlockDevices));
        }

        public Builder enaSupport(@Nullable Output<Boolean> enaSupport) {
            $.enaSupport = enaSupport;
            return this;
        }

        public Builder enaSupport(Boolean enaSupport) {
            return enaSupport(Output.of(enaSupport));
        }

        public Builder ephemeralBlockDevices(@Nullable Output<List<AmiEphemeralBlockDeviceGetArgs>> ephemeralBlockDevices) {
            $.ephemeralBlockDevices = ephemeralBlockDevices;
            return this;
        }

        public Builder ephemeralBlockDevices(List<AmiEphemeralBlockDeviceGetArgs> ephemeralBlockDevices) {
            return ephemeralBlockDevices(Output.of(ephemeralBlockDevices));
        }

        public Builder ephemeralBlockDevices(AmiEphemeralBlockDeviceGetArgs... ephemeralBlockDevices) {
            return ephemeralBlockDevices(List.of(ephemeralBlockDevices));
        }

        public Builder hypervisor(@Nullable Output<String> hypervisor) {
            $.hypervisor = hypervisor;
            return this;
        }

        public Builder hypervisor(String hypervisor) {
            return hypervisor(Output.of(hypervisor));
        }

        public Builder imageLocation(@Nullable Output<String> imageLocation) {
            $.imageLocation = imageLocation;
            return this;
        }

        public Builder imageLocation(String imageLocation) {
            return imageLocation(Output.of(imageLocation));
        }

        public Builder imageOwnerAlias(@Nullable Output<String> imageOwnerAlias) {
            $.imageOwnerAlias = imageOwnerAlias;
            return this;
        }

        public Builder imageOwnerAlias(String imageOwnerAlias) {
            return imageOwnerAlias(Output.of(imageOwnerAlias));
        }

        public Builder imageType(@Nullable Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        public Builder kernelId(@Nullable Output<String> kernelId) {
            $.kernelId = kernelId;
            return this;
        }

        public Builder kernelId(String kernelId) {
            return kernelId(Output.of(kernelId));
        }

        public Builder manageEbsSnapshots(@Nullable Output<Boolean> manageEbsSnapshots) {
            $.manageEbsSnapshots = manageEbsSnapshots;
            return this;
        }

        public Builder manageEbsSnapshots(Boolean manageEbsSnapshots) {
            return manageEbsSnapshots(Output.of(manageEbsSnapshots));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder ownerId(@Nullable Output<String> ownerId) {
            $.ownerId = ownerId;
            return this;
        }

        public Builder ownerId(String ownerId) {
            return ownerId(Output.of(ownerId));
        }

        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        public Builder platformDetails(@Nullable Output<String> platformDetails) {
            $.platformDetails = platformDetails;
            return this;
        }

        public Builder platformDetails(String platformDetails) {
            return platformDetails(Output.of(platformDetails));
        }

        public Builder public_(@Nullable Output<Boolean> public_) {
            $.public_ = public_;
            return this;
        }

        public Builder public_(Boolean public_) {
            return public_(Output.of(public_));
        }

        public Builder ramdiskId(@Nullable Output<String> ramdiskId) {
            $.ramdiskId = ramdiskId;
            return this;
        }

        public Builder ramdiskId(String ramdiskId) {
            return ramdiskId(Output.of(ramdiskId));
        }

        public Builder rootDeviceName(@Nullable Output<String> rootDeviceName) {
            $.rootDeviceName = rootDeviceName;
            return this;
        }

        public Builder rootDeviceName(String rootDeviceName) {
            return rootDeviceName(Output.of(rootDeviceName));
        }

        public Builder rootSnapshotId(@Nullable Output<String> rootSnapshotId) {
            $.rootSnapshotId = rootSnapshotId;
            return this;
        }

        public Builder rootSnapshotId(String rootSnapshotId) {
            return rootSnapshotId(Output.of(rootSnapshotId));
        }

        public Builder sriovNetSupport(@Nullable Output<String> sriovNetSupport) {
            $.sriovNetSupport = sriovNetSupport;
            return this;
        }

        public Builder sriovNetSupport(String sriovNetSupport) {
            return sriovNetSupport(Output.of(sriovNetSupport));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder usageOperation(@Nullable Output<String> usageOperation) {
            $.usageOperation = usageOperation;
            return this;
        }

        public Builder usageOperation(String usageOperation) {
            return usageOperation(Output.of(usageOperation));
        }

        public Builder virtualizationType(@Nullable Output<String> virtualizationType) {
            $.virtualizationType = virtualizationType;
            return this;
        }

        public Builder virtualizationType(String virtualizationType) {
            return virtualizationType(Output.of(virtualizationType));
        }

        public AmiState build() {
            return $;
        }
    }

}
