// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ebs.inputs;

import com.pulumi.aws.ebs.inputs.SnapshotImportDiskContainerUserBucketGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotImportDiskContainerGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotImportDiskContainerGetArgs Empty = new SnapshotImportDiskContainerGetArgs();

    /**
     * The description of the disk image being imported.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The format of the disk image being imported. One of `VHD` or `VMDK`.
     * 
     */
    @Import(name="format", required=true)
    private Output<String> format;

    public Output<String> format() {
        return this.format;
    }

    /**
     * The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..). One of `url` or `user_bucket` must be set.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * The Amazon S3 bucket for the disk image. One of `url` or `user_bucket` must be set. Detailed below.
     * 
     */
    @Import(name="userBucket")
    private @Nullable Output<SnapshotImportDiskContainerUserBucketGetArgs> userBucket;

    public Optional<Output<SnapshotImportDiskContainerUserBucketGetArgs>> userBucket() {
        return Optional.ofNullable(this.userBucket);
    }

    private SnapshotImportDiskContainerGetArgs() {}

    private SnapshotImportDiskContainerGetArgs(SnapshotImportDiskContainerGetArgs $) {
        this.description = $.description;
        this.format = $.format;
        this.url = $.url;
        this.userBucket = $.userBucket;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotImportDiskContainerGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotImportDiskContainerGetArgs $;

        public Builder() {
            $ = new SnapshotImportDiskContainerGetArgs();
        }

        public Builder(SnapshotImportDiskContainerGetArgs defaults) {
            $ = new SnapshotImportDiskContainerGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder format(Output<String> format) {
            $.format = format;
            return this;
        }

        public Builder format(String format) {
            return format(Output.of(format));
        }

        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        public Builder url(String url) {
            return url(Output.of(url));
        }

        public Builder userBucket(@Nullable Output<SnapshotImportDiskContainerUserBucketGetArgs> userBucket) {
            $.userBucket = userBucket;
            return this;
        }

        public Builder userBucket(SnapshotImportDiskContainerUserBucketGetArgs userBucket) {
            return userBucket(Output.of(userBucket));
        }

        public SnapshotImportDiskContainerGetArgs build() {
            $.format = Objects.requireNonNull($.format, "expected parameter 'format' to be non-null");
            return $;
        }
    }

}
