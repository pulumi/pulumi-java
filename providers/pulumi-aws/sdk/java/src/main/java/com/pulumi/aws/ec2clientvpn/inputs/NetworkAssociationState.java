// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2clientvpn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class NetworkAssociationState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkAssociationState Empty = new NetworkAssociationState();

    /**
     * The unique ID of the target network association.
     * 
     */
    @Import(name="associationId")
      private final @Nullable Output<String> associationId;

    public Output<String> associationId() {
        return this.associationId == null ? Codegen.empty() : this.associationId;
    }

    /**
     * The ID of the Client VPN endpoint.
     * 
     */
    @Import(name="clientVpnEndpointId")
      private final @Nullable Output<String> clientVpnEndpointId;

    public Output<String> clientVpnEndpointId() {
        return this.clientVpnEndpointId == null ? Codegen.empty() : this.clientVpnEndpointId;
    }

    /**
     * A list of up to five custom security groups to apply to the target network. If not specified, the VPC&#39;s default security group is assigned.
     * 
     */
    @Import(name="securityGroups")
      private final @Nullable Output<List<String>> securityGroups;

    public Output<List<String>> securityGroups() {
        return this.securityGroups == null ? Codegen.empty() : this.securityGroups;
    }

    /**
     * The current state of the target network association.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * The ID of the subnet to associate with the Client VPN endpoint.
     * 
     */
    @Import(name="subnetId")
      private final @Nullable Output<String> subnetId;

    public Output<String> subnetId() {
        return this.subnetId == null ? Codegen.empty() : this.subnetId;
    }

    /**
     * The ID of the VPC in which the target subnet is located.
     * 
     */
    @Import(name="vpcId")
      private final @Nullable Output<String> vpcId;

    public Output<String> vpcId() {
        return this.vpcId == null ? Codegen.empty() : this.vpcId;
    }

    public NetworkAssociationState(
        @Nullable Output<String> associationId,
        @Nullable Output<String> clientVpnEndpointId,
        @Nullable Output<List<String>> securityGroups,
        @Nullable Output<String> status,
        @Nullable Output<String> subnetId,
        @Nullable Output<String> vpcId) {
        this.associationId = associationId;
        this.clientVpnEndpointId = clientVpnEndpointId;
        this.securityGroups = securityGroups;
        this.status = status;
        this.subnetId = subnetId;
        this.vpcId = vpcId;
    }

    private NetworkAssociationState() {
        this.associationId = Codegen.empty();
        this.clientVpnEndpointId = Codegen.empty();
        this.securityGroups = Codegen.empty();
        this.status = Codegen.empty();
        this.subnetId = Codegen.empty();
        this.vpcId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> associationId;
        private @Nullable Output<String> clientVpnEndpointId;
        private @Nullable Output<List<String>> securityGroups;
        private @Nullable Output<String> status;
        private @Nullable Output<String> subnetId;
        private @Nullable Output<String> vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkAssociationState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associationId = defaults.associationId;
    	      this.clientVpnEndpointId = defaults.clientVpnEndpointId;
    	      this.securityGroups = defaults.securityGroups;
    	      this.status = defaults.status;
    	      this.subnetId = defaults.subnetId;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder associationId(@Nullable Output<String> associationId) {
            this.associationId = associationId;
            return this;
        }
        public Builder associationId(@Nullable String associationId) {
            this.associationId = Codegen.ofNullable(associationId);
            return this;
        }
        public Builder clientVpnEndpointId(@Nullable Output<String> clientVpnEndpointId) {
            this.clientVpnEndpointId = clientVpnEndpointId;
            return this;
        }
        public Builder clientVpnEndpointId(@Nullable String clientVpnEndpointId) {
            this.clientVpnEndpointId = Codegen.ofNullable(clientVpnEndpointId);
            return this;
        }
        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }
        public Builder securityGroups(@Nullable List<String> securityGroups) {
            this.securityGroups = Codegen.ofNullable(securityGroups);
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder subnetId(@Nullable Output<String> subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = Codegen.ofNullable(subnetId);
            return this;
        }
        public Builder vpcId(@Nullable Output<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = Codegen.ofNullable(vpcId);
            return this;
        }        public NetworkAssociationState build() {
            return new NetworkAssociationState(associationId, clientVpnEndpointId, securityGroups, status, subnetId, vpcId);
        }
    }
}
