// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.aws.glue.inputs.CatalogTableStorageDescriptorSchemaReferenceSchemaIdGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CatalogTableStorageDescriptorSchemaReferenceGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogTableStorageDescriptorSchemaReferenceGetArgs Empty = new CatalogTableStorageDescriptorSchemaReferenceGetArgs();

    /**
     * Configuration block that contains schema identity fields. Either this or the `schema_version_id` has to be provided. See `schema_id` below.
     * 
     */
    @Import(name="schemaId")
    private @Nullable Output<CatalogTableStorageDescriptorSchemaReferenceSchemaIdGetArgs> schemaId;

    /**
     * @return Configuration block that contains schema identity fields. Either this or the `schema_version_id` has to be provided. See `schema_id` below.
     * 
     */
    public Optional<Output<CatalogTableStorageDescriptorSchemaReferenceSchemaIdGetArgs>> schemaId() {
        return Optional.ofNullable(this.schemaId);
    }

    /**
     * Unique ID assigned to a version of the schema. Either this or the `schema_id` has to be provided.
     * 
     */
    @Import(name="schemaVersionId")
    private @Nullable Output<String> schemaVersionId;

    /**
     * @return Unique ID assigned to a version of the schema. Either this or the `schema_id` has to be provided.
     * 
     */
    public Optional<Output<String>> schemaVersionId() {
        return Optional.ofNullable(this.schemaVersionId);
    }

    /**
     * Version number of the schema.
     * 
     */
    @Import(name="schemaVersionNumber", required=true)
    private Output<Integer> schemaVersionNumber;

    /**
     * @return Version number of the schema.
     * 
     */
    public Output<Integer> schemaVersionNumber() {
        return this.schemaVersionNumber;
    }

    private CatalogTableStorageDescriptorSchemaReferenceGetArgs() {}

    private CatalogTableStorageDescriptorSchemaReferenceGetArgs(CatalogTableStorageDescriptorSchemaReferenceGetArgs $) {
        this.schemaId = $.schemaId;
        this.schemaVersionId = $.schemaVersionId;
        this.schemaVersionNumber = $.schemaVersionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogTableStorageDescriptorSchemaReferenceGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogTableStorageDescriptorSchemaReferenceGetArgs $;

        public Builder() {
            $ = new CatalogTableStorageDescriptorSchemaReferenceGetArgs();
        }

        public Builder(CatalogTableStorageDescriptorSchemaReferenceGetArgs defaults) {
            $ = new CatalogTableStorageDescriptorSchemaReferenceGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param schemaId Configuration block that contains schema identity fields. Either this or the `schema_version_id` has to be provided. See `schema_id` below.
         * 
         * @return builder
         * 
         */
        public Builder schemaId(@Nullable Output<CatalogTableStorageDescriptorSchemaReferenceSchemaIdGetArgs> schemaId) {
            $.schemaId = schemaId;
            return this;
        }

        /**
         * @param schemaId Configuration block that contains schema identity fields. Either this or the `schema_version_id` has to be provided. See `schema_id` below.
         * 
         * @return builder
         * 
         */
        public Builder schemaId(CatalogTableStorageDescriptorSchemaReferenceSchemaIdGetArgs schemaId) {
            return schemaId(Output.of(schemaId));
        }

        /**
         * @param schemaVersionId Unique ID assigned to a version of the schema. Either this or the `schema_id` has to be provided.
         * 
         * @return builder
         * 
         */
        public Builder schemaVersionId(@Nullable Output<String> schemaVersionId) {
            $.schemaVersionId = schemaVersionId;
            return this;
        }

        /**
         * @param schemaVersionId Unique ID assigned to a version of the schema. Either this or the `schema_id` has to be provided.
         * 
         * @return builder
         * 
         */
        public Builder schemaVersionId(String schemaVersionId) {
            return schemaVersionId(Output.of(schemaVersionId));
        }

        /**
         * @param schemaVersionNumber Version number of the schema.
         * 
         * @return builder
         * 
         */
        public Builder schemaVersionNumber(Output<Integer> schemaVersionNumber) {
            $.schemaVersionNumber = schemaVersionNumber;
            return this;
        }

        /**
         * @param schemaVersionNumber Version number of the schema.
         * 
         * @return builder
         * 
         */
        public Builder schemaVersionNumber(Integer schemaVersionNumber) {
            return schemaVersionNumber(Output.of(schemaVersionNumber));
        }

        public CatalogTableStorageDescriptorSchemaReferenceGetArgs build() {
            $.schemaVersionNumber = Objects.requireNonNull($.schemaVersionNumber, "expected parameter 'schemaVersionNumber' to be non-null");
            return $;
        }
    }

}
