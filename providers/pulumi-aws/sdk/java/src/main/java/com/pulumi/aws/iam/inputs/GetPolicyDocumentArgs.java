// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iam.inputs;

import com.pulumi.aws.iam.inputs.GetPolicyDocumentStatement;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicyDocumentArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPolicyDocumentArgs Empty = new GetPolicyDocumentArgs();

    /**
     * IAM policy document whose statements with non-blank `sid`s will override statements with the same `sid` from documents assigned to the `source_json`, `source_policy_documents`, and `override_policy_documents` arguments. Non-overriding statements will be added to the exported document.
     * 
     */
    @Import(name="overrideJson")
    private @Nullable String overrideJson;

    public Optional<String> overrideJson() {
        return Optional.ofNullable(this.overrideJson);
    }

    /**
     * List of IAM policy documents that are merged together into the exported document. In merging, statements with non-blank `sid`s will override statements with the same `sid` from earlier documents in the list. Statements with non-blank `sid`s will also override statements with the same `sid` from documents provided in the `source_json` and `source_policy_documents` arguments.  Non-overriding statements will be added to the exported document.
     * 
     */
    @Import(name="overridePolicyDocuments")
    private @Nullable List<String> overridePolicyDocuments;

    public Optional<List<String>> overridePolicyDocuments() {
        return Optional.ofNullable(this.overridePolicyDocuments);
    }

    /**
     * ID for the policy document.
     * 
     */
    @Import(name="policyId")
    private @Nullable String policyId;

    public Optional<String> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * IAM policy document used as a base for the exported policy document. Statements with the same `sid` from documents assigned to the `override_json` and `override_policy_documents` arguments will override source statements.
     * 
     */
    @Import(name="sourceJson")
    private @Nullable String sourceJson;

    public Optional<String> sourceJson() {
        return Optional.ofNullable(this.sourceJson);
    }

    /**
     * List of IAM policy documents that are merged together into the exported document. Statements defined in `source_policy_documents` or `source_json` must have unique `sid`s. Statements with the same `sid` from documents assigned to the `override_json` and `override_policy_documents` arguments will override source statements.
     * 
     */
    @Import(name="sourcePolicyDocuments")
    private @Nullable List<String> sourcePolicyDocuments;

    public Optional<List<String>> sourcePolicyDocuments() {
        return Optional.ofNullable(this.sourcePolicyDocuments);
    }

    /**
     * Configuration block for a policy statement. Detailed below.
     * 
     */
    @Import(name="statements")
    private @Nullable List<GetPolicyDocumentStatement> statements;

    public Optional<List<GetPolicyDocumentStatement>> statements() {
        return Optional.ofNullable(this.statements);
    }

    /**
     * IAM policy document version. Valid values are `2008-10-17` and `2012-10-17`. Defaults to `2012-10-17`. For more information, see the [AWS IAM User Guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_version.html).
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private GetPolicyDocumentArgs() {}

    private GetPolicyDocumentArgs(GetPolicyDocumentArgs $) {
        this.overrideJson = $.overrideJson;
        this.overridePolicyDocuments = $.overridePolicyDocuments;
        this.policyId = $.policyId;
        this.sourceJson = $.sourceJson;
        this.sourcePolicyDocuments = $.sourcePolicyDocuments;
        this.statements = $.statements;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyDocumentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyDocumentArgs $;

        public Builder() {
            $ = new GetPolicyDocumentArgs();
        }

        public Builder(GetPolicyDocumentArgs defaults) {
            $ = new GetPolicyDocumentArgs(Objects.requireNonNull(defaults));
        }

        public Builder overrideJson(@Nullable String overrideJson) {
            $.overrideJson = overrideJson;
            return this;
        }

        public Builder overridePolicyDocuments(@Nullable List<String> overridePolicyDocuments) {
            $.overridePolicyDocuments = overridePolicyDocuments;
            return this;
        }

        public Builder overridePolicyDocuments(String... overridePolicyDocuments) {
            return overridePolicyDocuments(List.of(overridePolicyDocuments));
        }

        public Builder policyId(@Nullable String policyId) {
            $.policyId = policyId;
            return this;
        }

        public Builder sourceJson(@Nullable String sourceJson) {
            $.sourceJson = sourceJson;
            return this;
        }

        public Builder sourcePolicyDocuments(@Nullable List<String> sourcePolicyDocuments) {
            $.sourcePolicyDocuments = sourcePolicyDocuments;
            return this;
        }

        public Builder sourcePolicyDocuments(String... sourcePolicyDocuments) {
            return sourcePolicyDocuments(List.of(sourcePolicyDocuments));
        }

        public Builder statements(@Nullable List<GetPolicyDocumentStatement> statements) {
            $.statements = statements;
            return this;
        }

        public Builder statements(GetPolicyDocumentStatement... statements) {
            return statements(List.of(statements));
        }

        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public GetPolicyDocumentArgs build() {
            return $;
        }
    }

}
