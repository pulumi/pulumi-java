// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.autoscalingplans.inputs;

import com.pulumi.aws.autoscalingplans.inputs.ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs;
import com.pulumi.aws.autoscalingplans.inputs.ScalingPlanScalingInstructionPredefinedLoadMetricSpecificationArgs;
import com.pulumi.aws.autoscalingplans.inputs.ScalingPlanScalingInstructionTargetTrackingConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScalingPlanScalingInstructionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScalingPlanScalingInstructionArgs Empty = new ScalingPlanScalingInstructionArgs();

    /**
     * The customized load metric to use for predictive scaling. You must specify either `customized_load_metric_specification` or `predefined_load_metric_specification` when configuring predictive scaling.
     * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_CustomizedLoadMetricSpecification.html).
     * 
     */
    @Import(name="customizedLoadMetricSpecification")
      private final @Nullable Output<ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs> customizedLoadMetricSpecification;

    public Output<ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs> customizedLoadMetricSpecification() {
        return this.customizedLoadMetricSpecification == null ? Codegen.empty() : this.customizedLoadMetricSpecification;
    }

    /**
     * Boolean controlling whether dynamic scaling by AWS Auto Scaling is disabled. Defaults to `false`.
     * 
     */
    @Import(name="disableDynamicScaling")
      private final @Nullable Output<Boolean> disableDynamicScaling;

    public Output<Boolean> disableDynamicScaling() {
        return this.disableDynamicScaling == null ? Codegen.empty() : this.disableDynamicScaling;
    }

    /**
     * The maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for `predictive_scaling_max_capacity_behavior`.
     * 
     */
    @Import(name="maxCapacity", required=true)
      private final Output<Integer> maxCapacity;

    public Output<Integer> maxCapacity() {
        return this.maxCapacity;
    }

    /**
     * The minimum capacity of the resource.
     * 
     */
    @Import(name="minCapacity", required=true)
      private final Output<Integer> minCapacity;

    public Output<Integer> minCapacity() {
        return this.minCapacity;
    }

    /**
     * The predefined load metric to use for predictive scaling. You must specify either `predefined_load_metric_specification` or `customized_load_metric_specification` when configuring predictive scaling.
     * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_PredefinedLoadMetricSpecification.html).
     * 
     */
    @Import(name="predefinedLoadMetricSpecification")
      private final @Nullable Output<ScalingPlanScalingInstructionPredefinedLoadMetricSpecificationArgs> predefinedLoadMetricSpecification;

    public Output<ScalingPlanScalingInstructionPredefinedLoadMetricSpecificationArgs> predefinedLoadMetricSpecification() {
        return this.predefinedLoadMetricSpecification == null ? Codegen.empty() : this.predefinedLoadMetricSpecification;
    }

    /**
     * Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource.
     * Valid values: `SetForecastCapacityToMaxCapacity`, `SetMaxCapacityAboveForecastCapacity`, `SetMaxCapacityToForecastCapacity`.
     * 
     */
    @Import(name="predictiveScalingMaxCapacityBehavior")
      private final @Nullable Output<String> predictiveScalingMaxCapacityBehavior;

    public Output<String> predictiveScalingMaxCapacityBehavior() {
        return this.predictiveScalingMaxCapacityBehavior == null ? Codegen.empty() : this.predictiveScalingMaxCapacityBehavior;
    }

    /**
     * The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity.
     * 
     */
    @Import(name="predictiveScalingMaxCapacityBuffer")
      private final @Nullable Output<Integer> predictiveScalingMaxCapacityBuffer;

    public Output<Integer> predictiveScalingMaxCapacityBuffer() {
        return this.predictiveScalingMaxCapacityBuffer == null ? Codegen.empty() : this.predictiveScalingMaxCapacityBuffer;
    }

    /**
     * The predictive scaling mode. Valid values: `ForecastAndScale`, `ForecastOnly`.
     * 
     */
    @Import(name="predictiveScalingMode")
      private final @Nullable Output<String> predictiveScalingMode;

    public Output<String> predictiveScalingMode() {
        return this.predictiveScalingMode == null ? Codegen.empty() : this.predictiveScalingMode;
    }

    /**
     * The ID of the resource. This string consists of the resource type and unique identifier.
     * 
     */
    @Import(name="resourceId", required=true)
      private final Output<String> resourceId;

    public Output<String> resourceId() {
        return this.resourceId;
    }

    /**
     * The scalable dimension associated with the resource. Valid values: `autoscaling:autoScalingGroup:DesiredCapacity`, `dynamodb:index:ReadCapacityUnits`, `dynamodb:index:WriteCapacityUnits`, `dynamodb:table:ReadCapacityUnits`, `dynamodb:table:WriteCapacityUnits`, `ecs:service:DesiredCount`, `ec2:spot-fleet-request:TargetCapacity`, `rds:cluster:ReadReplicaCount`.
     * 
     */
    @Import(name="scalableDimension", required=true)
      private final Output<String> scalableDimension;

    public Output<String> scalableDimension() {
        return this.scalableDimension;
    }

    /**
     * Controls whether a resource's externally created scaling policies are kept or replaced. Valid values: `KeepExternalPolicies`, `ReplaceExternalPolicies`. Defaults to `KeepExternalPolicies`.
     * 
     */
    @Import(name="scalingPolicyUpdateBehavior")
      private final @Nullable Output<String> scalingPolicyUpdateBehavior;

    public Output<String> scalingPolicyUpdateBehavior() {
        return this.scalingPolicyUpdateBehavior == null ? Codegen.empty() : this.scalingPolicyUpdateBehavior;
    }

    /**
     * The amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out.
     * 
     */
    @Import(name="scheduledActionBufferTime")
      private final @Nullable Output<Integer> scheduledActionBufferTime;

    public Output<Integer> scheduledActionBufferTime() {
        return this.scheduledActionBufferTime == null ? Codegen.empty() : this.scheduledActionBufferTime;
    }

    /**
     * The namespace of the AWS service. Valid values: `autoscaling`, `dynamodb`, `ecs`, `ec2`, `rds`.
     * 
     */
    @Import(name="serviceNamespace", required=true)
      private final Output<String> serviceNamespace;

    public Output<String> serviceNamespace() {
        return this.serviceNamespace;
    }

    /**
     * The structure that defines new target tracking configurations. Each of these structures includes a specific scaling metric and a target value for the metric, along with various parameters to use with dynamic scaling.
     * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_TargetTrackingConfiguration.html).
     * 
     */
    @Import(name="targetTrackingConfigurations", required=true)
      private final Output<List<ScalingPlanScalingInstructionTargetTrackingConfigurationArgs>> targetTrackingConfigurations;

    public Output<List<ScalingPlanScalingInstructionTargetTrackingConfigurationArgs>> targetTrackingConfigurations() {
        return this.targetTrackingConfigurations;
    }

    public ScalingPlanScalingInstructionArgs(
        @Nullable Output<ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs> customizedLoadMetricSpecification,
        @Nullable Output<Boolean> disableDynamicScaling,
        Output<Integer> maxCapacity,
        Output<Integer> minCapacity,
        @Nullable Output<ScalingPlanScalingInstructionPredefinedLoadMetricSpecificationArgs> predefinedLoadMetricSpecification,
        @Nullable Output<String> predictiveScalingMaxCapacityBehavior,
        @Nullable Output<Integer> predictiveScalingMaxCapacityBuffer,
        @Nullable Output<String> predictiveScalingMode,
        Output<String> resourceId,
        Output<String> scalableDimension,
        @Nullable Output<String> scalingPolicyUpdateBehavior,
        @Nullable Output<Integer> scheduledActionBufferTime,
        Output<String> serviceNamespace,
        Output<List<ScalingPlanScalingInstructionTargetTrackingConfigurationArgs>> targetTrackingConfigurations) {
        this.customizedLoadMetricSpecification = customizedLoadMetricSpecification;
        this.disableDynamicScaling = disableDynamicScaling;
        this.maxCapacity = Objects.requireNonNull(maxCapacity, "expected parameter 'maxCapacity' to be non-null");
        this.minCapacity = Objects.requireNonNull(minCapacity, "expected parameter 'minCapacity' to be non-null");
        this.predefinedLoadMetricSpecification = predefinedLoadMetricSpecification;
        this.predictiveScalingMaxCapacityBehavior = predictiveScalingMaxCapacityBehavior;
        this.predictiveScalingMaxCapacityBuffer = predictiveScalingMaxCapacityBuffer;
        this.predictiveScalingMode = predictiveScalingMode;
        this.resourceId = Objects.requireNonNull(resourceId, "expected parameter 'resourceId' to be non-null");
        this.scalableDimension = Objects.requireNonNull(scalableDimension, "expected parameter 'scalableDimension' to be non-null");
        this.scalingPolicyUpdateBehavior = scalingPolicyUpdateBehavior;
        this.scheduledActionBufferTime = scheduledActionBufferTime;
        this.serviceNamespace = Objects.requireNonNull(serviceNamespace, "expected parameter 'serviceNamespace' to be non-null");
        this.targetTrackingConfigurations = Objects.requireNonNull(targetTrackingConfigurations, "expected parameter 'targetTrackingConfigurations' to be non-null");
    }

    private ScalingPlanScalingInstructionArgs() {
        this.customizedLoadMetricSpecification = Codegen.empty();
        this.disableDynamicScaling = Codegen.empty();
        this.maxCapacity = Codegen.empty();
        this.minCapacity = Codegen.empty();
        this.predefinedLoadMetricSpecification = Codegen.empty();
        this.predictiveScalingMaxCapacityBehavior = Codegen.empty();
        this.predictiveScalingMaxCapacityBuffer = Codegen.empty();
        this.predictiveScalingMode = Codegen.empty();
        this.resourceId = Codegen.empty();
        this.scalableDimension = Codegen.empty();
        this.scalingPolicyUpdateBehavior = Codegen.empty();
        this.scheduledActionBufferTime = Codegen.empty();
        this.serviceNamespace = Codegen.empty();
        this.targetTrackingConfigurations = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScalingPlanScalingInstructionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs> customizedLoadMetricSpecification;
        private @Nullable Output<Boolean> disableDynamicScaling;
        private Output<Integer> maxCapacity;
        private Output<Integer> minCapacity;
        private @Nullable Output<ScalingPlanScalingInstructionPredefinedLoadMetricSpecificationArgs> predefinedLoadMetricSpecification;
        private @Nullable Output<String> predictiveScalingMaxCapacityBehavior;
        private @Nullable Output<Integer> predictiveScalingMaxCapacityBuffer;
        private @Nullable Output<String> predictiveScalingMode;
        private Output<String> resourceId;
        private Output<String> scalableDimension;
        private @Nullable Output<String> scalingPolicyUpdateBehavior;
        private @Nullable Output<Integer> scheduledActionBufferTime;
        private Output<String> serviceNamespace;
        private Output<List<ScalingPlanScalingInstructionTargetTrackingConfigurationArgs>> targetTrackingConfigurations;

        public Builder() {
    	      // Empty
        }

        public Builder(ScalingPlanScalingInstructionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customizedLoadMetricSpecification = defaults.customizedLoadMetricSpecification;
    	      this.disableDynamicScaling = defaults.disableDynamicScaling;
    	      this.maxCapacity = defaults.maxCapacity;
    	      this.minCapacity = defaults.minCapacity;
    	      this.predefinedLoadMetricSpecification = defaults.predefinedLoadMetricSpecification;
    	      this.predictiveScalingMaxCapacityBehavior = defaults.predictiveScalingMaxCapacityBehavior;
    	      this.predictiveScalingMaxCapacityBuffer = defaults.predictiveScalingMaxCapacityBuffer;
    	      this.predictiveScalingMode = defaults.predictiveScalingMode;
    	      this.resourceId = defaults.resourceId;
    	      this.scalableDimension = defaults.scalableDimension;
    	      this.scalingPolicyUpdateBehavior = defaults.scalingPolicyUpdateBehavior;
    	      this.scheduledActionBufferTime = defaults.scheduledActionBufferTime;
    	      this.serviceNamespace = defaults.serviceNamespace;
    	      this.targetTrackingConfigurations = defaults.targetTrackingConfigurations;
        }

        public Builder customizedLoadMetricSpecification(@Nullable Output<ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs> customizedLoadMetricSpecification) {
            this.customizedLoadMetricSpecification = customizedLoadMetricSpecification;
            return this;
        }
        public Builder customizedLoadMetricSpecification(@Nullable ScalingPlanScalingInstructionCustomizedLoadMetricSpecificationArgs customizedLoadMetricSpecification) {
            this.customizedLoadMetricSpecification = Codegen.ofNullable(customizedLoadMetricSpecification);
            return this;
        }
        public Builder disableDynamicScaling(@Nullable Output<Boolean> disableDynamicScaling) {
            this.disableDynamicScaling = disableDynamicScaling;
            return this;
        }
        public Builder disableDynamicScaling(@Nullable Boolean disableDynamicScaling) {
            this.disableDynamicScaling = Codegen.ofNullable(disableDynamicScaling);
            return this;
        }
        public Builder maxCapacity(Output<Integer> maxCapacity) {
            this.maxCapacity = Objects.requireNonNull(maxCapacity);
            return this;
        }
        public Builder maxCapacity(Integer maxCapacity) {
            this.maxCapacity = Output.of(Objects.requireNonNull(maxCapacity));
            return this;
        }
        public Builder minCapacity(Output<Integer> minCapacity) {
            this.minCapacity = Objects.requireNonNull(minCapacity);
            return this;
        }
        public Builder minCapacity(Integer minCapacity) {
            this.minCapacity = Output.of(Objects.requireNonNull(minCapacity));
            return this;
        }
        public Builder predefinedLoadMetricSpecification(@Nullable Output<ScalingPlanScalingInstructionPredefinedLoadMetricSpecificationArgs> predefinedLoadMetricSpecification) {
            this.predefinedLoadMetricSpecification = predefinedLoadMetricSpecification;
            return this;
        }
        public Builder predefinedLoadMetricSpecification(@Nullable ScalingPlanScalingInstructionPredefinedLoadMetricSpecificationArgs predefinedLoadMetricSpecification) {
            this.predefinedLoadMetricSpecification = Codegen.ofNullable(predefinedLoadMetricSpecification);
            return this;
        }
        public Builder predictiveScalingMaxCapacityBehavior(@Nullable Output<String> predictiveScalingMaxCapacityBehavior) {
            this.predictiveScalingMaxCapacityBehavior = predictiveScalingMaxCapacityBehavior;
            return this;
        }
        public Builder predictiveScalingMaxCapacityBehavior(@Nullable String predictiveScalingMaxCapacityBehavior) {
            this.predictiveScalingMaxCapacityBehavior = Codegen.ofNullable(predictiveScalingMaxCapacityBehavior);
            return this;
        }
        public Builder predictiveScalingMaxCapacityBuffer(@Nullable Output<Integer> predictiveScalingMaxCapacityBuffer) {
            this.predictiveScalingMaxCapacityBuffer = predictiveScalingMaxCapacityBuffer;
            return this;
        }
        public Builder predictiveScalingMaxCapacityBuffer(@Nullable Integer predictiveScalingMaxCapacityBuffer) {
            this.predictiveScalingMaxCapacityBuffer = Codegen.ofNullable(predictiveScalingMaxCapacityBuffer);
            return this;
        }
        public Builder predictiveScalingMode(@Nullable Output<String> predictiveScalingMode) {
            this.predictiveScalingMode = predictiveScalingMode;
            return this;
        }
        public Builder predictiveScalingMode(@Nullable String predictiveScalingMode) {
            this.predictiveScalingMode = Codegen.ofNullable(predictiveScalingMode);
            return this;
        }
        public Builder resourceId(Output<String> resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }
        public Builder resourceId(String resourceId) {
            this.resourceId = Output.of(Objects.requireNonNull(resourceId));
            return this;
        }
        public Builder scalableDimension(Output<String> scalableDimension) {
            this.scalableDimension = Objects.requireNonNull(scalableDimension);
            return this;
        }
        public Builder scalableDimension(String scalableDimension) {
            this.scalableDimension = Output.of(Objects.requireNonNull(scalableDimension));
            return this;
        }
        public Builder scalingPolicyUpdateBehavior(@Nullable Output<String> scalingPolicyUpdateBehavior) {
            this.scalingPolicyUpdateBehavior = scalingPolicyUpdateBehavior;
            return this;
        }
        public Builder scalingPolicyUpdateBehavior(@Nullable String scalingPolicyUpdateBehavior) {
            this.scalingPolicyUpdateBehavior = Codegen.ofNullable(scalingPolicyUpdateBehavior);
            return this;
        }
        public Builder scheduledActionBufferTime(@Nullable Output<Integer> scheduledActionBufferTime) {
            this.scheduledActionBufferTime = scheduledActionBufferTime;
            return this;
        }
        public Builder scheduledActionBufferTime(@Nullable Integer scheduledActionBufferTime) {
            this.scheduledActionBufferTime = Codegen.ofNullable(scheduledActionBufferTime);
            return this;
        }
        public Builder serviceNamespace(Output<String> serviceNamespace) {
            this.serviceNamespace = Objects.requireNonNull(serviceNamespace);
            return this;
        }
        public Builder serviceNamespace(String serviceNamespace) {
            this.serviceNamespace = Output.of(Objects.requireNonNull(serviceNamespace));
            return this;
        }
        public Builder targetTrackingConfigurations(Output<List<ScalingPlanScalingInstructionTargetTrackingConfigurationArgs>> targetTrackingConfigurations) {
            this.targetTrackingConfigurations = Objects.requireNonNull(targetTrackingConfigurations);
            return this;
        }
        public Builder targetTrackingConfigurations(List<ScalingPlanScalingInstructionTargetTrackingConfigurationArgs> targetTrackingConfigurations) {
            this.targetTrackingConfigurations = Output.of(Objects.requireNonNull(targetTrackingConfigurations));
            return this;
        }
        public Builder targetTrackingConfigurations(ScalingPlanScalingInstructionTargetTrackingConfigurationArgs... targetTrackingConfigurations) {
            return targetTrackingConfigurations(List.of(targetTrackingConfigurations));
        }        public ScalingPlanScalingInstructionArgs build() {
            return new ScalingPlanScalingInstructionArgs(customizedLoadMetricSpecification, disableDynamicScaling, maxCapacity, minCapacity, predefinedLoadMetricSpecification, predictiveScalingMaxCapacityBehavior, predictiveScalingMaxCapacityBuffer, predictiveScalingMode, resourceId, scalableDimension, scalingPolicyUpdateBehavior, scheduledActionBufferTime, serviceNamespace, targetTrackingConfigurations);
        }
    }
}
