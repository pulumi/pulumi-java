// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codebuild.inputs;

import com.pulumi.aws.codebuild.inputs.ProjectSecondarySourceAuthGetArgs;
import com.pulumi.aws.codebuild.inputs.ProjectSecondarySourceBuildStatusConfigGetArgs;
import com.pulumi.aws.codebuild.inputs.ProjectSecondarySourceGitSubmodulesConfigGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectSecondarySourceGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectSecondarySourceGetArgs Empty = new ProjectSecondarySourceGetArgs();

    /**
     * Configuration block with the authorization settings for AWS CodeBuild to access the source code to be built. This information is for the AWS CodeBuild console&#39;s use only. Use the `aws.codebuild.SourceCredential` resource instead. Auth blocks are documented below.
     * 
     * @deprecated
     * Use the aws_codebuild_source_credential resource instead
     * 
     */
    @Deprecated /* Use the aws_codebuild_source_credential resource instead */
    @Import(name="auth")
    private @Nullable Output<ProjectSecondarySourceAuthGetArgs> auth;

    @Deprecated /* Use the aws_codebuild_source_credential resource instead */
    public Optional<Output<ProjectSecondarySourceAuthGetArgs>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is `GITHUB`, `GITHUB_ENTERPRISE`, or `BITBUCKET`.
     * 
     */
    @Import(name="buildStatusConfig")
    private @Nullable Output<ProjectSecondarySourceBuildStatusConfigGetArgs> buildStatusConfig;

    public Optional<Output<ProjectSecondarySourceBuildStatusConfigGetArgs>> buildStatusConfig() {
        return Optional.ofNullable(this.buildStatusConfig);
    }

    /**
     * Build specification to use for this build project&#39;s related builds. This must be set when `type` is `NO_SOURCE`.
     * 
     */
    @Import(name="buildspec")
    private @Nullable Output<String> buildspec;

    public Optional<Output<String>> buildspec() {
        return Optional.ofNullable(this.buildspec);
    }

    /**
     * Truncate git history to this many commits. Use `0` for a `Full` checkout which you need to run commands like `git branch --show-current`. See [AWS CodePipeline User Guide: Tutorial: Use full clone with a GitHub pipeline source](https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-github-gitclone.html) for details.
     * 
     */
    @Import(name="gitCloneDepth")
    private @Nullable Output<Integer> gitCloneDepth;

    public Optional<Output<Integer>> gitCloneDepth() {
        return Optional.ofNullable(this.gitCloneDepth);
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @Import(name="gitSubmodulesConfig")
    private @Nullable Output<ProjectSecondarySourceGitSubmodulesConfigGetArgs> gitSubmodulesConfig;

    public Optional<Output<ProjectSecondarySourceGitSubmodulesConfigGetArgs>> gitSubmodulesConfig() {
        return Optional.ofNullable(this.gitSubmodulesConfig);
    }

    /**
     * Ignore SSL warnings when connecting to source control.
     * 
     */
    @Import(name="insecureSsl")
    private @Nullable Output<Boolean> insecureSsl;

    public Optional<Output<Boolean>> insecureSsl() {
        return Optional.ofNullable(this.insecureSsl);
    }

    /**
     * Location of the source code from git or s3.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Whether to report the status of a build&#39;s start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
     * 
     */
    @Import(name="reportBuildStatus")
    private @Nullable Output<Boolean> reportBuildStatus;

    public Optional<Output<Boolean>> reportBuildStatus() {
        return Optional.ofNullable(this.reportBuildStatus);
    }

    /**
     * An identifier for a source in the build project.
     * 
     */
    @Import(name="sourceIdentifier", required=true)
    private Output<String> sourceIdentifier;

    public Output<String> sourceIdentifier() {
        return this.sourceIdentifier;
    }

    /**
     * Type of repository that contains the source code to be built. Valid values: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3`, `NO_SOURCE`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private ProjectSecondarySourceGetArgs() {}

    private ProjectSecondarySourceGetArgs(ProjectSecondarySourceGetArgs $) {
        this.auth = $.auth;
        this.buildStatusConfig = $.buildStatusConfig;
        this.buildspec = $.buildspec;
        this.gitCloneDepth = $.gitCloneDepth;
        this.gitSubmodulesConfig = $.gitSubmodulesConfig;
        this.insecureSsl = $.insecureSsl;
        this.location = $.location;
        this.reportBuildStatus = $.reportBuildStatus;
        this.sourceIdentifier = $.sourceIdentifier;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectSecondarySourceGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectSecondarySourceGetArgs $;

        public Builder() {
            $ = new ProjectSecondarySourceGetArgs();
        }

        public Builder(ProjectSecondarySourceGetArgs defaults) {
            $ = new ProjectSecondarySourceGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder auth(@Nullable Output<ProjectSecondarySourceAuthGetArgs> auth) {
            $.auth = auth;
            return this;
        }

        public Builder auth(ProjectSecondarySourceAuthGetArgs auth) {
            return auth(Output.of(auth));
        }

        public Builder buildStatusConfig(@Nullable Output<ProjectSecondarySourceBuildStatusConfigGetArgs> buildStatusConfig) {
            $.buildStatusConfig = buildStatusConfig;
            return this;
        }

        public Builder buildStatusConfig(ProjectSecondarySourceBuildStatusConfigGetArgs buildStatusConfig) {
            return buildStatusConfig(Output.of(buildStatusConfig));
        }

        public Builder buildspec(@Nullable Output<String> buildspec) {
            $.buildspec = buildspec;
            return this;
        }

        public Builder buildspec(String buildspec) {
            return buildspec(Output.of(buildspec));
        }

        public Builder gitCloneDepth(@Nullable Output<Integer> gitCloneDepth) {
            $.gitCloneDepth = gitCloneDepth;
            return this;
        }

        public Builder gitCloneDepth(Integer gitCloneDepth) {
            return gitCloneDepth(Output.of(gitCloneDepth));
        }

        public Builder gitSubmodulesConfig(@Nullable Output<ProjectSecondarySourceGitSubmodulesConfigGetArgs> gitSubmodulesConfig) {
            $.gitSubmodulesConfig = gitSubmodulesConfig;
            return this;
        }

        public Builder gitSubmodulesConfig(ProjectSecondarySourceGitSubmodulesConfigGetArgs gitSubmodulesConfig) {
            return gitSubmodulesConfig(Output.of(gitSubmodulesConfig));
        }

        public Builder insecureSsl(@Nullable Output<Boolean> insecureSsl) {
            $.insecureSsl = insecureSsl;
            return this;
        }

        public Builder insecureSsl(Boolean insecureSsl) {
            return insecureSsl(Output.of(insecureSsl));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder reportBuildStatus(@Nullable Output<Boolean> reportBuildStatus) {
            $.reportBuildStatus = reportBuildStatus;
            return this;
        }

        public Builder reportBuildStatus(Boolean reportBuildStatus) {
            return reportBuildStatus(Output.of(reportBuildStatus));
        }

        public Builder sourceIdentifier(Output<String> sourceIdentifier) {
            $.sourceIdentifier = sourceIdentifier;
            return this;
        }

        public Builder sourceIdentifier(String sourceIdentifier) {
            return sourceIdentifier(Output.of(sourceIdentifier));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ProjectSecondarySourceGetArgs build() {
            $.sourceIdentifier = Objects.requireNonNull($.sourceIdentifier, "expected parameter 'sourceIdentifier' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
