// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpcArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcArgs Empty = new VpcArgs();

    /**
     * Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`. Conflicts with `ipv6_ipam_pool_id`
     * 
     */
    @Import(name="assignGeneratedIpv6CidrBlock")
      private final @Nullable Output<Boolean> assignGeneratedIpv6CidrBlock;

    public Output<Boolean> assignGeneratedIpv6CidrBlock() {
        return this.assignGeneratedIpv6CidrBlock == null ? Codegen.empty() : this.assignGeneratedIpv6CidrBlock;
    }

    /**
     * The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4_netmask_length`.
     * 
     */
    @Import(name="cidrBlock")
      private final @Nullable Output<String> cidrBlock;

    public Output<String> cidrBlock() {
        return this.cidrBlock == null ? Codegen.empty() : this.cidrBlock;
    }

    /**
     * A boolean flag to enable/disable ClassicLink
     * for the VPC. Only valid in regions and accounts that support EC2 Classic.
     * See the [ClassicLink documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html) for more information. Defaults false.
     * 
     */
    @Import(name="enableClassiclink")
      private final @Nullable Output<Boolean> enableClassiclink;

    public Output<Boolean> enableClassiclink() {
        return this.enableClassiclink == null ? Codegen.empty() : this.enableClassiclink;
    }

    /**
     * A boolean flag to enable/disable ClassicLink DNS Support for the VPC.
     * Only valid in regions and accounts that support EC2 Classic.
     * 
     */
    @Import(name="enableClassiclinkDnsSupport")
      private final @Nullable Output<Boolean> enableClassiclinkDnsSupport;

    public Output<Boolean> enableClassiclinkDnsSupport() {
        return this.enableClassiclinkDnsSupport == null ? Codegen.empty() : this.enableClassiclinkDnsSupport;
    }

    /**
     * A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
     * 
     */
    @Import(name="enableDnsHostnames")
      private final @Nullable Output<Boolean> enableDnsHostnames;

    public Output<Boolean> enableDnsHostnames() {
        return this.enableDnsHostnames == null ? Codegen.empty() : this.enableDnsHostnames;
    }

    /**
     * A boolean flag to enable/disable DNS support in the VPC. Defaults true.
     * 
     */
    @Import(name="enableDnsSupport")
      private final @Nullable Output<Boolean> enableDnsSupport;

    public Output<Boolean> enableDnsSupport() {
        return this.enableDnsSupport == null ? Codegen.empty() : this.enableDnsSupport;
    }

    /**
     * A tenancy option for instances launched into the VPC. Default is `default`, which makes your instances shared on the host. Using either of the other options (`dedicated` or `host`) costs at least $2/hr.
     * 
     */
    @Import(name="instanceTenancy")
      private final @Nullable Output<String> instanceTenancy;

    public Output<String> instanceTenancy() {
        return this.instanceTenancy == null ? Codegen.empty() : this.instanceTenancy;
    }

    /**
     * The ID of an IPv4 IPAM pool you want to use for allocating this VPC&#39;s CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
     * 
     */
    @Import(name="ipv4IpamPoolId")
      private final @Nullable Output<String> ipv4IpamPoolId;

    public Output<String> ipv4IpamPoolId() {
        return this.ipv4IpamPoolId == null ? Codegen.empty() : this.ipv4IpamPoolId;
    }

    /**
     * The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a `ipv4_ipam_pool_id`.
     * 
     */
    @Import(name="ipv4NetmaskLength")
      private final @Nullable Output<Integer> ipv4NetmaskLength;

    public Output<Integer> ipv4NetmaskLength() {
        return this.ipv4NetmaskLength == null ? Codegen.empty() : this.ipv4NetmaskLength;
    }

    /**
     * IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6_netmask_length`.
     * 
     */
    @Import(name="ipv6CidrBlock")
      private final @Nullable Output<String> ipv6CidrBlock;

    public Output<String> ipv6CidrBlock() {
        return this.ipv6CidrBlock == null ? Codegen.empty() : this.ipv6CidrBlock;
    }

    /**
     * By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
     * 
     */
    @Import(name="ipv6CidrBlockNetworkBorderGroup")
      private final @Nullable Output<String> ipv6CidrBlockNetworkBorderGroup;

    public Output<String> ipv6CidrBlockNetworkBorderGroup() {
        return this.ipv6CidrBlockNetworkBorderGroup == null ? Codegen.empty() : this.ipv6CidrBlockNetworkBorderGroup;
    }

    /**
     * IPAM Pool ID for a IPv6 pool. Conflicts with `assign_generated_ipv6_cidr_block`.
     * 
     */
    @Import(name="ipv6IpamPoolId")
      private final @Nullable Output<String> ipv6IpamPoolId;

    public Output<String> ipv6IpamPoolId() {
        return this.ipv6IpamPoolId == null ? Codegen.empty() : this.ipv6IpamPoolId;
    }

    /**
     * Netmask length to request from IPAM Pool. Conflicts with `ipv6_cidr_block`. This can be omitted if IPAM pool as a `allocation_default_netmask_length` set. Valid values: `56`.
     * 
     */
    @Import(name="ipv6NetmaskLength")
      private final @Nullable Output<Integer> ipv6NetmaskLength;

    public Output<Integer> ipv6NetmaskLength() {
        return this.ipv6NetmaskLength == null ? Codegen.empty() : this.ipv6NetmaskLength;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public VpcArgs(
        @Nullable Output<Boolean> assignGeneratedIpv6CidrBlock,
        @Nullable Output<String> cidrBlock,
        @Nullable Output<Boolean> enableClassiclink,
        @Nullable Output<Boolean> enableClassiclinkDnsSupport,
        @Nullable Output<Boolean> enableDnsHostnames,
        @Nullable Output<Boolean> enableDnsSupport,
        @Nullable Output<String> instanceTenancy,
        @Nullable Output<String> ipv4IpamPoolId,
        @Nullable Output<Integer> ipv4NetmaskLength,
        @Nullable Output<String> ipv6CidrBlock,
        @Nullable Output<String> ipv6CidrBlockNetworkBorderGroup,
        @Nullable Output<String> ipv6IpamPoolId,
        @Nullable Output<Integer> ipv6NetmaskLength,
        @Nullable Output<Map<String,String>> tags) {
        this.assignGeneratedIpv6CidrBlock = assignGeneratedIpv6CidrBlock;
        this.cidrBlock = cidrBlock;
        this.enableClassiclink = enableClassiclink;
        this.enableClassiclinkDnsSupport = enableClassiclinkDnsSupport;
        this.enableDnsHostnames = enableDnsHostnames;
        this.enableDnsSupport = enableDnsSupport;
        this.instanceTenancy = instanceTenancy;
        this.ipv4IpamPoolId = ipv4IpamPoolId;
        this.ipv4NetmaskLength = ipv4NetmaskLength;
        this.ipv6CidrBlock = ipv6CidrBlock;
        this.ipv6CidrBlockNetworkBorderGroup = ipv6CidrBlockNetworkBorderGroup;
        this.ipv6IpamPoolId = ipv6IpamPoolId;
        this.ipv6NetmaskLength = ipv6NetmaskLength;
        this.tags = tags;
    }

    private VpcArgs() {
        this.assignGeneratedIpv6CidrBlock = Codegen.empty();
        this.cidrBlock = Codegen.empty();
        this.enableClassiclink = Codegen.empty();
        this.enableClassiclinkDnsSupport = Codegen.empty();
        this.enableDnsHostnames = Codegen.empty();
        this.enableDnsSupport = Codegen.empty();
        this.instanceTenancy = Codegen.empty();
        this.ipv4IpamPoolId = Codegen.empty();
        this.ipv4NetmaskLength = Codegen.empty();
        this.ipv6CidrBlock = Codegen.empty();
        this.ipv6CidrBlockNetworkBorderGroup = Codegen.empty();
        this.ipv6IpamPoolId = Codegen.empty();
        this.ipv6NetmaskLength = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpcArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> assignGeneratedIpv6CidrBlock;
        private @Nullable Output<String> cidrBlock;
        private @Nullable Output<Boolean> enableClassiclink;
        private @Nullable Output<Boolean> enableClassiclinkDnsSupport;
        private @Nullable Output<Boolean> enableDnsHostnames;
        private @Nullable Output<Boolean> enableDnsSupport;
        private @Nullable Output<String> instanceTenancy;
        private @Nullable Output<String> ipv4IpamPoolId;
        private @Nullable Output<Integer> ipv4NetmaskLength;
        private @Nullable Output<String> ipv6CidrBlock;
        private @Nullable Output<String> ipv6CidrBlockNetworkBorderGroup;
        private @Nullable Output<String> ipv6IpamPoolId;
        private @Nullable Output<Integer> ipv6NetmaskLength;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(VpcArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignGeneratedIpv6CidrBlock = defaults.assignGeneratedIpv6CidrBlock;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.enableClassiclink = defaults.enableClassiclink;
    	      this.enableClassiclinkDnsSupport = defaults.enableClassiclinkDnsSupport;
    	      this.enableDnsHostnames = defaults.enableDnsHostnames;
    	      this.enableDnsSupport = defaults.enableDnsSupport;
    	      this.instanceTenancy = defaults.instanceTenancy;
    	      this.ipv4IpamPoolId = defaults.ipv4IpamPoolId;
    	      this.ipv4NetmaskLength = defaults.ipv4NetmaskLength;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.ipv6CidrBlockNetworkBorderGroup = defaults.ipv6CidrBlockNetworkBorderGroup;
    	      this.ipv6IpamPoolId = defaults.ipv6IpamPoolId;
    	      this.ipv6NetmaskLength = defaults.ipv6NetmaskLength;
    	      this.tags = defaults.tags;
        }

        public Builder assignGeneratedIpv6CidrBlock(@Nullable Output<Boolean> assignGeneratedIpv6CidrBlock) {
            this.assignGeneratedIpv6CidrBlock = assignGeneratedIpv6CidrBlock;
            return this;
        }
        public Builder assignGeneratedIpv6CidrBlock(@Nullable Boolean assignGeneratedIpv6CidrBlock) {
            this.assignGeneratedIpv6CidrBlock = Codegen.ofNullable(assignGeneratedIpv6CidrBlock);
            return this;
        }
        public Builder cidrBlock(@Nullable Output<String> cidrBlock) {
            this.cidrBlock = cidrBlock;
            return this;
        }
        public Builder cidrBlock(@Nullable String cidrBlock) {
            this.cidrBlock = Codegen.ofNullable(cidrBlock);
            return this;
        }
        public Builder enableClassiclink(@Nullable Output<Boolean> enableClassiclink) {
            this.enableClassiclink = enableClassiclink;
            return this;
        }
        public Builder enableClassiclink(@Nullable Boolean enableClassiclink) {
            this.enableClassiclink = Codegen.ofNullable(enableClassiclink);
            return this;
        }
        public Builder enableClassiclinkDnsSupport(@Nullable Output<Boolean> enableClassiclinkDnsSupport) {
            this.enableClassiclinkDnsSupport = enableClassiclinkDnsSupport;
            return this;
        }
        public Builder enableClassiclinkDnsSupport(@Nullable Boolean enableClassiclinkDnsSupport) {
            this.enableClassiclinkDnsSupport = Codegen.ofNullable(enableClassiclinkDnsSupport);
            return this;
        }
        public Builder enableDnsHostnames(@Nullable Output<Boolean> enableDnsHostnames) {
            this.enableDnsHostnames = enableDnsHostnames;
            return this;
        }
        public Builder enableDnsHostnames(@Nullable Boolean enableDnsHostnames) {
            this.enableDnsHostnames = Codegen.ofNullable(enableDnsHostnames);
            return this;
        }
        public Builder enableDnsSupport(@Nullable Output<Boolean> enableDnsSupport) {
            this.enableDnsSupport = enableDnsSupport;
            return this;
        }
        public Builder enableDnsSupport(@Nullable Boolean enableDnsSupport) {
            this.enableDnsSupport = Codegen.ofNullable(enableDnsSupport);
            return this;
        }
        public Builder instanceTenancy(@Nullable Output<String> instanceTenancy) {
            this.instanceTenancy = instanceTenancy;
            return this;
        }
        public Builder instanceTenancy(@Nullable String instanceTenancy) {
            this.instanceTenancy = Codegen.ofNullable(instanceTenancy);
            return this;
        }
        public Builder ipv4IpamPoolId(@Nullable Output<String> ipv4IpamPoolId) {
            this.ipv4IpamPoolId = ipv4IpamPoolId;
            return this;
        }
        public Builder ipv4IpamPoolId(@Nullable String ipv4IpamPoolId) {
            this.ipv4IpamPoolId = Codegen.ofNullable(ipv4IpamPoolId);
            return this;
        }
        public Builder ipv4NetmaskLength(@Nullable Output<Integer> ipv4NetmaskLength) {
            this.ipv4NetmaskLength = ipv4NetmaskLength;
            return this;
        }
        public Builder ipv4NetmaskLength(@Nullable Integer ipv4NetmaskLength) {
            this.ipv4NetmaskLength = Codegen.ofNullable(ipv4NetmaskLength);
            return this;
        }
        public Builder ipv6CidrBlock(@Nullable Output<String> ipv6CidrBlock) {
            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        public Builder ipv6CidrBlock(@Nullable String ipv6CidrBlock) {
            this.ipv6CidrBlock = Codegen.ofNullable(ipv6CidrBlock);
            return this;
        }
        public Builder ipv6CidrBlockNetworkBorderGroup(@Nullable Output<String> ipv6CidrBlockNetworkBorderGroup) {
            this.ipv6CidrBlockNetworkBorderGroup = ipv6CidrBlockNetworkBorderGroup;
            return this;
        }
        public Builder ipv6CidrBlockNetworkBorderGroup(@Nullable String ipv6CidrBlockNetworkBorderGroup) {
            this.ipv6CidrBlockNetworkBorderGroup = Codegen.ofNullable(ipv6CidrBlockNetworkBorderGroup);
            return this;
        }
        public Builder ipv6IpamPoolId(@Nullable Output<String> ipv6IpamPoolId) {
            this.ipv6IpamPoolId = ipv6IpamPoolId;
            return this;
        }
        public Builder ipv6IpamPoolId(@Nullable String ipv6IpamPoolId) {
            this.ipv6IpamPoolId = Codegen.ofNullable(ipv6IpamPoolId);
            return this;
        }
        public Builder ipv6NetmaskLength(@Nullable Output<Integer> ipv6NetmaskLength) {
            this.ipv6NetmaskLength = ipv6NetmaskLength;
            return this;
        }
        public Builder ipv6NetmaskLength(@Nullable Integer ipv6NetmaskLength) {
            this.ipv6NetmaskLength = Codegen.ofNullable(ipv6NetmaskLength);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public VpcArgs build() {
            return new VpcArgs(assignGeneratedIpv6CidrBlock, cidrBlock, enableClassiclink, enableClassiclinkDnsSupport, enableDnsHostnames, enableDnsSupport, instanceTenancy, ipv4IpamPoolId, ipv4NetmaskLength, ipv6CidrBlock, ipv6CidrBlockNetworkBorderGroup, ipv6IpamPoolId, ipv6NetmaskLength, tags);
        }
    }
}
