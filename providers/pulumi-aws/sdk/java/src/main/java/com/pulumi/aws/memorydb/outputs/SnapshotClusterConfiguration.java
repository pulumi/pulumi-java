// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.memorydb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SnapshotClusterConfiguration {
    /**
     * @return Description for the cluster.
     * 
     */
    private final @Nullable String description;
    /**
     * @return Version number of the Redis engine used by the cluster.
     * 
     */
    private final @Nullable String engineVersion;
    /**
     * @return The weekly time range during which maintenance on the cluster is performed.
     * 
     */
    private final @Nullable String maintenanceWindow;
    /**
     * @return Name of the cluster.
     * 
     */
    private final @Nullable String name;
    /**
     * @return Compute and memory capacity of the nodes in the cluster.
     * 
     */
    private final @Nullable String nodeType;
    /**
     * @return Number of shards in the cluster.
     * 
     */
    private final @Nullable Integer numShards;
    /**
     * @return Name of the parameter group associated with the cluster.
     * 
     */
    private final @Nullable String parameterGroupName;
    /**
     * @return Port number on which the cluster accepts connections.
     * 
     */
    private final @Nullable Integer port;
    /**
     * @return Number of days for which MemoryDB retains automatic snapshots before deleting them.
     * 
     */
    private final @Nullable Integer snapshotRetentionLimit;
    /**
     * @return The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
     * 
     */
    private final @Nullable String snapshotWindow;
    /**
     * @return Name of the subnet group used by the cluster.
     * 
     */
    private final @Nullable String subnetGroupName;
    /**
     * @return ARN of the SNS topic to which cluster notifications are sent.
     * 
     */
    private final @Nullable String topicArn;
    /**
     * @return The VPC in which the cluster exists.
     * 
     */
    private final @Nullable String vpcId;

    @CustomType.Constructor
    private SnapshotClusterConfiguration(
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("engineVersion") @Nullable String engineVersion,
        @CustomType.Parameter("maintenanceWindow") @Nullable String maintenanceWindow,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("nodeType") @Nullable String nodeType,
        @CustomType.Parameter("numShards") @Nullable Integer numShards,
        @CustomType.Parameter("parameterGroupName") @Nullable String parameterGroupName,
        @CustomType.Parameter("port") @Nullable Integer port,
        @CustomType.Parameter("snapshotRetentionLimit") @Nullable Integer snapshotRetentionLimit,
        @CustomType.Parameter("snapshotWindow") @Nullable String snapshotWindow,
        @CustomType.Parameter("subnetGroupName") @Nullable String subnetGroupName,
        @CustomType.Parameter("topicArn") @Nullable String topicArn,
        @CustomType.Parameter("vpcId") @Nullable String vpcId) {
        this.description = description;
        this.engineVersion = engineVersion;
        this.maintenanceWindow = maintenanceWindow;
        this.name = name;
        this.nodeType = nodeType;
        this.numShards = numShards;
        this.parameterGroupName = parameterGroupName;
        this.port = port;
        this.snapshotRetentionLimit = snapshotRetentionLimit;
        this.snapshotWindow = snapshotWindow;
        this.subnetGroupName = subnetGroupName;
        this.topicArn = topicArn;
        this.vpcId = vpcId;
    }

    /**
     * @return Description for the cluster.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Version number of the Redis engine used by the cluster.
     * 
     */
    public Optional<String> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }
    /**
     * @return The weekly time range during which maintenance on the cluster is performed.
     * 
     */
    public Optional<String> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }
    /**
     * @return Name of the cluster.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Compute and memory capacity of the nodes in the cluster.
     * 
     */
    public Optional<String> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }
    /**
     * @return Number of shards in the cluster.
     * 
     */
    public Optional<Integer> numShards() {
        return Optional.ofNullable(this.numShards);
    }
    /**
     * @return Name of the parameter group associated with the cluster.
     * 
     */
    public Optional<String> parameterGroupName() {
        return Optional.ofNullable(this.parameterGroupName);
    }
    /**
     * @return Port number on which the cluster accepts connections.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Number of days for which MemoryDB retains automatic snapshots before deleting them.
     * 
     */
    public Optional<Integer> snapshotRetentionLimit() {
        return Optional.ofNullable(this.snapshotRetentionLimit);
    }
    /**
     * @return The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
     * 
     */
    public Optional<String> snapshotWindow() {
        return Optional.ofNullable(this.snapshotWindow);
    }
    /**
     * @return Name of the subnet group used by the cluster.
     * 
     */
    public Optional<String> subnetGroupName() {
        return Optional.ofNullable(this.subnetGroupName);
    }
    /**
     * @return ARN of the SNS topic to which cluster notifications are sent.
     * 
     */
    public Optional<String> topicArn() {
        return Optional.ofNullable(this.topicArn);
    }
    /**
     * @return The VPC in which the cluster exists.
     * 
     */
    public Optional<String> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SnapshotClusterConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private @Nullable String engineVersion;
        private @Nullable String maintenanceWindow;
        private @Nullable String name;
        private @Nullable String nodeType;
        private @Nullable Integer numShards;
        private @Nullable String parameterGroupName;
        private @Nullable Integer port;
        private @Nullable Integer snapshotRetentionLimit;
        private @Nullable String snapshotWindow;
        private @Nullable String subnetGroupName;
        private @Nullable String topicArn;
        private @Nullable String vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(SnapshotClusterConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.engineVersion = defaults.engineVersion;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.name = defaults.name;
    	      this.nodeType = defaults.nodeType;
    	      this.numShards = defaults.numShards;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.port = defaults.port;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
    	      this.subnetGroupName = defaults.subnetGroupName;
    	      this.topicArn = defaults.topicArn;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }
        public Builder maintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder nodeType(@Nullable String nodeType) {
            this.nodeType = nodeType;
            return this;
        }
        public Builder numShards(@Nullable Integer numShards) {
            this.numShards = numShards;
            return this;
        }
        public Builder parameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        public Builder snapshotRetentionLimit(@Nullable Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }
        public Builder snapshotWindow(@Nullable String snapshotWindow) {
            this.snapshotWindow = snapshotWindow;
            return this;
        }
        public Builder subnetGroupName(@Nullable String subnetGroupName) {
            this.subnetGroupName = subnetGroupName;
            return this;
        }
        public Builder topicArn(@Nullable String topicArn) {
            this.topicArn = topicArn;
            return this;
        }
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }        public SnapshotClusterConfiguration build() {
            return new SnapshotClusterConfiguration(description, engineVersion, maintenanceWindow, name, nodeType, numShards, parameterGroupName, port, snapshotRetentionLimit, snapshotWindow, subnetGroupName, topicArn, vpcId);
        }
    }
}
