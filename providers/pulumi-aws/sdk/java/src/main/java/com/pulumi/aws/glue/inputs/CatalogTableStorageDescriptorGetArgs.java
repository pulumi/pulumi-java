// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.aws.glue.inputs.CatalogTableStorageDescriptorColumnGetArgs;
import com.pulumi.aws.glue.inputs.CatalogTableStorageDescriptorSchemaReferenceGetArgs;
import com.pulumi.aws.glue.inputs.CatalogTableStorageDescriptorSerDeInfoGetArgs;
import com.pulumi.aws.glue.inputs.CatalogTableStorageDescriptorSkewedInfoGetArgs;
import com.pulumi.aws.glue.inputs.CatalogTableStorageDescriptorSortColumnGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CatalogTableStorageDescriptorGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogTableStorageDescriptorGetArgs Empty = new CatalogTableStorageDescriptorGetArgs();

    /**
     * List of reducer grouping columns, clustering columns, and bucketing columns in the table.
     * 
     */
    @Import(name="bucketColumns")
    private @Nullable Output<List<String>> bucketColumns;

    public Optional<Output<List<String>>> bucketColumns() {
        return Optional.ofNullable(this.bucketColumns);
    }

    /**
     * Configuration block for columns in the table. See `columns` below.
     * 
     */
    @Import(name="columns")
    private @Nullable Output<List<CatalogTableStorageDescriptorColumnGetArgs>> columns;

    public Optional<Output<List<CatalogTableStorageDescriptorColumnGetArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * Whether the data in the table is compressed.
     * 
     */
    @Import(name="compressed")
    private @Nullable Output<Boolean> compressed;

    public Optional<Output<Boolean>> compressed() {
        return Optional.ofNullable(this.compressed);
    }

    /**
     * Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
     * 
     */
    @Import(name="inputFormat")
    private @Nullable Output<String> inputFormat;

    public Optional<Output<String>> inputFormat() {
        return Optional.ofNullable(this.inputFormat);
    }

    /**
     * Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Must be specified if the table contains any dimension columns.
     * 
     */
    @Import(name="numberOfBuckets")
    private @Nullable Output<Integer> numberOfBuckets;

    public Optional<Output<Integer>> numberOfBuckets() {
        return Optional.ofNullable(this.numberOfBuckets);
    }

    /**
     * Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
     * 
     */
    @Import(name="outputFormat")
    private @Nullable Output<String> outputFormat;

    public Optional<Output<String>> outputFormat() {
        return Optional.ofNullable(this.outputFormat);
    }

    /**
     * Map of initialization parameters for the SerDe, in key-value form.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
     * 
     */
    @Import(name="schemaReference")
    private @Nullable Output<CatalogTableStorageDescriptorSchemaReferenceGetArgs> schemaReference;

    public Optional<Output<CatalogTableStorageDescriptorSchemaReferenceGetArgs>> schemaReference() {
        return Optional.ofNullable(this.schemaReference);
    }

    /**
     * Configuration block for serialization and deserialization (&#34;SerDe&#34;) information. See `ser_de_info` below.
     * 
     */
    @Import(name="serDeInfo")
    private @Nullable Output<CatalogTableStorageDescriptorSerDeInfoGetArgs> serDeInfo;

    public Optional<Output<CatalogTableStorageDescriptorSerDeInfoGetArgs>> serDeInfo() {
        return Optional.ofNullable(this.serDeInfo);
    }

    /**
     * Configuration block with information about values that appear very frequently in a column (skewed values). See `skewed_info` below.
     * 
     */
    @Import(name="skewedInfo")
    private @Nullable Output<CatalogTableStorageDescriptorSkewedInfoGetArgs> skewedInfo;

    public Optional<Output<CatalogTableStorageDescriptorSkewedInfoGetArgs>> skewedInfo() {
        return Optional.ofNullable(this.skewedInfo);
    }

    /**
     * Configuration block for the sort order of each bucket in the table. See `sort_columns` below.
     * 
     */
    @Import(name="sortColumns")
    private @Nullable Output<List<CatalogTableStorageDescriptorSortColumnGetArgs>> sortColumns;

    public Optional<Output<List<CatalogTableStorageDescriptorSortColumnGetArgs>>> sortColumns() {
        return Optional.ofNullable(this.sortColumns);
    }

    /**
     * Whether the table data is stored in subdirectories.
     * 
     */
    @Import(name="storedAsSubDirectories")
    private @Nullable Output<Boolean> storedAsSubDirectories;

    public Optional<Output<Boolean>> storedAsSubDirectories() {
        return Optional.ofNullable(this.storedAsSubDirectories);
    }

    private CatalogTableStorageDescriptorGetArgs() {}

    private CatalogTableStorageDescriptorGetArgs(CatalogTableStorageDescriptorGetArgs $) {
        this.bucketColumns = $.bucketColumns;
        this.columns = $.columns;
        this.compressed = $.compressed;
        this.inputFormat = $.inputFormat;
        this.location = $.location;
        this.numberOfBuckets = $.numberOfBuckets;
        this.outputFormat = $.outputFormat;
        this.parameters = $.parameters;
        this.schemaReference = $.schemaReference;
        this.serDeInfo = $.serDeInfo;
        this.skewedInfo = $.skewedInfo;
        this.sortColumns = $.sortColumns;
        this.storedAsSubDirectories = $.storedAsSubDirectories;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogTableStorageDescriptorGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogTableStorageDescriptorGetArgs $;

        public Builder() {
            $ = new CatalogTableStorageDescriptorGetArgs();
        }

        public Builder(CatalogTableStorageDescriptorGetArgs defaults) {
            $ = new CatalogTableStorageDescriptorGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder bucketColumns(@Nullable Output<List<String>> bucketColumns) {
            $.bucketColumns = bucketColumns;
            return this;
        }

        public Builder bucketColumns(List<String> bucketColumns) {
            return bucketColumns(Output.of(bucketColumns));
        }

        public Builder bucketColumns(String... bucketColumns) {
            return bucketColumns(List.of(bucketColumns));
        }

        public Builder columns(@Nullable Output<List<CatalogTableStorageDescriptorColumnGetArgs>> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(List<CatalogTableStorageDescriptorColumnGetArgs> columns) {
            return columns(Output.of(columns));
        }

        public Builder columns(CatalogTableStorageDescriptorColumnGetArgs... columns) {
            return columns(List.of(columns));
        }

        public Builder compressed(@Nullable Output<Boolean> compressed) {
            $.compressed = compressed;
            return this;
        }

        public Builder compressed(Boolean compressed) {
            return compressed(Output.of(compressed));
        }

        public Builder inputFormat(@Nullable Output<String> inputFormat) {
            $.inputFormat = inputFormat;
            return this;
        }

        public Builder inputFormat(String inputFormat) {
            return inputFormat(Output.of(inputFormat));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder numberOfBuckets(@Nullable Output<Integer> numberOfBuckets) {
            $.numberOfBuckets = numberOfBuckets;
            return this;
        }

        public Builder numberOfBuckets(Integer numberOfBuckets) {
            return numberOfBuckets(Output.of(numberOfBuckets));
        }

        public Builder outputFormat(@Nullable Output<String> outputFormat) {
            $.outputFormat = outputFormat;
            return this;
        }

        public Builder outputFormat(String outputFormat) {
            return outputFormat(Output.of(outputFormat));
        }

        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder schemaReference(@Nullable Output<CatalogTableStorageDescriptorSchemaReferenceGetArgs> schemaReference) {
            $.schemaReference = schemaReference;
            return this;
        }

        public Builder schemaReference(CatalogTableStorageDescriptorSchemaReferenceGetArgs schemaReference) {
            return schemaReference(Output.of(schemaReference));
        }

        public Builder serDeInfo(@Nullable Output<CatalogTableStorageDescriptorSerDeInfoGetArgs> serDeInfo) {
            $.serDeInfo = serDeInfo;
            return this;
        }

        public Builder serDeInfo(CatalogTableStorageDescriptorSerDeInfoGetArgs serDeInfo) {
            return serDeInfo(Output.of(serDeInfo));
        }

        public Builder skewedInfo(@Nullable Output<CatalogTableStorageDescriptorSkewedInfoGetArgs> skewedInfo) {
            $.skewedInfo = skewedInfo;
            return this;
        }

        public Builder skewedInfo(CatalogTableStorageDescriptorSkewedInfoGetArgs skewedInfo) {
            return skewedInfo(Output.of(skewedInfo));
        }

        public Builder sortColumns(@Nullable Output<List<CatalogTableStorageDescriptorSortColumnGetArgs>> sortColumns) {
            $.sortColumns = sortColumns;
            return this;
        }

        public Builder sortColumns(List<CatalogTableStorageDescriptorSortColumnGetArgs> sortColumns) {
            return sortColumns(Output.of(sortColumns));
        }

        public Builder sortColumns(CatalogTableStorageDescriptorSortColumnGetArgs... sortColumns) {
            return sortColumns(List.of(sortColumns));
        }

        public Builder storedAsSubDirectories(@Nullable Output<Boolean> storedAsSubDirectories) {
            $.storedAsSubDirectories = storedAsSubDirectories;
            return this;
        }

        public Builder storedAsSubDirectories(Boolean storedAsSubDirectories) {
            return storedAsSubDirectories(Output.of(storedAsSubDirectories));
        }

        public CatalogTableStorageDescriptorGetArgs build() {
            return $;
        }
    }

}
