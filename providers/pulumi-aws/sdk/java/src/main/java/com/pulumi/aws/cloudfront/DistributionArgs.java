// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront;

import com.pulumi.aws.cloudfront.inputs.DistributionCustomErrorResponseArgs;
import com.pulumi.aws.cloudfront.inputs.DistributionDefaultCacheBehaviorArgs;
import com.pulumi.aws.cloudfront.inputs.DistributionLoggingConfigArgs;
import com.pulumi.aws.cloudfront.inputs.DistributionOrderedCacheBehaviorArgs;
import com.pulumi.aws.cloudfront.inputs.DistributionOriginArgs;
import com.pulumi.aws.cloudfront.inputs.DistributionOriginGroupArgs;
import com.pulumi.aws.cloudfront.inputs.DistributionRestrictionsArgs;
import com.pulumi.aws.cloudfront.inputs.DistributionViewerCertificateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DistributionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DistributionArgs Empty = new DistributionArgs();

    /**
     * Extra CNAMEs (alternate domain names), if any, for
     * this distribution.
     * 
     */
    @Import(name="aliases")
      private final @Nullable Output<List<String>> aliases;

    public Output<List<String>> aliases() {
        return this.aliases == null ? Codegen.empty() : this.aliases;
    }

    /**
     * Any comments you want to include about the
     * distribution.
     * 
     */
    @Import(name="comment")
      private final @Nullable Output<String> comment;

    public Output<String> comment() {
        return this.comment == null ? Codegen.empty() : this.comment;
    }

    /**
     * One or more custom error response elements (multiples allowed).
     * 
     */
    @Import(name="customErrorResponses")
      private final @Nullable Output<List<DistributionCustomErrorResponseArgs>> customErrorResponses;

    public Output<List<DistributionCustomErrorResponseArgs>> customErrorResponses() {
        return this.customErrorResponses == null ? Codegen.empty() : this.customErrorResponses;
    }

    /**
     * The default cache behavior for this distribution (maximum
     * one).
     * 
     */
    @Import(name="defaultCacheBehavior", required=true)
      private final Output<DistributionDefaultCacheBehaviorArgs> defaultCacheBehavior;

    public Output<DistributionDefaultCacheBehaviorArgs> defaultCacheBehavior() {
        return this.defaultCacheBehavior;
    }

    /**
     * The object that you want CloudFront to
     * return (for example, index.html) when an end user requests the root URL.
     * 
     */
    @Import(name="defaultRootObject")
      private final @Nullable Output<String> defaultRootObject;

    public Output<String> defaultRootObject() {
        return this.defaultRootObject == null ? Codegen.empty() : this.defaultRootObject;
    }

    /**
     * A flag that specifies whether Origin Shield is enabled.
     * 
     */
    @Import(name="enabled", required=true)
      private final Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The maximum HTTP version to support on the
     * distribution. Allowed values are `http1.1` and `http2`. The default is
     * `http2`.
     * 
     */
    @Import(name="httpVersion")
      private final @Nullable Output<String> httpVersion;

    public Output<String> httpVersion() {
        return this.httpVersion == null ? Codegen.empty() : this.httpVersion;
    }

    /**
     * Whether the IPv6 is enabled for the distribution.
     * 
     */
    @Import(name="isIpv6Enabled")
      private final @Nullable Output<Boolean> isIpv6Enabled;

    public Output<Boolean> isIpv6Enabled() {
        return this.isIpv6Enabled == null ? Codegen.empty() : this.isIpv6Enabled;
    }

    /**
     * The logging
     * configuration that controls how logs are written
     * to your distribution (maximum one).
     * 
     */
    @Import(name="loggingConfig")
      private final @Nullable Output<DistributionLoggingConfigArgs> loggingConfig;

    public Output<DistributionLoggingConfigArgs> loggingConfig() {
        return this.loggingConfig == null ? Codegen.empty() : this.loggingConfig;
    }

    /**
     * An ordered list of cache behaviors
     * resource for this distribution. List from top to bottom
     * in order of precedence. The topmost cache behavior will have precedence 0.
     * 
     */
    @Import(name="orderedCacheBehaviors")
      private final @Nullable Output<List<DistributionOrderedCacheBehaviorArgs>> orderedCacheBehaviors;

    public Output<List<DistributionOrderedCacheBehaviorArgs>> orderedCacheBehaviors() {
        return this.orderedCacheBehaviors == null ? Codegen.empty() : this.orderedCacheBehaviors;
    }

    /**
     * One or more origin_group for this
     * distribution (multiples allowed).
     * 
     */
    @Import(name="originGroups")
      private final @Nullable Output<List<DistributionOriginGroupArgs>> originGroups;

    public Output<List<DistributionOriginGroupArgs>> originGroups() {
        return this.originGroups == null ? Codegen.empty() : this.originGroups;
    }

    /**
     * One or more origins for this
     * distribution (multiples allowed).
     * 
     */
    @Import(name="origins", required=true)
      private final Output<List<DistributionOriginArgs>> origins;

    public Output<List<DistributionOriginArgs>> origins() {
        return this.origins;
    }

    /**
     * The price class for this distribution. One of
     * `PriceClass_All`, `PriceClass_200`, `PriceClass_100`
     * 
     */
    @Import(name="priceClass")
      private final @Nullable Output<String> priceClass;

    public Output<String> priceClass() {
        return this.priceClass == null ? Codegen.empty() : this.priceClass;
    }

    /**
     * The restriction
     * configuration for this distribution (maximum one).
     * 
     */
    @Import(name="restrictions", required=true)
      private final Output<DistributionRestrictionsArgs> restrictions;

    public Output<DistributionRestrictionsArgs> restrictions() {
        return this.restrictions;
    }

    /**
     * Disables the distribution instead of
     * deleting it when destroying the resource. If this is set,
     * the distribution needs to be deleted manually afterwards. Default: `false`.
     * 
     */
    @Import(name="retainOnDelete")
      private final @Nullable Output<Boolean> retainOnDelete;

    public Output<Boolean> retainOnDelete() {
        return this.retainOnDelete == null ? Codegen.empty() : this.retainOnDelete;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The SSL
     * configuration for this distribution (maximum
     * one).
     * 
     */
    @Import(name="viewerCertificate", required=true)
      private final Output<DistributionViewerCertificateArgs> viewerCertificate;

    public Output<DistributionViewerCertificateArgs> viewerCertificate() {
        return this.viewerCertificate;
    }

    /**
     * If enabled, the resource will wait for
     * the distribution status to change from `InProgress` to `Deployed`. Setting
     * this to`false` will skip the process. Default: `true`.
     * 
     */
    @Import(name="waitForDeployment")
      private final @Nullable Output<Boolean> waitForDeployment;

    public Output<Boolean> waitForDeployment() {
        return this.waitForDeployment == null ? Codegen.empty() : this.waitForDeployment;
    }

    /**
     * A unique identifier that specifies the AWS WAF web ACL,
     * if any, to associate with this distribution.
     * To specify a web ACL created using the latest version of AWS WAF (WAFv2), use the ACL ARN,
     * for example `aws_wafv2_web_acl.example.arn`. To specify a web
     * ACL created using AWS WAF Classic, use the ACL ID, for example `aws_waf_web_acl.example.id`.
     * The WAF Web ACL must exist in the WAF Global (CloudFront) region and the
     * credentials configuring this argument must have `waf:GetWebACL` permissions assigned.
     * 
     */
    @Import(name="webAclId")
      private final @Nullable Output<String> webAclId;

    public Output<String> webAclId() {
        return this.webAclId == null ? Codegen.empty() : this.webAclId;
    }

    public DistributionArgs(
        @Nullable Output<List<String>> aliases,
        @Nullable Output<String> comment,
        @Nullable Output<List<DistributionCustomErrorResponseArgs>> customErrorResponses,
        Output<DistributionDefaultCacheBehaviorArgs> defaultCacheBehavior,
        @Nullable Output<String> defaultRootObject,
        Output<Boolean> enabled,
        @Nullable Output<String> httpVersion,
        @Nullable Output<Boolean> isIpv6Enabled,
        @Nullable Output<DistributionLoggingConfigArgs> loggingConfig,
        @Nullable Output<List<DistributionOrderedCacheBehaviorArgs>> orderedCacheBehaviors,
        @Nullable Output<List<DistributionOriginGroupArgs>> originGroups,
        Output<List<DistributionOriginArgs>> origins,
        @Nullable Output<String> priceClass,
        Output<DistributionRestrictionsArgs> restrictions,
        @Nullable Output<Boolean> retainOnDelete,
        @Nullable Output<Map<String,String>> tags,
        Output<DistributionViewerCertificateArgs> viewerCertificate,
        @Nullable Output<Boolean> waitForDeployment,
        @Nullable Output<String> webAclId) {
        this.aliases = aliases;
        this.comment = comment;
        this.customErrorResponses = customErrorResponses;
        this.defaultCacheBehavior = Objects.requireNonNull(defaultCacheBehavior, "expected parameter 'defaultCacheBehavior' to be non-null");
        this.defaultRootObject = defaultRootObject;
        this.enabled = Objects.requireNonNull(enabled, "expected parameter 'enabled' to be non-null");
        this.httpVersion = httpVersion;
        this.isIpv6Enabled = isIpv6Enabled;
        this.loggingConfig = loggingConfig;
        this.orderedCacheBehaviors = orderedCacheBehaviors;
        this.originGroups = originGroups;
        this.origins = Objects.requireNonNull(origins, "expected parameter 'origins' to be non-null");
        this.priceClass = priceClass;
        this.restrictions = Objects.requireNonNull(restrictions, "expected parameter 'restrictions' to be non-null");
        this.retainOnDelete = retainOnDelete;
        this.tags = tags;
        this.viewerCertificate = Objects.requireNonNull(viewerCertificate, "expected parameter 'viewerCertificate' to be non-null");
        this.waitForDeployment = waitForDeployment;
        this.webAclId = webAclId;
    }

    private DistributionArgs() {
        this.aliases = Codegen.empty();
        this.comment = Codegen.empty();
        this.customErrorResponses = Codegen.empty();
        this.defaultCacheBehavior = Codegen.empty();
        this.defaultRootObject = Codegen.empty();
        this.enabled = Codegen.empty();
        this.httpVersion = Codegen.empty();
        this.isIpv6Enabled = Codegen.empty();
        this.loggingConfig = Codegen.empty();
        this.orderedCacheBehaviors = Codegen.empty();
        this.originGroups = Codegen.empty();
        this.origins = Codegen.empty();
        this.priceClass = Codegen.empty();
        this.restrictions = Codegen.empty();
        this.retainOnDelete = Codegen.empty();
        this.tags = Codegen.empty();
        this.viewerCertificate = Codegen.empty();
        this.waitForDeployment = Codegen.empty();
        this.webAclId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DistributionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> aliases;
        private @Nullable Output<String> comment;
        private @Nullable Output<List<DistributionCustomErrorResponseArgs>> customErrorResponses;
        private Output<DistributionDefaultCacheBehaviorArgs> defaultCacheBehavior;
        private @Nullable Output<String> defaultRootObject;
        private Output<Boolean> enabled;
        private @Nullable Output<String> httpVersion;
        private @Nullable Output<Boolean> isIpv6Enabled;
        private @Nullable Output<DistributionLoggingConfigArgs> loggingConfig;
        private @Nullable Output<List<DistributionOrderedCacheBehaviorArgs>> orderedCacheBehaviors;
        private @Nullable Output<List<DistributionOriginGroupArgs>> originGroups;
        private Output<List<DistributionOriginArgs>> origins;
        private @Nullable Output<String> priceClass;
        private Output<DistributionRestrictionsArgs> restrictions;
        private @Nullable Output<Boolean> retainOnDelete;
        private @Nullable Output<Map<String,String>> tags;
        private Output<DistributionViewerCertificateArgs> viewerCertificate;
        private @Nullable Output<Boolean> waitForDeployment;
        private @Nullable Output<String> webAclId;

        public Builder() {
    	      // Empty
        }

        public Builder(DistributionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliases = defaults.aliases;
    	      this.comment = defaults.comment;
    	      this.customErrorResponses = defaults.customErrorResponses;
    	      this.defaultCacheBehavior = defaults.defaultCacheBehavior;
    	      this.defaultRootObject = defaults.defaultRootObject;
    	      this.enabled = defaults.enabled;
    	      this.httpVersion = defaults.httpVersion;
    	      this.isIpv6Enabled = defaults.isIpv6Enabled;
    	      this.loggingConfig = defaults.loggingConfig;
    	      this.orderedCacheBehaviors = defaults.orderedCacheBehaviors;
    	      this.originGroups = defaults.originGroups;
    	      this.origins = defaults.origins;
    	      this.priceClass = defaults.priceClass;
    	      this.restrictions = defaults.restrictions;
    	      this.retainOnDelete = defaults.retainOnDelete;
    	      this.tags = defaults.tags;
    	      this.viewerCertificate = defaults.viewerCertificate;
    	      this.waitForDeployment = defaults.waitForDeployment;
    	      this.webAclId = defaults.webAclId;
        }

        public Builder aliases(@Nullable Output<List<String>> aliases) {
            this.aliases = aliases;
            return this;
        }
        public Builder aliases(@Nullable List<String> aliases) {
            this.aliases = Codegen.ofNullable(aliases);
            return this;
        }
        public Builder aliases(String... aliases) {
            return aliases(List.of(aliases));
        }
        public Builder comment(@Nullable Output<String> comment) {
            this.comment = comment;
            return this;
        }
        public Builder comment(@Nullable String comment) {
            this.comment = Codegen.ofNullable(comment);
            return this;
        }
        public Builder customErrorResponses(@Nullable Output<List<DistributionCustomErrorResponseArgs>> customErrorResponses) {
            this.customErrorResponses = customErrorResponses;
            return this;
        }
        public Builder customErrorResponses(@Nullable List<DistributionCustomErrorResponseArgs> customErrorResponses) {
            this.customErrorResponses = Codegen.ofNullable(customErrorResponses);
            return this;
        }
        public Builder customErrorResponses(DistributionCustomErrorResponseArgs... customErrorResponses) {
            return customErrorResponses(List.of(customErrorResponses));
        }
        public Builder defaultCacheBehavior(Output<DistributionDefaultCacheBehaviorArgs> defaultCacheBehavior) {
            this.defaultCacheBehavior = Objects.requireNonNull(defaultCacheBehavior);
            return this;
        }
        public Builder defaultCacheBehavior(DistributionDefaultCacheBehaviorArgs defaultCacheBehavior) {
            this.defaultCacheBehavior = Output.of(Objects.requireNonNull(defaultCacheBehavior));
            return this;
        }
        public Builder defaultRootObject(@Nullable Output<String> defaultRootObject) {
            this.defaultRootObject = defaultRootObject;
            return this;
        }
        public Builder defaultRootObject(@Nullable String defaultRootObject) {
            this.defaultRootObject = Codegen.ofNullable(defaultRootObject);
            return this;
        }
        public Builder enabled(Output<Boolean> enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Output.of(Objects.requireNonNull(enabled));
            return this;
        }
        public Builder httpVersion(@Nullable Output<String> httpVersion) {
            this.httpVersion = httpVersion;
            return this;
        }
        public Builder httpVersion(@Nullable String httpVersion) {
            this.httpVersion = Codegen.ofNullable(httpVersion);
            return this;
        }
        public Builder isIpv6Enabled(@Nullable Output<Boolean> isIpv6Enabled) {
            this.isIpv6Enabled = isIpv6Enabled;
            return this;
        }
        public Builder isIpv6Enabled(@Nullable Boolean isIpv6Enabled) {
            this.isIpv6Enabled = Codegen.ofNullable(isIpv6Enabled);
            return this;
        }
        public Builder loggingConfig(@Nullable Output<DistributionLoggingConfigArgs> loggingConfig) {
            this.loggingConfig = loggingConfig;
            return this;
        }
        public Builder loggingConfig(@Nullable DistributionLoggingConfigArgs loggingConfig) {
            this.loggingConfig = Codegen.ofNullable(loggingConfig);
            return this;
        }
        public Builder orderedCacheBehaviors(@Nullable Output<List<DistributionOrderedCacheBehaviorArgs>> orderedCacheBehaviors) {
            this.orderedCacheBehaviors = orderedCacheBehaviors;
            return this;
        }
        public Builder orderedCacheBehaviors(@Nullable List<DistributionOrderedCacheBehaviorArgs> orderedCacheBehaviors) {
            this.orderedCacheBehaviors = Codegen.ofNullable(orderedCacheBehaviors);
            return this;
        }
        public Builder orderedCacheBehaviors(DistributionOrderedCacheBehaviorArgs... orderedCacheBehaviors) {
            return orderedCacheBehaviors(List.of(orderedCacheBehaviors));
        }
        public Builder originGroups(@Nullable Output<List<DistributionOriginGroupArgs>> originGroups) {
            this.originGroups = originGroups;
            return this;
        }
        public Builder originGroups(@Nullable List<DistributionOriginGroupArgs> originGroups) {
            this.originGroups = Codegen.ofNullable(originGroups);
            return this;
        }
        public Builder originGroups(DistributionOriginGroupArgs... originGroups) {
            return originGroups(List.of(originGroups));
        }
        public Builder origins(Output<List<DistributionOriginArgs>> origins) {
            this.origins = Objects.requireNonNull(origins);
            return this;
        }
        public Builder origins(List<DistributionOriginArgs> origins) {
            this.origins = Output.of(Objects.requireNonNull(origins));
            return this;
        }
        public Builder origins(DistributionOriginArgs... origins) {
            return origins(List.of(origins));
        }
        public Builder priceClass(@Nullable Output<String> priceClass) {
            this.priceClass = priceClass;
            return this;
        }
        public Builder priceClass(@Nullable String priceClass) {
            this.priceClass = Codegen.ofNullable(priceClass);
            return this;
        }
        public Builder restrictions(Output<DistributionRestrictionsArgs> restrictions) {
            this.restrictions = Objects.requireNonNull(restrictions);
            return this;
        }
        public Builder restrictions(DistributionRestrictionsArgs restrictions) {
            this.restrictions = Output.of(Objects.requireNonNull(restrictions));
            return this;
        }
        public Builder retainOnDelete(@Nullable Output<Boolean> retainOnDelete) {
            this.retainOnDelete = retainOnDelete;
            return this;
        }
        public Builder retainOnDelete(@Nullable Boolean retainOnDelete) {
            this.retainOnDelete = Codegen.ofNullable(retainOnDelete);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder viewerCertificate(Output<DistributionViewerCertificateArgs> viewerCertificate) {
            this.viewerCertificate = Objects.requireNonNull(viewerCertificate);
            return this;
        }
        public Builder viewerCertificate(DistributionViewerCertificateArgs viewerCertificate) {
            this.viewerCertificate = Output.of(Objects.requireNonNull(viewerCertificate));
            return this;
        }
        public Builder waitForDeployment(@Nullable Output<Boolean> waitForDeployment) {
            this.waitForDeployment = waitForDeployment;
            return this;
        }
        public Builder waitForDeployment(@Nullable Boolean waitForDeployment) {
            this.waitForDeployment = Codegen.ofNullable(waitForDeployment);
            return this;
        }
        public Builder webAclId(@Nullable Output<String> webAclId) {
            this.webAclId = webAclId;
            return this;
        }
        public Builder webAclId(@Nullable String webAclId) {
            this.webAclId = Codegen.ofNullable(webAclId);
            return this;
        }        public DistributionArgs build() {
            return new DistributionArgs(aliases, comment, customErrorResponses, defaultCacheBehavior, defaultRootObject, enabled, httpVersion, isIpv6Enabled, loggingConfig, orderedCacheBehaviors, originGroups, origins, priceClass, restrictions, retainOnDelete, tags, viewerCertificate, waitForDeployment, webAclId);
        }
    }
}
