// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.inputs;

import com.pulumi.aws.inputs.GetElasticIpFilter;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetElasticIpArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetElasticIpArgs Empty = new GetElasticIpArgs();

    /**
     * One or more name/value pairs to use as filters. There are several valid keys, for a full reference, check out the [EC2 API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAddresses.html).
     * 
     */
    @Import(name="filters")
    private @Nullable List<GetElasticIpFilter> filters;

    public Optional<List<GetElasticIpFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The allocation id of the specific VPC EIP to retrieve. If a classic EIP is required, do NOT set `id`, only set `public_ip`
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The public IP of the specific EIP to retrieve.
     * 
     */
    @Import(name="publicIp")
    private @Nullable String publicIp;

    public Optional<String> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }

    /**
     * A map of tags, each pair of which must exactly match a pair on the desired Elastic IP
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetElasticIpArgs() {}

    private GetElasticIpArgs(GetElasticIpArgs $) {
        this.filters = $.filters;
        this.id = $.id;
        this.publicIp = $.publicIp;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetElasticIpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetElasticIpArgs $;

        public Builder() {
            $ = new GetElasticIpArgs();
        }

        public Builder(GetElasticIpArgs defaults) {
            $ = new GetElasticIpArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetElasticIpFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetElasticIpFilter... filters) {
            return filters(List.of(filters));
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder publicIp(@Nullable String publicIp) {
            $.publicIp = publicIp;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public GetElasticIpArgs build() {
            return $;
        }
    }

}
