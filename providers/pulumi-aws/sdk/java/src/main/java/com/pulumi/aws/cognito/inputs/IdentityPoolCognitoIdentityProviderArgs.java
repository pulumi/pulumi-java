// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class IdentityPoolCognitoIdentityProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentityPoolCognitoIdentityProviderArgs Empty = new IdentityPoolCognitoIdentityProviderArgs();

    /**
     * The client ID for the Amazon Cognito Identity User Pool.
     * 
     */
    @Import(name="clientId")
      private final @Nullable Output<String> clientId;

    public Output<String> clientId() {
        return this.clientId == null ? Codegen.empty() : this.clientId;
    }

    /**
     * The provider name for an Amazon Cognito Identity User Pool.
     * 
     */
    @Import(name="providerName")
      private final @Nullable Output<String> providerName;

    public Output<String> providerName() {
        return this.providerName == null ? Codegen.empty() : this.providerName;
    }

    /**
     * Whether server-side token validation is enabled for the identity providerâ€™s token or not.
     * 
     */
    @Import(name="serverSideTokenCheck")
      private final @Nullable Output<Boolean> serverSideTokenCheck;

    public Output<Boolean> serverSideTokenCheck() {
        return this.serverSideTokenCheck == null ? Codegen.empty() : this.serverSideTokenCheck;
    }

    public IdentityPoolCognitoIdentityProviderArgs(
        @Nullable Output<String> clientId,
        @Nullable Output<String> providerName,
        @Nullable Output<Boolean> serverSideTokenCheck) {
        this.clientId = clientId;
        this.providerName = providerName;
        this.serverSideTokenCheck = serverSideTokenCheck;
    }

    private IdentityPoolCognitoIdentityProviderArgs() {
        this.clientId = Codegen.empty();
        this.providerName = Codegen.empty();
        this.serverSideTokenCheck = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IdentityPoolCognitoIdentityProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> clientId;
        private @Nullable Output<String> providerName;
        private @Nullable Output<Boolean> serverSideTokenCheck;

        public Builder() {
    	      // Empty
        }

        public Builder(IdentityPoolCognitoIdentityProviderArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.providerName = defaults.providerName;
    	      this.serverSideTokenCheck = defaults.serverSideTokenCheck;
        }

        public Builder clientId(@Nullable Output<String> clientId) {
            this.clientId = clientId;
            return this;
        }
        public Builder clientId(@Nullable String clientId) {
            this.clientId = Codegen.ofNullable(clientId);
            return this;
        }
        public Builder providerName(@Nullable Output<String> providerName) {
            this.providerName = providerName;
            return this;
        }
        public Builder providerName(@Nullable String providerName) {
            this.providerName = Codegen.ofNullable(providerName);
            return this;
        }
        public Builder serverSideTokenCheck(@Nullable Output<Boolean> serverSideTokenCheck) {
            this.serverSideTokenCheck = serverSideTokenCheck;
            return this;
        }
        public Builder serverSideTokenCheck(@Nullable Boolean serverSideTokenCheck) {
            this.serverSideTokenCheck = Codegen.ofNullable(serverSideTokenCheck);
            return this;
        }        public IdentityPoolCognitoIdentityProviderArgs build() {
            return new IdentityPoolCognitoIdentityProviderArgs(clientId, providerName, serverSideTokenCheck);
        }
    }
}
