// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront.inputs;

import com.pulumi.aws.cloudfront.inputs.CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigGetArgs;
import com.pulumi.aws.cloudfront.inputs.CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigGetArgs;
import com.pulumi.aws.cloudfront.inputs.CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs Empty = new CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs();

    /**
     * Object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
     * 
     */
    @Import(name="cookiesConfig", required=true)
    private Output<CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigGetArgs> cookiesConfig;

    /**
     * @return Object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
     * 
     */
    public Output<CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigGetArgs> cookiesConfig() {
        return this.cookiesConfig;
    }

    /**
     * A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
     * 
     */
    @Import(name="enableAcceptEncodingBrotli")
    private @Nullable Output<Boolean> enableAcceptEncodingBrotli;

    /**
     * @return A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
     * 
     */
    public Optional<Output<Boolean>> enableAcceptEncodingBrotli() {
        return Optional.ofNullable(this.enableAcceptEncodingBrotli);
    }

    /**
     * A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
     * 
     */
    @Import(name="enableAcceptEncodingGzip")
    private @Nullable Output<Boolean> enableAcceptEncodingGzip;

    /**
     * @return A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
     * 
     */
    public Optional<Output<Boolean>> enableAcceptEncodingGzip() {
        return Optional.ofNullable(this.enableAcceptEncodingGzip);
    }

    /**
     * Object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
     * 
     */
    @Import(name="headersConfig", required=true)
    private Output<CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigGetArgs> headersConfig;

    /**
     * @return Object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
     * 
     */
    public Output<CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigGetArgs> headersConfig() {
        return this.headersConfig;
    }

    /**
     * Object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Query String Config for more information.
     * 
     */
    @Import(name="queryStringsConfig", required=true)
    private Output<CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigGetArgs> queryStringsConfig;

    /**
     * @return Object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Query String Config for more information.
     * 
     */
    public Output<CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigGetArgs> queryStringsConfig() {
        return this.queryStringsConfig;
    }

    private CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs() {}

    private CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs(CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs $) {
        this.cookiesConfig = $.cookiesConfig;
        this.enableAcceptEncodingBrotli = $.enableAcceptEncodingBrotli;
        this.enableAcceptEncodingGzip = $.enableAcceptEncodingGzip;
        this.headersConfig = $.headersConfig;
        this.queryStringsConfig = $.queryStringsConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs $;

        public Builder() {
            $ = new CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs();
        }

        public Builder(CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs defaults) {
            $ = new CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cookiesConfig Object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
         * 
         * @return builder
         * 
         */
        public Builder cookiesConfig(Output<CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigGetArgs> cookiesConfig) {
            $.cookiesConfig = cookiesConfig;
            return this;
        }

        /**
         * @param cookiesConfig Object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
         * 
         * @return builder
         * 
         */
        public Builder cookiesConfig(CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigGetArgs cookiesConfig) {
            return cookiesConfig(Output.of(cookiesConfig));
        }

        /**
         * @param enableAcceptEncodingBrotli A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
         * 
         * @return builder
         * 
         */
        public Builder enableAcceptEncodingBrotli(@Nullable Output<Boolean> enableAcceptEncodingBrotli) {
            $.enableAcceptEncodingBrotli = enableAcceptEncodingBrotli;
            return this;
        }

        /**
         * @param enableAcceptEncodingBrotli A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
         * 
         * @return builder
         * 
         */
        public Builder enableAcceptEncodingBrotli(Boolean enableAcceptEncodingBrotli) {
            return enableAcceptEncodingBrotli(Output.of(enableAcceptEncodingBrotli));
        }

        /**
         * @param enableAcceptEncodingGzip A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
         * 
         * @return builder
         * 
         */
        public Builder enableAcceptEncodingGzip(@Nullable Output<Boolean> enableAcceptEncodingGzip) {
            $.enableAcceptEncodingGzip = enableAcceptEncodingGzip;
            return this;
        }

        /**
         * @param enableAcceptEncodingGzip A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
         * 
         * @return builder
         * 
         */
        public Builder enableAcceptEncodingGzip(Boolean enableAcceptEncodingGzip) {
            return enableAcceptEncodingGzip(Output.of(enableAcceptEncodingGzip));
        }

        /**
         * @param headersConfig Object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
         * 
         * @return builder
         * 
         */
        public Builder headersConfig(Output<CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigGetArgs> headersConfig) {
            $.headersConfig = headersConfig;
            return this;
        }

        /**
         * @param headersConfig Object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
         * 
         * @return builder
         * 
         */
        public Builder headersConfig(CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigGetArgs headersConfig) {
            return headersConfig(Output.of(headersConfig));
        }

        /**
         * @param queryStringsConfig Object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Query String Config for more information.
         * 
         * @return builder
         * 
         */
        public Builder queryStringsConfig(Output<CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigGetArgs> queryStringsConfig) {
            $.queryStringsConfig = queryStringsConfig;
            return this;
        }

        /**
         * @param queryStringsConfig Object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Query String Config for more information.
         * 
         * @return builder
         * 
         */
        public Builder queryStringsConfig(CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigGetArgs queryStringsConfig) {
            return queryStringsConfig(Output.of(queryStringsConfig));
        }

        public CachePolicyParametersInCacheKeyAndForwardedToOriginGetArgs build() {
            $.cookiesConfig = Objects.requireNonNull($.cookiesConfig, "expected parameter 'cookiesConfig' to be non-null");
            $.headersConfig = Objects.requireNonNull($.headersConfig, "expected parameter 'headersConfig' to be non-null");
            $.queryStringsConfig = Objects.requireNonNull($.queryStringsConfig, "expected parameter 'queryStringsConfig' to be non-null");
            return $;
        }
    }

}
