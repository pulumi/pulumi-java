// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLaunchTemplateNetworkInterface extends com.pulumi.resources.InvokeArgs {

    public static final GetLaunchTemplateNetworkInterface Empty = new GetLaunchTemplateNetworkInterface();

    @Import(name="associateCarrierIpAddress", required=true)
    private String associateCarrierIpAddress;

    public String associateCarrierIpAddress() {
        return this.associateCarrierIpAddress;
    }

    @Import(name="associatePublicIpAddress")
    private @Nullable Boolean associatePublicIpAddress;

    public Optional<Boolean> associatePublicIpAddress() {
        return Optional.ofNullable(this.associatePublicIpAddress);
    }

    @Import(name="deleteOnTermination")
    private @Nullable Boolean deleteOnTermination;

    public Optional<Boolean> deleteOnTermination() {
        return Optional.ofNullable(this.deleteOnTermination);
    }

    /**
     * Description of the launch template.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return Description of the launch template.
     * 
     */
    public String description() {
        return this.description;
    }

    @Import(name="deviceIndex", required=true)
    private Integer deviceIndex;

    public Integer deviceIndex() {
        return this.deviceIndex;
    }

    @Import(name="interfaceType", required=true)
    private String interfaceType;

    public String interfaceType() {
        return this.interfaceType;
    }

    @Import(name="ipv4AddressCount", required=true)
    private Integer ipv4AddressCount;

    public Integer ipv4AddressCount() {
        return this.ipv4AddressCount;
    }

    @Import(name="ipv4Addresses", required=true)
    private List<String> ipv4Addresses;

    public List<String> ipv4Addresses() {
        return this.ipv4Addresses;
    }

    @Import(name="ipv6AddressCount", required=true)
    private Integer ipv6AddressCount;

    public Integer ipv6AddressCount() {
        return this.ipv6AddressCount;
    }

    @Import(name="ipv6Addresses", required=true)
    private List<String> ipv6Addresses;

    public List<String> ipv6Addresses() {
        return this.ipv6Addresses;
    }

    @Import(name="networkCardIndex")
    private @Nullable Integer networkCardIndex;

    public Optional<Integer> networkCardIndex() {
        return Optional.ofNullable(this.networkCardIndex);
    }

    @Import(name="networkInterfaceId", required=true)
    private String networkInterfaceId;

    public String networkInterfaceId() {
        return this.networkInterfaceId;
    }

    @Import(name="privateIpAddress", required=true)
    private String privateIpAddress;

    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    @Import(name="securityGroups", required=true)
    private List<String> securityGroups;

    public List<String> securityGroups() {
        return this.securityGroups;
    }

    @Import(name="subnetId", required=true)
    private String subnetId;

    public String subnetId() {
        return this.subnetId;
    }

    private GetLaunchTemplateNetworkInterface() {}

    private GetLaunchTemplateNetworkInterface(GetLaunchTemplateNetworkInterface $) {
        this.associateCarrierIpAddress = $.associateCarrierIpAddress;
        this.associatePublicIpAddress = $.associatePublicIpAddress;
        this.deleteOnTermination = $.deleteOnTermination;
        this.description = $.description;
        this.deviceIndex = $.deviceIndex;
        this.interfaceType = $.interfaceType;
        this.ipv4AddressCount = $.ipv4AddressCount;
        this.ipv4Addresses = $.ipv4Addresses;
        this.ipv6AddressCount = $.ipv6AddressCount;
        this.ipv6Addresses = $.ipv6Addresses;
        this.networkCardIndex = $.networkCardIndex;
        this.networkInterfaceId = $.networkInterfaceId;
        this.privateIpAddress = $.privateIpAddress;
        this.securityGroups = $.securityGroups;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLaunchTemplateNetworkInterface defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLaunchTemplateNetworkInterface $;

        public Builder() {
            $ = new GetLaunchTemplateNetworkInterface();
        }

        public Builder(GetLaunchTemplateNetworkInterface defaults) {
            $ = new GetLaunchTemplateNetworkInterface(Objects.requireNonNull(defaults));
        }

        public Builder associateCarrierIpAddress(String associateCarrierIpAddress) {
            $.associateCarrierIpAddress = associateCarrierIpAddress;
            return this;
        }

        public Builder associatePublicIpAddress(@Nullable Boolean associatePublicIpAddress) {
            $.associatePublicIpAddress = associatePublicIpAddress;
            return this;
        }

        public Builder deleteOnTermination(@Nullable Boolean deleteOnTermination) {
            $.deleteOnTermination = deleteOnTermination;
            return this;
        }

        /**
         * @param description Description of the launch template.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder deviceIndex(Integer deviceIndex) {
            $.deviceIndex = deviceIndex;
            return this;
        }

        public Builder interfaceType(String interfaceType) {
            $.interfaceType = interfaceType;
            return this;
        }

        public Builder ipv4AddressCount(Integer ipv4AddressCount) {
            $.ipv4AddressCount = ipv4AddressCount;
            return this;
        }

        public Builder ipv4Addresses(List<String> ipv4Addresses) {
            $.ipv4Addresses = ipv4Addresses;
            return this;
        }

        public Builder ipv4Addresses(String... ipv4Addresses) {
            return ipv4Addresses(List.of(ipv4Addresses));
        }

        public Builder ipv6AddressCount(Integer ipv6AddressCount) {
            $.ipv6AddressCount = ipv6AddressCount;
            return this;
        }

        public Builder ipv6Addresses(List<String> ipv6Addresses) {
            $.ipv6Addresses = ipv6Addresses;
            return this;
        }

        public Builder ipv6Addresses(String... ipv6Addresses) {
            return ipv6Addresses(List.of(ipv6Addresses));
        }

        public Builder networkCardIndex(@Nullable Integer networkCardIndex) {
            $.networkCardIndex = networkCardIndex;
            return this;
        }

        public Builder networkInterfaceId(String networkInterfaceId) {
            $.networkInterfaceId = networkInterfaceId;
            return this;
        }

        public Builder privateIpAddress(String privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder securityGroups(List<String> securityGroups) {
            $.securityGroups = securityGroups;
            return this;
        }

        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }

        public Builder subnetId(String subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        public GetLaunchTemplateNetworkInterface build() {
            $.associateCarrierIpAddress = Objects.requireNonNull($.associateCarrierIpAddress, "expected parameter 'associateCarrierIpAddress' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.deviceIndex = Objects.requireNonNull($.deviceIndex, "expected parameter 'deviceIndex' to be non-null");
            $.interfaceType = Objects.requireNonNull($.interfaceType, "expected parameter 'interfaceType' to be non-null");
            $.ipv4AddressCount = Objects.requireNonNull($.ipv4AddressCount, "expected parameter 'ipv4AddressCount' to be non-null");
            $.ipv4Addresses = Objects.requireNonNull($.ipv4Addresses, "expected parameter 'ipv4Addresses' to be non-null");
            $.ipv6AddressCount = Objects.requireNonNull($.ipv6AddressCount, "expected parameter 'ipv6AddressCount' to be non-null");
            $.ipv6Addresses = Objects.requireNonNull($.ipv6Addresses, "expected parameter 'ipv6Addresses' to be non-null");
            $.networkInterfaceId = Objects.requireNonNull($.networkInterfaceId, "expected parameter 'networkInterfaceId' to be non-null");
            $.privateIpAddress = Objects.requireNonNull($.privateIpAddress, "expected parameter 'privateIpAddress' to be non-null");
            $.securityGroups = Objects.requireNonNull($.securityGroups, "expected parameter 'securityGroups' to be non-null");
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            return $;
        }
    }

}
