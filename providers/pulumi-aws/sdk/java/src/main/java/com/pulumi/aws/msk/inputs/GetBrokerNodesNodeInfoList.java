// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.msk.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetBrokerNodesNodeInfoList extends com.pulumi.resources.InvokeArgs {

    public static final GetBrokerNodesNodeInfoList Empty = new GetBrokerNodesNodeInfoList();

    /**
     * The attached elastic network interface of the broker
     * 
     */
    @Import(name="attachedEniId", required=true)
    private String attachedEniId;

    public String attachedEniId() {
        return this.attachedEniId;
    }

    /**
     * The ID of the broker
     * 
     */
    @Import(name="brokerId", required=true)
    private Double brokerId;

    public Double brokerId() {
        return this.brokerId;
    }

    /**
     * The client subnet to which this broker node belongs
     * 
     */
    @Import(name="clientSubnet", required=true)
    private String clientSubnet;

    public String clientSubnet() {
        return this.clientSubnet;
    }

    /**
     * The client virtual private cloud (VPC) IP address
     * 
     */
    @Import(name="clientVpcIpAddress", required=true)
    private String clientVpcIpAddress;

    public String clientVpcIpAddress() {
        return this.clientVpcIpAddress;
    }

    /**
     * Set of endpoints for accessing the broker. This does not include ports
     * 
     */
    @Import(name="endpoints", required=true)
    private List<String> endpoints;

    public List<String> endpoints() {
        return this.endpoints;
    }

    /**
     * The Amazon Resource Name (ARN) of the node
     * 
     */
    @Import(name="nodeArn", required=true)
    private String nodeArn;

    public String nodeArn() {
        return this.nodeArn;
    }

    private GetBrokerNodesNodeInfoList() {}

    private GetBrokerNodesNodeInfoList(GetBrokerNodesNodeInfoList $) {
        this.attachedEniId = $.attachedEniId;
        this.brokerId = $.brokerId;
        this.clientSubnet = $.clientSubnet;
        this.clientVpcIpAddress = $.clientVpcIpAddress;
        this.endpoints = $.endpoints;
        this.nodeArn = $.nodeArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBrokerNodesNodeInfoList defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBrokerNodesNodeInfoList $;

        public Builder() {
            $ = new GetBrokerNodesNodeInfoList();
        }

        public Builder(GetBrokerNodesNodeInfoList defaults) {
            $ = new GetBrokerNodesNodeInfoList(Objects.requireNonNull(defaults));
        }

        public Builder attachedEniId(String attachedEniId) {
            $.attachedEniId = attachedEniId;
            return this;
        }

        public Builder brokerId(Double brokerId) {
            $.brokerId = brokerId;
            return this;
        }

        public Builder clientSubnet(String clientSubnet) {
            $.clientSubnet = clientSubnet;
            return this;
        }

        public Builder clientVpcIpAddress(String clientVpcIpAddress) {
            $.clientVpcIpAddress = clientVpcIpAddress;
            return this;
        }

        public Builder endpoints(List<String> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        public Builder endpoints(String... endpoints) {
            return endpoints(List.of(endpoints));
        }

        public Builder nodeArn(String nodeArn) {
            $.nodeArn = nodeArn;
            return this;
        }

        public GetBrokerNodesNodeInfoList build() {
            $.attachedEniId = Objects.requireNonNull($.attachedEniId, "expected parameter 'attachedEniId' to be non-null");
            $.brokerId = Objects.requireNonNull($.brokerId, "expected parameter 'brokerId' to be non-null");
            $.clientSubnet = Objects.requireNonNull($.clientSubnet, "expected parameter 'clientSubnet' to be non-null");
            $.clientVpcIpAddress = Objects.requireNonNull($.clientVpcIpAddress, "expected parameter 'clientVpcIpAddress' to be non-null");
            $.endpoints = Objects.requireNonNull($.endpoints, "expected parameter 'endpoints' to be non-null");
            $.nodeArn = Objects.requireNonNull($.nodeArn, "expected parameter 'nodeArn' to be non-null");
            return $;
        }
    }

}
