// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.aws.ec2.inputs.VpnConnectionRouteGetArgs;
import com.pulumi.aws.ec2.inputs.VpnConnectionVgwTelemetryGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final VpnConnectionState Empty = new VpnConnectionState();

    /**
     * Amazon Resource Name (ARN) of the VPN Connection.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The configuration information for the VPN connection&#39;s customer gateway (in the native XML format).
     * 
     */
    @Import(name="customerGatewayConfiguration")
    private @Nullable Output<String> customerGatewayConfiguration;

    public Optional<Output<String>> customerGatewayConfiguration() {
        return Optional.ofNullable(this.customerGatewayConfiguration);
    }

    /**
     * The ID of the customer gateway.
     * 
     */
    @Import(name="customerGatewayId")
    private @Nullable Output<String> customerGatewayId;

    public Optional<Output<String>> customerGatewayId() {
        return Optional.ofNullable(this.customerGatewayId);
    }

    /**
     * Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
     * 
     */
    @Import(name="enableAcceleration")
    private @Nullable Output<Boolean> enableAcceleration;

    public Optional<Output<Boolean>> enableAcceleration() {
        return Optional.ofNullable(this.enableAcceleration);
    }

    /**
     * The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @Import(name="localIpv4NetworkCidr")
    private @Nullable Output<String> localIpv4NetworkCidr;

    public Optional<Output<String>> localIpv4NetworkCidr() {
        return Optional.ofNullable(this.localIpv4NetworkCidr);
    }

    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @Import(name="localIpv6NetworkCidr")
    private @Nullable Output<String> localIpv6NetworkCidr;

    public Optional<Output<String>> localIpv6NetworkCidr() {
        return Optional.ofNullable(this.localIpv6NetworkCidr);
    }

    /**
     * The IPv4 CIDR on the AWS side of the VPN connection.
     * 
     */
    @Import(name="remoteIpv4NetworkCidr")
    private @Nullable Output<String> remoteIpv4NetworkCidr;

    public Optional<Output<String>> remoteIpv4NetworkCidr() {
        return Optional.ofNullable(this.remoteIpv4NetworkCidr);
    }

    /**
     * The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
     * 
     */
    @Import(name="remoteIpv6NetworkCidr")
    private @Nullable Output<String> remoteIpv6NetworkCidr;

    public Optional<Output<String>> remoteIpv6NetworkCidr() {
        return Optional.ofNullable(this.remoteIpv6NetworkCidr);
    }

    /**
     * The static routes associated with the VPN connection. Detailed below.
     * 
     */
    @Import(name="routes")
    private @Nullable Output<List<VpnConnectionRouteGetArgs>> routes;

    public Optional<Output<List<VpnConnectionRouteGetArgs>>> routes() {
        return Optional.ofNullable(this.routes);
    }

    /**
     * Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don&#39;t support BGP.
     * 
     */
    @Import(name="staticRoutesOnly")
    private @Nullable Output<Boolean> staticRoutesOnly;

    public Optional<Output<Boolean>> staticRoutesOnly() {
        return Optional.ofNullable(this.staticRoutesOnly);
    }

    /**
     * Tags to apply to the connection. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * When associated with an EC2 Transit Gateway (`transit_gateway_id` argument), the attachment ID. See also the `aws.ec2.Tag` for tagging the EC2 Transit Gateway VPN Attachment.
     * 
     */
    @Import(name="transitGatewayAttachmentId")
    private @Nullable Output<String> transitGatewayAttachmentId;

    public Optional<Output<String>> transitGatewayAttachmentId() {
        return Optional.ofNullable(this.transitGatewayAttachmentId);
    }

    /**
     * The ID of the EC2 Transit Gateway.
     * 
     */
    @Import(name="transitGatewayId")
    private @Nullable Output<String> transitGatewayId;

    public Optional<Output<String>> transitGatewayId() {
        return Optional.ofNullable(this.transitGatewayId);
    }

    /**
     * The public IP address of the first VPN tunnel.
     * 
     */
    @Import(name="tunnel1Address")
    private @Nullable Output<String> tunnel1Address;

    public Optional<Output<String>> tunnel1Address() {
        return Optional.ofNullable(this.tunnel1Address);
    }

    /**
     * The bgp asn number of the first VPN tunnel.
     * 
     */
    @Import(name="tunnel1BgpAsn")
    private @Nullable Output<String> tunnel1BgpAsn;

    public Optional<Output<String>> tunnel1BgpAsn() {
        return Optional.ofNullable(this.tunnel1BgpAsn);
    }

    /**
     * The bgp holdtime of the first VPN tunnel.
     * 
     */
    @Import(name="tunnel1BgpHoldtime")
    private @Nullable Output<Integer> tunnel1BgpHoldtime;

    public Optional<Output<Integer>> tunnel1BgpHoldtime() {
        return Optional.ofNullable(this.tunnel1BgpHoldtime);
    }

    /**
     * The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
     * 
     */
    @Import(name="tunnel1CgwInsideAddress")
    private @Nullable Output<String> tunnel1CgwInsideAddress;

    public Optional<Output<String>> tunnel1CgwInsideAddress() {
        return Optional.ofNullable(this.tunnel1CgwInsideAddress);
    }

    /**
     * The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    @Import(name="tunnel1DpdTimeoutAction")
    private @Nullable Output<String> tunnel1DpdTimeoutAction;

    public Optional<Output<String>> tunnel1DpdTimeoutAction() {
        return Optional.ofNullable(this.tunnel1DpdTimeoutAction);
    }

    /**
     * The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    @Import(name="tunnel1DpdTimeoutSeconds")
    private @Nullable Output<Integer> tunnel1DpdTimeoutSeconds;

    public Optional<Output<Integer>> tunnel1DpdTimeoutSeconds() {
        return Optional.ofNullable(this.tunnel1DpdTimeoutSeconds);
    }

    /**
     * The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    @Import(name="tunnel1IkeVersions")
    private @Nullable Output<List<String>> tunnel1IkeVersions;

    public Optional<Output<List<String>>> tunnel1IkeVersions() {
        return Optional.ofNullable(this.tunnel1IkeVersions);
    }

    /**
     * The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    @Import(name="tunnel1InsideCidr")
    private @Nullable Output<String> tunnel1InsideCidr;

    public Optional<Output<String>> tunnel1InsideCidr() {
        return Optional.ofNullable(this.tunnel1InsideCidr);
    }

    /**
     * The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    @Import(name="tunnel1InsideIpv6Cidr")
    private @Nullable Output<String> tunnel1InsideIpv6Cidr;

    public Optional<Output<String>> tunnel1InsideIpv6Cidr() {
        return Optional.ofNullable(this.tunnel1InsideIpv6Cidr);
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    @Import(name="tunnel1Phase1DhGroupNumbers")
    private @Nullable Output<List<Integer>> tunnel1Phase1DhGroupNumbers;

    public Optional<Output<List<Integer>>> tunnel1Phase1DhGroupNumbers() {
        return Optional.ofNullable(this.tunnel1Phase1DhGroupNumbers);
    }

    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Import(name="tunnel1Phase1EncryptionAlgorithms")
    private @Nullable Output<List<String>> tunnel1Phase1EncryptionAlgorithms;

    public Optional<Output<List<String>>> tunnel1Phase1EncryptionAlgorithms() {
        return Optional.ofNullable(this.tunnel1Phase1EncryptionAlgorithms);
    }

    /**
     * One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Import(name="tunnel1Phase1IntegrityAlgorithms")
    private @Nullable Output<List<String>> tunnel1Phase1IntegrityAlgorithms;

    public Optional<Output<List<String>>> tunnel1Phase1IntegrityAlgorithms() {
        return Optional.ofNullable(this.tunnel1Phase1IntegrityAlgorithms);
    }

    /**
     * The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    @Import(name="tunnel1Phase1LifetimeSeconds")
    private @Nullable Output<Integer> tunnel1Phase1LifetimeSeconds;

    public Optional<Output<Integer>> tunnel1Phase1LifetimeSeconds() {
        return Optional.ofNullable(this.tunnel1Phase1LifetimeSeconds);
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    @Import(name="tunnel1Phase2DhGroupNumbers")
    private @Nullable Output<List<Integer>> tunnel1Phase2DhGroupNumbers;

    public Optional<Output<List<Integer>>> tunnel1Phase2DhGroupNumbers() {
        return Optional.ofNullable(this.tunnel1Phase2DhGroupNumbers);
    }

    /**
     * List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Import(name="tunnel1Phase2EncryptionAlgorithms")
    private @Nullable Output<List<String>> tunnel1Phase2EncryptionAlgorithms;

    public Optional<Output<List<String>>> tunnel1Phase2EncryptionAlgorithms() {
        return Optional.ofNullable(this.tunnel1Phase2EncryptionAlgorithms);
    }

    /**
     * List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Import(name="tunnel1Phase2IntegrityAlgorithms")
    private @Nullable Output<List<String>> tunnel1Phase2IntegrityAlgorithms;

    public Optional<Output<List<String>>> tunnel1Phase2IntegrityAlgorithms() {
        return Optional.ofNullable(this.tunnel1Phase2IntegrityAlgorithms);
    }

    /**
     * The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    @Import(name="tunnel1Phase2LifetimeSeconds")
    private @Nullable Output<Integer> tunnel1Phase2LifetimeSeconds;

    public Optional<Output<Integer>> tunnel1Phase2LifetimeSeconds() {
        return Optional.ofNullable(this.tunnel1Phase2LifetimeSeconds);
    }

    /**
     * The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    @Import(name="tunnel1PresharedKey")
    private @Nullable Output<String> tunnel1PresharedKey;

    public Optional<Output<String>> tunnel1PresharedKey() {
        return Optional.ofNullable(this.tunnel1PresharedKey);
    }

    /**
     * The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    @Import(name="tunnel1RekeyFuzzPercentage")
    private @Nullable Output<Integer> tunnel1RekeyFuzzPercentage;

    public Optional<Output<Integer>> tunnel1RekeyFuzzPercentage() {
        return Optional.ofNullable(this.tunnel1RekeyFuzzPercentage);
    }

    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel1_phase2_lifetime_seconds`.
     * 
     */
    @Import(name="tunnel1RekeyMarginTimeSeconds")
    private @Nullable Output<Integer> tunnel1RekeyMarginTimeSeconds;

    public Optional<Output<Integer>> tunnel1RekeyMarginTimeSeconds() {
        return Optional.ofNullable(this.tunnel1RekeyMarginTimeSeconds);
    }

    /**
     * The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    @Import(name="tunnel1ReplayWindowSize")
    private @Nullable Output<Integer> tunnel1ReplayWindowSize;

    public Optional<Output<Integer>> tunnel1ReplayWindowSize() {
        return Optional.ofNullable(this.tunnel1ReplayWindowSize);
    }

    /**
     * The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    @Import(name="tunnel1StartupAction")
    private @Nullable Output<String> tunnel1StartupAction;

    public Optional<Output<String>> tunnel1StartupAction() {
        return Optional.ofNullable(this.tunnel1StartupAction);
    }

    /**
     * The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
     * 
     */
    @Import(name="tunnel1VgwInsideAddress")
    private @Nullable Output<String> tunnel1VgwInsideAddress;

    public Optional<Output<String>> tunnel1VgwInsideAddress() {
        return Optional.ofNullable(this.tunnel1VgwInsideAddress);
    }

    /**
     * The public IP address of the second VPN tunnel.
     * 
     */
    @Import(name="tunnel2Address")
    private @Nullable Output<String> tunnel2Address;

    public Optional<Output<String>> tunnel2Address() {
        return Optional.ofNullable(this.tunnel2Address);
    }

    /**
     * The bgp asn number of the second VPN tunnel.
     * 
     */
    @Import(name="tunnel2BgpAsn")
    private @Nullable Output<String> tunnel2BgpAsn;

    public Optional<Output<String>> tunnel2BgpAsn() {
        return Optional.ofNullable(this.tunnel2BgpAsn);
    }

    /**
     * The bgp holdtime of the second VPN tunnel.
     * 
     */
    @Import(name="tunnel2BgpHoldtime")
    private @Nullable Output<Integer> tunnel2BgpHoldtime;

    public Optional<Output<Integer>> tunnel2BgpHoldtime() {
        return Optional.ofNullable(this.tunnel2BgpHoldtime);
    }

    /**
     * The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
     * 
     */
    @Import(name="tunnel2CgwInsideAddress")
    private @Nullable Output<String> tunnel2CgwInsideAddress;

    public Optional<Output<String>> tunnel2CgwInsideAddress() {
        return Optional.ofNullable(this.tunnel2CgwInsideAddress);
    }

    /**
     * The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
     * 
     */
    @Import(name="tunnel2DpdTimeoutAction")
    private @Nullable Output<String> tunnel2DpdTimeoutAction;

    public Optional<Output<String>> tunnel2DpdTimeoutAction() {
        return Optional.ofNullable(this.tunnel2DpdTimeoutAction);
    }

    /**
     * The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
     * 
     */
    @Import(name="tunnel2DpdTimeoutSeconds")
    private @Nullable Output<Integer> tunnel2DpdTimeoutSeconds;

    public Optional<Output<Integer>> tunnel2DpdTimeoutSeconds() {
        return Optional.ofNullable(this.tunnel2DpdTimeoutSeconds);
    }

    /**
     * The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
     * 
     */
    @Import(name="tunnel2IkeVersions")
    private @Nullable Output<List<String>> tunnel2IkeVersions;

    public Optional<Output<List<String>>> tunnel2IkeVersions() {
        return Optional.ofNullable(this.tunnel2IkeVersions);
    }

    /**
     * The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
     * 
     */
    @Import(name="tunnel2InsideCidr")
    private @Nullable Output<String> tunnel2InsideCidr;

    public Optional<Output<String>> tunnel2InsideCidr() {
        return Optional.ofNullable(this.tunnel2InsideCidr);
    }

    /**
     * The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
     * 
     */
    @Import(name="tunnel2InsideIpv6Cidr")
    private @Nullable Output<String> tunnel2InsideIpv6Cidr;

    public Optional<Output<String>> tunnel2InsideIpv6Cidr() {
        return Optional.ofNullable(this.tunnel2InsideIpv6Cidr);
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
     * 
     */
    @Import(name="tunnel2Phase1DhGroupNumbers")
    private @Nullable Output<List<Integer>> tunnel2Phase1DhGroupNumbers;

    public Optional<Output<List<Integer>>> tunnel2Phase1DhGroupNumbers() {
        return Optional.ofNullable(this.tunnel2Phase1DhGroupNumbers);
    }

    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Import(name="tunnel2Phase1EncryptionAlgorithms")
    private @Nullable Output<List<String>> tunnel2Phase1EncryptionAlgorithms;

    public Optional<Output<List<String>>> tunnel2Phase1EncryptionAlgorithms() {
        return Optional.ofNullable(this.tunnel2Phase1EncryptionAlgorithms);
    }

    /**
     * One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Import(name="tunnel2Phase1IntegrityAlgorithms")
    private @Nullable Output<List<String>> tunnel2Phase1IntegrityAlgorithms;

    public Optional<Output<List<String>>> tunnel2Phase1IntegrityAlgorithms() {
        return Optional.ofNullable(this.tunnel2Phase1IntegrityAlgorithms);
    }

    /**
     * The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
     * 
     */
    @Import(name="tunnel2Phase1LifetimeSeconds")
    private @Nullable Output<Integer> tunnel2Phase1LifetimeSeconds;

    public Optional<Output<Integer>> tunnel2Phase1LifetimeSeconds() {
        return Optional.ofNullable(this.tunnel2Phase1LifetimeSeconds);
    }

    /**
     * List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
     * 
     */
    @Import(name="tunnel2Phase2DhGroupNumbers")
    private @Nullable Output<List<Integer>> tunnel2Phase2DhGroupNumbers;

    public Optional<Output<List<Integer>>> tunnel2Phase2DhGroupNumbers() {
        return Optional.ofNullable(this.tunnel2Phase2DhGroupNumbers);
    }

    /**
     * List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
     * 
     */
    @Import(name="tunnel2Phase2EncryptionAlgorithms")
    private @Nullable Output<List<String>> tunnel2Phase2EncryptionAlgorithms;

    public Optional<Output<List<String>>> tunnel2Phase2EncryptionAlgorithms() {
        return Optional.ofNullable(this.tunnel2Phase2EncryptionAlgorithms);
    }

    /**
     * List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
     * 
     */
    @Import(name="tunnel2Phase2IntegrityAlgorithms")
    private @Nullable Output<List<String>> tunnel2Phase2IntegrityAlgorithms;

    public Optional<Output<List<String>>> tunnel2Phase2IntegrityAlgorithms() {
        return Optional.ofNullable(this.tunnel2Phase2IntegrityAlgorithms);
    }

    /**
     * The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
     * 
     */
    @Import(name="tunnel2Phase2LifetimeSeconds")
    private @Nullable Output<Integer> tunnel2Phase2LifetimeSeconds;

    public Optional<Output<Integer>> tunnel2Phase2LifetimeSeconds() {
        return Optional.ofNullable(this.tunnel2Phase2LifetimeSeconds);
    }

    /**
     * The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
     * 
     */
    @Import(name="tunnel2PresharedKey")
    private @Nullable Output<String> tunnel2PresharedKey;

    public Optional<Output<String>> tunnel2PresharedKey() {
        return Optional.ofNullable(this.tunnel2PresharedKey);
    }

    /**
     * The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2_rekey_margin_time_seconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
     * 
     */
    @Import(name="tunnel2RekeyFuzzPercentage")
    private @Nullable Output<Integer> tunnel2RekeyFuzzPercentage;

    public Optional<Output<Integer>> tunnel2RekeyFuzzPercentage() {
        return Optional.ofNullable(this.tunnel2RekeyFuzzPercentage);
    }

    /**
     * The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2_rekey_fuzz_percentage`. Valid value is between `60` and half of `tunnel2_phase2_lifetime_seconds`.
     * 
     */
    @Import(name="tunnel2RekeyMarginTimeSeconds")
    private @Nullable Output<Integer> tunnel2RekeyMarginTimeSeconds;

    public Optional<Output<Integer>> tunnel2RekeyMarginTimeSeconds() {
        return Optional.ofNullable(this.tunnel2RekeyMarginTimeSeconds);
    }

    /**
     * The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
     * 
     */
    @Import(name="tunnel2ReplayWindowSize")
    private @Nullable Output<Integer> tunnel2ReplayWindowSize;

    public Optional<Output<Integer>> tunnel2ReplayWindowSize() {
        return Optional.ofNullable(this.tunnel2ReplayWindowSize);
    }

    /**
     * The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
     * 
     */
    @Import(name="tunnel2StartupAction")
    private @Nullable Output<String> tunnel2StartupAction;

    public Optional<Output<String>> tunnel2StartupAction() {
        return Optional.ofNullable(this.tunnel2StartupAction);
    }

    /**
     * The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
     * 
     */
    @Import(name="tunnel2VgwInsideAddress")
    private @Nullable Output<String> tunnel2VgwInsideAddress;

    public Optional<Output<String>> tunnel2VgwInsideAddress() {
        return Optional.ofNullable(this.tunnel2VgwInsideAddress);
    }

    /**
     * Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
     * 
     */
    @Import(name="tunnelInsideIpVersion")
    private @Nullable Output<String> tunnelInsideIpVersion;

    public Optional<Output<String>> tunnelInsideIpVersion() {
        return Optional.ofNullable(this.tunnelInsideIpVersion);
    }

    /**
     * The type of VPN connection. The only type AWS supports at this time is &#34;ipsec.1&#34;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Telemetry for the VPN tunnels. Detailed below.
     * 
     */
    @Import(name="vgwTelemetries")
    private @Nullable Output<List<VpnConnectionVgwTelemetryGetArgs>> vgwTelemetries;

    public Optional<Output<List<VpnConnectionVgwTelemetryGetArgs>>> vgwTelemetries() {
        return Optional.ofNullable(this.vgwTelemetries);
    }

    /**
     * The ID of the Virtual Private Gateway.
     * 
     */
    @Import(name="vpnGatewayId")
    private @Nullable Output<String> vpnGatewayId;

    public Optional<Output<String>> vpnGatewayId() {
        return Optional.ofNullable(this.vpnGatewayId);
    }

    private VpnConnectionState() {}

    private VpnConnectionState(VpnConnectionState $) {
        this.arn = $.arn;
        this.customerGatewayConfiguration = $.customerGatewayConfiguration;
        this.customerGatewayId = $.customerGatewayId;
        this.enableAcceleration = $.enableAcceleration;
        this.localIpv4NetworkCidr = $.localIpv4NetworkCidr;
        this.localIpv6NetworkCidr = $.localIpv6NetworkCidr;
        this.remoteIpv4NetworkCidr = $.remoteIpv4NetworkCidr;
        this.remoteIpv6NetworkCidr = $.remoteIpv6NetworkCidr;
        this.routes = $.routes;
        this.staticRoutesOnly = $.staticRoutesOnly;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.transitGatewayAttachmentId = $.transitGatewayAttachmentId;
        this.transitGatewayId = $.transitGatewayId;
        this.tunnel1Address = $.tunnel1Address;
        this.tunnel1BgpAsn = $.tunnel1BgpAsn;
        this.tunnel1BgpHoldtime = $.tunnel1BgpHoldtime;
        this.tunnel1CgwInsideAddress = $.tunnel1CgwInsideAddress;
        this.tunnel1DpdTimeoutAction = $.tunnel1DpdTimeoutAction;
        this.tunnel1DpdTimeoutSeconds = $.tunnel1DpdTimeoutSeconds;
        this.tunnel1IkeVersions = $.tunnel1IkeVersions;
        this.tunnel1InsideCidr = $.tunnel1InsideCidr;
        this.tunnel1InsideIpv6Cidr = $.tunnel1InsideIpv6Cidr;
        this.tunnel1Phase1DhGroupNumbers = $.tunnel1Phase1DhGroupNumbers;
        this.tunnel1Phase1EncryptionAlgorithms = $.tunnel1Phase1EncryptionAlgorithms;
        this.tunnel1Phase1IntegrityAlgorithms = $.tunnel1Phase1IntegrityAlgorithms;
        this.tunnel1Phase1LifetimeSeconds = $.tunnel1Phase1LifetimeSeconds;
        this.tunnel1Phase2DhGroupNumbers = $.tunnel1Phase2DhGroupNumbers;
        this.tunnel1Phase2EncryptionAlgorithms = $.tunnel1Phase2EncryptionAlgorithms;
        this.tunnel1Phase2IntegrityAlgorithms = $.tunnel1Phase2IntegrityAlgorithms;
        this.tunnel1Phase2LifetimeSeconds = $.tunnel1Phase2LifetimeSeconds;
        this.tunnel1PresharedKey = $.tunnel1PresharedKey;
        this.tunnel1RekeyFuzzPercentage = $.tunnel1RekeyFuzzPercentage;
        this.tunnel1RekeyMarginTimeSeconds = $.tunnel1RekeyMarginTimeSeconds;
        this.tunnel1ReplayWindowSize = $.tunnel1ReplayWindowSize;
        this.tunnel1StartupAction = $.tunnel1StartupAction;
        this.tunnel1VgwInsideAddress = $.tunnel1VgwInsideAddress;
        this.tunnel2Address = $.tunnel2Address;
        this.tunnel2BgpAsn = $.tunnel2BgpAsn;
        this.tunnel2BgpHoldtime = $.tunnel2BgpHoldtime;
        this.tunnel2CgwInsideAddress = $.tunnel2CgwInsideAddress;
        this.tunnel2DpdTimeoutAction = $.tunnel2DpdTimeoutAction;
        this.tunnel2DpdTimeoutSeconds = $.tunnel2DpdTimeoutSeconds;
        this.tunnel2IkeVersions = $.tunnel2IkeVersions;
        this.tunnel2InsideCidr = $.tunnel2InsideCidr;
        this.tunnel2InsideIpv6Cidr = $.tunnel2InsideIpv6Cidr;
        this.tunnel2Phase1DhGroupNumbers = $.tunnel2Phase1DhGroupNumbers;
        this.tunnel2Phase1EncryptionAlgorithms = $.tunnel2Phase1EncryptionAlgorithms;
        this.tunnel2Phase1IntegrityAlgorithms = $.tunnel2Phase1IntegrityAlgorithms;
        this.tunnel2Phase1LifetimeSeconds = $.tunnel2Phase1LifetimeSeconds;
        this.tunnel2Phase2DhGroupNumbers = $.tunnel2Phase2DhGroupNumbers;
        this.tunnel2Phase2EncryptionAlgorithms = $.tunnel2Phase2EncryptionAlgorithms;
        this.tunnel2Phase2IntegrityAlgorithms = $.tunnel2Phase2IntegrityAlgorithms;
        this.tunnel2Phase2LifetimeSeconds = $.tunnel2Phase2LifetimeSeconds;
        this.tunnel2PresharedKey = $.tunnel2PresharedKey;
        this.tunnel2RekeyFuzzPercentage = $.tunnel2RekeyFuzzPercentage;
        this.tunnel2RekeyMarginTimeSeconds = $.tunnel2RekeyMarginTimeSeconds;
        this.tunnel2ReplayWindowSize = $.tunnel2ReplayWindowSize;
        this.tunnel2StartupAction = $.tunnel2StartupAction;
        this.tunnel2VgwInsideAddress = $.tunnel2VgwInsideAddress;
        this.tunnelInsideIpVersion = $.tunnelInsideIpVersion;
        this.type = $.type;
        this.vgwTelemetries = $.vgwTelemetries;
        this.vpnGatewayId = $.vpnGatewayId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnConnectionState $;

        public Builder() {
            $ = new VpnConnectionState();
        }

        public Builder(VpnConnectionState defaults) {
            $ = new VpnConnectionState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder customerGatewayConfiguration(@Nullable Output<String> customerGatewayConfiguration) {
            $.customerGatewayConfiguration = customerGatewayConfiguration;
            return this;
        }

        public Builder customerGatewayConfiguration(String customerGatewayConfiguration) {
            return customerGatewayConfiguration(Output.of(customerGatewayConfiguration));
        }

        public Builder customerGatewayId(@Nullable Output<String> customerGatewayId) {
            $.customerGatewayId = customerGatewayId;
            return this;
        }

        public Builder customerGatewayId(String customerGatewayId) {
            return customerGatewayId(Output.of(customerGatewayId));
        }

        public Builder enableAcceleration(@Nullable Output<Boolean> enableAcceleration) {
            $.enableAcceleration = enableAcceleration;
            return this;
        }

        public Builder enableAcceleration(Boolean enableAcceleration) {
            return enableAcceleration(Output.of(enableAcceleration));
        }

        public Builder localIpv4NetworkCidr(@Nullable Output<String> localIpv4NetworkCidr) {
            $.localIpv4NetworkCidr = localIpv4NetworkCidr;
            return this;
        }

        public Builder localIpv4NetworkCidr(String localIpv4NetworkCidr) {
            return localIpv4NetworkCidr(Output.of(localIpv4NetworkCidr));
        }

        public Builder localIpv6NetworkCidr(@Nullable Output<String> localIpv6NetworkCidr) {
            $.localIpv6NetworkCidr = localIpv6NetworkCidr;
            return this;
        }

        public Builder localIpv6NetworkCidr(String localIpv6NetworkCidr) {
            return localIpv6NetworkCidr(Output.of(localIpv6NetworkCidr));
        }

        public Builder remoteIpv4NetworkCidr(@Nullable Output<String> remoteIpv4NetworkCidr) {
            $.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr;
            return this;
        }

        public Builder remoteIpv4NetworkCidr(String remoteIpv4NetworkCidr) {
            return remoteIpv4NetworkCidr(Output.of(remoteIpv4NetworkCidr));
        }

        public Builder remoteIpv6NetworkCidr(@Nullable Output<String> remoteIpv6NetworkCidr) {
            $.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr;
            return this;
        }

        public Builder remoteIpv6NetworkCidr(String remoteIpv6NetworkCidr) {
            return remoteIpv6NetworkCidr(Output.of(remoteIpv6NetworkCidr));
        }

        public Builder routes(@Nullable Output<List<VpnConnectionRouteGetArgs>> routes) {
            $.routes = routes;
            return this;
        }

        public Builder routes(List<VpnConnectionRouteGetArgs> routes) {
            return routes(Output.of(routes));
        }

        public Builder routes(VpnConnectionRouteGetArgs... routes) {
            return routes(List.of(routes));
        }

        public Builder staticRoutesOnly(@Nullable Output<Boolean> staticRoutesOnly) {
            $.staticRoutesOnly = staticRoutesOnly;
            return this;
        }

        public Builder staticRoutesOnly(Boolean staticRoutesOnly) {
            return staticRoutesOnly(Output.of(staticRoutesOnly));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder transitGatewayAttachmentId(@Nullable Output<String> transitGatewayAttachmentId) {
            $.transitGatewayAttachmentId = transitGatewayAttachmentId;
            return this;
        }

        public Builder transitGatewayAttachmentId(String transitGatewayAttachmentId) {
            return transitGatewayAttachmentId(Output.of(transitGatewayAttachmentId));
        }

        public Builder transitGatewayId(@Nullable Output<String> transitGatewayId) {
            $.transitGatewayId = transitGatewayId;
            return this;
        }

        public Builder transitGatewayId(String transitGatewayId) {
            return transitGatewayId(Output.of(transitGatewayId));
        }

        public Builder tunnel1Address(@Nullable Output<String> tunnel1Address) {
            $.tunnel1Address = tunnel1Address;
            return this;
        }

        public Builder tunnel1Address(String tunnel1Address) {
            return tunnel1Address(Output.of(tunnel1Address));
        }

        public Builder tunnel1BgpAsn(@Nullable Output<String> tunnel1BgpAsn) {
            $.tunnel1BgpAsn = tunnel1BgpAsn;
            return this;
        }

        public Builder tunnel1BgpAsn(String tunnel1BgpAsn) {
            return tunnel1BgpAsn(Output.of(tunnel1BgpAsn));
        }

        public Builder tunnel1BgpHoldtime(@Nullable Output<Integer> tunnel1BgpHoldtime) {
            $.tunnel1BgpHoldtime = tunnel1BgpHoldtime;
            return this;
        }

        public Builder tunnel1BgpHoldtime(Integer tunnel1BgpHoldtime) {
            return tunnel1BgpHoldtime(Output.of(tunnel1BgpHoldtime));
        }

        public Builder tunnel1CgwInsideAddress(@Nullable Output<String> tunnel1CgwInsideAddress) {
            $.tunnel1CgwInsideAddress = tunnel1CgwInsideAddress;
            return this;
        }

        public Builder tunnel1CgwInsideAddress(String tunnel1CgwInsideAddress) {
            return tunnel1CgwInsideAddress(Output.of(tunnel1CgwInsideAddress));
        }

        public Builder tunnel1DpdTimeoutAction(@Nullable Output<String> tunnel1DpdTimeoutAction) {
            $.tunnel1DpdTimeoutAction = tunnel1DpdTimeoutAction;
            return this;
        }

        public Builder tunnel1DpdTimeoutAction(String tunnel1DpdTimeoutAction) {
            return tunnel1DpdTimeoutAction(Output.of(tunnel1DpdTimeoutAction));
        }

        public Builder tunnel1DpdTimeoutSeconds(@Nullable Output<Integer> tunnel1DpdTimeoutSeconds) {
            $.tunnel1DpdTimeoutSeconds = tunnel1DpdTimeoutSeconds;
            return this;
        }

        public Builder tunnel1DpdTimeoutSeconds(Integer tunnel1DpdTimeoutSeconds) {
            return tunnel1DpdTimeoutSeconds(Output.of(tunnel1DpdTimeoutSeconds));
        }

        public Builder tunnel1IkeVersions(@Nullable Output<List<String>> tunnel1IkeVersions) {
            $.tunnel1IkeVersions = tunnel1IkeVersions;
            return this;
        }

        public Builder tunnel1IkeVersions(List<String> tunnel1IkeVersions) {
            return tunnel1IkeVersions(Output.of(tunnel1IkeVersions));
        }

        public Builder tunnel1IkeVersions(String... tunnel1IkeVersions) {
            return tunnel1IkeVersions(List.of(tunnel1IkeVersions));
        }

        public Builder tunnel1InsideCidr(@Nullable Output<String> tunnel1InsideCidr) {
            $.tunnel1InsideCidr = tunnel1InsideCidr;
            return this;
        }

        public Builder tunnel1InsideCidr(String tunnel1InsideCidr) {
            return tunnel1InsideCidr(Output.of(tunnel1InsideCidr));
        }

        public Builder tunnel1InsideIpv6Cidr(@Nullable Output<String> tunnel1InsideIpv6Cidr) {
            $.tunnel1InsideIpv6Cidr = tunnel1InsideIpv6Cidr;
            return this;
        }

        public Builder tunnel1InsideIpv6Cidr(String tunnel1InsideIpv6Cidr) {
            return tunnel1InsideIpv6Cidr(Output.of(tunnel1InsideIpv6Cidr));
        }

        public Builder tunnel1Phase1DhGroupNumbers(@Nullable Output<List<Integer>> tunnel1Phase1DhGroupNumbers) {
            $.tunnel1Phase1DhGroupNumbers = tunnel1Phase1DhGroupNumbers;
            return this;
        }

        public Builder tunnel1Phase1DhGroupNumbers(List<Integer> tunnel1Phase1DhGroupNumbers) {
            return tunnel1Phase1DhGroupNumbers(Output.of(tunnel1Phase1DhGroupNumbers));
        }

        public Builder tunnel1Phase1DhGroupNumbers(Integer... tunnel1Phase1DhGroupNumbers) {
            return tunnel1Phase1DhGroupNumbers(List.of(tunnel1Phase1DhGroupNumbers));
        }

        public Builder tunnel1Phase1EncryptionAlgorithms(@Nullable Output<List<String>> tunnel1Phase1EncryptionAlgorithms) {
            $.tunnel1Phase1EncryptionAlgorithms = tunnel1Phase1EncryptionAlgorithms;
            return this;
        }

        public Builder tunnel1Phase1EncryptionAlgorithms(List<String> tunnel1Phase1EncryptionAlgorithms) {
            return tunnel1Phase1EncryptionAlgorithms(Output.of(tunnel1Phase1EncryptionAlgorithms));
        }

        public Builder tunnel1Phase1EncryptionAlgorithms(String... tunnel1Phase1EncryptionAlgorithms) {
            return tunnel1Phase1EncryptionAlgorithms(List.of(tunnel1Phase1EncryptionAlgorithms));
        }

        public Builder tunnel1Phase1IntegrityAlgorithms(@Nullable Output<List<String>> tunnel1Phase1IntegrityAlgorithms) {
            $.tunnel1Phase1IntegrityAlgorithms = tunnel1Phase1IntegrityAlgorithms;
            return this;
        }

        public Builder tunnel1Phase1IntegrityAlgorithms(List<String> tunnel1Phase1IntegrityAlgorithms) {
            return tunnel1Phase1IntegrityAlgorithms(Output.of(tunnel1Phase1IntegrityAlgorithms));
        }

        public Builder tunnel1Phase1IntegrityAlgorithms(String... tunnel1Phase1IntegrityAlgorithms) {
            return tunnel1Phase1IntegrityAlgorithms(List.of(tunnel1Phase1IntegrityAlgorithms));
        }

        public Builder tunnel1Phase1LifetimeSeconds(@Nullable Output<Integer> tunnel1Phase1LifetimeSeconds) {
            $.tunnel1Phase1LifetimeSeconds = tunnel1Phase1LifetimeSeconds;
            return this;
        }

        public Builder tunnel1Phase1LifetimeSeconds(Integer tunnel1Phase1LifetimeSeconds) {
            return tunnel1Phase1LifetimeSeconds(Output.of(tunnel1Phase1LifetimeSeconds));
        }

        public Builder tunnel1Phase2DhGroupNumbers(@Nullable Output<List<Integer>> tunnel1Phase2DhGroupNumbers) {
            $.tunnel1Phase2DhGroupNumbers = tunnel1Phase2DhGroupNumbers;
            return this;
        }

        public Builder tunnel1Phase2DhGroupNumbers(List<Integer> tunnel1Phase2DhGroupNumbers) {
            return tunnel1Phase2DhGroupNumbers(Output.of(tunnel1Phase2DhGroupNumbers));
        }

        public Builder tunnel1Phase2DhGroupNumbers(Integer... tunnel1Phase2DhGroupNumbers) {
            return tunnel1Phase2DhGroupNumbers(List.of(tunnel1Phase2DhGroupNumbers));
        }

        public Builder tunnel1Phase2EncryptionAlgorithms(@Nullable Output<List<String>> tunnel1Phase2EncryptionAlgorithms) {
            $.tunnel1Phase2EncryptionAlgorithms = tunnel1Phase2EncryptionAlgorithms;
            return this;
        }

        public Builder tunnel1Phase2EncryptionAlgorithms(List<String> tunnel1Phase2EncryptionAlgorithms) {
            return tunnel1Phase2EncryptionAlgorithms(Output.of(tunnel1Phase2EncryptionAlgorithms));
        }

        public Builder tunnel1Phase2EncryptionAlgorithms(String... tunnel1Phase2EncryptionAlgorithms) {
            return tunnel1Phase2EncryptionAlgorithms(List.of(tunnel1Phase2EncryptionAlgorithms));
        }

        public Builder tunnel1Phase2IntegrityAlgorithms(@Nullable Output<List<String>> tunnel1Phase2IntegrityAlgorithms) {
            $.tunnel1Phase2IntegrityAlgorithms = tunnel1Phase2IntegrityAlgorithms;
            return this;
        }

        public Builder tunnel1Phase2IntegrityAlgorithms(List<String> tunnel1Phase2IntegrityAlgorithms) {
            return tunnel1Phase2IntegrityAlgorithms(Output.of(tunnel1Phase2IntegrityAlgorithms));
        }

        public Builder tunnel1Phase2IntegrityAlgorithms(String... tunnel1Phase2IntegrityAlgorithms) {
            return tunnel1Phase2IntegrityAlgorithms(List.of(tunnel1Phase2IntegrityAlgorithms));
        }

        public Builder tunnel1Phase2LifetimeSeconds(@Nullable Output<Integer> tunnel1Phase2LifetimeSeconds) {
            $.tunnel1Phase2LifetimeSeconds = tunnel1Phase2LifetimeSeconds;
            return this;
        }

        public Builder tunnel1Phase2LifetimeSeconds(Integer tunnel1Phase2LifetimeSeconds) {
            return tunnel1Phase2LifetimeSeconds(Output.of(tunnel1Phase2LifetimeSeconds));
        }

        public Builder tunnel1PresharedKey(@Nullable Output<String> tunnel1PresharedKey) {
            $.tunnel1PresharedKey = tunnel1PresharedKey;
            return this;
        }

        public Builder tunnel1PresharedKey(String tunnel1PresharedKey) {
            return tunnel1PresharedKey(Output.of(tunnel1PresharedKey));
        }

        public Builder tunnel1RekeyFuzzPercentage(@Nullable Output<Integer> tunnel1RekeyFuzzPercentage) {
            $.tunnel1RekeyFuzzPercentage = tunnel1RekeyFuzzPercentage;
            return this;
        }

        public Builder tunnel1RekeyFuzzPercentage(Integer tunnel1RekeyFuzzPercentage) {
            return tunnel1RekeyFuzzPercentage(Output.of(tunnel1RekeyFuzzPercentage));
        }

        public Builder tunnel1RekeyMarginTimeSeconds(@Nullable Output<Integer> tunnel1RekeyMarginTimeSeconds) {
            $.tunnel1RekeyMarginTimeSeconds = tunnel1RekeyMarginTimeSeconds;
            return this;
        }

        public Builder tunnel1RekeyMarginTimeSeconds(Integer tunnel1RekeyMarginTimeSeconds) {
            return tunnel1RekeyMarginTimeSeconds(Output.of(tunnel1RekeyMarginTimeSeconds));
        }

        public Builder tunnel1ReplayWindowSize(@Nullable Output<Integer> tunnel1ReplayWindowSize) {
            $.tunnel1ReplayWindowSize = tunnel1ReplayWindowSize;
            return this;
        }

        public Builder tunnel1ReplayWindowSize(Integer tunnel1ReplayWindowSize) {
            return tunnel1ReplayWindowSize(Output.of(tunnel1ReplayWindowSize));
        }

        public Builder tunnel1StartupAction(@Nullable Output<String> tunnel1StartupAction) {
            $.tunnel1StartupAction = tunnel1StartupAction;
            return this;
        }

        public Builder tunnel1StartupAction(String tunnel1StartupAction) {
            return tunnel1StartupAction(Output.of(tunnel1StartupAction));
        }

        public Builder tunnel1VgwInsideAddress(@Nullable Output<String> tunnel1VgwInsideAddress) {
            $.tunnel1VgwInsideAddress = tunnel1VgwInsideAddress;
            return this;
        }

        public Builder tunnel1VgwInsideAddress(String tunnel1VgwInsideAddress) {
            return tunnel1VgwInsideAddress(Output.of(tunnel1VgwInsideAddress));
        }

        public Builder tunnel2Address(@Nullable Output<String> tunnel2Address) {
            $.tunnel2Address = tunnel2Address;
            return this;
        }

        public Builder tunnel2Address(String tunnel2Address) {
            return tunnel2Address(Output.of(tunnel2Address));
        }

        public Builder tunnel2BgpAsn(@Nullable Output<String> tunnel2BgpAsn) {
            $.tunnel2BgpAsn = tunnel2BgpAsn;
            return this;
        }

        public Builder tunnel2BgpAsn(String tunnel2BgpAsn) {
            return tunnel2BgpAsn(Output.of(tunnel2BgpAsn));
        }

        public Builder tunnel2BgpHoldtime(@Nullable Output<Integer> tunnel2BgpHoldtime) {
            $.tunnel2BgpHoldtime = tunnel2BgpHoldtime;
            return this;
        }

        public Builder tunnel2BgpHoldtime(Integer tunnel2BgpHoldtime) {
            return tunnel2BgpHoldtime(Output.of(tunnel2BgpHoldtime));
        }

        public Builder tunnel2CgwInsideAddress(@Nullable Output<String> tunnel2CgwInsideAddress) {
            $.tunnel2CgwInsideAddress = tunnel2CgwInsideAddress;
            return this;
        }

        public Builder tunnel2CgwInsideAddress(String tunnel2CgwInsideAddress) {
            return tunnel2CgwInsideAddress(Output.of(tunnel2CgwInsideAddress));
        }

        public Builder tunnel2DpdTimeoutAction(@Nullable Output<String> tunnel2DpdTimeoutAction) {
            $.tunnel2DpdTimeoutAction = tunnel2DpdTimeoutAction;
            return this;
        }

        public Builder tunnel2DpdTimeoutAction(String tunnel2DpdTimeoutAction) {
            return tunnel2DpdTimeoutAction(Output.of(tunnel2DpdTimeoutAction));
        }

        public Builder tunnel2DpdTimeoutSeconds(@Nullable Output<Integer> tunnel2DpdTimeoutSeconds) {
            $.tunnel2DpdTimeoutSeconds = tunnel2DpdTimeoutSeconds;
            return this;
        }

        public Builder tunnel2DpdTimeoutSeconds(Integer tunnel2DpdTimeoutSeconds) {
            return tunnel2DpdTimeoutSeconds(Output.of(tunnel2DpdTimeoutSeconds));
        }

        public Builder tunnel2IkeVersions(@Nullable Output<List<String>> tunnel2IkeVersions) {
            $.tunnel2IkeVersions = tunnel2IkeVersions;
            return this;
        }

        public Builder tunnel2IkeVersions(List<String> tunnel2IkeVersions) {
            return tunnel2IkeVersions(Output.of(tunnel2IkeVersions));
        }

        public Builder tunnel2IkeVersions(String... tunnel2IkeVersions) {
            return tunnel2IkeVersions(List.of(tunnel2IkeVersions));
        }

        public Builder tunnel2InsideCidr(@Nullable Output<String> tunnel2InsideCidr) {
            $.tunnel2InsideCidr = tunnel2InsideCidr;
            return this;
        }

        public Builder tunnel2InsideCidr(String tunnel2InsideCidr) {
            return tunnel2InsideCidr(Output.of(tunnel2InsideCidr));
        }

        public Builder tunnel2InsideIpv6Cidr(@Nullable Output<String> tunnel2InsideIpv6Cidr) {
            $.tunnel2InsideIpv6Cidr = tunnel2InsideIpv6Cidr;
            return this;
        }

        public Builder tunnel2InsideIpv6Cidr(String tunnel2InsideIpv6Cidr) {
            return tunnel2InsideIpv6Cidr(Output.of(tunnel2InsideIpv6Cidr));
        }

        public Builder tunnel2Phase1DhGroupNumbers(@Nullable Output<List<Integer>> tunnel2Phase1DhGroupNumbers) {
            $.tunnel2Phase1DhGroupNumbers = tunnel2Phase1DhGroupNumbers;
            return this;
        }

        public Builder tunnel2Phase1DhGroupNumbers(List<Integer> tunnel2Phase1DhGroupNumbers) {
            return tunnel2Phase1DhGroupNumbers(Output.of(tunnel2Phase1DhGroupNumbers));
        }

        public Builder tunnel2Phase1DhGroupNumbers(Integer... tunnel2Phase1DhGroupNumbers) {
            return tunnel2Phase1DhGroupNumbers(List.of(tunnel2Phase1DhGroupNumbers));
        }

        public Builder tunnel2Phase1EncryptionAlgorithms(@Nullable Output<List<String>> tunnel2Phase1EncryptionAlgorithms) {
            $.tunnel2Phase1EncryptionAlgorithms = tunnel2Phase1EncryptionAlgorithms;
            return this;
        }

        public Builder tunnel2Phase1EncryptionAlgorithms(List<String> tunnel2Phase1EncryptionAlgorithms) {
            return tunnel2Phase1EncryptionAlgorithms(Output.of(tunnel2Phase1EncryptionAlgorithms));
        }

        public Builder tunnel2Phase1EncryptionAlgorithms(String... tunnel2Phase1EncryptionAlgorithms) {
            return tunnel2Phase1EncryptionAlgorithms(List.of(tunnel2Phase1EncryptionAlgorithms));
        }

        public Builder tunnel2Phase1IntegrityAlgorithms(@Nullable Output<List<String>> tunnel2Phase1IntegrityAlgorithms) {
            $.tunnel2Phase1IntegrityAlgorithms = tunnel2Phase1IntegrityAlgorithms;
            return this;
        }

        public Builder tunnel2Phase1IntegrityAlgorithms(List<String> tunnel2Phase1IntegrityAlgorithms) {
            return tunnel2Phase1IntegrityAlgorithms(Output.of(tunnel2Phase1IntegrityAlgorithms));
        }

        public Builder tunnel2Phase1IntegrityAlgorithms(String... tunnel2Phase1IntegrityAlgorithms) {
            return tunnel2Phase1IntegrityAlgorithms(List.of(tunnel2Phase1IntegrityAlgorithms));
        }

        public Builder tunnel2Phase1LifetimeSeconds(@Nullable Output<Integer> tunnel2Phase1LifetimeSeconds) {
            $.tunnel2Phase1LifetimeSeconds = tunnel2Phase1LifetimeSeconds;
            return this;
        }

        public Builder tunnel2Phase1LifetimeSeconds(Integer tunnel2Phase1LifetimeSeconds) {
            return tunnel2Phase1LifetimeSeconds(Output.of(tunnel2Phase1LifetimeSeconds));
        }

        public Builder tunnel2Phase2DhGroupNumbers(@Nullable Output<List<Integer>> tunnel2Phase2DhGroupNumbers) {
            $.tunnel2Phase2DhGroupNumbers = tunnel2Phase2DhGroupNumbers;
            return this;
        }

        public Builder tunnel2Phase2DhGroupNumbers(List<Integer> tunnel2Phase2DhGroupNumbers) {
            return tunnel2Phase2DhGroupNumbers(Output.of(tunnel2Phase2DhGroupNumbers));
        }

        public Builder tunnel2Phase2DhGroupNumbers(Integer... tunnel2Phase2DhGroupNumbers) {
            return tunnel2Phase2DhGroupNumbers(List.of(tunnel2Phase2DhGroupNumbers));
        }

        public Builder tunnel2Phase2EncryptionAlgorithms(@Nullable Output<List<String>> tunnel2Phase2EncryptionAlgorithms) {
            $.tunnel2Phase2EncryptionAlgorithms = tunnel2Phase2EncryptionAlgorithms;
            return this;
        }

        public Builder tunnel2Phase2EncryptionAlgorithms(List<String> tunnel2Phase2EncryptionAlgorithms) {
            return tunnel2Phase2EncryptionAlgorithms(Output.of(tunnel2Phase2EncryptionAlgorithms));
        }

        public Builder tunnel2Phase2EncryptionAlgorithms(String... tunnel2Phase2EncryptionAlgorithms) {
            return tunnel2Phase2EncryptionAlgorithms(List.of(tunnel2Phase2EncryptionAlgorithms));
        }

        public Builder tunnel2Phase2IntegrityAlgorithms(@Nullable Output<List<String>> tunnel2Phase2IntegrityAlgorithms) {
            $.tunnel2Phase2IntegrityAlgorithms = tunnel2Phase2IntegrityAlgorithms;
            return this;
        }

        public Builder tunnel2Phase2IntegrityAlgorithms(List<String> tunnel2Phase2IntegrityAlgorithms) {
            return tunnel2Phase2IntegrityAlgorithms(Output.of(tunnel2Phase2IntegrityAlgorithms));
        }

        public Builder tunnel2Phase2IntegrityAlgorithms(String... tunnel2Phase2IntegrityAlgorithms) {
            return tunnel2Phase2IntegrityAlgorithms(List.of(tunnel2Phase2IntegrityAlgorithms));
        }

        public Builder tunnel2Phase2LifetimeSeconds(@Nullable Output<Integer> tunnel2Phase2LifetimeSeconds) {
            $.tunnel2Phase2LifetimeSeconds = tunnel2Phase2LifetimeSeconds;
            return this;
        }

        public Builder tunnel2Phase2LifetimeSeconds(Integer tunnel2Phase2LifetimeSeconds) {
            return tunnel2Phase2LifetimeSeconds(Output.of(tunnel2Phase2LifetimeSeconds));
        }

        public Builder tunnel2PresharedKey(@Nullable Output<String> tunnel2PresharedKey) {
            $.tunnel2PresharedKey = tunnel2PresharedKey;
            return this;
        }

        public Builder tunnel2PresharedKey(String tunnel2PresharedKey) {
            return tunnel2PresharedKey(Output.of(tunnel2PresharedKey));
        }

        public Builder tunnel2RekeyFuzzPercentage(@Nullable Output<Integer> tunnel2RekeyFuzzPercentage) {
            $.tunnel2RekeyFuzzPercentage = tunnel2RekeyFuzzPercentage;
            return this;
        }

        public Builder tunnel2RekeyFuzzPercentage(Integer tunnel2RekeyFuzzPercentage) {
            return tunnel2RekeyFuzzPercentage(Output.of(tunnel2RekeyFuzzPercentage));
        }

        public Builder tunnel2RekeyMarginTimeSeconds(@Nullable Output<Integer> tunnel2RekeyMarginTimeSeconds) {
            $.tunnel2RekeyMarginTimeSeconds = tunnel2RekeyMarginTimeSeconds;
            return this;
        }

        public Builder tunnel2RekeyMarginTimeSeconds(Integer tunnel2RekeyMarginTimeSeconds) {
            return tunnel2RekeyMarginTimeSeconds(Output.of(tunnel2RekeyMarginTimeSeconds));
        }

        public Builder tunnel2ReplayWindowSize(@Nullable Output<Integer> tunnel2ReplayWindowSize) {
            $.tunnel2ReplayWindowSize = tunnel2ReplayWindowSize;
            return this;
        }

        public Builder tunnel2ReplayWindowSize(Integer tunnel2ReplayWindowSize) {
            return tunnel2ReplayWindowSize(Output.of(tunnel2ReplayWindowSize));
        }

        public Builder tunnel2StartupAction(@Nullable Output<String> tunnel2StartupAction) {
            $.tunnel2StartupAction = tunnel2StartupAction;
            return this;
        }

        public Builder tunnel2StartupAction(String tunnel2StartupAction) {
            return tunnel2StartupAction(Output.of(tunnel2StartupAction));
        }

        public Builder tunnel2VgwInsideAddress(@Nullable Output<String> tunnel2VgwInsideAddress) {
            $.tunnel2VgwInsideAddress = tunnel2VgwInsideAddress;
            return this;
        }

        public Builder tunnel2VgwInsideAddress(String tunnel2VgwInsideAddress) {
            return tunnel2VgwInsideAddress(Output.of(tunnel2VgwInsideAddress));
        }

        public Builder tunnelInsideIpVersion(@Nullable Output<String> tunnelInsideIpVersion) {
            $.tunnelInsideIpVersion = tunnelInsideIpVersion;
            return this;
        }

        public Builder tunnelInsideIpVersion(String tunnelInsideIpVersion) {
            return tunnelInsideIpVersion(Output.of(tunnelInsideIpVersion));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder vgwTelemetries(@Nullable Output<List<VpnConnectionVgwTelemetryGetArgs>> vgwTelemetries) {
            $.vgwTelemetries = vgwTelemetries;
            return this;
        }

        public Builder vgwTelemetries(List<VpnConnectionVgwTelemetryGetArgs> vgwTelemetries) {
            return vgwTelemetries(Output.of(vgwTelemetries));
        }

        public Builder vgwTelemetries(VpnConnectionVgwTelemetryGetArgs... vgwTelemetries) {
            return vgwTelemetries(List.of(vgwTelemetries));
        }

        public Builder vpnGatewayId(@Nullable Output<String> vpnGatewayId) {
            $.vpnGatewayId = vpnGatewayId;
            return this;
        }

        public Builder vpnGatewayId(String vpnGatewayId) {
            return vpnGatewayId(Output.of(vpnGatewayId));
        }

        public VpnConnectionState build() {
            return $;
        }
    }

}
